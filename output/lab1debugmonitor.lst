680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 27 Mar 2025      Time: 21:38:10          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  3388      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2A38      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  40EE      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  4AC4      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  4AC8      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4ADE      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  4AE0      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  40EE      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  3732      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  4AE2      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4B1C      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  4B34      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  4B3C      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  4B42      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  4AC4      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  40EE      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  4B46      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  4B1C      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  4B5A      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  4B70      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  4B84      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  40EE      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  4BB4      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  382C      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  3666      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  3732      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  4BE4      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4C0A      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  40EE      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4C2C      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  4C48      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  4C8E      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  4CA0      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  379E      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  4CB2      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; // TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011 // This might need to be 0x53
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while (TestForSPITransmitDataComplete() == 0);
                    1614   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1615          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1616          tst.l     D0
00001122  6602      1617          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1621          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1622          rts
                    1623   ; }
                    1624   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1625   ; void ClearSPIReadFIFO(void) {
                    1626   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1627          link      A6,#-4
                    1628   ; volatile unsigned char dummy;
                    1629   ; while((SPI_Status & 0x01) == 0) {
                    1630   ClearSPIReadFIFO_1:
00001134  1039 0040 1631          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1632          and.b     #1,D0
0000113E  660A      1633          bne.s     ClearSPIReadFIFO_3
                    1634   ; dummy = SPI_Data;
00001140  1D79 0040 1635          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1636          bra       ClearSPIReadFIFO_1
                    1637   ClearSPIReadFIFO_3:
0000114A  4E5E      1638          unlk      A6
0000114C  4E75      1639          rts
                    1640   ; }
                    1641   ; }
                    1642   ; void SPIFlashPollStatusWLE(void) {
                    1643   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char status;
                    1646   ; unsigned char dummy;
                    1647   ; do {
                    1648   SPIFlashPollStatusWLE_1:
                    1649   ; // Start a new read status register command each time
                    1650   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1651          move.b    #254,4227112
00001156  0040 8028 
                    1652   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1653          pea       5
0000115E  4EB8 10C4 1654          jsr       _SPISafeWrite
00001162  584F      1655          addq.w    #4,A7
                    1656   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1657          pea       255
00001168  4EB8 10C4 1658          jsr       _SPISafeWrite
0000116C  584F      1659          addq.w    #4,A7
0000116E  1D40 FFFE 1660          move.b    D0,-2(A6)
                    1661   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1662          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1663          move.b    -2(A6),D0
0000117E  C03C 0002 1664          and.b     #2,D0
00001182  67CE      1665          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1666          unlk      A6
00001186  4E75      1667          rts
                    1668   ; // printf("\r\n WLE Status: %02x \n", status);
                    1669   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1670   ; }
                    1671   ; void SPIFlashPollStatusBusy(void) {
                    1672   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1673          link      A6,#-4
                    1674   ; unsigned char status;
                    1675   ; unsigned char dummy;
                    1676   ; do {
                    1677   SPIFlashPollStatusBusy_1:
                    1678   ; // Start a new read status register command each time
                    1679   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1680          move.b    #254,4227112
00001190  0040 8028 
                    1681   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1682          pea       5
00001198  4EB8 10C4 1683          jsr       _SPISafeWrite
0000119C  584F      1684          addq.w    #4,A7
                    1685   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1686          pea       255
000011A2  4EB8 10C4 1687          jsr       _SPISafeWrite
000011A6  584F      1688          addq.w    #4,A7
000011A8  1D40 FFFE 1689          move.b    D0,-2(A6)
                    1690   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1691          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1692          move.b    -2(A6),D0
000011B8  C03C 0001 1693          and.b     #1,D0
000011BC  66CE      1694          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1695          unlk      A6
000011C0  4E75      1696          rts
                    1697   ; // printf("\r\n Busy Status: %02x \n", status);
                    1698   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011C2  4E56 0000 1707          link      A6,#0
                    1708   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1709          move.l    8(A6),D1
000011CA  C2BC 0000 1710          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1711          move.l    D1,-(A7)
000011D2  4EB8 10C4 1712          jsr       _SPISafeWrite
000011D6  584F      1713          addq.w    #4,A7
                    1714   ; return SPI_Data;
000011D8  1039 0040 1715          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1716          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1717          unlk      A6
000011E6  4E75      1718          rts
                    1719   ; }
                    1720   ; void SPIFlashWriteEnable() {
                    1721   _SPIFlashWriteEnable:
                    1722   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1723          move.b    #254,4227112
000011EC  0040 8028 
                    1724   ; SPISafeWrite(0x06);
000011F0  4878 0006 1725          pea       6
000011F4  4EB8 10C4 1726          jsr       _SPISafeWrite
000011F8  584F      1727          addq.w    #4,A7
                    1728   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1729          move.b    #255,4227112
000011FE  0040 8028 
                    1730   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1731   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1732          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1733          rts
                    1734   ; }
                    1735   ; void SPISendAddress(int c) {
                    1736   _SPISendAddress:
00001208  4E56 0000 1737          link      A6,#0
0000120C  48E7 2020 1738          movem.l   D2/A2,-(A7)
00001210  242E 0008 1739          move.l    8(A6),D2
00001214  45F8 10C4 1740          lea       _SPISafeWrite.L,A2
                    1741   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1742          move.l    D2,D1
0000121A  E081      1743          asr.l     #8,D1
0000121C  E081      1744          asr.l     #8,D1
0000121E  C2BC 0000 1745          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1746          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1747          move.l    D1,-(A7)
0000122C  4E92      1748          jsr       (A2)
0000122E  584F      1749          addq.w    #4,A7
                    1750   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1751          move.l    D2,D1
00001232  E081      1752          asr.l     #8,D1
00001234  C2BC 0000 1753          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1754          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1755          move.l    D1,-(A7)
00001242  4E92      1756          jsr       (A2)
00001244  584F      1757          addq.w    #4,A7
                    1758   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1759          move.l    D2,D1
00001248  C2BC 0000 1760          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1761          and.l     #255,D1
00001252  00FF      
00001254  2F01      1762          move.l    D1,-(A7)
00001256  4E92      1763          jsr       (A2)
00001258  584F      1764          addq.w    #4,A7
0000125A  4CDF 0404 1765          movem.l   (A7)+,D2/A2
0000125E  4E5E      1766          unlk      A6
00001260  4E75      1767          rts
                    1768   ; }
                    1769   ; void SPIFlashPageProgram(int addr) {
                    1770   _SPIFlashPageProgram:
00001262  4E56 FFF8 1771          link      A6,#-8
00001266  2F02      1772          move.l    D2,-(A7)
                    1773   ; unsigned char *sramMemoryPtr;
                    1774   ; int flashAddr = addr - 0x08000000;
00001268  202E 0008 1775          move.l    8(A6),D0
0000126C  0480 0800 1776          sub.l     #134217728,D0
00001270  0000      
00001272  2D40 FFFC 1777          move.l    D0,-4(A6)
                    1778   ; int i;
                    1779   ; SPI_CS = 0xFE;
00001276  13FC 00FE 1780          move.b    #254,4227112
0000127A  0040 8028 
                    1781   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000127E  4878 0002 1782          pea       2
00001282  4EB8 10C4 1783          jsr       _SPISafeWrite
00001286  584F      1784          addq.w    #4,A7
                    1785   ; SPISendAddress(flashAddr);
00001288  2F2E FFFC 1786          move.l    -4(A6),-(A7)
0000128C  4EB8 1208 1787          jsr       _SPISendAddress
00001290  584F      1788          addq.w    #4,A7
                    1789   ; for (i = 0; i < 256; i++) {
00001292  4282      1790          clr.l     D2
                    1791   SPIFlashPageProgram_1:
00001294  0C82 0000 1792          cmp.l     #256,D2
00001298  0100      
0000129A  6C22      1793          bge.s     SPIFlashPageProgram_3
                    1794   ; sramMemoryPtr = (unsigned char*) (addr + i);
0000129C  202E 0008 1795          move.l    8(A6),D0
000012A0  D082      1796          add.l     D2,D0
000012A2  2D40 FFF8 1797          move.l    D0,-8(A6)
                    1798   ; WriteSPIChar(*sramMemoryPtr); // Random value for testing purposes
000012A6  206E FFF8 1799          move.l    -8(A6),A0
000012AA  1210      1800          move.b    (A0),D1
000012AC  C2BC 0000 1801          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1802          move.l    D1,-(A7)
000012B4  4EB8 11C2 1803          jsr       _WriteSPIChar
000012B8  584F      1804          addq.w    #4,A7
000012BA  5282      1805          addq.l    #1,D2
000012BC  60D6      1806          bra       SPIFlashPageProgram_1
                    1807   SPIFlashPageProgram_3:
                    1808   ; // printf("%02x ", *sramMemoryPtr);
                    1809   ; }
                    1810   ; SPI_CS = 0xFF;
000012BE  13FC 00FF 1811          move.b    #255,4227112
000012C2  0040 8028 
                    1812   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1813   ; SPIFlashPollStatusBusy();
000012C6  4EB8 1188 1814          jsr       _SPIFlashPollStatusBusy
000012CA  241F      1815          move.l    (A7)+,D2
000012CC  4E5E      1816          unlk      A6
000012CE  4E75      1817          rts
                    1818   ; }
                    1819   ; void SPIFlashErase(void) {
                    1820   _SPIFlashErase:
                    1821   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1822   ; printf("\nErasing...\n");
000012D0  4879 0000 1823          pea       @m68kde~1_22.L
000012D4  4CE6      
000012D6  4EB9 0000 1824          jsr       _printf
000012DA  40EE      
000012DC  584F      1825          addq.w    #4,A7
                    1826   ; SPI_CS = 0xFE;
000012DE  13FC 00FE 1827          move.b    #254,4227112
000012E2  0040 8028 
                    1828   ; SPISafeWrite(0xC7);
000012E6  4878 00C7 1829          pea       199
000012EA  4EB8 10C4 1830          jsr       _SPISafeWrite
000012EE  584F      1831          addq.w    #4,A7
                    1832   ; SPI_CS = 0xFF;
000012F0  13FC 00FF 1833          move.b    #255,4227112
000012F4  0040 8028 
                    1834   ; SPIFlashPollStatusBusy();
000012F8  4EB8 1188 1835          jsr       _SPIFlashPollStatusBusy
000012FC  4E75      1836          rts
                    1837   ; }
                    1838   ; int SPIFlashRead() {
                    1839   _SPIFlashRead:
000012FE  4E56 FFFC 1840          link      A6,#-4
00001302  48E7 3000 1841          movem.l   D2/D3,-(A7)
                    1842   ; unsigned char readData;
                    1843   ; unsigned char *sramMemoryPtr;
                    1844   ; int addr;
                    1845   ; ClearSPIReadFIFO();
00001306  4EB8 1130 1846          jsr       _ClearSPIReadFIFO
                    1847   ; SPI_CS = 0xFE;
0000130A  13FC 00FE 1848          move.b    #254,4227112
0000130E  0040 8028 
                    1849   ; SPISafeWrite(0x03);
00001312  4878 0003 1850          pea       3
00001316  4EB8 10C4 1851          jsr       _SPISafeWrite
0000131A  584F      1852          addq.w    #4,A7
                    1853   ; SPISendAddress(0x0);
0000131C  42A7      1854          clr.l     -(A7)
0000131E  4EB8 1208 1855          jsr       _SPISendAddress
00001322  584F      1856          addq.w    #4,A7
                    1857   ; for (addr = 0x08000000; addr < (0x08040000); addr ++) {
00001324  243C 0800 1858          move.l    #134217728,D2
00001328  0000      
                    1859   SPIFlashRead_1:
0000132A  0C82 0804 1860          cmp.l     #134479872,D2
0000132E  0000      
00001330  6C1A      1861          bge.s     SPIFlashRead_3
                    1862   ; sramMemoryPtr = (unsigned char*) addr;
00001332  2D42 FFFC 1863          move.l    D2,-4(A6)
                    1864   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001336  4878 00FF 1865          pea       255
0000133A  4EB8 10C4 1866          jsr       _SPISafeWrite
0000133E  584F      1867          addq.w    #4,A7
00001340  1600      1868          move.b    D0,D3
                    1869   ; *sramMemoryPtr = readData;
00001342  206E FFFC 1870          move.l    -4(A6),A0
00001346  1083      1871          move.b    D3,(A0)
00001348  5282      1872          addq.l    #1,D2
0000134A  60DE      1873          bra       SPIFlashRead_1
                    1874   SPIFlashRead_3:
                    1875   ; }
                    1876   ; SPI_CS = 0xFF;
0000134C  13FC 00FF 1877          move.b    #255,4227112
00001350  0040 8028 
                    1878   ; SPIFlashPollStatusBusy();
00001354  4EB8 1188 1879          jsr       _SPIFlashPollStatusBusy
                    1880   ; return readData;
00001358  C6BC 0000 1881          and.l     #255,D3
0000135C  00FF      
0000135E  2003      1882          move.l    D3,D0
00001360  4CDF 000C 1883          movem.l   (A7)+,D2/D3
00001364  4E5E      1884          unlk      A6
00001366  4E75      1885          rts
                    1886   ; }
                    1887   ; /*******************************************************************
                    1888   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1889   ; ********************************************************************/
                    1890   ; void ProgramFlashChip(void)
                    1891   ; {
                    1892   _ProgramFlashChip:
00001368  4E56 FFFC 1893          link      A6,#-4
                    1894   ; int addr;
                    1895   ; SPIFlashPollStatusBusy();
0000136C  4EB8 1188 1896          jsr       _SPIFlashPollStatusBusy
                    1897   ; SPIFlashWriteEnable();
00001370  4EB8 11E8 1898          jsr       _SPIFlashWriteEnable
                    1899   ; SPIFlashErase();
00001374  4EB8 12D0 1900          jsr       _SPIFlashErase
                    1901   ; // 256KB = 262144 bytes (0x40000)
                    1902   ; // We need to write one page at a time (256 bytes at a time)
                    1903   ; // This code writes the user program from DRAM to FLASH
                    1904   ; // printf("\r\n Starting Programming...");
                    1905   ; // for (addr = 0x08000000; addr < (0x08040000); addr += 256) {
                    1906   ; //     SPIFlashWriteEnable(); 
                    1907   ; //     // printf("\r\n Addr: %08x \n", addr);
                    1908   ; //     SPIFlashPageProgram(addr);
                    1909   ; // }
                    1910   ; printf("\r\n Programming Complete!");
00001378  4879 0000 1911          pea       @m68kde~1_23.L
0000137C  4CF4      
0000137E  4EB9 0000 1912          jsr       _printf
00001382  40EE      
00001384  584F      1913          addq.w    #4,A7
00001386  4E5E      1914          unlk      A6
00001388  4E75      1915          rts
                    1916   ; }
                    1917   ; /*************************************************************************
                    1918   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1919   ; **************************************************************************/
                    1920   ; void LoadFromFlashChip(void)
                    1921   ; {
                    1922   _LoadFromFlashChip:
0000138A  4E56 FFFC 1923          link      A6,#-4
                    1924   ; int readData;
                    1925   ; printf("\r\n Loading Program From SPI Flash....") ;
0000138E  4879 0000 1926          pea       @m68kde~1_24.L
00001392  4D0E      
00001394  4EB9 0000 1927          jsr       _printf
00001398  40EE      
0000139A  584F      1928          addq.w    #4,A7
                    1929   ; SPIFlashPollStatusBusy();
0000139C  4EB8 1188 1930          jsr       _SPIFlashPollStatusBusy
                    1931   ; readData = SPIFlashRead();
000013A0  4EB8 12FE 1932          jsr       _SPIFlashRead
000013A4  2D40 FFFC 1933          move.l    D0,-4(A6)
                    1934   ; printf("\r\n Read Data: %08x \n", readData);
000013A8  2F2E FFFC 1935          move.l    -4(A6),-(A7)
000013AC  4879 0000 1936          pea       @m68kde~1_25.L
000013B0  4D34      
000013B2  4EB9 0000 1937          jsr       _printf
000013B6  40EE      
000013B8  504F      1938          addq.w    #8,A7
000013BA  4E5E      1939          unlk      A6
000013BC  4E75      1940          rts
                    1941   ; }
                    1942   ; void printBinary(unsigned char value) {
                    1943   _printBinary:
000013BE  4E56 0000 1944          link      A6,#0
000013C2  48E7 2020 1945          movem.l   D2/A2,-(A7)
000013C6  45F9 0000 1946          lea       _printf.L,A2
000013CA  40EE      
                    1947   ; int i;
                    1948   ; printf("IIC_CRSR Transmit (Binary): ");
000013CC  4879 0000 1949          pea       @m68kde~1_26.L
000013D0  4D4A      
000013D2  4E92      1950          jsr       (A2)
000013D4  584F      1951          addq.w    #4,A7
                    1952   ; for (i = 7; i >= 0; i--) { // Loop through each bit (from MSB to LSB)
000013D6  7407      1953          moveq     #7,D2
                    1954   printBinary_1:
000013D8  0C82 0000 1955          cmp.l     #0,D2
000013DC  0000      
000013DE  6D22      1956          blt.s     printBinary_3
                    1957   ; printf("%d", (value >> i) & 1); // Shift and mask to extract each bit
000013E0  122E 000B 1958          move.b    11(A6),D1
000013E4  C2BC 0000 1959          and.l     #255,D1
000013E8  00FF      
000013EA  E4A1      1960          asr.l     D2,D1
000013EC  C2BC 0000 1961          and.l     #1,D1
000013F0  0001      
000013F2  2F01      1962          move.l    D1,-(A7)
000013F4  4879 0000 1963          pea       @m68kde~1_27.L
000013F8  4D68      
000013FA  4E92      1964          jsr       (A2)
000013FC  504F      1965          addq.w    #8,A7
000013FE  5382      1966          subq.l    #1,D2
00001400  60D6      1967          bra       printBinary_1
                    1968   printBinary_3:
                    1969   ; }
                    1970   ; printf("\n");
00001402  4879 0000 1971          pea       @m68kde~1_28.L
00001406  4D6C      
00001408  4E92      1972          jsr       (A2)
0000140A  584F      1973          addq.w    #4,A7
0000140C  4CDF 0404 1974          movem.l   (A7)+,D2/A2
00001410  4E5E      1975          unlk      A6
00001412  4E75      1976          rts
                    1977   ; }
                    1978   ; void IICCoreEnable() {
                    1979   _IICCoreEnable:
                    1980   ; IIC_CTR |= 0x80;     // Enable I2C core in control register (1000_0000)
00001414  0039 0080 1981          or.b      #128,4227076
00001418  0040 8004 
0000141C  4E75      1982          rts
                    1983   ; }
                    1984   ; void IICCoreDisable() {
                    1985   _IICCoreDisable:
                    1986   ; IIC_CTR &= 0x7F;    // Disable I2C core in control register (0011_1111)
0000141E  0239 007F 1987          and.b     #127,4227076
00001422  0040 8004 
00001426  4E75      1988          rts
                    1989   ; }
                    1990   ; // I2C Driver Functions
                    1991   ; void IIC_Init(void) {
                    1992   _IIC_Init:
                    1993   ; IIC_PRER_LO = 0x59;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001428  13FC 0059 1994          move.b    #89,4227072
0000142C  0040 8000 
                    1995   ; IIC_PRER_HI = 0x00;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001430  4239 0040 1996          clr.b     4227074
00001434  8002      
                    1997   ; IIC_CTR &= 0xBF;     // Disable interrupt in control register (1011_1111)
00001436  0239 00BF 1998          and.b     #191,4227076
0000143A  0040 8004 
                    1999   ; IICCoreEnable();
0000143E  4EB8 1414 2000          jsr       _IICCoreEnable
00001442  4E75      2001          rts
                    2002   ; }
                    2003   ; void wait5ms(void) {
                    2004   _wait5ms:
00001444  2F02      2005          move.l    D2,-(A7)
                    2006   ; int i;
                    2007   ; for (i = 0; i < 10000; i++); // Wait for 5 ms
00001446  4282      2008          clr.l     D2
                    2009   wait5ms_1:
00001448  0C82 0000 2010          cmp.l     #10000,D2
0000144C  2710      
0000144E  6C04      2011          bge.s     wait5ms_3
00001450  5282      2012          addq.l    #1,D2
00001452  60F4      2013          bra       wait5ms_1
                    2014   wait5ms_3:
00001454  241F      2015          move.l    (A7)+,D2
00001456  4E75      2016          rts
                    2017   ; }
                    2018   ; void checkTIP() {
                    2019   _checkTIP:
                    2020   ; while (IIC_CRSR & TIP);
                    2021   checkTIP_1:
00001458  1039 0040 2022          move.b    4227080,D0
0000145C  8008      
0000145E  C03C 0002 2023          and.b     #2,D0
00001462  6702      2024          beq.s     checkTIP_3
00001464  60F2      2025          bra       checkTIP_1
                    2026   checkTIP_3:
00001466  4E75      2027          rts
                    2028   ; }
                    2029   ; void checkAck() {
                    2030   _checkAck:
                    2031   ; while ((IIC_CRSR & RXACK) == 1);
                    2032   checkAck_1:
00001468  1039 0040 2033          move.b    4227080,D0
0000146C  8008      
0000146E  C07C 00FF 2034          and.w     #255,D0
00001472  C07C 0080 2035          and.w     #128,D0
00001476  0C40 0001 2036          cmp.w     #1,D0
0000147A  6602      2037          bne.s     checkAck_3
0000147C  60EA      2038          bra       checkAck_1
                    2039   checkAck_3:
0000147E  4E75      2040          rts
                    2041   ; }
                    2042   ; void IICStopCondition() {
                    2043   _IICStopCondition:
                    2044   ; IIC_CRSR |= STOP | READ | IACK; // STOP + READ + IACK
00001480  0039 0061 2045          or.b      #97,4227080
00001484  0040 8008 
                    2046   ; checkTIP();
00001488  4EB8 1458 2047          jsr       _checkTIP
0000148C  4E75      2048          rts
                    2049   ; }
                    2050   ; void IICStartCondition(int rwBit) {
                    2051   _IICStartCondition:
0000148E  4E56 0000 2052          link      A6,#0
                    2053   ; if (rwBit == 0) {
00001492  202E 0008 2054          move.l    8(A6),D0
00001496  660A      2055          bne.s     IICStartCondition_1
                    2056   ; IIC_CRSR |= START | WRITE | IACK; // START + WRITE + IACK
00001498  0039 0091 2057          or.b      #145,4227080
0000149C  0040 8008 
000014A0  6008      2058          bra.s     IICStartCondition_2
                    2059   IICStartCondition_1:
                    2060   ; } else {
                    2061   ; IIC_CRSR |= START | READ | IACK; // Start condition with read bit set
000014A2  0039 00A1 2062          or.b      #161,4227080
000014A6  0040 8008 
                    2063   IICStartCondition_2:
                    2064   ; }
                    2065   ; checkTIP();
000014AA  4EB8 1458 2066          jsr       _checkTIP
                    2067   ; checkAck();
000014AE  4EB8 1468 2068          jsr       _checkAck
000014B2  4E5E      2069          unlk      A6
000014B4  4E75      2070          rts
                    2071   ; }
                    2072   ; // EEPROM Address: 101000{B0} 
                    2073   ; // EEPROM Specific Functions
                    2074   ; void EEPROMByteWrite(unsigned int data, unsigned int deviceAddr, unsigned int memoryAddr) {
                    2075   _EEPROMByteWrite:
000014B6  4E56 0000 2076          link      A6,#0
000014BA  48E7 0030 2077          movem.l   A2/A3,-(A7)
000014BE  45F8 1458 2078          lea       _checkTIP.L,A2
000014C2  47F8 1468 2079          lea       _checkAck.L,A3
                    2080   ; // Check if there is a transmission in progress
                    2081   ; // IICCoreEnable();
                    2082   ; checkTIP();
000014C6  4E92      2083          jsr       (A2)
                    2084   ; // Set the start condition
                    2085   ; // IICStartCondition(0);
                    2086   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2087   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2088   ; // Control code, chip select, and block select (ie: Slave Address) and the R/W bit (== 0) are sent
                    2089   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000014C8  202E 000C 2090          move.l    12(A6),D0
000014CC  E388      2091          lsl.l     #1,D0
000014CE  C0BC 0000 2092          and.l     #254,D0
000014D2  00FE      
000014D4  13C0 0040 2093          move.b    D0,4227078
000014D8  8006      
                    2094   ; IIC_CRSR = START | WRITE | IACK;
000014DA  13FC 0091 2095          move.b    #145,4227080
000014DE  0040 8008 
                    2096   ; // printf("Sent Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2097   ; checkTIP();
000014E2  4E92      2098          jsr       (A2)
                    2099   ; checkAck();
000014E4  4E93      2100          jsr       (A3)
                    2101   ; // printf("Status Register 2: %x\n", IIC_CRSR);
                    2102   ; // Check for ACK
                    2103   ; // printf("\r\n Slave Address Ack Status: : %d\n", checkAck()); //TIP is checked in checkAck function
                    2104   ; // Send the high-order byte of the address
                    2105   ; IIC_TXRX = (memoryAddr >> 8) & 0xFF;
000014E6  202E 0010 2106          move.l    16(A6),D0
000014EA  E088      2107          lsr.l     #8,D0
000014EC  C0BC 0000 2108          and.l     #255,D0
000014F0  00FF      
000014F2  13C0 0040 2109          move.b    D0,4227078
000014F6  8006      
                    2110   ; IIC_CRSR = WRITE | IACK;
000014F8  13FC 0011 2111          move.b    #17,4227080
000014FC  0040 8008 
                    2112   ; checkTIP();
00001500  4E92      2113          jsr       (A2)
                    2114   ; checkAck();
00001502  4E93      2115          jsr       (A3)
                    2116   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2117   ; // Send the lower-order byte of the address
                    2118   ; IIC_TXRX = (memoryAddr & 0xFF);
00001504  202E 0010 2119          move.l    16(A6),D0
00001508  C0BC 0000 2120          and.l     #255,D0
0000150C  00FF      
0000150E  13C0 0040 2121          move.b    D0,4227078
00001512  8006      
                    2122   ; IIC_CRSR = WRITE | IACK;
00001514  13FC 0011 2123          move.b    #17,4227080
00001518  0040 8008 
                    2124   ; checkTIP();
0000151C  4E92      2125          jsr       (A2)
                    2126   ; checkAck();
0000151E  4E93      2127          jsr       (A3)
                    2128   ; //printf("Sent Lower Memory Byte: %02x\n", memoryAddr & 0xFF);
                    2129   ; // printf("Status Register 4: %x\n", IIC_CRSR);
                    2130   ; // Transmit byte to be written
                    2131   ; IIC_TXRX = 0xAA; //data;
00001520  13FC 00AA 2132          move.b    #170,4227078
00001524  0040 8006 
                    2133   ; IIC_CRSR = STOP | WRITE | IACK;
00001528  13FC 0051 2134          move.b    #81,4227080
0000152C  0040 8008 
                    2135   ; checkTIP();
00001530  4E92      2136          jsr       (A2)
                    2137   ; checkAck();
00001532  4E93      2138          jsr       (A3)
                    2139   ; wait5ms();
00001534  4EB8 1444 2140          jsr       _wait5ms
00001538  4CDF 0C00 2141          movem.l   (A7)+,A2/A3
0000153C  4E5E      2142          unlk      A6
0000153E  4E75      2143          rts
                    2144   ; // printf("Sent Data: %02x\n", data);
                    2145   ; // printf("Sent Stop Condition");
                    2146   ; // printf("Status Register 6: %x\n", IIC_CRSR);
                    2147   ; // IICCoreDisable();
                    2148   ; //printf("\r\nI2C Byte Write Complete\n");
                    2149   ; }
                    2150   ; void EEPROMFlashPageWrite(int* data, unsigned int startingGlobalAddress, unsigned int numBytes) {
                    2151   _EEPROMFlashPageWrite:
00001540  4E56 FFFC 2152          link      A6,#-4
00001544  48E7 3F38 2153          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4,-(A7)
00001548  282E 000C 2154          move.l    12(A6),D4
0000154C  45F8 1458 2155          lea       _checkTIP.L,A2
00001550  47F8 1468 2156          lea       _checkAck.L,A3
00001554  286E 0010 2157          move.l    16(A6),A4
                    2158   ; unsigned int currentAddress = startingGlobalAddress; 
00001558  2404      2159          move.l    D4,D2
                    2160   ; unsigned int endAddress = startingGlobalAddress + numBytes;
0000155A  2004      2161          move.l    D4,D0
0000155C  D08C      2162          add.l     A4,D0
0000155E  2C00      2163          move.l    D0,D6
                    2164   ; unsigned int blockAddress;
                    2165   ; unsigned int deviceAddress;
                    2166   ; unsigned int pageFlag;
                    2167   ; unsigned int currIndex = 0;
00001560  42AE FFFC 2168          clr.l     -4(A6)
                    2169   ; startingGlobalAddress = startingGlobalAddress & 0xFFFF; // Mask to 16 bits
00001564  C8BC 0000 2170          and.l     #65535,D4
00001568  FFFF      
                    2171   ; currentAddress = startingGlobalAddress; 
0000156A  2404      2172          move.l    D4,D2
                    2173   ; endAddress = startingGlobalAddress + numBytes;
0000156C  2004      2174          move.l    D4,D0
0000156E  D08C      2175          add.l     A4,D0
00001570  2C00      2176          move.l    D0,D6
                    2177   ; printf("EEPROM Flash Page Write: Start Address: 0x%x, numbytes: %d\n", startingGlobalAddress, numBytes);
00001572  2F0C      2178          move.l    A4,-(A7)
00001574  2F04      2179          move.l    D4,-(A7)
00001576  4879 0000 2180          pea       @m68kde~1_29.L
0000157A  4D6E      
0000157C  4EB9 0000 2181          jsr       _printf
00001580  40EE      
00001582  DEFC 000C 2182          add.w     #12,A7
                    2183   ; if (currentAddress < 0x10000) {
00001586  0C82 0001 2184          cmp.l     #65536,D2
0000158A  0000      
0000158C  6406      2185          bhs.s     EEPROMFlashPageWrite_1
                    2186   ; blockAddress = startingGlobalAddress; // Lower 64KB block
0000158E  2604      2187          move.l    D4,D3
                    2188   ; deviceAddress = EEPROM0;
00001590  7A50      2189          moveq     #80,D5
00001592  600C      2190          bra.s     EEPROMFlashPageWrite_2
                    2191   EEPROMFlashPageWrite_1:
                    2192   ; } else {
                    2193   ; blockAddress = startingGlobalAddress - 0x10000; // Upper 64KB block
00001594  2004      2194          move.l    D4,D0
00001596  0480 0001 2195          sub.l     #65536,D0
0000159A  0000      
0000159C  2600      2196          move.l    D0,D3
                    2197   ; deviceAddress = EEPROM1;
0000159E  7A51      2198          moveq     #81,D5
                    2199   EEPROMFlashPageWrite_2:
                    2200   ; }
                    2201   ; checkTIP();
000015A0  4E92      2202          jsr       (A2)
                    2203   ; while (currentAddress < endAddress) {
                    2204   EEPROMFlashPageWrite_3:
000015A2  B486      2205          cmp.l     D6,D2
000015A4  6400 00E8 2206          bhs       EEPROMFlashPageWrite_5
                    2207   ; // printf("Entered New Page, Current Address: %d, End Address: %d\n", currentAddress, endAddress);
                    2208   ; if (currentAddress == 0x10000) {
000015A8  0C82 0001 2209          cmp.l     #65536,D2
000015AC  0000      
000015AE  6604      2210          bne.s     EEPROMFlashPageWrite_6
                    2211   ; blockAddress = 0; // Reset to beginning of Block 1
000015B0  4283      2212          clr.l     D3
000015B2  6016      2213          bra.s     EEPROMFlashPageWrite_7
                    2214   EEPROMFlashPageWrite_6:
                    2215   ; } 
                    2216   ; else {
                    2217   ; blockAddress = (currentAddress < 0x10000) ? currentAddress : (currentAddress - 0x10000);
000015B4  0C82 0001 2218          cmp.l     #65536,D2
000015B8  0000      
000015BA  6404      2219          bhs.s     EEPROMFlashPageWrite_8
000015BC  2002      2220          move.l    D2,D0
000015BE  6008      2221          bra.s     EEPROMFlashPageWrite_9
                    2222   EEPROMFlashPageWrite_8:
000015C0  2002      2223          move.l    D2,D0
000015C2  0480 0001 2224          sub.l     #65536,D0
000015C6  0000      
                    2225   EEPROMFlashPageWrite_9:
000015C8  2600      2226          move.l    D0,D3
                    2227   EEPROMFlashPageWrite_7:
                    2228   ; }    
                    2229   ; pageFlag = 1;
000015CA  7E01      2230          moveq     #1,D7
                    2231   ; // START condition
                    2232   ; IIC_TXRX = (deviceAddress << 1) & 0xFE;    // Upper 64KB block
000015CC  2005      2233          move.l    D5,D0
000015CE  E388      2234          lsl.l     #1,D0
000015D0  C0BC 0000 2235          and.l     #254,D0
000015D4  00FE      
000015D6  13C0 0040 2236          move.b    D0,4227078
000015DA  8006      
                    2237   ; IIC_CRSR = START | WRITE | IACK;
000015DC  13FC 0091 2238          move.b    #145,4227080
000015E0  0040 8008 
                    2239   ; checkTIP();
000015E4  4E92      2240          jsr       (A2)
                    2241   ; checkAck();
000015E6  4E93      2242          jsr       (A3)
                    2243   ; // Send the two address bytes
                    2244   ; // Send the high-order byte of the address
                    2245   ; IIC_TXRX = (blockAddress >> 8) & 0xFF;
000015E8  2003      2246          move.l    D3,D0
000015EA  E088      2247          lsr.l     #8,D0
000015EC  C0BC 0000 2248          and.l     #255,D0
000015F0  00FF      
000015F2  13C0 0040 2249          move.b    D0,4227078
000015F6  8006      
                    2250   ; IIC_CRSR = WRITE | IACK;
000015F8  13FC 0011 2251          move.b    #17,4227080
000015FC  0040 8008 
                    2252   ; checkTIP();
00001600  4E92      2253          jsr       (A2)
                    2254   ; checkAck();
00001602  4E93      2255          jsr       (A3)
                    2256   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2257   ; // Send the lower-order byte of the address
                    2258   ; IIC_TXRX = (blockAddress & 0xFF);
00001604  2003      2259          move.l    D3,D0
00001606  C0BC 0000 2260          and.l     #255,D0
0000160A  00FF      
0000160C  13C0 0040 2261          move.b    D0,4227078
00001610  8006      
                    2262   ; IIC_CRSR = WRITE | IACK;
00001612  13FC 0011 2263          move.b    #17,4227080
00001616  0040 8008 
                    2264   ; checkTIP();
0000161A  4E92      2265          jsr       (A2)
                    2266   ; checkAck();
0000161C  4E93      2267          jsr       (A3)
                    2268   ; while (pageFlag) {        
                    2269   EEPROMFlashPageWrite_10:
0000161E  4A87      2270          tst.l     D7
00001620  6700 0068 2271          beq       EEPROMFlashPageWrite_12
                    2272   ; IIC_TXRX = 0xAD; //data[currIndex];
00001624  13FC 00AD 2273          move.b    #173,4227078
00001628  0040 8006 
                    2274   ; if (currentAddress == 0xFFFF) {
0000162C  0C82 0000 2275          cmp.l     #65535,D2
00001630  FFFF      
00001632  6602      2276          bne.s     EEPROMFlashPageWrite_13
                    2277   ; deviceAddress = EEPROM1;  // Switch to next device for next byte
00001634  7A51      2278          moveq     #81,D5
                    2279   EEPROMFlashPageWrite_13:
                    2280   ; }
                    2281   ; if (blockAddress % 128 == 127 || currentAddress == endAddress - 1 || currentAddress == 0xFFFF) {
00001636  2F03      2282          move.l    D3,-(A7)
00001638  4878 0080 2283          pea       128
0000163C  4EB9 0000 2284          jsr       ULDIV
00001640  3654      
00001642  202F 0004 2285          move.l    4(A7),D0
00001646  504F      2286          addq.w    #8,A7
00001648  0C80 0000 2287          cmp.l     #127,D0
0000164C  007F      
0000164E  6710      2288          beq.s     EEPROMFlashPageWrite_17
00001650  2006      2289          move.l    D6,D0
00001652  5380      2290          subq.l    #1,D0
00001654  B480      2291          cmp.l     D0,D2
00001656  6708      2292          beq.s     EEPROMFlashPageWrite_17
00001658  0C82 0000 2293          cmp.l     #65535,D2
0000165C  FFFF      
0000165E  6614      2294          bne.s     EEPROMFlashPageWrite_15
                    2295   EEPROMFlashPageWrite_17:
                    2296   ; IIC_CRSR = STOP | WRITE | IACK;
00001660  13FC 0051 2297          move.b    #81,4227080
00001664  0040 8008 
                    2298   ; pageFlag = 0;
00001668  7E00      2299          moveq     #0,D7
                    2300   ; checkTIP();
0000166A  4E92      2301          jsr       (A2)
                    2302   ; checkAck();
0000166C  4E93      2303          jsr       (A3)
                    2304   ; wait5ms();
0000166E  4EB8 1444 2305          jsr       _wait5ms
00001672  600C      2306          bra.s     EEPROMFlashPageWrite_16
                    2307   EEPROMFlashPageWrite_15:
                    2308   ; } else {
                    2309   ; IIC_CRSR = WRITE | IACK;
00001674  13FC 0011 2310          move.b    #17,4227080
00001678  0040 8008 
                    2311   ; checkTIP();
0000167C  4E92      2312          jsr       (A2)
                    2313   ; checkAck();
0000167E  4E93      2314          jsr       (A3)
                    2315   EEPROMFlashPageWrite_16:
                    2316   ; }
                    2317   ; // ("Current Address: %d, End Address: %d, Block Address: %d\n", currentAddress, endAddress, blockAddress);
                    2318   ; currIndex++;
00001680  52AE FFFC 2319          addq.l    #1,-4(A6)
                    2320   ; currentAddress++;
00001684  5282      2321          addq.l    #1,D2
                    2322   ; blockAddress++;  // Increment blockAddress WITH currentAddress
00001686  5283      2323          addq.l    #1,D3
00001688  6094      2324          bra       EEPROMFlashPageWrite_10
                    2325   EEPROMFlashPageWrite_12:
0000168A  6000 FF16 2326          bra       EEPROMFlashPageWrite_3
                    2327   EEPROMFlashPageWrite_5:
0000168E  4CDF 1CFC 2328          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4
00001692  4E5E      2329          unlk      A6
00001694  4E75      2330          rts
                    2331   ; }
                    2332   ; }
                    2333   ; }
                    2334   ; int EEPROMRandomRead(unsigned int deviceAddr, unsigned readAddr) {
                    2335   _EEPROMRandomRead:
00001696  4E56 FFFC 2336          link      A6,#-4
0000169A  48E7 0030 2337          movem.l   A2/A3,-(A7)
0000169E  45F8 1458 2338          lea       _checkTIP.L,A2
000016A2  47F8 1468 2339          lea       _checkAck.L,A3
                    2340   ; unsigned int readData;
                    2341   ; // Wait for bus to be idle
                    2342   ; // IICCoreEnable(); 
                    2343   ; checkTIP(); 
000016A6  4E92      2344          jsr       (A2)
                    2345   ; // Print TXRX register
                    2346   ; // Send start condition for a write
                    2347   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000016A8  202E 0008 2348          move.l    8(A6),D0
000016AC  E388      2349          lsl.l     #1,D0
000016AE  C0BC 0000 2350          and.l     #254,D0
000016B2  00FE      
000016B4  13C0 0040 2351          move.b    D0,4227078
000016B8  8006      
                    2352   ; IIC_CRSR = START | WRITE | IACK;
000016BA  13FC 0091 2353          move.b    #145,4227080
000016BE  0040 8008 
                    2354   ; checkTIP();
000016C2  4E92      2355          jsr       (A2)
                    2356   ; checkAck();
000016C4  4E93      2357          jsr       (A3)
                    2358   ; //printf("Sending Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2359   ; // Send the high-order byte of the address
                    2360   ; IIC_TXRX = (readAddr >> 8) & 0xFF;
000016C6  202E 000C 2361          move.l    12(A6),D0
000016CA  E088      2362          lsr.l     #8,D0
000016CC  C0BC 0000 2363          and.l     #255,D0
000016D0  00FF      
000016D2  13C0 0040 2364          move.b    D0,4227078
000016D6  8006      
                    2365   ; IIC_CRSR = WRITE | IACK;
000016D8  13FC 0011 2366          move.b    #17,4227080
000016DC  0040 8008 
                    2367   ; //printf("Sent Upper Memory Byte: %02x\n", readAddr >> 8);
                    2368   ; checkTIP();
000016E0  4E92      2369          jsr       (A2)
                    2370   ; checkAck();
000016E2  4E93      2371          jsr       (A3)
                    2372   ; // Send the low-order byte of the address
                    2373   ; IIC_TXRX = (readAddr & 0xFF);
000016E4  202E 000C 2374          move.l    12(A6),D0
000016E8  C0BC 0000 2375          and.l     #255,D0
000016EC  00FF      
000016EE  13C0 0040 2376          move.b    D0,4227078
000016F2  8006      
                    2377   ; IIC_CRSR = WRITE | IACK;
000016F4  13FC 0011 2378          move.b    #17,4227080
000016F8  0040 8008 
                    2379   ; //printf("Sent Lower Memory Byte: %02x\n", readAddr & 0xFF);
                    2380   ; checkTIP();
000016FC  4E92      2381          jsr       (A2)
                    2382   ; checkAck();
000016FE  4E93      2383          jsr       (A3)
                    2384   ; // send START condition again followed by slave address with R/W set to 1
                    2385   ; IIC_TXRX = ((deviceAddr << 1) | 0x01);
00001700  202E 0008 2386          move.l    8(A6),D0
00001704  E388      2387          lsl.l     #1,D0
00001706  80BC 0000 2388          or.l      #1,D0
0000170A  0001      
0000170C  13C0 0040 2389          move.b    D0,4227078
00001710  8006      
                    2390   ; IIC_CRSR = START | WRITE | IACK;
00001712  13FC 0091 2391          move.b    #145,4227080
00001716  0040 8008 
                    2392   ; checkTIP();
0000171A  4E92      2393          jsr       (A2)
                    2394   ; checkAck();
0000171C  4E93      2395          jsr       (A3)
                    2396   ; // IICStopCondition();
                    2397   ; IIC_CRSR = STOP | READ | IACK | NACK; // STOP + READ + IACK + NACK
0000171E  13FC 0069 2398          move.b    #105,4227080
00001722  0040 8008 
                    2399   ; checkTIP();
00001726  4E92      2400          jsr       (A2)
                    2401   ; // Check if IF flag is sent, and if so read the data
                    2402   ; while (!(IIC_CRSR & 0x1));
                    2403   EEPROMRandomRead_1:
00001728  1039 0040 2404          move.b    4227080,D0
0000172C  8008      
0000172E  C03C 0001 2405          and.b     #1,D0
00001732  6602      2406          bne.s     EEPROMRandomRead_3
00001734  60F2      2407          bra       EEPROMRandomRead_1
                    2408   EEPROMRandomRead_3:
                    2409   ; IIC_CRSR = 0;
00001736  4239 0040 2410          clr.b     4227080
0000173A  8008      
                    2411   ; readData = IIC_TXRX;
0000173C  1039 0040 2412          move.b    4227078,D0
00001740  8006      
00001742  C0BC 0000 2413          and.l     #255,D0
00001746  00FF      
00001748  2D40 FFFC 2414          move.l    D0,-4(A6)
                    2415   ; return readData;    
0000174C  202E FFFC 2416          move.l    -4(A6),D0
00001750  4CDF 0C00 2417          movem.l   (A7)+,A2/A3
00001754  4E5E      2418          unlk      A6
00001756  4E75      2419          rts
                    2420   ; }
                    2421   ; void EEPROMReadBlock0(unsigned int startAddr, int* readLen) {
                    2422   _EEPROMReadBlock0:
00001758  4E56 FFFC 2423          link      A6,#-4
0000175C  48E7 3C30 2424          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00001760  45F8 1458 2425          lea       _checkTIP.L,A2
00001764  47F8 1468 2426          lea       _checkAck.L,A3
00001768  262E 0008 2427          move.l    8(A6),D3
                    2428   ; unsigned int currAddr;
                    2429   ; unsigned int endAddr;
                    2430   ; unsigned int readData;
                    2431   ; int exitFlag = 0;
0000176C  4285      2432          clr.l     D5
                    2433   ; startAddr = startAddr & 0xFFFF; // Mask to 16 bits
0000176E  C6BC 0000 2434          and.l     #65535,D3
00001772  FFFF      
                    2435   ; currAddr = startAddr;
00001774  2403      2436          move.l    D3,D2
                    2437   ; endAddr = startAddr + *readLen;
00001776  2003      2438          move.l    D3,D0
00001778  206E 000C 2439          move.l    12(A6),A0
0000177C  D090      2440          add.l     (A0),D0
0000177E  2800      2441          move.l    D0,D4
                    2442   ; //printf("Start Addr: %d\n Curr Addr: %d, Read Len: %d\n", startAddr, currAddr, *readLen);
                    2443   ; checkTIP();
00001780  4E92      2444          jsr       (A2)
                    2445   ; IIC_TXRX = ((EEPROM0 << 1) & 0xFE); // Send EEPROM address with write bit
00001782  13FC 00A0 2446          move.b    #160,4227078
00001786  0040 8006 
                    2447   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
0000178A  13FC 0091 2448          move.b    #145,4227080
0000178E  0040 8008 
                    2449   ; checkTIP();
00001792  4E92      2450          jsr       (A2)
                    2451   ; checkAck(); 
00001794  4E93      2452          jsr       (A3)
                    2453   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
00001796  2002      2454          move.l    D2,D0
00001798  E088      2455          lsr.l     #8,D0
0000179A  C0BC 0000 2456          and.l     #255,D0
0000179E  00FF      
000017A0  13C0 0040 2457          move.b    D0,4227078
000017A4  8006      
                    2458   ; IIC_CRSR = WRITE | IACK; // Write command
000017A6  13FC 0011 2459          move.b    #17,4227080
000017AA  0040 8008 
                    2460   ; checkTIP();
000017AE  4E92      2461          jsr       (A2)
                    2462   ; checkAck();
000017B0  4E93      2463          jsr       (A3)
                    2464   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
000017B2  2002      2465          move.l    D2,D0
000017B4  C0BC 0000 2466          and.l     #255,D0
000017B8  00FF      
000017BA  13C0 0040 2467          move.b    D0,4227078
000017BE  8006      
                    2468   ; IIC_CRSR = WRITE | IACK; // Write command
000017C0  13FC 0011 2469          move.b    #17,4227080
000017C4  0040 8008 
                    2470   ; checkTIP();
000017C8  4E92      2471          jsr       (A2)
                    2472   ; checkAck();
000017CA  4E93      2473          jsr       (A3)
                    2474   ; // Repeated start condition here:
                    2475   ; IIC_TXRX = ((EEPROM0 << 1) | 0x01); // (A3) Send EEPROM address with read bit
000017CC  13FC 00A1 2476          move.b    #161,4227078
000017D0  0040 8006 
                    2477   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
000017D4  13FC 0091 2478          move.b    #145,4227080
000017D8  0040 8008 
                    2479   ; checkTIP();
000017DC  4E92      2480          jsr       (A2)
                    2481   ; checkAck();
000017DE  4E93      2482          jsr       (A3)
                    2483   ; // Evaluate data here
                    2484   ; for (currAddr = startAddr; currAddr < endAddr; currAddr++) {
000017E0  2403      2485          move.l    D3,D2
                    2486   EEPROMReadBlock0_1:
000017E2  B484      2487          cmp.l     D4,D2
000017E4  6400 009A 2488          bhs       EEPROMReadBlock0_3
                    2489   ; if (currAddr == 0xFFFF || currAddr == endAddr - 1) {
000017E8  0C82 0000 2490          cmp.l     #65535,D2
000017EC  FFFF      
000017EE  6708      2491          beq.s     EEPROMReadBlock0_6
000017F0  2004      2492          move.l    D4,D0
000017F2  5380      2493          subq.l    #1,D0
000017F4  B480      2494          cmp.l     D0,D2
000017F6  660C      2495          bne.s     EEPROMReadBlock0_4
                    2496   EEPROMReadBlock0_6:
                    2497   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
000017F8  13FC 0069 2498          move.b    #105,4227080
000017FC  0040 8008 
                    2499   ; exitFlag = 1;
00001800  7A01      2500          moveq     #1,D5
00001802  6008      2501          bra.s     EEPROMReadBlock0_5
                    2502   EEPROMReadBlock0_4:
                    2503   ; } else {
                    2504   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
00001804  13FC 0021 2505          move.b    #33,4227080
00001808  0040 8008 
                    2506   EEPROMReadBlock0_5:
                    2507   ; }
                    2508   ; (*readLen)--;
0000180C  206E 000C 2509          move.l    12(A6),A0
00001810  5390      2510          subq.l    #1,(A0)
                    2511   ; checkTIP();
00001812  4E92      2512          jsr       (A2)
                    2513   ; checkAck(); // Check for ACK
00001814  4E93      2514          jsr       (A3)
                    2515   ; // Read data from EEPROM
                    2516   ; while (!(IIC_CRSR & 0x1)); // Wait for IF flag to be set
                    2517   EEPROMReadBlock0_7:
00001816  1039 0040 2518          move.b    4227080,D0
0000181A  8008      
0000181C  C03C 0001 2519          and.b     #1,D0
00001820  6602      2520          bne.s     EEPROMReadBlock0_9
00001822  60F2      2521          bra       EEPROMReadBlock0_7
                    2522   EEPROMReadBlock0_9:
                    2523   ; IIC_CRSR = 0; // Clear IF flag
00001824  4239 0040 2524          clr.b     4227080
00001828  8008      
                    2525   ; readData = IIC_TXRX; // Read data from EEPROM
0000182A  1039 0040 2526          move.b    4227078,D0
0000182E  8006      
00001830  C0BC 0000 2527          and.l     #255,D0
00001834  00FF      
00001836  2D40 FFFC 2528          move.l    D0,-4(A6)
                    2529   ; if ((currAddr % 1000) == 0) {
0000183A  2F02      2530          move.l    D2,-(A7)
0000183C  4878 03E8 2531          pea       1000
00001840  4EB9 0000 2532          jsr       ULDIV
00001844  3654      
00001846  202F 0004 2533          move.l    4(A7),D0
0000184A  504F      2534          addq.w    #8,A7
0000184C  4A80      2535          tst.l     D0
0000184E  6616      2536          bne.s     EEPROMReadBlock0_10
                    2537   ; printf("\r\n Block 0 Address: 0x%04X: %d\n", currAddr, readData);
00001850  2F2E FFFC 2538          move.l    -4(A6),-(A7)
00001854  2F02      2539          move.l    D2,-(A7)
00001856  4879 0000 2540          pea       @m68kde~1_30.L
0000185A  4DAA      
0000185C  4EB9 0000 2541          jsr       _printf
00001860  40EE      
00001862  DEFC 000C 2542          add.w     #12,A7
                    2543   EEPROMReadBlock0_10:
                    2544   ; }
                    2545   ; if (exitFlag) {
00001866  4A85      2546          tst.l     D5
00001868  6710      2547          beq.s     EEPROMReadBlock0_12
                    2548   ; printf("\r\n Exiting EEPROM Read Block 0\n");
0000186A  4879 0000 2549          pea       @m68kde~1_31.L
0000186E  4DCA      
00001870  4EB9 0000 2550          jsr       _printf
00001874  40EE      
00001876  584F      2551          addq.w    #4,A7
                    2552   ; break;
00001878  6006      2553          bra.s     EEPROMReadBlock0_3
                    2554   EEPROMReadBlock0_12:
0000187A  5282      2555          addq.l    #1,D2
0000187C  6000 FF64 2556          bra       EEPROMReadBlock0_1
                    2557   EEPROMReadBlock0_3:
00001880  4CDF 0C3C 2558          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00001884  4E5E      2559          unlk      A6
00001886  4E75      2560          rts
                    2561   ; }
                    2562   ; }
                    2563   ; }
                    2564   ; // STILL NEED TO TEST BLOCK 1 MORE AND CROSSING THE BLOCK BOUNDARY
                    2565   ; void EEPROMReadBlock1(int startAddr, int* readLen) {
                    2566   _EEPROMReadBlock1:
00001888  4E56 FFF8 2567          link      A6,#-8
0000188C  48E7 3030 2568          movem.l   D2/D3/A2/A3,-(A7)
00001890  45F8 1458 2569          lea       _checkTIP.L,A2
00001894  47F8 1468 2570          lea       _checkAck.L,A3
                    2571   ; unsigned int currAddr = startAddr & 0xFFFF; // Mask to 16 bits
00001898  202E 0008 2572          move.l    8(A6),D0
0000189C  C0BC 0000 2573          and.l     #65535,D0
000018A0  FFFF      
000018A2  2400      2574          move.l    D0,D2
                    2575   ; unsigned int endAddr = currAddr + *readLen;
000018A4  2002      2576          move.l    D2,D0
000018A6  206E 000C 2577          move.l    12(A6),A0
000018AA  D090      2578          add.l     (A0),D0
000018AC  2D40 FFF8 2579          move.l    D0,-8(A6)
                    2580   ; unsigned int readData;
                    2581   ; int exitFlag = 0;
000018B0  4283      2582          clr.l     D3
                    2583   ; checkTIP();
000018B2  4E92      2584          jsr       (A2)
                    2585   ; IIC_TXRX = ((EEPROM1 << 1) & 0xFE); // Send EEPROM address with write bit
000018B4  13FC 00A2 2586          move.b    #162,4227078
000018B8  0040 8006 
                    2587   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
000018BC  13FC 0091 2588          move.b    #145,4227080
000018C0  0040 8008 
                    2589   ; checkTIP();
000018C4  4E92      2590          jsr       (A2)
                    2591   ; checkAck(); 
000018C6  4E93      2592          jsr       (A3)
                    2593   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
000018C8  2002      2594          move.l    D2,D0
000018CA  E088      2595          lsr.l     #8,D0
000018CC  C0BC 0000 2596          and.l     #255,D0
000018D0  00FF      
000018D2  13C0 0040 2597          move.b    D0,4227078
000018D6  8006      
                    2598   ; IIC_CRSR = WRITE | IACK; // Write command
000018D8  13FC 0011 2599          move.b    #17,4227080
000018DC  0040 8008 
                    2600   ; checkTIP();
000018E0  4E92      2601          jsr       (A2)
                    2602   ; checkAck();
000018E2  4E93      2603          jsr       (A3)
                    2604   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
000018E4  2002      2605          move.l    D2,D0
000018E6  C0BC 0000 2606          and.l     #255,D0
000018EA  00FF      
000018EC  13C0 0040 2607          move.b    D0,4227078
000018F0  8006      
                    2608   ; IIC_CRSR = WRITE | IACK; // Write command
000018F2  13FC 0011 2609          move.b    #17,4227080
000018F6  0040 8008 
                    2610   ; checkTIP();
000018FA  4E92      2611          jsr       (A2)
                    2612   ; checkAck();
000018FC  4E93      2613          jsr       (A3)
                    2614   ; // Repeated start condition here:
                    2615   ; IIC_TXRX = ((EEPROM1 << 1) | 0x01); // (A3) Send EEPROM address with read bit
000018FE  13FC 00A3 2616          move.b    #163,4227078
00001902  0040 8006 
                    2617   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
00001906  13FC 0091 2618          move.b    #145,4227080
0000190A  0040 8008 
                    2619   ; checkTIP();
0000190E  4E92      2620          jsr       (A2)
                    2621   ; checkAck();
00001910  4E93      2622          jsr       (A3)
                    2623   ; // Evaluate data here
                    2624   ; for (currAddr = startAddr & 0xFFFF; currAddr < endAddr; currAddr++) {
00001912  202E 0008 2625          move.l    8(A6),D0
00001916  C0BC 0000 2626          and.l     #65535,D0
0000191A  FFFF      
0000191C  2400      2627          move.l    D0,D2
                    2628   EEPROMReadBlock1_1:
0000191E  B4AE FFF8 2629          cmp.l     -8(A6),D2
00001922  6400 009A 2630          bhs       EEPROMReadBlock1_3
                    2631   ; if (currAddr == 0xFFFF) {
00001926  0C82 0000 2632          cmp.l     #65535,D2
0000192A  FFFF      
0000192C  660C      2633          bne.s     EEPROMReadBlock1_4
                    2634   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
0000192E  13FC 0069 2635          move.b    #105,4227080
00001932  0040 8008 
                    2636   ; exitFlag = 1;
00001936  7601      2637          moveq     #1,D3
00001938  6008      2638          bra.s     EEPROMReadBlock1_5
                    2639   EEPROMReadBlock1_4:
                    2640   ; } else {
                    2641   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
0000193A  13FC 0021 2642          move.b    #33,4227080
0000193E  0040 8008 
                    2643   EEPROMReadBlock1_5:
                    2644   ; }
                    2645   ; (*readLen)--;
00001942  206E 000C 2646          move.l    12(A6),A0
00001946  5390      2647          subq.l    #1,(A0)
                    2648   ; checkTIP();
00001948  4E92      2649          jsr       (A2)
                    2650   ; checkAck(); // Check for ACK
0000194A  4E93      2651          jsr       (A3)
                    2652   ; // Read data from EEPROM
                    2653   ; while (!IIC_CRSR & 0x1); // Wait for IF flag to be set
                    2654   EEPROMReadBlock1_6:
0000194C  4A39 0040 2655          tst.b     4227080
00001950  8008      
00001952  6604      2656          bne.s     EEPROMReadBlock1_9
00001954  7001      2657          moveq     #1,D0
00001956  6002      2658          bra.s     EEPROMReadBlock1_10
                    2659   EEPROMReadBlock1_9:
00001958  4280      2660          clr.l     D0
                    2661   EEPROMReadBlock1_10:
0000195A  C03C 0001 2662          and.b     #1,D0
0000195E  6702      2663          beq.s     EEPROMReadBlock1_8
00001960  60EA      2664          bra       EEPROMReadBlock1_6
                    2665   EEPROMReadBlock1_8:
                    2666   ; IIC_CRSR = 0; // Clear IF flag
00001962  4239 0040 2667          clr.b     4227080
00001966  8008      
                    2668   ; readData = IIC_TXRX; // Read data from EEPROM
00001968  1039 0040 2669          move.b    4227078,D0
0000196C  8006      
0000196E  C0BC 0000 2670          and.l     #255,D0
00001972  00FF      
00001974  2D40 FFFC 2671          move.l    D0,-4(A6)
                    2672   ; if ((currAddr % 1000) == 0) {
00001978  2F02      2673          move.l    D2,-(A7)
0000197A  4878 03E8 2674          pea       1000
0000197E  4EB9 0000 2675          jsr       ULDIV
00001982  3654      
00001984  202F 0004 2676          move.l    4(A7),D0
00001988  504F      2677          addq.w    #8,A7
0000198A  4A80      2678          tst.l     D0
0000198C  6616      2679          bne.s     EEPROMReadBlock1_11
                    2680   ; printf("\r\n Block 1 Address: 0x%04X: %d\n", currAddr, readData);
0000198E  2F2E FFFC 2681          move.l    -4(A6),-(A7)
00001992  2F02      2682          move.l    D2,-(A7)
00001994  4879 0000 2683          pea       @m68kde~1_32.L
00001998  4DEA      
0000199A  4EB9 0000 2684          jsr       _printf
0000199E  40EE      
000019A0  DEFC 000C 2685          add.w     #12,A7
                    2686   EEPROMReadBlock1_11:
                    2687   ; }
                    2688   ; if (exitFlag) {
000019A4  4A83      2689          tst.l     D3
000019A6  6710      2690          beq.s     EEPROMReadBlock1_13
                    2691   ; printf("\r\n Exiting EEPROM Read Block 1\n");
000019A8  4879 0000 2692          pea       @m68kde~1_33.L
000019AC  4E0A      
000019AE  4EB9 0000 2693          jsr       _printf
000019B2  40EE      
000019B4  584F      2694          addq.w    #4,A7
                    2695   ; break;
000019B6  6006      2696          bra.s     EEPROMReadBlock1_3
                    2697   EEPROMReadBlock1_13:
000019B8  5282      2698          addq.l    #1,D2
000019BA  6000 FF62 2699          bra       EEPROMReadBlock1_1
                    2700   EEPROMReadBlock1_3:
000019BE  4CDF 0C0C 2701          movem.l   (A7)+,D2/D3/A2/A3
000019C2  4E5E      2702          unlk      A6
000019C4  4E75      2703          rts
                    2704   ; }
                    2705   ; }
                    2706   ; }
                    2707   ; int EEPROMSequentialRead(unsigned int startGlobalAddr, int readLen) {
                    2708   _EEPROMSequentialRead:
000019C6  4E56 0000 2709          link      A6,#0
000019CA  48E7 2020 2710          movem.l   D2/A2,-(A7)
000019CE  45EE 000C 2711          lea       12(A6),A2
000019D2  242E 0008 2712          move.l    8(A6),D2
                    2713   ; // REMOVE THIS: startGlobalAddr = startGlobalAddr & 0xFFFF;
                    2714   ; if (startGlobalAddr <= 0xFFFF) {
000019D6  0C82 0000 2715          cmp.l     #65535,D2
000019DA  FFFF      
000019DC  6220      2716          bhi.s     EEPROMSequentialRead_1
                    2717   ; EEPROMReadBlock0(startGlobalAddr, &readLen);
000019DE  2F0A      2718          move.l    A2,-(A7)
000019E0  2F02      2719          move.l    D2,-(A7)
000019E2  4EB8 1758 2720          jsr       _EEPROMReadBlock0
000019E6  504F      2721          addq.w    #8,A7
                    2722   ; if (readLen > 0) {
000019E8  2012      2723          move.l    (A2),D0
000019EA  0C80 0000 2724          cmp.l     #0,D0
000019EE  0000      
000019F0  6F0A      2725          ble.s     EEPROMSequentialRead_3
                    2726   ; EEPROMReadBlock1(0, &readLen);
000019F2  2F0A      2727          move.l    A2,-(A7)
000019F4  42A7      2728          clr.l     -(A7)
000019F6  4EB8 1888 2729          jsr       _EEPROMReadBlock1
000019FA  504F      2730          addq.w    #8,A7
                    2731   EEPROMSequentialRead_3:
000019FC  6012      2732          bra.s     EEPROMSequentialRead_2
                    2733   EEPROMSequentialRead_1:
                    2734   ; }
                    2735   ; } else {
                    2736   ; EEPROMReadBlock1(startGlobalAddr - 0x10000, &readLen);
000019FE  2F0A      2737          move.l    A2,-(A7)
00001A00  2202      2738          move.l    D2,D1
00001A02  0481 0001 2739          sub.l     #65536,D1
00001A06  0000      
00001A08  2F01      2740          move.l    D1,-(A7)
00001A0A  4EB8 1888 2741          jsr       _EEPROMReadBlock1
00001A0E  504F      2742          addq.w    #8,A7
                    2743   EEPROMSequentialRead_2:
00001A10  4CDF 0404 2744          movem.l   (A7)+,D2/A2
00001A14  4E5E      2745          unlk      A6
00001A16  4E75      2746          rts
                    2747   ; }
                    2748   ; }
                    2749   ; I2CTest() {
                    2750   _I2CTest:
00001A18  4E56 FF54 2751          link      A6,#-172
00001A1C  48E7 3830 2752          movem.l   D2/D3/D4/A2/A3,-(A7)
00001A20  45F9 0000 2753          lea       _printf.L,A2
00001A24  40EE      
00001A26  47F8 0CA4 2754          lea       _Get8HexDigits.L,A3
                    2755   ; unsigned int i, j;
                    2756   ; unsigned int readData;
                    2757   ; char c, text[150];
                    2758   ; unsigned char dataByte;
                    2759   ; unsigned int address, size, intBuffer;
                    2760   ; unsigned int testChoice = 0;  
00001A2A  4283      2761          clr.l     D3
                    2762   ; printf("\r\n I2C Test\n");
00001A2C  4879 0000 2763          pea       @m68kde~1_34.L
00001A30  4E2A      
00001A32  4E92      2764          jsr       (A2)
00001A34  584F      2765          addq.w    #4,A7
                    2766   ; printf("\r\nInitializing I2C...\n");
00001A36  4879 0000 2767          pea       @m68kde~1_35.L
00001A3A  4E38      
00001A3C  4E92      2768          jsr       (A2)
00001A3E  584F      2769          addq.w    #4,A7
                    2770   ; IIC_Init();
00001A40  4EB8 1428 2771          jsr       _IIC_Init
                    2772   ; scanflush();
00001A44  4EB9 0000 2773          jsr       _scanflush
00001A48  3AE4      
                    2774   ; memset(text, 0, sizeof(text));  // fills with zeros
00001A4A  4878 0096 2775          pea       150
00001A4E  42A7      2776          clr.l     -(A7)
00001A50  486E FF62 2777          pea       -158(A6)
00001A54  4EB9 0000 2778          jsr       _memset
00001A58  37FE      
00001A5A  DEFC 000C 2779          add.w     #12,A7
                    2780   ; printf("\r\nChoose option:\n");  // Fixed missing \n
00001A5E  4879 0000 2781          pea       @m68kde~1_36.L
00001A62  4E50      
00001A64  4E92      2782          jsr       (A2)
00001A66  584F      2783          addq.w    #4,A7
                    2784   ; printf("1 Read Single Byte from EEPROM\n");
00001A68  4879 0000 2785          pea       @m68kde~1_37.L
00001A6C  4E62      
00001A6E  4E92      2786          jsr       (A2)
00001A70  584F      2787          addq.w    #4,A7
                    2788   ; printf("2 Write Single Byte to EEPROM\n");
00001A72  4879 0000 2789          pea       @m68kde~1_38.L
00001A76  4E82      
00001A78  4E92      2790          jsr       (A2)
00001A7A  584F      2791          addq.w    #4,A7
                    2792   ; printf("3 Read Block of Data from EEPROM\n");
00001A7C  4879 0000 2793          pea       @m68kde~1_39.L
00001A80  4EA2      
00001A82  4E92      2794          jsr       (A2)
00001A84  584F      2795          addq.w    #4,A7
                    2796   ; printf("4 Write Block of Data to EEPROM\n");
00001A86  4879 0000 2797          pea       @m68kde~1_40.L
00001A8A  4EC4      
00001A8C  4E92      2798          jsr       (A2)
00001A8E  584F      2799          addq.w    #4,A7
                    2800   ; testChoice = _getch() - 48;    
00001A90  4EB8 0B68 2801          jsr       __getch
00001A94  0480 0000 2802          sub.l     #48,D0
00001A98  0030      
00001A9A  2600      2803          move.l    D0,D3
                    2804   ; // Option 1: Read Single Byte
                    2805   ; if (testChoice == 1) {
00001A9C  0C83 0000 2806          cmp.l     #1,D3
00001AA0  0001      
00001AA2  6600 0042 2807          bne       I2CTest_1
                    2808   ; printf("\r\nRead Single Byte\n");
00001AA6  4879 0000 2809          pea       @m68kde~1_41.L
00001AAA  4EE6      
00001AAC  4E92      2810          jsr       (A2)
00001AAE  584F      2811          addq.w    #4,A7
                    2812   ; printf("Enter address: 0x");
00001AB0  4879 0000 2813          pea       @m68kde~1_42.L
00001AB4  4EFA      
00001AB6  4E92      2814          jsr       (A2)
00001AB8  584F      2815          addq.w    #4,A7
                    2816   ; address = Get8HexDigits(0);
00001ABA  42A7      2817          clr.l     -(A7)
00001ABC  4E93      2818          jsr       (A3)
00001ABE  584F      2819          addq.w    #4,A7
00001AC0  2400      2820          move.l    D0,D2
                    2821   ; dataByte = EEPROMRandomRead(EEPROM0, address);
00001AC2  2F02      2822          move.l    D2,-(A7)
00001AC4  4878 0050 2823          pea       80
00001AC8  4EB8 1696 2824          jsr       _EEPROMRandomRead
00001ACC  504F      2825          addq.w    #8,A7
00001ACE  1800      2826          move.b    D0,D4
                    2827   ; printf("Read from address 0x%X: 0x%02X\n", address, dataByte);
00001AD0  C8BC 0000 2828          and.l     #255,D4
00001AD4  00FF      
00001AD6  2F04      2829          move.l    D4,-(A7)
00001AD8  2F02      2830          move.l    D2,-(A7)
00001ADA  4879 0000 2831          pea       @m68kde~1_43.L
00001ADE  4F0C      
00001AE0  4E92      2832          jsr       (A2)
00001AE2  DEFC 000C 2833          add.w     #12,A7
                    2834   I2CTest_1:
                    2835   ; }
                    2836   ; // Option 2: Write Single Byte
                    2837   ; if (testChoice == 2) {
00001AE6  0C83 0000 2838          cmp.l     #2,D3
00001AEA  0002      
00001AEC  6600 007E 2839          bne       I2CTest_3
                    2840   ; printf("\r\nWrite Single Byte\n"); 
00001AF0  4879 0000 2841          pea       @m68kde~1_44.L
00001AF4  4F2C      
00001AF6  4E92      2842          jsr       (A2)
00001AF8  584F      2843          addq.w    #4,A7
                    2844   ; printf("Enter address: 0x");
00001AFA  4879 0000 2845          pea       @m68kde~1_42.L
00001AFE  4EFA      
00001B00  4E92      2846          jsr       (A2)
00001B02  584F      2847          addq.w    #4,A7
                    2848   ; address = Get8HexDigits(0);
00001B04  42A7      2849          clr.l     -(A7)
00001B06  4E93      2850          jsr       (A3)
00001B08  584F      2851          addq.w    #4,A7
00001B0A  2400      2852          move.l    D0,D2
                    2853   ; printf("Enter byte value: 0x");
00001B0C  4879 0000 2854          pea       @m68kde~1_45.L
00001B10  4F42      
00001B12  4E92      2855          jsr       (A2)
00001B14  584F      2856          addq.w    #4,A7
                    2857   ; dataByte = Get8HexDigits(0);
00001B16  42A7      2858          clr.l     -(A7)
00001B18  4E93      2859          jsr       (A3)
00001B1A  584F      2860          addq.w    #4,A7
00001B1C  1800      2861          move.b    D0,D4
                    2862   ; EEPROMByteWrite(dataByte, EEPROM0, address);
00001B1E  2F02      2863          move.l    D2,-(A7)
00001B20  4878 0050 2864          pea       80
00001B24  C8BC 0000 2865          and.l     #255,D4
00001B28  00FF      
00001B2A  2F04      2866          move.l    D4,-(A7)
00001B2C  4EB8 14B6 2867          jsr       _EEPROMByteWrite
00001B30  DEFC 000C 2868          add.w     #12,A7
                    2869   ; printf("Wrote 0x%02X to address 0x%X\n", dataByte, address);
00001B34  2F02      2870          move.l    D2,-(A7)
00001B36  C8BC 0000 2871          and.l     #255,D4
00001B3A  00FF      
00001B3C  2F04      2872          move.l    D4,-(A7)
00001B3E  4879 0000 2873          pea       @m68kde~1_46.L
00001B42  4F58      
00001B44  4E92      2874          jsr       (A2)
00001B46  DEFC 000C 2875          add.w     #12,A7
                    2876   ; wait5ms();
00001B4A  4EB8 1444 2877          jsr       _wait5ms
                    2878   ; readData = EEPROMRandomRead(EEPROM0, address);
00001B4E  2F02      2879          move.l    D2,-(A7)
00001B50  4878 0050 2880          pea       80
00001B54  4EB8 1696 2881          jsr       _EEPROMRandomRead
00001B58  504F      2882          addq.w    #8,A7
00001B5A  2D40 FF5C 2883          move.l    D0,-164(A6)
                    2884   ; printf("Read back: 0x%02X\n", readData);
00001B5E  2F2E FF5C 2885          move.l    -164(A6),-(A7)
00001B62  4879 0000 2886          pea       @m68kde~1_47.L
00001B66  4F76      
00001B68  4E92      2887          jsr       (A2)
00001B6A  504F      2888          addq.w    #8,A7
                    2889   I2CTest_3:
                    2890   ; }
                    2891   ; // Option 3: Read Block of Data
                    2892   ; if (testChoice == 3) {
00001B6C  0C83 0000 2893          cmp.l     #3,D3
00001B70  0003      
00001B72  6600 0002 2894          bne       I2CTest_5
                    2895   ; }
                    2896   I2CTest_5:
                    2897   ; // Option 4: Write Block of Data
                    2898   ; if (testChoice == 4) {
00001B76  0C83 0000 2899          cmp.l     #4,D3
00001B7A  0004      
00001B7C  6600 0002 2900          bne       I2CTest_7
                    2901   ; }
                    2902   I2CTest_7:
00001B80  4CDF 0C1C 2903          movem.l   (A7)+,D2/D3/D4/A2/A3
00001B84  4E5E      2904          unlk      A6
00001B86  4E75      2905          rts
                    2906   ; } 
                    2907   ; // I2CTest() {
                    2908   ; //   unsigned int arraySize = 512;
                    2909   ; //   unsigned int IICData[512];
                    2910   ; //   unsigned int i;
                    2911   ; //   unsigned int writeData = 0xAB;
                    2912   ; //   unsigned int readData;
                    2913   ; //   unsigned int totalBytes = 0x20000;
                    2914   ; //   for (i = 0; i < arraySize; i++) {
                    2915   ; //     IICData[i] = (i % 50) + 1;
                    2916   ; //     IICData[i] = 0xAA;
                    2917   ; //   } 
                    2918   ; //   printf("\r\n I2C Test\n");
                    2919   ; //   IIC_Init();  
                    2920   ; //   printf("Page Write\n");
                    2921   ; //   EEPROMFlashPageWrite(IICData, 0x0, totalBytes); // Write data to EEPROM
                    2922   ; //   printf("Sequential Read\n");
                    2923   ; //   EEPROMSequentialRead(0x0000, 32768);  // First 32KB
                    2924   ; //   EEPROMSequentialRead(0x8000, 32768);  // Second 32KB
                    2925   ; //   EEPROMSequentialRead(0x10000, 32768); // Third 32KB
                    2926   ; //   EEPROMSequentialRead(0x18000, 32768); // Fourth 32KB
                    2927   ; //   printf("\r\n Starting EEPROM Write: Writing 0x%.2x to address 0x00\n", writeData); // Debug: Indicate the start of EEPROM write
                    2928   ; //   for (i = 0x0; i < 0x5; i++) {
                    2929   ; //     printf("\r\n Writing %d to address %d\n", i * 5, i);
                    2930   ; //     EEPROMByteWrite(i * 5, EEPROM1, i); // Write data to EEPROM
                    2931   ; //   }
                    2932   ; //   printf("\r\nFinished write, Starting EEPROM Read\n");
                    2933   ; //   for (i = 0; i < 5; i++) {
                    2934   ; //     readData = EEPROMRandomRead(EEPROM1, i); // Read data from EEPROM
                    2935   ; //     printf("\r\n Address: %d: %d\n", i, readData); // Debug: Indicate the address being read and the data read
                    2936   ; //   }
                    2937   ; //   // readData = EEPROMRandomRead(EEPROM0, 0x0);
                    2938   ; //   IICCoreDisable();
                    2939   ; // }
                    2940   ; // Initialize and enable I2C controller
                    2941   ; // No interrupts and set clock frequency to 100Khz
                    2942   ; // Connect controller to 25 or 45 Mhz CPU clock
                    2943   ; // Check if device is ready before writing anything over I2C bus ie) TX register has written previous command.
                    2944   ; // Check the status register TIP bit to see when transmission has finished
                    2945   ; // Wait for ACK from slave after each write
                    2946   ; // Transmit a byte to the I2C bus
                    2947   ; // write the data to be transmitted into TX register and then write something to the command register that indiciates that you want to write
                    2948   ; // If you want to generate a start or stop condition, set the STA or STO bits in command register when you write to it,
                    2949   ; // Clear the ACK bit if you want to generate an ACK when reading data back from the slave
                    2950   ; // EEPROM Functions
                    2951   ; // Write a byte to the EEPROM
                    2952   ; // Start write by writing a slave address and sett bit 0 of the data to be transmitted to 0, to indicate that you are writing an address to the slave
                    2953   ; // Generate start condition, and set the bit select and chip select bits, and set bits [7:4] to 1010
                    2954   ; // Write 2 bytes which correspond to the the 2 byte internal 64k address inside the chip, and then write the data to be stored at that address
                    2955   ; // Read a byte from the EEPROM
                    2956   ; // Write a slave address along with a start condition
                    2957   ; // Write 2 bytes which correspond to the 2 internal address bytes of the EEPROM
                    2958   ; // Send repeated start condition and set RD bit and ACK bit in command register
                    2959   ; // Set stop bit, and don't forget to set IACK bit to clear any pending interrupt flag
                    2960   ; // When data is recieved from slave, you can find it in the I2C Rx register
                    2961   ; // Poll I2C controller to determine when the data has been read from the slave which can be done by checking the IF flag in status register
                    2962   ; // when IF flag == 1, the data has been received.
                    2963   ; // Clear the IF flag with each byte read 
                    2964   ; // If slave does not recieve ACK from I2C controller, it will not send any more data
                    2965   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2966   ; // IMPORTANT
                    2967   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2968   ; // has to be done with an interrupt (IRQ Level 6)
                    2969   ; //
                    2970   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2971   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2972   ; //
                    2973   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2974   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2975   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2976   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2977   ; // program area
                    2978   ; //
                    2979   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2980   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2981   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2982   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2983   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2984   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2985   ; void DumpRegisters()
                    2986   ; {
                    2987   _DumpRegisters:
00001B88  48E7 3F3C 2988          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001B8C  45F9 0000 2989          lea       _putch.L,A2
00001B90  3732      
00001B92  47F9 0000 2990          lea       _printf.L,A3
00001B96  40EE      
00001B98  49F9 0B00 2991          lea       _SR.L,A4
00001B9C  012C      
00001B9E  4BF9 0B00 2992          lea       _WatchPointString.L,A5
00001BA2  01C2      
                    2993   ; short i, x, j, k ;
                    2994   ; unsigned char c, *BytePointer;
                    2995   ; // buld up strings for displaying watchpoints
                    2996   ; for(x = 0; x < (short)(8); x++)
00001BA4  4242      2997          clr.w     D2
                    2998   DumpRegisters_1:
00001BA6  0C42 0008 2999          cmp.w     #8,D2
00001BAA  6C00 01C6 3000          bge       DumpRegisters_3
                    3001   ; {
                    3002   ; if(WatchPointSetOrCleared[x] == 1)
00001BAE  48C2      3003          ext.l     D2
00001BB0  2002      3004          move.l    D2,D0
00001BB2  E588      3005          lsl.l     #2,D0
00001BB4  41F9 0B00 3006          lea       _WatchPointSetOrCleared.L,A0
00001BB8  01A2      
00001BBA  2030 0800 3007          move.l    0(A0,D0.L),D0
00001BBE  0C80 0000 3008          cmp.l     #1,D0
00001BC2  0001      
00001BC4  6600 0186 3009          bne       DumpRegisters_4
                    3010   ; {
                    3011   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001BC8  48C2      3012          ext.l     D2
00001BCA  2202      3013          move.l    D2,D1
00001BCC  E589      3014          lsl.l     #2,D1
00001BCE  41F9 0B00 3015          lea       _WatchPointAddress.L,A0
00001BD2  0182      
00001BD4  2F30 1800 3016          move.l    0(A0,D1.L),-(A7)
00001BD8  4879 0000 3017          pea       @m68kde~1_48.L
00001BDC  4F8A      
00001BDE  220D      3018          move.l    A5,D1
00001BE0  48C2      3019          ext.l     D2
00001BE2  2F00      3020          move.l    D0,-(A7)
00001BE4  2002      3021          move.l    D2,D0
00001BE6  C1FC 0064 3022          muls      #100,D0
00001BEA  D280      3023          add.l     D0,D1
00001BEC  201F      3024          move.l    (A7)+,D0
00001BEE  2F01      3025          move.l    D1,-(A7)
00001BF0  4EB9 0000 3026          jsr       _sprintf
00001BF4  37CA      
00001BF6  DEFC 000C 3027          add.w     #12,A7
                    3028   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001BFA  48C2      3029          ext.l     D2
00001BFC  2002      3030          move.l    D2,D0
00001BFE  E588      3031          lsl.l     #2,D0
00001C00  41F9 0B00 3032          lea       _WatchPointAddress.L,A0
00001C04  0182      
00001C06  2A30 0800 3033          move.l    0(A0,D0.L),D5
                    3034   ; for(j = 0; j < (short)(16); j+=2)
00001C0A  4243      3035          clr.w     D3
                    3036   DumpRegisters_6:
00001C0C  0C43 0010 3037          cmp.w     #16,D3
00001C10  6C00 0082 3038          bge       DumpRegisters_8
                    3039   ; {
                    3040   ; for(k = 0; k < (short)(2); k++)
00001C14  4246      3041          clr.w     D6
                    3042   DumpRegisters_9:
00001C16  0C46 0002 3043          cmp.w     #2,D6
00001C1A  6C00 0052 3044          bge       DumpRegisters_11
                    3045   ; {
                    3046   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001C1E  2045      3047          move.l    D5,A0
00001C20  48C3      3048          ext.l     D3
00001C22  2203      3049          move.l    D3,D1
00001C24  48C6      3050          ext.l     D6
00001C26  D286      3051          add.l     D6,D1
00001C28  1230 1800 3052          move.b    0(A0,D1.L),D1
00001C2C  C2BC 0000 3053          and.l     #255,D1
00001C30  00FF      
00001C32  2F01      3054          move.l    D1,-(A7)
00001C34  4879 0000 3055          pea       @m68kde~1_8.L
00001C38  4B3C      
00001C3A  4879 0B00 3056          pea       _TempString.L
00001C3E  04E2      
00001C40  4EB9 0000 3057          jsr       _sprintf
00001C44  37CA      
00001C46  DEFC 000C 3058          add.w     #12,A7
                    3059   ; strcat(WatchPointString[x], TempString) ;
00001C4A  4879 0B00 3060          pea       _TempString.L
00001C4E  04E2      
00001C50  220D      3061          move.l    A5,D1
00001C52  48C2      3062          ext.l     D2
00001C54  2F00      3063          move.l    D0,-(A7)
00001C56  2002      3064          move.l    D2,D0
00001C58  C1FC 0064 3065          muls      #100,D0
00001C5C  D280      3066          add.l     D0,D1
00001C5E  201F      3067          move.l    (A7)+,D0
00001C60  2F01      3068          move.l    D1,-(A7)
00001C62  4EB9 0000 3069          jsr       _strcat
00001C66  3816      
00001C68  504F      3070          addq.w    #8,A7
00001C6A  5246      3071          addq.w    #1,D6
00001C6C  60A8      3072          bra       DumpRegisters_9
                    3073   DumpRegisters_11:
                    3074   ; }
                    3075   ; strcat(WatchPointString[x]," ") ;
00001C6E  4879 0000 3076          pea       @m68kde~1_49.L
00001C72  4F92      
00001C74  220D      3077          move.l    A5,D1
00001C76  48C2      3078          ext.l     D2
00001C78  2F00      3079          move.l    D0,-(A7)
00001C7A  2002      3080          move.l    D2,D0
00001C7C  C1FC 0064 3081          muls      #100,D0
00001C80  D280      3082          add.l     D0,D1
00001C82  201F      3083          move.l    (A7)+,D0
00001C84  2F01      3084          move.l    D1,-(A7)
00001C86  4EB9 0000 3085          jsr       _strcat
00001C8A  3816      
00001C8C  504F      3086          addq.w    #8,A7
00001C8E  5443      3087          addq.w    #2,D3
00001C90  6000 FF7A 3088          bra       DumpRegisters_6
                    3089   DumpRegisters_8:
                    3090   ; }
                    3091   ; strcat(WatchPointString[x], "  ") ;
00001C94  4879 0000 3092          pea       @m68kde~1_9.L
00001C98  4B42      
00001C9A  220D      3093          move.l    A5,D1
00001C9C  48C2      3094          ext.l     D2
00001C9E  2F00      3095          move.l    D0,-(A7)
00001CA0  2002      3096          move.l    D2,D0
00001CA2  C1FC 0064 3097          muls      #100,D0
00001CA6  D280      3098          add.l     D0,D1
00001CA8  201F      3099          move.l    (A7)+,D0
00001CAA  2F01      3100          move.l    D1,-(A7)
00001CAC  4EB9 0000 3101          jsr       _strcat
00001CB0  3816      
00001CB2  504F      3102          addq.w    #8,A7
                    3103   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001CB4  48C2      3104          ext.l     D2
00001CB6  2002      3105          move.l    D2,D0
00001CB8  E588      3106          lsl.l     #2,D0
00001CBA  41F9 0B00 3107          lea       _WatchPointAddress.L,A0
00001CBE  0182      
00001CC0  2A30 0800 3108          move.l    0(A0,D0.L),D5
                    3109   ; for(j = 0; j < (short)(16); j++)
00001CC4  4243      3110          clr.w     D3
                    3111   DumpRegisters_12:
00001CC6  0C43 0010 3112          cmp.w     #16,D3
00001CCA  6C00 007E 3113          bge       DumpRegisters_14
                    3114   ; {
                    3115   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001CCE  2045      3116          move.l    D5,A0
00001CD0  48C3      3117          ext.l     D3
00001CD2  1030 3800 3118          move.b    0(A0,D3.L),D0
00001CD6  C03C 007F 3119          and.b     #127,D0
00001CDA  1E00      3120          move.b    D0,D7
                    3121   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001CDC  0C07 007F 3122          cmp.b     #127,D7
00001CE0  6206      3123          bhi.s     DumpRegisters_17
00001CE2  0C07 0020 3124          cmp.b     #32,D7
00001CE6  6416      3125          bhs.s     DumpRegisters_15
                    3126   DumpRegisters_17:
                    3127   ; sprintf(TempString, ".") ;
00001CE8  4879 0000 3128          pea       @m68kde~1_50.L
00001CEC  4F94      
00001CEE  4879 0B00 3129          pea       _TempString.L
00001CF2  04E2      
00001CF4  4EB9 0000 3130          jsr       _sprintf
00001CF8  37CA      
00001CFA  504F      3131          addq.w    #8,A7
00001CFC  6026      3132          bra.s     DumpRegisters_16
                    3133   DumpRegisters_15:
                    3134   ; else
                    3135   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001CFE  2045      3136          move.l    D5,A0
00001D00  48C3      3137          ext.l     D3
00001D02  1230 3800 3138          move.b    0(A0,D3.L),D1
00001D06  C2BC 0000 3139          and.l     #255,D1
00001D0A  00FF      
00001D0C  2F01      3140          move.l    D1,-(A7)
00001D0E  4879 0000 3141          pea       @m68kde~1_51.L
00001D12  4F96      
00001D14  4879 0B00 3142          pea       _TempString.L
00001D18  04E2      
00001D1A  4EB9 0000 3143          jsr       _sprintf
00001D1E  37CA      
00001D20  DEFC 000C 3144          add.w     #12,A7
                    3145   DumpRegisters_16:
                    3146   ; strcat(WatchPointString[x], TempString) ;
00001D24  4879 0B00 3147          pea       _TempString.L
00001D28  04E2      
00001D2A  220D      3148          move.l    A5,D1
00001D2C  48C2      3149          ext.l     D2
00001D2E  2F00      3150          move.l    D0,-(A7)
00001D30  2002      3151          move.l    D2,D0
00001D32  C1FC 0064 3152          muls      #100,D0
00001D36  D280      3153          add.l     D0,D1
00001D38  201F      3154          move.l    (A7)+,D0
00001D3A  2F01      3155          move.l    D1,-(A7)
00001D3C  4EB9 0000 3156          jsr       _strcat
00001D40  3816      
00001D42  504F      3157          addq.w    #8,A7
00001D44  5243      3158          addq.w    #1,D3
00001D46  6000 FF7E 3159          bra       DumpRegisters_12
                    3160   DumpRegisters_14:
00001D4A  6020      3161          bra.s     DumpRegisters_5
                    3162   DumpRegisters_4:
                    3163   ; }
                    3164   ; }
                    3165   ; else
                    3166   ; strcpy(WatchPointString[x], "") ;
00001D4C  4879 0000 3167          pea       @m68kde~1_52.L
00001D50  4F9A      
00001D52  220D      3168          move.l    A5,D1
00001D54  48C2      3169          ext.l     D2
00001D56  2F00      3170          move.l    D0,-(A7)
00001D58  2002      3171          move.l    D2,D0
00001D5A  C1FC 0064 3172          muls      #100,D0
00001D5E  D280      3173          add.l     D0,D1
00001D60  201F      3174          move.l    (A7)+,D0
00001D62  2F01      3175          move.l    D1,-(A7)
00001D64  4EB9 0000 3176          jsr       _strcpy
00001D68  3644      
00001D6A  504F      3177          addq.w    #8,A7
                    3178   DumpRegisters_5:
00001D6C  5242      3179          addq.w    #1,D2
00001D6E  6000 FE36 3180          bra       DumpRegisters_1
                    3181   DumpRegisters_3:
                    3182   ; }
                    3183   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001D72  2F39 0B00 3184          move.l    _a0.L,-(A7)
00001D76  0104      
00001D78  2F39 0B00 3185          move.l    _d0.L,-(A7)
00001D7C  00E4      
00001D7E  4879 0000 3186          pea       @m68kde~1_53.L
00001D82  4F9C      
00001D84  4E93      3187          jsr       (A3)
00001D86  DEFC 000C 3188          add.w     #12,A7
                    3189   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001D8A  2F39 0B00 3190          move.l    _a1.L,-(A7)
00001D8E  0108      
00001D90  2F39 0B00 3191          move.l    _d1.L,-(A7)
00001D94  00E8      
00001D96  4879 0000 3192          pea       @m68kde~1_54.L
00001D9A  4FB8      
00001D9C  4E93      3193          jsr       (A3)
00001D9E  DEFC 000C 3194          add.w     #12,A7
                    3195   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001DA2  2F39 0B00 3196          move.l    _a2.L,-(A7)
00001DA6  010C      
00001DA8  2F39 0B00 3197          move.l    _d2.L,-(A7)
00001DAC  00EC      
00001DAE  4879 0000 3198          pea       @m68kde~1_55.L
00001DB2  4FD2      
00001DB4  4E93      3199          jsr       (A3)
00001DB6  DEFC 000C 3200          add.w     #12,A7
                    3201   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001DBA  2F39 0B00 3202          move.l    _a3.L,-(A7)
00001DBE  0110      
00001DC0  2F39 0B00 3203          move.l    _d3.L,-(A7)
00001DC4  00F0      
00001DC6  4879 0000 3204          pea       @m68kde~1_56.L
00001DCA  4FEC      
00001DCC  4E93      3205          jsr       (A3)
00001DCE  DEFC 000C 3206          add.w     #12,A7
                    3207   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001DD2  2F39 0B00 3208          move.l    _a4.L,-(A7)
00001DD6  0114      
00001DD8  2F39 0B00 3209          move.l    _d4.L,-(A7)
00001DDC  00F4      
00001DDE  4879 0000 3210          pea       @m68kde~1_57.L
00001DE2  5006      
00001DE4  4E93      3211          jsr       (A3)
00001DE6  DEFC 000C 3212          add.w     #12,A7
                    3213   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001DEA  2F39 0B00 3214          move.l    _a5.L,-(A7)
00001DEE  0118      
00001DF0  2F39 0B00 3215          move.l    _d5.L,-(A7)
00001DF4  00F8      
00001DF6  4879 0000 3216          pea       @m68kde~1_58.L
00001DFA  5020      
00001DFC  4E93      3217          jsr       (A3)
00001DFE  DEFC 000C 3218          add.w     #12,A7
                    3219   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001E02  2F39 0B00 3220          move.l    _a6.L,-(A7)
00001E06  011C      
00001E08  2F39 0B00 3221          move.l    _d6.L,-(A7)
00001E0C  00FC      
00001E0E  4879 0000 3222          pea       @m68kde~1_59.L
00001E12  503A      
00001E14  4E93      3223          jsr       (A3)
00001E16  DEFC 000C 3224          add.w     #12,A7
                    3225   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001E1A  3214      3226          move.w    (A4),D1
00001E1C  C27C 2000 3227          and.w     #8192,D1
00001E20  0C41 2000 3228          cmp.w     #8192,D1
00001E24  6608      3229          bne.s     DumpRegisters_18
00001E26  2239 0B00 3230          move.l    _SSP.L,D1
00001E2A  0124      
00001E2C  6006      3231          bra.s     DumpRegisters_19
                    3232   DumpRegisters_18:
00001E2E  2239 0B00 3233          move.l    _USP.L,D1
00001E32  0128      
                    3234   DumpRegisters_19:
00001E34  2F01      3235          move.l    D1,-(A7)
00001E36  2F39 0B00 3236          move.l    _d7.L,-(A7)
00001E3A  0100      
00001E3C  4879 0000 3237          pea       @m68kde~1_60.L
00001E40  5054      
00001E42  4E93      3238          jsr       (A3)
00001E44  DEFC 000C 3239          add.w     #12,A7
                    3240   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001E48  2F39 0B00 3241          move.l    _USP.L,-(A7)
00001E4C  0128      
00001E4E  4879 0000 3242          pea       @m68kde~1_61.L
00001E52  506E      
00001E54  4E93      3243          jsr       (A3)
00001E56  504F      3244          addq.w    #8,A7
                    3245   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001E58  2F39 0B00 3246          move.l    _SSP.L,-(A7)
00001E5C  0124      
00001E5E  4879 0000 3247          pea       @m68kde~1_62.L
00001E62  508C      
00001E64  4E93      3248          jsr       (A3)
00001E66  504F      3249          addq.w    #8,A7
                    3250   ; printf("\r\n SR = $%04X   ",SR) ;
00001E68  3214      3251          move.w    (A4),D1
00001E6A  C2BC 0000 3252          and.l     #65535,D1
00001E6E  FFFF      
00001E70  2F01      3253          move.l    D1,-(A7)
00001E72  4879 0000 3254          pea       @m68kde~1_63.L
00001E76  50AE      
00001E78  4E93      3255          jsr       (A3)
00001E7A  504F      3256          addq.w    #8,A7
                    3257   ; // display the status word in characters etc.
                    3258   ; printf("   [") ;
00001E7C  4879 0000 3259          pea       @m68kde~1_64.L
00001E80  50C0      
00001E82  4E93      3260          jsr       (A3)
00001E84  584F      3261          addq.w    #4,A7
                    3262   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001E86  3014      3263          move.w    (A4),D0
00001E88  C07C 8000 3264          and.w     #32768,D0
00001E8C  0C40 8000 3265          cmp.w     #32768,D0
00001E90  660A      3266          bne.s     DumpRegisters_20
00001E92  4878 0054 3267          pea       84
00001E96  4E92      3268          jsr       (A2)
00001E98  584F      3269          addq.w    #4,A7
00001E9A  6008      3270          bra.s     DumpRegisters_21
                    3271   DumpRegisters_20:
00001E9C  4878 002D 3272          pea       45
00001EA0  4E92      3273          jsr       (A2)
00001EA2  584F      3274          addq.w    #4,A7
                    3275   DumpRegisters_21:
                    3276   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001EA4  3014      3277          move.w    (A4),D0
00001EA6  C07C 2000 3278          and.w     #8192,D0
00001EAA  0C40 2000 3279          cmp.w     #8192,D0
00001EAE  660A      3280          bne.s     DumpRegisters_22
00001EB0  4878 0053 3281          pea       83
00001EB4  4E92      3282          jsr       (A2)
00001EB6  584F      3283          addq.w    #4,A7
00001EB8  6008      3284          bra.s     DumpRegisters_23
                    3285   DumpRegisters_22:
00001EBA  4878 0055 3286          pea       85
00001EBE  4E92      3287          jsr       (A2)
00001EC0  584F      3288          addq.w    #4,A7
                    3289   DumpRegisters_23:
                    3290   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001EC2  3014      3291          move.w    (A4),D0
00001EC4  C07C 0400 3292          and.w     #1024,D0
00001EC8  0C40 0400 3293          cmp.w     #1024,D0
00001ECC  660A      3294          bne.s     DumpRegisters_24
00001ECE  4878 0031 3295          pea       49
00001ED2  4E92      3296          jsr       (A2)
00001ED4  584F      3297          addq.w    #4,A7
00001ED6  6008      3298          bra.s     DumpRegisters_25
                    3299   DumpRegisters_24:
00001ED8  4878 0030 3300          pea       48
00001EDC  4E92      3301          jsr       (A2)
00001EDE  584F      3302          addq.w    #4,A7
                    3303   DumpRegisters_25:
                    3304   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001EE0  3014      3305          move.w    (A4),D0
00001EE2  C07C 0200 3306          and.w     #512,D0
00001EE6  0C40 0200 3307          cmp.w     #512,D0
00001EEA  660A      3308          bne.s     DumpRegisters_26
00001EEC  4878 0031 3309          pea       49
00001EF0  4E92      3310          jsr       (A2)
00001EF2  584F      3311          addq.w    #4,A7
00001EF4  6008      3312          bra.s     DumpRegisters_27
                    3313   DumpRegisters_26:
00001EF6  4878 0030 3314          pea       48
00001EFA  4E92      3315          jsr       (A2)
00001EFC  584F      3316          addq.w    #4,A7
                    3317   DumpRegisters_27:
                    3318   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001EFE  3014      3319          move.w    (A4),D0
00001F00  C07C 0100 3320          and.w     #256,D0
00001F04  0C40 0100 3321          cmp.w     #256,D0
00001F08  660A      3322          bne.s     DumpRegisters_28
00001F0A  4878 0031 3323          pea       49
00001F0E  4E92      3324          jsr       (A2)
00001F10  584F      3325          addq.w    #4,A7
00001F12  6008      3326          bra.s     DumpRegisters_29
                    3327   DumpRegisters_28:
00001F14  4878 0030 3328          pea       48
00001F18  4E92      3329          jsr       (A2)
00001F1A  584F      3330          addq.w    #4,A7
                    3331   DumpRegisters_29:
                    3332   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001F1C  3014      3333          move.w    (A4),D0
00001F1E  C07C 0010 3334          and.w     #16,D0
00001F22  0C40 0010 3335          cmp.w     #16,D0
00001F26  660A      3336          bne.s     DumpRegisters_30
00001F28  4878 0058 3337          pea       88
00001F2C  4E92      3338          jsr       (A2)
00001F2E  584F      3339          addq.w    #4,A7
00001F30  6008      3340          bra.s     DumpRegisters_31
                    3341   DumpRegisters_30:
00001F32  4878 002D 3342          pea       45
00001F36  4E92      3343          jsr       (A2)
00001F38  584F      3344          addq.w    #4,A7
                    3345   DumpRegisters_31:
                    3346   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001F3A  3014      3347          move.w    (A4),D0
00001F3C  C07C 0008 3348          and.w     #8,D0
00001F40  0C40 0008 3349          cmp.w     #8,D0
00001F44  660A      3350          bne.s     DumpRegisters_32
00001F46  4878 004E 3351          pea       78
00001F4A  4E92      3352          jsr       (A2)
00001F4C  584F      3353          addq.w    #4,A7
00001F4E  6008      3354          bra.s     DumpRegisters_33
                    3355   DumpRegisters_32:
00001F50  4878 002D 3356          pea       45
00001F54  4E92      3357          jsr       (A2)
00001F56  584F      3358          addq.w    #4,A7
                    3359   DumpRegisters_33:
                    3360   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001F58  3014      3361          move.w    (A4),D0
00001F5A  C07C 0004 3362          and.w     #4,D0
00001F5E  0C40 0004 3363          cmp.w     #4,D0
00001F62  660A      3364          bne.s     DumpRegisters_34
00001F64  4878 005A 3365          pea       90
00001F68  4E92      3366          jsr       (A2)
00001F6A  584F      3367          addq.w    #4,A7
00001F6C  6008      3368          bra.s     DumpRegisters_35
                    3369   DumpRegisters_34:
00001F6E  4878 002D 3370          pea       45
00001F72  4E92      3371          jsr       (A2)
00001F74  584F      3372          addq.w    #4,A7
                    3373   DumpRegisters_35:
                    3374   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001F76  3014      3375          move.w    (A4),D0
00001F78  C07C 0002 3376          and.w     #2,D0
00001F7C  0C40 0002 3377          cmp.w     #2,D0
00001F80  660A      3378          bne.s     DumpRegisters_36
00001F82  4878 0056 3379          pea       86
00001F86  4E92      3380          jsr       (A2)
00001F88  584F      3381          addq.w    #4,A7
00001F8A  6008      3382          bra.s     DumpRegisters_37
                    3383   DumpRegisters_36:
00001F8C  4878 002D 3384          pea       45
00001F90  4E92      3385          jsr       (A2)
00001F92  584F      3386          addq.w    #4,A7
                    3387   DumpRegisters_37:
                    3388   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001F94  3014      3389          move.w    (A4),D0
00001F96  C07C 0001 3390          and.w     #1,D0
00001F9A  0C40 0001 3391          cmp.w     #1,D0
00001F9E  660A      3392          bne.s     DumpRegisters_38
00001FA0  4878 0043 3393          pea       67
00001FA4  4E92      3394          jsr       (A2)
00001FA6  584F      3395          addq.w    #4,A7
00001FA8  6008      3396          bra.s     DumpRegisters_39
                    3397   DumpRegisters_38:
00001FAA  4878 002D 3398          pea       45
00001FAE  4E92      3399          jsr       (A2)
00001FB0  584F      3400          addq.w    #4,A7
                    3401   DumpRegisters_39:
                    3402   ; putchar(']') ;
00001FB2  4878 005D 3403          pea       93
00001FB6  4E92      3404          jsr       (A2)
00001FB8  584F      3405          addq.w    #4,A7
                    3406   ; printf("\r\n PC = $%08X  ", PC) ;
00001FBA  2F39 0B00 3407          move.l    _PC.L,-(A7)
00001FBE  0120      
00001FC0  4879 0000 3408          pea       @m68kde~1_65.L
00001FC4  50C6      
00001FC6  4E93      3409          jsr       (A3)
00001FC8  504F      3410          addq.w    #8,A7
                    3411   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001FCA  2039 0B00 3412          move.l    _PC.L,D0
00001FCE  0120      
00001FD0  2040      3413          move.l    D0,A0
00001FD2  3010      3414          move.w    (A0),D0
00001FD4  0C40 4E4E 3415          cmp.w     #20046,D0
00001FD8  660A      3416          bne.s     DumpRegisters_40
                    3417   ; printf("[@ BREAKPOINT]") ;
00001FDA  4879 0000 3418          pea       @m68kde~1_66.L
00001FDE  50D6      
00001FE0  4E93      3419          jsr       (A3)
00001FE2  584F      3420          addq.w    #4,A7
                    3421   DumpRegisters_40:
                    3422   ; printf("\r\n") ;
00001FE4  4879 0000 3423          pea       @m68kde~1_1.L
00001FE8  4AC4      
00001FEA  4E93      3424          jsr       (A3)
00001FEC  584F      3425          addq.w    #4,A7
                    3426   ; for(i=0; i < 8; i++)    {
00001FEE  4244      3427          clr.w     D4
                    3428   DumpRegisters_42:
00001FF0  0C44 0008 3429          cmp.w     #8,D4
00001FF4  6C00 0040 3430          bge       DumpRegisters_44
                    3431   ; if(WatchPointSetOrCleared[i] == 1)
00001FF8  48C4      3432          ext.l     D4
00001FFA  2004      3433          move.l    D4,D0
00001FFC  E588      3434          lsl.l     #2,D0
00001FFE  41F9 0B00 3435          lea       _WatchPointSetOrCleared.L,A0
00002002  01A2      
00002004  2030 0800 3436          move.l    0(A0,D0.L),D0
00002008  0C80 0000 3437          cmp.l     #1,D0
0000200C  0001      
0000200E  6622      3438          bne.s     DumpRegisters_45
                    3439   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00002010  220D      3440          move.l    A5,D1
00002012  48C4      3441          ext.l     D4
00002014  2F00      3442          move.l    D0,-(A7)
00002016  2004      3443          move.l    D4,D0
00002018  C1FC 0064 3444          muls      #100,D0
0000201C  D280      3445          add.l     D0,D1
0000201E  201F      3446          move.l    (A7)+,D0
00002020  2F01      3447          move.l    D1,-(A7)
00002022  48C4      3448          ext.l     D4
00002024  2F04      3449          move.l    D4,-(A7)
00002026  4879 0000 3450          pea       @m68kde~1_67.L
0000202A  50E6      
0000202C  4E93      3451          jsr       (A3)
0000202E  DEFC 000C 3452          add.w     #12,A7
                    3453   DumpRegisters_45:
00002032  5244      3454          addq.w    #1,D4
00002034  60BA      3455          bra       DumpRegisters_42
                    3456   DumpRegisters_44:
00002036  4CDF 3CFC 3457          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000203A  4E75      3458          rts
                    3459   ; }
                    3460   ; }
                    3461   ; // Trace Exception Handler
                    3462   ; void DumpRegistersandPause(void)
                    3463   ; {
                    3464   _DumpRegistersandPause:
0000203C  2F0A      3465          move.l    A2,-(A7)
0000203E  45F9 0000 3466          lea       _printf.L,A2
00002042  40EE      
                    3467   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00002044  4879 0000 3468          pea       @m68kde~1_68.L
00002048  50F2      
0000204A  4E92      3469          jsr       (A2)
0000204C  584F      3470          addq.w    #4,A7
                    3471   ; printf("\r\nBreak Points :[Disabled]") ;
0000204E  4879 0000 3472          pea       @m68kde~1_69.L
00002052  5112      
00002054  4E92      3473          jsr       (A2)
00002056  584F      3474          addq.w    #4,A7
                    3475   ; DumpRegisters() ;
00002058  4EB8 1B88 3476          jsr       _DumpRegisters
                    3477   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000205C  4879 0000 3478          pea       @m68kde~1_70.L
00002060  512E      
00002062  4E92      3479          jsr       (A2)
00002064  584F      3480          addq.w    #4,A7
                    3481   ; printf("\r\nPress <ESC> to Resume Program") ;
00002066  4879 0000 3482          pea       @m68kde~1_71.L
0000206A  515A      
0000206C  4E92      3483          jsr       (A2)
0000206E  584F      3484          addq.w    #4,A7
                    3485   ; menu() ;
00002070  4EB9 0000 3486          jsr       _menu
00002074  2C20      
00002076  245F      3487          move.l    (A7)+,A2
00002078  4E75      3488          rts
                    3489   ; }
                    3490   ; void ChangeRegisters(void)
                    3491   ; {
                    3492   _ChangeRegisters:
0000207A  4E56 FFFC 3493          link      A6,#-4
0000207E  48E7 303C 3494          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002082  45F9 0000 3495          lea       _printf.L,A2
00002086  40EE      
00002088  47EE FFFC 3496          lea       -4(A6),A3
0000208C  49F8 0CA4 3497          lea       _Get8HexDigits.L,A4
00002090  4BF8 0B68 3498          lea       __getch.L,A5
                    3499   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    3500   ; int reg_val ;
                    3501   ; char c, reg[3] ;
                    3502   ; reg[0] = tolower(_getch()) ;
00002094  2F00      3503          move.l    D0,-(A7)
00002096  4E95      3504          jsr       (A5)
00002098  2200      3505          move.l    D0,D1
0000209A  201F      3506          move.l    (A7)+,D0
0000209C  2F01      3507          move.l    D1,-(A7)
0000209E  4EB9 0000 3508          jsr       _tolower
000020A2  379E      
000020A4  584F      3509          addq.w    #4,A7
000020A6  1680      3510          move.b    D0,(A3)
                    3511   ; reg[1] = c = tolower(_getch()) ;
000020A8  2F00      3512          move.l    D0,-(A7)
000020AA  4E95      3513          jsr       (A5)
000020AC  2200      3514          move.l    D0,D1
000020AE  201F      3515          move.l    (A7)+,D0
000020B0  2F01      3516          move.l    D1,-(A7)
000020B2  4EB9 0000 3517          jsr       _tolower
000020B6  379E      
000020B8  584F      3518          addq.w    #4,A7
000020BA  1400      3519          move.b    D0,D2
000020BC  1740 0001 3520          move.b    D0,1(A3)
                    3521   ; if(reg[0] == (char)('d'))  {    // change data register
000020C0  1013      3522          move.b    (A3),D0
000020C2  0C00 0064 3523          cmp.b     #100,D0
000020C6  6600 00AE 3524          bne       ChangeRegisters_1
                    3525   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000020CA  102B 0001 3526          move.b    1(A3),D0
000020CE  0C00 0037 3527          cmp.b     #55,D0
000020D2  6E0A      3528          bgt.s     ChangeRegisters_5
000020D4  102B 0001 3529          move.b    1(A3),D0
000020D8  0C00 0030 3530          cmp.b     #48,D0
000020DC  6C0E      3531          bge.s     ChangeRegisters_3
                    3532   ChangeRegisters_5:
                    3533   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000020DE  4879 0000 3534          pea       @m68kde~1_72.L
000020E2  517A      
000020E4  4E92      3535          jsr       (A2)
000020E6  584F      3536          addq.w    #4,A7
                    3537   ; return ;
000020E8  6000 0244 3538          bra       ChangeRegisters_6
                    3539   ChangeRegisters_3:
                    3540   ; }
                    3541   ; else {
                    3542   ; printf("\r\nD%c = ", c) ;
000020EC  4882      3543          ext.w     D2
000020EE  48C2      3544          ext.l     D2
000020F0  2F02      3545          move.l    D2,-(A7)
000020F2  4879 0000 3546          pea       @m68kde~1_73.L
000020F6  51A6      
000020F8  4E92      3547          jsr       (A2)
000020FA  504F      3548          addq.w    #8,A7
                    3549   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000020FC  42A7      3550          clr.l     -(A7)
000020FE  4E94      3551          jsr       (A4)
00002100  584F      3552          addq.w    #4,A7
00002102  2600      3553          move.l    D0,D3
                    3554   ; }
                    3555   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    3556   ; if(c == (char)('0'))
00002104  0C02 0030 3557          cmp.b     #48,D2
00002108  660A      3558          bne.s     ChangeRegisters_7
                    3559   ; d0 = reg_val ;
0000210A  23C3 0B00 3560          move.l    D3,_d0.L
0000210E  00E4      
00002110  6000 0060 3561          bra       ChangeRegisters_20
                    3562   ChangeRegisters_7:
                    3563   ; else if(c == (char)('1'))
00002114  0C02 0031 3564          cmp.b     #49,D2
00002118  660A      3565          bne.s     ChangeRegisters_9
                    3566   ; d1 = reg_val ;
0000211A  23C3 0B00 3567          move.l    D3,_d1.L
0000211E  00E8      
00002120  6000 0050 3568          bra       ChangeRegisters_20
                    3569   ChangeRegisters_9:
                    3570   ; else if(c == (char)('2'))
00002124  0C02 0032 3571          cmp.b     #50,D2
00002128  660A      3572          bne.s     ChangeRegisters_11
                    3573   ; d2 = reg_val ;
0000212A  23C3 0B00 3574          move.l    D3,_d2.L
0000212E  00EC      
00002130  6000 0040 3575          bra       ChangeRegisters_20
                    3576   ChangeRegisters_11:
                    3577   ; else if(c == (char)('3'))
00002134  0C02 0033 3578          cmp.b     #51,D2
00002138  6608      3579          bne.s     ChangeRegisters_13
                    3580   ; d3 = reg_val ;
0000213A  23C3 0B00 3581          move.l    D3,_d3.L
0000213E  00F0      
00002140  6030      3582          bra.s     ChangeRegisters_20
                    3583   ChangeRegisters_13:
                    3584   ; else if(c == (char)('4'))
00002142  0C02 0034 3585          cmp.b     #52,D2
00002146  6608      3586          bne.s     ChangeRegisters_15
                    3587   ; d4 = reg_val ;
00002148  23C3 0B00 3588          move.l    D3,_d4.L
0000214C  00F4      
0000214E  6022      3589          bra.s     ChangeRegisters_20
                    3590   ChangeRegisters_15:
                    3591   ; else if(c == (char)('5'))
00002150  0C02 0035 3592          cmp.b     #53,D2
00002154  6608      3593          bne.s     ChangeRegisters_17
                    3594   ; d5 = reg_val ;
00002156  23C3 0B00 3595          move.l    D3,_d5.L
0000215A  00F8      
0000215C  6014      3596          bra.s     ChangeRegisters_20
                    3597   ChangeRegisters_17:
                    3598   ; else if(c == (char)('6'))
0000215E  0C02 0036 3599          cmp.b     #54,D2
00002162  6608      3600          bne.s     ChangeRegisters_19
                    3601   ; d6 = reg_val ;
00002164  23C3 0B00 3602          move.l    D3,_d6.L
00002168  00FC      
0000216A  6006      3603          bra.s     ChangeRegisters_20
                    3604   ChangeRegisters_19:
                    3605   ; else
                    3606   ; d7 = reg_val ;
0000216C  23C3 0B00 3607          move.l    D3,_d7.L
00002170  0100      
                    3608   ChangeRegisters_20:
00002172  6000 01B6 3609          bra       ChangeRegisters_51
                    3610   ChangeRegisters_1:
                    3611   ; }
                    3612   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00002176  1013      3613          move.b    (A3),D0
00002178  0C00 0061 3614          cmp.b     #97,D0
0000217C  6600 00A6 3615          bne       ChangeRegisters_21
                    3616   ; if((c > (char)('7')) || (c < (char)('0'))) {
00002180  0C02 0037 3617          cmp.b     #55,D2
00002184  6E06      3618          bgt.s     ChangeRegisters_25
00002186  0C02 0030 3619          cmp.b     #48,D2
0000218A  6C0E      3620          bge.s     ChangeRegisters_23
                    3621   ChangeRegisters_25:
                    3622   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
0000218C  4879 0000 3623          pea       @m68kde~1_74.L
00002190  51B0      
00002192  4E92      3624          jsr       (A2)
00002194  584F      3625          addq.w    #4,A7
                    3626   ; return ;
00002196  6000 0196 3627          bra       ChangeRegisters_6
                    3628   ChangeRegisters_23:
                    3629   ; }
                    3630   ; else {
                    3631   ; printf("\r\nA%c = ", c) ;
0000219A  4882      3632          ext.w     D2
0000219C  48C2      3633          ext.l     D2
0000219E  2F02      3634          move.l    D2,-(A7)
000021A0  4879 0000 3635          pea       @m68kde~1_75.L
000021A4  51DE      
000021A6  4E92      3636          jsr       (A2)
000021A8  504F      3637          addq.w    #8,A7
                    3638   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000021AA  42A7      3639          clr.l     -(A7)
000021AC  4E94      3640          jsr       (A4)
000021AE  584F      3641          addq.w    #4,A7
000021B0  2600      3642          move.l    D0,D3
                    3643   ; }
                    3644   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    3645   ; if(c == (char)('0'))
000021B2  0C02 0030 3646          cmp.b     #48,D2
000021B6  660A      3647          bne.s     ChangeRegisters_26
                    3648   ; a0 = reg_val ;
000021B8  23C3 0B00 3649          move.l    D3,_a0.L
000021BC  0104      
000021BE  6000 0060 3650          bra       ChangeRegisters_39
                    3651   ChangeRegisters_26:
                    3652   ; else if(c == (char)('1'))
000021C2  0C02 0031 3653          cmp.b     #49,D2
000021C6  660A      3654          bne.s     ChangeRegisters_28
                    3655   ; a1 = reg_val ;
000021C8  23C3 0B00 3656          move.l    D3,_a1.L
000021CC  0108      
000021CE  6000 0050 3657          bra       ChangeRegisters_39
                    3658   ChangeRegisters_28:
                    3659   ; else if(c == (char)('2'))
000021D2  0C02 0032 3660          cmp.b     #50,D2
000021D6  660A      3661          bne.s     ChangeRegisters_30
                    3662   ; a2 = reg_val ;
000021D8  23C3 0B00 3663          move.l    D3,_a2.L
000021DC  010C      
000021DE  6000 0040 3664          bra       ChangeRegisters_39
                    3665   ChangeRegisters_30:
                    3666   ; else if(c == (char)('3'))
000021E2  0C02 0033 3667          cmp.b     #51,D2
000021E6  6608      3668          bne.s     ChangeRegisters_32
                    3669   ; a3 = reg_val ;
000021E8  23C3 0B00 3670          move.l    D3,_a3.L
000021EC  0110      
000021EE  6030      3671          bra.s     ChangeRegisters_39
                    3672   ChangeRegisters_32:
                    3673   ; else if(c == (char)('4'))
000021F0  0C02 0034 3674          cmp.b     #52,D2
000021F4  6608      3675          bne.s     ChangeRegisters_34
                    3676   ; a4 = reg_val ;
000021F6  23C3 0B00 3677          move.l    D3,_a4.L
000021FA  0114      
000021FC  6022      3678          bra.s     ChangeRegisters_39
                    3679   ChangeRegisters_34:
                    3680   ; else if(c == (char)('5'))
000021FE  0C02 0035 3681          cmp.b     #53,D2
00002202  6608      3682          bne.s     ChangeRegisters_36
                    3683   ; a5 = reg_val ;
00002204  23C3 0B00 3684          move.l    D3,_a5.L
00002208  0118      
0000220A  6014      3685          bra.s     ChangeRegisters_39
                    3686   ChangeRegisters_36:
                    3687   ; else if(c == (char)('6'))
0000220C  0C02 0036 3688          cmp.b     #54,D2
00002210  6608      3689          bne.s     ChangeRegisters_38
                    3690   ; a6 = reg_val ;
00002212  23C3 0B00 3691          move.l    D3,_a6.L
00002216  011C      
00002218  6006      3692          bra.s     ChangeRegisters_39
                    3693   ChangeRegisters_38:
                    3694   ; else
                    3695   ; USP = reg_val ;
0000221A  23C3 0B00 3696          move.l    D3,_USP.L
0000221E  0128      
                    3697   ChangeRegisters_39:
00002220  6000 0108 3698          bra       ChangeRegisters_51
                    3699   ChangeRegisters_21:
                    3700   ; }
                    3701   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00002224  1013      3702          move.b    (A3),D0
00002226  0C00 0075 3703          cmp.b     #117,D0
0000222A  6600 004E 3704          bne       ChangeRegisters_40
0000222E  0C02 0073 3705          cmp.b     #115,D2
00002232  6600 0046 3706          bne       ChangeRegisters_40
                    3707   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00002236  2F00      3708          move.l    D0,-(A7)
00002238  4E95      3709          jsr       (A5)
0000223A  2200      3710          move.l    D0,D1
0000223C  201F      3711          move.l    (A7)+,D0
0000223E  2F01      3712          move.l    D1,-(A7)
00002240  4EB9 0000 3713          jsr       _tolower
00002244  379E      
00002246  584F      3714          addq.w    #4,A7
00002248  0C80 0000 3715          cmp.l     #112,D0
0000224C  0070      
0000224E  6618      3716          bne.s     ChangeRegisters_42
                    3717   ; printf("\r\nUser SP = ") ;
00002250  4879 0000 3718          pea       @m68kde~1_76.L
00002254  51E8      
00002256  4E92      3719          jsr       (A2)
00002258  584F      3720          addq.w    #4,A7
                    3721   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000225A  42A7      3722          clr.l     -(A7)
0000225C  4E94      3723          jsr       (A4)
0000225E  584F      3724          addq.w    #4,A7
00002260  23C0 0B00 3725          move.l    D0,_USP.L
00002264  0128      
00002266  600E      3726          bra.s     ChangeRegisters_43
                    3727   ChangeRegisters_42:
                    3728   ; }
                    3729   ; else {
                    3730   ; printf("\r\nIllegal Register....") ;
00002268  4879 0000 3731          pea       @m68kde~1_77.L
0000226C  51F6      
0000226E  4E92      3732          jsr       (A2)
00002270  584F      3733          addq.w    #4,A7
                    3734   ; return ;
00002272  6000 00BA 3735          bra       ChangeRegisters_6
                    3736   ChangeRegisters_43:
00002276  6000 00B2 3737          bra       ChangeRegisters_51
                    3738   ChangeRegisters_40:
                    3739   ; }
                    3740   ; }
                    3741   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
0000227A  1013      3742          move.b    (A3),D0
0000227C  0C00 0073 3743          cmp.b     #115,D0
00002280  6600 004E 3744          bne       ChangeRegisters_44
00002284  0C02 0073 3745          cmp.b     #115,D2
00002288  6600 0046 3746          bne       ChangeRegisters_44
                    3747   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
0000228C  2F00      3748          move.l    D0,-(A7)
0000228E  4E95      3749          jsr       (A5)
00002290  2200      3750          move.l    D0,D1
00002292  201F      3751          move.l    (A7)+,D0
00002294  2F01      3752          move.l    D1,-(A7)
00002296  4EB9 0000 3753          jsr       _tolower
0000229A  379E      
0000229C  584F      3754          addq.w    #4,A7
0000229E  0C80 0000 3755          cmp.l     #112,D0
000022A2  0070      
000022A4  6618      3756          bne.s     ChangeRegisters_46
                    3757   ; printf("\r\nSystem SP = ") ;
000022A6  4879 0000 3758          pea       @m68kde~1_78.L
000022AA  520E      
000022AC  4E92      3759          jsr       (A2)
000022AE  584F      3760          addq.w    #4,A7
                    3761   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000022B0  42A7      3762          clr.l     -(A7)
000022B2  4E94      3763          jsr       (A4)
000022B4  584F      3764          addq.w    #4,A7
000022B6  23C0 0B00 3765          move.l    D0,_SSP.L
000022BA  0124      
000022BC  600E      3766          bra.s     ChangeRegisters_47
                    3767   ChangeRegisters_46:
                    3768   ; }
                    3769   ; else {
                    3770   ; printf("\r\nIllegal Register....") ;
000022BE  4879 0000 3771          pea       @m68kde~1_77.L
000022C2  51F6      
000022C4  4E92      3772          jsr       (A2)
000022C6  584F      3773          addq.w    #4,A7
                    3774   ; return ;
000022C8  6000 0064 3775          bra       ChangeRegisters_6
                    3776   ChangeRegisters_47:
000022CC  6000 005C 3777          bra       ChangeRegisters_51
                    3778   ChangeRegisters_44:
                    3779   ; }
                    3780   ; }
                    3781   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
000022D0  1013      3782          move.b    (A3),D0
000022D2  0C00 0070 3783          cmp.b     #112,D0
000022D6  6620      3784          bne.s     ChangeRegisters_48
000022D8  0C02 0063 3785          cmp.b     #99,D2
000022DC  661A      3786          bne.s     ChangeRegisters_48
                    3787   ; printf("\r\nPC = ") ;
000022DE  4879 0000 3788          pea       @m68kde~1_79.L
000022E2  521E      
000022E4  4E92      3789          jsr       (A2)
000022E6  584F      3790          addq.w    #4,A7
                    3791   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000022E8  42A7      3792          clr.l     -(A7)
000022EA  4E94      3793          jsr       (A4)
000022EC  584F      3794          addq.w    #4,A7
000022EE  23C0 0B00 3795          move.l    D0,_PC.L
000022F2  0120      
000022F4  6000 0034 3796          bra       ChangeRegisters_51
                    3797   ChangeRegisters_48:
                    3798   ; }
                    3799   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
000022F8  1013      3800          move.b    (A3),D0
000022FA  0C00 0073 3801          cmp.b     #115,D0
000022FE  6620      3802          bne.s     ChangeRegisters_50
00002300  0C02 0072 3803          cmp.b     #114,D2
00002304  661A      3804          bne.s     ChangeRegisters_50
                    3805   ; printf("\r\nSR = ") ;
00002306  4879 0000 3806          pea       @m68kde~1_80.L
0000230A  5226      
0000230C  4E92      3807          jsr       (A2)
0000230E  584F      3808          addq.w    #4,A7
                    3809   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00002310  42A7      3810          clr.l     -(A7)
00002312  4EB8 0C58 3811          jsr       _Get4HexDigits
00002316  584F      3812          addq.w    #4,A7
00002318  33C0 0B00 3813          move.w    D0,_SR.L
0000231C  012C      
0000231E  600A      3814          bra.s     ChangeRegisters_51
                    3815   ChangeRegisters_50:
                    3816   ; }
                    3817   ; else
                    3818   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00002320  4879 0000 3819          pea       @m68kde~1_81.L
00002324  522E      
00002326  4E92      3820          jsr       (A2)
00002328  584F      3821          addq.w    #4,A7
                    3822   ChangeRegisters_51:
                    3823   ; DumpRegisters() ;
0000232A  4EB8 1B88 3824          jsr       _DumpRegisters
                    3825   ChangeRegisters_6:
0000232E  4CDF 3C0C 3826          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002332  4E5E      3827          unlk      A6
00002334  4E75      3828          rts
                    3829   ; }
                    3830   ; void BreakPointDisplay(void)
                    3831   ; {
                    3832   _BreakPointDisplay:
00002336  48E7 3030 3833          movem.l   D2/D3/A2/A3,-(A7)
0000233A  45F9 0000 3834          lea       _printf.L,A2
0000233E  40EE      
00002340  47F9 0B00 3835          lea       _BreakPointAddress.L,A3
00002344  012E      
                    3836   ; int i, BreakPointsSet = 0 ;
00002346  4283      3837          clr.l     D3
                    3838   ; // any break points  set
                    3839   ; for(i = 0; i < 8; i++)  {
00002348  4282      3840          clr.l     D2
                    3841   BreakPointDisplay_1:
0000234A  0C82 0000 3842          cmp.l     #8,D2
0000234E  0008      
00002350  6C1C      3843          bge.s     BreakPointDisplay_3
                    3844   ; if(BreakPointSetOrCleared[i] == 1)
00002352  2002      3845          move.l    D2,D0
00002354  E588      3846          lsl.l     #2,D0
00002356  41F9 0B00 3847          lea       _BreakPointSetOrCleared.L,A0
0000235A  015E      
0000235C  2030 0800 3848          move.l    0(A0,D0.L),D0
00002360  0C80 0000 3849          cmp.l     #1,D0
00002364  0001      
00002366  6602      3850          bne.s     BreakPointDisplay_4
                    3851   ; BreakPointsSet = 1;
00002368  7601      3852          moveq     #1,D3
                    3853   BreakPointDisplay_4:
0000236A  5282      3854          addq.l    #1,D2
0000236C  60DC      3855          bra       BreakPointDisplay_1
                    3856   BreakPointDisplay_3:
                    3857   ; }
                    3858   ; if(BreakPointsSet == 1) {
0000236E  0C83 0000 3859          cmp.l     #1,D3
00002372  0001      
00002374  6616      3860          bne.s     BreakPointDisplay_6
                    3861   ; printf("\r\n\r\nNum     Address      Instruction") ;
00002376  4879 0000 3862          pea       @m68kde~1_82.L
0000237A  526A      
0000237C  4E92      3863          jsr       (A2)
0000237E  584F      3864          addq.w    #4,A7
                    3865   ; printf("\r\n---     ---------    -----------") ;
00002380  4879 0000 3866          pea       @m68kde~1_83.L
00002384  5290      
00002386  4E92      3867          jsr       (A2)
00002388  584F      3868          addq.w    #4,A7
0000238A  600A      3869          bra.s     BreakPointDisplay_7
                    3870   BreakPointDisplay_6:
                    3871   ; }
                    3872   ; else
                    3873   ; printf("\r\nNo BreakPoints Set") ;
0000238C  4879 0000 3874          pea       @m68kde~1_84.L
00002390  52B4      
00002392  4E92      3875          jsr       (A2)
00002394  584F      3876          addq.w    #4,A7
                    3877   BreakPointDisplay_7:
                    3878   ; for(i = 0; i < 8; i++)  {
00002396  4282      3879          clr.l     D2
                    3880   BreakPointDisplay_8:
00002398  0C82 0000 3881          cmp.l     #8,D2
0000239C  0008      
0000239E  6C00 005A 3882          bge       BreakPointDisplay_10
                    3883   ; // put opcode back, then put break point back
                    3884   ; if(BreakPointSetOrCleared[i] == 1)  {
000023A2  2002      3885          move.l    D2,D0
000023A4  E588      3886          lsl.l     #2,D0
000023A6  41F9 0B00 3887          lea       _BreakPointSetOrCleared.L,A0
000023AA  015E      
000023AC  2030 0800 3888          move.l    0(A0,D0.L),D0
000023B0  0C80 0000 3889          cmp.l     #1,D0
000023B4  0001      
000023B6  6600 003E 3890          bne       BreakPointDisplay_11
                    3891   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
000023BA  2002      3892          move.l    D2,D0
000023BC  E388      3893          lsl.l     #1,D0
000023BE  41F9 0B00 3894          lea       _BreakPointInstruction.L,A0
000023C2  014E      
000023C4  2202      3895          move.l    D2,D1
000023C6  E589      3896          lsl.l     #2,D1
000023C8  2233 1800 3897          move.l    0(A3,D1.L),D1
000023CC  2241      3898          move.l    D1,A1
000023CE  32B0 0800 3899          move.w    0(A0,D0.L),(A1)
                    3900   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
000023D2  2002      3901          move.l    D2,D0
000023D4  E588      3902          lsl.l     #2,D0
000023D6  2033 0800 3903          move.l    0(A3,D0.L),D0
000023DA  2040      3904          move.l    D0,A0
000023DC  30BC 4E4E 3905          move.w    #20046,(A0)
                    3906   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
000023E0  2202      3907          move.l    D2,D1
000023E2  E589      3908          lsl.l     #2,D1
000023E4  2F33 1800 3909          move.l    0(A3,D1.L),-(A7)
000023E8  2F02      3910          move.l    D2,-(A7)
000023EA  4879 0000 3911          pea       @m68kde~1_85.L
000023EE  52CA      
000023F0  4E92      3912          jsr       (A2)
000023F2  DEFC 000C 3913          add.w     #12,A7
                    3914   BreakPointDisplay_11:
000023F6  5282      3915          addq.l    #1,D2
000023F8  609E      3916          bra       BreakPointDisplay_8
                    3917   BreakPointDisplay_10:
                    3918   ; }
                    3919   ; }
                    3920   ; printf("\r\n") ;
000023FA  4879 0000 3921          pea       @m68kde~1_1.L
000023FE  4AC4      
00002400  4E92      3922          jsr       (A2)
00002402  584F      3923          addq.w    #4,A7
00002404  4CDF 0C0C 3924          movem.l   (A7)+,D2/D3/A2/A3
00002408  4E75      3925          rts
                    3926   ; }
                    3927   ; void WatchPointDisplay(void)
                    3928   ; {
                    3929   _WatchPointDisplay:
0000240A  48E7 3020 3930          movem.l   D2/D3/A2,-(A7)
0000240E  45F9 0000 3931          lea       _printf.L,A2
00002412  40EE      
                    3932   ; int i ;
                    3933   ; int WatchPointsSet = 0 ;
00002414  4283      3934          clr.l     D3
                    3935   ; // any watchpoints set
                    3936   ; for(i = 0; i < 8; i++)  {
00002416  4282      3937          clr.l     D2
                    3938   WatchPointDisplay_1:
00002418  0C82 0000 3939          cmp.l     #8,D2
0000241C  0008      
0000241E  6C1C      3940          bge.s     WatchPointDisplay_3
                    3941   ; if(WatchPointSetOrCleared[i] == 1)
00002420  2002      3942          move.l    D2,D0
00002422  E588      3943          lsl.l     #2,D0
00002424  41F9 0B00 3944          lea       _WatchPointSetOrCleared.L,A0
00002428  01A2      
0000242A  2030 0800 3945          move.l    0(A0,D0.L),D0
0000242E  0C80 0000 3946          cmp.l     #1,D0
00002432  0001      
00002434  6602      3947          bne.s     WatchPointDisplay_4
                    3948   ; WatchPointsSet = 1;
00002436  7601      3949          moveq     #1,D3
                    3950   WatchPointDisplay_4:
00002438  5282      3951          addq.l    #1,D2
0000243A  60DC      3952          bra       WatchPointDisplay_1
                    3953   WatchPointDisplay_3:
                    3954   ; }
                    3955   ; if(WatchPointsSet == 1) {
0000243C  0C83 0000 3956          cmp.l     #1,D3
00002440  0001      
00002442  6616      3957          bne.s     WatchPointDisplay_6
                    3958   ; printf("\r\nNum     Address") ;
00002444  4879 0000 3959          pea       @m68kde~1_86.L
00002448  52DA      
0000244A  4E92      3960          jsr       (A2)
0000244C  584F      3961          addq.w    #4,A7
                    3962   ; printf("\r\n---     ---------") ;
0000244E  4879 0000 3963          pea       @m68kde~1_87.L
00002452  52EC      
00002454  4E92      3964          jsr       (A2)
00002456  584F      3965          addq.w    #4,A7
00002458  600A      3966          bra.s     WatchPointDisplay_7
                    3967   WatchPointDisplay_6:
                    3968   ; }
                    3969   ; else
                    3970   ; printf("\r\nNo WatchPoints Set") ;
0000245A  4879 0000 3971          pea       @m68kde~1_88.L
0000245E  5300      
00002460  4E92      3972          jsr       (A2)
00002462  584F      3973          addq.w    #4,A7
                    3974   WatchPointDisplay_7:
                    3975   ; for(i = 0; i < 8; i++)  {
00002464  4282      3976          clr.l     D2
                    3977   WatchPointDisplay_8:
00002466  0C82 0000 3978          cmp.l     #8,D2
0000246A  0008      
0000246C  6C00 0038 3979          bge       WatchPointDisplay_10
                    3980   ; if(WatchPointSetOrCleared[i] == 1)
00002470  2002      3981          move.l    D2,D0
00002472  E588      3982          lsl.l     #2,D0
00002474  41F9 0B00 3983          lea       _WatchPointSetOrCleared.L,A0
00002478  01A2      
0000247A  2030 0800 3984          move.l    0(A0,D0.L),D0
0000247E  0C80 0000 3985          cmp.l     #1,D0
00002482  0001      
00002484  661C      3986          bne.s     WatchPointDisplay_11
                    3987   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00002486  2202      3988          move.l    D2,D1
00002488  E589      3989          lsl.l     #2,D1
0000248A  41F9 0B00 3990          lea       _WatchPointAddress.L,A0
0000248E  0182      
00002490  2F30 1800 3991          move.l    0(A0,D1.L),-(A7)
00002494  2F02      3992          move.l    D2,-(A7)
00002496  4879 0000 3993          pea       @m68kde~1_85.L
0000249A  52CA      
0000249C  4E92      3994          jsr       (A2)
0000249E  DEFC 000C 3995          add.w     #12,A7
                    3996   WatchPointDisplay_11:
000024A2  5282      3997          addq.l    #1,D2
000024A4  60C0      3998          bra       WatchPointDisplay_8
                    3999   WatchPointDisplay_10:
                    4000   ; }
                    4001   ; printf("\r\n") ;
000024A6  4879 0000 4002          pea       @m68kde~1_1.L
000024AA  4AC4      
000024AC  4E92      4003          jsr       (A2)
000024AE  584F      4004          addq.w    #4,A7
000024B0  4CDF 040C 4005          movem.l   (A7)+,D2/D3/A2
000024B4  4E75      4006          rts
                    4007   ; }
                    4008   ; void BreakPointClear(void)
                    4009   ; {
                    4010   _BreakPointClear:
000024B6  4E56 FFFC 4011          link      A6,#-4
000024BA  48E7 2020 4012          movem.l   D2/A2,-(A7)
000024BE  45F9 0000 4013          lea       _printf.L,A2
000024C2  40EE      
                    4014   ; unsigned int i ;
                    4015   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4016   ; BreakPointDisplay() ;
000024C4  4EB8 2336 4017          jsr       _BreakPointDisplay
                    4018   ; printf("\r\nEnter Break Point Number: ") ;
000024C8  4879 0000 4019          pea       @m68kde~1_89.L
000024CC  5316      
000024CE  4E92      4020          jsr       (A2)
000024D0  584F      4021          addq.w    #4,A7
                    4022   ; i = xtod(_getch()) ;           // get break pointer number
000024D2  2F00      4023          move.l    D0,-(A7)
000024D4  4EB8 0B68 4024          jsr       __getch
000024D8  2200      4025          move.l    D0,D1
000024DA  201F      4026          move.l    (A7)+,D0
000024DC  2F01      4027          move.l    D1,-(A7)
000024DE  4EB8 0BD2 4028          jsr       _xtod
000024E2  584F      4029          addq.w    #4,A7
000024E4  C0BC 0000 4030          and.l     #255,D0
000024E8  00FF      
000024EA  2400      4031          move.l    D0,D2
                    4032   ; if((i < 0) || (i > 7))   {
000024EC  0C82 0000 4033          cmp.l     #0,D2
000024F0  0000      
000024F2  6508      4034          blo.s     BreakPointClear_3
000024F4  0C82 0000 4035          cmp.l     #7,D2
000024F8  0007      
000024FA  630E      4036          bls.s     BreakPointClear_1
                    4037   BreakPointClear_3:
                    4038   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000024FC  4879 0000 4039          pea       @m68kde~1_90.L
00002500  5334      
00002502  4E92      4040          jsr       (A2)
00002504  584F      4041          addq.w    #4,A7
                    4042   ; return ;
00002506  6000 0080 4043          bra       BreakPointClear_4
                    4044   BreakPointClear_1:
                    4045   ; }
                    4046   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
0000250A  2002      4047          move.l    D2,D0
0000250C  E588      4048          lsl.l     #2,D0
0000250E  41F9 0B00 4049          lea       _BreakPointSetOrCleared.L,A0
00002512  015E      
00002514  2030 0800 4050          move.l    0(A0,D0.L),D0
00002518  0C80 0000 4051          cmp.l     #1,D0
0000251C  0001      
0000251E  6600 005A 4052          bne       BreakPointClear_5
                    4053   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00002522  2002      4054          move.l    D2,D0
00002524  E588      4055          lsl.l     #2,D0
00002526  41F9 0B00 4056          lea       _BreakPointAddress.L,A0
0000252A  012E      
0000252C  2D70 0800 4057          move.l    0(A0,D0.L),-4(A6)
00002530  FFFC      
                    4058   ; BreakPointAddress[i] = 0 ;
00002532  2002      4059          move.l    D2,D0
00002534  E588      4060          lsl.l     #2,D0
00002536  41F9 0B00 4061          lea       _BreakPointAddress.L,A0
0000253A  012E      
0000253C  42B0 0800 4062          clr.l     0(A0,D0.L)
                    4063   ; BreakPointSetOrCleared[i] = 0 ;
00002540  2002      4064          move.l    D2,D0
00002542  E588      4065          lsl.l     #2,D0
00002544  41F9 0B00 4066          lea       _BreakPointSetOrCleared.L,A0
00002548  015E      
0000254A  42B0 0800 4067          clr.l     0(A0,D0.L)
                    4068   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000254E  2002      4069          move.l    D2,D0
00002550  E388      4070          lsl.l     #1,D0
00002552  41F9 0B00 4071          lea       _BreakPointInstruction.L,A0
00002556  014E      
00002558  226E FFFC 4072          move.l    -4(A6),A1
0000255C  32B0 0800 4073          move.w    0(A0,D0.L),(A1)
                    4074   ; BreakPointInstruction[i] = 0 ;
00002560  2002      4075          move.l    D2,D0
00002562  E388      4076          lsl.l     #1,D0
00002564  41F9 0B00 4077          lea       _BreakPointInstruction.L,A0
00002568  014E      
0000256A  4270 0800 4078          clr.w     0(A0,D0.L)
                    4079   ; printf("\r\nBreak Point Cleared.....\r\n") ;
0000256E  4879 0000 4080          pea       @m68kde~1_91.L
00002572  5350      
00002574  4E92      4081          jsr       (A2)
00002576  584F      4082          addq.w    #4,A7
00002578  600A      4083          bra.s     BreakPointClear_6
                    4084   BreakPointClear_5:
                    4085   ; }
                    4086   ; else
                    4087   ; printf("\r\nBreak Point wasn't Set.....") ;
0000257A  4879 0000 4088          pea       @m68kde~1_92.L
0000257E  536E      
00002580  4E92      4089          jsr       (A2)
00002582  584F      4090          addq.w    #4,A7
                    4091   BreakPointClear_6:
                    4092   ; BreakPointDisplay() ;
00002584  4EB8 2336 4093          jsr       _BreakPointDisplay
                    4094   ; return ;
                    4095   BreakPointClear_4:
00002588  4CDF 0404 4096          movem.l   (A7)+,D2/A2
0000258C  4E5E      4097          unlk      A6
0000258E  4E75      4098          rts
                    4099   ; }
                    4100   ; void WatchPointClear(void)
                    4101   ; {
                    4102   _WatchPointClear:
00002590  48E7 2020 4103          movem.l   D2/A2,-(A7)
00002594  45F9 0000 4104          lea       _printf.L,A2
00002598  40EE      
                    4105   ; unsigned int i ;
                    4106   ; WatchPointDisplay() ;
0000259A  4EB8 240A 4107          jsr       _WatchPointDisplay
                    4108   ; printf("\r\nEnter Watch Point Number: ") ;
0000259E  4879 0000 4109          pea       @m68kde~1_93.L
000025A2  538C      
000025A4  4E92      4110          jsr       (A2)
000025A6  584F      4111          addq.w    #4,A7
                    4112   ; i = xtod(_getch()) ;           // get watch pointer number
000025A8  2F00      4113          move.l    D0,-(A7)
000025AA  4EB8 0B68 4114          jsr       __getch
000025AE  2200      4115          move.l    D0,D1
000025B0  201F      4116          move.l    (A7)+,D0
000025B2  2F01      4117          move.l    D1,-(A7)
000025B4  4EB8 0BD2 4118          jsr       _xtod
000025B8  584F      4119          addq.w    #4,A7
000025BA  C0BC 0000 4120          and.l     #255,D0
000025BE  00FF      
000025C0  2400      4121          move.l    D0,D2
                    4122   ; if((i < 0) || (i > 7))   {
000025C2  0C82 0000 4123          cmp.l     #0,D2
000025C6  0000      
000025C8  6508      4124          blo.s     WatchPointClear_3
000025CA  0C82 0000 4125          cmp.l     #7,D2
000025CE  0007      
000025D0  630E      4126          bls.s     WatchPointClear_1
                    4127   WatchPointClear_3:
                    4128   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000025D2  4879 0000 4129          pea       @m68kde~1_90.L
000025D6  5334      
000025D8  4E92      4130          jsr       (A2)
000025DA  584F      4131          addq.w    #4,A7
                    4132   ; return ;
000025DC  6000 004E 4133          bra       WatchPointClear_4
                    4134   WatchPointClear_1:
                    4135   ; }
                    4136   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
000025E0  2002      4137          move.l    D2,D0
000025E2  E588      4138          lsl.l     #2,D0
000025E4  41F9 0B00 4139          lea       _WatchPointSetOrCleared.L,A0
000025E8  01A2      
000025EA  2030 0800 4140          move.l    0(A0,D0.L),D0
000025EE  0C80 0000 4141          cmp.l     #1,D0
000025F2  0001      
000025F4  6628      4142          bne.s     WatchPointClear_5
                    4143   ; WatchPointAddress[i] = 0 ;
000025F6  2002      4144          move.l    D2,D0
000025F8  E588      4145          lsl.l     #2,D0
000025FA  41F9 0B00 4146          lea       _WatchPointAddress.L,A0
000025FE  0182      
00002600  42B0 0800 4147          clr.l     0(A0,D0.L)
                    4148   ; WatchPointSetOrCleared[i] = 0 ;
00002604  2002      4149          move.l    D2,D0
00002606  E588      4150          lsl.l     #2,D0
00002608  41F9 0B00 4151          lea       _WatchPointSetOrCleared.L,A0
0000260C  01A2      
0000260E  42B0 0800 4152          clr.l     0(A0,D0.L)
                    4153   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00002612  4879 0000 4154          pea       @m68kde~1_94.L
00002616  53AA      
00002618  4E92      4155          jsr       (A2)
0000261A  584F      4156          addq.w    #4,A7
0000261C  600A      4157          bra.s     WatchPointClear_6
                    4158   WatchPointClear_5:
                    4159   ; }
                    4160   ; else
                    4161   ; printf("\r\nWatch Point Was not Set.....") ;
0000261E  4879 0000 4162          pea       @m68kde~1_95.L
00002622  53C8      
00002624  4E92      4163          jsr       (A2)
00002626  584F      4164          addq.w    #4,A7
                    4165   WatchPointClear_6:
                    4166   ; WatchPointDisplay() ;
00002628  4EB8 240A 4167          jsr       _WatchPointDisplay
                    4168   ; return ;
                    4169   WatchPointClear_4:
0000262C  4CDF 0404 4170          movem.l   (A7)+,D2/A2
00002630  4E75      4171          rts
                    4172   ; }
                    4173   ; void DisableBreakPoints(void)
                    4174   ; {
                    4175   _DisableBreakPoints:
00002632  4E56 FFFC 4176          link      A6,#-4
00002636  2F02      4177          move.l    D2,-(A7)
                    4178   ; int i ;
                    4179   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4180   ; for(i = 0; i < 8; i++)  {
00002638  4282      4181          clr.l     D2
                    4182   DisableBreakPoints_1:
0000263A  0C82 0000 4183          cmp.l     #8,D2
0000263E  0008      
00002640  6C00 003E 4184          bge       DisableBreakPoints_3
                    4185   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00002644  2002      4186          move.l    D2,D0
00002646  E588      4187          lsl.l     #2,D0
00002648  41F9 0B00 4188          lea       _BreakPointSetOrCleared.L,A0
0000264C  015E      
0000264E  2030 0800 4189          move.l    0(A0,D0.L),D0
00002652  0C80 0000 4190          cmp.l     #1,D0
00002656  0001      
00002658  6622      4191          bne.s     DisableBreakPoints_4
                    4192   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
0000265A  2002      4193          move.l    D2,D0
0000265C  E588      4194          lsl.l     #2,D0
0000265E  41F9 0B00 4195          lea       _BreakPointAddress.L,A0
00002662  012E      
00002664  2D70 0800 4196          move.l    0(A0,D0.L),-4(A6)
00002668  FFFC      
                    4197   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
0000266A  2002      4198          move.l    D2,D0
0000266C  E388      4199          lsl.l     #1,D0
0000266E  41F9 0B00 4200          lea       _BreakPointInstruction.L,A0
00002672  014E      
00002674  226E FFFC 4201          move.l    -4(A6),A1
00002678  32B0 0800 4202          move.w    0(A0,D0.L),(A1)
                    4203   DisableBreakPoints_4:
0000267C  5282      4204          addq.l    #1,D2
0000267E  60BA      4205          bra       DisableBreakPoints_1
                    4206   DisableBreakPoints_3:
00002680  241F      4207          move.l    (A7)+,D2
00002682  4E5E      4208          unlk      A6
00002684  4E75      4209          rts
                    4210   ; }
                    4211   ; }
                    4212   ; }
                    4213   ; void EnableBreakPoints(void)
                    4214   ; {
                    4215   _EnableBreakPoints:
00002686  4E56 FFFC 4216          link      A6,#-4
0000268A  2F02      4217          move.l    D2,-(A7)
                    4218   ; int i ;
                    4219   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4220   ; for(i = 0; i < 8; i++)  {
0000268C  4282      4221          clr.l     D2
                    4222   EnableBreakPoints_1:
0000268E  0C82 0000 4223          cmp.l     #8,D2
00002692  0008      
00002694  6C32      4224          bge.s     EnableBreakPoints_3
                    4225   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00002696  2002      4226          move.l    D2,D0
00002698  E588      4227          lsl.l     #2,D0
0000269A  41F9 0B00 4228          lea       _BreakPointSetOrCleared.L,A0
0000269E  015E      
000026A0  2030 0800 4229          move.l    0(A0,D0.L),D0
000026A4  0C80 0000 4230          cmp.l     #1,D0
000026A8  0001      
000026AA  6618      4231          bne.s     EnableBreakPoints_4
                    4232   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000026AC  2002      4233          move.l    D2,D0
000026AE  E588      4234          lsl.l     #2,D0
000026B0  41F9 0B00 4235          lea       _BreakPointAddress.L,A0
000026B4  012E      
000026B6  2D70 0800 4236          move.l    0(A0,D0.L),-4(A6)
000026BA  FFFC      
                    4237   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
000026BC  206E FFFC 4238          move.l    -4(A6),A0
000026C0  30BC 4E4E 4239          move.w    #20046,(A0)
                    4240   EnableBreakPoints_4:
000026C4  5282      4241          addq.l    #1,D2
000026C6  60C6      4242          bra       EnableBreakPoints_1
                    4243   EnableBreakPoints_3:
000026C8  241F      4244          move.l    (A7)+,D2
000026CA  4E5E      4245          unlk      A6
000026CC  4E75      4246          rts
                    4247   ; }
                    4248   ; }
                    4249   ; }
                    4250   ; void KillAllBreakPoints(void)
                    4251   ; {
                    4252   _KillAllBreakPoints:
000026CE  4E56 FFFC 4253          link      A6,#-4
000026D2  2F02      4254          move.l    D2,-(A7)
                    4255   ; int i ;
                    4256   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4257   ; for(i = 0; i < 8; i++)  {
000026D4  4282      4258          clr.l     D2
                    4259   KillAllBreakPoints_1:
000026D6  0C82 0000 4260          cmp.l     #8,D2
000026DA  0008      
000026DC  6C00 0052 4261          bge       KillAllBreakPoints_3
                    4262   ; // clear BP
                    4263   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000026E0  2002      4264          move.l    D2,D0
000026E2  E588      4265          lsl.l     #2,D0
000026E4  41F9 0B00 4266          lea       _BreakPointAddress.L,A0
000026E8  012E      
000026EA  2D70 0800 4267          move.l    0(A0,D0.L),-4(A6)
000026EE  FFFC      
                    4268   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
000026F0  2002      4269          move.l    D2,D0
000026F2  E388      4270          lsl.l     #1,D0
000026F4  41F9 0B00 4271          lea       _BreakPointInstruction.L,A0
000026F8  014E      
000026FA  226E FFFC 4272          move.l    -4(A6),A1
000026FE  32B0 0800 4273          move.w    0(A0,D0.L),(A1)
                    4274   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002702  2002      4275          move.l    D2,D0
00002704  E588      4276          lsl.l     #2,D0
00002706  41F9 0B00 4277          lea       _BreakPointAddress.L,A0
0000270A  012E      
0000270C  42B0 0800 4278          clr.l     0(A0,D0.L)
                    4279   ; BreakPointInstruction[i] = 0 ;
00002710  2002      4280          move.l    D2,D0
00002712  E388      4281          lsl.l     #1,D0
00002714  41F9 0B00 4282          lea       _BreakPointInstruction.L,A0
00002718  014E      
0000271A  4270 0800 4283          clr.w     0(A0,D0.L)
                    4284   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
0000271E  2002      4285          move.l    D2,D0
00002720  E588      4286          lsl.l     #2,D0
00002722  41F9 0B00 4287          lea       _BreakPointSetOrCleared.L,A0
00002726  015E      
00002728  42B0 0800 4288          clr.l     0(A0,D0.L)
0000272C  5282      4289          addq.l    #1,D2
0000272E  60A6      4290          bra       KillAllBreakPoints_1
                    4291   KillAllBreakPoints_3:
00002730  241F      4292          move.l    (A7)+,D2
00002732  4E5E      4293          unlk      A6
00002734  4E75      4294          rts
                    4295   ; }
                    4296   ; //BreakPointDisplay() ;       // display the break points
                    4297   ; }
                    4298   ; void KillAllWatchPoints(void)
                    4299   ; {
                    4300   _KillAllWatchPoints:
00002736  2F02      4301          move.l    D2,-(A7)
                    4302   ; int i ;
                    4303   ; for(i = 0; i < 8; i++)  {
00002738  4282      4304          clr.l     D2
                    4305   KillAllWatchPoints_1:
0000273A  0C82 0000 4306          cmp.l     #8,D2
0000273E  0008      
00002740  6C20      4307          bge.s     KillAllWatchPoints_3
                    4308   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002742  2002      4309          move.l    D2,D0
00002744  E588      4310          lsl.l     #2,D0
00002746  41F9 0B00 4311          lea       _WatchPointAddress.L,A0
0000274A  0182      
0000274C  42B0 0800 4312          clr.l     0(A0,D0.L)
                    4313   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002750  2002      4314          move.l    D2,D0
00002752  E588      4315          lsl.l     #2,D0
00002754  41F9 0B00 4316          lea       _WatchPointSetOrCleared.L,A0
00002758  01A2      
0000275A  42B0 0800 4317          clr.l     0(A0,D0.L)
0000275E  5282      4318          addq.l    #1,D2
00002760  60D8      4319          bra       KillAllWatchPoints_1
                    4320   KillAllWatchPoints_3:
00002762  241F      4321          move.l    (A7)+,D2
00002764  4E75      4322          rts
                    4323   ; }
                    4324   ; //WatchPointDisplay() ;       // display the break points
                    4325   ; }
                    4326   ; void SetBreakPoint(void)
                    4327   ; {
                    4328   _SetBreakPoint:
00002766  4E56 FFFC 4329          link      A6,#-4
0000276A  48E7 3830 4330          movem.l   D2/D3/D4/A2/A3,-(A7)
0000276E  45F9 0000 4331          lea       _printf.L,A2
00002772  40EE      
00002774  47F9 0B00 4332          lea       _BreakPointSetOrCleared.L,A3
00002778  015E      
                    4333   ; int i ;
                    4334   ; int BPNumber;
                    4335   ; int BPAddress;
                    4336   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4337   ; // see if any free break points
                    4338   ; for(i = 0; i < 8; i ++) {
0000277A  4282      4339          clr.l     D2
                    4340   SetBreakPoint_1:
0000277C  0C82 0000 4341          cmp.l     #8,D2
00002780  0008      
00002782  6C10      4342          bge.s     SetBreakPoint_3
                    4343   ; if( BreakPointSetOrCleared[i] == 0)
00002784  2002      4344          move.l    D2,D0
00002786  E588      4345          lsl.l     #2,D0
00002788  2033 0800 4346          move.l    0(A3,D0.L),D0
0000278C  6602      4347          bne.s     SetBreakPoint_4
                    4348   ; break ;         // if spare BP found allow user to set it
0000278E  6004      4349          bra.s     SetBreakPoint_3
                    4350   SetBreakPoint_4:
00002790  5282      4351          addq.l    #1,D2
00002792  60E8      4352          bra       SetBreakPoint_1
                    4353   SetBreakPoint_3:
                    4354   ; }
                    4355   ; if(i == 8) {
00002794  0C82 0000 4356          cmp.l     #8,D2
00002798  0008      
0000279A  660E      4357          bne.s     SetBreakPoint_6
                    4358   ; printf("\r\nNo FREE Break Points.....") ;
0000279C  4879 0000 4359          pea       @m68kde~1_96.L
000027A0  53E8      
000027A2  4E92      4360          jsr       (A2)
000027A4  584F      4361          addq.w    #4,A7
                    4362   ; return ;
000027A6  6000 00D6 4363          bra       SetBreakPoint_15
                    4364   SetBreakPoint_6:
                    4365   ; }
                    4366   ; printf("\r\nBreak Point Address: ") ;
000027AA  4879 0000 4367          pea       @m68kde~1_97.L
000027AE  5404      
000027B0  4E92      4368          jsr       (A2)
000027B2  584F      4369          addq.w    #4,A7
                    4370   ; BPAddress = Get8HexDigits(0) ;
000027B4  42A7      4371          clr.l     -(A7)
000027B6  4EB8 0CA4 4372          jsr       _Get8HexDigits
000027BA  584F      4373          addq.w    #4,A7
000027BC  2600      4374          move.l    D0,D3
                    4375   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
000027BE  2803      4376          move.l    D3,D4
                    4377   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
000027C0  2003      4378          move.l    D3,D0
000027C2  C0BC 0000 4379          and.l     #1,D0
000027C6  0001      
000027C8  0C80 0000 4380          cmp.l     #1,D0
000027CC  0001      
000027CE  660E      4381          bne.s     SetBreakPoint_9
                    4382   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
000027D0  4879 0000 4383          pea       @m68kde~1_98.L
000027D4  541C      
000027D6  4E92      4384          jsr       (A2)
000027D8  584F      4385          addq.w    #4,A7
                    4386   ; return ;
000027DA  6000 00A2 4387          bra       SetBreakPoint_15
                    4388   SetBreakPoint_9:
                    4389   ; }
                    4390   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
000027DE  0C83 0000 4391          cmp.l     #32768,D3
000027E2  8000      
000027E4  640E      4392          bhs.s     SetBreakPoint_11
                    4393   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
000027E6  4879 0000 4394          pea       @m68kde~1_99.L
000027EA  5452      
000027EC  4E92      4395          jsr       (A2)
000027EE  584F      4396          addq.w    #4,A7
                    4397   ; return ;
000027F0  6000 008C 4398          bra       SetBreakPoint_15
                    4399   SetBreakPoint_11:
                    4400   ; }
                    4401   ; // search for first free bp or existing same BP
                    4402   ; for(i = 0; i < 8; i++)  {
000027F4  4282      4403          clr.l     D2
                    4404   SetBreakPoint_13:
000027F6  0C82 0000 4405          cmp.l     #8,D2
000027FA  0008      
000027FC  6C00 0080 4406          bge       SetBreakPoint_15
                    4407   ; if(BreakPointAddress[i] == BPAddress)   {
00002800  2002      4408          move.l    D2,D0
00002802  E588      4409          lsl.l     #2,D0
00002804  41F9 0B00 4410          lea       _BreakPointAddress.L,A0
00002808  012E      
0000280A  B6B0 0800 4411          cmp.l     0(A0,D0.L),D3
0000280E  6610      4412          bne.s     SetBreakPoint_16
                    4413   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002810  2F03      4414          move.l    D3,-(A7)
00002812  4879 0000 4415          pea       @m68kde~1_100.L
00002816  549A      
00002818  4E92      4416          jsr       (A2)
0000281A  504F      4417          addq.w    #8,A7
                    4418   ; return ;
0000281C  6000 0060 4419          bra       SetBreakPoint_15
                    4420   SetBreakPoint_16:
                    4421   ; }
                    4422   ; if(BreakPointSetOrCleared[i] == 0) {
00002820  2002      4423          move.l    D2,D0
00002822  E588      4424          lsl.l     #2,D0
00002824  2033 0800 4425          move.l    0(A3,D0.L),D0
00002828  6600 004E 4426          bne       SetBreakPoint_18
                    4427   ; // set BP here
                    4428   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000282C  2002      4429          move.l    D2,D0
0000282E  E588      4430          lsl.l     #2,D0
00002830  27BC 0000 4431          move.l    #1,0(A3,D0.L)
00002834  0001 0800 
                    4432   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002838  2044      4433          move.l    D4,A0
0000283A  2002      4434          move.l    D2,D0
0000283C  E388      4435          lsl.l     #1,D0
0000283E  43F9 0B00 4436          lea       _BreakPointInstruction.L,A1
00002842  014E      
00002844  3390 0800 4437          move.w    (A0),0(A1,D0.L)
                    4438   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00002848  2F04      4439          move.l    D4,-(A7)
0000284A  4879 0000 4440          pea       @m68kde~1_101.L
0000284E  54D2      
00002850  4E92      4441          jsr       (A2)
00002852  504F      4442          addq.w    #8,A7
                    4443   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00002854  2044      4444          move.l    D4,A0
00002856  30BC 4E4E 4445          move.w    #20046,(A0)
                    4446   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
0000285A  2002      4447          move.l    D2,D0
0000285C  E588      4448          lsl.l     #2,D0
0000285E  41F9 0B00 4449          lea       _BreakPointAddress.L,A0
00002862  012E      
00002864  2183 0800 4450          move.l    D3,0(A0,D0.L)
                    4451   ; printf("\r\n") ;
00002868  4879 0000 4452          pea       @m68kde~1_1.L
0000286C  4AC4      
0000286E  4E92      4453          jsr       (A2)
00002870  584F      4454          addq.w    #4,A7
                    4455   ; BreakPointDisplay() ;       // display the break points
00002872  4EB8 2336 4456          jsr       _BreakPointDisplay
                    4457   ; return ;
00002876  6006      4458          bra.s     SetBreakPoint_15
                    4459   SetBreakPoint_18:
00002878  5282      4460          addq.l    #1,D2
0000287A  6000 FF7A 4461          bra       SetBreakPoint_13
                    4462   SetBreakPoint_15:
0000287E  4CDF 0C1C 4463          movem.l   (A7)+,D2/D3/D4/A2/A3
00002882  4E5E      4464          unlk      A6
00002884  4E75      4465          rts
                    4466   ; }
                    4467   ; }
                    4468   ; }
                    4469   ; void SetWatchPoint(void)
                    4470   ; {
                    4471   _SetWatchPoint:
00002886  4E56 FFF8 4472          link      A6,#-8
0000288A  48E7 3030 4473          movem.l   D2/D3/A2/A3,-(A7)
0000288E  45F9 0000 4474          lea       _printf.L,A2
00002892  40EE      
00002894  47F9 0B00 4475          lea       _WatchPointSetOrCleared.L,A3
00002898  01A2      
                    4476   ; int i ;
                    4477   ; int WPNumber;
                    4478   ; int WPAddress;
                    4479   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    4480   ; // see if any free break points
                    4481   ; for(i = 0; i < 8; i ++) {
0000289A  4282      4482          clr.l     D2
                    4483   SetWatchPoint_1:
0000289C  0C82 0000 4484          cmp.l     #8,D2
000028A0  0008      
000028A2  6C10      4485          bge.s     SetWatchPoint_3
                    4486   ; if( WatchPointSetOrCleared[i] == 0)
000028A4  2002      4487          move.l    D2,D0
000028A6  E588      4488          lsl.l     #2,D0
000028A8  2033 0800 4489          move.l    0(A3,D0.L),D0
000028AC  6602      4490          bne.s     SetWatchPoint_4
                    4491   ; break ;         // if spare WP found allow user to set it
000028AE  6004      4492          bra.s     SetWatchPoint_3
                    4493   SetWatchPoint_4:
000028B0  5282      4494          addq.l    #1,D2
000028B2  60E8      4495          bra       SetWatchPoint_1
                    4496   SetWatchPoint_3:
                    4497   ; }
                    4498   ; if(i == 8) {
000028B4  0C82 0000 4499          cmp.l     #8,D2
000028B8  0008      
000028BA  660E      4500          bne.s     SetWatchPoint_6
                    4501   ; printf("\r\nNo FREE Watch Points.....") ;
000028BC  4879 0000 4502          pea       @m68kde~1_102.L
000028C0  54F8      
000028C2  4E92      4503          jsr       (A2)
000028C4  584F      4504          addq.w    #4,A7
                    4505   ; return ;
000028C6  6000 008C 4506          bra       SetWatchPoint_11
                    4507   SetWatchPoint_6:
                    4508   ; }
                    4509   ; printf("\r\nWatch Point Address: ") ;
000028CA  4879 0000 4510          pea       @m68kde~1_103.L
000028CE  5514      
000028D0  4E92      4511          jsr       (A2)
000028D2  584F      4512          addq.w    #4,A7
                    4513   ; WPAddress = Get8HexDigits(0) ;
000028D4  42A7      4514          clr.l     -(A7)
000028D6  4EB8 0CA4 4515          jsr       _Get8HexDigits
000028DA  584F      4516          addq.w    #4,A7
000028DC  2600      4517          move.l    D0,D3
                    4518   ; // search for first free wp or existing same wp
                    4519   ; for(i = 0; i < 8; i++)  {
000028DE  4282      4520          clr.l     D2
                    4521   SetWatchPoint_9:
000028E0  0C82 0000 4522          cmp.l     #8,D2
000028E4  0008      
000028E6  6C00 006C 4523          bge       SetWatchPoint_11
                    4524   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
000028EA  2002      4525          move.l    D2,D0
000028EC  E588      4526          lsl.l     #2,D0
000028EE  41F9 0B00 4527          lea       _WatchPointAddress.L,A0
000028F2  0182      
000028F4  B6B0 0800 4528          cmp.l     0(A0,D0.L),D3
000028F8  6614      4529          bne.s     SetWatchPoint_12
000028FA  4A83      4530          tst.l     D3
000028FC  6710      4531          beq.s     SetWatchPoint_12
                    4532   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
000028FE  2F03      4533          move.l    D3,-(A7)
00002900  4879 0000 4534          pea       @m68kde~1_104.L
00002904  552C      
00002906  4E92      4535          jsr       (A2)
00002908  504F      4536          addq.w    #8,A7
                    4537   ; return ;
0000290A  6000 0048 4538          bra       SetWatchPoint_11
                    4539   SetWatchPoint_12:
                    4540   ; }
                    4541   ; if(WatchPointSetOrCleared[i] == 0) {
0000290E  2002      4542          move.l    D2,D0
00002910  E588      4543          lsl.l     #2,D0
00002912  2033 0800 4544          move.l    0(A3,D0.L),D0
00002916  6600 0038 4545          bne       SetWatchPoint_14
                    4546   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
0000291A  2002      4547          move.l    D2,D0
0000291C  E588      4548          lsl.l     #2,D0
0000291E  27BC 0000 4549          move.l    #1,0(A3,D0.L)
00002922  0001 0800 
                    4550   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002926  2F03      4551          move.l    D3,-(A7)
00002928  4879 0000 4552          pea       @m68kde~1_105.L
0000292C  5562      
0000292E  4E92      4553          jsr       (A2)
00002930  504F      4554          addq.w    #8,A7
                    4555   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002932  2002      4556          move.l    D2,D0
00002934  E588      4557          lsl.l     #2,D0
00002936  41F9 0B00 4558          lea       _WatchPointAddress.L,A0
0000293A  0182      
0000293C  2183 0800 4559          move.l    D3,0(A0,D0.L)
                    4560   ; printf("\r\n") ;
00002940  4879 0000 4561          pea       @m68kde~1_1.L
00002944  4AC4      
00002946  4E92      4562          jsr       (A2)
00002948  584F      4563          addq.w    #4,A7
                    4564   ; WatchPointDisplay() ;       // display the break points
0000294A  4EB8 240A 4565          jsr       _WatchPointDisplay
                    4566   ; return ;
0000294E  6004      4567          bra.s     SetWatchPoint_11
                    4568   SetWatchPoint_14:
00002950  5282      4569          addq.l    #1,D2
00002952  608C      4570          bra       SetWatchPoint_9
                    4571   SetWatchPoint_11:
00002954  4CDF 0C0C 4572          movem.l   (A7)+,D2/D3/A2/A3
00002958  4E5E      4573          unlk      A6
0000295A  4E75      4574          rts
                    4575   ; }
                    4576   ; }
                    4577   ; }
                    4578   ; void HandleBreakPoint(void)
                    4579   ; {
                    4580   _HandleBreakPoint:
0000295C  4E56 FFFC 4581          link      A6,#-4
00002960  48E7 0038 4582          movem.l   A2/A3/A4,-(A7)
00002964  45F9 0B00 4583          lea       _i.L,A2
00002968  00C4      
0000296A  47F9 0000 4584          lea       _printf.L,A3
0000296E  40EE      
00002970  49F9 0B00 4585          lea       _PC.L,A4
00002974  0120      
                    4586   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4587   ; // now we have to put the break point back to run the instruction
                    4588   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    4589   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00002976  5594      4590          subq.l    #2,(A4)
                    4591   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00002978  4879 0000 4592          pea       @m68kde~1_106.L
0000297C  5588      
0000297E  4E93      4593          jsr       (A3)
00002980  584F      4594          addq.w    #4,A7
                    4595   ; printf("\r\nSingle Step : [ON]") ;
00002982  4879 0000 4596          pea       @m68kde~1_107.L
00002986  559C      
00002988  4E93      4597          jsr       (A3)
0000298A  584F      4598          addq.w    #4,A7
                    4599   ; printf("\r\nBreakPoints : [Enabled]") ;
0000298C  4879 0000 4600          pea       @m68kde~1_108.L
00002990  55B2      
00002992  4E93      4601          jsr       (A3)
00002994  584F      4602          addq.w    #4,A7
                    4603   ; // now clear the break point (put original instruction back)
                    4604   ; ProgramBreakPointAddress = PC ;
00002996  2D54 FFFC 4605          move.l    (A4),-4(A6)
                    4606   ; for(i = 0; i < 8; i ++) {
0000299A  4292      4607          clr.l     (A2)
                    4608   HandleBreakPoint_1:
0000299C  2012      4609          move.l    (A2),D0
0000299E  0C80 0000 4610          cmp.l     #8,D0
000029A2  0008      
000029A4  6400 0056 4611          bhs       HandleBreakPoint_3
                    4612   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000029A8  2012      4613          move.l    (A2),D0
000029AA  E588      4614          lsl.l     #2,D0
000029AC  41F9 0B00 4615          lea       _BreakPointAddress.L,A0
000029B0  012E      
000029B2  2230 0800 4616          move.l    0(A0,D0.L),D1
000029B6  B294      4617          cmp.l     (A4),D1
000029B8  6600 003E 4618          bne       HandleBreakPoint_4
                    4619   ; BreakPointAddress[i] = 0 ;
000029BC  2012      4620          move.l    (A2),D0
000029BE  E588      4621          lsl.l     #2,D0
000029C0  41F9 0B00 4622          lea       _BreakPointAddress.L,A0
000029C4  012E      
000029C6  42B0 0800 4623          clr.l     0(A0,D0.L)
                    4624   ; BreakPointSetOrCleared[i] = 0 ;
000029CA  2012      4625          move.l    (A2),D0
000029CC  E588      4626          lsl.l     #2,D0
000029CE  41F9 0B00 4627          lea       _BreakPointSetOrCleared.L,A0
000029D2  015E      
000029D4  42B0 0800 4628          clr.l     0(A0,D0.L)
                    4629   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000029D8  2012      4630          move.l    (A2),D0
000029DA  E388      4631          lsl.l     #1,D0
000029DC  41F9 0B00 4632          lea       _BreakPointInstruction.L,A0
000029E0  014E      
000029E2  226E FFFC 4633          move.l    -4(A6),A1
000029E6  32B0 0800 4634          move.w    0(A0,D0.L),(A1)
                    4635   ; BreakPointInstruction[i] = 0 ;
000029EA  2012      4636          move.l    (A2),D0
000029EC  E388      4637          lsl.l     #1,D0
000029EE  41F9 0B00 4638          lea       _BreakPointInstruction.L,A0
000029F2  014E      
000029F4  4270 0800 4639          clr.w     0(A0,D0.L)
                    4640   HandleBreakPoint_4:
000029F8  5292      4641          addq.l    #1,(A2)
000029FA  60A0      4642          bra       HandleBreakPoint_1
                    4643   HandleBreakPoint_3:
                    4644   ; }
                    4645   ; }
                    4646   ; DumpRegisters() ;
000029FC  4EB8 1B88 4647          jsr       _DumpRegisters
                    4648   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002A00  4879 0000 4649          pea       @m68kde~1_70.L
00002A04  512E      
00002A06  4E93      4650          jsr       (A3)
00002A08  584F      4651          addq.w    #4,A7
                    4652   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002A0A  4879 0000 4653          pea       @m68kde~1_109.L
00002A0E  55CC      
00002A10  4E93      4654          jsr       (A3)
00002A12  584F      4655          addq.w    #4,A7
                    4656   ; menu() ;
00002A14  4EB9 0000 4657          jsr       _menu
00002A18  2C20      
00002A1A  4CDF 1C00 4658          movem.l   (A7)+,A2/A3/A4
00002A1E  4E5E      4659          unlk      A6
00002A20  4E75      4660          rts
                    4661   ; }
                    4662   ; void UnknownCommand()
                    4663   ; {
                    4664   _UnknownCommand:
                    4665   ; printf("\r\nUnknown Command.....\r\n") ;
00002A22  4879 0000 4666          pea       @m68kde~1_110.L
00002A26  55F4      
00002A28  4EB9 0000 4667          jsr       _printf
00002A2C  40EE      
00002A2E  584F      4668          addq.w    #4,A7
                    4669   ; Help() ;
00002A30  4EB9 0000 4670          jsr       _Help
00002A34  2B46      
00002A36  4E75      4671          rts
                    4672   ; }
                    4673   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    4674   ; void CallDebugMonitor(void)
                    4675   ; {
                    4676   _CallDebugMonitor:
                    4677   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002A38  4879 0000 4678          pea       @m68kde~1_111.L
00002A3C  560E      
00002A3E  4EB9 0000 4679          jsr       _printf
00002A42  40EE      
00002A44  584F      4680          addq.w    #4,A7
                    4681   ; menu();
00002A46  4EB9 0000 4682          jsr       _menu
00002A4A  2C20      
00002A4C  4E75      4683          rts
                    4684   ; }
                    4685   ; void Breakpoint(void)
                    4686   ; {
                    4687   _Breakpoint:
00002A4E  2F02      4688          move.l    D2,-(A7)
                    4689   ; char c;
                    4690   ; c = toupper(_getch());
00002A50  2F00      4691          move.l    D0,-(A7)
00002A52  4EB8 0B68 4692          jsr       __getch
00002A56  2200      4693          move.l    D0,D1
00002A58  201F      4694          move.l    (A7)+,D0
00002A5A  2F01      4695          move.l    D1,-(A7)
00002A5C  4EB9 0000 4696          jsr       _toupper
00002A60  382C      
00002A62  584F      4697          addq.w    #4,A7
00002A64  1400      4698          move.b    D0,D2
                    4699   ; if( c == (char)('D'))                                      // BreakPoint Display
00002A66  0C02 0044 4700          cmp.b     #68,D2
00002A6A  6608      4701          bne.s     Breakpoint_1
                    4702   ; BreakPointDisplay() ;
00002A6C  4EB8 2336 4703          jsr       _BreakPointDisplay
00002A70  6000 0054 4704          bra       Breakpoint_10
                    4705   Breakpoint_1:
                    4706   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00002A74  0C02 004B 4707          cmp.b     #75,D2
00002A78  6630      4708          bne.s     Breakpoint_3
                    4709   ; printf("\r\nKill All Break Points...(y/n)?") ;
00002A7A  4879 0000 4710          pea       @m68kde~1_112.L
00002A7E  562E      
00002A80  4EB9 0000 4711          jsr       _printf
00002A84  40EE      
00002A86  584F      4712          addq.w    #4,A7
                    4713   ; c = toupper(_getch());
00002A88  2F00      4714          move.l    D0,-(A7)
00002A8A  4EB8 0B68 4715          jsr       __getch
00002A8E  2200      4716          move.l    D0,D1
00002A90  201F      4717          move.l    (A7)+,D0
00002A92  2F01      4718          move.l    D1,-(A7)
00002A94  4EB9 0000 4719          jsr       _toupper
00002A98  382C      
00002A9A  584F      4720          addq.w    #4,A7
00002A9C  1400      4721          move.b    D0,D2
                    4722   ; if(c == (char)('Y'))
00002A9E  0C02 0059 4723          cmp.b     #89,D2
00002AA2  6604      4724          bne.s     Breakpoint_5
                    4725   ; KillAllBreakPoints() ;
00002AA4  4EB8 26CE 4726          jsr       _KillAllBreakPoints
                    4727   Breakpoint_5:
00002AA8  601C      4728          bra.s     Breakpoint_10
                    4729   Breakpoint_3:
                    4730   ; }
                    4731   ; else if(c == (char)('S')) {
00002AAA  0C02 0053 4732          cmp.b     #83,D2
00002AAE  6606      4733          bne.s     Breakpoint_7
                    4734   ; SetBreakPoint() ;
00002AB0  4EB8 2766 4735          jsr       _SetBreakPoint
00002AB4  6010      4736          bra.s     Breakpoint_10
                    4737   Breakpoint_7:
                    4738   ; }
                    4739   ; else if(c == (char)('C')) {
00002AB6  0C02 0043 4740          cmp.b     #67,D2
00002ABA  6606      4741          bne.s     Breakpoint_9
                    4742   ; BreakPointClear() ;
00002ABC  4EB8 24B6 4743          jsr       _BreakPointClear
00002AC0  6004      4744          bra.s     Breakpoint_10
                    4745   Breakpoint_9:
                    4746   ; }
                    4747   ; else
                    4748   ; UnknownCommand() ;
00002AC2  4EB8 2A22 4749          jsr       _UnknownCommand
                    4750   Breakpoint_10:
00002AC6  241F      4751          move.l    (A7)+,D2
00002AC8  4E75      4752          rts
                    4753   ; }
                    4754   ; void Watchpoint(void)
                    4755   ; {
                    4756   _Watchpoint:
00002ACA  2F02      4757          move.l    D2,-(A7)
                    4758   ; char c;
                    4759   ; c = toupper(_getch());
00002ACC  2F00      4760          move.l    D0,-(A7)
00002ACE  4EB8 0B68 4761          jsr       __getch
00002AD2  2200      4762          move.l    D0,D1
00002AD4  201F      4763          move.l    (A7)+,D0
00002AD6  2F01      4764          move.l    D1,-(A7)
00002AD8  4EB9 0000 4765          jsr       _toupper
00002ADC  382C      
00002ADE  584F      4766          addq.w    #4,A7
00002AE0  1400      4767          move.b    D0,D2
                    4768   ; if( c == (char)('D'))                                      // WatchPoint Display
00002AE2  0C02 0044 4769          cmp.b     #68,D2
00002AE6  6608      4770          bne.s     Watchpoint_1
                    4771   ; WatchPointDisplay() ;
00002AE8  4EB8 240A 4772          jsr       _WatchPointDisplay
00002AEC  6000 0054 4773          bra       Watchpoint_10
                    4774   Watchpoint_1:
                    4775   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002AF0  0C02 004B 4776          cmp.b     #75,D2
00002AF4  6630      4777          bne.s     Watchpoint_3
                    4778   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002AF6  4879 0000 4779          pea       @m68kde~1_113.L
00002AFA  5650      
00002AFC  4EB9 0000 4780          jsr       _printf
00002B00  40EE      
00002B02  584F      4781          addq.w    #4,A7
                    4782   ; c = toupper(_getch());
00002B04  2F00      4783          move.l    D0,-(A7)
00002B06  4EB8 0B68 4784          jsr       __getch
00002B0A  2200      4785          move.l    D0,D1
00002B0C  201F      4786          move.l    (A7)+,D0
00002B0E  2F01      4787          move.l    D1,-(A7)
00002B10  4EB9 0000 4788          jsr       _toupper
00002B14  382C      
00002B16  584F      4789          addq.w    #4,A7
00002B18  1400      4790          move.b    D0,D2
                    4791   ; if(c == (char)('Y'))
00002B1A  0C02 0059 4792          cmp.b     #89,D2
00002B1E  6604      4793          bne.s     Watchpoint_5
                    4794   ; KillAllWatchPoints() ;
00002B20  4EB8 2736 4795          jsr       _KillAllWatchPoints
                    4796   Watchpoint_5:
00002B24  601C      4797          bra.s     Watchpoint_10
                    4798   Watchpoint_3:
                    4799   ; }
                    4800   ; else if(c == (char)('S')) {
00002B26  0C02 0053 4801          cmp.b     #83,D2
00002B2A  6606      4802          bne.s     Watchpoint_7
                    4803   ; SetWatchPoint() ;
00002B2C  4EB8 2886 4804          jsr       _SetWatchPoint
00002B30  6010      4805          bra.s     Watchpoint_10
                    4806   Watchpoint_7:
                    4807   ; }
                    4808   ; else if(c == (char)('C')) {
00002B32  0C02 0043 4809          cmp.b     #67,D2
00002B36  6606      4810          bne.s     Watchpoint_9
                    4811   ; WatchPointClear() ;
00002B38  4EB8 2590 4812          jsr       _WatchPointClear
00002B3C  6004      4813          bra.s     Watchpoint_10
                    4814   Watchpoint_9:
                    4815   ; }
                    4816   ; else
                    4817   ; UnknownCommand() ;
00002B3E  4EB8 2A22 4818          jsr       _UnknownCommand
                    4819   Watchpoint_10:
00002B42  241F      4820          move.l    (A7)+,D2
00002B44  4E75      4821          rts
                    4822   ; }
                    4823   ; void Help(void)
                    4824   ; {
                    4825   _Help:
00002B46  48E7 2020 4826          movem.l   D2/A2,-(A7)
00002B4A  45F9 0000 4827          lea       _printf.L,A2
00002B4E  40EE      
                    4828   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002B50  41F9 0000 4829          lea       @m68kde~1_114.L,A0
00002B54  5672      
00002B56  2408      4830          move.l    A0,D2
                    4831   ; printf(banner) ;
00002B58  2F02      4832          move.l    D2,-(A7)
00002B5A  4E92      4833          jsr       (A2)
00002B5C  584F      4834          addq.w    #4,A7
                    4835   ; printf("\r\n  Debugger Command Summary") ;
00002B5E  4879 0000 4836          pea       @m68kde~1_115.L
00002B62  56B6      
00002B64  4E92      4837          jsr       (A2)
00002B66  584F      4838          addq.w    #4,A7
                    4839   ; printf(banner) ;
00002B68  2F02      4840          move.l    D2,-(A7)
00002B6A  4E92      4841          jsr       (A2)
00002B6C  584F      4842          addq.w    #4,A7
                    4843   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
00002B6E  4879 0000 4844          pea       @m68kde~1_116.L
00002B72  56D4      
00002B74  4E92      4845          jsr       (A2)
00002B76  584F      4846          addq.w    #4,A7
                    4847   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
00002B78  4879 0000 4848          pea       @m68kde~1_117.L
00002B7C  5718      
00002B7E  4E92      4849          jsr       (A2)
00002B80  584F      4850          addq.w    #4,A7
                    4851   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002B82  4879 0000 4852          pea       @m68kde~1_118.L
00002B86  5750      
00002B88  4E92      4853          jsr       (A2)
00002B8A  584F      4854          addq.w    #4,A7
                    4855   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
00002B8C  4879 0000 4856          pea       @m68kde~1_119.L
00002B90  578A      
00002B92  4E92      4857          jsr       (A2)
00002B94  584F      4858          addq.w    #4,A7
                    4859   ; printf("\r\n  E            - Enter String into Memory") ;
00002B96  4879 0000 4860          pea       @m68kde~1_120.L
00002B9A  57BC      
00002B9C  4E92      4861          jsr       (A2)
00002B9E  584F      4862          addq.w    #4,A7
                    4863   ; printf("\r\n  F            - Fill Memory with Data") ;
00002BA0  4879 0000 4864          pea       @m68kde~1_121.L
00002BA4  57E8      
00002BA6  4E92      4865          jsr       (A2)
00002BA8  584F      4866          addq.w    #4,A7
                    4867   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002BAA  2F39 0B00 4868          move.l    _PC.L,-(A7)
00002BAE  0120      
00002BB0  4879 0000 4869          pea       @m68kde~1_122.L
00002BB4  5812      
00002BB6  4E92      4870          jsr       (A2)
00002BB8  504F      4871          addq.w    #8,A7
                    4872   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002BBA  4879 0000 4873          pea       @m68kde~1_123.L
00002BBE  584C      
00002BC0  4E92      4874          jsr       (A2)
00002BC2  584F      4875          addq.w    #4,A7
                    4876   ; printf("\r\n  M            - Memory Examine and Change");
00002BC4  4879 0000 4877          pea       @m68kde~1_124.L
00002BC8  5884      
00002BCA  4E92      4878          jsr       (A2)
00002BCC  584F      4879          addq.w    #4,A7
                    4880   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002BCE  4879 0000 4881          pea       @m68kde~1_125.L
00002BD2  58B2      
00002BD4  4E92      4882          jsr       (A2)
00002BD6  584F      4883          addq.w    #4,A7
                    4884   ; printf("\r\n  R            - Display 68000 Registers") ;
00002BD8  4879 0000 4885          pea       @m68kde~1_126.L
00002BDC  58EC      
00002BDE  4E92      4886          jsr       (A2)
00002BE0  584F      4887          addq.w    #4,A7
                    4888   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002BE2  4879 0000 4889          pea       @m68kde~1_127.L
00002BE6  5918      
00002BE8  4E92      4890          jsr       (A2)
00002BEA  584F      4891          addq.w    #4,A7
                    4892   ; printf("\r\n  TM           - Test Memory") ;
00002BEC  4879 0000 4893          pea       @m68kde~1_128.L
00002BF0  594A      
00002BF2  4E92      4894          jsr       (A2)
00002BF4  584F      4895          addq.w    #4,A7
                    4896   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002BF6  4879 0000 4897          pea       @m68kde~1_129.L
00002BFA  596A      
00002BFC  4E92      4898          jsr       (A2)
00002BFE  584F      4899          addq.w    #4,A7
                    4900   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002C00  4879 0000 4901          pea       @m68kde~1_130.L
00002C04  5992      
00002C06  4E92      4902          jsr       (A2)
00002C08  584F      4903          addq.w    #4,A7
                    4904   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002C0A  4879 0000 4905          pea       @m68kde~1_131.L
00002C0E  59C8      
00002C10  4E92      4906          jsr       (A2)
00002C12  584F      4907          addq.w    #4,A7
                    4908   ; printf(banner) ;
00002C14  2F02      4909          move.l    D2,-(A7)
00002C16  4E92      4910          jsr       (A2)
00002C18  584F      4911          addq.w    #4,A7
00002C1A  4CDF 0404 4912          movem.l   (A7)+,D2/A2
00002C1E  4E75      4913          rts
                    4914   ; }
                    4915   ; void menu(void)
                    4916   ; {
                    4917   _menu:
00002C20  48E7 303C 4918          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002C24  45F9 0000 4919          lea       _printf.L,A2
00002C28  40EE      
00002C2A  47F9 0B00 4920          lea       _Trace.L,A3
00002C2E  00D8      
00002C30  49F9 0B00 4921          lea       _x.L,A4
00002C34  00C8      
00002C36  4BF9 0B00 4922          lea       _SR.L,A5
00002C3A  012C      
                    4923   ; char c,c1 ;
                    4924   ; while(1)    {
                    4925   menu_1:
                    4926   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002C3C  4EB8 0BA6 4927          jsr       _FlushKeyboard
                    4928   ; printf("\r\n#") ;
00002C40  4879 0000 4929          pea       @m68kde~1_132.L
00002C44  5A00      
00002C46  4E92      4930          jsr       (A2)
00002C48  584F      4931          addq.w    #4,A7
                    4932   ; c = toupper(_getch());
00002C4A  2F00      4933          move.l    D0,-(A7)
00002C4C  4EB8 0B68 4934          jsr       __getch
00002C50  2200      4935          move.l    D0,D1
00002C52  201F      4936          move.l    (A7)+,D0
00002C54  2F01      4937          move.l    D1,-(A7)
00002C56  4EB9 0000 4938          jsr       _toupper
00002C5A  382C      
00002C5C  584F      4939          addq.w    #4,A7
00002C5E  1400      4940          move.b    D0,D2
                    4941   ; if( c == (char)('L'))                  // load s record file
00002C60  0C02 004C 4942          cmp.b     #76,D2
00002C64  6608      4943          bne.s     menu_4
                    4944   ; Load_SRecordFile() ;
00002C66  4EB8 0E36 4945          jsr       _Load_SRecordFile
00002C6A  6000 021E 4946          bra       menu_46
                    4947   menu_4:
                    4948   ; else if( c == (char)('D'))             // dump memory
00002C6E  0C02 0044 4949          cmp.b     #68,D2
00002C72  6608      4950          bne.s     menu_6
                    4951   ; DumpMemory() ;
00002C74  4EB8 0CCC 4952          jsr       _DumpMemory
00002C78  6000 0210 4953          bra       menu_46
                    4954   menu_6:
                    4955   ; else if( c == (char)('E'))             // Enter String into memory
00002C7C  0C02 0045 4956          cmp.b     #69,D2
00002C80  660A      4957          bne.s     menu_8
                    4958   ; EnterString() ;
00002C82  4EB9 0000 4959          jsr       _EnterString
00002C86  2FD2      
00002C88  6000 0200 4960          bra       menu_46
                    4961   menu_8:
                    4962   ; else if( c == (char)('F'))             // fill memory
00002C8C  0C02 0046 4963          cmp.b     #70,D2
00002C90  6608      4964          bne.s     menu_10
                    4965   ; FillMemory() ;
00002C92  4EB8 0DBC 4966          jsr       _FillMemory
00002C96  6000 01F2 4967          bra       menu_46
                    4968   menu_10:
                    4969   ; else if( c == (char)('G'))  {           // go user program
00002C9A  0C02 0047 4970          cmp.b     #71,D2
00002C9E  6626      4971          bne.s     menu_12
                    4972   ; printf("\r\nProgram Running.....") ;
00002CA0  4879 0000 4973          pea       @m68kde~1_133.L
00002CA4  5A04      
00002CA6  4E92      4974          jsr       (A2)
00002CA8  584F      4975          addq.w    #4,A7
                    4976   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002CAA  4879 0000 4977          pea       @m68kde~1_134.L
00002CAE  5A1C      
00002CB0  4E92      4978          jsr       (A2)
00002CB2  584F      4979          addq.w    #4,A7
                    4980   ; GoFlag = 1 ;
00002CB4  23FC 0000 4981          move.l    #1,_GoFlag.L
00002CB8  0001 0B00 
00002CBC  00DC      
                    4982   ; go() ;
00002CBE  4EB8 08B8 4983          jsr       _go
00002CC2  6000 01C6 4984          bra       menu_46
                    4985   menu_12:
                    4986   ; }
                    4987   ; else if( c == (char)('M'))           // memory examine and modify
00002CC6  0C02 004D 4988          cmp.b     #77,D2
00002CCA  6608      4989          bne.s     menu_14
                    4990   ; MemoryChange() ;
00002CCC  4EB8 0FC4 4991          jsr       _MemoryChange
00002CD0  6000 01B8 4992          bra       menu_46
                    4993   menu_14:
                    4994   ; else if( c == (char)('P'))            // Program Flash Chip
00002CD4  0C02 0050 4995          cmp.b     #80,D2
00002CD8  6608      4996          bne.s     menu_16
                    4997   ; ProgramFlashChip() ;
00002CDA  4EB8 1368 4998          jsr       _ProgramFlashChip
00002CDE  6000 01AA 4999          bra       menu_46
                    5000   menu_16:
                    5001   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002CE2  0C02 0043 5002          cmp.b     #67,D2
00002CE6  6608      5003          bne.s     menu_18
                    5004   ; LoadFromFlashChip();
00002CE8  4EB8 138A 5005          jsr       _LoadFromFlashChip
00002CEC  6000 019C 5006          bra       menu_46
                    5007   menu_18:
                    5008   ; else if( c == (char)('R'))             // dump registers
00002CF0  0C02 0052 5009          cmp.b     #82,D2
00002CF4  6608      5010          bne.s     menu_20
                    5011   ; DumpRegisters() ;
00002CF6  4EB8 1B88 5012          jsr       _DumpRegisters
00002CFA  6000 018E 5013          bra       menu_46
                    5014   menu_20:
                    5015   ; else if( c == (char)('.'))           // change registers
00002CFE  0C02 002E 5016          cmp.b     #46,D2
00002D02  6608      5017          bne.s     menu_22
                    5018   ; ChangeRegisters() ;
00002D04  4EB8 207A 5019          jsr       _ChangeRegisters
00002D08  6000 0180 5020          bra       menu_46
                    5021   menu_22:
                    5022   ; else if( c == (char)('B'))              // breakpoint command
00002D0C  0C02 0042 5023          cmp.b     #66,D2
00002D10  6608      5024          bne.s     menu_24
                    5025   ; Breakpoint() ;
00002D12  4EB8 2A4E 5026          jsr       _Breakpoint
00002D16  6000 0172 5027          bra       menu_46
                    5028   menu_24:
                    5029   ; else if( c == (char)('T'))  {          // Test command
00002D1A  0C02 0054 5030          cmp.b     #84,D2
00002D1E  6600 0046 5031          bne       menu_26
                    5032   ; c1 = toupper(_getch()) ;
00002D22  2F00      5033          move.l    D0,-(A7)
00002D24  4EB8 0B68 5034          jsr       __getch
00002D28  2200      5035          move.l    D0,D1
00002D2A  201F      5036          move.l    (A7)+,D0
00002D2C  2F01      5037          move.l    D1,-(A7)
00002D2E  4EB9 0000 5038          jsr       _toupper
00002D32  382C      
00002D34  584F      5039          addq.w    #4,A7
00002D36  1600      5040          move.b    D0,D3
                    5041   ; if(c1 == (char)('M'))                    // memory test
00002D38  0C03 004D 5042          cmp.b     #77,D3
00002D3C  6608      5043          bne.s     menu_28
                    5044   ; MemoryTest() ;
00002D3E  4EB9 0000 5045          jsr       _MemoryTest
00002D42  304A      
00002D44  601C      5046          bra.s     menu_33
                    5047   menu_28:
                    5048   ; else if( c1 == (char)('S'))              // Switch Test command
00002D46  0C03 0053 5049          cmp.b     #83,D3
00002D4A  6606      5050          bne.s     menu_30
                    5051   ; SwitchTest() ;
00002D4C  4EB8 0AA4 5052          jsr       _SwitchTest
00002D50  6010      5053          bra.s     menu_33
                    5054   menu_30:
                    5055   ; else if( c1 == (char)('D'))              // display Test command
00002D52  0C03 0044 5056          cmp.b     #68,D3
00002D56  6606      5057          bne.s     menu_32
                    5058   ; TestLEDS() ;
00002D58  4EB8 0A50 5059          jsr       _TestLEDS
00002D5C  6004      5060          bra.s     menu_33
                    5061   menu_32:
                    5062   ; else
                    5063   ; UnknownCommand() ;
00002D5E  4EB8 2A22 5064          jsr       _UnknownCommand
                    5065   menu_33:
00002D62  6000 0126 5066          bra       menu_46
                    5067   menu_26:
                    5068   ; }
                    5069   ; else if( c == (char)(' ')) {             // Next instruction command
00002D66  0C02 0020 5070          cmp.b     #32,D2
00002D6A  6636      5071          bne.s     menu_34
                    5072   ; DisableBreakPoints() ;
00002D6C  4EB8 2632 5073          jsr       _DisableBreakPoints
                    5074   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002D70  2013      5075          move.l    (A3),D0
00002D72  0C80 0000 5076          cmp.l     #1,D0
00002D76  0001      
00002D78  661A      5077          bne.s     menu_36
00002D7A  2039 0B00 5078          move.l    _GoFlag.L,D0
00002D7E  00DC      
00002D80  0C80 0000 5079          cmp.l     #1,D0
00002D84  0001      
00002D86  660C      5080          bne.s     menu_36
                    5081   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002D88  13FC 0001 5082          move.b    #1,4194314
00002D8C  0040 000A 
                    5083   ; return ;
00002D90  6000 00FC 5084          bra       menu_38
                    5085   menu_36:
                    5086   ; }
                    5087   ; else
                    5088   ; printf("\r\nError: Press 'G' first to start program") ;
00002D94  4879 0000 5089          pea       @m68kde~1_135.L
00002D98  5A4A      
00002D9A  4E92      5090          jsr       (A2)
00002D9C  584F      5091          addq.w    #4,A7
00002D9E  6000 00EA 5092          bra       menu_46
                    5093   menu_34:
                    5094   ; }
                    5095   ; else if( c == (char)('S')) {             // single step
00002DA2  0C02 0053 5096          cmp.b     #83,D2
00002DA6  6600 008C 5097          bne       menu_39
                    5098   ; if(Trace == 0) {
00002DAA  2013      5099          move.l    (A3),D0
00002DAC  6600 0050 5100          bne       menu_41
                    5101   ; DisableBreakPoints() ;
00002DB0  4EB8 2632 5102          jsr       _DisableBreakPoints
                    5103   ; printf("\r\nSingle Step  :[ON]") ;
00002DB4  4879 0000 5104          pea       @m68kde~1_136.L
00002DB8  5A74      
00002DBA  4E92      5105          jsr       (A2)
00002DBC  584F      5106          addq.w    #4,A7
                    5107   ; printf("\r\nBreak Points :[Disabled]") ;
00002DBE  4879 0000 5108          pea       @m68kde~1_69.L
00002DC2  5112      
00002DC4  4E92      5109          jsr       (A2)
00002DC6  584F      5110          addq.w    #4,A7
                    5111   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002DC8  0055 8000 5112          or.w      #32768,(A5)
                    5113   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002DCC  2F39 0B00 5114          move.l    _PC.L,-(A7)
00002DD0  0120      
00002DD2  4879 0000 5115          pea       @m68kde~1_137.L
00002DD6  5A8A      
00002DD8  4E92      5116          jsr       (A2)
00002DDA  504F      5117          addq.w    #8,A7
                    5118   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002DDC  4879 0000 5119          pea       @m68kde~1_138.L
00002DE0  5ABE      
00002DE2  4E92      5120          jsr       (A2)
00002DE4  584F      5121          addq.w    #4,A7
                    5122   ; DumpRegisters() ;
00002DE6  4EB8 1B88 5123          jsr       _DumpRegisters
                    5124   ; Trace = 1;
00002DEA  26BC 0000 5125          move.l    #1,(A3)
00002DEE  0001      
                    5126   ; TraceException = 1;
00002DF0  13FC 0001 5127          move.b    #1,4194314
00002DF4  0040 000A 
                    5128   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002DF8  28B8 0074 5129          move.l    116,(A4)
00002DFC  6032      5130          bra.s     menu_42
                    5131   menu_41:
                    5132   ; }
                    5133   ; else {
                    5134   ; Trace = 0 ;
00002DFE  4293      5135          clr.l     (A3)
                    5136   ; TraceException = 0 ;
00002E00  4239 0040 5137          clr.b     4194314
00002E04  000A      
                    5138   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002E06  28B8 0074 5139          move.l    116,(A4)
                    5140   ; EnableBreakPoints() ;
00002E0A  4EB8 2686 5141          jsr       _EnableBreakPoints
                    5142   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002E0E  0255 7FFF 5143          and.w     #32767,(A5)
                    5144   ; printf("\r\nSingle Step : [OFF]") ;
00002E12  4879 0000 5145          pea       @m68kde~1_139.L
00002E16  5AE2      
00002E18  4E92      5146          jsr       (A2)
00002E1A  584F      5147          addq.w    #4,A7
                    5148   ; printf("\r\nBreak Points :[Enabled]") ;
00002E1C  4879 0000 5149          pea       @m68kde~1_140.L
00002E20  5AF8      
00002E22  4E92      5150          jsr       (A2)
00002E24  584F      5151          addq.w    #4,A7
                    5152   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002E26  4879 0000 5153          pea       @m68kde~1_141.L
00002E2A  5B12      
00002E2C  4E92      5154          jsr       (A2)
00002E2E  584F      5155          addq.w    #4,A7
                    5156   menu_42:
00002E30  6000 0058 5157          bra       menu_46
                    5158   menu_39:
                    5159   ; }
                    5160   ; }
                    5161   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002E34  0C02 001B 5162          cmp.b     #27,D2
00002E38  6600 0040 5163          bne       menu_43
                    5164   ; Trace = 0;
00002E3C  4293      5165          clr.l     (A3)
                    5166   ; TraceException = 0;
00002E3E  4239 0040 5167          clr.b     4194314
00002E42  000A      
                    5168   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002E44  28B8 0074 5169          move.l    116,(A4)
                    5170   ; EnableBreakPoints() ;
00002E48  4EB8 2686 5171          jsr       _EnableBreakPoints
                    5172   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002E4C  0255 7FFF 5173          and.w     #32767,(A5)
                    5174   ; printf("\r\nSingle Step  :[OFF]") ;
00002E50  4879 0000 5175          pea       @m68kde~1_142.L
00002E54  5B3C      
00002E56  4E92      5176          jsr       (A2)
00002E58  584F      5177          addq.w    #4,A7
                    5178   ; printf("\r\nBreak Points :[Enabled]");
00002E5A  4879 0000 5179          pea       @m68kde~1_140.L
00002E5E  5AF8      
00002E60  4E92      5180          jsr       (A2)
00002E62  584F      5181          addq.w    #4,A7
                    5182   ; printf("\r\nProgram Running.....") ;
00002E64  4879 0000 5183          pea       @m68kde~1_133.L
00002E68  5A04      
00002E6A  4E92      5184          jsr       (A2)
00002E6C  584F      5185          addq.w    #4,A7
                    5186   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002E6E  4879 0000 5187          pea       @m68kde~1_134.L
00002E72  5A1C      
00002E74  4E92      5188          jsr       (A2)
00002E76  584F      5189          addq.w    #4,A7
                    5190   ; return ;
00002E78  6014      5191          bra.s     menu_38
                    5192   menu_43:
                    5193   ; }
                    5194   ; else if( c == (char)('W'))              // Watchpoint command
00002E7A  0C02 0057 5195          cmp.b     #87,D2
00002E7E  6606      5196          bne.s     menu_45
                    5197   ; Watchpoint() ;
00002E80  4EB8 2ACA 5198          jsr       _Watchpoint
00002E84  6004      5199          bra.s     menu_46
                    5200   menu_45:
                    5201   ; else
                    5202   ; UnknownCommand() ;
00002E86  4EB8 2A22 5203          jsr       _UnknownCommand
                    5204   menu_46:
00002E8A  6000 FDB0 5205          bra       menu_1
                    5206   menu_38:
00002E8E  4CDF 3C0C 5207          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002E92  4E75      5208          rts
                    5209   ; }
                    5210   ; }
                    5211   ; void PrintErrorMessageandAbort(char *string) {
                    5212   _PrintErrorMessageandAbort:
00002E94  4E56 0000 5213          link      A6,#0
                    5214   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002E98  4879 0000 5215          pea       @m68kde~1_143.L
00002E9C  5B52      
00002E9E  4EB9 0000 5216          jsr       _printf
00002EA2  40EE      
00002EA4  584F      5217          addq.w    #4,A7
                    5218   ; printf("%s\r\n", string) ;
00002EA6  2F2E 0008 5219          move.l    8(A6),-(A7)
00002EAA  4879 0000 5220          pea       @m68kde~1_144.L
00002EAE  5B6E      
00002EB0  4EB9 0000 5221          jsr       _printf
00002EB4  40EE      
00002EB6  504F      5222          addq.w    #8,A7
                    5223   ; menu() ;
00002EB8  4EB8 2C20 5224          jsr       _menu
00002EBC  4E5E      5225          unlk      A6
00002EBE  4E75      5226          rts
                    5227   ; }
                    5228   ; void IRQMessage(int level) {
                    5229   _IRQMessage:
00002EC0  4E56 0000 5230          link      A6,#0
                    5231   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002EC4  4879 0000 5232          pea       @m68kde~1_145.L
00002EC8  5B74      
00002ECA  4EB9 0000 5233          jsr       _printf
00002ECE  40EE      
00002ED0  584F      5234          addq.w    #4,A7
                    5235   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002ED2  2F2E 0008 5236          move.l    8(A6),-(A7)
00002ED6  4879 0000 5237          pea       @m68kde~1_146.L
00002EDA  5B8C      
00002EDC  4EB9 0000 5238          jsr       _printf
00002EE0  40EE      
00002EE2  504F      5239          addq.w    #8,A7
                    5240   ; menu() ;
00002EE4  4EB8 2C20 5241          jsr       _menu
00002EE8  4E5E      5242          unlk      A6
00002EEA  4E75      5243          rts
                    5244   ; }
                    5245   ; void UnhandledIRQ1(void) {
                    5246   _UnhandledIRQ1:
                    5247   ; IRQMessage(1);
00002EEC  4878 0001 5248          pea       1
00002EF0  4EB8 2EC0 5249          jsr       _IRQMessage
00002EF4  584F      5250          addq.w    #4,A7
00002EF6  4E75      5251          rts
                    5252   ; }
                    5253   ; void UnhandledIRQ2(void) {
                    5254   _UnhandledIRQ2:
                    5255   ; IRQMessage(2);
00002EF8  4878 0002 5256          pea       2
00002EFC  4EB8 2EC0 5257          jsr       _IRQMessage
00002F00  584F      5258          addq.w    #4,A7
00002F02  4E75      5259          rts
                    5260   ; }
                    5261   ; void UnhandledIRQ3(void){
                    5262   _UnhandledIRQ3:
                    5263   ; IRQMessage(3);
00002F04  4878 0003 5264          pea       3
00002F08  4EB8 2EC0 5265          jsr       _IRQMessage
00002F0C  584F      5266          addq.w    #4,A7
00002F0E  4E75      5267          rts
                    5268   ; }
                    5269   ; void UnhandledIRQ4(void) {
                    5270   _UnhandledIRQ4:
                    5271   ; IRQMessage(4);
00002F10  4878 0004 5272          pea       4
00002F14  4EB8 2EC0 5273          jsr       _IRQMessage
00002F18  584F      5274          addq.w    #4,A7
00002F1A  4E75      5275          rts
                    5276   ; }
                    5277   ; void UnhandledIRQ5(void) {
                    5278   _UnhandledIRQ5:
                    5279   ; IRQMessage(5);
00002F1C  4878 0005 5280          pea       5
00002F20  4EB8 2EC0 5281          jsr       _IRQMessage
00002F24  584F      5282          addq.w    #4,A7
00002F26  4E75      5283          rts
                    5284   ; }
                    5285   ; void UnhandledIRQ6(void) {
                    5286   _UnhandledIRQ6:
                    5287   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002F28  4879 0000 5288          pea       @m68kde~1_147.L
00002F2C  5BB0      
00002F2E  4EB8 2E94 5289          jsr       _PrintErrorMessageandAbort
00002F32  584F      5290          addq.w    #4,A7
                    5291   ; menu() ;
00002F34  4EB8 2C20 5292          jsr       _menu
00002F38  4E75      5293          rts
                    5294   ; }
                    5295   ; void UnhandledIRQ7(void) {
                    5296   _UnhandledIRQ7:
                    5297   ; IRQMessage(7);
00002F3A  4878 0007 5298          pea       7
00002F3E  4EB8 2EC0 5299          jsr       _IRQMessage
00002F42  584F      5300          addq.w    #4,A7
00002F44  4E75      5301          rts
                    5302   ; }
                    5303   ; void UnhandledTrap(void) {
                    5304   _UnhandledTrap:
                    5305   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002F46  4879 0000 5306          pea       @m68kde~1_148.L
00002F4A  5BF0      
00002F4C  4EB8 2E94 5307          jsr       _PrintErrorMessageandAbort
00002F50  584F      5308          addq.w    #4,A7
00002F52  4E75      5309          rts
                    5310   ; }
                    5311   ; void BusError() {
                    5312   _BusError:
                    5313   ; PrintErrorMessageandAbort("BUS Error!") ;
00002F54  4879 0000 5314          pea       @m68kde~1_149.L
00002F58  5C06      
00002F5A  4EB8 2E94 5315          jsr       _PrintErrorMessageandAbort
00002F5E  584F      5316          addq.w    #4,A7
00002F60  4E75      5317          rts
                    5318   ; }
                    5319   ; void AddressError() {
                    5320   _AddressError:
                    5321   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002F62  4879 0000 5322          pea       @m68kde~1_150.L
00002F66  5C12      
00002F68  4EB8 2E94 5323          jsr       _PrintErrorMessageandAbort
00002F6C  584F      5324          addq.w    #4,A7
00002F6E  4E75      5325          rts
                    5326   ; }
                    5327   ; void IllegalInstruction() {
                    5328   _IllegalInstruction:
                    5329   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002F70  4879 0000 5330          pea       @m68kde~1_151.L
00002F74  5C22      
00002F76  4EB8 2E94 5331          jsr       _PrintErrorMessageandAbort
00002F7A  584F      5332          addq.w    #4,A7
00002F7C  4E75      5333          rts
                    5334   ; }
                    5335   ; void Dividebyzero() {
                    5336   _Dividebyzero:
                    5337   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002F7E  4879 0000 5338          pea       @m68kde~1_152.L
00002F82  5C36      
00002F84  4EB8 2E94 5339          jsr       _PrintErrorMessageandAbort
00002F88  584F      5340          addq.w    #4,A7
00002F8A  4E75      5341          rts
                    5342   ; }
                    5343   ; void Check() {
                    5344   _Check:
                    5345   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002F8C  4879 0000 5346          pea       @m68kde~1_153.L
00002F90  5C46      
00002F92  4EB8 2E94 5347          jsr       _PrintErrorMessageandAbort
00002F96  584F      5348          addq.w    #4,A7
00002F98  4E75      5349          rts
                    5350   ; }
                    5351   ; void Trapv() {
                    5352   _Trapv:
                    5353   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002F9A  4879 0000 5354          pea       @m68kde~1_154.L
00002F9E  5C58      
00002FA0  4EB8 2E94 5355          jsr       _PrintErrorMessageandAbort
00002FA4  584F      5356          addq.w    #4,A7
00002FA6  4E75      5357          rts
                    5358   ; }
                    5359   ; void PrivError() {
                    5360   _PrivError:
                    5361   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002FA8  4879 0000 5362          pea       @m68kde~1_155.L
00002FAC  5C6A      
00002FAE  4EB8 2E94 5363          jsr       _PrintErrorMessageandAbort
00002FB2  584F      5364          addq.w    #4,A7
00002FB4  4E75      5365          rts
                    5366   ; }
                    5367   ; void UnitIRQ() {
                    5368   _UnitIRQ:
                    5369   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002FB6  4879 0000 5370          pea       @m68kde~1_156.L
00002FBA  5C7E      
00002FBC  4EB8 2E94 5371          jsr       _PrintErrorMessageandAbort
00002FC0  584F      5372          addq.w    #4,A7
00002FC2  4E75      5373          rts
                    5374   ; }
                    5375   ; void Spurious() {
                    5376   _Spurious:
                    5377   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002FC4  4879 0000 5378          pea       @m68kde~1_157.L
00002FC8  5C90      
00002FCA  4EB8 2E94 5379          jsr       _PrintErrorMessageandAbort
00002FCE  584F      5380          addq.w    #4,A7
00002FD0  4E75      5381          rts
                    5382   ; }
                    5383   ; void EnterString(void)
                    5384   ; {
                    5385   _EnterString:
00002FD2  4E56 FFFC 5386          link      A6,#-4
00002FD6  2F02      5387          move.l    D2,-(A7)
                    5388   ; unsigned char *Start;
                    5389   ; unsigned char c;
                    5390   ; printf("\r\nStart Address in Memory: ") ;
00002FD8  4879 0000 5391          pea       @m68kde~1_158.L
00002FDC  5C9E      
00002FDE  4EB9 0000 5392          jsr       _printf
00002FE2  40EE      
00002FE4  584F      5393          addq.w    #4,A7
                    5394   ; Start = Get8HexDigits(0) ;
00002FE6  42A7      5395          clr.l     -(A7)
00002FE8  4EB8 0CA4 5396          jsr       _Get8HexDigits
00002FEC  584F      5397          addq.w    #4,A7
00002FEE  2400      5398          move.l    D0,D2
                    5399   ; printf("\r\nEnter String (ESC to end) :") ;
00002FF0  4879 0000 5400          pea       @m68kde~1_159.L
00002FF4  5CBA      
00002FF6  4EB9 0000 5401          jsr       _printf
00002FFA  40EE      
00002FFC  584F      5402          addq.w    #4,A7
                    5403   ; while((c = getchar()) != 0x1b)
                    5404   EnterString_1:
00002FFE  4EB9 0000 5405          jsr       _getch
00003002  3762      
00003004  1D40 FFFF 5406          move.b    D0,-1(A6)
00003008  0C00 001B 5407          cmp.b     #27,D0
0000300C  670A      5408          beq.s     EnterString_3
                    5409   ; *Start++ = c ;
0000300E  2042      5410          move.l    D2,A0
00003010  5282      5411          addq.l    #1,D2
00003012  10AE FFFF 5412          move.b    -1(A6),(A0)
00003016  60E6      5413          bra       EnterString_1
                    5414   EnterString_3:
                    5415   ; *Start = 0x00;  // terminate with a null
00003018  2042      5416          move.l    D2,A0
0000301A  4210      5417          clr.b     (A0)
0000301C  241F      5418          move.l    (A7)+,D2
0000301E  4E5E      5419          unlk      A6
00003020  4E75      5420          rts
                    5421   ; }
                    5422   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    5423   ; void clearInputBuffer() {
                    5424   _clearInputBuffer:
00003022  4E56 FFFC 5425          link      A6,#-4
                    5426   ; int c;
                    5427   ; while ((c = getchar()) != '\n' && c != EOF);
                    5428   clearInputBuffer_1:
00003026  4EB9 0000 5429          jsr       _getch
0000302A  3762      
0000302C  2D40 FFFC 5430          move.l    D0,-4(A6)
00003030  0C80 0000 5431          cmp.l     #10,D0
00003034  000A      
00003036  670E      5432          beq.s     clearInputBuffer_3
00003038  202E FFFC 5433          move.l    -4(A6),D0
0000303C  0C80 FFFF 5434          cmp.l     #-1,D0
00003040  FFFF      
00003042  6702      5435          beq.s     clearInputBuffer_3
00003044  60E0      5436          bra       clearInputBuffer_1
                    5437   clearInputBuffer_3:
00003046  4E5E      5438          unlk      A6
00003048  4E75      5439          rts
                    5440   ; }
                    5441   ; void MemoryTest(void)
                    5442   ; {
                    5443   _MemoryTest:
0000304A  4E56 FF40 5444          link      A6,#-192
0000304E  48E7 3F3C 5445          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003052  45F9 0000 5446          lea       _printf.L,A2
00003056  40EE      
00003058  4BF8 0B68 5447          lea       __getch.L,A5
                    5448   ; unsigned int *RamPtr, counter1=1 ;
0000305C  2D7C 0000 5449          move.l    #1,-188(A6)
00003060  0001 FF44 
                    5450   ; register unsigned int i ;
                    5451   ; unsigned int Start, End ;
                    5452   ; char c, text[150];
                    5453   ; unsigned int* addressPointer;
                    5454   ; unsigned int startAddress = NULL;
00003064  42AE FFF0 5455          clr.l     -16(A6)
                    5456   ; unsigned int endAddress = NULL;
00003068  42AE FFF4 5457          clr.l     -12(A6)
                    5458   ; unsigned int byteLength;
                    5459   ; unsigned int dataSize = 0;
0000306C  4285      5460          clr.l     D5
                    5461   ; unsigned int dataPattern = 0;
0000306E  4283      5462          clr.l     D3
                    5463   ; unsigned int currAddress;
                    5464   ; unsigned int addrCount;
                    5465   ; unsigned int intBuffer = NULL;
00003070  7E00      5466          moveq     #0,D7
                    5467   ; unsigned char *startAddressPtr = NULL;
00003072  4282      5468          clr.l     D2
                    5469   ; unsigned char *endAddressPtr = NULL;
00003074  4286      5470          clr.l     D6
                    5471   ; unsigned short int *wordAddressPtr = NULL;
00003076  387C 0000 5472          move.w    #0,A4
                    5473   ; unsigned int *longAddressPtr = NULL;
0000307A  367C 0000 5474          move.w    #0,A3
                    5475   ; // IMPROVEMENTS TO BE MADE:
                    5476   ; // Suppossed to be able to write an odd address as a byte
                    5477   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    5478   ; // printf("\r\nStart Address: ") ;
                    5479   ; // Start = Get8HexDigits(0) ;
                    5480   ; // printf("\r\nEnd Address: ") ;
                    5481   ; // End = Get8HexDigits(0) ;
                    5482   ; // TODO
                    5483   ; scanflush();
0000307E  4EB9 0000 5484          jsr       _scanflush
00003082  3AE4      
                    5485   ; memset(text, 0, sizeof(text));  // fills with zeros
00003084  4878 0096 5486          pea       150
00003088  42A7      5487          clr.l     -(A7)
0000308A  486E FF56 5488          pea       -170(A6)
0000308E  4EB9 0000 5489          jsr       _memset
00003092  37FE      
00003094  DEFC 000C 5490          add.w     #12,A7
                    5491   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
00003098  4879 0000 5492          pea       @m68kde~1_160.L
0000309C  5CD8      
0000309E  4E92      5493          jsr       (A2)
000030A0  584F      5494          addq.w    #4,A7
                    5495   ; dataSize = _getch() - 48;
000030A2  4E95      5496          jsr       (A5)
000030A4  0480 0000 5497          sub.l     #48,D0
000030A8  0030      
000030AA  2A00      5498          move.l    D0,D5
                    5499   ; printf("\n");
000030AC  4879 0000 5500          pea       @m68kde~1_28.L
000030B0  4D6C      
000030B2  4E92      5501          jsr       (A2)
000030B4  584F      5502          addq.w    #4,A7
                    5503   ; if (dataSize == 0) {
000030B6  4A85      5504          tst.l     D5
000030B8  6600 0058 5505          bne       MemoryTest_1
                    5506   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
000030BC  4879 0000 5507          pea       @m68kde~1_161.L
000030C0  5D2E      
000030C2  4E92      5508          jsr       (A2)
000030C4  584F      5509          addq.w    #4,A7
                    5510   ; intBuffer = _getch() - 48;
000030C6  4E95      5511          jsr       (A5)
000030C8  0480 0000 5512          sub.l     #48,D0
000030CC  0030      
000030CE  2E00      5513          move.l    D0,D7
                    5514   ; // scanf("%d", &intBuffer);
                    5515   ; switch (intBuffer) {
000030D0  2007      5516          move.l    D7,D0
000030D2  0C80 0000 5517          cmp.l     #4,D0
000030D6  0004      
000030D8  642C      5518          bhs.s     MemoryTest_4
000030DA  E380      5519          asl.l     #1,D0
000030DC  303B 0806 5520          move.w    MemoryTest_5(PC,D0.L),D0
000030E0  4EFB 0002 5521          jmp       MemoryTest_5(PC,D0.W)
                    5522   MemoryTest_5:
000030E4  0008      5523          dc.w      MemoryTest_6-MemoryTest_5
000030E6  000C      5524          dc.w      MemoryTest_7-MemoryTest_5
000030E8  0014      5525          dc.w      MemoryTest_8-MemoryTest_5
000030EA  001C      5526          dc.w      MemoryTest_9-MemoryTest_5
                    5527   MemoryTest_6:
                    5528   ; case(0):
                    5529   ; dataPattern = 0x00; break;
000030EC  4283      5530          clr.l     D3
000030EE  6016      5531          bra.s     MemoryTest_4
                    5532   MemoryTest_7:
                    5533   ; case(1):
                    5534   ; dataPattern = 0xB2; break;
000030F0  263C 0000 5535          move.l    #178,D3
000030F4  00B2      
000030F6  600E      5536          bra.s     MemoryTest_4
                    5537   MemoryTest_8:
                    5538   ; case(2):
                    5539   ; dataPattern = 0xC3; break;
000030F8  263C 0000 5540          move.l    #195,D3
000030FC  00C3      
000030FE  6006      5541          bra.s     MemoryTest_4
                    5542   MemoryTest_9:
                    5543   ; case(3):
                    5544   ; dataPattern = 0xD4; break;
00003100  263C 0000 5545          move.l    #212,D3
00003104  00D4      
                    5546   MemoryTest_4:
                    5547   ; }
                    5548   ; dataPattern &= 0xFF;
00003106  C6BC 0000 5549          and.l     #255,D3
0000310A  00FF      
                    5550   ; byteLength = 1;
0000310C  7801      5551          moveq     #1,D4
0000310E  6000 00AE 5552          bra       MemoryTest_11
                    5553   MemoryTest_1:
                    5554   ; } else if (dataSize == 1) {
00003112  0C85 0000 5555          cmp.l     #1,D5
00003116  0001      
00003118  6600 0058 5556          bne       MemoryTest_10
                    5557   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
0000311C  4879 0000 5558          pea       @m68kde~1_162.L
00003120  5D90      
00003122  4E92      5559          jsr       (A2)
00003124  584F      5560          addq.w    #4,A7
                    5561   ; intBuffer = _getch() - 48;
00003126  4E95      5562          jsr       (A5)
00003128  0480 0000 5563          sub.l     #48,D0
0000312C  0030      
0000312E  2E00      5564          move.l    D0,D7
                    5565   ; switch (intBuffer) {
00003130  2007      5566          move.l    D7,D0
00003132  0C80 0000 5567          cmp.l     #4,D0
00003136  0004      
00003138  642C      5568          bhs.s     MemoryTest_13
0000313A  E380      5569          asl.l     #1,D0
0000313C  303B 0806 5570          move.w    MemoryTest_14(PC,D0.L),D0
00003140  4EFB 0002 5571          jmp       MemoryTest_14(PC,D0.W)
                    5572   MemoryTest_14:
00003144  0008      5573          dc.w      MemoryTest_15-MemoryTest_14
00003146  000C      5574          dc.w      MemoryTest_16-MemoryTest_14
00003148  0014      5575          dc.w      MemoryTest_17-MemoryTest_14
0000314A  001C      5576          dc.w      MemoryTest_18-MemoryTest_14
                    5577   MemoryTest_15:
                    5578   ; case(0):
                    5579   ; dataPattern = 0x0000; break;
0000314C  4283      5580          clr.l     D3
0000314E  6016      5581          bra.s     MemoryTest_13
                    5582   MemoryTest_16:
                    5583   ; case(1):
                    5584   ; dataPattern = 0x1234; break;
00003150  263C 0000 5585          move.l    #4660,D3
00003154  1234      
00003156  600E      5586          bra.s     MemoryTest_13
                    5587   MemoryTest_17:
                    5588   ; case(2):
                    5589   ; dataPattern = 0xA1B2; break;
00003158  263C 0000 5590          move.l    #41394,D3
0000315C  A1B2      
0000315E  6006      5591          bra.s     MemoryTest_13
                    5592   MemoryTest_18:
                    5593   ; case(3):
                    5594   ; dataPattern = 0xC3D4; break;
00003160  263C 0000 5595          move.l    #50132,D3
00003164  C3D4      
                    5596   MemoryTest_13:
                    5597   ; }
                    5598   ; dataPattern &= 0xFFFF;
00003166  C6BC 0000 5599          and.l     #65535,D3
0000316A  FFFF      
                    5600   ; byteLength = 2;
0000316C  7802      5601          moveq     #2,D4
0000316E  6000 004E 5602          bra       MemoryTest_11
                    5603   MemoryTest_10:
                    5604   ; } else {
                    5605   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
00003172  4879 0000 5606          pea       @m68kde~1_163.L
00003176  5DFA      
00003178  4E92      5607          jsr       (A2)
0000317A  584F      5608          addq.w    #4,A7
                    5609   ; intBuffer = _getch() - 48;
0000317C  4E95      5610          jsr       (A5)
0000317E  0480 0000 5611          sub.l     #48,D0
00003182  0030      
00003184  2E00      5612          move.l    D0,D7
                    5613   ; switch (intBuffer) {
00003186  2007      5614          move.l    D7,D0
00003188  0C80 0000 5615          cmp.l     #4,D0
0000318C  0004      
0000318E  642C      5616          bhs.s     MemoryTest_20
00003190  E380      5617          asl.l     #1,D0
00003192  303B 0806 5618          move.w    MemoryTest_21(PC,D0.L),D0
00003196  4EFB 0002 5619          jmp       MemoryTest_21(PC,D0.W)
                    5620   MemoryTest_21:
0000319A  0008      5621          dc.w      MemoryTest_22-MemoryTest_21
0000319C  000C      5622          dc.w      MemoryTest_23-MemoryTest_21
0000319E  0014      5623          dc.w      MemoryTest_24-MemoryTest_21
000031A0  001C      5624          dc.w      MemoryTest_25-MemoryTest_21
                    5625   MemoryTest_22:
                    5626   ; case(0):
                    5627   ; dataPattern = 0x00000000; break;
000031A2  4283      5628          clr.l     D3
000031A4  6016      5629          bra.s     MemoryTest_20
                    5630   MemoryTest_23:
                    5631   ; case(1):
                    5632   ; dataPattern = 0xAABBCCDD; break;
000031A6  263C AABB 5633          move.l    #-1430532899,D3
000031AA  CCDD      
000031AC  600E      5634          bra.s     MemoryTest_20
                    5635   MemoryTest_24:
                    5636   ; case(2):
                    5637   ; dataPattern = 0x11223344; break;
000031AE  263C 1122 5638          move.l    #287454020,D3
000031B2  3344      
000031B4  6006      5639          bra.s     MemoryTest_20
                    5640   MemoryTest_25:
                    5641   ; case(3):
                    5642   ; dataPattern = 0x76543210; break;
000031B6  263C 7654 5643          move.l    #1985229328,D3
000031BA  3210      
                    5644   MemoryTest_20:
                    5645   ; }
                    5646   ; byteLength = 4;
000031BC  7804      5647          moveq     #4,D4
                    5648   MemoryTest_11:
                    5649   ; }
                    5650   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    5651   ; while (startAddressPtr == NULL || 
                    5652   MemoryTest_26:
000031BE  4A82      5653          tst.l     D2
000031C0  6732      5654          beq.s     MemoryTest_29
000031C2  0C84 0000 5655          cmp.l     #1,D4
000031C6  0001      
000031C8  6316      5656          bls.s     MemoryTest_30
000031CA  2F02      5657          move.l    D2,-(A7)
000031CC  4878 0002 5658          pea       2
000031D0  4EB9 0000 5659          jsr       ULDIV
000031D4  3654      
000031D6  202F 0004 5660          move.l    4(A7),D0
000031DA  504F      5661          addq.w    #8,A7
000031DC  4A80      5662          tst.l     D0
000031DE  6614      5663          bne.s     MemoryTest_29
                    5664   MemoryTest_30:
000031E0  0C82 0802 5665          cmp.l     #134348800,D2
000031E4  0000      
000031E6  650C      5666          blo.s     MemoryTest_29
000031E8  203C 0B00 5667          move.l    #184549376,D0
000031EC  0000      
000031EE  9084      5668          sub.l     D4,D0
000031F0  B480      5669          cmp.l     D0,D2
000031F2  6316      5670          bls.s     MemoryTest_28
                    5671   MemoryTest_29:
                    5672   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    5673   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    5674   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    5675   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
000031F4  4879 0000 5676          pea       @m68kde~1_164.L
000031F8  5E78      
000031FA  4E92      5677          jsr       (A2)
000031FC  584F      5678          addq.w    #4,A7
                    5679   ; startAddressPtr =  Get8HexDigits(0);
000031FE  42A7      5680          clr.l     -(A7)
00003200  4EB8 0CA4 5681          jsr       _Get8HexDigits
00003204  584F      5682          addq.w    #4,A7
00003206  2400      5683          move.l    D0,D2
00003208  60B4      5684          bra       MemoryTest_26
                    5685   MemoryTest_28:
                    5686   ; }
                    5687   ; while (endAddressPtr == NULL || 
                    5688   MemoryTest_31:
0000320A  4A86      5689          tst.l     D6
0000320C  670A      5690          beq.s     MemoryTest_34
0000320E  202E FFF0 5691          move.l    -16(A6),D0
00003212  D084      5692          add.l     D4,D0
00003214  BC80      5693          cmp.l     D0,D6
00003216  6416      5694          bhs.s     MemoryTest_33
                    5695   MemoryTest_34:
                    5696   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    5697   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00003218  4879 0000 5698          pea       @m68kde~1_165.L
0000321C  5EB0      
0000321E  4E92      5699          jsr       (A2)
00003220  584F      5700          addq.w    #4,A7
                    5701   ; endAddressPtr =  Get8HexDigits(0);
00003222  42A7      5702          clr.l     -(A7)
00003224  4EB8 0CA4 5703          jsr       _Get8HexDigits
00003228  584F      5704          addq.w    #4,A7
0000322A  2C00      5705          move.l    D0,D6
0000322C  60DC      5706          bra       MemoryTest_31
                    5707   MemoryTest_33:
                    5708   ; }
                    5709   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
0000322E  2F02      5710          move.l    D2,-(A7)
00003230  4879 0000 5711          pea       @m68kde~1_166.L
00003234  5EE6      
00003236  4E92      5712          jsr       (A2)
00003238  504F      5713          addq.w    #8,A7
                    5714   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
0000323A  2F06      5715          move.l    D6,-(A7)
0000323C  4879 0000 5716          pea       @m68kde~1_167.L
00003240  5EFE      
00003242  4E92      5717          jsr       (A2)
00003244  504F      5718          addq.w    #8,A7
                    5719   ; addrCount = 0;
00003246  42AE FFFC 5720          clr.l     -4(A6)
                    5721   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    5722   MemoryTest_35:
0000324A  B486      5723          cmp.l     D6,D2
0000324C  6400 0132 5724          bhs       MemoryTest_37
00003250  2006      5725          move.l    D6,D0
00003252  9082      5726          sub.l     D2,D0
00003254  5280      5727          addq.l    #1,D0
00003256  B084      5728          cmp.l     D4,D0
00003258  6500 0126 5729          blo       MemoryTest_37
                    5730   ; // If address goes beyond 0x0B00_0000 then break
                    5731   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
0000325C  203C 0B00 5732          move.l    #184549376,D0
00003260  0000      
00003262  9084      5733          sub.l     D4,D0
00003264  B480      5734          cmp.l     D0,D2
00003266  6310      5735          bls.s     MemoryTest_38
                    5736   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
00003268  2F02      5737          move.l    D2,-(A7)
0000326A  4879 0000 5738          pea       @m68kde~1_168.L
0000326E  5F14      
00003270  4E92      5739          jsr       (A2)
00003272  504F      5740          addq.w    #8,A7
                    5741   ; break;
00003274  6000 010A 5742          bra       MemoryTest_37
                    5743   MemoryTest_38:
                    5744   ; }
                    5745   ; longAddressPtr = startAddressPtr;
00003278  2642      5746          move.l    D2,A3
                    5747   ; wordAddressPtr = startAddressPtr;
0000327A  2842      5748          move.l    D2,A4
                    5749   ; if (dataSize == 0) {
0000327C  4A85      5750          tst.l     D5
0000327E  6600 0034 5751          bne       MemoryTest_40
                    5752   ; *startAddressPtr = dataPattern;
00003282  2042      5753          move.l    D2,A0
00003284  1083      5754          move.b    D3,(A0)
                    5755   ; if ((*startAddressPtr) != dataPattern) {
00003286  2042      5756          move.l    D2,A0
00003288  1010      5757          move.b    (A0),D0
0000328A  C0BC 0000 5758          and.l     #255,D0
0000328E  00FF      
00003290  B083      5759          cmp.l     D3,D0
00003292  671C      5760          beq.s     MemoryTest_42
                    5761   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00003294  2F03      5762          move.l    D3,-(A7)
00003296  2042      5763          move.l    D2,A0
00003298  1210      5764          move.b    (A0),D1
0000329A  C2BC 0000 5765          and.l     #255,D1
0000329E  00FF      
000032A0  2F01      5766          move.l    D1,-(A7)
000032A2  2F02      5767          move.l    D2,-(A7)
000032A4  4879 0000 5768          pea       @m68kde~1_169.L
000032A8  5F46      
000032AA  4E92      5769          jsr       (A2)
000032AC  DEFC 0010 5770          add.w     #16,A7
                    5771   MemoryTest_42:
000032B0  6000 0058 5772          bra       MemoryTest_48
                    5773   MemoryTest_40:
                    5774   ; }
                    5775   ; } else if (dataSize == 1) {
000032B4  0C85 0000 5776          cmp.l     #1,D5
000032B8  0001      
000032BA  662C      5777          bne.s     MemoryTest_44
                    5778   ; *wordAddressPtr = dataPattern;
000032BC  3883      5779          move.w    D3,(A4)
                    5780   ; if ((*wordAddressPtr) != dataPattern) {
000032BE  3014      5781          move.w    (A4),D0
000032C0  C0BC 0000 5782          and.l     #65535,D0
000032C4  FFFF      
000032C6  B083      5783          cmp.l     D3,D0
000032C8  671C      5784          beq.s     MemoryTest_46
                    5785   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
000032CA  2F03      5786          move.l    D3,-(A7)
000032CC  2042      5787          move.l    D2,A0
000032CE  1210      5788          move.b    (A0),D1
000032D0  C2BC 0000 5789          and.l     #255,D1
000032D4  00FF      
000032D6  2F01      5790          move.l    D1,-(A7)
000032D8  2F02      5791          move.l    D2,-(A7)
000032DA  4879 0000 5792          pea       @m68kde~1_169.L
000032DE  5F46      
000032E0  4E92      5793          jsr       (A2)
000032E2  DEFC 0010 5794          add.w     #16,A7
                    5795   MemoryTest_46:
000032E6  6022      5796          bra.s     MemoryTest_48
                    5797   MemoryTest_44:
                    5798   ; }
                    5799   ; } else {
                    5800   ; *longAddressPtr = dataPattern;
000032E8  2683      5801          move.l    D3,(A3)
                    5802   ; if ((*longAddressPtr) != dataPattern) {
000032EA  B693      5803          cmp.l     (A3),D3
000032EC  671C      5804          beq.s     MemoryTest_48
                    5805   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
000032EE  2F03      5806          move.l    D3,-(A7)
000032F0  2042      5807          move.l    D2,A0
000032F2  1210      5808          move.b    (A0),D1
000032F4  C2BC 0000 5809          and.l     #255,D1
000032F8  00FF      
000032FA  2F01      5810          move.l    D1,-(A7)
000032FC  2F02      5811          move.l    D2,-(A7)
000032FE  4879 0000 5812          pea       @m68kde~1_169.L
00003302  5F46      
00003304  4E92      5813          jsr       (A2)
00003306  DEFC 0010 5814          add.w     #16,A7
                    5815   MemoryTest_48:
                    5816   ; }
                    5817   ; }
                    5818   ; // if ((*startAddressPtr) != dataPattern) {
                    5819   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    5820   ; // }
                    5821   ; addrCount++;
0000330A  52AE FFFC 5822          addq.l    #1,-4(A6)
                    5823   ; if (addrCount % 128 == 0) {
0000330E  2F2E FFFC 5824          move.l    -4(A6),-(A7)
00003312  4878 0080 5825          pea       128
00003316  4EB9 0000 5826          jsr       ULDIV
0000331A  3654      
0000331C  202F 0004 5827          move.l    4(A7),D0
00003320  504F      5828          addq.w    #8,A7
00003322  4A80      5829          tst.l     D0
00003324  6600 0054 5830          bne       MemoryTest_55
                    5831   ; if (dataSize == 0) {
00003328  4A85      5832          tst.l     D5
0000332A  661C      5833          bne.s     MemoryTest_52
                    5834   ; printf("Address: 0x%x Value: 0x%02X\n",
0000332C  2042      5835          move.l    D2,A0
0000332E  1210      5836          move.b    (A0),D1
00003330  C2BC 0000 5837          and.l     #255,D1
00003334  00FF      
00003336  2F01      5838          move.l    D1,-(A7)
00003338  2F02      5839          move.l    D2,-(A7)
0000333A  4879 0000 5840          pea       @m68kde~1_170.L
0000333E  5F8C      
00003340  4E92      5841          jsr       (A2)
00003342  DEFC 000C 5842          add.w     #12,A7
00003346  6032      5843          bra.s     MemoryTest_55
                    5844   MemoryTest_52:
                    5845   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    5846   ; }
                    5847   ; else if (dataSize == 1) {
00003348  0C85 0000 5848          cmp.l     #1,D5
0000334C  0001      
0000334E  661A      5849          bne.s     MemoryTest_54
                    5850   ; printf("Address: 0x%x Value: 0x%04X\n",
00003350  3214      5851          move.w    (A4),D1
00003352  C2BC 0000 5852          and.l     #65535,D1
00003356  FFFF      
00003358  2F01      5853          move.l    D1,-(A7)
0000335A  2F0C      5854          move.l    A4,-(A7)
0000335C  4879 0000 5855          pea       @m68kde~1_171.L
00003360  5FAA      
00003362  4E92      5856          jsr       (A2)
00003364  DEFC 000C 5857          add.w     #12,A7
00003368  6010      5858          bra.s     MemoryTest_55
                    5859   MemoryTest_54:
                    5860   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    5861   ; }
                    5862   ; else {
                    5863   ; printf("Address: 0x%x Value: 0x%08X\n",
0000336A  2F13      5864          move.l    (A3),-(A7)
0000336C  2F0B      5865          move.l    A3,-(A7)
0000336E  4879 0000 5866          pea       @m68kde~1_172.L
00003372  5FC8      
00003374  4E92      5867          jsr       (A2)
00003376  DEFC 000C 5868          add.w     #12,A7
                    5869   MemoryTest_55:
                    5870   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    5871   ; }
                    5872   ; }
                    5873   ; startAddressPtr += byteLength;
0000337A  D484      5874          add.l     D4,D2
0000337C  6000 FECC 5875          bra       MemoryTest_35
                    5876   MemoryTest_37:
00003380  4CDF 3CFC 5877          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003384  4E5E      5878          unlk      A6
00003386  4E75      5879          rts
                    5880   ; }
                    5881   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    5882   ; }
                    5883   ; void main(void)
                    5884   ; {
                    5885   _main:
00003388  4E56 FFF4 5886          link      A6,#-12
0000338C  48E7 3030 5887          movem.l   D2/D3/A2/A3,-(A7)
00003390  45F8 0A30 5888          lea       _InstallExceptionHandler.L,A2
00003394  47F9 0000 5889          lea       _printf.L,A3
00003398  40EE      
                    5890   ; char c ;
                    5891   ; int i, j ;
                    5892   ; char *BugMessage = "DE1-68k Bug V1.77";
0000339A  41F9 0000 5893          lea       @m68kde~1_173.L,A0
0000339E  5FE6      
000033A0  2608      5894          move.l    A0,D3
                    5895   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
000033A2  41F9 0000 5896          lea       @m68kde~1_174.L,A0
000033A6  5FF8      
000033A8  2D48 FFFC 5897          move.l    A0,-4(A6)
                    5898   ; KillAllBreakPoints() ;
000033AC  4EB8 26CE 5899          jsr       _KillAllBreakPoints
                    5900   ; i = x = y = z = PortA_Count = 0;
000033B0  42B9 0B00 5901          clr.l     _PortA_Count.L
000033B4  00D4      
000033B6  42B9 0B00 5902          clr.l     _z.L
000033BA  00D0      
000033BC  42B9 0B00 5903          clr.l     _y.L
000033C0  00CC      
000033C2  42B9 0B00 5904          clr.l     _x.L
000033C6  00C8      
000033C8  4282      5905          clr.l     D2
                    5906   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
000033CA  42B9 0B00 5907          clr.l     _GoFlag.L
000033CE  00DC      
000033D0  42B9 0B00 5908          clr.l     _Trace.L
000033D4  00D8      
                    5909   ; Echo = 1 ;
000033D6  23FC 0000 5910          move.l    #1,_Echo.L
000033DA  0001 0B00 
000033DE  00E0      
                    5911   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
000033E0  42B9 0B00 5912          clr.l     _d7.L
000033E4  0100      
000033E6  42B9 0B00 5913          clr.l     _d6.L
000033EA  00FC      
000033EC  42B9 0B00 5914          clr.l     _d5.L
000033F0  00F8      
000033F2  42B9 0B00 5915          clr.l     _d4.L
000033F6  00F4      
000033F8  42B9 0B00 5916          clr.l     _d3.L
000033FC  00F0      
000033FE  42B9 0B00 5917          clr.l     _d2.L
00003402  00EC      
00003404  42B9 0B00 5918          clr.l     _d1.L
00003408  00E8      
0000340A  42B9 0B00 5919          clr.l     _d0.L
0000340E  00E4      
                    5920   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00003410  42B9 0B00 5921          clr.l     _a6.L
00003414  011C      
00003416  42B9 0B00 5922          clr.l     _a5.L
0000341A  0118      
0000341C  42B9 0B00 5923          clr.l     _a4.L
00003420  0114      
00003422  42B9 0B00 5924          clr.l     _a3.L
00003426  0110      
00003428  42B9 0B00 5925          clr.l     _a2.L
0000342C  010C      
0000342E  42B9 0B00 5926          clr.l     _a1.L
00003432  0108      
00003434  42B9 0B00 5927          clr.l     _a0.L
00003438  0104      
                    5928   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
0000343A  23FC 0800 5929          move.l    #134217728,_PC.L
0000343E  0000 0B00 
00003442  0120      
00003444  23FC 0C00 5930          move.l    #201326592,_SSP.L
00003448  0000 0B00 
0000344C  0124      
0000344E  23FC 0C00 5931          move.l    #201326592,_USP.L
00003452  0000 0B00 
00003456  0128      
                    5932   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00003458  33FC 2000 5933          move.w    #8192,_SR.L
0000345C  0B00 012C 
                    5934   ; // Initialise Breakpoint variables
                    5935   ; for(i = 0; i < 8; i++)  {
00003460  4282      5936          clr.l     D2
                    5937   main_1:
00003462  0C82 0000 5938          cmp.l     #8,D2
00003466  0008      
00003468  6C00 004C 5939          bge       main_3
                    5940   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
0000346C  2002      5941          move.l    D2,D0
0000346E  E588      5942          lsl.l     #2,D0
00003470  41F9 0B00 5943          lea       _BreakPointAddress.L,A0
00003474  012E      
00003476  42B0 0800 5944          clr.l     0(A0,D0.L)
                    5945   ; WatchPointAddress[i] = 0 ;
0000347A  2002      5946          move.l    D2,D0
0000347C  E588      5947          lsl.l     #2,D0
0000347E  41F9 0B00 5948          lea       _WatchPointAddress.L,A0
00003482  0182      
00003484  42B0 0800 5949          clr.l     0(A0,D0.L)
                    5950   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00003488  2002      5951          move.l    D2,D0
0000348A  E388      5952          lsl.l     #1,D0
0000348C  41F9 0B00 5953          lea       _BreakPointInstruction.L,A0
00003490  014E      
00003492  4270 0800 5954          clr.w     0(A0,D0.L)
                    5955   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00003496  2002      5956          move.l    D2,D0
00003498  E588      5957          lsl.l     #2,D0
0000349A  41F9 0B00 5958          lea       _BreakPointSetOrCleared.L,A0
0000349E  015E      
000034A0  42B0 0800 5959          clr.l     0(A0,D0.L)
                    5960   ; WatchPointSetOrCleared[i] = 0;
000034A4  2002      5961          move.l    D2,D0
000034A6  E588      5962          lsl.l     #2,D0
000034A8  41F9 0B00 5963          lea       _WatchPointSetOrCleared.L,A0
000034AC  01A2      
000034AE  42B0 0800 5964          clr.l     0(A0,D0.L)
000034B2  5282      5965          addq.l    #1,D2
000034B4  60AC      5966          bra       main_1
                    5967   main_3:
                    5968   ; }
                    5969   ; Init_RS232() ;     // initialise the RS232 port
000034B6  4EB8 0B12 5970          jsr       _Init_RS232
                    5971   ; Init_LCD() ;
000034BA  4EB8 095E 5972          jsr       _Init_LCD
                    5973   ; SPI_Init();
000034BE  4EB8 10FC 5974          jsr       _SPI_Init
                    5975   ; // IIC_Init();
                    5976   ; for( i = 32; i < 48; i++)
000034C2  7420      5977          moveq     #32,D2
                    5978   main_4:
000034C4  0C82 0000 5979          cmp.l     #48,D2
000034C8  0030      
000034CA  6C0E      5980          bge.s     main_6
                    5981   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
000034CC  2F02      5982          move.l    D2,-(A7)
000034CE  4878 2F46 5983          pea       _UnhandledTrap.L
000034D2  4E92      5984          jsr       (A2)
000034D4  504F      5985          addq.w    #8,A7
000034D6  5282      5986          addq.l    #1,D2
000034D8  60EA      5987          bra       main_4
                    5988   main_6:
                    5989   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
000034DA  4878 002F 5990          pea       47
000034DE  4878 2C20 5991          pea       _menu.L
000034E2  4E92      5992          jsr       (A2)
000034E4  504F      5993          addq.w    #8,A7
                    5994   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
000034E6  4878 0019 5995          pea       25
000034EA  4878 2EEC 5996          pea       _UnhandledIRQ1.L
000034EE  4E92      5997          jsr       (A2)
000034F0  504F      5998          addq.w    #8,A7
                    5999   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
000034F2  4878 001A 6000          pea       26
000034F6  4878 2EF8 6001          pea       _UnhandledIRQ2.L
000034FA  4E92      6002          jsr       (A2)
000034FC  504F      6003          addq.w    #8,A7
                    6004   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
000034FE  4878 001B 6005          pea       27
00003502  4878 2F04 6006          pea       _UnhandledIRQ3.L
00003506  4E92      6007          jsr       (A2)
00003508  504F      6008          addq.w    #8,A7
                    6009   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
0000350A  4878 001C 6010          pea       28
0000350E  4878 2F10 6011          pea       _UnhandledIRQ4.L
00003512  4E92      6012          jsr       (A2)
00003514  504F      6013          addq.w    #8,A7
                    6014   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00003516  4878 001D 6015          pea       29
0000351A  4878 2F1C 6016          pea       _UnhandledIRQ5.L
0000351E  4E92      6017          jsr       (A2)
00003520  504F      6018          addq.w    #8,A7
                    6019   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00003522  4878 001E 6020          pea       30
00003526  4878 2F28 6021          pea       _UnhandledIRQ6.L
0000352A  4E92      6022          jsr       (A2)
0000352C  504F      6023          addq.w    #8,A7
                    6024   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
0000352E  4878 001F 6025          pea       31
00003532  4878 2F3A 6026          pea       _UnhandledIRQ7.L
00003536  4E92      6027          jsr       (A2)
00003538  504F      6028          addq.w    #8,A7
                    6029   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
0000353A  4878 002E 6030          pea       46
0000353E  4878 295C 6031          pea       _HandleBreakPoint.L
00003542  4E92      6032          jsr       (A2)
00003544  504F      6033          addq.w    #8,A7
                    6034   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00003546  4878 001D 6035          pea       29
0000354A  4878 203C 6036          pea       _DumpRegistersandPause.L
0000354E  4E92      6037          jsr       (A2)
00003550  504F      6038          addq.w    #8,A7
                    6039   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00003552  4878 0002 6040          pea       2
00003556  4878 2F54 6041          pea       _BusError.L
0000355A  4E92      6042          jsr       (A2)
0000355C  504F      6043          addq.w    #8,A7
                    6044   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
0000355E  4878 0003 6045          pea       3
00003562  4878 2F62 6046          pea       _AddressError.L
00003566  4E92      6047          jsr       (A2)
00003568  504F      6048          addq.w    #8,A7
                    6049   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
0000356A  4878 0004 6050          pea       4
0000356E  4878 2F70 6051          pea       _IllegalInstruction.L
00003572  4E92      6052          jsr       (A2)
00003574  504F      6053          addq.w    #8,A7
                    6054   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00003576  4878 0005 6055          pea       5
0000357A  4878 2F7E 6056          pea       _Dividebyzero.L
0000357E  4E92      6057          jsr       (A2)
00003580  504F      6058          addq.w    #8,A7
                    6059   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00003582  4878 0006 6060          pea       6
00003586  4878 2F8C 6061          pea       _Check.L
0000358A  4E92      6062          jsr       (A2)
0000358C  504F      6063          addq.w    #8,A7
                    6064   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
0000358E  4878 0007 6065          pea       7
00003592  4878 2F9A 6066          pea       _Trapv.L
00003596  4E92      6067          jsr       (A2)
00003598  504F      6068          addq.w    #8,A7
                    6069   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
0000359A  4878 0008 6070          pea       8
0000359E  4878 2FA8 6071          pea       _PrivError.L
000035A2  4E92      6072          jsr       (A2)
000035A4  504F      6073          addq.w    #8,A7
                    6074   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
000035A6  4878 000F 6075          pea       15
000035AA  4878 2FB6 6076          pea       _UnitIRQ.L
000035AE  4E92      6077          jsr       (A2)
000035B0  504F      6078          addq.w    #8,A7
                    6079   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
000035B2  4878 0018 6080          pea       24
000035B6  4878 2F8C 6081          pea       _Check.L
000035BA  4E92      6082          jsr       (A2)
000035BC  504F      6083          addq.w    #8,A7
                    6084   ; FlushKeyboard() ;                        // dump unread characters from keyboard
000035BE  4EB8 0BA6 6085          jsr       _FlushKeyboard
                    6086   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
000035C2  4239 0040 6087          clr.b     4194314
000035C6  000A      
                    6088   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    6089   ; if (((char)(PortB & 0x02)) == (char)(0x02))    {
000035C8  1039 0040 6090          move.b    4194306,D0
000035CC  0002      
000035CE  C03C 0002 6091          and.b     #2,D0
000035D2  0C00 0002 6092          cmp.b     #2,D0
000035D6  6628      6093          bne.s     main_7
                    6094   ; LoadFromFlashChip();
000035D8  4EB8 138A 6095          jsr       _LoadFromFlashChip
                    6096   ; printf("\r\nRunning.....") ;
000035DC  4879 0000 6097          pea       @m68kde~1_175.L
000035E0  6016      
000035E2  4E93      6098          jsr       (A3)
000035E4  584F      6099          addq.w    #4,A7
                    6100   ; Oline1("Running.....") ;
000035E6  4879 0000 6101          pea       @m68kde~1_176.L
000035EA  6026      
000035EC  4EB8 0A02 6102          jsr       _Oline1
000035F0  584F      6103          addq.w    #4,A7
                    6104   ; GoFlag = 1;
000035F2  23FC 0000 6105          move.l    #1,_GoFlag.L
000035F6  0001 0B00 
000035FA  00DC      
                    6106   ; go() ;
000035FC  4EB8 08B8 6107          jsr       _go
                    6108   main_7:
                    6109   ; }
                    6110   ; // otherwise start the debug monitor
                    6111   ; Oline0(BugMessage) ;
00003600  2F03      6112          move.l    D3,-(A7)
00003602  4EB8 09D4 6113          jsr       _Oline0
00003606  584F      6114          addq.w    #4,A7
                    6115   ; Oline1("By: PJ Davies") ;
00003608  4879 0000 6116          pea       @m68kde~1_177.L
0000360C  6034      
0000360E  4EB8 0A02 6117          jsr       _Oline1
00003612  584F      6118          addq.w    #4,A7
                    6119   ; printf("\r\n%s", BugMessage) ;
00003614  2F03      6120          move.l    D3,-(A7)
00003616  4879 0000 6121          pea       @m68kde~1_178.L
0000361A  6042      
0000361C  4E93      6122          jsr       (A3)
0000361E  504F      6123          addq.w    #8,A7
                    6124   ; printf("\r\n%s", CopyrightMessage) ;
00003620  2F2E FFFC 6125          move.l    -4(A6),-(A7)
00003624  4879 0000 6126          pea       @m68kde~1_178.L
00003628  6042      
0000362A  4E93      6127          jsr       (A3)
0000362C  504F      6128          addq.w    #8,A7
                    6129   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
0000362E  4879 0000 6130          pea       @m68kde~1_179.L
00003632  6048      
00003634  4E93      6131          jsr       (A3)
00003636  584F      6132          addq.w    #4,A7
                    6133   ; // I2CTest();
                    6134   ; menu();
00003638  4EB8 2C20 6135          jsr       _menu
0000363C  4CDF 0C0C 6136          movem.l   (A7)+,D2/D3/A2/A3
00003640  4E5E      6137          unlk      A6
00003642  4E75      6138          rts
                    6139   ; }
                    6140   _strcpy:
00003644  206F 0004 6141          move.l    (4,A7),A0
00003648  226F 0008 6142          move.l    (8,A7),A1
0000364C  2008      6143          move.l    A0,D0
                    6144   strcpy_1:
0000364E  10D9      6145          move.b    (A1)+,(A0)+
00003650  66FC      6146          bne       strcpy_1
00003652  4E75      6147          rts
                    6148   ULDIV:
00003654  4E56 0000 6149          link    A6,#0
00003658  48E7 C000 6150          movem.l D0/D1,-(A7)
0000365C  222E 0008 6151          move.l  8(A6),D1
00003660  202E 000C 6152          move.l  12(A6),D0
00003664  6036      6153          bra.s   ldiv_3
                    6154   LDIV:
00003666  4E56 0000 6155          link    A6,#0
0000366A  48E7 C000 6156          movem.l D0/D1,-(A7)
0000366E  222E 0008 6157          move.l  8(A6),D1
00003672  202E 000C 6158          move.l  12(A6),D0
00003676  4A80      6159          tst.l   D0
00003678  6A0E      6160          bpl.s   ldiv_1
0000367A  4480      6161          neg.l   D0
0000367C  4A81      6162          tst.l   D1
0000367E  6A14      6163          bpl.s   ldiv_2
00003680  4481      6164          neg.l   D1
00003682  612A      6165          bsr.s   dodiv
00003684  4481      6166          neg.l   D1
00003686  6016      6167          bra.s   ldiv_4
                    6168   ldiv_1:
00003688  4A81      6169          tst.l   D1
0000368A  6A10      6170          bpl.s   ldiv_3
0000368C  4481      6171          neg.l   D1
0000368E  611E      6172          bsr.s   dodiv
00003690  4480      6173          neg.l   D0
00003692  600A      6174          bra.s   ldiv_4
                    6175   ldiv_2:
00003694  6118      6176          bsr.s   dodiv
00003696  4480      6177          neg.l   D0
00003698  4481      6178          neg.l   D1
0000369A  6002      6179          bra.s   ldiv_4
                    6180   ldiv_3:
0000369C  6110      6181          bsr.s   dodiv
                    6182   ldiv_4:
0000369E  2D40 0008 6183          move.l  D0,8(A6)
000036A2  2D41 000C 6184          move.l  D1,12(A6)
000036A6  4CDF 0003 6185          movem.l (A7)+,D0/D1
000036AA  4E5E      6186          unlk    A6
000036AC  4E75      6187          rts
                    6188   dodiv:
000036AE  0C81 0000 6189          cmpi.l  #$FFFF,D1
000036B2  FFFF      
000036B4  6236      6190          bhi.s   dodiv_2
000036B6  0C80 0000 6191          cmpi.l  #$FFFF,D0
000036BA  FFFF      
000036BC  6210      6192          bhi.s   dodiv_1
000036BE  80C1      6193          divu    D1,D0
000036C0  2200      6194          move.l  D0,D1
000036C2  4241      6195          clr.w   D1
000036C4  4841      6196          swap    D1
000036C6  0280 0000 6197          andi.l  #$FFFF,D0
000036CA  FFFF      
000036CC  4E75      6198          rts
                    6199   dodiv_1:
000036CE  48A7 A000 6200          movem.w D0/D2,-(A7)
000036D2  4240      6201          clr.w   D0
000036D4  4840      6202          swap    D0
000036D6  80C1      6203          divu    D1,D0
000036D8  3400      6204          move.w  D0,D2
000036DA  301F      6205          move.w  (A7)+,D0
000036DC  80C1      6206          divu    D1,D0
000036DE  4840      6207          swap    D0
000036E0  4281      6208          clr.l   D1
000036E2  3200      6209          move.w  D0,D1
000036E4  3002      6210          move.w  D2,D0
000036E6  4840      6211          swap    D0
000036E8  341F      6212          move.w  (A7)+,D2
000036EA  4E75      6213          rts
                    6214   dodiv_2:
000036EC  48E7 3800 6215          movem.l D2/D3/D4,-(A7)
000036F0  2401      6216          move.l  D1,D2
000036F2  4242      6217          clr.w   D2
000036F4  4842      6218          swap    D2
000036F6  5282      6219          addq.l  #1,D2
000036F8  2600      6220          move.l  D0,D3
000036FA  2801      6221          move.l  D1,D4
000036FC  2202      6222          move.l  D2,D1
000036FE  61CE      6223          bsr.s   dodiv_1
00003700  2204      6224          move.l  D4,D1
00003702  82C2      6225          divu    D2,D1
00003704  80C1      6226          divu    D1,D0
00003706  0280 0000 6227          andi.l  #$FFFF,D0
0000370A  FFFF      
                    6228   dodiv_3:
0000370C  2204      6229          move.l  D4,D1
0000370E  2404      6230          move.l  D4,D2
00003710  4842      6231          swap    D2
00003712  C2C0      6232          mulu    D0,D1
00003714  C4C0      6233          mulu    D0,D2
00003716  4842      6234          swap    D2
00003718  D282      6235          add.l   D2,D1
0000371A  9283      6236          sub.l   D3,D1
0000371C  620A      6237          bhi.s   dodiv_4
0000371E  4481      6238          neg.l   D1
00003720  B881      6239          cmp.l   D1,D4
00003722  6208      6240          bhi.s   dodiv_5
00003724  5280      6241          addq.l  #1,D0
00003726  60E4      6242          bra.s   dodiv_3
                    6243   dodiv_4:
00003728  5380      6244          subq.l  #1,D0
0000372A  60E0      6245          bra.s   dodiv_3
                    6246   dodiv_5:
0000372C  4CDF 001C 6247          movem.l (A7)+,D2/D3/D4
00003730  4E75      6248          rts
                    6249   _putch:
00003732  4E56 0000 6250          link      A6,#0
00003736  48E7 2000 6251          movem.l   D2,-(A7)
0000373A  242E 0008 6252          move.l    8(A6),D2
0000373E  0C82 0000 6253          cmp.l     #10,D2
00003742  000A      
00003744  660A      6254          bne.s     putch_1
00003746  4878 000D 6255          pea       13
0000374A  6100 D3F0 6256          bsr       __putch
0000374E  584F      6257          addq.w    #4,A7
                    6258   putch_1:
00003750  2F02      6259          move.l    D2,-(A7)
00003752  6100 D3E8 6260          bsr       __putch
00003756  584F      6261          addq.w    #4,A7
00003758  2002      6262          move.l    D2,D0
0000375A  4CDF 0004 6263          movem.l   (A7)+,D2
0000375E  4E5E      6264          unlk      A6
00003760  4E75      6265          rts
                    6266   _getch:
00003762  48E7 2000 6267          movem.l   D2,-(A7)
00003766  2439 0B00 6268          move.l    __ungetbuf,D2
0000376A  00C0      
0000376C  2039 0B00 6269          move.l    __ungetbuf,D0
00003770  00C0      
00003772  0C80 FFFF 6270          cmp.l     #-1,D0
00003776  FFFF      
00003778  670C      6271          beq.s     getch_1
0000377A  23FC FFFF 6272          move.l    #-1,__ungetbuf
0000377E  FFFF 0B00 
00003782  00C0      
00003784  6010      6273          bra.s     getch_3
                    6274   getch_1:
00003786  6100 D3E0 6275          bsr       __getch
0000378A  2400      6276          move.l    D0,D2
0000378C  0C80 0000 6277          cmp.l     #13,D0
00003790  000D      
00003792  6602      6278          bne.s     getch_3
00003794  740A      6279          moveq     #10,D2
                    6280   getch_3:
00003796  2002      6281          move.l    D2,D0
00003798  4CDF 0004 6282          movem.l   (A7)+,D2
0000379C  4E75      6283          rts
                    6284   _tolower:
0000379E  4E56 0000 6285          link      A6,#0
000037A2  48E7 2000 6286          movem.l   D2,-(A7)
000037A6  242E 0008 6287          move.l    8(A6),D2
000037AA  0C82 0000 6288          cmp.l     #65,D2
000037AE  0041      
000037B0  6D0E      6289          blt.s     tolower_1
000037B2  0C82 0000 6290          cmp.l     #90,D2
000037B6  005A      
000037B8  6E06      6291          bgt.s     tolower_1
000037BA  84BC 0000 6292          or.l      #32,D2
000037BE  0020      
                    6293   tolower_1:
000037C0  2002      6294          move.l    D2,D0
000037C2  4CDF 0004 6295          movem.l   (A7)+,D2
000037C6  4E5E      6296          unlk      A6
000037C8  4E75      6297          rts
                    6298   _sprintf:
000037CA  4E56 FFFC 6299          link      A6,#-4
000037CE  48E7 2000 6300          movem.l   D2,-(A7)
000037D2  41EE 000C 6301          lea       12(A6),A0
000037D6  5848      6302          addq.w    #4,A0
000037D8  2408      6303          move.l    A0,D2
000037DA  2F02      6304          move.l    D2,-(A7)
000037DC  2F2E 000C 6305          move.l    12(A6),-(A7)
000037E0  2F2E 0008 6306          move.l    8(A6),-(A7)
000037E4  6100 09EC 6307          bsr       _vsprintf
000037E8  DEFC 000C 6308          add.w     #12,A7
000037EC  2D40 FFFC 6309          move.l    D0,-4(A6)
000037F0  4282      6310          clr.l     D2
000037F2  202E FFFC 6311          move.l    -4(A6),D0
000037F6  4CDF 0004 6312          movem.l   (A7)+,D2
000037FA  4E5E      6313          unlk      A6
000037FC  4E75      6314          rts
                    6315   _memset:
000037FE  206F 0004 6316          move.l    (4,A7),A0
00003802  202F 0008 6317          move.l    (8,A7),D0
00003806  222F 000C 6318          move.l    (12,A7),D1
0000380A  2248      6319          move.l    A0,A1	
                    6320   memset_1:
0000380C  12C0      6321          move.b    D0,(A1)+
0000380E  5341      6322          subq      #1,D1
00003810  66FA      6323          bne       memset_1
00003812  2008      6324          move.l    A0,D0
00003814  4E75      6325          rts
                    6326   _strcat:
00003816  206F 0004 6327          move.l    (4,A7),A0	
0000381A  226F 0008 6328          move.l    (8,A7),A1	
0000381E  2008      6329          move.l    A0,D0		
                    6330   strcat_0:
00003820  4A18      6331          tst.b     (A0)+
00003822  66FC      6332          bne       strcat_0
00003824  5348      6333          subq      #1,A0
                    6334   strcat_1:
00003826  10D9      6335          move.b    (A1)+,(A0)+
00003828  66FC      6336          bne       strcat_1
0000382A  4E75      6337          rts
                    6338   _toupper:
0000382C  4E56 0000 6339          link      A6,#0
00003830  48E7 2000 6340          movem.l   D2,-(A7)
00003834  242E 0008 6341          move.l    8(A6),D2
00003838  0C82 0000 6342          cmp.l     #97,D2
0000383C  0061      
0000383E  6D0E      6343          blt.s     toupper_1
00003840  0C82 0000 6344          cmp.l     #122,D2
00003844  007A      
00003846  6E06      6345          bgt.s     toupper_1
00003848  C4BC 0000 6346          and.l     #95,D2
0000384C  005F      
                    6347   toupper_1:
0000384E  2002      6348          move.l    D2,D0
00003850  4CDF 0004 6349          movem.l   (A7)+,D2
00003854  4E5E      6350          unlk      A6
00003856  4E75      6351          rts
                    6352   @vsscanf_scanread:
00003858  4E56 FFFC 6353          link      A6,#-4
0000385C  48E7 0020 6354          movem.l   A2,-(A7)
00003860  45F9 0000 6355          lea       @vsscanf_bufx,A2
00003864  6090      
00003866  4AAE 0008 6356          tst.l     8(A6)
0000386A  6722      6357          beq.s     @vsscanf_scanread_1
0000386C  206E 0008 6358          move.l    8(A6),A0
00003870  58AE 0008 6359          addq.l    #4,8(A6)
00003874  2050      6360          move.l    (A0),A0
00003876  1010      6361          move.b    (A0),D0
00003878  4880      6362          ext.w     D0
0000387A  48C0      6363          ext.l     D0
0000387C  2D40 FFFC 6364          move.l    D0,-4(A6)
00003880  6706      6365          beq.s     @vsscanf_scanread_3
00003882  202E FFFC 6366          move.l    -4(A6),D0
00003886  6002      6367          bra.s     @vsscanf_scanread_4
                    6368   @vsscanf_scanread_3:
00003888  70FF      6369          moveq     #-1,D0
                    6370   @vsscanf_scanread_4:
0000388A  6000 0032 6371          bra       @vsscanf_scanread_5
                    6372   @vsscanf_scanread_1:
0000388E  2052      6373          move.l    (A2),A0
00003890  1010      6374          move.b    (A0),D0
00003892  6620      6375          bne.s     @vsscanf_scanread_6
00003894  4879 0B00 6376          pea       @vsscanf_buf
00003898  0546      
0000389A  6100 1038 6377          bsr       _gets
0000389E  584F      6378          addq.w    #4,A7
000038A0  2480      6379          move.l    D0,(A2)
000038A2  4879 0000 6380          pea       @vsscanf_1
000038A6  6094      
000038A8  4879 0B00 6381          pea       @vsscanf_buf
000038AC  0546      
000038AE  6100 FF66 6382          bsr       _strcat
000038B2  504F      6383          addq.w    #8,A7
                    6384   @vsscanf_scanread_6:
000038B4  2052      6385          move.l    (A2),A0
000038B6  5292      6386          addq.l    #1,(A2)
000038B8  1010      6387          move.b    (A0),D0
000038BA  4880      6388          ext.w     D0
000038BC  48C0      6389          ext.l     D0
                    6390   @vsscanf_scanread_5:
000038BE  4CDF 0400 6391          movem.l   (A7)+,A2
000038C2  4E5E      6392          unlk      A6
000038C4  4E75      6393          rts
                    6394   @vsscanf_scanputback:
000038C6  4E56 0000 6395          link      A6,#0
000038CA  48E7 3000 6396          movem.l   D2/D3,-(A7)
000038CE  242E 000C 6397          move.l    12(A6),D2
000038D2  262E 0008 6398          move.l    8(A6),D3
000038D6  6718      6399          beq.s     @vsscanf_scanputback_1
000038D8  0C82 FFFF 6400          cmp.l     #-1,D2
000038DC  FFFF      
000038DE  670A      6401          beq.s     @vsscanf_scanputback_3
000038E0  5983      6402          subq.l    #4,D3
000038E2  2043      6403          move.l    D3,A0
000038E4  2050      6404          move.l    (A0),A0
000038E6  1082      6405          move.b    D2,(A0)
000038E8  6004      6406          bra.s     @vsscanf_scanputback_4
                    6407   @vsscanf_scanputback_3:
000038EA  2043      6408          move.l    D3,A0
000038EC  5390      6409          subq.l    #1,(A0)
                    6410   @vsscanf_scanputback_4:
000038EE  602E      6411          bra.s     @vsscanf_scanputback_6
                    6412   @vsscanf_scanputback_1:
000038F0  41F9 0B00 6413          lea       @vsscanf_buf,A0
000038F4  0546      
000038F6  2008      6414          move.l    A0,D0
000038F8  B0B9 0000 6415          cmp.l     @vsscanf_bufx,D0
000038FC  6090      
000038FE  6610      6416          bne.s     @vsscanf_scanputback_5
00003900  4239 0B00 6417          clr.b     @vsscanf_buf
00003904  0546      
00003906  2F02      6418          move.l    D2,-(A7)
00003908  6100 103C 6419          bsr       _ungetch
0000390C  584F      6420          addq.w    #4,A7
0000390E  600E      6421          bra.s     @vsscanf_scanputback_6
                    6422   @vsscanf_scanputback_5:
00003910  53B9 0000 6423          subq.l    #1,@vsscanf_bufx
00003914  6090      
00003916  2079 0000 6424          move.l    @vsscanf_bufx,A0
0000391A  6090      
0000391C  1082      6425          move.b    D2,(A0)
                    6426   @vsscanf_scanputback_6:
0000391E  2002      6427          move.l    D2,D0
00003920  4CDF 000C 6428          movem.l   (A7)+,D2/D3
00003924  4E5E      6429          unlk      A6
00003926  4E75      6430          rts
                    6431   @vsscanf_scanspace:
00003928  4E56 0000 6432          link      A6,#0
0000392C  48E7 2000 6433          movem.l   D2,-(A7)
                    6434   @vsscanf_scanspace_1:
00003930  2F2E 0008 6435          move.l    8(A6),-(A7)
00003934  6100 FF22 6436          bsr       @vsscanf_scanread
00003938  584F      6437          addq.w    #4,A7
0000393A  2400      6438          move.l    D0,D2
0000393C  206E 000C 6439          move.l    12(A6),A0
00003940  5290      6440          addq.l    #1,(A0)
00003942  2042      6441          move.l    D2,A0
00003944  43F9 0000 6442          lea       __ctype,A1
00003948  6096      
0000394A  1030 9801 6443          move.b    1(A0,A1.L),D0
0000394E  C03C 0010 6444          and.b     #16,D0
00003952  66DC      6445          bne       @vsscanf_scanspace_1
00003954  2002      6446          move.l    D2,D0
00003956  4CDF 0004 6447          movem.l   (A7)+,D2
0000395A  4E5E      6448          unlk      A6
0000395C  4E75      6449          rts
                    6450   @vsscanf_scanselect:
0000395E  4E56 0000 6451          link      A6,#0
00003962  48E7 3F20 6452          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00003966  262E 000C 6453          move.l    12(A6),D3
0000396A  2C2E 0018 6454          move.l    24(A6),D6
0000396E  2E2E 0014 6455          move.l    20(A6),D7
00003972  2043      6456          move.l    D3,A0
00003974  1010      6457          move.b    (A0),D0
00003976  4880      6458          ext.w     D0
00003978  48C0      6459          ext.l     D0
0000397A  0C80 0000 6460          cmp.l     #94,D0
0000397E  005E      
00003980  6608      6461          bne.s     @vsscanf_scanselect_1
00003982  347C 0001 6462          move.w    #1,A2
00003986  5283      6463          addq.l    #1,D3
00003988  6004      6464          bra.s     @vsscanf_scanselect_2
                    6465   @vsscanf_scanselect_1:
0000398A  347C 0000 6466          move.w    #0,A2
                    6467   @vsscanf_scanselect_2:
0000398E  202E 0010 6468          move.l    16(A6),D0
00003992  53AE 0010 6469          subq.l    #1,16(A6)
00003996  4A80      6470          tst.l     D0
00003998  6700 0108 6471          beq       @vsscanf_scanselect_5
0000399C  2F2E 0008 6472          move.l    8(A6),-(A7)
000039A0  6100 FEB6 6473          bsr       @vsscanf_scanread
000039A4  584F      6474          addq.w    #4,A7
000039A6  2800      6475          move.l    D0,D4
000039A8  0C84 FFFF 6476          cmp.l     #-1,D4
000039AC  FFFF      
000039AE  6604      6477          bne.s     @vsscanf_scanselect_6
000039B0  6000 00F0 6478          bra       @vsscanf_scanselect_5
                    6479   @vsscanf_scanselect_6:
000039B4  206E 001C 6480          move.l    28(A6),A0
000039B8  5290      6481          addq.l    #1,(A0)
000039BA  4285      6482          clr.l     D5
000039BC  4282      6483          clr.l     D2
                    6484   @vsscanf_scanselect_8:
000039BE  2043      6485          move.l    D3,A0
000039C0  1030 2800 6486          move.b    0(A0,D2.L),D0
000039C4  4880      6487          ext.w     D0
000039C6  48C0      6488          ext.l     D0
000039C8  0C80 0000 6489          cmp.l     #93,D0
000039CC  005D      
000039CE  6700 008E 6490          beq       @vsscanf_scanselect_10
000039D2  4A82      6491          tst.l     D2
000039D4  6716      6492          beq.s     @vsscanf_scanselect_11
000039D6  2043      6493          move.l    D3,A0
000039D8  1030 2800 6494          move.b    0(A0,D2.L),D0
000039DC  4880      6495          ext.w     D0
000039DE  48C0      6496          ext.l     D0
000039E0  0C80 0000 6497          cmp.l     #93,D0
000039E4  005D      
000039E6  6604      6498          bne.s     @vsscanf_scanselect_11
000039E8  6000 0074 6499          bra       @vsscanf_scanselect_10
                    6500   @vsscanf_scanselect_11:
000039EC  4A82      6501          tst.l     D2
000039EE  6700 0058 6502          beq       @vsscanf_scanselect_15
000039F2  2043      6503          move.l    D3,A0
000039F4  1030 2800 6504          move.b    0(A0,D2.L),D0
000039F8  4880      6505          ext.w     D0
000039FA  48C0      6506          ext.l     D0
000039FC  0C80 0000 6507          cmp.l     #45,D0
00003A00  002D      
00003A02  6600 0044 6508          bne       @vsscanf_scanselect_15
00003A06  2043      6509          move.l    D3,A0
00003A08  2002      6510          move.l    D2,D0
00003A0A  5380      6511          subq.l    #1,D0
00003A0C  2243      6512          move.l    D3,A1
00003A0E  2F08      6513          move.l    A0,-(A7)
00003A10  2042      6514          move.l    D2,A0
00003A12  1230 0800 6515          move.b    0(A0,D0.L),D1
00003A16  B230 9801 6516          cmp.b     1(A0,A1.L),D1
00003A1A  6C00 002C 6517          bge       @vsscanf_scanselect_15
00003A1E  205F      6518          move.l    (A7)+,A0
00003A20  2043      6519          move.l    D3,A0
00003A22  2002      6520          move.l    D2,D0
00003A24  5380      6521          subq.l    #1,D0
00003A26  1030 0800 6522          move.b    0(A0,D0.L),D0
00003A2A  4880      6523          ext.w     D0
00003A2C  48C0      6524          ext.l     D0
00003A2E  B880      6525          cmp.l     D0,D4
00003A30  6D12      6526          blt.s     @vsscanf_scanselect_17
00003A32  2043      6527          move.l    D3,A0
00003A34  2242      6528          move.l    D2,A1
00003A36  1031 8801 6529          move.b    1(A1,A0.L),D0
00003A3A  4880      6530          ext.w     D0
00003A3C  48C0      6531          ext.l     D0
00003A3E  B880      6532          cmp.l     D0,D4
00003A40  6E02      6533          bgt.s     @vsscanf_scanselect_17
00003A42  601A      6534          bra.s     @vsscanf_scanselect_10
                    6535   @vsscanf_scanselect_17:
00003A44  5282      6536          addq.l    #1,D2
00003A46  6010      6537          bra.s     @vsscanf_scanselect_19
                    6538   @vsscanf_scanselect_15:
00003A48  2043      6539          move.l    D3,A0
00003A4A  1030 2800 6540          move.b    0(A0,D2.L),D0
00003A4E  4880      6541          ext.w     D0
00003A50  48C0      6542          ext.l     D0
00003A52  B880      6543          cmp.l     D0,D4
00003A54  6602      6544          bne.s     @vsscanf_scanselect_19
00003A56  6006      6545          bra.s     @vsscanf_scanselect_10
                    6546   @vsscanf_scanselect_19:
00003A58  5282      6547          addq.l    #1,D2
00003A5A  6000 FF62 6548          bra       @vsscanf_scanselect_8
                    6549   @vsscanf_scanselect_10:
00003A5E  4A82      6550          tst.l     D2
00003A60  6712      6551          beq.s     @vsscanf_scanselect_23
00003A62  2043      6552          move.l    D3,A0
00003A64  1030 2800 6553          move.b    0(A0,D2.L),D0
00003A68  4880      6554          ext.w     D0
00003A6A  48C0      6555          ext.l     D0
00003A6C  0C80 0000 6556          cmp.l     #93,D0
00003A70  005D      
00003A72  6702      6557          beq.s     @vsscanf_scanselect_21
                    6558   @vsscanf_scanselect_23:
00003A74  7A01      6559          moveq     #1,D5
                    6560   @vsscanf_scanselect_21:
00003A76  200A      6561          move.l    A2,D0
00003A78  6712      6562          beq.s     @vsscanf_scanselect_24
00003A7A  4A85      6563          tst.l     D5
00003A7C  660C      6564          bne.s     @vsscanf_scanselect_26
00003A7E  4A87      6565          tst.l     D7
00003A80  6606      6566          bne.s     @vsscanf_scanselect_28
00003A82  2046      6567          move.l    D6,A0
00003A84  5286      6568          addq.l    #1,D6
00003A86  1084      6569          move.b    D4,(A0)
                    6570   @vsscanf_scanselect_28:
00003A88  6014      6571          bra.s     @vsscanf_scanselect_4
                    6572   @vsscanf_scanselect_26:
00003A8A  6016      6573          bra.s     @vsscanf_scanselect_5
                    6574   @vsscanf_scanselect_24:
00003A8C  4A85      6575          tst.l     D5
00003A8E  670C      6576          beq.s     @vsscanf_scanselect_30
00003A90  4A87      6577          tst.l     D7
00003A92  6606      6578          bne.s     @vsscanf_scanselect_32
00003A94  2046      6579          move.l    D6,A0
00003A96  5286      6580          addq.l    #1,D6
00003A98  1084      6581          move.b    D4,(A0)
                    6582   @vsscanf_scanselect_32:
00003A9A  6002      6583          bra.s     @vsscanf_scanselect_4
                    6584   @vsscanf_scanselect_30:
00003A9C  6004      6585          bra.s     @vsscanf_scanselect_5
                    6586   @vsscanf_scanselect_4:
00003A9E  6000 FEEE 6587          bra       @vsscanf_scanselect_2
                    6588   @vsscanf_scanselect_5:
00003AA2  0C84 FFFF 6589          cmp.l     #-1,D4
00003AA6  FFFF      
00003AA8  6712      6590          beq.s     @vsscanf_scanselect_34
00003AAA  2F04      6591          move.l    D4,-(A7)
00003AAC  2F2E 0008 6592          move.l    8(A6),-(A7)
00003AB0  6100 FE14 6593          bsr       @vsscanf_scanputback
00003AB4  504F      6594          addq.w    #8,A7
00003AB6  206E 001C 6595          move.l    28(A6),A0
00003ABA  5390      6596          subq.l    #1,(A0)
                    6597   @vsscanf_scanselect_34:
00003ABC  4A87      6598          tst.l     D7
00003ABE  6604      6599          bne.s     @vsscanf_scanselect_36
00003AC0  2046      6600          move.l    D6,A0
00003AC2  4210      6601          clr.b     (A0)
                    6602   @vsscanf_scanselect_36:
00003AC4  5283      6603          addq.l    #1,D3
00003AC6  2043      6604          move.l    D3,A0
00003AC8  1010      6605          move.b    (A0),D0
00003ACA  4880      6606          ext.w     D0
00003ACC  48C0      6607          ext.l     D0
00003ACE  0C80 0000 6608          cmp.l     #93,D0
00003AD2  005D      
00003AD4  6702      6609          beq.s     @vsscanf_scanselect_40
00003AD6  60EC      6610          bra       @vsscanf_scanselect_36
                    6611   @vsscanf_scanselect_40:
00003AD8  5283      6612          addq.l    #1,D3
00003ADA  2003      6613          move.l    D3,D0
00003ADC  4CDF 04FC 6614          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003AE0  4E5E      6615          unlk      A6
00003AE2  4E75      6616          rts
                    6617   _scanflush:
00003AE4  41F9 0B00 6618          lea       @vsscanf_buf,A0
00003AE8  0546      
00003AEA  23C8 0000 6619          move.l    A0,@vsscanf_bufx
00003AEE  6090      
00003AF0  4239 0B00 6620          clr.b     @vsscanf_buf
00003AF4  0546      
00003AF6  4878 FFFF 6621          pea       -1
00003AFA  6100 0E4A 6622          bsr       _ungetch
00003AFE  584F      6623          addq.w    #4,A7
00003B00  4E75      6624          rts
                    6625   _vsscanf:
00003B02  4E56 FF88 6626          link      A6,#-120
00003B06  48E7 3F3C 6627          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003B0A  47F8 3858 6628          lea       @vsscanf_scanread,A3
00003B0E  4AAE 0008 6629          tst.l     8(A6)
00003B12  6706      6630          beq.s     vsscanf_1
00003B14  41EE 0008 6631          lea       8(A6),A0
00003B18  6004      6632          bra.s     vsscanf_2
                    6633   vsscanf_1:
00003B1A  4280      6634          clr.l     D0
00003B1C  2040      6635          move.l    D0,A0
                    6636   vsscanf_2:
00003B1E  2A08      6637          move.l    A0,D5
00003B20  42AE FFE4 6638          clr.l     -28(A6)
00003B24  4284      6639          clr.l     D4
                    6640   vsscanf_3:
00003B26  206E 000C 6641          move.l    12(A6),A0
00003B2A  52AE 000C 6642          addq.l    #1,12(A6)
00003B2E  1010      6643          move.b    (A0),D0
00003B30  4880      6644          ext.w     D0
00003B32  48C0      6645          ext.l     D0
00003B34  2600      6646          move.l    D0,D3
00003B36  6700 05AC 6647          beq       vsscanf_5
00003B3A  4286      6648          clr.l     D6
00003B3C  387C 0000 6649          move.w    #0,A4
00003B40  0C83 0000 6650          cmp.l     #32,D3
00003B44  0020      
00003B46  6712      6651          beq.s     vsscanf_8
00003B48  0C83 0000 6652          cmp.l     #9,D3
00003B4C  0009      
00003B4E  670A      6653          beq.s     vsscanf_8
00003B50  0C83 0000 6654          cmp.l     #10,D3
00003B54  000A      
00003B56  6600 0048 6655          bne       vsscanf_6
                    6656   vsscanf_8:
00003B5A  2F05      6657          move.l    D5,-(A7)
00003B5C  4E93      6658          jsr       (A3)
00003B5E  584F      6659          addq.w    #4,A7
00003B60  2400      6660          move.l    D0,D2
00003B62  52AE FFE4 6661          addq.l    #1,-28(A6)
00003B66  0C82 FFFF 6662          cmp.l     #-1,D2
00003B6A  FFFF      
00003B6C  660E      6663          bne.s     vsscanf_11
00003B6E  4A84      6664          tst.l     D4
00003B70  6704      6665          beq.s     vsscanf_13
00003B72  2004      6666          move.l    D4,D0
00003B74  6002      6667          bra.s     vsscanf_14
                    6668   vsscanf_13:
00003B76  70FF      6669          moveq     #-1,D0
                    6670   vsscanf_14:
00003B78  6000 056C 6671          bra       vsscanf_15
                    6672   vsscanf_11:
00003B7C  2042      6673          move.l    D2,A0
00003B7E  43F9 0000 6674          lea       __ctype,A1
00003B82  6096      
00003B84  1030 9801 6675          move.b    1(A0,A1.L),D0
00003B88  C03C 0010 6676          and.b     #16,D0
00003B8C  66CC      6677          bne       vsscanf_8
00003B8E  53AE FFE4 6678          subq.l    #1,-28(A6)
00003B92  2F02      6679          move.l    D2,-(A7)
00003B94  2F05      6680          move.l    D5,-(A7)
00003B96  6100 FD2E 6681          bsr       @vsscanf_scanputback
00003B9A  504F      6682          addq.w    #8,A7
00003B9C  6000 0542 6683          bra       vsscanf_139
                    6684   vsscanf_6:
00003BA0  0C83 0000 6685          cmp.l     #37,D3
00003BA4  0025      
00003BA6  6600 0502 6686          bne       vsscanf_127
00003BAA  206E 000C 6687          move.l    12(A6),A0
00003BAE  52AE 000C 6688          addq.l    #1,12(A6)
00003BB2  1010      6689          move.b    (A0),D0
00003BB4  4880      6690          ext.w     D0
00003BB6  48C0      6691          ext.l     D0
00003BB8  2600      6692          move.l    D0,D3
00003BBA  42AE FFEC 6693          clr.l     -20(A6)
00003BBE  4286      6694          clr.l     D6
00003BC0  42AE FFE8 6695          clr.l     -24(A6)
00003BC4  347C 7FFF 6696          move.w    #32767,A2
00003BC8  0C83 0000 6697          cmp.l     #42,D3
00003BCC  002A      
00003BCE  6612      6698          bne.s     vsscanf_18
00003BD0  7C01      6699          moveq     #1,D6
00003BD2  206E 000C 6700          move.l    12(A6),A0
00003BD6  52AE 000C 6701          addq.l    #1,12(A6)
00003BDA  1010      6702          move.b    (A0),D0
00003BDC  4880      6703          ext.w     D0
00003BDE  48C0      6704          ext.l     D0
00003BE0  2600      6705          move.l    D0,D3
                    6706   vsscanf_18:
00003BE2  2043      6707          move.l    D3,A0
00003BE4  43F9 0000 6708          lea       __ctype,A1
00003BE8  6096      
00003BEA  1030 9801 6709          move.b    1(A0,A1.L),D0
00003BEE  C03C 0004 6710          and.b     #4,D0
00003BF2  6700 004E 6711          beq       vsscanf_24
00003BF6  2003      6712          move.l    D3,D0
00003BF8  0480 0000 6713          sub.l     #48,D0
00003BFC  0030      
00003BFE  2440      6714          move.l    D0,A2
                    6715   vsscanf_22:
00003C00  206E 000C 6716          move.l    12(A6),A0
00003C04  52AE 000C 6717          addq.l    #1,12(A6)
00003C08  1010      6718          move.b    (A0),D0
00003C0A  4880      6719          ext.w     D0
00003C0C  48C0      6720          ext.l     D0
00003C0E  2600      6721          move.l    D0,D3
00003C10  2040      6722          move.l    D0,A0
00003C12  43F9 0000 6723          lea       __ctype,A1
00003C16  6096      
00003C18  1030 9801 6724          move.b    1(A0,A1.L),D0
00003C1C  C0BC 0000 6725          and.l     #255,D0
00003C20  00FF      
00003C22  C0BC 0000 6726          and.l     #4,D0
00003C26  0004      
00003C28  6718      6727          beq.s     vsscanf_24
00003C2A  70D0      6728          moveq     #-48,D0
00003C2C  2F0A      6729          move.l    A2,-(A7)
00003C2E  4878 000A 6730          pea       10
00003C32  6100 0C12 6731          bsr       LMUL
00003C36  2217      6732          move.l    (A7),D1
00003C38  504F      6733          addq.w    #8,A7
00003C3A  D283      6734          add.l     D3,D1
00003C3C  D081      6735          add.l     D1,D0
00003C3E  2440      6736          move.l    D0,A2
00003C40  60BE      6737          bra       vsscanf_22
                    6738   vsscanf_24:
00003C42  0C83 0000 6739          cmp.l     #108,D3
00003C46  006C      
00003C48  6708      6740          beq.s     vsscanf_27
00003C4A  0C83 0000 6741          cmp.l     #76,D3
00003C4E  004C      
00003C50  661A      6742          bne.s     vsscanf_25
                    6743   vsscanf_27:
00003C52  2D7C 0000 6744          move.l    #1,-24(A6)
00003C56  0001 FFE8 
00003C5A  206E 000C 6745          move.l    12(A6),A0
00003C5E  52AE 000C 6746          addq.l    #1,12(A6)
00003C62  1010      6747          move.b    (A0),D0
00003C64  4880      6748          ext.w     D0
00003C66  48C0      6749          ext.l     D0
00003C68  2600      6750          move.l    D0,D3
00003C6A  6020      6751          bra.s     vsscanf_28
                    6752   vsscanf_25:
00003C6C  0C83 0000 6753          cmp.l     #104,D3
00003C70  0068      
00003C72  6618      6754          bne.s     vsscanf_28
00003C74  2D7C 0000 6755          move.l    #1,-20(A6)
00003C78  0001 FFEC 
00003C7C  206E 000C 6756          move.l    12(A6),A0
00003C80  52AE 000C 6757          addq.l    #1,12(A6)
00003C84  1010      6758          move.b    (A0),D0
00003C86  4880      6759          ext.w     D0
00003C88  48C0      6760          ext.l     D0
00003C8A  2600      6761          move.l    D0,D3
                    6762   vsscanf_28:
00003C8C  0C83 0000 6763          cmp.l     #91,D3
00003C90  005B      
00003C92  6600 0036 6764          bne       vsscanf_30
00003C96  4A86      6765          tst.l     D6
00003C98  660A      6766          bne.s     vsscanf_32
00003C9A  206E 0010 6767          move.l    16(A6),A0
00003C9E  58AE 0010 6768          addq.l    #4,16(A6)
00003CA2  2E10      6769          move.l    (A0),D7
                    6770   vsscanf_32:
00003CA4  486E FFE4 6771          pea       -28(A6)
00003CA8  2F07      6772          move.l    D7,-(A7)
00003CAA  2F06      6773          move.l    D6,-(A7)
00003CAC  2F0A      6774          move.l    A2,-(A7)
00003CAE  2F2E 000C 6775          move.l    12(A6),-(A7)
00003CB2  2F05      6776          move.l    D5,-(A7)
00003CB4  6100 FCA8 6777          bsr       @vsscanf_scanselect
00003CB8  DEFC 0018 6778          add.w     #24,A7
00003CBC  2D40 000C 6779          move.l    D0,12(A6)
00003CC0  4A86      6780          tst.l     D6
00003CC2  6602      6781          bne.s     vsscanf_34
00003CC4  5284      6782          addq.l    #1,D4
                    6783   vsscanf_34:
00003CC6  6000 0418 6784          bra       vsscanf_139
                    6785   vsscanf_30:
00003CCA  0C83 0000 6786          cmp.l     #110,D3
00003CCE  006E      
00003CD0  661A      6787          bne.s     vsscanf_36
00003CD2  4A86      6788          tst.l     D6
00003CD4  6612      6789          bne.s     vsscanf_38
00003CD6  206E 0010 6790          move.l    16(A6),A0
00003CDA  58AE 0010 6791          addq.l    #4,16(A6)
00003CDE  2E10      6792          move.l    (A0),D7
00003CE0  2047      6793          move.l    D7,A0
00003CE2  20AE FFE4 6794          move.l    -28(A6),(A0)
00003CE6  5284      6795          addq.l    #1,D4
                    6796   vsscanf_38:
00003CE8  6000 03F6 6797          bra       vsscanf_139
                    6798   vsscanf_36:
00003CEC  0C83 0000 6799          cmp.l     #115,D3
00003CF0  0073      
00003CF2  6600 00AC 6800          bne       vsscanf_40
00003CF6  486E FFE4 6801          pea       -28(A6)
00003CFA  2F05      6802          move.l    D5,-(A7)
00003CFC  6100 FC2A 6803          bsr       @vsscanf_scanspace
00003D00  504F      6804          addq.w    #8,A7
00003D02  2400      6805          move.l    D0,D2
00003D04  4A86      6806          tst.l     D6
00003D06  660A      6807          bne.s     vsscanf_42
00003D08  206E 0010 6808          move.l    16(A6),A0
00003D0C  58AE 0010 6809          addq.l    #4,16(A6)
00003D10  2E10      6810          move.l    (A0),D7
                    6811   vsscanf_42:
00003D12  52AE FFE4 6812          addq.l    #1,-28(A6)
                    6813   vsscanf_44:
00003D16  200A      6814          move.l    A2,D0
00003D18  534A      6815          subq.w    #1,A2
00003D1A  4A80      6816          tst.l     D0
00003D1C  6700 0038 6817          beq       vsscanf_46
00003D20  2042      6818          move.l    D2,A0
00003D22  43F9 0000 6819          lea       __ctype,A1
00003D26  6096      
00003D28  1030 9801 6820          move.b    1(A0,A1.L),D0
00003D2C  C03C 0010 6821          and.b     #16,D0
00003D30  6624      6822          bne.s     vsscanf_46
00003D32  0C82 FFFF 6823          cmp.l     #-1,D2
00003D36  FFFF      
00003D38  671C      6824          beq.s     vsscanf_46
00003D3A  387C 0001 6825          move.w    #1,A4
00003D3E  4A86      6826          tst.l     D6
00003D40  6606      6827          bne.s     vsscanf_47
00003D42  2047      6828          move.l    D7,A0
00003D44  5287      6829          addq.l    #1,D7
00003D46  1082      6830          move.b    D2,(A0)
                    6831   vsscanf_47:
00003D48  2F05      6832          move.l    D5,-(A7)
00003D4A  4E93      6833          jsr       (A3)
00003D4C  584F      6834          addq.w    #4,A7
00003D4E  2400      6835          move.l    D0,D2
00003D50  52AE FFE4 6836          addq.l    #1,-28(A6)
00003D54  60C0      6837          bra       vsscanf_44
                    6838   vsscanf_46:
00003D56  4A86      6839          tst.l     D6
00003D58  660A      6840          bne.s     vsscanf_51
00003D5A  2047      6841          move.l    D7,A0
00003D5C  4210      6842          clr.b     (A0)
00003D5E  200C      6843          move.l    A4,D0
00003D60  6702      6844          beq.s     vsscanf_51
00003D62  5284      6845          addq.l    #1,D4
                    6846   vsscanf_51:
00003D64  0C82 FFFF 6847          cmp.l     #-1,D2
00003D68  FFFF      
00003D6A  6708      6848          beq.s     vsscanf_55
00003D6C  4A86      6849          tst.l     D6
00003D6E  661E      6850          bne.s     vsscanf_53
00003D70  200C      6851          move.l    A4,D0
00003D72  661A      6852          bne.s     vsscanf_53
                    6853   vsscanf_55:
00003D74  4A84      6854          tst.l     D4
00003D76  6704      6855          beq.s     vsscanf_56
00003D78  2004      6856          move.l    D4,D0
00003D7A  600E      6857          bra.s     vsscanf_59
                    6858   vsscanf_56:
00003D7C  0C82 FFFF 6859          cmp.l     #-1,D2
00003D80  FFFF      
00003D82  6604      6860          bne.s     vsscanf_58
00003D84  70FF      6861          moveq     #-1,D0
00003D86  6002      6862          bra.s     vsscanf_59
                    6863   vsscanf_58:
00003D88  2004      6864          move.l    D4,D0
                    6865   vsscanf_59:
00003D8A  6000 035A 6866          bra       vsscanf_15
                    6867   vsscanf_53:
00003D8E  53AE FFE4 6868          subq.l    #1,-28(A6)
00003D92  2F02      6869          move.l    D2,-(A7)
00003D94  2F05      6870          move.l    D5,-(A7)
00003D96  6100 FB2E 6871          bsr       @vsscanf_scanputback
00003D9A  504F      6872          addq.w    #8,A7
00003D9C  6000 0342 6873          bra       vsscanf_139
                    6874   vsscanf_40:
00003DA0  0C83 0000 6875          cmp.l     #99,D3
00003DA4  0063      
00003DA6  6600 008E 6876          bne       vsscanf_60
00003DAA  4A86      6877          tst.l     D6
00003DAC  660A      6878          bne.s     vsscanf_62
00003DAE  206E 0010 6879          move.l    16(A6),A0
00003DB2  58AE 0010 6880          addq.l    #4,16(A6)
00003DB6  2E10      6881          move.l    (A0),D7
                    6882   vsscanf_62:
00003DB8  2F05      6883          move.l    D5,-(A7)
00003DBA  4E93      6884          jsr       (A3)
00003DBC  584F      6885          addq.w    #4,A7
00003DBE  2400      6886          move.l    D0,D2
00003DC0  52AE FFE4 6887          addq.l    #1,-28(A6)
00003DC4  200A      6888          move.l    A2,D0
00003DC6  0C80 0000 6889          cmp.l     #32767,D0
00003DCA  7FFF      
00003DCC  6604      6890          bne.s     vsscanf_64
00003DCE  347C 0001 6891          move.w    #1,A2
                    6892   vsscanf_64:
00003DD2  0C82 FFFF 6893          cmp.l     #-1,D2
00003DD6  FFFF      
00003DD8  6606      6894          bne.s     vsscanf_66
00003DDA  4A86      6895          tst.l     D6
00003DDC  6602      6896          bne.s     vsscanf_66
00003DDE  5384      6897          subq.l    #1,D4
                    6898   vsscanf_66:
00003DE0  200A      6899          move.l    A2,D0
00003DE2  534A      6900          subq.w    #1,A2
00003DE4  4A80      6901          tst.l     D0
00003DE6  6720      6902          beq.s     vsscanf_70
00003DE8  0C82 FFFF 6903          cmp.l     #-1,D2
00003DEC  FFFF      
00003DEE  6718      6904          beq.s     vsscanf_70
00003DF0  4A86      6905          tst.l     D6
00003DF2  6606      6906          bne.s     vsscanf_71
00003DF4  2047      6907          move.l    D7,A0
00003DF6  5287      6908          addq.l    #1,D7
00003DF8  1082      6909          move.b    D2,(A0)
                    6910   vsscanf_71:
00003DFA  2F05      6911          move.l    D5,-(A7)
00003DFC  4E93      6912          jsr       (A3)
00003DFE  584F      6913          addq.w    #4,A7
00003E00  2400      6914          move.l    D0,D2
00003E02  52AE FFE4 6915          addq.l    #1,-28(A6)
00003E06  60D8      6916          bra       vsscanf_66
                    6917   vsscanf_70:
00003E08  0C82 FFFF 6918          cmp.l     #-1,D2
00003E0C  FFFF      
00003E0E  660E      6919          bne.s     vsscanf_73
00003E10  4A84      6920          tst.l     D4
00003E12  6704      6921          beq.s     vsscanf_75
00003E14  2004      6922          move.l    D4,D0
00003E16  6002      6923          bra.s     vsscanf_76
                    6924   vsscanf_75:
00003E18  70FF      6925          moveq     #-1,D0
                    6926   vsscanf_76:
00003E1A  6000 02CA 6927          bra       vsscanf_15
                    6928   vsscanf_73:
00003E1E  4A86      6929          tst.l     D6
00003E20  6602      6930          bne.s     vsscanf_77
00003E22  5284      6931          addq.l    #1,D4
                    6932   vsscanf_77:
00003E24  53AE FFE4 6933          subq.l    #1,-28(A6)
00003E28  2F02      6934          move.l    D2,-(A7)
00003E2A  2F05      6935          move.l    D5,-(A7)
00003E2C  6100 FA98 6936          bsr       @vsscanf_scanputback
00003E30  504F      6937          addq.w    #8,A7
00003E32  6000 02AC 6938          bra       vsscanf_139
                    6939   vsscanf_60:
00003E36  0C83 0000 6940          cmp.l     #105,D3
00003E3A  0069      
00003E3C  6600 0060 6941          bne       vsscanf_82
00003E40  486E FFE4 6942          pea       -28(A6)
00003E44  2F05      6943          move.l    D5,-(A7)
00003E46  6100 FAE0 6944          bsr       @vsscanf_scanspace
00003E4A  504F      6945          addq.w    #8,A7
00003E4C  2400      6946          move.l    D0,D2
00003E4E  0C82 0000 6947          cmp.l     #48,D2
00003E52  0030      
00003E54  6600 0038 6948          bne       vsscanf_81
00003E58  387C 0001 6949          move.w    #1,A4
00003E5C  2F05      6950          move.l    D5,-(A7)
00003E5E  4E93      6951          jsr       (A3)
00003E60  584F      6952          addq.w    #4,A7
00003E62  2400      6953          move.l    D0,D2
00003E64  2F02      6954          move.l    D2,-(A7)
00003E66  6100 F936 6955          bsr       _tolower
00003E6A  584F      6956          addq.w    #4,A7
00003E6C  0C80 0000 6957          cmp.l     #120,D0
00003E70  0078      
00003E72  6604      6958          bne.s     vsscanf_83
00003E74  7678      6959          moveq     #120,D3
00003E76  6010      6960          bra.s     vsscanf_84
                    6961   vsscanf_83:
00003E78  53AE FFE4 6962          subq.l    #1,-28(A6)
00003E7C  2F02      6963          move.l    D2,-(A7)
00003E7E  2F05      6964          move.l    D5,-(A7)
00003E80  6100 FA44 6965          bsr       @vsscanf_scanputback
00003E84  504F      6966          addq.w    #8,A7
00003E86  766F      6967          moveq     #111,D3
                    6968   vsscanf_84:
00003E88  52AE FFE4 6969          addq.l    #1,-28(A6)
00003E8C  6010      6970          bra.s     vsscanf_82
                    6971   vsscanf_81:
00003E8E  53AE FFE4 6972          subq.l    #1,-28(A6)
00003E92  2F02      6973          move.l    D2,-(A7)
00003E94  2F05      6974          move.l    D5,-(A7)
00003E96  6100 FA2E 6975          bsr       @vsscanf_scanputback
00003E9A  504F      6976          addq.w    #8,A7
00003E9C  7664      6977          moveq     #100,D3
                    6978   vsscanf_82:
00003E9E  0C83 0000 6979          cmp.l     #100,D3
00003EA2  0064      
00003EA4  671A      6980          beq.s     vsscanf_87
00003EA6  0C83 0000 6981          cmp.l     #117,D3
00003EAA  0075      
00003EAC  6712      6982          beq.s     vsscanf_87
00003EAE  0C83 0000 6983          cmp.l     #120,D3
00003EB2  0078      
00003EB4  670A      6984          beq.s     vsscanf_87
00003EB6  0C83 0000 6985          cmp.l     #111,D3
00003EBA  006F      
00003EBC  6600 01A4 6986          bne       vsscanf_85
                    6987   vsscanf_87:
00003EC0  486E FFE4 6988          pea       -28(A6)
00003EC4  2F05      6989          move.l    D5,-(A7)
00003EC6  6100 FA60 6990          bsr       @vsscanf_scanspace
00003ECA  504F      6991          addq.w    #8,A7
00003ECC  2400      6992          move.l    D0,D2
00003ECE  2D7C 0000 6993          move.l    #10,-4(A6)
00003ED2  000A FFFC 
00003ED6  0C83 0000 6994          cmp.l     #120,D3
00003EDA  0078      
00003EDC  6608      6995          bne.s     vsscanf_88
00003EDE  2D7C 0000 6996          move.l    #16,-4(A6)
00003EE2  0010 FFFC 
                    6997   vsscanf_88:
00003EE6  0C83 0000 6998          cmp.l     #111,D3
00003EEA  006F      
00003EEC  6608      6999          bne.s     vsscanf_90
00003EEE  2D7C 0000 7000          move.l    #8,-4(A6)
00003EF2  0008 FFFC 
                    7001   vsscanf_90:
00003EF6  4A86      7002          tst.l     D6
00003EF8  660A      7003          bne.s     vsscanf_92
00003EFA  206E 0010 7004          move.l    16(A6),A0
00003EFE  58AE 0010 7005          addq.l    #4,16(A6)
00003F02  2E10      7006          move.l    (A0),D7
                    7007   vsscanf_92:
00003F04  42AE FFE0 7008          clr.l     -32(A6)
00003F08  52AE FFE4 7009          addq.l    #1,-28(A6)
00003F0C  0C83 0000 7010          cmp.l     #117,D3
00003F10  0075      
00003F12  6720      7011          beq.s     vsscanf_94
00003F14  0C82 0000 7012          cmp.l     #45,D2
00003F18  002D      
00003F1A  6618      7013          bne.s     vsscanf_94
00003F1C  2F05      7014          move.l    D5,-(A7)
00003F1E  4E93      7015          jsr       (A3)
00003F20  584F      7016          addq.w    #4,A7
00003F22  2400      7017          move.l    D0,D2
00003F24  52AE FFE4 7018          addq.l    #1,-28(A6)
00003F28  2D7C 0000 7019          move.l    #1,-32(A6)
00003F2C  0001 FFE0 
00003F30  387C 0001 7020          move.w    #1,A4
                    7021   vsscanf_94:
00003F34  3A7C 0000 7022          move.w    #0,A5
00003F38  0C82 FFFF 7023          cmp.l     #-1,D2
00003F3C  FFFF      
00003F3E  660E      7024          bne.s     vsscanf_96
00003F40  4A84      7025          tst.l     D4
00003F42  6704      7026          beq.s     vsscanf_98
00003F44  2004      7027          move.l    D4,D0
00003F46  6002      7028          bra.s     vsscanf_99
                    7029   vsscanf_98:
00003F48  70FF      7030          moveq     #-1,D0
                    7031   vsscanf_99:
00003F4A  6000 019A 7032          bra       vsscanf_15
                    7033   vsscanf_96:
00003F4E  200A      7034          move.l    A2,D0
00003F50  534A      7035          subq.w    #1,A2
00003F52  4A80      7036          tst.l     D0
00003F54  6700 0090 7037          beq       vsscanf_102
00003F58  0C83 0000 7038          cmp.l     #120,D3
00003F5C  0078      
00003F5E  6620      7039          bne.s     vsscanf_104
00003F60  2F02      7040          move.l    D2,-(A7)
00003F62  6100 F8C8 7041          bsr       _toupper
00003F66  584F      7042          addq.w    #4,A7
00003F68  0C80 0000 7043          cmp.l     #65,D0
00003F6C  0041      
00003F6E  6D10      7044          blt.s     vsscanf_104
00003F70  2F02      7045          move.l    D2,-(A7)
00003F72  6100 F8B8 7046          bsr       _toupper
00003F76  584F      7047          addq.w    #4,A7
00003F78  0C80 0000 7048          cmp.l     #70,D0
00003F7C  0046      
00003F7E  6F14      7049          ble.s     vsscanf_103
                    7050   vsscanf_104:
00003F80  2042      7051          move.l    D2,A0
00003F82  43F9 0000 7052          lea       __ctype,A1
00003F86  6096      
00003F88  1030 9801 7053          move.b    1(A0,A1.L),D0
00003F8C  C03C 0004 7054          and.b     #4,D0
00003F90  6700 0054 7055          beq       vsscanf_102
                    7056   vsscanf_103:
00003F94  2042      7057          move.l    D2,A0
00003F96  43F9 0000 7058          lea       __ctype,A1
00003F9A  6096      
00003F9C  1030 9801 7059          move.b    1(A0,A1.L),D0
00003FA0  C03C 0004 7060          and.b     #4,D0
00003FA4  6614      7061          bne.s     vsscanf_105
00003FA6  70F9      7062          moveq     #-7,D0
00003FA8  2F00      7063          move.l    D0,-(A7)
00003FAA  2F02      7064          move.l    D2,-(A7)
00003FAC  6100 F87E 7065          bsr       _toupper
00003FB0  584F      7066          addq.w    #4,A7
00003FB2  2200      7067          move.l    D0,D1
00003FB4  201F      7068          move.l    (A7)+,D0
00003FB6  D081      7069          add.l     D1,D0
00003FB8  2400      7070          move.l    D0,D2
                    7071   vsscanf_105:
00003FBA  2F0D      7072          move.l    A5,-(A7)
00003FBC  2F2E FFFC 7073          move.l    -4(A6),-(A7)
00003FC0  6100 0884 7074          bsr       LMUL
00003FC4  2017      7075          move.l    (A7),D0
00003FC6  504F      7076          addq.w    #8,A7
00003FC8  D082      7077          add.l     D2,D0
00003FCA  0480 0000 7078          sub.l     #48,D0
00003FCE  0030      
00003FD0  2A40      7079          move.l    D0,A5
00003FD2  2F05      7080          move.l    D5,-(A7)
00003FD4  4E93      7081          jsr       (A3)
00003FD6  584F      7082          addq.w    #4,A7
00003FD8  2400      7083          move.l    D0,D2
00003FDA  52AE FFE4 7084          addq.l    #1,-28(A6)
00003FDE  387C 0001 7085          move.w    #1,A4
00003FE2  6000 FF6A 7086          bra       vsscanf_96
                    7087   vsscanf_102:
00003FE6  0C82 FFFF 7088          cmp.l     #-1,D2
00003FEA  FFFF      
00003FEC  671A      7089          beq.s     vsscanf_107
00003FEE  2F02      7090          move.l    D2,-(A7)
00003FF0  2F05      7091          move.l    D5,-(A7)
00003FF2  6100 F8D2 7092          bsr       @vsscanf_scanputback
00003FF6  504F      7093          addq.w    #8,A7
00003FF8  53AE FFE4 7094          subq.l    #1,-28(A6)
00003FFC  200C      7095          move.l    A4,D0
00003FFE  6606      7096          bne.s     vsscanf_109
00004000  2004      7097          move.l    D4,D0
00004002  6000 00E2 7098          bra       vsscanf_15
                    7099   vsscanf_109:
00004006  6012      7100          bra.s     vsscanf_111
                    7101   vsscanf_107:
00004008  200C      7102          move.l    A4,D0
0000400A  660E      7103          bne.s     vsscanf_111
0000400C  4A84      7104          tst.l     D4
0000400E  6704      7105          beq.s     vsscanf_113
00004010  2004      7106          move.l    D4,D0
00004012  6002      7107          bra.s     vsscanf_114
                    7108   vsscanf_113:
00004014  70FF      7109          moveq     #-1,D0
                    7110   vsscanf_114:
00004016  6000 00CE 7111          bra       vsscanf_15
                    7112   vsscanf_111:
0000401A  4AAE FFE0 7113          tst.l     -32(A6)
0000401E  6706      7114          beq.s     vsscanf_115
00004020  200D      7115          move.l    A5,D0
00004022  4480      7116          neg.l     D0
00004024  2A40      7117          move.l    D0,A5
                    7118   vsscanf_115:
00004026  4A86      7119          tst.l     D6
00004028  661E      7120          bne.s     vsscanf_117
0000402A  4AAE FFE8 7121          tst.l     -24(A6)
0000402E  6706      7122          beq.s     vsscanf_119
00004030  2047      7123          move.l    D7,A0
00004032  208D      7124          move.l    A5,(A0)
00004034  6010      7125          bra.s     vsscanf_122
                    7126   vsscanf_119:
00004036  4AAE FFEC 7127          tst.l     -20(A6)
0000403A  6706      7128          beq.s     vsscanf_121
0000403C  2047      7129          move.l    D7,A0
0000403E  308D      7130          move.w    A5,(A0)
00004040  6004      7131          bra.s     vsscanf_122
                    7132   vsscanf_121:
00004042  2047      7133          move.l    D7,A0
00004044  208D      7134          move.l    A5,(A0)
                    7135   vsscanf_122:
00004046  5284      7136          addq.l    #1,D4
                    7137   vsscanf_117:
00004048  0C82 FFFF 7138          cmp.l     #-1,D2
0000404C  FFFF      
0000404E  660E      7139          bne.s     vsscanf_123
00004050  4A84      7140          tst.l     D4
00004052  6704      7141          beq.s     vsscanf_125
00004054  2004      7142          move.l    D4,D0
00004056  6002      7143          bra.s     vsscanf_126
                    7144   vsscanf_125:
00004058  70FF      7145          moveq     #-1,D0
                    7146   vsscanf_126:
0000405A  6000 008A 7147          bra       vsscanf_15
                    7148   vsscanf_123:
0000405E  6000 0080 7149          bra       vsscanf_139
                    7150   vsscanf_85:
00004062  0C83 0000 7151          cmp.l     #37,D3
00004066  0025      
00004068  6600 0040 7152          bne       vsscanf_127
0000406C  2F05      7153          move.l    D5,-(A7)
0000406E  4E93      7154          jsr       (A3)
00004070  584F      7155          addq.w    #4,A7
00004072  2400      7156          move.l    D0,D2
00004074  0C82 FFFF 7157          cmp.l     #-1,D2
00004078  FFFF      
0000407A  660E      7158          bne.s     vsscanf_129
0000407C  4A84      7159          tst.l     D4
0000407E  6704      7160          beq.s     vsscanf_131
00004080  2004      7161          move.l    D4,D0
00004082  6002      7162          bra.s     vsscanf_132
                    7163   vsscanf_131:
00004084  70FF      7164          moveq     #-1,D0
                    7165   vsscanf_132:
00004086  6000 005E 7166          bra       vsscanf_15
                    7167   vsscanf_129:
0000408A  52AE FFE4 7168          addq.l    #1,-28(A6)
0000408E  B483      7169          cmp.l     D3,D2
00004090  6714      7170          beq.s     vsscanf_133
00004092  2F02      7171          move.l    D2,-(A7)
00004094  2F05      7172          move.l    D5,-(A7)
00004096  6100 F82E 7173          bsr       @vsscanf_scanputback
0000409A  504F      7174          addq.w    #8,A7
0000409C  53AE FFE4 7175          subq.l    #1,-28(A6)
000040A0  2004      7176          move.l    D4,D0
000040A2  6000 0042 7177          bra       vsscanf_15
                    7178   vsscanf_133:
000040A6  6000 0038 7179          bra       vsscanf_139
                    7180   vsscanf_127:
000040AA  2F05      7181          move.l    D5,-(A7)
000040AC  4E93      7182          jsr       (A3)
000040AE  584F      7183          addq.w    #4,A7
000040B0  2400      7184          move.l    D0,D2
000040B2  52AE FFE4 7185          addq.l    #1,-28(A6)
000040B6  0C82 FFFF 7186          cmp.l     #-1,D2
000040BA  FFFF      
000040BC  660C      7187          bne.s     vsscanf_135
000040BE  4A84      7188          tst.l     D4
000040C0  6704      7189          beq.s     vsscanf_137
000040C2  2004      7190          move.l    D4,D0
000040C4  6002      7191          bra.s     vsscanf_138
                    7192   vsscanf_137:
000040C6  70FF      7193          moveq     #-1,D0
                    7194   vsscanf_138:
000040C8  601C      7195          bra.s     vsscanf_15
                    7196   vsscanf_135:
000040CA  B483      7197          cmp.l     D3,D2
000040CC  6712      7198          beq.s     vsscanf_139
000040CE  2F02      7199          move.l    D2,-(A7)
000040D0  2F05      7200          move.l    D5,-(A7)
000040D2  6100 F7F2 7201          bsr       @vsscanf_scanputback
000040D6  504F      7202          addq.w    #8,A7
000040D8  53AE FFE4 7203          subq.l    #1,-28(A6)
000040DC  2004      7204          move.l    D4,D0
000040DE  6006      7205          bra.s     vsscanf_15
                    7206   vsscanf_139:
000040E0  6000 FA44 7207          bra       vsscanf_3
                    7208   vsscanf_5:
000040E4  2004      7209          move.l    D4,D0
                    7210   vsscanf_15:
000040E6  4CDF 3CFC 7211          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000040EA  4E5E      7212          unlk      A6
000040EC  4E75      7213          rts
                    7214   _printf:
000040EE  4E56 FFFC 7215          link      A6,#-4
000040F2  48E7 2000 7216          movem.l   D2,-(A7)
000040F6  41EE 0008 7217          lea       8(A6),A0
000040FA  5848      7218          addq.w    #4,A0
000040FC  2408      7219          move.l    A0,D2
000040FE  2F02      7220          move.l    D2,-(A7)
00004100  2F2E 0008 7221          move.l    8(A6),-(A7)
00004104  42A7      7222          clr.l     -(A7)
00004106  6100 00CA 7223          bsr       _vsprintf
0000410A  DEFC 000C 7224          add.w     #12,A7
0000410E  2D40 FFFC 7225          move.l    D0,-4(A6)
00004112  4282      7226          clr.l     D2
00004114  202E FFFC 7227          move.l    -4(A6),D0
00004118  4CDF 0004 7228          movem.l   (A7)+,D2
0000411C  4E5E      7229          unlk      A6
0000411E  4E75      7230          rts
                    7231   @vsprintf_copy:
00004120  4E56 0000 7232          link      A6,#0
00004124  206E 0008 7233          move.l    8(A6),A0
00004128  4A90      7234          tst.l     (A0)
0000412A  6710      7235          beq.s     @vsprintf_copy_1
0000412C  202E 000C 7236          move.l    12(A6),D0
00004130  206E 0008 7237          move.l    8(A6),A0
00004134  2250      7238          move.l    (A0),A1
00004136  5290      7239          addq.l    #1,(A0)
00004138  1280      7240          move.b    D0,(A1)
0000413A  600A      7241          bra.s     @vsprintf_copy_2
                    7242   @vsprintf_copy_1:
0000413C  2F2E 000C 7243          move.l    12(A6),-(A7)
00004140  6100 F5F0 7244          bsr       _putch
00004144  584F      7245          addq.w    #4,A7
                    7246   @vsprintf_copy_2:
00004146  4E5E      7247          unlk      A6
00004148  4E75      7248          rts
                    7249   @vsprintf_getval:
0000414A  4E56 0000 7250          link      A6,#0
0000414E  48E7 3000 7251          movem.l   D2/D3,-(A7)
00004152  242E 0008 7252          move.l    8(A6),D2
00004156  4283      7253          clr.l     D3
00004158  2042      7254          move.l    D2,A0
0000415A  2050      7255          move.l    (A0),A0
0000415C  1010      7256          move.b    (A0),D0
0000415E  4880      7257          ext.w     D0
00004160  48C0      7258          ext.l     D0
00004162  0C80 0000 7259          cmp.l     #42,D0
00004166  002A      
00004168  6612      7260          bne.s     @vsprintf_getval_1
0000416A  206E 000C 7261          move.l    12(A6),A0
0000416E  2250      7262          move.l    (A0),A1
00004170  5890      7263          addq.l    #4,(A0)
00004172  2611      7264          move.l    (A1),D3
00004174  2042      7265          move.l    D2,A0
00004176  5290      7266          addq.l    #1,(A0)
00004178  6000 004E 7267          bra       @vsprintf_getval_5
                    7268   @vsprintf_getval_1:
0000417C  2042      7269          move.l    D2,A0
0000417E  2050      7270          move.l    (A0),A0
00004180  1010      7271          move.b    (A0),D0
00004182  4880      7272          ext.w     D0
00004184  48C0      7273          ext.l     D0
00004186  0C80 0000 7274          cmp.l     #48,D0
0000418A  0030      
0000418C  6D00 003A 7275          blt       @vsprintf_getval_5
00004190  2042      7276          move.l    D2,A0
00004192  2050      7277          move.l    (A0),A0
00004194  1010      7278          move.b    (A0),D0
00004196  4880      7279          ext.w     D0
00004198  48C0      7280          ext.l     D0
0000419A  0C80 0000 7281          cmp.l     #57,D0
0000419E  0039      
000041A0  6E26      7282          bgt.s     @vsprintf_getval_5
000041A2  2F03      7283          move.l    D3,-(A7)
000041A4  4878 000A 7284          pea       10
000041A8  6100 069C 7285          bsr       LMUL
000041AC  2017      7286          move.l    (A7),D0
000041AE  504F      7287          addq.w    #8,A7
000041B0  2042      7288          move.l    D2,A0
000041B2  2250      7289          move.l    (A0),A1
000041B4  5290      7290          addq.l    #1,(A0)
000041B6  1211      7291          move.b    (A1),D1
000041B8  4881      7292          ext.w     D1
000041BA  48C1      7293          ext.l     D1
000041BC  D081      7294          add.l     D1,D0
000041BE  0480 0000 7295          sub.l     #48,D0
000041C2  0030      
000041C4  2600      7296          move.l    D0,D3
000041C6  60B4      7297          bra       @vsprintf_getval_1
                    7298   @vsprintf_getval_5:
000041C8  2003      7299          move.l    D3,D0
000041CA  4CDF 000C 7300          movem.l   (A7)+,D2/D3
000041CE  4E5E      7301          unlk      A6
000041D0  4E75      7302          rts
                    7303   _vsprintf:
000041D2  4E56 FFCC 7304          link      A6,#-52
000041D6  48E7 3F3C 7305          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000041DA  45EE 0008 7306          lea       8(A6),A2
000041DE  47F8 4120 7307          lea       @vsprintf_copy,A3
000041E2  49F9 0000 7308          lea       _ultoa,A4
000041E6  4A50      
000041E8  4286      7309          clr.l     D6
                    7310   vsprintf_1:
000041EA  206E 000C 7311          move.l    12(A6),A0
000041EE  4A10      7312          tst.b     (A0)
000041F0  6700 0624 7313          beq       vsprintf_3
000041F4  206E 000C 7314          move.l    12(A6),A0
000041F8  1010      7315          move.b    (A0),D0
000041FA  4880      7316          ext.w     D0
000041FC  48C0      7317          ext.l     D0
000041FE  0C80 0000 7318          cmp.l     #37,D0
00004202  0025      
00004204  671C      7319          beq.s     vsprintf_4
00004206  206E 000C 7320          move.l    12(A6),A0
0000420A  52AE 000C 7321          addq.l    #1,12(A6)
0000420E  1210      7322          move.b    (A0),D1
00004210  4881      7323          ext.w     D1
00004212  48C1      7324          ext.l     D1
00004214  2F01      7325          move.l    D1,-(A7)
00004216  2F0A      7326          move.l    A2,-(A7)
00004218  4E93      7327          jsr       (A3)
0000421A  504F      7328          addq.w    #8,A7
0000421C  5286      7329          addq.l    #1,D6
0000421E  6000 05F2 7330          bra       vsprintf_2
                    7331   vsprintf_4:
00004222  52AE 000C 7332          addq.l    #1,12(A6)
00004226  422E FFD3 7333          clr.b     -45(A6)
0000422A  422E FFD2 7334          clr.b     -46(A6)
0000422E  422E FFD0 7335          clr.b     -48(A6)
00004232  422E FFCF 7336          clr.b     -49(A6)
00004236  422E FFCE 7337          clr.b     -50(A6)
0000423A  422E FFCD 7338          clr.b     -51(A6)
0000423E  42AE FFFC 7339          clr.l     -4(A6)
00004242  7AFF      7340          moveq     #-1,D5
00004244  41EE FFDC 7341          lea       -36(A6),A0
00004248  2608      7342          move.l    A0,D3
0000424A  2408      7343          move.l    A0,D2
                    7344   vsprintf_6:
0000424C  206E 000C 7345          move.l    12(A6),A0
00004250  1010      7346          move.b    (A0),D0
00004252  4880      7347          ext.w     D0
00004254  48C0      7348          ext.l     D0
00004256  0C80 0000 7349          cmp.l     #43,D0
0000425A  002B      
0000425C  6730      7350          beq.s     vsprintf_12
0000425E  6E18      7351          bgt.s     vsprintf_15
00004260  0C80 0000 7352          cmp.l     #35,D0
00004264  0023      
00004266  6700 003E 7353          beq       vsprintf_14
0000426A  6E00 0046 7354          bgt       vsprintf_9
0000426E  0C80 0000 7355          cmp.l     #32,D0
00004272  0020      
00004274  6724      7356          beq.s     vsprintf_13
00004276  603A      7357          bra.s     vsprintf_9
                    7358   vsprintf_15:
00004278  0C80 0000 7359          cmp.l     #45,D0
0000427C  002D      
0000427E  6702      7360          beq.s     vsprintf_11
00004280  6030      7361          bra.s     vsprintf_9
                    7362   vsprintf_11:
00004282  1D7C 0001 7363          move.b    #1,-51(A6)
00004286  FFCD      
00004288  52AE 000C 7364          addq.l    #1,12(A6)
0000428C  6026      7365          bra.s     vsprintf_7
                    7366   vsprintf_12:
0000428E  1D7C 0001 7367          move.b    #1,-50(A6)
00004292  FFCE      
00004294  52AE 000C 7368          addq.l    #1,12(A6)
00004298  601A      7369          bra.s     vsprintf_7
                    7370   vsprintf_13:
0000429A  1D7C 0001 7371          move.b    #1,-49(A6)
0000429E  FFCF      
000042A0  52AE 000C 7372          addq.l    #1,12(A6)
000042A4  600E      7373          bra.s     vsprintf_7
                    7374   vsprintf_14:
000042A6  1D7C 0001 7375          move.b    #1,-48(A6)
000042AA  FFD0      
000042AC  52AE 000C 7376          addq.l    #1,12(A6)
000042B0  6002      7377          bra.s     vsprintf_7
                    7378   vsprintf_9:
000042B2  6002      7379          bra.s     vsprintf_8
                    7380   vsprintf_7:
000042B4  6096      7381          bra       vsprintf_6
                    7382   vsprintf_8:
000042B6  206E 000C 7383          move.l    12(A6),A0
000042BA  1010      7384          move.b    (A0),D0
000042BC  4880      7385          ext.w     D0
000042BE  48C0      7386          ext.l     D0
000042C0  0C80 0000 7387          cmp.l     #48,D0
000042C4  0030      
000042C6  660A      7388          bne.s     vsprintf_16
000042C8  52AE 000C 7389          addq.l    #1,12(A6)
000042CC  1D7C 0001 7390          move.b    #1,-46(A6)
000042D0  FFD2      
                    7391   vsprintf_16:
000042D2  486E 0010 7392          pea       16(A6)
000042D6  486E 000C 7393          pea       12(A6)
000042DA  6100 FE6E 7394          bsr       @vsprintf_getval
000042DE  504F      7395          addq.w    #8,A7
000042E0  2A40      7396          move.l    D0,A5
000042E2  206E 000C 7397          move.l    12(A6),A0
000042E6  1010      7398          move.b    (A0),D0
000042E8  4880      7399          ext.w     D0
000042EA  48C0      7400          ext.l     D0
000042EC  0C80 0000 7401          cmp.l     #46,D0
000042F0  002E      
000042F2  6614      7402          bne.s     vsprintf_18
000042F4  52AE 000C 7403          addq.l    #1,12(A6)
000042F8  486E 0010 7404          pea       16(A6)
000042FC  486E 000C 7405          pea       12(A6)
00004300  6100 FE48 7406          bsr       @vsprintf_getval
00004304  504F      7407          addq.w    #8,A7
00004306  2A00      7408          move.l    D0,D5
                    7409   vsprintf_18:
00004308  206E 000C 7410          move.l    12(A6),A0
0000430C  1010      7411          move.b    (A0),D0
0000430E  4880      7412          ext.w     D0
00004310  48C0      7413          ext.l     D0
00004312  0C80 0000 7414          cmp.l     #108,D0
00004316  006C      
00004318  660A      7415          bne.s     vsprintf_20
0000431A  52AE 000C 7416          addq.l    #1,12(A6)
0000431E  1D7C 0001 7417          move.b    #1,-45(A6)
00004322  FFD3      
                    7418   vsprintf_20:
00004324  206E 000C 7419          move.l    12(A6),A0
00004328  1010      7420          move.b    (A0),D0
0000432A  4880      7421          ext.w     D0
0000432C  48C0      7422          ext.l     D0
0000432E  0C80 0000 7423          cmp.l     #111,D0
00004332  006F      
00004334  6700 00D4 7424          beq       vsprintf_27
00004338  6E34      7425          bgt.s     vsprintf_33
0000433A  0C80 0000 7426          cmp.l     #100,D0
0000433E  0064      
00004340  6700 0054 7427          beq       vsprintf_24
00004344  6E1C      7428          bgt.s     vsprintf_34
00004346  0C80 0000 7429          cmp.l     #99,D0
0000434A  0063      
0000434C  6700 012C 7430          beq       vsprintf_30
00004350  6E00 016A 7431          bgt       vsprintf_22
00004354  0C80 0000 7432          cmp.l     #88,D0
00004358  0058      
0000435A  6700 00E6 7433          beq       vsprintf_28
0000435E  6000 015C 7434          bra       vsprintf_22
                    7435   vsprintf_34:
00004362  0C80 0000 7436          cmp.l     #105,D0
00004366  0069      
00004368  672C      7437          beq.s     vsprintf_24
0000436A  6000 0150 7438          bra       vsprintf_22
                    7439   vsprintf_33:
0000436E  0C80 0000 7440          cmp.l     #117,D0
00004372  0075      
00004374  6700 005C 7441          beq       vsprintf_26
00004378  6E0E      7442          bgt.s     vsprintf_35
0000437A  0C80 0000 7443          cmp.l     #115,D0
0000437E  0073      
00004380  6700 011C 7444          beq       vsprintf_31
00004384  6000 0136 7445          bra       vsprintf_22
                    7446   vsprintf_35:
00004388  0C80 0000 7447          cmp.l     #120,D0
0000438C  0078      
0000438E  6700 00B2 7448          beq       vsprintf_28
00004392  6000 0128 7449          bra       vsprintf_22
                    7450   vsprintf_24:
00004396  4A2E FFD3 7451          tst.b     -45(A6)
0000439A  671A      7452          beq.s     vsprintf_36
0000439C  4878 000A 7453          pea       10
000043A0  2F03      7454          move.l    D3,-(A7)
000043A2  206E 0010 7455          move.l    16(A6),A0
000043A6  58AE 0010 7456          addq.l    #4,16(A6)
000043AA  2F10      7457          move.l    (A0),-(A7)
000043AC  6100 061E 7458          bsr       _ltoa
000043B0  DEFC 000C 7459          add.w     #12,A7
000043B4  6018      7460          bra.s     vsprintf_37
                    7461   vsprintf_36:
000043B6  4878 000A 7462          pea       10
000043BA  2F03      7463          move.l    D3,-(A7)
000043BC  206E 0010 7464          move.l    16(A6),A0
000043C0  58AE 0010 7465          addq.l    #4,16(A6)
000043C4  2F10      7466          move.l    (A0),-(A7)
000043C6  6100 0604 7467          bsr       _ltoa
000043CA  DEFC 000C 7468          add.w     #12,A7
                    7469   vsprintf_37:
000043CE  6000 00FA 7470          bra       vsprintf_23
                    7471   vsprintf_26:
000043D2  4A2E FFD3 7472          tst.b     -45(A6)
000043D6  6718      7473          beq.s     vsprintf_38
000043D8  4878 000A 7474          pea       10
000043DC  2F03      7475          move.l    D3,-(A7)
000043DE  206E 0010 7476          move.l    16(A6),A0
000043E2  58AE 0010 7477          addq.l    #4,16(A6)
000043E6  2F10      7478          move.l    (A0),-(A7)
000043E8  4E94      7479          jsr       (A4)
000043EA  DEFC 000C 7480          add.w     #12,A7
000043EE  6016      7481          bra.s     vsprintf_39
                    7482   vsprintf_38:
000043F0  4878 000A 7483          pea       10
000043F4  2F03      7484          move.l    D3,-(A7)
000043F6  206E 0010 7485          move.l    16(A6),A0
000043FA  58AE 0010 7486          addq.l    #4,16(A6)
000043FE  2F10      7487          move.l    (A0),-(A7)
00004400  4E94      7488          jsr       (A4)
00004402  DEFC 000C 7489          add.w     #12,A7
                    7490   vsprintf_39:
00004406  6000 00C2 7491          bra       vsprintf_23
                    7492   vsprintf_27:
0000440A  4A2E FFD3 7493          tst.b     -45(A6)
0000440E  6718      7494          beq.s     vsprintf_40
00004410  4878 0008 7495          pea       8
00004414  2F03      7496          move.l    D3,-(A7)
00004416  206E 0010 7497          move.l    16(A6),A0
0000441A  58AE 0010 7498          addq.l    #4,16(A6)
0000441E  2F10      7499          move.l    (A0),-(A7)
00004420  4E94      7500          jsr       (A4)
00004422  DEFC 000C 7501          add.w     #12,A7
00004426  6016      7502          bra.s     vsprintf_41
                    7503   vsprintf_40:
00004428  4878 0008 7504          pea       8
0000442C  2F03      7505          move.l    D3,-(A7)
0000442E  206E 0010 7506          move.l    16(A6),A0
00004432  58AE 0010 7507          addq.l    #4,16(A6)
00004436  2F10      7508          move.l    (A0),-(A7)
00004438  4E94      7509          jsr       (A4)
0000443A  DEFC 000C 7510          add.w     #12,A7
                    7511   vsprintf_41:
0000443E  6000 008A 7512          bra       vsprintf_23
                    7513   vsprintf_28:
00004442  4A2E FFD3 7514          tst.b     -45(A6)
00004446  6718      7515          beq.s     vsprintf_42
00004448  4878 0010 7516          pea       16
0000444C  2F03      7517          move.l    D3,-(A7)
0000444E  206E 0010 7518          move.l    16(A6),A0
00004452  58AE 0010 7519          addq.l    #4,16(A6)
00004456  2F10      7520          move.l    (A0),-(A7)
00004458  4E94      7521          jsr       (A4)
0000445A  DEFC 000C 7522          add.w     #12,A7
0000445E  6016      7523          bra.s     vsprintf_43
                    7524   vsprintf_42:
00004460  4878 0010 7525          pea       16
00004464  2F03      7526          move.l    D3,-(A7)
00004466  206E 0010 7527          move.l    16(A6),A0
0000446A  58AE 0010 7528          addq.l    #4,16(A6)
0000446E  2F10      7529          move.l    (A0),-(A7)
00004470  4E94      7530          jsr       (A4)
00004472  DEFC 000C 7531          add.w     #12,A7
                    7532   vsprintf_43:
00004476  6000 0052 7533          bra       vsprintf_23
                    7534   vsprintf_30:
0000447A  206E 0010 7535          move.l    16(A6),A0
0000447E  58AE 0010 7536          addq.l    #4,16(A6)
00004482  2010      7537          move.l    (A0),D0
00004484  2042      7538          move.l    D2,A0
00004486  5282      7539          addq.l    #1,D2
00004488  1080      7540          move.b    D0,(A0)
0000448A  2042      7541          move.l    D2,A0
0000448C  4210      7542          clr.b     (A0)
0000448E  200D      7543          move.l    A5,D0
00004490  6704      7544          beq.s     vsprintf_44
00004492  200D      7545          move.l    A5,D0
00004494  6002      7546          bra.s     vsprintf_45
                    7547   vsprintf_44:
00004496  7001      7548          moveq     #1,D0
                    7549   vsprintf_45:
00004498  2A00      7550          move.l    D0,D5
0000449A  6000 002E 7551          bra       vsprintf_23
                    7552   vsprintf_31:
0000449E  206E 0010 7553          move.l    16(A6),A0
000044A2  58AE 0010 7554          addq.l    #4,16(A6)
000044A6  2610      7555          move.l    (A0),D3
000044A8  0C85 FFFF 7556          cmp.l     #-1,D5
000044AC  FFFF      
000044AE  660A      7557          bne.s     vsprintf_46
000044B0  2F03      7558          move.l    D3,-(A7)
000044B2  6100 05FE 7559          bsr       _strlen
000044B6  584F      7560          addq.w    #4,A7
000044B8  2A00      7561          move.l    D0,D5
                    7562   vsprintf_46:
000044BA  600E      7563          bra.s     vsprintf_23
                    7564   vsprintf_22:
000044BC  206E 000C 7565          move.l    12(A6),A0
000044C0  2242      7566          move.l    D2,A1
000044C2  5282      7567          addq.l    #1,D2
000044C4  1290      7568          move.b    (A0),(A1)
000044C6  2042      7569          move.l    D2,A0
000044C8  4210      7570          clr.b     (A0)
                    7571   vsprintf_23:
000044CA  2F03      7572          move.l    D3,-(A7)
000044CC  6100 05E4 7573          bsr       _strlen
000044D0  584F      7574          addq.w    #4,A7
000044D2  1800      7575          move.b    D0,D4
000044D4  206E 000C 7576          move.l    12(A6),A0
000044D8  1010      7577          move.b    (A0),D0
000044DA  4880      7578          ext.w     D0
000044DC  48C0      7579          ext.l     D0
000044DE  0C80 0000 7580          cmp.l     #115,D0
000044E2  0073      
000044E4  6618      7581          bne.s     vsprintf_48
000044E6  0C85 0000 7582          cmp.l     #0,D5
000044EA  0000      
000044EC  6D10      7583          blt.s     vsprintf_48
000044EE  4884      7584          ext.w     D4
000044F0  48C4      7585          ext.l     D4
000044F2  B885      7586          cmp.l     D5,D4
000044F4  6F04      7587          ble.s     vsprintf_50
000044F6  1005      7588          move.b    D5,D0
000044F8  6002      7589          bra.s     vsprintf_51
                    7590   vsprintf_50:
000044FA  1004      7591          move.b    D4,D0
                    7592   vsprintf_51:
000044FC  1800      7593          move.b    D0,D4
                    7594   vsprintf_48:
000044FE  206E 000C 7595          move.l    12(A6),A0
00004502  1010      7596          move.b    (A0),D0
00004504  4880      7597          ext.w     D0
00004506  48C0      7598          ext.l     D0
00004508  0C80 0000 7599          cmp.l     #88,D0
0000450C  0058      
0000450E  6600 0026 7600          bne       vsprintf_56
00004512  41EE FFDC 7601          lea       -36(A6),A0
00004516  2408      7602          move.l    A0,D2
                    7603   vsprintf_54:
00004518  2042      7604          move.l    D2,A0
0000451A  4A10      7605          tst.b     (A0)
0000451C  6718      7606          beq.s     vsprintf_56
0000451E  2042      7607          move.l    D2,A0
00004520  1210      7608          move.b    (A0),D1
00004522  4881      7609          ext.w     D1
00004524  48C1      7610          ext.l     D1
00004526  2F01      7611          move.l    D1,-(A7)
00004528  6100 F302 7612          bsr       _toupper
0000452C  584F      7613          addq.w    #4,A7
0000452E  2042      7614          move.l    D2,A0
00004530  1080      7615          move.b    D0,(A0)
00004532  5282      7616          addq.l    #1,D2
00004534  60E2      7617          bra       vsprintf_54
                    7618   vsprintf_56:
00004536  7E00      7619          moveq     #0,D7
00004538  41EE FFD4 7620          lea       -44(A6),A0
0000453C  2408      7621          move.l    A0,D2
0000453E  206E 000C 7622          move.l    12(A6),A0
00004542  1010      7623          move.b    (A0),D0
00004544  4880      7624          ext.w     D0
00004546  48C0      7625          ext.l     D0
00004548  0C80 0000 7626          cmp.l     #100,D0
0000454C  0064      
0000454E  6714      7627          beq.s     vsprintf_59
00004550  206E 000C 7628          move.l    12(A6),A0
00004554  1010      7629          move.b    (A0),D0
00004556  4880      7630          ext.w     D0
00004558  48C0      7631          ext.l     D0
0000455A  0C80 0000 7632          cmp.l     #105,D0
0000455E  0069      
00004560  6600 0076 7633          bne       vsprintf_65
                    7634   vsprintf_59:
00004564  4A2E FFCE 7635          tst.b     -50(A6)
00004568  6612      7636          bne.s     vsprintf_62
0000456A  2043      7637          move.l    D3,A0
0000456C  1010      7638          move.b    (A0),D0
0000456E  4880      7639          ext.w     D0
00004570  48C0      7640          ext.l     D0
00004572  0C80 0000 7641          cmp.l     #45,D0
00004576  002D      
00004578  6600 002E 7642          bne       vsprintf_60
                    7643   vsprintf_62:
0000457C  2043      7644          move.l    D3,A0
0000457E  1010      7645          move.b    (A0),D0
00004580  4880      7646          ext.w     D0
00004582  48C0      7647          ext.l     D0
00004584  0C80 0000 7648          cmp.l     #45,D0
00004588  002D      
0000458A  660E      7649          bne.s     vsprintf_63
0000458C  2043      7650          move.l    D3,A0
0000458E  5283      7651          addq.l    #1,D3
00004590  2242      7652          move.l    D2,A1
00004592  5282      7653          addq.l    #1,D2
00004594  1290      7654          move.b    (A0),(A1)
00004596  5304      7655          subq.b    #1,D4
00004598  6008      7656          bra.s     vsprintf_64
                    7657   vsprintf_63:
0000459A  2042      7658          move.l    D2,A0
0000459C  5282      7659          addq.l    #1,D2
0000459E  10BC 002B 7660          move.b    #43,(A0)
                    7661   vsprintf_64:
000045A2  5287      7662          addq.l    #1,D7
000045A4  6000 0032 7663          bra       vsprintf_65
                    7664   vsprintf_60:
000045A8  4A2E FFCF 7665          tst.b     -49(A6)
000045AC  6700 002A 7666          beq       vsprintf_65
000045B0  2043      7667          move.l    D3,A0
000045B2  1010      7668          move.b    (A0),D0
000045B4  4880      7669          ext.w     D0
000045B6  48C0      7670          ext.l     D0
000045B8  0C80 0000 7671          cmp.l     #45,D0
000045BC  002D      
000045BE  660E      7672          bne.s     vsprintf_67
000045C0  2043      7673          move.l    D3,A0
000045C2  5283      7674          addq.l    #1,D3
000045C4  2242      7675          move.l    D2,A1
000045C6  5282      7676          addq.l    #1,D2
000045C8  1290      7677          move.b    (A0),(A1)
000045CA  5304      7678          subq.b    #1,D4
000045CC  6008      7679          bra.s     vsprintf_68
                    7680   vsprintf_67:
000045CE  2042      7681          move.l    D2,A0
000045D0  5282      7682          addq.l    #1,D2
000045D2  10BC 0020 7683          move.b    #32,(A0)
                    7684   vsprintf_68:
000045D6  5287      7685          addq.l    #1,D7
                    7686   vsprintf_65:
000045D8  4A2E FFD0 7687          tst.b     -48(A6)
000045DC  6700 0066 7688          beq       vsprintf_77
000045E0  206E 000C 7689          move.l    12(A6),A0
000045E4  1010      7690          move.b    (A0),D0
000045E6  4880      7691          ext.w     D0
000045E8  48C0      7692          ext.l     D0
000045EA  0C80 0000 7693          cmp.l     #111,D0
000045EE  006F      
000045F0  671A      7694          beq.s     vsprintf_73
000045F2  6E0C      7695          bgt.s     vsprintf_76
000045F4  0C80 0000 7696          cmp.l     #88,D0
000045F8  0058      
000045FA  6710      7697          beq.s     vsprintf_73
000045FC  6000 0046 7698          bra       vsprintf_77
                    7699   vsprintf_76:
00004600  0C80 0000 7700          cmp.l     #120,D0
00004604  0078      
00004606  6704      7701          beq.s     vsprintf_73
00004608  6000 003A 7702          bra       vsprintf_77
                    7703   vsprintf_73:
0000460C  2042      7704          move.l    D2,A0
0000460E  5282      7705          addq.l    #1,D2
00004610  10BC 0030 7706          move.b    #48,(A0)
00004614  5287      7707          addq.l    #1,D7
00004616  206E 000C 7708          move.l    12(A6),A0
0000461A  1010      7709          move.b    (A0),D0
0000461C  4880      7710          ext.w     D0
0000461E  48C0      7711          ext.l     D0
00004620  0C80 0000 7712          cmp.l     #120,D0
00004624  0078      
00004626  6712      7713          beq.s     vsprintf_79
00004628  206E 000C 7714          move.l    12(A6),A0
0000462C  1010      7715          move.b    (A0),D0
0000462E  4880      7716          ext.w     D0
00004630  48C0      7717          ext.l     D0
00004632  0C80 0000 7718          cmp.l     #88,D0
00004636  0058      
00004638  660A      7719          bne.s     vsprintf_77
                    7720   vsprintf_79:
0000463A  2042      7721          move.l    D2,A0
0000463C  5282      7722          addq.l    #1,D2
0000463E  10BC 0078 7723          move.b    #120,(A0)
00004642  5287      7724          addq.l    #1,D7
                    7725   vsprintf_77:
00004644  2042      7726          move.l    D2,A0
00004646  4210      7727          clr.b     (A0)
00004648  206E 000C 7728          move.l    12(A6),A0
0000464C  1010      7729          move.b    (A0),D0
0000464E  4880      7730          ext.w     D0
00004650  48C0      7731          ext.l     D0
00004652  0C80 0000 7732          cmp.l     #105,D0
00004656  0069      
00004658  6700 0076 7733          beq       vsprintf_82
0000465C  6E42      7734          bgt.s     vsprintf_93
0000465E  0C80 0000 7735          cmp.l     #99,D0
00004662  0063      
00004664  6700 0084 7736          beq       vsprintf_96
00004668  6E1C      7737          bgt.s     vsprintf_94
0000466A  0C80 0000 7738          cmp.l     #88,D0
0000466E  0058      
00004670  6700 005E 7739          beq       vsprintf_82
00004674  6E00 0184 7740          bgt       vsprintf_80
00004678  0C80 0000 7741          cmp.l     #69,D0
0000467C  0045      
0000467E  6700 0050 7742          beq       vsprintf_82
00004682  6000 0176 7743          bra       vsprintf_80
                    7744   vsprintf_94:
00004686  0C80 0000 7745          cmp.l     #101,D0
0000468A  0065      
0000468C  6700 0042 7746          beq       vsprintf_82
00004690  6E00 0168 7747          bgt       vsprintf_80
00004694  0C80 0000 7748          cmp.l     #100,D0
00004698  0064      
0000469A  6734      7749          beq.s     vsprintf_82
0000469C  6000 015C 7750          bra       vsprintf_80
                    7751   vsprintf_93:
000046A0  0C80 0000 7752          cmp.l     #117,D0
000046A4  0075      
000046A6  6728      7753          beq.s     vsprintf_82
000046A8  6E1A      7754          bgt.s     vsprintf_95
000046AA  0C80 0000 7755          cmp.l     #115,D0
000046AE  0073      
000046B0  6700 0038 7756          beq       vsprintf_96
000046B4  6E00 0144 7757          bgt       vsprintf_80
000046B8  0C80 0000 7758          cmp.l     #111,D0
000046BC  006F      
000046BE  6710      7759          beq.s     vsprintf_82
000046C0  6000 0138 7760          bra       vsprintf_80
                    7761   vsprintf_95:
000046C4  0C80 0000 7762          cmp.l     #120,D0
000046C8  0078      
000046CA  6704      7763          beq.s     vsprintf_82
000046CC  6000 012C 7764          bra       vsprintf_80
                    7765   vsprintf_82:
000046D0  4A2E FFD2 7766          tst.b     -46(A6)
000046D4  6714      7767          beq.s     vsprintf_96
000046D6  4A2E FFCD 7768          tst.b     -51(A6)
000046DA  660E      7769          bne.s     vsprintf_96
000046DC  200D      7770          move.l    A5,D0
000046DE  9087      7771          sub.l     D7,D0
000046E0  4884      7772          ext.w     D4
000046E2  48C4      7773          ext.l     D4
000046E4  9084      7774          sub.l     D4,D0
000046E6  2D40 FFFC 7775          move.l    D0,-4(A6)
                    7776   vsprintf_96:
000046EA  202E FFFC 7777          move.l    -4(A6),D0
000046EE  0C80 0000 7778          cmp.l     #0,D0
000046F2  0000      
000046F4  6C04      7779          bge.s     vsprintf_98
000046F6  42AE FFFC 7780          clr.l     -4(A6)
                    7781   vsprintf_98:
000046FA  4A2E FFCD 7782          tst.b     -51(A6)
000046FE  6600 0030 7783          bne       vsprintf_104
00004702  4884      7784          ext.w     D4
00004704  48C4      7785          ext.l     D4
00004706  2004      7786          move.l    D4,D0
00004708  D0AE FFFC 7787          add.l     -4(A6),D0
0000470C  D087      7788          add.l     D7,D0
0000470E  1D40 FFD1 7789          move.b    D0,-47(A6)
                    7790   vsprintf_102:
00004712  102E FFD1 7791          move.b    -47(A6),D0
00004716  4880      7792          ext.w     D0
00004718  48C0      7793          ext.l     D0
0000471A  220D      7794          move.l    A5,D1
0000471C  534D      7795          subq.w    #1,A5
0000471E  B081      7796          cmp.l     D1,D0
00004720  6C0E      7797          bge.s     vsprintf_104
00004722  4878 0020 7798          pea       32
00004726  2F0A      7799          move.l    A2,-(A7)
00004728  4E93      7800          jsr       (A3)
0000472A  504F      7801          addq.w    #8,A7
0000472C  5286      7802          addq.l    #1,D6
0000472E  60E2      7803          bra       vsprintf_102
                    7804   vsprintf_104:
00004730  41EE FFD4 7805          lea       -44(A6),A0
00004734  2408      7806          move.l    A0,D2
                    7807   vsprintf_105:
00004736  2042      7808          move.l    D2,A0
00004738  4A10      7809          tst.b     (A0)
0000473A  6716      7810          beq.s     vsprintf_107
0000473C  2042      7811          move.l    D2,A0
0000473E  5282      7812          addq.l    #1,D2
00004740  1210      7813          move.b    (A0),D1
00004742  4881      7814          ext.w     D1
00004744  48C1      7815          ext.l     D1
00004746  2F01      7816          move.l    D1,-(A7)
00004748  2F0A      7817          move.l    A2,-(A7)
0000474A  4E93      7818          jsr       (A3)
0000474C  504F      7819          addq.w    #8,A7
0000474E  5286      7820          addq.l    #1,D6
00004750  60E4      7821          bra       vsprintf_105
                    7822   vsprintf_107:
00004752  202E FFFC 7823          move.l    -4(A6),D0
00004756  1D40 FFD1 7824          move.b    D0,-47(A6)
                    7825   vsprintf_108:
0000475A  102E FFD1 7826          move.b    -47(A6),D0
0000475E  532E FFD1 7827          subq.b    #1,-47(A6)
00004762  4A00      7828          tst.b     D0
00004764  670E      7829          beq.s     vsprintf_110
00004766  4878 0030 7830          pea       48
0000476A  2F0A      7831          move.l    A2,-(A7)
0000476C  4E93      7832          jsr       (A3)
0000476E  504F      7833          addq.w    #8,A7
00004770  5286      7834          addq.l    #1,D6
00004772  60E6      7835          bra       vsprintf_108
                    7836   vsprintf_110:
00004774  2043      7837          move.l    D3,A0
00004776  4A10      7838          tst.b     (A0)
00004778  6700 0048 7839          beq       vsprintf_113
0000477C  206E 000C 7840          move.l    12(A6),A0
00004780  1010      7841          move.b    (A0),D0
00004782  4880      7842          ext.w     D0
00004784  48C0      7843          ext.l     D0
00004786  0C80 0000 7844          cmp.l     #115,D0
0000478A  0073      
0000478C  670C      7845          beq.s     vsprintf_116
0000478E  6E18      7846          bgt.s     vsprintf_119
00004790  0C80 0000 7847          cmp.l     #99,D0
00004794  0063      
00004796  6702      7848          beq.s     vsprintf_116
00004798  600E      7849          bra.s     vsprintf_119
                    7850   vsprintf_116:
0000479A  2005      7851          move.l    D5,D0
0000479C  5385      7852          subq.l    #1,D5
0000479E  0C80 0000 7853          cmp.l     #0,D0
000047A2  0000      
000047A4  6E02      7854          bgt.s     vsprintf_119
000047A6  6016      7855          bra.s     vsprintf_115
                    7856   vsprintf_119:
000047A8  2043      7857          move.l    D3,A0
000047AA  5283      7858          addq.l    #1,D3
000047AC  1210      7859          move.b    (A0),D1
000047AE  4881      7860          ext.w     D1
000047B0  48C1      7861          ext.l     D1
000047B2  2F01      7862          move.l    D1,-(A7)
000047B4  2F0A      7863          move.l    A2,-(A7)
000047B6  4E93      7864          jsr       (A3)
000047B8  504F      7865          addq.w    #8,A7
000047BA  5286      7866          addq.l    #1,D6
000047BC  6002      7867          bra.s     vsprintf_112
                    7868   vsprintf_115:
000047BE  6002      7869          bra.s     vsprintf_113
                    7870   vsprintf_112:
000047C0  60B2      7871          bra       vsprintf_110
                    7872   vsprintf_113:
000047C2  4A2E FFCD 7873          tst.b     -51(A6)
000047C6  6700 0030 7874          beq       vsprintf_125
000047CA  4884      7875          ext.w     D4
000047CC  48C4      7876          ext.l     D4
000047CE  2004      7877          move.l    D4,D0
000047D0  D0AE FFFC 7878          add.l     -4(A6),D0
000047D4  D087      7879          add.l     D7,D0
000047D6  1D40 FFD1 7880          move.b    D0,-47(A6)
                    7881   vsprintf_123:
000047DA  102E FFD1 7882          move.b    -47(A6),D0
000047DE  4880      7883          ext.w     D0
000047E0  48C0      7884          ext.l     D0
000047E2  220D      7885          move.l    A5,D1
000047E4  534D      7886          subq.w    #1,A5
000047E6  B081      7887          cmp.l     D1,D0
000047E8  6C0E      7888          bge.s     vsprintf_125
000047EA  4878 0020 7889          pea       32
000047EE  2F0A      7890          move.l    A2,-(A7)
000047F0  4E93      7891          jsr       (A3)
000047F2  504F      7892          addq.w    #8,A7
000047F4  5386      7893          subq.l    #1,D6
000047F6  60E2      7894          bra       vsprintf_123
                    7895   vsprintf_125:
000047F8  6014      7896          bra.s     vsprintf_81
                    7897   vsprintf_80:
000047FA  206E 000C 7898          move.l    12(A6),A0
000047FE  1210      7899          move.b    (A0),D1
00004800  4881      7900          ext.w     D1
00004802  48C1      7901          ext.l     D1
00004804  2F01      7902          move.l    D1,-(A7)
00004806  2F0A      7903          move.l    A2,-(A7)
00004808  4E93      7904          jsr       (A3)
0000480A  504F      7905          addq.w    #8,A7
0000480C  5286      7906          addq.l    #1,D6
                    7907   vsprintf_81:
0000480E  52AE 000C 7908          addq.l    #1,12(A6)
                    7909   vsprintf_2:
00004812  6000 F9D6 7910          bra       vsprintf_1
                    7911   vsprintf_3:
00004816  4A92      7912          tst.l     (A2)
00004818  6710      7913          beq.s     vsprintf_126
0000481A  4201      7914          clr.b     D1
0000481C  C2BC 0000 7915          and.l     #255,D1
00004820  00FF      
00004822  2F01      7916          move.l    D1,-(A7)
00004824  2F0A      7917          move.l    A2,-(A7)
00004826  4E93      7918          jsr       (A3)
00004828  504F      7919          addq.w    #8,A7
                    7920   vsprintf_126:
0000482A  2006      7921          move.l    D6,D0
0000482C  4CDF 3CFC 7922          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004830  4E5E      7923          unlk      A6
00004832  4E75      7924          rts
                    7925   ULMUL:
00004834  4E56 0000 7926          link    A6,#0
00004838  48E7 C000 7927          movem.l D0/D1,-(A7)
0000483C  222E 0008 7928          move.l  8(A6),D1
00004840  202E 000C 7929          move.l  12(A6),D0
00004844  602C      7930          bra.s   lmul_3
                    7931   LMUL:
00004846  4E56 0000 7932          link    A6,#0
0000484A  48E7 C000 7933          movem.l D0/D1,-(A7)
0000484E  222E 0008 7934          move.l  8(A6),D1
00004852  202E 000C 7935          move.l  12(A6),D0
00004856  4A80      7936          tst.l   D0
00004858  6A0A      7937          bpl.s   lmul_1
0000485A  4480      7938          neg.l   D0
0000485C  4A81      7939          tst.l   D1
0000485E  6A0A      7940          bpl.s   lmul_2
00004860  4481      7941          neg.l   D1
00004862  600E      7942          bra.s   lmul_3
                    7943   lmul_1:
00004864  4A81      7944          tst.l   D1
00004866  6A0A      7945          bpl.s   lmul_3
00004868  4481      7946          neg.l   D1
                    7947   lmul_2:
0000486A  6114      7948          bsr.s   domul
0000486C  4481      7949          neg.l   D1
0000486E  4080      7950          negx.l  D0
00004870  6002      7951          bra.s   lmul_4
                    7952   lmul_3:
00004872  610C      7953          bsr.s   domul
                    7954   lmul_4:
00004874  2D41 0008 7955          move.l  D1,8(A6)
00004878  4CDF 0003 7956          movem.l (A7)+,D0/D1
0000487C  4E5E      7957          unlk    A6
0000487E  4E75      7958          rts
                    7959   domul:
00004880  0C81 0000 7960          cmpi.l  #$FFFF,D1
00004884  FFFF      
00004886  620C      7961          bhi.s   domul_1
00004888  0C80 0000 7962          cmpi.l  #$FFFF,D0
0000488C  FFFF      
0000488E  620E      7963          bhi.s   domul_2
00004890  C2C0      7964          mulu    D0,D1
00004892  4E75      7965          rts
                    7966   domul_1:
00004894  0C80 0000 7967          cmpi.l  #$FFFF,D0
00004898  FFFF      
0000489A  6218      7968          bhi.s   domul_4
0000489C  6002      7969          bra.s   domul_3
                    7970   domul_2
0000489E  C141      7971          exg     D0,D1
                    7972   domul_3:
000048A0  2F02      7973          move.l  D2,-(A7)
000048A2  2401      7974          move.l  D1,D2
000048A4  4842      7975          swap    D2
000048A6  C2C0      7976          mulu    D0,D1
000048A8  C4C0      7977          mulu    D0,D2
000048AA  4842      7978          swap    D2
000048AC  4242      7979          clr.w   D2
000048AE  D282      7980          add.l   D2,D1
000048B0  241F      7981          move.l  (A7)+,D2
000048B2  4E75      7982          rts
                    7983   domul_4:
000048B4  48E7 3000 7984          movem.l D2/D3,-(A7)
000048B8  2401      7985          move.l  D1,D2
000048BA  2601      7986          move.l  D1,D3
000048BC  C2C0      7987          mulu    D0,D1
000048BE  4842      7988          swap    D2
000048C0  C4C0      7989          mulu    D0,D2
000048C2  4840      7990          swap    D0
000048C4  C6C0      7991          mulu    D0,D3
000048C6  D483      7992          add.l   D3,D2
000048C8  4842      7993          swap    D2
000048CA  4242      7994          clr.w   D2
000048CC  D282      7995          add.l   D2,D1
000048CE  4CDF 000C 7996          movem.l (A7)+,D2/D3
000048D2  4E75      7997          rts
                    7998   _gets:
000048D4  4E56 0000 7999          link      A6,#0
000048D8  48E7 3820 8000          movem.l   D2/D3/D4/A2,-(A7)
000048DC  45F8 3732 8001          lea       _putch,A2
000048E0  282E 0008 8002          move.l    8(A6),D4
000048E4  2404      8003          move.l    D4,D2
                    8004   gets_1:
000048E6  6100 EE7A 8005          bsr       _getch
000048EA  2600      8006          move.l    D0,D3
000048EC  0C80 0000 8007          cmp.l     #10,D0
000048F0  000A      
000048F2  6700 003C 8008          beq       gets_3
000048F6  0C83 0000 8009          cmp.l     #8,D3
000048FA  0008      
000048FC  6712      8010          beq.s     gets_4
000048FE  2042      8011          move.l    D2,A0
00004900  5282      8012          addq.l    #1,D2
00004902  1083      8013          move.b    D3,(A0)
00004904  4883      8014          ext.w     D3
00004906  48C3      8015          ext.l     D3
00004908  2F03      8016          move.l    D3,-(A7)
0000490A  4E92      8017          jsr       (A2)
0000490C  584F      8018          addq.w    #4,A7
0000490E  601E      8019          bra.s     gets_6
                    8020   gets_4:
00004910  B484      8021          cmp.l     D4,D2
00004912  631A      8022          bls.s     gets_6
00004914  4878 0008 8023          pea       8
00004918  4E92      8024          jsr       (A2)
0000491A  584F      8025          addq.w    #4,A7
0000491C  4878 0020 8026          pea       32
00004920  4E92      8027          jsr       (A2)
00004922  584F      8028          addq.w    #4,A7
00004924  4878 0008 8029          pea       8
00004928  4E92      8030          jsr       (A2)
0000492A  584F      8031          addq.w    #4,A7
0000492C  5382      8032          subq.l    #1,D2
                    8033   gets_6:
0000492E  60B6      8034          bra       gets_1
                    8035   gets_3:
00004930  4878 000A 8036          pea       10
00004934  4E92      8037          jsr       (A2)
00004936  584F      8038          addq.w    #4,A7
00004938  2042      8039          move.l    D2,A0
0000493A  4210      8040          clr.b     (A0)
0000493C  2004      8041          move.l    D4,D0
0000493E  4CDF 041C 8042          movem.l   (A7)+,D2/D3/D4/A2
00004942  4E5E      8043          unlk      A6
00004944  4E75      8044          rts
                    8045   _ungetch:
00004946  4E56 0000 8046          link      A6,#0
0000494A  23EE 0008 8047          move.l    8(A6),__ungetbuf
0000494E  0B00 00C0 
00004952  202E 0008 8048          move.l    8(A6),D0
00004956  4E5E      8049          unlk      A6
00004958  4E75      8050          rts
                    8051   @itoa_convert:
0000495A  4E56 0000 8052          link      A6,#0
0000495E  48E7 3C00 8053          movem.l   D2/D3/D4/D5,-(A7)
00004962  242E 0008 8054          move.l    8(A6),D2
00004966  262E 0010 8055          move.l    16(A6),D3
0000496A  2A2E 000C 8056          move.l    12(A6),D5
0000496E  2F05      8057          move.l    D5,-(A7)
00004970  2F03      8058          move.l    D3,-(A7)
00004972  6100 ECE0 8059          bsr       ULDIV
00004976  202F 0004 8060          move.l    4(A7),D0
0000497A  504F      8061          addq.w    #8,A7
0000497C  2800      8062          move.l    D0,D4
0000497E  BA83      8063          cmp.l     D3,D5
00004980  651A      8064          blo.s     @itoa_convert_1
00004982  2F03      8065          move.l    D3,-(A7)
00004984  2F05      8066          move.l    D5,-(A7)
00004986  2F03      8067          move.l    D3,-(A7)
00004988  6100 ECCA 8068          bsr       ULDIV
0000498C  2217      8069          move.l    (A7),D1
0000498E  504F      8070          addq.w    #8,A7
00004990  2F01      8071          move.l    D1,-(A7)
00004992  2F02      8072          move.l    D2,-(A7)
00004994  61C4      8073          bsr       @itoa_convert
00004996  DEFC 000C 8074          add.w     #12,A7
0000499A  2400      8075          move.l    D0,D2
                    8076   @itoa_convert_1:
0000499C  0C84 0000 8077          cmp.l     #9,D4
000049A0  0009      
000049A2  6E0A      8078          bgt.s     @itoa_convert_3
000049A4  2004      8079          move.l    D4,D0
000049A6  0680 0000 8080          add.l     #48,D0
000049AA  0030      
000049AC  600E      8081          bra.s     @itoa_convert_4
                    8082   @itoa_convert_3:
000049AE  2004      8083          move.l    D4,D0
000049B0  0680 0000 8084          add.l     #97,D0
000049B4  0061      
000049B6  0480 0000 8085          sub.l     #10,D0
000049BA  000A      
                    8086   @itoa_convert_4:
000049BC  2042      8087          move.l    D2,A0
000049BE  1080      8088          move.b    D0,(A0)
000049C0  2002      8089          move.l    D2,D0
000049C2  5280      8090          addq.l    #1,D0
000049C4  4CDF 003C 8091          movem.l   (A7)+,D2/D3/D4/D5
000049C8  4E5E      8092          unlk      A6
000049CA  4E75      8093          rts
                    8094   _ltoa:
000049CC  4E56 0000 8095          link      A6,#0
000049D0  48E7 3C00 8096          movem.l   D2/D3/D4/D5,-(A7)
000049D4  242E 0008 8097          move.l    8(A6),D2
000049D8  262E 000C 8098          move.l    12(A6),D3
000049DC  2A2E 0010 8099          move.l    16(A6),D5
000049E0  2803      8100          move.l    D3,D4
000049E2  0C85 0000 8101          cmp.l     #2,D5
000049E6  0002      
000049E8  6D08      8102          blt.s     ltoa_3
000049EA  0C85 0000 8103          cmp.l     #36,D5
000049EE  0024      
000049F0  6F06      8104          ble.s     ltoa_1
                    8105   ltoa_3:
000049F2  2003      8106          move.l    D3,D0
000049F4  6000 0052 8107          bra       ltoa_4
                    8108   ltoa_1:
000049F8  0C85 0000 8109          cmp.l     #10,D5
000049FC  000A      
000049FE  6600 0032 8110          bne       ltoa_5
00004A02  0C82 0000 8111          cmp.l     #0,D2
00004A06  0000      
00004A08  6C28      8112          bge.s     ltoa_5
00004A0A  2002      8113          move.l    D2,D0
00004A0C  4480      8114          neg.l     D0
00004A0E  2400      8115          move.l    D0,D2
00004A10  0C82 0000 8116          cmp.l     #0,D2
00004A14  0000      
00004A16  6C12      8117          bge.s     ltoa_7
00004A18  4879 0000 8118          pea       @itoa_1
00004A1C  6198      
00004A1E  2F03      8119          move.l    D3,-(A7)
00004A20  6100 EC22 8120          bsr       _strcpy
00004A24  504F      8121          addq.w    #8,A7
00004A26  2003      8122          move.l    D3,D0
00004A28  601E      8123          bra.s     ltoa_4
                    8124   ltoa_7:
00004A2A  2044      8125          move.l    D4,A0
00004A2C  5284      8126          addq.l    #1,D4
00004A2E  10BC 002D 8127          move.b    #45,(A0)
                    8128   ltoa_5:
00004A32  2F05      8129          move.l    D5,-(A7)
00004A34  2F02      8130          move.l    D2,-(A7)
00004A36  2F04      8131          move.l    D4,-(A7)
00004A38  6100 FF20 8132          bsr       @itoa_convert
00004A3C  DEFC 000C 8133          add.w     #12,A7
00004A40  2800      8134          move.l    D0,D4
00004A42  2044      8135          move.l    D4,A0
00004A44  4210      8136          clr.b     (A0)
00004A46  2003      8137          move.l    D3,D0
                    8138   ltoa_4:
00004A48  4CDF 003C 8139          movem.l   (A7)+,D2/D3/D4/D5
00004A4C  4E5E      8140          unlk      A6
00004A4E  4E75      8141          rts
                    8142   _ultoa:
00004A50  4E56 0000 8143          link      A6,#0
00004A54  48E7 3800 8144          movem.l   D2/D3/D4,-(A7)
00004A58  262E 0010 8145          move.l    16(A6),D3
00004A5C  282E 000C 8146          move.l    12(A6),D4
00004A60  2404      8147          move.l    D4,D2
00004A62  0C83 0000 8148          cmp.l     #2,D3
00004A66  0002      
00004A68  6D08      8149          blt.s     ultoa_3
00004A6A  0C83 0000 8150          cmp.l     #36,D3
00004A6E  0024      
00004A70  6F04      8151          ble.s     ultoa_1
                    8152   ultoa_3:
00004A72  2004      8153          move.l    D4,D0
00004A74  6018      8154          bra.s     ultoa_4
                    8155   ultoa_1:
00004A76  2F03      8156          move.l    D3,-(A7)
00004A78  2F2E 0008 8157          move.l    8(A6),-(A7)
00004A7C  2F02      8158          move.l    D2,-(A7)
00004A7E  6100 FEDA 8159          bsr       @itoa_convert
00004A82  DEFC 000C 8160          add.w     #12,A7
00004A86  2400      8161          move.l    D0,D2
00004A88  2042      8162          move.l    D2,A0
00004A8A  4210      8163          clr.b     (A0)
00004A8C  2004      8164          move.l    D4,D0
                    8165   ultoa_4:
00004A8E  4CDF 001C 8166          movem.l   (A7)+,D2/D3/D4
00004A92  4E5E      8167          unlk      A6
00004A94  4E75      8168          rts
                    8169   _itoa:
00004A96  4E56 0000 8170          link      A6,#0
00004A9A  2F2E 0010 8171          move.l    16(A6),-(A7)
00004A9E  2F2E 000C 8172          move.l    12(A6),-(A7)
00004AA2  2F2E 0008 8173          move.l    8(A6),-(A7)
00004AA6  6100 FF24 8174          bsr       _ltoa
00004AAA  DEFC 000C 8175          add.w     #12,A7
00004AAE  4E5E      8176          unlk      A6
00004AB0  4E75      8177          rts
                    8178   _strlen:
00004AB2  206F 0004 8179          move.l    (4,A7),A0
00004AB6  2248      8180          move.l    A0,A1
                    8181   strlen_1:
00004AB8  4A19      8182          tst.b     (A1)+
00004ABA  66FC      8183          bne       strlen_1
00004ABC  2009      8184          move.l    A1,D0
00004ABE  9088      8185          sub.l     A0,D0
00004AC0  5380      8186          subq.l    #1,D0
00004AC2  4E75      8187          rts
                    8188          section   const
                    8189   
                    8190   @m68kde~1_1:
00004AC4  0D0A 00   8191          dc.b      13,10,0
                    8192   @m68kde~1_2:
00004AC8  0D53 7769 8193          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004ACC  7463 6865 
00004AD0  7320 5357 
00004AD4  5B        
00004AD5  372D 305D 8194          dc.b      55,45,48,93,32,61,32,0
00004AD9  203D 2000 
                    8195   @m68kde~1_3:
00004ADE  3000      8196          dc.b      48,0
                    8197   @m68kde~1_4:
00004AE0  3100      8198          dc.b      49,0
                    8199   @m68kde~1_5:
00004AE2  0D0A 4475 8200          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004AE6  6D70 204D 
00004AEA  656D 6F72 
00004AEE  79        
00004AEF  2042 6C6F 8201          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004AF3  636B 3A20 
00004AF7  3C45 5343 
00004AFB  3E20      
00004AFD  746F 2041 8202          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004B01  626F 7274 
00004B05  2C20 3C53 
00004B09  50        
00004B0A  4143 453E 8203          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004B0E  2074 6F20 
00004B12  436F 6E74 
00004B16  69        
00004B17  6E75 6500 8204          dc.b      110,117,101,0
                    8205   @m68kde~1_6:
00004B1C  0D0A 456E 8206          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004B20  7465 7220 
00004B24  5374 6172 
00004B28  74        
00004B29  2041 6464 8207          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004B2D  7265 7373 
00004B31  3A20 00   
                    8208   @m68kde~1_7:
00004B34  0D0A 2530 8209          dc.b      13,10,37,48,56,120,32,0
00004B38  3878 2000 
                    8210   @m68kde~1_8:
00004B3C  2530 3258 8211          dc.b      37,48,50,88,0
00004B40  00        
                    8212   @m68kde~1_9:
00004B42  2020 00   8213          dc.b      32,32,0
                    8214   @m68kde~1_10:
00004B46  0D0A 4669 8215          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004B4A  6C6C 204D 
00004B4E  656D 6F72 
00004B52  79        
00004B53  2042 6C6F 8216          dc.b      32,66,108,111,99,107,0
00004B57  636B 00   
                    8217   @m68kde~1_11:
00004B5A  0D0A 456E 8218          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004B5E  7465 7220 
00004B62  456E 6420 
00004B66  41        
00004B67  6464 7265 8219          dc.b      100,100,114,101,115,115,58,32,0
00004B6B  7373 3A20 
00004B6F  00        
                    8220   @m68kde~1_12:
00004B70  0D0A 456E 8221          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004B74  7465 7220 
00004B78  4669 6C6C 
00004B7C  20        
00004B7D  4461 7461 8222          dc.b      68,97,116,97,58,32,0
00004B81  3A20 00   
                    8223   @m68kde~1_13:
00004B84  0D0A 4669 8224          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00004B88  6C6C 696E 
00004B8C  6720 4164 
00004B90  64        
00004B91  7265 7373 8225          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00004B95  6573 205B 
00004B99  2425 3038 
00004B9D  58        
00004B9E  202D 2024 8226          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00004BA2  2530 3858 
00004BA6  5D20 7769 
00004BAA  7468      
00004BAC  2024 2530 8227          dc.b      32,36,37,48,50,88,0
00004BB0  3258 00   
                    8228   @m68kde~1_14:
00004BB4  0D0A 5573 8229          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00004BB8  6520 4879 
00004BBC  7065 7254 
00004BC0  65        
00004BC1  726D 696E 8230          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00004BC5  616C 2074 
00004BC9  6F20 5365 
00004BCD  6E64 2054 8231          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004BD1  6578 7420 
00004BD5  4669 6C65 
00004BD9  2028 2E68 8232          dc.b      32,40,46,104,101,120,41,13,10,0
00004BDD  6578 290D 
00004BE1  0A00      
                    8233   @m68kde~1_15:
00004BE4  0D0A 4C6F 8234          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004BE8  6164 2046 
00004BEC  6169 6C65 
00004BF0  64        
00004BF1  2061 7420 8235          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00004BF5  4164 6472 
00004BF9  6573 7320 
00004BFD  3D        
00004BFE  205B 2425 8236          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004C02  3038 585D 
00004C06  0D0A 00   
                    8237   @m68kde~1_16:
00004C0A  0D0A 5375 8238          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004C0E  6363 6573 
00004C12  733A 2044 
00004C16  6F        
00004C17  776E 6C6F 8239          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004C1B  6164 6564 
00004C1F  2025 6420 
00004C23  6279 7465 8240          dc.b      98,121,116,101,115,13,10,0
00004C27  730D 0A00 
                    8241   @m68kde~1_17:
00004C2C  0D0A 4578 8242          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004C30  616D 696E 
00004C34  6520 616E 
00004C38  64        
00004C39  2043 6861 8243          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004C3D  6E67 6520 
00004C41  4D65 6D6F 
00004C45  72        
00004C46  7900      8244          dc.b      121,0
                    8245   @m68kde~1_18:
00004C48  0D0A 3C45 8246          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004C4C  5343 3E20 
00004C50  746F 2053 
00004C54  746F      
00004C56  702C 203C 8247          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004C5A  5350 4143 
00004C5E  453E 2074 
00004C62  6F20      
00004C64  4164 7661 8248          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00004C68  6E63 652C 
00004C6C  2027 2D27 
00004C70  2074      
00004C72  6F20 476F 8249          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004C76  2042 6163 
00004C7A  6B2C 203C 
00004C7E  4441      
00004C80  5441 3E20 8250          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004C84  746F 2063 
00004C88  6861 6E67 
00004C8C  65        
00004C8D  00        8251          dc.b      0
                    8252   @m68kde~1_19:
00004C8E  0D0A 456E 8253          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004C92  7465 7220 
00004C96  4164 6472 
00004C9A  65        
00004C9B  7373 3A20 8254          dc.b      115,115,58,32,0
00004C9F  00        
                    8255   @m68kde~1_20:
00004CA0  0D0A 5B25 8256          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00004CA4  3038 785D 
00004CA8  203A 2025 
00004CAC  3032 78   
00004CAF  2020 00   8257          dc.b      32,32,0
                    8258   @m68kde~1_21:
00004CB2  0D0A 5761 8259          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00004CB6  726E 696E 
00004CBA  6720 4368 
00004CBE  61        
00004CBF  6E67 6520 8260          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004CC3  4661 696C 
00004CC7  6564 3A20 
00004CCB  57        
00004CCC  726F 7465 8261          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004CD0  205B 2530 
00004CD4  3278 5D2C 
00004CD8  20        
00004CD9  5265 6164 8262          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004CDD  205B 2530 
00004CE1  3278 5D00 
                    8263   @m68kde~1_22:
00004CE6  0A45 7261 8264          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
00004CEA  7369 6E67 
00004CEE  2E2E 2E0A 
00004CF2  00        
                    8265   @m68kde~1_23:
00004CF4  0D0A 2050 8266          dc.b      13,10,32,80,114,111,103,114,97,109,109,105,110
00004CF8  726F 6772 
00004CFC  616D 6D69 
00004D00  6E        
00004D01  6720 436F 8267          dc.b      103,32,67,111,109,112,108,101,116,101,33,0
00004D05  6D70 6C65 
00004D09  7465 2100 
                    8268   @m68kde~1_24:
00004D0E  0D0A 204C 8269          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
00004D12  6F61 6469 
00004D16  6E67 2050 
00004D1A  72        
00004D1B  6F67 7261 8270          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
00004D1F  6D20 4672 
00004D23  6F6D 2053 
00004D27  50        
00004D28  4920 466C 8271          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
00004D2C  6173 682E 
00004D30  2E2E 2E00 
                    8272   @m68kde~1_25:
00004D34  0D0A 2052 8273          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
00004D38  6561 6420 
00004D3C  4461 7461 
00004D40  3A20      
00004D42  2530 3878 8274          dc.b      37,48,56,120,32,10,0
00004D46  200A 00   
                    8275   @m68kde~1_26:
00004D4A  4949 435F 8276          dc.b      73,73,67,95,67,82,83,82,32,84,114,97,110,115
00004D4E  4352 5352 
00004D52  2054 7261 
00004D56  6E73      
00004D58  6D69 7420 8277          dc.b      109,105,116,32,40,66,105,110,97,114,121,41,58
00004D5C  2842 696E 
00004D60  6172 7929 
00004D64  3A        
00004D65  2000      8278          dc.b      32,0
                    8279   @m68kde~1_27:
00004D68  2564 00   8280          dc.b      37,100,0
                    8281   @m68kde~1_28:
00004D6C  0A00      8282          dc.b      10,0
                    8283   @m68kde~1_29:
00004D6E  4545 5052 8284          dc.b      69,69,80,82,79,77,32,70,108,97,115,104,32,80
00004D72  4F4D 2046 
00004D76  6C61 7368 
00004D7A  2050      
00004D7C  6167 6520 8285          dc.b      97,103,101,32,87,114,105,116,101,58,32,83,116
00004D80  5772 6974 
00004D84  653A 2053 
00004D88  74        
00004D89  6172 7420 8286          dc.b      97,114,116,32,65,100,100,114,101,115,115,58
00004D8D  4164 6472 
00004D91  6573 733A 
00004D95  2030 7825 8287          dc.b      32,48,120,37,120,44,32,110,117,109,98,121,116
00004D99  782C 206E 
00004D9D  756D 6279 
00004DA1  74        
00004DA2  6573 3A20 8288          dc.b      101,115,58,32,37,100,10,0
00004DA6  2564 0A00 
                    8289   @m68kde~1_30:
00004DAA  0D0A 2042 8290          dc.b      13,10,32,66,108,111,99,107,32,48,32,65,100,100
00004DAE  6C6F 636B 
00004DB2  2030 2041 
00004DB6  6464      
00004DB8  7265 7373 8291          dc.b      114,101,115,115,58,32,48,120,37,48,52,88,58
00004DBC  3A20 3078 
00004DC0  2530 3458 
00004DC4  3A        
00004DC5  2025 640A 8292          dc.b      32,37,100,10,0
00004DC9  00        
                    8293   @m68kde~1_31:
00004DCA  0D0A 2045 8294          dc.b      13,10,32,69,120,105,116,105,110,103,32,69,69
00004DCE  7869 7469 
00004DD2  6E67 2045 
00004DD6  45        
00004DD7  5052 4F4D 8295          dc.b      80,82,79,77,32,82,101,97,100,32,66,108,111,99
00004DDB  2052 6561 
00004DDF  6420 426C 
00004DE3  6F63      
00004DE5  6B20 300A 8296          dc.b      107,32,48,10,0
00004DE9  00        
                    8297   @m68kde~1_32:
00004DEA  0D0A 2042 8298          dc.b      13,10,32,66,108,111,99,107,32,49,32,65,100,100
00004DEE  6C6F 636B 
00004DF2  2031 2041 
00004DF6  6464      
00004DF8  7265 7373 8299          dc.b      114,101,115,115,58,32,48,120,37,48,52,88,58
00004DFC  3A20 3078 
00004E00  2530 3458 
00004E04  3A        
00004E05  2025 640A 8300          dc.b      32,37,100,10,0
00004E09  00        
                    8301   @m68kde~1_33:
00004E0A  0D0A 2045 8302          dc.b      13,10,32,69,120,105,116,105,110,103,32,69,69
00004E0E  7869 7469 
00004E12  6E67 2045 
00004E16  45        
00004E17  5052 4F4D 8303          dc.b      80,82,79,77,32,82,101,97,100,32,66,108,111,99
00004E1B  2052 6561 
00004E1F  6420 426C 
00004E23  6F63      
00004E25  6B20 310A 8304          dc.b      107,32,49,10,0
00004E29  00        
                    8305   @m68kde~1_34:
00004E2A  0D0A 2049 8306          dc.b      13,10,32,73,50,67,32,84,101,115,116,10,0
00004E2E  3243 2054 
00004E32  6573 740A 
00004E36  00        
                    8307   @m68kde~1_35:
00004E38  0D0A 496E 8308          dc.b      13,10,73,110,105,116,105,97,108,105,122,105
00004E3C  6974 6961 
00004E40  6C69 7A69 
00004E44  6E67 2049 8309          dc.b      110,103,32,73,50,67,46,46,46,10,0
00004E48  3243 2E2E 
00004E4C  2E0A 00   
                    8310   @m68kde~1_36:
00004E50  0D0A 4368 8311          dc.b      13,10,67,104,111,111,115,101,32,111,112,116
00004E54  6F6F 7365 
00004E58  206F 7074 
00004E5C  696F 6E3A 8312          dc.b      105,111,110,58,10,0
00004E60  0A00      
                    8313   @m68kde~1_37:
00004E62  3120 5265 8314          dc.b      49,32,82,101,97,100,32,83,105,110,103,108,101
00004E66  6164 2053 
00004E6A  696E 676C 
00004E6E  65        
00004E6F  2042 7974 8315          dc.b      32,66,121,116,101,32,102,114,111,109,32,69,69
00004E73  6520 6672 
00004E77  6F6D 2045 
00004E7B  45        
00004E7C  5052 4F4D 8316          dc.b      80,82,79,77,10,0
00004E80  0A00      
                    8317   @m68kde~1_38:
00004E82  3220 5772 8318          dc.b      50,32,87,114,105,116,101,32,83,105,110,103,108
00004E86  6974 6520 
00004E8A  5369 6E67 
00004E8E  6C        
00004E8F  6520 4279 8319          dc.b      101,32,66,121,116,101,32,116,111,32,69,69,80
00004E93  7465 2074 
00004E97  6F20 4545 
00004E9B  50        
00004E9C  524F 4D0A 8320          dc.b      82,79,77,10,0
00004EA0  00        
                    8321   @m68kde~1_39:
00004EA2  3320 5265 8322          dc.b      51,32,82,101,97,100,32,66,108,111,99,107,32
00004EA6  6164 2042 
00004EAA  6C6F 636B 
00004EAE  20        
00004EAF  6F66 2044 8323          dc.b      111,102,32,68,97,116,97,32,102,114,111,109,32
00004EB3  6174 6120 
00004EB7  6672 6F6D 
00004EBB  20        
00004EBC  4545 5052 8324          dc.b      69,69,80,82,79,77,10,0
00004EC0  4F4D 0A00 
                    8325   @m68kde~1_40:
00004EC4  3420 5772 8326          dc.b      52,32,87,114,105,116,101,32,66,108,111,99,107
00004EC8  6974 6520 
00004ECC  426C 6F63 
00004ED0  6B        
00004ED1  206F 6620 8327          dc.b      32,111,102,32,68,97,116,97,32,116,111,32,69
00004ED5  4461 7461 
00004ED9  2074 6F20 
00004EDD  45        
00004EDE  4550 524F 8328          dc.b      69,80,82,79,77,10,0
00004EE2  4D0A 00   
                    8329   @m68kde~1_41:
00004EE6  0D0A 5265 8330          dc.b      13,10,82,101,97,100,32,83,105,110,103,108,101
00004EEA  6164 2053 
00004EEE  696E 676C 
00004EF2  65        
00004EF3  2042 7974 8331          dc.b      32,66,121,116,101,10,0
00004EF7  650A 00   
                    8332   @m68kde~1_42:
00004EFA  456E 7465 8333          dc.b      69,110,116,101,114,32,97,100,100,114,101,115
00004EFE  7220 6164 
00004F02  6472 6573 
00004F06  733A 2030 8334          dc.b      115,58,32,48,120,0
00004F0A  7800      
                    8335   @m68kde~1_43:
00004F0C  5265 6164 8336          dc.b      82,101,97,100,32,102,114,111,109,32,97,100,100
00004F10  2066 726F 
00004F14  6D20 6164 
00004F18  64        
00004F19  7265 7373 8337          dc.b      114,101,115,115,32,48,120,37,88,58,32,48,120
00004F1D  2030 7825 
00004F21  583A 2030 
00004F25  78        
00004F26  2530 3258 8338          dc.b      37,48,50,88,10,0
00004F2A  0A00      
                    8339   @m68kde~1_44:
00004F2C  0D0A 5772 8340          dc.b      13,10,87,114,105,116,101,32,83,105,110,103,108
00004F30  6974 6520 
00004F34  5369 6E67 
00004F38  6C        
00004F39  6520 4279 8341          dc.b      101,32,66,121,116,101,10,0
00004F3D  7465 0A00 
                    8342   @m68kde~1_45:
00004F42  456E 7465 8343          dc.b      69,110,116,101,114,32,98,121,116,101,32,118
00004F46  7220 6279 
00004F4A  7465 2076 
00004F4E  616C 7565 8344          dc.b      97,108,117,101,58,32,48,120,0
00004F52  3A20 3078 
00004F56  00        
                    8345   @m68kde~1_46:
00004F58  5772 6F74 8346          dc.b      87,114,111,116,101,32,48,120,37,48,50,88,32
00004F5C  6520 3078 
00004F60  2530 3258 
00004F64  20        
00004F65  746F 2061 8347          dc.b      116,111,32,97,100,100,114,101,115,115,32,48
00004F69  6464 7265 
00004F6D  7373 2030 
00004F71  7825 580A 8348          dc.b      120,37,88,10,0
00004F75  00        
                    8349   @m68kde~1_47:
00004F76  5265 6164 8350          dc.b      82,101,97,100,32,98,97,99,107,58,32,48,120,37
00004F7A  2062 6163 
00004F7E  6B3A 2030 
00004F82  7825      
00004F84  3032 580A 8351          dc.b      48,50,88,10,0
00004F88  00        
                    8352   @m68kde~1_48:
00004F8A  2425 3038 8353          dc.b      36,37,48,56,88,32,32,0
00004F8E  5820 2000 
                    8354   @m68kde~1_49:
00004F92  2000      8355          dc.b      32,0
                    8356   @m68kde~1_50:
00004F94  2E00      8357          dc.b      46,0
                    8358   @m68kde~1_51:
00004F96  2563 00   8359          dc.b      37,99,0
                    8360   @m68kde~1_52:
00004F9A  00        8361          dc.b      0
                    8362   @m68kde~1_53:
00004F9C  0D0A 0D0A 8363          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004FA0  2044 3020 
00004FA4  3D20 2425 
00004FA8  3038 58   
00004FAB  2020 4130 8364          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004FAF  203D 2024 
00004FB3  2530 3858 
00004FB7  00        
                    8365   @m68kde~1_54:
00004FB8  0D0A 2044 8366          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004FBC  3120 3D20 
00004FC0  2425 3038 
00004FC4  5820 20   
00004FC7  4131 203D 8367          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004FCB  2024 2530 
00004FCF  3858 00   
                    8368   @m68kde~1_55:
00004FD2  0D0A 2044 8369          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004FD6  3220 3D20 
00004FDA  2425 3038 
00004FDE  5820 20   
00004FE1  4132 203D 8370          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004FE5  2024 2530 
00004FE9  3858 00   
                    8371   @m68kde~1_56:
00004FEC  0D0A 2044 8372          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004FF0  3320 3D20 
00004FF4  2425 3038 
00004FF8  5820 20   
00004FFB  4133 203D 8373          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004FFF  2024 2530 
00005003  3858 00   
                    8374   @m68kde~1_57:
00005006  0D0A 2044 8375          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000500A  3420 3D20 
0000500E  2425 3038 
00005012  5820 20   
00005015  4134 203D 8376          dc.b      65,52,32,61,32,36,37,48,56,88,0
00005019  2024 2530 
0000501D  3858 00   
                    8377   @m68kde~1_58:
00005020  0D0A 2044 8378          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00005024  3520 3D20 
00005028  2425 3038 
0000502C  5820 20   
0000502F  4135 203D 8379          dc.b      65,53,32,61,32,36,37,48,56,88,0
00005033  2024 2530 
00005037  3858 00   
                    8380   @m68kde~1_59:
0000503A  0D0A 2044 8381          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
0000503E  3620 3D20 
00005042  2425 3038 
00005046  5820 20   
00005049  4136 203D 8382          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000504D  2024 2530 
00005051  3858 00   
                    8383   @m68kde~1_60:
00005054  0D0A 2044 8384          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00005058  3720 3D20 
0000505C  2425 3038 
00005060  5820 20   
00005063  4137 203D 8385          dc.b      65,55,32,61,32,36,37,48,56,88,0
00005067  2024 2530 
0000506B  3858 00   
                    8386   @m68kde~1_61:
0000506E  0D0A 0D0A 8387          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00005072  5553 5020 
00005076  3D20 2425 
0000507A  3038 58   
0000507D  2020 2841 8388          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00005081  3729 2055 
00005085  7365 7220 
00005089  5350      
0000508B  00        8389          dc.b      0
                    8390   @m68kde~1_62:
0000508C  0D0A 5353 8391          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00005090  5020 3D20 
00005094  2425 3038 
00005098  5820 20   
0000509B  2841 3729 8392          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
0000509F  2053 7570 
000050A3  6572 7669 
000050A7  73        
000050A8  6F72 2053 8393          dc.b      111,114,32,83,80,0
000050AC  5000      
                    8394   @m68kde~1_63:
000050AE  0D0A 2053 8395          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000050B2  5220 3D20 
000050B6  2425 3034 
000050BA  5820 20   
000050BD  2000      8396          dc.b      32,0
                    8397   @m68kde~1_64:
000050C0  2020 205B 8398          dc.b      32,32,32,91,0
000050C4  00        
                    8399   @m68kde~1_65:
000050C6  0D0A 2050 8400          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000050CA  4320 3D20 
000050CE  2425 3038 
000050D2  5820 20   
000050D5  00        8401          dc.b      0
                    8402   @m68kde~1_66:
000050D6  5B40 2042 8403          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
000050DA  5245 414B 
000050DE  504F 494E 
000050E2  545D 00   
                    8404   @m68kde~1_67:
000050E6  0D0A 5750 8405          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000050EA  2564 203D 
000050EE  2025 7300 
                    8406   @m68kde~1_68:
000050F2  0D0A 0D0A 8407          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000050F6  0D0A 0D0A 
000050FA  0D0A 0D0A 
000050FE  5369 6E   
00005101  676C 6520 8408          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00005105  5374 6570 
00005109  2020 3A5B 
0000510D  4F        
0000510E  4E5D 00   8409          dc.b      78,93,0
                    8410   @m68kde~1_69:
00005112  0D0A 4272 8411          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005116  6561 6B20 
0000511A  506F 696E 
0000511E  74        
0000511F  7320 3A5B 8412          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00005123  4469 7361 
00005127  626C 6564 
0000512B  5D        
0000512C  00        8413          dc.b      0
                    8414   @m68kde~1_70:
0000512E  0D0A 5072 8415          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00005132  6573 7320 
00005136  3C53 5041 
0000513A  4345      
0000513C  3E20 746F 8416          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00005140  2045 7865 
00005144  6375 7465 
00005148  20        
00005149  4E65 7874 8417          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000514D  2049 6E73 
00005151  7472 7563 
00005155  7469 6F6E 8418          dc.b      116,105,111,110,0
00005159  00        
                    8419   @m68kde~1_71:
0000515A  0D0A 5072 8420          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000515E  6573 7320 
00005162  3C45 5343 
00005166  3E20      
00005168  746F 2052 8421          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
0000516C  6573 756D 
00005170  6520 5072 
00005174  6F67 7261 8422          dc.b      111,103,114,97,109,0
00005178  6D00      
                    8423   @m68kde~1_72:
0000517A  0D0A 496C 8424          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
0000517E  6C65 6761 
00005182  6C20 4461 
00005186  74        
00005187  6120 5265 8425          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
0000518B  6769 7374 
0000518F  6572 203A 
00005193  20        
00005194  5573 6520 8426          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00005198  4430 2D44 
0000519C  372E 2E2E 
000051A0  2E2E      
000051A2  0D0A 00   8427          dc.b      13,10,0
                    8428   @m68kde~1_73:
000051A6  0D0A 4425 8429          dc.b      13,10,68,37,99,32,61,32,0
000051AA  6320 3D20 
000051AE  00        
                    8430   @m68kde~1_74:
000051B0  0D0A 496C 8431          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000051B4  6C65 6761 
000051B8  6C20 4164 
000051BC  64        
000051BD  7265 7373 8432          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000051C1  2052 6567 
000051C5  6973 7465 
000051C9  7220 3A20 8433          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000051CD  5573 6520 
000051D1  4130 2D41 
000051D5  372E      
000051D7  2E2E 2E2E 8434          dc.b      46,46,46,46,13,10,0
000051DB  0D0A 00   
                    8435   @m68kde~1_75:
000051DE  0D0A 4125 8436          dc.b      13,10,65,37,99,32,61,32,0
000051E2  6320 3D20 
000051E6  00        
                    8437   @m68kde~1_76:
000051E8  0D0A 5573 8438          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000051EC  6572 2053 
000051F0  5020 3D20 
000051F4  00        
                    8439   @m68kde~1_77:
000051F6  0D0A 496C 8440          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000051FA  6C65 6761 
000051FE  6C20 5265 
00005202  67        
00005203  6973 7465 8441          dc.b      105,115,116,101,114,46,46,46,46,0
00005207  722E 2E2E 
0000520B  2E00      
                    8442   @m68kde~1_78:
0000520E  0D0A 5379 8443          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00005212  7374 656D 
00005216  2053 5020 
0000521A  3D        
0000521B  2000      8444          dc.b      32,0
                    8445   @m68kde~1_79:
0000521E  0D0A 5043 8446          dc.b      13,10,80,67,32,61,32,0
00005222  203D 2000 
                    8447   @m68kde~1_80:
00005226  0D0A 5352 8448          dc.b      13,10,83,82,32,61,32,0
0000522A  203D 2000 
                    8449   @m68kde~1_81:
0000522E  0D0A 496C 8450          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00005232  6C65 6761 
00005236  6C20 5265 
0000523A  67        
0000523B  6973 7465 8451          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
0000523F  723A 2055 
00005243  7365 2041 
00005247  30        
00005248  2D41 372C 8452          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000524C  2044 302D 
00005250  4437 2C20 
00005254  5353 50   
00005257  2C20 5553 8453          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000525B  502C 2050 
0000525F  4320 6F72 
00005263  2053      
00005265  520D 0A00 8454          dc.b      82,13,10,0
                    8455   @m68kde~1_82:
0000526A  0D0A 0D0A 8456          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
0000526E  4E75 6D20 
00005272  2020 2020 
00005276  4164      
00005278  6472 6573 8457          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
0000527C  7320 2020 
00005280  2020 2049 
00005284  6E        
00005285  7374 7275 8458          dc.b      115,116,114,117,99,116,105,111,110,0
00005289  6374 696F 
0000528D  6E00      
                    8459   @m68kde~1_83:
00005290  0D0A 2D2D 8460          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00005294  2D20 2020 
00005298  2020 2D2D 
0000529C  2D2D 2D   
0000529F  2D2D 2D2D 8461          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000052A3  2020 2020 
000052A7  2D2D 2D2D 
000052AB  2D2D 2D   
000052AE  2D2D 2D2D 8462          dc.b      45,45,45,45,0
000052B2  00        
                    8463   @m68kde~1_84:
000052B4  0D0A 4E6F 8464          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000052B8  2042 7265 
000052BC  616B 506F 
000052C0  69        
000052C1  6E74 7320 8465          dc.b      110,116,115,32,83,101,116,0
000052C5  5365 7400 
                    8466   @m68kde~1_85:
000052CA  0D0A 2533 8467          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000052CE  6420 2020 
000052D2  2020 2425 
000052D6  3038 78   
000052D9  00        8468          dc.b      0
                    8469   @m68kde~1_86:
000052DA  0D0A 4E75 8470          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000052DE  6D20 2020 
000052E2  2020 4164 
000052E6  6472      
000052E8  6573 7300 8471          dc.b      101,115,115,0
                    8472   @m68kde~1_87:
000052EC  0D0A 2D2D 8473          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000052F0  2D20 2020 
000052F4  2020 2D2D 
000052F8  2D2D 2D   
000052FB  2D2D 2D2D 8474          dc.b      45,45,45,45,0
000052FF  00        
                    8475   @m68kde~1_88:
00005300  0D0A 4E6F 8476          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00005304  2057 6174 
00005308  6368 506F 
0000530C  69        
0000530D  6E74 7320 8477          dc.b      110,116,115,32,83,101,116,0
00005311  5365 7400 
                    8478   @m68kde~1_89:
00005316  0D0A 456E 8479          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000531A  7465 7220 
0000531E  4272 6561 
00005322  6B        
00005323  2050 6F69 8480          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00005327  6E74 204E 
0000532B  756D 6265 
0000532F  72        
00005330  3A20 00   8481          dc.b      58,32,0
                    8482   @m68kde~1_90:
00005334  0D0A 496C 8483          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00005338  6C65 6761 
0000533C  6C20 5261 
00005340  6E        
00005341  6765 203A 8484          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00005345  2055 7365 
00005349  2030 202D 
0000534D  2037      
0000534F  00        8485          dc.b      0
                    8486   @m68kde~1_91:
00005350  0D0A 4272 8487          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005354  6561 6B20 
00005358  506F 696E 
0000535C  74        
0000535D  2043 6C65 8488          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00005361  6172 6564 
00005365  2E2E 2E2E 
00005369  2E        
0000536A  0D0A 00   8489          dc.b      13,10,0
                    8490   @m68kde~1_92:
0000536E  0D0A 4272 8491          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005372  6561 6B20 
00005376  506F 696E 
0000537A  74        
0000537B  2077 6173 8492          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
0000537F  6E27 7420 
00005383  5365 742E 
00005387  2E        
00005388  2E2E 2E00 8493          dc.b      46,46,46,0
                    8494   @m68kde~1_93:
0000538C  0D0A 456E 8495          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00005390  7465 7220 
00005394  5761 7463 
00005398  68        
00005399  2050 6F69 8496          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000539D  6E74 204E 
000053A1  756D 6265 
000053A5  72        
000053A6  3A20 00   8497          dc.b      58,32,0
                    8498   @m68kde~1_94:
000053AA  0D0A 5761 8499          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000053AE  7463 6820 
000053B2  506F 696E 
000053B6  74        
000053B7  2043 6C65 8500          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000053BB  6172 6564 
000053BF  2E2E 2E2E 
000053C3  2E        
000053C4  0D0A 00   8501          dc.b      13,10,0
                    8502   @m68kde~1_95:
000053C8  0D0A 5761 8503          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000053CC  7463 6820 
000053D0  506F 696E 
000053D4  74        
000053D5  2057 6173 8504          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000053D9  206E 6F74 
000053DD  2053 6574 
000053E1  2E        
000053E2  2E2E 2E2E 8505          dc.b      46,46,46,46,0
000053E6  00        
                    8506   @m68kde~1_96:
000053E8  0D0A 4E6F 8507          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000053EC  2046 5245 
000053F0  4520 4272 
000053F4  6561      
000053F6  6B20 506F 8508          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000053FA  696E 7473 
000053FE  2E2E 2E2E 
00005402  2E        
00005403  00        8509          dc.b      0
                    8510   @m68kde~1_97:
00005404  0D0A 4272 8511          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005408  6561 6B20 
0000540C  506F 696E 
00005410  74        
00005411  2041 6464 8512          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005415  7265 7373 
00005419  3A20 00   
                    8513   @m68kde~1_98:
0000541C  0D0A 4572 8514          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00005420  726F 7220 
00005424  3A20 4272 
00005428  65        
00005429  616B 2050 8515          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000542D  6F69 6E74 
00005431  7320 4341 
00005435  4E        
00005436  4E4F 5420 8516          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000543A  6265 2073 
0000543E  6574 2061 
00005442  74        
00005443  204F 4444 8517          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00005447  2061 6464 
0000544B  7265 7373 
0000544F  65        
00005450  7300      8518          dc.b      115,0
                    8519   @m68kde~1_99:
00005452  0D0A 4572 8520          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00005456  726F 7220 
0000545A  3A20 4272 
0000545E  65        
0000545F  616B 2050 8521          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00005463  6F69 6E74 
00005467  7320 4341 
0000546B  4E        
0000546C  4E4F 5420 8522          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00005470  6265 2073 
00005474  6574 2066 
00005478  6F        
00005479  7220 524F 8523          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
0000547D  4D20 696E 
00005481  2052 616E 
00005485  67        
00005486  6520 3A20 8524          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
0000548A  5B24 302D 
0000548E  2430 3030 
00005492  3037 46   
00005495  4646 5D00 8525          dc.b      70,70,93,0
                    8526   @m68kde~1_100:
0000549A  0D0A 4572 8527          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
0000549E  726F 723A 
000054A2  2042 7265 
000054A6  61        
000054A7  6B20 506F 8528          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000054AB  696E 7420 
000054AF  416C 7265 
000054B3  6164 7920 8529          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000054B7  4578 6973 
000054BB  7473 2061 
000054BF  74        
000054C0  2041 6464 8530          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000054C4  7265 7373 
000054C8  203A 2025 
000054CC  30        
000054CD  3878 0D0A 8531          dc.b      56,120,13,10,0
000054D1  00        
                    8532   @m68kde~1_101:
000054D2  0D0A 4272 8533          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000054D6  6561 6B20 
000054DA  506F 696E 
000054DE  74        
000054DF  2053 6574 8534          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000054E3  2061 7420 
000054E7  4164 6472 
000054EB  65        
000054EC  7373 3A20 8535          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000054F0  5B24 2530 
000054F4  3878 5D00 
                    8536   @m68kde~1_102:
000054F8  0D0A 4E6F 8537          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000054FC  2046 5245 
00005500  4520 5761 
00005504  7463      
00005506  6820 506F 8538          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
0000550A  696E 7473 
0000550E  2E2E 2E2E 
00005512  2E        
00005513  00        8539          dc.b      0
                    8540   @m68kde~1_103:
00005514  0D0A 5761 8541          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005518  7463 6820 
0000551C  506F 696E 
00005520  74        
00005521  2041 6464 8542          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005525  7265 7373 
00005529  3A20 00   
                    8543   @m68kde~1_104:
0000552C  0D0A 4572 8544          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00005530  726F 723A 
00005534  2057 6174 
00005538  63        
00005539  6820 506F 8545          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
0000553D  696E 7420 
00005541  416C 7265 
00005545  6164 7920 8546          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00005549  5365 7420 
0000554D  6174 2041 
00005551  64        
00005552  6472 6573 8547          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00005556  7320 3A20 
0000555A  2530 3878 
0000555E  0D        
0000555F  0A00      8548          dc.b      10,0
                    8549   @m68kde~1_105:
00005562  0D0A 5761 8550          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005566  7463 6820 
0000556A  506F 696E 
0000556E  74        
0000556F  2053 6574 8551          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005573  2061 7420 
00005577  4164 6472 
0000557B  65        
0000557C  7373 3A20 8552          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005580  5B24 2530 
00005584  3878 5D00 
                    8553   @m68kde~1_106:
00005588  0D0A 0D0A 8554          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
0000558C  0D0A 0D0A 
00005590  4042 5245 
00005594  414B 50   
00005597  4F49 4E54 8555          dc.b      79,73,78,84,0
0000559B  00        
                    8556   @m68kde~1_107:
0000559C  0D0A 5369 8557          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000055A0  6E67 6C65 
000055A4  2053 7465 
000055A8  70        
000055A9  203A 205B 8558          dc.b      32,58,32,91,79,78,93,0
000055AD  4F4E 5D00 
                    8559   @m68kde~1_108:
000055B2  0D0A 4272 8560          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000055B6  6561 6B50 
000055BA  6F69 6E74 
000055BE  73        
000055BF  203A 205B 8561          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000055C3  456E 6162 
000055C7  6C65 645D 
000055CB  00        
                    8562   @m68kde~1_109:
000055CC  0D0A 5072 8563          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000055D0  6573 7320 
000055D4  3C45 5343 
000055D8  3E20      
000055DA  746F 2052 8564          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000055DE  6573 756D 
000055E2  6520 5573 
000055E6  6572 2050 8565          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
000055EA  726F 6772 
000055EE  616D 0D0A 
000055F2  00        
                    8566   @m68kde~1_110:
000055F4  0D0A 556E 8567          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000055F8  6B6E 6F77 
000055FC  6E20 436F 
00005600  6D        
00005601  6D61 6E64 8568          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00005605  2E2E 2E2E 
00005609  2E0D 0A00 
                    8569   @m68kde~1_111:
0000560E  0D0A 5072 8570          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00005612  6F67 7261 
00005616  6D20 456E 
0000561A  64        
0000561B  6564 2028 8571          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
0000561F  5452 4150 
00005623  2023 3135 
00005627  292E      
00005629  2E2E 2E00 8572          dc.b      46,46,46,0
                    8573   @m68kde~1_112:
0000562E  0D0A 4B69 8574          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00005632  6C6C 2041 
00005636  6C6C 2042 
0000563A  72        
0000563B  6561 6B20 8575          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
0000563F  506F 696E 
00005643  7473 2E2E 
00005647  2E        
00005648  2879 2F6E 8576          dc.b      40,121,47,110,41,63,0
0000564C  293F 00   
                    8577   @m68kde~1_113:
00005650  0D0A 4B69 8578          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00005654  6C6C 2041 
00005658  6C6C 2057 
0000565C  61        
0000565D  7463 6820 8579          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00005661  506F 696E 
00005665  7473 2E2E 
00005669  2E        
0000566A  2879 2F6E 8580          dc.b      40,121,47,110,41,63,0
0000566E  293F 00   
                    8581   @m68kde~1_114:
00005672  0D0A 2D2D 8582          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00005676  2D2D 2D2D 
0000567A  2D2D 2D2D 
0000567E  2D2D 2D   
00005681  2D2D 2D2D 8583          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005685  2D2D 2D2D 
00005689  2D2D 2D2D 
0000568D  2D2D 2D   
00005690  2D2D 2D2D 8584          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005694  2D2D 2D2D 
00005698  2D2D 2D2D 
0000569C  2D2D 2D   
0000569F  2D2D 2D2D 8585          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000056A3  2D2D 2D2D 
000056A7  2D2D 2D2D 
000056AB  2D2D 2D   
000056AE  2D2D 2D2D 8586          dc.b      45,45,45,45,45,45,0
000056B2  2D2D 00   
                    8587   @m68kde~1_115:
000056B6  0D0A 2020 8588          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000056BA  4465 6275 
000056BE  6767 6572 
000056C2  20        
000056C3  436F 6D6D 8589          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
000056C7  616E 6420 
000056CB  5375 6D6D 
000056CF  6172 7900 8590          dc.b      97,114,121,0
                    8591   @m68kde~1_116:
000056D4  0D0A 2020 8592          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
000056D8  2E28 7265 
000056DC  6729 2020 
000056E0  2020      
000056E2  2020 202D 8593          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
000056E6  2043 6861 
000056EA  6E67 6520 
000056EE  5265      
000056F0  6769 7374 8594          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
000056F4  6572 733A 
000056F8  2065 2E67 
000056FC  2041 302D 8595          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00005700  4137 2C44 
00005704  302D 4437 
00005708  2C50 43   
0000570B  2C53 5350 8596          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
0000570F  2C55 5350 
00005713  2C53 5200 
                    8597   @m68kde~1_117:
00005718  0D0A 2020 8598          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
0000571C  4244 2F42 
00005720  532F 4243 
00005724  2F42 4B   
00005727  2020 2D20 8599          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
0000572B  4272 6561 
0000572F  6B20 506F 
00005733  69        
00005734  6E74 3A20 8600          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00005738  4469 7370 
0000573C  6C61 792F 
00005740  53        
00005741  6574 2F43 8601          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00005745  6C65 6172 
00005749  2F4B 696C 
0000574D  6C        
0000574E  00        8602          dc.b      0
                    8603   @m68kde~1_118:
00005750  0D0A 2020 8604          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00005754  4320 2020 
00005758  2020 2020 
0000575C  2020 20   
0000575F  2020 2D20 8605          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00005763  436F 7079 
00005767  2050 726F 
0000576B  67        
0000576C  7261 6D20 8606          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00005770  6672 6F6D 
00005774  2046 6C61 
00005778  73        
00005779  6820 746F 8607          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
0000577D  204D 6169 
00005781  6E20 4D65 
00005785  6D        
00005786  6F72 7900 8608          dc.b      111,114,121,0
                    8609   @m68kde~1_119:
0000578A  0D0A 2020 8610          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
0000578E  4420 2020 
00005792  2020 2020 
00005796  2020 20   
00005799  2020 2D20 8611          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
0000579D  4475 6D70 
000057A1  204D 656D 
000057A5  6F        
000057A6  7279 2043 8612          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000057AA  6F6E 7465 
000057AE  6E74 7320 
000057B2  746F 2053 8613          dc.b      116,111,32,83,99,114,101,101,110,0
000057B6  6372 6565 
000057BA  6E00      
                    8614   @m68kde~1_120:
000057BC  0D0A 2020 8615          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
000057C0  4520 2020 
000057C4  2020 2020 
000057C8  2020 20   
000057CB  2020 2D20 8616          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
000057CF  456E 7465 
000057D3  7220 5374 
000057D7  72        
000057D8  696E 6720 8617          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
000057DC  696E 746F 
000057E0  204D 656D 
000057E4  6F72 7900 8618          dc.b      111,114,121,0
                    8619   @m68kde~1_121:
000057E8  0D0A 2020 8620          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
000057EC  4620 2020 
000057F0  2020 2020 
000057F4  2020 20   
000057F7  2020 2D20 8621          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
000057FB  4669 6C6C 
000057FF  204D 656D 
00005803  6F        
00005804  7279 2077 8622          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00005808  6974 6820 
0000580C  4461 7461 
00005810  00        
                    8623   @m68kde~1_122:
00005812  0D0A 2020 8624          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00005816  4720 2020 
0000581A  2020 2020 
0000581E  2020 20   
00005821  2020 2D20 8625          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00005825  476F 2050 
00005829  726F 6772 
0000582D  61        
0000582E  6D20 5374 8626          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00005832  6172 7469 
00005836  6E67 2061 
0000583A  74        
0000583B  2041 6464 8627          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
0000583F  7265 7373 
00005843  3A20 2425 
00005847  30        
00005848  3858 00   8628          dc.b      56,88,0
                    8629   @m68kde~1_123:
0000584C  0D0A 2020 8630          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00005850  4C20 2020 
00005854  2020 2020 
00005858  2020 20   
0000585B  2020 2D20 8631          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
0000585F  4C6F 6164 
00005863  2050 726F 
00005867  67        
00005868  7261 6D20 8632          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
0000586C  282E 4845 
00005870  5820 6669 
00005874  6C        
00005875  6529 2066 8633          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00005879  726F 6D20 
0000587D  4C61 7074 
00005881  6F        
00005882  7000      8634          dc.b      112,0
                    8635   @m68kde~1_124:
00005884  0D0A 2020 8636          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00005888  4D20 2020 
0000588C  2020 2020 
00005890  2020 20   
00005893  2020 2D20 8637          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00005897  4D65 6D6F 
0000589B  7279 2045 
0000589F  78        
000058A0  616D 696E 8638          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
000058A4  6520 616E 
000058A8  6420 4368 
000058AC  61        
000058AD  6E67 6500 8639          dc.b      110,103,101,0
                    8640   @m68kde~1_125:
000058B2  0D0A 2020 8641          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
000058B6  5020 2020 
000058BA  2020 2020 
000058BE  2020 20   
000058C1  2020 2D20 8642          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
000058C5  5072 6F67 
000058C9  7261 6D20 
000058CD  46        
000058CE  6C61 7368 8643          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
000058D2  204D 656D 
000058D6  6F72 7920 
000058DA  7769 7468 8644          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
000058DE  2055 7365 
000058E2  7220 5072 
000058E6  6F67 7261 8645          dc.b      111,103,114,97,109,0
000058EA  6D00      
                    8646   @m68kde~1_126:
000058EC  0D0A 2020 8647          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
000058F0  5220 2020 
000058F4  2020 2020 
000058F8  2020 20   
000058FB  2020 2D20 8648          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
000058FF  4469 7370 
00005903  6C61 7920 
00005907  36        
00005908  3830 3030 8649          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
0000590C  2052 6567 
00005910  6973 7465 
00005914  72        
00005915  7300      8650          dc.b      115,0
                    8651   @m68kde~1_127:
00005918  0D0A 2020 8652          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
0000591C  5320 2020 
00005920  2020 2020 
00005924  2020 20   
00005927  2020 2D20 8653          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
0000592B  546F 6767 
0000592F  6C65 204F 
00005933  4E        
00005934  2F4F 4646 8654          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00005938  2053 696E 
0000593C  676C 6520 
00005940  53        
00005941  7465 7020 8655          dc.b      116,101,112,32,77,111,100,101,0
00005945  4D6F 6465 
00005949  00        
                    8656   @m68kde~1_128:
0000594A  0D0A 2020 8657          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
0000594E  544D 2020 
00005952  2020 2020 
00005956  2020 20   
00005959  2020 2D20 8658          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
0000595D  5465 7374 
00005961  204D 656D 
00005965  6F        
00005966  7279 00   8659          dc.b      114,121,0
                    8660   @m68kde~1_129:
0000596A  0D0A 2020 8661          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
0000596E  5453 2020 
00005972  2020 2020 
00005976  2020 20   
00005979  2020 2D20 8662          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
0000597D  5465 7374 
00005981  2053 7769 
00005985  74        
00005986  6368 6573 8663          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
0000598A  3A20 5357 
0000598E  372D 3000 
                    8664   @m68kde~1_130:
00005992  0D0A 2020 8665          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00005996  5444 2020 
0000599A  2020 2020 
0000599E  2020 20   
000059A1  2020 2D20 8666          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
000059A5  5465 7374 
000059A9  2044 6973 
000059AD  70        
000059AE  6C61 7973 8667          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
000059B2  3A20 4C45 
000059B6  4473 2061 
000059BA  6E        
000059BB  6420 372D 8668          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
000059BF  5365 676D 
000059C3  656E 7400 
                    8669   @m68kde~1_131:
000059C8  0D0A 2020 8670          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
000059CC  5744 2F57 
000059D0  532F 5743 
000059D4  2F57 4B   
000059D7  2020 2D20 8671          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
000059DB  5761 7463 
000059DF  6820 506F 
000059E3  696E      
000059E5  743A 2044 8672          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
000059E9  6973 706C 
000059ED  6179 2F53 
000059F1  65        
000059F2  742F 436C 8673          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
000059F6  6561 722F 
000059FA  4B69 6C6C 
000059FE  00        
                    8674   @m68kde~1_132:
00005A00  0D0A 2300 8675          dc.b      13,10,35,0
                    8676   @m68kde~1_133:
00005A04  0D0A 5072 8677          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00005A08  6F67 7261 
00005A0C  6D20 5275 
00005A10  6E        
00005A11  6E69 6E67 8678          dc.b      110,105,110,103,46,46,46,46,46,0
00005A15  2E2E 2E2E 
00005A19  2E00      
                    8679   @m68kde~1_134:
00005A1C  0D0A 5072 8680          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00005A20  6573 7320 
00005A24  3C52 4553 
00005A28  4554      
00005A2A  3E20 6275 8681          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00005A2E  7474 6F6E 
00005A32  203C 4B65 
00005A36  79        
00005A37  303E 206F 8682          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00005A3B  6E20 4445 
00005A3F  3120 746F 
00005A43  2073      
00005A45  746F 7000 8683          dc.b      116,111,112,0
                    8684   @m68kde~1_135:
00005A4A  0D0A 4572 8685          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00005A4E  726F 723A 
00005A52  2050 7265 
00005A56  73        
00005A57  7320 2747 8686          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00005A5B  2720 6669 
00005A5F  7273 7420 
00005A63  74        
00005A64  6F20 7374 8687          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00005A68  6172 7420 
00005A6C  7072 6F67 
00005A70  7261 6D00 8688          dc.b      114,97,109,0
                    8689   @m68kde~1_136:
00005A74  0D0A 5369 8690          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005A78  6E67 6C65 
00005A7C  2053 7465 
00005A80  70        
00005A81  2020 3A5B 8691          dc.b      32,32,58,91,79,78,93,0
00005A85  4F4E 5D00 
                    8692   @m68kde~1_137:
00005A8A  0D0A 5072 8693          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00005A8E  6573 7320 
00005A92  2747 2720 
00005A96  74        
00005A97  6F20 5472 8694          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00005A9B  6163 6520 
00005A9F  5072 6F67 
00005AA3  72        
00005AA4  616D 2066 8695          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00005AA8  726F 6D20 
00005AAC  6164 6472 
00005AB0  6573 7320 8696          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00005AB4  2425 582E 
00005AB8  2E2E 2E2E 
00005ABC  00        
                    8697   @m68kde~1_138:
00005ABE  0D0A 5075 8698          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00005AC2  7368 203C 
00005AC6  5245 5345 
00005ACA  5420      
00005ACC  4275 7474 8699          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00005AD0  6F6E 3E20 
00005AD4  746F 2053 
00005AD8  74        
00005AD9  6F70 2E2E 8700          dc.b      111,112,46,46,46,46,46,0
00005ADD  2E2E 2E00 
                    8701   @m68kde~1_139:
00005AE2  0D0A 5369 8702          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005AE6  6E67 6C65 
00005AEA  2053 7465 
00005AEE  70        
00005AEF  203A 205B 8703          dc.b      32,58,32,91,79,70,70,93,0
00005AF3  4F46 465D 
00005AF7  00        
                    8704   @m68kde~1_140:
00005AF8  0D0A 4272 8705          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005AFC  6561 6B20 
00005B00  506F 696E 
00005B04  74        
00005B05  7320 3A5B 8706          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00005B09  456E 6162 
00005B0D  6C65 645D 
00005B11  00        
                    8707   @m68kde~1_141:
00005B12  0D0A 5072 8708          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005B16  6573 7320 
00005B1A  3C45 5343 
00005B1E  3E20      
00005B20  746F 2052 8709          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005B24  6573 756D 
00005B28  6520 5573 
00005B2C  6572 2050 8710          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00005B30  726F 6772 
00005B34  616D 2E2E 
00005B38  2E        
00005B39  2E2E 00   8711          dc.b      46,46,0
                    8712   @m68kde~1_142:
00005B3C  0D0A 5369 8713          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005B40  6E67 6C65 
00005B44  2053 7465 
00005B48  70        
00005B49  2020 3A5B 8714          dc.b      32,32,58,91,79,70,70,93,0
00005B4D  4F46 465D 
00005B51  00        
                    8715   @m68kde~1_143:
00005B52  0D0A 0D0A 8716          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005B56  5072 6F67 
00005B5A  7261 6D20 
00005B5E  41        
00005B5F  424F 5254 8717          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00005B63  2021 2121 
00005B67  2121 210D 
00005B6B  0A00      
                    8718   @m68kde~1_144:
00005B6E  2573 0D0A 8719          dc.b      37,115,13,10,0
00005B72  00        
                    8720   @m68kde~1_145:
00005B74  0D0A 0D0A 8721          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005B78  5072 6F67 
00005B7C  7261 6D20 
00005B80  41        
00005B81  424F 5254 8722          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005B85  2021 2121 
00005B89  2121 00   
                    8723   @m68kde~1_146:
00005B8C  0D0A 556E 8724          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005B90  6861 6E64 
00005B94  6C65 6420 
00005B98  49        
00005B99  6E74 6572 8725          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00005B9D  7275 7074 
00005BA1  3A20 4952 
00005BA5  5125 6420 8726          dc.b      81,37,100,32,33,33,33,33,33,0
00005BA9  2121 2121 
00005BAD  2100      
                    8727   @m68kde~1_147:
00005BB0  4144 4452 8728          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00005BB4  4553 5320 
00005BB8  4552 524F 
00005BBC  523A 20   
00005BBF  3136 206F 8729          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005BC3  7220 3332 
00005BC7  2042 6974 
00005BCB  2054      
00005BCD  7261 6E73 8730          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00005BD1  6665 7220 
00005BD5  746F 2F66 
00005BD9  726F 6D20 8731          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00005BDD  616E 204F 
00005BE1  4444 2041 
00005BE5  64        
00005BE6  6472 6573 8732          dc.b      100,114,101,115,115,46,46,46,46,0
00005BEA  732E 2E2E 
00005BEE  2E00      
                    8733   @m68kde~1_148:
00005BF0  556E 6861 8734          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00005BF4  6E64 6C65 
00005BF8  6420 5472 
00005BFC  6170 2021 8735          dc.b      97,112,32,33,33,33,33,33,0
00005C00  2121 2121 
00005C04  00        
                    8736   @m68kde~1_149:
00005C06  4255 5320 8737          dc.b      66,85,83,32,69,114,114,111,114,33,0
00005C0A  4572 726F 
00005C0E  7221 00   
                    8738   @m68kde~1_150:
00005C12  4144 4452 8739          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00005C16  4553 5320 
00005C1A  4572 726F 
00005C1E  7221      
00005C20  00        8740          dc.b      0
                    8741   @m68kde~1_151:
00005C22  494C 4C45 8742          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00005C26  4741 4C20 
00005C2A  494E 5354 
00005C2E  5255 43   
00005C31  5449 4F4E 8743          dc.b      84,73,79,78,0
00005C35  00        
                    8744   @m68kde~1_152:
00005C36  4449 5649 8745          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00005C3A  4445 2042 
00005C3E  5920 5A45 
00005C42  524F 00   
                    8746   @m68kde~1_153:
00005C46  2743 484B 8747          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00005C4A  2720 494E 
00005C4E  5354 5255 
00005C52  4354 49   
00005C55  4F4E 00   8748          dc.b      79,78,0
                    8749   @m68kde~1_154:
00005C58  5452 4150 8750          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00005C5C  5620 494E 
00005C60  5354 5255 
00005C64  4354 49   
00005C67  4F4E 00   8751          dc.b      79,78,0
                    8752   @m68kde~1_155:
00005C6A  5052 4956 8753          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00005C6E  494C 4547 
00005C72  4520 5649 
00005C76  4F4C 41   
00005C79  5449 4F4E 8754          dc.b      84,73,79,78,0
00005C7D  00        
                    8755   @m68kde~1_156:
00005C7E  554E 494E 8756          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005C82  4954 4941 
00005C86  4C49 5345 
00005C8A  4420 49   
00005C8D  5251 00   8757          dc.b      82,81,0
                    8758   @m68kde~1_157:
00005C90  5350 5552 8759          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005C94  494F 5553 
00005C98  2049 5251 
00005C9C  00        
                    8760   @m68kde~1_158:
00005C9E  0D0A 5374 8761          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005CA2  6172 7420 
00005CA6  4164 6472 
00005CAA  65        
00005CAB  7373 2069 8762          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00005CAF  6E20 4D65 
00005CB3  6D6F 7279 
00005CB7  3A20 00   8763          dc.b      58,32,0
                    8764   @m68kde~1_159:
00005CBA  0D0A 456E 8765          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00005CBE  7465 7220 
00005CC2  5374 7269 
00005CC6  6E        
00005CC7  6720 2845 8766          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00005CCB  5343 2074 
00005CCF  6F20 656E 
00005CD3  64        
00005CD4  2920 3A00 8767          dc.b      41,32,58,0
                    8768   @m68kde~1_160:
00005CD8  0A45 6E74 8769          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
00005CDC  6572 2077 
00005CE0  6861 7420 
00005CE4  73        
00005CE5  697A 6520 8770          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
00005CE9  6F66 206D 
00005CED  656D 6F72 
00005CF1  7920 796F 8771          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
00005CF5  7520 7761 
00005CF9  6E74 2074 
00005CFD  6F20 7265 8772          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00005D01  6164 2F77 
00005D05  7269 7465 
00005D09  0A20 4279 8773          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
00005D0D  7465 203D 
00005D11  2030 0A20 
00005D15  576F      
00005D17  7264 203D 8774          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
00005D1B  2031 0A20 
00005D1F  4C6F 6E67 
00005D23  20        
00005D24  576F 7264 8775          dc.b      87,111,114,100,32,61,32,50,10,0
00005D28  203D 2032 
00005D2C  0A00      
                    8776   @m68kde~1_161:
00005D2E  0A45 6E74 8777          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005D32  6572 2077 
00005D36  6869 6368 
00005D3A  2064 6174 8778          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005D3E  6120 7061 
00005D42  7474 6572 
00005D46  6E        
00005D47  2079 6F75 8779          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005D4B  2077 616E 
00005D4F  7420 746F 
00005D53  2077 7269 8780          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005D57  7465 2069 
00005D5B  6E74 6F20 
00005D5F  6D65 6D6F 8781          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
00005D63  7279 0A20 
00005D67  3078 3030 
00005D6B  20        
00005D6C  3D20 300A 8782          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
00005D70  2030 7842 
00005D74  3220 3D20 
00005D78  310A 20   
00005D7B  3078 4333 8783          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
00005D7F  203D 2032 
00005D83  0A20 3078 
00005D87  4434      
00005D89  203D 2033 8784          dc.b      32,61,32,51,10,0
00005D8D  0A00      
                    8785   @m68kde~1_162:
00005D90  0A45 6E74 8786          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005D94  6572 2077 
00005D98  6869 6368 
00005D9C  2064 6174 8787          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005DA0  6120 7061 
00005DA4  7474 6572 
00005DA8  6E        
00005DA9  2079 6F75 8788          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005DAD  2077 616E 
00005DB1  7420 746F 
00005DB5  2077 7269 8789          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005DB9  7465 2069 
00005DBD  6E74 6F20 
00005DC1  6D65 6D6F 8790          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005DC5  7279 0A20 
00005DC9  3078 3030 
00005DCD  30        
00005DCE  3020 3D20 8791          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
00005DD2  300A 2030 
00005DD6  7831 3233 
00005DDA  3420 3D   
00005DDD  2031 0A20 8792          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
00005DE1  3078 4131 
00005DE5  4232 203D 
00005DE9  2032 0A   
00005DEC  2030 7843 8793          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
00005DF0  3344 3420 
00005DF4  3D20 330A 
00005DF8  00        
                    8794   @m68kde~1_163:
00005DFA  0A45 6E74 8795          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005DFE  6572 2077 
00005E02  6869 6368 
00005E06  2064 6174 8796          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005E0A  6120 7061 
00005E0E  7474 6572 
00005E12  6E        
00005E13  2079 6F75 8797          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005E17  2077 616E 
00005E1B  7420 746F 
00005E1F  2077 7269 8798          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005E23  7465 2069 
00005E27  6E74 6F20 
00005E2B  6D65 6D6F 8799          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005E2F  7279 0A20 
00005E33  3078 3030 
00005E37  30        
00005E38  305F 3030 8800          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
00005E3C  3030 203D 
00005E40  2030 0A20 
00005E44  3078 41   
00005E47  4142 425F 8801          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
00005E4B  4343 4444 
00005E4F  203D 2031 
00005E53  0A20 30   
00005E56  7831 3132 8802          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
00005E5A  325F 3333 
00005E5E  3434 203D 
00005E62  2032 0A   
00005E65  2030 7837 8803          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
00005E69  3635 345F 
00005E6D  3332 3130 
00005E71  203D 20   
00005E74  330A 00   8804          dc.b      51,10,0
                    8805   @m68kde~1_164:
00005E78  0A50 726F 8806          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
00005E7C  7669 6465 
00005E80  2053 7461 
00005E84  72        
00005E85  7420 4164 8807          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
00005E89  6472 6573 
00005E8D  7320 696E 
00005E91  2068 6578 8808          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
00005E95  2028 646F 
00005E99  206E 6F74 
00005E9D  2075 7365 8809          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
00005EA1  2030 7820 
00005EA5  7072 6566 
00005EA9  6978 290A 8810          dc.b      105,120,41,10,48,120,0
00005EAD  3078 00   
                    8811   @m68kde~1_165:
00005EB0  0A50 726F 8812          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
00005EB4  7669 6465 
00005EB8  2045 6E64 
00005EBC  2041 6464 8813          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
00005EC0  7265 7373 
00005EC4  2069 6E20 
00005EC8  6865 7820 8814          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
00005ECC  2864 6F20 
00005ED0  6E6F 7420 
00005ED4  7573 6520 8815          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
00005ED8  3078 2070 
00005EDC  7265 6669 
00005EE0  7829 0A30 8816          dc.b      120,41,10,48,120,0
00005EE4  7800      
                    8817   @m68kde~1_166:
00005EE6  0A53 7461 8818          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
00005EEA  7274 2041 
00005EEE  6464 7265 
00005EF2  73        
00005EF3  7320 3078 8819          dc.b      115,32,48,120,37,48,56,120,10,0
00005EF7  2530 3878 
00005EFB  0A00      
                    8820   @m68kde~1_167:
00005EFE  0A45 6E64 8821          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
00005F02  2041 6464 
00005F06  7265 7373 
00005F0A  3A20 3078 8822          dc.b      58,32,48,120,37,48,56,120,10,0
00005F0E  2530 3878 
00005F12  0A00      
                    8823   @m68kde~1_168:
00005F14  4552 524F 8824          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
00005F18  522E 2E2E 
00005F1C  2041 6464 
00005F20  7265      
00005F22  7373 2030 8825          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
00005F26  7825 7820 
00005F2A  6973 2062 
00005F2E  65        
00005F2F  796F 6E64 8826          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005F33  2074 6865 
00005F37  206D 656D 
00005F3B  6F72 7920 8827          dc.b      111,114,121,32,114,97,110,103,101,10,0
00005F3F  7261 6E67 
00005F43  650A 00   
                    8828   @m68kde~1_169:
00005F46  4552 524F 8829          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
00005F4A  522E 2E2E 
00005F4E  2056 616C 
00005F52  7565      
00005F54  2077 7269 8830          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
00005F58  7474 656E 
00005F5C  2074 6F20 
00005F60  6164 6472 8831          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00005F64  6573 7320 
00005F68  3078 2578 
00005F6C  203D 3D20 8832          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00005F70  3078 2578 
00005F74  2E20 5661 
00005F78  6C75      
00005F7A  6520 4578 8833          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
00005F7E  7065 6374 
00005F82  6564 3A20 
00005F86  30        
00005F87  7825 780A 8834          dc.b      120,37,120,10,0
00005F8B  00        
                    8835   @m68kde~1_170:
00005F8C  4164 6472 8836          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005F90  6573 733A 
00005F94  2030 7825 
00005F98  78        
00005F99  2056 616C 8837          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
00005F9D  7565 3A20 
00005FA1  3078 2530 
00005FA5  3258      
00005FA7  0A00      8838          dc.b      10,0
                    8839   @m68kde~1_171:
00005FAA  4164 6472 8840          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005FAE  6573 733A 
00005FB2  2030 7825 
00005FB6  78        
00005FB7  2056 616C 8841          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
00005FBB  7565 3A20 
00005FBF  3078 2530 
00005FC3  3458      
00005FC5  0A00      8842          dc.b      10,0
                    8843   @m68kde~1_172:
00005FC8  4164 6472 8844          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005FCC  6573 733A 
00005FD0  2030 7825 
00005FD4  78        
00005FD5  2056 616C 8845          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
00005FD9  7565 3A20 
00005FDD  3078 2530 
00005FE1  3858      
00005FE3  0A00      8846          dc.b      10,0
                    8847   @m68kde~1_173:
00005FE6  4445 312D 8848          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00005FEA  3638 6B20 
00005FEE  4275 6720 
00005FF2  5631      
00005FF4  2E37 3700 8849          dc.b      46,55,55,0
                    8850   @m68kde~1_174:
00005FF8  436F 7079 8851          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00005FFC  7269 6768 
00006000  7420 2843 
00006004  2920 504A 8852          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00006008  2044 6176 
0000600C  6965 7320 
00006010  3230      
00006012  3136 00   8853          dc.b      49,54,0
                    8854   @m68kde~1_175:
00006016  0D0A 5275 8855          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
0000601A  6E6E 696E 
0000601E  672E 2E2E 
00006022  2E        
00006023  2E00      8856          dc.b      46,0
                    8857   @m68kde~1_176:
00006026  5275 6E6E 8858          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
0000602A  696E 672E 
0000602E  2E2E 2E2E 
00006032  00        
                    8859   @m68kde~1_177:
00006034  4279 3A20 8860          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00006038  504A 2044 
0000603C  6176 6965 
00006040  73        
00006041  00        8861          dc.b      0
                    8862   @m68kde~1_178:
00006042  0D0A 2573 8863          dc.b      13,10,37,115,0
00006046  00        
                    8864   @m68kde~1_179:
00006048  0A20 5374 8865          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
0000604C  7564 656E 
00006050  7420 4E61 
00006054  6D        
00006055  6573 3A0A 8866          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
00006059  205A 6163 
0000605D  6861 7269 
00006061  61        
00006062  6820 4A6F 8867          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
00006066  7365 7068 
0000606A  3A20 3435 
0000606E  35        
0000606F  3030 3035 8868          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00006073  3520 0A20 
00006077  556D 6169 
0000607B  7220      
0000607D  4D61 7A68 8869          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
00006081  6172 3A20 
00006085  3230 3333 
00006089  3333      
0000608B  3038 0A00 8870          dc.b      48,56,10,0
                    8871          section   data
00006090            8872                   align
          0000 6090 8873   DataStart       equ       *
                    8874   
                    8875   *********************************************************************************************************
                    8876   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8877   * to ram as part of the CStart routine in this file
                    8878   *********************************************************************************************************
                    8879   
                    8880   @vsscanf_bufx:
00006090  0B00 0546 8881          dc.l      @vsscanf_buf
                    8882   @vsscanf_1:
00006094  0A00      8883          dc.b      10,0
                    8884   __ctype:
00006096  0040 4040 8885          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
0000609A  4040 4040 
0000609E  4040 5050 
000060A2  5050 50   
000060A5  4040 4040 8886          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000060A9  4040 4040 
000060AD  4040 4040 
000060B1  4040 40   
000060B4  4040 40D0 8887          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000060B8  A0A0 A0A0 
000060BC  A0A0 A0A0 
000060C0  A0A0 A0A0 8888          dc.b      160,160,160,160,160,160,160,140,140,140,140
000060C4  A0A0 A08C 
000060C8  8C8C 8C   
000060CB  8C8C 8C8C 8889          dc.b      140,140,140,140,140,140,160,160,160,160,160
000060CF  8C8C A0A0 
000060D3  A0A0 A0   
000060D6  A0A0 8A8A 8890          dc.b      160,160,138,138,138,138,138,138,130,130,130
000060DA  8A8A 8A8A 
000060DE  8282 82   
000060E1  8282 8282 8891          dc.b      130,130,130,130,130,130,130,130,130,130,130
000060E5  8282 8282 
000060E9  8282 82   
000060EC  8282 8282 8892          dc.b      130,130,130,130,130,130,160,160,160,160,160
000060F0  8282 A0A0 
000060F4  A0A0 A0   
000060F7  A089 8989 8893          dc.b      160,137,137,137,137,137,137,129,129,129,129
000060FB  8989 8981 
000060FF  8181 81   
00006102  8181 8181 8894          dc.b      129,129,129,129,129,129,129,129,129,129,129
00006106  8181 8181 
0000610A  8181 81   
0000610D  8181 8181 8895          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00006111  81A0 A0A0 
00006115  A040 0000 
00006119  00        
0000611A  0000 0000 8896          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000611E  0000 0000 
00006122  0000 0000 
00006126  0000 0000 
0000612A  0000 0000 
0000612E  0000      
00006130  0000 0000 8897          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006134  0000 0000 
00006138  0000 0000 
0000613C  0000 0000 
00006140  0000 0000 
00006144  0000      
00006146  0000 0000 8898          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000614A  0000 0000 
0000614E  0000 0000 
00006152  0000 0000 
00006156  0000 0000 
0000615A  0000      
0000615C  0000 0000 8899          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006160  0000 0000 
00006164  0000 0000 
00006168  0000 0000 
0000616C  0000 0000 
00006170  0000      
00006172  0000 0000 8900          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006176  0000 0000 
0000617A  0000 0000 
0000617E  0000 0000 
00006182  0000 0000 
00006186  0000      
00006188  0000 0000 8901          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000618C  0000 0000 
00006190  0000 0000 
00006194  0000 00   
                    8902   @itoa_1:
00006198  2D32 3134 8903          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0000619C  3734 3833 
000061A0  3634 3800 
                    8904          section   bss
000061A4            8905                   align
          0000 61A4 8906   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8907   
                    8908   *********************************************************************************************************
                    8909   * Section for Uninitialised Data held in ROM as constants
                    8910   *********************************************************************************************************
                    8911   
0B000000            8912                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 8913   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8914   
                    8915   
0B000000            8916   bss             org       bss
                    8917   
                    8918   *********************************************************************************************************
                    8919   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8920   * install the exception handler using the C function InstallExceptionHandler()
                    8921   *********************************************************************************************************
                    8922   
                    8923   
                    8924   
0B000000            8925   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            8926   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            8927   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            8928   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            8929   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            8930   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            8931   VCheck           ds.l    1      ditto
0B00001C            8932   VTrapV           ds.l    1      ditto
0B000020            8933   VPrivilege       ds.l    1      ditto
0B000024            8934   VTrace           ds.l    1
0B000028            8935   VLine1010emul    ds.l    1
0B00002C            8936   VLine1111emul    ds.l    1
0B000030            8937   VUnassigned1     ds.l    1
0B000034            8938   VUnassigned2     ds.l    1
0B000038            8939   VUnassigned3     ds.l    1
0B00003C            8940   VUninit_IRQ      ds.l    1
0B000040            8941   VUnassigned4     ds.l    1
0B000044            8942   VUnassigned5     ds.l    1
0B000048            8943   VUnassigned6     ds.l    1
0B00004C            8944   VUnassigned7     ds.l    1
0B000050            8945   VUnassigned8     ds.l    1
0B000054            8946   VUnassigned9     ds.l    1
0B000058            8947   VUnassigned10    ds.l    1
0B00005C            8948   VUnassigned11    ds.l    1
0B000060            8949   VSpuriousIRQ     ds.l    1
                    8950   
                    8951   * Interrupt handlers Vector 25-31
0B000064            8952   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            8953   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            8954   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            8955   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            8956   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            8957   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            8958   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8959   
                    8960   * Trap Handler vectors 32-47
0B000080            8961   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            8962   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            8963   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            8964   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            8965   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            8966   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            8967   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            8968   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            8969   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            8970   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            8971   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            8972   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            8973   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            8974   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            8975   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            8976   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8977   
                    8978   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8979   
                    8980   ***********************************************************************************************************
                    8981   * Other Variables
                    8982   ***********************************************************************************************************
                    8983   *__DebugA5       ds.l    1
                    8984   *__UserA5        ds.l    1
                    8985   
                    8986   ***********************************************************************************************************
0B0000C0            8987   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            8988   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            8989   __heap:         ds.l    0       ; pointers for malloc functions
                    8990   
                    8991   *__himem:       ds.l    himem            ; highest memory location + 1
                    8992   *__stklen:      ds.l    stklen           ; default stack size
                    8993   
                    8994   *********************************************************************************************************
                    8995   * Section for Heap
                    8996   *********************************************************************************************************
                    8997   
                    8998   _i:
0B0000C4            8999          ds.b      4
                    9000   _x:
0B0000C8            9001          ds.b      4
                    9002   _y:
0B0000CC            9003          ds.b      4
                    9004   _z:
0B0000D0            9005          ds.b      4
                    9006   _PortA_Count:
0B0000D4            9007          ds.b      4
                    9008   _Trace:
0B0000D8            9009          ds.b      4
                    9010   _GoFlag:
0B0000DC            9011          ds.b      4
                    9012   _Echo:
0B0000E0            9013          ds.b      4
                    9014   _d0:
0B0000E4            9015          ds.b      4
                    9016   _d1:
0B0000E8            9017          ds.b      4
                    9018   _d2:
0B0000EC            9019          ds.b      4
                    9020   _d3:
0B0000F0            9021          ds.b      4
                    9022   _d4:
0B0000F4            9023          ds.b      4
                    9024   _d5:
0B0000F8            9025          ds.b      4
                    9026   _d6:
0B0000FC            9027          ds.b      4
                    9028   _d7:
0B000100            9029          ds.b      4
                    9030   _a0:
0B000104            9031          ds.b      4
                    9032   _a1:
0B000108            9033          ds.b      4
                    9034   _a2:
0B00010C            9035          ds.b      4
                    9036   _a3:
0B000110            9037          ds.b      4
                    9038   _a4:
0B000114            9039          ds.b      4
                    9040   _a5:
0B000118            9041          ds.b      4
                    9042   _a6:
0B00011C            9043          ds.b      4
                    9044   _PC:
0B000120            9045          ds.b      4
                    9046   _SSP:
0B000124            9047          ds.b      4
                    9048   _USP:
0B000128            9049          ds.b      4
                    9050   _SR:
0B00012C            9051          ds.b      2
                    9052   _BreakPointAddress:
0B00012E            9053          ds.b      32
                    9054   _BreakPointInstruction:
0B00014E            9055          ds.b      16
                    9056   _BreakPointSetOrCleared:
0B00015E            9057          ds.b      32
                    9058   _InstructionSize:
0B00017E            9059          ds.b      4
                    9060   _WatchPointAddress:
0B000182            9061          ds.b      32
                    9062   _WatchPointSetOrCleared:
0B0001A2            9063          ds.b      32
                    9064   _WatchPointString:
0B0001C2            9065          ds.b      800
                    9066   _TempString:
0B0004E2            9067          ds.b      100
                    9068   @vsscanf_buf:
0B000546            9069          ds.b      80
                    9070          section   heap
0B000596            9071                   align
          0B00 0596 9072   bssEnd          equ *                   end of storage space for unitialised variables
                    9073   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 9074   heap   equ       *
0B000596            9075                    align
          0000 0000

Assembly errors: 0
