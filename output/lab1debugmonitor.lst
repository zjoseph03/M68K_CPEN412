680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 25 Feb 2025      Time: 15:20:09          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2AD4      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2184      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  383C      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  4212      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  4216      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  422C      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  422E      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  383C      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2E80      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  4230      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  426A      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  4282      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  428A      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  4290      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  4212      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  383C      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  4294      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  426A      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  42A8      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  42BE      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  42D2      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  383C      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  4302      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  2F7A      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2DB4      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2E80      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  4332      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4358      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  383C      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  437A      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  4396      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  43DC      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  43EE      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  2EEC      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  4400      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; void SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  110A      
000010D6  4E5E      1559          unlk      A6
000010D8  4E75      1560          rts
                    1561   ; // returnVal = SPI_Data;
                    1562   ; }
                    1563   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1564   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1565   ; int TestForSPITransmitDataComplete(void) {
                    1566   _TestForSPITransmitDataComplete:
                    1567   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1568   ; return (SPI_Status >> 7);
000010DA  1039 0040 1569          move.b    4227106,D0
000010DE  8022      
000010E0  C0BC 0000 1570          and.l     #255,D0
000010E4  00FF      
000010E6  EE88      1571          lsr.l     #7,D0
000010E8  4E75      1572          rts
                    1573   ; }
                    1574   ; /************************************************************************************
                    1575   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1576   ; ************************************************************************************/
                    1577   ; void SPI_Init(void)
                    1578   ; {
                    1579   _SPI_Init:
                    1580   ; //TODO
                    1581   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1582   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1583   ; //
                    1584   ; // Here are some settings we want to create
                    1585   ; //
                    1586   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1587   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1588   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1589   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1590   ; SPI_Control = 0x50; // 0101_0011
000010EA  13FC 0050 1591          move.b    #80,4227104
000010EE  0040 8020 
                    1592   ; SPI_Ext     = 0x0;  // 00_0000_00
000010F2  4239 0040 1593          clr.b     4227110
000010F6  8026      
                    1594   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
000010F8  13FC 00FF 1595          move.b    #255,4227112
000010FC  0040 8028 
                    1596   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001100  13FC 00C0 1597          move.b    #192,4227106
00001104  0040 8022 
00001108  4E75      1598          rts
                    1599   ; }
                    1600   ; /************************************************************************************
                    1601   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1602   ; ************************************************************************************/
                    1603   ; void WaitForSPITransmitComplete(void)
                    1604   ; {
                    1605   _WaitForSPITransmitComplete:
                    1606   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1607   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1608   ; // just in case they were set
                    1609   ; while (TestForSPITransmitDataComplete() == 0);
                    1610   WaitForSPITransmitComplete_1:
0000110A  4EB8 10DA 1611          jsr       _TestForSPITransmitDataComplete
0000110E  4A80      1612          tst.l     D0
00001110  6602      1613          bne.s     WaitForSPITransmitComplete_3
00001112  60F6      1614          bra       WaitForSPITransmitComplete_1
                    1615   WaitForSPITransmitComplete_3:
                    1616   ; SPI_Status |= 0xC0;
00001114  0039 00C0 1617          or.b      #192,4227106
00001118  0040 8022 
0000111C  4E75      1618          rts
                    1619   ; }
                    1620   ; void SPIFlashPollStatusWLE(void) {
                    1621   _SPIFlashPollStatusWLE:
0000111E  4E56 FFFC 1622          link      A6,#-4
00001122  2F02      1623          move.l    D2,-(A7)
                    1624   ; unsigned char status;
                    1625   ; unsigned char dummy;
                    1626   ; do {
                    1627   SPIFlashPollStatusWLE_1:
                    1628   ; // Start a new read status register command each time
                    1629   ; SPI_CS = 0xFE;
00001124  13FC 00FE 1630          move.b    #254,4227112
00001128  0040 8028 
                    1631   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000112C  4878 0005 1632          pea       5
00001130  4EB8 10C4 1633          jsr       _SPISafeWrite
00001134  584F      1634          addq.w    #4,A7
                    1635   ; SPISafeWrite(0xFF);  // Dummy write to clock in data
00001136  4878 00FF 1636          pea       255
0000113A  4EB8 10C4 1637          jsr       _SPISafeWrite
0000113E  584F      1638          addq.w    #4,A7
                    1639   ; status = SPI_Data;   // Read the status
00001140  1439 0040 1640          move.b    4227108,D2
00001144  8024      
                    1641   ; SPI_CS = 0xFF;       // End the SPI transaction
00001146  13FC 00FF 1642          move.b    #255,4227112
0000114A  0040 8028 
                    1643   ; printf("\r\n WLE Status: %02x \n", status);
0000114E  C4BC 0000 1644          and.l     #255,D2
00001152  00FF      
00001154  2F02      1645          move.l    D2,-(A7)
00001156  4879 0000 1646          pea       @m68kde~1_22.L
0000115A  4434      
0000115C  4EB9 0000 1647          jsr       _printf
00001160  383C      
00001162  504F      1648          addq.w    #8,A7
00001164  1002      1649          move.b    D2,D0
00001166  C03C 0002 1650          and.b     #2,D0
0000116A  67B8      1651          beq       SPIFlashPollStatusWLE_1
0000116C  241F      1652          move.l    (A7)+,D2
0000116E  4E5E      1653          unlk      A6
00001170  4E75      1654          rts
                    1655   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set
                    1656   ; }
                    1657   ; void SPIFlashPollStatusBusy(void) {
                    1658   _SPIFlashPollStatusBusy:
00001172  4E56 FFFC 1659          link      A6,#-4
00001176  2F02      1660          move.l    D2,-(A7)
                    1661   ; unsigned char status;
                    1662   ; unsigned char dummy;
                    1663   ; do {
                    1664   SPIFlashPollStatusBusy_1:
                    1665   ; // Start a new read status register command each time
                    1666   ; SPI_CS = 0xFE;
00001178  13FC 00FE 1667          move.b    #254,4227112
0000117C  0040 8028 
                    1668   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001180  4878 0005 1669          pea       5
00001184  4EB8 10C4 1670          jsr       _SPISafeWrite
00001188  584F      1671          addq.w    #4,A7
                    1672   ; SPISafeWrite(0xFF);  // Dummy write to clock in data
0000118A  4878 00FF 1673          pea       255
0000118E  4EB8 10C4 1674          jsr       _SPISafeWrite
00001192  584F      1675          addq.w    #4,A7
                    1676   ; status = SPI_Data;   // Read the status
00001194  1439 0040 1677          move.b    4227108,D2
00001198  8024      
                    1678   ; SPI_CS = 0xFF;       // End the SPI transaction
0000119A  13FC 00FF 1679          move.b    #255,4227112
0000119E  0040 8028 
                    1680   ; printf("\r\n Busy Status: %02x \n", status);
000011A2  C4BC 0000 1681          and.l     #255,D2
000011A6  00FF      
000011A8  2F02      1682          move.l    D2,-(A7)
000011AA  4879 0000 1683          pea       @m68kde~1_23.L
000011AE  444A      
000011B0  4EB9 0000 1684          jsr       _printf
000011B4  383C      
000011B6  504F      1685          addq.w    #8,A7
000011B8  1002      1686          move.b    D2,D0
000011BA  C03C 0001 1687          and.b     #1,D0
000011BE  66B8      1688          bne       SPIFlashPollStatusBusy_1
000011C0  241F      1689          move.l    (A7)+,D2
000011C2  4E5E      1690          unlk      A6
000011C4  4E75      1691          rts
                    1692   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1693   ; }
                    1694   ; /************************************************************************************
                    1695   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1696   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1697   ; ************************************************************************************/
                    1698   ; int WriteSPIChar(int c)
                    1699   ; {
                    1700   _WriteSPIChar:
000011C6  4E56 0000 1701          link      A6,#0
                    1702   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1703   ; // wait for completion of transmission
                    1704   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1705   ; // by reading fom the SPI controller Data Register.
                    1706   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1707   ; //
                    1708   ; // modify '0' below to return back read byte from data register
                    1709   ; //
                    1710   ; SPISafeWrite((unsigned char)c);
000011CA  222E 0008 1711          move.l    8(A6),D1
000011CE  C2BC 0000 1712          and.l     #255,D1
000011D2  00FF      
000011D4  2F01      1713          move.l    D1,-(A7)
000011D6  4EB8 10C4 1714          jsr       _SPISafeWrite
000011DA  584F      1715          addq.w    #4,A7
                    1716   ; printf("WRITTEN VAL: %08x \n", (unsigned char)c);
000011DC  222E 0008 1717          move.l    8(A6),D1
000011E0  C2BC 0000 1718          and.l     #255,D1
000011E4  00FF      
000011E6  2F01      1719          move.l    D1,-(A7)
000011E8  4879 0000 1720          pea       @m68kde~1_24.L
000011EC  4462      
000011EE  4EB9 0000 1721          jsr       _printf
000011F2  383C      
000011F4  504F      1722          addq.w    #8,A7
                    1723   ; return SPI_Data;
000011F6  1039 0040 1724          move.b    4227108,D0
000011FA  8024      
000011FC  C0BC 0000 1725          and.l     #255,D0
00001200  00FF      
00001202  4E5E      1726          unlk      A6
00001204  4E75      1727          rts
                    1728   ; }
                    1729   ; void SPIFlashWriteEnable() {
                    1730   _SPIFlashWriteEnable:
                    1731   ; SPI_CS = 0xFE;
00001206  13FC 00FE 1732          move.b    #254,4227112
0000120A  0040 8028 
                    1733   ; SPISafeWrite(0x06);
0000120E  4878 0006 1734          pea       6
00001212  4EB8 10C4 1735          jsr       _SPISafeWrite
00001216  584F      1736          addq.w    #4,A7
                    1737   ; SPI_CS = 0xFF;
00001218  13FC 00FF 1738          move.b    #255,4227112
0000121C  0040 8028 
                    1739   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1740   ; SPIFlashPollStatusWLE();
00001220  4EB8 111E 1741          jsr       _SPIFlashPollStatusWLE
00001224  4E75      1742          rts
                    1743   ; }
                    1744   ; void SPIWriteSendAddress(int c) {
                    1745   _SPIWriteSendAddress:
00001226  4E56 0000 1746          link      A6,#0
0000122A  48E7 2020 1747          movem.l   D2/A2,-(A7)
0000122E  242E 0008 1748          move.l    8(A6),D2
00001232  45F8 10C4 1749          lea       _SPISafeWrite.L,A2
                    1750   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001236  2202      1751          move.l    D2,D1
00001238  E081      1752          asr.l     #8,D1
0000123A  E081      1753          asr.l     #8,D1
0000123C  C2BC 0000 1754          and.l     #255,D1
00001240  00FF      
00001242  C2BC 0000 1755          and.l     #255,D1
00001246  00FF      
00001248  2F01      1756          move.l    D1,-(A7)
0000124A  4E92      1757          jsr       (A2)
0000124C  584F      1758          addq.w    #4,A7
                    1759   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
0000124E  2202      1760          move.l    D2,D1
00001250  E081      1761          asr.l     #8,D1
00001252  C2BC 0000 1762          and.l     #255,D1
00001256  00FF      
00001258  C2BC 0000 1763          and.l     #255,D1
0000125C  00FF      
0000125E  2F01      1764          move.l    D1,-(A7)
00001260  4E92      1765          jsr       (A2)
00001262  584F      1766          addq.w    #4,A7
                    1767   ; SPISafeWrite(c & 0xFF);             // third byte
00001264  2202      1768          move.l    D2,D1
00001266  C2BC 0000 1769          and.l     #255,D1
0000126A  00FF      
0000126C  C2BC 0000 1770          and.l     #255,D1
00001270  00FF      
00001272  2F01      1771          move.l    D1,-(A7)
00001274  4E92      1772          jsr       (A2)
00001276  584F      1773          addq.w    #4,A7
00001278  4CDF 0404 1774          movem.l   (A7)+,D2/A2
0000127C  4E5E      1775          unlk      A6
0000127E  4E75      1776          rts
                    1777   ; }
                    1778   ; void SPIFlashPageProgram(void) {
                    1779   _SPIFlashPageProgram:
                    1780   ; SPI_CS = 0xFE;
00001280  13FC 00FE 1781          move.b    #254,4227112
00001284  0040 8028 
                    1782   ; // NOTE: We should make the below 1 function called SPIFlashWriteCommand() or smthn like that
                    1783   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
00001288  4878 0002 1784          pea       2
0000128C  4EB8 10C4 1785          jsr       _SPISafeWrite
00001290  584F      1786          addq.w    #4,A7
                    1787   ; SPIWriteSendAddress(0x0);
00001292  42A7      1788          clr.l     -(A7)
00001294  4EB8 1226 1789          jsr       _SPIWriteSendAddress
00001298  584F      1790          addq.w    #4,A7
                    1791   ; WriteSPIChar(0xAB); // Random value for testing purposes
0000129A  4878 00AB 1792          pea       171
0000129E  4EB8 11C6 1793          jsr       _WriteSPIChar
000012A2  584F      1794          addq.w    #4,A7
                    1795   ; SPI_CS = 0xFF;
000012A4  13FC 00FF 1796          move.b    #255,4227112
000012A8  0040 8028 
                    1797   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1798   ; SPIFlashPollStatusBusy();
000012AC  4EB8 1172 1799          jsr       _SPIFlashPollStatusBusy
000012B0  4E75      1800          rts
                    1801   ; }
                    1802   ; /*******************************************************************
                    1803   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1804   ; ********************************************************************/
                    1805   ; void ProgramFlashChip(void)
                    1806   ; {
                    1807   _ProgramFlashChip:
                    1808   ; //
                    1809   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1810   ; // TODO : then verify by reading it back and comparing to memory
                    1811   ; //
                    1812   ; SPIFlashWriteEnable();
000012B2  4EB8 1206 1813          jsr       _SPIFlashWriteEnable
                    1814   ; SPIFlashPageProgram(); // we can modify the parameter later
000012B6  4EB8 1280 1815          jsr       _SPIFlashPageProgram
                    1816   ; // For now well test writing a byte of data
                    1817   ; // Then send h'02 as instruction into data register
                    1818   ; // Then send 24 bit flash address
                    1819   ; // Then atleast 1 data byte
                    1820   ; // If were sending multiple bytes / an entire page then the last (least significant) byte should be set to 0
                    1821   ; SPI_CS = 0xFF;
000012BA  13FC 00FF 1822          move.b    #255,4227112
000012BE  0040 8028 
000012C2  4E75      1823          rts
                    1824   ; // We should poll for the flash chips status register to indicate when the write has been completed in the flash memory after we set CS back to high
                    1825   ; // Using read status register command
                    1826   ; }
                    1827   ; /*************************************************************************
                    1828   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1829   ; **************************************************************************/
                    1830   ; void LoadFromFlashChip(void)
                    1831   ; {
                    1832   _LoadFromFlashChip:
                    1833   ; printf("\r\nLoading Program From SPI Flash....") ;
000012C4  4879 0000 1834          pea       @m68kde~1_25.L
000012C8  4476      
000012CA  4EB9 0000 1835          jsr       _printf
000012CE  383C      
000012D0  584F      1836          addq.w    #4,A7
000012D2  4E75      1837          rts
                    1838   ; //
                    1839   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1840   ; //
                    1841   ; }
                    1842   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1843   ; // IMPORTANT
                    1844   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1845   ; // has to be done with an interrupt (IRQ Level 6)
                    1846   ; //
                    1847   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1848   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1849   ; //
                    1850   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1851   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1852   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1853   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1854   ; // program area
                    1855   ; //
                    1856   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1857   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1858   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1859   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1860   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1861   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1862   ; void DumpRegisters()
                    1863   ; {
                    1864   _DumpRegisters:
000012D4  48E7 3F3C 1865          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000012D8  45F9 0000 1866          lea       _putch.L,A2
000012DC  2E80      
000012DE  47F9 0000 1867          lea       _printf.L,A3
000012E2  383C      
000012E4  49F9 0B00 1868          lea       _SR.L,A4
000012E8  012C      
000012EA  4BF9 0B00 1869          lea       _WatchPointString.L,A5
000012EE  01C2      
                    1870   ; short i, x, j, k ;
                    1871   ; unsigned char c, *BytePointer;
                    1872   ; // buld up strings for displaying watchpoints
                    1873   ; for(x = 0; x < (short)(8); x++)
000012F0  4242      1874          clr.w     D2
                    1875   DumpRegisters_1:
000012F2  0C42 0008 1876          cmp.w     #8,D2
000012F6  6C00 01C6 1877          bge       DumpRegisters_3
                    1878   ; {
                    1879   ; if(WatchPointSetOrCleared[x] == 1)
000012FA  48C2      1880          ext.l     D2
000012FC  2002      1881          move.l    D2,D0
000012FE  E588      1882          lsl.l     #2,D0
00001300  41F9 0B00 1883          lea       _WatchPointSetOrCleared.L,A0
00001304  01A2      
00001306  2030 0800 1884          move.l    0(A0,D0.L),D0
0000130A  0C80 0000 1885          cmp.l     #1,D0
0000130E  0001      
00001310  6600 0186 1886          bne       DumpRegisters_4
                    1887   ; {
                    1888   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001314  48C2      1889          ext.l     D2
00001316  2202      1890          move.l    D2,D1
00001318  E589      1891          lsl.l     #2,D1
0000131A  41F9 0B00 1892          lea       _WatchPointAddress.L,A0
0000131E  0182      
00001320  2F30 1800 1893          move.l    0(A0,D1.L),-(A7)
00001324  4879 0000 1894          pea       @m68kde~1_26.L
00001328  449C      
0000132A  220D      1895          move.l    A5,D1
0000132C  48C2      1896          ext.l     D2
0000132E  2F00      1897          move.l    D0,-(A7)
00001330  2002      1898          move.l    D2,D0
00001332  C1FC 0064 1899          muls      #100,D0
00001336  D280      1900          add.l     D0,D1
00001338  201F      1901          move.l    (A7)+,D0
0000133A  2F01      1902          move.l    D1,-(A7)
0000133C  4EB9 0000 1903          jsr       _sprintf
00001340  2F18      
00001342  DEFC 000C 1904          add.w     #12,A7
                    1905   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001346  48C2      1906          ext.l     D2
00001348  2002      1907          move.l    D2,D0
0000134A  E588      1908          lsl.l     #2,D0
0000134C  41F9 0B00 1909          lea       _WatchPointAddress.L,A0
00001350  0182      
00001352  2A30 0800 1910          move.l    0(A0,D0.L),D5
                    1911   ; for(j = 0; j < (short)(16); j+=2)
00001356  4243      1912          clr.w     D3
                    1913   DumpRegisters_6:
00001358  0C43 0010 1914          cmp.w     #16,D3
0000135C  6C00 0082 1915          bge       DumpRegisters_8
                    1916   ; {
                    1917   ; for(k = 0; k < (short)(2); k++)
00001360  4246      1918          clr.w     D6
                    1919   DumpRegisters_9:
00001362  0C46 0002 1920          cmp.w     #2,D6
00001366  6C00 0052 1921          bge       DumpRegisters_11
                    1922   ; {
                    1923   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000136A  2045      1924          move.l    D5,A0
0000136C  48C3      1925          ext.l     D3
0000136E  2203      1926          move.l    D3,D1
00001370  48C6      1927          ext.l     D6
00001372  D286      1928          add.l     D6,D1
00001374  1230 1800 1929          move.b    0(A0,D1.L),D1
00001378  C2BC 0000 1930          and.l     #255,D1
0000137C  00FF      
0000137E  2F01      1931          move.l    D1,-(A7)
00001380  4879 0000 1932          pea       @m68kde~1_8.L
00001384  428A      
00001386  4879 0B00 1933          pea       _TempString.L
0000138A  04E2      
0000138C  4EB9 0000 1934          jsr       _sprintf
00001390  2F18      
00001392  DEFC 000C 1935          add.w     #12,A7
                    1936   ; strcat(WatchPointString[x], TempString) ;
00001396  4879 0B00 1937          pea       _TempString.L
0000139A  04E2      
0000139C  220D      1938          move.l    A5,D1
0000139E  48C2      1939          ext.l     D2
000013A0  2F00      1940          move.l    D0,-(A7)
000013A2  2002      1941          move.l    D2,D0
000013A4  C1FC 0064 1942          muls      #100,D0
000013A8  D280      1943          add.l     D0,D1
000013AA  201F      1944          move.l    (A7)+,D0
000013AC  2F01      1945          move.l    D1,-(A7)
000013AE  4EB9 0000 1946          jsr       _strcat
000013B2  2F64      
000013B4  504F      1947          addq.w    #8,A7
000013B6  5246      1948          addq.w    #1,D6
000013B8  60A8      1949          bra       DumpRegisters_9
                    1950   DumpRegisters_11:
                    1951   ; }
                    1952   ; strcat(WatchPointString[x]," ") ;
000013BA  4879 0000 1953          pea       @m68kde~1_27.L
000013BE  44A4      
000013C0  220D      1954          move.l    A5,D1
000013C2  48C2      1955          ext.l     D2
000013C4  2F00      1956          move.l    D0,-(A7)
000013C6  2002      1957          move.l    D2,D0
000013C8  C1FC 0064 1958          muls      #100,D0
000013CC  D280      1959          add.l     D0,D1
000013CE  201F      1960          move.l    (A7)+,D0
000013D0  2F01      1961          move.l    D1,-(A7)
000013D2  4EB9 0000 1962          jsr       _strcat
000013D6  2F64      
000013D8  504F      1963          addq.w    #8,A7
000013DA  5443      1964          addq.w    #2,D3
000013DC  6000 FF7A 1965          bra       DumpRegisters_6
                    1966   DumpRegisters_8:
                    1967   ; }
                    1968   ; strcat(WatchPointString[x], "  ") ;
000013E0  4879 0000 1969          pea       @m68kde~1_9.L
000013E4  4290      
000013E6  220D      1970          move.l    A5,D1
000013E8  48C2      1971          ext.l     D2
000013EA  2F00      1972          move.l    D0,-(A7)
000013EC  2002      1973          move.l    D2,D0
000013EE  C1FC 0064 1974          muls      #100,D0
000013F2  D280      1975          add.l     D0,D1
000013F4  201F      1976          move.l    (A7)+,D0
000013F6  2F01      1977          move.l    D1,-(A7)
000013F8  4EB9 0000 1978          jsr       _strcat
000013FC  2F64      
000013FE  504F      1979          addq.w    #8,A7
                    1980   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001400  48C2      1981          ext.l     D2
00001402  2002      1982          move.l    D2,D0
00001404  E588      1983          lsl.l     #2,D0
00001406  41F9 0B00 1984          lea       _WatchPointAddress.L,A0
0000140A  0182      
0000140C  2A30 0800 1985          move.l    0(A0,D0.L),D5
                    1986   ; for(j = 0; j < (short)(16); j++)
00001410  4243      1987          clr.w     D3
                    1988   DumpRegisters_12:
00001412  0C43 0010 1989          cmp.w     #16,D3
00001416  6C00 007E 1990          bge       DumpRegisters_14
                    1991   ; {
                    1992   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000141A  2045      1993          move.l    D5,A0
0000141C  48C3      1994          ext.l     D3
0000141E  1030 3800 1995          move.b    0(A0,D3.L),D0
00001422  C03C 007F 1996          and.b     #127,D0
00001426  1E00      1997          move.b    D0,D7
                    1998   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001428  0C07 007F 1999          cmp.b     #127,D7
0000142C  6206      2000          bhi.s     DumpRegisters_17
0000142E  0C07 0020 2001          cmp.b     #32,D7
00001432  6416      2002          bhs.s     DumpRegisters_15
                    2003   DumpRegisters_17:
                    2004   ; sprintf(TempString, ".") ;
00001434  4879 0000 2005          pea       @m68kde~1_28.L
00001438  44A6      
0000143A  4879 0B00 2006          pea       _TempString.L
0000143E  04E2      
00001440  4EB9 0000 2007          jsr       _sprintf
00001444  2F18      
00001446  504F      2008          addq.w    #8,A7
00001448  6026      2009          bra.s     DumpRegisters_16
                    2010   DumpRegisters_15:
                    2011   ; else
                    2012   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000144A  2045      2013          move.l    D5,A0
0000144C  48C3      2014          ext.l     D3
0000144E  1230 3800 2015          move.b    0(A0,D3.L),D1
00001452  C2BC 0000 2016          and.l     #255,D1
00001456  00FF      
00001458  2F01      2017          move.l    D1,-(A7)
0000145A  4879 0000 2018          pea       @m68kde~1_29.L
0000145E  44A8      
00001460  4879 0B00 2019          pea       _TempString.L
00001464  04E2      
00001466  4EB9 0000 2020          jsr       _sprintf
0000146A  2F18      
0000146C  DEFC 000C 2021          add.w     #12,A7
                    2022   DumpRegisters_16:
                    2023   ; strcat(WatchPointString[x], TempString) ;
00001470  4879 0B00 2024          pea       _TempString.L
00001474  04E2      
00001476  220D      2025          move.l    A5,D1
00001478  48C2      2026          ext.l     D2
0000147A  2F00      2027          move.l    D0,-(A7)
0000147C  2002      2028          move.l    D2,D0
0000147E  C1FC 0064 2029          muls      #100,D0
00001482  D280      2030          add.l     D0,D1
00001484  201F      2031          move.l    (A7)+,D0
00001486  2F01      2032          move.l    D1,-(A7)
00001488  4EB9 0000 2033          jsr       _strcat
0000148C  2F64      
0000148E  504F      2034          addq.w    #8,A7
00001490  5243      2035          addq.w    #1,D3
00001492  6000 FF7E 2036          bra       DumpRegisters_12
                    2037   DumpRegisters_14:
00001496  6020      2038          bra.s     DumpRegisters_5
                    2039   DumpRegisters_4:
                    2040   ; }
                    2041   ; }
                    2042   ; else
                    2043   ; strcpy(WatchPointString[x], "") ;
00001498  4879 0000 2044          pea       @m68kde~1_30.L
0000149C  44AC      
0000149E  220D      2045          move.l    A5,D1
000014A0  48C2      2046          ext.l     D2
000014A2  2F00      2047          move.l    D0,-(A7)
000014A4  2002      2048          move.l    D2,D0
000014A6  C1FC 0064 2049          muls      #100,D0
000014AA  D280      2050          add.l     D0,D1
000014AC  201F      2051          move.l    (A7)+,D0
000014AE  2F01      2052          move.l    D1,-(A7)
000014B0  4EB9 0000 2053          jsr       _strcpy
000014B4  2D92      
000014B6  504F      2054          addq.w    #8,A7
                    2055   DumpRegisters_5:
000014B8  5242      2056          addq.w    #1,D2
000014BA  6000 FE36 2057          bra       DumpRegisters_1
                    2058   DumpRegisters_3:
                    2059   ; }
                    2060   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000014BE  2F39 0B00 2061          move.l    _a0.L,-(A7)
000014C2  0104      
000014C4  2F39 0B00 2062          move.l    _d0.L,-(A7)
000014C8  00E4      
000014CA  4879 0000 2063          pea       @m68kde~1_31.L
000014CE  44AE      
000014D0  4E93      2064          jsr       (A3)
000014D2  DEFC 000C 2065          add.w     #12,A7
                    2066   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000014D6  2F39 0B00 2067          move.l    _a1.L,-(A7)
000014DA  0108      
000014DC  2F39 0B00 2068          move.l    _d1.L,-(A7)
000014E0  00E8      
000014E2  4879 0000 2069          pea       @m68kde~1_32.L
000014E6  44CA      
000014E8  4E93      2070          jsr       (A3)
000014EA  DEFC 000C 2071          add.w     #12,A7
                    2072   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000014EE  2F39 0B00 2073          move.l    _a2.L,-(A7)
000014F2  010C      
000014F4  2F39 0B00 2074          move.l    _d2.L,-(A7)
000014F8  00EC      
000014FA  4879 0000 2075          pea       @m68kde~1_33.L
000014FE  44E4      
00001500  4E93      2076          jsr       (A3)
00001502  DEFC 000C 2077          add.w     #12,A7
                    2078   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001506  2F39 0B00 2079          move.l    _a3.L,-(A7)
0000150A  0110      
0000150C  2F39 0B00 2080          move.l    _d3.L,-(A7)
00001510  00F0      
00001512  4879 0000 2081          pea       @m68kde~1_34.L
00001516  44FE      
00001518  4E93      2082          jsr       (A3)
0000151A  DEFC 000C 2083          add.w     #12,A7
                    2084   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
0000151E  2F39 0B00 2085          move.l    _a4.L,-(A7)
00001522  0114      
00001524  2F39 0B00 2086          move.l    _d4.L,-(A7)
00001528  00F4      
0000152A  4879 0000 2087          pea       @m68kde~1_35.L
0000152E  4518      
00001530  4E93      2088          jsr       (A3)
00001532  DEFC 000C 2089          add.w     #12,A7
                    2090   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001536  2F39 0B00 2091          move.l    _a5.L,-(A7)
0000153A  0118      
0000153C  2F39 0B00 2092          move.l    _d5.L,-(A7)
00001540  00F8      
00001542  4879 0000 2093          pea       @m68kde~1_36.L
00001546  4532      
00001548  4E93      2094          jsr       (A3)
0000154A  DEFC 000C 2095          add.w     #12,A7
                    2096   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
0000154E  2F39 0B00 2097          move.l    _a6.L,-(A7)
00001552  011C      
00001554  2F39 0B00 2098          move.l    _d6.L,-(A7)
00001558  00FC      
0000155A  4879 0000 2099          pea       @m68kde~1_37.L
0000155E  454C      
00001560  4E93      2100          jsr       (A3)
00001562  DEFC 000C 2101          add.w     #12,A7
                    2102   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001566  3214      2103          move.w    (A4),D1
00001568  C27C 2000 2104          and.w     #8192,D1
0000156C  0C41 2000 2105          cmp.w     #8192,D1
00001570  6608      2106          bne.s     DumpRegisters_18
00001572  2239 0B00 2107          move.l    _SSP.L,D1
00001576  0124      
00001578  6006      2108          bra.s     DumpRegisters_19
                    2109   DumpRegisters_18:
0000157A  2239 0B00 2110          move.l    _USP.L,D1
0000157E  0128      
                    2111   DumpRegisters_19:
00001580  2F01      2112          move.l    D1,-(A7)
00001582  2F39 0B00 2113          move.l    _d7.L,-(A7)
00001586  0100      
00001588  4879 0000 2114          pea       @m68kde~1_38.L
0000158C  4566      
0000158E  4E93      2115          jsr       (A3)
00001590  DEFC 000C 2116          add.w     #12,A7
                    2117   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001594  2F39 0B00 2118          move.l    _USP.L,-(A7)
00001598  0128      
0000159A  4879 0000 2119          pea       @m68kde~1_39.L
0000159E  4580      
000015A0  4E93      2120          jsr       (A3)
000015A2  504F      2121          addq.w    #8,A7
                    2122   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000015A4  2F39 0B00 2123          move.l    _SSP.L,-(A7)
000015A8  0124      
000015AA  4879 0000 2124          pea       @m68kde~1_40.L
000015AE  459E      
000015B0  4E93      2125          jsr       (A3)
000015B2  504F      2126          addq.w    #8,A7
                    2127   ; printf("\r\n SR = $%04X   ",SR) ;
000015B4  3214      2128          move.w    (A4),D1
000015B6  C2BC 0000 2129          and.l     #65535,D1
000015BA  FFFF      
000015BC  2F01      2130          move.l    D1,-(A7)
000015BE  4879 0000 2131          pea       @m68kde~1_41.L
000015C2  45C0      
000015C4  4E93      2132          jsr       (A3)
000015C6  504F      2133          addq.w    #8,A7
                    2134   ; // display the status word in characters etc.
                    2135   ; printf("   [") ;
000015C8  4879 0000 2136          pea       @m68kde~1_42.L
000015CC  45D2      
000015CE  4E93      2137          jsr       (A3)
000015D0  584F      2138          addq.w    #4,A7
                    2139   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000015D2  3014      2140          move.w    (A4),D0
000015D4  C07C 8000 2141          and.w     #32768,D0
000015D8  0C40 8000 2142          cmp.w     #32768,D0
000015DC  660A      2143          bne.s     DumpRegisters_20
000015DE  4878 0054 2144          pea       84
000015E2  4E92      2145          jsr       (A2)
000015E4  584F      2146          addq.w    #4,A7
000015E6  6008      2147          bra.s     DumpRegisters_21
                    2148   DumpRegisters_20:
000015E8  4878 002D 2149          pea       45
000015EC  4E92      2150          jsr       (A2)
000015EE  584F      2151          addq.w    #4,A7
                    2152   DumpRegisters_21:
                    2153   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000015F0  3014      2154          move.w    (A4),D0
000015F2  C07C 2000 2155          and.w     #8192,D0
000015F6  0C40 2000 2156          cmp.w     #8192,D0
000015FA  660A      2157          bne.s     DumpRegisters_22
000015FC  4878 0053 2158          pea       83
00001600  4E92      2159          jsr       (A2)
00001602  584F      2160          addq.w    #4,A7
00001604  6008      2161          bra.s     DumpRegisters_23
                    2162   DumpRegisters_22:
00001606  4878 0055 2163          pea       85
0000160A  4E92      2164          jsr       (A2)
0000160C  584F      2165          addq.w    #4,A7
                    2166   DumpRegisters_23:
                    2167   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
0000160E  3014      2168          move.w    (A4),D0
00001610  C07C 0400 2169          and.w     #1024,D0
00001614  0C40 0400 2170          cmp.w     #1024,D0
00001618  660A      2171          bne.s     DumpRegisters_24
0000161A  4878 0031 2172          pea       49
0000161E  4E92      2173          jsr       (A2)
00001620  584F      2174          addq.w    #4,A7
00001622  6008      2175          bra.s     DumpRegisters_25
                    2176   DumpRegisters_24:
00001624  4878 0030 2177          pea       48
00001628  4E92      2178          jsr       (A2)
0000162A  584F      2179          addq.w    #4,A7
                    2180   DumpRegisters_25:
                    2181   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000162C  3014      2182          move.w    (A4),D0
0000162E  C07C 0200 2183          and.w     #512,D0
00001632  0C40 0200 2184          cmp.w     #512,D0
00001636  660A      2185          bne.s     DumpRegisters_26
00001638  4878 0031 2186          pea       49
0000163C  4E92      2187          jsr       (A2)
0000163E  584F      2188          addq.w    #4,A7
00001640  6008      2189          bra.s     DumpRegisters_27
                    2190   DumpRegisters_26:
00001642  4878 0030 2191          pea       48
00001646  4E92      2192          jsr       (A2)
00001648  584F      2193          addq.w    #4,A7
                    2194   DumpRegisters_27:
                    2195   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000164A  3014      2196          move.w    (A4),D0
0000164C  C07C 0100 2197          and.w     #256,D0
00001650  0C40 0100 2198          cmp.w     #256,D0
00001654  660A      2199          bne.s     DumpRegisters_28
00001656  4878 0031 2200          pea       49
0000165A  4E92      2201          jsr       (A2)
0000165C  584F      2202          addq.w    #4,A7
0000165E  6008      2203          bra.s     DumpRegisters_29
                    2204   DumpRegisters_28:
00001660  4878 0030 2205          pea       48
00001664  4E92      2206          jsr       (A2)
00001666  584F      2207          addq.w    #4,A7
                    2208   DumpRegisters_29:
                    2209   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001668  3014      2210          move.w    (A4),D0
0000166A  C07C 0010 2211          and.w     #16,D0
0000166E  0C40 0010 2212          cmp.w     #16,D0
00001672  660A      2213          bne.s     DumpRegisters_30
00001674  4878 0058 2214          pea       88
00001678  4E92      2215          jsr       (A2)
0000167A  584F      2216          addq.w    #4,A7
0000167C  6008      2217          bra.s     DumpRegisters_31
                    2218   DumpRegisters_30:
0000167E  4878 002D 2219          pea       45
00001682  4E92      2220          jsr       (A2)
00001684  584F      2221          addq.w    #4,A7
                    2222   DumpRegisters_31:
                    2223   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001686  3014      2224          move.w    (A4),D0
00001688  C07C 0008 2225          and.w     #8,D0
0000168C  0C40 0008 2226          cmp.w     #8,D0
00001690  660A      2227          bne.s     DumpRegisters_32
00001692  4878 004E 2228          pea       78
00001696  4E92      2229          jsr       (A2)
00001698  584F      2230          addq.w    #4,A7
0000169A  6008      2231          bra.s     DumpRegisters_33
                    2232   DumpRegisters_32:
0000169C  4878 002D 2233          pea       45
000016A0  4E92      2234          jsr       (A2)
000016A2  584F      2235          addq.w    #4,A7
                    2236   DumpRegisters_33:
                    2237   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000016A4  3014      2238          move.w    (A4),D0
000016A6  C07C 0004 2239          and.w     #4,D0
000016AA  0C40 0004 2240          cmp.w     #4,D0
000016AE  660A      2241          bne.s     DumpRegisters_34
000016B0  4878 005A 2242          pea       90
000016B4  4E92      2243          jsr       (A2)
000016B6  584F      2244          addq.w    #4,A7
000016B8  6008      2245          bra.s     DumpRegisters_35
                    2246   DumpRegisters_34:
000016BA  4878 002D 2247          pea       45
000016BE  4E92      2248          jsr       (A2)
000016C0  584F      2249          addq.w    #4,A7
                    2250   DumpRegisters_35:
                    2251   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000016C2  3014      2252          move.w    (A4),D0
000016C4  C07C 0002 2253          and.w     #2,D0
000016C8  0C40 0002 2254          cmp.w     #2,D0
000016CC  660A      2255          bne.s     DumpRegisters_36
000016CE  4878 0056 2256          pea       86
000016D2  4E92      2257          jsr       (A2)
000016D4  584F      2258          addq.w    #4,A7
000016D6  6008      2259          bra.s     DumpRegisters_37
                    2260   DumpRegisters_36:
000016D8  4878 002D 2261          pea       45
000016DC  4E92      2262          jsr       (A2)
000016DE  584F      2263          addq.w    #4,A7
                    2264   DumpRegisters_37:
                    2265   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000016E0  3014      2266          move.w    (A4),D0
000016E2  C07C 0001 2267          and.w     #1,D0
000016E6  0C40 0001 2268          cmp.w     #1,D0
000016EA  660A      2269          bne.s     DumpRegisters_38
000016EC  4878 0043 2270          pea       67
000016F0  4E92      2271          jsr       (A2)
000016F2  584F      2272          addq.w    #4,A7
000016F4  6008      2273          bra.s     DumpRegisters_39
                    2274   DumpRegisters_38:
000016F6  4878 002D 2275          pea       45
000016FA  4E92      2276          jsr       (A2)
000016FC  584F      2277          addq.w    #4,A7
                    2278   DumpRegisters_39:
                    2279   ; putchar(']') ;
000016FE  4878 005D 2280          pea       93
00001702  4E92      2281          jsr       (A2)
00001704  584F      2282          addq.w    #4,A7
                    2283   ; printf("\r\n PC = $%08X  ", PC) ;
00001706  2F39 0B00 2284          move.l    _PC.L,-(A7)
0000170A  0120      
0000170C  4879 0000 2285          pea       @m68kde~1_43.L
00001710  45D8      
00001712  4E93      2286          jsr       (A3)
00001714  504F      2287          addq.w    #8,A7
                    2288   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001716  2039 0B00 2289          move.l    _PC.L,D0
0000171A  0120      
0000171C  2040      2290          move.l    D0,A0
0000171E  3010      2291          move.w    (A0),D0
00001720  0C40 4E4E 2292          cmp.w     #20046,D0
00001724  660A      2293          bne.s     DumpRegisters_40
                    2294   ; printf("[@ BREAKPOINT]") ;
00001726  4879 0000 2295          pea       @m68kde~1_44.L
0000172A  45E8      
0000172C  4E93      2296          jsr       (A3)
0000172E  584F      2297          addq.w    #4,A7
                    2298   DumpRegisters_40:
                    2299   ; printf("\r\n") ;
00001730  4879 0000 2300          pea       @m68kde~1_1.L
00001734  4212      
00001736  4E93      2301          jsr       (A3)
00001738  584F      2302          addq.w    #4,A7
                    2303   ; for(i=0; i < 8; i++)    {
0000173A  4244      2304          clr.w     D4
                    2305   DumpRegisters_42:
0000173C  0C44 0008 2306          cmp.w     #8,D4
00001740  6C00 0040 2307          bge       DumpRegisters_44
                    2308   ; if(WatchPointSetOrCleared[i] == 1)
00001744  48C4      2309          ext.l     D4
00001746  2004      2310          move.l    D4,D0
00001748  E588      2311          lsl.l     #2,D0
0000174A  41F9 0B00 2312          lea       _WatchPointSetOrCleared.L,A0
0000174E  01A2      
00001750  2030 0800 2313          move.l    0(A0,D0.L),D0
00001754  0C80 0000 2314          cmp.l     #1,D0
00001758  0001      
0000175A  6622      2315          bne.s     DumpRegisters_45
                    2316   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000175C  220D      2317          move.l    A5,D1
0000175E  48C4      2318          ext.l     D4
00001760  2F00      2319          move.l    D0,-(A7)
00001762  2004      2320          move.l    D4,D0
00001764  C1FC 0064 2321          muls      #100,D0
00001768  D280      2322          add.l     D0,D1
0000176A  201F      2323          move.l    (A7)+,D0
0000176C  2F01      2324          move.l    D1,-(A7)
0000176E  48C4      2325          ext.l     D4
00001770  2F04      2326          move.l    D4,-(A7)
00001772  4879 0000 2327          pea       @m68kde~1_45.L
00001776  45F8      
00001778  4E93      2328          jsr       (A3)
0000177A  DEFC 000C 2329          add.w     #12,A7
                    2330   DumpRegisters_45:
0000177E  5244      2331          addq.w    #1,D4
00001780  60BA      2332          bra       DumpRegisters_42
                    2333   DumpRegisters_44:
00001782  4CDF 3CFC 2334          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001786  4E75      2335          rts
                    2336   ; }
                    2337   ; }
                    2338   ; // Trace Exception Handler
                    2339   ; void DumpRegistersandPause(void)
                    2340   ; {
                    2341   _DumpRegistersandPause:
00001788  2F0A      2342          move.l    A2,-(A7)
0000178A  45F9 0000 2343          lea       _printf.L,A2
0000178E  383C      
                    2344   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001790  4879 0000 2345          pea       @m68kde~1_46.L
00001794  4604      
00001796  4E92      2346          jsr       (A2)
00001798  584F      2347          addq.w    #4,A7
                    2348   ; printf("\r\nBreak Points :[Disabled]") ;
0000179A  4879 0000 2349          pea       @m68kde~1_47.L
0000179E  4624      
000017A0  4E92      2350          jsr       (A2)
000017A2  584F      2351          addq.w    #4,A7
                    2352   ; DumpRegisters() ;
000017A4  4EB8 12D4 2353          jsr       _DumpRegisters
                    2354   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000017A8  4879 0000 2355          pea       @m68kde~1_48.L
000017AC  4640      
000017AE  4E92      2356          jsr       (A2)
000017B0  584F      2357          addq.w    #4,A7
                    2358   ; printf("\r\nPress <ESC> to Resume Program") ;
000017B2  4879 0000 2359          pea       @m68kde~1_49.L
000017B6  466C      
000017B8  4E92      2360          jsr       (A2)
000017BA  584F      2361          addq.w    #4,A7
                    2362   ; menu() ;
000017BC  4EB9 0000 2363          jsr       _menu
000017C0  236C      
000017C2  245F      2364          move.l    (A7)+,A2
000017C4  4E75      2365          rts
                    2366   ; }
                    2367   ; void ChangeRegisters(void)
                    2368   ; {
                    2369   _ChangeRegisters:
000017C6  4E56 FFFC 2370          link      A6,#-4
000017CA  48E7 303C 2371          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000017CE  45F9 0000 2372          lea       _printf.L,A2
000017D2  383C      
000017D4  47EE FFFC 2373          lea       -4(A6),A3
000017D8  49F8 0CA4 2374          lea       _Get8HexDigits.L,A4
000017DC  4BF8 0B68 2375          lea       __getch.L,A5
                    2376   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2377   ; int reg_val ;
                    2378   ; char c, reg[3] ;
                    2379   ; reg[0] = tolower(_getch()) ;
000017E0  2F00      2380          move.l    D0,-(A7)
000017E2  4E95      2381          jsr       (A5)
000017E4  2200      2382          move.l    D0,D1
000017E6  201F      2383          move.l    (A7)+,D0
000017E8  2F01      2384          move.l    D1,-(A7)
000017EA  4EB9 0000 2385          jsr       _tolower
000017EE  2EEC      
000017F0  584F      2386          addq.w    #4,A7
000017F2  1680      2387          move.b    D0,(A3)
                    2388   ; reg[1] = c = tolower(_getch()) ;
000017F4  2F00      2389          move.l    D0,-(A7)
000017F6  4E95      2390          jsr       (A5)
000017F8  2200      2391          move.l    D0,D1
000017FA  201F      2392          move.l    (A7)+,D0
000017FC  2F01      2393          move.l    D1,-(A7)
000017FE  4EB9 0000 2394          jsr       _tolower
00001802  2EEC      
00001804  584F      2395          addq.w    #4,A7
00001806  1400      2396          move.b    D0,D2
00001808  1740 0001 2397          move.b    D0,1(A3)
                    2398   ; if(reg[0] == (char)('d'))  {    // change data register
0000180C  1013      2399          move.b    (A3),D0
0000180E  0C00 0064 2400          cmp.b     #100,D0
00001812  6600 00AE 2401          bne       ChangeRegisters_1
                    2402   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001816  102B 0001 2403          move.b    1(A3),D0
0000181A  0C00 0037 2404          cmp.b     #55,D0
0000181E  6E0A      2405          bgt.s     ChangeRegisters_5
00001820  102B 0001 2406          move.b    1(A3),D0
00001824  0C00 0030 2407          cmp.b     #48,D0
00001828  6C0E      2408          bge.s     ChangeRegisters_3
                    2409   ChangeRegisters_5:
                    2410   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000182A  4879 0000 2411          pea       @m68kde~1_50.L
0000182E  468C      
00001830  4E92      2412          jsr       (A2)
00001832  584F      2413          addq.w    #4,A7
                    2414   ; return ;
00001834  6000 0244 2415          bra       ChangeRegisters_6
                    2416   ChangeRegisters_3:
                    2417   ; }
                    2418   ; else {
                    2419   ; printf("\r\nD%c = ", c) ;
00001838  4882      2420          ext.w     D2
0000183A  48C2      2421          ext.l     D2
0000183C  2F02      2422          move.l    D2,-(A7)
0000183E  4879 0000 2423          pea       @m68kde~1_51.L
00001842  46B8      
00001844  4E92      2424          jsr       (A2)
00001846  504F      2425          addq.w    #8,A7
                    2426   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001848  42A7      2427          clr.l     -(A7)
0000184A  4E94      2428          jsr       (A4)
0000184C  584F      2429          addq.w    #4,A7
0000184E  2600      2430          move.l    D0,D3
                    2431   ; }
                    2432   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2433   ; if(c == (char)('0'))
00001850  0C02 0030 2434          cmp.b     #48,D2
00001854  660A      2435          bne.s     ChangeRegisters_7
                    2436   ; d0 = reg_val ;
00001856  23C3 0B00 2437          move.l    D3,_d0.L
0000185A  00E4      
0000185C  6000 0060 2438          bra       ChangeRegisters_20
                    2439   ChangeRegisters_7:
                    2440   ; else if(c == (char)('1'))
00001860  0C02 0031 2441          cmp.b     #49,D2
00001864  660A      2442          bne.s     ChangeRegisters_9
                    2443   ; d1 = reg_val ;
00001866  23C3 0B00 2444          move.l    D3,_d1.L
0000186A  00E8      
0000186C  6000 0050 2445          bra       ChangeRegisters_20
                    2446   ChangeRegisters_9:
                    2447   ; else if(c == (char)('2'))
00001870  0C02 0032 2448          cmp.b     #50,D2
00001874  660A      2449          bne.s     ChangeRegisters_11
                    2450   ; d2 = reg_val ;
00001876  23C3 0B00 2451          move.l    D3,_d2.L
0000187A  00EC      
0000187C  6000 0040 2452          bra       ChangeRegisters_20
                    2453   ChangeRegisters_11:
                    2454   ; else if(c == (char)('3'))
00001880  0C02 0033 2455          cmp.b     #51,D2
00001884  6608      2456          bne.s     ChangeRegisters_13
                    2457   ; d3 = reg_val ;
00001886  23C3 0B00 2458          move.l    D3,_d3.L
0000188A  00F0      
0000188C  6030      2459          bra.s     ChangeRegisters_20
                    2460   ChangeRegisters_13:
                    2461   ; else if(c == (char)('4'))
0000188E  0C02 0034 2462          cmp.b     #52,D2
00001892  6608      2463          bne.s     ChangeRegisters_15
                    2464   ; d4 = reg_val ;
00001894  23C3 0B00 2465          move.l    D3,_d4.L
00001898  00F4      
0000189A  6022      2466          bra.s     ChangeRegisters_20
                    2467   ChangeRegisters_15:
                    2468   ; else if(c == (char)('5'))
0000189C  0C02 0035 2469          cmp.b     #53,D2
000018A0  6608      2470          bne.s     ChangeRegisters_17
                    2471   ; d5 = reg_val ;
000018A2  23C3 0B00 2472          move.l    D3,_d5.L
000018A6  00F8      
000018A8  6014      2473          bra.s     ChangeRegisters_20
                    2474   ChangeRegisters_17:
                    2475   ; else if(c == (char)('6'))
000018AA  0C02 0036 2476          cmp.b     #54,D2
000018AE  6608      2477          bne.s     ChangeRegisters_19
                    2478   ; d6 = reg_val ;
000018B0  23C3 0B00 2479          move.l    D3,_d6.L
000018B4  00FC      
000018B6  6006      2480          bra.s     ChangeRegisters_20
                    2481   ChangeRegisters_19:
                    2482   ; else
                    2483   ; d7 = reg_val ;
000018B8  23C3 0B00 2484          move.l    D3,_d7.L
000018BC  0100      
                    2485   ChangeRegisters_20:
000018BE  6000 01B6 2486          bra       ChangeRegisters_51
                    2487   ChangeRegisters_1:
                    2488   ; }
                    2489   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000018C2  1013      2490          move.b    (A3),D0
000018C4  0C00 0061 2491          cmp.b     #97,D0
000018C8  6600 00A6 2492          bne       ChangeRegisters_21
                    2493   ; if((c > (char)('7')) || (c < (char)('0'))) {
000018CC  0C02 0037 2494          cmp.b     #55,D2
000018D0  6E06      2495          bgt.s     ChangeRegisters_25
000018D2  0C02 0030 2496          cmp.b     #48,D2
000018D6  6C0E      2497          bge.s     ChangeRegisters_23
                    2498   ChangeRegisters_25:
                    2499   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000018D8  4879 0000 2500          pea       @m68kde~1_52.L
000018DC  46C2      
000018DE  4E92      2501          jsr       (A2)
000018E0  584F      2502          addq.w    #4,A7
                    2503   ; return ;
000018E2  6000 0196 2504          bra       ChangeRegisters_6
                    2505   ChangeRegisters_23:
                    2506   ; }
                    2507   ; else {
                    2508   ; printf("\r\nA%c = ", c) ;
000018E6  4882      2509          ext.w     D2
000018E8  48C2      2510          ext.l     D2
000018EA  2F02      2511          move.l    D2,-(A7)
000018EC  4879 0000 2512          pea       @m68kde~1_53.L
000018F0  46F0      
000018F2  4E92      2513          jsr       (A2)
000018F4  504F      2514          addq.w    #8,A7
                    2515   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018F6  42A7      2516          clr.l     -(A7)
000018F8  4E94      2517          jsr       (A4)
000018FA  584F      2518          addq.w    #4,A7
000018FC  2600      2519          move.l    D0,D3
                    2520   ; }
                    2521   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2522   ; if(c == (char)('0'))
000018FE  0C02 0030 2523          cmp.b     #48,D2
00001902  660A      2524          bne.s     ChangeRegisters_26
                    2525   ; a0 = reg_val ;
00001904  23C3 0B00 2526          move.l    D3,_a0.L
00001908  0104      
0000190A  6000 0060 2527          bra       ChangeRegisters_39
                    2528   ChangeRegisters_26:
                    2529   ; else if(c == (char)('1'))
0000190E  0C02 0031 2530          cmp.b     #49,D2
00001912  660A      2531          bne.s     ChangeRegisters_28
                    2532   ; a1 = reg_val ;
00001914  23C3 0B00 2533          move.l    D3,_a1.L
00001918  0108      
0000191A  6000 0050 2534          bra       ChangeRegisters_39
                    2535   ChangeRegisters_28:
                    2536   ; else if(c == (char)('2'))
0000191E  0C02 0032 2537          cmp.b     #50,D2
00001922  660A      2538          bne.s     ChangeRegisters_30
                    2539   ; a2 = reg_val ;
00001924  23C3 0B00 2540          move.l    D3,_a2.L
00001928  010C      
0000192A  6000 0040 2541          bra       ChangeRegisters_39
                    2542   ChangeRegisters_30:
                    2543   ; else if(c == (char)('3'))
0000192E  0C02 0033 2544          cmp.b     #51,D2
00001932  6608      2545          bne.s     ChangeRegisters_32
                    2546   ; a3 = reg_val ;
00001934  23C3 0B00 2547          move.l    D3,_a3.L
00001938  0110      
0000193A  6030      2548          bra.s     ChangeRegisters_39
                    2549   ChangeRegisters_32:
                    2550   ; else if(c == (char)('4'))
0000193C  0C02 0034 2551          cmp.b     #52,D2
00001940  6608      2552          bne.s     ChangeRegisters_34
                    2553   ; a4 = reg_val ;
00001942  23C3 0B00 2554          move.l    D3,_a4.L
00001946  0114      
00001948  6022      2555          bra.s     ChangeRegisters_39
                    2556   ChangeRegisters_34:
                    2557   ; else if(c == (char)('5'))
0000194A  0C02 0035 2558          cmp.b     #53,D2
0000194E  6608      2559          bne.s     ChangeRegisters_36
                    2560   ; a5 = reg_val ;
00001950  23C3 0B00 2561          move.l    D3,_a5.L
00001954  0118      
00001956  6014      2562          bra.s     ChangeRegisters_39
                    2563   ChangeRegisters_36:
                    2564   ; else if(c == (char)('6'))
00001958  0C02 0036 2565          cmp.b     #54,D2
0000195C  6608      2566          bne.s     ChangeRegisters_38
                    2567   ; a6 = reg_val ;
0000195E  23C3 0B00 2568          move.l    D3,_a6.L
00001962  011C      
00001964  6006      2569          bra.s     ChangeRegisters_39
                    2570   ChangeRegisters_38:
                    2571   ; else
                    2572   ; USP = reg_val ;
00001966  23C3 0B00 2573          move.l    D3,_USP.L
0000196A  0128      
                    2574   ChangeRegisters_39:
0000196C  6000 0108 2575          bra       ChangeRegisters_51
                    2576   ChangeRegisters_21:
                    2577   ; }
                    2578   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001970  1013      2579          move.b    (A3),D0
00001972  0C00 0075 2580          cmp.b     #117,D0
00001976  6600 004E 2581          bne       ChangeRegisters_40
0000197A  0C02 0073 2582          cmp.b     #115,D2
0000197E  6600 0046 2583          bne       ChangeRegisters_40
                    2584   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001982  2F00      2585          move.l    D0,-(A7)
00001984  4E95      2586          jsr       (A5)
00001986  2200      2587          move.l    D0,D1
00001988  201F      2588          move.l    (A7)+,D0
0000198A  2F01      2589          move.l    D1,-(A7)
0000198C  4EB9 0000 2590          jsr       _tolower
00001990  2EEC      
00001992  584F      2591          addq.w    #4,A7
00001994  0C80 0000 2592          cmp.l     #112,D0
00001998  0070      
0000199A  6618      2593          bne.s     ChangeRegisters_42
                    2594   ; printf("\r\nUser SP = ") ;
0000199C  4879 0000 2595          pea       @m68kde~1_54.L
000019A0  46FA      
000019A2  4E92      2596          jsr       (A2)
000019A4  584F      2597          addq.w    #4,A7
                    2598   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019A6  42A7      2599          clr.l     -(A7)
000019A8  4E94      2600          jsr       (A4)
000019AA  584F      2601          addq.w    #4,A7
000019AC  23C0 0B00 2602          move.l    D0,_USP.L
000019B0  0128      
000019B2  600E      2603          bra.s     ChangeRegisters_43
                    2604   ChangeRegisters_42:
                    2605   ; }
                    2606   ; else {
                    2607   ; printf("\r\nIllegal Register....") ;
000019B4  4879 0000 2608          pea       @m68kde~1_55.L
000019B8  4708      
000019BA  4E92      2609          jsr       (A2)
000019BC  584F      2610          addq.w    #4,A7
                    2611   ; return ;
000019BE  6000 00BA 2612          bra       ChangeRegisters_6
                    2613   ChangeRegisters_43:
000019C2  6000 00B2 2614          bra       ChangeRegisters_51
                    2615   ChangeRegisters_40:
                    2616   ; }
                    2617   ; }
                    2618   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000019C6  1013      2619          move.b    (A3),D0
000019C8  0C00 0073 2620          cmp.b     #115,D0
000019CC  6600 004E 2621          bne       ChangeRegisters_44
000019D0  0C02 0073 2622          cmp.b     #115,D2
000019D4  6600 0046 2623          bne       ChangeRegisters_44
                    2624   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000019D8  2F00      2625          move.l    D0,-(A7)
000019DA  4E95      2626          jsr       (A5)
000019DC  2200      2627          move.l    D0,D1
000019DE  201F      2628          move.l    (A7)+,D0
000019E0  2F01      2629          move.l    D1,-(A7)
000019E2  4EB9 0000 2630          jsr       _tolower
000019E6  2EEC      
000019E8  584F      2631          addq.w    #4,A7
000019EA  0C80 0000 2632          cmp.l     #112,D0
000019EE  0070      
000019F0  6618      2633          bne.s     ChangeRegisters_46
                    2634   ; printf("\r\nSystem SP = ") ;
000019F2  4879 0000 2635          pea       @m68kde~1_56.L
000019F6  4720      
000019F8  4E92      2636          jsr       (A2)
000019FA  584F      2637          addq.w    #4,A7
                    2638   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019FC  42A7      2639          clr.l     -(A7)
000019FE  4E94      2640          jsr       (A4)
00001A00  584F      2641          addq.w    #4,A7
00001A02  23C0 0B00 2642          move.l    D0,_SSP.L
00001A06  0124      
00001A08  600E      2643          bra.s     ChangeRegisters_47
                    2644   ChangeRegisters_46:
                    2645   ; }
                    2646   ; else {
                    2647   ; printf("\r\nIllegal Register....") ;
00001A0A  4879 0000 2648          pea       @m68kde~1_55.L
00001A0E  4708      
00001A10  4E92      2649          jsr       (A2)
00001A12  584F      2650          addq.w    #4,A7
                    2651   ; return ;
00001A14  6000 0064 2652          bra       ChangeRegisters_6
                    2653   ChangeRegisters_47:
00001A18  6000 005C 2654          bra       ChangeRegisters_51
                    2655   ChangeRegisters_44:
                    2656   ; }
                    2657   ; }
                    2658   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001A1C  1013      2659          move.b    (A3),D0
00001A1E  0C00 0070 2660          cmp.b     #112,D0
00001A22  6620      2661          bne.s     ChangeRegisters_48
00001A24  0C02 0063 2662          cmp.b     #99,D2
00001A28  661A      2663          bne.s     ChangeRegisters_48
                    2664   ; printf("\r\nPC = ") ;
00001A2A  4879 0000 2665          pea       @m68kde~1_57.L
00001A2E  4730      
00001A30  4E92      2666          jsr       (A2)
00001A32  584F      2667          addq.w    #4,A7
                    2668   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A34  42A7      2669          clr.l     -(A7)
00001A36  4E94      2670          jsr       (A4)
00001A38  584F      2671          addq.w    #4,A7
00001A3A  23C0 0B00 2672          move.l    D0,_PC.L
00001A3E  0120      
00001A40  6000 0034 2673          bra       ChangeRegisters_51
                    2674   ChangeRegisters_48:
                    2675   ; }
                    2676   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001A44  1013      2677          move.b    (A3),D0
00001A46  0C00 0073 2678          cmp.b     #115,D0
00001A4A  6620      2679          bne.s     ChangeRegisters_50
00001A4C  0C02 0072 2680          cmp.b     #114,D2
00001A50  661A      2681          bne.s     ChangeRegisters_50
                    2682   ; printf("\r\nSR = ") ;
00001A52  4879 0000 2683          pea       @m68kde~1_58.L
00001A56  4738      
00001A58  4E92      2684          jsr       (A2)
00001A5A  584F      2685          addq.w    #4,A7
                    2686   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001A5C  42A7      2687          clr.l     -(A7)
00001A5E  4EB8 0C58 2688          jsr       _Get4HexDigits
00001A62  584F      2689          addq.w    #4,A7
00001A64  33C0 0B00 2690          move.w    D0,_SR.L
00001A68  012C      
00001A6A  600A      2691          bra.s     ChangeRegisters_51
                    2692   ChangeRegisters_50:
                    2693   ; }
                    2694   ; else
                    2695   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001A6C  4879 0000 2696          pea       @m68kde~1_59.L
00001A70  4740      
00001A72  4E92      2697          jsr       (A2)
00001A74  584F      2698          addq.w    #4,A7
                    2699   ChangeRegisters_51:
                    2700   ; DumpRegisters() ;
00001A76  4EB8 12D4 2701          jsr       _DumpRegisters
                    2702   ChangeRegisters_6:
00001A7A  4CDF 3C0C 2703          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001A7E  4E5E      2704          unlk      A6
00001A80  4E75      2705          rts
                    2706   ; }
                    2707   ; void BreakPointDisplay(void)
                    2708   ; {
                    2709   _BreakPointDisplay:
00001A82  48E7 3030 2710          movem.l   D2/D3/A2/A3,-(A7)
00001A86  45F9 0000 2711          lea       _printf.L,A2
00001A8A  383C      
00001A8C  47F9 0B00 2712          lea       _BreakPointAddress.L,A3
00001A90  012E      
                    2713   ; int i, BreakPointsSet = 0 ;
00001A92  4283      2714          clr.l     D3
                    2715   ; // any break points  set
                    2716   ; for(i = 0; i < 8; i++)  {
00001A94  4282      2717          clr.l     D2
                    2718   BreakPointDisplay_1:
00001A96  0C82 0000 2719          cmp.l     #8,D2
00001A9A  0008      
00001A9C  6C1C      2720          bge.s     BreakPointDisplay_3
                    2721   ; if(BreakPointSetOrCleared[i] == 1)
00001A9E  2002      2722          move.l    D2,D0
00001AA0  E588      2723          lsl.l     #2,D0
00001AA2  41F9 0B00 2724          lea       _BreakPointSetOrCleared.L,A0
00001AA6  015E      
00001AA8  2030 0800 2725          move.l    0(A0,D0.L),D0
00001AAC  0C80 0000 2726          cmp.l     #1,D0
00001AB0  0001      
00001AB2  6602      2727          bne.s     BreakPointDisplay_4
                    2728   ; BreakPointsSet = 1;
00001AB4  7601      2729          moveq     #1,D3
                    2730   BreakPointDisplay_4:
00001AB6  5282      2731          addq.l    #1,D2
00001AB8  60DC      2732          bra       BreakPointDisplay_1
                    2733   BreakPointDisplay_3:
                    2734   ; }
                    2735   ; if(BreakPointsSet == 1) {
00001ABA  0C83 0000 2736          cmp.l     #1,D3
00001ABE  0001      
00001AC0  6616      2737          bne.s     BreakPointDisplay_6
                    2738   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001AC2  4879 0000 2739          pea       @m68kde~1_60.L
00001AC6  477C      
00001AC8  4E92      2740          jsr       (A2)
00001ACA  584F      2741          addq.w    #4,A7
                    2742   ; printf("\r\n---     ---------    -----------") ;
00001ACC  4879 0000 2743          pea       @m68kde~1_61.L
00001AD0  47A2      
00001AD2  4E92      2744          jsr       (A2)
00001AD4  584F      2745          addq.w    #4,A7
00001AD6  600A      2746          bra.s     BreakPointDisplay_7
                    2747   BreakPointDisplay_6:
                    2748   ; }
                    2749   ; else
                    2750   ; printf("\r\nNo BreakPoints Set") ;
00001AD8  4879 0000 2751          pea       @m68kde~1_62.L
00001ADC  47C6      
00001ADE  4E92      2752          jsr       (A2)
00001AE0  584F      2753          addq.w    #4,A7
                    2754   BreakPointDisplay_7:
                    2755   ; for(i = 0; i < 8; i++)  {
00001AE2  4282      2756          clr.l     D2
                    2757   BreakPointDisplay_8:
00001AE4  0C82 0000 2758          cmp.l     #8,D2
00001AE8  0008      
00001AEA  6C00 005A 2759          bge       BreakPointDisplay_10
                    2760   ; // put opcode back, then put break point back
                    2761   ; if(BreakPointSetOrCleared[i] == 1)  {
00001AEE  2002      2762          move.l    D2,D0
00001AF0  E588      2763          lsl.l     #2,D0
00001AF2  41F9 0B00 2764          lea       _BreakPointSetOrCleared.L,A0
00001AF6  015E      
00001AF8  2030 0800 2765          move.l    0(A0,D0.L),D0
00001AFC  0C80 0000 2766          cmp.l     #1,D0
00001B00  0001      
00001B02  6600 003E 2767          bne       BreakPointDisplay_11
                    2768   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001B06  2002      2769          move.l    D2,D0
00001B08  E388      2770          lsl.l     #1,D0
00001B0A  41F9 0B00 2771          lea       _BreakPointInstruction.L,A0
00001B0E  014E      
00001B10  2202      2772          move.l    D2,D1
00001B12  E589      2773          lsl.l     #2,D1
00001B14  2233 1800 2774          move.l    0(A3,D1.L),D1
00001B18  2241      2775          move.l    D1,A1
00001B1A  32B0 0800 2776          move.w    0(A0,D0.L),(A1)
                    2777   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001B1E  2002      2778          move.l    D2,D0
00001B20  E588      2779          lsl.l     #2,D0
00001B22  2033 0800 2780          move.l    0(A3,D0.L),D0
00001B26  2040      2781          move.l    D0,A0
00001B28  30BC 4E4E 2782          move.w    #20046,(A0)
                    2783   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001B2C  2202      2784          move.l    D2,D1
00001B2E  E589      2785          lsl.l     #2,D1
00001B30  2F33 1800 2786          move.l    0(A3,D1.L),-(A7)
00001B34  2F02      2787          move.l    D2,-(A7)
00001B36  4879 0000 2788          pea       @m68kde~1_63.L
00001B3A  47DC      
00001B3C  4E92      2789          jsr       (A2)
00001B3E  DEFC 000C 2790          add.w     #12,A7
                    2791   BreakPointDisplay_11:
00001B42  5282      2792          addq.l    #1,D2
00001B44  609E      2793          bra       BreakPointDisplay_8
                    2794   BreakPointDisplay_10:
                    2795   ; }
                    2796   ; }
                    2797   ; printf("\r\n") ;
00001B46  4879 0000 2798          pea       @m68kde~1_1.L
00001B4A  4212      
00001B4C  4E92      2799          jsr       (A2)
00001B4E  584F      2800          addq.w    #4,A7
00001B50  4CDF 0C0C 2801          movem.l   (A7)+,D2/D3/A2/A3
00001B54  4E75      2802          rts
                    2803   ; }
                    2804   ; void WatchPointDisplay(void)
                    2805   ; {
                    2806   _WatchPointDisplay:
00001B56  48E7 3020 2807          movem.l   D2/D3/A2,-(A7)
00001B5A  45F9 0000 2808          lea       _printf.L,A2
00001B5E  383C      
                    2809   ; int i ;
                    2810   ; int WatchPointsSet = 0 ;
00001B60  4283      2811          clr.l     D3
                    2812   ; // any watchpoints set
                    2813   ; for(i = 0; i < 8; i++)  {
00001B62  4282      2814          clr.l     D2
                    2815   WatchPointDisplay_1:
00001B64  0C82 0000 2816          cmp.l     #8,D2
00001B68  0008      
00001B6A  6C1C      2817          bge.s     WatchPointDisplay_3
                    2818   ; if(WatchPointSetOrCleared[i] == 1)
00001B6C  2002      2819          move.l    D2,D0
00001B6E  E588      2820          lsl.l     #2,D0
00001B70  41F9 0B00 2821          lea       _WatchPointSetOrCleared.L,A0
00001B74  01A2      
00001B76  2030 0800 2822          move.l    0(A0,D0.L),D0
00001B7A  0C80 0000 2823          cmp.l     #1,D0
00001B7E  0001      
00001B80  6602      2824          bne.s     WatchPointDisplay_4
                    2825   ; WatchPointsSet = 1;
00001B82  7601      2826          moveq     #1,D3
                    2827   WatchPointDisplay_4:
00001B84  5282      2828          addq.l    #1,D2
00001B86  60DC      2829          bra       WatchPointDisplay_1
                    2830   WatchPointDisplay_3:
                    2831   ; }
                    2832   ; if(WatchPointsSet == 1) {
00001B88  0C83 0000 2833          cmp.l     #1,D3
00001B8C  0001      
00001B8E  6616      2834          bne.s     WatchPointDisplay_6
                    2835   ; printf("\r\nNum     Address") ;
00001B90  4879 0000 2836          pea       @m68kde~1_64.L
00001B94  47EC      
00001B96  4E92      2837          jsr       (A2)
00001B98  584F      2838          addq.w    #4,A7
                    2839   ; printf("\r\n---     ---------") ;
00001B9A  4879 0000 2840          pea       @m68kde~1_65.L
00001B9E  47FE      
00001BA0  4E92      2841          jsr       (A2)
00001BA2  584F      2842          addq.w    #4,A7
00001BA4  600A      2843          bra.s     WatchPointDisplay_7
                    2844   WatchPointDisplay_6:
                    2845   ; }
                    2846   ; else
                    2847   ; printf("\r\nNo WatchPoints Set") ;
00001BA6  4879 0000 2848          pea       @m68kde~1_66.L
00001BAA  4812      
00001BAC  4E92      2849          jsr       (A2)
00001BAE  584F      2850          addq.w    #4,A7
                    2851   WatchPointDisplay_7:
                    2852   ; for(i = 0; i < 8; i++)  {
00001BB0  4282      2853          clr.l     D2
                    2854   WatchPointDisplay_8:
00001BB2  0C82 0000 2855          cmp.l     #8,D2
00001BB6  0008      
00001BB8  6C00 0038 2856          bge       WatchPointDisplay_10
                    2857   ; if(WatchPointSetOrCleared[i] == 1)
00001BBC  2002      2858          move.l    D2,D0
00001BBE  E588      2859          lsl.l     #2,D0
00001BC0  41F9 0B00 2860          lea       _WatchPointSetOrCleared.L,A0
00001BC4  01A2      
00001BC6  2030 0800 2861          move.l    0(A0,D0.L),D0
00001BCA  0C80 0000 2862          cmp.l     #1,D0
00001BCE  0001      
00001BD0  661C      2863          bne.s     WatchPointDisplay_11
                    2864   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001BD2  2202      2865          move.l    D2,D1
00001BD4  E589      2866          lsl.l     #2,D1
00001BD6  41F9 0B00 2867          lea       _WatchPointAddress.L,A0
00001BDA  0182      
00001BDC  2F30 1800 2868          move.l    0(A0,D1.L),-(A7)
00001BE0  2F02      2869          move.l    D2,-(A7)
00001BE2  4879 0000 2870          pea       @m68kde~1_63.L
00001BE6  47DC      
00001BE8  4E92      2871          jsr       (A2)
00001BEA  DEFC 000C 2872          add.w     #12,A7
                    2873   WatchPointDisplay_11:
00001BEE  5282      2874          addq.l    #1,D2
00001BF0  60C0      2875          bra       WatchPointDisplay_8
                    2876   WatchPointDisplay_10:
                    2877   ; }
                    2878   ; printf("\r\n") ;
00001BF2  4879 0000 2879          pea       @m68kde~1_1.L
00001BF6  4212      
00001BF8  4E92      2880          jsr       (A2)
00001BFA  584F      2881          addq.w    #4,A7
00001BFC  4CDF 040C 2882          movem.l   (A7)+,D2/D3/A2
00001C00  4E75      2883          rts
                    2884   ; }
                    2885   ; void BreakPointClear(void)
                    2886   ; {
                    2887   _BreakPointClear:
00001C02  4E56 FFFC 2888          link      A6,#-4
00001C06  48E7 2020 2889          movem.l   D2/A2,-(A7)
00001C0A  45F9 0000 2890          lea       _printf.L,A2
00001C0E  383C      
                    2891   ; unsigned int i ;
                    2892   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2893   ; BreakPointDisplay() ;
00001C10  4EB8 1A82 2894          jsr       _BreakPointDisplay
                    2895   ; printf("\r\nEnter Break Point Number: ") ;
00001C14  4879 0000 2896          pea       @m68kde~1_67.L
00001C18  4828      
00001C1A  4E92      2897          jsr       (A2)
00001C1C  584F      2898          addq.w    #4,A7
                    2899   ; i = xtod(_getch()) ;           // get break pointer number
00001C1E  2F00      2900          move.l    D0,-(A7)
00001C20  4EB8 0B68 2901          jsr       __getch
00001C24  2200      2902          move.l    D0,D1
00001C26  201F      2903          move.l    (A7)+,D0
00001C28  2F01      2904          move.l    D1,-(A7)
00001C2A  4EB8 0BD2 2905          jsr       _xtod
00001C2E  584F      2906          addq.w    #4,A7
00001C30  C0BC 0000 2907          and.l     #255,D0
00001C34  00FF      
00001C36  2400      2908          move.l    D0,D2
                    2909   ; if((i < 0) || (i > 7))   {
00001C38  0C82 0000 2910          cmp.l     #0,D2
00001C3C  0000      
00001C3E  6508      2911          blo.s     BreakPointClear_3
00001C40  0C82 0000 2912          cmp.l     #7,D2
00001C44  0007      
00001C46  630E      2913          bls.s     BreakPointClear_1
                    2914   BreakPointClear_3:
                    2915   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001C48  4879 0000 2916          pea       @m68kde~1_68.L
00001C4C  4846      
00001C4E  4E92      2917          jsr       (A2)
00001C50  584F      2918          addq.w    #4,A7
                    2919   ; return ;
00001C52  6000 0080 2920          bra       BreakPointClear_4
                    2921   BreakPointClear_1:
                    2922   ; }
                    2923   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001C56  2002      2924          move.l    D2,D0
00001C58  E588      2925          lsl.l     #2,D0
00001C5A  41F9 0B00 2926          lea       _BreakPointSetOrCleared.L,A0
00001C5E  015E      
00001C60  2030 0800 2927          move.l    0(A0,D0.L),D0
00001C64  0C80 0000 2928          cmp.l     #1,D0
00001C68  0001      
00001C6A  6600 005A 2929          bne       BreakPointClear_5
                    2930   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001C6E  2002      2931          move.l    D2,D0
00001C70  E588      2932          lsl.l     #2,D0
00001C72  41F9 0B00 2933          lea       _BreakPointAddress.L,A0
00001C76  012E      
00001C78  2D70 0800 2934          move.l    0(A0,D0.L),-4(A6)
00001C7C  FFFC      
                    2935   ; BreakPointAddress[i] = 0 ;
00001C7E  2002      2936          move.l    D2,D0
00001C80  E588      2937          lsl.l     #2,D0
00001C82  41F9 0B00 2938          lea       _BreakPointAddress.L,A0
00001C86  012E      
00001C88  42B0 0800 2939          clr.l     0(A0,D0.L)
                    2940   ; BreakPointSetOrCleared[i] = 0 ;
00001C8C  2002      2941          move.l    D2,D0
00001C8E  E588      2942          lsl.l     #2,D0
00001C90  41F9 0B00 2943          lea       _BreakPointSetOrCleared.L,A0
00001C94  015E      
00001C96  42B0 0800 2944          clr.l     0(A0,D0.L)
                    2945   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001C9A  2002      2946          move.l    D2,D0
00001C9C  E388      2947          lsl.l     #1,D0
00001C9E  41F9 0B00 2948          lea       _BreakPointInstruction.L,A0
00001CA2  014E      
00001CA4  226E FFFC 2949          move.l    -4(A6),A1
00001CA8  32B0 0800 2950          move.w    0(A0,D0.L),(A1)
                    2951   ; BreakPointInstruction[i] = 0 ;
00001CAC  2002      2952          move.l    D2,D0
00001CAE  E388      2953          lsl.l     #1,D0
00001CB0  41F9 0B00 2954          lea       _BreakPointInstruction.L,A0
00001CB4  014E      
00001CB6  4270 0800 2955          clr.w     0(A0,D0.L)
                    2956   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001CBA  4879 0000 2957          pea       @m68kde~1_69.L
00001CBE  4862      
00001CC0  4E92      2958          jsr       (A2)
00001CC2  584F      2959          addq.w    #4,A7
00001CC4  600A      2960          bra.s     BreakPointClear_6
                    2961   BreakPointClear_5:
                    2962   ; }
                    2963   ; else
                    2964   ; printf("\r\nBreak Point wasn't Set.....") ;
00001CC6  4879 0000 2965          pea       @m68kde~1_70.L
00001CCA  4880      
00001CCC  4E92      2966          jsr       (A2)
00001CCE  584F      2967          addq.w    #4,A7
                    2968   BreakPointClear_6:
                    2969   ; BreakPointDisplay() ;
00001CD0  4EB8 1A82 2970          jsr       _BreakPointDisplay
                    2971   ; return ;
                    2972   BreakPointClear_4:
00001CD4  4CDF 0404 2973          movem.l   (A7)+,D2/A2
00001CD8  4E5E      2974          unlk      A6
00001CDA  4E75      2975          rts
                    2976   ; }
                    2977   ; void WatchPointClear(void)
                    2978   ; {
                    2979   _WatchPointClear:
00001CDC  48E7 2020 2980          movem.l   D2/A2,-(A7)
00001CE0  45F9 0000 2981          lea       _printf.L,A2
00001CE4  383C      
                    2982   ; unsigned int i ;
                    2983   ; WatchPointDisplay() ;
00001CE6  4EB8 1B56 2984          jsr       _WatchPointDisplay
                    2985   ; printf("\r\nEnter Watch Point Number: ") ;
00001CEA  4879 0000 2986          pea       @m68kde~1_71.L
00001CEE  489E      
00001CF0  4E92      2987          jsr       (A2)
00001CF2  584F      2988          addq.w    #4,A7
                    2989   ; i = xtod(_getch()) ;           // get watch pointer number
00001CF4  2F00      2990          move.l    D0,-(A7)
00001CF6  4EB8 0B68 2991          jsr       __getch
00001CFA  2200      2992          move.l    D0,D1
00001CFC  201F      2993          move.l    (A7)+,D0
00001CFE  2F01      2994          move.l    D1,-(A7)
00001D00  4EB8 0BD2 2995          jsr       _xtod
00001D04  584F      2996          addq.w    #4,A7
00001D06  C0BC 0000 2997          and.l     #255,D0
00001D0A  00FF      
00001D0C  2400      2998          move.l    D0,D2
                    2999   ; if((i < 0) || (i > 7))   {
00001D0E  0C82 0000 3000          cmp.l     #0,D2
00001D12  0000      
00001D14  6508      3001          blo.s     WatchPointClear_3
00001D16  0C82 0000 3002          cmp.l     #7,D2
00001D1A  0007      
00001D1C  630E      3003          bls.s     WatchPointClear_1
                    3004   WatchPointClear_3:
                    3005   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D1E  4879 0000 3006          pea       @m68kde~1_68.L
00001D22  4846      
00001D24  4E92      3007          jsr       (A2)
00001D26  584F      3008          addq.w    #4,A7
                    3009   ; return ;
00001D28  6000 004E 3010          bra       WatchPointClear_4
                    3011   WatchPointClear_1:
                    3012   ; }
                    3013   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001D2C  2002      3014          move.l    D2,D0
00001D2E  E588      3015          lsl.l     #2,D0
00001D30  41F9 0B00 3016          lea       _WatchPointSetOrCleared.L,A0
00001D34  01A2      
00001D36  2030 0800 3017          move.l    0(A0,D0.L),D0
00001D3A  0C80 0000 3018          cmp.l     #1,D0
00001D3E  0001      
00001D40  6628      3019          bne.s     WatchPointClear_5
                    3020   ; WatchPointAddress[i] = 0 ;
00001D42  2002      3021          move.l    D2,D0
00001D44  E588      3022          lsl.l     #2,D0
00001D46  41F9 0B00 3023          lea       _WatchPointAddress.L,A0
00001D4A  0182      
00001D4C  42B0 0800 3024          clr.l     0(A0,D0.L)
                    3025   ; WatchPointSetOrCleared[i] = 0 ;
00001D50  2002      3026          move.l    D2,D0
00001D52  E588      3027          lsl.l     #2,D0
00001D54  41F9 0B00 3028          lea       _WatchPointSetOrCleared.L,A0
00001D58  01A2      
00001D5A  42B0 0800 3029          clr.l     0(A0,D0.L)
                    3030   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001D5E  4879 0000 3031          pea       @m68kde~1_72.L
00001D62  48BC      
00001D64  4E92      3032          jsr       (A2)
00001D66  584F      3033          addq.w    #4,A7
00001D68  600A      3034          bra.s     WatchPointClear_6
                    3035   WatchPointClear_5:
                    3036   ; }
                    3037   ; else
                    3038   ; printf("\r\nWatch Point Was not Set.....") ;
00001D6A  4879 0000 3039          pea       @m68kde~1_73.L
00001D6E  48DA      
00001D70  4E92      3040          jsr       (A2)
00001D72  584F      3041          addq.w    #4,A7
                    3042   WatchPointClear_6:
                    3043   ; WatchPointDisplay() ;
00001D74  4EB8 1B56 3044          jsr       _WatchPointDisplay
                    3045   ; return ;
                    3046   WatchPointClear_4:
00001D78  4CDF 0404 3047          movem.l   (A7)+,D2/A2
00001D7C  4E75      3048          rts
                    3049   ; }
                    3050   ; void DisableBreakPoints(void)
                    3051   ; {
                    3052   _DisableBreakPoints:
00001D7E  4E56 FFFC 3053          link      A6,#-4
00001D82  2F02      3054          move.l    D2,-(A7)
                    3055   ; int i ;
                    3056   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3057   ; for(i = 0; i < 8; i++)  {
00001D84  4282      3058          clr.l     D2
                    3059   DisableBreakPoints_1:
00001D86  0C82 0000 3060          cmp.l     #8,D2
00001D8A  0008      
00001D8C  6C00 003E 3061          bge       DisableBreakPoints_3
                    3062   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001D90  2002      3063          move.l    D2,D0
00001D92  E588      3064          lsl.l     #2,D0
00001D94  41F9 0B00 3065          lea       _BreakPointSetOrCleared.L,A0
00001D98  015E      
00001D9A  2030 0800 3066          move.l    0(A0,D0.L),D0
00001D9E  0C80 0000 3067          cmp.l     #1,D0
00001DA2  0001      
00001DA4  6622      3068          bne.s     DisableBreakPoints_4
                    3069   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001DA6  2002      3070          move.l    D2,D0
00001DA8  E588      3071          lsl.l     #2,D0
00001DAA  41F9 0B00 3072          lea       _BreakPointAddress.L,A0
00001DAE  012E      
00001DB0  2D70 0800 3073          move.l    0(A0,D0.L),-4(A6)
00001DB4  FFFC      
                    3074   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001DB6  2002      3075          move.l    D2,D0
00001DB8  E388      3076          lsl.l     #1,D0
00001DBA  41F9 0B00 3077          lea       _BreakPointInstruction.L,A0
00001DBE  014E      
00001DC0  226E FFFC 3078          move.l    -4(A6),A1
00001DC4  32B0 0800 3079          move.w    0(A0,D0.L),(A1)
                    3080   DisableBreakPoints_4:
00001DC8  5282      3081          addq.l    #1,D2
00001DCA  60BA      3082          bra       DisableBreakPoints_1
                    3083   DisableBreakPoints_3:
00001DCC  241F      3084          move.l    (A7)+,D2
00001DCE  4E5E      3085          unlk      A6
00001DD0  4E75      3086          rts
                    3087   ; }
                    3088   ; }
                    3089   ; }
                    3090   ; void EnableBreakPoints(void)
                    3091   ; {
                    3092   _EnableBreakPoints:
00001DD2  4E56 FFFC 3093          link      A6,#-4
00001DD6  2F02      3094          move.l    D2,-(A7)
                    3095   ; int i ;
                    3096   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3097   ; for(i = 0; i < 8; i++)  {
00001DD8  4282      3098          clr.l     D2
                    3099   EnableBreakPoints_1:
00001DDA  0C82 0000 3100          cmp.l     #8,D2
00001DDE  0008      
00001DE0  6C32      3101          bge.s     EnableBreakPoints_3
                    3102   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001DE2  2002      3103          move.l    D2,D0
00001DE4  E588      3104          lsl.l     #2,D0
00001DE6  41F9 0B00 3105          lea       _BreakPointSetOrCleared.L,A0
00001DEA  015E      
00001DEC  2030 0800 3106          move.l    0(A0,D0.L),D0
00001DF0  0C80 0000 3107          cmp.l     #1,D0
00001DF4  0001      
00001DF6  6618      3108          bne.s     EnableBreakPoints_4
                    3109   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001DF8  2002      3110          move.l    D2,D0
00001DFA  E588      3111          lsl.l     #2,D0
00001DFC  41F9 0B00 3112          lea       _BreakPointAddress.L,A0
00001E00  012E      
00001E02  2D70 0800 3113          move.l    0(A0,D0.L),-4(A6)
00001E06  FFFC      
                    3114   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001E08  206E FFFC 3115          move.l    -4(A6),A0
00001E0C  30BC 4E4E 3116          move.w    #20046,(A0)
                    3117   EnableBreakPoints_4:
00001E10  5282      3118          addq.l    #1,D2
00001E12  60C6      3119          bra       EnableBreakPoints_1
                    3120   EnableBreakPoints_3:
00001E14  241F      3121          move.l    (A7)+,D2
00001E16  4E5E      3122          unlk      A6
00001E18  4E75      3123          rts
                    3124   ; }
                    3125   ; }
                    3126   ; }
                    3127   ; void KillAllBreakPoints(void)
                    3128   ; {
                    3129   _KillAllBreakPoints:
00001E1A  4E56 FFFC 3130          link      A6,#-4
00001E1E  2F02      3131          move.l    D2,-(A7)
                    3132   ; int i ;
                    3133   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3134   ; for(i = 0; i < 8; i++)  {
00001E20  4282      3135          clr.l     D2
                    3136   KillAllBreakPoints_1:
00001E22  0C82 0000 3137          cmp.l     #8,D2
00001E26  0008      
00001E28  6C00 0052 3138          bge       KillAllBreakPoints_3
                    3139   ; // clear BP
                    3140   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E2C  2002      3141          move.l    D2,D0
00001E2E  E588      3142          lsl.l     #2,D0
00001E30  41F9 0B00 3143          lea       _BreakPointAddress.L,A0
00001E34  012E      
00001E36  2D70 0800 3144          move.l    0(A0,D0.L),-4(A6)
00001E3A  FFFC      
                    3145   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001E3C  2002      3146          move.l    D2,D0
00001E3E  E388      3147          lsl.l     #1,D0
00001E40  41F9 0B00 3148          lea       _BreakPointInstruction.L,A0
00001E44  014E      
00001E46  226E FFFC 3149          move.l    -4(A6),A1
00001E4A  32B0 0800 3150          move.w    0(A0,D0.L),(A1)
                    3151   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001E4E  2002      3152          move.l    D2,D0
00001E50  E588      3153          lsl.l     #2,D0
00001E52  41F9 0B00 3154          lea       _BreakPointAddress.L,A0
00001E56  012E      
00001E58  42B0 0800 3155          clr.l     0(A0,D0.L)
                    3156   ; BreakPointInstruction[i] = 0 ;
00001E5C  2002      3157          move.l    D2,D0
00001E5E  E388      3158          lsl.l     #1,D0
00001E60  41F9 0B00 3159          lea       _BreakPointInstruction.L,A0
00001E64  014E      
00001E66  4270 0800 3160          clr.w     0(A0,D0.L)
                    3161   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001E6A  2002      3162          move.l    D2,D0
00001E6C  E588      3163          lsl.l     #2,D0
00001E6E  41F9 0B00 3164          lea       _BreakPointSetOrCleared.L,A0
00001E72  015E      
00001E74  42B0 0800 3165          clr.l     0(A0,D0.L)
00001E78  5282      3166          addq.l    #1,D2
00001E7A  60A6      3167          bra       KillAllBreakPoints_1
                    3168   KillAllBreakPoints_3:
00001E7C  241F      3169          move.l    (A7)+,D2
00001E7E  4E5E      3170          unlk      A6
00001E80  4E75      3171          rts
                    3172   ; }
                    3173   ; //BreakPointDisplay() ;       // display the break points
                    3174   ; }
                    3175   ; void KillAllWatchPoints(void)
                    3176   ; {
                    3177   _KillAllWatchPoints:
00001E82  2F02      3178          move.l    D2,-(A7)
                    3179   ; int i ;
                    3180   ; for(i = 0; i < 8; i++)  {
00001E84  4282      3181          clr.l     D2
                    3182   KillAllWatchPoints_1:
00001E86  0C82 0000 3183          cmp.l     #8,D2
00001E8A  0008      
00001E8C  6C20      3184          bge.s     KillAllWatchPoints_3
                    3185   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001E8E  2002      3186          move.l    D2,D0
00001E90  E588      3187          lsl.l     #2,D0
00001E92  41F9 0B00 3188          lea       _WatchPointAddress.L,A0
00001E96  0182      
00001E98  42B0 0800 3189          clr.l     0(A0,D0.L)
                    3190   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001E9C  2002      3191          move.l    D2,D0
00001E9E  E588      3192          lsl.l     #2,D0
00001EA0  41F9 0B00 3193          lea       _WatchPointSetOrCleared.L,A0
00001EA4  01A2      
00001EA6  42B0 0800 3194          clr.l     0(A0,D0.L)
00001EAA  5282      3195          addq.l    #1,D2
00001EAC  60D8      3196          bra       KillAllWatchPoints_1
                    3197   KillAllWatchPoints_3:
00001EAE  241F      3198          move.l    (A7)+,D2
00001EB0  4E75      3199          rts
                    3200   ; }
                    3201   ; //WatchPointDisplay() ;       // display the break points
                    3202   ; }
                    3203   ; void SetBreakPoint(void)
                    3204   ; {
                    3205   _SetBreakPoint:
00001EB2  4E56 FFFC 3206          link      A6,#-4
00001EB6  48E7 3830 3207          movem.l   D2/D3/D4/A2/A3,-(A7)
00001EBA  45F9 0000 3208          lea       _printf.L,A2
00001EBE  383C      
00001EC0  47F9 0B00 3209          lea       _BreakPointSetOrCleared.L,A3
00001EC4  015E      
                    3210   ; int i ;
                    3211   ; int BPNumber;
                    3212   ; int BPAddress;
                    3213   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3214   ; // see if any free break points
                    3215   ; for(i = 0; i < 8; i ++) {
00001EC6  4282      3216          clr.l     D2
                    3217   SetBreakPoint_1:
00001EC8  0C82 0000 3218          cmp.l     #8,D2
00001ECC  0008      
00001ECE  6C10      3219          bge.s     SetBreakPoint_3
                    3220   ; if( BreakPointSetOrCleared[i] == 0)
00001ED0  2002      3221          move.l    D2,D0
00001ED2  E588      3222          lsl.l     #2,D0
00001ED4  2033 0800 3223          move.l    0(A3,D0.L),D0
00001ED8  6602      3224          bne.s     SetBreakPoint_4
                    3225   ; break ;         // if spare BP found allow user to set it
00001EDA  6004      3226          bra.s     SetBreakPoint_3
                    3227   SetBreakPoint_4:
00001EDC  5282      3228          addq.l    #1,D2
00001EDE  60E8      3229          bra       SetBreakPoint_1
                    3230   SetBreakPoint_3:
                    3231   ; }
                    3232   ; if(i == 8) {
00001EE0  0C82 0000 3233          cmp.l     #8,D2
00001EE4  0008      
00001EE6  660E      3234          bne.s     SetBreakPoint_6
                    3235   ; printf("\r\nNo FREE Break Points.....") ;
00001EE8  4879 0000 3236          pea       @m68kde~1_74.L
00001EEC  48FA      
00001EEE  4E92      3237          jsr       (A2)
00001EF0  584F      3238          addq.w    #4,A7
                    3239   ; return ;
00001EF2  6000 00D6 3240          bra       SetBreakPoint_15
                    3241   SetBreakPoint_6:
                    3242   ; }
                    3243   ; printf("\r\nBreak Point Address: ") ;
00001EF6  4879 0000 3244          pea       @m68kde~1_75.L
00001EFA  4916      
00001EFC  4E92      3245          jsr       (A2)
00001EFE  584F      3246          addq.w    #4,A7
                    3247   ; BPAddress = Get8HexDigits(0) ;
00001F00  42A7      3248          clr.l     -(A7)
00001F02  4EB8 0CA4 3249          jsr       _Get8HexDigits
00001F06  584F      3250          addq.w    #4,A7
00001F08  2600      3251          move.l    D0,D3
                    3252   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001F0A  2803      3253          move.l    D3,D4
                    3254   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001F0C  2003      3255          move.l    D3,D0
00001F0E  C0BC 0000 3256          and.l     #1,D0
00001F12  0001      
00001F14  0C80 0000 3257          cmp.l     #1,D0
00001F18  0001      
00001F1A  660E      3258          bne.s     SetBreakPoint_9
                    3259   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001F1C  4879 0000 3260          pea       @m68kde~1_76.L
00001F20  492E      
00001F22  4E92      3261          jsr       (A2)
00001F24  584F      3262          addq.w    #4,A7
                    3263   ; return ;
00001F26  6000 00A2 3264          bra       SetBreakPoint_15
                    3265   SetBreakPoint_9:
                    3266   ; }
                    3267   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001F2A  0C83 0000 3268          cmp.l     #32768,D3
00001F2E  8000      
00001F30  640E      3269          bhs.s     SetBreakPoint_11
                    3270   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001F32  4879 0000 3271          pea       @m68kde~1_77.L
00001F36  4964      
00001F38  4E92      3272          jsr       (A2)
00001F3A  584F      3273          addq.w    #4,A7
                    3274   ; return ;
00001F3C  6000 008C 3275          bra       SetBreakPoint_15
                    3276   SetBreakPoint_11:
                    3277   ; }
                    3278   ; // search for first free bp or existing same BP
                    3279   ; for(i = 0; i < 8; i++)  {
00001F40  4282      3280          clr.l     D2
                    3281   SetBreakPoint_13:
00001F42  0C82 0000 3282          cmp.l     #8,D2
00001F46  0008      
00001F48  6C00 0080 3283          bge       SetBreakPoint_15
                    3284   ; if(BreakPointAddress[i] == BPAddress)   {
00001F4C  2002      3285          move.l    D2,D0
00001F4E  E588      3286          lsl.l     #2,D0
00001F50  41F9 0B00 3287          lea       _BreakPointAddress.L,A0
00001F54  012E      
00001F56  B6B0 0800 3288          cmp.l     0(A0,D0.L),D3
00001F5A  6610      3289          bne.s     SetBreakPoint_16
                    3290   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001F5C  2F03      3291          move.l    D3,-(A7)
00001F5E  4879 0000 3292          pea       @m68kde~1_78.L
00001F62  49AC      
00001F64  4E92      3293          jsr       (A2)
00001F66  504F      3294          addq.w    #8,A7
                    3295   ; return ;
00001F68  6000 0060 3296          bra       SetBreakPoint_15
                    3297   SetBreakPoint_16:
                    3298   ; }
                    3299   ; if(BreakPointSetOrCleared[i] == 0) {
00001F6C  2002      3300          move.l    D2,D0
00001F6E  E588      3301          lsl.l     #2,D0
00001F70  2033 0800 3302          move.l    0(A3,D0.L),D0
00001F74  6600 004E 3303          bne       SetBreakPoint_18
                    3304   ; // set BP here
                    3305   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001F78  2002      3306          move.l    D2,D0
00001F7A  E588      3307          lsl.l     #2,D0
00001F7C  27BC 0000 3308          move.l    #1,0(A3,D0.L)
00001F80  0001 0800 
                    3309   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001F84  2044      3310          move.l    D4,A0
00001F86  2002      3311          move.l    D2,D0
00001F88  E388      3312          lsl.l     #1,D0
00001F8A  43F9 0B00 3313          lea       _BreakPointInstruction.L,A1
00001F8E  014E      
00001F90  3390 0800 3314          move.w    (A0),0(A1,D0.L)
                    3315   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001F94  2F04      3316          move.l    D4,-(A7)
00001F96  4879 0000 3317          pea       @m68kde~1_79.L
00001F9A  49E4      
00001F9C  4E92      3318          jsr       (A2)
00001F9E  504F      3319          addq.w    #8,A7
                    3320   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001FA0  2044      3321          move.l    D4,A0
00001FA2  30BC 4E4E 3322          move.w    #20046,(A0)
                    3323   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001FA6  2002      3324          move.l    D2,D0
00001FA8  E588      3325          lsl.l     #2,D0
00001FAA  41F9 0B00 3326          lea       _BreakPointAddress.L,A0
00001FAE  012E      
00001FB0  2183 0800 3327          move.l    D3,0(A0,D0.L)
                    3328   ; printf("\r\n") ;
00001FB4  4879 0000 3329          pea       @m68kde~1_1.L
00001FB8  4212      
00001FBA  4E92      3330          jsr       (A2)
00001FBC  584F      3331          addq.w    #4,A7
                    3332   ; BreakPointDisplay() ;       // display the break points
00001FBE  4EB8 1A82 3333          jsr       _BreakPointDisplay
                    3334   ; return ;
00001FC2  6006      3335          bra.s     SetBreakPoint_15
                    3336   SetBreakPoint_18:
00001FC4  5282      3337          addq.l    #1,D2
00001FC6  6000 FF7A 3338          bra       SetBreakPoint_13
                    3339   SetBreakPoint_15:
00001FCA  4CDF 0C1C 3340          movem.l   (A7)+,D2/D3/D4/A2/A3
00001FCE  4E5E      3341          unlk      A6
00001FD0  4E75      3342          rts
                    3343   ; }
                    3344   ; }
                    3345   ; }
                    3346   ; void SetWatchPoint(void)
                    3347   ; {
                    3348   _SetWatchPoint:
00001FD2  4E56 FFF8 3349          link      A6,#-8
00001FD6  48E7 3030 3350          movem.l   D2/D3/A2/A3,-(A7)
00001FDA  45F9 0000 3351          lea       _printf.L,A2
00001FDE  383C      
00001FE0  47F9 0B00 3352          lea       _WatchPointSetOrCleared.L,A3
00001FE4  01A2      
                    3353   ; int i ;
                    3354   ; int WPNumber;
                    3355   ; int WPAddress;
                    3356   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3357   ; // see if any free break points
                    3358   ; for(i = 0; i < 8; i ++) {
00001FE6  4282      3359          clr.l     D2
                    3360   SetWatchPoint_1:
00001FE8  0C82 0000 3361          cmp.l     #8,D2
00001FEC  0008      
00001FEE  6C10      3362          bge.s     SetWatchPoint_3
                    3363   ; if( WatchPointSetOrCleared[i] == 0)
00001FF0  2002      3364          move.l    D2,D0
00001FF2  E588      3365          lsl.l     #2,D0
00001FF4  2033 0800 3366          move.l    0(A3,D0.L),D0
00001FF8  6602      3367          bne.s     SetWatchPoint_4
                    3368   ; break ;         // if spare WP found allow user to set it
00001FFA  6004      3369          bra.s     SetWatchPoint_3
                    3370   SetWatchPoint_4:
00001FFC  5282      3371          addq.l    #1,D2
00001FFE  60E8      3372          bra       SetWatchPoint_1
                    3373   SetWatchPoint_3:
                    3374   ; }
                    3375   ; if(i == 8) {
00002000  0C82 0000 3376          cmp.l     #8,D2
00002004  0008      
00002006  660E      3377          bne.s     SetWatchPoint_6
                    3378   ; printf("\r\nNo FREE Watch Points.....") ;
00002008  4879 0000 3379          pea       @m68kde~1_80.L
0000200C  4A0A      
0000200E  4E92      3380          jsr       (A2)
00002010  584F      3381          addq.w    #4,A7
                    3382   ; return ;
00002012  6000 008C 3383          bra       SetWatchPoint_11
                    3384   SetWatchPoint_6:
                    3385   ; }
                    3386   ; printf("\r\nWatch Point Address: ") ;
00002016  4879 0000 3387          pea       @m68kde~1_81.L
0000201A  4A26      
0000201C  4E92      3388          jsr       (A2)
0000201E  584F      3389          addq.w    #4,A7
                    3390   ; WPAddress = Get8HexDigits(0) ;
00002020  42A7      3391          clr.l     -(A7)
00002022  4EB8 0CA4 3392          jsr       _Get8HexDigits
00002026  584F      3393          addq.w    #4,A7
00002028  2600      3394          move.l    D0,D3
                    3395   ; // search for first free wp or existing same wp
                    3396   ; for(i = 0; i < 8; i++)  {
0000202A  4282      3397          clr.l     D2
                    3398   SetWatchPoint_9:
0000202C  0C82 0000 3399          cmp.l     #8,D2
00002030  0008      
00002032  6C00 006C 3400          bge       SetWatchPoint_11
                    3401   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002036  2002      3402          move.l    D2,D0
00002038  E588      3403          lsl.l     #2,D0
0000203A  41F9 0B00 3404          lea       _WatchPointAddress.L,A0
0000203E  0182      
00002040  B6B0 0800 3405          cmp.l     0(A0,D0.L),D3
00002044  6614      3406          bne.s     SetWatchPoint_12
00002046  4A83      3407          tst.l     D3
00002048  6710      3408          beq.s     SetWatchPoint_12
                    3409   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
0000204A  2F03      3410          move.l    D3,-(A7)
0000204C  4879 0000 3411          pea       @m68kde~1_82.L
00002050  4A3E      
00002052  4E92      3412          jsr       (A2)
00002054  504F      3413          addq.w    #8,A7
                    3414   ; return ;
00002056  6000 0048 3415          bra       SetWatchPoint_11
                    3416   SetWatchPoint_12:
                    3417   ; }
                    3418   ; if(WatchPointSetOrCleared[i] == 0) {
0000205A  2002      3419          move.l    D2,D0
0000205C  E588      3420          lsl.l     #2,D0
0000205E  2033 0800 3421          move.l    0(A3,D0.L),D0
00002062  6600 0038 3422          bne       SetWatchPoint_14
                    3423   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002066  2002      3424          move.l    D2,D0
00002068  E588      3425          lsl.l     #2,D0
0000206A  27BC 0000 3426          move.l    #1,0(A3,D0.L)
0000206E  0001 0800 
                    3427   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002072  2F03      3428          move.l    D3,-(A7)
00002074  4879 0000 3429          pea       @m68kde~1_83.L
00002078  4A74      
0000207A  4E92      3430          jsr       (A2)
0000207C  504F      3431          addq.w    #8,A7
                    3432   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
0000207E  2002      3433          move.l    D2,D0
00002080  E588      3434          lsl.l     #2,D0
00002082  41F9 0B00 3435          lea       _WatchPointAddress.L,A0
00002086  0182      
00002088  2183 0800 3436          move.l    D3,0(A0,D0.L)
                    3437   ; printf("\r\n") ;
0000208C  4879 0000 3438          pea       @m68kde~1_1.L
00002090  4212      
00002092  4E92      3439          jsr       (A2)
00002094  584F      3440          addq.w    #4,A7
                    3441   ; WatchPointDisplay() ;       // display the break points
00002096  4EB8 1B56 3442          jsr       _WatchPointDisplay
                    3443   ; return ;
0000209A  6004      3444          bra.s     SetWatchPoint_11
                    3445   SetWatchPoint_14:
0000209C  5282      3446          addq.l    #1,D2
0000209E  608C      3447          bra       SetWatchPoint_9
                    3448   SetWatchPoint_11:
000020A0  4CDF 0C0C 3449          movem.l   (A7)+,D2/D3/A2/A3
000020A4  4E5E      3450          unlk      A6
000020A6  4E75      3451          rts
                    3452   ; }
                    3453   ; }
                    3454   ; }
                    3455   ; void HandleBreakPoint(void)
                    3456   ; {
                    3457   _HandleBreakPoint:
000020A8  4E56 FFFC 3458          link      A6,#-4
000020AC  48E7 0038 3459          movem.l   A2/A3/A4,-(A7)
000020B0  45F9 0B00 3460          lea       _i.L,A2
000020B4  00C4      
000020B6  47F9 0000 3461          lea       _printf.L,A3
000020BA  383C      
000020BC  49F9 0B00 3462          lea       _PC.L,A4
000020C0  0120      
                    3463   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3464   ; // now we have to put the break point back to run the instruction
                    3465   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3466   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000020C2  5594      3467          subq.l    #2,(A4)
                    3468   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000020C4  4879 0000 3469          pea       @m68kde~1_84.L
000020C8  4A9A      
000020CA  4E93      3470          jsr       (A3)
000020CC  584F      3471          addq.w    #4,A7
                    3472   ; printf("\r\nSingle Step : [ON]") ;
000020CE  4879 0000 3473          pea       @m68kde~1_85.L
000020D2  4AAE      
000020D4  4E93      3474          jsr       (A3)
000020D6  584F      3475          addq.w    #4,A7
                    3476   ; printf("\r\nBreakPoints : [Enabled]") ;
000020D8  4879 0000 3477          pea       @m68kde~1_86.L
000020DC  4AC4      
000020DE  4E93      3478          jsr       (A3)
000020E0  584F      3479          addq.w    #4,A7
                    3480   ; // now clear the break point (put original instruction back)
                    3481   ; ProgramBreakPointAddress = PC ;
000020E2  2D54 FFFC 3482          move.l    (A4),-4(A6)
                    3483   ; for(i = 0; i < 8; i ++) {
000020E6  4292      3484          clr.l     (A2)
                    3485   HandleBreakPoint_1:
000020E8  2012      3486          move.l    (A2),D0
000020EA  0C80 0000 3487          cmp.l     #8,D0
000020EE  0008      
000020F0  6400 0056 3488          bhs       HandleBreakPoint_3
                    3489   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000020F4  2012      3490          move.l    (A2),D0
000020F6  E588      3491          lsl.l     #2,D0
000020F8  41F9 0B00 3492          lea       _BreakPointAddress.L,A0
000020FC  012E      
000020FE  2230 0800 3493          move.l    0(A0,D0.L),D1
00002102  B294      3494          cmp.l     (A4),D1
00002104  6600 003E 3495          bne       HandleBreakPoint_4
                    3496   ; BreakPointAddress[i] = 0 ;
00002108  2012      3497          move.l    (A2),D0
0000210A  E588      3498          lsl.l     #2,D0
0000210C  41F9 0B00 3499          lea       _BreakPointAddress.L,A0
00002110  012E      
00002112  42B0 0800 3500          clr.l     0(A0,D0.L)
                    3501   ; BreakPointSetOrCleared[i] = 0 ;
00002116  2012      3502          move.l    (A2),D0
00002118  E588      3503          lsl.l     #2,D0
0000211A  41F9 0B00 3504          lea       _BreakPointSetOrCleared.L,A0
0000211E  015E      
00002120  42B0 0800 3505          clr.l     0(A0,D0.L)
                    3506   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002124  2012      3507          move.l    (A2),D0
00002126  E388      3508          lsl.l     #1,D0
00002128  41F9 0B00 3509          lea       _BreakPointInstruction.L,A0
0000212C  014E      
0000212E  226E FFFC 3510          move.l    -4(A6),A1
00002132  32B0 0800 3511          move.w    0(A0,D0.L),(A1)
                    3512   ; BreakPointInstruction[i] = 0 ;
00002136  2012      3513          move.l    (A2),D0
00002138  E388      3514          lsl.l     #1,D0
0000213A  41F9 0B00 3515          lea       _BreakPointInstruction.L,A0
0000213E  014E      
00002140  4270 0800 3516          clr.w     0(A0,D0.L)
                    3517   HandleBreakPoint_4:
00002144  5292      3518          addq.l    #1,(A2)
00002146  60A0      3519          bra       HandleBreakPoint_1
                    3520   HandleBreakPoint_3:
                    3521   ; }
                    3522   ; }
                    3523   ; DumpRegisters() ;
00002148  4EB8 12D4 3524          jsr       _DumpRegisters
                    3525   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000214C  4879 0000 3526          pea       @m68kde~1_48.L
00002150  4640      
00002152  4E93      3527          jsr       (A3)
00002154  584F      3528          addq.w    #4,A7
                    3529   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002156  4879 0000 3530          pea       @m68kde~1_87.L
0000215A  4ADE      
0000215C  4E93      3531          jsr       (A3)
0000215E  584F      3532          addq.w    #4,A7
                    3533   ; menu() ;
00002160  4EB9 0000 3534          jsr       _menu
00002164  236C      
00002166  4CDF 1C00 3535          movem.l   (A7)+,A2/A3/A4
0000216A  4E5E      3536          unlk      A6
0000216C  4E75      3537          rts
                    3538   ; }
                    3539   ; void UnknownCommand()
                    3540   ; {
                    3541   _UnknownCommand:
                    3542   ; printf("\r\nUnknown Command.....\r\n") ;
0000216E  4879 0000 3543          pea       @m68kde~1_88.L
00002172  4B06      
00002174  4EB9 0000 3544          jsr       _printf
00002178  383C      
0000217A  584F      3545          addq.w    #4,A7
                    3546   ; Help() ;
0000217C  4EB9 0000 3547          jsr       _Help
00002180  2292      
00002182  4E75      3548          rts
                    3549   ; }
                    3550   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3551   ; void CallDebugMonitor(void)
                    3552   ; {
                    3553   _CallDebugMonitor:
                    3554   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002184  4879 0000 3555          pea       @m68kde~1_89.L
00002188  4B20      
0000218A  4EB9 0000 3556          jsr       _printf
0000218E  383C      
00002190  584F      3557          addq.w    #4,A7
                    3558   ; menu();
00002192  4EB9 0000 3559          jsr       _menu
00002196  236C      
00002198  4E75      3560          rts
                    3561   ; }
                    3562   ; void Breakpoint(void)
                    3563   ; {
                    3564   _Breakpoint:
0000219A  2F02      3565          move.l    D2,-(A7)
                    3566   ; char c;
                    3567   ; c = toupper(_getch());
0000219C  2F00      3568          move.l    D0,-(A7)
0000219E  4EB8 0B68 3569          jsr       __getch
000021A2  2200      3570          move.l    D0,D1
000021A4  201F      3571          move.l    (A7)+,D0
000021A6  2F01      3572          move.l    D1,-(A7)
000021A8  4EB9 0000 3573          jsr       _toupper
000021AC  2F7A      
000021AE  584F      3574          addq.w    #4,A7
000021B0  1400      3575          move.b    D0,D2
                    3576   ; if( c == (char)('D'))                                      // BreakPoint Display
000021B2  0C02 0044 3577          cmp.b     #68,D2
000021B6  6608      3578          bne.s     Breakpoint_1
                    3579   ; BreakPointDisplay() ;
000021B8  4EB8 1A82 3580          jsr       _BreakPointDisplay
000021BC  6000 0054 3581          bra       Breakpoint_10
                    3582   Breakpoint_1:
                    3583   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000021C0  0C02 004B 3584          cmp.b     #75,D2
000021C4  6630      3585          bne.s     Breakpoint_3
                    3586   ; printf("\r\nKill All Break Points...(y/n)?") ;
000021C6  4879 0000 3587          pea       @m68kde~1_90.L
000021CA  4B40      
000021CC  4EB9 0000 3588          jsr       _printf
000021D0  383C      
000021D2  584F      3589          addq.w    #4,A7
                    3590   ; c = toupper(_getch());
000021D4  2F00      3591          move.l    D0,-(A7)
000021D6  4EB8 0B68 3592          jsr       __getch
000021DA  2200      3593          move.l    D0,D1
000021DC  201F      3594          move.l    (A7)+,D0
000021DE  2F01      3595          move.l    D1,-(A7)
000021E0  4EB9 0000 3596          jsr       _toupper
000021E4  2F7A      
000021E6  584F      3597          addq.w    #4,A7
000021E8  1400      3598          move.b    D0,D2
                    3599   ; if(c == (char)('Y'))
000021EA  0C02 0059 3600          cmp.b     #89,D2
000021EE  6604      3601          bne.s     Breakpoint_5
                    3602   ; KillAllBreakPoints() ;
000021F0  4EB8 1E1A 3603          jsr       _KillAllBreakPoints
                    3604   Breakpoint_5:
000021F4  601C      3605          bra.s     Breakpoint_10
                    3606   Breakpoint_3:
                    3607   ; }
                    3608   ; else if(c == (char)('S')) {
000021F6  0C02 0053 3609          cmp.b     #83,D2
000021FA  6606      3610          bne.s     Breakpoint_7
                    3611   ; SetBreakPoint() ;
000021FC  4EB8 1EB2 3612          jsr       _SetBreakPoint
00002200  6010      3613          bra.s     Breakpoint_10
                    3614   Breakpoint_7:
                    3615   ; }
                    3616   ; else if(c == (char)('C')) {
00002202  0C02 0043 3617          cmp.b     #67,D2
00002206  6606      3618          bne.s     Breakpoint_9
                    3619   ; BreakPointClear() ;
00002208  4EB8 1C02 3620          jsr       _BreakPointClear
0000220C  6004      3621          bra.s     Breakpoint_10
                    3622   Breakpoint_9:
                    3623   ; }
                    3624   ; else
                    3625   ; UnknownCommand() ;
0000220E  4EB8 216E 3626          jsr       _UnknownCommand
                    3627   Breakpoint_10:
00002212  241F      3628          move.l    (A7)+,D2
00002214  4E75      3629          rts
                    3630   ; }
                    3631   ; void Watchpoint(void)
                    3632   ; {
                    3633   _Watchpoint:
00002216  2F02      3634          move.l    D2,-(A7)
                    3635   ; char c;
                    3636   ; c = toupper(_getch());
00002218  2F00      3637          move.l    D0,-(A7)
0000221A  4EB8 0B68 3638          jsr       __getch
0000221E  2200      3639          move.l    D0,D1
00002220  201F      3640          move.l    (A7)+,D0
00002222  2F01      3641          move.l    D1,-(A7)
00002224  4EB9 0000 3642          jsr       _toupper
00002228  2F7A      
0000222A  584F      3643          addq.w    #4,A7
0000222C  1400      3644          move.b    D0,D2
                    3645   ; if( c == (char)('D'))                                      // WatchPoint Display
0000222E  0C02 0044 3646          cmp.b     #68,D2
00002232  6608      3647          bne.s     Watchpoint_1
                    3648   ; WatchPointDisplay() ;
00002234  4EB8 1B56 3649          jsr       _WatchPointDisplay
00002238  6000 0054 3650          bra       Watchpoint_10
                    3651   Watchpoint_1:
                    3652   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000223C  0C02 004B 3653          cmp.b     #75,D2
00002240  6630      3654          bne.s     Watchpoint_3
                    3655   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002242  4879 0000 3656          pea       @m68kde~1_91.L
00002246  4B62      
00002248  4EB9 0000 3657          jsr       _printf
0000224C  383C      
0000224E  584F      3658          addq.w    #4,A7
                    3659   ; c = toupper(_getch());
00002250  2F00      3660          move.l    D0,-(A7)
00002252  4EB8 0B68 3661          jsr       __getch
00002256  2200      3662          move.l    D0,D1
00002258  201F      3663          move.l    (A7)+,D0
0000225A  2F01      3664          move.l    D1,-(A7)
0000225C  4EB9 0000 3665          jsr       _toupper
00002260  2F7A      
00002262  584F      3666          addq.w    #4,A7
00002264  1400      3667          move.b    D0,D2
                    3668   ; if(c == (char)('Y'))
00002266  0C02 0059 3669          cmp.b     #89,D2
0000226A  6604      3670          bne.s     Watchpoint_5
                    3671   ; KillAllWatchPoints() ;
0000226C  4EB8 1E82 3672          jsr       _KillAllWatchPoints
                    3673   Watchpoint_5:
00002270  601C      3674          bra.s     Watchpoint_10
                    3675   Watchpoint_3:
                    3676   ; }
                    3677   ; else if(c == (char)('S')) {
00002272  0C02 0053 3678          cmp.b     #83,D2
00002276  6606      3679          bne.s     Watchpoint_7
                    3680   ; SetWatchPoint() ;
00002278  4EB8 1FD2 3681          jsr       _SetWatchPoint
0000227C  6010      3682          bra.s     Watchpoint_10
                    3683   Watchpoint_7:
                    3684   ; }
                    3685   ; else if(c == (char)('C')) {
0000227E  0C02 0043 3686          cmp.b     #67,D2
00002282  6606      3687          bne.s     Watchpoint_9
                    3688   ; WatchPointClear() ;
00002284  4EB8 1CDC 3689          jsr       _WatchPointClear
00002288  6004      3690          bra.s     Watchpoint_10
                    3691   Watchpoint_9:
                    3692   ; }
                    3693   ; else
                    3694   ; UnknownCommand() ;
0000228A  4EB8 216E 3695          jsr       _UnknownCommand
                    3696   Watchpoint_10:
0000228E  241F      3697          move.l    (A7)+,D2
00002290  4E75      3698          rts
                    3699   ; }
                    3700   ; void Help(void)
                    3701   ; {
                    3702   _Help:
00002292  48E7 2020 3703          movem.l   D2/A2,-(A7)
00002296  45F9 0000 3704          lea       _printf.L,A2
0000229A  383C      
                    3705   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000229C  41F9 0000 3706          lea       @m68kde~1_92.L,A0
000022A0  4B84      
000022A2  2408      3707          move.l    A0,D2
                    3708   ; printf(banner) ;
000022A4  2F02      3709          move.l    D2,-(A7)
000022A6  4E92      3710          jsr       (A2)
000022A8  584F      3711          addq.w    #4,A7
                    3712   ; printf("\r\n  Debugger Command Summary") ;
000022AA  4879 0000 3713          pea       @m68kde~1_93.L
000022AE  4BC8      
000022B0  4E92      3714          jsr       (A2)
000022B2  584F      3715          addq.w    #4,A7
                    3716   ; printf(banner) ;
000022B4  2F02      3717          move.l    D2,-(A7)
000022B6  4E92      3718          jsr       (A2)
000022B8  584F      3719          addq.w    #4,A7
                    3720   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000022BA  4879 0000 3721          pea       @m68kde~1_94.L
000022BE  4BE6      
000022C0  4E92      3722          jsr       (A2)
000022C2  584F      3723          addq.w    #4,A7
                    3724   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000022C4  4879 0000 3725          pea       @m68kde~1_95.L
000022C8  4C2A      
000022CA  4E92      3726          jsr       (A2)
000022CC  584F      3727          addq.w    #4,A7
                    3728   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000022CE  4879 0000 3729          pea       @m68kde~1_96.L
000022D2  4C62      
000022D4  4E92      3730          jsr       (A2)
000022D6  584F      3731          addq.w    #4,A7
                    3732   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000022D8  4879 0000 3733          pea       @m68kde~1_97.L
000022DC  4C9C      
000022DE  4E92      3734          jsr       (A2)
000022E0  584F      3735          addq.w    #4,A7
                    3736   ; printf("\r\n  E            - Enter String into Memory") ;
000022E2  4879 0000 3737          pea       @m68kde~1_98.L
000022E6  4CCE      
000022E8  4E92      3738          jsr       (A2)
000022EA  584F      3739          addq.w    #4,A7
                    3740   ; printf("\r\n  F            - Fill Memory with Data") ;
000022EC  4879 0000 3741          pea       @m68kde~1_99.L
000022F0  4CFA      
000022F2  4E92      3742          jsr       (A2)
000022F4  584F      3743          addq.w    #4,A7
                    3744   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000022F6  2F39 0B00 3745          move.l    _PC.L,-(A7)
000022FA  0120      
000022FC  4879 0000 3746          pea       @m68kde~1_100.L
00002300  4D24      
00002302  4E92      3747          jsr       (A2)
00002304  504F      3748          addq.w    #8,A7
                    3749   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002306  4879 0000 3750          pea       @m68kde~1_101.L
0000230A  4D5E      
0000230C  4E92      3751          jsr       (A2)
0000230E  584F      3752          addq.w    #4,A7
                    3753   ; printf("\r\n  M            - Memory Examine and Change");
00002310  4879 0000 3754          pea       @m68kde~1_102.L
00002314  4D96      
00002316  4E92      3755          jsr       (A2)
00002318  584F      3756          addq.w    #4,A7
                    3757   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000231A  4879 0000 3758          pea       @m68kde~1_103.L
0000231E  4DC4      
00002320  4E92      3759          jsr       (A2)
00002322  584F      3760          addq.w    #4,A7
                    3761   ; printf("\r\n  R            - Display 68000 Registers") ;
00002324  4879 0000 3762          pea       @m68kde~1_104.L
00002328  4DFE      
0000232A  4E92      3763          jsr       (A2)
0000232C  584F      3764          addq.w    #4,A7
                    3765   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
0000232E  4879 0000 3766          pea       @m68kde~1_105.L
00002332  4E2A      
00002334  4E92      3767          jsr       (A2)
00002336  584F      3768          addq.w    #4,A7
                    3769   ; printf("\r\n  TM           - Test Memory") ;
00002338  4879 0000 3770          pea       @m68kde~1_106.L
0000233C  4E5C      
0000233E  4E92      3771          jsr       (A2)
00002340  584F      3772          addq.w    #4,A7
                    3773   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002342  4879 0000 3774          pea       @m68kde~1_107.L
00002346  4E7C      
00002348  4E92      3775          jsr       (A2)
0000234A  584F      3776          addq.w    #4,A7
                    3777   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
0000234C  4879 0000 3778          pea       @m68kde~1_108.L
00002350  4EA4      
00002352  4E92      3779          jsr       (A2)
00002354  584F      3780          addq.w    #4,A7
                    3781   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002356  4879 0000 3782          pea       @m68kde~1_109.L
0000235A  4EDA      
0000235C  4E92      3783          jsr       (A2)
0000235E  584F      3784          addq.w    #4,A7
                    3785   ; printf(banner) ;
00002360  2F02      3786          move.l    D2,-(A7)
00002362  4E92      3787          jsr       (A2)
00002364  584F      3788          addq.w    #4,A7
00002366  4CDF 0404 3789          movem.l   (A7)+,D2/A2
0000236A  4E75      3790          rts
                    3791   ; }
                    3792   ; void menu(void)
                    3793   ; {
                    3794   _menu:
0000236C  48E7 303C 3795          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002370  45F9 0000 3796          lea       _printf.L,A2
00002374  383C      
00002376  47F9 0B00 3797          lea       _Trace.L,A3
0000237A  00D8      
0000237C  49F9 0B00 3798          lea       _x.L,A4
00002380  00C8      
00002382  4BF9 0B00 3799          lea       _SR.L,A5
00002386  012C      
                    3800   ; char c,c1 ;
                    3801   ; while(1)    {
                    3802   menu_1:
                    3803   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002388  4EB8 0BA6 3804          jsr       _FlushKeyboard
                    3805   ; printf("\r\n#") ;
0000238C  4879 0000 3806          pea       @m68kde~1_110.L
00002390  4F12      
00002392  4E92      3807          jsr       (A2)
00002394  584F      3808          addq.w    #4,A7
                    3809   ; c = toupper(_getch());
00002396  2F00      3810          move.l    D0,-(A7)
00002398  4EB8 0B68 3811          jsr       __getch
0000239C  2200      3812          move.l    D0,D1
0000239E  201F      3813          move.l    (A7)+,D0
000023A0  2F01      3814          move.l    D1,-(A7)
000023A2  4EB9 0000 3815          jsr       _toupper
000023A6  2F7A      
000023A8  584F      3816          addq.w    #4,A7
000023AA  1400      3817          move.b    D0,D2
                    3818   ; if( c == (char)('L'))                  // load s record file
000023AC  0C02 004C 3819          cmp.b     #76,D2
000023B0  6608      3820          bne.s     menu_4
                    3821   ; Load_SRecordFile() ;
000023B2  4EB8 0E36 3822          jsr       _Load_SRecordFile
000023B6  6000 021E 3823          bra       menu_46
                    3824   menu_4:
                    3825   ; else if( c == (char)('D'))             // dump memory
000023BA  0C02 0044 3826          cmp.b     #68,D2
000023BE  6608      3827          bne.s     menu_6
                    3828   ; DumpMemory() ;
000023C0  4EB8 0CCC 3829          jsr       _DumpMemory
000023C4  6000 0210 3830          bra       menu_46
                    3831   menu_6:
                    3832   ; else if( c == (char)('E'))             // Enter String into memory
000023C8  0C02 0045 3833          cmp.b     #69,D2
000023CC  660A      3834          bne.s     menu_8
                    3835   ; EnterString() ;
000023CE  4EB9 0000 3836          jsr       _EnterString
000023D2  271E      
000023D4  6000 0200 3837          bra       menu_46
                    3838   menu_8:
                    3839   ; else if( c == (char)('F'))             // fill memory
000023D8  0C02 0046 3840          cmp.b     #70,D2
000023DC  6608      3841          bne.s     menu_10
                    3842   ; FillMemory() ;
000023DE  4EB8 0DBC 3843          jsr       _FillMemory
000023E2  6000 01F2 3844          bra       menu_46
                    3845   menu_10:
                    3846   ; else if( c == (char)('G'))  {           // go user program
000023E6  0C02 0047 3847          cmp.b     #71,D2
000023EA  6626      3848          bne.s     menu_12
                    3849   ; printf("\r\nProgram Running.....") ;
000023EC  4879 0000 3850          pea       @m68kde~1_111.L
000023F0  4F16      
000023F2  4E92      3851          jsr       (A2)
000023F4  584F      3852          addq.w    #4,A7
                    3853   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023F6  4879 0000 3854          pea       @m68kde~1_112.L
000023FA  4F2E      
000023FC  4E92      3855          jsr       (A2)
000023FE  584F      3856          addq.w    #4,A7
                    3857   ; GoFlag = 1 ;
00002400  23FC 0000 3858          move.l    #1,_GoFlag.L
00002404  0001 0B00 
00002408  00DC      
                    3859   ; go() ;
0000240A  4EB8 08B8 3860          jsr       _go
0000240E  6000 01C6 3861          bra       menu_46
                    3862   menu_12:
                    3863   ; }
                    3864   ; else if( c == (char)('M'))           // memory examine and modify
00002412  0C02 004D 3865          cmp.b     #77,D2
00002416  6608      3866          bne.s     menu_14
                    3867   ; MemoryChange() ;
00002418  4EB8 0FC4 3868          jsr       _MemoryChange
0000241C  6000 01B8 3869          bra       menu_46
                    3870   menu_14:
                    3871   ; else if( c == (char)('P'))            // Program Flash Chip
00002420  0C02 0050 3872          cmp.b     #80,D2
00002424  6608      3873          bne.s     menu_16
                    3874   ; ProgramFlashChip() ;
00002426  4EB8 12B2 3875          jsr       _ProgramFlashChip
0000242A  6000 01AA 3876          bra       menu_46
                    3877   menu_16:
                    3878   ; else if( c == (char)('C'))             // copy flash chip to ram and go
0000242E  0C02 0043 3879          cmp.b     #67,D2
00002432  6608      3880          bne.s     menu_18
                    3881   ; LoadFromFlashChip();
00002434  4EB8 12C4 3882          jsr       _LoadFromFlashChip
00002438  6000 019C 3883          bra       menu_46
                    3884   menu_18:
                    3885   ; else if( c == (char)('R'))             // dump registers
0000243C  0C02 0052 3886          cmp.b     #82,D2
00002440  6608      3887          bne.s     menu_20
                    3888   ; DumpRegisters() ;
00002442  4EB8 12D4 3889          jsr       _DumpRegisters
00002446  6000 018E 3890          bra       menu_46
                    3891   menu_20:
                    3892   ; else if( c == (char)('.'))           // change registers
0000244A  0C02 002E 3893          cmp.b     #46,D2
0000244E  6608      3894          bne.s     menu_22
                    3895   ; ChangeRegisters() ;
00002450  4EB8 17C6 3896          jsr       _ChangeRegisters
00002454  6000 0180 3897          bra       menu_46
                    3898   menu_22:
                    3899   ; else if( c == (char)('B'))              // breakpoint command
00002458  0C02 0042 3900          cmp.b     #66,D2
0000245C  6608      3901          bne.s     menu_24
                    3902   ; Breakpoint() ;
0000245E  4EB8 219A 3903          jsr       _Breakpoint
00002462  6000 0172 3904          bra       menu_46
                    3905   menu_24:
                    3906   ; else if( c == (char)('T'))  {          // Test command
00002466  0C02 0054 3907          cmp.b     #84,D2
0000246A  6600 0046 3908          bne       menu_26
                    3909   ; c1 = toupper(_getch()) ;
0000246E  2F00      3910          move.l    D0,-(A7)
00002470  4EB8 0B68 3911          jsr       __getch
00002474  2200      3912          move.l    D0,D1
00002476  201F      3913          move.l    (A7)+,D0
00002478  2F01      3914          move.l    D1,-(A7)
0000247A  4EB9 0000 3915          jsr       _toupper
0000247E  2F7A      
00002480  584F      3916          addq.w    #4,A7
00002482  1600      3917          move.b    D0,D3
                    3918   ; if(c1 == (char)('M'))                    // memory test
00002484  0C03 004D 3919          cmp.b     #77,D3
00002488  6608      3920          bne.s     menu_28
                    3921   ; MemoryTest() ;
0000248A  4EB9 0000 3922          jsr       _MemoryTest
0000248E  2796      
00002490  601C      3923          bra.s     menu_33
                    3924   menu_28:
                    3925   ; else if( c1 == (char)('S'))              // Switch Test command
00002492  0C03 0053 3926          cmp.b     #83,D3
00002496  6606      3927          bne.s     menu_30
                    3928   ; SwitchTest() ;
00002498  4EB8 0AA4 3929          jsr       _SwitchTest
0000249C  6010      3930          bra.s     menu_33
                    3931   menu_30:
                    3932   ; else if( c1 == (char)('D'))              // display Test command
0000249E  0C03 0044 3933          cmp.b     #68,D3
000024A2  6606      3934          bne.s     menu_32
                    3935   ; TestLEDS() ;
000024A4  4EB8 0A50 3936          jsr       _TestLEDS
000024A8  6004      3937          bra.s     menu_33
                    3938   menu_32:
                    3939   ; else
                    3940   ; UnknownCommand() ;
000024AA  4EB8 216E 3941          jsr       _UnknownCommand
                    3942   menu_33:
000024AE  6000 0126 3943          bra       menu_46
                    3944   menu_26:
                    3945   ; }
                    3946   ; else if( c == (char)(' ')) {             // Next instruction command
000024B2  0C02 0020 3947          cmp.b     #32,D2
000024B6  6636      3948          bne.s     menu_34
                    3949   ; DisableBreakPoints() ;
000024B8  4EB8 1D7E 3950          jsr       _DisableBreakPoints
                    3951   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000024BC  2013      3952          move.l    (A3),D0
000024BE  0C80 0000 3953          cmp.l     #1,D0
000024C2  0001      
000024C4  661A      3954          bne.s     menu_36
000024C6  2039 0B00 3955          move.l    _GoFlag.L,D0
000024CA  00DC      
000024CC  0C80 0000 3956          cmp.l     #1,D0
000024D0  0001      
000024D2  660C      3957          bne.s     menu_36
                    3958   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000024D4  13FC 0001 3959          move.b    #1,4194314
000024D8  0040 000A 
                    3960   ; return ;
000024DC  6000 00FC 3961          bra       menu_38
                    3962   menu_36:
                    3963   ; }
                    3964   ; else
                    3965   ; printf("\r\nError: Press 'G' first to start program") ;
000024E0  4879 0000 3966          pea       @m68kde~1_113.L
000024E4  4F5C      
000024E6  4E92      3967          jsr       (A2)
000024E8  584F      3968          addq.w    #4,A7
000024EA  6000 00EA 3969          bra       menu_46
                    3970   menu_34:
                    3971   ; }
                    3972   ; else if( c == (char)('S')) {             // single step
000024EE  0C02 0053 3973          cmp.b     #83,D2
000024F2  6600 008C 3974          bne       menu_39
                    3975   ; if(Trace == 0) {
000024F6  2013      3976          move.l    (A3),D0
000024F8  6600 0050 3977          bne       menu_41
                    3978   ; DisableBreakPoints() ;
000024FC  4EB8 1D7E 3979          jsr       _DisableBreakPoints
                    3980   ; printf("\r\nSingle Step  :[ON]") ;
00002500  4879 0000 3981          pea       @m68kde~1_114.L
00002504  4F86      
00002506  4E92      3982          jsr       (A2)
00002508  584F      3983          addq.w    #4,A7
                    3984   ; printf("\r\nBreak Points :[Disabled]") ;
0000250A  4879 0000 3985          pea       @m68kde~1_47.L
0000250E  4624      
00002510  4E92      3986          jsr       (A2)
00002512  584F      3987          addq.w    #4,A7
                    3988   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002514  0055 8000 3989          or.w      #32768,(A5)
                    3990   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002518  2F39 0B00 3991          move.l    _PC.L,-(A7)
0000251C  0120      
0000251E  4879 0000 3992          pea       @m68kde~1_115.L
00002522  4F9C      
00002524  4E92      3993          jsr       (A2)
00002526  504F      3994          addq.w    #8,A7
                    3995   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002528  4879 0000 3996          pea       @m68kde~1_116.L
0000252C  4FD0      
0000252E  4E92      3997          jsr       (A2)
00002530  584F      3998          addq.w    #4,A7
                    3999   ; DumpRegisters() ;
00002532  4EB8 12D4 4000          jsr       _DumpRegisters
                    4001   ; Trace = 1;
00002536  26BC 0000 4002          move.l    #1,(A3)
0000253A  0001      
                    4003   ; TraceException = 1;
0000253C  13FC 0001 4004          move.b    #1,4194314
00002540  0040 000A 
                    4005   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002544  28B8 0074 4006          move.l    116,(A4)
00002548  6032      4007          bra.s     menu_42
                    4008   menu_41:
                    4009   ; }
                    4010   ; else {
                    4011   ; Trace = 0 ;
0000254A  4293      4012          clr.l     (A3)
                    4013   ; TraceException = 0 ;
0000254C  4239 0040 4014          clr.b     4194314
00002550  000A      
                    4015   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002552  28B8 0074 4016          move.l    116,(A4)
                    4017   ; EnableBreakPoints() ;
00002556  4EB8 1DD2 4018          jsr       _EnableBreakPoints
                    4019   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000255A  0255 7FFF 4020          and.w     #32767,(A5)
                    4021   ; printf("\r\nSingle Step : [OFF]") ;
0000255E  4879 0000 4022          pea       @m68kde~1_117.L
00002562  4FF4      
00002564  4E92      4023          jsr       (A2)
00002566  584F      4024          addq.w    #4,A7
                    4025   ; printf("\r\nBreak Points :[Enabled]") ;
00002568  4879 0000 4026          pea       @m68kde~1_118.L
0000256C  500A      
0000256E  4E92      4027          jsr       (A2)
00002570  584F      4028          addq.w    #4,A7
                    4029   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002572  4879 0000 4030          pea       @m68kde~1_119.L
00002576  5024      
00002578  4E92      4031          jsr       (A2)
0000257A  584F      4032          addq.w    #4,A7
                    4033   menu_42:
0000257C  6000 0058 4034          bra       menu_46
                    4035   menu_39:
                    4036   ; }
                    4037   ; }
                    4038   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002580  0C02 001B 4039          cmp.b     #27,D2
00002584  6600 0040 4040          bne       menu_43
                    4041   ; Trace = 0;
00002588  4293      4042          clr.l     (A3)
                    4043   ; TraceException = 0;
0000258A  4239 0040 4044          clr.b     4194314
0000258E  000A      
                    4045   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002590  28B8 0074 4046          move.l    116,(A4)
                    4047   ; EnableBreakPoints() ;
00002594  4EB8 1DD2 4048          jsr       _EnableBreakPoints
                    4049   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002598  0255 7FFF 4050          and.w     #32767,(A5)
                    4051   ; printf("\r\nSingle Step  :[OFF]") ;
0000259C  4879 0000 4052          pea       @m68kde~1_120.L
000025A0  504E      
000025A2  4E92      4053          jsr       (A2)
000025A4  584F      4054          addq.w    #4,A7
                    4055   ; printf("\r\nBreak Points :[Enabled]");
000025A6  4879 0000 4056          pea       @m68kde~1_118.L
000025AA  500A      
000025AC  4E92      4057          jsr       (A2)
000025AE  584F      4058          addq.w    #4,A7
                    4059   ; printf("\r\nProgram Running.....") ;
000025B0  4879 0000 4060          pea       @m68kde~1_111.L
000025B4  4F16      
000025B6  4E92      4061          jsr       (A2)
000025B8  584F      4062          addq.w    #4,A7
                    4063   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000025BA  4879 0000 4064          pea       @m68kde~1_112.L
000025BE  4F2E      
000025C0  4E92      4065          jsr       (A2)
000025C2  584F      4066          addq.w    #4,A7
                    4067   ; return ;
000025C4  6014      4068          bra.s     menu_38
                    4069   menu_43:
                    4070   ; }
                    4071   ; else if( c == (char)('W'))              // Watchpoint command
000025C6  0C02 0057 4072          cmp.b     #87,D2
000025CA  6606      4073          bne.s     menu_45
                    4074   ; Watchpoint() ;
000025CC  4EB8 2216 4075          jsr       _Watchpoint
000025D0  6004      4076          bra.s     menu_46
                    4077   menu_45:
                    4078   ; else
                    4079   ; UnknownCommand() ;
000025D2  4EB8 216E 4080          jsr       _UnknownCommand
                    4081   menu_46:
000025D6  6000 FDB0 4082          bra       menu_1
                    4083   menu_38:
000025DA  4CDF 3C0C 4084          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000025DE  4E75      4085          rts
                    4086   ; }
                    4087   ; }
                    4088   ; void PrintErrorMessageandAbort(char *string) {
                    4089   _PrintErrorMessageandAbort:
000025E0  4E56 0000 4090          link      A6,#0
                    4091   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000025E4  4879 0000 4092          pea       @m68kde~1_121.L
000025E8  5064      
000025EA  4EB9 0000 4093          jsr       _printf
000025EE  383C      
000025F0  584F      4094          addq.w    #4,A7
                    4095   ; printf("%s\r\n", string) ;
000025F2  2F2E 0008 4096          move.l    8(A6),-(A7)
000025F6  4879 0000 4097          pea       @m68kde~1_122.L
000025FA  5080      
000025FC  4EB9 0000 4098          jsr       _printf
00002600  383C      
00002602  504F      4099          addq.w    #8,A7
                    4100   ; menu() ;
00002604  4EB8 236C 4101          jsr       _menu
00002608  4E5E      4102          unlk      A6
0000260A  4E75      4103          rts
                    4104   ; }
                    4105   ; void IRQMessage(int level) {
                    4106   _IRQMessage:
0000260C  4E56 0000 4107          link      A6,#0
                    4108   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002610  4879 0000 4109          pea       @m68kde~1_123.L
00002614  5086      
00002616  4EB9 0000 4110          jsr       _printf
0000261A  383C      
0000261C  584F      4111          addq.w    #4,A7
                    4112   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
0000261E  2F2E 0008 4113          move.l    8(A6),-(A7)
00002622  4879 0000 4114          pea       @m68kde~1_124.L
00002626  509E      
00002628  4EB9 0000 4115          jsr       _printf
0000262C  383C      
0000262E  504F      4116          addq.w    #8,A7
                    4117   ; menu() ;
00002630  4EB8 236C 4118          jsr       _menu
00002634  4E5E      4119          unlk      A6
00002636  4E75      4120          rts
                    4121   ; }
                    4122   ; void UnhandledIRQ1(void) {
                    4123   _UnhandledIRQ1:
                    4124   ; IRQMessage(1);
00002638  4878 0001 4125          pea       1
0000263C  4EB8 260C 4126          jsr       _IRQMessage
00002640  584F      4127          addq.w    #4,A7
00002642  4E75      4128          rts
                    4129   ; }
                    4130   ; void UnhandledIRQ2(void) {
                    4131   _UnhandledIRQ2:
                    4132   ; IRQMessage(2);
00002644  4878 0002 4133          pea       2
00002648  4EB8 260C 4134          jsr       _IRQMessage
0000264C  584F      4135          addq.w    #4,A7
0000264E  4E75      4136          rts
                    4137   ; }
                    4138   ; void UnhandledIRQ3(void){
                    4139   _UnhandledIRQ3:
                    4140   ; IRQMessage(3);
00002650  4878 0003 4141          pea       3
00002654  4EB8 260C 4142          jsr       _IRQMessage
00002658  584F      4143          addq.w    #4,A7
0000265A  4E75      4144          rts
                    4145   ; }
                    4146   ; void UnhandledIRQ4(void) {
                    4147   _UnhandledIRQ4:
                    4148   ; IRQMessage(4);
0000265C  4878 0004 4149          pea       4
00002660  4EB8 260C 4150          jsr       _IRQMessage
00002664  584F      4151          addq.w    #4,A7
00002666  4E75      4152          rts
                    4153   ; }
                    4154   ; void UnhandledIRQ5(void) {
                    4155   _UnhandledIRQ5:
                    4156   ; IRQMessage(5);
00002668  4878 0005 4157          pea       5
0000266C  4EB8 260C 4158          jsr       _IRQMessage
00002670  584F      4159          addq.w    #4,A7
00002672  4E75      4160          rts
                    4161   ; }
                    4162   ; void UnhandledIRQ6(void) {
                    4163   _UnhandledIRQ6:
                    4164   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002674  4879 0000 4165          pea       @m68kde~1_125.L
00002678  50C2      
0000267A  4EB8 25E0 4166          jsr       _PrintErrorMessageandAbort
0000267E  584F      4167          addq.w    #4,A7
                    4168   ; menu() ;
00002680  4EB8 236C 4169          jsr       _menu
00002684  4E75      4170          rts
                    4171   ; }
                    4172   ; void UnhandledIRQ7(void) {
                    4173   _UnhandledIRQ7:
                    4174   ; IRQMessage(7);
00002686  4878 0007 4175          pea       7
0000268A  4EB8 260C 4176          jsr       _IRQMessage
0000268E  584F      4177          addq.w    #4,A7
00002690  4E75      4178          rts
                    4179   ; }
                    4180   ; void UnhandledTrap(void) {
                    4181   _UnhandledTrap:
                    4182   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002692  4879 0000 4183          pea       @m68kde~1_126.L
00002696  5102      
00002698  4EB8 25E0 4184          jsr       _PrintErrorMessageandAbort
0000269C  584F      4185          addq.w    #4,A7
0000269E  4E75      4186          rts
                    4187   ; }
                    4188   ; void BusError() {
                    4189   _BusError:
                    4190   ; PrintErrorMessageandAbort("BUS Error!") ;
000026A0  4879 0000 4191          pea       @m68kde~1_127.L
000026A4  5118      
000026A6  4EB8 25E0 4192          jsr       _PrintErrorMessageandAbort
000026AA  584F      4193          addq.w    #4,A7
000026AC  4E75      4194          rts
                    4195   ; }
                    4196   ; void AddressError() {
                    4197   _AddressError:
                    4198   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000026AE  4879 0000 4199          pea       @m68kde~1_128.L
000026B2  5124      
000026B4  4EB8 25E0 4200          jsr       _PrintErrorMessageandAbort
000026B8  584F      4201          addq.w    #4,A7
000026BA  4E75      4202          rts
                    4203   ; }
                    4204   ; void IllegalInstruction() {
                    4205   _IllegalInstruction:
                    4206   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000026BC  4879 0000 4207          pea       @m68kde~1_129.L
000026C0  5134      
000026C2  4EB8 25E0 4208          jsr       _PrintErrorMessageandAbort
000026C6  584F      4209          addq.w    #4,A7
000026C8  4E75      4210          rts
                    4211   ; }
                    4212   ; void Dividebyzero() {
                    4213   _Dividebyzero:
                    4214   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000026CA  4879 0000 4215          pea       @m68kde~1_130.L
000026CE  5148      
000026D0  4EB8 25E0 4216          jsr       _PrintErrorMessageandAbort
000026D4  584F      4217          addq.w    #4,A7
000026D6  4E75      4218          rts
                    4219   ; }
                    4220   ; void Check() {
                    4221   _Check:
                    4222   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000026D8  4879 0000 4223          pea       @m68kde~1_131.L
000026DC  5158      
000026DE  4EB8 25E0 4224          jsr       _PrintErrorMessageandAbort
000026E2  584F      4225          addq.w    #4,A7
000026E4  4E75      4226          rts
                    4227   ; }
                    4228   ; void Trapv() {
                    4229   _Trapv:
                    4230   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000026E6  4879 0000 4231          pea       @m68kde~1_132.L
000026EA  516A      
000026EC  4EB8 25E0 4232          jsr       _PrintErrorMessageandAbort
000026F0  584F      4233          addq.w    #4,A7
000026F2  4E75      4234          rts
                    4235   ; }
                    4236   ; void PrivError() {
                    4237   _PrivError:
                    4238   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000026F4  4879 0000 4239          pea       @m68kde~1_133.L
000026F8  517C      
000026FA  4EB8 25E0 4240          jsr       _PrintErrorMessageandAbort
000026FE  584F      4241          addq.w    #4,A7
00002700  4E75      4242          rts
                    4243   ; }
                    4244   ; void UnitIRQ() {
                    4245   _UnitIRQ:
                    4246   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002702  4879 0000 4247          pea       @m68kde~1_134.L
00002706  5190      
00002708  4EB8 25E0 4248          jsr       _PrintErrorMessageandAbort
0000270C  584F      4249          addq.w    #4,A7
0000270E  4E75      4250          rts
                    4251   ; }
                    4252   ; void Spurious() {
                    4253   _Spurious:
                    4254   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002710  4879 0000 4255          pea       @m68kde~1_135.L
00002714  51A2      
00002716  4EB8 25E0 4256          jsr       _PrintErrorMessageandAbort
0000271A  584F      4257          addq.w    #4,A7
0000271C  4E75      4258          rts
                    4259   ; }
                    4260   ; void EnterString(void)
                    4261   ; {
                    4262   _EnterString:
0000271E  4E56 FFFC 4263          link      A6,#-4
00002722  2F02      4264          move.l    D2,-(A7)
                    4265   ; unsigned char *Start;
                    4266   ; unsigned char c;
                    4267   ; printf("\r\nStart Address in Memory: ") ;
00002724  4879 0000 4268          pea       @m68kde~1_136.L
00002728  51B0      
0000272A  4EB9 0000 4269          jsr       _printf
0000272E  383C      
00002730  584F      4270          addq.w    #4,A7
                    4271   ; Start = Get8HexDigits(0) ;
00002732  42A7      4272          clr.l     -(A7)
00002734  4EB8 0CA4 4273          jsr       _Get8HexDigits
00002738  584F      4274          addq.w    #4,A7
0000273A  2400      4275          move.l    D0,D2
                    4276   ; printf("\r\nEnter String (ESC to end) :") ;
0000273C  4879 0000 4277          pea       @m68kde~1_137.L
00002740  51CC      
00002742  4EB9 0000 4278          jsr       _printf
00002746  383C      
00002748  584F      4279          addq.w    #4,A7
                    4280   ; while((c = getchar()) != 0x1b)
                    4281   EnterString_1:
0000274A  4EB9 0000 4282          jsr       _getch
0000274E  2EB0      
00002750  1D40 FFFF 4283          move.b    D0,-1(A6)
00002754  0C00 001B 4284          cmp.b     #27,D0
00002758  670A      4285          beq.s     EnterString_3
                    4286   ; *Start++ = c ;
0000275A  2042      4287          move.l    D2,A0
0000275C  5282      4288          addq.l    #1,D2
0000275E  10AE FFFF 4289          move.b    -1(A6),(A0)
00002762  60E6      4290          bra       EnterString_1
                    4291   EnterString_3:
                    4292   ; *Start = 0x00;  // terminate with a null
00002764  2042      4293          move.l    D2,A0
00002766  4210      4294          clr.b     (A0)
00002768  241F      4295          move.l    (A7)+,D2
0000276A  4E5E      4296          unlk      A6
0000276C  4E75      4297          rts
                    4298   ; }
                    4299   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4300   ; void clearInputBuffer() {
                    4301   _clearInputBuffer:
0000276E  4E56 FFFC 4302          link      A6,#-4
                    4303   ; int c;
                    4304   ; while ((c = getchar()) != '\n' && c != EOF);
                    4305   clearInputBuffer_1:
00002772  4EB9 0000 4306          jsr       _getch
00002776  2EB0      
00002778  2D40 FFFC 4307          move.l    D0,-4(A6)
0000277C  0C80 0000 4308          cmp.l     #10,D0
00002780  000A      
00002782  670E      4309          beq.s     clearInputBuffer_3
00002784  202E FFFC 4310          move.l    -4(A6),D0
00002788  0C80 FFFF 4311          cmp.l     #-1,D0
0000278C  FFFF      
0000278E  6702      4312          beq.s     clearInputBuffer_3
00002790  60E0      4313          bra       clearInputBuffer_1
                    4314   clearInputBuffer_3:
00002792  4E5E      4315          unlk      A6
00002794  4E75      4316          rts
                    4317   ; }
                    4318   ; void MemoryTest(void)
                    4319   ; {
                    4320   _MemoryTest:
00002796  4E56 FF40 4321          link      A6,#-192
0000279A  48E7 3F3C 4322          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000279E  45F9 0000 4323          lea       _printf.L,A2
000027A2  383C      
000027A4  4BF8 0B68 4324          lea       __getch.L,A5
                    4325   ; unsigned int *RamPtr, counter1=1 ;
000027A8  2D7C 0000 4326          move.l    #1,-188(A6)
000027AC  0001 FF44 
                    4327   ; register unsigned int i ;
                    4328   ; unsigned int Start, End ;
                    4329   ; char c, text[150];
                    4330   ; unsigned int* addressPointer;
                    4331   ; unsigned int startAddress = NULL;
000027B0  42AE FFF0 4332          clr.l     -16(A6)
                    4333   ; unsigned int endAddress = NULL;
000027B4  42AE FFF4 4334          clr.l     -12(A6)
                    4335   ; unsigned int byteLength;
                    4336   ; unsigned int dataSize = 0;
000027B8  4285      4337          clr.l     D5
                    4338   ; unsigned int dataPattern = 0;
000027BA  4283      4339          clr.l     D3
                    4340   ; unsigned int currAddress;
                    4341   ; unsigned int addrCount;
                    4342   ; unsigned int intBuffer = NULL;
000027BC  7E00      4343          moveq     #0,D7
                    4344   ; unsigned char *startAddressPtr = NULL;
000027BE  4282      4345          clr.l     D2
                    4346   ; unsigned char *endAddressPtr = NULL;
000027C0  4286      4347          clr.l     D6
                    4348   ; unsigned short int *wordAddressPtr = NULL;
000027C2  387C 0000 4349          move.w    #0,A4
                    4350   ; unsigned int *longAddressPtr = NULL;
000027C6  367C 0000 4351          move.w    #0,A3
                    4352   ; // IMPROVEMENTS TO BE MADE:
                    4353   ; // Suppossed to be able to write an odd address as a byte
                    4354   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    4355   ; // printf("\r\nStart Address: ") ;
                    4356   ; // Start = Get8HexDigits(0) ;
                    4357   ; // printf("\r\nEnd Address: ") ;
                    4358   ; // End = Get8HexDigits(0) ;
                    4359   ; // TODO
                    4360   ; scanflush();
000027CA  4EB9 0000 4361          jsr       _scanflush
000027CE  3232      
                    4362   ; memset(text, 0, sizeof(text));  // fills with zeros
000027D0  4878 0096 4363          pea       150
000027D4  42A7      4364          clr.l     -(A7)
000027D6  486E FF56 4365          pea       -170(A6)
000027DA  4EB9 0000 4366          jsr       _memset
000027DE  2F4C      
000027E0  DEFC 000C 4367          add.w     #12,A7
                    4368   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
000027E4  4879 0000 4369          pea       @m68kde~1_138.L
000027E8  51EA      
000027EA  4E92      4370          jsr       (A2)
000027EC  584F      4371          addq.w    #4,A7
                    4372   ; dataSize = _getch() - 48;
000027EE  4E95      4373          jsr       (A5)
000027F0  0480 0000 4374          sub.l     #48,D0
000027F4  0030      
000027F6  2A00      4375          move.l    D0,D5
                    4376   ; printf("\n");
000027F8  4879 0000 4377          pea       @m68kde~1_139.L
000027FC  5240      
000027FE  4E92      4378          jsr       (A2)
00002800  584F      4379          addq.w    #4,A7
                    4380   ; if (dataSize == 0) {
00002802  4A85      4381          tst.l     D5
00002804  6600 0058 4382          bne       MemoryTest_1
                    4383   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
00002808  4879 0000 4384          pea       @m68kde~1_140.L
0000280C  5242      
0000280E  4E92      4385          jsr       (A2)
00002810  584F      4386          addq.w    #4,A7
                    4387   ; intBuffer = _getch() - 48;
00002812  4E95      4388          jsr       (A5)
00002814  0480 0000 4389          sub.l     #48,D0
00002818  0030      
0000281A  2E00      4390          move.l    D0,D7
                    4391   ; // scanf("%d", &intBuffer);
                    4392   ; switch (intBuffer) {
0000281C  2007      4393          move.l    D7,D0
0000281E  0C80 0000 4394          cmp.l     #4,D0
00002822  0004      
00002824  642C      4395          bhs.s     MemoryTest_4
00002826  E380      4396          asl.l     #1,D0
00002828  303B 0806 4397          move.w    MemoryTest_5(PC,D0.L),D0
0000282C  4EFB 0002 4398          jmp       MemoryTest_5(PC,D0.W)
                    4399   MemoryTest_5:
00002830  0008      4400          dc.w      MemoryTest_6-MemoryTest_5
00002832  000C      4401          dc.w      MemoryTest_7-MemoryTest_5
00002834  0014      4402          dc.w      MemoryTest_8-MemoryTest_5
00002836  001C      4403          dc.w      MemoryTest_9-MemoryTest_5
                    4404   MemoryTest_6:
                    4405   ; case(0):
                    4406   ; dataPattern = 0x00; break;
00002838  4283      4407          clr.l     D3
0000283A  6016      4408          bra.s     MemoryTest_4
                    4409   MemoryTest_7:
                    4410   ; case(1):
                    4411   ; dataPattern = 0xB2; break;
0000283C  263C 0000 4412          move.l    #178,D3
00002840  00B2      
00002842  600E      4413          bra.s     MemoryTest_4
                    4414   MemoryTest_8:
                    4415   ; case(2):
                    4416   ; dataPattern = 0xC3; break;
00002844  263C 0000 4417          move.l    #195,D3
00002848  00C3      
0000284A  6006      4418          bra.s     MemoryTest_4
                    4419   MemoryTest_9:
                    4420   ; case(3):
                    4421   ; dataPattern = 0xD4; break;
0000284C  263C 0000 4422          move.l    #212,D3
00002850  00D4      
                    4423   MemoryTest_4:
                    4424   ; }
                    4425   ; dataPattern &= 0xFF;
00002852  C6BC 0000 4426          and.l     #255,D3
00002856  00FF      
                    4427   ; byteLength = 1;
00002858  7801      4428          moveq     #1,D4
0000285A  6000 00AE 4429          bra       MemoryTest_11
                    4430   MemoryTest_1:
                    4431   ; } else if (dataSize == 1) {
0000285E  0C85 0000 4432          cmp.l     #1,D5
00002862  0001      
00002864  6600 0058 4433          bne       MemoryTest_10
                    4434   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
00002868  4879 0000 4435          pea       @m68kde~1_141.L
0000286C  52A4      
0000286E  4E92      4436          jsr       (A2)
00002870  584F      4437          addq.w    #4,A7
                    4438   ; intBuffer = _getch() - 48;
00002872  4E95      4439          jsr       (A5)
00002874  0480 0000 4440          sub.l     #48,D0
00002878  0030      
0000287A  2E00      4441          move.l    D0,D7
                    4442   ; switch (intBuffer) {
0000287C  2007      4443          move.l    D7,D0
0000287E  0C80 0000 4444          cmp.l     #4,D0
00002882  0004      
00002884  642C      4445          bhs.s     MemoryTest_13
00002886  E380      4446          asl.l     #1,D0
00002888  303B 0806 4447          move.w    MemoryTest_14(PC,D0.L),D0
0000288C  4EFB 0002 4448          jmp       MemoryTest_14(PC,D0.W)
                    4449   MemoryTest_14:
00002890  0008      4450          dc.w      MemoryTest_15-MemoryTest_14
00002892  000C      4451          dc.w      MemoryTest_16-MemoryTest_14
00002894  0014      4452          dc.w      MemoryTest_17-MemoryTest_14
00002896  001C      4453          dc.w      MemoryTest_18-MemoryTest_14
                    4454   MemoryTest_15:
                    4455   ; case(0):
                    4456   ; dataPattern = 0x0000; break;
00002898  4283      4457          clr.l     D3
0000289A  6016      4458          bra.s     MemoryTest_13
                    4459   MemoryTest_16:
                    4460   ; case(1):
                    4461   ; dataPattern = 0x1234; break;
0000289C  263C 0000 4462          move.l    #4660,D3
000028A0  1234      
000028A2  600E      4463          bra.s     MemoryTest_13
                    4464   MemoryTest_17:
                    4465   ; case(2):
                    4466   ; dataPattern = 0xA1B2; break;
000028A4  263C 0000 4467          move.l    #41394,D3
000028A8  A1B2      
000028AA  6006      4468          bra.s     MemoryTest_13
                    4469   MemoryTest_18:
                    4470   ; case(3):
                    4471   ; dataPattern = 0xC3D4; break;
000028AC  263C 0000 4472          move.l    #50132,D3
000028B0  C3D4      
                    4473   MemoryTest_13:
                    4474   ; }
                    4475   ; dataPattern &= 0xFFFF;
000028B2  C6BC 0000 4476          and.l     #65535,D3
000028B6  FFFF      
                    4477   ; byteLength = 2;
000028B8  7802      4478          moveq     #2,D4
000028BA  6000 004E 4479          bra       MemoryTest_11
                    4480   MemoryTest_10:
                    4481   ; } else {
                    4482   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
000028BE  4879 0000 4483          pea       @m68kde~1_142.L
000028C2  530E      
000028C4  4E92      4484          jsr       (A2)
000028C6  584F      4485          addq.w    #4,A7
                    4486   ; intBuffer = _getch() - 48;
000028C8  4E95      4487          jsr       (A5)
000028CA  0480 0000 4488          sub.l     #48,D0
000028CE  0030      
000028D0  2E00      4489          move.l    D0,D7
                    4490   ; switch (intBuffer) {
000028D2  2007      4491          move.l    D7,D0
000028D4  0C80 0000 4492          cmp.l     #4,D0
000028D8  0004      
000028DA  642C      4493          bhs.s     MemoryTest_20
000028DC  E380      4494          asl.l     #1,D0
000028DE  303B 0806 4495          move.w    MemoryTest_21(PC,D0.L),D0
000028E2  4EFB 0002 4496          jmp       MemoryTest_21(PC,D0.W)
                    4497   MemoryTest_21:
000028E6  0008      4498          dc.w      MemoryTest_22-MemoryTest_21
000028E8  000C      4499          dc.w      MemoryTest_23-MemoryTest_21
000028EA  0014      4500          dc.w      MemoryTest_24-MemoryTest_21
000028EC  001C      4501          dc.w      MemoryTest_25-MemoryTest_21
                    4502   MemoryTest_22:
                    4503   ; case(0):
                    4504   ; dataPattern = 0x00000000; break;
000028EE  4283      4505          clr.l     D3
000028F0  6016      4506          bra.s     MemoryTest_20
                    4507   MemoryTest_23:
                    4508   ; case(1):
                    4509   ; dataPattern = 0xAABBCCDD; break;
000028F2  263C AABB 4510          move.l    #-1430532899,D3
000028F6  CCDD      
000028F8  600E      4511          bra.s     MemoryTest_20
                    4512   MemoryTest_24:
                    4513   ; case(2):
                    4514   ; dataPattern = 0x11223344; break;
000028FA  263C 1122 4515          move.l    #287454020,D3
000028FE  3344      
00002900  6006      4516          bra.s     MemoryTest_20
                    4517   MemoryTest_25:
                    4518   ; case(3):
                    4519   ; dataPattern = 0x76543210; break;
00002902  263C 7654 4520          move.l    #1985229328,D3
00002906  3210      
                    4521   MemoryTest_20:
                    4522   ; }
                    4523   ; byteLength = 4;
00002908  7804      4524          moveq     #4,D4
                    4525   MemoryTest_11:
                    4526   ; }
                    4527   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    4528   ; while (startAddressPtr == NULL || 
                    4529   MemoryTest_26:
0000290A  4A82      4530          tst.l     D2
0000290C  6732      4531          beq.s     MemoryTest_29
0000290E  0C84 0000 4532          cmp.l     #1,D4
00002912  0001      
00002914  6316      4533          bls.s     MemoryTest_30
00002916  2F02      4534          move.l    D2,-(A7)
00002918  4878 0002 4535          pea       2
0000291C  4EB9 0000 4536          jsr       ULDIV
00002920  2DA2      
00002922  202F 0004 4537          move.l    4(A7),D0
00002926  504F      4538          addq.w    #8,A7
00002928  4A80      4539          tst.l     D0
0000292A  6614      4540          bne.s     MemoryTest_29
                    4541   MemoryTest_30:
0000292C  0C82 0802 4542          cmp.l     #134348800,D2
00002930  0000      
00002932  650C      4543          blo.s     MemoryTest_29
00002934  203C 0B00 4544          move.l    #184549376,D0
00002938  0000      
0000293A  9084      4545          sub.l     D4,D0
0000293C  B480      4546          cmp.l     D0,D2
0000293E  6316      4547          bls.s     MemoryTest_28
                    4548   MemoryTest_29:
                    4549   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    4550   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    4551   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    4552   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
00002940  4879 0000 4553          pea       @m68kde~1_143.L
00002944  538C      
00002946  4E92      4554          jsr       (A2)
00002948  584F      4555          addq.w    #4,A7
                    4556   ; startAddressPtr =  Get8HexDigits(0);
0000294A  42A7      4557          clr.l     -(A7)
0000294C  4EB8 0CA4 4558          jsr       _Get8HexDigits
00002950  584F      4559          addq.w    #4,A7
00002952  2400      4560          move.l    D0,D2
00002954  60B4      4561          bra       MemoryTest_26
                    4562   MemoryTest_28:
                    4563   ; }
                    4564   ; while (endAddressPtr == NULL || 
                    4565   MemoryTest_31:
00002956  4A86      4566          tst.l     D6
00002958  670A      4567          beq.s     MemoryTest_34
0000295A  202E FFF0 4568          move.l    -16(A6),D0
0000295E  D084      4569          add.l     D4,D0
00002960  BC80      4570          cmp.l     D0,D6
00002962  6416      4571          bhs.s     MemoryTest_33
                    4572   MemoryTest_34:
                    4573   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    4574   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00002964  4879 0000 4575          pea       @m68kde~1_144.L
00002968  53C4      
0000296A  4E92      4576          jsr       (A2)
0000296C  584F      4577          addq.w    #4,A7
                    4578   ; endAddressPtr =  Get8HexDigits(0);
0000296E  42A7      4579          clr.l     -(A7)
00002970  4EB8 0CA4 4580          jsr       _Get8HexDigits
00002974  584F      4581          addq.w    #4,A7
00002976  2C00      4582          move.l    D0,D6
00002978  60DC      4583          bra       MemoryTest_31
                    4584   MemoryTest_33:
                    4585   ; }
                    4586   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
0000297A  2F02      4587          move.l    D2,-(A7)
0000297C  4879 0000 4588          pea       @m68kde~1_145.L
00002980  53FA      
00002982  4E92      4589          jsr       (A2)
00002984  504F      4590          addq.w    #8,A7
                    4591   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
00002986  2F06      4592          move.l    D6,-(A7)
00002988  4879 0000 4593          pea       @m68kde~1_146.L
0000298C  5412      
0000298E  4E92      4594          jsr       (A2)
00002990  504F      4595          addq.w    #8,A7
                    4596   ; addrCount = 0;
00002992  42AE FFFC 4597          clr.l     -4(A6)
                    4598   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    4599   MemoryTest_35:
00002996  B486      4600          cmp.l     D6,D2
00002998  6400 0132 4601          bhs       MemoryTest_37
0000299C  2006      4602          move.l    D6,D0
0000299E  9082      4603          sub.l     D2,D0
000029A0  5280      4604          addq.l    #1,D0
000029A2  B084      4605          cmp.l     D4,D0
000029A4  6500 0126 4606          blo       MemoryTest_37
                    4607   ; // If address goes beyond 0x0B00_0000 then break
                    4608   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
000029A8  203C 0B00 4609          move.l    #184549376,D0
000029AC  0000      
000029AE  9084      4610          sub.l     D4,D0
000029B0  B480      4611          cmp.l     D0,D2
000029B2  6310      4612          bls.s     MemoryTest_38
                    4613   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
000029B4  2F02      4614          move.l    D2,-(A7)
000029B6  4879 0000 4615          pea       @m68kde~1_147.L
000029BA  5428      
000029BC  4E92      4616          jsr       (A2)
000029BE  504F      4617          addq.w    #8,A7
                    4618   ; break;
000029C0  6000 010A 4619          bra       MemoryTest_37
                    4620   MemoryTest_38:
                    4621   ; }
                    4622   ; longAddressPtr = startAddressPtr;
000029C4  2642      4623          move.l    D2,A3
                    4624   ; wordAddressPtr = startAddressPtr;
000029C6  2842      4625          move.l    D2,A4
                    4626   ; if (dataSize == 0) {
000029C8  4A85      4627          tst.l     D5
000029CA  6600 0034 4628          bne       MemoryTest_40
                    4629   ; *startAddressPtr = dataPattern;
000029CE  2042      4630          move.l    D2,A0
000029D0  1083      4631          move.b    D3,(A0)
                    4632   ; if ((*startAddressPtr) != dataPattern) {
000029D2  2042      4633          move.l    D2,A0
000029D4  1010      4634          move.b    (A0),D0
000029D6  C0BC 0000 4635          and.l     #255,D0
000029DA  00FF      
000029DC  B083      4636          cmp.l     D3,D0
000029DE  671C      4637          beq.s     MemoryTest_42
                    4638   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
000029E0  2F03      4639          move.l    D3,-(A7)
000029E2  2042      4640          move.l    D2,A0
000029E4  1210      4641          move.b    (A0),D1
000029E6  C2BC 0000 4642          and.l     #255,D1
000029EA  00FF      
000029EC  2F01      4643          move.l    D1,-(A7)
000029EE  2F02      4644          move.l    D2,-(A7)
000029F0  4879 0000 4645          pea       @m68kde~1_148.L
000029F4  545A      
000029F6  4E92      4646          jsr       (A2)
000029F8  DEFC 0010 4647          add.w     #16,A7
                    4648   MemoryTest_42:
000029FC  6000 0058 4649          bra       MemoryTest_48
                    4650   MemoryTest_40:
                    4651   ; }
                    4652   ; } else if (dataSize == 1) {
00002A00  0C85 0000 4653          cmp.l     #1,D5
00002A04  0001      
00002A06  662C      4654          bne.s     MemoryTest_44
                    4655   ; *wordAddressPtr = dataPattern;
00002A08  3883      4656          move.w    D3,(A4)
                    4657   ; if ((*wordAddressPtr) != dataPattern) {
00002A0A  3014      4658          move.w    (A4),D0
00002A0C  C0BC 0000 4659          and.l     #65535,D0
00002A10  FFFF      
00002A12  B083      4660          cmp.l     D3,D0
00002A14  671C      4661          beq.s     MemoryTest_46
                    4662   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002A16  2F03      4663          move.l    D3,-(A7)
00002A18  2042      4664          move.l    D2,A0
00002A1A  1210      4665          move.b    (A0),D1
00002A1C  C2BC 0000 4666          and.l     #255,D1
00002A20  00FF      
00002A22  2F01      4667          move.l    D1,-(A7)
00002A24  2F02      4668          move.l    D2,-(A7)
00002A26  4879 0000 4669          pea       @m68kde~1_148.L
00002A2A  545A      
00002A2C  4E92      4670          jsr       (A2)
00002A2E  DEFC 0010 4671          add.w     #16,A7
                    4672   MemoryTest_46:
00002A32  6022      4673          bra.s     MemoryTest_48
                    4674   MemoryTest_44:
                    4675   ; }
                    4676   ; } else {
                    4677   ; *longAddressPtr = dataPattern;
00002A34  2683      4678          move.l    D3,(A3)
                    4679   ; if ((*longAddressPtr) != dataPattern) {
00002A36  B693      4680          cmp.l     (A3),D3
00002A38  671C      4681          beq.s     MemoryTest_48
                    4682   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002A3A  2F03      4683          move.l    D3,-(A7)
00002A3C  2042      4684          move.l    D2,A0
00002A3E  1210      4685          move.b    (A0),D1
00002A40  C2BC 0000 4686          and.l     #255,D1
00002A44  00FF      
00002A46  2F01      4687          move.l    D1,-(A7)
00002A48  2F02      4688          move.l    D2,-(A7)
00002A4A  4879 0000 4689          pea       @m68kde~1_148.L
00002A4E  545A      
00002A50  4E92      4690          jsr       (A2)
00002A52  DEFC 0010 4691          add.w     #16,A7
                    4692   MemoryTest_48:
                    4693   ; }
                    4694   ; }
                    4695   ; // if ((*startAddressPtr) != dataPattern) {
                    4696   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    4697   ; // }
                    4698   ; addrCount++;
00002A56  52AE FFFC 4699          addq.l    #1,-4(A6)
                    4700   ; if (addrCount % 128 == 0) {
00002A5A  2F2E FFFC 4701          move.l    -4(A6),-(A7)
00002A5E  4878 0080 4702          pea       128
00002A62  4EB9 0000 4703          jsr       ULDIV
00002A66  2DA2      
00002A68  202F 0004 4704          move.l    4(A7),D0
00002A6C  504F      4705          addq.w    #8,A7
00002A6E  4A80      4706          tst.l     D0
00002A70  6600 0054 4707          bne       MemoryTest_55
                    4708   ; if (dataSize == 0) {
00002A74  4A85      4709          tst.l     D5
00002A76  661C      4710          bne.s     MemoryTest_52
                    4711   ; printf("Address: 0x%x Value: 0x%02X\n",
00002A78  2042      4712          move.l    D2,A0
00002A7A  1210      4713          move.b    (A0),D1
00002A7C  C2BC 0000 4714          and.l     #255,D1
00002A80  00FF      
00002A82  2F01      4715          move.l    D1,-(A7)
00002A84  2F02      4716          move.l    D2,-(A7)
00002A86  4879 0000 4717          pea       @m68kde~1_149.L
00002A8A  54A0      
00002A8C  4E92      4718          jsr       (A2)
00002A8E  DEFC 000C 4719          add.w     #12,A7
00002A92  6032      4720          bra.s     MemoryTest_55
                    4721   MemoryTest_52:
                    4722   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    4723   ; }
                    4724   ; else if (dataSize == 1) {
00002A94  0C85 0000 4725          cmp.l     #1,D5
00002A98  0001      
00002A9A  661A      4726          bne.s     MemoryTest_54
                    4727   ; printf("Address: 0x%x Value: 0x%04X\n",
00002A9C  3214      4728          move.w    (A4),D1
00002A9E  C2BC 0000 4729          and.l     #65535,D1
00002AA2  FFFF      
00002AA4  2F01      4730          move.l    D1,-(A7)
00002AA6  2F0C      4731          move.l    A4,-(A7)
00002AA8  4879 0000 4732          pea       @m68kde~1_150.L
00002AAC  54BE      
00002AAE  4E92      4733          jsr       (A2)
00002AB0  DEFC 000C 4734          add.w     #12,A7
00002AB4  6010      4735          bra.s     MemoryTest_55
                    4736   MemoryTest_54:
                    4737   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    4738   ; }
                    4739   ; else {
                    4740   ; printf("Address: 0x%x Value: 0x%08X\n",
00002AB6  2F13      4741          move.l    (A3),-(A7)
00002AB8  2F0B      4742          move.l    A3,-(A7)
00002ABA  4879 0000 4743          pea       @m68kde~1_151.L
00002ABE  54DC      
00002AC0  4E92      4744          jsr       (A2)
00002AC2  DEFC 000C 4745          add.w     #12,A7
                    4746   MemoryTest_55:
                    4747   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    4748   ; }
                    4749   ; }
                    4750   ; startAddressPtr += byteLength;
00002AC6  D484      4751          add.l     D4,D2
00002AC8  6000 FECC 4752          bra       MemoryTest_35
                    4753   MemoryTest_37:
00002ACC  4CDF 3CFC 4754          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002AD0  4E5E      4755          unlk      A6
00002AD2  4E75      4756          rts
                    4757   ; }
                    4758   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4759   ; }
                    4760   ; void main(void)
                    4761   ; {
                    4762   _main:
00002AD4  4E56 FFF4 4763          link      A6,#-12
00002AD8  48E7 3030 4764          movem.l   D2/D3/A2/A3,-(A7)
00002ADC  45F8 0A30 4765          lea       _InstallExceptionHandler.L,A2
00002AE0  47F9 0000 4766          lea       _printf.L,A3
00002AE4  383C      
                    4767   ; char c ;
                    4768   ; int i, j ;
                    4769   ; char *BugMessage = "DE1-68k Bug V1.77";
00002AE6  41F9 0000 4770          lea       @m68kde~1_152.L,A0
00002AEA  54FA      
00002AEC  2608      4771          move.l    A0,D3
                    4772   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002AEE  41F9 0000 4773          lea       @m68kde~1_153.L,A0
00002AF2  550C      
00002AF4  2D48 FFFC 4774          move.l    A0,-4(A6)
                    4775   ; KillAllBreakPoints() ;
00002AF8  4EB8 1E1A 4776          jsr       _KillAllBreakPoints
                    4777   ; i = x = y = z = PortA_Count = 0;
00002AFC  42B9 0B00 4778          clr.l     _PortA_Count.L
00002B00  00D4      
00002B02  42B9 0B00 4779          clr.l     _z.L
00002B06  00D0      
00002B08  42B9 0B00 4780          clr.l     _y.L
00002B0C  00CC      
00002B0E  42B9 0B00 4781          clr.l     _x.L
00002B12  00C8      
00002B14  4282      4782          clr.l     D2
                    4783   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002B16  42B9 0B00 4784          clr.l     _GoFlag.L
00002B1A  00DC      
00002B1C  42B9 0B00 4785          clr.l     _Trace.L
00002B20  00D8      
                    4786   ; Echo = 1 ;
00002B22  23FC 0000 4787          move.l    #1,_Echo.L
00002B26  0001 0B00 
00002B2A  00E0      
                    4788   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002B2C  42B9 0B00 4789          clr.l     _d7.L
00002B30  0100      
00002B32  42B9 0B00 4790          clr.l     _d6.L
00002B36  00FC      
00002B38  42B9 0B00 4791          clr.l     _d5.L
00002B3C  00F8      
00002B3E  42B9 0B00 4792          clr.l     _d4.L
00002B42  00F4      
00002B44  42B9 0B00 4793          clr.l     _d3.L
00002B48  00F0      
00002B4A  42B9 0B00 4794          clr.l     _d2.L
00002B4E  00EC      
00002B50  42B9 0B00 4795          clr.l     _d1.L
00002B54  00E8      
00002B56  42B9 0B00 4796          clr.l     _d0.L
00002B5A  00E4      
                    4797   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002B5C  42B9 0B00 4798          clr.l     _a6.L
00002B60  011C      
00002B62  42B9 0B00 4799          clr.l     _a5.L
00002B66  0118      
00002B68  42B9 0B00 4800          clr.l     _a4.L
00002B6C  0114      
00002B6E  42B9 0B00 4801          clr.l     _a3.L
00002B72  0110      
00002B74  42B9 0B00 4802          clr.l     _a2.L
00002B78  010C      
00002B7A  42B9 0B00 4803          clr.l     _a1.L
00002B7E  0108      
00002B80  42B9 0B00 4804          clr.l     _a0.L
00002B84  0104      
                    4805   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002B86  23FC 0800 4806          move.l    #134217728,_PC.L
00002B8A  0000 0B00 
00002B8E  0120      
00002B90  23FC 0C00 4807          move.l    #201326592,_SSP.L
00002B94  0000 0B00 
00002B98  0124      
00002B9A  23FC 0C00 4808          move.l    #201326592,_USP.L
00002B9E  0000 0B00 
00002BA2  0128      
                    4809   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002BA4  33FC 2000 4810          move.w    #8192,_SR.L
00002BA8  0B00 012C 
                    4811   ; // Initialise Breakpoint variables
                    4812   ; for(i = 0; i < 8; i++)  {
00002BAC  4282      4813          clr.l     D2
                    4814   main_1:
00002BAE  0C82 0000 4815          cmp.l     #8,D2
00002BB2  0008      
00002BB4  6C00 004C 4816          bge       main_3
                    4817   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002BB8  2002      4818          move.l    D2,D0
00002BBA  E588      4819          lsl.l     #2,D0
00002BBC  41F9 0B00 4820          lea       _BreakPointAddress.L,A0
00002BC0  012E      
00002BC2  42B0 0800 4821          clr.l     0(A0,D0.L)
                    4822   ; WatchPointAddress[i] = 0 ;
00002BC6  2002      4823          move.l    D2,D0
00002BC8  E588      4824          lsl.l     #2,D0
00002BCA  41F9 0B00 4825          lea       _WatchPointAddress.L,A0
00002BCE  0182      
00002BD0  42B0 0800 4826          clr.l     0(A0,D0.L)
                    4827   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002BD4  2002      4828          move.l    D2,D0
00002BD6  E388      4829          lsl.l     #1,D0
00002BD8  41F9 0B00 4830          lea       _BreakPointInstruction.L,A0
00002BDC  014E      
00002BDE  4270 0800 4831          clr.w     0(A0,D0.L)
                    4832   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002BE2  2002      4833          move.l    D2,D0
00002BE4  E588      4834          lsl.l     #2,D0
00002BE6  41F9 0B00 4835          lea       _BreakPointSetOrCleared.L,A0
00002BEA  015E      
00002BEC  42B0 0800 4836          clr.l     0(A0,D0.L)
                    4837   ; WatchPointSetOrCleared[i] = 0;
00002BF0  2002      4838          move.l    D2,D0
00002BF2  E588      4839          lsl.l     #2,D0
00002BF4  41F9 0B00 4840          lea       _WatchPointSetOrCleared.L,A0
00002BF8  01A2      
00002BFA  42B0 0800 4841          clr.l     0(A0,D0.L)
00002BFE  5282      4842          addq.l    #1,D2
00002C00  60AC      4843          bra       main_1
                    4844   main_3:
                    4845   ; }
                    4846   ; Init_RS232() ;     // initialise the RS232 port
00002C02  4EB8 0B12 4847          jsr       _Init_RS232
                    4848   ; Init_LCD() ;
00002C06  4EB8 095E 4849          jsr       _Init_LCD
                    4850   ; SPI_Init();
00002C0A  4EB8 10EA 4851          jsr       _SPI_Init
                    4852   ; for( i = 32; i < 48; i++)
00002C0E  7420      4853          moveq     #32,D2
                    4854   main_4:
00002C10  0C82 0000 4855          cmp.l     #48,D2
00002C14  0030      
00002C16  6C0E      4856          bge.s     main_6
                    4857   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002C18  2F02      4858          move.l    D2,-(A7)
00002C1A  4878 2692 4859          pea       _UnhandledTrap.L
00002C1E  4E92      4860          jsr       (A2)
00002C20  504F      4861          addq.w    #8,A7
00002C22  5282      4862          addq.l    #1,D2
00002C24  60EA      4863          bra       main_4
                    4864   main_6:
                    4865   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002C26  4878 002F 4866          pea       47
00002C2A  4878 236C 4867          pea       _menu.L
00002C2E  4E92      4868          jsr       (A2)
00002C30  504F      4869          addq.w    #8,A7
                    4870   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002C32  4878 0019 4871          pea       25
00002C36  4878 2638 4872          pea       _UnhandledIRQ1.L
00002C3A  4E92      4873          jsr       (A2)
00002C3C  504F      4874          addq.w    #8,A7
                    4875   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002C3E  4878 001A 4876          pea       26
00002C42  4878 2644 4877          pea       _UnhandledIRQ2.L
00002C46  4E92      4878          jsr       (A2)
00002C48  504F      4879          addq.w    #8,A7
                    4880   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002C4A  4878 001B 4881          pea       27
00002C4E  4878 2650 4882          pea       _UnhandledIRQ3.L
00002C52  4E92      4883          jsr       (A2)
00002C54  504F      4884          addq.w    #8,A7
                    4885   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002C56  4878 001C 4886          pea       28
00002C5A  4878 265C 4887          pea       _UnhandledIRQ4.L
00002C5E  4E92      4888          jsr       (A2)
00002C60  504F      4889          addq.w    #8,A7
                    4890   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002C62  4878 001D 4891          pea       29
00002C66  4878 2668 4892          pea       _UnhandledIRQ5.L
00002C6A  4E92      4893          jsr       (A2)
00002C6C  504F      4894          addq.w    #8,A7
                    4895   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002C6E  4878 001E 4896          pea       30
00002C72  4878 2674 4897          pea       _UnhandledIRQ6.L
00002C76  4E92      4898          jsr       (A2)
00002C78  504F      4899          addq.w    #8,A7
                    4900   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002C7A  4878 001F 4901          pea       31
00002C7E  4878 2686 4902          pea       _UnhandledIRQ7.L
00002C82  4E92      4903          jsr       (A2)
00002C84  504F      4904          addq.w    #8,A7
                    4905   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002C86  4878 002E 4906          pea       46
00002C8A  4878 20A8 4907          pea       _HandleBreakPoint.L
00002C8E  4E92      4908          jsr       (A2)
00002C90  504F      4909          addq.w    #8,A7
                    4910   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002C92  4878 001D 4911          pea       29
00002C96  4878 1788 4912          pea       _DumpRegistersandPause.L
00002C9A  4E92      4913          jsr       (A2)
00002C9C  504F      4914          addq.w    #8,A7
                    4915   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002C9E  4878 0002 4916          pea       2
00002CA2  4878 26A0 4917          pea       _BusError.L
00002CA6  4E92      4918          jsr       (A2)
00002CA8  504F      4919          addq.w    #8,A7
                    4920   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002CAA  4878 0003 4921          pea       3
00002CAE  4878 26AE 4922          pea       _AddressError.L
00002CB2  4E92      4923          jsr       (A2)
00002CB4  504F      4924          addq.w    #8,A7
                    4925   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002CB6  4878 0004 4926          pea       4
00002CBA  4878 26BC 4927          pea       _IllegalInstruction.L
00002CBE  4E92      4928          jsr       (A2)
00002CC0  504F      4929          addq.w    #8,A7
                    4930   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002CC2  4878 0005 4931          pea       5
00002CC6  4878 26CA 4932          pea       _Dividebyzero.L
00002CCA  4E92      4933          jsr       (A2)
00002CCC  504F      4934          addq.w    #8,A7
                    4935   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002CCE  4878 0006 4936          pea       6
00002CD2  4878 26D8 4937          pea       _Check.L
00002CD6  4E92      4938          jsr       (A2)
00002CD8  504F      4939          addq.w    #8,A7
                    4940   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002CDA  4878 0007 4941          pea       7
00002CDE  4878 26E6 4942          pea       _Trapv.L
00002CE2  4E92      4943          jsr       (A2)
00002CE4  504F      4944          addq.w    #8,A7
                    4945   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002CE6  4878 0008 4946          pea       8
00002CEA  4878 26F4 4947          pea       _PrivError.L
00002CEE  4E92      4948          jsr       (A2)
00002CF0  504F      4949          addq.w    #8,A7
                    4950   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002CF2  4878 000F 4951          pea       15
00002CF6  4878 2702 4952          pea       _UnitIRQ.L
00002CFA  4E92      4953          jsr       (A2)
00002CFC  504F      4954          addq.w    #8,A7
                    4955   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002CFE  4878 0018 4956          pea       24
00002D02  4878 26D8 4957          pea       _Check.L
00002D06  4E92      4958          jsr       (A2)
00002D08  504F      4959          addq.w    #8,A7
                    4960   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002D0A  4EB8 0BA6 4961          jsr       _FlushKeyboard
                    4962   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002D0E  4239 0040 4963          clr.b     4194314
00002D12  000A      
                    4964   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4965   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4966   main_7:
00002D14  1039 0040 4967          move.b    4194306,D0
00002D18  0002      
00002D1A  C03C 0002 4968          and.b     #2,D0
00002D1E  0C00 0002 4969          cmp.b     #2,D0
00002D22  662A      4970          bne.s     main_9
                    4971   ; LoadFromFlashChip();
00002D24  4EB8 12C4 4972          jsr       _LoadFromFlashChip
                    4973   ; printf("\r\nRunning.....") ;
00002D28  4879 0000 4974          pea       @m68kde~1_154.L
00002D2C  552A      
00002D2E  4E93      4975          jsr       (A3)
00002D30  584F      4976          addq.w    #4,A7
                    4977   ; Oline1("Running.....") ;
00002D32  4879 0000 4978          pea       @m68kde~1_155.L
00002D36  553A      
00002D38  4EB8 0A02 4979          jsr       _Oline1
00002D3C  584F      4980          addq.w    #4,A7
                    4981   ; GoFlag = 1;
00002D3E  23FC 0000 4982          move.l    #1,_GoFlag.L
00002D42  0001 0B00 
00002D46  00DC      
                    4983   ; go() ;
00002D48  4EB8 08B8 4984          jsr       _go
00002D4C  60C6      4985          bra       main_7
                    4986   main_9:
                    4987   ; }
                    4988   ; // otherwise start the debug monitor
                    4989   ; Oline0(BugMessage) ;
00002D4E  2F03      4990          move.l    D3,-(A7)
00002D50  4EB8 09D4 4991          jsr       _Oline0
00002D54  584F      4992          addq.w    #4,A7
                    4993   ; Oline1("By: PJ Davies") ;
00002D56  4879 0000 4994          pea       @m68kde~1_156.L
00002D5A  5548      
00002D5C  4EB8 0A02 4995          jsr       _Oline1
00002D60  584F      4996          addq.w    #4,A7
                    4997   ; printf("\r\n%s", BugMessage) ;
00002D62  2F03      4998          move.l    D3,-(A7)
00002D64  4879 0000 4999          pea       @m68kde~1_157.L
00002D68  5556      
00002D6A  4E93      5000          jsr       (A3)
00002D6C  504F      5001          addq.w    #8,A7
                    5002   ; printf("\r\n%s", CopyrightMessage) ;
00002D6E  2F2E FFFC 5003          move.l    -4(A6),-(A7)
00002D72  4879 0000 5004          pea       @m68kde~1_157.L
00002D76  5556      
00002D78  4E93      5005          jsr       (A3)
00002D7A  504F      5006          addq.w    #8,A7
                    5007   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00002D7C  4879 0000 5008          pea       @m68kde~1_158.L
00002D80  555C      
00002D82  4E93      5009          jsr       (A3)
00002D84  584F      5010          addq.w    #4,A7
                    5011   ; menu();
00002D86  4EB8 236C 5012          jsr       _menu
00002D8A  4CDF 0C0C 5013          movem.l   (A7)+,D2/D3/A2/A3
00002D8E  4E5E      5014          unlk      A6
00002D90  4E75      5015          rts
                    5016   ; }
                    5017   _strcpy:
00002D92  206F 0004 5018          move.l    (4,A7),A0
00002D96  226F 0008 5019          move.l    (8,A7),A1
00002D9A  2008      5020          move.l    A0,D0
                    5021   strcpy_1:
00002D9C  10D9      5022          move.b    (A1)+,(A0)+
00002D9E  66FC      5023          bne       strcpy_1
00002DA0  4E75      5024          rts
                    5025   ULDIV:
00002DA2  4E56 0000 5026          link    A6,#0
00002DA6  48E7 C000 5027          movem.l D0/D1,-(A7)
00002DAA  222E 0008 5028          move.l  8(A6),D1
00002DAE  202E 000C 5029          move.l  12(A6),D0
00002DB2  6036      5030          bra.s   ldiv_3
                    5031   LDIV:
00002DB4  4E56 0000 5032          link    A6,#0
00002DB8  48E7 C000 5033          movem.l D0/D1,-(A7)
00002DBC  222E 0008 5034          move.l  8(A6),D1
00002DC0  202E 000C 5035          move.l  12(A6),D0
00002DC4  4A80      5036          tst.l   D0
00002DC6  6A0E      5037          bpl.s   ldiv_1
00002DC8  4480      5038          neg.l   D0
00002DCA  4A81      5039          tst.l   D1
00002DCC  6A14      5040          bpl.s   ldiv_2
00002DCE  4481      5041          neg.l   D1
00002DD0  612A      5042          bsr.s   dodiv
00002DD2  4481      5043          neg.l   D1
00002DD4  6016      5044          bra.s   ldiv_4
                    5045   ldiv_1:
00002DD6  4A81      5046          tst.l   D1
00002DD8  6A10      5047          bpl.s   ldiv_3
00002DDA  4481      5048          neg.l   D1
00002DDC  611E      5049          bsr.s   dodiv
00002DDE  4480      5050          neg.l   D0
00002DE0  600A      5051          bra.s   ldiv_4
                    5052   ldiv_2:
00002DE2  6118      5053          bsr.s   dodiv
00002DE4  4480      5054          neg.l   D0
00002DE6  4481      5055          neg.l   D1
00002DE8  6002      5056          bra.s   ldiv_4
                    5057   ldiv_3:
00002DEA  6110      5058          bsr.s   dodiv
                    5059   ldiv_4:
00002DEC  2D40 0008 5060          move.l  D0,8(A6)
00002DF0  2D41 000C 5061          move.l  D1,12(A6)
00002DF4  4CDF 0003 5062          movem.l (A7)+,D0/D1
00002DF8  4E5E      5063          unlk    A6
00002DFA  4E75      5064          rts
                    5065   dodiv:
00002DFC  0C81 0000 5066          cmpi.l  #$FFFF,D1
00002E00  FFFF      
00002E02  6236      5067          bhi.s   dodiv_2
00002E04  0C80 0000 5068          cmpi.l  #$FFFF,D0
00002E08  FFFF      
00002E0A  6210      5069          bhi.s   dodiv_1
00002E0C  80C1      5070          divu    D1,D0
00002E0E  2200      5071          move.l  D0,D1
00002E10  4241      5072          clr.w   D1
00002E12  4841      5073          swap    D1
00002E14  0280 0000 5074          andi.l  #$FFFF,D0
00002E18  FFFF      
00002E1A  4E75      5075          rts
                    5076   dodiv_1:
00002E1C  48A7 A000 5077          movem.w D0/D2,-(A7)
00002E20  4240      5078          clr.w   D0
00002E22  4840      5079          swap    D0
00002E24  80C1      5080          divu    D1,D0
00002E26  3400      5081          move.w  D0,D2
00002E28  301F      5082          move.w  (A7)+,D0
00002E2A  80C1      5083          divu    D1,D0
00002E2C  4840      5084          swap    D0
00002E2E  4281      5085          clr.l   D1
00002E30  3200      5086          move.w  D0,D1
00002E32  3002      5087          move.w  D2,D0
00002E34  4840      5088          swap    D0
00002E36  341F      5089          move.w  (A7)+,D2
00002E38  4E75      5090          rts
                    5091   dodiv_2:
00002E3A  48E7 3800 5092          movem.l D2/D3/D4,-(A7)
00002E3E  2401      5093          move.l  D1,D2
00002E40  4242      5094          clr.w   D2
00002E42  4842      5095          swap    D2
00002E44  5282      5096          addq.l  #1,D2
00002E46  2600      5097          move.l  D0,D3
00002E48  2801      5098          move.l  D1,D4
00002E4A  2202      5099          move.l  D2,D1
00002E4C  61CE      5100          bsr.s   dodiv_1
00002E4E  2204      5101          move.l  D4,D1
00002E50  82C2      5102          divu    D2,D1
00002E52  80C1      5103          divu    D1,D0
00002E54  0280 0000 5104          andi.l  #$FFFF,D0
00002E58  FFFF      
                    5105   dodiv_3:
00002E5A  2204      5106          move.l  D4,D1
00002E5C  2404      5107          move.l  D4,D2
00002E5E  4842      5108          swap    D2
00002E60  C2C0      5109          mulu    D0,D1
00002E62  C4C0      5110          mulu    D0,D2
00002E64  4842      5111          swap    D2
00002E66  D282      5112          add.l   D2,D1
00002E68  9283      5113          sub.l   D3,D1
00002E6A  620A      5114          bhi.s   dodiv_4
00002E6C  4481      5115          neg.l   D1
00002E6E  B881      5116          cmp.l   D1,D4
00002E70  6208      5117          bhi.s   dodiv_5
00002E72  5280      5118          addq.l  #1,D0
00002E74  60E4      5119          bra.s   dodiv_3
                    5120   dodiv_4:
00002E76  5380      5121          subq.l  #1,D0
00002E78  60E0      5122          bra.s   dodiv_3
                    5123   dodiv_5:
00002E7A  4CDF 001C 5124          movem.l (A7)+,D2/D3/D4
00002E7E  4E75      5125          rts
                    5126   _putch:
00002E80  4E56 0000 5127          link      A6,#0
00002E84  48E7 2000 5128          movem.l   D2,-(A7)
00002E88  242E 0008 5129          move.l    8(A6),D2
00002E8C  0C82 0000 5130          cmp.l     #10,D2
00002E90  000A      
00002E92  660A      5131          bne.s     putch_1
00002E94  4878 000D 5132          pea       13
00002E98  6100 DCA2 5133          bsr       __putch
00002E9C  584F      5134          addq.w    #4,A7
                    5135   putch_1:
00002E9E  2F02      5136          move.l    D2,-(A7)
00002EA0  6100 DC9A 5137          bsr       __putch
00002EA4  584F      5138          addq.w    #4,A7
00002EA6  2002      5139          move.l    D2,D0
00002EA8  4CDF 0004 5140          movem.l   (A7)+,D2
00002EAC  4E5E      5141          unlk      A6
00002EAE  4E75      5142          rts
                    5143   _getch:
00002EB0  48E7 2000 5144          movem.l   D2,-(A7)
00002EB4  2439 0B00 5145          move.l    __ungetbuf,D2
00002EB8  00C0      
00002EBA  2039 0B00 5146          move.l    __ungetbuf,D0
00002EBE  00C0      
00002EC0  0C80 FFFF 5147          cmp.l     #-1,D0
00002EC4  FFFF      
00002EC6  670C      5148          beq.s     getch_1
00002EC8  23FC FFFF 5149          move.l    #-1,__ungetbuf
00002ECC  FFFF 0B00 
00002ED0  00C0      
00002ED2  6010      5150          bra.s     getch_3
                    5151   getch_1:
00002ED4  6100 DC92 5152          bsr       __getch
00002ED8  2400      5153          move.l    D0,D2
00002EDA  0C80 0000 5154          cmp.l     #13,D0
00002EDE  000D      
00002EE0  6602      5155          bne.s     getch_3
00002EE2  740A      5156          moveq     #10,D2
                    5157   getch_3:
00002EE4  2002      5158          move.l    D2,D0
00002EE6  4CDF 0004 5159          movem.l   (A7)+,D2
00002EEA  4E75      5160          rts
                    5161   _tolower:
00002EEC  4E56 0000 5162          link      A6,#0
00002EF0  48E7 2000 5163          movem.l   D2,-(A7)
00002EF4  242E 0008 5164          move.l    8(A6),D2
00002EF8  0C82 0000 5165          cmp.l     #65,D2
00002EFC  0041      
00002EFE  6D0E      5166          blt.s     tolower_1
00002F00  0C82 0000 5167          cmp.l     #90,D2
00002F04  005A      
00002F06  6E06      5168          bgt.s     tolower_1
00002F08  84BC 0000 5169          or.l      #32,D2
00002F0C  0020      
                    5170   tolower_1:
00002F0E  2002      5171          move.l    D2,D0
00002F10  4CDF 0004 5172          movem.l   (A7)+,D2
00002F14  4E5E      5173          unlk      A6
00002F16  4E75      5174          rts
                    5175   _sprintf:
00002F18  4E56 FFFC 5176          link      A6,#-4
00002F1C  48E7 2000 5177          movem.l   D2,-(A7)
00002F20  41EE 000C 5178          lea       12(A6),A0
00002F24  5848      5179          addq.w    #4,A0
00002F26  2408      5180          move.l    A0,D2
00002F28  2F02      5181          move.l    D2,-(A7)
00002F2A  2F2E 000C 5182          move.l    12(A6),-(A7)
00002F2E  2F2E 0008 5183          move.l    8(A6),-(A7)
00002F32  6100 09EC 5184          bsr       _vsprintf
00002F36  DEFC 000C 5185          add.w     #12,A7
00002F3A  2D40 FFFC 5186          move.l    D0,-4(A6)
00002F3E  4282      5187          clr.l     D2
00002F40  202E FFFC 5188          move.l    -4(A6),D0
00002F44  4CDF 0004 5189          movem.l   (A7)+,D2
00002F48  4E5E      5190          unlk      A6
00002F4A  4E75      5191          rts
                    5192   _memset:
00002F4C  206F 0004 5193          move.l    (4,A7),A0
00002F50  202F 0008 5194          move.l    (8,A7),D0
00002F54  222F 000C 5195          move.l    (12,A7),D1
00002F58  2248      5196          move.l    A0,A1	
                    5197   memset_1:
00002F5A  12C0      5198          move.b    D0,(A1)+
00002F5C  5341      5199          subq      #1,D1
00002F5E  66FA      5200          bne       memset_1
00002F60  2008      5201          move.l    A0,D0
00002F62  4E75      5202          rts
                    5203   _strcat:
00002F64  206F 0004 5204          move.l    (4,A7),A0	
00002F68  226F 0008 5205          move.l    (8,A7),A1	
00002F6C  2008      5206          move.l    A0,D0		
                    5207   strcat_0:
00002F6E  4A18      5208          tst.b     (A0)+
00002F70  66FC      5209          bne       strcat_0
00002F72  5348      5210          subq      #1,A0
                    5211   strcat_1:
00002F74  10D9      5212          move.b    (A1)+,(A0)+
00002F76  66FC      5213          bne       strcat_1
00002F78  4E75      5214          rts
                    5215   _toupper:
00002F7A  4E56 0000 5216          link      A6,#0
00002F7E  48E7 2000 5217          movem.l   D2,-(A7)
00002F82  242E 0008 5218          move.l    8(A6),D2
00002F86  0C82 0000 5219          cmp.l     #97,D2
00002F8A  0061      
00002F8C  6D0E      5220          blt.s     toupper_1
00002F8E  0C82 0000 5221          cmp.l     #122,D2
00002F92  007A      
00002F94  6E06      5222          bgt.s     toupper_1
00002F96  C4BC 0000 5223          and.l     #95,D2
00002F9A  005F      
                    5224   toupper_1:
00002F9C  2002      5225          move.l    D2,D0
00002F9E  4CDF 0004 5226          movem.l   (A7)+,D2
00002FA2  4E5E      5227          unlk      A6
00002FA4  4E75      5228          rts
                    5229   @vsscanf_scanread:
00002FA6  4E56 FFFC 5230          link      A6,#-4
00002FAA  48E7 0020 5231          movem.l   A2,-(A7)
00002FAE  45F9 0000 5232          lea       @vsscanf_bufx,A2
00002FB2  55A4      
00002FB4  4AAE 0008 5233          tst.l     8(A6)
00002FB8  6722      5234          beq.s     @vsscanf_scanread_1
00002FBA  206E 0008 5235          move.l    8(A6),A0
00002FBE  58AE 0008 5236          addq.l    #4,8(A6)
00002FC2  2050      5237          move.l    (A0),A0
00002FC4  1010      5238          move.b    (A0),D0
00002FC6  4880      5239          ext.w     D0
00002FC8  48C0      5240          ext.l     D0
00002FCA  2D40 FFFC 5241          move.l    D0,-4(A6)
00002FCE  6706      5242          beq.s     @vsscanf_scanread_3
00002FD0  202E FFFC 5243          move.l    -4(A6),D0
00002FD4  6002      5244          bra.s     @vsscanf_scanread_4
                    5245   @vsscanf_scanread_3:
00002FD6  70FF      5246          moveq     #-1,D0
                    5247   @vsscanf_scanread_4:
00002FD8  6000 0032 5248          bra       @vsscanf_scanread_5
                    5249   @vsscanf_scanread_1:
00002FDC  2052      5250          move.l    (A2),A0
00002FDE  1010      5251          move.b    (A0),D0
00002FE0  6620      5252          bne.s     @vsscanf_scanread_6
00002FE2  4879 0B00 5253          pea       @vsscanf_buf
00002FE6  0546      
00002FE8  6100 1038 5254          bsr       _gets
00002FEC  584F      5255          addq.w    #4,A7
00002FEE  2480      5256          move.l    D0,(A2)
00002FF0  4879 0000 5257          pea       @vsscanf_1
00002FF4  55A8      
00002FF6  4879 0B00 5258          pea       @vsscanf_buf
00002FFA  0546      
00002FFC  6100 FF66 5259          bsr       _strcat
00003000  504F      5260          addq.w    #8,A7
                    5261   @vsscanf_scanread_6:
00003002  2052      5262          move.l    (A2),A0
00003004  5292      5263          addq.l    #1,(A2)
00003006  1010      5264          move.b    (A0),D0
00003008  4880      5265          ext.w     D0
0000300A  48C0      5266          ext.l     D0
                    5267   @vsscanf_scanread_5:
0000300C  4CDF 0400 5268          movem.l   (A7)+,A2
00003010  4E5E      5269          unlk      A6
00003012  4E75      5270          rts
                    5271   @vsscanf_scanputback:
00003014  4E56 0000 5272          link      A6,#0
00003018  48E7 3000 5273          movem.l   D2/D3,-(A7)
0000301C  242E 000C 5274          move.l    12(A6),D2
00003020  262E 0008 5275          move.l    8(A6),D3
00003024  6718      5276          beq.s     @vsscanf_scanputback_1
00003026  0C82 FFFF 5277          cmp.l     #-1,D2
0000302A  FFFF      
0000302C  670A      5278          beq.s     @vsscanf_scanputback_3
0000302E  5983      5279          subq.l    #4,D3
00003030  2043      5280          move.l    D3,A0
00003032  2050      5281          move.l    (A0),A0
00003034  1082      5282          move.b    D2,(A0)
00003036  6004      5283          bra.s     @vsscanf_scanputback_4
                    5284   @vsscanf_scanputback_3:
00003038  2043      5285          move.l    D3,A0
0000303A  5390      5286          subq.l    #1,(A0)
                    5287   @vsscanf_scanputback_4:
0000303C  602E      5288          bra.s     @vsscanf_scanputback_6
                    5289   @vsscanf_scanputback_1:
0000303E  41F9 0B00 5290          lea       @vsscanf_buf,A0
00003042  0546      
00003044  2008      5291          move.l    A0,D0
00003046  B0B9 0000 5292          cmp.l     @vsscanf_bufx,D0
0000304A  55A4      
0000304C  6610      5293          bne.s     @vsscanf_scanputback_5
0000304E  4239 0B00 5294          clr.b     @vsscanf_buf
00003052  0546      
00003054  2F02      5295          move.l    D2,-(A7)
00003056  6100 103C 5296          bsr       _ungetch
0000305A  584F      5297          addq.w    #4,A7
0000305C  600E      5298          bra.s     @vsscanf_scanputback_6
                    5299   @vsscanf_scanputback_5:
0000305E  53B9 0000 5300          subq.l    #1,@vsscanf_bufx
00003062  55A4      
00003064  2079 0000 5301          move.l    @vsscanf_bufx,A0
00003068  55A4      
0000306A  1082      5302          move.b    D2,(A0)
                    5303   @vsscanf_scanputback_6:
0000306C  2002      5304          move.l    D2,D0
0000306E  4CDF 000C 5305          movem.l   (A7)+,D2/D3
00003072  4E5E      5306          unlk      A6
00003074  4E75      5307          rts
                    5308   @vsscanf_scanspace:
00003076  4E56 0000 5309          link      A6,#0
0000307A  48E7 2000 5310          movem.l   D2,-(A7)
                    5311   @vsscanf_scanspace_1:
0000307E  2F2E 0008 5312          move.l    8(A6),-(A7)
00003082  6100 FF22 5313          bsr       @vsscanf_scanread
00003086  584F      5314          addq.w    #4,A7
00003088  2400      5315          move.l    D0,D2
0000308A  206E 000C 5316          move.l    12(A6),A0
0000308E  5290      5317          addq.l    #1,(A0)
00003090  2042      5318          move.l    D2,A0
00003092  43F9 0000 5319          lea       __ctype,A1
00003096  55AA      
00003098  1030 9801 5320          move.b    1(A0,A1.L),D0
0000309C  C03C 0010 5321          and.b     #16,D0
000030A0  66DC      5322          bne       @vsscanf_scanspace_1
000030A2  2002      5323          move.l    D2,D0
000030A4  4CDF 0004 5324          movem.l   (A7)+,D2
000030A8  4E5E      5325          unlk      A6
000030AA  4E75      5326          rts
                    5327   @vsscanf_scanselect:
000030AC  4E56 0000 5328          link      A6,#0
000030B0  48E7 3F20 5329          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
000030B4  262E 000C 5330          move.l    12(A6),D3
000030B8  2C2E 0018 5331          move.l    24(A6),D6
000030BC  2E2E 0014 5332          move.l    20(A6),D7
000030C0  2043      5333          move.l    D3,A0
000030C2  1010      5334          move.b    (A0),D0
000030C4  4880      5335          ext.w     D0
000030C6  48C0      5336          ext.l     D0
000030C8  0C80 0000 5337          cmp.l     #94,D0
000030CC  005E      
000030CE  6608      5338          bne.s     @vsscanf_scanselect_1
000030D0  347C 0001 5339          move.w    #1,A2
000030D4  5283      5340          addq.l    #1,D3
000030D6  6004      5341          bra.s     @vsscanf_scanselect_2
                    5342   @vsscanf_scanselect_1:
000030D8  347C 0000 5343          move.w    #0,A2
                    5344   @vsscanf_scanselect_2:
000030DC  202E 0010 5345          move.l    16(A6),D0
000030E0  53AE 0010 5346          subq.l    #1,16(A6)
000030E4  4A80      5347          tst.l     D0
000030E6  6700 0108 5348          beq       @vsscanf_scanselect_5
000030EA  2F2E 0008 5349          move.l    8(A6),-(A7)
000030EE  6100 FEB6 5350          bsr       @vsscanf_scanread
000030F2  584F      5351          addq.w    #4,A7
000030F4  2800      5352          move.l    D0,D4
000030F6  0C84 FFFF 5353          cmp.l     #-1,D4
000030FA  FFFF      
000030FC  6604      5354          bne.s     @vsscanf_scanselect_6
000030FE  6000 00F0 5355          bra       @vsscanf_scanselect_5
                    5356   @vsscanf_scanselect_6:
00003102  206E 001C 5357          move.l    28(A6),A0
00003106  5290      5358          addq.l    #1,(A0)
00003108  4285      5359          clr.l     D5
0000310A  4282      5360          clr.l     D2
                    5361   @vsscanf_scanselect_8:
0000310C  2043      5362          move.l    D3,A0
0000310E  1030 2800 5363          move.b    0(A0,D2.L),D0
00003112  4880      5364          ext.w     D0
00003114  48C0      5365          ext.l     D0
00003116  0C80 0000 5366          cmp.l     #93,D0
0000311A  005D      
0000311C  6700 008E 5367          beq       @vsscanf_scanselect_10
00003120  4A82      5368          tst.l     D2
00003122  6716      5369          beq.s     @vsscanf_scanselect_11
00003124  2043      5370          move.l    D3,A0
00003126  1030 2800 5371          move.b    0(A0,D2.L),D0
0000312A  4880      5372          ext.w     D0
0000312C  48C0      5373          ext.l     D0
0000312E  0C80 0000 5374          cmp.l     #93,D0
00003132  005D      
00003134  6604      5375          bne.s     @vsscanf_scanselect_11
00003136  6000 0074 5376          bra       @vsscanf_scanselect_10
                    5377   @vsscanf_scanselect_11:
0000313A  4A82      5378          tst.l     D2
0000313C  6700 0058 5379          beq       @vsscanf_scanselect_15
00003140  2043      5380          move.l    D3,A0
00003142  1030 2800 5381          move.b    0(A0,D2.L),D0
00003146  4880      5382          ext.w     D0
00003148  48C0      5383          ext.l     D0
0000314A  0C80 0000 5384          cmp.l     #45,D0
0000314E  002D      
00003150  6600 0044 5385          bne       @vsscanf_scanselect_15
00003154  2043      5386          move.l    D3,A0
00003156  2002      5387          move.l    D2,D0
00003158  5380      5388          subq.l    #1,D0
0000315A  2243      5389          move.l    D3,A1
0000315C  2F08      5390          move.l    A0,-(A7)
0000315E  2042      5391          move.l    D2,A0
00003160  1230 0800 5392          move.b    0(A0,D0.L),D1
00003164  B230 9801 5393          cmp.b     1(A0,A1.L),D1
00003168  6C00 002C 5394          bge       @vsscanf_scanselect_15
0000316C  205F      5395          move.l    (A7)+,A0
0000316E  2043      5396          move.l    D3,A0
00003170  2002      5397          move.l    D2,D0
00003172  5380      5398          subq.l    #1,D0
00003174  1030 0800 5399          move.b    0(A0,D0.L),D0
00003178  4880      5400          ext.w     D0
0000317A  48C0      5401          ext.l     D0
0000317C  B880      5402          cmp.l     D0,D4
0000317E  6D12      5403          blt.s     @vsscanf_scanselect_17
00003180  2043      5404          move.l    D3,A0
00003182  2242      5405          move.l    D2,A1
00003184  1031 8801 5406          move.b    1(A1,A0.L),D0
00003188  4880      5407          ext.w     D0
0000318A  48C0      5408          ext.l     D0
0000318C  B880      5409          cmp.l     D0,D4
0000318E  6E02      5410          bgt.s     @vsscanf_scanselect_17
00003190  601A      5411          bra.s     @vsscanf_scanselect_10
                    5412   @vsscanf_scanselect_17:
00003192  5282      5413          addq.l    #1,D2
00003194  6010      5414          bra.s     @vsscanf_scanselect_19
                    5415   @vsscanf_scanselect_15:
00003196  2043      5416          move.l    D3,A0
00003198  1030 2800 5417          move.b    0(A0,D2.L),D0
0000319C  4880      5418          ext.w     D0
0000319E  48C0      5419          ext.l     D0
000031A0  B880      5420          cmp.l     D0,D4
000031A2  6602      5421          bne.s     @vsscanf_scanselect_19
000031A4  6006      5422          bra.s     @vsscanf_scanselect_10
                    5423   @vsscanf_scanselect_19:
000031A6  5282      5424          addq.l    #1,D2
000031A8  6000 FF62 5425          bra       @vsscanf_scanselect_8
                    5426   @vsscanf_scanselect_10:
000031AC  4A82      5427          tst.l     D2
000031AE  6712      5428          beq.s     @vsscanf_scanselect_23
000031B0  2043      5429          move.l    D3,A0
000031B2  1030 2800 5430          move.b    0(A0,D2.L),D0
000031B6  4880      5431          ext.w     D0
000031B8  48C0      5432          ext.l     D0
000031BA  0C80 0000 5433          cmp.l     #93,D0
000031BE  005D      
000031C0  6702      5434          beq.s     @vsscanf_scanselect_21
                    5435   @vsscanf_scanselect_23:
000031C2  7A01      5436          moveq     #1,D5
                    5437   @vsscanf_scanselect_21:
000031C4  200A      5438          move.l    A2,D0
000031C6  6712      5439          beq.s     @vsscanf_scanselect_24
000031C8  4A85      5440          tst.l     D5
000031CA  660C      5441          bne.s     @vsscanf_scanselect_26
000031CC  4A87      5442          tst.l     D7
000031CE  6606      5443          bne.s     @vsscanf_scanselect_28
000031D0  2046      5444          move.l    D6,A0
000031D2  5286      5445          addq.l    #1,D6
000031D4  1084      5446          move.b    D4,(A0)
                    5447   @vsscanf_scanselect_28:
000031D6  6014      5448          bra.s     @vsscanf_scanselect_4
                    5449   @vsscanf_scanselect_26:
000031D8  6016      5450          bra.s     @vsscanf_scanselect_5
                    5451   @vsscanf_scanselect_24:
000031DA  4A85      5452          tst.l     D5
000031DC  670C      5453          beq.s     @vsscanf_scanselect_30
000031DE  4A87      5454          tst.l     D7
000031E0  6606      5455          bne.s     @vsscanf_scanselect_32
000031E2  2046      5456          move.l    D6,A0
000031E4  5286      5457          addq.l    #1,D6
000031E6  1084      5458          move.b    D4,(A0)
                    5459   @vsscanf_scanselect_32:
000031E8  6002      5460          bra.s     @vsscanf_scanselect_4
                    5461   @vsscanf_scanselect_30:
000031EA  6004      5462          bra.s     @vsscanf_scanselect_5
                    5463   @vsscanf_scanselect_4:
000031EC  6000 FEEE 5464          bra       @vsscanf_scanselect_2
                    5465   @vsscanf_scanselect_5:
000031F0  0C84 FFFF 5466          cmp.l     #-1,D4
000031F4  FFFF      
000031F6  6712      5467          beq.s     @vsscanf_scanselect_34
000031F8  2F04      5468          move.l    D4,-(A7)
000031FA  2F2E 0008 5469          move.l    8(A6),-(A7)
000031FE  6100 FE14 5470          bsr       @vsscanf_scanputback
00003202  504F      5471          addq.w    #8,A7
00003204  206E 001C 5472          move.l    28(A6),A0
00003208  5390      5473          subq.l    #1,(A0)
                    5474   @vsscanf_scanselect_34:
0000320A  4A87      5475          tst.l     D7
0000320C  6604      5476          bne.s     @vsscanf_scanselect_36
0000320E  2046      5477          move.l    D6,A0
00003210  4210      5478          clr.b     (A0)
                    5479   @vsscanf_scanselect_36:
00003212  5283      5480          addq.l    #1,D3
00003214  2043      5481          move.l    D3,A0
00003216  1010      5482          move.b    (A0),D0
00003218  4880      5483          ext.w     D0
0000321A  48C0      5484          ext.l     D0
0000321C  0C80 0000 5485          cmp.l     #93,D0
00003220  005D      
00003222  6702      5486          beq.s     @vsscanf_scanselect_40
00003224  60EC      5487          bra       @vsscanf_scanselect_36
                    5488   @vsscanf_scanselect_40:
00003226  5283      5489          addq.l    #1,D3
00003228  2003      5490          move.l    D3,D0
0000322A  4CDF 04FC 5491          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
0000322E  4E5E      5492          unlk      A6
00003230  4E75      5493          rts
                    5494   _scanflush:
00003232  41F9 0B00 5495          lea       @vsscanf_buf,A0
00003236  0546      
00003238  23C8 0000 5496          move.l    A0,@vsscanf_bufx
0000323C  55A4      
0000323E  4239 0B00 5497          clr.b     @vsscanf_buf
00003242  0546      
00003244  4878 FFFF 5498          pea       -1
00003248  6100 0E4A 5499          bsr       _ungetch
0000324C  584F      5500          addq.w    #4,A7
0000324E  4E75      5501          rts
                    5502   _vsscanf:
00003250  4E56 FF88 5503          link      A6,#-120
00003254  48E7 3F3C 5504          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003258  47F8 2FA6 5505          lea       @vsscanf_scanread,A3
0000325C  4AAE 0008 5506          tst.l     8(A6)
00003260  6706      5507          beq.s     vsscanf_1
00003262  41EE 0008 5508          lea       8(A6),A0
00003266  6004      5509          bra.s     vsscanf_2
                    5510   vsscanf_1:
00003268  4280      5511          clr.l     D0
0000326A  2040      5512          move.l    D0,A0
                    5513   vsscanf_2:
0000326C  2A08      5514          move.l    A0,D5
0000326E  42AE FFE4 5515          clr.l     -28(A6)
00003272  4284      5516          clr.l     D4
                    5517   vsscanf_3:
00003274  206E 000C 5518          move.l    12(A6),A0
00003278  52AE 000C 5519          addq.l    #1,12(A6)
0000327C  1010      5520          move.b    (A0),D0
0000327E  4880      5521          ext.w     D0
00003280  48C0      5522          ext.l     D0
00003282  2600      5523          move.l    D0,D3
00003284  6700 05AC 5524          beq       vsscanf_5
00003288  4286      5525          clr.l     D6
0000328A  387C 0000 5526          move.w    #0,A4
0000328E  0C83 0000 5527          cmp.l     #32,D3
00003292  0020      
00003294  6712      5528          beq.s     vsscanf_8
00003296  0C83 0000 5529          cmp.l     #9,D3
0000329A  0009      
0000329C  670A      5530          beq.s     vsscanf_8
0000329E  0C83 0000 5531          cmp.l     #10,D3
000032A2  000A      
000032A4  6600 0048 5532          bne       vsscanf_6
                    5533   vsscanf_8:
000032A8  2F05      5534          move.l    D5,-(A7)
000032AA  4E93      5535          jsr       (A3)
000032AC  584F      5536          addq.w    #4,A7
000032AE  2400      5537          move.l    D0,D2
000032B0  52AE FFE4 5538          addq.l    #1,-28(A6)
000032B4  0C82 FFFF 5539          cmp.l     #-1,D2
000032B8  FFFF      
000032BA  660E      5540          bne.s     vsscanf_11
000032BC  4A84      5541          tst.l     D4
000032BE  6704      5542          beq.s     vsscanf_13
000032C0  2004      5543          move.l    D4,D0
000032C2  6002      5544          bra.s     vsscanf_14
                    5545   vsscanf_13:
000032C4  70FF      5546          moveq     #-1,D0
                    5547   vsscanf_14:
000032C6  6000 056C 5548          bra       vsscanf_15
                    5549   vsscanf_11:
000032CA  2042      5550          move.l    D2,A0
000032CC  43F9 0000 5551          lea       __ctype,A1
000032D0  55AA      
000032D2  1030 9801 5552          move.b    1(A0,A1.L),D0
000032D6  C03C 0010 5553          and.b     #16,D0
000032DA  66CC      5554          bne       vsscanf_8
000032DC  53AE FFE4 5555          subq.l    #1,-28(A6)
000032E0  2F02      5556          move.l    D2,-(A7)
000032E2  2F05      5557          move.l    D5,-(A7)
000032E4  6100 FD2E 5558          bsr       @vsscanf_scanputback
000032E8  504F      5559          addq.w    #8,A7
000032EA  6000 0542 5560          bra       vsscanf_139
                    5561   vsscanf_6:
000032EE  0C83 0000 5562          cmp.l     #37,D3
000032F2  0025      
000032F4  6600 0502 5563          bne       vsscanf_127
000032F8  206E 000C 5564          move.l    12(A6),A0
000032FC  52AE 000C 5565          addq.l    #1,12(A6)
00003300  1010      5566          move.b    (A0),D0
00003302  4880      5567          ext.w     D0
00003304  48C0      5568          ext.l     D0
00003306  2600      5569          move.l    D0,D3
00003308  42AE FFEC 5570          clr.l     -20(A6)
0000330C  4286      5571          clr.l     D6
0000330E  42AE FFE8 5572          clr.l     -24(A6)
00003312  347C 7FFF 5573          move.w    #32767,A2
00003316  0C83 0000 5574          cmp.l     #42,D3
0000331A  002A      
0000331C  6612      5575          bne.s     vsscanf_18
0000331E  7C01      5576          moveq     #1,D6
00003320  206E 000C 5577          move.l    12(A6),A0
00003324  52AE 000C 5578          addq.l    #1,12(A6)
00003328  1010      5579          move.b    (A0),D0
0000332A  4880      5580          ext.w     D0
0000332C  48C0      5581          ext.l     D0
0000332E  2600      5582          move.l    D0,D3
                    5583   vsscanf_18:
00003330  2043      5584          move.l    D3,A0
00003332  43F9 0000 5585          lea       __ctype,A1
00003336  55AA      
00003338  1030 9801 5586          move.b    1(A0,A1.L),D0
0000333C  C03C 0004 5587          and.b     #4,D0
00003340  6700 004E 5588          beq       vsscanf_24
00003344  2003      5589          move.l    D3,D0
00003346  0480 0000 5590          sub.l     #48,D0
0000334A  0030      
0000334C  2440      5591          move.l    D0,A2
                    5592   vsscanf_22:
0000334E  206E 000C 5593          move.l    12(A6),A0
00003352  52AE 000C 5594          addq.l    #1,12(A6)
00003356  1010      5595          move.b    (A0),D0
00003358  4880      5596          ext.w     D0
0000335A  48C0      5597          ext.l     D0
0000335C  2600      5598          move.l    D0,D3
0000335E  2040      5599          move.l    D0,A0
00003360  43F9 0000 5600          lea       __ctype,A1
00003364  55AA      
00003366  1030 9801 5601          move.b    1(A0,A1.L),D0
0000336A  C0BC 0000 5602          and.l     #255,D0
0000336E  00FF      
00003370  C0BC 0000 5603          and.l     #4,D0
00003374  0004      
00003376  6718      5604          beq.s     vsscanf_24
00003378  70D0      5605          moveq     #-48,D0
0000337A  2F0A      5606          move.l    A2,-(A7)
0000337C  4878 000A 5607          pea       10
00003380  6100 0C12 5608          bsr       LMUL
00003384  2217      5609          move.l    (A7),D1
00003386  504F      5610          addq.w    #8,A7
00003388  D283      5611          add.l     D3,D1
0000338A  D081      5612          add.l     D1,D0
0000338C  2440      5613          move.l    D0,A2
0000338E  60BE      5614          bra       vsscanf_22
                    5615   vsscanf_24:
00003390  0C83 0000 5616          cmp.l     #108,D3
00003394  006C      
00003396  6708      5617          beq.s     vsscanf_27
00003398  0C83 0000 5618          cmp.l     #76,D3
0000339C  004C      
0000339E  661A      5619          bne.s     vsscanf_25
                    5620   vsscanf_27:
000033A0  2D7C 0000 5621          move.l    #1,-24(A6)
000033A4  0001 FFE8 
000033A8  206E 000C 5622          move.l    12(A6),A0
000033AC  52AE 000C 5623          addq.l    #1,12(A6)
000033B0  1010      5624          move.b    (A0),D0
000033B2  4880      5625          ext.w     D0
000033B4  48C0      5626          ext.l     D0
000033B6  2600      5627          move.l    D0,D3
000033B8  6020      5628          bra.s     vsscanf_28
                    5629   vsscanf_25:
000033BA  0C83 0000 5630          cmp.l     #104,D3
000033BE  0068      
000033C0  6618      5631          bne.s     vsscanf_28
000033C2  2D7C 0000 5632          move.l    #1,-20(A6)
000033C6  0001 FFEC 
000033CA  206E 000C 5633          move.l    12(A6),A0
000033CE  52AE 000C 5634          addq.l    #1,12(A6)
000033D2  1010      5635          move.b    (A0),D0
000033D4  4880      5636          ext.w     D0
000033D6  48C0      5637          ext.l     D0
000033D8  2600      5638          move.l    D0,D3
                    5639   vsscanf_28:
000033DA  0C83 0000 5640          cmp.l     #91,D3
000033DE  005B      
000033E0  6600 0036 5641          bne       vsscanf_30
000033E4  4A86      5642          tst.l     D6
000033E6  660A      5643          bne.s     vsscanf_32
000033E8  206E 0010 5644          move.l    16(A6),A0
000033EC  58AE 0010 5645          addq.l    #4,16(A6)
000033F0  2E10      5646          move.l    (A0),D7
                    5647   vsscanf_32:
000033F2  486E FFE4 5648          pea       -28(A6)
000033F6  2F07      5649          move.l    D7,-(A7)
000033F8  2F06      5650          move.l    D6,-(A7)
000033FA  2F0A      5651          move.l    A2,-(A7)
000033FC  2F2E 000C 5652          move.l    12(A6),-(A7)
00003400  2F05      5653          move.l    D5,-(A7)
00003402  6100 FCA8 5654          bsr       @vsscanf_scanselect
00003406  DEFC 0018 5655          add.w     #24,A7
0000340A  2D40 000C 5656          move.l    D0,12(A6)
0000340E  4A86      5657          tst.l     D6
00003410  6602      5658          bne.s     vsscanf_34
00003412  5284      5659          addq.l    #1,D4
                    5660   vsscanf_34:
00003414  6000 0418 5661          bra       vsscanf_139
                    5662   vsscanf_30:
00003418  0C83 0000 5663          cmp.l     #110,D3
0000341C  006E      
0000341E  661A      5664          bne.s     vsscanf_36
00003420  4A86      5665          tst.l     D6
00003422  6612      5666          bne.s     vsscanf_38
00003424  206E 0010 5667          move.l    16(A6),A0
00003428  58AE 0010 5668          addq.l    #4,16(A6)
0000342C  2E10      5669          move.l    (A0),D7
0000342E  2047      5670          move.l    D7,A0
00003430  20AE FFE4 5671          move.l    -28(A6),(A0)
00003434  5284      5672          addq.l    #1,D4
                    5673   vsscanf_38:
00003436  6000 03F6 5674          bra       vsscanf_139
                    5675   vsscanf_36:
0000343A  0C83 0000 5676          cmp.l     #115,D3
0000343E  0073      
00003440  6600 00AC 5677          bne       vsscanf_40
00003444  486E FFE4 5678          pea       -28(A6)
00003448  2F05      5679          move.l    D5,-(A7)
0000344A  6100 FC2A 5680          bsr       @vsscanf_scanspace
0000344E  504F      5681          addq.w    #8,A7
00003450  2400      5682          move.l    D0,D2
00003452  4A86      5683          tst.l     D6
00003454  660A      5684          bne.s     vsscanf_42
00003456  206E 0010 5685          move.l    16(A6),A0
0000345A  58AE 0010 5686          addq.l    #4,16(A6)
0000345E  2E10      5687          move.l    (A0),D7
                    5688   vsscanf_42:
00003460  52AE FFE4 5689          addq.l    #1,-28(A6)
                    5690   vsscanf_44:
00003464  200A      5691          move.l    A2,D0
00003466  534A      5692          subq.w    #1,A2
00003468  4A80      5693          tst.l     D0
0000346A  6700 0038 5694          beq       vsscanf_46
0000346E  2042      5695          move.l    D2,A0
00003470  43F9 0000 5696          lea       __ctype,A1
00003474  55AA      
00003476  1030 9801 5697          move.b    1(A0,A1.L),D0
0000347A  C03C 0010 5698          and.b     #16,D0
0000347E  6624      5699          bne.s     vsscanf_46
00003480  0C82 FFFF 5700          cmp.l     #-1,D2
00003484  FFFF      
00003486  671C      5701          beq.s     vsscanf_46
00003488  387C 0001 5702          move.w    #1,A4
0000348C  4A86      5703          tst.l     D6
0000348E  6606      5704          bne.s     vsscanf_47
00003490  2047      5705          move.l    D7,A0
00003492  5287      5706          addq.l    #1,D7
00003494  1082      5707          move.b    D2,(A0)
                    5708   vsscanf_47:
00003496  2F05      5709          move.l    D5,-(A7)
00003498  4E93      5710          jsr       (A3)
0000349A  584F      5711          addq.w    #4,A7
0000349C  2400      5712          move.l    D0,D2
0000349E  52AE FFE4 5713          addq.l    #1,-28(A6)
000034A2  60C0      5714          bra       vsscanf_44
                    5715   vsscanf_46:
000034A4  4A86      5716          tst.l     D6
000034A6  660A      5717          bne.s     vsscanf_51
000034A8  2047      5718          move.l    D7,A0
000034AA  4210      5719          clr.b     (A0)
000034AC  200C      5720          move.l    A4,D0
000034AE  6702      5721          beq.s     vsscanf_51
000034B0  5284      5722          addq.l    #1,D4
                    5723   vsscanf_51:
000034B2  0C82 FFFF 5724          cmp.l     #-1,D2
000034B6  FFFF      
000034B8  6708      5725          beq.s     vsscanf_55
000034BA  4A86      5726          tst.l     D6
000034BC  661E      5727          bne.s     vsscanf_53
000034BE  200C      5728          move.l    A4,D0
000034C0  661A      5729          bne.s     vsscanf_53
                    5730   vsscanf_55:
000034C2  4A84      5731          tst.l     D4
000034C4  6704      5732          beq.s     vsscanf_56
000034C6  2004      5733          move.l    D4,D0
000034C8  600E      5734          bra.s     vsscanf_59
                    5735   vsscanf_56:
000034CA  0C82 FFFF 5736          cmp.l     #-1,D2
000034CE  FFFF      
000034D0  6604      5737          bne.s     vsscanf_58
000034D2  70FF      5738          moveq     #-1,D0
000034D4  6002      5739          bra.s     vsscanf_59
                    5740   vsscanf_58:
000034D6  2004      5741          move.l    D4,D0
                    5742   vsscanf_59:
000034D8  6000 035A 5743          bra       vsscanf_15
                    5744   vsscanf_53:
000034DC  53AE FFE4 5745          subq.l    #1,-28(A6)
000034E0  2F02      5746          move.l    D2,-(A7)
000034E2  2F05      5747          move.l    D5,-(A7)
000034E4  6100 FB2E 5748          bsr       @vsscanf_scanputback
000034E8  504F      5749          addq.w    #8,A7
000034EA  6000 0342 5750          bra       vsscanf_139
                    5751   vsscanf_40:
000034EE  0C83 0000 5752          cmp.l     #99,D3
000034F2  0063      
000034F4  6600 008E 5753          bne       vsscanf_60
000034F8  4A86      5754          tst.l     D6
000034FA  660A      5755          bne.s     vsscanf_62
000034FC  206E 0010 5756          move.l    16(A6),A0
00003500  58AE 0010 5757          addq.l    #4,16(A6)
00003504  2E10      5758          move.l    (A0),D7
                    5759   vsscanf_62:
00003506  2F05      5760          move.l    D5,-(A7)
00003508  4E93      5761          jsr       (A3)
0000350A  584F      5762          addq.w    #4,A7
0000350C  2400      5763          move.l    D0,D2
0000350E  52AE FFE4 5764          addq.l    #1,-28(A6)
00003512  200A      5765          move.l    A2,D0
00003514  0C80 0000 5766          cmp.l     #32767,D0
00003518  7FFF      
0000351A  6604      5767          bne.s     vsscanf_64
0000351C  347C 0001 5768          move.w    #1,A2
                    5769   vsscanf_64:
00003520  0C82 FFFF 5770          cmp.l     #-1,D2
00003524  FFFF      
00003526  6606      5771          bne.s     vsscanf_66
00003528  4A86      5772          tst.l     D6
0000352A  6602      5773          bne.s     vsscanf_66
0000352C  5384      5774          subq.l    #1,D4
                    5775   vsscanf_66:
0000352E  200A      5776          move.l    A2,D0
00003530  534A      5777          subq.w    #1,A2
00003532  4A80      5778          tst.l     D0
00003534  6720      5779          beq.s     vsscanf_70
00003536  0C82 FFFF 5780          cmp.l     #-1,D2
0000353A  FFFF      
0000353C  6718      5781          beq.s     vsscanf_70
0000353E  4A86      5782          tst.l     D6
00003540  6606      5783          bne.s     vsscanf_71
00003542  2047      5784          move.l    D7,A0
00003544  5287      5785          addq.l    #1,D7
00003546  1082      5786          move.b    D2,(A0)
                    5787   vsscanf_71:
00003548  2F05      5788          move.l    D5,-(A7)
0000354A  4E93      5789          jsr       (A3)
0000354C  584F      5790          addq.w    #4,A7
0000354E  2400      5791          move.l    D0,D2
00003550  52AE FFE4 5792          addq.l    #1,-28(A6)
00003554  60D8      5793          bra       vsscanf_66
                    5794   vsscanf_70:
00003556  0C82 FFFF 5795          cmp.l     #-1,D2
0000355A  FFFF      
0000355C  660E      5796          bne.s     vsscanf_73
0000355E  4A84      5797          tst.l     D4
00003560  6704      5798          beq.s     vsscanf_75
00003562  2004      5799          move.l    D4,D0
00003564  6002      5800          bra.s     vsscanf_76
                    5801   vsscanf_75:
00003566  70FF      5802          moveq     #-1,D0
                    5803   vsscanf_76:
00003568  6000 02CA 5804          bra       vsscanf_15
                    5805   vsscanf_73:
0000356C  4A86      5806          tst.l     D6
0000356E  6602      5807          bne.s     vsscanf_77
00003570  5284      5808          addq.l    #1,D4
                    5809   vsscanf_77:
00003572  53AE FFE4 5810          subq.l    #1,-28(A6)
00003576  2F02      5811          move.l    D2,-(A7)
00003578  2F05      5812          move.l    D5,-(A7)
0000357A  6100 FA98 5813          bsr       @vsscanf_scanputback
0000357E  504F      5814          addq.w    #8,A7
00003580  6000 02AC 5815          bra       vsscanf_139
                    5816   vsscanf_60:
00003584  0C83 0000 5817          cmp.l     #105,D3
00003588  0069      
0000358A  6600 0060 5818          bne       vsscanf_82
0000358E  486E FFE4 5819          pea       -28(A6)
00003592  2F05      5820          move.l    D5,-(A7)
00003594  6100 FAE0 5821          bsr       @vsscanf_scanspace
00003598  504F      5822          addq.w    #8,A7
0000359A  2400      5823          move.l    D0,D2
0000359C  0C82 0000 5824          cmp.l     #48,D2
000035A0  0030      
000035A2  6600 0038 5825          bne       vsscanf_81
000035A6  387C 0001 5826          move.w    #1,A4
000035AA  2F05      5827          move.l    D5,-(A7)
000035AC  4E93      5828          jsr       (A3)
000035AE  584F      5829          addq.w    #4,A7
000035B0  2400      5830          move.l    D0,D2
000035B2  2F02      5831          move.l    D2,-(A7)
000035B4  6100 F936 5832          bsr       _tolower
000035B8  584F      5833          addq.w    #4,A7
000035BA  0C80 0000 5834          cmp.l     #120,D0
000035BE  0078      
000035C0  6604      5835          bne.s     vsscanf_83
000035C2  7678      5836          moveq     #120,D3
000035C4  6010      5837          bra.s     vsscanf_84
                    5838   vsscanf_83:
000035C6  53AE FFE4 5839          subq.l    #1,-28(A6)
000035CA  2F02      5840          move.l    D2,-(A7)
000035CC  2F05      5841          move.l    D5,-(A7)
000035CE  6100 FA44 5842          bsr       @vsscanf_scanputback
000035D2  504F      5843          addq.w    #8,A7
000035D4  766F      5844          moveq     #111,D3
                    5845   vsscanf_84:
000035D6  52AE FFE4 5846          addq.l    #1,-28(A6)
000035DA  6010      5847          bra.s     vsscanf_82
                    5848   vsscanf_81:
000035DC  53AE FFE4 5849          subq.l    #1,-28(A6)
000035E0  2F02      5850          move.l    D2,-(A7)
000035E2  2F05      5851          move.l    D5,-(A7)
000035E4  6100 FA2E 5852          bsr       @vsscanf_scanputback
000035E8  504F      5853          addq.w    #8,A7
000035EA  7664      5854          moveq     #100,D3
                    5855   vsscanf_82:
000035EC  0C83 0000 5856          cmp.l     #100,D3
000035F0  0064      
000035F2  671A      5857          beq.s     vsscanf_87
000035F4  0C83 0000 5858          cmp.l     #117,D3
000035F8  0075      
000035FA  6712      5859          beq.s     vsscanf_87
000035FC  0C83 0000 5860          cmp.l     #120,D3
00003600  0078      
00003602  670A      5861          beq.s     vsscanf_87
00003604  0C83 0000 5862          cmp.l     #111,D3
00003608  006F      
0000360A  6600 01A4 5863          bne       vsscanf_85
                    5864   vsscanf_87:
0000360E  486E FFE4 5865          pea       -28(A6)
00003612  2F05      5866          move.l    D5,-(A7)
00003614  6100 FA60 5867          bsr       @vsscanf_scanspace
00003618  504F      5868          addq.w    #8,A7
0000361A  2400      5869          move.l    D0,D2
0000361C  2D7C 0000 5870          move.l    #10,-4(A6)
00003620  000A FFFC 
00003624  0C83 0000 5871          cmp.l     #120,D3
00003628  0078      
0000362A  6608      5872          bne.s     vsscanf_88
0000362C  2D7C 0000 5873          move.l    #16,-4(A6)
00003630  0010 FFFC 
                    5874   vsscanf_88:
00003634  0C83 0000 5875          cmp.l     #111,D3
00003638  006F      
0000363A  6608      5876          bne.s     vsscanf_90
0000363C  2D7C 0000 5877          move.l    #8,-4(A6)
00003640  0008 FFFC 
                    5878   vsscanf_90:
00003644  4A86      5879          tst.l     D6
00003646  660A      5880          bne.s     vsscanf_92
00003648  206E 0010 5881          move.l    16(A6),A0
0000364C  58AE 0010 5882          addq.l    #4,16(A6)
00003650  2E10      5883          move.l    (A0),D7
                    5884   vsscanf_92:
00003652  42AE FFE0 5885          clr.l     -32(A6)
00003656  52AE FFE4 5886          addq.l    #1,-28(A6)
0000365A  0C83 0000 5887          cmp.l     #117,D3
0000365E  0075      
00003660  6720      5888          beq.s     vsscanf_94
00003662  0C82 0000 5889          cmp.l     #45,D2
00003666  002D      
00003668  6618      5890          bne.s     vsscanf_94
0000366A  2F05      5891          move.l    D5,-(A7)
0000366C  4E93      5892          jsr       (A3)
0000366E  584F      5893          addq.w    #4,A7
00003670  2400      5894          move.l    D0,D2
00003672  52AE FFE4 5895          addq.l    #1,-28(A6)
00003676  2D7C 0000 5896          move.l    #1,-32(A6)
0000367A  0001 FFE0 
0000367E  387C 0001 5897          move.w    #1,A4
                    5898   vsscanf_94:
00003682  3A7C 0000 5899          move.w    #0,A5
00003686  0C82 FFFF 5900          cmp.l     #-1,D2
0000368A  FFFF      
0000368C  660E      5901          bne.s     vsscanf_96
0000368E  4A84      5902          tst.l     D4
00003690  6704      5903          beq.s     vsscanf_98
00003692  2004      5904          move.l    D4,D0
00003694  6002      5905          bra.s     vsscanf_99
                    5906   vsscanf_98:
00003696  70FF      5907          moveq     #-1,D0
                    5908   vsscanf_99:
00003698  6000 019A 5909          bra       vsscanf_15
                    5910   vsscanf_96:
0000369C  200A      5911          move.l    A2,D0
0000369E  534A      5912          subq.w    #1,A2
000036A0  4A80      5913          tst.l     D0
000036A2  6700 0090 5914          beq       vsscanf_102
000036A6  0C83 0000 5915          cmp.l     #120,D3
000036AA  0078      
000036AC  6620      5916          bne.s     vsscanf_104
000036AE  2F02      5917          move.l    D2,-(A7)
000036B0  6100 F8C8 5918          bsr       _toupper
000036B4  584F      5919          addq.w    #4,A7
000036B6  0C80 0000 5920          cmp.l     #65,D0
000036BA  0041      
000036BC  6D10      5921          blt.s     vsscanf_104
000036BE  2F02      5922          move.l    D2,-(A7)
000036C0  6100 F8B8 5923          bsr       _toupper
000036C4  584F      5924          addq.w    #4,A7
000036C6  0C80 0000 5925          cmp.l     #70,D0
000036CA  0046      
000036CC  6F14      5926          ble.s     vsscanf_103
                    5927   vsscanf_104:
000036CE  2042      5928          move.l    D2,A0
000036D0  43F9 0000 5929          lea       __ctype,A1
000036D4  55AA      
000036D6  1030 9801 5930          move.b    1(A0,A1.L),D0
000036DA  C03C 0004 5931          and.b     #4,D0
000036DE  6700 0054 5932          beq       vsscanf_102
                    5933   vsscanf_103:
000036E2  2042      5934          move.l    D2,A0
000036E4  43F9 0000 5935          lea       __ctype,A1
000036E8  55AA      
000036EA  1030 9801 5936          move.b    1(A0,A1.L),D0
000036EE  C03C 0004 5937          and.b     #4,D0
000036F2  6614      5938          bne.s     vsscanf_105
000036F4  70F9      5939          moveq     #-7,D0
000036F6  2F00      5940          move.l    D0,-(A7)
000036F8  2F02      5941          move.l    D2,-(A7)
000036FA  6100 F87E 5942          bsr       _toupper
000036FE  584F      5943          addq.w    #4,A7
00003700  2200      5944          move.l    D0,D1
00003702  201F      5945          move.l    (A7)+,D0
00003704  D081      5946          add.l     D1,D0
00003706  2400      5947          move.l    D0,D2
                    5948   vsscanf_105:
00003708  2F0D      5949          move.l    A5,-(A7)
0000370A  2F2E FFFC 5950          move.l    -4(A6),-(A7)
0000370E  6100 0884 5951          bsr       LMUL
00003712  2017      5952          move.l    (A7),D0
00003714  504F      5953          addq.w    #8,A7
00003716  D082      5954          add.l     D2,D0
00003718  0480 0000 5955          sub.l     #48,D0
0000371C  0030      
0000371E  2A40      5956          move.l    D0,A5
00003720  2F05      5957          move.l    D5,-(A7)
00003722  4E93      5958          jsr       (A3)
00003724  584F      5959          addq.w    #4,A7
00003726  2400      5960          move.l    D0,D2
00003728  52AE FFE4 5961          addq.l    #1,-28(A6)
0000372C  387C 0001 5962          move.w    #1,A4
00003730  6000 FF6A 5963          bra       vsscanf_96
                    5964   vsscanf_102:
00003734  0C82 FFFF 5965          cmp.l     #-1,D2
00003738  FFFF      
0000373A  671A      5966          beq.s     vsscanf_107
0000373C  2F02      5967          move.l    D2,-(A7)
0000373E  2F05      5968          move.l    D5,-(A7)
00003740  6100 F8D2 5969          bsr       @vsscanf_scanputback
00003744  504F      5970          addq.w    #8,A7
00003746  53AE FFE4 5971          subq.l    #1,-28(A6)
0000374A  200C      5972          move.l    A4,D0
0000374C  6606      5973          bne.s     vsscanf_109
0000374E  2004      5974          move.l    D4,D0
00003750  6000 00E2 5975          bra       vsscanf_15
                    5976   vsscanf_109:
00003754  6012      5977          bra.s     vsscanf_111
                    5978   vsscanf_107:
00003756  200C      5979          move.l    A4,D0
00003758  660E      5980          bne.s     vsscanf_111
0000375A  4A84      5981          tst.l     D4
0000375C  6704      5982          beq.s     vsscanf_113
0000375E  2004      5983          move.l    D4,D0
00003760  6002      5984          bra.s     vsscanf_114
                    5985   vsscanf_113:
00003762  70FF      5986          moveq     #-1,D0
                    5987   vsscanf_114:
00003764  6000 00CE 5988          bra       vsscanf_15
                    5989   vsscanf_111:
00003768  4AAE FFE0 5990          tst.l     -32(A6)
0000376C  6706      5991          beq.s     vsscanf_115
0000376E  200D      5992          move.l    A5,D0
00003770  4480      5993          neg.l     D0
00003772  2A40      5994          move.l    D0,A5
                    5995   vsscanf_115:
00003774  4A86      5996          tst.l     D6
00003776  661E      5997          bne.s     vsscanf_117
00003778  4AAE FFE8 5998          tst.l     -24(A6)
0000377C  6706      5999          beq.s     vsscanf_119
0000377E  2047      6000          move.l    D7,A0
00003780  208D      6001          move.l    A5,(A0)
00003782  6010      6002          bra.s     vsscanf_122
                    6003   vsscanf_119:
00003784  4AAE FFEC 6004          tst.l     -20(A6)
00003788  6706      6005          beq.s     vsscanf_121
0000378A  2047      6006          move.l    D7,A0
0000378C  308D      6007          move.w    A5,(A0)
0000378E  6004      6008          bra.s     vsscanf_122
                    6009   vsscanf_121:
00003790  2047      6010          move.l    D7,A0
00003792  208D      6011          move.l    A5,(A0)
                    6012   vsscanf_122:
00003794  5284      6013          addq.l    #1,D4
                    6014   vsscanf_117:
00003796  0C82 FFFF 6015          cmp.l     #-1,D2
0000379A  FFFF      
0000379C  660E      6016          bne.s     vsscanf_123
0000379E  4A84      6017          tst.l     D4
000037A0  6704      6018          beq.s     vsscanf_125
000037A2  2004      6019          move.l    D4,D0
000037A4  6002      6020          bra.s     vsscanf_126
                    6021   vsscanf_125:
000037A6  70FF      6022          moveq     #-1,D0
                    6023   vsscanf_126:
000037A8  6000 008A 6024          bra       vsscanf_15
                    6025   vsscanf_123:
000037AC  6000 0080 6026          bra       vsscanf_139
                    6027   vsscanf_85:
000037B0  0C83 0000 6028          cmp.l     #37,D3
000037B4  0025      
000037B6  6600 0040 6029          bne       vsscanf_127
000037BA  2F05      6030          move.l    D5,-(A7)
000037BC  4E93      6031          jsr       (A3)
000037BE  584F      6032          addq.w    #4,A7
000037C0  2400      6033          move.l    D0,D2
000037C2  0C82 FFFF 6034          cmp.l     #-1,D2
000037C6  FFFF      
000037C8  660E      6035          bne.s     vsscanf_129
000037CA  4A84      6036          tst.l     D4
000037CC  6704      6037          beq.s     vsscanf_131
000037CE  2004      6038          move.l    D4,D0
000037D0  6002      6039          bra.s     vsscanf_132
                    6040   vsscanf_131:
000037D2  70FF      6041          moveq     #-1,D0
                    6042   vsscanf_132:
000037D4  6000 005E 6043          bra       vsscanf_15
                    6044   vsscanf_129:
000037D8  52AE FFE4 6045          addq.l    #1,-28(A6)
000037DC  B483      6046          cmp.l     D3,D2
000037DE  6714      6047          beq.s     vsscanf_133
000037E0  2F02      6048          move.l    D2,-(A7)
000037E2  2F05      6049          move.l    D5,-(A7)
000037E4  6100 F82E 6050          bsr       @vsscanf_scanputback
000037E8  504F      6051          addq.w    #8,A7
000037EA  53AE FFE4 6052          subq.l    #1,-28(A6)
000037EE  2004      6053          move.l    D4,D0
000037F0  6000 0042 6054          bra       vsscanf_15
                    6055   vsscanf_133:
000037F4  6000 0038 6056          bra       vsscanf_139
                    6057   vsscanf_127:
000037F8  2F05      6058          move.l    D5,-(A7)
000037FA  4E93      6059          jsr       (A3)
000037FC  584F      6060          addq.w    #4,A7
000037FE  2400      6061          move.l    D0,D2
00003800  52AE FFE4 6062          addq.l    #1,-28(A6)
00003804  0C82 FFFF 6063          cmp.l     #-1,D2
00003808  FFFF      
0000380A  660C      6064          bne.s     vsscanf_135
0000380C  4A84      6065          tst.l     D4
0000380E  6704      6066          beq.s     vsscanf_137
00003810  2004      6067          move.l    D4,D0
00003812  6002      6068          bra.s     vsscanf_138
                    6069   vsscanf_137:
00003814  70FF      6070          moveq     #-1,D0
                    6071   vsscanf_138:
00003816  601C      6072          bra.s     vsscanf_15
                    6073   vsscanf_135:
00003818  B483      6074          cmp.l     D3,D2
0000381A  6712      6075          beq.s     vsscanf_139
0000381C  2F02      6076          move.l    D2,-(A7)
0000381E  2F05      6077          move.l    D5,-(A7)
00003820  6100 F7F2 6078          bsr       @vsscanf_scanputback
00003824  504F      6079          addq.w    #8,A7
00003826  53AE FFE4 6080          subq.l    #1,-28(A6)
0000382A  2004      6081          move.l    D4,D0
0000382C  6006      6082          bra.s     vsscanf_15
                    6083   vsscanf_139:
0000382E  6000 FA44 6084          bra       vsscanf_3
                    6085   vsscanf_5:
00003832  2004      6086          move.l    D4,D0
                    6087   vsscanf_15:
00003834  4CDF 3CFC 6088          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003838  4E5E      6089          unlk      A6
0000383A  4E75      6090          rts
                    6091   _printf:
0000383C  4E56 FFFC 6092          link      A6,#-4
00003840  48E7 2000 6093          movem.l   D2,-(A7)
00003844  41EE 0008 6094          lea       8(A6),A0
00003848  5848      6095          addq.w    #4,A0
0000384A  2408      6096          move.l    A0,D2
0000384C  2F02      6097          move.l    D2,-(A7)
0000384E  2F2E 0008 6098          move.l    8(A6),-(A7)
00003852  42A7      6099          clr.l     -(A7)
00003854  6100 00CA 6100          bsr       _vsprintf
00003858  DEFC 000C 6101          add.w     #12,A7
0000385C  2D40 FFFC 6102          move.l    D0,-4(A6)
00003860  4282      6103          clr.l     D2
00003862  202E FFFC 6104          move.l    -4(A6),D0
00003866  4CDF 0004 6105          movem.l   (A7)+,D2
0000386A  4E5E      6106          unlk      A6
0000386C  4E75      6107          rts
                    6108   @vsprintf_copy:
0000386E  4E56 0000 6109          link      A6,#0
00003872  206E 0008 6110          move.l    8(A6),A0
00003876  4A90      6111          tst.l     (A0)
00003878  6710      6112          beq.s     @vsprintf_copy_1
0000387A  202E 000C 6113          move.l    12(A6),D0
0000387E  206E 0008 6114          move.l    8(A6),A0
00003882  2250      6115          move.l    (A0),A1
00003884  5290      6116          addq.l    #1,(A0)
00003886  1280      6117          move.b    D0,(A1)
00003888  600A      6118          bra.s     @vsprintf_copy_2
                    6119   @vsprintf_copy_1:
0000388A  2F2E 000C 6120          move.l    12(A6),-(A7)
0000388E  6100 F5F0 6121          bsr       _putch
00003892  584F      6122          addq.w    #4,A7
                    6123   @vsprintf_copy_2:
00003894  4E5E      6124          unlk      A6
00003896  4E75      6125          rts
                    6126   @vsprintf_getval:
00003898  4E56 0000 6127          link      A6,#0
0000389C  48E7 3000 6128          movem.l   D2/D3,-(A7)
000038A0  242E 0008 6129          move.l    8(A6),D2
000038A4  4283      6130          clr.l     D3
000038A6  2042      6131          move.l    D2,A0
000038A8  2050      6132          move.l    (A0),A0
000038AA  1010      6133          move.b    (A0),D0
000038AC  4880      6134          ext.w     D0
000038AE  48C0      6135          ext.l     D0
000038B0  0C80 0000 6136          cmp.l     #42,D0
000038B4  002A      
000038B6  6612      6137          bne.s     @vsprintf_getval_1
000038B8  206E 000C 6138          move.l    12(A6),A0
000038BC  2250      6139          move.l    (A0),A1
000038BE  5890      6140          addq.l    #4,(A0)
000038C0  2611      6141          move.l    (A1),D3
000038C2  2042      6142          move.l    D2,A0
000038C4  5290      6143          addq.l    #1,(A0)
000038C6  6000 004E 6144          bra       @vsprintf_getval_5
                    6145   @vsprintf_getval_1:
000038CA  2042      6146          move.l    D2,A0
000038CC  2050      6147          move.l    (A0),A0
000038CE  1010      6148          move.b    (A0),D0
000038D0  4880      6149          ext.w     D0
000038D2  48C0      6150          ext.l     D0
000038D4  0C80 0000 6151          cmp.l     #48,D0
000038D8  0030      
000038DA  6D00 003A 6152          blt       @vsprintf_getval_5
000038DE  2042      6153          move.l    D2,A0
000038E0  2050      6154          move.l    (A0),A0
000038E2  1010      6155          move.b    (A0),D0
000038E4  4880      6156          ext.w     D0
000038E6  48C0      6157          ext.l     D0
000038E8  0C80 0000 6158          cmp.l     #57,D0
000038EC  0039      
000038EE  6E26      6159          bgt.s     @vsprintf_getval_5
000038F0  2F03      6160          move.l    D3,-(A7)
000038F2  4878 000A 6161          pea       10
000038F6  6100 069C 6162          bsr       LMUL
000038FA  2017      6163          move.l    (A7),D0
000038FC  504F      6164          addq.w    #8,A7
000038FE  2042      6165          move.l    D2,A0
00003900  2250      6166          move.l    (A0),A1
00003902  5290      6167          addq.l    #1,(A0)
00003904  1211      6168          move.b    (A1),D1
00003906  4881      6169          ext.w     D1
00003908  48C1      6170          ext.l     D1
0000390A  D081      6171          add.l     D1,D0
0000390C  0480 0000 6172          sub.l     #48,D0
00003910  0030      
00003912  2600      6173          move.l    D0,D3
00003914  60B4      6174          bra       @vsprintf_getval_1
                    6175   @vsprintf_getval_5:
00003916  2003      6176          move.l    D3,D0
00003918  4CDF 000C 6177          movem.l   (A7)+,D2/D3
0000391C  4E5E      6178          unlk      A6
0000391E  4E75      6179          rts
                    6180   _vsprintf:
00003920  4E56 FFCC 6181          link      A6,#-52
00003924  48E7 3F3C 6182          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003928  45EE 0008 6183          lea       8(A6),A2
0000392C  47F8 386E 6184          lea       @vsprintf_copy,A3
00003930  49F9 0000 6185          lea       _ultoa,A4
00003934  419E      
00003936  4286      6186          clr.l     D6
                    6187   vsprintf_1:
00003938  206E 000C 6188          move.l    12(A6),A0
0000393C  4A10      6189          tst.b     (A0)
0000393E  6700 0624 6190          beq       vsprintf_3
00003942  206E 000C 6191          move.l    12(A6),A0
00003946  1010      6192          move.b    (A0),D0
00003948  4880      6193          ext.w     D0
0000394A  48C0      6194          ext.l     D0
0000394C  0C80 0000 6195          cmp.l     #37,D0
00003950  0025      
00003952  671C      6196          beq.s     vsprintf_4
00003954  206E 000C 6197          move.l    12(A6),A0
00003958  52AE 000C 6198          addq.l    #1,12(A6)
0000395C  1210      6199          move.b    (A0),D1
0000395E  4881      6200          ext.w     D1
00003960  48C1      6201          ext.l     D1
00003962  2F01      6202          move.l    D1,-(A7)
00003964  2F0A      6203          move.l    A2,-(A7)
00003966  4E93      6204          jsr       (A3)
00003968  504F      6205          addq.w    #8,A7
0000396A  5286      6206          addq.l    #1,D6
0000396C  6000 05F2 6207          bra       vsprintf_2
                    6208   vsprintf_4:
00003970  52AE 000C 6209          addq.l    #1,12(A6)
00003974  422E FFD3 6210          clr.b     -45(A6)
00003978  422E FFD2 6211          clr.b     -46(A6)
0000397C  422E FFD0 6212          clr.b     -48(A6)
00003980  422E FFCF 6213          clr.b     -49(A6)
00003984  422E FFCE 6214          clr.b     -50(A6)
00003988  422E FFCD 6215          clr.b     -51(A6)
0000398C  42AE FFFC 6216          clr.l     -4(A6)
00003990  7AFF      6217          moveq     #-1,D5
00003992  41EE FFDC 6218          lea       -36(A6),A0
00003996  2608      6219          move.l    A0,D3
00003998  2408      6220          move.l    A0,D2
                    6221   vsprintf_6:
0000399A  206E 000C 6222          move.l    12(A6),A0
0000399E  1010      6223          move.b    (A0),D0
000039A0  4880      6224          ext.w     D0
000039A2  48C0      6225          ext.l     D0
000039A4  0C80 0000 6226          cmp.l     #43,D0
000039A8  002B      
000039AA  6730      6227          beq.s     vsprintf_12
000039AC  6E18      6228          bgt.s     vsprintf_15
000039AE  0C80 0000 6229          cmp.l     #35,D0
000039B2  0023      
000039B4  6700 003E 6230          beq       vsprintf_14
000039B8  6E00 0046 6231          bgt       vsprintf_9
000039BC  0C80 0000 6232          cmp.l     #32,D0
000039C0  0020      
000039C2  6724      6233          beq.s     vsprintf_13
000039C4  603A      6234          bra.s     vsprintf_9
                    6235   vsprintf_15:
000039C6  0C80 0000 6236          cmp.l     #45,D0
000039CA  002D      
000039CC  6702      6237          beq.s     vsprintf_11
000039CE  6030      6238          bra.s     vsprintf_9
                    6239   vsprintf_11:
000039D0  1D7C 0001 6240          move.b    #1,-51(A6)
000039D4  FFCD      
000039D6  52AE 000C 6241          addq.l    #1,12(A6)
000039DA  6026      6242          bra.s     vsprintf_7
                    6243   vsprintf_12:
000039DC  1D7C 0001 6244          move.b    #1,-50(A6)
000039E0  FFCE      
000039E2  52AE 000C 6245          addq.l    #1,12(A6)
000039E6  601A      6246          bra.s     vsprintf_7
                    6247   vsprintf_13:
000039E8  1D7C 0001 6248          move.b    #1,-49(A6)
000039EC  FFCF      
000039EE  52AE 000C 6249          addq.l    #1,12(A6)
000039F2  600E      6250          bra.s     vsprintf_7
                    6251   vsprintf_14:
000039F4  1D7C 0001 6252          move.b    #1,-48(A6)
000039F8  FFD0      
000039FA  52AE 000C 6253          addq.l    #1,12(A6)
000039FE  6002      6254          bra.s     vsprintf_7
                    6255   vsprintf_9:
00003A00  6002      6256          bra.s     vsprintf_8
                    6257   vsprintf_7:
00003A02  6096      6258          bra       vsprintf_6
                    6259   vsprintf_8:
00003A04  206E 000C 6260          move.l    12(A6),A0
00003A08  1010      6261          move.b    (A0),D0
00003A0A  4880      6262          ext.w     D0
00003A0C  48C0      6263          ext.l     D0
00003A0E  0C80 0000 6264          cmp.l     #48,D0
00003A12  0030      
00003A14  660A      6265          bne.s     vsprintf_16
00003A16  52AE 000C 6266          addq.l    #1,12(A6)
00003A1A  1D7C 0001 6267          move.b    #1,-46(A6)
00003A1E  FFD2      
                    6268   vsprintf_16:
00003A20  486E 0010 6269          pea       16(A6)
00003A24  486E 000C 6270          pea       12(A6)
00003A28  6100 FE6E 6271          bsr       @vsprintf_getval
00003A2C  504F      6272          addq.w    #8,A7
00003A2E  2A40      6273          move.l    D0,A5
00003A30  206E 000C 6274          move.l    12(A6),A0
00003A34  1010      6275          move.b    (A0),D0
00003A36  4880      6276          ext.w     D0
00003A38  48C0      6277          ext.l     D0
00003A3A  0C80 0000 6278          cmp.l     #46,D0
00003A3E  002E      
00003A40  6614      6279          bne.s     vsprintf_18
00003A42  52AE 000C 6280          addq.l    #1,12(A6)
00003A46  486E 0010 6281          pea       16(A6)
00003A4A  486E 000C 6282          pea       12(A6)
00003A4E  6100 FE48 6283          bsr       @vsprintf_getval
00003A52  504F      6284          addq.w    #8,A7
00003A54  2A00      6285          move.l    D0,D5
                    6286   vsprintf_18:
00003A56  206E 000C 6287          move.l    12(A6),A0
00003A5A  1010      6288          move.b    (A0),D0
00003A5C  4880      6289          ext.w     D0
00003A5E  48C0      6290          ext.l     D0
00003A60  0C80 0000 6291          cmp.l     #108,D0
00003A64  006C      
00003A66  660A      6292          bne.s     vsprintf_20
00003A68  52AE 000C 6293          addq.l    #1,12(A6)
00003A6C  1D7C 0001 6294          move.b    #1,-45(A6)
00003A70  FFD3      
                    6295   vsprintf_20:
00003A72  206E 000C 6296          move.l    12(A6),A0
00003A76  1010      6297          move.b    (A0),D0
00003A78  4880      6298          ext.w     D0
00003A7A  48C0      6299          ext.l     D0
00003A7C  0C80 0000 6300          cmp.l     #111,D0
00003A80  006F      
00003A82  6700 00D4 6301          beq       vsprintf_27
00003A86  6E34      6302          bgt.s     vsprintf_33
00003A88  0C80 0000 6303          cmp.l     #100,D0
00003A8C  0064      
00003A8E  6700 0054 6304          beq       vsprintf_24
00003A92  6E1C      6305          bgt.s     vsprintf_34
00003A94  0C80 0000 6306          cmp.l     #99,D0
00003A98  0063      
00003A9A  6700 012C 6307          beq       vsprintf_30
00003A9E  6E00 016A 6308          bgt       vsprintf_22
00003AA2  0C80 0000 6309          cmp.l     #88,D0
00003AA6  0058      
00003AA8  6700 00E6 6310          beq       vsprintf_28
00003AAC  6000 015C 6311          bra       vsprintf_22
                    6312   vsprintf_34:
00003AB0  0C80 0000 6313          cmp.l     #105,D0
00003AB4  0069      
00003AB6  672C      6314          beq.s     vsprintf_24
00003AB8  6000 0150 6315          bra       vsprintf_22
                    6316   vsprintf_33:
00003ABC  0C80 0000 6317          cmp.l     #117,D0
00003AC0  0075      
00003AC2  6700 005C 6318          beq       vsprintf_26
00003AC6  6E0E      6319          bgt.s     vsprintf_35
00003AC8  0C80 0000 6320          cmp.l     #115,D0
00003ACC  0073      
00003ACE  6700 011C 6321          beq       vsprintf_31
00003AD2  6000 0136 6322          bra       vsprintf_22
                    6323   vsprintf_35:
00003AD6  0C80 0000 6324          cmp.l     #120,D0
00003ADA  0078      
00003ADC  6700 00B2 6325          beq       vsprintf_28
00003AE0  6000 0128 6326          bra       vsprintf_22
                    6327   vsprintf_24:
00003AE4  4A2E FFD3 6328          tst.b     -45(A6)
00003AE8  671A      6329          beq.s     vsprintf_36
00003AEA  4878 000A 6330          pea       10
00003AEE  2F03      6331          move.l    D3,-(A7)
00003AF0  206E 0010 6332          move.l    16(A6),A0
00003AF4  58AE 0010 6333          addq.l    #4,16(A6)
00003AF8  2F10      6334          move.l    (A0),-(A7)
00003AFA  6100 061E 6335          bsr       _ltoa
00003AFE  DEFC 000C 6336          add.w     #12,A7
00003B02  6018      6337          bra.s     vsprintf_37
                    6338   vsprintf_36:
00003B04  4878 000A 6339          pea       10
00003B08  2F03      6340          move.l    D3,-(A7)
00003B0A  206E 0010 6341          move.l    16(A6),A0
00003B0E  58AE 0010 6342          addq.l    #4,16(A6)
00003B12  2F10      6343          move.l    (A0),-(A7)
00003B14  6100 0604 6344          bsr       _ltoa
00003B18  DEFC 000C 6345          add.w     #12,A7
                    6346   vsprintf_37:
00003B1C  6000 00FA 6347          bra       vsprintf_23
                    6348   vsprintf_26:
00003B20  4A2E FFD3 6349          tst.b     -45(A6)
00003B24  6718      6350          beq.s     vsprintf_38
00003B26  4878 000A 6351          pea       10
00003B2A  2F03      6352          move.l    D3,-(A7)
00003B2C  206E 0010 6353          move.l    16(A6),A0
00003B30  58AE 0010 6354          addq.l    #4,16(A6)
00003B34  2F10      6355          move.l    (A0),-(A7)
00003B36  4E94      6356          jsr       (A4)
00003B38  DEFC 000C 6357          add.w     #12,A7
00003B3C  6016      6358          bra.s     vsprintf_39
                    6359   vsprintf_38:
00003B3E  4878 000A 6360          pea       10
00003B42  2F03      6361          move.l    D3,-(A7)
00003B44  206E 0010 6362          move.l    16(A6),A0
00003B48  58AE 0010 6363          addq.l    #4,16(A6)
00003B4C  2F10      6364          move.l    (A0),-(A7)
00003B4E  4E94      6365          jsr       (A4)
00003B50  DEFC 000C 6366          add.w     #12,A7
                    6367   vsprintf_39:
00003B54  6000 00C2 6368          bra       vsprintf_23
                    6369   vsprintf_27:
00003B58  4A2E FFD3 6370          tst.b     -45(A6)
00003B5C  6718      6371          beq.s     vsprintf_40
00003B5E  4878 0008 6372          pea       8
00003B62  2F03      6373          move.l    D3,-(A7)
00003B64  206E 0010 6374          move.l    16(A6),A0
00003B68  58AE 0010 6375          addq.l    #4,16(A6)
00003B6C  2F10      6376          move.l    (A0),-(A7)
00003B6E  4E94      6377          jsr       (A4)
00003B70  DEFC 000C 6378          add.w     #12,A7
00003B74  6016      6379          bra.s     vsprintf_41
                    6380   vsprintf_40:
00003B76  4878 0008 6381          pea       8
00003B7A  2F03      6382          move.l    D3,-(A7)
00003B7C  206E 0010 6383          move.l    16(A6),A0
00003B80  58AE 0010 6384          addq.l    #4,16(A6)
00003B84  2F10      6385          move.l    (A0),-(A7)
00003B86  4E94      6386          jsr       (A4)
00003B88  DEFC 000C 6387          add.w     #12,A7
                    6388   vsprintf_41:
00003B8C  6000 008A 6389          bra       vsprintf_23
                    6390   vsprintf_28:
00003B90  4A2E FFD3 6391          tst.b     -45(A6)
00003B94  6718      6392          beq.s     vsprintf_42
00003B96  4878 0010 6393          pea       16
00003B9A  2F03      6394          move.l    D3,-(A7)
00003B9C  206E 0010 6395          move.l    16(A6),A0
00003BA0  58AE 0010 6396          addq.l    #4,16(A6)
00003BA4  2F10      6397          move.l    (A0),-(A7)
00003BA6  4E94      6398          jsr       (A4)
00003BA8  DEFC 000C 6399          add.w     #12,A7
00003BAC  6016      6400          bra.s     vsprintf_43
                    6401   vsprintf_42:
00003BAE  4878 0010 6402          pea       16
00003BB2  2F03      6403          move.l    D3,-(A7)
00003BB4  206E 0010 6404          move.l    16(A6),A0
00003BB8  58AE 0010 6405          addq.l    #4,16(A6)
00003BBC  2F10      6406          move.l    (A0),-(A7)
00003BBE  4E94      6407          jsr       (A4)
00003BC0  DEFC 000C 6408          add.w     #12,A7
                    6409   vsprintf_43:
00003BC4  6000 0052 6410          bra       vsprintf_23
                    6411   vsprintf_30:
00003BC8  206E 0010 6412          move.l    16(A6),A0
00003BCC  58AE 0010 6413          addq.l    #4,16(A6)
00003BD0  2010      6414          move.l    (A0),D0
00003BD2  2042      6415          move.l    D2,A0
00003BD4  5282      6416          addq.l    #1,D2
00003BD6  1080      6417          move.b    D0,(A0)
00003BD8  2042      6418          move.l    D2,A0
00003BDA  4210      6419          clr.b     (A0)
00003BDC  200D      6420          move.l    A5,D0
00003BDE  6704      6421          beq.s     vsprintf_44
00003BE0  200D      6422          move.l    A5,D0
00003BE2  6002      6423          bra.s     vsprintf_45
                    6424   vsprintf_44:
00003BE4  7001      6425          moveq     #1,D0
                    6426   vsprintf_45:
00003BE6  2A00      6427          move.l    D0,D5
00003BE8  6000 002E 6428          bra       vsprintf_23
                    6429   vsprintf_31:
00003BEC  206E 0010 6430          move.l    16(A6),A0
00003BF0  58AE 0010 6431          addq.l    #4,16(A6)
00003BF4  2610      6432          move.l    (A0),D3
00003BF6  0C85 FFFF 6433          cmp.l     #-1,D5
00003BFA  FFFF      
00003BFC  660A      6434          bne.s     vsprintf_46
00003BFE  2F03      6435          move.l    D3,-(A7)
00003C00  6100 05FE 6436          bsr       _strlen
00003C04  584F      6437          addq.w    #4,A7
00003C06  2A00      6438          move.l    D0,D5
                    6439   vsprintf_46:
00003C08  600E      6440          bra.s     vsprintf_23
                    6441   vsprintf_22:
00003C0A  206E 000C 6442          move.l    12(A6),A0
00003C0E  2242      6443          move.l    D2,A1
00003C10  5282      6444          addq.l    #1,D2
00003C12  1290      6445          move.b    (A0),(A1)
00003C14  2042      6446          move.l    D2,A0
00003C16  4210      6447          clr.b     (A0)
                    6448   vsprintf_23:
00003C18  2F03      6449          move.l    D3,-(A7)
00003C1A  6100 05E4 6450          bsr       _strlen
00003C1E  584F      6451          addq.w    #4,A7
00003C20  1800      6452          move.b    D0,D4
00003C22  206E 000C 6453          move.l    12(A6),A0
00003C26  1010      6454          move.b    (A0),D0
00003C28  4880      6455          ext.w     D0
00003C2A  48C0      6456          ext.l     D0
00003C2C  0C80 0000 6457          cmp.l     #115,D0
00003C30  0073      
00003C32  6618      6458          bne.s     vsprintf_48
00003C34  0C85 0000 6459          cmp.l     #0,D5
00003C38  0000      
00003C3A  6D10      6460          blt.s     vsprintf_48
00003C3C  4884      6461          ext.w     D4
00003C3E  48C4      6462          ext.l     D4
00003C40  B885      6463          cmp.l     D5,D4
00003C42  6F04      6464          ble.s     vsprintf_50
00003C44  1005      6465          move.b    D5,D0
00003C46  6002      6466          bra.s     vsprintf_51
                    6467   vsprintf_50:
00003C48  1004      6468          move.b    D4,D0
                    6469   vsprintf_51:
00003C4A  1800      6470          move.b    D0,D4
                    6471   vsprintf_48:
00003C4C  206E 000C 6472          move.l    12(A6),A0
00003C50  1010      6473          move.b    (A0),D0
00003C52  4880      6474          ext.w     D0
00003C54  48C0      6475          ext.l     D0
00003C56  0C80 0000 6476          cmp.l     #88,D0
00003C5A  0058      
00003C5C  6600 0026 6477          bne       vsprintf_56
00003C60  41EE FFDC 6478          lea       -36(A6),A0
00003C64  2408      6479          move.l    A0,D2
                    6480   vsprintf_54:
00003C66  2042      6481          move.l    D2,A0
00003C68  4A10      6482          tst.b     (A0)
00003C6A  6718      6483          beq.s     vsprintf_56
00003C6C  2042      6484          move.l    D2,A0
00003C6E  1210      6485          move.b    (A0),D1
00003C70  4881      6486          ext.w     D1
00003C72  48C1      6487          ext.l     D1
00003C74  2F01      6488          move.l    D1,-(A7)
00003C76  6100 F302 6489          bsr       _toupper
00003C7A  584F      6490          addq.w    #4,A7
00003C7C  2042      6491          move.l    D2,A0
00003C7E  1080      6492          move.b    D0,(A0)
00003C80  5282      6493          addq.l    #1,D2
00003C82  60E2      6494          bra       vsprintf_54
                    6495   vsprintf_56:
00003C84  7E00      6496          moveq     #0,D7
00003C86  41EE FFD4 6497          lea       -44(A6),A0
00003C8A  2408      6498          move.l    A0,D2
00003C8C  206E 000C 6499          move.l    12(A6),A0
00003C90  1010      6500          move.b    (A0),D0
00003C92  4880      6501          ext.w     D0
00003C94  48C0      6502          ext.l     D0
00003C96  0C80 0000 6503          cmp.l     #100,D0
00003C9A  0064      
00003C9C  6714      6504          beq.s     vsprintf_59
00003C9E  206E 000C 6505          move.l    12(A6),A0
00003CA2  1010      6506          move.b    (A0),D0
00003CA4  4880      6507          ext.w     D0
00003CA6  48C0      6508          ext.l     D0
00003CA8  0C80 0000 6509          cmp.l     #105,D0
00003CAC  0069      
00003CAE  6600 0076 6510          bne       vsprintf_65
                    6511   vsprintf_59:
00003CB2  4A2E FFCE 6512          tst.b     -50(A6)
00003CB6  6612      6513          bne.s     vsprintf_62
00003CB8  2043      6514          move.l    D3,A0
00003CBA  1010      6515          move.b    (A0),D0
00003CBC  4880      6516          ext.w     D0
00003CBE  48C0      6517          ext.l     D0
00003CC0  0C80 0000 6518          cmp.l     #45,D0
00003CC4  002D      
00003CC6  6600 002E 6519          bne       vsprintf_60
                    6520   vsprintf_62:
00003CCA  2043      6521          move.l    D3,A0
00003CCC  1010      6522          move.b    (A0),D0
00003CCE  4880      6523          ext.w     D0
00003CD0  48C0      6524          ext.l     D0
00003CD2  0C80 0000 6525          cmp.l     #45,D0
00003CD6  002D      
00003CD8  660E      6526          bne.s     vsprintf_63
00003CDA  2043      6527          move.l    D3,A0
00003CDC  5283      6528          addq.l    #1,D3
00003CDE  2242      6529          move.l    D2,A1
00003CE0  5282      6530          addq.l    #1,D2
00003CE2  1290      6531          move.b    (A0),(A1)
00003CE4  5304      6532          subq.b    #1,D4
00003CE6  6008      6533          bra.s     vsprintf_64
                    6534   vsprintf_63:
00003CE8  2042      6535          move.l    D2,A0
00003CEA  5282      6536          addq.l    #1,D2
00003CEC  10BC 002B 6537          move.b    #43,(A0)
                    6538   vsprintf_64:
00003CF0  5287      6539          addq.l    #1,D7
00003CF2  6000 0032 6540          bra       vsprintf_65
                    6541   vsprintf_60:
00003CF6  4A2E FFCF 6542          tst.b     -49(A6)
00003CFA  6700 002A 6543          beq       vsprintf_65
00003CFE  2043      6544          move.l    D3,A0
00003D00  1010      6545          move.b    (A0),D0
00003D02  4880      6546          ext.w     D0
00003D04  48C0      6547          ext.l     D0
00003D06  0C80 0000 6548          cmp.l     #45,D0
00003D0A  002D      
00003D0C  660E      6549          bne.s     vsprintf_67
00003D0E  2043      6550          move.l    D3,A0
00003D10  5283      6551          addq.l    #1,D3
00003D12  2242      6552          move.l    D2,A1
00003D14  5282      6553          addq.l    #1,D2
00003D16  1290      6554          move.b    (A0),(A1)
00003D18  5304      6555          subq.b    #1,D4
00003D1A  6008      6556          bra.s     vsprintf_68
                    6557   vsprintf_67:
00003D1C  2042      6558          move.l    D2,A0
00003D1E  5282      6559          addq.l    #1,D2
00003D20  10BC 0020 6560          move.b    #32,(A0)
                    6561   vsprintf_68:
00003D24  5287      6562          addq.l    #1,D7
                    6563   vsprintf_65:
00003D26  4A2E FFD0 6564          tst.b     -48(A6)
00003D2A  6700 0066 6565          beq       vsprintf_77
00003D2E  206E 000C 6566          move.l    12(A6),A0
00003D32  1010      6567          move.b    (A0),D0
00003D34  4880      6568          ext.w     D0
00003D36  48C0      6569          ext.l     D0
00003D38  0C80 0000 6570          cmp.l     #111,D0
00003D3C  006F      
00003D3E  671A      6571          beq.s     vsprintf_73
00003D40  6E0C      6572          bgt.s     vsprintf_76
00003D42  0C80 0000 6573          cmp.l     #88,D0
00003D46  0058      
00003D48  6710      6574          beq.s     vsprintf_73
00003D4A  6000 0046 6575          bra       vsprintf_77
                    6576   vsprintf_76:
00003D4E  0C80 0000 6577          cmp.l     #120,D0
00003D52  0078      
00003D54  6704      6578          beq.s     vsprintf_73
00003D56  6000 003A 6579          bra       vsprintf_77
                    6580   vsprintf_73:
00003D5A  2042      6581          move.l    D2,A0
00003D5C  5282      6582          addq.l    #1,D2
00003D5E  10BC 0030 6583          move.b    #48,(A0)
00003D62  5287      6584          addq.l    #1,D7
00003D64  206E 000C 6585          move.l    12(A6),A0
00003D68  1010      6586          move.b    (A0),D0
00003D6A  4880      6587          ext.w     D0
00003D6C  48C0      6588          ext.l     D0
00003D6E  0C80 0000 6589          cmp.l     #120,D0
00003D72  0078      
00003D74  6712      6590          beq.s     vsprintf_79
00003D76  206E 000C 6591          move.l    12(A6),A0
00003D7A  1010      6592          move.b    (A0),D0
00003D7C  4880      6593          ext.w     D0
00003D7E  48C0      6594          ext.l     D0
00003D80  0C80 0000 6595          cmp.l     #88,D0
00003D84  0058      
00003D86  660A      6596          bne.s     vsprintf_77
                    6597   vsprintf_79:
00003D88  2042      6598          move.l    D2,A0
00003D8A  5282      6599          addq.l    #1,D2
00003D8C  10BC 0078 6600          move.b    #120,(A0)
00003D90  5287      6601          addq.l    #1,D7
                    6602   vsprintf_77:
00003D92  2042      6603          move.l    D2,A0
00003D94  4210      6604          clr.b     (A0)
00003D96  206E 000C 6605          move.l    12(A6),A0
00003D9A  1010      6606          move.b    (A0),D0
00003D9C  4880      6607          ext.w     D0
00003D9E  48C0      6608          ext.l     D0
00003DA0  0C80 0000 6609          cmp.l     #105,D0
00003DA4  0069      
00003DA6  6700 0076 6610          beq       vsprintf_82
00003DAA  6E42      6611          bgt.s     vsprintf_93
00003DAC  0C80 0000 6612          cmp.l     #99,D0
00003DB0  0063      
00003DB2  6700 0084 6613          beq       vsprintf_96
00003DB6  6E1C      6614          bgt.s     vsprintf_94
00003DB8  0C80 0000 6615          cmp.l     #88,D0
00003DBC  0058      
00003DBE  6700 005E 6616          beq       vsprintf_82
00003DC2  6E00 0184 6617          bgt       vsprintf_80
00003DC6  0C80 0000 6618          cmp.l     #69,D0
00003DCA  0045      
00003DCC  6700 0050 6619          beq       vsprintf_82
00003DD0  6000 0176 6620          bra       vsprintf_80
                    6621   vsprintf_94:
00003DD4  0C80 0000 6622          cmp.l     #101,D0
00003DD8  0065      
00003DDA  6700 0042 6623          beq       vsprintf_82
00003DDE  6E00 0168 6624          bgt       vsprintf_80
00003DE2  0C80 0000 6625          cmp.l     #100,D0
00003DE6  0064      
00003DE8  6734      6626          beq.s     vsprintf_82
00003DEA  6000 015C 6627          bra       vsprintf_80
                    6628   vsprintf_93:
00003DEE  0C80 0000 6629          cmp.l     #117,D0
00003DF2  0075      
00003DF4  6728      6630          beq.s     vsprintf_82
00003DF6  6E1A      6631          bgt.s     vsprintf_95
00003DF8  0C80 0000 6632          cmp.l     #115,D0
00003DFC  0073      
00003DFE  6700 0038 6633          beq       vsprintf_96
00003E02  6E00 0144 6634          bgt       vsprintf_80
00003E06  0C80 0000 6635          cmp.l     #111,D0
00003E0A  006F      
00003E0C  6710      6636          beq.s     vsprintf_82
00003E0E  6000 0138 6637          bra       vsprintf_80
                    6638   vsprintf_95:
00003E12  0C80 0000 6639          cmp.l     #120,D0
00003E16  0078      
00003E18  6704      6640          beq.s     vsprintf_82
00003E1A  6000 012C 6641          bra       vsprintf_80
                    6642   vsprintf_82:
00003E1E  4A2E FFD2 6643          tst.b     -46(A6)
00003E22  6714      6644          beq.s     vsprintf_96
00003E24  4A2E FFCD 6645          tst.b     -51(A6)
00003E28  660E      6646          bne.s     vsprintf_96
00003E2A  200D      6647          move.l    A5,D0
00003E2C  9087      6648          sub.l     D7,D0
00003E2E  4884      6649          ext.w     D4
00003E30  48C4      6650          ext.l     D4
00003E32  9084      6651          sub.l     D4,D0
00003E34  2D40 FFFC 6652          move.l    D0,-4(A6)
                    6653   vsprintf_96:
00003E38  202E FFFC 6654          move.l    -4(A6),D0
00003E3C  0C80 0000 6655          cmp.l     #0,D0
00003E40  0000      
00003E42  6C04      6656          bge.s     vsprintf_98
00003E44  42AE FFFC 6657          clr.l     -4(A6)
                    6658   vsprintf_98:
00003E48  4A2E FFCD 6659          tst.b     -51(A6)
00003E4C  6600 0030 6660          bne       vsprintf_104
00003E50  4884      6661          ext.w     D4
00003E52  48C4      6662          ext.l     D4
00003E54  2004      6663          move.l    D4,D0
00003E56  D0AE FFFC 6664          add.l     -4(A6),D0
00003E5A  D087      6665          add.l     D7,D0
00003E5C  1D40 FFD1 6666          move.b    D0,-47(A6)
                    6667   vsprintf_102:
00003E60  102E FFD1 6668          move.b    -47(A6),D0
00003E64  4880      6669          ext.w     D0
00003E66  48C0      6670          ext.l     D0
00003E68  220D      6671          move.l    A5,D1
00003E6A  534D      6672          subq.w    #1,A5
00003E6C  B081      6673          cmp.l     D1,D0
00003E6E  6C0E      6674          bge.s     vsprintf_104
00003E70  4878 0020 6675          pea       32
00003E74  2F0A      6676          move.l    A2,-(A7)
00003E76  4E93      6677          jsr       (A3)
00003E78  504F      6678          addq.w    #8,A7
00003E7A  5286      6679          addq.l    #1,D6
00003E7C  60E2      6680          bra       vsprintf_102
                    6681   vsprintf_104:
00003E7E  41EE FFD4 6682          lea       -44(A6),A0
00003E82  2408      6683          move.l    A0,D2
                    6684   vsprintf_105:
00003E84  2042      6685          move.l    D2,A0
00003E86  4A10      6686          tst.b     (A0)
00003E88  6716      6687          beq.s     vsprintf_107
00003E8A  2042      6688          move.l    D2,A0
00003E8C  5282      6689          addq.l    #1,D2
00003E8E  1210      6690          move.b    (A0),D1
00003E90  4881      6691          ext.w     D1
00003E92  48C1      6692          ext.l     D1
00003E94  2F01      6693          move.l    D1,-(A7)
00003E96  2F0A      6694          move.l    A2,-(A7)
00003E98  4E93      6695          jsr       (A3)
00003E9A  504F      6696          addq.w    #8,A7
00003E9C  5286      6697          addq.l    #1,D6
00003E9E  60E4      6698          bra       vsprintf_105
                    6699   vsprintf_107:
00003EA0  202E FFFC 6700          move.l    -4(A6),D0
00003EA4  1D40 FFD1 6701          move.b    D0,-47(A6)
                    6702   vsprintf_108:
00003EA8  102E FFD1 6703          move.b    -47(A6),D0
00003EAC  532E FFD1 6704          subq.b    #1,-47(A6)
00003EB0  4A00      6705          tst.b     D0
00003EB2  670E      6706          beq.s     vsprintf_110
00003EB4  4878 0030 6707          pea       48
00003EB8  2F0A      6708          move.l    A2,-(A7)
00003EBA  4E93      6709          jsr       (A3)
00003EBC  504F      6710          addq.w    #8,A7
00003EBE  5286      6711          addq.l    #1,D6
00003EC0  60E6      6712          bra       vsprintf_108
                    6713   vsprintf_110:
00003EC2  2043      6714          move.l    D3,A0
00003EC4  4A10      6715          tst.b     (A0)
00003EC6  6700 0048 6716          beq       vsprintf_113
00003ECA  206E 000C 6717          move.l    12(A6),A0
00003ECE  1010      6718          move.b    (A0),D0
00003ED0  4880      6719          ext.w     D0
00003ED2  48C0      6720          ext.l     D0
00003ED4  0C80 0000 6721          cmp.l     #115,D0
00003ED8  0073      
00003EDA  670C      6722          beq.s     vsprintf_116
00003EDC  6E18      6723          bgt.s     vsprintf_119
00003EDE  0C80 0000 6724          cmp.l     #99,D0
00003EE2  0063      
00003EE4  6702      6725          beq.s     vsprintf_116
00003EE6  600E      6726          bra.s     vsprintf_119
                    6727   vsprintf_116:
00003EE8  2005      6728          move.l    D5,D0
00003EEA  5385      6729          subq.l    #1,D5
00003EEC  0C80 0000 6730          cmp.l     #0,D0
00003EF0  0000      
00003EF2  6E02      6731          bgt.s     vsprintf_119
00003EF4  6016      6732          bra.s     vsprintf_115
                    6733   vsprintf_119:
00003EF6  2043      6734          move.l    D3,A0
00003EF8  5283      6735          addq.l    #1,D3
00003EFA  1210      6736          move.b    (A0),D1
00003EFC  4881      6737          ext.w     D1
00003EFE  48C1      6738          ext.l     D1
00003F00  2F01      6739          move.l    D1,-(A7)
00003F02  2F0A      6740          move.l    A2,-(A7)
00003F04  4E93      6741          jsr       (A3)
00003F06  504F      6742          addq.w    #8,A7
00003F08  5286      6743          addq.l    #1,D6
00003F0A  6002      6744          bra.s     vsprintf_112
                    6745   vsprintf_115:
00003F0C  6002      6746          bra.s     vsprintf_113
                    6747   vsprintf_112:
00003F0E  60B2      6748          bra       vsprintf_110
                    6749   vsprintf_113:
00003F10  4A2E FFCD 6750          tst.b     -51(A6)
00003F14  6700 0030 6751          beq       vsprintf_125
00003F18  4884      6752          ext.w     D4
00003F1A  48C4      6753          ext.l     D4
00003F1C  2004      6754          move.l    D4,D0
00003F1E  D0AE FFFC 6755          add.l     -4(A6),D0
00003F22  D087      6756          add.l     D7,D0
00003F24  1D40 FFD1 6757          move.b    D0,-47(A6)
                    6758   vsprintf_123:
00003F28  102E FFD1 6759          move.b    -47(A6),D0
00003F2C  4880      6760          ext.w     D0
00003F2E  48C0      6761          ext.l     D0
00003F30  220D      6762          move.l    A5,D1
00003F32  534D      6763          subq.w    #1,A5
00003F34  B081      6764          cmp.l     D1,D0
00003F36  6C0E      6765          bge.s     vsprintf_125
00003F38  4878 0020 6766          pea       32
00003F3C  2F0A      6767          move.l    A2,-(A7)
00003F3E  4E93      6768          jsr       (A3)
00003F40  504F      6769          addq.w    #8,A7
00003F42  5386      6770          subq.l    #1,D6
00003F44  60E2      6771          bra       vsprintf_123
                    6772   vsprintf_125:
00003F46  6014      6773          bra.s     vsprintf_81
                    6774   vsprintf_80:
00003F48  206E 000C 6775          move.l    12(A6),A0
00003F4C  1210      6776          move.b    (A0),D1
00003F4E  4881      6777          ext.w     D1
00003F50  48C1      6778          ext.l     D1
00003F52  2F01      6779          move.l    D1,-(A7)
00003F54  2F0A      6780          move.l    A2,-(A7)
00003F56  4E93      6781          jsr       (A3)
00003F58  504F      6782          addq.w    #8,A7
00003F5A  5286      6783          addq.l    #1,D6
                    6784   vsprintf_81:
00003F5C  52AE 000C 6785          addq.l    #1,12(A6)
                    6786   vsprintf_2:
00003F60  6000 F9D6 6787          bra       vsprintf_1
                    6788   vsprintf_3:
00003F64  4A92      6789          tst.l     (A2)
00003F66  6710      6790          beq.s     vsprintf_126
00003F68  4201      6791          clr.b     D1
00003F6A  C2BC 0000 6792          and.l     #255,D1
00003F6E  00FF      
00003F70  2F01      6793          move.l    D1,-(A7)
00003F72  2F0A      6794          move.l    A2,-(A7)
00003F74  4E93      6795          jsr       (A3)
00003F76  504F      6796          addq.w    #8,A7
                    6797   vsprintf_126:
00003F78  2006      6798          move.l    D6,D0
00003F7A  4CDF 3CFC 6799          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003F7E  4E5E      6800          unlk      A6
00003F80  4E75      6801          rts
                    6802   ULMUL:
00003F82  4E56 0000 6803          link    A6,#0
00003F86  48E7 C000 6804          movem.l D0/D1,-(A7)
00003F8A  222E 0008 6805          move.l  8(A6),D1
00003F8E  202E 000C 6806          move.l  12(A6),D0
00003F92  602C      6807          bra.s   lmul_3
                    6808   LMUL:
00003F94  4E56 0000 6809          link    A6,#0
00003F98  48E7 C000 6810          movem.l D0/D1,-(A7)
00003F9C  222E 0008 6811          move.l  8(A6),D1
00003FA0  202E 000C 6812          move.l  12(A6),D0
00003FA4  4A80      6813          tst.l   D0
00003FA6  6A0A      6814          bpl.s   lmul_1
00003FA8  4480      6815          neg.l   D0
00003FAA  4A81      6816          tst.l   D1
00003FAC  6A0A      6817          bpl.s   lmul_2
00003FAE  4481      6818          neg.l   D1
00003FB0  600E      6819          bra.s   lmul_3
                    6820   lmul_1:
00003FB2  4A81      6821          tst.l   D1
00003FB4  6A0A      6822          bpl.s   lmul_3
00003FB6  4481      6823          neg.l   D1
                    6824   lmul_2:
00003FB8  6114      6825          bsr.s   domul
00003FBA  4481      6826          neg.l   D1
00003FBC  4080      6827          negx.l  D0
00003FBE  6002      6828          bra.s   lmul_4
                    6829   lmul_3:
00003FC0  610C      6830          bsr.s   domul
                    6831   lmul_4:
00003FC2  2D41 0008 6832          move.l  D1,8(A6)
00003FC6  4CDF 0003 6833          movem.l (A7)+,D0/D1
00003FCA  4E5E      6834          unlk    A6
00003FCC  4E75      6835          rts
                    6836   domul:
00003FCE  0C81 0000 6837          cmpi.l  #$FFFF,D1
00003FD2  FFFF      
00003FD4  620C      6838          bhi.s   domul_1
00003FD6  0C80 0000 6839          cmpi.l  #$FFFF,D0
00003FDA  FFFF      
00003FDC  620E      6840          bhi.s   domul_2
00003FDE  C2C0      6841          mulu    D0,D1
00003FE0  4E75      6842          rts
                    6843   domul_1:
00003FE2  0C80 0000 6844          cmpi.l  #$FFFF,D0
00003FE6  FFFF      
00003FE8  6218      6845          bhi.s   domul_4
00003FEA  6002      6846          bra.s   domul_3
                    6847   domul_2
00003FEC  C141      6848          exg     D0,D1
                    6849   domul_3:
00003FEE  2F02      6850          move.l  D2,-(A7)
00003FF0  2401      6851          move.l  D1,D2
00003FF2  4842      6852          swap    D2
00003FF4  C2C0      6853          mulu    D0,D1
00003FF6  C4C0      6854          mulu    D0,D2
00003FF8  4842      6855          swap    D2
00003FFA  4242      6856          clr.w   D2
00003FFC  D282      6857          add.l   D2,D1
00003FFE  241F      6858          move.l  (A7)+,D2
00004000  4E75      6859          rts
                    6860   domul_4:
00004002  48E7 3000 6861          movem.l D2/D3,-(A7)
00004006  2401      6862          move.l  D1,D2
00004008  2601      6863          move.l  D1,D3
0000400A  C2C0      6864          mulu    D0,D1
0000400C  4842      6865          swap    D2
0000400E  C4C0      6866          mulu    D0,D2
00004010  4840      6867          swap    D0
00004012  C6C0      6868          mulu    D0,D3
00004014  D483      6869          add.l   D3,D2
00004016  4842      6870          swap    D2
00004018  4242      6871          clr.w   D2
0000401A  D282      6872          add.l   D2,D1
0000401C  4CDF 000C 6873          movem.l (A7)+,D2/D3
00004020  4E75      6874          rts
                    6875   _gets:
00004022  4E56 0000 6876          link      A6,#0
00004026  48E7 3820 6877          movem.l   D2/D3/D4/A2,-(A7)
0000402A  45F8 2E80 6878          lea       _putch,A2
0000402E  282E 0008 6879          move.l    8(A6),D4
00004032  2404      6880          move.l    D4,D2
                    6881   gets_1:
00004034  6100 EE7A 6882          bsr       _getch
00004038  2600      6883          move.l    D0,D3
0000403A  0C80 0000 6884          cmp.l     #10,D0
0000403E  000A      
00004040  6700 003C 6885          beq       gets_3
00004044  0C83 0000 6886          cmp.l     #8,D3
00004048  0008      
0000404A  6712      6887          beq.s     gets_4
0000404C  2042      6888          move.l    D2,A0
0000404E  5282      6889          addq.l    #1,D2
00004050  1083      6890          move.b    D3,(A0)
00004052  4883      6891          ext.w     D3
00004054  48C3      6892          ext.l     D3
00004056  2F03      6893          move.l    D3,-(A7)
00004058  4E92      6894          jsr       (A2)
0000405A  584F      6895          addq.w    #4,A7
0000405C  601E      6896          bra.s     gets_6
                    6897   gets_4:
0000405E  B484      6898          cmp.l     D4,D2
00004060  631A      6899          bls.s     gets_6
00004062  4878 0008 6900          pea       8
00004066  4E92      6901          jsr       (A2)
00004068  584F      6902          addq.w    #4,A7
0000406A  4878 0020 6903          pea       32
0000406E  4E92      6904          jsr       (A2)
00004070  584F      6905          addq.w    #4,A7
00004072  4878 0008 6906          pea       8
00004076  4E92      6907          jsr       (A2)
00004078  584F      6908          addq.w    #4,A7
0000407A  5382      6909          subq.l    #1,D2
                    6910   gets_6:
0000407C  60B6      6911          bra       gets_1
                    6912   gets_3:
0000407E  4878 000A 6913          pea       10
00004082  4E92      6914          jsr       (A2)
00004084  584F      6915          addq.w    #4,A7
00004086  2042      6916          move.l    D2,A0
00004088  4210      6917          clr.b     (A0)
0000408A  2004      6918          move.l    D4,D0
0000408C  4CDF 041C 6919          movem.l   (A7)+,D2/D3/D4/A2
00004090  4E5E      6920          unlk      A6
00004092  4E75      6921          rts
                    6922   _ungetch:
00004094  4E56 0000 6923          link      A6,#0
00004098  23EE 0008 6924          move.l    8(A6),__ungetbuf
0000409C  0B00 00C0 
000040A0  202E 0008 6925          move.l    8(A6),D0
000040A4  4E5E      6926          unlk      A6
000040A6  4E75      6927          rts
                    6928   @itoa_convert:
000040A8  4E56 0000 6929          link      A6,#0
000040AC  48E7 3C00 6930          movem.l   D2/D3/D4/D5,-(A7)
000040B0  242E 0008 6931          move.l    8(A6),D2
000040B4  262E 0010 6932          move.l    16(A6),D3
000040B8  2A2E 000C 6933          move.l    12(A6),D5
000040BC  2F05      6934          move.l    D5,-(A7)
000040BE  2F03      6935          move.l    D3,-(A7)
000040C0  6100 ECE0 6936          bsr       ULDIV
000040C4  202F 0004 6937          move.l    4(A7),D0
000040C8  504F      6938          addq.w    #8,A7
000040CA  2800      6939          move.l    D0,D4
000040CC  BA83      6940          cmp.l     D3,D5
000040CE  651A      6941          blo.s     @itoa_convert_1
000040D0  2F03      6942          move.l    D3,-(A7)
000040D2  2F05      6943          move.l    D5,-(A7)
000040D4  2F03      6944          move.l    D3,-(A7)
000040D6  6100 ECCA 6945          bsr       ULDIV
000040DA  2217      6946          move.l    (A7),D1
000040DC  504F      6947          addq.w    #8,A7
000040DE  2F01      6948          move.l    D1,-(A7)
000040E0  2F02      6949          move.l    D2,-(A7)
000040E2  61C4      6950          bsr       @itoa_convert
000040E4  DEFC 000C 6951          add.w     #12,A7
000040E8  2400      6952          move.l    D0,D2
                    6953   @itoa_convert_1:
000040EA  0C84 0000 6954          cmp.l     #9,D4
000040EE  0009      
000040F0  6E0A      6955          bgt.s     @itoa_convert_3
000040F2  2004      6956          move.l    D4,D0
000040F4  0680 0000 6957          add.l     #48,D0
000040F8  0030      
000040FA  600E      6958          bra.s     @itoa_convert_4
                    6959   @itoa_convert_3:
000040FC  2004      6960          move.l    D4,D0
000040FE  0680 0000 6961          add.l     #97,D0
00004102  0061      
00004104  0480 0000 6962          sub.l     #10,D0
00004108  000A      
                    6963   @itoa_convert_4:
0000410A  2042      6964          move.l    D2,A0
0000410C  1080      6965          move.b    D0,(A0)
0000410E  2002      6966          move.l    D2,D0
00004110  5280      6967          addq.l    #1,D0
00004112  4CDF 003C 6968          movem.l   (A7)+,D2/D3/D4/D5
00004116  4E5E      6969          unlk      A6
00004118  4E75      6970          rts
                    6971   _ltoa:
0000411A  4E56 0000 6972          link      A6,#0
0000411E  48E7 3C00 6973          movem.l   D2/D3/D4/D5,-(A7)
00004122  242E 0008 6974          move.l    8(A6),D2
00004126  262E 000C 6975          move.l    12(A6),D3
0000412A  2A2E 0010 6976          move.l    16(A6),D5
0000412E  2803      6977          move.l    D3,D4
00004130  0C85 0000 6978          cmp.l     #2,D5
00004134  0002      
00004136  6D08      6979          blt.s     ltoa_3
00004138  0C85 0000 6980          cmp.l     #36,D5
0000413C  0024      
0000413E  6F06      6981          ble.s     ltoa_1
                    6982   ltoa_3:
00004140  2003      6983          move.l    D3,D0
00004142  6000 0052 6984          bra       ltoa_4
                    6985   ltoa_1:
00004146  0C85 0000 6986          cmp.l     #10,D5
0000414A  000A      
0000414C  6600 0032 6987          bne       ltoa_5
00004150  0C82 0000 6988          cmp.l     #0,D2
00004154  0000      
00004156  6C28      6989          bge.s     ltoa_5
00004158  2002      6990          move.l    D2,D0
0000415A  4480      6991          neg.l     D0
0000415C  2400      6992          move.l    D0,D2
0000415E  0C82 0000 6993          cmp.l     #0,D2
00004162  0000      
00004164  6C12      6994          bge.s     ltoa_7
00004166  4879 0000 6995          pea       @itoa_1
0000416A  56AC      
0000416C  2F03      6996          move.l    D3,-(A7)
0000416E  6100 EC22 6997          bsr       _strcpy
00004172  504F      6998          addq.w    #8,A7
00004174  2003      6999          move.l    D3,D0
00004176  601E      7000          bra.s     ltoa_4
                    7001   ltoa_7:
00004178  2044      7002          move.l    D4,A0
0000417A  5284      7003          addq.l    #1,D4
0000417C  10BC 002D 7004          move.b    #45,(A0)
                    7005   ltoa_5:
00004180  2F05      7006          move.l    D5,-(A7)
00004182  2F02      7007          move.l    D2,-(A7)
00004184  2F04      7008          move.l    D4,-(A7)
00004186  6100 FF20 7009          bsr       @itoa_convert
0000418A  DEFC 000C 7010          add.w     #12,A7
0000418E  2800      7011          move.l    D0,D4
00004190  2044      7012          move.l    D4,A0
00004192  4210      7013          clr.b     (A0)
00004194  2003      7014          move.l    D3,D0
                    7015   ltoa_4:
00004196  4CDF 003C 7016          movem.l   (A7)+,D2/D3/D4/D5
0000419A  4E5E      7017          unlk      A6
0000419C  4E75      7018          rts
                    7019   _ultoa:
0000419E  4E56 0000 7020          link      A6,#0
000041A2  48E7 3800 7021          movem.l   D2/D3/D4,-(A7)
000041A6  262E 0010 7022          move.l    16(A6),D3
000041AA  282E 000C 7023          move.l    12(A6),D4
000041AE  2404      7024          move.l    D4,D2
000041B0  0C83 0000 7025          cmp.l     #2,D3
000041B4  0002      
000041B6  6D08      7026          blt.s     ultoa_3
000041B8  0C83 0000 7027          cmp.l     #36,D3
000041BC  0024      
000041BE  6F04      7028          ble.s     ultoa_1
                    7029   ultoa_3:
000041C0  2004      7030          move.l    D4,D0
000041C2  6018      7031          bra.s     ultoa_4
                    7032   ultoa_1:
000041C4  2F03      7033          move.l    D3,-(A7)
000041C6  2F2E 0008 7034          move.l    8(A6),-(A7)
000041CA  2F02      7035          move.l    D2,-(A7)
000041CC  6100 FEDA 7036          bsr       @itoa_convert
000041D0  DEFC 000C 7037          add.w     #12,A7
000041D4  2400      7038          move.l    D0,D2
000041D6  2042      7039          move.l    D2,A0
000041D8  4210      7040          clr.b     (A0)
000041DA  2004      7041          move.l    D4,D0
                    7042   ultoa_4:
000041DC  4CDF 001C 7043          movem.l   (A7)+,D2/D3/D4
000041E0  4E5E      7044          unlk      A6
000041E2  4E75      7045          rts
                    7046   _itoa:
000041E4  4E56 0000 7047          link      A6,#0
000041E8  2F2E 0010 7048          move.l    16(A6),-(A7)
000041EC  2F2E 000C 7049          move.l    12(A6),-(A7)
000041F0  2F2E 0008 7050          move.l    8(A6),-(A7)
000041F4  6100 FF24 7051          bsr       _ltoa
000041F8  DEFC 000C 7052          add.w     #12,A7
000041FC  4E5E      7053          unlk      A6
000041FE  4E75      7054          rts
                    7055   _strlen:
00004200  206F 0004 7056          move.l    (4,A7),A0
00004204  2248      7057          move.l    A0,A1
                    7058   strlen_1:
00004206  4A19      7059          tst.b     (A1)+
00004208  66FC      7060          bne       strlen_1
0000420A  2009      7061          move.l    A1,D0
0000420C  9088      7062          sub.l     A0,D0
0000420E  5380      7063          subq.l    #1,D0
00004210  4E75      7064          rts
                    7065          section   const
                    7066   
                    7067   @m68kde~1_1:
00004212  0D0A 00   7068          dc.b      13,10,0
                    7069   @m68kde~1_2:
00004216  0D53 7769 7070          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
0000421A  7463 6865 
0000421E  7320 5357 
00004222  5B        
00004223  372D 305D 7071          dc.b      55,45,48,93,32,61,32,0
00004227  203D 2000 
                    7072   @m68kde~1_3:
0000422C  3000      7073          dc.b      48,0
                    7074   @m68kde~1_4:
0000422E  3100      7075          dc.b      49,0
                    7076   @m68kde~1_5:
00004230  0D0A 4475 7077          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004234  6D70 204D 
00004238  656D 6F72 
0000423C  79        
0000423D  2042 6C6F 7078          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004241  636B 3A20 
00004245  3C45 5343 
00004249  3E20      
0000424B  746F 2041 7079          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
0000424F  626F 7274 
00004253  2C20 3C53 
00004257  50        
00004258  4143 453E 7080          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
0000425C  2074 6F20 
00004260  436F 6E74 
00004264  69        
00004265  6E75 6500 7081          dc.b      110,117,101,0
                    7082   @m68kde~1_6:
0000426A  0D0A 456E 7083          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
0000426E  7465 7220 
00004272  5374 6172 
00004276  74        
00004277  2041 6464 7084          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000427B  7265 7373 
0000427F  3A20 00   
                    7085   @m68kde~1_7:
00004282  0D0A 2530 7086          dc.b      13,10,37,48,56,120,32,0
00004286  3878 2000 
                    7087   @m68kde~1_8:
0000428A  2530 3258 7088          dc.b      37,48,50,88,0
0000428E  00        
                    7089   @m68kde~1_9:
00004290  2020 00   7090          dc.b      32,32,0
                    7091   @m68kde~1_10:
00004294  0D0A 4669 7092          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004298  6C6C 204D 
0000429C  656D 6F72 
000042A0  79        
000042A1  2042 6C6F 7093          dc.b      32,66,108,111,99,107,0
000042A5  636B 00   
                    7094   @m68kde~1_11:
000042A8  0D0A 456E 7095          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000042AC  7465 7220 
000042B0  456E 6420 
000042B4  41        
000042B5  6464 7265 7096          dc.b      100,100,114,101,115,115,58,32,0
000042B9  7373 3A20 
000042BD  00        
                    7097   @m68kde~1_12:
000042BE  0D0A 456E 7098          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000042C2  7465 7220 
000042C6  4669 6C6C 
000042CA  20        
000042CB  4461 7461 7099          dc.b      68,97,116,97,58,32,0
000042CF  3A20 00   
                    7100   @m68kde~1_13:
000042D2  0D0A 4669 7101          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000042D6  6C6C 696E 
000042DA  6720 4164 
000042DE  64        
000042DF  7265 7373 7102          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000042E3  6573 205B 
000042E7  2425 3038 
000042EB  58        
000042EC  202D 2024 7103          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000042F0  2530 3858 
000042F4  5D20 7769 
000042F8  7468      
000042FA  2024 2530 7104          dc.b      32,36,37,48,50,88,0
000042FE  3258 00   
                    7105   @m68kde~1_14:
00004302  0D0A 5573 7106          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00004306  6520 4879 
0000430A  7065 7254 
0000430E  65        
0000430F  726D 696E 7107          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00004313  616C 2074 
00004317  6F20 5365 
0000431B  6E64 2054 7108          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
0000431F  6578 7420 
00004323  4669 6C65 
00004327  2028 2E68 7109          dc.b      32,40,46,104,101,120,41,13,10,0
0000432B  6578 290D 
0000432F  0A00      
                    7110   @m68kde~1_15:
00004332  0D0A 4C6F 7111          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004336  6164 2046 
0000433A  6169 6C65 
0000433E  64        
0000433F  2061 7420 7112          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00004343  4164 6472 
00004347  6573 7320 
0000434B  3D        
0000434C  205B 2425 7113          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004350  3038 585D 
00004354  0D0A 00   
                    7114   @m68kde~1_16:
00004358  0D0A 5375 7115          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
0000435C  6363 6573 
00004360  733A 2044 
00004364  6F        
00004365  776E 6C6F 7116          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004369  6164 6564 
0000436D  2025 6420 
00004371  6279 7465 7117          dc.b      98,121,116,101,115,13,10,0
00004375  730D 0A00 
                    7118   @m68kde~1_17:
0000437A  0D0A 4578 7119          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
0000437E  616D 696E 
00004382  6520 616E 
00004386  64        
00004387  2043 6861 7120          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
0000438B  6E67 6520 
0000438F  4D65 6D6F 
00004393  72        
00004394  7900      7121          dc.b      121,0
                    7122   @m68kde~1_18:
00004396  0D0A 3C45 7123          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
0000439A  5343 3E20 
0000439E  746F 2053 
000043A2  746F      
000043A4  702C 203C 7124          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000043A8  5350 4143 
000043AC  453E 2074 
000043B0  6F20      
000043B2  4164 7661 7125          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000043B6  6E63 652C 
000043BA  2027 2D27 
000043BE  2074      
000043C0  6F20 476F 7126          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000043C4  2042 6163 
000043C8  6B2C 203C 
000043CC  4441      
000043CE  5441 3E20 7127          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000043D2  746F 2063 
000043D6  6861 6E67 
000043DA  65        
000043DB  00        7128          dc.b      0
                    7129   @m68kde~1_19:
000043DC  0D0A 456E 7130          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000043E0  7465 7220 
000043E4  4164 6472 
000043E8  65        
000043E9  7373 3A20 7131          dc.b      115,115,58,32,0
000043ED  00        
                    7132   @m68kde~1_20:
000043EE  0D0A 5B25 7133          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000043F2  3038 785D 
000043F6  203A 2025 
000043FA  3032 78   
000043FD  2020 00   7134          dc.b      32,32,0
                    7135   @m68kde~1_21:
00004400  0D0A 5761 7136          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00004404  726E 696E 
00004408  6720 4368 
0000440C  61        
0000440D  6E67 6520 7137          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004411  4661 696C 
00004415  6564 3A20 
00004419  57        
0000441A  726F 7465 7138          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
0000441E  205B 2530 
00004422  3278 5D2C 
00004426  20        
00004427  5265 6164 7139          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
0000442B  205B 2530 
0000442F  3278 5D00 
                    7140   @m68kde~1_22:
00004434  0D0A 2057 7141          dc.b      13,10,32,87,76,69,32,83,116,97,116,117,115,58
00004438  4C45 2053 
0000443C  7461 7475 
00004440  733A      
00004442  2025 3032 7142          dc.b      32,37,48,50,120,32,10,0
00004446  7820 0A00 
                    7143   @m68kde~1_23:
0000444A  0D0A 2042 7144          dc.b      13,10,32,66,117,115,121,32,83,116,97,116,117
0000444E  7573 7920 
00004452  5374 6174 
00004456  75        
00004457  733A 2025 7145          dc.b      115,58,32,37,48,50,120,32,10,0
0000445B  3032 7820 
0000445F  0A00      
                    7146   @m68kde~1_24:
00004462  5752 4954 7147          dc.b      87,82,73,84,84,69,78,32,86,65,76,58,32,37,48
00004466  5445 4E20 
0000446A  5641 4C3A 
0000446E  2025 30   
00004471  3878 200A 7148          dc.b      56,120,32,10,0
00004475  00        
                    7149   @m68kde~1_25:
00004476  0D0A 4C6F 7150          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
0000447A  6164 696E 
0000447E  6720 5072 
00004482  6F        
00004483  6772 616D 7151          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00004487  2046 726F 
0000448B  6D20 5350 
0000448F  49        
00004490  2046 6C61 7152          dc.b      32,70,108,97,115,104,46,46,46,46,0
00004494  7368 2E2E 
00004498  2E2E 00   
                    7153   @m68kde~1_26:
0000449C  2425 3038 7154          dc.b      36,37,48,56,88,32,32,0
000044A0  5820 2000 
                    7155   @m68kde~1_27:
000044A4  2000      7156          dc.b      32,0
                    7157   @m68kde~1_28:
000044A6  2E00      7158          dc.b      46,0
                    7159   @m68kde~1_29:
000044A8  2563 00   7160          dc.b      37,99,0
                    7161   @m68kde~1_30:
000044AC  00        7162          dc.b      0
                    7163   @m68kde~1_31:
000044AE  0D0A 0D0A 7164          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000044B2  2044 3020 
000044B6  3D20 2425 
000044BA  3038 58   
000044BD  2020 4130 7165          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000044C1  203D 2024 
000044C5  2530 3858 
000044C9  00        
                    7166   @m68kde~1_32:
000044CA  0D0A 2044 7167          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000044CE  3120 3D20 
000044D2  2425 3038 
000044D6  5820 20   
000044D9  4131 203D 7168          dc.b      65,49,32,61,32,36,37,48,56,88,0
000044DD  2024 2530 
000044E1  3858 00   
                    7169   @m68kde~1_33:
000044E4  0D0A 2044 7170          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000044E8  3220 3D20 
000044EC  2425 3038 
000044F0  5820 20   
000044F3  4132 203D 7171          dc.b      65,50,32,61,32,36,37,48,56,88,0
000044F7  2024 2530 
000044FB  3858 00   
                    7172   @m68kde~1_34:
000044FE  0D0A 2044 7173          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004502  3320 3D20 
00004506  2425 3038 
0000450A  5820 20   
0000450D  4133 203D 7174          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004511  2024 2530 
00004515  3858 00   
                    7175   @m68kde~1_35:
00004518  0D0A 2044 7176          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000451C  3420 3D20 
00004520  2425 3038 
00004524  5820 20   
00004527  4134 203D 7177          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000452B  2024 2530 
0000452F  3858 00   
                    7178   @m68kde~1_36:
00004532  0D0A 2044 7179          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004536  3520 3D20 
0000453A  2425 3038 
0000453E  5820 20   
00004541  4135 203D 7180          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004545  2024 2530 
00004549  3858 00   
                    7181   @m68kde~1_37:
0000454C  0D0A 2044 7182          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004550  3620 3D20 
00004554  2425 3038 
00004558  5820 20   
0000455B  4136 203D 7183          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000455F  2024 2530 
00004563  3858 00   
                    7184   @m68kde~1_38:
00004566  0D0A 2044 7185          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
0000456A  3720 3D20 
0000456E  2425 3038 
00004572  5820 20   
00004575  4137 203D 7186          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004579  2024 2530 
0000457D  3858 00   
                    7187   @m68kde~1_39:
00004580  0D0A 0D0A 7188          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004584  5553 5020 
00004588  3D20 2425 
0000458C  3038 58   
0000458F  2020 2841 7189          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004593  3729 2055 
00004597  7365 7220 
0000459B  5350      
0000459D  00        7190          dc.b      0
                    7191   @m68kde~1_40:
0000459E  0D0A 5353 7192          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000045A2  5020 3D20 
000045A6  2425 3038 
000045AA  5820 20   
000045AD  2841 3729 7193          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000045B1  2053 7570 
000045B5  6572 7669 
000045B9  73        
000045BA  6F72 2053 7194          dc.b      111,114,32,83,80,0
000045BE  5000      
                    7195   @m68kde~1_41:
000045C0  0D0A 2053 7196          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000045C4  5220 3D20 
000045C8  2425 3034 
000045CC  5820 20   
000045CF  2000      7197          dc.b      32,0
                    7198   @m68kde~1_42:
000045D2  2020 205B 7199          dc.b      32,32,32,91,0
000045D6  00        
                    7200   @m68kde~1_43:
000045D8  0D0A 2050 7201          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000045DC  4320 3D20 
000045E0  2425 3038 
000045E4  5820 20   
000045E7  00        7202          dc.b      0
                    7203   @m68kde~1_44:
000045E8  5B40 2042 7204          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
000045EC  5245 414B 
000045F0  504F 494E 
000045F4  545D 00   
                    7205   @m68kde~1_45:
000045F8  0D0A 5750 7206          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000045FC  2564 203D 
00004600  2025 7300 
                    7207   @m68kde~1_46:
00004604  0D0A 0D0A 7208          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004608  0D0A 0D0A 
0000460C  0D0A 0D0A 
00004610  5369 6E   
00004613  676C 6520 7209          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004617  5374 6570 
0000461B  2020 3A5B 
0000461F  4F        
00004620  4E5D 00   7210          dc.b      78,93,0
                    7211   @m68kde~1_47:
00004624  0D0A 4272 7212          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004628  6561 6B20 
0000462C  506F 696E 
00004630  74        
00004631  7320 3A5B 7213          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004635  4469 7361 
00004639  626C 6564 
0000463D  5D        
0000463E  00        7214          dc.b      0
                    7215   @m68kde~1_48:
00004640  0D0A 5072 7216          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004644  6573 7320 
00004648  3C53 5041 
0000464C  4345      
0000464E  3E20 746F 7217          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004652  2045 7865 
00004656  6375 7465 
0000465A  20        
0000465B  4E65 7874 7218          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000465F  2049 6E73 
00004663  7472 7563 
00004667  7469 6F6E 7219          dc.b      116,105,111,110,0
0000466B  00        
                    7220   @m68kde~1_49:
0000466C  0D0A 5072 7221          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004670  6573 7320 
00004674  3C45 5343 
00004678  3E20      
0000467A  746F 2052 7222          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
0000467E  6573 756D 
00004682  6520 5072 
00004686  6F67 7261 7223          dc.b      111,103,114,97,109,0
0000468A  6D00      
                    7224   @m68kde~1_50:
0000468C  0D0A 496C 7225          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004690  6C65 6761 
00004694  6C20 4461 
00004698  74        
00004699  6120 5265 7226          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
0000469D  6769 7374 
000046A1  6572 203A 
000046A5  20        
000046A6  5573 6520 7227          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000046AA  4430 2D44 
000046AE  372E 2E2E 
000046B2  2E2E      
000046B4  0D0A 00   7228          dc.b      13,10,0
                    7229   @m68kde~1_51:
000046B8  0D0A 4425 7230          dc.b      13,10,68,37,99,32,61,32,0
000046BC  6320 3D20 
000046C0  00        
                    7231   @m68kde~1_52:
000046C2  0D0A 496C 7232          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000046C6  6C65 6761 
000046CA  6C20 4164 
000046CE  64        
000046CF  7265 7373 7233          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000046D3  2052 6567 
000046D7  6973 7465 
000046DB  7220 3A20 7234          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000046DF  5573 6520 
000046E3  4130 2D41 
000046E7  372E      
000046E9  2E2E 2E2E 7235          dc.b      46,46,46,46,13,10,0
000046ED  0D0A 00   
                    7236   @m68kde~1_53:
000046F0  0D0A 4125 7237          dc.b      13,10,65,37,99,32,61,32,0
000046F4  6320 3D20 
000046F8  00        
                    7238   @m68kde~1_54:
000046FA  0D0A 5573 7239          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000046FE  6572 2053 
00004702  5020 3D20 
00004706  00        
                    7240   @m68kde~1_55:
00004708  0D0A 496C 7241          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000470C  6C65 6761 
00004710  6C20 5265 
00004714  67        
00004715  6973 7465 7242          dc.b      105,115,116,101,114,46,46,46,46,0
00004719  722E 2E2E 
0000471D  2E00      
                    7243   @m68kde~1_56:
00004720  0D0A 5379 7244          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004724  7374 656D 
00004728  2053 5020 
0000472C  3D        
0000472D  2000      7245          dc.b      32,0
                    7246   @m68kde~1_57:
00004730  0D0A 5043 7247          dc.b      13,10,80,67,32,61,32,0
00004734  203D 2000 
                    7248   @m68kde~1_58:
00004738  0D0A 5352 7249          dc.b      13,10,83,82,32,61,32,0
0000473C  203D 2000 
                    7250   @m68kde~1_59:
00004740  0D0A 496C 7251          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004744  6C65 6761 
00004748  6C20 5265 
0000474C  67        
0000474D  6973 7465 7252          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004751  723A 2055 
00004755  7365 2041 
00004759  30        
0000475A  2D41 372C 7253          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000475E  2044 302D 
00004762  4437 2C20 
00004766  5353 50   
00004769  2C20 5553 7254          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000476D  502C 2050 
00004771  4320 6F72 
00004775  2053      
00004777  520D 0A00 7255          dc.b      82,13,10,0
                    7256   @m68kde~1_60:
0000477C  0D0A 0D0A 7257          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004780  4E75 6D20 
00004784  2020 2020 
00004788  4164      
0000478A  6472 6573 7258          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
0000478E  7320 2020 
00004792  2020 2049 
00004796  6E        
00004797  7374 7275 7259          dc.b      115,116,114,117,99,116,105,111,110,0
0000479B  6374 696F 
0000479F  6E00      
                    7260   @m68kde~1_61:
000047A2  0D0A 2D2D 7261          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000047A6  2D20 2020 
000047AA  2020 2D2D 
000047AE  2D2D 2D   
000047B1  2D2D 2D2D 7262          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000047B5  2020 2020 
000047B9  2D2D 2D2D 
000047BD  2D2D 2D   
000047C0  2D2D 2D2D 7263          dc.b      45,45,45,45,0
000047C4  00        
                    7264   @m68kde~1_62:
000047C6  0D0A 4E6F 7265          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000047CA  2042 7265 
000047CE  616B 506F 
000047D2  69        
000047D3  6E74 7320 7266          dc.b      110,116,115,32,83,101,116,0
000047D7  5365 7400 
                    7267   @m68kde~1_63:
000047DC  0D0A 2533 7268          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000047E0  6420 2020 
000047E4  2020 2425 
000047E8  3038 78   
000047EB  00        7269          dc.b      0
                    7270   @m68kde~1_64:
000047EC  0D0A 4E75 7271          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000047F0  6D20 2020 
000047F4  2020 4164 
000047F8  6472      
000047FA  6573 7300 7272          dc.b      101,115,115,0
                    7273   @m68kde~1_65:
000047FE  0D0A 2D2D 7274          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004802  2D20 2020 
00004806  2020 2D2D 
0000480A  2D2D 2D   
0000480D  2D2D 2D2D 7275          dc.b      45,45,45,45,0
00004811  00        
                    7276   @m68kde~1_66:
00004812  0D0A 4E6F 7277          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004816  2057 6174 
0000481A  6368 506F 
0000481E  69        
0000481F  6E74 7320 7278          dc.b      110,116,115,32,83,101,116,0
00004823  5365 7400 
                    7279   @m68kde~1_67:
00004828  0D0A 456E 7280          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000482C  7465 7220 
00004830  4272 6561 
00004834  6B        
00004835  2050 6F69 7281          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004839  6E74 204E 
0000483D  756D 6265 
00004841  72        
00004842  3A20 00   7282          dc.b      58,32,0
                    7283   @m68kde~1_68:
00004846  0D0A 496C 7284          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
0000484A  6C65 6761 
0000484E  6C20 5261 
00004852  6E        
00004853  6765 203A 7285          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004857  2055 7365 
0000485B  2030 202D 
0000485F  2037      
00004861  00        7286          dc.b      0
                    7287   @m68kde~1_69:
00004862  0D0A 4272 7288          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004866  6561 6B20 
0000486A  506F 696E 
0000486E  74        
0000486F  2043 6C65 7289          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004873  6172 6564 
00004877  2E2E 2E2E 
0000487B  2E        
0000487C  0D0A 00   7290          dc.b      13,10,0
                    7291   @m68kde~1_70:
00004880  0D0A 4272 7292          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004884  6561 6B20 
00004888  506F 696E 
0000488C  74        
0000488D  2077 6173 7293          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004891  6E27 7420 
00004895  5365 742E 
00004899  2E        
0000489A  2E2E 2E00 7294          dc.b      46,46,46,0
                    7295   @m68kde~1_71:
0000489E  0D0A 456E 7296          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000048A2  7465 7220 
000048A6  5761 7463 
000048AA  68        
000048AB  2050 6F69 7297          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000048AF  6E74 204E 
000048B3  756D 6265 
000048B7  72        
000048B8  3A20 00   7298          dc.b      58,32,0
                    7299   @m68kde~1_72:
000048BC  0D0A 5761 7300          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000048C0  7463 6820 
000048C4  506F 696E 
000048C8  74        
000048C9  2043 6C65 7301          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000048CD  6172 6564 
000048D1  2E2E 2E2E 
000048D5  2E        
000048D6  0D0A 00   7302          dc.b      13,10,0
                    7303   @m68kde~1_73:
000048DA  0D0A 5761 7304          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000048DE  7463 6820 
000048E2  506F 696E 
000048E6  74        
000048E7  2057 6173 7305          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000048EB  206E 6F74 
000048EF  2053 6574 
000048F3  2E        
000048F4  2E2E 2E2E 7306          dc.b      46,46,46,46,0
000048F8  00        
                    7307   @m68kde~1_74:
000048FA  0D0A 4E6F 7308          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000048FE  2046 5245 
00004902  4520 4272 
00004906  6561      
00004908  6B20 506F 7309          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
0000490C  696E 7473 
00004910  2E2E 2E2E 
00004914  2E        
00004915  00        7310          dc.b      0
                    7311   @m68kde~1_75:
00004916  0D0A 4272 7312          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000491A  6561 6B20 
0000491E  506F 696E 
00004922  74        
00004923  2041 6464 7313          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004927  7265 7373 
0000492B  3A20 00   
                    7314   @m68kde~1_76:
0000492E  0D0A 4572 7315          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004932  726F 7220 
00004936  3A20 4272 
0000493A  65        
0000493B  616B 2050 7316          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000493F  6F69 6E74 
00004943  7320 4341 
00004947  4E        
00004948  4E4F 5420 7317          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000494C  6265 2073 
00004950  6574 2061 
00004954  74        
00004955  204F 4444 7318          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004959  2061 6464 
0000495D  7265 7373 
00004961  65        
00004962  7300      7319          dc.b      115,0
                    7320   @m68kde~1_77:
00004964  0D0A 4572 7321          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004968  726F 7220 
0000496C  3A20 4272 
00004970  65        
00004971  616B 2050 7322          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004975  6F69 6E74 
00004979  7320 4341 
0000497D  4E        
0000497E  4E4F 5420 7323          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004982  6265 2073 
00004986  6574 2066 
0000498A  6F        
0000498B  7220 524F 7324          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
0000498F  4D20 696E 
00004993  2052 616E 
00004997  67        
00004998  6520 3A20 7325          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
0000499C  5B24 302D 
000049A0  2430 3030 
000049A4  3037 46   
000049A7  4646 5D00 7326          dc.b      70,70,93,0
                    7327   @m68kde~1_78:
000049AC  0D0A 4572 7328          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000049B0  726F 723A 
000049B4  2042 7265 
000049B8  61        
000049B9  6B20 506F 7329          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000049BD  696E 7420 
000049C1  416C 7265 
000049C5  6164 7920 7330          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000049C9  4578 6973 
000049CD  7473 2061 
000049D1  74        
000049D2  2041 6464 7331          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000049D6  7265 7373 
000049DA  203A 2025 
000049DE  30        
000049DF  3878 0D0A 7332          dc.b      56,120,13,10,0
000049E3  00        
                    7333   @m68kde~1_79:
000049E4  0D0A 4272 7334          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000049E8  6561 6B20 
000049EC  506F 696E 
000049F0  74        
000049F1  2053 6574 7335          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000049F5  2061 7420 
000049F9  4164 6472 
000049FD  65        
000049FE  7373 3A20 7336          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004A02  5B24 2530 
00004A06  3878 5D00 
                    7337   @m68kde~1_80:
00004A0A  0D0A 4E6F 7338          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004A0E  2046 5245 
00004A12  4520 5761 
00004A16  7463      
00004A18  6820 506F 7339          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004A1C  696E 7473 
00004A20  2E2E 2E2E 
00004A24  2E        
00004A25  00        7340          dc.b      0
                    7341   @m68kde~1_81:
00004A26  0D0A 5761 7342          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004A2A  7463 6820 
00004A2E  506F 696E 
00004A32  74        
00004A33  2041 6464 7343          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004A37  7265 7373 
00004A3B  3A20 00   
                    7344   @m68kde~1_82:
00004A3E  0D0A 4572 7345          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004A42  726F 723A 
00004A46  2057 6174 
00004A4A  63        
00004A4B  6820 506F 7346          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004A4F  696E 7420 
00004A53  416C 7265 
00004A57  6164 7920 7347          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004A5B  5365 7420 
00004A5F  6174 2041 
00004A63  64        
00004A64  6472 6573 7348          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004A68  7320 3A20 
00004A6C  2530 3878 
00004A70  0D        
00004A71  0A00      7349          dc.b      10,0
                    7350   @m68kde~1_83:
00004A74  0D0A 5761 7351          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004A78  7463 6820 
00004A7C  506F 696E 
00004A80  74        
00004A81  2053 6574 7352          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004A85  2061 7420 
00004A89  4164 6472 
00004A8D  65        
00004A8E  7373 3A20 7353          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004A92  5B24 2530 
00004A96  3878 5D00 
                    7354   @m68kde~1_84:
00004A9A  0D0A 0D0A 7355          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004A9E  0D0A 0D0A 
00004AA2  4042 5245 
00004AA6  414B 50   
00004AA9  4F49 4E54 7356          dc.b      79,73,78,84,0
00004AAD  00        
                    7357   @m68kde~1_85:
00004AAE  0D0A 5369 7358          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004AB2  6E67 6C65 
00004AB6  2053 7465 
00004ABA  70        
00004ABB  203A 205B 7359          dc.b      32,58,32,91,79,78,93,0
00004ABF  4F4E 5D00 
                    7360   @m68kde~1_86:
00004AC4  0D0A 4272 7361          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004AC8  6561 6B50 
00004ACC  6F69 6E74 
00004AD0  73        
00004AD1  203A 205B 7362          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004AD5  456E 6162 
00004AD9  6C65 645D 
00004ADD  00        
                    7363   @m68kde~1_87:
00004ADE  0D0A 5072 7364          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004AE2  6573 7320 
00004AE6  3C45 5343 
00004AEA  3E20      
00004AEC  746F 2052 7365          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004AF0  6573 756D 
00004AF4  6520 5573 
00004AF8  6572 2050 7366          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004AFC  726F 6772 
00004B00  616D 0D0A 
00004B04  00        
                    7367   @m68kde~1_88:
00004B06  0D0A 556E 7368          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004B0A  6B6E 6F77 
00004B0E  6E20 436F 
00004B12  6D        
00004B13  6D61 6E64 7369          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004B17  2E2E 2E2E 
00004B1B  2E0D 0A00 
                    7370   @m68kde~1_89:
00004B20  0D0A 5072 7371          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004B24  6F67 7261 
00004B28  6D20 456E 
00004B2C  64        
00004B2D  6564 2028 7372          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004B31  5452 4150 
00004B35  2023 3135 
00004B39  292E      
00004B3B  2E2E 2E00 7373          dc.b      46,46,46,0
                    7374   @m68kde~1_90:
00004B40  0D0A 4B69 7375          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004B44  6C6C 2041 
00004B48  6C6C 2042 
00004B4C  72        
00004B4D  6561 6B20 7376          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004B51  506F 696E 
00004B55  7473 2E2E 
00004B59  2E        
00004B5A  2879 2F6E 7377          dc.b      40,121,47,110,41,63,0
00004B5E  293F 00   
                    7378   @m68kde~1_91:
00004B62  0D0A 4B69 7379          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004B66  6C6C 2041 
00004B6A  6C6C 2057 
00004B6E  61        
00004B6F  7463 6820 7380          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004B73  506F 696E 
00004B77  7473 2E2E 
00004B7B  2E        
00004B7C  2879 2F6E 7381          dc.b      40,121,47,110,41,63,0
00004B80  293F 00   
                    7382   @m68kde~1_92:
00004B84  0D0A 2D2D 7383          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004B88  2D2D 2D2D 
00004B8C  2D2D 2D2D 
00004B90  2D2D 2D   
00004B93  2D2D 2D2D 7384          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004B97  2D2D 2D2D 
00004B9B  2D2D 2D2D 
00004B9F  2D2D 2D   
00004BA2  2D2D 2D2D 7385          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004BA6  2D2D 2D2D 
00004BAA  2D2D 2D2D 
00004BAE  2D2D 2D   
00004BB1  2D2D 2D2D 7386          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004BB5  2D2D 2D2D 
00004BB9  2D2D 2D2D 
00004BBD  2D2D 2D   
00004BC0  2D2D 2D2D 7387          dc.b      45,45,45,45,45,45,0
00004BC4  2D2D 00   
                    7388   @m68kde~1_93:
00004BC8  0D0A 2020 7389          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004BCC  4465 6275 
00004BD0  6767 6572 
00004BD4  20        
00004BD5  436F 6D6D 7390          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004BD9  616E 6420 
00004BDD  5375 6D6D 
00004BE1  6172 7900 7391          dc.b      97,114,121,0
                    7392   @m68kde~1_94:
00004BE6  0D0A 2020 7393          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004BEA  2E28 7265 
00004BEE  6729 2020 
00004BF2  2020      
00004BF4  2020 202D 7394          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004BF8  2043 6861 
00004BFC  6E67 6520 
00004C00  5265      
00004C02  6769 7374 7395          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004C06  6572 733A 
00004C0A  2065 2E67 
00004C0E  2041 302D 7396          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004C12  4137 2C44 
00004C16  302D 4437 
00004C1A  2C50 43   
00004C1D  2C53 5350 7397          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004C21  2C55 5350 
00004C25  2C53 5200 
                    7398   @m68kde~1_95:
00004C2A  0D0A 2020 7399          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004C2E  4244 2F42 
00004C32  532F 4243 
00004C36  2F42 4B   
00004C39  2020 2D20 7400          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004C3D  4272 6561 
00004C41  6B20 506F 
00004C45  69        
00004C46  6E74 3A20 7401          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004C4A  4469 7370 
00004C4E  6C61 792F 
00004C52  53        
00004C53  6574 2F43 7402          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004C57  6C65 6172 
00004C5B  2F4B 696C 
00004C5F  6C        
00004C60  00        7403          dc.b      0
                    7404   @m68kde~1_96:
00004C62  0D0A 2020 7405          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004C66  4320 2020 
00004C6A  2020 2020 
00004C6E  2020 20   
00004C71  2020 2D20 7406          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004C75  436F 7079 
00004C79  2050 726F 
00004C7D  67        
00004C7E  7261 6D20 7407          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004C82  6672 6F6D 
00004C86  2046 6C61 
00004C8A  73        
00004C8B  6820 746F 7408          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004C8F  204D 6169 
00004C93  6E20 4D65 
00004C97  6D        
00004C98  6F72 7900 7409          dc.b      111,114,121,0
                    7410   @m68kde~1_97:
00004C9C  0D0A 2020 7411          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004CA0  4420 2020 
00004CA4  2020 2020 
00004CA8  2020 20   
00004CAB  2020 2D20 7412          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004CAF  4475 6D70 
00004CB3  204D 656D 
00004CB7  6F        
00004CB8  7279 2043 7413          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004CBC  6F6E 7465 
00004CC0  6E74 7320 
00004CC4  746F 2053 7414          dc.b      116,111,32,83,99,114,101,101,110,0
00004CC8  6372 6565 
00004CCC  6E00      
                    7415   @m68kde~1_98:
00004CCE  0D0A 2020 7416          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004CD2  4520 2020 
00004CD6  2020 2020 
00004CDA  2020 20   
00004CDD  2020 2D20 7417          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004CE1  456E 7465 
00004CE5  7220 5374 
00004CE9  72        
00004CEA  696E 6720 7418          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004CEE  696E 746F 
00004CF2  204D 656D 
00004CF6  6F72 7900 7419          dc.b      111,114,121,0
                    7420   @m68kde~1_99:
00004CFA  0D0A 2020 7421          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004CFE  4620 2020 
00004D02  2020 2020 
00004D06  2020 20   
00004D09  2020 2D20 7422          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004D0D  4669 6C6C 
00004D11  204D 656D 
00004D15  6F        
00004D16  7279 2077 7423          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004D1A  6974 6820 
00004D1E  4461 7461 
00004D22  00        
                    7424   @m68kde~1_100:
00004D24  0D0A 2020 7425          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004D28  4720 2020 
00004D2C  2020 2020 
00004D30  2020 20   
00004D33  2020 2D20 7426          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004D37  476F 2050 
00004D3B  726F 6772 
00004D3F  61        
00004D40  6D20 5374 7427          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004D44  6172 7469 
00004D48  6E67 2061 
00004D4C  74        
00004D4D  2041 6464 7428          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004D51  7265 7373 
00004D55  3A20 2425 
00004D59  30        
00004D5A  3858 00   7429          dc.b      56,88,0
                    7430   @m68kde~1_101:
00004D5E  0D0A 2020 7431          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004D62  4C20 2020 
00004D66  2020 2020 
00004D6A  2020 20   
00004D6D  2020 2D20 7432          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004D71  4C6F 6164 
00004D75  2050 726F 
00004D79  67        
00004D7A  7261 6D20 7433          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004D7E  282E 4845 
00004D82  5820 6669 
00004D86  6C        
00004D87  6529 2066 7434          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004D8B  726F 6D20 
00004D8F  4C61 7074 
00004D93  6F        
00004D94  7000      7435          dc.b      112,0
                    7436   @m68kde~1_102:
00004D96  0D0A 2020 7437          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004D9A  4D20 2020 
00004D9E  2020 2020 
00004DA2  2020 20   
00004DA5  2020 2D20 7438          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004DA9  4D65 6D6F 
00004DAD  7279 2045 
00004DB1  78        
00004DB2  616D 696E 7439          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004DB6  6520 616E 
00004DBA  6420 4368 
00004DBE  61        
00004DBF  6E67 6500 7440          dc.b      110,103,101,0
                    7441   @m68kde~1_103:
00004DC4  0D0A 2020 7442          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004DC8  5020 2020 
00004DCC  2020 2020 
00004DD0  2020 20   
00004DD3  2020 2D20 7443          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004DD7  5072 6F67 
00004DDB  7261 6D20 
00004DDF  46        
00004DE0  6C61 7368 7444          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004DE4  204D 656D 
00004DE8  6F72 7920 
00004DEC  7769 7468 7445          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004DF0  2055 7365 
00004DF4  7220 5072 
00004DF8  6F67 7261 7446          dc.b      111,103,114,97,109,0
00004DFC  6D00      
                    7447   @m68kde~1_104:
00004DFE  0D0A 2020 7448          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004E02  5220 2020 
00004E06  2020 2020 
00004E0A  2020 20   
00004E0D  2020 2D20 7449          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004E11  4469 7370 
00004E15  6C61 7920 
00004E19  36        
00004E1A  3830 3030 7450          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004E1E  2052 6567 
00004E22  6973 7465 
00004E26  72        
00004E27  7300      7451          dc.b      115,0
                    7452   @m68kde~1_105:
00004E2A  0D0A 2020 7453          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004E2E  5320 2020 
00004E32  2020 2020 
00004E36  2020 20   
00004E39  2020 2D20 7454          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004E3D  546F 6767 
00004E41  6C65 204F 
00004E45  4E        
00004E46  2F4F 4646 7455          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004E4A  2053 696E 
00004E4E  676C 6520 
00004E52  53        
00004E53  7465 7020 7456          dc.b      116,101,112,32,77,111,100,101,0
00004E57  4D6F 6465 
00004E5B  00        
                    7457   @m68kde~1_106:
00004E5C  0D0A 2020 7458          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004E60  544D 2020 
00004E64  2020 2020 
00004E68  2020 20   
00004E6B  2020 2D20 7459          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004E6F  5465 7374 
00004E73  204D 656D 
00004E77  6F        
00004E78  7279 00   7460          dc.b      114,121,0
                    7461   @m68kde~1_107:
00004E7C  0D0A 2020 7462          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004E80  5453 2020 
00004E84  2020 2020 
00004E88  2020 20   
00004E8B  2020 2D20 7463          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004E8F  5465 7374 
00004E93  2053 7769 
00004E97  74        
00004E98  6368 6573 7464          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004E9C  3A20 5357 
00004EA0  372D 3000 
                    7465   @m68kde~1_108:
00004EA4  0D0A 2020 7466          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004EA8  5444 2020 
00004EAC  2020 2020 
00004EB0  2020 20   
00004EB3  2020 2D20 7467          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004EB7  5465 7374 
00004EBB  2044 6973 
00004EBF  70        
00004EC0  6C61 7973 7468          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004EC4  3A20 4C45 
00004EC8  4473 2061 
00004ECC  6E        
00004ECD  6420 372D 7469          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004ED1  5365 676D 
00004ED5  656E 7400 
                    7470   @m68kde~1_109:
00004EDA  0D0A 2020 7471          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004EDE  5744 2F57 
00004EE2  532F 5743 
00004EE6  2F57 4B   
00004EE9  2020 2D20 7472          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004EED  5761 7463 
00004EF1  6820 506F 
00004EF5  696E      
00004EF7  743A 2044 7473          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004EFB  6973 706C 
00004EFF  6179 2F53 
00004F03  65        
00004F04  742F 436C 7474          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004F08  6561 722F 
00004F0C  4B69 6C6C 
00004F10  00        
                    7475   @m68kde~1_110:
00004F12  0D0A 2300 7476          dc.b      13,10,35,0
                    7477   @m68kde~1_111:
00004F16  0D0A 5072 7478          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004F1A  6F67 7261 
00004F1E  6D20 5275 
00004F22  6E        
00004F23  6E69 6E67 7479          dc.b      110,105,110,103,46,46,46,46,46,0
00004F27  2E2E 2E2E 
00004F2B  2E00      
                    7480   @m68kde~1_112:
00004F2E  0D0A 5072 7481          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004F32  6573 7320 
00004F36  3C52 4553 
00004F3A  4554      
00004F3C  3E20 6275 7482          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004F40  7474 6F6E 
00004F44  203C 4B65 
00004F48  79        
00004F49  303E 206F 7483          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004F4D  6E20 4445 
00004F51  3120 746F 
00004F55  2073      
00004F57  746F 7000 7484          dc.b      116,111,112,0
                    7485   @m68kde~1_113:
00004F5C  0D0A 4572 7486          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004F60  726F 723A 
00004F64  2050 7265 
00004F68  73        
00004F69  7320 2747 7487          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004F6D  2720 6669 
00004F71  7273 7420 
00004F75  74        
00004F76  6F20 7374 7488          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004F7A  6172 7420 
00004F7E  7072 6F67 
00004F82  7261 6D00 7489          dc.b      114,97,109,0
                    7490   @m68kde~1_114:
00004F86  0D0A 5369 7491          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004F8A  6E67 6C65 
00004F8E  2053 7465 
00004F92  70        
00004F93  2020 3A5B 7492          dc.b      32,32,58,91,79,78,93,0
00004F97  4F4E 5D00 
                    7493   @m68kde~1_115:
00004F9C  0D0A 5072 7494          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004FA0  6573 7320 
00004FA4  2747 2720 
00004FA8  74        
00004FA9  6F20 5472 7495          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004FAD  6163 6520 
00004FB1  5072 6F67 
00004FB5  72        
00004FB6  616D 2066 7496          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004FBA  726F 6D20 
00004FBE  6164 6472 
00004FC2  6573 7320 7497          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004FC6  2425 582E 
00004FCA  2E2E 2E2E 
00004FCE  00        
                    7498   @m68kde~1_116:
00004FD0  0D0A 5075 7499          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004FD4  7368 203C 
00004FD8  5245 5345 
00004FDC  5420      
00004FDE  4275 7474 7500          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00004FE2  6F6E 3E20 
00004FE6  746F 2053 
00004FEA  74        
00004FEB  6F70 2E2E 7501          dc.b      111,112,46,46,46,46,46,0
00004FEF  2E2E 2E00 
                    7502   @m68kde~1_117:
00004FF4  0D0A 5369 7503          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004FF8  6E67 6C65 
00004FFC  2053 7465 
00005000  70        
00005001  203A 205B 7504          dc.b      32,58,32,91,79,70,70,93,0
00005005  4F46 465D 
00005009  00        
                    7505   @m68kde~1_118:
0000500A  0D0A 4272 7506          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000500E  6561 6B20 
00005012  506F 696E 
00005016  74        
00005017  7320 3A5B 7507          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
0000501B  456E 6162 
0000501F  6C65 645D 
00005023  00        
                    7508   @m68kde~1_119:
00005024  0D0A 5072 7509          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005028  6573 7320 
0000502C  3C45 5343 
00005030  3E20      
00005032  746F 2052 7510          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005036  6573 756D 
0000503A  6520 5573 
0000503E  6572 2050 7511          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00005042  726F 6772 
00005046  616D 2E2E 
0000504A  2E        
0000504B  2E2E 00   7512          dc.b      46,46,0
                    7513   @m68kde~1_120:
0000504E  0D0A 5369 7514          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005052  6E67 6C65 
00005056  2053 7465 
0000505A  70        
0000505B  2020 3A5B 7515          dc.b      32,32,58,91,79,70,70,93,0
0000505F  4F46 465D 
00005063  00        
                    7516   @m68kde~1_121:
00005064  0D0A 0D0A 7517          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005068  5072 6F67 
0000506C  7261 6D20 
00005070  41        
00005071  424F 5254 7518          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00005075  2021 2121 
00005079  2121 210D 
0000507D  0A00      
                    7519   @m68kde~1_122:
00005080  2573 0D0A 7520          dc.b      37,115,13,10,0
00005084  00        
                    7521   @m68kde~1_123:
00005086  0D0A 0D0A 7522          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000508A  5072 6F67 
0000508E  7261 6D20 
00005092  41        
00005093  424F 5254 7523          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005097  2021 2121 
0000509B  2121 00   
                    7524   @m68kde~1_124:
0000509E  0D0A 556E 7525          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
000050A2  6861 6E64 
000050A6  6C65 6420 
000050AA  49        
000050AB  6E74 6572 7526          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
000050AF  7275 7074 
000050B3  3A20 4952 
000050B7  5125 6420 7527          dc.b      81,37,100,32,33,33,33,33,33,0
000050BB  2121 2121 
000050BF  2100      
                    7528   @m68kde~1_125:
000050C2  4144 4452 7529          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000050C6  4553 5320 
000050CA  4552 524F 
000050CE  523A 20   
000050D1  3136 206F 7530          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000050D5  7220 3332 
000050D9  2042 6974 
000050DD  2054      
000050DF  7261 6E73 7531          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
000050E3  6665 7220 
000050E7  746F 2F66 
000050EB  726F 6D20 7532          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000050EF  616E 204F 
000050F3  4444 2041 
000050F7  64        
000050F8  6472 6573 7533          dc.b      100,114,101,115,115,46,46,46,46,0
000050FC  732E 2E2E 
00005100  2E00      
                    7534   @m68kde~1_126:
00005102  556E 6861 7535          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00005106  6E64 6C65 
0000510A  6420 5472 
0000510E  6170 2021 7536          dc.b      97,112,32,33,33,33,33,33,0
00005112  2121 2121 
00005116  00        
                    7537   @m68kde~1_127:
00005118  4255 5320 7538          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000511C  4572 726F 
00005120  7221 00   
                    7539   @m68kde~1_128:
00005124  4144 4452 7540          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00005128  4553 5320 
0000512C  4572 726F 
00005130  7221      
00005132  00        7541          dc.b      0
                    7542   @m68kde~1_129:
00005134  494C 4C45 7543          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00005138  4741 4C20 
0000513C  494E 5354 
00005140  5255 43   
00005143  5449 4F4E 7544          dc.b      84,73,79,78,0
00005147  00        
                    7545   @m68kde~1_130:
00005148  4449 5649 7546          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
0000514C  4445 2042 
00005150  5920 5A45 
00005154  524F 00   
                    7547   @m68kde~1_131:
00005158  2743 484B 7548          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
0000515C  2720 494E 
00005160  5354 5255 
00005164  4354 49   
00005167  4F4E 00   7549          dc.b      79,78,0
                    7550   @m68kde~1_132:
0000516A  5452 4150 7551          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
0000516E  5620 494E 
00005172  5354 5255 
00005176  4354 49   
00005179  4F4E 00   7552          dc.b      79,78,0
                    7553   @m68kde~1_133:
0000517C  5052 4956 7554          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00005180  494C 4547 
00005184  4520 5649 
00005188  4F4C 41   
0000518B  5449 4F4E 7555          dc.b      84,73,79,78,0
0000518F  00        
                    7556   @m68kde~1_134:
00005190  554E 494E 7557          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005194  4954 4941 
00005198  4C49 5345 
0000519C  4420 49   
0000519F  5251 00   7558          dc.b      82,81,0
                    7559   @m68kde~1_135:
000051A2  5350 5552 7560          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
000051A6  494F 5553 
000051AA  2049 5251 
000051AE  00        
                    7561   @m68kde~1_136:
000051B0  0D0A 5374 7562          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000051B4  6172 7420 
000051B8  4164 6472 
000051BC  65        
000051BD  7373 2069 7563          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000051C1  6E20 4D65 
000051C5  6D6F 7279 
000051C9  3A20 00   7564          dc.b      58,32,0
                    7565   @m68kde~1_137:
000051CC  0D0A 456E 7566          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000051D0  7465 7220 
000051D4  5374 7269 
000051D8  6E        
000051D9  6720 2845 7567          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000051DD  5343 2074 
000051E1  6F20 656E 
000051E5  64        
000051E6  2920 3A00 7568          dc.b      41,32,58,0
                    7569   @m68kde~1_138:
000051EA  0A45 6E74 7570          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
000051EE  6572 2077 
000051F2  6861 7420 
000051F6  73        
000051F7  697A 6520 7571          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
000051FB  6F66 206D 
000051FF  656D 6F72 
00005203  7920 796F 7572          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
00005207  7520 7761 
0000520B  6E74 2074 
0000520F  6F20 7265 7573          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00005213  6164 2F77 
00005217  7269 7465 
0000521B  0A20 4279 7574          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
0000521F  7465 203D 
00005223  2030 0A20 
00005227  576F      
00005229  7264 203D 7575          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
0000522D  2031 0A20 
00005231  4C6F 6E67 
00005235  20        
00005236  576F 7264 7576          dc.b      87,111,114,100,32,61,32,50,10,0
0000523A  203D 2032 
0000523E  0A00      
                    7577   @m68kde~1_139:
00005240  0A00      7578          dc.b      10,0
                    7579   @m68kde~1_140:
00005242  0A45 6E74 7580          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005246  6572 2077 
0000524A  6869 6368 
0000524E  2064 6174 7581          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005252  6120 7061 
00005256  7474 6572 
0000525A  6E        
0000525B  2079 6F75 7582          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000525F  2077 616E 
00005263  7420 746F 
00005267  2077 7269 7583          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000526B  7465 2069 
0000526F  6E74 6F20 
00005273  6D65 6D6F 7584          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
00005277  7279 0A20 
0000527B  3078 3030 
0000527F  20        
00005280  3D20 300A 7585          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
00005284  2030 7842 
00005288  3220 3D20 
0000528C  310A 20   
0000528F  3078 4333 7586          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
00005293  203D 2032 
00005297  0A20 3078 
0000529B  4434      
0000529D  203D 2033 7587          dc.b      32,61,32,51,10,0
000052A1  0A00      
                    7588   @m68kde~1_141:
000052A4  0A45 6E74 7589          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000052A8  6572 2077 
000052AC  6869 6368 
000052B0  2064 6174 7590          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000052B4  6120 7061 
000052B8  7474 6572 
000052BC  6E        
000052BD  2079 6F75 7591          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000052C1  2077 616E 
000052C5  7420 746F 
000052C9  2077 7269 7592          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000052CD  7465 2069 
000052D1  6E74 6F20 
000052D5  6D65 6D6F 7593          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000052D9  7279 0A20 
000052DD  3078 3030 
000052E1  30        
000052E2  3020 3D20 7594          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
000052E6  300A 2030 
000052EA  7831 3233 
000052EE  3420 3D   
000052F1  2031 0A20 7595          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
000052F5  3078 4131 
000052F9  4232 203D 
000052FD  2032 0A   
00005300  2030 7843 7596          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
00005304  3344 3420 
00005308  3D20 330A 
0000530C  00        
                    7597   @m68kde~1_142:
0000530E  0A45 6E74 7598          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005312  6572 2077 
00005316  6869 6368 
0000531A  2064 6174 7599          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
0000531E  6120 7061 
00005322  7474 6572 
00005326  6E        
00005327  2079 6F75 7600          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000532B  2077 616E 
0000532F  7420 746F 
00005333  2077 7269 7601          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005337  7465 2069 
0000533B  6E74 6F20 
0000533F  6D65 6D6F 7602          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005343  7279 0A20 
00005347  3078 3030 
0000534B  30        
0000534C  305F 3030 7603          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
00005350  3030 203D 
00005354  2030 0A20 
00005358  3078 41   
0000535B  4142 425F 7604          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
0000535F  4343 4444 
00005363  203D 2031 
00005367  0A20 30   
0000536A  7831 3132 7605          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
0000536E  325F 3333 
00005372  3434 203D 
00005376  2032 0A   
00005379  2030 7837 7606          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
0000537D  3635 345F 
00005381  3332 3130 
00005385  203D 20   
00005388  330A 00   7607          dc.b      51,10,0
                    7608   @m68kde~1_143:
0000538C  0A50 726F 7609          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
00005390  7669 6465 
00005394  2053 7461 
00005398  72        
00005399  7420 4164 7610          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
0000539D  6472 6573 
000053A1  7320 696E 
000053A5  2068 6578 7611          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
000053A9  2028 646F 
000053AD  206E 6F74 
000053B1  2075 7365 7612          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
000053B5  2030 7820 
000053B9  7072 6566 
000053BD  6978 290A 7613          dc.b      105,120,41,10,48,120,0
000053C1  3078 00   
                    7614   @m68kde~1_144:
000053C4  0A50 726F 7615          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
000053C8  7669 6465 
000053CC  2045 6E64 
000053D0  2041 6464 7616          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
000053D4  7265 7373 
000053D8  2069 6E20 
000053DC  6865 7820 7617          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
000053E0  2864 6F20 
000053E4  6E6F 7420 
000053E8  7573 6520 7618          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
000053EC  3078 2070 
000053F0  7265 6669 
000053F4  7829 0A30 7619          dc.b      120,41,10,48,120,0
000053F8  7800      
                    7620   @m68kde~1_145:
000053FA  0A53 7461 7621          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
000053FE  7274 2041 
00005402  6464 7265 
00005406  73        
00005407  7320 3078 7622          dc.b      115,32,48,120,37,48,56,120,10,0
0000540B  2530 3878 
0000540F  0A00      
                    7623   @m68kde~1_146:
00005412  0A45 6E64 7624          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
00005416  2041 6464 
0000541A  7265 7373 
0000541E  3A20 3078 7625          dc.b      58,32,48,120,37,48,56,120,10,0
00005422  2530 3878 
00005426  0A00      
                    7626   @m68kde~1_147:
00005428  4552 524F 7627          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
0000542C  522E 2E2E 
00005430  2041 6464 
00005434  7265      
00005436  7373 2030 7628          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
0000543A  7825 7820 
0000543E  6973 2062 
00005442  65        
00005443  796F 6E64 7629          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005447  2074 6865 
0000544B  206D 656D 
0000544F  6F72 7920 7630          dc.b      111,114,121,32,114,97,110,103,101,10,0
00005453  7261 6E67 
00005457  650A 00   
                    7631   @m68kde~1_148:
0000545A  4552 524F 7632          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
0000545E  522E 2E2E 
00005462  2056 616C 
00005466  7565      
00005468  2077 7269 7633          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
0000546C  7474 656E 
00005470  2074 6F20 
00005474  6164 6472 7634          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00005478  6573 7320 
0000547C  3078 2578 
00005480  203D 3D20 7635          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00005484  3078 2578 
00005488  2E20 5661 
0000548C  6C75      
0000548E  6520 4578 7636          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
00005492  7065 6374 
00005496  6564 3A20 
0000549A  30        
0000549B  7825 780A 7637          dc.b      120,37,120,10,0
0000549F  00        
                    7638   @m68kde~1_149:
000054A0  4164 6472 7639          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000054A4  6573 733A 
000054A8  2030 7825 
000054AC  78        
000054AD  2056 616C 7640          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
000054B1  7565 3A20 
000054B5  3078 2530 
000054B9  3258      
000054BB  0A00      7641          dc.b      10,0
                    7642   @m68kde~1_150:
000054BE  4164 6472 7643          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000054C2  6573 733A 
000054C6  2030 7825 
000054CA  78        
000054CB  2056 616C 7644          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
000054CF  7565 3A20 
000054D3  3078 2530 
000054D7  3458      
000054D9  0A00      7645          dc.b      10,0
                    7646   @m68kde~1_151:
000054DC  4164 6472 7647          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000054E0  6573 733A 
000054E4  2030 7825 
000054E8  78        
000054E9  2056 616C 7648          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
000054ED  7565 3A20 
000054F1  3078 2530 
000054F5  3858      
000054F7  0A00      7649          dc.b      10,0
                    7650   @m68kde~1_152:
000054FA  4445 312D 7651          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000054FE  3638 6B20 
00005502  4275 6720 
00005506  5631      
00005508  2E37 3700 7652          dc.b      46,55,55,0
                    7653   @m68kde~1_153:
0000550C  436F 7079 7654          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00005510  7269 6768 
00005514  7420 2843 
00005518  2920 504A 7655          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
0000551C  2044 6176 
00005520  6965 7320 
00005524  3230      
00005526  3136 00   7656          dc.b      49,54,0
                    7657   @m68kde~1_154:
0000552A  0D0A 5275 7658          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
0000552E  6E6E 696E 
00005532  672E 2E2E 
00005536  2E        
00005537  2E00      7659          dc.b      46,0
                    7660   @m68kde~1_155:
0000553A  5275 6E6E 7661          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
0000553E  696E 672E 
00005542  2E2E 2E2E 
00005546  00        
                    7662   @m68kde~1_156:
00005548  4279 3A20 7663          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
0000554C  504A 2044 
00005550  6176 6965 
00005554  73        
00005555  00        7664          dc.b      0
                    7665   @m68kde~1_157:
00005556  0D0A 2573 7666          dc.b      13,10,37,115,0
0000555A  00        
                    7667   @m68kde~1_158:
0000555C  0A20 5374 7668          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
00005560  7564 656E 
00005564  7420 4E61 
00005568  6D        
00005569  6573 3A0A 7669          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
0000556D  205A 6163 
00005571  6861 7269 
00005575  61        
00005576  6820 4A6F 7670          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
0000557A  7365 7068 
0000557E  3A20 3435 
00005582  35        
00005583  3030 3035 7671          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00005587  3520 0A20 
0000558B  556D 6169 
0000558F  7220      
00005591  4D61 7A68 7672          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
00005595  6172 3A20 
00005599  3230 3333 
0000559D  3333      
0000559F  3038 0A00 7673          dc.b      48,56,10,0
                    7674          section   data
000055A4            7675                   align
          0000 55A4 7676   DataStart       equ       *
                    7677   
                    7678   *********************************************************************************************************
                    7679   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7680   * to ram as part of the CStart routine in this file
                    7681   *********************************************************************************************************
                    7682   
                    7683   @vsscanf_bufx:
000055A4  0B00 0546 7684          dc.l      @vsscanf_buf
                    7685   @vsscanf_1:
000055A8  0A00      7686          dc.b      10,0
                    7687   __ctype:
000055AA  0040 4040 7688          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
000055AE  4040 4040 
000055B2  4040 5050 
000055B6  5050 50   
000055B9  4040 4040 7689          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000055BD  4040 4040 
000055C1  4040 4040 
000055C5  4040 40   
000055C8  4040 40D0 7690          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000055CC  A0A0 A0A0 
000055D0  A0A0 A0A0 
000055D4  A0A0 A0A0 7691          dc.b      160,160,160,160,160,160,160,140,140,140,140
000055D8  A0A0 A08C 
000055DC  8C8C 8C   
000055DF  8C8C 8C8C 7692          dc.b      140,140,140,140,140,140,160,160,160,160,160
000055E3  8C8C A0A0 
000055E7  A0A0 A0   
000055EA  A0A0 8A8A 7693          dc.b      160,160,138,138,138,138,138,138,130,130,130
000055EE  8A8A 8A8A 
000055F2  8282 82   
000055F5  8282 8282 7694          dc.b      130,130,130,130,130,130,130,130,130,130,130
000055F9  8282 8282 
000055FD  8282 82   
00005600  8282 8282 7695          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005604  8282 A0A0 
00005608  A0A0 A0   
0000560B  A089 8989 7696          dc.b      160,137,137,137,137,137,137,129,129,129,129
0000560F  8989 8981 
00005613  8181 81   
00005616  8181 8181 7697          dc.b      129,129,129,129,129,129,129,129,129,129,129
0000561A  8181 8181 
0000561E  8181 81   
00005621  8181 8181 7698          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005625  81A0 A0A0 
00005629  A040 0000 
0000562D  00        
0000562E  0000 0000 7699          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005632  0000 0000 
00005636  0000 0000 
0000563A  0000 0000 
0000563E  0000 0000 
00005642  0000      
00005644  0000 0000 7700          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005648  0000 0000 
0000564C  0000 0000 
00005650  0000 0000 
00005654  0000 0000 
00005658  0000      
0000565A  0000 0000 7701          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000565E  0000 0000 
00005662  0000 0000 
00005666  0000 0000 
0000566A  0000 0000 
0000566E  0000      
00005670  0000 0000 7702          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005674  0000 0000 
00005678  0000 0000 
0000567C  0000 0000 
00005680  0000 0000 
00005684  0000      
00005686  0000 0000 7703          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000568A  0000 0000 
0000568E  0000 0000 
00005692  0000 0000 
00005696  0000 0000 
0000569A  0000      
0000569C  0000 0000 7704          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000056A0  0000 0000 
000056A4  0000 0000 
000056A8  0000 00   
                    7705   @itoa_1:
000056AC  2D32 3134 7706          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000056B0  3734 3833 
000056B4  3634 3800 
                    7707          section   bss
000056B8            7708                   align
          0000 56B8 7709   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7710   
                    7711   *********************************************************************************************************
                    7712   * Section for Uninitialised Data held in ROM as constants
                    7713   *********************************************************************************************************
                    7714   
0B000000            7715                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 7716   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7717   
                    7718   
0B000000            7719   bss             org       bss
                    7720   
                    7721   *********************************************************************************************************
                    7722   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7723   * install the exception handler using the C function InstallExceptionHandler()
                    7724   *********************************************************************************************************
                    7725   
                    7726   
                    7727   
0B000000            7728   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7729   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7730   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7731   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7732   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7733   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7734   VCheck           ds.l    1      ditto
0B00001C            7735   VTrapV           ds.l    1      ditto
0B000020            7736   VPrivilege       ds.l    1      ditto
0B000024            7737   VTrace           ds.l    1
0B000028            7738   VLine1010emul    ds.l    1
0B00002C            7739   VLine1111emul    ds.l    1
0B000030            7740   VUnassigned1     ds.l    1
0B000034            7741   VUnassigned2     ds.l    1
0B000038            7742   VUnassigned3     ds.l    1
0B00003C            7743   VUninit_IRQ      ds.l    1
0B000040            7744   VUnassigned4     ds.l    1
0B000044            7745   VUnassigned5     ds.l    1
0B000048            7746   VUnassigned6     ds.l    1
0B00004C            7747   VUnassigned7     ds.l    1
0B000050            7748   VUnassigned8     ds.l    1
0B000054            7749   VUnassigned9     ds.l    1
0B000058            7750   VUnassigned10    ds.l    1
0B00005C            7751   VUnassigned11    ds.l    1
0B000060            7752   VSpuriousIRQ     ds.l    1
                    7753   
                    7754   * Interrupt handlers Vector 25-31
0B000064            7755   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7756   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7757   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7758   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7759   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7760   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7761   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7762   
                    7763   * Trap Handler vectors 32-47
0B000080            7764   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7765   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7766   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7767   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7768   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7769   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7770   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7771   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7772   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7773   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7774   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7775   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7776   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7777   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7778   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7779   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7780   
                    7781   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7782   
                    7783   ***********************************************************************************************************
                    7784   * Other Variables
                    7785   ***********************************************************************************************************
                    7786   *__DebugA5       ds.l    1
                    7787   *__UserA5        ds.l    1
                    7788   
                    7789   ***********************************************************************************************************
0B0000C0            7790   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7791   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7792   __heap:         ds.l    0       ; pointers for malloc functions
                    7793   
                    7794   *__himem:       ds.l    himem            ; highest memory location + 1
                    7795   *__stklen:      ds.l    stklen           ; default stack size
                    7796   
                    7797   *********************************************************************************************************
                    7798   * Section for Heap
                    7799   *********************************************************************************************************
                    7800   
                    7801   _i:
0B0000C4            7802          ds.b      4
                    7803   _x:
0B0000C8            7804          ds.b      4
                    7805   _y:
0B0000CC            7806          ds.b      4
                    7807   _z:
0B0000D0            7808          ds.b      4
                    7809   _PortA_Count:
0B0000D4            7810          ds.b      4
                    7811   _Trace:
0B0000D8            7812          ds.b      4
                    7813   _GoFlag:
0B0000DC            7814          ds.b      4
                    7815   _Echo:
0B0000E0            7816          ds.b      4
                    7817   _d0:
0B0000E4            7818          ds.b      4
                    7819   _d1:
0B0000E8            7820          ds.b      4
                    7821   _d2:
0B0000EC            7822          ds.b      4
                    7823   _d3:
0B0000F0            7824          ds.b      4
                    7825   _d4:
0B0000F4            7826          ds.b      4
                    7827   _d5:
0B0000F8            7828          ds.b      4
                    7829   _d6:
0B0000FC            7830          ds.b      4
                    7831   _d7:
0B000100            7832          ds.b      4
                    7833   _a0:
0B000104            7834          ds.b      4
                    7835   _a1:
0B000108            7836          ds.b      4
                    7837   _a2:
0B00010C            7838          ds.b      4
                    7839   _a3:
0B000110            7840          ds.b      4
                    7841   _a4:
0B000114            7842          ds.b      4
                    7843   _a5:
0B000118            7844          ds.b      4
                    7845   _a6:
0B00011C            7846          ds.b      4
                    7847   _PC:
0B000120            7848          ds.b      4
                    7849   _SSP:
0B000124            7850          ds.b      4
                    7851   _USP:
0B000128            7852          ds.b      4
                    7853   _SR:
0B00012C            7854          ds.b      2
                    7855   _BreakPointAddress:
0B00012E            7856          ds.b      32
                    7857   _BreakPointInstruction:
0B00014E            7858          ds.b      16
                    7859   _BreakPointSetOrCleared:
0B00015E            7860          ds.b      32
                    7861   _InstructionSize:
0B00017E            7862          ds.b      4
                    7863   _WatchPointAddress:
0B000182            7864          ds.b      32
                    7865   _WatchPointSetOrCleared:
0B0001A2            7866          ds.b      32
                    7867   _WatchPointString:
0B0001C2            7868          ds.b      800
                    7869   _TempString:
0B0004E2            7870          ds.b      100
                    7871   @vsscanf_buf:
0B000546            7872          ds.b      80
                    7873          section   heap
0B000596            7874                   align
          0B00 0596 7875   bssEnd          equ *                   end of storage space for unitialised variables
                    7876   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 7877   heap   equ       *
0B000596            7878                    align
          0000 0000

Assembly errors: 0
