680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 26 Feb 2025      Time: 14:40:03          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2BEC      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  229C      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3954      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  432A      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  432E      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4344      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  4346      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3954      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2F98      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  4348      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4382      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  439A      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  43A2      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  43A8      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  432A      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3954      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  43AC      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  4382      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  43C0      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  43D6      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  43EA      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3954      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  441A      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  3092      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2ECC      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2F98      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  444A      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4470      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3954      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4492      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  44AE      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  44F4      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  4506      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  3004      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  4518      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; // TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011 // This might need to be 0x53
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while (TestForSPITransmitDataComplete() == 0);
                    1614   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1615          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1616          tst.l     D0
00001122  6602      1617          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1621          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1622          rts
                    1623   ; }
                    1624   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1625   ; void ClearSPIReadFIFO(void) {
                    1626   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1627          link      A6,#-4
                    1628   ; volatile unsigned char dummy;
                    1629   ; while((SPI_Status & 0x01) == 0) {
                    1630   ClearSPIReadFIFO_1:
00001134  1039 0040 1631          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1632          and.b     #1,D0
0000113E  660A      1633          bne.s     ClearSPIReadFIFO_3
                    1634   ; dummy = SPI_Data;
00001140  1D79 0040 1635          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1636          bra       ClearSPIReadFIFO_1
                    1637   ClearSPIReadFIFO_3:
0000114A  4E5E      1638          unlk      A6
0000114C  4E75      1639          rts
                    1640   ; }
                    1641   ; }
                    1642   ; void SPIFlashPollStatusWLE(void) {
                    1643   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char status;
                    1646   ; unsigned char dummy;
                    1647   ; do {
                    1648   SPIFlashPollStatusWLE_1:
                    1649   ; // Start a new read status register command each time
                    1650   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1651          move.b    #254,4227112
00001156  0040 8028 
                    1652   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1653          pea       5
0000115E  4EB8 10C4 1654          jsr       _SPISafeWrite
00001162  584F      1655          addq.w    #4,A7
                    1656   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1657          pea       255
00001168  4EB8 10C4 1658          jsr       _SPISafeWrite
0000116C  584F      1659          addq.w    #4,A7
0000116E  1D40 FFFE 1660          move.b    D0,-2(A6)
                    1661   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1662          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1663          move.b    -2(A6),D0
0000117E  C03C 0002 1664          and.b     #2,D0
00001182  67CE      1665          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1666          unlk      A6
00001186  4E75      1667          rts
                    1668   ; // printf("\r\n WLE Status: %02x \n", status);
                    1669   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1670   ; }
                    1671   ; void SPIFlashPollStatusBusy(void) {
                    1672   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1673          link      A6,#-4
                    1674   ; unsigned char status;
                    1675   ; unsigned char dummy;
                    1676   ; do {
                    1677   SPIFlashPollStatusBusy_1:
                    1678   ; // Start a new read status register command each time
                    1679   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1680          move.b    #254,4227112
00001190  0040 8028 
                    1681   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1682          pea       5
00001198  4EB8 10C4 1683          jsr       _SPISafeWrite
0000119C  584F      1684          addq.w    #4,A7
                    1685   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1686          pea       255
000011A2  4EB8 10C4 1687          jsr       _SPISafeWrite
000011A6  584F      1688          addq.w    #4,A7
000011A8  1D40 FFFE 1689          move.b    D0,-2(A6)
                    1690   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1691          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1692          move.b    -2(A6),D0
000011B8  C03C 0001 1693          and.b     #1,D0
000011BC  66CE      1694          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1695          unlk      A6
000011C0  4E75      1696          rts
                    1697   ; // printf("\r\n Busy Status: %02x \n", status);
                    1698   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011C2  4E56 0000 1707          link      A6,#0
                    1708   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1709   ; // wait for completion of transmission
                    1710   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1711   ; // by reading fom the SPI controller Data Register.
                    1712   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1713   ; //
                    1714   ; // modify '0' below to return back read byte from data register
                    1715   ; //
                    1716   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1717          move.l    8(A6),D1
000011CA  C2BC 0000 1718          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1719          move.l    D1,-(A7)
000011D2  4EB8 10C4 1720          jsr       _SPISafeWrite
000011D6  584F      1721          addq.w    #4,A7
                    1722   ; return SPI_Data;
000011D8  1039 0040 1723          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1724          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1725          unlk      A6
000011E6  4E75      1726          rts
                    1727   ; }
                    1728   ; void SPIFlashWriteEnable() {
                    1729   _SPIFlashWriteEnable:
                    1730   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1731          move.b    #254,4227112
000011EC  0040 8028 
                    1732   ; SPISafeWrite(0x06);
000011F0  4878 0006 1733          pea       6
000011F4  4EB8 10C4 1734          jsr       _SPISafeWrite
000011F8  584F      1735          addq.w    #4,A7
                    1736   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1737          move.b    #255,4227112
000011FE  0040 8028 
                    1738   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1739   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1740          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1741          rts
                    1742   ; }
                    1743   ; void SPISendAddress(int c) {
                    1744   _SPISendAddress:
00001208  4E56 0000 1745          link      A6,#0
0000120C  48E7 2020 1746          movem.l   D2/A2,-(A7)
00001210  242E 0008 1747          move.l    8(A6),D2
00001214  45F8 10C4 1748          lea       _SPISafeWrite.L,A2
                    1749   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1750          move.l    D2,D1
0000121A  E081      1751          asr.l     #8,D1
0000121C  E081      1752          asr.l     #8,D1
0000121E  C2BC 0000 1753          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1754          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1755          move.l    D1,-(A7)
0000122C  4E92      1756          jsr       (A2)
0000122E  584F      1757          addq.w    #4,A7
                    1758   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1759          move.l    D2,D1
00001232  E081      1760          asr.l     #8,D1
00001234  C2BC 0000 1761          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1762          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1763          move.l    D1,-(A7)
00001242  4E92      1764          jsr       (A2)
00001244  584F      1765          addq.w    #4,A7
                    1766   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1767          move.l    D2,D1
00001248  C2BC 0000 1768          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1769          and.l     #255,D1
00001252  00FF      
00001254  2F01      1770          move.l    D1,-(A7)
00001256  4E92      1771          jsr       (A2)
00001258  584F      1772          addq.w    #4,A7
0000125A  4CDF 0404 1773          movem.l   (A7)+,D2/A2
0000125E  4E5E      1774          unlk      A6
00001260  4E75      1775          rts
                    1776   ; }
                    1777   ; void SPIFlashPageProgram(int addr) {
                    1778   _SPIFlashPageProgram:
00001262  4E56 FFF8 1779          link      A6,#-8
00001266  2F02      1780          move.l    D2,-(A7)
                    1781   ; unsigned char *sramMemoryPtr;
                    1782   ; int flashAddr = addr - 0x08000000;
00001268  202E 0008 1783          move.l    8(A6),D0
0000126C  0480 0800 1784          sub.l     #134217728,D0
00001270  0000      
00001272  2D40 FFFC 1785          move.l    D0,-4(A6)
                    1786   ; int i;
                    1787   ; SPI_CS = 0xFE;
00001276  13FC 00FE 1788          move.b    #254,4227112
0000127A  0040 8028 
                    1789   ; // NOTE: We should make the below 1 function called SPIFlashWriteCommand() or smthn like that
                    1790   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000127E  4878 0002 1791          pea       2
00001282  4EB8 10C4 1792          jsr       _SPISafeWrite
00001286  584F      1793          addq.w    #4,A7
                    1794   ; SPISendAddress(flashAddr);
00001288  2F2E FFFC 1795          move.l    -4(A6),-(A7)
0000128C  4EB8 1208 1796          jsr       _SPISendAddress
00001290  584F      1797          addq.w    #4,A7
                    1798   ; for (i = 0; i < 256; i++) {
00001292  4282      1799          clr.l     D2
                    1800   SPIFlashPageProgram_1:
00001294  0C82 0000 1801          cmp.l     #256,D2
00001298  0100      
0000129A  6C22      1802          bge.s     SPIFlashPageProgram_3
                    1803   ; sramMemoryPtr = (unsigned char*) (addr + i);
0000129C  202E 0008 1804          move.l    8(A6),D0
000012A0  D082      1805          add.l     D2,D0
000012A2  2D40 FFF8 1806          move.l    D0,-8(A6)
                    1807   ; WriteSPIChar(*sramMemoryPtr); // Random value for testing purposes
000012A6  206E FFF8 1808          move.l    -8(A6),A0
000012AA  1210      1809          move.b    (A0),D1
000012AC  C2BC 0000 1810          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1811          move.l    D1,-(A7)
000012B4  4EB8 11C2 1812          jsr       _WriteSPIChar
000012B8  584F      1813          addq.w    #4,A7
000012BA  5282      1814          addq.l    #1,D2
000012BC  60D6      1815          bra       SPIFlashPageProgram_1
                    1816   SPIFlashPageProgram_3:
                    1817   ; // printf("%02x ", *sramMemoryPtr);
                    1818   ; }
                    1819   ; // WriteSPIChar(0xAB); // Random value for testing purposes
                    1820   ; SPI_CS = 0xFF;
000012BE  13FC 00FF 1821          move.b    #255,4227112
000012C2  0040 8028 
                    1822   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1823   ; SPIFlashPollStatusBusy();
000012C6  4EB8 1188 1824          jsr       _SPIFlashPollStatusBusy
000012CA  241F      1825          move.l    (A7)+,D2
000012CC  4E5E      1826          unlk      A6
000012CE  4E75      1827          rts
                    1828   ; }
                    1829   ; void SPIFlashErase(void) {
                    1830   _SPIFlashErase:
                    1831   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1832   ; printf("\nErasing...\n");
000012D0  4879 0000 1833          pea       @m68kde~1_22.L
000012D4  454C      
000012D6  4EB9 0000 1834          jsr       _printf
000012DA  3954      
000012DC  584F      1835          addq.w    #4,A7
                    1836   ; SPI_CS = 0xFE;
000012DE  13FC 00FE 1837          move.b    #254,4227112
000012E2  0040 8028 
                    1838   ; SPISafeWrite(0xC7);
000012E6  4878 00C7 1839          pea       199
000012EA  4EB8 10C4 1840          jsr       _SPISafeWrite
000012EE  584F      1841          addq.w    #4,A7
                    1842   ; SPI_CS = 0xFF;
000012F0  13FC 00FF 1843          move.b    #255,4227112
000012F4  0040 8028 
                    1844   ; SPIFlashPollStatusBusy();
000012F8  4EB8 1188 1845          jsr       _SPIFlashPollStatusBusy
000012FC  4E75      1846          rts
                    1847   ; }
                    1848   ; int SPIFlashRead() {
                    1849   _SPIFlashRead:
000012FE  4E56 FFFC 1850          link      A6,#-4
00001302  48E7 3000 1851          movem.l   D2/D3,-(A7)
                    1852   ; unsigned char readData;
                    1853   ; unsigned char *sramMemoryPtr;
                    1854   ; int addr;
                    1855   ; ClearSPIReadFIFO();
00001306  4EB8 1130 1856          jsr       _ClearSPIReadFIFO
                    1857   ; SPI_CS = 0xFE;
0000130A  13FC 00FE 1858          move.b    #254,4227112
0000130E  0040 8028 
                    1859   ; SPISafeWrite(0x03);
00001312  4878 0003 1860          pea       3
00001316  4EB8 10C4 1861          jsr       _SPISafeWrite
0000131A  584F      1862          addq.w    #4,A7
                    1863   ; SPISendAddress(0x0);
0000131C  42A7      1864          clr.l     -(A7)
0000131E  4EB8 1208 1865          jsr       _SPISendAddress
00001322  584F      1866          addq.w    #4,A7
                    1867   ; for (addr = 0x08000000; addr < (0x08040000); addr ++) {
00001324  243C 0800 1868          move.l    #134217728,D2
00001328  0000      
                    1869   SPIFlashRead_1:
0000132A  0C82 0804 1870          cmp.l     #134479872,D2
0000132E  0000      
00001330  6C1A      1871          bge.s     SPIFlashRead_3
                    1872   ; sramMemoryPtr = (unsigned char*) addr;
00001332  2D42 FFFC 1873          move.l    D2,-4(A6)
                    1874   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001336  4878 00FF 1875          pea       255
0000133A  4EB8 10C4 1876          jsr       _SPISafeWrite
0000133E  584F      1877          addq.w    #4,A7
00001340  1600      1878          move.b    D0,D3
                    1879   ; // printf("%08x ", i);
                    1880   ; // if (i % 16 == 0) {
                    1881   ; //   printf("\r\n");
                    1882   ; // }
                    1883   ; *sramMemoryPtr = readData;
00001342  206E FFFC 1884          move.l    -4(A6),A0
00001346  1083      1885          move.b    D3,(A0)
00001348  5282      1886          addq.l    #1,D2
0000134A  60DE      1887          bra       SPIFlashRead_1
                    1888   SPIFlashRead_3:
                    1889   ; }
                    1890   ; SPI_CS = 0xFF;
0000134C  13FC 00FF 1891          move.b    #255,4227112
00001350  0040 8028 
                    1892   ; SPIFlashPollStatusBusy();
00001354  4EB8 1188 1893          jsr       _SPIFlashPollStatusBusy
                    1894   ; return readData;
00001358  C6BC 0000 1895          and.l     #255,D3
0000135C  00FF      
0000135E  2003      1896          move.l    D3,D0
00001360  4CDF 000C 1897          movem.l   (A7)+,D2/D3
00001364  4E5E      1898          unlk      A6
00001366  4E75      1899          rts
                    1900   ; }
                    1901   ; /*******************************************************************
                    1902   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1903   ; ********************************************************************/
                    1904   ; void ProgramFlashChip(void)
                    1905   ; {
                    1906   _ProgramFlashChip:
00001368  2F02      1907          move.l    D2,-(A7)
                    1908   ; int addr;
                    1909   ; //
                    1910   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1911   ; // TODO : then verify by reading it back and comparing to memory
                    1912   ; //
                    1913   ; SPIFlashPollStatusBusy();
0000136A  4EB8 1188 1914          jsr       _SPIFlashPollStatusBusy
                    1915   ; SPIFlashWriteEnable();
0000136E  4EB8 11E8 1916          jsr       _SPIFlashWriteEnable
                    1917   ; SPIFlashErase();
00001372  4EB8 12D0 1918          jsr       _SPIFlashErase
                    1919   ; // 256KB = 262144 bytes (0x40000)
                    1920   ; // We need to write one page at a time (256 bytes at a time)
                    1921   ; // This code writes the user program from DRAM to FLASH
                    1922   ; printf("\r\n Starting Programming...");
00001376  4879 0000 1923          pea       @m68kde~1_23.L
0000137A  455A      
0000137C  4EB9 0000 1924          jsr       _printf
00001380  3954      
00001382  584F      1925          addq.w    #4,A7
                    1926   ; for (addr = 0x08000000; addr < (0x08040000); addr += 256) {
00001384  243C 0800 1927          move.l    #134217728,D2
00001388  0000      
                    1928   ProgramFlashChip_1:
0000138A  0C82 0804 1929          cmp.l     #134479872,D2
0000138E  0000      
00001390  6C14      1930          bge.s     ProgramFlashChip_3
                    1931   ; SPIFlashWriteEnable(); 
00001392  4EB8 11E8 1932          jsr       _SPIFlashWriteEnable
                    1933   ; // printf("\r\n Addr: %08x \n", addr);
                    1934   ; SPIFlashPageProgram(addr);
00001396  2F02      1935          move.l    D2,-(A7)
00001398  4EB8 1262 1936          jsr       _SPIFlashPageProgram
0000139C  584F      1937          addq.w    #4,A7
0000139E  0682 0000 1938          add.l     #256,D2
000013A2  0100      
000013A4  60E4      1939          bra       ProgramFlashChip_1
                    1940   ProgramFlashChip_3:
                    1941   ; }
                    1942   ; printf("\r\n Programming Complete!");
000013A6  4879 0000 1943          pea       @m68kde~1_24.L
000013AA  4576      
000013AC  4EB9 0000 1944          jsr       _printf
000013B0  3954      
000013B2  584F      1945          addq.w    #4,A7
000013B4  241F      1946          move.l    (A7)+,D2
000013B6  4E75      1947          rts
                    1948   ; }
                    1949   ; /*************************************************************************
                    1950   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1951   ; **************************************************************************/
                    1952   ; void LoadFromFlashChip(void)
                    1953   ; {
                    1954   _LoadFromFlashChip:
000013B8  4E56 FFFC 1955          link      A6,#-4
                    1956   ; int readData;
                    1957   ; printf("\r\n Loading Program From SPI Flash....") ;
000013BC  4879 0000 1958          pea       @m68kde~1_25.L
000013C0  4590      
000013C2  4EB9 0000 1959          jsr       _printf
000013C6  3954      
000013C8  584F      1960          addq.w    #4,A7
                    1961   ; SPIFlashPollStatusBusy();
000013CA  4EB8 1188 1962          jsr       _SPIFlashPollStatusBusy
                    1963   ; readData = SPIFlashRead();
000013CE  4EB8 12FE 1964          jsr       _SPIFlashRead
000013D2  2D40 FFFC 1965          move.l    D0,-4(A6)
                    1966   ; printf("\r\n Read Data: %08x \n", readData);
000013D6  2F2E FFFC 1967          move.l    -4(A6),-(A7)
000013DA  4879 0000 1968          pea       @m68kde~1_26.L
000013DE  45B6      
000013E0  4EB9 0000 1969          jsr       _printf
000013E4  3954      
000013E6  504F      1970          addq.w    #8,A7
000013E8  4E5E      1971          unlk      A6
000013EA  4E75      1972          rts
                    1973   ; // Reading single byte works
                    1974   ; // TODO: Read multi-byte and then read the entire program that we copied over to flash
                    1975   ; //
                    1976   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1977   ; //
                    1978   ; }
                    1979   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1980   ; // IMPORTANT
                    1981   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1982   ; // has to be done with an interrupt (IRQ Level 6)
                    1983   ; //
                    1984   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1985   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1986   ; //
                    1987   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1988   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1989   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1990   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1991   ; // program area
                    1992   ; //
                    1993   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1994   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1995   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1996   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1997   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1998   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1999   ; void DumpRegisters()
                    2000   ; {
                    2001   _DumpRegisters:
000013EC  48E7 3F3C 2002          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000013F0  45F9 0000 2003          lea       _putch.L,A2
000013F4  2F98      
000013F6  47F9 0000 2004          lea       _printf.L,A3
000013FA  3954      
000013FC  49F9 0B00 2005          lea       _SR.L,A4
00001400  012C      
00001402  4BF9 0B00 2006          lea       _WatchPointString.L,A5
00001406  01C2      
                    2007   ; short i, x, j, k ;
                    2008   ; unsigned char c, *BytePointer;
                    2009   ; // buld up strings for displaying watchpoints
                    2010   ; for(x = 0; x < (short)(8); x++)
00001408  4242      2011          clr.w     D2
                    2012   DumpRegisters_1:
0000140A  0C42 0008 2013          cmp.w     #8,D2
0000140E  6C00 01C6 2014          bge       DumpRegisters_3
                    2015   ; {
                    2016   ; if(WatchPointSetOrCleared[x] == 1)
00001412  48C2      2017          ext.l     D2
00001414  2002      2018          move.l    D2,D0
00001416  E588      2019          lsl.l     #2,D0
00001418  41F9 0B00 2020          lea       _WatchPointSetOrCleared.L,A0
0000141C  01A2      
0000141E  2030 0800 2021          move.l    0(A0,D0.L),D0
00001422  0C80 0000 2022          cmp.l     #1,D0
00001426  0001      
00001428  6600 0186 2023          bne       DumpRegisters_4
                    2024   ; {
                    2025   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000142C  48C2      2026          ext.l     D2
0000142E  2202      2027          move.l    D2,D1
00001430  E589      2028          lsl.l     #2,D1
00001432  41F9 0B00 2029          lea       _WatchPointAddress.L,A0
00001436  0182      
00001438  2F30 1800 2030          move.l    0(A0,D1.L),-(A7)
0000143C  4879 0000 2031          pea       @m68kde~1_27.L
00001440  45CC      
00001442  220D      2032          move.l    A5,D1
00001444  48C2      2033          ext.l     D2
00001446  2F00      2034          move.l    D0,-(A7)
00001448  2002      2035          move.l    D2,D0
0000144A  C1FC 0064 2036          muls      #100,D0
0000144E  D280      2037          add.l     D0,D1
00001450  201F      2038          move.l    (A7)+,D0
00001452  2F01      2039          move.l    D1,-(A7)
00001454  4EB9 0000 2040          jsr       _sprintf
00001458  3030      
0000145A  DEFC 000C 2041          add.w     #12,A7
                    2042   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000145E  48C2      2043          ext.l     D2
00001460  2002      2044          move.l    D2,D0
00001462  E588      2045          lsl.l     #2,D0
00001464  41F9 0B00 2046          lea       _WatchPointAddress.L,A0
00001468  0182      
0000146A  2A30 0800 2047          move.l    0(A0,D0.L),D5
                    2048   ; for(j = 0; j < (short)(16); j+=2)
0000146E  4243      2049          clr.w     D3
                    2050   DumpRegisters_6:
00001470  0C43 0010 2051          cmp.w     #16,D3
00001474  6C00 0082 2052          bge       DumpRegisters_8
                    2053   ; {
                    2054   ; for(k = 0; k < (short)(2); k++)
00001478  4246      2055          clr.w     D6
                    2056   DumpRegisters_9:
0000147A  0C46 0002 2057          cmp.w     #2,D6
0000147E  6C00 0052 2058          bge       DumpRegisters_11
                    2059   ; {
                    2060   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001482  2045      2061          move.l    D5,A0
00001484  48C3      2062          ext.l     D3
00001486  2203      2063          move.l    D3,D1
00001488  48C6      2064          ext.l     D6
0000148A  D286      2065          add.l     D6,D1
0000148C  1230 1800 2066          move.b    0(A0,D1.L),D1
00001490  C2BC 0000 2067          and.l     #255,D1
00001494  00FF      
00001496  2F01      2068          move.l    D1,-(A7)
00001498  4879 0000 2069          pea       @m68kde~1_8.L
0000149C  43A2      
0000149E  4879 0B00 2070          pea       _TempString.L
000014A2  04E2      
000014A4  4EB9 0000 2071          jsr       _sprintf
000014A8  3030      
000014AA  DEFC 000C 2072          add.w     #12,A7
                    2073   ; strcat(WatchPointString[x], TempString) ;
000014AE  4879 0B00 2074          pea       _TempString.L
000014B2  04E2      
000014B4  220D      2075          move.l    A5,D1
000014B6  48C2      2076          ext.l     D2
000014B8  2F00      2077          move.l    D0,-(A7)
000014BA  2002      2078          move.l    D2,D0
000014BC  C1FC 0064 2079          muls      #100,D0
000014C0  D280      2080          add.l     D0,D1
000014C2  201F      2081          move.l    (A7)+,D0
000014C4  2F01      2082          move.l    D1,-(A7)
000014C6  4EB9 0000 2083          jsr       _strcat
000014CA  307C      
000014CC  504F      2084          addq.w    #8,A7
000014CE  5246      2085          addq.w    #1,D6
000014D0  60A8      2086          bra       DumpRegisters_9
                    2087   DumpRegisters_11:
                    2088   ; }
                    2089   ; strcat(WatchPointString[x]," ") ;
000014D2  4879 0000 2090          pea       @m68kde~1_28.L
000014D6  45D4      
000014D8  220D      2091          move.l    A5,D1
000014DA  48C2      2092          ext.l     D2
000014DC  2F00      2093          move.l    D0,-(A7)
000014DE  2002      2094          move.l    D2,D0
000014E0  C1FC 0064 2095          muls      #100,D0
000014E4  D280      2096          add.l     D0,D1
000014E6  201F      2097          move.l    (A7)+,D0
000014E8  2F01      2098          move.l    D1,-(A7)
000014EA  4EB9 0000 2099          jsr       _strcat
000014EE  307C      
000014F0  504F      2100          addq.w    #8,A7
000014F2  5443      2101          addq.w    #2,D3
000014F4  6000 FF7A 2102          bra       DumpRegisters_6
                    2103   DumpRegisters_8:
                    2104   ; }
                    2105   ; strcat(WatchPointString[x], "  ") ;
000014F8  4879 0000 2106          pea       @m68kde~1_9.L
000014FC  43A8      
000014FE  220D      2107          move.l    A5,D1
00001500  48C2      2108          ext.l     D2
00001502  2F00      2109          move.l    D0,-(A7)
00001504  2002      2110          move.l    D2,D0
00001506  C1FC 0064 2111          muls      #100,D0
0000150A  D280      2112          add.l     D0,D1
0000150C  201F      2113          move.l    (A7)+,D0
0000150E  2F01      2114          move.l    D1,-(A7)
00001510  4EB9 0000 2115          jsr       _strcat
00001514  307C      
00001516  504F      2116          addq.w    #8,A7
                    2117   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001518  48C2      2118          ext.l     D2
0000151A  2002      2119          move.l    D2,D0
0000151C  E588      2120          lsl.l     #2,D0
0000151E  41F9 0B00 2121          lea       _WatchPointAddress.L,A0
00001522  0182      
00001524  2A30 0800 2122          move.l    0(A0,D0.L),D5
                    2123   ; for(j = 0; j < (short)(16); j++)
00001528  4243      2124          clr.w     D3
                    2125   DumpRegisters_12:
0000152A  0C43 0010 2126          cmp.w     #16,D3
0000152E  6C00 007E 2127          bge       DumpRegisters_14
                    2128   ; {
                    2129   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001532  2045      2130          move.l    D5,A0
00001534  48C3      2131          ext.l     D3
00001536  1030 3800 2132          move.b    0(A0,D3.L),D0
0000153A  C03C 007F 2133          and.b     #127,D0
0000153E  1E00      2134          move.b    D0,D7
                    2135   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001540  0C07 007F 2136          cmp.b     #127,D7
00001544  6206      2137          bhi.s     DumpRegisters_17
00001546  0C07 0020 2138          cmp.b     #32,D7
0000154A  6416      2139          bhs.s     DumpRegisters_15
                    2140   DumpRegisters_17:
                    2141   ; sprintf(TempString, ".") ;
0000154C  4879 0000 2142          pea       @m68kde~1_29.L
00001550  45D6      
00001552  4879 0B00 2143          pea       _TempString.L
00001556  04E2      
00001558  4EB9 0000 2144          jsr       _sprintf
0000155C  3030      
0000155E  504F      2145          addq.w    #8,A7
00001560  6026      2146          bra.s     DumpRegisters_16
                    2147   DumpRegisters_15:
                    2148   ; else
                    2149   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001562  2045      2150          move.l    D5,A0
00001564  48C3      2151          ext.l     D3
00001566  1230 3800 2152          move.b    0(A0,D3.L),D1
0000156A  C2BC 0000 2153          and.l     #255,D1
0000156E  00FF      
00001570  2F01      2154          move.l    D1,-(A7)
00001572  4879 0000 2155          pea       @m68kde~1_30.L
00001576  45D8      
00001578  4879 0B00 2156          pea       _TempString.L
0000157C  04E2      
0000157E  4EB9 0000 2157          jsr       _sprintf
00001582  3030      
00001584  DEFC 000C 2158          add.w     #12,A7
                    2159   DumpRegisters_16:
                    2160   ; strcat(WatchPointString[x], TempString) ;
00001588  4879 0B00 2161          pea       _TempString.L
0000158C  04E2      
0000158E  220D      2162          move.l    A5,D1
00001590  48C2      2163          ext.l     D2
00001592  2F00      2164          move.l    D0,-(A7)
00001594  2002      2165          move.l    D2,D0
00001596  C1FC 0064 2166          muls      #100,D0
0000159A  D280      2167          add.l     D0,D1
0000159C  201F      2168          move.l    (A7)+,D0
0000159E  2F01      2169          move.l    D1,-(A7)
000015A0  4EB9 0000 2170          jsr       _strcat
000015A4  307C      
000015A6  504F      2171          addq.w    #8,A7
000015A8  5243      2172          addq.w    #1,D3
000015AA  6000 FF7E 2173          bra       DumpRegisters_12
                    2174   DumpRegisters_14:
000015AE  6020      2175          bra.s     DumpRegisters_5
                    2176   DumpRegisters_4:
                    2177   ; }
                    2178   ; }
                    2179   ; else
                    2180   ; strcpy(WatchPointString[x], "") ;
000015B0  4879 0000 2181          pea       @m68kde~1_31.L
000015B4  45DC      
000015B6  220D      2182          move.l    A5,D1
000015B8  48C2      2183          ext.l     D2
000015BA  2F00      2184          move.l    D0,-(A7)
000015BC  2002      2185          move.l    D2,D0
000015BE  C1FC 0064 2186          muls      #100,D0
000015C2  D280      2187          add.l     D0,D1
000015C4  201F      2188          move.l    (A7)+,D0
000015C6  2F01      2189          move.l    D1,-(A7)
000015C8  4EB9 0000 2190          jsr       _strcpy
000015CC  2EAA      
000015CE  504F      2191          addq.w    #8,A7
                    2192   DumpRegisters_5:
000015D0  5242      2193          addq.w    #1,D2
000015D2  6000 FE36 2194          bra       DumpRegisters_1
                    2195   DumpRegisters_3:
                    2196   ; }
                    2197   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000015D6  2F39 0B00 2198          move.l    _a0.L,-(A7)
000015DA  0104      
000015DC  2F39 0B00 2199          move.l    _d0.L,-(A7)
000015E0  00E4      
000015E2  4879 0000 2200          pea       @m68kde~1_32.L
000015E6  45DE      
000015E8  4E93      2201          jsr       (A3)
000015EA  DEFC 000C 2202          add.w     #12,A7
                    2203   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000015EE  2F39 0B00 2204          move.l    _a1.L,-(A7)
000015F2  0108      
000015F4  2F39 0B00 2205          move.l    _d1.L,-(A7)
000015F8  00E8      
000015FA  4879 0000 2206          pea       @m68kde~1_33.L
000015FE  45FA      
00001600  4E93      2207          jsr       (A3)
00001602  DEFC 000C 2208          add.w     #12,A7
                    2209   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001606  2F39 0B00 2210          move.l    _a2.L,-(A7)
0000160A  010C      
0000160C  2F39 0B00 2211          move.l    _d2.L,-(A7)
00001610  00EC      
00001612  4879 0000 2212          pea       @m68kde~1_34.L
00001616  4614      
00001618  4E93      2213          jsr       (A3)
0000161A  DEFC 000C 2214          add.w     #12,A7
                    2215   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
0000161E  2F39 0B00 2216          move.l    _a3.L,-(A7)
00001622  0110      
00001624  2F39 0B00 2217          move.l    _d3.L,-(A7)
00001628  00F0      
0000162A  4879 0000 2218          pea       @m68kde~1_35.L
0000162E  462E      
00001630  4E93      2219          jsr       (A3)
00001632  DEFC 000C 2220          add.w     #12,A7
                    2221   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001636  2F39 0B00 2222          move.l    _a4.L,-(A7)
0000163A  0114      
0000163C  2F39 0B00 2223          move.l    _d4.L,-(A7)
00001640  00F4      
00001642  4879 0000 2224          pea       @m68kde~1_36.L
00001646  4648      
00001648  4E93      2225          jsr       (A3)
0000164A  DEFC 000C 2226          add.w     #12,A7
                    2227   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
0000164E  2F39 0B00 2228          move.l    _a5.L,-(A7)
00001652  0118      
00001654  2F39 0B00 2229          move.l    _d5.L,-(A7)
00001658  00F8      
0000165A  4879 0000 2230          pea       @m68kde~1_37.L
0000165E  4662      
00001660  4E93      2231          jsr       (A3)
00001662  DEFC 000C 2232          add.w     #12,A7
                    2233   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001666  2F39 0B00 2234          move.l    _a6.L,-(A7)
0000166A  011C      
0000166C  2F39 0B00 2235          move.l    _d6.L,-(A7)
00001670  00FC      
00001672  4879 0000 2236          pea       @m68kde~1_38.L
00001676  467C      
00001678  4E93      2237          jsr       (A3)
0000167A  DEFC 000C 2238          add.w     #12,A7
                    2239   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
0000167E  3214      2240          move.w    (A4),D1
00001680  C27C 2000 2241          and.w     #8192,D1
00001684  0C41 2000 2242          cmp.w     #8192,D1
00001688  6608      2243          bne.s     DumpRegisters_18
0000168A  2239 0B00 2244          move.l    _SSP.L,D1
0000168E  0124      
00001690  6006      2245          bra.s     DumpRegisters_19
                    2246   DumpRegisters_18:
00001692  2239 0B00 2247          move.l    _USP.L,D1
00001696  0128      
                    2248   DumpRegisters_19:
00001698  2F01      2249          move.l    D1,-(A7)
0000169A  2F39 0B00 2250          move.l    _d7.L,-(A7)
0000169E  0100      
000016A0  4879 0000 2251          pea       @m68kde~1_39.L
000016A4  4696      
000016A6  4E93      2252          jsr       (A3)
000016A8  DEFC 000C 2253          add.w     #12,A7
                    2254   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
000016AC  2F39 0B00 2255          move.l    _USP.L,-(A7)
000016B0  0128      
000016B2  4879 0000 2256          pea       @m68kde~1_40.L
000016B6  46B0      
000016B8  4E93      2257          jsr       (A3)
000016BA  504F      2258          addq.w    #8,A7
                    2259   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000016BC  2F39 0B00 2260          move.l    _SSP.L,-(A7)
000016C0  0124      
000016C2  4879 0000 2261          pea       @m68kde~1_41.L
000016C6  46CE      
000016C8  4E93      2262          jsr       (A3)
000016CA  504F      2263          addq.w    #8,A7
                    2264   ; printf("\r\n SR = $%04X   ",SR) ;
000016CC  3214      2265          move.w    (A4),D1
000016CE  C2BC 0000 2266          and.l     #65535,D1
000016D2  FFFF      
000016D4  2F01      2267          move.l    D1,-(A7)
000016D6  4879 0000 2268          pea       @m68kde~1_42.L
000016DA  46F0      
000016DC  4E93      2269          jsr       (A3)
000016DE  504F      2270          addq.w    #8,A7
                    2271   ; // display the status word in characters etc.
                    2272   ; printf("   [") ;
000016E0  4879 0000 2273          pea       @m68kde~1_43.L
000016E4  4702      
000016E6  4E93      2274          jsr       (A3)
000016E8  584F      2275          addq.w    #4,A7
                    2276   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000016EA  3014      2277          move.w    (A4),D0
000016EC  C07C 8000 2278          and.w     #32768,D0
000016F0  0C40 8000 2279          cmp.w     #32768,D0
000016F4  660A      2280          bne.s     DumpRegisters_20
000016F6  4878 0054 2281          pea       84
000016FA  4E92      2282          jsr       (A2)
000016FC  584F      2283          addq.w    #4,A7
000016FE  6008      2284          bra.s     DumpRegisters_21
                    2285   DumpRegisters_20:
00001700  4878 002D 2286          pea       45
00001704  4E92      2287          jsr       (A2)
00001706  584F      2288          addq.w    #4,A7
                    2289   DumpRegisters_21:
                    2290   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001708  3014      2291          move.w    (A4),D0
0000170A  C07C 2000 2292          and.w     #8192,D0
0000170E  0C40 2000 2293          cmp.w     #8192,D0
00001712  660A      2294          bne.s     DumpRegisters_22
00001714  4878 0053 2295          pea       83
00001718  4E92      2296          jsr       (A2)
0000171A  584F      2297          addq.w    #4,A7
0000171C  6008      2298          bra.s     DumpRegisters_23
                    2299   DumpRegisters_22:
0000171E  4878 0055 2300          pea       85
00001722  4E92      2301          jsr       (A2)
00001724  584F      2302          addq.w    #4,A7
                    2303   DumpRegisters_23:
                    2304   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001726  3014      2305          move.w    (A4),D0
00001728  C07C 0400 2306          and.w     #1024,D0
0000172C  0C40 0400 2307          cmp.w     #1024,D0
00001730  660A      2308          bne.s     DumpRegisters_24
00001732  4878 0031 2309          pea       49
00001736  4E92      2310          jsr       (A2)
00001738  584F      2311          addq.w    #4,A7
0000173A  6008      2312          bra.s     DumpRegisters_25
                    2313   DumpRegisters_24:
0000173C  4878 0030 2314          pea       48
00001740  4E92      2315          jsr       (A2)
00001742  584F      2316          addq.w    #4,A7
                    2317   DumpRegisters_25:
                    2318   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001744  3014      2319          move.w    (A4),D0
00001746  C07C 0200 2320          and.w     #512,D0
0000174A  0C40 0200 2321          cmp.w     #512,D0
0000174E  660A      2322          bne.s     DumpRegisters_26
00001750  4878 0031 2323          pea       49
00001754  4E92      2324          jsr       (A2)
00001756  584F      2325          addq.w    #4,A7
00001758  6008      2326          bra.s     DumpRegisters_27
                    2327   DumpRegisters_26:
0000175A  4878 0030 2328          pea       48
0000175E  4E92      2329          jsr       (A2)
00001760  584F      2330          addq.w    #4,A7
                    2331   DumpRegisters_27:
                    2332   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001762  3014      2333          move.w    (A4),D0
00001764  C07C 0100 2334          and.w     #256,D0
00001768  0C40 0100 2335          cmp.w     #256,D0
0000176C  660A      2336          bne.s     DumpRegisters_28
0000176E  4878 0031 2337          pea       49
00001772  4E92      2338          jsr       (A2)
00001774  584F      2339          addq.w    #4,A7
00001776  6008      2340          bra.s     DumpRegisters_29
                    2341   DumpRegisters_28:
00001778  4878 0030 2342          pea       48
0000177C  4E92      2343          jsr       (A2)
0000177E  584F      2344          addq.w    #4,A7
                    2345   DumpRegisters_29:
                    2346   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001780  3014      2347          move.w    (A4),D0
00001782  C07C 0010 2348          and.w     #16,D0
00001786  0C40 0010 2349          cmp.w     #16,D0
0000178A  660A      2350          bne.s     DumpRegisters_30
0000178C  4878 0058 2351          pea       88
00001790  4E92      2352          jsr       (A2)
00001792  584F      2353          addq.w    #4,A7
00001794  6008      2354          bra.s     DumpRegisters_31
                    2355   DumpRegisters_30:
00001796  4878 002D 2356          pea       45
0000179A  4E92      2357          jsr       (A2)
0000179C  584F      2358          addq.w    #4,A7
                    2359   DumpRegisters_31:
                    2360   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
0000179E  3014      2361          move.w    (A4),D0
000017A0  C07C 0008 2362          and.w     #8,D0
000017A4  0C40 0008 2363          cmp.w     #8,D0
000017A8  660A      2364          bne.s     DumpRegisters_32
000017AA  4878 004E 2365          pea       78
000017AE  4E92      2366          jsr       (A2)
000017B0  584F      2367          addq.w    #4,A7
000017B2  6008      2368          bra.s     DumpRegisters_33
                    2369   DumpRegisters_32:
000017B4  4878 002D 2370          pea       45
000017B8  4E92      2371          jsr       (A2)
000017BA  584F      2372          addq.w    #4,A7
                    2373   DumpRegisters_33:
                    2374   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000017BC  3014      2375          move.w    (A4),D0
000017BE  C07C 0004 2376          and.w     #4,D0
000017C2  0C40 0004 2377          cmp.w     #4,D0
000017C6  660A      2378          bne.s     DumpRegisters_34
000017C8  4878 005A 2379          pea       90
000017CC  4E92      2380          jsr       (A2)
000017CE  584F      2381          addq.w    #4,A7
000017D0  6008      2382          bra.s     DumpRegisters_35
                    2383   DumpRegisters_34:
000017D2  4878 002D 2384          pea       45
000017D6  4E92      2385          jsr       (A2)
000017D8  584F      2386          addq.w    #4,A7
                    2387   DumpRegisters_35:
                    2388   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000017DA  3014      2389          move.w    (A4),D0
000017DC  C07C 0002 2390          and.w     #2,D0
000017E0  0C40 0002 2391          cmp.w     #2,D0
000017E4  660A      2392          bne.s     DumpRegisters_36
000017E6  4878 0056 2393          pea       86
000017EA  4E92      2394          jsr       (A2)
000017EC  584F      2395          addq.w    #4,A7
000017EE  6008      2396          bra.s     DumpRegisters_37
                    2397   DumpRegisters_36:
000017F0  4878 002D 2398          pea       45
000017F4  4E92      2399          jsr       (A2)
000017F6  584F      2400          addq.w    #4,A7
                    2401   DumpRegisters_37:
                    2402   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000017F8  3014      2403          move.w    (A4),D0
000017FA  C07C 0001 2404          and.w     #1,D0
000017FE  0C40 0001 2405          cmp.w     #1,D0
00001802  660A      2406          bne.s     DumpRegisters_38
00001804  4878 0043 2407          pea       67
00001808  4E92      2408          jsr       (A2)
0000180A  584F      2409          addq.w    #4,A7
0000180C  6008      2410          bra.s     DumpRegisters_39
                    2411   DumpRegisters_38:
0000180E  4878 002D 2412          pea       45
00001812  4E92      2413          jsr       (A2)
00001814  584F      2414          addq.w    #4,A7
                    2415   DumpRegisters_39:
                    2416   ; putchar(']') ;
00001816  4878 005D 2417          pea       93
0000181A  4E92      2418          jsr       (A2)
0000181C  584F      2419          addq.w    #4,A7
                    2420   ; printf("\r\n PC = $%08X  ", PC) ;
0000181E  2F39 0B00 2421          move.l    _PC.L,-(A7)
00001822  0120      
00001824  4879 0000 2422          pea       @m68kde~1_44.L
00001828  4708      
0000182A  4E93      2423          jsr       (A3)
0000182C  504F      2424          addq.w    #8,A7
                    2425   ; if(*(unsigned short int *)(PC) == 0x4e4e)
0000182E  2039 0B00 2426          move.l    _PC.L,D0
00001832  0120      
00001834  2040      2427          move.l    D0,A0
00001836  3010      2428          move.w    (A0),D0
00001838  0C40 4E4E 2429          cmp.w     #20046,D0
0000183C  660A      2430          bne.s     DumpRegisters_40
                    2431   ; printf("[@ BREAKPOINT]") ;
0000183E  4879 0000 2432          pea       @m68kde~1_45.L
00001842  4718      
00001844  4E93      2433          jsr       (A3)
00001846  584F      2434          addq.w    #4,A7
                    2435   DumpRegisters_40:
                    2436   ; printf("\r\n") ;
00001848  4879 0000 2437          pea       @m68kde~1_1.L
0000184C  432A      
0000184E  4E93      2438          jsr       (A3)
00001850  584F      2439          addq.w    #4,A7
                    2440   ; for(i=0; i < 8; i++)    {
00001852  4244      2441          clr.w     D4
                    2442   DumpRegisters_42:
00001854  0C44 0008 2443          cmp.w     #8,D4
00001858  6C00 0040 2444          bge       DumpRegisters_44
                    2445   ; if(WatchPointSetOrCleared[i] == 1)
0000185C  48C4      2446          ext.l     D4
0000185E  2004      2447          move.l    D4,D0
00001860  E588      2448          lsl.l     #2,D0
00001862  41F9 0B00 2449          lea       _WatchPointSetOrCleared.L,A0
00001866  01A2      
00001868  2030 0800 2450          move.l    0(A0,D0.L),D0
0000186C  0C80 0000 2451          cmp.l     #1,D0
00001870  0001      
00001872  6622      2452          bne.s     DumpRegisters_45
                    2453   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001874  220D      2454          move.l    A5,D1
00001876  48C4      2455          ext.l     D4
00001878  2F00      2456          move.l    D0,-(A7)
0000187A  2004      2457          move.l    D4,D0
0000187C  C1FC 0064 2458          muls      #100,D0
00001880  D280      2459          add.l     D0,D1
00001882  201F      2460          move.l    (A7)+,D0
00001884  2F01      2461          move.l    D1,-(A7)
00001886  48C4      2462          ext.l     D4
00001888  2F04      2463          move.l    D4,-(A7)
0000188A  4879 0000 2464          pea       @m68kde~1_46.L
0000188E  4728      
00001890  4E93      2465          jsr       (A3)
00001892  DEFC 000C 2466          add.w     #12,A7
                    2467   DumpRegisters_45:
00001896  5244      2468          addq.w    #1,D4
00001898  60BA      2469          bra       DumpRegisters_42
                    2470   DumpRegisters_44:
0000189A  4CDF 3CFC 2471          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000189E  4E75      2472          rts
                    2473   ; }
                    2474   ; }
                    2475   ; // Trace Exception Handler
                    2476   ; void DumpRegistersandPause(void)
                    2477   ; {
                    2478   _DumpRegistersandPause:
000018A0  2F0A      2479          move.l    A2,-(A7)
000018A2  45F9 0000 2480          lea       _printf.L,A2
000018A6  3954      
                    2481   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
000018A8  4879 0000 2482          pea       @m68kde~1_47.L
000018AC  4734      
000018AE  4E92      2483          jsr       (A2)
000018B0  584F      2484          addq.w    #4,A7
                    2485   ; printf("\r\nBreak Points :[Disabled]") ;
000018B2  4879 0000 2486          pea       @m68kde~1_48.L
000018B6  4754      
000018B8  4E92      2487          jsr       (A2)
000018BA  584F      2488          addq.w    #4,A7
                    2489   ; DumpRegisters() ;
000018BC  4EB8 13EC 2490          jsr       _DumpRegisters
                    2491   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000018C0  4879 0000 2492          pea       @m68kde~1_49.L
000018C4  4770      
000018C6  4E92      2493          jsr       (A2)
000018C8  584F      2494          addq.w    #4,A7
                    2495   ; printf("\r\nPress <ESC> to Resume Program") ;
000018CA  4879 0000 2496          pea       @m68kde~1_50.L
000018CE  479C      
000018D0  4E92      2497          jsr       (A2)
000018D2  584F      2498          addq.w    #4,A7
                    2499   ; menu() ;
000018D4  4EB9 0000 2500          jsr       _menu
000018D8  2484      
000018DA  245F      2501          move.l    (A7)+,A2
000018DC  4E75      2502          rts
                    2503   ; }
                    2504   ; void ChangeRegisters(void)
                    2505   ; {
                    2506   _ChangeRegisters:
000018DE  4E56 FFFC 2507          link      A6,#-4
000018E2  48E7 303C 2508          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000018E6  45F9 0000 2509          lea       _printf.L,A2
000018EA  3954      
000018EC  47EE FFFC 2510          lea       -4(A6),A3
000018F0  49F8 0CA4 2511          lea       _Get8HexDigits.L,A4
000018F4  4BF8 0B68 2512          lea       __getch.L,A5
                    2513   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2514   ; int reg_val ;
                    2515   ; char c, reg[3] ;
                    2516   ; reg[0] = tolower(_getch()) ;
000018F8  2F00      2517          move.l    D0,-(A7)
000018FA  4E95      2518          jsr       (A5)
000018FC  2200      2519          move.l    D0,D1
000018FE  201F      2520          move.l    (A7)+,D0
00001900  2F01      2521          move.l    D1,-(A7)
00001902  4EB9 0000 2522          jsr       _tolower
00001906  3004      
00001908  584F      2523          addq.w    #4,A7
0000190A  1680      2524          move.b    D0,(A3)
                    2525   ; reg[1] = c = tolower(_getch()) ;
0000190C  2F00      2526          move.l    D0,-(A7)
0000190E  4E95      2527          jsr       (A5)
00001910  2200      2528          move.l    D0,D1
00001912  201F      2529          move.l    (A7)+,D0
00001914  2F01      2530          move.l    D1,-(A7)
00001916  4EB9 0000 2531          jsr       _tolower
0000191A  3004      
0000191C  584F      2532          addq.w    #4,A7
0000191E  1400      2533          move.b    D0,D2
00001920  1740 0001 2534          move.b    D0,1(A3)
                    2535   ; if(reg[0] == (char)('d'))  {    // change data register
00001924  1013      2536          move.b    (A3),D0
00001926  0C00 0064 2537          cmp.b     #100,D0
0000192A  6600 00AE 2538          bne       ChangeRegisters_1
                    2539   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
0000192E  102B 0001 2540          move.b    1(A3),D0
00001932  0C00 0037 2541          cmp.b     #55,D0
00001936  6E0A      2542          bgt.s     ChangeRegisters_5
00001938  102B 0001 2543          move.b    1(A3),D0
0000193C  0C00 0030 2544          cmp.b     #48,D0
00001940  6C0E      2545          bge.s     ChangeRegisters_3
                    2546   ChangeRegisters_5:
                    2547   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001942  4879 0000 2548          pea       @m68kde~1_51.L
00001946  47BC      
00001948  4E92      2549          jsr       (A2)
0000194A  584F      2550          addq.w    #4,A7
                    2551   ; return ;
0000194C  6000 0244 2552          bra       ChangeRegisters_6
                    2553   ChangeRegisters_3:
                    2554   ; }
                    2555   ; else {
                    2556   ; printf("\r\nD%c = ", c) ;
00001950  4882      2557          ext.w     D2
00001952  48C2      2558          ext.l     D2
00001954  2F02      2559          move.l    D2,-(A7)
00001956  4879 0000 2560          pea       @m68kde~1_52.L
0000195A  47E8      
0000195C  4E92      2561          jsr       (A2)
0000195E  504F      2562          addq.w    #8,A7
                    2563   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001960  42A7      2564          clr.l     -(A7)
00001962  4E94      2565          jsr       (A4)
00001964  584F      2566          addq.w    #4,A7
00001966  2600      2567          move.l    D0,D3
                    2568   ; }
                    2569   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2570   ; if(c == (char)('0'))
00001968  0C02 0030 2571          cmp.b     #48,D2
0000196C  660A      2572          bne.s     ChangeRegisters_7
                    2573   ; d0 = reg_val ;
0000196E  23C3 0B00 2574          move.l    D3,_d0.L
00001972  00E4      
00001974  6000 0060 2575          bra       ChangeRegisters_20
                    2576   ChangeRegisters_7:
                    2577   ; else if(c == (char)('1'))
00001978  0C02 0031 2578          cmp.b     #49,D2
0000197C  660A      2579          bne.s     ChangeRegisters_9
                    2580   ; d1 = reg_val ;
0000197E  23C3 0B00 2581          move.l    D3,_d1.L
00001982  00E8      
00001984  6000 0050 2582          bra       ChangeRegisters_20
                    2583   ChangeRegisters_9:
                    2584   ; else if(c == (char)('2'))
00001988  0C02 0032 2585          cmp.b     #50,D2
0000198C  660A      2586          bne.s     ChangeRegisters_11
                    2587   ; d2 = reg_val ;
0000198E  23C3 0B00 2588          move.l    D3,_d2.L
00001992  00EC      
00001994  6000 0040 2589          bra       ChangeRegisters_20
                    2590   ChangeRegisters_11:
                    2591   ; else if(c == (char)('3'))
00001998  0C02 0033 2592          cmp.b     #51,D2
0000199C  6608      2593          bne.s     ChangeRegisters_13
                    2594   ; d3 = reg_val ;
0000199E  23C3 0B00 2595          move.l    D3,_d3.L
000019A2  00F0      
000019A4  6030      2596          bra.s     ChangeRegisters_20
                    2597   ChangeRegisters_13:
                    2598   ; else if(c == (char)('4'))
000019A6  0C02 0034 2599          cmp.b     #52,D2
000019AA  6608      2600          bne.s     ChangeRegisters_15
                    2601   ; d4 = reg_val ;
000019AC  23C3 0B00 2602          move.l    D3,_d4.L
000019B0  00F4      
000019B2  6022      2603          bra.s     ChangeRegisters_20
                    2604   ChangeRegisters_15:
                    2605   ; else if(c == (char)('5'))
000019B4  0C02 0035 2606          cmp.b     #53,D2
000019B8  6608      2607          bne.s     ChangeRegisters_17
                    2608   ; d5 = reg_val ;
000019BA  23C3 0B00 2609          move.l    D3,_d5.L
000019BE  00F8      
000019C0  6014      2610          bra.s     ChangeRegisters_20
                    2611   ChangeRegisters_17:
                    2612   ; else if(c == (char)('6'))
000019C2  0C02 0036 2613          cmp.b     #54,D2
000019C6  6608      2614          bne.s     ChangeRegisters_19
                    2615   ; d6 = reg_val ;
000019C8  23C3 0B00 2616          move.l    D3,_d6.L
000019CC  00FC      
000019CE  6006      2617          bra.s     ChangeRegisters_20
                    2618   ChangeRegisters_19:
                    2619   ; else
                    2620   ; d7 = reg_val ;
000019D0  23C3 0B00 2621          move.l    D3,_d7.L
000019D4  0100      
                    2622   ChangeRegisters_20:
000019D6  6000 01B6 2623          bra       ChangeRegisters_51
                    2624   ChangeRegisters_1:
                    2625   ; }
                    2626   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000019DA  1013      2627          move.b    (A3),D0
000019DC  0C00 0061 2628          cmp.b     #97,D0
000019E0  6600 00A6 2629          bne       ChangeRegisters_21
                    2630   ; if((c > (char)('7')) || (c < (char)('0'))) {
000019E4  0C02 0037 2631          cmp.b     #55,D2
000019E8  6E06      2632          bgt.s     ChangeRegisters_25
000019EA  0C02 0030 2633          cmp.b     #48,D2
000019EE  6C0E      2634          bge.s     ChangeRegisters_23
                    2635   ChangeRegisters_25:
                    2636   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000019F0  4879 0000 2637          pea       @m68kde~1_53.L
000019F4  47F2      
000019F6  4E92      2638          jsr       (A2)
000019F8  584F      2639          addq.w    #4,A7
                    2640   ; return ;
000019FA  6000 0196 2641          bra       ChangeRegisters_6
                    2642   ChangeRegisters_23:
                    2643   ; }
                    2644   ; else {
                    2645   ; printf("\r\nA%c = ", c) ;
000019FE  4882      2646          ext.w     D2
00001A00  48C2      2647          ext.l     D2
00001A02  2F02      2648          move.l    D2,-(A7)
00001A04  4879 0000 2649          pea       @m68kde~1_54.L
00001A08  4820      
00001A0A  4E92      2650          jsr       (A2)
00001A0C  504F      2651          addq.w    #8,A7
                    2652   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A0E  42A7      2653          clr.l     -(A7)
00001A10  4E94      2654          jsr       (A4)
00001A12  584F      2655          addq.w    #4,A7
00001A14  2600      2656          move.l    D0,D3
                    2657   ; }
                    2658   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2659   ; if(c == (char)('0'))
00001A16  0C02 0030 2660          cmp.b     #48,D2
00001A1A  660A      2661          bne.s     ChangeRegisters_26
                    2662   ; a0 = reg_val ;
00001A1C  23C3 0B00 2663          move.l    D3,_a0.L
00001A20  0104      
00001A22  6000 0060 2664          bra       ChangeRegisters_39
                    2665   ChangeRegisters_26:
                    2666   ; else if(c == (char)('1'))
00001A26  0C02 0031 2667          cmp.b     #49,D2
00001A2A  660A      2668          bne.s     ChangeRegisters_28
                    2669   ; a1 = reg_val ;
00001A2C  23C3 0B00 2670          move.l    D3,_a1.L
00001A30  0108      
00001A32  6000 0050 2671          bra       ChangeRegisters_39
                    2672   ChangeRegisters_28:
                    2673   ; else if(c == (char)('2'))
00001A36  0C02 0032 2674          cmp.b     #50,D2
00001A3A  660A      2675          bne.s     ChangeRegisters_30
                    2676   ; a2 = reg_val ;
00001A3C  23C3 0B00 2677          move.l    D3,_a2.L
00001A40  010C      
00001A42  6000 0040 2678          bra       ChangeRegisters_39
                    2679   ChangeRegisters_30:
                    2680   ; else if(c == (char)('3'))
00001A46  0C02 0033 2681          cmp.b     #51,D2
00001A4A  6608      2682          bne.s     ChangeRegisters_32
                    2683   ; a3 = reg_val ;
00001A4C  23C3 0B00 2684          move.l    D3,_a3.L
00001A50  0110      
00001A52  6030      2685          bra.s     ChangeRegisters_39
                    2686   ChangeRegisters_32:
                    2687   ; else if(c == (char)('4'))
00001A54  0C02 0034 2688          cmp.b     #52,D2
00001A58  6608      2689          bne.s     ChangeRegisters_34
                    2690   ; a4 = reg_val ;
00001A5A  23C3 0B00 2691          move.l    D3,_a4.L
00001A5E  0114      
00001A60  6022      2692          bra.s     ChangeRegisters_39
                    2693   ChangeRegisters_34:
                    2694   ; else if(c == (char)('5'))
00001A62  0C02 0035 2695          cmp.b     #53,D2
00001A66  6608      2696          bne.s     ChangeRegisters_36
                    2697   ; a5 = reg_val ;
00001A68  23C3 0B00 2698          move.l    D3,_a5.L
00001A6C  0118      
00001A6E  6014      2699          bra.s     ChangeRegisters_39
                    2700   ChangeRegisters_36:
                    2701   ; else if(c == (char)('6'))
00001A70  0C02 0036 2702          cmp.b     #54,D2
00001A74  6608      2703          bne.s     ChangeRegisters_38
                    2704   ; a6 = reg_val ;
00001A76  23C3 0B00 2705          move.l    D3,_a6.L
00001A7A  011C      
00001A7C  6006      2706          bra.s     ChangeRegisters_39
                    2707   ChangeRegisters_38:
                    2708   ; else
                    2709   ; USP = reg_val ;
00001A7E  23C3 0B00 2710          move.l    D3,_USP.L
00001A82  0128      
                    2711   ChangeRegisters_39:
00001A84  6000 0108 2712          bra       ChangeRegisters_51
                    2713   ChangeRegisters_21:
                    2714   ; }
                    2715   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A88  1013      2716          move.b    (A3),D0
00001A8A  0C00 0075 2717          cmp.b     #117,D0
00001A8E  6600 004E 2718          bne       ChangeRegisters_40
00001A92  0C02 0073 2719          cmp.b     #115,D2
00001A96  6600 0046 2720          bne       ChangeRegisters_40
                    2721   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A9A  2F00      2722          move.l    D0,-(A7)
00001A9C  4E95      2723          jsr       (A5)
00001A9E  2200      2724          move.l    D0,D1
00001AA0  201F      2725          move.l    (A7)+,D0
00001AA2  2F01      2726          move.l    D1,-(A7)
00001AA4  4EB9 0000 2727          jsr       _tolower
00001AA8  3004      
00001AAA  584F      2728          addq.w    #4,A7
00001AAC  0C80 0000 2729          cmp.l     #112,D0
00001AB0  0070      
00001AB2  6618      2730          bne.s     ChangeRegisters_42
                    2731   ; printf("\r\nUser SP = ") ;
00001AB4  4879 0000 2732          pea       @m68kde~1_55.L
00001AB8  482A      
00001ABA  4E92      2733          jsr       (A2)
00001ABC  584F      2734          addq.w    #4,A7
                    2735   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001ABE  42A7      2736          clr.l     -(A7)
00001AC0  4E94      2737          jsr       (A4)
00001AC2  584F      2738          addq.w    #4,A7
00001AC4  23C0 0B00 2739          move.l    D0,_USP.L
00001AC8  0128      
00001ACA  600E      2740          bra.s     ChangeRegisters_43
                    2741   ChangeRegisters_42:
                    2742   ; }
                    2743   ; else {
                    2744   ; printf("\r\nIllegal Register....") ;
00001ACC  4879 0000 2745          pea       @m68kde~1_56.L
00001AD0  4838      
00001AD2  4E92      2746          jsr       (A2)
00001AD4  584F      2747          addq.w    #4,A7
                    2748   ; return ;
00001AD6  6000 00BA 2749          bra       ChangeRegisters_6
                    2750   ChangeRegisters_43:
00001ADA  6000 00B2 2751          bra       ChangeRegisters_51
                    2752   ChangeRegisters_40:
                    2753   ; }
                    2754   ; }
                    2755   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001ADE  1013      2756          move.b    (A3),D0
00001AE0  0C00 0073 2757          cmp.b     #115,D0
00001AE4  6600 004E 2758          bne       ChangeRegisters_44
00001AE8  0C02 0073 2759          cmp.b     #115,D2
00001AEC  6600 0046 2760          bne       ChangeRegisters_44
                    2761   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001AF0  2F00      2762          move.l    D0,-(A7)
00001AF2  4E95      2763          jsr       (A5)
00001AF4  2200      2764          move.l    D0,D1
00001AF6  201F      2765          move.l    (A7)+,D0
00001AF8  2F01      2766          move.l    D1,-(A7)
00001AFA  4EB9 0000 2767          jsr       _tolower
00001AFE  3004      
00001B00  584F      2768          addq.w    #4,A7
00001B02  0C80 0000 2769          cmp.l     #112,D0
00001B06  0070      
00001B08  6618      2770          bne.s     ChangeRegisters_46
                    2771   ; printf("\r\nSystem SP = ") ;
00001B0A  4879 0000 2772          pea       @m68kde~1_57.L
00001B0E  4850      
00001B10  4E92      2773          jsr       (A2)
00001B12  584F      2774          addq.w    #4,A7
                    2775   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001B14  42A7      2776          clr.l     -(A7)
00001B16  4E94      2777          jsr       (A4)
00001B18  584F      2778          addq.w    #4,A7
00001B1A  23C0 0B00 2779          move.l    D0,_SSP.L
00001B1E  0124      
00001B20  600E      2780          bra.s     ChangeRegisters_47
                    2781   ChangeRegisters_46:
                    2782   ; }
                    2783   ; else {
                    2784   ; printf("\r\nIllegal Register....") ;
00001B22  4879 0000 2785          pea       @m68kde~1_56.L
00001B26  4838      
00001B28  4E92      2786          jsr       (A2)
00001B2A  584F      2787          addq.w    #4,A7
                    2788   ; return ;
00001B2C  6000 0064 2789          bra       ChangeRegisters_6
                    2790   ChangeRegisters_47:
00001B30  6000 005C 2791          bra       ChangeRegisters_51
                    2792   ChangeRegisters_44:
                    2793   ; }
                    2794   ; }
                    2795   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001B34  1013      2796          move.b    (A3),D0
00001B36  0C00 0070 2797          cmp.b     #112,D0
00001B3A  6620      2798          bne.s     ChangeRegisters_48
00001B3C  0C02 0063 2799          cmp.b     #99,D2
00001B40  661A      2800          bne.s     ChangeRegisters_48
                    2801   ; printf("\r\nPC = ") ;
00001B42  4879 0000 2802          pea       @m68kde~1_58.L
00001B46  4860      
00001B48  4E92      2803          jsr       (A2)
00001B4A  584F      2804          addq.w    #4,A7
                    2805   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001B4C  42A7      2806          clr.l     -(A7)
00001B4E  4E94      2807          jsr       (A4)
00001B50  584F      2808          addq.w    #4,A7
00001B52  23C0 0B00 2809          move.l    D0,_PC.L
00001B56  0120      
00001B58  6000 0034 2810          bra       ChangeRegisters_51
                    2811   ChangeRegisters_48:
                    2812   ; }
                    2813   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001B5C  1013      2814          move.b    (A3),D0
00001B5E  0C00 0073 2815          cmp.b     #115,D0
00001B62  6620      2816          bne.s     ChangeRegisters_50
00001B64  0C02 0072 2817          cmp.b     #114,D2
00001B68  661A      2818          bne.s     ChangeRegisters_50
                    2819   ; printf("\r\nSR = ") ;
00001B6A  4879 0000 2820          pea       @m68kde~1_59.L
00001B6E  4868      
00001B70  4E92      2821          jsr       (A2)
00001B72  584F      2822          addq.w    #4,A7
                    2823   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B74  42A7      2824          clr.l     -(A7)
00001B76  4EB8 0C58 2825          jsr       _Get4HexDigits
00001B7A  584F      2826          addq.w    #4,A7
00001B7C  33C0 0B00 2827          move.w    D0,_SR.L
00001B80  012C      
00001B82  600A      2828          bra.s     ChangeRegisters_51
                    2829   ChangeRegisters_50:
                    2830   ; }
                    2831   ; else
                    2832   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B84  4879 0000 2833          pea       @m68kde~1_60.L
00001B88  4870      
00001B8A  4E92      2834          jsr       (A2)
00001B8C  584F      2835          addq.w    #4,A7
                    2836   ChangeRegisters_51:
                    2837   ; DumpRegisters() ;
00001B8E  4EB8 13EC 2838          jsr       _DumpRegisters
                    2839   ChangeRegisters_6:
00001B92  4CDF 3C0C 2840          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B96  4E5E      2841          unlk      A6
00001B98  4E75      2842          rts
                    2843   ; }
                    2844   ; void BreakPointDisplay(void)
                    2845   ; {
                    2846   _BreakPointDisplay:
00001B9A  48E7 3030 2847          movem.l   D2/D3/A2/A3,-(A7)
00001B9E  45F9 0000 2848          lea       _printf.L,A2
00001BA2  3954      
00001BA4  47F9 0B00 2849          lea       _BreakPointAddress.L,A3
00001BA8  012E      
                    2850   ; int i, BreakPointsSet = 0 ;
00001BAA  4283      2851          clr.l     D3
                    2852   ; // any break points  set
                    2853   ; for(i = 0; i < 8; i++)  {
00001BAC  4282      2854          clr.l     D2
                    2855   BreakPointDisplay_1:
00001BAE  0C82 0000 2856          cmp.l     #8,D2
00001BB2  0008      
00001BB4  6C1C      2857          bge.s     BreakPointDisplay_3
                    2858   ; if(BreakPointSetOrCleared[i] == 1)
00001BB6  2002      2859          move.l    D2,D0
00001BB8  E588      2860          lsl.l     #2,D0
00001BBA  41F9 0B00 2861          lea       _BreakPointSetOrCleared.L,A0
00001BBE  015E      
00001BC0  2030 0800 2862          move.l    0(A0,D0.L),D0
00001BC4  0C80 0000 2863          cmp.l     #1,D0
00001BC8  0001      
00001BCA  6602      2864          bne.s     BreakPointDisplay_4
                    2865   ; BreakPointsSet = 1;
00001BCC  7601      2866          moveq     #1,D3
                    2867   BreakPointDisplay_4:
00001BCE  5282      2868          addq.l    #1,D2
00001BD0  60DC      2869          bra       BreakPointDisplay_1
                    2870   BreakPointDisplay_3:
                    2871   ; }
                    2872   ; if(BreakPointsSet == 1) {
00001BD2  0C83 0000 2873          cmp.l     #1,D3
00001BD6  0001      
00001BD8  6616      2874          bne.s     BreakPointDisplay_6
                    2875   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001BDA  4879 0000 2876          pea       @m68kde~1_61.L
00001BDE  48AC      
00001BE0  4E92      2877          jsr       (A2)
00001BE2  584F      2878          addq.w    #4,A7
                    2879   ; printf("\r\n---     ---------    -----------") ;
00001BE4  4879 0000 2880          pea       @m68kde~1_62.L
00001BE8  48D2      
00001BEA  4E92      2881          jsr       (A2)
00001BEC  584F      2882          addq.w    #4,A7
00001BEE  600A      2883          bra.s     BreakPointDisplay_7
                    2884   BreakPointDisplay_6:
                    2885   ; }
                    2886   ; else
                    2887   ; printf("\r\nNo BreakPoints Set") ;
00001BF0  4879 0000 2888          pea       @m68kde~1_63.L
00001BF4  48F6      
00001BF6  4E92      2889          jsr       (A2)
00001BF8  584F      2890          addq.w    #4,A7
                    2891   BreakPointDisplay_7:
                    2892   ; for(i = 0; i < 8; i++)  {
00001BFA  4282      2893          clr.l     D2
                    2894   BreakPointDisplay_8:
00001BFC  0C82 0000 2895          cmp.l     #8,D2
00001C00  0008      
00001C02  6C00 005A 2896          bge       BreakPointDisplay_10
                    2897   ; // put opcode back, then put break point back
                    2898   ; if(BreakPointSetOrCleared[i] == 1)  {
00001C06  2002      2899          move.l    D2,D0
00001C08  E588      2900          lsl.l     #2,D0
00001C0A  41F9 0B00 2901          lea       _BreakPointSetOrCleared.L,A0
00001C0E  015E      
00001C10  2030 0800 2902          move.l    0(A0,D0.L),D0
00001C14  0C80 0000 2903          cmp.l     #1,D0
00001C18  0001      
00001C1A  6600 003E 2904          bne       BreakPointDisplay_11
                    2905   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001C1E  2002      2906          move.l    D2,D0
00001C20  E388      2907          lsl.l     #1,D0
00001C22  41F9 0B00 2908          lea       _BreakPointInstruction.L,A0
00001C26  014E      
00001C28  2202      2909          move.l    D2,D1
00001C2A  E589      2910          lsl.l     #2,D1
00001C2C  2233 1800 2911          move.l    0(A3,D1.L),D1
00001C30  2241      2912          move.l    D1,A1
00001C32  32B0 0800 2913          move.w    0(A0,D0.L),(A1)
                    2914   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001C36  2002      2915          move.l    D2,D0
00001C38  E588      2916          lsl.l     #2,D0
00001C3A  2033 0800 2917          move.l    0(A3,D0.L),D0
00001C3E  2040      2918          move.l    D0,A0
00001C40  30BC 4E4E 2919          move.w    #20046,(A0)
                    2920   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001C44  2202      2921          move.l    D2,D1
00001C46  E589      2922          lsl.l     #2,D1
00001C48  2F33 1800 2923          move.l    0(A3,D1.L),-(A7)
00001C4C  2F02      2924          move.l    D2,-(A7)
00001C4E  4879 0000 2925          pea       @m68kde~1_64.L
00001C52  490C      
00001C54  4E92      2926          jsr       (A2)
00001C56  DEFC 000C 2927          add.w     #12,A7
                    2928   BreakPointDisplay_11:
00001C5A  5282      2929          addq.l    #1,D2
00001C5C  609E      2930          bra       BreakPointDisplay_8
                    2931   BreakPointDisplay_10:
                    2932   ; }
                    2933   ; }
                    2934   ; printf("\r\n") ;
00001C5E  4879 0000 2935          pea       @m68kde~1_1.L
00001C62  432A      
00001C64  4E92      2936          jsr       (A2)
00001C66  584F      2937          addq.w    #4,A7
00001C68  4CDF 0C0C 2938          movem.l   (A7)+,D2/D3/A2/A3
00001C6C  4E75      2939          rts
                    2940   ; }
                    2941   ; void WatchPointDisplay(void)
                    2942   ; {
                    2943   _WatchPointDisplay:
00001C6E  48E7 3020 2944          movem.l   D2/D3/A2,-(A7)
00001C72  45F9 0000 2945          lea       _printf.L,A2
00001C76  3954      
                    2946   ; int i ;
                    2947   ; int WatchPointsSet = 0 ;
00001C78  4283      2948          clr.l     D3
                    2949   ; // any watchpoints set
                    2950   ; for(i = 0; i < 8; i++)  {
00001C7A  4282      2951          clr.l     D2
                    2952   WatchPointDisplay_1:
00001C7C  0C82 0000 2953          cmp.l     #8,D2
00001C80  0008      
00001C82  6C1C      2954          bge.s     WatchPointDisplay_3
                    2955   ; if(WatchPointSetOrCleared[i] == 1)
00001C84  2002      2956          move.l    D2,D0
00001C86  E588      2957          lsl.l     #2,D0
00001C88  41F9 0B00 2958          lea       _WatchPointSetOrCleared.L,A0
00001C8C  01A2      
00001C8E  2030 0800 2959          move.l    0(A0,D0.L),D0
00001C92  0C80 0000 2960          cmp.l     #1,D0
00001C96  0001      
00001C98  6602      2961          bne.s     WatchPointDisplay_4
                    2962   ; WatchPointsSet = 1;
00001C9A  7601      2963          moveq     #1,D3
                    2964   WatchPointDisplay_4:
00001C9C  5282      2965          addq.l    #1,D2
00001C9E  60DC      2966          bra       WatchPointDisplay_1
                    2967   WatchPointDisplay_3:
                    2968   ; }
                    2969   ; if(WatchPointsSet == 1) {
00001CA0  0C83 0000 2970          cmp.l     #1,D3
00001CA4  0001      
00001CA6  6616      2971          bne.s     WatchPointDisplay_6
                    2972   ; printf("\r\nNum     Address") ;
00001CA8  4879 0000 2973          pea       @m68kde~1_65.L
00001CAC  491C      
00001CAE  4E92      2974          jsr       (A2)
00001CB0  584F      2975          addq.w    #4,A7
                    2976   ; printf("\r\n---     ---------") ;
00001CB2  4879 0000 2977          pea       @m68kde~1_66.L
00001CB6  492E      
00001CB8  4E92      2978          jsr       (A2)
00001CBA  584F      2979          addq.w    #4,A7
00001CBC  600A      2980          bra.s     WatchPointDisplay_7
                    2981   WatchPointDisplay_6:
                    2982   ; }
                    2983   ; else
                    2984   ; printf("\r\nNo WatchPoints Set") ;
00001CBE  4879 0000 2985          pea       @m68kde~1_67.L
00001CC2  4942      
00001CC4  4E92      2986          jsr       (A2)
00001CC6  584F      2987          addq.w    #4,A7
                    2988   WatchPointDisplay_7:
                    2989   ; for(i = 0; i < 8; i++)  {
00001CC8  4282      2990          clr.l     D2
                    2991   WatchPointDisplay_8:
00001CCA  0C82 0000 2992          cmp.l     #8,D2
00001CCE  0008      
00001CD0  6C00 0038 2993          bge       WatchPointDisplay_10
                    2994   ; if(WatchPointSetOrCleared[i] == 1)
00001CD4  2002      2995          move.l    D2,D0
00001CD6  E588      2996          lsl.l     #2,D0
00001CD8  41F9 0B00 2997          lea       _WatchPointSetOrCleared.L,A0
00001CDC  01A2      
00001CDE  2030 0800 2998          move.l    0(A0,D0.L),D0
00001CE2  0C80 0000 2999          cmp.l     #1,D0
00001CE6  0001      
00001CE8  661C      3000          bne.s     WatchPointDisplay_11
                    3001   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CEA  2202      3002          move.l    D2,D1
00001CEC  E589      3003          lsl.l     #2,D1
00001CEE  41F9 0B00 3004          lea       _WatchPointAddress.L,A0
00001CF2  0182      
00001CF4  2F30 1800 3005          move.l    0(A0,D1.L),-(A7)
00001CF8  2F02      3006          move.l    D2,-(A7)
00001CFA  4879 0000 3007          pea       @m68kde~1_64.L
00001CFE  490C      
00001D00  4E92      3008          jsr       (A2)
00001D02  DEFC 000C 3009          add.w     #12,A7
                    3010   WatchPointDisplay_11:
00001D06  5282      3011          addq.l    #1,D2
00001D08  60C0      3012          bra       WatchPointDisplay_8
                    3013   WatchPointDisplay_10:
                    3014   ; }
                    3015   ; printf("\r\n") ;
00001D0A  4879 0000 3016          pea       @m68kde~1_1.L
00001D0E  432A      
00001D10  4E92      3017          jsr       (A2)
00001D12  584F      3018          addq.w    #4,A7
00001D14  4CDF 040C 3019          movem.l   (A7)+,D2/D3/A2
00001D18  4E75      3020          rts
                    3021   ; }
                    3022   ; void BreakPointClear(void)
                    3023   ; {
                    3024   _BreakPointClear:
00001D1A  4E56 FFFC 3025          link      A6,#-4
00001D1E  48E7 2020 3026          movem.l   D2/A2,-(A7)
00001D22  45F9 0000 3027          lea       _printf.L,A2
00001D26  3954      
                    3028   ; unsigned int i ;
                    3029   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3030   ; BreakPointDisplay() ;
00001D28  4EB8 1B9A 3031          jsr       _BreakPointDisplay
                    3032   ; printf("\r\nEnter Break Point Number: ") ;
00001D2C  4879 0000 3033          pea       @m68kde~1_68.L
00001D30  4958      
00001D32  4E92      3034          jsr       (A2)
00001D34  584F      3035          addq.w    #4,A7
                    3036   ; i = xtod(_getch()) ;           // get break pointer number
00001D36  2F00      3037          move.l    D0,-(A7)
00001D38  4EB8 0B68 3038          jsr       __getch
00001D3C  2200      3039          move.l    D0,D1
00001D3E  201F      3040          move.l    (A7)+,D0
00001D40  2F01      3041          move.l    D1,-(A7)
00001D42  4EB8 0BD2 3042          jsr       _xtod
00001D46  584F      3043          addq.w    #4,A7
00001D48  C0BC 0000 3044          and.l     #255,D0
00001D4C  00FF      
00001D4E  2400      3045          move.l    D0,D2
                    3046   ; if((i < 0) || (i > 7))   {
00001D50  0C82 0000 3047          cmp.l     #0,D2
00001D54  0000      
00001D56  6508      3048          blo.s     BreakPointClear_3
00001D58  0C82 0000 3049          cmp.l     #7,D2
00001D5C  0007      
00001D5E  630E      3050          bls.s     BreakPointClear_1
                    3051   BreakPointClear_3:
                    3052   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D60  4879 0000 3053          pea       @m68kde~1_69.L
00001D64  4976      
00001D66  4E92      3054          jsr       (A2)
00001D68  584F      3055          addq.w    #4,A7
                    3056   ; return ;
00001D6A  6000 0080 3057          bra       BreakPointClear_4
                    3058   BreakPointClear_1:
                    3059   ; }
                    3060   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D6E  2002      3061          move.l    D2,D0
00001D70  E588      3062          lsl.l     #2,D0
00001D72  41F9 0B00 3063          lea       _BreakPointSetOrCleared.L,A0
00001D76  015E      
00001D78  2030 0800 3064          move.l    0(A0,D0.L),D0
00001D7C  0C80 0000 3065          cmp.l     #1,D0
00001D80  0001      
00001D82  6600 005A 3066          bne       BreakPointClear_5
                    3067   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D86  2002      3068          move.l    D2,D0
00001D88  E588      3069          lsl.l     #2,D0
00001D8A  41F9 0B00 3070          lea       _BreakPointAddress.L,A0
00001D8E  012E      
00001D90  2D70 0800 3071          move.l    0(A0,D0.L),-4(A6)
00001D94  FFFC      
                    3072   ; BreakPointAddress[i] = 0 ;
00001D96  2002      3073          move.l    D2,D0
00001D98  E588      3074          lsl.l     #2,D0
00001D9A  41F9 0B00 3075          lea       _BreakPointAddress.L,A0
00001D9E  012E      
00001DA0  42B0 0800 3076          clr.l     0(A0,D0.L)
                    3077   ; BreakPointSetOrCleared[i] = 0 ;
00001DA4  2002      3078          move.l    D2,D0
00001DA6  E588      3079          lsl.l     #2,D0
00001DA8  41F9 0B00 3080          lea       _BreakPointSetOrCleared.L,A0
00001DAC  015E      
00001DAE  42B0 0800 3081          clr.l     0(A0,D0.L)
                    3082   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001DB2  2002      3083          move.l    D2,D0
00001DB4  E388      3084          lsl.l     #1,D0
00001DB6  41F9 0B00 3085          lea       _BreakPointInstruction.L,A0
00001DBA  014E      
00001DBC  226E FFFC 3086          move.l    -4(A6),A1
00001DC0  32B0 0800 3087          move.w    0(A0,D0.L),(A1)
                    3088   ; BreakPointInstruction[i] = 0 ;
00001DC4  2002      3089          move.l    D2,D0
00001DC6  E388      3090          lsl.l     #1,D0
00001DC8  41F9 0B00 3091          lea       _BreakPointInstruction.L,A0
00001DCC  014E      
00001DCE  4270 0800 3092          clr.w     0(A0,D0.L)
                    3093   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001DD2  4879 0000 3094          pea       @m68kde~1_70.L
00001DD6  4992      
00001DD8  4E92      3095          jsr       (A2)
00001DDA  584F      3096          addq.w    #4,A7
00001DDC  600A      3097          bra.s     BreakPointClear_6
                    3098   BreakPointClear_5:
                    3099   ; }
                    3100   ; else
                    3101   ; printf("\r\nBreak Point wasn't Set.....") ;
00001DDE  4879 0000 3102          pea       @m68kde~1_71.L
00001DE2  49B0      
00001DE4  4E92      3103          jsr       (A2)
00001DE6  584F      3104          addq.w    #4,A7
                    3105   BreakPointClear_6:
                    3106   ; BreakPointDisplay() ;
00001DE8  4EB8 1B9A 3107          jsr       _BreakPointDisplay
                    3108   ; return ;
                    3109   BreakPointClear_4:
00001DEC  4CDF 0404 3110          movem.l   (A7)+,D2/A2
00001DF0  4E5E      3111          unlk      A6
00001DF2  4E75      3112          rts
                    3113   ; }
                    3114   ; void WatchPointClear(void)
                    3115   ; {
                    3116   _WatchPointClear:
00001DF4  48E7 2020 3117          movem.l   D2/A2,-(A7)
00001DF8  45F9 0000 3118          lea       _printf.L,A2
00001DFC  3954      
                    3119   ; unsigned int i ;
                    3120   ; WatchPointDisplay() ;
00001DFE  4EB8 1C6E 3121          jsr       _WatchPointDisplay
                    3122   ; printf("\r\nEnter Watch Point Number: ") ;
00001E02  4879 0000 3123          pea       @m68kde~1_72.L
00001E06  49CE      
00001E08  4E92      3124          jsr       (A2)
00001E0A  584F      3125          addq.w    #4,A7
                    3126   ; i = xtod(_getch()) ;           // get watch pointer number
00001E0C  2F00      3127          move.l    D0,-(A7)
00001E0E  4EB8 0B68 3128          jsr       __getch
00001E12  2200      3129          move.l    D0,D1
00001E14  201F      3130          move.l    (A7)+,D0
00001E16  2F01      3131          move.l    D1,-(A7)
00001E18  4EB8 0BD2 3132          jsr       _xtod
00001E1C  584F      3133          addq.w    #4,A7
00001E1E  C0BC 0000 3134          and.l     #255,D0
00001E22  00FF      
00001E24  2400      3135          move.l    D0,D2
                    3136   ; if((i < 0) || (i > 7))   {
00001E26  0C82 0000 3137          cmp.l     #0,D2
00001E2A  0000      
00001E2C  6508      3138          blo.s     WatchPointClear_3
00001E2E  0C82 0000 3139          cmp.l     #7,D2
00001E32  0007      
00001E34  630E      3140          bls.s     WatchPointClear_1
                    3141   WatchPointClear_3:
                    3142   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001E36  4879 0000 3143          pea       @m68kde~1_69.L
00001E3A  4976      
00001E3C  4E92      3144          jsr       (A2)
00001E3E  584F      3145          addq.w    #4,A7
                    3146   ; return ;
00001E40  6000 004E 3147          bra       WatchPointClear_4
                    3148   WatchPointClear_1:
                    3149   ; }
                    3150   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E44  2002      3151          move.l    D2,D0
00001E46  E588      3152          lsl.l     #2,D0
00001E48  41F9 0B00 3153          lea       _WatchPointSetOrCleared.L,A0
00001E4C  01A2      
00001E4E  2030 0800 3154          move.l    0(A0,D0.L),D0
00001E52  0C80 0000 3155          cmp.l     #1,D0
00001E56  0001      
00001E58  6628      3156          bne.s     WatchPointClear_5
                    3157   ; WatchPointAddress[i] = 0 ;
00001E5A  2002      3158          move.l    D2,D0
00001E5C  E588      3159          lsl.l     #2,D0
00001E5E  41F9 0B00 3160          lea       _WatchPointAddress.L,A0
00001E62  0182      
00001E64  42B0 0800 3161          clr.l     0(A0,D0.L)
                    3162   ; WatchPointSetOrCleared[i] = 0 ;
00001E68  2002      3163          move.l    D2,D0
00001E6A  E588      3164          lsl.l     #2,D0
00001E6C  41F9 0B00 3165          lea       _WatchPointSetOrCleared.L,A0
00001E70  01A2      
00001E72  42B0 0800 3166          clr.l     0(A0,D0.L)
                    3167   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E76  4879 0000 3168          pea       @m68kde~1_73.L
00001E7A  49EC      
00001E7C  4E92      3169          jsr       (A2)
00001E7E  584F      3170          addq.w    #4,A7
00001E80  600A      3171          bra.s     WatchPointClear_6
                    3172   WatchPointClear_5:
                    3173   ; }
                    3174   ; else
                    3175   ; printf("\r\nWatch Point Was not Set.....") ;
00001E82  4879 0000 3176          pea       @m68kde~1_74.L
00001E86  4A0A      
00001E88  4E92      3177          jsr       (A2)
00001E8A  584F      3178          addq.w    #4,A7
                    3179   WatchPointClear_6:
                    3180   ; WatchPointDisplay() ;
00001E8C  4EB8 1C6E 3181          jsr       _WatchPointDisplay
                    3182   ; return ;
                    3183   WatchPointClear_4:
00001E90  4CDF 0404 3184          movem.l   (A7)+,D2/A2
00001E94  4E75      3185          rts
                    3186   ; }
                    3187   ; void DisableBreakPoints(void)
                    3188   ; {
                    3189   _DisableBreakPoints:
00001E96  4E56 FFFC 3190          link      A6,#-4
00001E9A  2F02      3191          move.l    D2,-(A7)
                    3192   ; int i ;
                    3193   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3194   ; for(i = 0; i < 8; i++)  {
00001E9C  4282      3195          clr.l     D2
                    3196   DisableBreakPoints_1:
00001E9E  0C82 0000 3197          cmp.l     #8,D2
00001EA2  0008      
00001EA4  6C00 003E 3198          bge       DisableBreakPoints_3
                    3199   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001EA8  2002      3200          move.l    D2,D0
00001EAA  E588      3201          lsl.l     #2,D0
00001EAC  41F9 0B00 3202          lea       _BreakPointSetOrCleared.L,A0
00001EB0  015E      
00001EB2  2030 0800 3203          move.l    0(A0,D0.L),D0
00001EB6  0C80 0000 3204          cmp.l     #1,D0
00001EBA  0001      
00001EBC  6622      3205          bne.s     DisableBreakPoints_4
                    3206   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001EBE  2002      3207          move.l    D2,D0
00001EC0  E588      3208          lsl.l     #2,D0
00001EC2  41F9 0B00 3209          lea       _BreakPointAddress.L,A0
00001EC6  012E      
00001EC8  2D70 0800 3210          move.l    0(A0,D0.L),-4(A6)
00001ECC  FFFC      
                    3211   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001ECE  2002      3212          move.l    D2,D0
00001ED0  E388      3213          lsl.l     #1,D0
00001ED2  41F9 0B00 3214          lea       _BreakPointInstruction.L,A0
00001ED6  014E      
00001ED8  226E FFFC 3215          move.l    -4(A6),A1
00001EDC  32B0 0800 3216          move.w    0(A0,D0.L),(A1)
                    3217   DisableBreakPoints_4:
00001EE0  5282      3218          addq.l    #1,D2
00001EE2  60BA      3219          bra       DisableBreakPoints_1
                    3220   DisableBreakPoints_3:
00001EE4  241F      3221          move.l    (A7)+,D2
00001EE6  4E5E      3222          unlk      A6
00001EE8  4E75      3223          rts
                    3224   ; }
                    3225   ; }
                    3226   ; }
                    3227   ; void EnableBreakPoints(void)
                    3228   ; {
                    3229   _EnableBreakPoints:
00001EEA  4E56 FFFC 3230          link      A6,#-4
00001EEE  2F02      3231          move.l    D2,-(A7)
                    3232   ; int i ;
                    3233   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3234   ; for(i = 0; i < 8; i++)  {
00001EF0  4282      3235          clr.l     D2
                    3236   EnableBreakPoints_1:
00001EF2  0C82 0000 3237          cmp.l     #8,D2
00001EF6  0008      
00001EF8  6C32      3238          bge.s     EnableBreakPoints_3
                    3239   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001EFA  2002      3240          move.l    D2,D0
00001EFC  E588      3241          lsl.l     #2,D0
00001EFE  41F9 0B00 3242          lea       _BreakPointSetOrCleared.L,A0
00001F02  015E      
00001F04  2030 0800 3243          move.l    0(A0,D0.L),D0
00001F08  0C80 0000 3244          cmp.l     #1,D0
00001F0C  0001      
00001F0E  6618      3245          bne.s     EnableBreakPoints_4
                    3246   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F10  2002      3247          move.l    D2,D0
00001F12  E588      3248          lsl.l     #2,D0
00001F14  41F9 0B00 3249          lea       _BreakPointAddress.L,A0
00001F18  012E      
00001F1A  2D70 0800 3250          move.l    0(A0,D0.L),-4(A6)
00001F1E  FFFC      
                    3251   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001F20  206E FFFC 3252          move.l    -4(A6),A0
00001F24  30BC 4E4E 3253          move.w    #20046,(A0)
                    3254   EnableBreakPoints_4:
00001F28  5282      3255          addq.l    #1,D2
00001F2A  60C6      3256          bra       EnableBreakPoints_1
                    3257   EnableBreakPoints_3:
00001F2C  241F      3258          move.l    (A7)+,D2
00001F2E  4E5E      3259          unlk      A6
00001F30  4E75      3260          rts
                    3261   ; }
                    3262   ; }
                    3263   ; }
                    3264   ; void KillAllBreakPoints(void)
                    3265   ; {
                    3266   _KillAllBreakPoints:
00001F32  4E56 FFFC 3267          link      A6,#-4
00001F36  2F02      3268          move.l    D2,-(A7)
                    3269   ; int i ;
                    3270   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3271   ; for(i = 0; i < 8; i++)  {
00001F38  4282      3272          clr.l     D2
                    3273   KillAllBreakPoints_1:
00001F3A  0C82 0000 3274          cmp.l     #8,D2
00001F3E  0008      
00001F40  6C00 0052 3275          bge       KillAllBreakPoints_3
                    3276   ; // clear BP
                    3277   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F44  2002      3278          move.l    D2,D0
00001F46  E588      3279          lsl.l     #2,D0
00001F48  41F9 0B00 3280          lea       _BreakPointAddress.L,A0
00001F4C  012E      
00001F4E  2D70 0800 3281          move.l    0(A0,D0.L),-4(A6)
00001F52  FFFC      
                    3282   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F54  2002      3283          move.l    D2,D0
00001F56  E388      3284          lsl.l     #1,D0
00001F58  41F9 0B00 3285          lea       _BreakPointInstruction.L,A0
00001F5C  014E      
00001F5E  226E FFFC 3286          move.l    -4(A6),A1
00001F62  32B0 0800 3287          move.w    0(A0,D0.L),(A1)
                    3288   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F66  2002      3289          move.l    D2,D0
00001F68  E588      3290          lsl.l     #2,D0
00001F6A  41F9 0B00 3291          lea       _BreakPointAddress.L,A0
00001F6E  012E      
00001F70  42B0 0800 3292          clr.l     0(A0,D0.L)
                    3293   ; BreakPointInstruction[i] = 0 ;
00001F74  2002      3294          move.l    D2,D0
00001F76  E388      3295          lsl.l     #1,D0
00001F78  41F9 0B00 3296          lea       _BreakPointInstruction.L,A0
00001F7C  014E      
00001F7E  4270 0800 3297          clr.w     0(A0,D0.L)
                    3298   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F82  2002      3299          move.l    D2,D0
00001F84  E588      3300          lsl.l     #2,D0
00001F86  41F9 0B00 3301          lea       _BreakPointSetOrCleared.L,A0
00001F8A  015E      
00001F8C  42B0 0800 3302          clr.l     0(A0,D0.L)
00001F90  5282      3303          addq.l    #1,D2
00001F92  60A6      3304          bra       KillAllBreakPoints_1
                    3305   KillAllBreakPoints_3:
00001F94  241F      3306          move.l    (A7)+,D2
00001F96  4E5E      3307          unlk      A6
00001F98  4E75      3308          rts
                    3309   ; }
                    3310   ; //BreakPointDisplay() ;       // display the break points
                    3311   ; }
                    3312   ; void KillAllWatchPoints(void)
                    3313   ; {
                    3314   _KillAllWatchPoints:
00001F9A  2F02      3315          move.l    D2,-(A7)
                    3316   ; int i ;
                    3317   ; for(i = 0; i < 8; i++)  {
00001F9C  4282      3318          clr.l     D2
                    3319   KillAllWatchPoints_1:
00001F9E  0C82 0000 3320          cmp.l     #8,D2
00001FA2  0008      
00001FA4  6C20      3321          bge.s     KillAllWatchPoints_3
                    3322   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001FA6  2002      3323          move.l    D2,D0
00001FA8  E588      3324          lsl.l     #2,D0
00001FAA  41F9 0B00 3325          lea       _WatchPointAddress.L,A0
00001FAE  0182      
00001FB0  42B0 0800 3326          clr.l     0(A0,D0.L)
                    3327   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001FB4  2002      3328          move.l    D2,D0
00001FB6  E588      3329          lsl.l     #2,D0
00001FB8  41F9 0B00 3330          lea       _WatchPointSetOrCleared.L,A0
00001FBC  01A2      
00001FBE  42B0 0800 3331          clr.l     0(A0,D0.L)
00001FC2  5282      3332          addq.l    #1,D2
00001FC4  60D8      3333          bra       KillAllWatchPoints_1
                    3334   KillAllWatchPoints_3:
00001FC6  241F      3335          move.l    (A7)+,D2
00001FC8  4E75      3336          rts
                    3337   ; }
                    3338   ; //WatchPointDisplay() ;       // display the break points
                    3339   ; }
                    3340   ; void SetBreakPoint(void)
                    3341   ; {
                    3342   _SetBreakPoint:
00001FCA  4E56 FFFC 3343          link      A6,#-4
00001FCE  48E7 3830 3344          movem.l   D2/D3/D4/A2/A3,-(A7)
00001FD2  45F9 0000 3345          lea       _printf.L,A2
00001FD6  3954      
00001FD8  47F9 0B00 3346          lea       _BreakPointSetOrCleared.L,A3
00001FDC  015E      
                    3347   ; int i ;
                    3348   ; int BPNumber;
                    3349   ; int BPAddress;
                    3350   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3351   ; // see if any free break points
                    3352   ; for(i = 0; i < 8; i ++) {
00001FDE  4282      3353          clr.l     D2
                    3354   SetBreakPoint_1:
00001FE0  0C82 0000 3355          cmp.l     #8,D2
00001FE4  0008      
00001FE6  6C10      3356          bge.s     SetBreakPoint_3
                    3357   ; if( BreakPointSetOrCleared[i] == 0)
00001FE8  2002      3358          move.l    D2,D0
00001FEA  E588      3359          lsl.l     #2,D0
00001FEC  2033 0800 3360          move.l    0(A3,D0.L),D0
00001FF0  6602      3361          bne.s     SetBreakPoint_4
                    3362   ; break ;         // if spare BP found allow user to set it
00001FF2  6004      3363          bra.s     SetBreakPoint_3
                    3364   SetBreakPoint_4:
00001FF4  5282      3365          addq.l    #1,D2
00001FF6  60E8      3366          bra       SetBreakPoint_1
                    3367   SetBreakPoint_3:
                    3368   ; }
                    3369   ; if(i == 8) {
00001FF8  0C82 0000 3370          cmp.l     #8,D2
00001FFC  0008      
00001FFE  660E      3371          bne.s     SetBreakPoint_6
                    3372   ; printf("\r\nNo FREE Break Points.....") ;
00002000  4879 0000 3373          pea       @m68kde~1_75.L
00002004  4A2A      
00002006  4E92      3374          jsr       (A2)
00002008  584F      3375          addq.w    #4,A7
                    3376   ; return ;
0000200A  6000 00D6 3377          bra       SetBreakPoint_15
                    3378   SetBreakPoint_6:
                    3379   ; }
                    3380   ; printf("\r\nBreak Point Address: ") ;
0000200E  4879 0000 3381          pea       @m68kde~1_76.L
00002012  4A46      
00002014  4E92      3382          jsr       (A2)
00002016  584F      3383          addq.w    #4,A7
                    3384   ; BPAddress = Get8HexDigits(0) ;
00002018  42A7      3385          clr.l     -(A7)
0000201A  4EB8 0CA4 3386          jsr       _Get8HexDigits
0000201E  584F      3387          addq.w    #4,A7
00002020  2600      3388          move.l    D0,D3
                    3389   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00002022  2803      3390          move.l    D3,D4
                    3391   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00002024  2003      3392          move.l    D3,D0
00002026  C0BC 0000 3393          and.l     #1,D0
0000202A  0001      
0000202C  0C80 0000 3394          cmp.l     #1,D0
00002030  0001      
00002032  660E      3395          bne.s     SetBreakPoint_9
                    3396   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002034  4879 0000 3397          pea       @m68kde~1_77.L
00002038  4A5E      
0000203A  4E92      3398          jsr       (A2)
0000203C  584F      3399          addq.w    #4,A7
                    3400   ; return ;
0000203E  6000 00A2 3401          bra       SetBreakPoint_15
                    3402   SetBreakPoint_9:
                    3403   ; }
                    3404   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002042  0C83 0000 3405          cmp.l     #32768,D3
00002046  8000      
00002048  640E      3406          bhs.s     SetBreakPoint_11
                    3407   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000204A  4879 0000 3408          pea       @m68kde~1_78.L
0000204E  4A94      
00002050  4E92      3409          jsr       (A2)
00002052  584F      3410          addq.w    #4,A7
                    3411   ; return ;
00002054  6000 008C 3412          bra       SetBreakPoint_15
                    3413   SetBreakPoint_11:
                    3414   ; }
                    3415   ; // search for first free bp or existing same BP
                    3416   ; for(i = 0; i < 8; i++)  {
00002058  4282      3417          clr.l     D2
                    3418   SetBreakPoint_13:
0000205A  0C82 0000 3419          cmp.l     #8,D2
0000205E  0008      
00002060  6C00 0080 3420          bge       SetBreakPoint_15
                    3421   ; if(BreakPointAddress[i] == BPAddress)   {
00002064  2002      3422          move.l    D2,D0
00002066  E588      3423          lsl.l     #2,D0
00002068  41F9 0B00 3424          lea       _BreakPointAddress.L,A0
0000206C  012E      
0000206E  B6B0 0800 3425          cmp.l     0(A0,D0.L),D3
00002072  6610      3426          bne.s     SetBreakPoint_16
                    3427   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002074  2F03      3428          move.l    D3,-(A7)
00002076  4879 0000 3429          pea       @m68kde~1_79.L
0000207A  4ADC      
0000207C  4E92      3430          jsr       (A2)
0000207E  504F      3431          addq.w    #8,A7
                    3432   ; return ;
00002080  6000 0060 3433          bra       SetBreakPoint_15
                    3434   SetBreakPoint_16:
                    3435   ; }
                    3436   ; if(BreakPointSetOrCleared[i] == 0) {
00002084  2002      3437          move.l    D2,D0
00002086  E588      3438          lsl.l     #2,D0
00002088  2033 0800 3439          move.l    0(A3,D0.L),D0
0000208C  6600 004E 3440          bne       SetBreakPoint_18
                    3441   ; // set BP here
                    3442   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002090  2002      3443          move.l    D2,D0
00002092  E588      3444          lsl.l     #2,D0
00002094  27BC 0000 3445          move.l    #1,0(A3,D0.L)
00002098  0001 0800 
                    3446   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
0000209C  2044      3447          move.l    D4,A0
0000209E  2002      3448          move.l    D2,D0
000020A0  E388      3449          lsl.l     #1,D0
000020A2  43F9 0B00 3450          lea       _BreakPointInstruction.L,A1
000020A6  014E      
000020A8  3390 0800 3451          move.w    (A0),0(A1,D0.L)
                    3452   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
000020AC  2F04      3453          move.l    D4,-(A7)
000020AE  4879 0000 3454          pea       @m68kde~1_80.L
000020B2  4B14      
000020B4  4E92      3455          jsr       (A2)
000020B6  504F      3456          addq.w    #8,A7
                    3457   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
000020B8  2044      3458          move.l    D4,A0
000020BA  30BC 4E4E 3459          move.w    #20046,(A0)
                    3460   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000020BE  2002      3461          move.l    D2,D0
000020C0  E588      3462          lsl.l     #2,D0
000020C2  41F9 0B00 3463          lea       _BreakPointAddress.L,A0
000020C6  012E      
000020C8  2183 0800 3464          move.l    D3,0(A0,D0.L)
                    3465   ; printf("\r\n") ;
000020CC  4879 0000 3466          pea       @m68kde~1_1.L
000020D0  432A      
000020D2  4E92      3467          jsr       (A2)
000020D4  584F      3468          addq.w    #4,A7
                    3469   ; BreakPointDisplay() ;       // display the break points
000020D6  4EB8 1B9A 3470          jsr       _BreakPointDisplay
                    3471   ; return ;
000020DA  6006      3472          bra.s     SetBreakPoint_15
                    3473   SetBreakPoint_18:
000020DC  5282      3474          addq.l    #1,D2
000020DE  6000 FF7A 3475          bra       SetBreakPoint_13
                    3476   SetBreakPoint_15:
000020E2  4CDF 0C1C 3477          movem.l   (A7)+,D2/D3/D4/A2/A3
000020E6  4E5E      3478          unlk      A6
000020E8  4E75      3479          rts
                    3480   ; }
                    3481   ; }
                    3482   ; }
                    3483   ; void SetWatchPoint(void)
                    3484   ; {
                    3485   _SetWatchPoint:
000020EA  4E56 FFF8 3486          link      A6,#-8
000020EE  48E7 3030 3487          movem.l   D2/D3/A2/A3,-(A7)
000020F2  45F9 0000 3488          lea       _printf.L,A2
000020F6  3954      
000020F8  47F9 0B00 3489          lea       _WatchPointSetOrCleared.L,A3
000020FC  01A2      
                    3490   ; int i ;
                    3491   ; int WPNumber;
                    3492   ; int WPAddress;
                    3493   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3494   ; // see if any free break points
                    3495   ; for(i = 0; i < 8; i ++) {
000020FE  4282      3496          clr.l     D2
                    3497   SetWatchPoint_1:
00002100  0C82 0000 3498          cmp.l     #8,D2
00002104  0008      
00002106  6C10      3499          bge.s     SetWatchPoint_3
                    3500   ; if( WatchPointSetOrCleared[i] == 0)
00002108  2002      3501          move.l    D2,D0
0000210A  E588      3502          lsl.l     #2,D0
0000210C  2033 0800 3503          move.l    0(A3,D0.L),D0
00002110  6602      3504          bne.s     SetWatchPoint_4
                    3505   ; break ;         // if spare WP found allow user to set it
00002112  6004      3506          bra.s     SetWatchPoint_3
                    3507   SetWatchPoint_4:
00002114  5282      3508          addq.l    #1,D2
00002116  60E8      3509          bra       SetWatchPoint_1
                    3510   SetWatchPoint_3:
                    3511   ; }
                    3512   ; if(i == 8) {
00002118  0C82 0000 3513          cmp.l     #8,D2
0000211C  0008      
0000211E  660E      3514          bne.s     SetWatchPoint_6
                    3515   ; printf("\r\nNo FREE Watch Points.....") ;
00002120  4879 0000 3516          pea       @m68kde~1_81.L
00002124  4B3A      
00002126  4E92      3517          jsr       (A2)
00002128  584F      3518          addq.w    #4,A7
                    3519   ; return ;
0000212A  6000 008C 3520          bra       SetWatchPoint_11
                    3521   SetWatchPoint_6:
                    3522   ; }
                    3523   ; printf("\r\nWatch Point Address: ") ;
0000212E  4879 0000 3524          pea       @m68kde~1_82.L
00002132  4B56      
00002134  4E92      3525          jsr       (A2)
00002136  584F      3526          addq.w    #4,A7
                    3527   ; WPAddress = Get8HexDigits(0) ;
00002138  42A7      3528          clr.l     -(A7)
0000213A  4EB8 0CA4 3529          jsr       _Get8HexDigits
0000213E  584F      3530          addq.w    #4,A7
00002140  2600      3531          move.l    D0,D3
                    3532   ; // search for first free wp or existing same wp
                    3533   ; for(i = 0; i < 8; i++)  {
00002142  4282      3534          clr.l     D2
                    3535   SetWatchPoint_9:
00002144  0C82 0000 3536          cmp.l     #8,D2
00002148  0008      
0000214A  6C00 006C 3537          bge       SetWatchPoint_11
                    3538   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
0000214E  2002      3539          move.l    D2,D0
00002150  E588      3540          lsl.l     #2,D0
00002152  41F9 0B00 3541          lea       _WatchPointAddress.L,A0
00002156  0182      
00002158  B6B0 0800 3542          cmp.l     0(A0,D0.L),D3
0000215C  6614      3543          bne.s     SetWatchPoint_12
0000215E  4A83      3544          tst.l     D3
00002160  6710      3545          beq.s     SetWatchPoint_12
                    3546   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002162  2F03      3547          move.l    D3,-(A7)
00002164  4879 0000 3548          pea       @m68kde~1_83.L
00002168  4B6E      
0000216A  4E92      3549          jsr       (A2)
0000216C  504F      3550          addq.w    #8,A7
                    3551   ; return ;
0000216E  6000 0048 3552          bra       SetWatchPoint_11
                    3553   SetWatchPoint_12:
                    3554   ; }
                    3555   ; if(WatchPointSetOrCleared[i] == 0) {
00002172  2002      3556          move.l    D2,D0
00002174  E588      3557          lsl.l     #2,D0
00002176  2033 0800 3558          move.l    0(A3,D0.L),D0
0000217A  6600 0038 3559          bne       SetWatchPoint_14
                    3560   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
0000217E  2002      3561          move.l    D2,D0
00002180  E588      3562          lsl.l     #2,D0
00002182  27BC 0000 3563          move.l    #1,0(A3,D0.L)
00002186  0001 0800 
                    3564   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000218A  2F03      3565          move.l    D3,-(A7)
0000218C  4879 0000 3566          pea       @m68kde~1_84.L
00002190  4BA4      
00002192  4E92      3567          jsr       (A2)
00002194  504F      3568          addq.w    #8,A7
                    3569   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002196  2002      3570          move.l    D2,D0
00002198  E588      3571          lsl.l     #2,D0
0000219A  41F9 0B00 3572          lea       _WatchPointAddress.L,A0
0000219E  0182      
000021A0  2183 0800 3573          move.l    D3,0(A0,D0.L)
                    3574   ; printf("\r\n") ;
000021A4  4879 0000 3575          pea       @m68kde~1_1.L
000021A8  432A      
000021AA  4E92      3576          jsr       (A2)
000021AC  584F      3577          addq.w    #4,A7
                    3578   ; WatchPointDisplay() ;       // display the break points
000021AE  4EB8 1C6E 3579          jsr       _WatchPointDisplay
                    3580   ; return ;
000021B2  6004      3581          bra.s     SetWatchPoint_11
                    3582   SetWatchPoint_14:
000021B4  5282      3583          addq.l    #1,D2
000021B6  608C      3584          bra       SetWatchPoint_9
                    3585   SetWatchPoint_11:
000021B8  4CDF 0C0C 3586          movem.l   (A7)+,D2/D3/A2/A3
000021BC  4E5E      3587          unlk      A6
000021BE  4E75      3588          rts
                    3589   ; }
                    3590   ; }
                    3591   ; }
                    3592   ; void HandleBreakPoint(void)
                    3593   ; {
                    3594   _HandleBreakPoint:
000021C0  4E56 FFFC 3595          link      A6,#-4
000021C4  48E7 0038 3596          movem.l   A2/A3/A4,-(A7)
000021C8  45F9 0B00 3597          lea       _i.L,A2
000021CC  00C4      
000021CE  47F9 0000 3598          lea       _printf.L,A3
000021D2  3954      
000021D4  49F9 0B00 3599          lea       _PC.L,A4
000021D8  0120      
                    3600   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3601   ; // now we have to put the break point back to run the instruction
                    3602   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3603   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021DA  5594      3604          subq.l    #2,(A4)
                    3605   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021DC  4879 0000 3606          pea       @m68kde~1_85.L
000021E0  4BCA      
000021E2  4E93      3607          jsr       (A3)
000021E4  584F      3608          addq.w    #4,A7
                    3609   ; printf("\r\nSingle Step : [ON]") ;
000021E6  4879 0000 3610          pea       @m68kde~1_86.L
000021EA  4BDE      
000021EC  4E93      3611          jsr       (A3)
000021EE  584F      3612          addq.w    #4,A7
                    3613   ; printf("\r\nBreakPoints : [Enabled]") ;
000021F0  4879 0000 3614          pea       @m68kde~1_87.L
000021F4  4BF4      
000021F6  4E93      3615          jsr       (A3)
000021F8  584F      3616          addq.w    #4,A7
                    3617   ; // now clear the break point (put original instruction back)
                    3618   ; ProgramBreakPointAddress = PC ;
000021FA  2D54 FFFC 3619          move.l    (A4),-4(A6)
                    3620   ; for(i = 0; i < 8; i ++) {
000021FE  4292      3621          clr.l     (A2)
                    3622   HandleBreakPoint_1:
00002200  2012      3623          move.l    (A2),D0
00002202  0C80 0000 3624          cmp.l     #8,D0
00002206  0008      
00002208  6400 0056 3625          bhs       HandleBreakPoint_3
                    3626   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
0000220C  2012      3627          move.l    (A2),D0
0000220E  E588      3628          lsl.l     #2,D0
00002210  41F9 0B00 3629          lea       _BreakPointAddress.L,A0
00002214  012E      
00002216  2230 0800 3630          move.l    0(A0,D0.L),D1
0000221A  B294      3631          cmp.l     (A4),D1
0000221C  6600 003E 3632          bne       HandleBreakPoint_4
                    3633   ; BreakPointAddress[i] = 0 ;
00002220  2012      3634          move.l    (A2),D0
00002222  E588      3635          lsl.l     #2,D0
00002224  41F9 0B00 3636          lea       _BreakPointAddress.L,A0
00002228  012E      
0000222A  42B0 0800 3637          clr.l     0(A0,D0.L)
                    3638   ; BreakPointSetOrCleared[i] = 0 ;
0000222E  2012      3639          move.l    (A2),D0
00002230  E588      3640          lsl.l     #2,D0
00002232  41F9 0B00 3641          lea       _BreakPointSetOrCleared.L,A0
00002236  015E      
00002238  42B0 0800 3642          clr.l     0(A0,D0.L)
                    3643   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000223C  2012      3644          move.l    (A2),D0
0000223E  E388      3645          lsl.l     #1,D0
00002240  41F9 0B00 3646          lea       _BreakPointInstruction.L,A0
00002244  014E      
00002246  226E FFFC 3647          move.l    -4(A6),A1
0000224A  32B0 0800 3648          move.w    0(A0,D0.L),(A1)
                    3649   ; BreakPointInstruction[i] = 0 ;
0000224E  2012      3650          move.l    (A2),D0
00002250  E388      3651          lsl.l     #1,D0
00002252  41F9 0B00 3652          lea       _BreakPointInstruction.L,A0
00002256  014E      
00002258  4270 0800 3653          clr.w     0(A0,D0.L)
                    3654   HandleBreakPoint_4:
0000225C  5292      3655          addq.l    #1,(A2)
0000225E  60A0      3656          bra       HandleBreakPoint_1
                    3657   HandleBreakPoint_3:
                    3658   ; }
                    3659   ; }
                    3660   ; DumpRegisters() ;
00002260  4EB8 13EC 3661          jsr       _DumpRegisters
                    3662   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002264  4879 0000 3663          pea       @m68kde~1_49.L
00002268  4770      
0000226A  4E93      3664          jsr       (A3)
0000226C  584F      3665          addq.w    #4,A7
                    3666   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
0000226E  4879 0000 3667          pea       @m68kde~1_88.L
00002272  4C0E      
00002274  4E93      3668          jsr       (A3)
00002276  584F      3669          addq.w    #4,A7
                    3670   ; menu() ;
00002278  4EB9 0000 3671          jsr       _menu
0000227C  2484      
0000227E  4CDF 1C00 3672          movem.l   (A7)+,A2/A3/A4
00002282  4E5E      3673          unlk      A6
00002284  4E75      3674          rts
                    3675   ; }
                    3676   ; void UnknownCommand()
                    3677   ; {
                    3678   _UnknownCommand:
                    3679   ; printf("\r\nUnknown Command.....\r\n") ;
00002286  4879 0000 3680          pea       @m68kde~1_89.L
0000228A  4C36      
0000228C  4EB9 0000 3681          jsr       _printf
00002290  3954      
00002292  584F      3682          addq.w    #4,A7
                    3683   ; Help() ;
00002294  4EB9 0000 3684          jsr       _Help
00002298  23AA      
0000229A  4E75      3685          rts
                    3686   ; }
                    3687   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3688   ; void CallDebugMonitor(void)
                    3689   ; {
                    3690   _CallDebugMonitor:
                    3691   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000229C  4879 0000 3692          pea       @m68kde~1_90.L
000022A0  4C50      
000022A2  4EB9 0000 3693          jsr       _printf
000022A6  3954      
000022A8  584F      3694          addq.w    #4,A7
                    3695   ; menu();
000022AA  4EB9 0000 3696          jsr       _menu
000022AE  2484      
000022B0  4E75      3697          rts
                    3698   ; }
                    3699   ; void Breakpoint(void)
                    3700   ; {
                    3701   _Breakpoint:
000022B2  2F02      3702          move.l    D2,-(A7)
                    3703   ; char c;
                    3704   ; c = toupper(_getch());
000022B4  2F00      3705          move.l    D0,-(A7)
000022B6  4EB8 0B68 3706          jsr       __getch
000022BA  2200      3707          move.l    D0,D1
000022BC  201F      3708          move.l    (A7)+,D0
000022BE  2F01      3709          move.l    D1,-(A7)
000022C0  4EB9 0000 3710          jsr       _toupper
000022C4  3092      
000022C6  584F      3711          addq.w    #4,A7
000022C8  1400      3712          move.b    D0,D2
                    3713   ; if( c == (char)('D'))                                      // BreakPoint Display
000022CA  0C02 0044 3714          cmp.b     #68,D2
000022CE  6608      3715          bne.s     Breakpoint_1
                    3716   ; BreakPointDisplay() ;
000022D0  4EB8 1B9A 3717          jsr       _BreakPointDisplay
000022D4  6000 0054 3718          bra       Breakpoint_10
                    3719   Breakpoint_1:
                    3720   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022D8  0C02 004B 3721          cmp.b     #75,D2
000022DC  6630      3722          bne.s     Breakpoint_3
                    3723   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022DE  4879 0000 3724          pea       @m68kde~1_91.L
000022E2  4C70      
000022E4  4EB9 0000 3725          jsr       _printf
000022E8  3954      
000022EA  584F      3726          addq.w    #4,A7
                    3727   ; c = toupper(_getch());
000022EC  2F00      3728          move.l    D0,-(A7)
000022EE  4EB8 0B68 3729          jsr       __getch
000022F2  2200      3730          move.l    D0,D1
000022F4  201F      3731          move.l    (A7)+,D0
000022F6  2F01      3732          move.l    D1,-(A7)
000022F8  4EB9 0000 3733          jsr       _toupper
000022FC  3092      
000022FE  584F      3734          addq.w    #4,A7
00002300  1400      3735          move.b    D0,D2
                    3736   ; if(c == (char)('Y'))
00002302  0C02 0059 3737          cmp.b     #89,D2
00002306  6604      3738          bne.s     Breakpoint_5
                    3739   ; KillAllBreakPoints() ;
00002308  4EB8 1F32 3740          jsr       _KillAllBreakPoints
                    3741   Breakpoint_5:
0000230C  601C      3742          bra.s     Breakpoint_10
                    3743   Breakpoint_3:
                    3744   ; }
                    3745   ; else if(c == (char)('S')) {
0000230E  0C02 0053 3746          cmp.b     #83,D2
00002312  6606      3747          bne.s     Breakpoint_7
                    3748   ; SetBreakPoint() ;
00002314  4EB8 1FCA 3749          jsr       _SetBreakPoint
00002318  6010      3750          bra.s     Breakpoint_10
                    3751   Breakpoint_7:
                    3752   ; }
                    3753   ; else if(c == (char)('C')) {
0000231A  0C02 0043 3754          cmp.b     #67,D2
0000231E  6606      3755          bne.s     Breakpoint_9
                    3756   ; BreakPointClear() ;
00002320  4EB8 1D1A 3757          jsr       _BreakPointClear
00002324  6004      3758          bra.s     Breakpoint_10
                    3759   Breakpoint_9:
                    3760   ; }
                    3761   ; else
                    3762   ; UnknownCommand() ;
00002326  4EB8 2286 3763          jsr       _UnknownCommand
                    3764   Breakpoint_10:
0000232A  241F      3765          move.l    (A7)+,D2
0000232C  4E75      3766          rts
                    3767   ; }
                    3768   ; void Watchpoint(void)
                    3769   ; {
                    3770   _Watchpoint:
0000232E  2F02      3771          move.l    D2,-(A7)
                    3772   ; char c;
                    3773   ; c = toupper(_getch());
00002330  2F00      3774          move.l    D0,-(A7)
00002332  4EB8 0B68 3775          jsr       __getch
00002336  2200      3776          move.l    D0,D1
00002338  201F      3777          move.l    (A7)+,D0
0000233A  2F01      3778          move.l    D1,-(A7)
0000233C  4EB9 0000 3779          jsr       _toupper
00002340  3092      
00002342  584F      3780          addq.w    #4,A7
00002344  1400      3781          move.b    D0,D2
                    3782   ; if( c == (char)('D'))                                      // WatchPoint Display
00002346  0C02 0044 3783          cmp.b     #68,D2
0000234A  6608      3784          bne.s     Watchpoint_1
                    3785   ; WatchPointDisplay() ;
0000234C  4EB8 1C6E 3786          jsr       _WatchPointDisplay
00002350  6000 0054 3787          bra       Watchpoint_10
                    3788   Watchpoint_1:
                    3789   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002354  0C02 004B 3790          cmp.b     #75,D2
00002358  6630      3791          bne.s     Watchpoint_3
                    3792   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000235A  4879 0000 3793          pea       @m68kde~1_92.L
0000235E  4C92      
00002360  4EB9 0000 3794          jsr       _printf
00002364  3954      
00002366  584F      3795          addq.w    #4,A7
                    3796   ; c = toupper(_getch());
00002368  2F00      3797          move.l    D0,-(A7)
0000236A  4EB8 0B68 3798          jsr       __getch
0000236E  2200      3799          move.l    D0,D1
00002370  201F      3800          move.l    (A7)+,D0
00002372  2F01      3801          move.l    D1,-(A7)
00002374  4EB9 0000 3802          jsr       _toupper
00002378  3092      
0000237A  584F      3803          addq.w    #4,A7
0000237C  1400      3804          move.b    D0,D2
                    3805   ; if(c == (char)('Y'))
0000237E  0C02 0059 3806          cmp.b     #89,D2
00002382  6604      3807          bne.s     Watchpoint_5
                    3808   ; KillAllWatchPoints() ;
00002384  4EB8 1F9A 3809          jsr       _KillAllWatchPoints
                    3810   Watchpoint_5:
00002388  601C      3811          bra.s     Watchpoint_10
                    3812   Watchpoint_3:
                    3813   ; }
                    3814   ; else if(c == (char)('S')) {
0000238A  0C02 0053 3815          cmp.b     #83,D2
0000238E  6606      3816          bne.s     Watchpoint_7
                    3817   ; SetWatchPoint() ;
00002390  4EB8 20EA 3818          jsr       _SetWatchPoint
00002394  6010      3819          bra.s     Watchpoint_10
                    3820   Watchpoint_7:
                    3821   ; }
                    3822   ; else if(c == (char)('C')) {
00002396  0C02 0043 3823          cmp.b     #67,D2
0000239A  6606      3824          bne.s     Watchpoint_9
                    3825   ; WatchPointClear() ;
0000239C  4EB8 1DF4 3826          jsr       _WatchPointClear
000023A0  6004      3827          bra.s     Watchpoint_10
                    3828   Watchpoint_9:
                    3829   ; }
                    3830   ; else
                    3831   ; UnknownCommand() ;
000023A2  4EB8 2286 3832          jsr       _UnknownCommand
                    3833   Watchpoint_10:
000023A6  241F      3834          move.l    (A7)+,D2
000023A8  4E75      3835          rts
                    3836   ; }
                    3837   ; void Help(void)
                    3838   ; {
                    3839   _Help:
000023AA  48E7 2020 3840          movem.l   D2/A2,-(A7)
000023AE  45F9 0000 3841          lea       _printf.L,A2
000023B2  3954      
                    3842   ; char *banner = "\r\n----------------------------------------------------------------" ;
000023B4  41F9 0000 3843          lea       @m68kde~1_93.L,A0
000023B8  4CB4      
000023BA  2408      3844          move.l    A0,D2
                    3845   ; printf(banner) ;
000023BC  2F02      3846          move.l    D2,-(A7)
000023BE  4E92      3847          jsr       (A2)
000023C0  584F      3848          addq.w    #4,A7
                    3849   ; printf("\r\n  Debugger Command Summary") ;
000023C2  4879 0000 3850          pea       @m68kde~1_94.L
000023C6  4CF8      
000023C8  4E92      3851          jsr       (A2)
000023CA  584F      3852          addq.w    #4,A7
                    3853   ; printf(banner) ;
000023CC  2F02      3854          move.l    D2,-(A7)
000023CE  4E92      3855          jsr       (A2)
000023D0  584F      3856          addq.w    #4,A7
                    3857   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023D2  4879 0000 3858          pea       @m68kde~1_95.L
000023D6  4D16      
000023D8  4E92      3859          jsr       (A2)
000023DA  584F      3860          addq.w    #4,A7
                    3861   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000023DC  4879 0000 3862          pea       @m68kde~1_96.L
000023E0  4D5A      
000023E2  4E92      3863          jsr       (A2)
000023E4  584F      3864          addq.w    #4,A7
                    3865   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000023E6  4879 0000 3866          pea       @m68kde~1_97.L
000023EA  4D92      
000023EC  4E92      3867          jsr       (A2)
000023EE  584F      3868          addq.w    #4,A7
                    3869   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000023F0  4879 0000 3870          pea       @m68kde~1_98.L
000023F4  4DCC      
000023F6  4E92      3871          jsr       (A2)
000023F8  584F      3872          addq.w    #4,A7
                    3873   ; printf("\r\n  E            - Enter String into Memory") ;
000023FA  4879 0000 3874          pea       @m68kde~1_99.L
000023FE  4DFE      
00002400  4E92      3875          jsr       (A2)
00002402  584F      3876          addq.w    #4,A7
                    3877   ; printf("\r\n  F            - Fill Memory with Data") ;
00002404  4879 0000 3878          pea       @m68kde~1_100.L
00002408  4E2A      
0000240A  4E92      3879          jsr       (A2)
0000240C  584F      3880          addq.w    #4,A7
                    3881   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000240E  2F39 0B00 3882          move.l    _PC.L,-(A7)
00002412  0120      
00002414  4879 0000 3883          pea       @m68kde~1_101.L
00002418  4E54      
0000241A  4E92      3884          jsr       (A2)
0000241C  504F      3885          addq.w    #8,A7
                    3886   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000241E  4879 0000 3887          pea       @m68kde~1_102.L
00002422  4E8E      
00002424  4E92      3888          jsr       (A2)
00002426  584F      3889          addq.w    #4,A7
                    3890   ; printf("\r\n  M            - Memory Examine and Change");
00002428  4879 0000 3891          pea       @m68kde~1_103.L
0000242C  4EC6      
0000242E  4E92      3892          jsr       (A2)
00002430  584F      3893          addq.w    #4,A7
                    3894   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002432  4879 0000 3895          pea       @m68kde~1_104.L
00002436  4EF4      
00002438  4E92      3896          jsr       (A2)
0000243A  584F      3897          addq.w    #4,A7
                    3898   ; printf("\r\n  R            - Display 68000 Registers") ;
0000243C  4879 0000 3899          pea       @m68kde~1_105.L
00002440  4F2E      
00002442  4E92      3900          jsr       (A2)
00002444  584F      3901          addq.w    #4,A7
                    3902   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002446  4879 0000 3903          pea       @m68kde~1_106.L
0000244A  4F5A      
0000244C  4E92      3904          jsr       (A2)
0000244E  584F      3905          addq.w    #4,A7
                    3906   ; printf("\r\n  TM           - Test Memory") ;
00002450  4879 0000 3907          pea       @m68kde~1_107.L
00002454  4F8C      
00002456  4E92      3908          jsr       (A2)
00002458  584F      3909          addq.w    #4,A7
                    3910   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000245A  4879 0000 3911          pea       @m68kde~1_108.L
0000245E  4FAC      
00002460  4E92      3912          jsr       (A2)
00002462  584F      3913          addq.w    #4,A7
                    3914   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002464  4879 0000 3915          pea       @m68kde~1_109.L
00002468  4FD4      
0000246A  4E92      3916          jsr       (A2)
0000246C  584F      3917          addq.w    #4,A7
                    3918   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000246E  4879 0000 3919          pea       @m68kde~1_110.L
00002472  500A      
00002474  4E92      3920          jsr       (A2)
00002476  584F      3921          addq.w    #4,A7
                    3922   ; printf(banner) ;
00002478  2F02      3923          move.l    D2,-(A7)
0000247A  4E92      3924          jsr       (A2)
0000247C  584F      3925          addq.w    #4,A7
0000247E  4CDF 0404 3926          movem.l   (A7)+,D2/A2
00002482  4E75      3927          rts
                    3928   ; }
                    3929   ; void menu(void)
                    3930   ; {
                    3931   _menu:
00002484  48E7 303C 3932          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002488  45F9 0000 3933          lea       _printf.L,A2
0000248C  3954      
0000248E  47F9 0B00 3934          lea       _Trace.L,A3
00002492  00D8      
00002494  49F9 0B00 3935          lea       _x.L,A4
00002498  00C8      
0000249A  4BF9 0B00 3936          lea       _SR.L,A5
0000249E  012C      
                    3937   ; char c,c1 ;
                    3938   ; while(1)    {
                    3939   menu_1:
                    3940   ; FlushKeyboard() ;               // dump unread characters from keyboard
000024A0  4EB8 0BA6 3941          jsr       _FlushKeyboard
                    3942   ; printf("\r\n#") ;
000024A4  4879 0000 3943          pea       @m68kde~1_111.L
000024A8  5042      
000024AA  4E92      3944          jsr       (A2)
000024AC  584F      3945          addq.w    #4,A7
                    3946   ; c = toupper(_getch());
000024AE  2F00      3947          move.l    D0,-(A7)
000024B0  4EB8 0B68 3948          jsr       __getch
000024B4  2200      3949          move.l    D0,D1
000024B6  201F      3950          move.l    (A7)+,D0
000024B8  2F01      3951          move.l    D1,-(A7)
000024BA  4EB9 0000 3952          jsr       _toupper
000024BE  3092      
000024C0  584F      3953          addq.w    #4,A7
000024C2  1400      3954          move.b    D0,D2
                    3955   ; if( c == (char)('L'))                  // load s record file
000024C4  0C02 004C 3956          cmp.b     #76,D2
000024C8  6608      3957          bne.s     menu_4
                    3958   ; Load_SRecordFile() ;
000024CA  4EB8 0E36 3959          jsr       _Load_SRecordFile
000024CE  6000 021E 3960          bra       menu_46
                    3961   menu_4:
                    3962   ; else if( c == (char)('D'))             // dump memory
000024D2  0C02 0044 3963          cmp.b     #68,D2
000024D6  6608      3964          bne.s     menu_6
                    3965   ; DumpMemory() ;
000024D8  4EB8 0CCC 3966          jsr       _DumpMemory
000024DC  6000 0210 3967          bra       menu_46
                    3968   menu_6:
                    3969   ; else if( c == (char)('E'))             // Enter String into memory
000024E0  0C02 0045 3970          cmp.b     #69,D2
000024E4  660A      3971          bne.s     menu_8
                    3972   ; EnterString() ;
000024E6  4EB9 0000 3973          jsr       _EnterString
000024EA  2836      
000024EC  6000 0200 3974          bra       menu_46
                    3975   menu_8:
                    3976   ; else if( c == (char)('F'))             // fill memory
000024F0  0C02 0046 3977          cmp.b     #70,D2
000024F4  6608      3978          bne.s     menu_10
                    3979   ; FillMemory() ;
000024F6  4EB8 0DBC 3980          jsr       _FillMemory
000024FA  6000 01F2 3981          bra       menu_46
                    3982   menu_10:
                    3983   ; else if( c == (char)('G'))  {           // go user program
000024FE  0C02 0047 3984          cmp.b     #71,D2
00002502  6626      3985          bne.s     menu_12
                    3986   ; printf("\r\nProgram Running.....") ;
00002504  4879 0000 3987          pea       @m68kde~1_112.L
00002508  5046      
0000250A  4E92      3988          jsr       (A2)
0000250C  584F      3989          addq.w    #4,A7
                    3990   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000250E  4879 0000 3991          pea       @m68kde~1_113.L
00002512  505E      
00002514  4E92      3992          jsr       (A2)
00002516  584F      3993          addq.w    #4,A7
                    3994   ; GoFlag = 1 ;
00002518  23FC 0000 3995          move.l    #1,_GoFlag.L
0000251C  0001 0B00 
00002520  00DC      
                    3996   ; go() ;
00002522  4EB8 08B8 3997          jsr       _go
00002526  6000 01C6 3998          bra       menu_46
                    3999   menu_12:
                    4000   ; }
                    4001   ; else if( c == (char)('M'))           // memory examine and modify
0000252A  0C02 004D 4002          cmp.b     #77,D2
0000252E  6608      4003          bne.s     menu_14
                    4004   ; MemoryChange() ;
00002530  4EB8 0FC4 4005          jsr       _MemoryChange
00002534  6000 01B8 4006          bra       menu_46
                    4007   menu_14:
                    4008   ; else if( c == (char)('P'))            // Program Flash Chip
00002538  0C02 0050 4009          cmp.b     #80,D2
0000253C  6608      4010          bne.s     menu_16
                    4011   ; ProgramFlashChip() ;
0000253E  4EB8 1368 4012          jsr       _ProgramFlashChip
00002542  6000 01AA 4013          bra       menu_46
                    4014   menu_16:
                    4015   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002546  0C02 0043 4016          cmp.b     #67,D2
0000254A  6608      4017          bne.s     menu_18
                    4018   ; LoadFromFlashChip();
0000254C  4EB8 13B8 4019          jsr       _LoadFromFlashChip
00002550  6000 019C 4020          bra       menu_46
                    4021   menu_18:
                    4022   ; else if( c == (char)('R'))             // dump registers
00002554  0C02 0052 4023          cmp.b     #82,D2
00002558  6608      4024          bne.s     menu_20
                    4025   ; DumpRegisters() ;
0000255A  4EB8 13EC 4026          jsr       _DumpRegisters
0000255E  6000 018E 4027          bra       menu_46
                    4028   menu_20:
                    4029   ; else if( c == (char)('.'))           // change registers
00002562  0C02 002E 4030          cmp.b     #46,D2
00002566  6608      4031          bne.s     menu_22
                    4032   ; ChangeRegisters() ;
00002568  4EB8 18DE 4033          jsr       _ChangeRegisters
0000256C  6000 0180 4034          bra       menu_46
                    4035   menu_22:
                    4036   ; else if( c == (char)('B'))              // breakpoint command
00002570  0C02 0042 4037          cmp.b     #66,D2
00002574  6608      4038          bne.s     menu_24
                    4039   ; Breakpoint() ;
00002576  4EB8 22B2 4040          jsr       _Breakpoint
0000257A  6000 0172 4041          bra       menu_46
                    4042   menu_24:
                    4043   ; else if( c == (char)('T'))  {          // Test command
0000257E  0C02 0054 4044          cmp.b     #84,D2
00002582  6600 0046 4045          bne       menu_26
                    4046   ; c1 = toupper(_getch()) ;
00002586  2F00      4047          move.l    D0,-(A7)
00002588  4EB8 0B68 4048          jsr       __getch
0000258C  2200      4049          move.l    D0,D1
0000258E  201F      4050          move.l    (A7)+,D0
00002590  2F01      4051          move.l    D1,-(A7)
00002592  4EB9 0000 4052          jsr       _toupper
00002596  3092      
00002598  584F      4053          addq.w    #4,A7
0000259A  1600      4054          move.b    D0,D3
                    4055   ; if(c1 == (char)('M'))                    // memory test
0000259C  0C03 004D 4056          cmp.b     #77,D3
000025A0  6608      4057          bne.s     menu_28
                    4058   ; MemoryTest() ;
000025A2  4EB9 0000 4059          jsr       _MemoryTest
000025A6  28AE      
000025A8  601C      4060          bra.s     menu_33
                    4061   menu_28:
                    4062   ; else if( c1 == (char)('S'))              // Switch Test command
000025AA  0C03 0053 4063          cmp.b     #83,D3
000025AE  6606      4064          bne.s     menu_30
                    4065   ; SwitchTest() ;
000025B0  4EB8 0AA4 4066          jsr       _SwitchTest
000025B4  6010      4067          bra.s     menu_33
                    4068   menu_30:
                    4069   ; else if( c1 == (char)('D'))              // display Test command
000025B6  0C03 0044 4070          cmp.b     #68,D3
000025BA  6606      4071          bne.s     menu_32
                    4072   ; TestLEDS() ;
000025BC  4EB8 0A50 4073          jsr       _TestLEDS
000025C0  6004      4074          bra.s     menu_33
                    4075   menu_32:
                    4076   ; else
                    4077   ; UnknownCommand() ;
000025C2  4EB8 2286 4078          jsr       _UnknownCommand
                    4079   menu_33:
000025C6  6000 0126 4080          bra       menu_46
                    4081   menu_26:
                    4082   ; }
                    4083   ; else if( c == (char)(' ')) {             // Next instruction command
000025CA  0C02 0020 4084          cmp.b     #32,D2
000025CE  6636      4085          bne.s     menu_34
                    4086   ; DisableBreakPoints() ;
000025D0  4EB8 1E96 4087          jsr       _DisableBreakPoints
                    4088   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000025D4  2013      4089          move.l    (A3),D0
000025D6  0C80 0000 4090          cmp.l     #1,D0
000025DA  0001      
000025DC  661A      4091          bne.s     menu_36
000025DE  2039 0B00 4092          move.l    _GoFlag.L,D0
000025E2  00DC      
000025E4  0C80 0000 4093          cmp.l     #1,D0
000025E8  0001      
000025EA  660C      4094          bne.s     menu_36
                    4095   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000025EC  13FC 0001 4096          move.b    #1,4194314
000025F0  0040 000A 
                    4097   ; return ;
000025F4  6000 00FC 4098          bra       menu_38
                    4099   menu_36:
                    4100   ; }
                    4101   ; else
                    4102   ; printf("\r\nError: Press 'G' first to start program") ;
000025F8  4879 0000 4103          pea       @m68kde~1_114.L
000025FC  508C      
000025FE  4E92      4104          jsr       (A2)
00002600  584F      4105          addq.w    #4,A7
00002602  6000 00EA 4106          bra       menu_46
                    4107   menu_34:
                    4108   ; }
                    4109   ; else if( c == (char)('S')) {             // single step
00002606  0C02 0053 4110          cmp.b     #83,D2
0000260A  6600 008C 4111          bne       menu_39
                    4112   ; if(Trace == 0) {
0000260E  2013      4113          move.l    (A3),D0
00002610  6600 0050 4114          bne       menu_41
                    4115   ; DisableBreakPoints() ;
00002614  4EB8 1E96 4116          jsr       _DisableBreakPoints
                    4117   ; printf("\r\nSingle Step  :[ON]") ;
00002618  4879 0000 4118          pea       @m68kde~1_115.L
0000261C  50B6      
0000261E  4E92      4119          jsr       (A2)
00002620  584F      4120          addq.w    #4,A7
                    4121   ; printf("\r\nBreak Points :[Disabled]") ;
00002622  4879 0000 4122          pea       @m68kde~1_48.L
00002626  4754      
00002628  4E92      4123          jsr       (A2)
0000262A  584F      4124          addq.w    #4,A7
                    4125   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
0000262C  0055 8000 4126          or.w      #32768,(A5)
                    4127   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002630  2F39 0B00 4128          move.l    _PC.L,-(A7)
00002634  0120      
00002636  4879 0000 4129          pea       @m68kde~1_116.L
0000263A  50CC      
0000263C  4E92      4130          jsr       (A2)
0000263E  504F      4131          addq.w    #8,A7
                    4132   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002640  4879 0000 4133          pea       @m68kde~1_117.L
00002644  5100      
00002646  4E92      4134          jsr       (A2)
00002648  584F      4135          addq.w    #4,A7
                    4136   ; DumpRegisters() ;
0000264A  4EB8 13EC 4137          jsr       _DumpRegisters
                    4138   ; Trace = 1;
0000264E  26BC 0000 4139          move.l    #1,(A3)
00002652  0001      
                    4140   ; TraceException = 1;
00002654  13FC 0001 4141          move.b    #1,4194314
00002658  0040 000A 
                    4142   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000265C  28B8 0074 4143          move.l    116,(A4)
00002660  6032      4144          bra.s     menu_42
                    4145   menu_41:
                    4146   ; }
                    4147   ; else {
                    4148   ; Trace = 0 ;
00002662  4293      4149          clr.l     (A3)
                    4150   ; TraceException = 0 ;
00002664  4239 0040 4151          clr.b     4194314
00002668  000A      
                    4152   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000266A  28B8 0074 4153          move.l    116,(A4)
                    4154   ; EnableBreakPoints() ;
0000266E  4EB8 1EEA 4155          jsr       _EnableBreakPoints
                    4156   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002672  0255 7FFF 4157          and.w     #32767,(A5)
                    4158   ; printf("\r\nSingle Step : [OFF]") ;
00002676  4879 0000 4159          pea       @m68kde~1_118.L
0000267A  5124      
0000267C  4E92      4160          jsr       (A2)
0000267E  584F      4161          addq.w    #4,A7
                    4162   ; printf("\r\nBreak Points :[Enabled]") ;
00002680  4879 0000 4163          pea       @m68kde~1_119.L
00002684  513A      
00002686  4E92      4164          jsr       (A2)
00002688  584F      4165          addq.w    #4,A7
                    4166   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
0000268A  4879 0000 4167          pea       @m68kde~1_120.L
0000268E  5154      
00002690  4E92      4168          jsr       (A2)
00002692  584F      4169          addq.w    #4,A7
                    4170   menu_42:
00002694  6000 0058 4171          bra       menu_46
                    4172   menu_39:
                    4173   ; }
                    4174   ; }
                    4175   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002698  0C02 001B 4176          cmp.b     #27,D2
0000269C  6600 0040 4177          bne       menu_43
                    4178   ; Trace = 0;
000026A0  4293      4179          clr.l     (A3)
                    4180   ; TraceException = 0;
000026A2  4239 0040 4181          clr.b     4194314
000026A6  000A      
                    4182   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000026A8  28B8 0074 4183          move.l    116,(A4)
                    4184   ; EnableBreakPoints() ;
000026AC  4EB8 1EEA 4185          jsr       _EnableBreakPoints
                    4186   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026B0  0255 7FFF 4187          and.w     #32767,(A5)
                    4188   ; printf("\r\nSingle Step  :[OFF]") ;
000026B4  4879 0000 4189          pea       @m68kde~1_121.L
000026B8  517E      
000026BA  4E92      4190          jsr       (A2)
000026BC  584F      4191          addq.w    #4,A7
                    4192   ; printf("\r\nBreak Points :[Enabled]");
000026BE  4879 0000 4193          pea       @m68kde~1_119.L
000026C2  513A      
000026C4  4E92      4194          jsr       (A2)
000026C6  584F      4195          addq.w    #4,A7
                    4196   ; printf("\r\nProgram Running.....") ;
000026C8  4879 0000 4197          pea       @m68kde~1_112.L
000026CC  5046      
000026CE  4E92      4198          jsr       (A2)
000026D0  584F      4199          addq.w    #4,A7
                    4200   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000026D2  4879 0000 4201          pea       @m68kde~1_113.L
000026D6  505E      
000026D8  4E92      4202          jsr       (A2)
000026DA  584F      4203          addq.w    #4,A7
                    4204   ; return ;
000026DC  6014      4205          bra.s     menu_38
                    4206   menu_43:
                    4207   ; }
                    4208   ; else if( c == (char)('W'))              // Watchpoint command
000026DE  0C02 0057 4209          cmp.b     #87,D2
000026E2  6606      4210          bne.s     menu_45
                    4211   ; Watchpoint() ;
000026E4  4EB8 232E 4212          jsr       _Watchpoint
000026E8  6004      4213          bra.s     menu_46
                    4214   menu_45:
                    4215   ; else
                    4216   ; UnknownCommand() ;
000026EA  4EB8 2286 4217          jsr       _UnknownCommand
                    4218   menu_46:
000026EE  6000 FDB0 4219          bra       menu_1
                    4220   menu_38:
000026F2  4CDF 3C0C 4221          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000026F6  4E75      4222          rts
                    4223   ; }
                    4224   ; }
                    4225   ; void PrintErrorMessageandAbort(char *string) {
                    4226   _PrintErrorMessageandAbort:
000026F8  4E56 0000 4227          link      A6,#0
                    4228   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000026FC  4879 0000 4229          pea       @m68kde~1_122.L
00002700  5194      
00002702  4EB9 0000 4230          jsr       _printf
00002706  3954      
00002708  584F      4231          addq.w    #4,A7
                    4232   ; printf("%s\r\n", string) ;
0000270A  2F2E 0008 4233          move.l    8(A6),-(A7)
0000270E  4879 0000 4234          pea       @m68kde~1_123.L
00002712  51B0      
00002714  4EB9 0000 4235          jsr       _printf
00002718  3954      
0000271A  504F      4236          addq.w    #8,A7
                    4237   ; menu() ;
0000271C  4EB8 2484 4238          jsr       _menu
00002720  4E5E      4239          unlk      A6
00002722  4E75      4240          rts
                    4241   ; }
                    4242   ; void IRQMessage(int level) {
                    4243   _IRQMessage:
00002724  4E56 0000 4244          link      A6,#0
                    4245   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002728  4879 0000 4246          pea       @m68kde~1_124.L
0000272C  51B6      
0000272E  4EB9 0000 4247          jsr       _printf
00002732  3954      
00002734  584F      4248          addq.w    #4,A7
                    4249   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002736  2F2E 0008 4250          move.l    8(A6),-(A7)
0000273A  4879 0000 4251          pea       @m68kde~1_125.L
0000273E  51CE      
00002740  4EB9 0000 4252          jsr       _printf
00002744  3954      
00002746  504F      4253          addq.w    #8,A7
                    4254   ; menu() ;
00002748  4EB8 2484 4255          jsr       _menu
0000274C  4E5E      4256          unlk      A6
0000274E  4E75      4257          rts
                    4258   ; }
                    4259   ; void UnhandledIRQ1(void) {
                    4260   _UnhandledIRQ1:
                    4261   ; IRQMessage(1);
00002750  4878 0001 4262          pea       1
00002754  4EB8 2724 4263          jsr       _IRQMessage
00002758  584F      4264          addq.w    #4,A7
0000275A  4E75      4265          rts
                    4266   ; }
                    4267   ; void UnhandledIRQ2(void) {
                    4268   _UnhandledIRQ2:
                    4269   ; IRQMessage(2);
0000275C  4878 0002 4270          pea       2
00002760  4EB8 2724 4271          jsr       _IRQMessage
00002764  584F      4272          addq.w    #4,A7
00002766  4E75      4273          rts
                    4274   ; }
                    4275   ; void UnhandledIRQ3(void){
                    4276   _UnhandledIRQ3:
                    4277   ; IRQMessage(3);
00002768  4878 0003 4278          pea       3
0000276C  4EB8 2724 4279          jsr       _IRQMessage
00002770  584F      4280          addq.w    #4,A7
00002772  4E75      4281          rts
                    4282   ; }
                    4283   ; void UnhandledIRQ4(void) {
                    4284   _UnhandledIRQ4:
                    4285   ; IRQMessage(4);
00002774  4878 0004 4286          pea       4
00002778  4EB8 2724 4287          jsr       _IRQMessage
0000277C  584F      4288          addq.w    #4,A7
0000277E  4E75      4289          rts
                    4290   ; }
                    4291   ; void UnhandledIRQ5(void) {
                    4292   _UnhandledIRQ5:
                    4293   ; IRQMessage(5);
00002780  4878 0005 4294          pea       5
00002784  4EB8 2724 4295          jsr       _IRQMessage
00002788  584F      4296          addq.w    #4,A7
0000278A  4E75      4297          rts
                    4298   ; }
                    4299   ; void UnhandledIRQ6(void) {
                    4300   _UnhandledIRQ6:
                    4301   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
0000278C  4879 0000 4302          pea       @m68kde~1_126.L
00002790  51F2      
00002792  4EB8 26F8 4303          jsr       _PrintErrorMessageandAbort
00002796  584F      4304          addq.w    #4,A7
                    4305   ; menu() ;
00002798  4EB8 2484 4306          jsr       _menu
0000279C  4E75      4307          rts
                    4308   ; }
                    4309   ; void UnhandledIRQ7(void) {
                    4310   _UnhandledIRQ7:
                    4311   ; IRQMessage(7);
0000279E  4878 0007 4312          pea       7
000027A2  4EB8 2724 4313          jsr       _IRQMessage
000027A6  584F      4314          addq.w    #4,A7
000027A8  4E75      4315          rts
                    4316   ; }
                    4317   ; void UnhandledTrap(void) {
                    4318   _UnhandledTrap:
                    4319   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000027AA  4879 0000 4320          pea       @m68kde~1_127.L
000027AE  5232      
000027B0  4EB8 26F8 4321          jsr       _PrintErrorMessageandAbort
000027B4  584F      4322          addq.w    #4,A7
000027B6  4E75      4323          rts
                    4324   ; }
                    4325   ; void BusError() {
                    4326   _BusError:
                    4327   ; PrintErrorMessageandAbort("BUS Error!") ;
000027B8  4879 0000 4328          pea       @m68kde~1_128.L
000027BC  5248      
000027BE  4EB8 26F8 4329          jsr       _PrintErrorMessageandAbort
000027C2  584F      4330          addq.w    #4,A7
000027C4  4E75      4331          rts
                    4332   ; }
                    4333   ; void AddressError() {
                    4334   _AddressError:
                    4335   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000027C6  4879 0000 4336          pea       @m68kde~1_129.L
000027CA  5254      
000027CC  4EB8 26F8 4337          jsr       _PrintErrorMessageandAbort
000027D0  584F      4338          addq.w    #4,A7
000027D2  4E75      4339          rts
                    4340   ; }
                    4341   ; void IllegalInstruction() {
                    4342   _IllegalInstruction:
                    4343   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000027D4  4879 0000 4344          pea       @m68kde~1_130.L
000027D8  5264      
000027DA  4EB8 26F8 4345          jsr       _PrintErrorMessageandAbort
000027DE  584F      4346          addq.w    #4,A7
000027E0  4E75      4347          rts
                    4348   ; }
                    4349   ; void Dividebyzero() {
                    4350   _Dividebyzero:
                    4351   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000027E2  4879 0000 4352          pea       @m68kde~1_131.L
000027E6  5278      
000027E8  4EB8 26F8 4353          jsr       _PrintErrorMessageandAbort
000027EC  584F      4354          addq.w    #4,A7
000027EE  4E75      4355          rts
                    4356   ; }
                    4357   ; void Check() {
                    4358   _Check:
                    4359   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000027F0  4879 0000 4360          pea       @m68kde~1_132.L
000027F4  5288      
000027F6  4EB8 26F8 4361          jsr       _PrintErrorMessageandAbort
000027FA  584F      4362          addq.w    #4,A7
000027FC  4E75      4363          rts
                    4364   ; }
                    4365   ; void Trapv() {
                    4366   _Trapv:
                    4367   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000027FE  4879 0000 4368          pea       @m68kde~1_133.L
00002802  529A      
00002804  4EB8 26F8 4369          jsr       _PrintErrorMessageandAbort
00002808  584F      4370          addq.w    #4,A7
0000280A  4E75      4371          rts
                    4372   ; }
                    4373   ; void PrivError() {
                    4374   _PrivError:
                    4375   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
0000280C  4879 0000 4376          pea       @m68kde~1_134.L
00002810  52AC      
00002812  4EB8 26F8 4377          jsr       _PrintErrorMessageandAbort
00002816  584F      4378          addq.w    #4,A7
00002818  4E75      4379          rts
                    4380   ; }
                    4381   ; void UnitIRQ() {
                    4382   _UnitIRQ:
                    4383   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
0000281A  4879 0000 4384          pea       @m68kde~1_135.L
0000281E  52C0      
00002820  4EB8 26F8 4385          jsr       _PrintErrorMessageandAbort
00002824  584F      4386          addq.w    #4,A7
00002826  4E75      4387          rts
                    4388   ; }
                    4389   ; void Spurious() {
                    4390   _Spurious:
                    4391   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002828  4879 0000 4392          pea       @m68kde~1_136.L
0000282C  52D2      
0000282E  4EB8 26F8 4393          jsr       _PrintErrorMessageandAbort
00002832  584F      4394          addq.w    #4,A7
00002834  4E75      4395          rts
                    4396   ; }
                    4397   ; void EnterString(void)
                    4398   ; {
                    4399   _EnterString:
00002836  4E56 FFFC 4400          link      A6,#-4
0000283A  2F02      4401          move.l    D2,-(A7)
                    4402   ; unsigned char *Start;
                    4403   ; unsigned char c;
                    4404   ; printf("\r\nStart Address in Memory: ") ;
0000283C  4879 0000 4405          pea       @m68kde~1_137.L
00002840  52E0      
00002842  4EB9 0000 4406          jsr       _printf
00002846  3954      
00002848  584F      4407          addq.w    #4,A7
                    4408   ; Start = Get8HexDigits(0) ;
0000284A  42A7      4409          clr.l     -(A7)
0000284C  4EB8 0CA4 4410          jsr       _Get8HexDigits
00002850  584F      4411          addq.w    #4,A7
00002852  2400      4412          move.l    D0,D2
                    4413   ; printf("\r\nEnter String (ESC to end) :") ;
00002854  4879 0000 4414          pea       @m68kde~1_138.L
00002858  52FC      
0000285A  4EB9 0000 4415          jsr       _printf
0000285E  3954      
00002860  584F      4416          addq.w    #4,A7
                    4417   ; while((c = getchar()) != 0x1b)
                    4418   EnterString_1:
00002862  4EB9 0000 4419          jsr       _getch
00002866  2FC8      
00002868  1D40 FFFF 4420          move.b    D0,-1(A6)
0000286C  0C00 001B 4421          cmp.b     #27,D0
00002870  670A      4422          beq.s     EnterString_3
                    4423   ; *Start++ = c ;
00002872  2042      4424          move.l    D2,A0
00002874  5282      4425          addq.l    #1,D2
00002876  10AE FFFF 4426          move.b    -1(A6),(A0)
0000287A  60E6      4427          bra       EnterString_1
                    4428   EnterString_3:
                    4429   ; *Start = 0x00;  // terminate with a null
0000287C  2042      4430          move.l    D2,A0
0000287E  4210      4431          clr.b     (A0)
00002880  241F      4432          move.l    (A7)+,D2
00002882  4E5E      4433          unlk      A6
00002884  4E75      4434          rts
                    4435   ; }
                    4436   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4437   ; void clearInputBuffer() {
                    4438   _clearInputBuffer:
00002886  4E56 FFFC 4439          link      A6,#-4
                    4440   ; int c;
                    4441   ; while ((c = getchar()) != '\n' && c != EOF);
                    4442   clearInputBuffer_1:
0000288A  4EB9 0000 4443          jsr       _getch
0000288E  2FC8      
00002890  2D40 FFFC 4444          move.l    D0,-4(A6)
00002894  0C80 0000 4445          cmp.l     #10,D0
00002898  000A      
0000289A  670E      4446          beq.s     clearInputBuffer_3
0000289C  202E FFFC 4447          move.l    -4(A6),D0
000028A0  0C80 FFFF 4448          cmp.l     #-1,D0
000028A4  FFFF      
000028A6  6702      4449          beq.s     clearInputBuffer_3
000028A8  60E0      4450          bra       clearInputBuffer_1
                    4451   clearInputBuffer_3:
000028AA  4E5E      4452          unlk      A6
000028AC  4E75      4453          rts
                    4454   ; }
                    4455   ; void MemoryTest(void)
                    4456   ; {
                    4457   _MemoryTest:
000028AE  4E56 FF40 4458          link      A6,#-192
000028B2  48E7 3F3C 4459          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000028B6  45F9 0000 4460          lea       _printf.L,A2
000028BA  3954      
000028BC  4BF8 0B68 4461          lea       __getch.L,A5
                    4462   ; unsigned int *RamPtr, counter1=1 ;
000028C0  2D7C 0000 4463          move.l    #1,-188(A6)
000028C4  0001 FF44 
                    4464   ; register unsigned int i ;
                    4465   ; unsigned int Start, End ;
                    4466   ; char c, text[150];
                    4467   ; unsigned int* addressPointer;
                    4468   ; unsigned int startAddress = NULL;
000028C8  42AE FFF0 4469          clr.l     -16(A6)
                    4470   ; unsigned int endAddress = NULL;
000028CC  42AE FFF4 4471          clr.l     -12(A6)
                    4472   ; unsigned int byteLength;
                    4473   ; unsigned int dataSize = 0;
000028D0  4285      4474          clr.l     D5
                    4475   ; unsigned int dataPattern = 0;
000028D2  4283      4476          clr.l     D3
                    4477   ; unsigned int currAddress;
                    4478   ; unsigned int addrCount;
                    4479   ; unsigned int intBuffer = NULL;
000028D4  7E00      4480          moveq     #0,D7
                    4481   ; unsigned char *startAddressPtr = NULL;
000028D6  4282      4482          clr.l     D2
                    4483   ; unsigned char *endAddressPtr = NULL;
000028D8  4286      4484          clr.l     D6
                    4485   ; unsigned short int *wordAddressPtr = NULL;
000028DA  387C 0000 4486          move.w    #0,A4
                    4487   ; unsigned int *longAddressPtr = NULL;
000028DE  367C 0000 4488          move.w    #0,A3
                    4489   ; // IMPROVEMENTS TO BE MADE:
                    4490   ; // Suppossed to be able to write an odd address as a byte
                    4491   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    4492   ; // printf("\r\nStart Address: ") ;
                    4493   ; // Start = Get8HexDigits(0) ;
                    4494   ; // printf("\r\nEnd Address: ") ;
                    4495   ; // End = Get8HexDigits(0) ;
                    4496   ; // TODO
                    4497   ; scanflush();
000028E2  4EB9 0000 4498          jsr       _scanflush
000028E6  334A      
                    4499   ; memset(text, 0, sizeof(text));  // fills with zeros
000028E8  4878 0096 4500          pea       150
000028EC  42A7      4501          clr.l     -(A7)
000028EE  486E FF56 4502          pea       -170(A6)
000028F2  4EB9 0000 4503          jsr       _memset
000028F6  3064      
000028F8  DEFC 000C 4504          add.w     #12,A7
                    4505   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
000028FC  4879 0000 4506          pea       @m68kde~1_139.L
00002900  531A      
00002902  4E92      4507          jsr       (A2)
00002904  584F      4508          addq.w    #4,A7
                    4509   ; dataSize = _getch() - 48;
00002906  4E95      4510          jsr       (A5)
00002908  0480 0000 4511          sub.l     #48,D0
0000290C  0030      
0000290E  2A00      4512          move.l    D0,D5
                    4513   ; printf("\n");
00002910  4879 0000 4514          pea       @m68kde~1_140.L
00002914  5370      
00002916  4E92      4515          jsr       (A2)
00002918  584F      4516          addq.w    #4,A7
                    4517   ; if (dataSize == 0) {
0000291A  4A85      4518          tst.l     D5
0000291C  6600 0058 4519          bne       MemoryTest_1
                    4520   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
00002920  4879 0000 4521          pea       @m68kde~1_141.L
00002924  5372      
00002926  4E92      4522          jsr       (A2)
00002928  584F      4523          addq.w    #4,A7
                    4524   ; intBuffer = _getch() - 48;
0000292A  4E95      4525          jsr       (A5)
0000292C  0480 0000 4526          sub.l     #48,D0
00002930  0030      
00002932  2E00      4527          move.l    D0,D7
                    4528   ; // scanf("%d", &intBuffer);
                    4529   ; switch (intBuffer) {
00002934  2007      4530          move.l    D7,D0
00002936  0C80 0000 4531          cmp.l     #4,D0
0000293A  0004      
0000293C  642C      4532          bhs.s     MemoryTest_4
0000293E  E380      4533          asl.l     #1,D0
00002940  303B 0806 4534          move.w    MemoryTest_5(PC,D0.L),D0
00002944  4EFB 0002 4535          jmp       MemoryTest_5(PC,D0.W)
                    4536   MemoryTest_5:
00002948  0008      4537          dc.w      MemoryTest_6-MemoryTest_5
0000294A  000C      4538          dc.w      MemoryTest_7-MemoryTest_5
0000294C  0014      4539          dc.w      MemoryTest_8-MemoryTest_5
0000294E  001C      4540          dc.w      MemoryTest_9-MemoryTest_5
                    4541   MemoryTest_6:
                    4542   ; case(0):
                    4543   ; dataPattern = 0x00; break;
00002950  4283      4544          clr.l     D3
00002952  6016      4545          bra.s     MemoryTest_4
                    4546   MemoryTest_7:
                    4547   ; case(1):
                    4548   ; dataPattern = 0xB2; break;
00002954  263C 0000 4549          move.l    #178,D3
00002958  00B2      
0000295A  600E      4550          bra.s     MemoryTest_4
                    4551   MemoryTest_8:
                    4552   ; case(2):
                    4553   ; dataPattern = 0xC3; break;
0000295C  263C 0000 4554          move.l    #195,D3
00002960  00C3      
00002962  6006      4555          bra.s     MemoryTest_4
                    4556   MemoryTest_9:
                    4557   ; case(3):
                    4558   ; dataPattern = 0xD4; break;
00002964  263C 0000 4559          move.l    #212,D3
00002968  00D4      
                    4560   MemoryTest_4:
                    4561   ; }
                    4562   ; dataPattern &= 0xFF;
0000296A  C6BC 0000 4563          and.l     #255,D3
0000296E  00FF      
                    4564   ; byteLength = 1;
00002970  7801      4565          moveq     #1,D4
00002972  6000 00AE 4566          bra       MemoryTest_11
                    4567   MemoryTest_1:
                    4568   ; } else if (dataSize == 1) {
00002976  0C85 0000 4569          cmp.l     #1,D5
0000297A  0001      
0000297C  6600 0058 4570          bne       MemoryTest_10
                    4571   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
00002980  4879 0000 4572          pea       @m68kde~1_142.L
00002984  53D4      
00002986  4E92      4573          jsr       (A2)
00002988  584F      4574          addq.w    #4,A7
                    4575   ; intBuffer = _getch() - 48;
0000298A  4E95      4576          jsr       (A5)
0000298C  0480 0000 4577          sub.l     #48,D0
00002990  0030      
00002992  2E00      4578          move.l    D0,D7
                    4579   ; switch (intBuffer) {
00002994  2007      4580          move.l    D7,D0
00002996  0C80 0000 4581          cmp.l     #4,D0
0000299A  0004      
0000299C  642C      4582          bhs.s     MemoryTest_13
0000299E  E380      4583          asl.l     #1,D0
000029A0  303B 0806 4584          move.w    MemoryTest_14(PC,D0.L),D0
000029A4  4EFB 0002 4585          jmp       MemoryTest_14(PC,D0.W)
                    4586   MemoryTest_14:
000029A8  0008      4587          dc.w      MemoryTest_15-MemoryTest_14
000029AA  000C      4588          dc.w      MemoryTest_16-MemoryTest_14
000029AC  0014      4589          dc.w      MemoryTest_17-MemoryTest_14
000029AE  001C      4590          dc.w      MemoryTest_18-MemoryTest_14
                    4591   MemoryTest_15:
                    4592   ; case(0):
                    4593   ; dataPattern = 0x0000; break;
000029B0  4283      4594          clr.l     D3
000029B2  6016      4595          bra.s     MemoryTest_13
                    4596   MemoryTest_16:
                    4597   ; case(1):
                    4598   ; dataPattern = 0x1234; break;
000029B4  263C 0000 4599          move.l    #4660,D3
000029B8  1234      
000029BA  600E      4600          bra.s     MemoryTest_13
                    4601   MemoryTest_17:
                    4602   ; case(2):
                    4603   ; dataPattern = 0xA1B2; break;
000029BC  263C 0000 4604          move.l    #41394,D3
000029C0  A1B2      
000029C2  6006      4605          bra.s     MemoryTest_13
                    4606   MemoryTest_18:
                    4607   ; case(3):
                    4608   ; dataPattern = 0xC3D4; break;
000029C4  263C 0000 4609          move.l    #50132,D3
000029C8  C3D4      
                    4610   MemoryTest_13:
                    4611   ; }
                    4612   ; dataPattern &= 0xFFFF;
000029CA  C6BC 0000 4613          and.l     #65535,D3
000029CE  FFFF      
                    4614   ; byteLength = 2;
000029D0  7802      4615          moveq     #2,D4
000029D2  6000 004E 4616          bra       MemoryTest_11
                    4617   MemoryTest_10:
                    4618   ; } else {
                    4619   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
000029D6  4879 0000 4620          pea       @m68kde~1_143.L
000029DA  543E      
000029DC  4E92      4621          jsr       (A2)
000029DE  584F      4622          addq.w    #4,A7
                    4623   ; intBuffer = _getch() - 48;
000029E0  4E95      4624          jsr       (A5)
000029E2  0480 0000 4625          sub.l     #48,D0
000029E6  0030      
000029E8  2E00      4626          move.l    D0,D7
                    4627   ; switch (intBuffer) {
000029EA  2007      4628          move.l    D7,D0
000029EC  0C80 0000 4629          cmp.l     #4,D0
000029F0  0004      
000029F2  642C      4630          bhs.s     MemoryTest_20
000029F4  E380      4631          asl.l     #1,D0
000029F6  303B 0806 4632          move.w    MemoryTest_21(PC,D0.L),D0
000029FA  4EFB 0002 4633          jmp       MemoryTest_21(PC,D0.W)
                    4634   MemoryTest_21:
000029FE  0008      4635          dc.w      MemoryTest_22-MemoryTest_21
00002A00  000C      4636          dc.w      MemoryTest_23-MemoryTest_21
00002A02  0014      4637          dc.w      MemoryTest_24-MemoryTest_21
00002A04  001C      4638          dc.w      MemoryTest_25-MemoryTest_21
                    4639   MemoryTest_22:
                    4640   ; case(0):
                    4641   ; dataPattern = 0x00000000; break;
00002A06  4283      4642          clr.l     D3
00002A08  6016      4643          bra.s     MemoryTest_20
                    4644   MemoryTest_23:
                    4645   ; case(1):
                    4646   ; dataPattern = 0xAABBCCDD; break;
00002A0A  263C AABB 4647          move.l    #-1430532899,D3
00002A0E  CCDD      
00002A10  600E      4648          bra.s     MemoryTest_20
                    4649   MemoryTest_24:
                    4650   ; case(2):
                    4651   ; dataPattern = 0x11223344; break;
00002A12  263C 1122 4652          move.l    #287454020,D3
00002A16  3344      
00002A18  6006      4653          bra.s     MemoryTest_20
                    4654   MemoryTest_25:
                    4655   ; case(3):
                    4656   ; dataPattern = 0x76543210; break;
00002A1A  263C 7654 4657          move.l    #1985229328,D3
00002A1E  3210      
                    4658   MemoryTest_20:
                    4659   ; }
                    4660   ; byteLength = 4;
00002A20  7804      4661          moveq     #4,D4
                    4662   MemoryTest_11:
                    4663   ; }
                    4664   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    4665   ; while (startAddressPtr == NULL || 
                    4666   MemoryTest_26:
00002A22  4A82      4667          tst.l     D2
00002A24  6732      4668          beq.s     MemoryTest_29
00002A26  0C84 0000 4669          cmp.l     #1,D4
00002A2A  0001      
00002A2C  6316      4670          bls.s     MemoryTest_30
00002A2E  2F02      4671          move.l    D2,-(A7)
00002A30  4878 0002 4672          pea       2
00002A34  4EB9 0000 4673          jsr       ULDIV
00002A38  2EBA      
00002A3A  202F 0004 4674          move.l    4(A7),D0
00002A3E  504F      4675          addq.w    #8,A7
00002A40  4A80      4676          tst.l     D0
00002A42  6614      4677          bne.s     MemoryTest_29
                    4678   MemoryTest_30:
00002A44  0C82 0802 4679          cmp.l     #134348800,D2
00002A48  0000      
00002A4A  650C      4680          blo.s     MemoryTest_29
00002A4C  203C 0B00 4681          move.l    #184549376,D0
00002A50  0000      
00002A52  9084      4682          sub.l     D4,D0
00002A54  B480      4683          cmp.l     D0,D2
00002A56  6316      4684          bls.s     MemoryTest_28
                    4685   MemoryTest_29:
                    4686   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    4687   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    4688   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    4689   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
00002A58  4879 0000 4690          pea       @m68kde~1_144.L
00002A5C  54BC      
00002A5E  4E92      4691          jsr       (A2)
00002A60  584F      4692          addq.w    #4,A7
                    4693   ; startAddressPtr =  Get8HexDigits(0);
00002A62  42A7      4694          clr.l     -(A7)
00002A64  4EB8 0CA4 4695          jsr       _Get8HexDigits
00002A68  584F      4696          addq.w    #4,A7
00002A6A  2400      4697          move.l    D0,D2
00002A6C  60B4      4698          bra       MemoryTest_26
                    4699   MemoryTest_28:
                    4700   ; }
                    4701   ; while (endAddressPtr == NULL || 
                    4702   MemoryTest_31:
00002A6E  4A86      4703          tst.l     D6
00002A70  670A      4704          beq.s     MemoryTest_34
00002A72  202E FFF0 4705          move.l    -16(A6),D0
00002A76  D084      4706          add.l     D4,D0
00002A78  BC80      4707          cmp.l     D0,D6
00002A7A  6416      4708          bhs.s     MemoryTest_33
                    4709   MemoryTest_34:
                    4710   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    4711   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00002A7C  4879 0000 4712          pea       @m68kde~1_145.L
00002A80  54F4      
00002A82  4E92      4713          jsr       (A2)
00002A84  584F      4714          addq.w    #4,A7
                    4715   ; endAddressPtr =  Get8HexDigits(0);
00002A86  42A7      4716          clr.l     -(A7)
00002A88  4EB8 0CA4 4717          jsr       _Get8HexDigits
00002A8C  584F      4718          addq.w    #4,A7
00002A8E  2C00      4719          move.l    D0,D6
00002A90  60DC      4720          bra       MemoryTest_31
                    4721   MemoryTest_33:
                    4722   ; }
                    4723   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00002A92  2F02      4724          move.l    D2,-(A7)
00002A94  4879 0000 4725          pea       @m68kde~1_146.L
00002A98  552A      
00002A9A  4E92      4726          jsr       (A2)
00002A9C  504F      4727          addq.w    #8,A7
                    4728   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
00002A9E  2F06      4729          move.l    D6,-(A7)
00002AA0  4879 0000 4730          pea       @m68kde~1_147.L
00002AA4  5542      
00002AA6  4E92      4731          jsr       (A2)
00002AA8  504F      4732          addq.w    #8,A7
                    4733   ; addrCount = 0;
00002AAA  42AE FFFC 4734          clr.l     -4(A6)
                    4735   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    4736   MemoryTest_35:
00002AAE  B486      4737          cmp.l     D6,D2
00002AB0  6400 0132 4738          bhs       MemoryTest_37
00002AB4  2006      4739          move.l    D6,D0
00002AB6  9082      4740          sub.l     D2,D0
00002AB8  5280      4741          addq.l    #1,D0
00002ABA  B084      4742          cmp.l     D4,D0
00002ABC  6500 0126 4743          blo       MemoryTest_37
                    4744   ; // If address goes beyond 0x0B00_0000 then break
                    4745   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
00002AC0  203C 0B00 4746          move.l    #184549376,D0
00002AC4  0000      
00002AC6  9084      4747          sub.l     D4,D0
00002AC8  B480      4748          cmp.l     D0,D2
00002ACA  6310      4749          bls.s     MemoryTest_38
                    4750   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
00002ACC  2F02      4751          move.l    D2,-(A7)
00002ACE  4879 0000 4752          pea       @m68kde~1_148.L
00002AD2  5558      
00002AD4  4E92      4753          jsr       (A2)
00002AD6  504F      4754          addq.w    #8,A7
                    4755   ; break;
00002AD8  6000 010A 4756          bra       MemoryTest_37
                    4757   MemoryTest_38:
                    4758   ; }
                    4759   ; longAddressPtr = startAddressPtr;
00002ADC  2642      4760          move.l    D2,A3
                    4761   ; wordAddressPtr = startAddressPtr;
00002ADE  2842      4762          move.l    D2,A4
                    4763   ; if (dataSize == 0) {
00002AE0  4A85      4764          tst.l     D5
00002AE2  6600 0034 4765          bne       MemoryTest_40
                    4766   ; *startAddressPtr = dataPattern;
00002AE6  2042      4767          move.l    D2,A0
00002AE8  1083      4768          move.b    D3,(A0)
                    4769   ; if ((*startAddressPtr) != dataPattern) {
00002AEA  2042      4770          move.l    D2,A0
00002AEC  1010      4771          move.b    (A0),D0
00002AEE  C0BC 0000 4772          and.l     #255,D0
00002AF2  00FF      
00002AF4  B083      4773          cmp.l     D3,D0
00002AF6  671C      4774          beq.s     MemoryTest_42
                    4775   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002AF8  2F03      4776          move.l    D3,-(A7)
00002AFA  2042      4777          move.l    D2,A0
00002AFC  1210      4778          move.b    (A0),D1
00002AFE  C2BC 0000 4779          and.l     #255,D1
00002B02  00FF      
00002B04  2F01      4780          move.l    D1,-(A7)
00002B06  2F02      4781          move.l    D2,-(A7)
00002B08  4879 0000 4782          pea       @m68kde~1_149.L
00002B0C  558A      
00002B0E  4E92      4783          jsr       (A2)
00002B10  DEFC 0010 4784          add.w     #16,A7
                    4785   MemoryTest_42:
00002B14  6000 0058 4786          bra       MemoryTest_48
                    4787   MemoryTest_40:
                    4788   ; }
                    4789   ; } else if (dataSize == 1) {
00002B18  0C85 0000 4790          cmp.l     #1,D5
00002B1C  0001      
00002B1E  662C      4791          bne.s     MemoryTest_44
                    4792   ; *wordAddressPtr = dataPattern;
00002B20  3883      4793          move.w    D3,(A4)
                    4794   ; if ((*wordAddressPtr) != dataPattern) {
00002B22  3014      4795          move.w    (A4),D0
00002B24  C0BC 0000 4796          and.l     #65535,D0
00002B28  FFFF      
00002B2A  B083      4797          cmp.l     D3,D0
00002B2C  671C      4798          beq.s     MemoryTest_46
                    4799   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002B2E  2F03      4800          move.l    D3,-(A7)
00002B30  2042      4801          move.l    D2,A0
00002B32  1210      4802          move.b    (A0),D1
00002B34  C2BC 0000 4803          and.l     #255,D1
00002B38  00FF      
00002B3A  2F01      4804          move.l    D1,-(A7)
00002B3C  2F02      4805          move.l    D2,-(A7)
00002B3E  4879 0000 4806          pea       @m68kde~1_149.L
00002B42  558A      
00002B44  4E92      4807          jsr       (A2)
00002B46  DEFC 0010 4808          add.w     #16,A7
                    4809   MemoryTest_46:
00002B4A  6022      4810          bra.s     MemoryTest_48
                    4811   MemoryTest_44:
                    4812   ; }
                    4813   ; } else {
                    4814   ; *longAddressPtr = dataPattern;
00002B4C  2683      4815          move.l    D3,(A3)
                    4816   ; if ((*longAddressPtr) != dataPattern) {
00002B4E  B693      4817          cmp.l     (A3),D3
00002B50  671C      4818          beq.s     MemoryTest_48
                    4819   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002B52  2F03      4820          move.l    D3,-(A7)
00002B54  2042      4821          move.l    D2,A0
00002B56  1210      4822          move.b    (A0),D1
00002B58  C2BC 0000 4823          and.l     #255,D1
00002B5C  00FF      
00002B5E  2F01      4824          move.l    D1,-(A7)
00002B60  2F02      4825          move.l    D2,-(A7)
00002B62  4879 0000 4826          pea       @m68kde~1_149.L
00002B66  558A      
00002B68  4E92      4827          jsr       (A2)
00002B6A  DEFC 0010 4828          add.w     #16,A7
                    4829   MemoryTest_48:
                    4830   ; }
                    4831   ; }
                    4832   ; // if ((*startAddressPtr) != dataPattern) {
                    4833   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    4834   ; // }
                    4835   ; addrCount++;
00002B6E  52AE FFFC 4836          addq.l    #1,-4(A6)
                    4837   ; if (addrCount % 128 == 0) {
00002B72  2F2E FFFC 4838          move.l    -4(A6),-(A7)
00002B76  4878 0080 4839          pea       128
00002B7A  4EB9 0000 4840          jsr       ULDIV
00002B7E  2EBA      
00002B80  202F 0004 4841          move.l    4(A7),D0
00002B84  504F      4842          addq.w    #8,A7
00002B86  4A80      4843          tst.l     D0
00002B88  6600 0054 4844          bne       MemoryTest_55
                    4845   ; if (dataSize == 0) {
00002B8C  4A85      4846          tst.l     D5
00002B8E  661C      4847          bne.s     MemoryTest_52
                    4848   ; printf("Address: 0x%x Value: 0x%02X\n",
00002B90  2042      4849          move.l    D2,A0
00002B92  1210      4850          move.b    (A0),D1
00002B94  C2BC 0000 4851          and.l     #255,D1
00002B98  00FF      
00002B9A  2F01      4852          move.l    D1,-(A7)
00002B9C  2F02      4853          move.l    D2,-(A7)
00002B9E  4879 0000 4854          pea       @m68kde~1_150.L
00002BA2  55D0      
00002BA4  4E92      4855          jsr       (A2)
00002BA6  DEFC 000C 4856          add.w     #12,A7
00002BAA  6032      4857          bra.s     MemoryTest_55
                    4858   MemoryTest_52:
                    4859   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    4860   ; }
                    4861   ; else if (dataSize == 1) {
00002BAC  0C85 0000 4862          cmp.l     #1,D5
00002BB0  0001      
00002BB2  661A      4863          bne.s     MemoryTest_54
                    4864   ; printf("Address: 0x%x Value: 0x%04X\n",
00002BB4  3214      4865          move.w    (A4),D1
00002BB6  C2BC 0000 4866          and.l     #65535,D1
00002BBA  FFFF      
00002BBC  2F01      4867          move.l    D1,-(A7)
00002BBE  2F0C      4868          move.l    A4,-(A7)
00002BC0  4879 0000 4869          pea       @m68kde~1_151.L
00002BC4  55EE      
00002BC6  4E92      4870          jsr       (A2)
00002BC8  DEFC 000C 4871          add.w     #12,A7
00002BCC  6010      4872          bra.s     MemoryTest_55
                    4873   MemoryTest_54:
                    4874   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    4875   ; }
                    4876   ; else {
                    4877   ; printf("Address: 0x%x Value: 0x%08X\n",
00002BCE  2F13      4878          move.l    (A3),-(A7)
00002BD0  2F0B      4879          move.l    A3,-(A7)
00002BD2  4879 0000 4880          pea       @m68kde~1_152.L
00002BD6  560C      
00002BD8  4E92      4881          jsr       (A2)
00002BDA  DEFC 000C 4882          add.w     #12,A7
                    4883   MemoryTest_55:
                    4884   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    4885   ; }
                    4886   ; }
                    4887   ; startAddressPtr += byteLength;
00002BDE  D484      4888          add.l     D4,D2
00002BE0  6000 FECC 4889          bra       MemoryTest_35
                    4890   MemoryTest_37:
00002BE4  4CDF 3CFC 4891          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002BE8  4E5E      4892          unlk      A6
00002BEA  4E75      4893          rts
                    4894   ; }
                    4895   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4896   ; }
                    4897   ; void main(void)
                    4898   ; {
                    4899   _main:
00002BEC  4E56 FFF4 4900          link      A6,#-12
00002BF0  48E7 3030 4901          movem.l   D2/D3/A2/A3,-(A7)
00002BF4  45F8 0A30 4902          lea       _InstallExceptionHandler.L,A2
00002BF8  47F9 0000 4903          lea       _printf.L,A3
00002BFC  3954      
                    4904   ; char c ;
                    4905   ; int i, j ;
                    4906   ; char *BugMessage = "DE1-68k Bug V1.77";
00002BFE  41F9 0000 4907          lea       @m68kde~1_153.L,A0
00002C02  562A      
00002C04  2608      4908          move.l    A0,D3
                    4909   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002C06  41F9 0000 4910          lea       @m68kde~1_154.L,A0
00002C0A  563C      
00002C0C  2D48 FFFC 4911          move.l    A0,-4(A6)
                    4912   ; KillAllBreakPoints() ;
00002C10  4EB8 1F32 4913          jsr       _KillAllBreakPoints
                    4914   ; i = x = y = z = PortA_Count = 0;
00002C14  42B9 0B00 4915          clr.l     _PortA_Count.L
00002C18  00D4      
00002C1A  42B9 0B00 4916          clr.l     _z.L
00002C1E  00D0      
00002C20  42B9 0B00 4917          clr.l     _y.L
00002C24  00CC      
00002C26  42B9 0B00 4918          clr.l     _x.L
00002C2A  00C8      
00002C2C  4282      4919          clr.l     D2
                    4920   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002C2E  42B9 0B00 4921          clr.l     _GoFlag.L
00002C32  00DC      
00002C34  42B9 0B00 4922          clr.l     _Trace.L
00002C38  00D8      
                    4923   ; Echo = 1 ;
00002C3A  23FC 0000 4924          move.l    #1,_Echo.L
00002C3E  0001 0B00 
00002C42  00E0      
                    4925   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002C44  42B9 0B00 4926          clr.l     _d7.L
00002C48  0100      
00002C4A  42B9 0B00 4927          clr.l     _d6.L
00002C4E  00FC      
00002C50  42B9 0B00 4928          clr.l     _d5.L
00002C54  00F8      
00002C56  42B9 0B00 4929          clr.l     _d4.L
00002C5A  00F4      
00002C5C  42B9 0B00 4930          clr.l     _d3.L
00002C60  00F0      
00002C62  42B9 0B00 4931          clr.l     _d2.L
00002C66  00EC      
00002C68  42B9 0B00 4932          clr.l     _d1.L
00002C6C  00E8      
00002C6E  42B9 0B00 4933          clr.l     _d0.L
00002C72  00E4      
                    4934   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002C74  42B9 0B00 4935          clr.l     _a6.L
00002C78  011C      
00002C7A  42B9 0B00 4936          clr.l     _a5.L
00002C7E  0118      
00002C80  42B9 0B00 4937          clr.l     _a4.L
00002C84  0114      
00002C86  42B9 0B00 4938          clr.l     _a3.L
00002C8A  0110      
00002C8C  42B9 0B00 4939          clr.l     _a2.L
00002C90  010C      
00002C92  42B9 0B00 4940          clr.l     _a1.L
00002C96  0108      
00002C98  42B9 0B00 4941          clr.l     _a0.L
00002C9C  0104      
                    4942   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002C9E  23FC 0800 4943          move.l    #134217728,_PC.L
00002CA2  0000 0B00 
00002CA6  0120      
00002CA8  23FC 0C00 4944          move.l    #201326592,_SSP.L
00002CAC  0000 0B00 
00002CB0  0124      
00002CB2  23FC 0C00 4945          move.l    #201326592,_USP.L
00002CB6  0000 0B00 
00002CBA  0128      
                    4946   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002CBC  33FC 2000 4947          move.w    #8192,_SR.L
00002CC0  0B00 012C 
                    4948   ; // Initialise Breakpoint variables
                    4949   ; for(i = 0; i < 8; i++)  {
00002CC4  4282      4950          clr.l     D2
                    4951   main_1:
00002CC6  0C82 0000 4952          cmp.l     #8,D2
00002CCA  0008      
00002CCC  6C00 004C 4953          bge       main_3
                    4954   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002CD0  2002      4955          move.l    D2,D0
00002CD2  E588      4956          lsl.l     #2,D0
00002CD4  41F9 0B00 4957          lea       _BreakPointAddress.L,A0
00002CD8  012E      
00002CDA  42B0 0800 4958          clr.l     0(A0,D0.L)
                    4959   ; WatchPointAddress[i] = 0 ;
00002CDE  2002      4960          move.l    D2,D0
00002CE0  E588      4961          lsl.l     #2,D0
00002CE2  41F9 0B00 4962          lea       _WatchPointAddress.L,A0
00002CE6  0182      
00002CE8  42B0 0800 4963          clr.l     0(A0,D0.L)
                    4964   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002CEC  2002      4965          move.l    D2,D0
00002CEE  E388      4966          lsl.l     #1,D0
00002CF0  41F9 0B00 4967          lea       _BreakPointInstruction.L,A0
00002CF4  014E      
00002CF6  4270 0800 4968          clr.w     0(A0,D0.L)
                    4969   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002CFA  2002      4970          move.l    D2,D0
00002CFC  E588      4971          lsl.l     #2,D0
00002CFE  41F9 0B00 4972          lea       _BreakPointSetOrCleared.L,A0
00002D02  015E      
00002D04  42B0 0800 4973          clr.l     0(A0,D0.L)
                    4974   ; WatchPointSetOrCleared[i] = 0;
00002D08  2002      4975          move.l    D2,D0
00002D0A  E588      4976          lsl.l     #2,D0
00002D0C  41F9 0B00 4977          lea       _WatchPointSetOrCleared.L,A0
00002D10  01A2      
00002D12  42B0 0800 4978          clr.l     0(A0,D0.L)
00002D16  5282      4979          addq.l    #1,D2
00002D18  60AC      4980          bra       main_1
                    4981   main_3:
                    4982   ; }
                    4983   ; Init_RS232() ;     // initialise the RS232 port
00002D1A  4EB8 0B12 4984          jsr       _Init_RS232
                    4985   ; Init_LCD() ;
00002D1E  4EB8 095E 4986          jsr       _Init_LCD
                    4987   ; SPI_Init();
00002D22  4EB8 10FC 4988          jsr       _SPI_Init
                    4989   ; for( i = 32; i < 48; i++)
00002D26  7420      4990          moveq     #32,D2
                    4991   main_4:
00002D28  0C82 0000 4992          cmp.l     #48,D2
00002D2C  0030      
00002D2E  6C0E      4993          bge.s     main_6
                    4994   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002D30  2F02      4995          move.l    D2,-(A7)
00002D32  4878 27AA 4996          pea       _UnhandledTrap.L
00002D36  4E92      4997          jsr       (A2)
00002D38  504F      4998          addq.w    #8,A7
00002D3A  5282      4999          addq.l    #1,D2
00002D3C  60EA      5000          bra       main_4
                    5001   main_6:
                    5002   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002D3E  4878 002F 5003          pea       47
00002D42  4878 2484 5004          pea       _menu.L
00002D46  4E92      5005          jsr       (A2)
00002D48  504F      5006          addq.w    #8,A7
                    5007   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002D4A  4878 0019 5008          pea       25
00002D4E  4878 2750 5009          pea       _UnhandledIRQ1.L
00002D52  4E92      5010          jsr       (A2)
00002D54  504F      5011          addq.w    #8,A7
                    5012   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002D56  4878 001A 5013          pea       26
00002D5A  4878 275C 5014          pea       _UnhandledIRQ2.L
00002D5E  4E92      5015          jsr       (A2)
00002D60  504F      5016          addq.w    #8,A7
                    5017   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002D62  4878 001B 5018          pea       27
00002D66  4878 2768 5019          pea       _UnhandledIRQ3.L
00002D6A  4E92      5020          jsr       (A2)
00002D6C  504F      5021          addq.w    #8,A7
                    5022   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002D6E  4878 001C 5023          pea       28
00002D72  4878 2774 5024          pea       _UnhandledIRQ4.L
00002D76  4E92      5025          jsr       (A2)
00002D78  504F      5026          addq.w    #8,A7
                    5027   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002D7A  4878 001D 5028          pea       29
00002D7E  4878 2780 5029          pea       _UnhandledIRQ5.L
00002D82  4E92      5030          jsr       (A2)
00002D84  504F      5031          addq.w    #8,A7
                    5032   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002D86  4878 001E 5033          pea       30
00002D8A  4878 278C 5034          pea       _UnhandledIRQ6.L
00002D8E  4E92      5035          jsr       (A2)
00002D90  504F      5036          addq.w    #8,A7
                    5037   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002D92  4878 001F 5038          pea       31
00002D96  4878 279E 5039          pea       _UnhandledIRQ7.L
00002D9A  4E92      5040          jsr       (A2)
00002D9C  504F      5041          addq.w    #8,A7
                    5042   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002D9E  4878 002E 5043          pea       46
00002DA2  4878 21C0 5044          pea       _HandleBreakPoint.L
00002DA6  4E92      5045          jsr       (A2)
00002DA8  504F      5046          addq.w    #8,A7
                    5047   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002DAA  4878 001D 5048          pea       29
00002DAE  4878 18A0 5049          pea       _DumpRegistersandPause.L
00002DB2  4E92      5050          jsr       (A2)
00002DB4  504F      5051          addq.w    #8,A7
                    5052   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002DB6  4878 0002 5053          pea       2
00002DBA  4878 27B8 5054          pea       _BusError.L
00002DBE  4E92      5055          jsr       (A2)
00002DC0  504F      5056          addq.w    #8,A7
                    5057   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002DC2  4878 0003 5058          pea       3
00002DC6  4878 27C6 5059          pea       _AddressError.L
00002DCA  4E92      5060          jsr       (A2)
00002DCC  504F      5061          addq.w    #8,A7
                    5062   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002DCE  4878 0004 5063          pea       4
00002DD2  4878 27D4 5064          pea       _IllegalInstruction.L
00002DD6  4E92      5065          jsr       (A2)
00002DD8  504F      5066          addq.w    #8,A7
                    5067   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002DDA  4878 0005 5068          pea       5
00002DDE  4878 27E2 5069          pea       _Dividebyzero.L
00002DE2  4E92      5070          jsr       (A2)
00002DE4  504F      5071          addq.w    #8,A7
                    5072   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002DE6  4878 0006 5073          pea       6
00002DEA  4878 27F0 5074          pea       _Check.L
00002DEE  4E92      5075          jsr       (A2)
00002DF0  504F      5076          addq.w    #8,A7
                    5077   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002DF2  4878 0007 5078          pea       7
00002DF6  4878 27FE 5079          pea       _Trapv.L
00002DFA  4E92      5080          jsr       (A2)
00002DFC  504F      5081          addq.w    #8,A7
                    5082   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002DFE  4878 0008 5083          pea       8
00002E02  4878 280C 5084          pea       _PrivError.L
00002E06  4E92      5085          jsr       (A2)
00002E08  504F      5086          addq.w    #8,A7
                    5087   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002E0A  4878 000F 5088          pea       15
00002E0E  4878 281A 5089          pea       _UnitIRQ.L
00002E12  4E92      5090          jsr       (A2)
00002E14  504F      5091          addq.w    #8,A7
                    5092   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002E16  4878 0018 5093          pea       24
00002E1A  4878 27F0 5094          pea       _Check.L
00002E1E  4E92      5095          jsr       (A2)
00002E20  504F      5096          addq.w    #8,A7
                    5097   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002E22  4EB8 0BA6 5098          jsr       _FlushKeyboard
                    5099   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002E26  4239 0040 5100          clr.b     4194314
00002E2A  000A      
                    5101   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5102   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5103   main_7:
00002E2C  1039 0040 5104          move.b    4194306,D0
00002E30  0002      
00002E32  C03C 0002 5105          and.b     #2,D0
00002E36  0C00 0002 5106          cmp.b     #2,D0
00002E3A  662A      5107          bne.s     main_9
                    5108   ; LoadFromFlashChip();
00002E3C  4EB8 13B8 5109          jsr       _LoadFromFlashChip
                    5110   ; printf("\r\nRunning.....") ;
00002E40  4879 0000 5111          pea       @m68kde~1_155.L
00002E44  565A      
00002E46  4E93      5112          jsr       (A3)
00002E48  584F      5113          addq.w    #4,A7
                    5114   ; Oline1("Running.....") ;
00002E4A  4879 0000 5115          pea       @m68kde~1_156.L
00002E4E  566A      
00002E50  4EB8 0A02 5116          jsr       _Oline1
00002E54  584F      5117          addq.w    #4,A7
                    5118   ; GoFlag = 1;
00002E56  23FC 0000 5119          move.l    #1,_GoFlag.L
00002E5A  0001 0B00 
00002E5E  00DC      
                    5120   ; go() ;
00002E60  4EB8 08B8 5121          jsr       _go
00002E64  60C6      5122          bra       main_7
                    5123   main_9:
                    5124   ; }
                    5125   ; // otherwise start the debug monitor
                    5126   ; Oline0(BugMessage) ;
00002E66  2F03      5127          move.l    D3,-(A7)
00002E68  4EB8 09D4 5128          jsr       _Oline0
00002E6C  584F      5129          addq.w    #4,A7
                    5130   ; Oline1("By: PJ Davies") ;
00002E6E  4879 0000 5131          pea       @m68kde~1_157.L
00002E72  5678      
00002E74  4EB8 0A02 5132          jsr       _Oline1
00002E78  584F      5133          addq.w    #4,A7
                    5134   ; printf("\r\n%s", BugMessage) ;
00002E7A  2F03      5135          move.l    D3,-(A7)
00002E7C  4879 0000 5136          pea       @m68kde~1_158.L
00002E80  5686      
00002E82  4E93      5137          jsr       (A3)
00002E84  504F      5138          addq.w    #8,A7
                    5139   ; printf("\r\n%s", CopyrightMessage) ;
00002E86  2F2E FFFC 5140          move.l    -4(A6),-(A7)
00002E8A  4879 0000 5141          pea       @m68kde~1_158.L
00002E8E  5686      
00002E90  4E93      5142          jsr       (A3)
00002E92  504F      5143          addq.w    #8,A7
                    5144   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00002E94  4879 0000 5145          pea       @m68kde~1_159.L
00002E98  568C      
00002E9A  4E93      5146          jsr       (A3)
00002E9C  584F      5147          addq.w    #4,A7
                    5148   ; menu();
00002E9E  4EB8 2484 5149          jsr       _menu
00002EA2  4CDF 0C0C 5150          movem.l   (A7)+,D2/D3/A2/A3
00002EA6  4E5E      5151          unlk      A6
00002EA8  4E75      5152          rts
                    5153   ; }
                    5154   _strcpy:
00002EAA  206F 0004 5155          move.l    (4,A7),A0
00002EAE  226F 0008 5156          move.l    (8,A7),A1
00002EB2  2008      5157          move.l    A0,D0
                    5158   strcpy_1:
00002EB4  10D9      5159          move.b    (A1)+,(A0)+
00002EB6  66FC      5160          bne       strcpy_1
00002EB8  4E75      5161          rts
                    5162   ULDIV:
00002EBA  4E56 0000 5163          link    A6,#0
00002EBE  48E7 C000 5164          movem.l D0/D1,-(A7)
00002EC2  222E 0008 5165          move.l  8(A6),D1
00002EC6  202E 000C 5166          move.l  12(A6),D0
00002ECA  6036      5167          bra.s   ldiv_3
                    5168   LDIV:
00002ECC  4E56 0000 5169          link    A6,#0
00002ED0  48E7 C000 5170          movem.l D0/D1,-(A7)
00002ED4  222E 0008 5171          move.l  8(A6),D1
00002ED8  202E 000C 5172          move.l  12(A6),D0
00002EDC  4A80      5173          tst.l   D0
00002EDE  6A0E      5174          bpl.s   ldiv_1
00002EE0  4480      5175          neg.l   D0
00002EE2  4A81      5176          tst.l   D1
00002EE4  6A14      5177          bpl.s   ldiv_2
00002EE6  4481      5178          neg.l   D1
00002EE8  612A      5179          bsr.s   dodiv
00002EEA  4481      5180          neg.l   D1
00002EEC  6016      5181          bra.s   ldiv_4
                    5182   ldiv_1:
00002EEE  4A81      5183          tst.l   D1
00002EF0  6A10      5184          bpl.s   ldiv_3
00002EF2  4481      5185          neg.l   D1
00002EF4  611E      5186          bsr.s   dodiv
00002EF6  4480      5187          neg.l   D0
00002EF8  600A      5188          bra.s   ldiv_4
                    5189   ldiv_2:
00002EFA  6118      5190          bsr.s   dodiv
00002EFC  4480      5191          neg.l   D0
00002EFE  4481      5192          neg.l   D1
00002F00  6002      5193          bra.s   ldiv_4
                    5194   ldiv_3:
00002F02  6110      5195          bsr.s   dodiv
                    5196   ldiv_4:
00002F04  2D40 0008 5197          move.l  D0,8(A6)
00002F08  2D41 000C 5198          move.l  D1,12(A6)
00002F0C  4CDF 0003 5199          movem.l (A7)+,D0/D1
00002F10  4E5E      5200          unlk    A6
00002F12  4E75      5201          rts
                    5202   dodiv:
00002F14  0C81 0000 5203          cmpi.l  #$FFFF,D1
00002F18  FFFF      
00002F1A  6236      5204          bhi.s   dodiv_2
00002F1C  0C80 0000 5205          cmpi.l  #$FFFF,D0
00002F20  FFFF      
00002F22  6210      5206          bhi.s   dodiv_1
00002F24  80C1      5207          divu    D1,D0
00002F26  2200      5208          move.l  D0,D1
00002F28  4241      5209          clr.w   D1
00002F2A  4841      5210          swap    D1
00002F2C  0280 0000 5211          andi.l  #$FFFF,D0
00002F30  FFFF      
00002F32  4E75      5212          rts
                    5213   dodiv_1:
00002F34  48A7 A000 5214          movem.w D0/D2,-(A7)
00002F38  4240      5215          clr.w   D0
00002F3A  4840      5216          swap    D0
00002F3C  80C1      5217          divu    D1,D0
00002F3E  3400      5218          move.w  D0,D2
00002F40  301F      5219          move.w  (A7)+,D0
00002F42  80C1      5220          divu    D1,D0
00002F44  4840      5221          swap    D0
00002F46  4281      5222          clr.l   D1
00002F48  3200      5223          move.w  D0,D1
00002F4A  3002      5224          move.w  D2,D0
00002F4C  4840      5225          swap    D0
00002F4E  341F      5226          move.w  (A7)+,D2
00002F50  4E75      5227          rts
                    5228   dodiv_2:
00002F52  48E7 3800 5229          movem.l D2/D3/D4,-(A7)
00002F56  2401      5230          move.l  D1,D2
00002F58  4242      5231          clr.w   D2
00002F5A  4842      5232          swap    D2
00002F5C  5282      5233          addq.l  #1,D2
00002F5E  2600      5234          move.l  D0,D3
00002F60  2801      5235          move.l  D1,D4
00002F62  2202      5236          move.l  D2,D1
00002F64  61CE      5237          bsr.s   dodiv_1
00002F66  2204      5238          move.l  D4,D1
00002F68  82C2      5239          divu    D2,D1
00002F6A  80C1      5240          divu    D1,D0
00002F6C  0280 0000 5241          andi.l  #$FFFF,D0
00002F70  FFFF      
                    5242   dodiv_3:
00002F72  2204      5243          move.l  D4,D1
00002F74  2404      5244          move.l  D4,D2
00002F76  4842      5245          swap    D2
00002F78  C2C0      5246          mulu    D0,D1
00002F7A  C4C0      5247          mulu    D0,D2
00002F7C  4842      5248          swap    D2
00002F7E  D282      5249          add.l   D2,D1
00002F80  9283      5250          sub.l   D3,D1
00002F82  620A      5251          bhi.s   dodiv_4
00002F84  4481      5252          neg.l   D1
00002F86  B881      5253          cmp.l   D1,D4
00002F88  6208      5254          bhi.s   dodiv_5
00002F8A  5280      5255          addq.l  #1,D0
00002F8C  60E4      5256          bra.s   dodiv_3
                    5257   dodiv_4:
00002F8E  5380      5258          subq.l  #1,D0
00002F90  60E0      5259          bra.s   dodiv_3
                    5260   dodiv_5:
00002F92  4CDF 001C 5261          movem.l (A7)+,D2/D3/D4
00002F96  4E75      5262          rts
                    5263   _putch:
00002F98  4E56 0000 5264          link      A6,#0
00002F9C  48E7 2000 5265          movem.l   D2,-(A7)
00002FA0  242E 0008 5266          move.l    8(A6),D2
00002FA4  0C82 0000 5267          cmp.l     #10,D2
00002FA8  000A      
00002FAA  660A      5268          bne.s     putch_1
00002FAC  4878 000D 5269          pea       13
00002FB0  6100 DB8A 5270          bsr       __putch
00002FB4  584F      5271          addq.w    #4,A7
                    5272   putch_1:
00002FB6  2F02      5273          move.l    D2,-(A7)
00002FB8  6100 DB82 5274          bsr       __putch
00002FBC  584F      5275          addq.w    #4,A7
00002FBE  2002      5276          move.l    D2,D0
00002FC0  4CDF 0004 5277          movem.l   (A7)+,D2
00002FC4  4E5E      5278          unlk      A6
00002FC6  4E75      5279          rts
                    5280   _getch:
00002FC8  48E7 2000 5281          movem.l   D2,-(A7)
00002FCC  2439 0B00 5282          move.l    __ungetbuf,D2
00002FD0  00C0      
00002FD2  2039 0B00 5283          move.l    __ungetbuf,D0
00002FD6  00C0      
00002FD8  0C80 FFFF 5284          cmp.l     #-1,D0
00002FDC  FFFF      
00002FDE  670C      5285          beq.s     getch_1
00002FE0  23FC FFFF 5286          move.l    #-1,__ungetbuf
00002FE4  FFFF 0B00 
00002FE8  00C0      
00002FEA  6010      5287          bra.s     getch_3
                    5288   getch_1:
00002FEC  6100 DB7A 5289          bsr       __getch
00002FF0  2400      5290          move.l    D0,D2
00002FF2  0C80 0000 5291          cmp.l     #13,D0
00002FF6  000D      
00002FF8  6602      5292          bne.s     getch_3
00002FFA  740A      5293          moveq     #10,D2
                    5294   getch_3:
00002FFC  2002      5295          move.l    D2,D0
00002FFE  4CDF 0004 5296          movem.l   (A7)+,D2
00003002  4E75      5297          rts
                    5298   _tolower:
00003004  4E56 0000 5299          link      A6,#0
00003008  48E7 2000 5300          movem.l   D2,-(A7)
0000300C  242E 0008 5301          move.l    8(A6),D2
00003010  0C82 0000 5302          cmp.l     #65,D2
00003014  0041      
00003016  6D0E      5303          blt.s     tolower_1
00003018  0C82 0000 5304          cmp.l     #90,D2
0000301C  005A      
0000301E  6E06      5305          bgt.s     tolower_1
00003020  84BC 0000 5306          or.l      #32,D2
00003024  0020      
                    5307   tolower_1:
00003026  2002      5308          move.l    D2,D0
00003028  4CDF 0004 5309          movem.l   (A7)+,D2
0000302C  4E5E      5310          unlk      A6
0000302E  4E75      5311          rts
                    5312   _sprintf:
00003030  4E56 FFFC 5313          link      A6,#-4
00003034  48E7 2000 5314          movem.l   D2,-(A7)
00003038  41EE 000C 5315          lea       12(A6),A0
0000303C  5848      5316          addq.w    #4,A0
0000303E  2408      5317          move.l    A0,D2
00003040  2F02      5318          move.l    D2,-(A7)
00003042  2F2E 000C 5319          move.l    12(A6),-(A7)
00003046  2F2E 0008 5320          move.l    8(A6),-(A7)
0000304A  6100 09EC 5321          bsr       _vsprintf
0000304E  DEFC 000C 5322          add.w     #12,A7
00003052  2D40 FFFC 5323          move.l    D0,-4(A6)
00003056  4282      5324          clr.l     D2
00003058  202E FFFC 5325          move.l    -4(A6),D0
0000305C  4CDF 0004 5326          movem.l   (A7)+,D2
00003060  4E5E      5327          unlk      A6
00003062  4E75      5328          rts
                    5329   _memset:
00003064  206F 0004 5330          move.l    (4,A7),A0
00003068  202F 0008 5331          move.l    (8,A7),D0
0000306C  222F 000C 5332          move.l    (12,A7),D1
00003070  2248      5333          move.l    A0,A1	
                    5334   memset_1:
00003072  12C0      5335          move.b    D0,(A1)+
00003074  5341      5336          subq      #1,D1
00003076  66FA      5337          bne       memset_1
00003078  2008      5338          move.l    A0,D0
0000307A  4E75      5339          rts
                    5340   _strcat:
0000307C  206F 0004 5341          move.l    (4,A7),A0	
00003080  226F 0008 5342          move.l    (8,A7),A1	
00003084  2008      5343          move.l    A0,D0		
                    5344   strcat_0:
00003086  4A18      5345          tst.b     (A0)+
00003088  66FC      5346          bne       strcat_0
0000308A  5348      5347          subq      #1,A0
                    5348   strcat_1:
0000308C  10D9      5349          move.b    (A1)+,(A0)+
0000308E  66FC      5350          bne       strcat_1
00003090  4E75      5351          rts
                    5352   _toupper:
00003092  4E56 0000 5353          link      A6,#0
00003096  48E7 2000 5354          movem.l   D2,-(A7)
0000309A  242E 0008 5355          move.l    8(A6),D2
0000309E  0C82 0000 5356          cmp.l     #97,D2
000030A2  0061      
000030A4  6D0E      5357          blt.s     toupper_1
000030A6  0C82 0000 5358          cmp.l     #122,D2
000030AA  007A      
000030AC  6E06      5359          bgt.s     toupper_1
000030AE  C4BC 0000 5360          and.l     #95,D2
000030B2  005F      
                    5361   toupper_1:
000030B4  2002      5362          move.l    D2,D0
000030B6  4CDF 0004 5363          movem.l   (A7)+,D2
000030BA  4E5E      5364          unlk      A6
000030BC  4E75      5365          rts
                    5366   @vsscanf_scanread:
000030BE  4E56 FFFC 5367          link      A6,#-4
000030C2  48E7 0020 5368          movem.l   A2,-(A7)
000030C6  45F9 0000 5369          lea       @vsscanf_bufx,A2
000030CA  56D4      
000030CC  4AAE 0008 5370          tst.l     8(A6)
000030D0  6722      5371          beq.s     @vsscanf_scanread_1
000030D2  206E 0008 5372          move.l    8(A6),A0
000030D6  58AE 0008 5373          addq.l    #4,8(A6)
000030DA  2050      5374          move.l    (A0),A0
000030DC  1010      5375          move.b    (A0),D0
000030DE  4880      5376          ext.w     D0
000030E0  48C0      5377          ext.l     D0
000030E2  2D40 FFFC 5378          move.l    D0,-4(A6)
000030E6  6706      5379          beq.s     @vsscanf_scanread_3
000030E8  202E FFFC 5380          move.l    -4(A6),D0
000030EC  6002      5381          bra.s     @vsscanf_scanread_4
                    5382   @vsscanf_scanread_3:
000030EE  70FF      5383          moveq     #-1,D0
                    5384   @vsscanf_scanread_4:
000030F0  6000 0032 5385          bra       @vsscanf_scanread_5
                    5386   @vsscanf_scanread_1:
000030F4  2052      5387          move.l    (A2),A0
000030F6  1010      5388          move.b    (A0),D0
000030F8  6620      5389          bne.s     @vsscanf_scanread_6
000030FA  4879 0B00 5390          pea       @vsscanf_buf
000030FE  0546      
00003100  6100 1038 5391          bsr       _gets
00003104  584F      5392          addq.w    #4,A7
00003106  2480      5393          move.l    D0,(A2)
00003108  4879 0000 5394          pea       @vsscanf_1
0000310C  56D8      
0000310E  4879 0B00 5395          pea       @vsscanf_buf
00003112  0546      
00003114  6100 FF66 5396          bsr       _strcat
00003118  504F      5397          addq.w    #8,A7
                    5398   @vsscanf_scanread_6:
0000311A  2052      5399          move.l    (A2),A0
0000311C  5292      5400          addq.l    #1,(A2)
0000311E  1010      5401          move.b    (A0),D0
00003120  4880      5402          ext.w     D0
00003122  48C0      5403          ext.l     D0
                    5404   @vsscanf_scanread_5:
00003124  4CDF 0400 5405          movem.l   (A7)+,A2
00003128  4E5E      5406          unlk      A6
0000312A  4E75      5407          rts
                    5408   @vsscanf_scanputback:
0000312C  4E56 0000 5409          link      A6,#0
00003130  48E7 3000 5410          movem.l   D2/D3,-(A7)
00003134  242E 000C 5411          move.l    12(A6),D2
00003138  262E 0008 5412          move.l    8(A6),D3
0000313C  6718      5413          beq.s     @vsscanf_scanputback_1
0000313E  0C82 FFFF 5414          cmp.l     #-1,D2
00003142  FFFF      
00003144  670A      5415          beq.s     @vsscanf_scanputback_3
00003146  5983      5416          subq.l    #4,D3
00003148  2043      5417          move.l    D3,A0
0000314A  2050      5418          move.l    (A0),A0
0000314C  1082      5419          move.b    D2,(A0)
0000314E  6004      5420          bra.s     @vsscanf_scanputback_4
                    5421   @vsscanf_scanputback_3:
00003150  2043      5422          move.l    D3,A0
00003152  5390      5423          subq.l    #1,(A0)
                    5424   @vsscanf_scanputback_4:
00003154  602E      5425          bra.s     @vsscanf_scanputback_6
                    5426   @vsscanf_scanputback_1:
00003156  41F9 0B00 5427          lea       @vsscanf_buf,A0
0000315A  0546      
0000315C  2008      5428          move.l    A0,D0
0000315E  B0B9 0000 5429          cmp.l     @vsscanf_bufx,D0
00003162  56D4      
00003164  6610      5430          bne.s     @vsscanf_scanputback_5
00003166  4239 0B00 5431          clr.b     @vsscanf_buf
0000316A  0546      
0000316C  2F02      5432          move.l    D2,-(A7)
0000316E  6100 103C 5433          bsr       _ungetch
00003172  584F      5434          addq.w    #4,A7
00003174  600E      5435          bra.s     @vsscanf_scanputback_6
                    5436   @vsscanf_scanputback_5:
00003176  53B9 0000 5437          subq.l    #1,@vsscanf_bufx
0000317A  56D4      
0000317C  2079 0000 5438          move.l    @vsscanf_bufx,A0
00003180  56D4      
00003182  1082      5439          move.b    D2,(A0)
                    5440   @vsscanf_scanputback_6:
00003184  2002      5441          move.l    D2,D0
00003186  4CDF 000C 5442          movem.l   (A7)+,D2/D3
0000318A  4E5E      5443          unlk      A6
0000318C  4E75      5444          rts
                    5445   @vsscanf_scanspace:
0000318E  4E56 0000 5446          link      A6,#0
00003192  48E7 2000 5447          movem.l   D2,-(A7)
                    5448   @vsscanf_scanspace_1:
00003196  2F2E 0008 5449          move.l    8(A6),-(A7)
0000319A  6100 FF22 5450          bsr       @vsscanf_scanread
0000319E  584F      5451          addq.w    #4,A7
000031A0  2400      5452          move.l    D0,D2
000031A2  206E 000C 5453          move.l    12(A6),A0
000031A6  5290      5454          addq.l    #1,(A0)
000031A8  2042      5455          move.l    D2,A0
000031AA  43F9 0000 5456          lea       __ctype,A1
000031AE  56DA      
000031B0  1030 9801 5457          move.b    1(A0,A1.L),D0
000031B4  C03C 0010 5458          and.b     #16,D0
000031B8  66DC      5459          bne       @vsscanf_scanspace_1
000031BA  2002      5460          move.l    D2,D0
000031BC  4CDF 0004 5461          movem.l   (A7)+,D2
000031C0  4E5E      5462          unlk      A6
000031C2  4E75      5463          rts
                    5464   @vsscanf_scanselect:
000031C4  4E56 0000 5465          link      A6,#0
000031C8  48E7 3F20 5466          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
000031CC  262E 000C 5467          move.l    12(A6),D3
000031D0  2C2E 0018 5468          move.l    24(A6),D6
000031D4  2E2E 0014 5469          move.l    20(A6),D7
000031D8  2043      5470          move.l    D3,A0
000031DA  1010      5471          move.b    (A0),D0
000031DC  4880      5472          ext.w     D0
000031DE  48C0      5473          ext.l     D0
000031E0  0C80 0000 5474          cmp.l     #94,D0
000031E4  005E      
000031E6  6608      5475          bne.s     @vsscanf_scanselect_1
000031E8  347C 0001 5476          move.w    #1,A2
000031EC  5283      5477          addq.l    #1,D3
000031EE  6004      5478          bra.s     @vsscanf_scanselect_2
                    5479   @vsscanf_scanselect_1:
000031F0  347C 0000 5480          move.w    #0,A2
                    5481   @vsscanf_scanselect_2:
000031F4  202E 0010 5482          move.l    16(A6),D0
000031F8  53AE 0010 5483          subq.l    #1,16(A6)
000031FC  4A80      5484          tst.l     D0
000031FE  6700 0108 5485          beq       @vsscanf_scanselect_5
00003202  2F2E 0008 5486          move.l    8(A6),-(A7)
00003206  6100 FEB6 5487          bsr       @vsscanf_scanread
0000320A  584F      5488          addq.w    #4,A7
0000320C  2800      5489          move.l    D0,D4
0000320E  0C84 FFFF 5490          cmp.l     #-1,D4
00003212  FFFF      
00003214  6604      5491          bne.s     @vsscanf_scanselect_6
00003216  6000 00F0 5492          bra       @vsscanf_scanselect_5
                    5493   @vsscanf_scanselect_6:
0000321A  206E 001C 5494          move.l    28(A6),A0
0000321E  5290      5495          addq.l    #1,(A0)
00003220  4285      5496          clr.l     D5
00003222  4282      5497          clr.l     D2
                    5498   @vsscanf_scanselect_8:
00003224  2043      5499          move.l    D3,A0
00003226  1030 2800 5500          move.b    0(A0,D2.L),D0
0000322A  4880      5501          ext.w     D0
0000322C  48C0      5502          ext.l     D0
0000322E  0C80 0000 5503          cmp.l     #93,D0
00003232  005D      
00003234  6700 008E 5504          beq       @vsscanf_scanselect_10
00003238  4A82      5505          tst.l     D2
0000323A  6716      5506          beq.s     @vsscanf_scanselect_11
0000323C  2043      5507          move.l    D3,A0
0000323E  1030 2800 5508          move.b    0(A0,D2.L),D0
00003242  4880      5509          ext.w     D0
00003244  48C0      5510          ext.l     D0
00003246  0C80 0000 5511          cmp.l     #93,D0
0000324A  005D      
0000324C  6604      5512          bne.s     @vsscanf_scanselect_11
0000324E  6000 0074 5513          bra       @vsscanf_scanselect_10
                    5514   @vsscanf_scanselect_11:
00003252  4A82      5515          tst.l     D2
00003254  6700 0058 5516          beq       @vsscanf_scanselect_15
00003258  2043      5517          move.l    D3,A0
0000325A  1030 2800 5518          move.b    0(A0,D2.L),D0
0000325E  4880      5519          ext.w     D0
00003260  48C0      5520          ext.l     D0
00003262  0C80 0000 5521          cmp.l     #45,D0
00003266  002D      
00003268  6600 0044 5522          bne       @vsscanf_scanselect_15
0000326C  2043      5523          move.l    D3,A0
0000326E  2002      5524          move.l    D2,D0
00003270  5380      5525          subq.l    #1,D0
00003272  2243      5526          move.l    D3,A1
00003274  2F08      5527          move.l    A0,-(A7)
00003276  2042      5528          move.l    D2,A0
00003278  1230 0800 5529          move.b    0(A0,D0.L),D1
0000327C  B230 9801 5530          cmp.b     1(A0,A1.L),D1
00003280  6C00 002C 5531          bge       @vsscanf_scanselect_15
00003284  205F      5532          move.l    (A7)+,A0
00003286  2043      5533          move.l    D3,A0
00003288  2002      5534          move.l    D2,D0
0000328A  5380      5535          subq.l    #1,D0
0000328C  1030 0800 5536          move.b    0(A0,D0.L),D0
00003290  4880      5537          ext.w     D0
00003292  48C0      5538          ext.l     D0
00003294  B880      5539          cmp.l     D0,D4
00003296  6D12      5540          blt.s     @vsscanf_scanselect_17
00003298  2043      5541          move.l    D3,A0
0000329A  2242      5542          move.l    D2,A1
0000329C  1031 8801 5543          move.b    1(A1,A0.L),D0
000032A0  4880      5544          ext.w     D0
000032A2  48C0      5545          ext.l     D0
000032A4  B880      5546          cmp.l     D0,D4
000032A6  6E02      5547          bgt.s     @vsscanf_scanselect_17
000032A8  601A      5548          bra.s     @vsscanf_scanselect_10
                    5549   @vsscanf_scanselect_17:
000032AA  5282      5550          addq.l    #1,D2
000032AC  6010      5551          bra.s     @vsscanf_scanselect_19
                    5552   @vsscanf_scanselect_15:
000032AE  2043      5553          move.l    D3,A0
000032B0  1030 2800 5554          move.b    0(A0,D2.L),D0
000032B4  4880      5555          ext.w     D0
000032B6  48C0      5556          ext.l     D0
000032B8  B880      5557          cmp.l     D0,D4
000032BA  6602      5558          bne.s     @vsscanf_scanselect_19
000032BC  6006      5559          bra.s     @vsscanf_scanselect_10
                    5560   @vsscanf_scanselect_19:
000032BE  5282      5561          addq.l    #1,D2
000032C0  6000 FF62 5562          bra       @vsscanf_scanselect_8
                    5563   @vsscanf_scanselect_10:
000032C4  4A82      5564          tst.l     D2
000032C6  6712      5565          beq.s     @vsscanf_scanselect_23
000032C8  2043      5566          move.l    D3,A0
000032CA  1030 2800 5567          move.b    0(A0,D2.L),D0
000032CE  4880      5568          ext.w     D0
000032D0  48C0      5569          ext.l     D0
000032D2  0C80 0000 5570          cmp.l     #93,D0
000032D6  005D      
000032D8  6702      5571          beq.s     @vsscanf_scanselect_21
                    5572   @vsscanf_scanselect_23:
000032DA  7A01      5573          moveq     #1,D5
                    5574   @vsscanf_scanselect_21:
000032DC  200A      5575          move.l    A2,D0
000032DE  6712      5576          beq.s     @vsscanf_scanselect_24
000032E0  4A85      5577          tst.l     D5
000032E2  660C      5578          bne.s     @vsscanf_scanselect_26
000032E4  4A87      5579          tst.l     D7
000032E6  6606      5580          bne.s     @vsscanf_scanselect_28
000032E8  2046      5581          move.l    D6,A0
000032EA  5286      5582          addq.l    #1,D6
000032EC  1084      5583          move.b    D4,(A0)
                    5584   @vsscanf_scanselect_28:
000032EE  6014      5585          bra.s     @vsscanf_scanselect_4
                    5586   @vsscanf_scanselect_26:
000032F0  6016      5587          bra.s     @vsscanf_scanselect_5
                    5588   @vsscanf_scanselect_24:
000032F2  4A85      5589          tst.l     D5
000032F4  670C      5590          beq.s     @vsscanf_scanselect_30
000032F6  4A87      5591          tst.l     D7
000032F8  6606      5592          bne.s     @vsscanf_scanselect_32
000032FA  2046      5593          move.l    D6,A0
000032FC  5286      5594          addq.l    #1,D6
000032FE  1084      5595          move.b    D4,(A0)
                    5596   @vsscanf_scanselect_32:
00003300  6002      5597          bra.s     @vsscanf_scanselect_4
                    5598   @vsscanf_scanselect_30:
00003302  6004      5599          bra.s     @vsscanf_scanselect_5
                    5600   @vsscanf_scanselect_4:
00003304  6000 FEEE 5601          bra       @vsscanf_scanselect_2
                    5602   @vsscanf_scanselect_5:
00003308  0C84 FFFF 5603          cmp.l     #-1,D4
0000330C  FFFF      
0000330E  6712      5604          beq.s     @vsscanf_scanselect_34
00003310  2F04      5605          move.l    D4,-(A7)
00003312  2F2E 0008 5606          move.l    8(A6),-(A7)
00003316  6100 FE14 5607          bsr       @vsscanf_scanputback
0000331A  504F      5608          addq.w    #8,A7
0000331C  206E 001C 5609          move.l    28(A6),A0
00003320  5390      5610          subq.l    #1,(A0)
                    5611   @vsscanf_scanselect_34:
00003322  4A87      5612          tst.l     D7
00003324  6604      5613          bne.s     @vsscanf_scanselect_36
00003326  2046      5614          move.l    D6,A0
00003328  4210      5615          clr.b     (A0)
                    5616   @vsscanf_scanselect_36:
0000332A  5283      5617          addq.l    #1,D3
0000332C  2043      5618          move.l    D3,A0
0000332E  1010      5619          move.b    (A0),D0
00003330  4880      5620          ext.w     D0
00003332  48C0      5621          ext.l     D0
00003334  0C80 0000 5622          cmp.l     #93,D0
00003338  005D      
0000333A  6702      5623          beq.s     @vsscanf_scanselect_40
0000333C  60EC      5624          bra       @vsscanf_scanselect_36
                    5625   @vsscanf_scanselect_40:
0000333E  5283      5626          addq.l    #1,D3
00003340  2003      5627          move.l    D3,D0
00003342  4CDF 04FC 5628          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003346  4E5E      5629          unlk      A6
00003348  4E75      5630          rts
                    5631   _scanflush:
0000334A  41F9 0B00 5632          lea       @vsscanf_buf,A0
0000334E  0546      
00003350  23C8 0000 5633          move.l    A0,@vsscanf_bufx
00003354  56D4      
00003356  4239 0B00 5634          clr.b     @vsscanf_buf
0000335A  0546      
0000335C  4878 FFFF 5635          pea       -1
00003360  6100 0E4A 5636          bsr       _ungetch
00003364  584F      5637          addq.w    #4,A7
00003366  4E75      5638          rts
                    5639   _vsscanf:
00003368  4E56 FF88 5640          link      A6,#-120
0000336C  48E7 3F3C 5641          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003370  47F8 30BE 5642          lea       @vsscanf_scanread,A3
00003374  4AAE 0008 5643          tst.l     8(A6)
00003378  6706      5644          beq.s     vsscanf_1
0000337A  41EE 0008 5645          lea       8(A6),A0
0000337E  6004      5646          bra.s     vsscanf_2
                    5647   vsscanf_1:
00003380  4280      5648          clr.l     D0
00003382  2040      5649          move.l    D0,A0
                    5650   vsscanf_2:
00003384  2A08      5651          move.l    A0,D5
00003386  42AE FFE4 5652          clr.l     -28(A6)
0000338A  4284      5653          clr.l     D4
                    5654   vsscanf_3:
0000338C  206E 000C 5655          move.l    12(A6),A0
00003390  52AE 000C 5656          addq.l    #1,12(A6)
00003394  1010      5657          move.b    (A0),D0
00003396  4880      5658          ext.w     D0
00003398  48C0      5659          ext.l     D0
0000339A  2600      5660          move.l    D0,D3
0000339C  6700 05AC 5661          beq       vsscanf_5
000033A0  4286      5662          clr.l     D6
000033A2  387C 0000 5663          move.w    #0,A4
000033A6  0C83 0000 5664          cmp.l     #32,D3
000033AA  0020      
000033AC  6712      5665          beq.s     vsscanf_8
000033AE  0C83 0000 5666          cmp.l     #9,D3
000033B2  0009      
000033B4  670A      5667          beq.s     vsscanf_8
000033B6  0C83 0000 5668          cmp.l     #10,D3
000033BA  000A      
000033BC  6600 0048 5669          bne       vsscanf_6
                    5670   vsscanf_8:
000033C0  2F05      5671          move.l    D5,-(A7)
000033C2  4E93      5672          jsr       (A3)
000033C4  584F      5673          addq.w    #4,A7
000033C6  2400      5674          move.l    D0,D2
000033C8  52AE FFE4 5675          addq.l    #1,-28(A6)
000033CC  0C82 FFFF 5676          cmp.l     #-1,D2
000033D0  FFFF      
000033D2  660E      5677          bne.s     vsscanf_11
000033D4  4A84      5678          tst.l     D4
000033D6  6704      5679          beq.s     vsscanf_13
000033D8  2004      5680          move.l    D4,D0
000033DA  6002      5681          bra.s     vsscanf_14
                    5682   vsscanf_13:
000033DC  70FF      5683          moveq     #-1,D0
                    5684   vsscanf_14:
000033DE  6000 056C 5685          bra       vsscanf_15
                    5686   vsscanf_11:
000033E2  2042      5687          move.l    D2,A0
000033E4  43F9 0000 5688          lea       __ctype,A1
000033E8  56DA      
000033EA  1030 9801 5689          move.b    1(A0,A1.L),D0
000033EE  C03C 0010 5690          and.b     #16,D0
000033F2  66CC      5691          bne       vsscanf_8
000033F4  53AE FFE4 5692          subq.l    #1,-28(A6)
000033F8  2F02      5693          move.l    D2,-(A7)
000033FA  2F05      5694          move.l    D5,-(A7)
000033FC  6100 FD2E 5695          bsr       @vsscanf_scanputback
00003400  504F      5696          addq.w    #8,A7
00003402  6000 0542 5697          bra       vsscanf_139
                    5698   vsscanf_6:
00003406  0C83 0000 5699          cmp.l     #37,D3
0000340A  0025      
0000340C  6600 0502 5700          bne       vsscanf_127
00003410  206E 000C 5701          move.l    12(A6),A0
00003414  52AE 000C 5702          addq.l    #1,12(A6)
00003418  1010      5703          move.b    (A0),D0
0000341A  4880      5704          ext.w     D0
0000341C  48C0      5705          ext.l     D0
0000341E  2600      5706          move.l    D0,D3
00003420  42AE FFEC 5707          clr.l     -20(A6)
00003424  4286      5708          clr.l     D6
00003426  42AE FFE8 5709          clr.l     -24(A6)
0000342A  347C 7FFF 5710          move.w    #32767,A2
0000342E  0C83 0000 5711          cmp.l     #42,D3
00003432  002A      
00003434  6612      5712          bne.s     vsscanf_18
00003436  7C01      5713          moveq     #1,D6
00003438  206E 000C 5714          move.l    12(A6),A0
0000343C  52AE 000C 5715          addq.l    #1,12(A6)
00003440  1010      5716          move.b    (A0),D0
00003442  4880      5717          ext.w     D0
00003444  48C0      5718          ext.l     D0
00003446  2600      5719          move.l    D0,D3
                    5720   vsscanf_18:
00003448  2043      5721          move.l    D3,A0
0000344A  43F9 0000 5722          lea       __ctype,A1
0000344E  56DA      
00003450  1030 9801 5723          move.b    1(A0,A1.L),D0
00003454  C03C 0004 5724          and.b     #4,D0
00003458  6700 004E 5725          beq       vsscanf_24
0000345C  2003      5726          move.l    D3,D0
0000345E  0480 0000 5727          sub.l     #48,D0
00003462  0030      
00003464  2440      5728          move.l    D0,A2
                    5729   vsscanf_22:
00003466  206E 000C 5730          move.l    12(A6),A0
0000346A  52AE 000C 5731          addq.l    #1,12(A6)
0000346E  1010      5732          move.b    (A0),D0
00003470  4880      5733          ext.w     D0
00003472  48C0      5734          ext.l     D0
00003474  2600      5735          move.l    D0,D3
00003476  2040      5736          move.l    D0,A0
00003478  43F9 0000 5737          lea       __ctype,A1
0000347C  56DA      
0000347E  1030 9801 5738          move.b    1(A0,A1.L),D0
00003482  C0BC 0000 5739          and.l     #255,D0
00003486  00FF      
00003488  C0BC 0000 5740          and.l     #4,D0
0000348C  0004      
0000348E  6718      5741          beq.s     vsscanf_24
00003490  70D0      5742          moveq     #-48,D0
00003492  2F0A      5743          move.l    A2,-(A7)
00003494  4878 000A 5744          pea       10
00003498  6100 0C12 5745          bsr       LMUL
0000349C  2217      5746          move.l    (A7),D1
0000349E  504F      5747          addq.w    #8,A7
000034A0  D283      5748          add.l     D3,D1
000034A2  D081      5749          add.l     D1,D0
000034A4  2440      5750          move.l    D0,A2
000034A6  60BE      5751          bra       vsscanf_22
                    5752   vsscanf_24:
000034A8  0C83 0000 5753          cmp.l     #108,D3
000034AC  006C      
000034AE  6708      5754          beq.s     vsscanf_27
000034B0  0C83 0000 5755          cmp.l     #76,D3
000034B4  004C      
000034B6  661A      5756          bne.s     vsscanf_25
                    5757   vsscanf_27:
000034B8  2D7C 0000 5758          move.l    #1,-24(A6)
000034BC  0001 FFE8 
000034C0  206E 000C 5759          move.l    12(A6),A0
000034C4  52AE 000C 5760          addq.l    #1,12(A6)
000034C8  1010      5761          move.b    (A0),D0
000034CA  4880      5762          ext.w     D0
000034CC  48C0      5763          ext.l     D0
000034CE  2600      5764          move.l    D0,D3
000034D0  6020      5765          bra.s     vsscanf_28
                    5766   vsscanf_25:
000034D2  0C83 0000 5767          cmp.l     #104,D3
000034D6  0068      
000034D8  6618      5768          bne.s     vsscanf_28
000034DA  2D7C 0000 5769          move.l    #1,-20(A6)
000034DE  0001 FFEC 
000034E2  206E 000C 5770          move.l    12(A6),A0
000034E6  52AE 000C 5771          addq.l    #1,12(A6)
000034EA  1010      5772          move.b    (A0),D0
000034EC  4880      5773          ext.w     D0
000034EE  48C0      5774          ext.l     D0
000034F0  2600      5775          move.l    D0,D3
                    5776   vsscanf_28:
000034F2  0C83 0000 5777          cmp.l     #91,D3
000034F6  005B      
000034F8  6600 0036 5778          bne       vsscanf_30
000034FC  4A86      5779          tst.l     D6
000034FE  660A      5780          bne.s     vsscanf_32
00003500  206E 0010 5781          move.l    16(A6),A0
00003504  58AE 0010 5782          addq.l    #4,16(A6)
00003508  2E10      5783          move.l    (A0),D7
                    5784   vsscanf_32:
0000350A  486E FFE4 5785          pea       -28(A6)
0000350E  2F07      5786          move.l    D7,-(A7)
00003510  2F06      5787          move.l    D6,-(A7)
00003512  2F0A      5788          move.l    A2,-(A7)
00003514  2F2E 000C 5789          move.l    12(A6),-(A7)
00003518  2F05      5790          move.l    D5,-(A7)
0000351A  6100 FCA8 5791          bsr       @vsscanf_scanselect
0000351E  DEFC 0018 5792          add.w     #24,A7
00003522  2D40 000C 5793          move.l    D0,12(A6)
00003526  4A86      5794          tst.l     D6
00003528  6602      5795          bne.s     vsscanf_34
0000352A  5284      5796          addq.l    #1,D4
                    5797   vsscanf_34:
0000352C  6000 0418 5798          bra       vsscanf_139
                    5799   vsscanf_30:
00003530  0C83 0000 5800          cmp.l     #110,D3
00003534  006E      
00003536  661A      5801          bne.s     vsscanf_36
00003538  4A86      5802          tst.l     D6
0000353A  6612      5803          bne.s     vsscanf_38
0000353C  206E 0010 5804          move.l    16(A6),A0
00003540  58AE 0010 5805          addq.l    #4,16(A6)
00003544  2E10      5806          move.l    (A0),D7
00003546  2047      5807          move.l    D7,A0
00003548  20AE FFE4 5808          move.l    -28(A6),(A0)
0000354C  5284      5809          addq.l    #1,D4
                    5810   vsscanf_38:
0000354E  6000 03F6 5811          bra       vsscanf_139
                    5812   vsscanf_36:
00003552  0C83 0000 5813          cmp.l     #115,D3
00003556  0073      
00003558  6600 00AC 5814          bne       vsscanf_40
0000355C  486E FFE4 5815          pea       -28(A6)
00003560  2F05      5816          move.l    D5,-(A7)
00003562  6100 FC2A 5817          bsr       @vsscanf_scanspace
00003566  504F      5818          addq.w    #8,A7
00003568  2400      5819          move.l    D0,D2
0000356A  4A86      5820          tst.l     D6
0000356C  660A      5821          bne.s     vsscanf_42
0000356E  206E 0010 5822          move.l    16(A6),A0
00003572  58AE 0010 5823          addq.l    #4,16(A6)
00003576  2E10      5824          move.l    (A0),D7
                    5825   vsscanf_42:
00003578  52AE FFE4 5826          addq.l    #1,-28(A6)
                    5827   vsscanf_44:
0000357C  200A      5828          move.l    A2,D0
0000357E  534A      5829          subq.w    #1,A2
00003580  4A80      5830          tst.l     D0
00003582  6700 0038 5831          beq       vsscanf_46
00003586  2042      5832          move.l    D2,A0
00003588  43F9 0000 5833          lea       __ctype,A1
0000358C  56DA      
0000358E  1030 9801 5834          move.b    1(A0,A1.L),D0
00003592  C03C 0010 5835          and.b     #16,D0
00003596  6624      5836          bne.s     vsscanf_46
00003598  0C82 FFFF 5837          cmp.l     #-1,D2
0000359C  FFFF      
0000359E  671C      5838          beq.s     vsscanf_46
000035A0  387C 0001 5839          move.w    #1,A4
000035A4  4A86      5840          tst.l     D6
000035A6  6606      5841          bne.s     vsscanf_47
000035A8  2047      5842          move.l    D7,A0
000035AA  5287      5843          addq.l    #1,D7
000035AC  1082      5844          move.b    D2,(A0)
                    5845   vsscanf_47:
000035AE  2F05      5846          move.l    D5,-(A7)
000035B0  4E93      5847          jsr       (A3)
000035B2  584F      5848          addq.w    #4,A7
000035B4  2400      5849          move.l    D0,D2
000035B6  52AE FFE4 5850          addq.l    #1,-28(A6)
000035BA  60C0      5851          bra       vsscanf_44
                    5852   vsscanf_46:
000035BC  4A86      5853          tst.l     D6
000035BE  660A      5854          bne.s     vsscanf_51
000035C0  2047      5855          move.l    D7,A0
000035C2  4210      5856          clr.b     (A0)
000035C4  200C      5857          move.l    A4,D0
000035C6  6702      5858          beq.s     vsscanf_51
000035C8  5284      5859          addq.l    #1,D4
                    5860   vsscanf_51:
000035CA  0C82 FFFF 5861          cmp.l     #-1,D2
000035CE  FFFF      
000035D0  6708      5862          beq.s     vsscanf_55
000035D2  4A86      5863          tst.l     D6
000035D4  661E      5864          bne.s     vsscanf_53
000035D6  200C      5865          move.l    A4,D0
000035D8  661A      5866          bne.s     vsscanf_53
                    5867   vsscanf_55:
000035DA  4A84      5868          tst.l     D4
000035DC  6704      5869          beq.s     vsscanf_56
000035DE  2004      5870          move.l    D4,D0
000035E0  600E      5871          bra.s     vsscanf_59
                    5872   vsscanf_56:
000035E2  0C82 FFFF 5873          cmp.l     #-1,D2
000035E6  FFFF      
000035E8  6604      5874          bne.s     vsscanf_58
000035EA  70FF      5875          moveq     #-1,D0
000035EC  6002      5876          bra.s     vsscanf_59
                    5877   vsscanf_58:
000035EE  2004      5878          move.l    D4,D0
                    5879   vsscanf_59:
000035F0  6000 035A 5880          bra       vsscanf_15
                    5881   vsscanf_53:
000035F4  53AE FFE4 5882          subq.l    #1,-28(A6)
000035F8  2F02      5883          move.l    D2,-(A7)
000035FA  2F05      5884          move.l    D5,-(A7)
000035FC  6100 FB2E 5885          bsr       @vsscanf_scanputback
00003600  504F      5886          addq.w    #8,A7
00003602  6000 0342 5887          bra       vsscanf_139
                    5888   vsscanf_40:
00003606  0C83 0000 5889          cmp.l     #99,D3
0000360A  0063      
0000360C  6600 008E 5890          bne       vsscanf_60
00003610  4A86      5891          tst.l     D6
00003612  660A      5892          bne.s     vsscanf_62
00003614  206E 0010 5893          move.l    16(A6),A0
00003618  58AE 0010 5894          addq.l    #4,16(A6)
0000361C  2E10      5895          move.l    (A0),D7
                    5896   vsscanf_62:
0000361E  2F05      5897          move.l    D5,-(A7)
00003620  4E93      5898          jsr       (A3)
00003622  584F      5899          addq.w    #4,A7
00003624  2400      5900          move.l    D0,D2
00003626  52AE FFE4 5901          addq.l    #1,-28(A6)
0000362A  200A      5902          move.l    A2,D0
0000362C  0C80 0000 5903          cmp.l     #32767,D0
00003630  7FFF      
00003632  6604      5904          bne.s     vsscanf_64
00003634  347C 0001 5905          move.w    #1,A2
                    5906   vsscanf_64:
00003638  0C82 FFFF 5907          cmp.l     #-1,D2
0000363C  FFFF      
0000363E  6606      5908          bne.s     vsscanf_66
00003640  4A86      5909          tst.l     D6
00003642  6602      5910          bne.s     vsscanf_66
00003644  5384      5911          subq.l    #1,D4
                    5912   vsscanf_66:
00003646  200A      5913          move.l    A2,D0
00003648  534A      5914          subq.w    #1,A2
0000364A  4A80      5915          tst.l     D0
0000364C  6720      5916          beq.s     vsscanf_70
0000364E  0C82 FFFF 5917          cmp.l     #-1,D2
00003652  FFFF      
00003654  6718      5918          beq.s     vsscanf_70
00003656  4A86      5919          tst.l     D6
00003658  6606      5920          bne.s     vsscanf_71
0000365A  2047      5921          move.l    D7,A0
0000365C  5287      5922          addq.l    #1,D7
0000365E  1082      5923          move.b    D2,(A0)
                    5924   vsscanf_71:
00003660  2F05      5925          move.l    D5,-(A7)
00003662  4E93      5926          jsr       (A3)
00003664  584F      5927          addq.w    #4,A7
00003666  2400      5928          move.l    D0,D2
00003668  52AE FFE4 5929          addq.l    #1,-28(A6)
0000366C  60D8      5930          bra       vsscanf_66
                    5931   vsscanf_70:
0000366E  0C82 FFFF 5932          cmp.l     #-1,D2
00003672  FFFF      
00003674  660E      5933          bne.s     vsscanf_73
00003676  4A84      5934          tst.l     D4
00003678  6704      5935          beq.s     vsscanf_75
0000367A  2004      5936          move.l    D4,D0
0000367C  6002      5937          bra.s     vsscanf_76
                    5938   vsscanf_75:
0000367E  70FF      5939          moveq     #-1,D0
                    5940   vsscanf_76:
00003680  6000 02CA 5941          bra       vsscanf_15
                    5942   vsscanf_73:
00003684  4A86      5943          tst.l     D6
00003686  6602      5944          bne.s     vsscanf_77
00003688  5284      5945          addq.l    #1,D4
                    5946   vsscanf_77:
0000368A  53AE FFE4 5947          subq.l    #1,-28(A6)
0000368E  2F02      5948          move.l    D2,-(A7)
00003690  2F05      5949          move.l    D5,-(A7)
00003692  6100 FA98 5950          bsr       @vsscanf_scanputback
00003696  504F      5951          addq.w    #8,A7
00003698  6000 02AC 5952          bra       vsscanf_139
                    5953   vsscanf_60:
0000369C  0C83 0000 5954          cmp.l     #105,D3
000036A0  0069      
000036A2  6600 0060 5955          bne       vsscanf_82
000036A6  486E FFE4 5956          pea       -28(A6)
000036AA  2F05      5957          move.l    D5,-(A7)
000036AC  6100 FAE0 5958          bsr       @vsscanf_scanspace
000036B0  504F      5959          addq.w    #8,A7
000036B2  2400      5960          move.l    D0,D2
000036B4  0C82 0000 5961          cmp.l     #48,D2
000036B8  0030      
000036BA  6600 0038 5962          bne       vsscanf_81
000036BE  387C 0001 5963          move.w    #1,A4
000036C2  2F05      5964          move.l    D5,-(A7)
000036C4  4E93      5965          jsr       (A3)
000036C6  584F      5966          addq.w    #4,A7
000036C8  2400      5967          move.l    D0,D2
000036CA  2F02      5968          move.l    D2,-(A7)
000036CC  6100 F936 5969          bsr       _tolower
000036D0  584F      5970          addq.w    #4,A7
000036D2  0C80 0000 5971          cmp.l     #120,D0
000036D6  0078      
000036D8  6604      5972          bne.s     vsscanf_83
000036DA  7678      5973          moveq     #120,D3
000036DC  6010      5974          bra.s     vsscanf_84
                    5975   vsscanf_83:
000036DE  53AE FFE4 5976          subq.l    #1,-28(A6)
000036E2  2F02      5977          move.l    D2,-(A7)
000036E4  2F05      5978          move.l    D5,-(A7)
000036E6  6100 FA44 5979          bsr       @vsscanf_scanputback
000036EA  504F      5980          addq.w    #8,A7
000036EC  766F      5981          moveq     #111,D3
                    5982   vsscanf_84:
000036EE  52AE FFE4 5983          addq.l    #1,-28(A6)
000036F2  6010      5984          bra.s     vsscanf_82
                    5985   vsscanf_81:
000036F4  53AE FFE4 5986          subq.l    #1,-28(A6)
000036F8  2F02      5987          move.l    D2,-(A7)
000036FA  2F05      5988          move.l    D5,-(A7)
000036FC  6100 FA2E 5989          bsr       @vsscanf_scanputback
00003700  504F      5990          addq.w    #8,A7
00003702  7664      5991          moveq     #100,D3
                    5992   vsscanf_82:
00003704  0C83 0000 5993          cmp.l     #100,D3
00003708  0064      
0000370A  671A      5994          beq.s     vsscanf_87
0000370C  0C83 0000 5995          cmp.l     #117,D3
00003710  0075      
00003712  6712      5996          beq.s     vsscanf_87
00003714  0C83 0000 5997          cmp.l     #120,D3
00003718  0078      
0000371A  670A      5998          beq.s     vsscanf_87
0000371C  0C83 0000 5999          cmp.l     #111,D3
00003720  006F      
00003722  6600 01A4 6000          bne       vsscanf_85
                    6001   vsscanf_87:
00003726  486E FFE4 6002          pea       -28(A6)
0000372A  2F05      6003          move.l    D5,-(A7)
0000372C  6100 FA60 6004          bsr       @vsscanf_scanspace
00003730  504F      6005          addq.w    #8,A7
00003732  2400      6006          move.l    D0,D2
00003734  2D7C 0000 6007          move.l    #10,-4(A6)
00003738  000A FFFC 
0000373C  0C83 0000 6008          cmp.l     #120,D3
00003740  0078      
00003742  6608      6009          bne.s     vsscanf_88
00003744  2D7C 0000 6010          move.l    #16,-4(A6)
00003748  0010 FFFC 
                    6011   vsscanf_88:
0000374C  0C83 0000 6012          cmp.l     #111,D3
00003750  006F      
00003752  6608      6013          bne.s     vsscanf_90
00003754  2D7C 0000 6014          move.l    #8,-4(A6)
00003758  0008 FFFC 
                    6015   vsscanf_90:
0000375C  4A86      6016          tst.l     D6
0000375E  660A      6017          bne.s     vsscanf_92
00003760  206E 0010 6018          move.l    16(A6),A0
00003764  58AE 0010 6019          addq.l    #4,16(A6)
00003768  2E10      6020          move.l    (A0),D7
                    6021   vsscanf_92:
0000376A  42AE FFE0 6022          clr.l     -32(A6)
0000376E  52AE FFE4 6023          addq.l    #1,-28(A6)
00003772  0C83 0000 6024          cmp.l     #117,D3
00003776  0075      
00003778  6720      6025          beq.s     vsscanf_94
0000377A  0C82 0000 6026          cmp.l     #45,D2
0000377E  002D      
00003780  6618      6027          bne.s     vsscanf_94
00003782  2F05      6028          move.l    D5,-(A7)
00003784  4E93      6029          jsr       (A3)
00003786  584F      6030          addq.w    #4,A7
00003788  2400      6031          move.l    D0,D2
0000378A  52AE FFE4 6032          addq.l    #1,-28(A6)
0000378E  2D7C 0000 6033          move.l    #1,-32(A6)
00003792  0001 FFE0 
00003796  387C 0001 6034          move.w    #1,A4
                    6035   vsscanf_94:
0000379A  3A7C 0000 6036          move.w    #0,A5
0000379E  0C82 FFFF 6037          cmp.l     #-1,D2
000037A2  FFFF      
000037A4  660E      6038          bne.s     vsscanf_96
000037A6  4A84      6039          tst.l     D4
000037A8  6704      6040          beq.s     vsscanf_98
000037AA  2004      6041          move.l    D4,D0
000037AC  6002      6042          bra.s     vsscanf_99
                    6043   vsscanf_98:
000037AE  70FF      6044          moveq     #-1,D0
                    6045   vsscanf_99:
000037B0  6000 019A 6046          bra       vsscanf_15
                    6047   vsscanf_96:
000037B4  200A      6048          move.l    A2,D0
000037B6  534A      6049          subq.w    #1,A2
000037B8  4A80      6050          tst.l     D0
000037BA  6700 0090 6051          beq       vsscanf_102
000037BE  0C83 0000 6052          cmp.l     #120,D3
000037C2  0078      
000037C4  6620      6053          bne.s     vsscanf_104
000037C6  2F02      6054          move.l    D2,-(A7)
000037C8  6100 F8C8 6055          bsr       _toupper
000037CC  584F      6056          addq.w    #4,A7
000037CE  0C80 0000 6057          cmp.l     #65,D0
000037D2  0041      
000037D4  6D10      6058          blt.s     vsscanf_104
000037D6  2F02      6059          move.l    D2,-(A7)
000037D8  6100 F8B8 6060          bsr       _toupper
000037DC  584F      6061          addq.w    #4,A7
000037DE  0C80 0000 6062          cmp.l     #70,D0
000037E2  0046      
000037E4  6F14      6063          ble.s     vsscanf_103
                    6064   vsscanf_104:
000037E6  2042      6065          move.l    D2,A0
000037E8  43F9 0000 6066          lea       __ctype,A1
000037EC  56DA      
000037EE  1030 9801 6067          move.b    1(A0,A1.L),D0
000037F2  C03C 0004 6068          and.b     #4,D0
000037F6  6700 0054 6069          beq       vsscanf_102
                    6070   vsscanf_103:
000037FA  2042      6071          move.l    D2,A0
000037FC  43F9 0000 6072          lea       __ctype,A1
00003800  56DA      
00003802  1030 9801 6073          move.b    1(A0,A1.L),D0
00003806  C03C 0004 6074          and.b     #4,D0
0000380A  6614      6075          bne.s     vsscanf_105
0000380C  70F9      6076          moveq     #-7,D0
0000380E  2F00      6077          move.l    D0,-(A7)
00003810  2F02      6078          move.l    D2,-(A7)
00003812  6100 F87E 6079          bsr       _toupper
00003816  584F      6080          addq.w    #4,A7
00003818  2200      6081          move.l    D0,D1
0000381A  201F      6082          move.l    (A7)+,D0
0000381C  D081      6083          add.l     D1,D0
0000381E  2400      6084          move.l    D0,D2
                    6085   vsscanf_105:
00003820  2F0D      6086          move.l    A5,-(A7)
00003822  2F2E FFFC 6087          move.l    -4(A6),-(A7)
00003826  6100 0884 6088          bsr       LMUL
0000382A  2017      6089          move.l    (A7),D0
0000382C  504F      6090          addq.w    #8,A7
0000382E  D082      6091          add.l     D2,D0
00003830  0480 0000 6092          sub.l     #48,D0
00003834  0030      
00003836  2A40      6093          move.l    D0,A5
00003838  2F05      6094          move.l    D5,-(A7)
0000383A  4E93      6095          jsr       (A3)
0000383C  584F      6096          addq.w    #4,A7
0000383E  2400      6097          move.l    D0,D2
00003840  52AE FFE4 6098          addq.l    #1,-28(A6)
00003844  387C 0001 6099          move.w    #1,A4
00003848  6000 FF6A 6100          bra       vsscanf_96
                    6101   vsscanf_102:
0000384C  0C82 FFFF 6102          cmp.l     #-1,D2
00003850  FFFF      
00003852  671A      6103          beq.s     vsscanf_107
00003854  2F02      6104          move.l    D2,-(A7)
00003856  2F05      6105          move.l    D5,-(A7)
00003858  6100 F8D2 6106          bsr       @vsscanf_scanputback
0000385C  504F      6107          addq.w    #8,A7
0000385E  53AE FFE4 6108          subq.l    #1,-28(A6)
00003862  200C      6109          move.l    A4,D0
00003864  6606      6110          bne.s     vsscanf_109
00003866  2004      6111          move.l    D4,D0
00003868  6000 00E2 6112          bra       vsscanf_15
                    6113   vsscanf_109:
0000386C  6012      6114          bra.s     vsscanf_111
                    6115   vsscanf_107:
0000386E  200C      6116          move.l    A4,D0
00003870  660E      6117          bne.s     vsscanf_111
00003872  4A84      6118          tst.l     D4
00003874  6704      6119          beq.s     vsscanf_113
00003876  2004      6120          move.l    D4,D0
00003878  6002      6121          bra.s     vsscanf_114
                    6122   vsscanf_113:
0000387A  70FF      6123          moveq     #-1,D0
                    6124   vsscanf_114:
0000387C  6000 00CE 6125          bra       vsscanf_15
                    6126   vsscanf_111:
00003880  4AAE FFE0 6127          tst.l     -32(A6)
00003884  6706      6128          beq.s     vsscanf_115
00003886  200D      6129          move.l    A5,D0
00003888  4480      6130          neg.l     D0
0000388A  2A40      6131          move.l    D0,A5
                    6132   vsscanf_115:
0000388C  4A86      6133          tst.l     D6
0000388E  661E      6134          bne.s     vsscanf_117
00003890  4AAE FFE8 6135          tst.l     -24(A6)
00003894  6706      6136          beq.s     vsscanf_119
00003896  2047      6137          move.l    D7,A0
00003898  208D      6138          move.l    A5,(A0)
0000389A  6010      6139          bra.s     vsscanf_122
                    6140   vsscanf_119:
0000389C  4AAE FFEC 6141          tst.l     -20(A6)
000038A0  6706      6142          beq.s     vsscanf_121
000038A2  2047      6143          move.l    D7,A0
000038A4  308D      6144          move.w    A5,(A0)
000038A6  6004      6145          bra.s     vsscanf_122
                    6146   vsscanf_121:
000038A8  2047      6147          move.l    D7,A0
000038AA  208D      6148          move.l    A5,(A0)
                    6149   vsscanf_122:
000038AC  5284      6150          addq.l    #1,D4
                    6151   vsscanf_117:
000038AE  0C82 FFFF 6152          cmp.l     #-1,D2
000038B2  FFFF      
000038B4  660E      6153          bne.s     vsscanf_123
000038B6  4A84      6154          tst.l     D4
000038B8  6704      6155          beq.s     vsscanf_125
000038BA  2004      6156          move.l    D4,D0
000038BC  6002      6157          bra.s     vsscanf_126
                    6158   vsscanf_125:
000038BE  70FF      6159          moveq     #-1,D0
                    6160   vsscanf_126:
000038C0  6000 008A 6161          bra       vsscanf_15
                    6162   vsscanf_123:
000038C4  6000 0080 6163          bra       vsscanf_139
                    6164   vsscanf_85:
000038C8  0C83 0000 6165          cmp.l     #37,D3
000038CC  0025      
000038CE  6600 0040 6166          bne       vsscanf_127
000038D2  2F05      6167          move.l    D5,-(A7)
000038D4  4E93      6168          jsr       (A3)
000038D6  584F      6169          addq.w    #4,A7
000038D8  2400      6170          move.l    D0,D2
000038DA  0C82 FFFF 6171          cmp.l     #-1,D2
000038DE  FFFF      
000038E0  660E      6172          bne.s     vsscanf_129
000038E2  4A84      6173          tst.l     D4
000038E4  6704      6174          beq.s     vsscanf_131
000038E6  2004      6175          move.l    D4,D0
000038E8  6002      6176          bra.s     vsscanf_132
                    6177   vsscanf_131:
000038EA  70FF      6178          moveq     #-1,D0
                    6179   vsscanf_132:
000038EC  6000 005E 6180          bra       vsscanf_15
                    6181   vsscanf_129:
000038F0  52AE FFE4 6182          addq.l    #1,-28(A6)
000038F4  B483      6183          cmp.l     D3,D2
000038F6  6714      6184          beq.s     vsscanf_133
000038F8  2F02      6185          move.l    D2,-(A7)
000038FA  2F05      6186          move.l    D5,-(A7)
000038FC  6100 F82E 6187          bsr       @vsscanf_scanputback
00003900  504F      6188          addq.w    #8,A7
00003902  53AE FFE4 6189          subq.l    #1,-28(A6)
00003906  2004      6190          move.l    D4,D0
00003908  6000 0042 6191          bra       vsscanf_15
                    6192   vsscanf_133:
0000390C  6000 0038 6193          bra       vsscanf_139
                    6194   vsscanf_127:
00003910  2F05      6195          move.l    D5,-(A7)
00003912  4E93      6196          jsr       (A3)
00003914  584F      6197          addq.w    #4,A7
00003916  2400      6198          move.l    D0,D2
00003918  52AE FFE4 6199          addq.l    #1,-28(A6)
0000391C  0C82 FFFF 6200          cmp.l     #-1,D2
00003920  FFFF      
00003922  660C      6201          bne.s     vsscanf_135
00003924  4A84      6202          tst.l     D4
00003926  6704      6203          beq.s     vsscanf_137
00003928  2004      6204          move.l    D4,D0
0000392A  6002      6205          bra.s     vsscanf_138
                    6206   vsscanf_137:
0000392C  70FF      6207          moveq     #-1,D0
                    6208   vsscanf_138:
0000392E  601C      6209          bra.s     vsscanf_15
                    6210   vsscanf_135:
00003930  B483      6211          cmp.l     D3,D2
00003932  6712      6212          beq.s     vsscanf_139
00003934  2F02      6213          move.l    D2,-(A7)
00003936  2F05      6214          move.l    D5,-(A7)
00003938  6100 F7F2 6215          bsr       @vsscanf_scanputback
0000393C  504F      6216          addq.w    #8,A7
0000393E  53AE FFE4 6217          subq.l    #1,-28(A6)
00003942  2004      6218          move.l    D4,D0
00003944  6006      6219          bra.s     vsscanf_15
                    6220   vsscanf_139:
00003946  6000 FA44 6221          bra       vsscanf_3
                    6222   vsscanf_5:
0000394A  2004      6223          move.l    D4,D0
                    6224   vsscanf_15:
0000394C  4CDF 3CFC 6225          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003950  4E5E      6226          unlk      A6
00003952  4E75      6227          rts
                    6228   _printf:
00003954  4E56 FFFC 6229          link      A6,#-4
00003958  48E7 2000 6230          movem.l   D2,-(A7)
0000395C  41EE 0008 6231          lea       8(A6),A0
00003960  5848      6232          addq.w    #4,A0
00003962  2408      6233          move.l    A0,D2
00003964  2F02      6234          move.l    D2,-(A7)
00003966  2F2E 0008 6235          move.l    8(A6),-(A7)
0000396A  42A7      6236          clr.l     -(A7)
0000396C  6100 00CA 6237          bsr       _vsprintf
00003970  DEFC 000C 6238          add.w     #12,A7
00003974  2D40 FFFC 6239          move.l    D0,-4(A6)
00003978  4282      6240          clr.l     D2
0000397A  202E FFFC 6241          move.l    -4(A6),D0
0000397E  4CDF 0004 6242          movem.l   (A7)+,D2
00003982  4E5E      6243          unlk      A6
00003984  4E75      6244          rts
                    6245   @vsprintf_copy:
00003986  4E56 0000 6246          link      A6,#0
0000398A  206E 0008 6247          move.l    8(A6),A0
0000398E  4A90      6248          tst.l     (A0)
00003990  6710      6249          beq.s     @vsprintf_copy_1
00003992  202E 000C 6250          move.l    12(A6),D0
00003996  206E 0008 6251          move.l    8(A6),A0
0000399A  2250      6252          move.l    (A0),A1
0000399C  5290      6253          addq.l    #1,(A0)
0000399E  1280      6254          move.b    D0,(A1)
000039A0  600A      6255          bra.s     @vsprintf_copy_2
                    6256   @vsprintf_copy_1:
000039A2  2F2E 000C 6257          move.l    12(A6),-(A7)
000039A6  6100 F5F0 6258          bsr       _putch
000039AA  584F      6259          addq.w    #4,A7
                    6260   @vsprintf_copy_2:
000039AC  4E5E      6261          unlk      A6
000039AE  4E75      6262          rts
                    6263   @vsprintf_getval:
000039B0  4E56 0000 6264          link      A6,#0
000039B4  48E7 3000 6265          movem.l   D2/D3,-(A7)
000039B8  242E 0008 6266          move.l    8(A6),D2
000039BC  4283      6267          clr.l     D3
000039BE  2042      6268          move.l    D2,A0
000039C0  2050      6269          move.l    (A0),A0
000039C2  1010      6270          move.b    (A0),D0
000039C4  4880      6271          ext.w     D0
000039C6  48C0      6272          ext.l     D0
000039C8  0C80 0000 6273          cmp.l     #42,D0
000039CC  002A      
000039CE  6612      6274          bne.s     @vsprintf_getval_1
000039D0  206E 000C 6275          move.l    12(A6),A0
000039D4  2250      6276          move.l    (A0),A1
000039D6  5890      6277          addq.l    #4,(A0)
000039D8  2611      6278          move.l    (A1),D3
000039DA  2042      6279          move.l    D2,A0
000039DC  5290      6280          addq.l    #1,(A0)
000039DE  6000 004E 6281          bra       @vsprintf_getval_5
                    6282   @vsprintf_getval_1:
000039E2  2042      6283          move.l    D2,A0
000039E4  2050      6284          move.l    (A0),A0
000039E6  1010      6285          move.b    (A0),D0
000039E8  4880      6286          ext.w     D0
000039EA  48C0      6287          ext.l     D0
000039EC  0C80 0000 6288          cmp.l     #48,D0
000039F0  0030      
000039F2  6D00 003A 6289          blt       @vsprintf_getval_5
000039F6  2042      6290          move.l    D2,A0
000039F8  2050      6291          move.l    (A0),A0
000039FA  1010      6292          move.b    (A0),D0
000039FC  4880      6293          ext.w     D0
000039FE  48C0      6294          ext.l     D0
00003A00  0C80 0000 6295          cmp.l     #57,D0
00003A04  0039      
00003A06  6E26      6296          bgt.s     @vsprintf_getval_5
00003A08  2F03      6297          move.l    D3,-(A7)
00003A0A  4878 000A 6298          pea       10
00003A0E  6100 069C 6299          bsr       LMUL
00003A12  2017      6300          move.l    (A7),D0
00003A14  504F      6301          addq.w    #8,A7
00003A16  2042      6302          move.l    D2,A0
00003A18  2250      6303          move.l    (A0),A1
00003A1A  5290      6304          addq.l    #1,(A0)
00003A1C  1211      6305          move.b    (A1),D1
00003A1E  4881      6306          ext.w     D1
00003A20  48C1      6307          ext.l     D1
00003A22  D081      6308          add.l     D1,D0
00003A24  0480 0000 6309          sub.l     #48,D0
00003A28  0030      
00003A2A  2600      6310          move.l    D0,D3
00003A2C  60B4      6311          bra       @vsprintf_getval_1
                    6312   @vsprintf_getval_5:
00003A2E  2003      6313          move.l    D3,D0
00003A30  4CDF 000C 6314          movem.l   (A7)+,D2/D3
00003A34  4E5E      6315          unlk      A6
00003A36  4E75      6316          rts
                    6317   _vsprintf:
00003A38  4E56 FFCC 6318          link      A6,#-52
00003A3C  48E7 3F3C 6319          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003A40  45EE 0008 6320          lea       8(A6),A2
00003A44  47F8 3986 6321          lea       @vsprintf_copy,A3
00003A48  49F9 0000 6322          lea       _ultoa,A4
00003A4C  42B6      
00003A4E  4286      6323          clr.l     D6
                    6324   vsprintf_1:
00003A50  206E 000C 6325          move.l    12(A6),A0
00003A54  4A10      6326          tst.b     (A0)
00003A56  6700 0624 6327          beq       vsprintf_3
00003A5A  206E 000C 6328          move.l    12(A6),A0
00003A5E  1010      6329          move.b    (A0),D0
00003A60  4880      6330          ext.w     D0
00003A62  48C0      6331          ext.l     D0
00003A64  0C80 0000 6332          cmp.l     #37,D0
00003A68  0025      
00003A6A  671C      6333          beq.s     vsprintf_4
00003A6C  206E 000C 6334          move.l    12(A6),A0
00003A70  52AE 000C 6335          addq.l    #1,12(A6)
00003A74  1210      6336          move.b    (A0),D1
00003A76  4881      6337          ext.w     D1
00003A78  48C1      6338          ext.l     D1
00003A7A  2F01      6339          move.l    D1,-(A7)
00003A7C  2F0A      6340          move.l    A2,-(A7)
00003A7E  4E93      6341          jsr       (A3)
00003A80  504F      6342          addq.w    #8,A7
00003A82  5286      6343          addq.l    #1,D6
00003A84  6000 05F2 6344          bra       vsprintf_2
                    6345   vsprintf_4:
00003A88  52AE 000C 6346          addq.l    #1,12(A6)
00003A8C  422E FFD3 6347          clr.b     -45(A6)
00003A90  422E FFD2 6348          clr.b     -46(A6)
00003A94  422E FFD0 6349          clr.b     -48(A6)
00003A98  422E FFCF 6350          clr.b     -49(A6)
00003A9C  422E FFCE 6351          clr.b     -50(A6)
00003AA0  422E FFCD 6352          clr.b     -51(A6)
00003AA4  42AE FFFC 6353          clr.l     -4(A6)
00003AA8  7AFF      6354          moveq     #-1,D5
00003AAA  41EE FFDC 6355          lea       -36(A6),A0
00003AAE  2608      6356          move.l    A0,D3
00003AB0  2408      6357          move.l    A0,D2
                    6358   vsprintf_6:
00003AB2  206E 000C 6359          move.l    12(A6),A0
00003AB6  1010      6360          move.b    (A0),D0
00003AB8  4880      6361          ext.w     D0
00003ABA  48C0      6362          ext.l     D0
00003ABC  0C80 0000 6363          cmp.l     #43,D0
00003AC0  002B      
00003AC2  6730      6364          beq.s     vsprintf_12
00003AC4  6E18      6365          bgt.s     vsprintf_15
00003AC6  0C80 0000 6366          cmp.l     #35,D0
00003ACA  0023      
00003ACC  6700 003E 6367          beq       vsprintf_14
00003AD0  6E00 0046 6368          bgt       vsprintf_9
00003AD4  0C80 0000 6369          cmp.l     #32,D0
00003AD8  0020      
00003ADA  6724      6370          beq.s     vsprintf_13
00003ADC  603A      6371          bra.s     vsprintf_9
                    6372   vsprintf_15:
00003ADE  0C80 0000 6373          cmp.l     #45,D0
00003AE2  002D      
00003AE4  6702      6374          beq.s     vsprintf_11
00003AE6  6030      6375          bra.s     vsprintf_9
                    6376   vsprintf_11:
00003AE8  1D7C 0001 6377          move.b    #1,-51(A6)
00003AEC  FFCD      
00003AEE  52AE 000C 6378          addq.l    #1,12(A6)
00003AF2  6026      6379          bra.s     vsprintf_7
                    6380   vsprintf_12:
00003AF4  1D7C 0001 6381          move.b    #1,-50(A6)
00003AF8  FFCE      
00003AFA  52AE 000C 6382          addq.l    #1,12(A6)
00003AFE  601A      6383          bra.s     vsprintf_7
                    6384   vsprintf_13:
00003B00  1D7C 0001 6385          move.b    #1,-49(A6)
00003B04  FFCF      
00003B06  52AE 000C 6386          addq.l    #1,12(A6)
00003B0A  600E      6387          bra.s     vsprintf_7
                    6388   vsprintf_14:
00003B0C  1D7C 0001 6389          move.b    #1,-48(A6)
00003B10  FFD0      
00003B12  52AE 000C 6390          addq.l    #1,12(A6)
00003B16  6002      6391          bra.s     vsprintf_7
                    6392   vsprintf_9:
00003B18  6002      6393          bra.s     vsprintf_8
                    6394   vsprintf_7:
00003B1A  6096      6395          bra       vsprintf_6
                    6396   vsprintf_8:
00003B1C  206E 000C 6397          move.l    12(A6),A0
00003B20  1010      6398          move.b    (A0),D0
00003B22  4880      6399          ext.w     D0
00003B24  48C0      6400          ext.l     D0
00003B26  0C80 0000 6401          cmp.l     #48,D0
00003B2A  0030      
00003B2C  660A      6402          bne.s     vsprintf_16
00003B2E  52AE 000C 6403          addq.l    #1,12(A6)
00003B32  1D7C 0001 6404          move.b    #1,-46(A6)
00003B36  FFD2      
                    6405   vsprintf_16:
00003B38  486E 0010 6406          pea       16(A6)
00003B3C  486E 000C 6407          pea       12(A6)
00003B40  6100 FE6E 6408          bsr       @vsprintf_getval
00003B44  504F      6409          addq.w    #8,A7
00003B46  2A40      6410          move.l    D0,A5
00003B48  206E 000C 6411          move.l    12(A6),A0
00003B4C  1010      6412          move.b    (A0),D0
00003B4E  4880      6413          ext.w     D0
00003B50  48C0      6414          ext.l     D0
00003B52  0C80 0000 6415          cmp.l     #46,D0
00003B56  002E      
00003B58  6614      6416          bne.s     vsprintf_18
00003B5A  52AE 000C 6417          addq.l    #1,12(A6)
00003B5E  486E 0010 6418          pea       16(A6)
00003B62  486E 000C 6419          pea       12(A6)
00003B66  6100 FE48 6420          bsr       @vsprintf_getval
00003B6A  504F      6421          addq.w    #8,A7
00003B6C  2A00      6422          move.l    D0,D5
                    6423   vsprintf_18:
00003B6E  206E 000C 6424          move.l    12(A6),A0
00003B72  1010      6425          move.b    (A0),D0
00003B74  4880      6426          ext.w     D0
00003B76  48C0      6427          ext.l     D0
00003B78  0C80 0000 6428          cmp.l     #108,D0
00003B7C  006C      
00003B7E  660A      6429          bne.s     vsprintf_20
00003B80  52AE 000C 6430          addq.l    #1,12(A6)
00003B84  1D7C 0001 6431          move.b    #1,-45(A6)
00003B88  FFD3      
                    6432   vsprintf_20:
00003B8A  206E 000C 6433          move.l    12(A6),A0
00003B8E  1010      6434          move.b    (A0),D0
00003B90  4880      6435          ext.w     D0
00003B92  48C0      6436          ext.l     D0
00003B94  0C80 0000 6437          cmp.l     #111,D0
00003B98  006F      
00003B9A  6700 00D4 6438          beq       vsprintf_27
00003B9E  6E34      6439          bgt.s     vsprintf_33
00003BA0  0C80 0000 6440          cmp.l     #100,D0
00003BA4  0064      
00003BA6  6700 0054 6441          beq       vsprintf_24
00003BAA  6E1C      6442          bgt.s     vsprintf_34
00003BAC  0C80 0000 6443          cmp.l     #99,D0
00003BB0  0063      
00003BB2  6700 012C 6444          beq       vsprintf_30
00003BB6  6E00 016A 6445          bgt       vsprintf_22
00003BBA  0C80 0000 6446          cmp.l     #88,D0
00003BBE  0058      
00003BC0  6700 00E6 6447          beq       vsprintf_28
00003BC4  6000 015C 6448          bra       vsprintf_22
                    6449   vsprintf_34:
00003BC8  0C80 0000 6450          cmp.l     #105,D0
00003BCC  0069      
00003BCE  672C      6451          beq.s     vsprintf_24
00003BD0  6000 0150 6452          bra       vsprintf_22
                    6453   vsprintf_33:
00003BD4  0C80 0000 6454          cmp.l     #117,D0
00003BD8  0075      
00003BDA  6700 005C 6455          beq       vsprintf_26
00003BDE  6E0E      6456          bgt.s     vsprintf_35
00003BE0  0C80 0000 6457          cmp.l     #115,D0
00003BE4  0073      
00003BE6  6700 011C 6458          beq       vsprintf_31
00003BEA  6000 0136 6459          bra       vsprintf_22
                    6460   vsprintf_35:
00003BEE  0C80 0000 6461          cmp.l     #120,D0
00003BF2  0078      
00003BF4  6700 00B2 6462          beq       vsprintf_28
00003BF8  6000 0128 6463          bra       vsprintf_22
                    6464   vsprintf_24:
00003BFC  4A2E FFD3 6465          tst.b     -45(A6)
00003C00  671A      6466          beq.s     vsprintf_36
00003C02  4878 000A 6467          pea       10
00003C06  2F03      6468          move.l    D3,-(A7)
00003C08  206E 0010 6469          move.l    16(A6),A0
00003C0C  58AE 0010 6470          addq.l    #4,16(A6)
00003C10  2F10      6471          move.l    (A0),-(A7)
00003C12  6100 061E 6472          bsr       _ltoa
00003C16  DEFC 000C 6473          add.w     #12,A7
00003C1A  6018      6474          bra.s     vsprintf_37
                    6475   vsprintf_36:
00003C1C  4878 000A 6476          pea       10
00003C20  2F03      6477          move.l    D3,-(A7)
00003C22  206E 0010 6478          move.l    16(A6),A0
00003C26  58AE 0010 6479          addq.l    #4,16(A6)
00003C2A  2F10      6480          move.l    (A0),-(A7)
00003C2C  6100 0604 6481          bsr       _ltoa
00003C30  DEFC 000C 6482          add.w     #12,A7
                    6483   vsprintf_37:
00003C34  6000 00FA 6484          bra       vsprintf_23
                    6485   vsprintf_26:
00003C38  4A2E FFD3 6486          tst.b     -45(A6)
00003C3C  6718      6487          beq.s     vsprintf_38
00003C3E  4878 000A 6488          pea       10
00003C42  2F03      6489          move.l    D3,-(A7)
00003C44  206E 0010 6490          move.l    16(A6),A0
00003C48  58AE 0010 6491          addq.l    #4,16(A6)
00003C4C  2F10      6492          move.l    (A0),-(A7)
00003C4E  4E94      6493          jsr       (A4)
00003C50  DEFC 000C 6494          add.w     #12,A7
00003C54  6016      6495          bra.s     vsprintf_39
                    6496   vsprintf_38:
00003C56  4878 000A 6497          pea       10
00003C5A  2F03      6498          move.l    D3,-(A7)
00003C5C  206E 0010 6499          move.l    16(A6),A0
00003C60  58AE 0010 6500          addq.l    #4,16(A6)
00003C64  2F10      6501          move.l    (A0),-(A7)
00003C66  4E94      6502          jsr       (A4)
00003C68  DEFC 000C 6503          add.w     #12,A7
                    6504   vsprintf_39:
00003C6C  6000 00C2 6505          bra       vsprintf_23
                    6506   vsprintf_27:
00003C70  4A2E FFD3 6507          tst.b     -45(A6)
00003C74  6718      6508          beq.s     vsprintf_40
00003C76  4878 0008 6509          pea       8
00003C7A  2F03      6510          move.l    D3,-(A7)
00003C7C  206E 0010 6511          move.l    16(A6),A0
00003C80  58AE 0010 6512          addq.l    #4,16(A6)
00003C84  2F10      6513          move.l    (A0),-(A7)
00003C86  4E94      6514          jsr       (A4)
00003C88  DEFC 000C 6515          add.w     #12,A7
00003C8C  6016      6516          bra.s     vsprintf_41
                    6517   vsprintf_40:
00003C8E  4878 0008 6518          pea       8
00003C92  2F03      6519          move.l    D3,-(A7)
00003C94  206E 0010 6520          move.l    16(A6),A0
00003C98  58AE 0010 6521          addq.l    #4,16(A6)
00003C9C  2F10      6522          move.l    (A0),-(A7)
00003C9E  4E94      6523          jsr       (A4)
00003CA0  DEFC 000C 6524          add.w     #12,A7
                    6525   vsprintf_41:
00003CA4  6000 008A 6526          bra       vsprintf_23
                    6527   vsprintf_28:
00003CA8  4A2E FFD3 6528          tst.b     -45(A6)
00003CAC  6718      6529          beq.s     vsprintf_42
00003CAE  4878 0010 6530          pea       16
00003CB2  2F03      6531          move.l    D3,-(A7)
00003CB4  206E 0010 6532          move.l    16(A6),A0
00003CB8  58AE 0010 6533          addq.l    #4,16(A6)
00003CBC  2F10      6534          move.l    (A0),-(A7)
00003CBE  4E94      6535          jsr       (A4)
00003CC0  DEFC 000C 6536          add.w     #12,A7
00003CC4  6016      6537          bra.s     vsprintf_43
                    6538   vsprintf_42:
00003CC6  4878 0010 6539          pea       16
00003CCA  2F03      6540          move.l    D3,-(A7)
00003CCC  206E 0010 6541          move.l    16(A6),A0
00003CD0  58AE 0010 6542          addq.l    #4,16(A6)
00003CD4  2F10      6543          move.l    (A0),-(A7)
00003CD6  4E94      6544          jsr       (A4)
00003CD8  DEFC 000C 6545          add.w     #12,A7
                    6546   vsprintf_43:
00003CDC  6000 0052 6547          bra       vsprintf_23
                    6548   vsprintf_30:
00003CE0  206E 0010 6549          move.l    16(A6),A0
00003CE4  58AE 0010 6550          addq.l    #4,16(A6)
00003CE8  2010      6551          move.l    (A0),D0
00003CEA  2042      6552          move.l    D2,A0
00003CEC  5282      6553          addq.l    #1,D2
00003CEE  1080      6554          move.b    D0,(A0)
00003CF0  2042      6555          move.l    D2,A0
00003CF2  4210      6556          clr.b     (A0)
00003CF4  200D      6557          move.l    A5,D0
00003CF6  6704      6558          beq.s     vsprintf_44
00003CF8  200D      6559          move.l    A5,D0
00003CFA  6002      6560          bra.s     vsprintf_45
                    6561   vsprintf_44:
00003CFC  7001      6562          moveq     #1,D0
                    6563   vsprintf_45:
00003CFE  2A00      6564          move.l    D0,D5
00003D00  6000 002E 6565          bra       vsprintf_23
                    6566   vsprintf_31:
00003D04  206E 0010 6567          move.l    16(A6),A0
00003D08  58AE 0010 6568          addq.l    #4,16(A6)
00003D0C  2610      6569          move.l    (A0),D3
00003D0E  0C85 FFFF 6570          cmp.l     #-1,D5
00003D12  FFFF      
00003D14  660A      6571          bne.s     vsprintf_46
00003D16  2F03      6572          move.l    D3,-(A7)
00003D18  6100 05FE 6573          bsr       _strlen
00003D1C  584F      6574          addq.w    #4,A7
00003D1E  2A00      6575          move.l    D0,D5
                    6576   vsprintf_46:
00003D20  600E      6577          bra.s     vsprintf_23
                    6578   vsprintf_22:
00003D22  206E 000C 6579          move.l    12(A6),A0
00003D26  2242      6580          move.l    D2,A1
00003D28  5282      6581          addq.l    #1,D2
00003D2A  1290      6582          move.b    (A0),(A1)
00003D2C  2042      6583          move.l    D2,A0
00003D2E  4210      6584          clr.b     (A0)
                    6585   vsprintf_23:
00003D30  2F03      6586          move.l    D3,-(A7)
00003D32  6100 05E4 6587          bsr       _strlen
00003D36  584F      6588          addq.w    #4,A7
00003D38  1800      6589          move.b    D0,D4
00003D3A  206E 000C 6590          move.l    12(A6),A0
00003D3E  1010      6591          move.b    (A0),D0
00003D40  4880      6592          ext.w     D0
00003D42  48C0      6593          ext.l     D0
00003D44  0C80 0000 6594          cmp.l     #115,D0
00003D48  0073      
00003D4A  6618      6595          bne.s     vsprintf_48
00003D4C  0C85 0000 6596          cmp.l     #0,D5
00003D50  0000      
00003D52  6D10      6597          blt.s     vsprintf_48
00003D54  4884      6598          ext.w     D4
00003D56  48C4      6599          ext.l     D4
00003D58  B885      6600          cmp.l     D5,D4
00003D5A  6F04      6601          ble.s     vsprintf_50
00003D5C  1005      6602          move.b    D5,D0
00003D5E  6002      6603          bra.s     vsprintf_51
                    6604   vsprintf_50:
00003D60  1004      6605          move.b    D4,D0
                    6606   vsprintf_51:
00003D62  1800      6607          move.b    D0,D4
                    6608   vsprintf_48:
00003D64  206E 000C 6609          move.l    12(A6),A0
00003D68  1010      6610          move.b    (A0),D0
00003D6A  4880      6611          ext.w     D0
00003D6C  48C0      6612          ext.l     D0
00003D6E  0C80 0000 6613          cmp.l     #88,D0
00003D72  0058      
00003D74  6600 0026 6614          bne       vsprintf_56
00003D78  41EE FFDC 6615          lea       -36(A6),A0
00003D7C  2408      6616          move.l    A0,D2
                    6617   vsprintf_54:
00003D7E  2042      6618          move.l    D2,A0
00003D80  4A10      6619          tst.b     (A0)
00003D82  6718      6620          beq.s     vsprintf_56
00003D84  2042      6621          move.l    D2,A0
00003D86  1210      6622          move.b    (A0),D1
00003D88  4881      6623          ext.w     D1
00003D8A  48C1      6624          ext.l     D1
00003D8C  2F01      6625          move.l    D1,-(A7)
00003D8E  6100 F302 6626          bsr       _toupper
00003D92  584F      6627          addq.w    #4,A7
00003D94  2042      6628          move.l    D2,A0
00003D96  1080      6629          move.b    D0,(A0)
00003D98  5282      6630          addq.l    #1,D2
00003D9A  60E2      6631          bra       vsprintf_54
                    6632   vsprintf_56:
00003D9C  7E00      6633          moveq     #0,D7
00003D9E  41EE FFD4 6634          lea       -44(A6),A0
00003DA2  2408      6635          move.l    A0,D2
00003DA4  206E 000C 6636          move.l    12(A6),A0
00003DA8  1010      6637          move.b    (A0),D0
00003DAA  4880      6638          ext.w     D0
00003DAC  48C0      6639          ext.l     D0
00003DAE  0C80 0000 6640          cmp.l     #100,D0
00003DB2  0064      
00003DB4  6714      6641          beq.s     vsprintf_59
00003DB6  206E 000C 6642          move.l    12(A6),A0
00003DBA  1010      6643          move.b    (A0),D0
00003DBC  4880      6644          ext.w     D0
00003DBE  48C0      6645          ext.l     D0
00003DC0  0C80 0000 6646          cmp.l     #105,D0
00003DC4  0069      
00003DC6  6600 0076 6647          bne       vsprintf_65
                    6648   vsprintf_59:
00003DCA  4A2E FFCE 6649          tst.b     -50(A6)
00003DCE  6612      6650          bne.s     vsprintf_62
00003DD0  2043      6651          move.l    D3,A0
00003DD2  1010      6652          move.b    (A0),D0
00003DD4  4880      6653          ext.w     D0
00003DD6  48C0      6654          ext.l     D0
00003DD8  0C80 0000 6655          cmp.l     #45,D0
00003DDC  002D      
00003DDE  6600 002E 6656          bne       vsprintf_60
                    6657   vsprintf_62:
00003DE2  2043      6658          move.l    D3,A0
00003DE4  1010      6659          move.b    (A0),D0
00003DE6  4880      6660          ext.w     D0
00003DE8  48C0      6661          ext.l     D0
00003DEA  0C80 0000 6662          cmp.l     #45,D0
00003DEE  002D      
00003DF0  660E      6663          bne.s     vsprintf_63
00003DF2  2043      6664          move.l    D3,A0
00003DF4  5283      6665          addq.l    #1,D3
00003DF6  2242      6666          move.l    D2,A1
00003DF8  5282      6667          addq.l    #1,D2
00003DFA  1290      6668          move.b    (A0),(A1)
00003DFC  5304      6669          subq.b    #1,D4
00003DFE  6008      6670          bra.s     vsprintf_64
                    6671   vsprintf_63:
00003E00  2042      6672          move.l    D2,A0
00003E02  5282      6673          addq.l    #1,D2
00003E04  10BC 002B 6674          move.b    #43,(A0)
                    6675   vsprintf_64:
00003E08  5287      6676          addq.l    #1,D7
00003E0A  6000 0032 6677          bra       vsprintf_65
                    6678   vsprintf_60:
00003E0E  4A2E FFCF 6679          tst.b     -49(A6)
00003E12  6700 002A 6680          beq       vsprintf_65
00003E16  2043      6681          move.l    D3,A0
00003E18  1010      6682          move.b    (A0),D0
00003E1A  4880      6683          ext.w     D0
00003E1C  48C0      6684          ext.l     D0
00003E1E  0C80 0000 6685          cmp.l     #45,D0
00003E22  002D      
00003E24  660E      6686          bne.s     vsprintf_67
00003E26  2043      6687          move.l    D3,A0
00003E28  5283      6688          addq.l    #1,D3
00003E2A  2242      6689          move.l    D2,A1
00003E2C  5282      6690          addq.l    #1,D2
00003E2E  1290      6691          move.b    (A0),(A1)
00003E30  5304      6692          subq.b    #1,D4
00003E32  6008      6693          bra.s     vsprintf_68
                    6694   vsprintf_67:
00003E34  2042      6695          move.l    D2,A0
00003E36  5282      6696          addq.l    #1,D2
00003E38  10BC 0020 6697          move.b    #32,(A0)
                    6698   vsprintf_68:
00003E3C  5287      6699          addq.l    #1,D7
                    6700   vsprintf_65:
00003E3E  4A2E FFD0 6701          tst.b     -48(A6)
00003E42  6700 0066 6702          beq       vsprintf_77
00003E46  206E 000C 6703          move.l    12(A6),A0
00003E4A  1010      6704          move.b    (A0),D0
00003E4C  4880      6705          ext.w     D0
00003E4E  48C0      6706          ext.l     D0
00003E50  0C80 0000 6707          cmp.l     #111,D0
00003E54  006F      
00003E56  671A      6708          beq.s     vsprintf_73
00003E58  6E0C      6709          bgt.s     vsprintf_76
00003E5A  0C80 0000 6710          cmp.l     #88,D0
00003E5E  0058      
00003E60  6710      6711          beq.s     vsprintf_73
00003E62  6000 0046 6712          bra       vsprintf_77
                    6713   vsprintf_76:
00003E66  0C80 0000 6714          cmp.l     #120,D0
00003E6A  0078      
00003E6C  6704      6715          beq.s     vsprintf_73
00003E6E  6000 003A 6716          bra       vsprintf_77
                    6717   vsprintf_73:
00003E72  2042      6718          move.l    D2,A0
00003E74  5282      6719          addq.l    #1,D2
00003E76  10BC 0030 6720          move.b    #48,(A0)
00003E7A  5287      6721          addq.l    #1,D7
00003E7C  206E 000C 6722          move.l    12(A6),A0
00003E80  1010      6723          move.b    (A0),D0
00003E82  4880      6724          ext.w     D0
00003E84  48C0      6725          ext.l     D0
00003E86  0C80 0000 6726          cmp.l     #120,D0
00003E8A  0078      
00003E8C  6712      6727          beq.s     vsprintf_79
00003E8E  206E 000C 6728          move.l    12(A6),A0
00003E92  1010      6729          move.b    (A0),D0
00003E94  4880      6730          ext.w     D0
00003E96  48C0      6731          ext.l     D0
00003E98  0C80 0000 6732          cmp.l     #88,D0
00003E9C  0058      
00003E9E  660A      6733          bne.s     vsprintf_77
                    6734   vsprintf_79:
00003EA0  2042      6735          move.l    D2,A0
00003EA2  5282      6736          addq.l    #1,D2
00003EA4  10BC 0078 6737          move.b    #120,(A0)
00003EA8  5287      6738          addq.l    #1,D7
                    6739   vsprintf_77:
00003EAA  2042      6740          move.l    D2,A0
00003EAC  4210      6741          clr.b     (A0)
00003EAE  206E 000C 6742          move.l    12(A6),A0
00003EB2  1010      6743          move.b    (A0),D0
00003EB4  4880      6744          ext.w     D0
00003EB6  48C0      6745          ext.l     D0
00003EB8  0C80 0000 6746          cmp.l     #105,D0
00003EBC  0069      
00003EBE  6700 0076 6747          beq       vsprintf_82
00003EC2  6E42      6748          bgt.s     vsprintf_93
00003EC4  0C80 0000 6749          cmp.l     #99,D0
00003EC8  0063      
00003ECA  6700 0084 6750          beq       vsprintf_96
00003ECE  6E1C      6751          bgt.s     vsprintf_94
00003ED0  0C80 0000 6752          cmp.l     #88,D0
00003ED4  0058      
00003ED6  6700 005E 6753          beq       vsprintf_82
00003EDA  6E00 0184 6754          bgt       vsprintf_80
00003EDE  0C80 0000 6755          cmp.l     #69,D0
00003EE2  0045      
00003EE4  6700 0050 6756          beq       vsprintf_82
00003EE8  6000 0176 6757          bra       vsprintf_80
                    6758   vsprintf_94:
00003EEC  0C80 0000 6759          cmp.l     #101,D0
00003EF0  0065      
00003EF2  6700 0042 6760          beq       vsprintf_82
00003EF6  6E00 0168 6761          bgt       vsprintf_80
00003EFA  0C80 0000 6762          cmp.l     #100,D0
00003EFE  0064      
00003F00  6734      6763          beq.s     vsprintf_82
00003F02  6000 015C 6764          bra       vsprintf_80
                    6765   vsprintf_93:
00003F06  0C80 0000 6766          cmp.l     #117,D0
00003F0A  0075      
00003F0C  6728      6767          beq.s     vsprintf_82
00003F0E  6E1A      6768          bgt.s     vsprintf_95
00003F10  0C80 0000 6769          cmp.l     #115,D0
00003F14  0073      
00003F16  6700 0038 6770          beq       vsprintf_96
00003F1A  6E00 0144 6771          bgt       vsprintf_80
00003F1E  0C80 0000 6772          cmp.l     #111,D0
00003F22  006F      
00003F24  6710      6773          beq.s     vsprintf_82
00003F26  6000 0138 6774          bra       vsprintf_80
                    6775   vsprintf_95:
00003F2A  0C80 0000 6776          cmp.l     #120,D0
00003F2E  0078      
00003F30  6704      6777          beq.s     vsprintf_82
00003F32  6000 012C 6778          bra       vsprintf_80
                    6779   vsprintf_82:
00003F36  4A2E FFD2 6780          tst.b     -46(A6)
00003F3A  6714      6781          beq.s     vsprintf_96
00003F3C  4A2E FFCD 6782          tst.b     -51(A6)
00003F40  660E      6783          bne.s     vsprintf_96
00003F42  200D      6784          move.l    A5,D0
00003F44  9087      6785          sub.l     D7,D0
00003F46  4884      6786          ext.w     D4
00003F48  48C4      6787          ext.l     D4
00003F4A  9084      6788          sub.l     D4,D0
00003F4C  2D40 FFFC 6789          move.l    D0,-4(A6)
                    6790   vsprintf_96:
00003F50  202E FFFC 6791          move.l    -4(A6),D0
00003F54  0C80 0000 6792          cmp.l     #0,D0
00003F58  0000      
00003F5A  6C04      6793          bge.s     vsprintf_98
00003F5C  42AE FFFC 6794          clr.l     -4(A6)
                    6795   vsprintf_98:
00003F60  4A2E FFCD 6796          tst.b     -51(A6)
00003F64  6600 0030 6797          bne       vsprintf_104
00003F68  4884      6798          ext.w     D4
00003F6A  48C4      6799          ext.l     D4
00003F6C  2004      6800          move.l    D4,D0
00003F6E  D0AE FFFC 6801          add.l     -4(A6),D0
00003F72  D087      6802          add.l     D7,D0
00003F74  1D40 FFD1 6803          move.b    D0,-47(A6)
                    6804   vsprintf_102:
00003F78  102E FFD1 6805          move.b    -47(A6),D0
00003F7C  4880      6806          ext.w     D0
00003F7E  48C0      6807          ext.l     D0
00003F80  220D      6808          move.l    A5,D1
00003F82  534D      6809          subq.w    #1,A5
00003F84  B081      6810          cmp.l     D1,D0
00003F86  6C0E      6811          bge.s     vsprintf_104
00003F88  4878 0020 6812          pea       32
00003F8C  2F0A      6813          move.l    A2,-(A7)
00003F8E  4E93      6814          jsr       (A3)
00003F90  504F      6815          addq.w    #8,A7
00003F92  5286      6816          addq.l    #1,D6
00003F94  60E2      6817          bra       vsprintf_102
                    6818   vsprintf_104:
00003F96  41EE FFD4 6819          lea       -44(A6),A0
00003F9A  2408      6820          move.l    A0,D2
                    6821   vsprintf_105:
00003F9C  2042      6822          move.l    D2,A0
00003F9E  4A10      6823          tst.b     (A0)
00003FA0  6716      6824          beq.s     vsprintf_107
00003FA2  2042      6825          move.l    D2,A0
00003FA4  5282      6826          addq.l    #1,D2
00003FA6  1210      6827          move.b    (A0),D1
00003FA8  4881      6828          ext.w     D1
00003FAA  48C1      6829          ext.l     D1
00003FAC  2F01      6830          move.l    D1,-(A7)
00003FAE  2F0A      6831          move.l    A2,-(A7)
00003FB0  4E93      6832          jsr       (A3)
00003FB2  504F      6833          addq.w    #8,A7
00003FB4  5286      6834          addq.l    #1,D6
00003FB6  60E4      6835          bra       vsprintf_105
                    6836   vsprintf_107:
00003FB8  202E FFFC 6837          move.l    -4(A6),D0
00003FBC  1D40 FFD1 6838          move.b    D0,-47(A6)
                    6839   vsprintf_108:
00003FC0  102E FFD1 6840          move.b    -47(A6),D0
00003FC4  532E FFD1 6841          subq.b    #1,-47(A6)
00003FC8  4A00      6842          tst.b     D0
00003FCA  670E      6843          beq.s     vsprintf_110
00003FCC  4878 0030 6844          pea       48
00003FD0  2F0A      6845          move.l    A2,-(A7)
00003FD2  4E93      6846          jsr       (A3)
00003FD4  504F      6847          addq.w    #8,A7
00003FD6  5286      6848          addq.l    #1,D6
00003FD8  60E6      6849          bra       vsprintf_108
                    6850   vsprintf_110:
00003FDA  2043      6851          move.l    D3,A0
00003FDC  4A10      6852          tst.b     (A0)
00003FDE  6700 0048 6853          beq       vsprintf_113
00003FE2  206E 000C 6854          move.l    12(A6),A0
00003FE6  1010      6855          move.b    (A0),D0
00003FE8  4880      6856          ext.w     D0
00003FEA  48C0      6857          ext.l     D0
00003FEC  0C80 0000 6858          cmp.l     #115,D0
00003FF0  0073      
00003FF2  670C      6859          beq.s     vsprintf_116
00003FF4  6E18      6860          bgt.s     vsprintf_119
00003FF6  0C80 0000 6861          cmp.l     #99,D0
00003FFA  0063      
00003FFC  6702      6862          beq.s     vsprintf_116
00003FFE  600E      6863          bra.s     vsprintf_119
                    6864   vsprintf_116:
00004000  2005      6865          move.l    D5,D0
00004002  5385      6866          subq.l    #1,D5
00004004  0C80 0000 6867          cmp.l     #0,D0
00004008  0000      
0000400A  6E02      6868          bgt.s     vsprintf_119
0000400C  6016      6869          bra.s     vsprintf_115
                    6870   vsprintf_119:
0000400E  2043      6871          move.l    D3,A0
00004010  5283      6872          addq.l    #1,D3
00004012  1210      6873          move.b    (A0),D1
00004014  4881      6874          ext.w     D1
00004016  48C1      6875          ext.l     D1
00004018  2F01      6876          move.l    D1,-(A7)
0000401A  2F0A      6877          move.l    A2,-(A7)
0000401C  4E93      6878          jsr       (A3)
0000401E  504F      6879          addq.w    #8,A7
00004020  5286      6880          addq.l    #1,D6
00004022  6002      6881          bra.s     vsprintf_112
                    6882   vsprintf_115:
00004024  6002      6883          bra.s     vsprintf_113
                    6884   vsprintf_112:
00004026  60B2      6885          bra       vsprintf_110
                    6886   vsprintf_113:
00004028  4A2E FFCD 6887          tst.b     -51(A6)
0000402C  6700 0030 6888          beq       vsprintf_125
00004030  4884      6889          ext.w     D4
00004032  48C4      6890          ext.l     D4
00004034  2004      6891          move.l    D4,D0
00004036  D0AE FFFC 6892          add.l     -4(A6),D0
0000403A  D087      6893          add.l     D7,D0
0000403C  1D40 FFD1 6894          move.b    D0,-47(A6)
                    6895   vsprintf_123:
00004040  102E FFD1 6896          move.b    -47(A6),D0
00004044  4880      6897          ext.w     D0
00004046  48C0      6898          ext.l     D0
00004048  220D      6899          move.l    A5,D1
0000404A  534D      6900          subq.w    #1,A5
0000404C  B081      6901          cmp.l     D1,D0
0000404E  6C0E      6902          bge.s     vsprintf_125
00004050  4878 0020 6903          pea       32
00004054  2F0A      6904          move.l    A2,-(A7)
00004056  4E93      6905          jsr       (A3)
00004058  504F      6906          addq.w    #8,A7
0000405A  5386      6907          subq.l    #1,D6
0000405C  60E2      6908          bra       vsprintf_123
                    6909   vsprintf_125:
0000405E  6014      6910          bra.s     vsprintf_81
                    6911   vsprintf_80:
00004060  206E 000C 6912          move.l    12(A6),A0
00004064  1210      6913          move.b    (A0),D1
00004066  4881      6914          ext.w     D1
00004068  48C1      6915          ext.l     D1
0000406A  2F01      6916          move.l    D1,-(A7)
0000406C  2F0A      6917          move.l    A2,-(A7)
0000406E  4E93      6918          jsr       (A3)
00004070  504F      6919          addq.w    #8,A7
00004072  5286      6920          addq.l    #1,D6
                    6921   vsprintf_81:
00004074  52AE 000C 6922          addq.l    #1,12(A6)
                    6923   vsprintf_2:
00004078  6000 F9D6 6924          bra       vsprintf_1
                    6925   vsprintf_3:
0000407C  4A92      6926          tst.l     (A2)
0000407E  6710      6927          beq.s     vsprintf_126
00004080  4201      6928          clr.b     D1
00004082  C2BC 0000 6929          and.l     #255,D1
00004086  00FF      
00004088  2F01      6930          move.l    D1,-(A7)
0000408A  2F0A      6931          move.l    A2,-(A7)
0000408C  4E93      6932          jsr       (A3)
0000408E  504F      6933          addq.w    #8,A7
                    6934   vsprintf_126:
00004090  2006      6935          move.l    D6,D0
00004092  4CDF 3CFC 6936          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004096  4E5E      6937          unlk      A6
00004098  4E75      6938          rts
                    6939   ULMUL:
0000409A  4E56 0000 6940          link    A6,#0
0000409E  48E7 C000 6941          movem.l D0/D1,-(A7)
000040A2  222E 0008 6942          move.l  8(A6),D1
000040A6  202E 000C 6943          move.l  12(A6),D0
000040AA  602C      6944          bra.s   lmul_3
                    6945   LMUL:
000040AC  4E56 0000 6946          link    A6,#0
000040B0  48E7 C000 6947          movem.l D0/D1,-(A7)
000040B4  222E 0008 6948          move.l  8(A6),D1
000040B8  202E 000C 6949          move.l  12(A6),D0
000040BC  4A80      6950          tst.l   D0
000040BE  6A0A      6951          bpl.s   lmul_1
000040C0  4480      6952          neg.l   D0
000040C2  4A81      6953          tst.l   D1
000040C4  6A0A      6954          bpl.s   lmul_2
000040C6  4481      6955          neg.l   D1
000040C8  600E      6956          bra.s   lmul_3
                    6957   lmul_1:
000040CA  4A81      6958          tst.l   D1
000040CC  6A0A      6959          bpl.s   lmul_3
000040CE  4481      6960          neg.l   D1
                    6961   lmul_2:
000040D0  6114      6962          bsr.s   domul
000040D2  4481      6963          neg.l   D1
000040D4  4080      6964          negx.l  D0
000040D6  6002      6965          bra.s   lmul_4
                    6966   lmul_3:
000040D8  610C      6967          bsr.s   domul
                    6968   lmul_4:
000040DA  2D41 0008 6969          move.l  D1,8(A6)
000040DE  4CDF 0003 6970          movem.l (A7)+,D0/D1
000040E2  4E5E      6971          unlk    A6
000040E4  4E75      6972          rts
                    6973   domul:
000040E6  0C81 0000 6974          cmpi.l  #$FFFF,D1
000040EA  FFFF      
000040EC  620C      6975          bhi.s   domul_1
000040EE  0C80 0000 6976          cmpi.l  #$FFFF,D0
000040F2  FFFF      
000040F4  620E      6977          bhi.s   domul_2
000040F6  C2C0      6978          mulu    D0,D1
000040F8  4E75      6979          rts
                    6980   domul_1:
000040FA  0C80 0000 6981          cmpi.l  #$FFFF,D0
000040FE  FFFF      
00004100  6218      6982          bhi.s   domul_4
00004102  6002      6983          bra.s   domul_3
                    6984   domul_2
00004104  C141      6985          exg     D0,D1
                    6986   domul_3:
00004106  2F02      6987          move.l  D2,-(A7)
00004108  2401      6988          move.l  D1,D2
0000410A  4842      6989          swap    D2
0000410C  C2C0      6990          mulu    D0,D1
0000410E  C4C0      6991          mulu    D0,D2
00004110  4842      6992          swap    D2
00004112  4242      6993          clr.w   D2
00004114  D282      6994          add.l   D2,D1
00004116  241F      6995          move.l  (A7)+,D2
00004118  4E75      6996          rts
                    6997   domul_4:
0000411A  48E7 3000 6998          movem.l D2/D3,-(A7)
0000411E  2401      6999          move.l  D1,D2
00004120  2601      7000          move.l  D1,D3
00004122  C2C0      7001          mulu    D0,D1
00004124  4842      7002          swap    D2
00004126  C4C0      7003          mulu    D0,D2
00004128  4840      7004          swap    D0
0000412A  C6C0      7005          mulu    D0,D3
0000412C  D483      7006          add.l   D3,D2
0000412E  4842      7007          swap    D2
00004130  4242      7008          clr.w   D2
00004132  D282      7009          add.l   D2,D1
00004134  4CDF 000C 7010          movem.l (A7)+,D2/D3
00004138  4E75      7011          rts
                    7012   _gets:
0000413A  4E56 0000 7013          link      A6,#0
0000413E  48E7 3820 7014          movem.l   D2/D3/D4/A2,-(A7)
00004142  45F8 2F98 7015          lea       _putch,A2
00004146  282E 0008 7016          move.l    8(A6),D4
0000414A  2404      7017          move.l    D4,D2
                    7018   gets_1:
0000414C  6100 EE7A 7019          bsr       _getch
00004150  2600      7020          move.l    D0,D3
00004152  0C80 0000 7021          cmp.l     #10,D0
00004156  000A      
00004158  6700 003C 7022          beq       gets_3
0000415C  0C83 0000 7023          cmp.l     #8,D3
00004160  0008      
00004162  6712      7024          beq.s     gets_4
00004164  2042      7025          move.l    D2,A0
00004166  5282      7026          addq.l    #1,D2
00004168  1083      7027          move.b    D3,(A0)
0000416A  4883      7028          ext.w     D3
0000416C  48C3      7029          ext.l     D3
0000416E  2F03      7030          move.l    D3,-(A7)
00004170  4E92      7031          jsr       (A2)
00004172  584F      7032          addq.w    #4,A7
00004174  601E      7033          bra.s     gets_6
                    7034   gets_4:
00004176  B484      7035          cmp.l     D4,D2
00004178  631A      7036          bls.s     gets_6
0000417A  4878 0008 7037          pea       8
0000417E  4E92      7038          jsr       (A2)
00004180  584F      7039          addq.w    #4,A7
00004182  4878 0020 7040          pea       32
00004186  4E92      7041          jsr       (A2)
00004188  584F      7042          addq.w    #4,A7
0000418A  4878 0008 7043          pea       8
0000418E  4E92      7044          jsr       (A2)
00004190  584F      7045          addq.w    #4,A7
00004192  5382      7046          subq.l    #1,D2
                    7047   gets_6:
00004194  60B6      7048          bra       gets_1
                    7049   gets_3:
00004196  4878 000A 7050          pea       10
0000419A  4E92      7051          jsr       (A2)
0000419C  584F      7052          addq.w    #4,A7
0000419E  2042      7053          move.l    D2,A0
000041A0  4210      7054          clr.b     (A0)
000041A2  2004      7055          move.l    D4,D0
000041A4  4CDF 041C 7056          movem.l   (A7)+,D2/D3/D4/A2
000041A8  4E5E      7057          unlk      A6
000041AA  4E75      7058          rts
                    7059   _ungetch:
000041AC  4E56 0000 7060          link      A6,#0
000041B0  23EE 0008 7061          move.l    8(A6),__ungetbuf
000041B4  0B00 00C0 
000041B8  202E 0008 7062          move.l    8(A6),D0
000041BC  4E5E      7063          unlk      A6
000041BE  4E75      7064          rts
                    7065   @itoa_convert:
000041C0  4E56 0000 7066          link      A6,#0
000041C4  48E7 3C00 7067          movem.l   D2/D3/D4/D5,-(A7)
000041C8  242E 0008 7068          move.l    8(A6),D2
000041CC  262E 0010 7069          move.l    16(A6),D3
000041D0  2A2E 000C 7070          move.l    12(A6),D5
000041D4  2F05      7071          move.l    D5,-(A7)
000041D6  2F03      7072          move.l    D3,-(A7)
000041D8  6100 ECE0 7073          bsr       ULDIV
000041DC  202F 0004 7074          move.l    4(A7),D0
000041E0  504F      7075          addq.w    #8,A7
000041E2  2800      7076          move.l    D0,D4
000041E4  BA83      7077          cmp.l     D3,D5
000041E6  651A      7078          blo.s     @itoa_convert_1
000041E8  2F03      7079          move.l    D3,-(A7)
000041EA  2F05      7080          move.l    D5,-(A7)
000041EC  2F03      7081          move.l    D3,-(A7)
000041EE  6100 ECCA 7082          bsr       ULDIV
000041F2  2217      7083          move.l    (A7),D1
000041F4  504F      7084          addq.w    #8,A7
000041F6  2F01      7085          move.l    D1,-(A7)
000041F8  2F02      7086          move.l    D2,-(A7)
000041FA  61C4      7087          bsr       @itoa_convert
000041FC  DEFC 000C 7088          add.w     #12,A7
00004200  2400      7089          move.l    D0,D2
                    7090   @itoa_convert_1:
00004202  0C84 0000 7091          cmp.l     #9,D4
00004206  0009      
00004208  6E0A      7092          bgt.s     @itoa_convert_3
0000420A  2004      7093          move.l    D4,D0
0000420C  0680 0000 7094          add.l     #48,D0
00004210  0030      
00004212  600E      7095          bra.s     @itoa_convert_4
                    7096   @itoa_convert_3:
00004214  2004      7097          move.l    D4,D0
00004216  0680 0000 7098          add.l     #97,D0
0000421A  0061      
0000421C  0480 0000 7099          sub.l     #10,D0
00004220  000A      
                    7100   @itoa_convert_4:
00004222  2042      7101          move.l    D2,A0
00004224  1080      7102          move.b    D0,(A0)
00004226  2002      7103          move.l    D2,D0
00004228  5280      7104          addq.l    #1,D0
0000422A  4CDF 003C 7105          movem.l   (A7)+,D2/D3/D4/D5
0000422E  4E5E      7106          unlk      A6
00004230  4E75      7107          rts
                    7108   _ltoa:
00004232  4E56 0000 7109          link      A6,#0
00004236  48E7 3C00 7110          movem.l   D2/D3/D4/D5,-(A7)
0000423A  242E 0008 7111          move.l    8(A6),D2
0000423E  262E 000C 7112          move.l    12(A6),D3
00004242  2A2E 0010 7113          move.l    16(A6),D5
00004246  2803      7114          move.l    D3,D4
00004248  0C85 0000 7115          cmp.l     #2,D5
0000424C  0002      
0000424E  6D08      7116          blt.s     ltoa_3
00004250  0C85 0000 7117          cmp.l     #36,D5
00004254  0024      
00004256  6F06      7118          ble.s     ltoa_1
                    7119   ltoa_3:
00004258  2003      7120          move.l    D3,D0
0000425A  6000 0052 7121          bra       ltoa_4
                    7122   ltoa_1:
0000425E  0C85 0000 7123          cmp.l     #10,D5
00004262  000A      
00004264  6600 0032 7124          bne       ltoa_5
00004268  0C82 0000 7125          cmp.l     #0,D2
0000426C  0000      
0000426E  6C28      7126          bge.s     ltoa_5
00004270  2002      7127          move.l    D2,D0
00004272  4480      7128          neg.l     D0
00004274  2400      7129          move.l    D0,D2
00004276  0C82 0000 7130          cmp.l     #0,D2
0000427A  0000      
0000427C  6C12      7131          bge.s     ltoa_7
0000427E  4879 0000 7132          pea       @itoa_1
00004282  57DC      
00004284  2F03      7133          move.l    D3,-(A7)
00004286  6100 EC22 7134          bsr       _strcpy
0000428A  504F      7135          addq.w    #8,A7
0000428C  2003      7136          move.l    D3,D0
0000428E  601E      7137          bra.s     ltoa_4
                    7138   ltoa_7:
00004290  2044      7139          move.l    D4,A0
00004292  5284      7140          addq.l    #1,D4
00004294  10BC 002D 7141          move.b    #45,(A0)
                    7142   ltoa_5:
00004298  2F05      7143          move.l    D5,-(A7)
0000429A  2F02      7144          move.l    D2,-(A7)
0000429C  2F04      7145          move.l    D4,-(A7)
0000429E  6100 FF20 7146          bsr       @itoa_convert
000042A2  DEFC 000C 7147          add.w     #12,A7
000042A6  2800      7148          move.l    D0,D4
000042A8  2044      7149          move.l    D4,A0
000042AA  4210      7150          clr.b     (A0)
000042AC  2003      7151          move.l    D3,D0
                    7152   ltoa_4:
000042AE  4CDF 003C 7153          movem.l   (A7)+,D2/D3/D4/D5
000042B2  4E5E      7154          unlk      A6
000042B4  4E75      7155          rts
                    7156   _ultoa:
000042B6  4E56 0000 7157          link      A6,#0
000042BA  48E7 3800 7158          movem.l   D2/D3/D4,-(A7)
000042BE  262E 0010 7159          move.l    16(A6),D3
000042C2  282E 000C 7160          move.l    12(A6),D4
000042C6  2404      7161          move.l    D4,D2
000042C8  0C83 0000 7162          cmp.l     #2,D3
000042CC  0002      
000042CE  6D08      7163          blt.s     ultoa_3
000042D0  0C83 0000 7164          cmp.l     #36,D3
000042D4  0024      
000042D6  6F04      7165          ble.s     ultoa_1
                    7166   ultoa_3:
000042D8  2004      7167          move.l    D4,D0
000042DA  6018      7168          bra.s     ultoa_4
                    7169   ultoa_1:
000042DC  2F03      7170          move.l    D3,-(A7)
000042DE  2F2E 0008 7171          move.l    8(A6),-(A7)
000042E2  2F02      7172          move.l    D2,-(A7)
000042E4  6100 FEDA 7173          bsr       @itoa_convert
000042E8  DEFC 000C 7174          add.w     #12,A7
000042EC  2400      7175          move.l    D0,D2
000042EE  2042      7176          move.l    D2,A0
000042F0  4210      7177          clr.b     (A0)
000042F2  2004      7178          move.l    D4,D0
                    7179   ultoa_4:
000042F4  4CDF 001C 7180          movem.l   (A7)+,D2/D3/D4
000042F8  4E5E      7181          unlk      A6
000042FA  4E75      7182          rts
                    7183   _itoa:
000042FC  4E56 0000 7184          link      A6,#0
00004300  2F2E 0010 7185          move.l    16(A6),-(A7)
00004304  2F2E 000C 7186          move.l    12(A6),-(A7)
00004308  2F2E 0008 7187          move.l    8(A6),-(A7)
0000430C  6100 FF24 7188          bsr       _ltoa
00004310  DEFC 000C 7189          add.w     #12,A7
00004314  4E5E      7190          unlk      A6
00004316  4E75      7191          rts
                    7192   _strlen:
00004318  206F 0004 7193          move.l    (4,A7),A0
0000431C  2248      7194          move.l    A0,A1
                    7195   strlen_1:
0000431E  4A19      7196          tst.b     (A1)+
00004320  66FC      7197          bne       strlen_1
00004322  2009      7198          move.l    A1,D0
00004324  9088      7199          sub.l     A0,D0
00004326  5380      7200          subq.l    #1,D0
00004328  4E75      7201          rts
                    7202          section   const
                    7203   
                    7204   @m68kde~1_1:
0000432A  0D0A 00   7205          dc.b      13,10,0
                    7206   @m68kde~1_2:
0000432E  0D53 7769 7207          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004332  7463 6865 
00004336  7320 5357 
0000433A  5B        
0000433B  372D 305D 7208          dc.b      55,45,48,93,32,61,32,0
0000433F  203D 2000 
                    7209   @m68kde~1_3:
00004344  3000      7210          dc.b      48,0
                    7211   @m68kde~1_4:
00004346  3100      7212          dc.b      49,0
                    7213   @m68kde~1_5:
00004348  0D0A 4475 7214          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
0000434C  6D70 204D 
00004350  656D 6F72 
00004354  79        
00004355  2042 6C6F 7215          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004359  636B 3A20 
0000435D  3C45 5343 
00004361  3E20      
00004363  746F 2041 7216          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004367  626F 7274 
0000436B  2C20 3C53 
0000436F  50        
00004370  4143 453E 7217          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004374  2074 6F20 
00004378  436F 6E74 
0000437C  69        
0000437D  6E75 6500 7218          dc.b      110,117,101,0
                    7219   @m68kde~1_6:
00004382  0D0A 456E 7220          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004386  7465 7220 
0000438A  5374 6172 
0000438E  74        
0000438F  2041 6464 7221          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004393  7265 7373 
00004397  3A20 00   
                    7222   @m68kde~1_7:
0000439A  0D0A 2530 7223          dc.b      13,10,37,48,56,120,32,0
0000439E  3878 2000 
                    7224   @m68kde~1_8:
000043A2  2530 3258 7225          dc.b      37,48,50,88,0
000043A6  00        
                    7226   @m68kde~1_9:
000043A8  2020 00   7227          dc.b      32,32,0
                    7228   @m68kde~1_10:
000043AC  0D0A 4669 7229          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
000043B0  6C6C 204D 
000043B4  656D 6F72 
000043B8  79        
000043B9  2042 6C6F 7230          dc.b      32,66,108,111,99,107,0
000043BD  636B 00   
                    7231   @m68kde~1_11:
000043C0  0D0A 456E 7232          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000043C4  7465 7220 
000043C8  456E 6420 
000043CC  41        
000043CD  6464 7265 7233          dc.b      100,100,114,101,115,115,58,32,0
000043D1  7373 3A20 
000043D5  00        
                    7234   @m68kde~1_12:
000043D6  0D0A 456E 7235          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000043DA  7465 7220 
000043DE  4669 6C6C 
000043E2  20        
000043E3  4461 7461 7236          dc.b      68,97,116,97,58,32,0
000043E7  3A20 00   
                    7237   @m68kde~1_13:
000043EA  0D0A 4669 7238          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000043EE  6C6C 696E 
000043F2  6720 4164 
000043F6  64        
000043F7  7265 7373 7239          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000043FB  6573 205B 
000043FF  2425 3038 
00004403  58        
00004404  202D 2024 7240          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00004408  2530 3858 
0000440C  5D20 7769 
00004410  7468      
00004412  2024 2530 7241          dc.b      32,36,37,48,50,88,0
00004416  3258 00   
                    7242   @m68kde~1_14:
0000441A  0D0A 5573 7243          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
0000441E  6520 4879 
00004422  7065 7254 
00004426  65        
00004427  726D 696E 7244          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
0000442B  616C 2074 
0000442F  6F20 5365 
00004433  6E64 2054 7245          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004437  6578 7420 
0000443B  4669 6C65 
0000443F  2028 2E68 7246          dc.b      32,40,46,104,101,120,41,13,10,0
00004443  6578 290D 
00004447  0A00      
                    7247   @m68kde~1_15:
0000444A  0D0A 4C6F 7248          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
0000444E  6164 2046 
00004452  6169 6C65 
00004456  64        
00004457  2061 7420 7249          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000445B  4164 6472 
0000445F  6573 7320 
00004463  3D        
00004464  205B 2425 7250          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004468  3038 585D 
0000446C  0D0A 00   
                    7251   @m68kde~1_16:
00004470  0D0A 5375 7252          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004474  6363 6573 
00004478  733A 2044 
0000447C  6F        
0000447D  776E 6C6F 7253          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004481  6164 6564 
00004485  2025 6420 
00004489  6279 7465 7254          dc.b      98,121,116,101,115,13,10,0
0000448D  730D 0A00 
                    7255   @m68kde~1_17:
00004492  0D0A 4578 7256          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004496  616D 696E 
0000449A  6520 616E 
0000449E  64        
0000449F  2043 6861 7257          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
000044A3  6E67 6520 
000044A7  4D65 6D6F 
000044AB  72        
000044AC  7900      7258          dc.b      121,0
                    7259   @m68kde~1_18:
000044AE  0D0A 3C45 7260          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
000044B2  5343 3E20 
000044B6  746F 2053 
000044BA  746F      
000044BC  702C 203C 7261          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000044C0  5350 4143 
000044C4  453E 2074 
000044C8  6F20      
000044CA  4164 7661 7262          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000044CE  6E63 652C 
000044D2  2027 2D27 
000044D6  2074      
000044D8  6F20 476F 7263          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000044DC  2042 6163 
000044E0  6B2C 203C 
000044E4  4441      
000044E6  5441 3E20 7264          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000044EA  746F 2063 
000044EE  6861 6E67 
000044F2  65        
000044F3  00        7265          dc.b      0
                    7266   @m68kde~1_19:
000044F4  0D0A 456E 7267          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000044F8  7465 7220 
000044FC  4164 6472 
00004500  65        
00004501  7373 3A20 7268          dc.b      115,115,58,32,0
00004505  00        
                    7269   @m68kde~1_20:
00004506  0D0A 5B25 7270          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
0000450A  3038 785D 
0000450E  203A 2025 
00004512  3032 78   
00004515  2020 00   7271          dc.b      32,32,0
                    7272   @m68kde~1_21:
00004518  0D0A 5761 7273          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
0000451C  726E 696E 
00004520  6720 4368 
00004524  61        
00004525  6E67 6520 7274          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004529  4661 696C 
0000452D  6564 3A20 
00004531  57        
00004532  726F 7465 7275          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004536  205B 2530 
0000453A  3278 5D2C 
0000453E  20        
0000453F  5265 6164 7276          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004543  205B 2530 
00004547  3278 5D00 
                    7277   @m68kde~1_22:
0000454C  0A45 7261 7278          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
00004550  7369 6E67 
00004554  2E2E 2E0A 
00004558  00        
                    7279   @m68kde~1_23:
0000455A  0D0A 2053 7280          dc.b      13,10,32,83,116,97,114,116,105,110,103,32,80
0000455E  7461 7274 
00004562  696E 6720 
00004566  50        
00004567  726F 6772 7281          dc.b      114,111,103,114,97,109,109,105,110,103,46,46
0000456B  616D 6D69 
0000456F  6E67 2E2E 
00004573  2E00      7282          dc.b      46,0
                    7283   @m68kde~1_24:
00004576  0D0A 2050 7284          dc.b      13,10,32,80,114,111,103,114,97,109,109,105,110
0000457A  726F 6772 
0000457E  616D 6D69 
00004582  6E        
00004583  6720 436F 7285          dc.b      103,32,67,111,109,112,108,101,116,101,33,0
00004587  6D70 6C65 
0000458B  7465 2100 
                    7286   @m68kde~1_25:
00004590  0D0A 204C 7287          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
00004594  6F61 6469 
00004598  6E67 2050 
0000459C  72        
0000459D  6F67 7261 7288          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
000045A1  6D20 4672 
000045A5  6F6D 2053 
000045A9  50        
000045AA  4920 466C 7289          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
000045AE  6173 682E 
000045B2  2E2E 2E00 
                    7290   @m68kde~1_26:
000045B6  0D0A 2052 7291          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
000045BA  6561 6420 
000045BE  4461 7461 
000045C2  3A20      
000045C4  2530 3878 7292          dc.b      37,48,56,120,32,10,0
000045C8  200A 00   
                    7293   @m68kde~1_27:
000045CC  2425 3038 7294          dc.b      36,37,48,56,88,32,32,0
000045D0  5820 2000 
                    7295   @m68kde~1_28:
000045D4  2000      7296          dc.b      32,0
                    7297   @m68kde~1_29:
000045D6  2E00      7298          dc.b      46,0
                    7299   @m68kde~1_30:
000045D8  2563 00   7300          dc.b      37,99,0
                    7301   @m68kde~1_31:
000045DC  00        7302          dc.b      0
                    7303   @m68kde~1_32:
000045DE  0D0A 0D0A 7304          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000045E2  2044 3020 
000045E6  3D20 2425 
000045EA  3038 58   
000045ED  2020 4130 7305          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000045F1  203D 2024 
000045F5  2530 3858 
000045F9  00        
                    7306   @m68kde~1_33:
000045FA  0D0A 2044 7307          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000045FE  3120 3D20 
00004602  2425 3038 
00004606  5820 20   
00004609  4131 203D 7308          dc.b      65,49,32,61,32,36,37,48,56,88,0
0000460D  2024 2530 
00004611  3858 00   
                    7309   @m68kde~1_34:
00004614  0D0A 2044 7310          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004618  3220 3D20 
0000461C  2425 3038 
00004620  5820 20   
00004623  4132 203D 7311          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004627  2024 2530 
0000462B  3858 00   
                    7312   @m68kde~1_35:
0000462E  0D0A 2044 7313          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004632  3320 3D20 
00004636  2425 3038 
0000463A  5820 20   
0000463D  4133 203D 7314          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004641  2024 2530 
00004645  3858 00   
                    7315   @m68kde~1_36:
00004648  0D0A 2044 7316          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000464C  3420 3D20 
00004650  2425 3038 
00004654  5820 20   
00004657  4134 203D 7317          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000465B  2024 2530 
0000465F  3858 00   
                    7318   @m68kde~1_37:
00004662  0D0A 2044 7319          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004666  3520 3D20 
0000466A  2425 3038 
0000466E  5820 20   
00004671  4135 203D 7320          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004675  2024 2530 
00004679  3858 00   
                    7321   @m68kde~1_38:
0000467C  0D0A 2044 7322          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004680  3620 3D20 
00004684  2425 3038 
00004688  5820 20   
0000468B  4136 203D 7323          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000468F  2024 2530 
00004693  3858 00   
                    7324   @m68kde~1_39:
00004696  0D0A 2044 7325          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
0000469A  3720 3D20 
0000469E  2425 3038 
000046A2  5820 20   
000046A5  4137 203D 7326          dc.b      65,55,32,61,32,36,37,48,56,88,0
000046A9  2024 2530 
000046AD  3858 00   
                    7327   @m68kde~1_40:
000046B0  0D0A 0D0A 7328          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000046B4  5553 5020 
000046B8  3D20 2425 
000046BC  3038 58   
000046BF  2020 2841 7329          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000046C3  3729 2055 
000046C7  7365 7220 
000046CB  5350      
000046CD  00        7330          dc.b      0
                    7331   @m68kde~1_41:
000046CE  0D0A 5353 7332          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000046D2  5020 3D20 
000046D6  2425 3038 
000046DA  5820 20   
000046DD  2841 3729 7333          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000046E1  2053 7570 
000046E5  6572 7669 
000046E9  73        
000046EA  6F72 2053 7334          dc.b      111,114,32,83,80,0
000046EE  5000      
                    7335   @m68kde~1_42:
000046F0  0D0A 2053 7336          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000046F4  5220 3D20 
000046F8  2425 3034 
000046FC  5820 20   
000046FF  2000      7337          dc.b      32,0
                    7338   @m68kde~1_43:
00004702  2020 205B 7339          dc.b      32,32,32,91,0
00004706  00        
                    7340   @m68kde~1_44:
00004708  0D0A 2050 7341          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
0000470C  4320 3D20 
00004710  2425 3038 
00004714  5820 20   
00004717  00        7342          dc.b      0
                    7343   @m68kde~1_45:
00004718  5B40 2042 7344          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
0000471C  5245 414B 
00004720  504F 494E 
00004724  545D 00   
                    7345   @m68kde~1_46:
00004728  0D0A 5750 7346          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
0000472C  2564 203D 
00004730  2025 7300 
                    7347   @m68kde~1_47:
00004734  0D0A 0D0A 7348          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004738  0D0A 0D0A 
0000473C  0D0A 0D0A 
00004740  5369 6E   
00004743  676C 6520 7349          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004747  5374 6570 
0000474B  2020 3A5B 
0000474F  4F        
00004750  4E5D 00   7350          dc.b      78,93,0
                    7351   @m68kde~1_48:
00004754  0D0A 4272 7352          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004758  6561 6B20 
0000475C  506F 696E 
00004760  74        
00004761  7320 3A5B 7353          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004765  4469 7361 
00004769  626C 6564 
0000476D  5D        
0000476E  00        7354          dc.b      0
                    7355   @m68kde~1_49:
00004770  0D0A 5072 7356          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004774  6573 7320 
00004778  3C53 5041 
0000477C  4345      
0000477E  3E20 746F 7357          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004782  2045 7865 
00004786  6375 7465 
0000478A  20        
0000478B  4E65 7874 7358          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000478F  2049 6E73 
00004793  7472 7563 
00004797  7469 6F6E 7359          dc.b      116,105,111,110,0
0000479B  00        
                    7360   @m68kde~1_50:
0000479C  0D0A 5072 7361          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000047A0  6573 7320 
000047A4  3C45 5343 
000047A8  3E20      
000047AA  746F 2052 7362          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000047AE  6573 756D 
000047B2  6520 5072 
000047B6  6F67 7261 7363          dc.b      111,103,114,97,109,0
000047BA  6D00      
                    7364   @m68kde~1_51:
000047BC  0D0A 496C 7365          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000047C0  6C65 6761 
000047C4  6C20 4461 
000047C8  74        
000047C9  6120 5265 7366          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000047CD  6769 7374 
000047D1  6572 203A 
000047D5  20        
000047D6  5573 6520 7367          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000047DA  4430 2D44 
000047DE  372E 2E2E 
000047E2  2E2E      
000047E4  0D0A 00   7368          dc.b      13,10,0
                    7369   @m68kde~1_52:
000047E8  0D0A 4425 7370          dc.b      13,10,68,37,99,32,61,32,0
000047EC  6320 3D20 
000047F0  00        
                    7371   @m68kde~1_53:
000047F2  0D0A 496C 7372          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000047F6  6C65 6761 
000047FA  6C20 4164 
000047FE  64        
000047FF  7265 7373 7373          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004803  2052 6567 
00004807  6973 7465 
0000480B  7220 3A20 7374          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
0000480F  5573 6520 
00004813  4130 2D41 
00004817  372E      
00004819  2E2E 2E2E 7375          dc.b      46,46,46,46,13,10,0
0000481D  0D0A 00   
                    7376   @m68kde~1_54:
00004820  0D0A 4125 7377          dc.b      13,10,65,37,99,32,61,32,0
00004824  6320 3D20 
00004828  00        
                    7378   @m68kde~1_55:
0000482A  0D0A 5573 7379          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
0000482E  6572 2053 
00004832  5020 3D20 
00004836  00        
                    7380   @m68kde~1_56:
00004838  0D0A 496C 7381          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000483C  6C65 6761 
00004840  6C20 5265 
00004844  67        
00004845  6973 7465 7382          dc.b      105,115,116,101,114,46,46,46,46,0
00004849  722E 2E2E 
0000484D  2E00      
                    7383   @m68kde~1_57:
00004850  0D0A 5379 7384          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004854  7374 656D 
00004858  2053 5020 
0000485C  3D        
0000485D  2000      7385          dc.b      32,0
                    7386   @m68kde~1_58:
00004860  0D0A 5043 7387          dc.b      13,10,80,67,32,61,32,0
00004864  203D 2000 
                    7388   @m68kde~1_59:
00004868  0D0A 5352 7389          dc.b      13,10,83,82,32,61,32,0
0000486C  203D 2000 
                    7390   @m68kde~1_60:
00004870  0D0A 496C 7391          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004874  6C65 6761 
00004878  6C20 5265 
0000487C  67        
0000487D  6973 7465 7392          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004881  723A 2055 
00004885  7365 2041 
00004889  30        
0000488A  2D41 372C 7393          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000488E  2044 302D 
00004892  4437 2C20 
00004896  5353 50   
00004899  2C20 5553 7394          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000489D  502C 2050 
000048A1  4320 6F72 
000048A5  2053      
000048A7  520D 0A00 7395          dc.b      82,13,10,0
                    7396   @m68kde~1_61:
000048AC  0D0A 0D0A 7397          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000048B0  4E75 6D20 
000048B4  2020 2020 
000048B8  4164      
000048BA  6472 6573 7398          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000048BE  7320 2020 
000048C2  2020 2049 
000048C6  6E        
000048C7  7374 7275 7399          dc.b      115,116,114,117,99,116,105,111,110,0
000048CB  6374 696F 
000048CF  6E00      
                    7400   @m68kde~1_62:
000048D2  0D0A 2D2D 7401          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000048D6  2D20 2020 
000048DA  2020 2D2D 
000048DE  2D2D 2D   
000048E1  2D2D 2D2D 7402          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000048E5  2020 2020 
000048E9  2D2D 2D2D 
000048ED  2D2D 2D   
000048F0  2D2D 2D2D 7403          dc.b      45,45,45,45,0
000048F4  00        
                    7404   @m68kde~1_63:
000048F6  0D0A 4E6F 7405          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000048FA  2042 7265 
000048FE  616B 506F 
00004902  69        
00004903  6E74 7320 7406          dc.b      110,116,115,32,83,101,116,0
00004907  5365 7400 
                    7407   @m68kde~1_64:
0000490C  0D0A 2533 7408          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004910  6420 2020 
00004914  2020 2425 
00004918  3038 78   
0000491B  00        7409          dc.b      0
                    7410   @m68kde~1_65:
0000491C  0D0A 4E75 7411          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004920  6D20 2020 
00004924  2020 4164 
00004928  6472      
0000492A  6573 7300 7412          dc.b      101,115,115,0
                    7413   @m68kde~1_66:
0000492E  0D0A 2D2D 7414          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004932  2D20 2020 
00004936  2020 2D2D 
0000493A  2D2D 2D   
0000493D  2D2D 2D2D 7415          dc.b      45,45,45,45,0
00004941  00        
                    7416   @m68kde~1_67:
00004942  0D0A 4E6F 7417          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004946  2057 6174 
0000494A  6368 506F 
0000494E  69        
0000494F  6E74 7320 7418          dc.b      110,116,115,32,83,101,116,0
00004953  5365 7400 
                    7419   @m68kde~1_68:
00004958  0D0A 456E 7420          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000495C  7465 7220 
00004960  4272 6561 
00004964  6B        
00004965  2050 6F69 7421          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004969  6E74 204E 
0000496D  756D 6265 
00004971  72        
00004972  3A20 00   7422          dc.b      58,32,0
                    7423   @m68kde~1_69:
00004976  0D0A 496C 7424          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
0000497A  6C65 6761 
0000497E  6C20 5261 
00004982  6E        
00004983  6765 203A 7425          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004987  2055 7365 
0000498B  2030 202D 
0000498F  2037      
00004991  00        7426          dc.b      0
                    7427   @m68kde~1_70:
00004992  0D0A 4272 7428          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004996  6561 6B20 
0000499A  506F 696E 
0000499E  74        
0000499F  2043 6C65 7429          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000049A3  6172 6564 
000049A7  2E2E 2E2E 
000049AB  2E        
000049AC  0D0A 00   7430          dc.b      13,10,0
                    7431   @m68kde~1_71:
000049B0  0D0A 4272 7432          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000049B4  6561 6B20 
000049B8  506F 696E 
000049BC  74        
000049BD  2077 6173 7433          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000049C1  6E27 7420 
000049C5  5365 742E 
000049C9  2E        
000049CA  2E2E 2E00 7434          dc.b      46,46,46,0
                    7435   @m68kde~1_72:
000049CE  0D0A 456E 7436          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000049D2  7465 7220 
000049D6  5761 7463 
000049DA  68        
000049DB  2050 6F69 7437          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000049DF  6E74 204E 
000049E3  756D 6265 
000049E7  72        
000049E8  3A20 00   7438          dc.b      58,32,0
                    7439   @m68kde~1_73:
000049EC  0D0A 5761 7440          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000049F0  7463 6820 
000049F4  506F 696E 
000049F8  74        
000049F9  2043 6C65 7441          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000049FD  6172 6564 
00004A01  2E2E 2E2E 
00004A05  2E        
00004A06  0D0A 00   7442          dc.b      13,10,0
                    7443   @m68kde~1_74:
00004A0A  0D0A 5761 7444          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004A0E  7463 6820 
00004A12  506F 696E 
00004A16  74        
00004A17  2057 6173 7445          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004A1B  206E 6F74 
00004A1F  2053 6574 
00004A23  2E        
00004A24  2E2E 2E2E 7446          dc.b      46,46,46,46,0
00004A28  00        
                    7447   @m68kde~1_75:
00004A2A  0D0A 4E6F 7448          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004A2E  2046 5245 
00004A32  4520 4272 
00004A36  6561      
00004A38  6B20 506F 7449          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004A3C  696E 7473 
00004A40  2E2E 2E2E 
00004A44  2E        
00004A45  00        7450          dc.b      0
                    7451   @m68kde~1_76:
00004A46  0D0A 4272 7452          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004A4A  6561 6B20 
00004A4E  506F 696E 
00004A52  74        
00004A53  2041 6464 7453          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004A57  7265 7373 
00004A5B  3A20 00   
                    7454   @m68kde~1_77:
00004A5E  0D0A 4572 7455          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004A62  726F 7220 
00004A66  3A20 4272 
00004A6A  65        
00004A6B  616B 2050 7456          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004A6F  6F69 6E74 
00004A73  7320 4341 
00004A77  4E        
00004A78  4E4F 5420 7457          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004A7C  6265 2073 
00004A80  6574 2061 
00004A84  74        
00004A85  204F 4444 7458          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004A89  2061 6464 
00004A8D  7265 7373 
00004A91  65        
00004A92  7300      7459          dc.b      115,0
                    7460   @m68kde~1_78:
00004A94  0D0A 4572 7461          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004A98  726F 7220 
00004A9C  3A20 4272 
00004AA0  65        
00004AA1  616B 2050 7462          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004AA5  6F69 6E74 
00004AA9  7320 4341 
00004AAD  4E        
00004AAE  4E4F 5420 7463          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004AB2  6265 2073 
00004AB6  6574 2066 
00004ABA  6F        
00004ABB  7220 524F 7464          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004ABF  4D20 696E 
00004AC3  2052 616E 
00004AC7  67        
00004AC8  6520 3A20 7465          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004ACC  5B24 302D 
00004AD0  2430 3030 
00004AD4  3037 46   
00004AD7  4646 5D00 7466          dc.b      70,70,93,0
                    7467   @m68kde~1_79:
00004ADC  0D0A 4572 7468          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004AE0  726F 723A 
00004AE4  2042 7265 
00004AE8  61        
00004AE9  6B20 506F 7469          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004AED  696E 7420 
00004AF1  416C 7265 
00004AF5  6164 7920 7470          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004AF9  4578 6973 
00004AFD  7473 2061 
00004B01  74        
00004B02  2041 6464 7471          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004B06  7265 7373 
00004B0A  203A 2025 
00004B0E  30        
00004B0F  3878 0D0A 7472          dc.b      56,120,13,10,0
00004B13  00        
                    7473   @m68kde~1_80:
00004B14  0D0A 4272 7474          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004B18  6561 6B20 
00004B1C  506F 696E 
00004B20  74        
00004B21  2053 6574 7475          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004B25  2061 7420 
00004B29  4164 6472 
00004B2D  65        
00004B2E  7373 3A20 7476          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004B32  5B24 2530 
00004B36  3878 5D00 
                    7477   @m68kde~1_81:
00004B3A  0D0A 4E6F 7478          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004B3E  2046 5245 
00004B42  4520 5761 
00004B46  7463      
00004B48  6820 506F 7479          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004B4C  696E 7473 
00004B50  2E2E 2E2E 
00004B54  2E        
00004B55  00        7480          dc.b      0
                    7481   @m68kde~1_82:
00004B56  0D0A 5761 7482          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004B5A  7463 6820 
00004B5E  506F 696E 
00004B62  74        
00004B63  2041 6464 7483          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004B67  7265 7373 
00004B6B  3A20 00   
                    7484   @m68kde~1_83:
00004B6E  0D0A 4572 7485          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004B72  726F 723A 
00004B76  2057 6174 
00004B7A  63        
00004B7B  6820 506F 7486          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004B7F  696E 7420 
00004B83  416C 7265 
00004B87  6164 7920 7487          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004B8B  5365 7420 
00004B8F  6174 2041 
00004B93  64        
00004B94  6472 6573 7488          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004B98  7320 3A20 
00004B9C  2530 3878 
00004BA0  0D        
00004BA1  0A00      7489          dc.b      10,0
                    7490   @m68kde~1_84:
00004BA4  0D0A 5761 7491          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004BA8  7463 6820 
00004BAC  506F 696E 
00004BB0  74        
00004BB1  2053 6574 7492          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004BB5  2061 7420 
00004BB9  4164 6472 
00004BBD  65        
00004BBE  7373 3A20 7493          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004BC2  5B24 2530 
00004BC6  3878 5D00 
                    7494   @m68kde~1_85:
00004BCA  0D0A 0D0A 7495          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004BCE  0D0A 0D0A 
00004BD2  4042 5245 
00004BD6  414B 50   
00004BD9  4F49 4E54 7496          dc.b      79,73,78,84,0
00004BDD  00        
                    7497   @m68kde~1_86:
00004BDE  0D0A 5369 7498          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004BE2  6E67 6C65 
00004BE6  2053 7465 
00004BEA  70        
00004BEB  203A 205B 7499          dc.b      32,58,32,91,79,78,93,0
00004BEF  4F4E 5D00 
                    7500   @m68kde~1_87:
00004BF4  0D0A 4272 7501          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004BF8  6561 6B50 
00004BFC  6F69 6E74 
00004C00  73        
00004C01  203A 205B 7502          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004C05  456E 6162 
00004C09  6C65 645D 
00004C0D  00        
                    7503   @m68kde~1_88:
00004C0E  0D0A 5072 7504          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004C12  6573 7320 
00004C16  3C45 5343 
00004C1A  3E20      
00004C1C  746F 2052 7505          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004C20  6573 756D 
00004C24  6520 5573 
00004C28  6572 2050 7506          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004C2C  726F 6772 
00004C30  616D 0D0A 
00004C34  00        
                    7507   @m68kde~1_89:
00004C36  0D0A 556E 7508          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004C3A  6B6E 6F77 
00004C3E  6E20 436F 
00004C42  6D        
00004C43  6D61 6E64 7509          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004C47  2E2E 2E2E 
00004C4B  2E0D 0A00 
                    7510   @m68kde~1_90:
00004C50  0D0A 5072 7511          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004C54  6F67 7261 
00004C58  6D20 456E 
00004C5C  64        
00004C5D  6564 2028 7512          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004C61  5452 4150 
00004C65  2023 3135 
00004C69  292E      
00004C6B  2E2E 2E00 7513          dc.b      46,46,46,0
                    7514   @m68kde~1_91:
00004C70  0D0A 4B69 7515          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004C74  6C6C 2041 
00004C78  6C6C 2042 
00004C7C  72        
00004C7D  6561 6B20 7516          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004C81  506F 696E 
00004C85  7473 2E2E 
00004C89  2E        
00004C8A  2879 2F6E 7517          dc.b      40,121,47,110,41,63,0
00004C8E  293F 00   
                    7518   @m68kde~1_92:
00004C92  0D0A 4B69 7519          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004C96  6C6C 2041 
00004C9A  6C6C 2057 
00004C9E  61        
00004C9F  7463 6820 7520          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004CA3  506F 696E 
00004CA7  7473 2E2E 
00004CAB  2E        
00004CAC  2879 2F6E 7521          dc.b      40,121,47,110,41,63,0
00004CB0  293F 00   
                    7522   @m68kde~1_93:
00004CB4  0D0A 2D2D 7523          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004CB8  2D2D 2D2D 
00004CBC  2D2D 2D2D 
00004CC0  2D2D 2D   
00004CC3  2D2D 2D2D 7524          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004CC7  2D2D 2D2D 
00004CCB  2D2D 2D2D 
00004CCF  2D2D 2D   
00004CD2  2D2D 2D2D 7525          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004CD6  2D2D 2D2D 
00004CDA  2D2D 2D2D 
00004CDE  2D2D 2D   
00004CE1  2D2D 2D2D 7526          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004CE5  2D2D 2D2D 
00004CE9  2D2D 2D2D 
00004CED  2D2D 2D   
00004CF0  2D2D 2D2D 7527          dc.b      45,45,45,45,45,45,0
00004CF4  2D2D 00   
                    7528   @m68kde~1_94:
00004CF8  0D0A 2020 7529          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004CFC  4465 6275 
00004D00  6767 6572 
00004D04  20        
00004D05  436F 6D6D 7530          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004D09  616E 6420 
00004D0D  5375 6D6D 
00004D11  6172 7900 7531          dc.b      97,114,121,0
                    7532   @m68kde~1_95:
00004D16  0D0A 2020 7533          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004D1A  2E28 7265 
00004D1E  6729 2020 
00004D22  2020      
00004D24  2020 202D 7534          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004D28  2043 6861 
00004D2C  6E67 6520 
00004D30  5265      
00004D32  6769 7374 7535          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004D36  6572 733A 
00004D3A  2065 2E67 
00004D3E  2041 302D 7536          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004D42  4137 2C44 
00004D46  302D 4437 
00004D4A  2C50 43   
00004D4D  2C53 5350 7537          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004D51  2C55 5350 
00004D55  2C53 5200 
                    7538   @m68kde~1_96:
00004D5A  0D0A 2020 7539          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004D5E  4244 2F42 
00004D62  532F 4243 
00004D66  2F42 4B   
00004D69  2020 2D20 7540          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004D6D  4272 6561 
00004D71  6B20 506F 
00004D75  69        
00004D76  6E74 3A20 7541          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004D7A  4469 7370 
00004D7E  6C61 792F 
00004D82  53        
00004D83  6574 2F43 7542          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004D87  6C65 6172 
00004D8B  2F4B 696C 
00004D8F  6C        
00004D90  00        7543          dc.b      0
                    7544   @m68kde~1_97:
00004D92  0D0A 2020 7545          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004D96  4320 2020 
00004D9A  2020 2020 
00004D9E  2020 20   
00004DA1  2020 2D20 7546          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004DA5  436F 7079 
00004DA9  2050 726F 
00004DAD  67        
00004DAE  7261 6D20 7547          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004DB2  6672 6F6D 
00004DB6  2046 6C61 
00004DBA  73        
00004DBB  6820 746F 7548          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004DBF  204D 6169 
00004DC3  6E20 4D65 
00004DC7  6D        
00004DC8  6F72 7900 7549          dc.b      111,114,121,0
                    7550   @m68kde~1_98:
00004DCC  0D0A 2020 7551          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004DD0  4420 2020 
00004DD4  2020 2020 
00004DD8  2020 20   
00004DDB  2020 2D20 7552          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004DDF  4475 6D70 
00004DE3  204D 656D 
00004DE7  6F        
00004DE8  7279 2043 7553          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004DEC  6F6E 7465 
00004DF0  6E74 7320 
00004DF4  746F 2053 7554          dc.b      116,111,32,83,99,114,101,101,110,0
00004DF8  6372 6565 
00004DFC  6E00      
                    7555   @m68kde~1_99:
00004DFE  0D0A 2020 7556          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004E02  4520 2020 
00004E06  2020 2020 
00004E0A  2020 20   
00004E0D  2020 2D20 7557          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004E11  456E 7465 
00004E15  7220 5374 
00004E19  72        
00004E1A  696E 6720 7558          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004E1E  696E 746F 
00004E22  204D 656D 
00004E26  6F72 7900 7559          dc.b      111,114,121,0
                    7560   @m68kde~1_100:
00004E2A  0D0A 2020 7561          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004E2E  4620 2020 
00004E32  2020 2020 
00004E36  2020 20   
00004E39  2020 2D20 7562          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004E3D  4669 6C6C 
00004E41  204D 656D 
00004E45  6F        
00004E46  7279 2077 7563          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004E4A  6974 6820 
00004E4E  4461 7461 
00004E52  00        
                    7564   @m68kde~1_101:
00004E54  0D0A 2020 7565          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004E58  4720 2020 
00004E5C  2020 2020 
00004E60  2020 20   
00004E63  2020 2D20 7566          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004E67  476F 2050 
00004E6B  726F 6772 
00004E6F  61        
00004E70  6D20 5374 7567          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004E74  6172 7469 
00004E78  6E67 2061 
00004E7C  74        
00004E7D  2041 6464 7568          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004E81  7265 7373 
00004E85  3A20 2425 
00004E89  30        
00004E8A  3858 00   7569          dc.b      56,88,0
                    7570   @m68kde~1_102:
00004E8E  0D0A 2020 7571          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004E92  4C20 2020 
00004E96  2020 2020 
00004E9A  2020 20   
00004E9D  2020 2D20 7572          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004EA1  4C6F 6164 
00004EA5  2050 726F 
00004EA9  67        
00004EAA  7261 6D20 7573          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004EAE  282E 4845 
00004EB2  5820 6669 
00004EB6  6C        
00004EB7  6529 2066 7574          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004EBB  726F 6D20 
00004EBF  4C61 7074 
00004EC3  6F        
00004EC4  7000      7575          dc.b      112,0
                    7576   @m68kde~1_103:
00004EC6  0D0A 2020 7577          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004ECA  4D20 2020 
00004ECE  2020 2020 
00004ED2  2020 20   
00004ED5  2020 2D20 7578          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004ED9  4D65 6D6F 
00004EDD  7279 2045 
00004EE1  78        
00004EE2  616D 696E 7579          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004EE6  6520 616E 
00004EEA  6420 4368 
00004EEE  61        
00004EEF  6E67 6500 7580          dc.b      110,103,101,0
                    7581   @m68kde~1_104:
00004EF4  0D0A 2020 7582          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004EF8  5020 2020 
00004EFC  2020 2020 
00004F00  2020 20   
00004F03  2020 2D20 7583          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004F07  5072 6F67 
00004F0B  7261 6D20 
00004F0F  46        
00004F10  6C61 7368 7584          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004F14  204D 656D 
00004F18  6F72 7920 
00004F1C  7769 7468 7585          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004F20  2055 7365 
00004F24  7220 5072 
00004F28  6F67 7261 7586          dc.b      111,103,114,97,109,0
00004F2C  6D00      
                    7587   @m68kde~1_105:
00004F2E  0D0A 2020 7588          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004F32  5220 2020 
00004F36  2020 2020 
00004F3A  2020 20   
00004F3D  2020 2D20 7589          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004F41  4469 7370 
00004F45  6C61 7920 
00004F49  36        
00004F4A  3830 3030 7590          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004F4E  2052 6567 
00004F52  6973 7465 
00004F56  72        
00004F57  7300      7591          dc.b      115,0
                    7592   @m68kde~1_106:
00004F5A  0D0A 2020 7593          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004F5E  5320 2020 
00004F62  2020 2020 
00004F66  2020 20   
00004F69  2020 2D20 7594          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004F6D  546F 6767 
00004F71  6C65 204F 
00004F75  4E        
00004F76  2F4F 4646 7595          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004F7A  2053 696E 
00004F7E  676C 6520 
00004F82  53        
00004F83  7465 7020 7596          dc.b      116,101,112,32,77,111,100,101,0
00004F87  4D6F 6465 
00004F8B  00        
                    7597   @m68kde~1_107:
00004F8C  0D0A 2020 7598          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004F90  544D 2020 
00004F94  2020 2020 
00004F98  2020 20   
00004F9B  2020 2D20 7599          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004F9F  5465 7374 
00004FA3  204D 656D 
00004FA7  6F        
00004FA8  7279 00   7600          dc.b      114,121,0
                    7601   @m68kde~1_108:
00004FAC  0D0A 2020 7602          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004FB0  5453 2020 
00004FB4  2020 2020 
00004FB8  2020 20   
00004FBB  2020 2D20 7603          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004FBF  5465 7374 
00004FC3  2053 7769 
00004FC7  74        
00004FC8  6368 6573 7604          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004FCC  3A20 5357 
00004FD0  372D 3000 
                    7605   @m68kde~1_109:
00004FD4  0D0A 2020 7606          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004FD8  5444 2020 
00004FDC  2020 2020 
00004FE0  2020 20   
00004FE3  2020 2D20 7607          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004FE7  5465 7374 
00004FEB  2044 6973 
00004FEF  70        
00004FF0  6C61 7973 7608          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004FF4  3A20 4C45 
00004FF8  4473 2061 
00004FFC  6E        
00004FFD  6420 372D 7609          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00005001  5365 676D 
00005005  656E 7400 
                    7610   @m68kde~1_110:
0000500A  0D0A 2020 7611          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
0000500E  5744 2F57 
00005012  532F 5743 
00005016  2F57 4B   
00005019  2020 2D20 7612          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
0000501D  5761 7463 
00005021  6820 506F 
00005025  696E      
00005027  743A 2044 7613          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
0000502B  6973 706C 
0000502F  6179 2F53 
00005033  65        
00005034  742F 436C 7614          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00005038  6561 722F 
0000503C  4B69 6C6C 
00005040  00        
                    7615   @m68kde~1_111:
00005042  0D0A 2300 7616          dc.b      13,10,35,0
                    7617   @m68kde~1_112:
00005046  0D0A 5072 7618          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
0000504A  6F67 7261 
0000504E  6D20 5275 
00005052  6E        
00005053  6E69 6E67 7619          dc.b      110,105,110,103,46,46,46,46,46,0
00005057  2E2E 2E2E 
0000505B  2E00      
                    7620   @m68kde~1_113:
0000505E  0D0A 5072 7621          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00005062  6573 7320 
00005066  3C52 4553 
0000506A  4554      
0000506C  3E20 6275 7622          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00005070  7474 6F6E 
00005074  203C 4B65 
00005078  79        
00005079  303E 206F 7623          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
0000507D  6E20 4445 
00005081  3120 746F 
00005085  2073      
00005087  746F 7000 7624          dc.b      116,111,112,0
                    7625   @m68kde~1_114:
0000508C  0D0A 4572 7626          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00005090  726F 723A 
00005094  2050 7265 
00005098  73        
00005099  7320 2747 7627          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
0000509D  2720 6669 
000050A1  7273 7420 
000050A5  74        
000050A6  6F20 7374 7628          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000050AA  6172 7420 
000050AE  7072 6F67 
000050B2  7261 6D00 7629          dc.b      114,97,109,0
                    7630   @m68kde~1_115:
000050B6  0D0A 5369 7631          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000050BA  6E67 6C65 
000050BE  2053 7465 
000050C2  70        
000050C3  2020 3A5B 7632          dc.b      32,32,58,91,79,78,93,0
000050C7  4F4E 5D00 
                    7633   @m68kde~1_116:
000050CC  0D0A 5072 7634          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
000050D0  6573 7320 
000050D4  2747 2720 
000050D8  74        
000050D9  6F20 5472 7635          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
000050DD  6163 6520 
000050E1  5072 6F67 
000050E5  72        
000050E6  616D 2066 7636          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
000050EA  726F 6D20 
000050EE  6164 6472 
000050F2  6573 7320 7637          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000050F6  2425 582E 
000050FA  2E2E 2E2E 
000050FE  00        
                    7638   @m68kde~1_117:
00005100  0D0A 5075 7639          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00005104  7368 203C 
00005108  5245 5345 
0000510C  5420      
0000510E  4275 7474 7640          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00005112  6F6E 3E20 
00005116  746F 2053 
0000511A  74        
0000511B  6F70 2E2E 7641          dc.b      111,112,46,46,46,46,46,0
0000511F  2E2E 2E00 
                    7642   @m68kde~1_118:
00005124  0D0A 5369 7643          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005128  6E67 6C65 
0000512C  2053 7465 
00005130  70        
00005131  203A 205B 7644          dc.b      32,58,32,91,79,70,70,93,0
00005135  4F46 465D 
00005139  00        
                    7645   @m68kde~1_119:
0000513A  0D0A 4272 7646          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000513E  6561 6B20 
00005142  506F 696E 
00005146  74        
00005147  7320 3A5B 7647          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
0000514B  456E 6162 
0000514F  6C65 645D 
00005153  00        
                    7648   @m68kde~1_120:
00005154  0D0A 5072 7649          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005158  6573 7320 
0000515C  3C45 5343 
00005160  3E20      
00005162  746F 2052 7650          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005166  6573 756D 
0000516A  6520 5573 
0000516E  6572 2050 7651          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00005172  726F 6772 
00005176  616D 2E2E 
0000517A  2E        
0000517B  2E2E 00   7652          dc.b      46,46,0
                    7653   @m68kde~1_121:
0000517E  0D0A 5369 7654          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005182  6E67 6C65 
00005186  2053 7465 
0000518A  70        
0000518B  2020 3A5B 7655          dc.b      32,32,58,91,79,70,70,93,0
0000518F  4F46 465D 
00005193  00        
                    7656   @m68kde~1_122:
00005194  0D0A 0D0A 7657          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005198  5072 6F67 
0000519C  7261 6D20 
000051A0  41        
000051A1  424F 5254 7658          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000051A5  2021 2121 
000051A9  2121 210D 
000051AD  0A00      
                    7659   @m68kde~1_123:
000051B0  2573 0D0A 7660          dc.b      37,115,13,10,0
000051B4  00        
                    7661   @m68kde~1_124:
000051B6  0D0A 0D0A 7662          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000051BA  5072 6F67 
000051BE  7261 6D20 
000051C2  41        
000051C3  424F 5254 7663          dc.b      66,79,82,84,32,33,33,33,33,33,0
000051C7  2021 2121 
000051CB  2121 00   
                    7664   @m68kde~1_125:
000051CE  0D0A 556E 7665          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
000051D2  6861 6E64 
000051D6  6C65 6420 
000051DA  49        
000051DB  6E74 6572 7666          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
000051DF  7275 7074 
000051E3  3A20 4952 
000051E7  5125 6420 7667          dc.b      81,37,100,32,33,33,33,33,33,0
000051EB  2121 2121 
000051EF  2100      
                    7668   @m68kde~1_126:
000051F2  4144 4452 7669          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000051F6  4553 5320 
000051FA  4552 524F 
000051FE  523A 20   
00005201  3136 206F 7670          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005205  7220 3332 
00005209  2042 6974 
0000520D  2054      
0000520F  7261 6E73 7671          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00005213  6665 7220 
00005217  746F 2F66 
0000521B  726F 6D20 7672          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
0000521F  616E 204F 
00005223  4444 2041 
00005227  64        
00005228  6472 6573 7673          dc.b      100,114,101,115,115,46,46,46,46,0
0000522C  732E 2E2E 
00005230  2E00      
                    7674   @m68kde~1_127:
00005232  556E 6861 7675          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00005236  6E64 6C65 
0000523A  6420 5472 
0000523E  6170 2021 7676          dc.b      97,112,32,33,33,33,33,33,0
00005242  2121 2121 
00005246  00        
                    7677   @m68kde~1_128:
00005248  4255 5320 7678          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000524C  4572 726F 
00005250  7221 00   
                    7679   @m68kde~1_129:
00005254  4144 4452 7680          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00005258  4553 5320 
0000525C  4572 726F 
00005260  7221      
00005262  00        7681          dc.b      0
                    7682   @m68kde~1_130:
00005264  494C 4C45 7683          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00005268  4741 4C20 
0000526C  494E 5354 
00005270  5255 43   
00005273  5449 4F4E 7684          dc.b      84,73,79,78,0
00005277  00        
                    7685   @m68kde~1_131:
00005278  4449 5649 7686          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
0000527C  4445 2042 
00005280  5920 5A45 
00005284  524F 00   
                    7687   @m68kde~1_132:
00005288  2743 484B 7688          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
0000528C  2720 494E 
00005290  5354 5255 
00005294  4354 49   
00005297  4F4E 00   7689          dc.b      79,78,0
                    7690   @m68kde~1_133:
0000529A  5452 4150 7691          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
0000529E  5620 494E 
000052A2  5354 5255 
000052A6  4354 49   
000052A9  4F4E 00   7692          dc.b      79,78,0
                    7693   @m68kde~1_134:
000052AC  5052 4956 7694          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000052B0  494C 4547 
000052B4  4520 5649 
000052B8  4F4C 41   
000052BB  5449 4F4E 7695          dc.b      84,73,79,78,0
000052BF  00        
                    7696   @m68kde~1_135:
000052C0  554E 494E 7697          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
000052C4  4954 4941 
000052C8  4C49 5345 
000052CC  4420 49   
000052CF  5251 00   7698          dc.b      82,81,0
                    7699   @m68kde~1_136:
000052D2  5350 5552 7700          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
000052D6  494F 5553 
000052DA  2049 5251 
000052DE  00        
                    7701   @m68kde~1_137:
000052E0  0D0A 5374 7702          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000052E4  6172 7420 
000052E8  4164 6472 
000052EC  65        
000052ED  7373 2069 7703          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000052F1  6E20 4D65 
000052F5  6D6F 7279 
000052F9  3A20 00   7704          dc.b      58,32,0
                    7705   @m68kde~1_138:
000052FC  0D0A 456E 7706          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00005300  7465 7220 
00005304  5374 7269 
00005308  6E        
00005309  6720 2845 7707          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
0000530D  5343 2074 
00005311  6F20 656E 
00005315  64        
00005316  2920 3A00 7708          dc.b      41,32,58,0
                    7709   @m68kde~1_139:
0000531A  0A45 6E74 7710          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
0000531E  6572 2077 
00005322  6861 7420 
00005326  73        
00005327  697A 6520 7711          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
0000532B  6F66 206D 
0000532F  656D 6F72 
00005333  7920 796F 7712          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
00005337  7520 7761 
0000533B  6E74 2074 
0000533F  6F20 7265 7713          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00005343  6164 2F77 
00005347  7269 7465 
0000534B  0A20 4279 7714          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
0000534F  7465 203D 
00005353  2030 0A20 
00005357  576F      
00005359  7264 203D 7715          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
0000535D  2031 0A20 
00005361  4C6F 6E67 
00005365  20        
00005366  576F 7264 7716          dc.b      87,111,114,100,32,61,32,50,10,0
0000536A  203D 2032 
0000536E  0A00      
                    7717   @m68kde~1_140:
00005370  0A00      7718          dc.b      10,0
                    7719   @m68kde~1_141:
00005372  0A45 6E74 7720          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005376  6572 2077 
0000537A  6869 6368 
0000537E  2064 6174 7721          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005382  6120 7061 
00005386  7474 6572 
0000538A  6E        
0000538B  2079 6F75 7722          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000538F  2077 616E 
00005393  7420 746F 
00005397  2077 7269 7723          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000539B  7465 2069 
0000539F  6E74 6F20 
000053A3  6D65 6D6F 7724          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
000053A7  7279 0A20 
000053AB  3078 3030 
000053AF  20        
000053B0  3D20 300A 7725          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
000053B4  2030 7842 
000053B8  3220 3D20 
000053BC  310A 20   
000053BF  3078 4333 7726          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
000053C3  203D 2032 
000053C7  0A20 3078 
000053CB  4434      
000053CD  203D 2033 7727          dc.b      32,61,32,51,10,0
000053D1  0A00      
                    7728   @m68kde~1_142:
000053D4  0A45 6E74 7729          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000053D8  6572 2077 
000053DC  6869 6368 
000053E0  2064 6174 7730          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000053E4  6120 7061 
000053E8  7474 6572 
000053EC  6E        
000053ED  2079 6F75 7731          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000053F1  2077 616E 
000053F5  7420 746F 
000053F9  2077 7269 7732          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000053FD  7465 2069 
00005401  6E74 6F20 
00005405  6D65 6D6F 7733          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005409  7279 0A20 
0000540D  3078 3030 
00005411  30        
00005412  3020 3D20 7734          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
00005416  300A 2030 
0000541A  7831 3233 
0000541E  3420 3D   
00005421  2031 0A20 7735          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
00005425  3078 4131 
00005429  4232 203D 
0000542D  2032 0A   
00005430  2030 7843 7736          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
00005434  3344 3420 
00005438  3D20 330A 
0000543C  00        
                    7737   @m68kde~1_143:
0000543E  0A45 6E74 7738          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005442  6572 2077 
00005446  6869 6368 
0000544A  2064 6174 7739          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
0000544E  6120 7061 
00005452  7474 6572 
00005456  6E        
00005457  2079 6F75 7740          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000545B  2077 616E 
0000545F  7420 746F 
00005463  2077 7269 7741          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005467  7465 2069 
0000546B  6E74 6F20 
0000546F  6D65 6D6F 7742          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005473  7279 0A20 
00005477  3078 3030 
0000547B  30        
0000547C  305F 3030 7743          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
00005480  3030 203D 
00005484  2030 0A20 
00005488  3078 41   
0000548B  4142 425F 7744          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
0000548F  4343 4444 
00005493  203D 2031 
00005497  0A20 30   
0000549A  7831 3132 7745          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
0000549E  325F 3333 
000054A2  3434 203D 
000054A6  2032 0A   
000054A9  2030 7837 7746          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
000054AD  3635 345F 
000054B1  3332 3130 
000054B5  203D 20   
000054B8  330A 00   7747          dc.b      51,10,0
                    7748   @m68kde~1_144:
000054BC  0A50 726F 7749          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
000054C0  7669 6465 
000054C4  2053 7461 
000054C8  72        
000054C9  7420 4164 7750          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
000054CD  6472 6573 
000054D1  7320 696E 
000054D5  2068 6578 7751          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
000054D9  2028 646F 
000054DD  206E 6F74 
000054E1  2075 7365 7752          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
000054E5  2030 7820 
000054E9  7072 6566 
000054ED  6978 290A 7753          dc.b      105,120,41,10,48,120,0
000054F1  3078 00   
                    7754   @m68kde~1_145:
000054F4  0A50 726F 7755          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
000054F8  7669 6465 
000054FC  2045 6E64 
00005500  2041 6464 7756          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
00005504  7265 7373 
00005508  2069 6E20 
0000550C  6865 7820 7757          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
00005510  2864 6F20 
00005514  6E6F 7420 
00005518  7573 6520 7758          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
0000551C  3078 2070 
00005520  7265 6669 
00005524  7829 0A30 7759          dc.b      120,41,10,48,120,0
00005528  7800      
                    7760   @m68kde~1_146:
0000552A  0A53 7461 7761          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
0000552E  7274 2041 
00005532  6464 7265 
00005536  73        
00005537  7320 3078 7762          dc.b      115,32,48,120,37,48,56,120,10,0
0000553B  2530 3878 
0000553F  0A00      
                    7763   @m68kde~1_147:
00005542  0A45 6E64 7764          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
00005546  2041 6464 
0000554A  7265 7373 
0000554E  3A20 3078 7765          dc.b      58,32,48,120,37,48,56,120,10,0
00005552  2530 3878 
00005556  0A00      
                    7766   @m68kde~1_148:
00005558  4552 524F 7767          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
0000555C  522E 2E2E 
00005560  2041 6464 
00005564  7265      
00005566  7373 2030 7768          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
0000556A  7825 7820 
0000556E  6973 2062 
00005572  65        
00005573  796F 6E64 7769          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005577  2074 6865 
0000557B  206D 656D 
0000557F  6F72 7920 7770          dc.b      111,114,121,32,114,97,110,103,101,10,0
00005583  7261 6E67 
00005587  650A 00   
                    7771   @m68kde~1_149:
0000558A  4552 524F 7772          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
0000558E  522E 2E2E 
00005592  2056 616C 
00005596  7565      
00005598  2077 7269 7773          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
0000559C  7474 656E 
000055A0  2074 6F20 
000055A4  6164 6472 7774          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
000055A8  6573 7320 
000055AC  3078 2578 
000055B0  203D 3D20 7775          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
000055B4  3078 2578 
000055B8  2E20 5661 
000055BC  6C75      
000055BE  6520 4578 7776          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
000055C2  7065 6374 
000055C6  6564 3A20 
000055CA  30        
000055CB  7825 780A 7777          dc.b      120,37,120,10,0
000055CF  00        
                    7778   @m68kde~1_150:
000055D0  4164 6472 7779          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000055D4  6573 733A 
000055D8  2030 7825 
000055DC  78        
000055DD  2056 616C 7780          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
000055E1  7565 3A20 
000055E5  3078 2530 
000055E9  3258      
000055EB  0A00      7781          dc.b      10,0
                    7782   @m68kde~1_151:
000055EE  4164 6472 7783          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000055F2  6573 733A 
000055F6  2030 7825 
000055FA  78        
000055FB  2056 616C 7784          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
000055FF  7565 3A20 
00005603  3078 2530 
00005607  3458      
00005609  0A00      7785          dc.b      10,0
                    7786   @m68kde~1_152:
0000560C  4164 6472 7787          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005610  6573 733A 
00005614  2030 7825 
00005618  78        
00005619  2056 616C 7788          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
0000561D  7565 3A20 
00005621  3078 2530 
00005625  3858      
00005627  0A00      7789          dc.b      10,0
                    7790   @m68kde~1_153:
0000562A  4445 312D 7791          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
0000562E  3638 6B20 
00005632  4275 6720 
00005636  5631      
00005638  2E37 3700 7792          dc.b      46,55,55,0
                    7793   @m68kde~1_154:
0000563C  436F 7079 7794          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00005640  7269 6768 
00005644  7420 2843 
00005648  2920 504A 7795          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
0000564C  2044 6176 
00005650  6965 7320 
00005654  3230      
00005656  3136 00   7796          dc.b      49,54,0
                    7797   @m68kde~1_155:
0000565A  0D0A 5275 7798          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
0000565E  6E6E 696E 
00005662  672E 2E2E 
00005666  2E        
00005667  2E00      7799          dc.b      46,0
                    7800   @m68kde~1_156:
0000566A  5275 6E6E 7801          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
0000566E  696E 672E 
00005672  2E2E 2E2E 
00005676  00        
                    7802   @m68kde~1_157:
00005678  4279 3A20 7803          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
0000567C  504A 2044 
00005680  6176 6965 
00005684  73        
00005685  00        7804          dc.b      0
                    7805   @m68kde~1_158:
00005686  0D0A 2573 7806          dc.b      13,10,37,115,0
0000568A  00        
                    7807   @m68kde~1_159:
0000568C  0A20 5374 7808          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
00005690  7564 656E 
00005694  7420 4E61 
00005698  6D        
00005699  6573 3A0A 7809          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
0000569D  205A 6163 
000056A1  6861 7269 
000056A5  61        
000056A6  6820 4A6F 7810          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
000056AA  7365 7068 
000056AE  3A20 3435 
000056B2  35        
000056B3  3030 3035 7811          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
000056B7  3520 0A20 
000056BB  556D 6169 
000056BF  7220      
000056C1  4D61 7A68 7812          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
000056C5  6172 3A20 
000056C9  3230 3333 
000056CD  3333      
000056CF  3038 0A00 7813          dc.b      48,56,10,0
                    7814          section   data
000056D4            7815                   align
          0000 56D4 7816   DataStart       equ       *
                    7817   
                    7818   *********************************************************************************************************
                    7819   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7820   * to ram as part of the CStart routine in this file
                    7821   *********************************************************************************************************
                    7822   
                    7823   @vsscanf_bufx:
000056D4  0B00 0546 7824          dc.l      @vsscanf_buf
                    7825   @vsscanf_1:
000056D8  0A00      7826          dc.b      10,0
                    7827   __ctype:
000056DA  0040 4040 7828          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
000056DE  4040 4040 
000056E2  4040 5050 
000056E6  5050 50   
000056E9  4040 4040 7829          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000056ED  4040 4040 
000056F1  4040 4040 
000056F5  4040 40   
000056F8  4040 40D0 7830          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000056FC  A0A0 A0A0 
00005700  A0A0 A0A0 
00005704  A0A0 A0A0 7831          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005708  A0A0 A08C 
0000570C  8C8C 8C   
0000570F  8C8C 8C8C 7832          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005713  8C8C A0A0 
00005717  A0A0 A0   
0000571A  A0A0 8A8A 7833          dc.b      160,160,138,138,138,138,138,138,130,130,130
0000571E  8A8A 8A8A 
00005722  8282 82   
00005725  8282 8282 7834          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005729  8282 8282 
0000572D  8282 82   
00005730  8282 8282 7835          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005734  8282 A0A0 
00005738  A0A0 A0   
0000573B  A089 8989 7836          dc.b      160,137,137,137,137,137,137,129,129,129,129
0000573F  8989 8981 
00005743  8181 81   
00005746  8181 8181 7837          dc.b      129,129,129,129,129,129,129,129,129,129,129
0000574A  8181 8181 
0000574E  8181 81   
00005751  8181 8181 7838          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005755  81A0 A0A0 
00005759  A040 0000 
0000575D  00        
0000575E  0000 0000 7839          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005762  0000 0000 
00005766  0000 0000 
0000576A  0000 0000 
0000576E  0000 0000 
00005772  0000      
00005774  0000 0000 7840          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005778  0000 0000 
0000577C  0000 0000 
00005780  0000 0000 
00005784  0000 0000 
00005788  0000      
0000578A  0000 0000 7841          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000578E  0000 0000 
00005792  0000 0000 
00005796  0000 0000 
0000579A  0000 0000 
0000579E  0000      
000057A0  0000 0000 7842          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000057A4  0000 0000 
000057A8  0000 0000 
000057AC  0000 0000 
000057B0  0000 0000 
000057B4  0000      
000057B6  0000 0000 7843          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000057BA  0000 0000 
000057BE  0000 0000 
000057C2  0000 0000 
000057C6  0000 0000 
000057CA  0000      
000057CC  0000 0000 7844          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000057D0  0000 0000 
000057D4  0000 0000 
000057D8  0000 00   
                    7845   @itoa_1:
000057DC  2D32 3134 7846          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000057E0  3734 3833 
000057E4  3634 3800 
                    7847          section   bss
000057E8            7848                   align
          0000 57E8 7849   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7850   
                    7851   *********************************************************************************************************
                    7852   * Section for Uninitialised Data held in ROM as constants
                    7853   *********************************************************************************************************
                    7854   
0B000000            7855                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 7856   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7857   
                    7858   
0B000000            7859   bss             org       bss
                    7860   
                    7861   *********************************************************************************************************
                    7862   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7863   * install the exception handler using the C function InstallExceptionHandler()
                    7864   *********************************************************************************************************
                    7865   
                    7866   
                    7867   
0B000000            7868   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7869   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7870   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7871   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7872   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7873   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7874   VCheck           ds.l    1      ditto
0B00001C            7875   VTrapV           ds.l    1      ditto
0B000020            7876   VPrivilege       ds.l    1      ditto
0B000024            7877   VTrace           ds.l    1
0B000028            7878   VLine1010emul    ds.l    1
0B00002C            7879   VLine1111emul    ds.l    1
0B000030            7880   VUnassigned1     ds.l    1
0B000034            7881   VUnassigned2     ds.l    1
0B000038            7882   VUnassigned3     ds.l    1
0B00003C            7883   VUninit_IRQ      ds.l    1
0B000040            7884   VUnassigned4     ds.l    1
0B000044            7885   VUnassigned5     ds.l    1
0B000048            7886   VUnassigned6     ds.l    1
0B00004C            7887   VUnassigned7     ds.l    1
0B000050            7888   VUnassigned8     ds.l    1
0B000054            7889   VUnassigned9     ds.l    1
0B000058            7890   VUnassigned10    ds.l    1
0B00005C            7891   VUnassigned11    ds.l    1
0B000060            7892   VSpuriousIRQ     ds.l    1
                    7893   
                    7894   * Interrupt handlers Vector 25-31
0B000064            7895   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7896   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7897   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7898   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7899   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7900   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7901   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7902   
                    7903   * Trap Handler vectors 32-47
0B000080            7904   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7905   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7906   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7907   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7908   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7909   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7910   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7911   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7912   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7913   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7914   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7915   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7916   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7917   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7918   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7919   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7920   
                    7921   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7922   
                    7923   ***********************************************************************************************************
                    7924   * Other Variables
                    7925   ***********************************************************************************************************
                    7926   *__DebugA5       ds.l    1
                    7927   *__UserA5        ds.l    1
                    7928   
                    7929   ***********************************************************************************************************
0B0000C0            7930   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7931   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7932   __heap:         ds.l    0       ; pointers for malloc functions
                    7933   
                    7934   *__himem:       ds.l    himem            ; highest memory location + 1
                    7935   *__stklen:      ds.l    stklen           ; default stack size
                    7936   
                    7937   *********************************************************************************************************
                    7938   * Section for Heap
                    7939   *********************************************************************************************************
                    7940   
                    7941   _i:
0B0000C4            7942          ds.b      4
                    7943   _x:
0B0000C8            7944          ds.b      4
                    7945   _y:
0B0000CC            7946          ds.b      4
                    7947   _z:
0B0000D0            7948          ds.b      4
                    7949   _PortA_Count:
0B0000D4            7950          ds.b      4
                    7951   _Trace:
0B0000D8            7952          ds.b      4
                    7953   _GoFlag:
0B0000DC            7954          ds.b      4
                    7955   _Echo:
0B0000E0            7956          ds.b      4
                    7957   _d0:
0B0000E4            7958          ds.b      4
                    7959   _d1:
0B0000E8            7960          ds.b      4
                    7961   _d2:
0B0000EC            7962          ds.b      4
                    7963   _d3:
0B0000F0            7964          ds.b      4
                    7965   _d4:
0B0000F4            7966          ds.b      4
                    7967   _d5:
0B0000F8            7968          ds.b      4
                    7969   _d6:
0B0000FC            7970          ds.b      4
                    7971   _d7:
0B000100            7972          ds.b      4
                    7973   _a0:
0B000104            7974          ds.b      4
                    7975   _a1:
0B000108            7976          ds.b      4
                    7977   _a2:
0B00010C            7978          ds.b      4
                    7979   _a3:
0B000110            7980          ds.b      4
                    7981   _a4:
0B000114            7982          ds.b      4
                    7983   _a5:
0B000118            7984          ds.b      4
                    7985   _a6:
0B00011C            7986          ds.b      4
                    7987   _PC:
0B000120            7988          ds.b      4
                    7989   _SSP:
0B000124            7990          ds.b      4
                    7991   _USP:
0B000128            7992          ds.b      4
                    7993   _SR:
0B00012C            7994          ds.b      2
                    7995   _BreakPointAddress:
0B00012E            7996          ds.b      32
                    7997   _BreakPointInstruction:
0B00014E            7998          ds.b      16
                    7999   _BreakPointSetOrCleared:
0B00015E            8000          ds.b      32
                    8001   _InstructionSize:
0B00017E            8002          ds.b      4
                    8003   _WatchPointAddress:
0B000182            8004          ds.b      32
                    8005   _WatchPointSetOrCleared:
0B0001A2            8006          ds.b      32
                    8007   _WatchPointString:
0B0001C2            8008          ds.b      800
                    8009   _TempString:
0B0004E2            8010          ds.b      100
                    8011   @vsscanf_buf:
0B000546            8012          ds.b      80
                    8013          section   heap
0B000596            8014                   align
          0B00 0596 8015   bssEnd          equ *                   end of storage space for unitialised variables
                    8016   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 8017   heap   equ       *
0B000596            8018                    align
          0000 0000

Assembly errors: 0
