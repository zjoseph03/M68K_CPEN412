680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 09 Apr 2025      Time: 17:58:28          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  3804      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2E8A      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\CAN.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     471   ; #include "DebugMonitor.h"
                     472   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     473   ; // #define StartOfExceptionVectorTable 0x08030000
                     474   ; #define StartOfExceptionVectorTable 0x0B000000
                     475   ; // use 0C000000 for dram or hex 08040000 for sram
                     476   ; //#define TopOfStack 0x08040000
                     477   ; #define TopOfStack 0x0C000000
                     478   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     479   ; unsigned int i, x, y, z, PortA_Count;
                     480   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     481   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     482   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     483   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     484   ; unsigned int PC, SSP, USP ;
                     485   ; unsigned short int SR;
                     486   ; // Breakpoint variables
                     487   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     488   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     489   ; unsigned int BreakPointSetOrCleared[8] ;
                     490   ; unsigned int InstructionSize ;
                     491   ; // watchpoint variables
                     492   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     493   ; unsigned int WatchPointSetOrCleared[8] ;
                     494   ; char WatchPointString[8][100] ;
                     495   ; char    TempString[100] ;
                     496   ; /************************************************************************************
                     497   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     498   ; ************************************************************************************/
                     499   ; void Wait1ms(void)
                     500   ; {
                     501   _Wait1ms:
00000932  2F02       502          move.l    D2,-(A7)
                     503   ; long int  i ;
                     504   ; for(i = 0; i < 1000; i ++)
00000934  4282       505          clr.l     D2
                     506   Wait1ms_1:
00000936  0C82 0000  507          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       508          bge.s     Wait1ms_3
0000093E  5282       509          addq.l    #1,D2
00000940  60F4       510          bra       Wait1ms_1
                     511   Wait1ms_3:
00000942  241F       512          move.l    (A7)+,D2
00000944  4E75       513          rts
                     514   ; ;
                     515   ; }
                     516   ; /************************************************************************************
                     517   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     518   ; **************************************************************************************/
                     519   ; void Wait3ms(void)
                     520   ; {
                     521   _Wait3ms:
00000946  2F02       522          move.l    D2,-(A7)
                     523   ; int i ;
                     524   ; for(i = 0; i < 3; i++)
00000948  4282       525          clr.l     D2
                     526   Wait3ms_1:
0000094A  0C82 0000  527          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       528          bge.s     Wait3ms_3
                     529   ; Wait1ms() ;
00000952  4EB8 0932  530          jsr       _Wait1ms
00000956  5282       531          addq.l    #1,D2
00000958  60F0       532          bra       Wait3ms_1
                     533   Wait3ms_3:
0000095A  241F       534          move.l    (A7)+,D2
0000095C  4E75       535          rts
                     536   ; }
                     537   ; /*********************************************************************************************
                     538   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     539   ; *********************************************************************************************/
                     540   ; void Init_LCD(void)
                     541   ; {
                     542   _Init_LCD:
                     543   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  544          move.b    #12,4194336
00000962  0040 0020 
                     545   ; Wait3ms() ;
00000966  4EB8 0946  546          jsr       _Wait3ms
                     547   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  548          move.b    #56,4194336
0000096E  0040 0020 
                     549   ; Wait3ms() ;
00000972  4EB8 0946  550          jsr       _Wait3ms
00000976  4E75       551          rts
                     552   ; }
                     553   ; /******************************************************************************
                     554   ; *subroutine to output a single character held in d1 to the LCD display
                     555   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     556   ; *current cursor position
                     557   ; *******************************************************************************/
                     558   ; void Outchar(int c)
                     559   ; {
                     560   _Outchar:
00000978  4E56 0000  561          link      A6,#0
                     562   ; LCDdata = (char)(c);
0000097C  202E 0008  563          move.l    8(A6),D0
00000980  13C0 0040  564          move.b    D0,4194338
00000984  0022      
                     565   ; Wait1ms() ;
00000986  4EB8 0932  566          jsr       _Wait1ms
0000098A  4E5E       567          unlk      A6
0000098C  4E75       568          rts
                     569   ; }
                     570   ; /**********************************************************************************
                     571   ; *subroutine to output a message at the current cursor position of the LCD display
                     572   ; ************************************************************************************/
                     573   ; void OutMess(char *theMessage)
                     574   ; {
                     575   _OutMess:
0000098E  4E56 FFFC  576          link      A6,#-4
                     577   ; char c ;
                     578   ; while((c = *theMessage++) != (char)(0))
                     579   OutMess_1:
00000992  206E 0008  580          move.l    8(A6),A0
00000996  52AE 0008  581          addq.l    #1,8(A6)
0000099A  1D50 FFFF  582          move.b    (A0),-1(A6)
0000099E  1010       583          move.b    (A0),D0
000009A0  6712       584          beq.s     OutMess_3
                     585   ; Outchar(c) ;
000009A2  122E FFFF  586          move.b    -1(A6),D1
000009A6  4881       587          ext.w     D1
000009A8  48C1       588          ext.l     D1
000009AA  2F01       589          move.l    D1,-(A7)
000009AC  4EB8 0978  590          jsr       _Outchar
000009B0  584F       591          addq.w    #4,A7
000009B2  60DE       592          bra       OutMess_1
                     593   OutMess_3:
000009B4  4E5E       594          unlk      A6
000009B6  4E75       595          rts
                     596   ; }
                     597   ; /******************************************************************************
                     598   ; *subroutine to clear the line by issuing 24 space characters
                     599   ; *******************************************************************************/
                     600   ; void Clearln(void)
                     601   ; {
                     602   _Clearln:
000009B8  2F02       603          move.l    D2,-(A7)
                     604   ; unsigned char i ;
                     605   ; for(i = 0; i < 24; i ++)
000009BA  4202       606          clr.b     D2
                     607   Clearln_1:
000009BC  0C02 0018  608          cmp.b     #24,D2
000009C0  640E       609          bhs.s     Clearln_3
                     610   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  611          pea       32
000009C6  4EB8 0978  612          jsr       _Outchar
000009CA  584F       613          addq.w    #4,A7
000009CC  5202       614          addq.b    #1,D2
000009CE  60EC       615          bra       Clearln_1
                     616   Clearln_3:
000009D0  241F       617          move.l    (A7)+,D2
000009D2  4E75       618          rts
                     619   ; }
                     620   ; /******************************************************************************
                     621   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     622   ; *******************************************************************************/
                     623   ; void Oline0(char *theMessage)
                     624   ; {
                     625   _Oline0:
000009D4  4E56 0000  626          link      A6,#0
                     627   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  628          move.b    #128,4194336
000009DC  0040 0020 
                     629   ; Wait3ms();
000009E0  4EB8 0946  630          jsr       _Wait3ms
                     631   ; Clearln() ;
000009E4  4EB8 09B8  632          jsr       _Clearln
                     633   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  634          move.b    #128,4194336
000009EC  0040 0020 
                     635   ; Wait3ms() ;
000009F0  4EB8 0946  636          jsr       _Wait3ms
                     637   ; OutMess(theMessage) ;
000009F4  2F2E 0008  638          move.l    8(A6),-(A7)
000009F8  4EB8 098E  639          jsr       _OutMess
000009FC  584F       640          addq.w    #4,A7
000009FE  4E5E       641          unlk      A6
00000A00  4E75       642          rts
                     643   ; }
                     644   ; /******************************************************************************
                     645   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     646   ; *******************************************************************************/
                     647   ; void Oline1(char *theMessage)
                     648   ; {
                     649   _Oline1:
00000A02  4E56 0000  650          link      A6,#0
                     651   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  652          move.b    #192,4194336
00000A0A  0040 0020 
                     653   ; Wait3ms();
00000A0E  4EB8 0946  654          jsr       _Wait3ms
                     655   ; Clearln() ;
00000A12  4EB8 09B8  656          jsr       _Clearln
                     657   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  658          move.b    #192,4194336
00000A1A  0040 0020 
                     659   ; Wait3ms() ;
00000A1E  4EB8 0946  660          jsr       _Wait3ms
                     661   ; OutMess(theMessage) ;
00000A22  2F2E 0008  662          move.l    8(A6),-(A7)
00000A26  4EB8 098E  663          jsr       _OutMess
00000A2A  584F       664          addq.w    #4,A7
00000A2C  4E5E       665          unlk      A6
00000A2E  4E75       666          rts
                     667   ; }
                     668   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     669   ; {
                     670   _InstallExceptionHandler:
00000A30  4E56 FFFC  671          link      A6,#-4
                     672   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  673          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     674   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  675          move.l    -4(A6),A0
00000A40  202E 000C  676          move.l    12(A6),D0
00000A44  E588       677          lsl.l     #2,D0
00000A46  21AE 0008  678          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       679          unlk      A6
00000A4E  4E75       680          rts
                     681   ; }
                     682   ; void TestLEDS(void)
                     683   ; {
                     684   _TestLEDS:
00000A50  48E7 3000  685          movem.l   D2/D3,-(A7)
                     686   ; int delay ;
                     687   ; unsigned char count = 0 ;
00000A54  4202       688          clr.b     D2
                     689   ; while(1)    {
                     690   TestLEDS_1:
                     691   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       692          move.b    D2,D0
00000A58  E908       693          lsl.b     #4,D0
00000A5A  1202       694          move.b    D2,D1
00000A5C  C23C 000F  695          and.b     #15,D1
00000A60  D001       696          add.b     D1,D0
00000A62  13C0 0040  697          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  698          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  699          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  700          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  701          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  702          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  703          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  704          move.b    D0,4194304
00000A90  0000      
                     705   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       706          clr.l     D3
                     707   TestLEDS_4:
00000A94  0C83 0003  708          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       709          bge.s     TestLEDS_6
00000A9C  5283       710          addq.l    #1,D3
00000A9E  60F4       711          bra       TestLEDS_4
                     712   TestLEDS_6:
                     713   ; ;
                     714   ; count ++;
00000AA0  5202       715          addq.b    #1,D2
00000AA2  60B2       716          bra       TestLEDS_1
                     717   ; }
                     718   ; }
                     719   ; void SwitchTest(void)
                     720   ; {
                     721   _SwitchTest:
00000AA4  48E7 3020  722          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  723          lea       _printf.L,A2
00000AAC  456E      
                     724   ; int i, switches = 0 ;
00000AAE  4283       725          clr.l     D3
                     726   ; printf("\r\n") ;
00000AB0  4879 0000  727          pea       @m68kde~1_1.L
00000AB4  4F44      
00000AB6  4E92       728          jsr       (A2)
00000AB8  584F       729          addq.w    #4,A7
                     730   ; while(1)    {
                     731   SwitchTest_1:
                     732   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  733          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  734          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       735          lsl.l     #8,D0
00000AC8  1239 0040  736          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  737          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       738          or.l      D1,D0
00000AD6  2600       739          move.l    D0,D3
                     740   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  741          pea       @m68kde~1_2.L
00000ADC  4F48      
00000ADE  4E92       742          jsr       (A2)
00000AE0  584F       743          addq.w    #4,A7
                     744   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  745          move.l    #128,D2
00000AE6  0080      
                     746   SwitchTest_4:
00000AE8  0C82 0000  747          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       748          ble.s     SwitchTest_6
                     749   ; if((switches & i) == 0)
00000AF0  2003       750          move.l    D3,D0
00000AF2  C082       751          and.l     D2,D0
00000AF4  660C       752          bne.s     SwitchTest_7
                     753   ; printf("0") ;
00000AF6  4879 0000  754          pea       @m68kde~1_3.L
00000AFA  4F5E      
00000AFC  4E92       755          jsr       (A2)
00000AFE  584F       756          addq.w    #4,A7
00000B00  600A       757          bra.s     SwitchTest_8
                     758   SwitchTest_7:
                     759   ; else
                     760   ; printf("1") ;
00000B02  4879 0000  761          pea       @m68kde~1_4.L
00000B06  4F60      
00000B08  4E92       762          jsr       (A2)
00000B0A  584F       763          addq.w    #4,A7
                     764   SwitchTest_8:
00000B0C  E282       765          asr.l     #1,D2
00000B0E  60D8       766          bra       SwitchTest_4
                     767   SwitchTest_6:
00000B10  60A8       768          bra       SwitchTest_1
                     769   ; }
                     770   ; }
                     771   ; }
                     772   ; /*********************************************************************************************
                     773   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     774   ; *********************************************************************************************/
                     775   ; void Init_RS232(void)
                     776   ; {
                     777   _Init_RS232:
                     778   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  779          move.b    #21,4194368
00000B16  0040 0040 
                     780   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  781          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       782          rts
                     783   ; }
                     784   ; int kbhit(void)
                     785   ; {
                     786   _kbhit:
                     787   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  788          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  789          and.b     #1,D0
00000B2E  0C00 0001  790          cmp.b     #1,D0
00000B32  6604       791          bne.s     kbhit_1
                     792   ; return 1 ;
00000B34  7001       793          moveq     #1,D0
00000B36  6002       794          bra.s     kbhit_3
                     795   kbhit_1:
                     796   ; else
                     797   ; return 0 ;
00000B38  4280       798          clr.l     D0
                     799   kbhit_3:
00000B3A  4E75       800          rts
                     801   ; }
                     802   ; /*********************************************************************************************************
                     803   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     804   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     805   ; **  to allow the board to communicate with HyperTerminal Program
                     806   ; **
                     807   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     808   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     809   ; **  call _putch() also
                     810   ; *********************************************************************************************************/
                     811   ; int _putch( int c)
                     812   ; {
                     813   __putch:
00000B3C  4E56 0000  814          link      A6,#0
                     815   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     816   _putch_1:
00000B40  1039 0040  817          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  818          and.b     #2,D0
00000B4A  0C00 0002  819          cmp.b     #2,D0
00000B4E  6702       820          beq.s     _putch_3
00000B50  60EE       821          bra       _putch_1
                     822   _putch_3:
                     823   ; ;
                     824   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  825          move.l    8(A6),D0
00000B56  C03C 007F  826          and.b     #127,D0
00000B5A  13C0 0040  827          move.b    D0,4194370
00000B5E  0042      
                     828   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  829          move.l    8(A6),D0
00000B64  4E5E       830          unlk      A6
00000B66  4E75       831          rts
                     832   ; }
                     833   ; /*********************************************************************************************************
                     834   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     835   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     836   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     837   ; **
                     838   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     839   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     840   ; **  call _getch() also
                     841   ; *********************************************************************************************************/
                     842   ; int _getch( void )
                     843   ; {
                     844   __getch:
00000B68  2F02       845          move.l    D2,-(A7)
                     846   ; int c ;
                     847   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     848   _getch_1:
00000B6A  1039 0040  849          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  850          and.b     #1,D0
00000B74  0C00 0001  851          cmp.b     #1,D0
00000B78  6702       852          beq.s     _getch_3
00000B7A  60EE       853          bra       _getch_1
                     854   _getch_3:
                     855   ; ;
                     856   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  857          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  858          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  859          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       860          move.l    D0,D2
                     861   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     862   ; if(Echo)
00000B90  4AB9 0B00  863          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       864          beq.s     _getch_4
                     865   ; _putch(c);
00000B98  2F02       866          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  867          jsr       __putch
00000B9E  584F       868          addq.w    #4,A7
                     869   _getch_4:
                     870   ; return c ;
00000BA0  2002       871          move.l    D2,D0
00000BA2  241F       872          move.l    (A7)+,D2
00000BA4  4E75       873          rts
                     874   ; }
                     875   ; // flush the input stream for any unread characters
                     876   ; void FlushKeyboard(void)
                     877   ; {
                     878   _FlushKeyboard:
00000BA6  4E56 FFFC  879          link      A6,#-4
                     880   ; char c ;
                     881   ; while(1)    {
                     882   FlushKeyboard_1:
                     883   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  884          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  885          and.b     #1,D0
00000BB4  0C00 0001  886          cmp.b     #1,D0
00000BB8  6610       887          bne.s     FlushKeyboard_4
                     888   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  889          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  890          and.b     #127,D0
00000BC4  1D40 FFFF  891          move.b    D0,-1(A6)
00000BC8  6002       892          bra.s     FlushKeyboard_5
                     893   FlushKeyboard_4:
                     894   ; else
                     895   ; return ;
00000BCA  6002       896          bra.s     FlushKeyboard_6
                     897   FlushKeyboard_5:
00000BCC  60DC       898          bra       FlushKeyboard_1
                     899   FlushKeyboard_6:
00000BCE  4E5E       900          unlk      A6
00000BD0  4E75       901          rts
                     902   ; }
                     903   ; }
                     904   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     905   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     906   ; char xtod(int c)
                     907   ; {
                     908   _xtod:
00000BD2  4E56 0000  909          link      A6,#0
00000BD6  2F02       910          move.l    D2,-(A7)
00000BD8  242E 0008  911          move.l    8(A6),D2
                     912   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  913          cmp.b     #57,D2
00000BE0  6E08       914          bgt.s     xtod_1
                     915   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       916          move.b    D2,D0
00000BE4  0400 0030  917          sub.b     #48,D0
00000BE8  6014       918          bra.s     xtod_3
                     919   xtod_1:
                     920   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  921          cmp.b     #70,D2
00000BEE  6F08       922          ble.s     xtod_4
                     923   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       924          move.b    D2,D0
00000BF2  0400 0057  925          sub.b     #87,D0
00000BF6  6006       926          bra.s     xtod_3
                     927   xtod_4:
                     928   ; else
                     929   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       930          move.b    D2,D0
00000BFA  0400 0037  931          sub.b     #55,D0
                     932   xtod_3:
00000BFE  241F       933          move.l    (A7)+,D2
00000C00  4E5E       934          unlk      A6
00000C02  4E75       935          rts
                     936   ; }
                     937   ; int Get2HexDigits(char *CheckSumPtr)
                     938   ; {
                     939   _Get2HexDigits:
00000C04  4E56 0000  940          link      A6,#0
00000C08  2F02       941          move.l    D2,-(A7)
                     942   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       943          move.l    D0,-(A7)
00000C0C  4EB8 0B68  944          jsr       __getch
00000C10  2200       945          move.l    D0,D1
00000C12  201F       946          move.l    (A7)+,D0
00000C14  2F01       947          move.l    D1,-(A7)
00000C16  4EB8 0BD2  948          jsr       _xtod
00000C1A  584F       949          addq.w    #4,A7
00000C1C  C0BC 0000  950          and.l     #255,D0
00000C20  00FF      
00000C22  E980       951          asl.l     #4,D0
00000C24  2F00       952          move.l    D0,-(A7)
00000C26  2F01       953          move.l    D1,-(A7)
00000C28  4EB8 0B68  954          jsr       __getch
00000C2C  221F       955          move.l    (A7)+,D1
00000C2E  2F00       956          move.l    D0,-(A7)
00000C30  4EB8 0BD2  957          jsr       _xtod
00000C34  584F       958          addq.w    #4,A7
00000C36  2200       959          move.l    D0,D1
00000C38  201F       960          move.l    (A7)+,D0
00000C3A  C2BC 0000  961          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       962          or.l      D1,D0
00000C42  2400       963          move.l    D0,D2
                     964   ; if(CheckSumPtr)
00000C44  4AAE 0008  965          tst.l     8(A6)
00000C48  6706       966          beq.s     Get2HexDigits_1
                     967   ; *CheckSumPtr += i ;
00000C4A  206E 0008  968          move.l    8(A6),A0
00000C4E  D510       969          add.b     D2,(A0)
                     970   Get2HexDigits_1:
                     971   ; return i ;
00000C50  2002       972          move.l    D2,D0
00000C52  241F       973          move.l    (A7)+,D2
00000C54  4E5E       974          unlk      A6
00000C56  4E75       975          rts
                     976   ; }
                     977   ; int Get4HexDigits(char *CheckSumPtr)
                     978   ; {
                     979   _Get4HexDigits:
00000C58  4E56 0000  980          link      A6,#0
                     981   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  982          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  983          jsr       _Get2HexDigits
00000C64  584F       984          addq.w    #4,A7
00000C66  E180       985          asl.l     #8,D0
00000C68  2F00       986          move.l    D0,-(A7)
00000C6A  2F2E 0008  987          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  988          jsr       _Get2HexDigits
00000C72  584F       989          addq.w    #4,A7
00000C74  2200       990          move.l    D0,D1
00000C76  201F       991          move.l    (A7)+,D0
00000C78  8081       992          or.l      D1,D0
00000C7A  4E5E       993          unlk      A6
00000C7C  4E75       994          rts
                     995   ; }
                     996   ; int Get6HexDigits(char *CheckSumPtr)
                     997   ; {
                     998   _Get6HexDigits:
00000C7E  4E56 0000  999          link      A6,#0
                    1000   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1001          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1002          jsr       _Get4HexDigits
00000C8A  584F      1003          addq.w    #4,A7
00000C8C  E180      1004          asl.l     #8,D0
00000C8E  2F00      1005          move.l    D0,-(A7)
00000C90  2F2E 0008 1006          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1007          jsr       _Get2HexDigits
00000C98  584F      1008          addq.w    #4,A7
00000C9A  2200      1009          move.l    D0,D1
00000C9C  201F      1010          move.l    (A7)+,D0
00000C9E  8081      1011          or.l      D1,D0
00000CA0  4E5E      1012          unlk      A6
00000CA2  4E75      1013          rts
                    1014   ; }
                    1015   ; int Get8HexDigits(char *CheckSumPtr)
                    1016   ; {
                    1017   _Get8HexDigits:
00000CA4  4E56 0000 1018          link      A6,#0
                    1019   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1020          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1021          jsr       _Get4HexDigits
00000CB0  584F      1022          addq.w    #4,A7
00000CB2  E180      1023          asl.l     #8,D0
00000CB4  E180      1024          asl.l     #8,D0
00000CB6  2F00      1025          move.l    D0,-(A7)
00000CB8  2F2E 0008 1026          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1027          jsr       _Get4HexDigits
00000CC0  584F      1028          addq.w    #4,A7
00000CC2  2200      1029          move.l    D0,D1
00000CC4  201F      1030          move.l    (A7)+,D0
00000CC6  8081      1031          or.l      D1,D0
00000CC8  4E5E      1032          unlk      A6
00000CCA  4E75      1033          rts
                    1034   ; }
                    1035   ; void DumpMemory(void)   // simple dump memory fn
                    1036   ; {
                    1037   _DumpMemory:
00000CCC  48E7 3C30 1038          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1039          lea       _printf.L,A2
00000CD4  456E      
00000CD6  47F9 0000 1040          lea       _putch.L,A3
00000CDA  3BB2      
                    1041   ; int i, j ;
                    1042   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1043   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1044          pea       @m68kde~1_5.L
00000CE0  4F62      
00000CE2  4E92      1045          jsr       (A2)
00000CE4  584F      1046          addq.w    #4,A7
                    1047   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1048          pea       @m68kde~1_6.L
00000CEA  4F9C      
00000CEC  4E92      1049          jsr       (A2)
00000CEE  584F      1050          addq.w    #4,A7
                    1051   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1052          clr.l     -(A7)
00000CF2  4EB8 0CA4 1053          jsr       _Get8HexDigits
00000CF6  584F      1054          addq.w    #4,A7
00000CF8  2600      1055          move.l    D0,D3
                    1056   ; while(1)    {
                    1057   DumpMemory_1:
                    1058   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1059          clr.l     D5
                    1060   DumpMemory_4:
00000CFC  0C85 0000 1061          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1062          bge       DumpMemory_6
                    1063   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1064          move.l    D3,-(A7)
00000D08  4879 0000 1065          pea       @m68kde~1_7.L
00000D0C  4FB4      
00000D0E  4E92      1066          jsr       (A2)
00000D10  504F      1067          addq.w    #8,A7
                    1068   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1069          clr.l     D2
                    1070   DumpMemory_7:
00000D14  0C82 0000 1071          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1072          bge.s     DumpMemory_9
                    1073   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1074          move.l    D3,A0
00000D1E  1230 2800 1075          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1076          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1077          move.l    D1,-(A7)
00000D2A  4879 0000 1078          pea       @m68kde~1_8.L
00000D2E  4FBC      
00000D30  4E92      1079          jsr       (A2)
00000D32  504F      1080          addq.w    #8,A7
                    1081   ; putchar(' ') ;
00000D34  4878 0020 1082          pea       32
00000D38  4E93      1083          jsr       (A3)
00000D3A  584F      1084          addq.w    #4,A7
00000D3C  5282      1085          addq.l    #1,D2
00000D3E  60D4      1086          bra       DumpMemory_7
                    1087   DumpMemory_9:
                    1088   ; }
                    1089   ; // now display the data as ASCII at the end
                    1090   ; printf("  ") ;
00000D40  4879 0000 1091          pea       @m68kde~1_9.L
00000D44  4FC2      
00000D46  4E92      1092          jsr       (A2)
00000D48  584F      1093          addq.w    #4,A7
                    1094   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1095          clr.l     D2
                    1096   DumpMemory_10:
00000D4C  0C82 0000 1097          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1098          bge       DumpMemory_12
                    1099   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1100          move.l    D3,A0
00000D58  1030 2800 1101          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1102          and.b     #127,D0
00000D60  1800      1103          move.b    D0,D4
                    1104   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1105          cmp.b     #127,D4
00000D66  6206      1106          bhi.s     DumpMemory_15
00000D68  0C04 0020 1107          cmp.b     #32,D4
00000D6C  640A      1108          bhs.s     DumpMemory_13
                    1109   DumpMemory_15:
                    1110   ; putchar('.') ;
00000D6E  4878 002E 1111          pea       46
00000D72  4E93      1112          jsr       (A3)
00000D74  584F      1113          addq.w    #4,A7
00000D76  6012      1114          bra.s     DumpMemory_14
                    1115   DumpMemory_13:
                    1116   ; else
                    1117   ; putchar(RamPtr[j]) ;
00000D78  2043      1118          move.l    D3,A0
00000D7A  1230 2800 1119          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1120          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1121          move.l    D1,-(A7)
00000D86  4E93      1122          jsr       (A3)
00000D88  584F      1123          addq.w    #4,A7
                    1124   DumpMemory_14:
00000D8A  5282      1125          addq.l    #1,D2
00000D8C  60BE      1126          bra       DumpMemory_10
                    1127   DumpMemory_12:
                    1128   ; }
                    1129   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1130          add.l     #16,D3
00000D92  0010      
00000D94  5285      1131          addq.l    #1,D5
00000D96  6000 FF64 1132          bra       DumpMemory_4
                    1133   DumpMemory_6:
                    1134   ; }
                    1135   ; printf("\r\n") ;
00000D9A  4879 0000 1136          pea       @m68kde~1_1.L
00000D9E  4F44      
00000DA0  4E92      1137          jsr       (A2)
00000DA2  584F      1138          addq.w    #4,A7
                    1139   ; c = _getch() ;
00000DA4  4EB8 0B68 1140          jsr       __getch
00000DA8  1800      1141          move.b    D0,D4
                    1142   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1143          cmp.b     #27,D4
00000DAE  6602      1144          bne.s     DumpMemory_16
                    1145   ; break ;
00000DB0  6004      1146          bra.s     DumpMemory_3
                    1147   DumpMemory_16:
00000DB2  6000 FF46 1148          bra       DumpMemory_1
                    1149   DumpMemory_3:
00000DB6  4CDF 0C3C 1150          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1151          rts
                    1152   ; }
                    1153   ; }
                    1154   ; void FillMemory()
                    1155   ; {
                    1156   _FillMemory:
00000DBC  48E7 3820 1157          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1158          lea       _printf.L,A2
00000DC4  456E      
                    1159   ; char *StartRamPtr, *EndRamPtr ;
                    1160   ; unsigned char FillData ;
                    1161   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1162          pea       @m68kde~1_10.L
00000DCA  4FC6      
00000DCC  4E92      1163          jsr       (A2)
00000DCE  584F      1164          addq.w    #4,A7
                    1165   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1166          pea       @m68kde~1_6.L
00000DD4  4F9C      
00000DD6  4E92      1167          jsr       (A2)
00000DD8  584F      1168          addq.w    #4,A7
                    1169   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1170          clr.l     -(A7)
00000DDC  4EB8 0CA4 1171          jsr       _Get8HexDigits
00000DE0  584F      1172          addq.w    #4,A7
00000DE2  2400      1173          move.l    D0,D2
                    1174   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1175          pea       @m68kde~1_11.L
00000DE8  4FDA      
00000DEA  4E92      1176          jsr       (A2)
00000DEC  584F      1177          addq.w    #4,A7
                    1178   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1179          clr.l     -(A7)
00000DF0  4EB8 0CA4 1180          jsr       _Get8HexDigits
00000DF4  584F      1181          addq.w    #4,A7
00000DF6  2800      1182          move.l    D0,D4
                    1183   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1184          pea       @m68kde~1_12.L
00000DFC  4FF0      
00000DFE  4E92      1185          jsr       (A2)
00000E00  584F      1186          addq.w    #4,A7
                    1187   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1188          clr.l     -(A7)
00000E04  4EB8 0C04 1189          jsr       _Get2HexDigits
00000E08  584F      1190          addq.w    #4,A7
00000E0A  1600      1191          move.b    D0,D3
                    1192   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1193          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1194          move.l    D3,-(A7)
00000E14  2F04      1195          move.l    D4,-(A7)
00000E16  2F02      1196          move.l    D2,-(A7)
00000E18  4879 0000 1197          pea       @m68kde~1_13.L
00000E1C  5004      
00000E1E  4E92      1198          jsr       (A2)
00000E20  DEFC 0010 1199          add.w     #16,A7
                    1200   ; while(StartRamPtr < EndRamPtr)
                    1201   FillMemory_1:
00000E24  B484      1202          cmp.l     D4,D2
00000E26  6408      1203          bhs.s     FillMemory_3
                    1204   ; *StartRamPtr++ = FillData ;
00000E28  2042      1205          move.l    D2,A0
00000E2A  5282      1206          addq.l    #1,D2
00000E2C  1083      1207          move.b    D3,(A0)
00000E2E  60F4      1208          bra       FillMemory_1
                    1209   FillMemory_3:
00000E30  4CDF 041C 1210          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1211          rts
                    1212   ; }
                    1213   ; void Load_SRecordFile()
                    1214   ; {
                    1215   _Load_SRecordFile:
00000E36  4E56 FFDC 1216          link      A6,#-36
00000E3A  48E7 3F3C 1217          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1218          lea       -6(A6),A2
00000E42  47F8 0C04 1219          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1220          lea       _printf.L,A4
00000E4A  456E      
                    1221   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1222          clr.l     -18(A6)
00000E50  3A7C 0000 1223          move.w    #0,A5
                    1224   ; int result, ByteCount ;
                    1225   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1226   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1227   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1228          moveq     #0,D7
                    1229   ; AddressFail = 0 ;
00000E56  42AE FFEA 1230          clr.l     -22(A6)
                    1231   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1232          clr.l     _Echo.L
00000E5E  00E0      
                    1233   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1234          pea       @m68kde~1_14.L
00000E64  5034      
00000E66  4E94      1235          jsr       (A4)
00000E68  584F      1236          addq.w    #4,A7
                    1237   ; while(1)    {
                    1238   Load_SRecordFile_1:
                    1239   ; CheckSum = 0 ;
00000E6A  4212      1240          clr.b     (A2)
                    1241   ; do {
                    1242   Load_SRecordFile_4:
                    1243   ; c = toupper(_getch()) ;
00000E6C  2F00      1244          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1245          jsr       __getch
00000E72  2200      1246          move.l    D0,D1
00000E74  201F      1247          move.l    (A7)+,D0
00000E76  2F01      1248          move.l    D1,-(A7)
00000E78  4EB9 0000 1249          jsr       _toupper
00000E7C  3CAC      
00000E7E  584F      1250          addq.w    #4,A7
00000E80  1C00      1251          move.b    D0,D6
                    1252   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1253          cmp.b     #27,D6
00000E86  6604      1254          bne.s     Load_SRecordFile_6
                    1255   ; return;
00000E88  6000 0132 1256          bra       Load_SRecordFile_8
                    1257   Load_SRecordFile_6:
00000E8C  0C06 0053 1258          cmp.b     #83,D6
00000E90  66DA      1259          bne       Load_SRecordFile_4
                    1260   ; }while(c != (char)('S'));   // wait for S start of header
                    1261   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1262          jsr       __getch
00000E96  1600      1263          move.b    D0,D3
                    1264   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1265          cmp.b     #48,D3
00000E9C  6706      1266          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1267          cmp.b     #53,D3
00000EA2  6604      1268          bne.s     Load_SRecordFile_9
                    1269   Load_SRecordFile_11:
                    1270   ; continue ;
00000EA4  6000 00D2 1271          bra       Load_SRecordFile_23
                    1272   Load_SRecordFile_9:
                    1273   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1274          cmp.b     #55,D3
00000EAC  6D04      1275          blt.s     Load_SRecordFile_12
                    1276   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1277          bra       Load_SRecordFile_3
                    1278   Load_SRecordFile_12:
                    1279   ; // get the bytecount
                    1280   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1281          move.l    A2,-(A7)
00000EB4  4E93      1282          jsr       (A3)
00000EB6  584F      1283          addq.w    #4,A7
00000EB8  2D40 FFF6 1284          move.l    D0,-10(A6)
                    1285   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1286   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1287          cmp.b     #49,D3
00000EC0  660E      1288          bne.s     Load_SRecordFile_14
                    1289   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1290          moveq     #2,D5
                    1291   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1292          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1293          jsr       _Get4HexDigits
00000ECA  584F      1294          addq.w    #4,A7
00000ECC  2800      1295          move.l    D0,D4
00000ECE  6020      1296          bra.s     Load_SRecordFile_17
                    1297   Load_SRecordFile_14:
                    1298   ; }
                    1299   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1300          cmp.b     #50,D3
00000ED4  660E      1301          bne.s     Load_SRecordFile_16
                    1302   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1303          moveq     #3,D5
                    1304   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1305          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1306          jsr       _Get6HexDigits
00000EDE  584F      1307          addq.w    #4,A7
00000EE0  2800      1308          move.l    D0,D4
00000EE2  600C      1309          bra.s     Load_SRecordFile_17
                    1310   Load_SRecordFile_16:
                    1311   ; }
                    1312   ; else    {
                    1313   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1314          moveq     #4,D5
                    1315   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1316          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1317          jsr       _Get8HexDigits
00000EEC  584F      1318          addq.w    #4,A7
00000EEE  2800      1319          move.l    D0,D4
                    1320   Load_SRecordFile_17:
                    1321   ; }
                    1322   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1323          move.l    D4,-4(A6)
                    1324   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1325          move.l    -10(A6),D0
00000EF8  9085      1326          sub.l     D5,D0
00000EFA  5380      1327          subq.l    #1,D0
00000EFC  2D40 FFE2 1328          move.l    D0,-30(A6)
                    1329   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1330          clr.l     D2
                    1331   Load_SRecordFile_18:
00000F02  B4AE FFE2 1332          cmp.l     -30(A6),D2
00000F06  6C1E      1333          bge.s     Load_SRecordFile_20
                    1334   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1335          move.l    A2,-(A7)
00000F0A  4E93      1336          jsr       (A3)
00000F0C  584F      1337          addq.w    #4,A7
00000F0E  2D40 FFDE 1338          move.l    D0,-34(A6)
                    1339   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1340          move.l    -34(A6),D0
00000F16  206E FFFC 1341          move.l    -4(A6),A0
00000F1A  52AE FFFC 1342          addq.l    #1,-4(A6)
00000F1E  1080      1343          move.b    D0,(A0)
                    1344   ; ByteTotal++;
00000F20  524D      1345          addq.w    #1,A5
00000F22  5282      1346          addq.l    #1,D2
00000F24  60DC      1347          bra       Load_SRecordFile_18
                    1348   Load_SRecordFile_20:
                    1349   ; }
                    1350   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1351   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1352          clr.l     -(A7)
00000F28  4E93      1353          jsr       (A3)
00000F2A  584F      1354          addq.w    #4,A7
00000F2C  1D40 FFFB 1355          move.b    D0,-5(A6)
                    1356   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1357          move.b    (A2),D0
00000F32  4600      1358          not.b     D0
00000F34  4880      1359          ext.w     D0
00000F36  C07C 00FF 1360          and.w     #255,D0
00000F3A  122E FFFB 1361          move.b    -5(A6),D1
00000F3E  4881      1362          ext.w     D1
00000F40  C27C 00FF 1363          and.w     #255,D1
00000F44  B041      1364          cmp.w     D1,D0
00000F46  6708      1365          beq.s     Load_SRecordFile_21
                    1366   ; LoadFailed = 1 ;
00000F48  7E01      1367          moveq     #1,D7
                    1368   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1369          move.l    D4,-26(A6)
                    1370   ; break;
00000F4E  602C      1371          bra.s     Load_SRecordFile_3
                    1372   Load_SRecordFile_21:
                    1373   ; }
                    1374   ; SRecordCount++ ;
00000F50  52AE FFEE 1375          addq.l    #1,-18(A6)
                    1376   ; // display feedback on progress
                    1377   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1378          move.l    -18(A6),-(A7)
00000F58  4878 0019 1379          pea       25
00000F5C  4EB9 0000 1380          jsr       LDIV
00000F60  3AE6      
00000F62  202F 0004 1381          move.l    4(A7),D0
00000F66  504F      1382          addq.w    #8,A7
00000F68  4A80      1383          tst.l     D0
00000F6A  660C      1384          bne.s     Load_SRecordFile_23
                    1385   ; putchar('.') ;
00000F6C  4878 002E 1386          pea       46
00000F70  4EB9 0000 1387          jsr       _putch
00000F74  3BB2      
00000F76  584F      1388          addq.w    #4,A7
                    1389   Load_SRecordFile_23:
00000F78  6000 FEF0 1390          bra       Load_SRecordFile_1
                    1391   Load_SRecordFile_3:
                    1392   ; }
                    1393   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1394          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1395          bne.s     Load_SRecordFile_25
                    1396   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1397          move.l    -26(A6),-(A7)
00000F88  4879 0000 1398          pea       @m68kde~1_15.L
00000F8C  5064      
00000F8E  4E94      1399          jsr       (A4)
00000F90  504F      1400          addq.w    #8,A7
00000F92  600C      1401          bra.s     Load_SRecordFile_26
                    1402   Load_SRecordFile_25:
                    1403   ; }
                    1404   ; else
                    1405   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1406          move.l    A5,-(A7)
00000F96  4879 0000 1407          pea       @m68kde~1_16.L
00000F9A  508A      
00000F9C  4E94      1408          jsr       (A4)
00000F9E  504F      1409          addq.w    #8,A7
                    1410   Load_SRecordFile_26:
                    1411   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1412   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1413          clr.l     D2
                    1414   Load_SRecordFile_27:
00000FA2  0C82 0006 1415          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1416          bge.s     Load_SRecordFile_29
00000FAA  5282      1417          addq.l    #1,D2
00000FAC  60F4      1418          bra       Load_SRecordFile_27
                    1419   Load_SRecordFile_29:
                    1420   ; ;
                    1421   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1422          jsr       _FlushKeyboard
                    1423   ; Echo = 1;
00000FB2  23FC 0000 1424          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1425   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1426          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1427          unlk      A6
00000FC2  4E75      1428          rts
                    1429   ; }
                    1430   ; void MemoryChange(void)
                    1431   ; {
                    1432   _MemoryChange:
00000FC4  48E7 3820 1433          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1434          lea       _printf.L,A2
00000FCC  456E      
                    1435   ; unsigned char *RamPtr,c ; // pointer to memory
                    1436   ; int Data ;
                    1437   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1438          pea       @m68kde~1_17.L
00000FD2  50AC      
00000FD4  4E92      1439          jsr       (A2)
00000FD6  584F      1440          addq.w    #4,A7
                    1441   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1442          pea       @m68kde~1_18.L
00000FDC  50C8      
00000FDE  4E92      1443          jsr       (A2)
00000FE0  584F      1444          addq.w    #4,A7
                    1445   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1446          pea       @m68kde~1_19.L
00000FE6  510E      
00000FE8  4E92      1447          jsr       (A2)
00000FEA  584F      1448          addq.w    #4,A7
                    1449   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1450          clr.l     -(A7)
00000FEE  4EB8 0CA4 1451          jsr       _Get8HexDigits
00000FF2  584F      1452          addq.w    #4,A7
00000FF4  2600      1453          move.l    D0,D3
                    1454   ; while(1)    {
                    1455   MemoryChange_1:
                    1456   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1457          move.l    D3,A0
00000FF8  1210      1458          move.b    (A0),D1
00000FFA  C2BC 0000 1459          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1460          move.l    D1,-(A7)
00001002  2F03      1461          move.l    D3,-(A7)
00001004  4879 0000 1462          pea       @m68kde~1_20.L
00001008  5120      
0000100A  4E92      1463          jsr       (A2)
0000100C  DEFC 000C 1464          add.w     #12,A7
                    1465   ; c = tolower(_getch()) ;
00001010  2F00      1466          move.l    D0,-(A7)
00001012  4EB8 0B68 1467          jsr       __getch
00001016  2200      1468          move.l    D0,D1
00001018  201F      1469          move.l    (A7)+,D0
0000101A  2F01      1470          move.l    D1,-(A7)
0000101C  4EB9 0000 1471          jsr       _tolower
00001020  3C1E      
00001022  584F      1472          addq.w    #4,A7
00001024  1400      1473          move.b    D0,D2
                    1474   ; if(c == (char)(0x1b))
00001026  0C02 001B 1475          cmp.b     #27,D2
0000102A  6604      1476          bne.s     MemoryChange_4
                    1477   ; return ;                                // abort on escape
0000102C  6000 0090 1478          bra       MemoryChange_6
                    1479   MemoryChange_4:
                    1480   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1481          cmp.b     #48,D2
00001034  6506      1482          blo.s     MemoryChange_10
00001036  0C02 0039 1483          cmp.b     #57,D2
0000103A  6310      1484          bls.s     MemoryChange_9
                    1485   MemoryChange_10:
0000103C  0C02 0061 1486          cmp.b     #97,D2
00001040  6500 006E 1487          blo       MemoryChange_7
00001044  0C02 0066 1488          cmp.b     #102,D2
00001048  6200 0066 1489          bhi       MemoryChange_7
                    1490   MemoryChange_9:
                    1491   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1492          and.l     #255,D2
00001050  00FF      
00001052  2F02      1493          move.l    D2,-(A7)
00001054  4EB8 0BD2 1494          jsr       _xtod
00001058  584F      1495          addq.w    #4,A7
0000105A  C0BC 0000 1496          and.l     #255,D0
0000105E  00FF      
00001060  E980      1497          asl.l     #4,D0
00001062  2F00      1498          move.l    D0,-(A7)
00001064  2F01      1499          move.l    D1,-(A7)
00001066  4EB8 0B68 1500          jsr       __getch
0000106A  221F      1501          move.l    (A7)+,D1
0000106C  2F00      1502          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1503          jsr       _xtod
00001072  584F      1504          addq.w    #4,A7
00001074  2200      1505          move.l    D0,D1
00001076  201F      1506          move.l    (A7)+,D0
00001078  C2BC 0000 1507          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1508          or.l      D1,D0
00001080  2800      1509          move.l    D0,D4
                    1510   ; *RamPtr = (char)(Data) ;
00001082  2043      1511          move.l    D3,A0
00001084  1084      1512          move.b    D4,(A0)
                    1513   ; if(*RamPtr != Data) {
00001086  2043      1514          move.l    D3,A0
00001088  1010      1515          move.b    (A0),D0
0000108A  C0BC 0000 1516          and.l     #255,D0
0000108E  00FF      
00001090  B084      1517          cmp.l     D4,D0
00001092  671A      1518          beq.s     MemoryChange_11
                    1519   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1520          move.l    D3,A0
00001096  1210      1521          move.b    (A0),D1
00001098  C2BC 0000 1522          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1523          move.l    D1,-(A7)
000010A0  2F04      1524          move.l    D4,-(A7)
000010A2  4879 0000 1525          pea       @m68kde~1_21.L
000010A6  5132      
000010A8  4E92      1526          jsr       (A2)
000010AA  DEFC 000C 1527          add.w     #12,A7
                    1528   MemoryChange_11:
000010AE  6008      1529          bra.s     MemoryChange_13
                    1530   MemoryChange_7:
                    1531   ; }
                    1532   ; }
                    1533   ; else if(c == (char)('-'))
000010B0  0C02 002D 1534          cmp.b     #45,D2
000010B4  6602      1535          bne.s     MemoryChange_13
                    1536   ; RamPtr -= 2 ; ;
000010B6  5583      1537          subq.l    #2,D3
                    1538   MemoryChange_13:
                    1539   ; RamPtr ++ ;
000010B8  5283      1540          addq.l    #1,D3
000010BA  6000 FF3A 1541          bra       MemoryChange_1
                    1542   MemoryChange_6:
000010BE  4CDF 041C 1543          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1544          rts
                    1545   ; }
                    1546   ; }
                    1547   ; /******************************************************************************************
                    1548   ; ** The following code is for the SPI controller
                    1549   ; *******************************************************************************************/
                    1550   ; int SPISafeWrite(unsigned char data) {
                    1551   _SPISafeWrite:
000010C4  4E56 FFFC 1552          link      A6,#-4
                    1553   ; unsigned char returnVal;
                    1554   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1555   ; // while((SPI_Status & 0x08) == 0x08);
                    1556   ; SPI_Data = data;
000010C8  13EE 000B 1557          move.b    11(A6),4227108
000010CC  0040 8024 
                    1558   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1559          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1560   ; returnVal = SPI_Data;
000010D6  1D79 0040 1561          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1562   ; return returnVal;
000010DE  102E FFFF 1563          move.b    -1(A6),D0
000010E2  C0BC 0000 1564          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1565          unlk      A6
000010EA  4E75      1566          rts
                    1567   ; }
                    1568   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1569   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1570   ; int TestForSPITransmitDataComplete(void) {
                    1571   _TestForSPITransmitDataComplete:
                    1572   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1573   ; return (SPI_Status >> 7);
000010EC  1039 0040 1574          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1575          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1576          lsr.l     #7,D0
000010FA  4E75      1577          rts
                    1578   ; }
                    1579   ; /************************************************************************************
                    1580   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1581   ; ************************************************************************************/
                    1582   ; void SPI_Init(void)
                    1583   ; {
                    1584   _SPI_Init:
                    1585   ; // TODO
                    1586   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1587   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1588   ; //
                    1589   ; // Here are some settings we want to create
                    1590   ; //
                    1591   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1592   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1593   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1594   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1595   ; SPI_Control = 0x50; // 0101_0011 // This might need to be 0x53
000010FC  13FC 0050 1596          move.b    #80,4227104
00001100  0040 8020 
                    1597   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1598          clr.b     4227110
00001108  8026      
                    1599   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1600          move.b    #255,4227112
0000110E  0040 8028 
                    1601   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1602          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1603          rts
                    1604   ; }
                    1605   ; /************************************************************************************
                    1606   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1607   ; ************************************************************************************/
                    1608   ; void WaitForSPITransmitComplete(void)
                    1609   ; {
                    1610   _WaitForSPITransmitComplete:
                    1611   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1612   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1613   ; // just in case they were set
                    1614   ; while (TestForSPITransmitDataComplete() == 0);
                    1615   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1616          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1617          tst.l     D0
00001122  6602      1618          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1619          bra       WaitForSPITransmitComplete_1
                    1620   WaitForSPITransmitComplete_3:
                    1621   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1622          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1623          rts
                    1624   ; }
                    1625   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1626   ; void ClearSPIReadFIFO(void) {
                    1627   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1628          link      A6,#-4
                    1629   ; volatile unsigned char dummy;
                    1630   ; while((SPI_Status & 0x01) == 0) {
                    1631   ClearSPIReadFIFO_1:
00001134  1039 0040 1632          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1633          and.b     #1,D0
0000113E  660A      1634          bne.s     ClearSPIReadFIFO_3
                    1635   ; dummy = SPI_Data;
00001140  1D79 0040 1636          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1637          bra       ClearSPIReadFIFO_1
                    1638   ClearSPIReadFIFO_3:
0000114A  4E5E      1639          unlk      A6
0000114C  4E75      1640          rts
                    1641   ; }
                    1642   ; }
                    1643   ; void SPIFlashPollStatusWLE(void) {
                    1644   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1645          link      A6,#-4
                    1646   ; unsigned char status;
                    1647   ; unsigned char dummy;
                    1648   ; do {
                    1649   SPIFlashPollStatusWLE_1:
                    1650   ; // Start a new read status register command each time
                    1651   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1652          move.b    #254,4227112
00001156  0040 8028 
                    1653   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1654          pea       5
0000115E  4EB8 10C4 1655          jsr       _SPISafeWrite
00001162  584F      1656          addq.w    #4,A7
                    1657   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1658          pea       255
00001168  4EB8 10C4 1659          jsr       _SPISafeWrite
0000116C  584F      1660          addq.w    #4,A7
0000116E  1D40 FFFE 1661          move.b    D0,-2(A6)
                    1662   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1663          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1664          move.b    -2(A6),D0
0000117E  C03C 0002 1665          and.b     #2,D0
00001182  67CE      1666          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1667          unlk      A6
00001186  4E75      1668          rts
                    1669   ; // printf("\r\n WLE Status: %02x \n", status);
                    1670   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1671   ; }
                    1672   ; void SPIFlashPollStatusBusy(void) {
                    1673   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1674          link      A6,#-4
                    1675   ; unsigned char status;
                    1676   ; unsigned char dummy;
                    1677   ; do {
                    1678   SPIFlashPollStatusBusy_1:
                    1679   ; // Start a new read status register command each time
                    1680   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1681          move.b    #254,4227112
00001190  0040 8028 
                    1682   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1683          pea       5
00001198  4EB8 10C4 1684          jsr       _SPISafeWrite
0000119C  584F      1685          addq.w    #4,A7
                    1686   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1687          pea       255
000011A2  4EB8 10C4 1688          jsr       _SPISafeWrite
000011A6  584F      1689          addq.w    #4,A7
000011A8  1D40 FFFE 1690          move.b    D0,-2(A6)
                    1691   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1692          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1693          move.b    -2(A6),D0
000011B8  C03C 0001 1694          and.b     #1,D0
000011BC  66CE      1695          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1696          unlk      A6
000011C0  4E75      1697          rts
                    1698   ; // printf("\r\n Busy Status: %02x \n", status);
                    1699   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1700   ; }
                    1701   ; /************************************************************************************
                    1702   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1703   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1704   ; ************************************************************************************/
                    1705   ; int WriteSPIChar(int c)
                    1706   ; {
                    1707   _WriteSPIChar:
000011C2  4E56 0000 1708          link      A6,#0
                    1709   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1710          move.l    8(A6),D1
000011CA  C2BC 0000 1711          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1712          move.l    D1,-(A7)
000011D2  4EB8 10C4 1713          jsr       _SPISafeWrite
000011D6  584F      1714          addq.w    #4,A7
                    1715   ; return SPI_Data;
000011D8  1039 0040 1716          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1717          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1718          unlk      A6
000011E6  4E75      1719          rts
                    1720   ; }
                    1721   ; void SPIFlashWriteEnable() {
                    1722   _SPIFlashWriteEnable:
                    1723   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1724          move.b    #254,4227112
000011EC  0040 8028 
                    1725   ; SPISafeWrite(0x06);
000011F0  4878 0006 1726          pea       6
000011F4  4EB8 10C4 1727          jsr       _SPISafeWrite
000011F8  584F      1728          addq.w    #4,A7
                    1729   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1730          move.b    #255,4227112
000011FE  0040 8028 
                    1731   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1732   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1733          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1734          rts
                    1735   ; }
                    1736   ; void SPISendAddress(int c) {
                    1737   _SPISendAddress:
00001208  4E56 0000 1738          link      A6,#0
0000120C  48E7 2020 1739          movem.l   D2/A2,-(A7)
00001210  242E 0008 1740          move.l    8(A6),D2
00001214  45F8 10C4 1741          lea       _SPISafeWrite.L,A2
                    1742   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1743          move.l    D2,D1
0000121A  E081      1744          asr.l     #8,D1
0000121C  E081      1745          asr.l     #8,D1
0000121E  C2BC 0000 1746          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1747          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1748          move.l    D1,-(A7)
0000122C  4E92      1749          jsr       (A2)
0000122E  584F      1750          addq.w    #4,A7
                    1751   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1752          move.l    D2,D1
00001232  E081      1753          asr.l     #8,D1
00001234  C2BC 0000 1754          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1755          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1756          move.l    D1,-(A7)
00001242  4E92      1757          jsr       (A2)
00001244  584F      1758          addq.w    #4,A7
                    1759   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1760          move.l    D2,D1
00001248  C2BC 0000 1761          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1762          and.l     #255,D1
00001252  00FF      
00001254  2F01      1763          move.l    D1,-(A7)
00001256  4E92      1764          jsr       (A2)
00001258  584F      1765          addq.w    #4,A7
0000125A  4CDF 0404 1766          movem.l   (A7)+,D2/A2
0000125E  4E5E      1767          unlk      A6
00001260  4E75      1768          rts
                    1769   ; }
                    1770   ; void SPIFlashPageProgram(int addr) {
                    1771   _SPIFlashPageProgram:
00001262  4E56 FFF8 1772          link      A6,#-8
00001266  2F02      1773          move.l    D2,-(A7)
                    1774   ; unsigned char *sramMemoryPtr;
                    1775   ; int flashAddr = addr - 0x08000000;
00001268  202E 0008 1776          move.l    8(A6),D0
0000126C  0480 0800 1777          sub.l     #134217728,D0
00001270  0000      
00001272  2D40 FFFC 1778          move.l    D0,-4(A6)
                    1779   ; int i;
                    1780   ; SPI_CS = 0xFE;
00001276  13FC 00FE 1781          move.b    #254,4227112
0000127A  0040 8028 
                    1782   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000127E  4878 0002 1783          pea       2
00001282  4EB8 10C4 1784          jsr       _SPISafeWrite
00001286  584F      1785          addq.w    #4,A7
                    1786   ; SPISendAddress(flashAddr);
00001288  2F2E FFFC 1787          move.l    -4(A6),-(A7)
0000128C  4EB8 1208 1788          jsr       _SPISendAddress
00001290  584F      1789          addq.w    #4,A7
                    1790   ; for (i = 0; i < 256; i++) {
00001292  4282      1791          clr.l     D2
                    1792   SPIFlashPageProgram_1:
00001294  0C82 0000 1793          cmp.l     #256,D2
00001298  0100      
0000129A  6C22      1794          bge.s     SPIFlashPageProgram_3
                    1795   ; sramMemoryPtr = (unsigned char*) (addr + i);
0000129C  202E 0008 1796          move.l    8(A6),D0
000012A0  D082      1797          add.l     D2,D0
000012A2  2D40 FFF8 1798          move.l    D0,-8(A6)
                    1799   ; WriteSPIChar(*sramMemoryPtr); // Random value for testing purposes
000012A6  206E FFF8 1800          move.l    -8(A6),A0
000012AA  1210      1801          move.b    (A0),D1
000012AC  C2BC 0000 1802          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1803          move.l    D1,-(A7)
000012B4  4EB8 11C2 1804          jsr       _WriteSPIChar
000012B8  584F      1805          addq.w    #4,A7
000012BA  5282      1806          addq.l    #1,D2
000012BC  60D6      1807          bra       SPIFlashPageProgram_1
                    1808   SPIFlashPageProgram_3:
                    1809   ; // printf("%02x ", *sramMemoryPtr);
                    1810   ; }
                    1811   ; SPI_CS = 0xFF;
000012BE  13FC 00FF 1812          move.b    #255,4227112
000012C2  0040 8028 
                    1813   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1814   ; SPIFlashPollStatusBusy();
000012C6  4EB8 1188 1815          jsr       _SPIFlashPollStatusBusy
000012CA  241F      1816          move.l    (A7)+,D2
000012CC  4E5E      1817          unlk      A6
000012CE  4E75      1818          rts
                    1819   ; }
                    1820   ; void SPIFlashErase(void) {
                    1821   _SPIFlashErase:
                    1822   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1823   ; printf("\nErasing...\n");
000012D0  4879 0000 1824          pea       @m68kde~1_22.L
000012D4  5166      
000012D6  4EB9 0000 1825          jsr       _printf
000012DA  456E      
000012DC  584F      1826          addq.w    #4,A7
                    1827   ; SPI_CS = 0xFE;
000012DE  13FC 00FE 1828          move.b    #254,4227112
000012E2  0040 8028 
                    1829   ; SPISafeWrite(0xC7);
000012E6  4878 00C7 1830          pea       199
000012EA  4EB8 10C4 1831          jsr       _SPISafeWrite
000012EE  584F      1832          addq.w    #4,A7
                    1833   ; SPI_CS = 0xFF;
000012F0  13FC 00FF 1834          move.b    #255,4227112
000012F4  0040 8028 
                    1835   ; SPIFlashPollStatusBusy();
000012F8  4EB8 1188 1836          jsr       _SPIFlashPollStatusBusy
000012FC  4E75      1837          rts
                    1838   ; }
                    1839   ; int SPIFlashRead() {
                    1840   _SPIFlashRead:
000012FE  4E56 FFFC 1841          link      A6,#-4
00001302  48E7 3000 1842          movem.l   D2/D3,-(A7)
                    1843   ; unsigned char readData;
                    1844   ; unsigned char *sramMemoryPtr;
                    1845   ; int addr;
                    1846   ; ClearSPIReadFIFO();
00001306  4EB8 1130 1847          jsr       _ClearSPIReadFIFO
                    1848   ; SPI_CS = 0xFE;
0000130A  13FC 00FE 1849          move.b    #254,4227112
0000130E  0040 8028 
                    1850   ; SPISafeWrite(0x03);
00001312  4878 0003 1851          pea       3
00001316  4EB8 10C4 1852          jsr       _SPISafeWrite
0000131A  584F      1853          addq.w    #4,A7
                    1854   ; SPISendAddress(0x0);
0000131C  42A7      1855          clr.l     -(A7)
0000131E  4EB8 1208 1856          jsr       _SPISendAddress
00001322  584F      1857          addq.w    #4,A7
                    1858   ; for (addr = 0x08000000; addr < (0x08040000); addr ++) {
00001324  243C 0800 1859          move.l    #134217728,D2
00001328  0000      
                    1860   SPIFlashRead_1:
0000132A  0C82 0804 1861          cmp.l     #134479872,D2
0000132E  0000      
00001330  6C1A      1862          bge.s     SPIFlashRead_3
                    1863   ; sramMemoryPtr = (unsigned char*) addr;
00001332  2D42 FFFC 1864          move.l    D2,-4(A6)
                    1865   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001336  4878 00FF 1866          pea       255
0000133A  4EB8 10C4 1867          jsr       _SPISafeWrite
0000133E  584F      1868          addq.w    #4,A7
00001340  1600      1869          move.b    D0,D3
                    1870   ; *sramMemoryPtr = readData;
00001342  206E FFFC 1871          move.l    -4(A6),A0
00001346  1083      1872          move.b    D3,(A0)
00001348  5282      1873          addq.l    #1,D2
0000134A  60DE      1874          bra       SPIFlashRead_1
                    1875   SPIFlashRead_3:
                    1876   ; }
                    1877   ; SPI_CS = 0xFF;
0000134C  13FC 00FF 1878          move.b    #255,4227112
00001350  0040 8028 
                    1879   ; SPIFlashPollStatusBusy();
00001354  4EB8 1188 1880          jsr       _SPIFlashPollStatusBusy
                    1881   ; return readData;
00001358  C6BC 0000 1882          and.l     #255,D3
0000135C  00FF      
0000135E  2003      1883          move.l    D3,D0
00001360  4CDF 000C 1884          movem.l   (A7)+,D2/D3
00001364  4E5E      1885          unlk      A6
00001366  4E75      1886          rts
                    1887   ; }
                    1888   ; /*******************************************************************
                    1889   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1890   ; ********************************************************************/
                    1891   ; void ProgramFlashChip(void)
                    1892   ; {
                    1893   _ProgramFlashChip:
00001368  4E56 FFFC 1894          link      A6,#-4
                    1895   ; int addr;
                    1896   ; SPIFlashPollStatusBusy();
0000136C  4EB8 1188 1897          jsr       _SPIFlashPollStatusBusy
                    1898   ; SPIFlashWriteEnable();
00001370  4EB8 11E8 1899          jsr       _SPIFlashWriteEnable
                    1900   ; SPIFlashErase();
00001374  4EB8 12D0 1901          jsr       _SPIFlashErase
                    1902   ; // 256KB = 262144 bytes (0x40000)
                    1903   ; // We need to write one page at a time (256 bytes at a time)
                    1904   ; // This code writes the user program from DRAM to FLASH
                    1905   ; // printf("\r\n Starting Programming...");
                    1906   ; // for (addr = 0x08000000; addr < (0x08040000); addr += 256) {
                    1907   ; //     SPIFlashWriteEnable(); 
                    1908   ; //     // printf("\r\n Addr: %08x \n", addr);
                    1909   ; //     SPIFlashPageProgram(addr);
                    1910   ; // }
                    1911   ; printf("\r\n Programming Complete!");
00001378  4879 0000 1912          pea       @m68kde~1_23.L
0000137C  5174      
0000137E  4EB9 0000 1913          jsr       _printf
00001382  456E      
00001384  584F      1914          addq.w    #4,A7
00001386  4E5E      1915          unlk      A6
00001388  4E75      1916          rts
                    1917   ; }
                    1918   ; /*************************************************************************
                    1919   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1920   ; **************************************************************************/
                    1921   ; void LoadFromFlashChip(void)
                    1922   ; {
                    1923   _LoadFromFlashChip:
0000138A  4E56 FFFC 1924          link      A6,#-4
                    1925   ; int readData;
                    1926   ; printf("\r\n Loading Program From SPI Flash....") ;
0000138E  4879 0000 1927          pea       @m68kde~1_24.L
00001392  518E      
00001394  4EB9 0000 1928          jsr       _printf
00001398  456E      
0000139A  584F      1929          addq.w    #4,A7
                    1930   ; SPIFlashPollStatusBusy();
0000139C  4EB8 1188 1931          jsr       _SPIFlashPollStatusBusy
                    1932   ; readData = SPIFlashRead();
000013A0  4EB8 12FE 1933          jsr       _SPIFlashRead
000013A4  2D40 FFFC 1934          move.l    D0,-4(A6)
                    1935   ; printf("\r\n Read Data: %08x \n", readData);
000013A8  2F2E FFFC 1936          move.l    -4(A6),-(A7)
000013AC  4879 0000 1937          pea       @m68kde~1_25.L
000013B0  51B4      
000013B2  4EB9 0000 1938          jsr       _printf
000013B6  456E      
000013B8  504F      1939          addq.w    #8,A7
000013BA  4E5E      1940          unlk      A6
000013BC  4E75      1941          rts
                    1942   ; }
                    1943   ; void printBinary(unsigned char value) {
                    1944   _printBinary:
000013BE  4E56 0000 1945          link      A6,#0
000013C2  48E7 2020 1946          movem.l   D2/A2,-(A7)
000013C6  45F9 0000 1947          lea       _printf.L,A2
000013CA  456E      
                    1948   ; int i;
                    1949   ; printf("IIC_CRSR Transmit (Binary): ");
000013CC  4879 0000 1950          pea       @m68kde~1_26.L
000013D0  51CA      
000013D2  4E92      1951          jsr       (A2)
000013D4  584F      1952          addq.w    #4,A7
                    1953   ; for (i = 7; i >= 0; i--) { // Loop through each bit (from MSB to LSB)
000013D6  7407      1954          moveq     #7,D2
                    1955   printBinary_1:
000013D8  0C82 0000 1956          cmp.l     #0,D2
000013DC  0000      
000013DE  6D22      1957          blt.s     printBinary_3
                    1958   ; printf("%d", (value >> i) & 1); // Shift and mask to extract each bit
000013E0  122E 000B 1959          move.b    11(A6),D1
000013E4  C2BC 0000 1960          and.l     #255,D1
000013E8  00FF      
000013EA  E4A1      1961          asr.l     D2,D1
000013EC  C2BC 0000 1962          and.l     #1,D1
000013F0  0001      
000013F2  2F01      1963          move.l    D1,-(A7)
000013F4  4879 0000 1964          pea       @m68kde~1_27.L
000013F8  51E8      
000013FA  4E92      1965          jsr       (A2)
000013FC  504F      1966          addq.w    #8,A7
000013FE  5382      1967          subq.l    #1,D2
00001400  60D6      1968          bra       printBinary_1
                    1969   printBinary_3:
                    1970   ; }
                    1971   ; printf("\n");
00001402  4879 0000 1972          pea       @m68kde~1_28.L
00001406  51EC      
00001408  4E92      1973          jsr       (A2)
0000140A  584F      1974          addq.w    #4,A7
0000140C  4CDF 0404 1975          movem.l   (A7)+,D2/A2
00001410  4E5E      1976          unlk      A6
00001412  4E75      1977          rts
                    1978   ; }
                    1979   ; void IICCoreEnable() {
                    1980   _IICCoreEnable:
                    1981   ; IIC_CTR |= 0x80;     // Enable I2C core in control register (1000_0000)
00001414  0039 0080 1982          or.b      #128,4227076
00001418  0040 8004 
0000141C  4E75      1983          rts
                    1984   ; }
                    1985   ; void IICCoreDisable() {
                    1986   _IICCoreDisable:
                    1987   ; IIC_CTR &= 0x7F;    // Disable I2C core in control register (0011_1111)
0000141E  0239 007F 1988          and.b     #127,4227076
00001422  0040 8004 
00001426  4E75      1989          rts
                    1990   ; }
                    1991   ; // I2C Driver Functions
                    1992   ; void IIC_Init(void) {
                    1993   _IIC_Init:
                    1994   ; IIC_PRER_LO = 0x59;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001428  13FC 0059 1995          move.b    #89,4227072
0000142C  0040 8000 
                    1996   ; IIC_PRER_HI = 0x00;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001430  4239 0040 1997          clr.b     4227074
00001434  8002      
                    1998   ; IIC_CTR &= 0xBF;     // Disable interrupt in control register (1011_1111)
00001436  0239 00BF 1999          and.b     #191,4227076
0000143A  0040 8004 
                    2000   ; IICCoreEnable();
0000143E  4EB8 1414 2001          jsr       _IICCoreEnable
00001442  4E75      2002          rts
                    2003   ; }
                    2004   ; void wait5ms(void) {
                    2005   _wait5ms:
00001444  2F02      2006          move.l    D2,-(A7)
                    2007   ; int i;
                    2008   ; for (i = 0; i < 10000; i++); // Wait for 5 ms
00001446  4282      2009          clr.l     D2
                    2010   wait5ms_1:
00001448  0C82 0000 2011          cmp.l     #10000,D2
0000144C  2710      
0000144E  6C04      2012          bge.s     wait5ms_3
00001450  5282      2013          addq.l    #1,D2
00001452  60F4      2014          bra       wait5ms_1
                    2015   wait5ms_3:
00001454  241F      2016          move.l    (A7)+,D2
00001456  4E75      2017          rts
                    2018   ; }
                    2019   ; void checkTIP() {
                    2020   _checkTIP:
                    2021   ; while (IIC_CRSR & TIP);
                    2022   checkTIP_1:
00001458  1039 0040 2023          move.b    4227080,D0
0000145C  8008      
0000145E  C03C 0002 2024          and.b     #2,D0
00001462  6702      2025          beq.s     checkTIP_3
00001464  60F2      2026          bra       checkTIP_1
                    2027   checkTIP_3:
00001466  4E75      2028          rts
                    2029   ; }
                    2030   ; void checkAck() {
                    2031   _checkAck:
                    2032   ; while ((IIC_CRSR & RXACK) == 1);
                    2033   checkAck_1:
00001468  1039 0040 2034          move.b    4227080,D0
0000146C  8008      
0000146E  C07C 00FF 2035          and.w     #255,D0
00001472  C07C 0080 2036          and.w     #128,D0
00001476  0C40 0001 2037          cmp.w     #1,D0
0000147A  6602      2038          bne.s     checkAck_3
0000147C  60EA      2039          bra       checkAck_1
                    2040   checkAck_3:
0000147E  4E75      2041          rts
                    2042   ; }
                    2043   ; void IICStopCondition() {
                    2044   _IICStopCondition:
                    2045   ; IIC_CRSR |= STOP | READ | IACK; // STOP + READ + IACK
00001480  0039 0061 2046          or.b      #97,4227080
00001484  0040 8008 
                    2047   ; checkTIP();
00001488  4EB8 1458 2048          jsr       _checkTIP
0000148C  4E75      2049          rts
                    2050   ; }
                    2051   ; void IICStartCondition(int rwBit) {
                    2052   _IICStartCondition:
0000148E  4E56 0000 2053          link      A6,#0
                    2054   ; if (rwBit == 0) {
00001492  202E 0008 2055          move.l    8(A6),D0
00001496  660A      2056          bne.s     IICStartCondition_1
                    2057   ; IIC_CRSR |= START | WRITE | IACK; // START + WRITE + IACK
00001498  0039 0091 2058          or.b      #145,4227080
0000149C  0040 8008 
000014A0  6008      2059          bra.s     IICStartCondition_2
                    2060   IICStartCondition_1:
                    2061   ; } else {
                    2062   ; IIC_CRSR |= START | READ | IACK; // Start condition with read bit set
000014A2  0039 00A1 2063          or.b      #161,4227080
000014A6  0040 8008 
                    2064   IICStartCondition_2:
                    2065   ; }
                    2066   ; checkTIP();
000014AA  4EB8 1458 2067          jsr       _checkTIP
                    2068   ; checkAck();
000014AE  4EB8 1468 2069          jsr       _checkAck
000014B2  4E5E      2070          unlk      A6
000014B4  4E75      2071          rts
                    2072   ; }
                    2073   ; // EEPROM Address: 101000{B0} 
                    2074   ; // EEPROM Specific Functions
                    2075   ; void EEPROMByteWrite(unsigned int data, unsigned int deviceAddr, unsigned int memoryAddr) {
                    2076   _EEPROMByteWrite:
000014B6  4E56 0000 2077          link      A6,#0
000014BA  48E7 3030 2078          movem.l   D2/D3/A2/A3,-(A7)
000014BE  45F8 1458 2079          lea       _checkTIP.L,A2
000014C2  47F8 1468 2080          lea       _checkAck.L,A3
000014C6  242E 000C 2081          move.l    12(A6),D2
000014CA  262E 0010 2082          move.l    16(A6),D3
                    2083   ; // Check if there is a transmission in progress
                    2084   ; // IICCoreEnable();
                    2085   ; if (memoryAddr < 0x10000) {
000014CE  0C83 0001 2086          cmp.l     #65536,D3
000014D2  0000      
000014D4  6404      2087          bhs.s     EEPROMByteWrite_1
                    2088   ; deviceAddr = EEPROM0;
000014D6  7450      2089          moveq     #80,D2
000014D8  6002      2090          bra.s     EEPROMByteWrite_2
                    2091   EEPROMByteWrite_1:
                    2092   ; } else {
                    2093   ; deviceAddr = EEPROM1;
000014DA  7451      2094          moveq     #81,D2
                    2095   EEPROMByteWrite_2:
                    2096   ; }
                    2097   ; checkTIP();
000014DC  4E92      2098          jsr       (A2)
                    2099   ; // Set the start condition
                    2100   ; // IICStartCondition(0);
                    2101   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2102   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2103   ; // Control code, chip select, and block select (ie: Slave Address) and the R/W bit (== 0) are sent
                    2104   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000014DE  2002      2105          move.l    D2,D0
000014E0  E388      2106          lsl.l     #1,D0
000014E2  C0BC 0000 2107          and.l     #254,D0
000014E6  00FE      
000014E8  13C0 0040 2108          move.b    D0,4227078
000014EC  8006      
                    2109   ; IIC_CRSR = START | WRITE | IACK;
000014EE  13FC 0091 2110          move.b    #145,4227080
000014F2  0040 8008 
                    2111   ; // printf("Sent Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2112   ; checkTIP();
000014F6  4E92      2113          jsr       (A2)
                    2114   ; checkAck();
000014F8  4E93      2115          jsr       (A3)
                    2116   ; // printf("Status Register 2: %x\n", IIC_CRSR);
                    2117   ; // Check for ACK
                    2118   ; // printf("\r\n Slave Address Ack Status: : %d\n", checkAck()); //TIP is checked in checkAck function
                    2119   ; // Send the high-order byte of the address
                    2120   ; IIC_TXRX = (memoryAddr >> 8) & 0xFF;
000014FA  2003      2121          move.l    D3,D0
000014FC  E088      2122          lsr.l     #8,D0
000014FE  C0BC 0000 2123          and.l     #255,D0
00001502  00FF      
00001504  13C0 0040 2124          move.b    D0,4227078
00001508  8006      
                    2125   ; IIC_CRSR = WRITE | IACK;
0000150A  13FC 0011 2126          move.b    #17,4227080
0000150E  0040 8008 
                    2127   ; checkTIP();
00001512  4E92      2128          jsr       (A2)
                    2129   ; checkAck();
00001514  4E93      2130          jsr       (A3)
                    2131   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2132   ; // Send the lower-order byte of the address
                    2133   ; IIC_TXRX = (memoryAddr & 0xFF);
00001516  2003      2134          move.l    D3,D0
00001518  C0BC 0000 2135          and.l     #255,D0
0000151C  00FF      
0000151E  13C0 0040 2136          move.b    D0,4227078
00001522  8006      
                    2137   ; IIC_CRSR = WRITE | IACK;
00001524  13FC 0011 2138          move.b    #17,4227080
00001528  0040 8008 
                    2139   ; checkTIP();
0000152C  4E92      2140          jsr       (A2)
                    2141   ; checkAck();
0000152E  4E93      2142          jsr       (A3)
                    2143   ; //printf("Sent Lower Memory Byte: %02x\n", memoryAddr & 0xFF);
                    2144   ; // printf("Status Register 4: %x\n", IIC_CRSR);
                    2145   ; // Transmit byte to be written
                    2146   ; IIC_TXRX = data;
00001530  202E 0008 2147          move.l    8(A6),D0
00001534  13C0 0040 2148          move.b    D0,4227078
00001538  8006      
                    2149   ; IIC_CRSR = STOP | WRITE | IACK;
0000153A  13FC 0051 2150          move.b    #81,4227080
0000153E  0040 8008 
                    2151   ; checkTIP();
00001542  4E92      2152          jsr       (A2)
                    2153   ; checkAck();
00001544  4E93      2154          jsr       (A3)
                    2155   ; wait5ms();
00001546  4EB8 1444 2156          jsr       _wait5ms
0000154A  4CDF 0C0C 2157          movem.l   (A7)+,D2/D3/A2/A3
0000154E  4E5E      2158          unlk      A6
00001550  4E75      2159          rts
                    2160   ; // printf("Sent Data: %02x\n", data);
                    2161   ; // printf("Sent Stop Condition");
                    2162   ; // printf("Status Register 6: %x\n", IIC_CRSR);
                    2163   ; // IICCoreDisable();
                    2164   ; //printf("\r\nI2C Byte Write Complete\n");
                    2165   ; }
                    2166   ; void EEPROMFlashPageWrite(int* data, unsigned int startingGlobalAddress, unsigned int numBytes, int fullMemory) {
                    2167   _EEPROMFlashPageWrite:
00001552  4E56 0000 2168          link      A6,#0
00001556  48E7 3F3C 2169          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000155A  282E 000C 2170          move.l    12(A6),D4
0000155E  45F8 1458 2171          lea       _checkTIP.L,A2
00001562  47F8 1468 2172          lea       _checkAck.L,A3
00001566  2A6E 0010 2173          move.l    16(A6),A5
                    2174   ; unsigned int currentAddress = startingGlobalAddress; 
0000156A  2404      2175          move.l    D4,D2
                    2176   ; unsigned int endAddress = startingGlobalAddress + numBytes;
0000156C  2004      2177          move.l    D4,D0
0000156E  D08D      2178          add.l     A5,D0
00001570  2C00      2179          move.l    D0,D6
                    2180   ; unsigned int blockAddress;
                    2181   ; unsigned int deviceAddress;
                    2182   ; unsigned int pageFlag;
                    2183   ; unsigned int currIndex = 0;
00001572  387C 0000 2184          move.w    #0,A4
                    2185   ; startingGlobalAddress = startingGlobalAddress & 0xFFFF; // Mask to 16 bits
00001576  C8BC 0000 2186          and.l     #65535,D4
0000157A  FFFF      
                    2187   ; currentAddress = startingGlobalAddress; 
0000157C  2404      2188          move.l    D4,D2
                    2189   ; endAddress = startingGlobalAddress + numBytes;
0000157E  2004      2190          move.l    D4,D0
00001580  D08D      2191          add.l     A5,D0
00001582  2C00      2192          move.l    D0,D6
                    2193   ; printf("EEPROM Flash Page Write: Start Address: 0x%x, numbytes: %d\n", startingGlobalAddress, numBytes);
00001584  2F0D      2194          move.l    A5,-(A7)
00001586  2F04      2195          move.l    D4,-(A7)
00001588  4879 0000 2196          pea       @m68kde~1_29.L
0000158C  51EE      
0000158E  4EB9 0000 2197          jsr       _printf
00001592  456E      
00001594  DEFC 000C 2198          add.w     #12,A7
                    2199   ; if (currentAddress < 0x10000) {
00001598  0C82 0001 2200          cmp.l     #65536,D2
0000159C  0000      
0000159E  6406      2201          bhs.s     EEPROMFlashPageWrite_1
                    2202   ; blockAddress = startingGlobalAddress; // Lower 64KB block
000015A0  2604      2203          move.l    D4,D3
                    2204   ; deviceAddress = EEPROM0;
000015A2  7A50      2205          moveq     #80,D5
000015A4  600C      2206          bra.s     EEPROMFlashPageWrite_2
                    2207   EEPROMFlashPageWrite_1:
                    2208   ; } else {
                    2209   ; blockAddress = startingGlobalAddress - 0x10000; // Upper 64KB block
000015A6  2004      2210          move.l    D4,D0
000015A8  0480 0001 2211          sub.l     #65536,D0
000015AC  0000      
000015AE  2600      2212          move.l    D0,D3
                    2213   ; deviceAddress = EEPROM1;
000015B0  7A51      2214          moveq     #81,D5
                    2215   EEPROMFlashPageWrite_2:
                    2216   ; }
                    2217   ; checkTIP();
000015B2  4E92      2218          jsr       (A2)
                    2219   ; while (currentAddress < endAddress) {
                    2220   EEPROMFlashPageWrite_3:
000015B4  B486      2221          cmp.l     D6,D2
000015B6  6400 0106 2222          bhs       EEPROMFlashPageWrite_5
                    2223   ; // printf("Entered New Page, Current Address: %d, End Address: %d\n", currentAddress, endAddress);
                    2224   ; if (currentAddress == 0x10000) {
000015BA  0C82 0001 2225          cmp.l     #65536,D2
000015BE  0000      
000015C0  6604      2226          bne.s     EEPROMFlashPageWrite_6
                    2227   ; blockAddress = 0; // Reset to beginning of Block 1
000015C2  4283      2228          clr.l     D3
000015C4  6016      2229          bra.s     EEPROMFlashPageWrite_7
                    2230   EEPROMFlashPageWrite_6:
                    2231   ; } 
                    2232   ; else {
                    2233   ; blockAddress = (currentAddress < 0x10000) ? currentAddress : (currentAddress - 0x10000);
000015C6  0C82 0001 2234          cmp.l     #65536,D2
000015CA  0000      
000015CC  6404      2235          bhs.s     EEPROMFlashPageWrite_8
000015CE  2002      2236          move.l    D2,D0
000015D0  6008      2237          bra.s     EEPROMFlashPageWrite_9
                    2238   EEPROMFlashPageWrite_8:
000015D2  2002      2239          move.l    D2,D0
000015D4  0480 0001 2240          sub.l     #65536,D0
000015D8  0000      
                    2241   EEPROMFlashPageWrite_9:
000015DA  2600      2242          move.l    D0,D3
                    2243   EEPROMFlashPageWrite_7:
                    2244   ; }    
                    2245   ; pageFlag = 1;
000015DC  7E01      2246          moveq     #1,D7
                    2247   ; // START condition
                    2248   ; IIC_TXRX = (deviceAddress << 1) & 0xFE;    // Upper 64KB block
000015DE  2005      2249          move.l    D5,D0
000015E0  E388      2250          lsl.l     #1,D0
000015E2  C0BC 0000 2251          and.l     #254,D0
000015E6  00FE      
000015E8  13C0 0040 2252          move.b    D0,4227078
000015EC  8006      
                    2253   ; IIC_CRSR = START | WRITE | IACK;
000015EE  13FC 0091 2254          move.b    #145,4227080
000015F2  0040 8008 
                    2255   ; checkTIP();
000015F6  4E92      2256          jsr       (A2)
                    2257   ; checkAck();
000015F8  4E93      2258          jsr       (A3)
                    2259   ; // Send the two address bytes
                    2260   ; // Send the high-order byte of the address
                    2261   ; IIC_TXRX = (blockAddress >> 8) & 0xFF;
000015FA  2003      2262          move.l    D3,D0
000015FC  E088      2263          lsr.l     #8,D0
000015FE  C0BC 0000 2264          and.l     #255,D0
00001602  00FF      
00001604  13C0 0040 2265          move.b    D0,4227078
00001608  8006      
                    2266   ; IIC_CRSR = WRITE | IACK;
0000160A  13FC 0011 2267          move.b    #17,4227080
0000160E  0040 8008 
                    2268   ; checkTIP();
00001612  4E92      2269          jsr       (A2)
                    2270   ; checkAck();
00001614  4E93      2271          jsr       (A3)
                    2272   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2273   ; // Send the lower-order byte of the address
                    2274   ; IIC_TXRX = (blockAddress & 0xFF);
00001616  2003      2275          move.l    D3,D0
00001618  C0BC 0000 2276          and.l     #255,D0
0000161C  00FF      
0000161E  13C0 0040 2277          move.b    D0,4227078
00001622  8006      
                    2278   ; IIC_CRSR = WRITE | IACK;
00001624  13FC 0011 2279          move.b    #17,4227080
00001628  0040 8008 
                    2280   ; checkTIP();
0000162C  4E92      2281          jsr       (A2)
                    2282   ; checkAck();
0000162E  4E93      2283          jsr       (A3)
                    2284   ; while (pageFlag) {
                    2285   EEPROMFlashPageWrite_10:
00001630  4A87      2286          tst.l     D7
00001632  6700 0086 2287          beq       EEPROMFlashPageWrite_12
                    2288   ; if (fullMemory) {        
00001636  4AAE 0014 2289          tst.l     20(A6)
0000163A  670E      2290          beq.s     EEPROMFlashPageWrite_13
                    2291   ; IIC_TXRX = data[0];
0000163C  206E 0008 2292          move.l    8(A6),A0
00001640  2010      2293          move.l    (A0),D0
00001642  13C0 0040 2294          move.b    D0,4227078
00001646  8006      
00001648  6012      2295          bra.s     EEPROMFlashPageWrite_14
                    2296   EEPROMFlashPageWrite_13:
                    2297   ; } else {
                    2298   ; IIC_TXRX = data[currIndex];
0000164A  206E 0008 2299          move.l    8(A6),A0
0000164E  200C      2300          move.l    A4,D0
00001650  E588      2301          lsl.l     #2,D0
00001652  2030 0800 2302          move.l    0(A0,D0.L),D0
00001656  13C0 0040 2303          move.b    D0,4227078
0000165A  8006      
                    2304   EEPROMFlashPageWrite_14:
                    2305   ; }
                    2306   ; if (currentAddress == 0xFFFF) {
0000165C  0C82 0000 2307          cmp.l     #65535,D2
00001660  FFFF      
00001662  6602      2308          bne.s     EEPROMFlashPageWrite_15
                    2309   ; deviceAddress = EEPROM1;  // Switch to next device for next byte
00001664  7A51      2310          moveq     #81,D5
                    2311   EEPROMFlashPageWrite_15:
                    2312   ; }
                    2313   ; if (blockAddress % 128 == 127 || currentAddress == endAddress - 1 || currentAddress == 0xFFFF) {
00001666  2F03      2314          move.l    D3,-(A7)
00001668  4878 0080 2315          pea       128
0000166C  4EB9 0000 2316          jsr       ULDIV
00001670  3AD4      
00001672  202F 0004 2317          move.l    4(A7),D0
00001676  504F      2318          addq.w    #8,A7
00001678  0C80 0000 2319          cmp.l     #127,D0
0000167C  007F      
0000167E  6710      2320          beq.s     EEPROMFlashPageWrite_19
00001680  2006      2321          move.l    D6,D0
00001682  5380      2322          subq.l    #1,D0
00001684  B480      2323          cmp.l     D0,D2
00001686  6708      2324          beq.s     EEPROMFlashPageWrite_19
00001688  0C82 0000 2325          cmp.l     #65535,D2
0000168C  FFFF      
0000168E  6614      2326          bne.s     EEPROMFlashPageWrite_17
                    2327   EEPROMFlashPageWrite_19:
                    2328   ; IIC_CRSR = STOP | WRITE | IACK;
00001690  13FC 0051 2329          move.b    #81,4227080
00001694  0040 8008 
                    2330   ; pageFlag = 0;
00001698  7E00      2331          moveq     #0,D7
                    2332   ; checkTIP();
0000169A  4E92      2333          jsr       (A2)
                    2334   ; checkAck();
0000169C  4E93      2335          jsr       (A3)
                    2336   ; wait5ms();
0000169E  4EB8 1444 2337          jsr       _wait5ms
000016A2  600C      2338          bra.s     EEPROMFlashPageWrite_18
                    2339   EEPROMFlashPageWrite_17:
                    2340   ; } else {
                    2341   ; IIC_CRSR = WRITE | IACK;
000016A4  13FC 0011 2342          move.b    #17,4227080
000016A8  0040 8008 
                    2343   ; checkTIP();
000016AC  4E92      2344          jsr       (A2)
                    2345   ; checkAck();
000016AE  4E93      2346          jsr       (A3)
                    2347   EEPROMFlashPageWrite_18:
                    2348   ; }
                    2349   ; // ("Current Address: %d, End Address: %d, Block Address: %d\n", currentAddress, endAddress, blockAddress);
                    2350   ; currIndex++;
000016B0  524C      2351          addq.w    #1,A4
                    2352   ; currentAddress++;
000016B2  5282      2353          addq.l    #1,D2
                    2354   ; blockAddress++;  // Increment blockAddress WITH currentAddress
000016B4  5283      2355          addq.l    #1,D3
000016B6  6000 FF78 2356          bra       EEPROMFlashPageWrite_10
                    2357   EEPROMFlashPageWrite_12:
000016BA  6000 FEF8 2358          bra       EEPROMFlashPageWrite_3
                    2359   EEPROMFlashPageWrite_5:
000016BE  4CDF 3CFC 2360          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000016C2  4E5E      2361          unlk      A6
000016C4  4E75      2362          rts
                    2363   ; }
                    2364   ; }
                    2365   ; }
                    2366   ; int EEPROMRandomRead(unsigned int deviceAddr, unsigned readAddr) {
                    2367   _EEPROMRandomRead:
000016C6  4E56 FFFC 2368          link      A6,#-4
000016CA  48E7 3030 2369          movem.l   D2/D3/A2/A3,-(A7)
000016CE  45F8 1458 2370          lea       _checkTIP.L,A2
000016D2  47F8 1468 2371          lea       _checkAck.L,A3
000016D6  242E 0008 2372          move.l    8(A6),D2
000016DA  262E 000C 2373          move.l    12(A6),D3
                    2374   ; unsigned int readData;
                    2375   ; if (readAddr < 0x10000) {
000016DE  0C83 0001 2376          cmp.l     #65536,D3
000016E2  0000      
000016E4  6404      2377          bhs.s     EEPROMRandomRead_1
                    2378   ; deviceAddr = EEPROM0;
000016E6  7450      2379          moveq     #80,D2
000016E8  6002      2380          bra.s     EEPROMRandomRead_2
                    2381   EEPROMRandomRead_1:
                    2382   ; } else {
                    2383   ; deviceAddr = EEPROM1;
000016EA  7451      2384          moveq     #81,D2
                    2385   EEPROMRandomRead_2:
                    2386   ; }
                    2387   ; // Wait for bus to be idle
                    2388   ; // IICCoreEnable(); 
                    2389   ; checkTIP(); 
000016EC  4E92      2390          jsr       (A2)
                    2391   ; // Print TXRX register
                    2392   ; // Send start condition for a write
                    2393   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000016EE  2002      2394          move.l    D2,D0
000016F0  E388      2395          lsl.l     #1,D0
000016F2  C0BC 0000 2396          and.l     #254,D0
000016F6  00FE      
000016F8  13C0 0040 2397          move.b    D0,4227078
000016FC  8006      
                    2398   ; IIC_CRSR = START | WRITE | IACK;
000016FE  13FC 0091 2399          move.b    #145,4227080
00001702  0040 8008 
                    2400   ; checkTIP();
00001706  4E92      2401          jsr       (A2)
                    2402   ; checkAck();
00001708  4E93      2403          jsr       (A3)
                    2404   ; //printf("Sending Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2405   ; // Send the high-order byte of the address
                    2406   ; IIC_TXRX = (readAddr >> 8) & 0xFF;
0000170A  2003      2407          move.l    D3,D0
0000170C  E088      2408          lsr.l     #8,D0
0000170E  C0BC 0000 2409          and.l     #255,D0
00001712  00FF      
00001714  13C0 0040 2410          move.b    D0,4227078
00001718  8006      
                    2411   ; IIC_CRSR = WRITE | IACK;
0000171A  13FC 0011 2412          move.b    #17,4227080
0000171E  0040 8008 
                    2413   ; //printf("Sent Upper Memory Byte: %02x\n", readAddr >> 8);
                    2414   ; checkTIP();
00001722  4E92      2415          jsr       (A2)
                    2416   ; checkAck();
00001724  4E93      2417          jsr       (A3)
                    2418   ; // Send the low-order byte of the address
                    2419   ; IIC_TXRX = (readAddr & 0xFF);
00001726  2003      2420          move.l    D3,D0
00001728  C0BC 0000 2421          and.l     #255,D0
0000172C  00FF      
0000172E  13C0 0040 2422          move.b    D0,4227078
00001732  8006      
                    2423   ; IIC_CRSR = WRITE | IACK;
00001734  13FC 0011 2424          move.b    #17,4227080
00001738  0040 8008 
                    2425   ; //printf("Sent Lower Memory Byte: %02x\n", readAddr & 0xFF);
                    2426   ; checkTIP();
0000173C  4E92      2427          jsr       (A2)
                    2428   ; checkAck();
0000173E  4E93      2429          jsr       (A3)
                    2430   ; // send START condition again followed by slave address with R/W set to 1
                    2431   ; IIC_TXRX = ((deviceAddr << 1) | 0x01);
00001740  2002      2432          move.l    D2,D0
00001742  E388      2433          lsl.l     #1,D0
00001744  80BC 0000 2434          or.l      #1,D0
00001748  0001      
0000174A  13C0 0040 2435          move.b    D0,4227078
0000174E  8006      
                    2436   ; IIC_CRSR = START | WRITE | IACK;
00001750  13FC 0091 2437          move.b    #145,4227080
00001754  0040 8008 
                    2438   ; checkTIP();
00001758  4E92      2439          jsr       (A2)
                    2440   ; checkAck();
0000175A  4E93      2441          jsr       (A3)
                    2442   ; // IICStopCondition();
                    2443   ; IIC_CRSR = STOP | READ | IACK | NACK; // STOP + READ + IACK + NACK
0000175C  13FC 0069 2444          move.b    #105,4227080
00001760  0040 8008 
                    2445   ; checkTIP();
00001764  4E92      2446          jsr       (A2)
                    2447   ; // Check if IF flag is sent, and if so read the data
                    2448   ; while (!(IIC_CRSR & 0x1));
                    2449   EEPROMRandomRead_3:
00001766  1039 0040 2450          move.b    4227080,D0
0000176A  8008      
0000176C  C03C 0001 2451          and.b     #1,D0
00001770  6602      2452          bne.s     EEPROMRandomRead_5
00001772  60F2      2453          bra       EEPROMRandomRead_3
                    2454   EEPROMRandomRead_5:
                    2455   ; IIC_CRSR = 0;
00001774  4239 0040 2456          clr.b     4227080
00001778  8008      
                    2457   ; readData = IIC_TXRX;
0000177A  1039 0040 2458          move.b    4227078,D0
0000177E  8006      
00001780  C0BC 0000 2459          and.l     #255,D0
00001784  00FF      
00001786  2D40 FFFC 2460          move.l    D0,-4(A6)
                    2461   ; return readData;    
0000178A  202E FFFC 2462          move.l    -4(A6),D0
0000178E  4CDF 0C0C 2463          movem.l   (A7)+,D2/D3/A2/A3
00001792  4E5E      2464          unlk      A6
00001794  4E75      2465          rts
                    2466   ; }
                    2467   ; void EEPROMReadBlock0(unsigned int startAddr, int* readLen) {
                    2468   _EEPROMReadBlock0:
00001796  4E56 FFFC 2469          link      A6,#-4
0000179A  48E7 3C30 2470          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
0000179E  45F8 1458 2471          lea       _checkTIP.L,A2
000017A2  47F8 1468 2472          lea       _checkAck.L,A3
000017A6  262E 0008 2473          move.l    8(A6),D3
                    2474   ; unsigned int currAddr;
                    2475   ; unsigned int endAddr;
                    2476   ; unsigned int readData;
                    2477   ; int exitFlag = 0;
000017AA  4285      2478          clr.l     D5
                    2479   ; startAddr = startAddr & 0xFFFF; // Mask to 16 bits
000017AC  C6BC 0000 2480          and.l     #65535,D3
000017B0  FFFF      
                    2481   ; currAddr = startAddr;
000017B2  2403      2482          move.l    D3,D2
                    2483   ; endAddr = startAddr + *readLen;
000017B4  2003      2484          move.l    D3,D0
000017B6  206E 000C 2485          move.l    12(A6),A0
000017BA  D090      2486          add.l     (A0),D0
000017BC  2800      2487          move.l    D0,D4
                    2488   ; //printf("Start Addr: %d\n Curr Addr: %d, Read Len: %d\n", startAddr, currAddr, *readLen);
                    2489   ; checkTIP();
000017BE  4E92      2490          jsr       (A2)
                    2491   ; IIC_TXRX = ((EEPROM0 << 1) & 0xFE); // Send EEPROM address with write bit
000017C0  13FC 00A0 2492          move.b    #160,4227078
000017C4  0040 8006 
                    2493   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
000017C8  13FC 0091 2494          move.b    #145,4227080
000017CC  0040 8008 
                    2495   ; checkTIP();
000017D0  4E92      2496          jsr       (A2)
                    2497   ; checkAck(); 
000017D2  4E93      2498          jsr       (A3)
                    2499   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
000017D4  2002      2500          move.l    D2,D0
000017D6  E088      2501          lsr.l     #8,D0
000017D8  C0BC 0000 2502          and.l     #255,D0
000017DC  00FF      
000017DE  13C0 0040 2503          move.b    D0,4227078
000017E2  8006      
                    2504   ; IIC_CRSR = WRITE | IACK; // Write command
000017E4  13FC 0011 2505          move.b    #17,4227080
000017E8  0040 8008 
                    2506   ; checkTIP();
000017EC  4E92      2507          jsr       (A2)
                    2508   ; checkAck();
000017EE  4E93      2509          jsr       (A3)
                    2510   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
000017F0  2002      2511          move.l    D2,D0
000017F2  C0BC 0000 2512          and.l     #255,D0
000017F6  00FF      
000017F8  13C0 0040 2513          move.b    D0,4227078
000017FC  8006      
                    2514   ; IIC_CRSR = WRITE | IACK; // Write command
000017FE  13FC 0011 2515          move.b    #17,4227080
00001802  0040 8008 
                    2516   ; checkTIP();
00001806  4E92      2517          jsr       (A2)
                    2518   ; checkAck();
00001808  4E93      2519          jsr       (A3)
                    2520   ; // Repeated start condition here:
                    2521   ; IIC_TXRX = ((EEPROM0 << 1) | 0x01); // (A3) Send EEPROM address with read bit
0000180A  13FC 00A1 2522          move.b    #161,4227078
0000180E  0040 8006 
                    2523   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
00001812  13FC 0091 2524          move.b    #145,4227080
00001816  0040 8008 
                    2525   ; checkTIP();
0000181A  4E92      2526          jsr       (A2)
                    2527   ; checkAck();
0000181C  4E93      2528          jsr       (A3)
                    2529   ; // Evaluate data here
                    2530   ; for (currAddr = startAddr; currAddr < endAddr; currAddr++) {
0000181E  2403      2531          move.l    D3,D2
                    2532   EEPROMReadBlock0_1:
00001820  B484      2533          cmp.l     D4,D2
00001822  6400 009A 2534          bhs       EEPROMReadBlock0_3
                    2535   ; if (currAddr == 0xFFFF || currAddr == endAddr - 1) {
00001826  0C82 0000 2536          cmp.l     #65535,D2
0000182A  FFFF      
0000182C  6708      2537          beq.s     EEPROMReadBlock0_6
0000182E  2004      2538          move.l    D4,D0
00001830  5380      2539          subq.l    #1,D0
00001832  B480      2540          cmp.l     D0,D2
00001834  660C      2541          bne.s     EEPROMReadBlock0_4
                    2542   EEPROMReadBlock0_6:
                    2543   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
00001836  13FC 0069 2544          move.b    #105,4227080
0000183A  0040 8008 
                    2545   ; exitFlag = 1;
0000183E  7A01      2546          moveq     #1,D5
00001840  6008      2547          bra.s     EEPROMReadBlock0_5
                    2548   EEPROMReadBlock0_4:
                    2549   ; } else {
                    2550   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
00001842  13FC 0021 2551          move.b    #33,4227080
00001846  0040 8008 
                    2552   EEPROMReadBlock0_5:
                    2553   ; }
                    2554   ; (*readLen)--;
0000184A  206E 000C 2555          move.l    12(A6),A0
0000184E  5390      2556          subq.l    #1,(A0)
                    2557   ; checkTIP();
00001850  4E92      2558          jsr       (A2)
                    2559   ; checkAck(); // Check for ACK
00001852  4E93      2560          jsr       (A3)
                    2561   ; // Read data from EEPROM
                    2562   ; while (!(IIC_CRSR & 0x1)); // Wait for IF flag to be set
                    2563   EEPROMReadBlock0_7:
00001854  1039 0040 2564          move.b    4227080,D0
00001858  8008      
0000185A  C03C 0001 2565          and.b     #1,D0
0000185E  6602      2566          bne.s     EEPROMReadBlock0_9
00001860  60F2      2567          bra       EEPROMReadBlock0_7
                    2568   EEPROMReadBlock0_9:
                    2569   ; IIC_CRSR = 0; // Clear IF flag
00001862  4239 0040 2570          clr.b     4227080
00001866  8008      
                    2571   ; readData = IIC_TXRX; // Read data from EEPROM
00001868  1039 0040 2572          move.b    4227078,D0
0000186C  8006      
0000186E  C0BC 0000 2573          and.l     #255,D0
00001872  00FF      
00001874  2D40 FFFC 2574          move.l    D0,-4(A6)
                    2575   ; if ((currAddr % 1000) == 0) {
00001878  2F02      2576          move.l    D2,-(A7)
0000187A  4878 03E8 2577          pea       1000
0000187E  4EB9 0000 2578          jsr       ULDIV
00001882  3AD4      
00001884  202F 0004 2579          move.l    4(A7),D0
00001888  504F      2580          addq.w    #8,A7
0000188A  4A80      2581          tst.l     D0
0000188C  6616      2582          bne.s     EEPROMReadBlock0_10
                    2583   ; printf("\r\n Block 0 Address: 0x%04X: %d\n", currAddr, readData);
0000188E  2F2E FFFC 2584          move.l    -4(A6),-(A7)
00001892  2F02      2585          move.l    D2,-(A7)
00001894  4879 0000 2586          pea       @m68kde~1_30.L
00001898  522A      
0000189A  4EB9 0000 2587          jsr       _printf
0000189E  456E      
000018A0  DEFC 000C 2588          add.w     #12,A7
                    2589   EEPROMReadBlock0_10:
                    2590   ; }
                    2591   ; if (exitFlag) {
000018A4  4A85      2592          tst.l     D5
000018A6  6710      2593          beq.s     EEPROMReadBlock0_12
                    2594   ; printf("\r\n Exiting EEPROM Read Block 0\n");
000018A8  4879 0000 2595          pea       @m68kde~1_31.L
000018AC  524A      
000018AE  4EB9 0000 2596          jsr       _printf
000018B2  456E      
000018B4  584F      2597          addq.w    #4,A7
                    2598   ; break;
000018B6  6006      2599          bra.s     EEPROMReadBlock0_3
                    2600   EEPROMReadBlock0_12:
000018B8  5282      2601          addq.l    #1,D2
000018BA  6000 FF64 2602          bra       EEPROMReadBlock0_1
                    2603   EEPROMReadBlock0_3:
000018BE  4CDF 0C3C 2604          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
000018C2  4E5E      2605          unlk      A6
000018C4  4E75      2606          rts
                    2607   ; }
                    2608   ; }
                    2609   ; }
                    2610   ; // STILL NEED TO TEST BLOCK 1 MORE AND CROSSING THE BLOCK BOUNDARY
                    2611   ; void EEPROMReadBlock1(int startAddr, int* readLen) {
                    2612   _EEPROMReadBlock1:
000018C6  4E56 FFF8 2613          link      A6,#-8
000018CA  48E7 3030 2614          movem.l   D2/D3/A2/A3,-(A7)
000018CE  45F8 1458 2615          lea       _checkTIP.L,A2
000018D2  47F8 1468 2616          lea       _checkAck.L,A3
                    2617   ; unsigned int currAddr = startAddr & 0xFFFF; // Mask to 16 bits
000018D6  202E 0008 2618          move.l    8(A6),D0
000018DA  C0BC 0000 2619          and.l     #65535,D0
000018DE  FFFF      
000018E0  2400      2620          move.l    D0,D2
                    2621   ; unsigned int endAddr = currAddr + *readLen;
000018E2  2002      2622          move.l    D2,D0
000018E4  206E 000C 2623          move.l    12(A6),A0
000018E8  D090      2624          add.l     (A0),D0
000018EA  2D40 FFF8 2625          move.l    D0,-8(A6)
                    2626   ; unsigned int readData;
                    2627   ; int exitFlag = 0;
000018EE  4283      2628          clr.l     D3
                    2629   ; checkTIP();
000018F0  4E92      2630          jsr       (A2)
                    2631   ; IIC_TXRX = ((EEPROM1 << 1) & 0xFE); // Send EEPROM address with write bit
000018F2  13FC 00A2 2632          move.b    #162,4227078
000018F6  0040 8006 
                    2633   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
000018FA  13FC 0091 2634          move.b    #145,4227080
000018FE  0040 8008 
                    2635   ; checkTIP();
00001902  4E92      2636          jsr       (A2)
                    2637   ; checkAck(); 
00001904  4E93      2638          jsr       (A3)
                    2639   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
00001906  2002      2640          move.l    D2,D0
00001908  E088      2641          lsr.l     #8,D0
0000190A  C0BC 0000 2642          and.l     #255,D0
0000190E  00FF      
00001910  13C0 0040 2643          move.b    D0,4227078
00001914  8006      
                    2644   ; IIC_CRSR = WRITE | IACK; // Write command
00001916  13FC 0011 2645          move.b    #17,4227080
0000191A  0040 8008 
                    2646   ; checkTIP();
0000191E  4E92      2647          jsr       (A2)
                    2648   ; checkAck();
00001920  4E93      2649          jsr       (A3)
                    2650   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
00001922  2002      2651          move.l    D2,D0
00001924  C0BC 0000 2652          and.l     #255,D0
00001928  00FF      
0000192A  13C0 0040 2653          move.b    D0,4227078
0000192E  8006      
                    2654   ; IIC_CRSR = WRITE | IACK; // Write command
00001930  13FC 0011 2655          move.b    #17,4227080
00001934  0040 8008 
                    2656   ; checkTIP();
00001938  4E92      2657          jsr       (A2)
                    2658   ; checkAck();
0000193A  4E93      2659          jsr       (A3)
                    2660   ; // Repeated start condition here:
                    2661   ; IIC_TXRX = ((EEPROM1 << 1) | 0x01); // (A3) Send EEPROM address with read bit
0000193C  13FC 00A3 2662          move.b    #163,4227078
00001940  0040 8006 
                    2663   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
00001944  13FC 0091 2664          move.b    #145,4227080
00001948  0040 8008 
                    2665   ; checkTIP();
0000194C  4E92      2666          jsr       (A2)
                    2667   ; checkAck();
0000194E  4E93      2668          jsr       (A3)
                    2669   ; // Evaluate data here
                    2670   ; for (currAddr = startAddr & 0xFFFF; currAddr < endAddr; currAddr++) {
00001950  202E 0008 2671          move.l    8(A6),D0
00001954  C0BC 0000 2672          and.l     #65535,D0
00001958  FFFF      
0000195A  2400      2673          move.l    D0,D2
                    2674   EEPROMReadBlock1_1:
0000195C  B4AE FFF8 2675          cmp.l     -8(A6),D2
00001960  6400 009A 2676          bhs       EEPROMReadBlock1_3
                    2677   ; if (currAddr == 0xFFFF) {
00001964  0C82 0000 2678          cmp.l     #65535,D2
00001968  FFFF      
0000196A  660C      2679          bne.s     EEPROMReadBlock1_4
                    2680   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
0000196C  13FC 0069 2681          move.b    #105,4227080
00001970  0040 8008 
                    2682   ; exitFlag = 1;
00001974  7601      2683          moveq     #1,D3
00001976  6008      2684          bra.s     EEPROMReadBlock1_5
                    2685   EEPROMReadBlock1_4:
                    2686   ; } else {
                    2687   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
00001978  13FC 0021 2688          move.b    #33,4227080
0000197C  0040 8008 
                    2689   EEPROMReadBlock1_5:
                    2690   ; }
                    2691   ; (*readLen)--;
00001980  206E 000C 2692          move.l    12(A6),A0
00001984  5390      2693          subq.l    #1,(A0)
                    2694   ; checkTIP();
00001986  4E92      2695          jsr       (A2)
                    2696   ; checkAck(); // Check for ACK
00001988  4E93      2697          jsr       (A3)
                    2698   ; // Read data from EEPROM
                    2699   ; while (!IIC_CRSR & 0x1); // Wait for IF flag to be set
                    2700   EEPROMReadBlock1_6:
0000198A  4A39 0040 2701          tst.b     4227080
0000198E  8008      
00001990  6604      2702          bne.s     EEPROMReadBlock1_9
00001992  7001      2703          moveq     #1,D0
00001994  6002      2704          bra.s     EEPROMReadBlock1_10
                    2705   EEPROMReadBlock1_9:
00001996  4280      2706          clr.l     D0
                    2707   EEPROMReadBlock1_10:
00001998  C03C 0001 2708          and.b     #1,D0
0000199C  6702      2709          beq.s     EEPROMReadBlock1_8
0000199E  60EA      2710          bra       EEPROMReadBlock1_6
                    2711   EEPROMReadBlock1_8:
                    2712   ; IIC_CRSR = 0; // Clear IF flag
000019A0  4239 0040 2713          clr.b     4227080
000019A4  8008      
                    2714   ; readData = IIC_TXRX; // Read data from EEPROM
000019A6  1039 0040 2715          move.b    4227078,D0
000019AA  8006      
000019AC  C0BC 0000 2716          and.l     #255,D0
000019B0  00FF      
000019B2  2D40 FFFC 2717          move.l    D0,-4(A6)
                    2718   ; if ((currAddr % 1000) == 0) {
000019B6  2F02      2719          move.l    D2,-(A7)
000019B8  4878 03E8 2720          pea       1000
000019BC  4EB9 0000 2721          jsr       ULDIV
000019C0  3AD4      
000019C2  202F 0004 2722          move.l    4(A7),D0
000019C6  504F      2723          addq.w    #8,A7
000019C8  4A80      2724          tst.l     D0
000019CA  6616      2725          bne.s     EEPROMReadBlock1_11
                    2726   ; printf("\r\n Block 1 Address: 0x%04X: %d\n", currAddr, readData);
000019CC  2F2E FFFC 2727          move.l    -4(A6),-(A7)
000019D0  2F02      2728          move.l    D2,-(A7)
000019D2  4879 0000 2729          pea       @m68kde~1_32.L
000019D6  526A      
000019D8  4EB9 0000 2730          jsr       _printf
000019DC  456E      
000019DE  DEFC 000C 2731          add.w     #12,A7
                    2732   EEPROMReadBlock1_11:
                    2733   ; }
                    2734   ; if (exitFlag) {
000019E2  4A83      2735          tst.l     D3
000019E4  6710      2736          beq.s     EEPROMReadBlock1_13
                    2737   ; printf("\r\n Exiting EEPROM Read Block 1\n");
000019E6  4879 0000 2738          pea       @m68kde~1_33.L
000019EA  528A      
000019EC  4EB9 0000 2739          jsr       _printf
000019F0  456E      
000019F2  584F      2740          addq.w    #4,A7
                    2741   ; break;
000019F4  6006      2742          bra.s     EEPROMReadBlock1_3
                    2743   EEPROMReadBlock1_13:
000019F6  5282      2744          addq.l    #1,D2
000019F8  6000 FF62 2745          bra       EEPROMReadBlock1_1
                    2746   EEPROMReadBlock1_3:
000019FC  4CDF 0C0C 2747          movem.l   (A7)+,D2/D3/A2/A3
00001A00  4E5E      2748          unlk      A6
00001A02  4E75      2749          rts
                    2750   ; }
                    2751   ; }
                    2752   ; }
                    2753   ; int EEPROMSequentialRead(unsigned int startGlobalAddr, int readLen) {
                    2754   _EEPROMSequentialRead:
00001A04  4E56 0000 2755          link      A6,#0
00001A08  48E7 2020 2756          movem.l   D2/A2,-(A7)
00001A0C  45EE 000C 2757          lea       12(A6),A2
00001A10  242E 0008 2758          move.l    8(A6),D2
                    2759   ; // REMOVE THIS: startGlobalAddr = startGlobalAddr & 0xFFFF;
                    2760   ; if (startGlobalAddr <= 0xFFFF) {
00001A14  0C82 0000 2761          cmp.l     #65535,D2
00001A18  FFFF      
00001A1A  6220      2762          bhi.s     EEPROMSequentialRead_1
                    2763   ; EEPROMReadBlock0(startGlobalAddr, &readLen);
00001A1C  2F0A      2764          move.l    A2,-(A7)
00001A1E  2F02      2765          move.l    D2,-(A7)
00001A20  4EB8 1796 2766          jsr       _EEPROMReadBlock0
00001A24  504F      2767          addq.w    #8,A7
                    2768   ; if (readLen > 0) {
00001A26  2012      2769          move.l    (A2),D0
00001A28  0C80 0000 2770          cmp.l     #0,D0
00001A2C  0000      
00001A2E  6F0A      2771          ble.s     EEPROMSequentialRead_3
                    2772   ; EEPROMReadBlock1(0, &readLen);
00001A30  2F0A      2773          move.l    A2,-(A7)
00001A32  42A7      2774          clr.l     -(A7)
00001A34  4EB8 18C6 2775          jsr       _EEPROMReadBlock1
00001A38  504F      2776          addq.w    #8,A7
                    2777   EEPROMSequentialRead_3:
00001A3A  6012      2778          bra.s     EEPROMSequentialRead_2
                    2779   EEPROMSequentialRead_1:
                    2780   ; }
                    2781   ; } else {
                    2782   ; EEPROMReadBlock1(startGlobalAddr - 0x10000, &readLen);
00001A3C  2F0A      2783          move.l    A2,-(A7)
00001A3E  2202      2784          move.l    D2,D1
00001A40  0481 0001 2785          sub.l     #65536,D1
00001A44  0000      
00001A46  2F01      2786          move.l    D1,-(A7)
00001A48  4EB8 18C6 2787          jsr       _EEPROMReadBlock1
00001A4C  504F      2788          addq.w    #8,A7
                    2789   EEPROMSequentialRead_2:
00001A4E  4CDF 0404 2790          movem.l   (A7)+,D2/A2
00001A52  4E5E      2791          unlk      A6
00001A54  4E75      2792          rts
                    2793   ; }
                    2794   ; }
                    2795   ; // I2CTest() {
                    2796   ; //     unsigned int i, j;
                    2797   ; //     unsigned int readData;
                    2798   ; //     char c, text[150];
                    2799   ; //     unsigned char dataByte;
                    2800   ; //     unsigned int address, size, intBuffer;
                    2801   ; //     unsigned int testChoice = 0;
                    2802   ; //     unsigned char startAddress;
                    2803   ; //     unsigned int dataPattern = 0;
                    2804   ; //     printf("\r\n I2C Test\n");
                    2805   ; //     printf("\r\nInitializing I2C...\n");
                    2806   ; //     IIC_Init();
                    2807   ; //     scanflush();
                    2808   ; //     memset(text, 0, sizeof(text));  // fills with zeros
                    2809   ; //     printf("\r\nChoose option:\n");  // Fixed missing \n
                    2810   ; //     printf("1 Read Single Byte from EEPROM\n");
                    2811   ; //     printf("2 Write Single Byte to EEPROM\n");
                    2812   ; //     printf("3 Read Block of Data from EEPROM\n");
                    2813   ; //     printf("4 Write Block of Data to EEPROM\n");
                    2814   ; //     testChoice = _getch() - 48;    
                    2815   ; //     // Option 1: Read Single Byte
                    2816   ; //     if (testChoice == 1) {
                    2817   ; //         printf("\r\nRead Single Byte\n");
                    2818   ; //         printf("Enter address: 0x");
                    2819   ; //         address = Get8HexDigits(0);
                    2820   ; //         dataByte = EEPROMRandomRead(EEPROM0, address);
                    2821   ; //         printf("Read from address 0x%X: 0x%02X\n", address, dataByte);
                    2822   ; //     }
                    2823   ; //     // Option 2: Write Single Byte
                    2824   ; //     if (testChoice == 2) {
                    2825   ; //         printf("\r\nWrite Single Byte\n"); 
                    2826   ; //         printf("Enter address: 0x");
                    2827   ; //         address = Get8HexDigits(0);
                    2828   ; //         printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
                    2829   ; //         intBuffer = _getch() - 48;
                    2830   ; //         // scanf("%d", &intBuffer);
                    2831   ; //         switch (intBuffer) {
                    2832   ; //             case(0):
                    2833   ; //                 dataPattern = 0x00; break;
                    2834   ; //             case(1):
                    2835   ; //                 dataPattern = 0xB2; break;
                    2836   ; //             case(2):
                    2837   ; //                 dataPattern = 0xC3; break;
                    2838   ; //             case(3):
                    2839   ; //                 dataPattern = 0xD4; break;
                    2840   ; //         }
                    2841   ; //         dataPattern &= 0xFF;
                    2842   ; //         EEPROMByteWrite(dataPattern, EEPROM0, address);
                    2843   ; //         printf("Wrote 0x%02X to address 0x%X\n", dataPattern, address);
                    2844   ; //         readData = EEPROMRandomRead(EEPROM0, address);
                    2845   ; //         printf("Read back: 0x%02X\n", readData);
                    2846   ; //     }
                    2847   ; //     // Option 3: Read Block of Data
                    2848   ; //     if (testChoice == 3) {
                    2849   ; //         printf("\r\nRead Block of Data\n");
                    2850   ; //         printf("Enter start address (hex): 0x");
                    2851   ; //         startAddress = Get8HexDigits(0);
                    2852   ; //         switch (intBuffer) {
                    2853   ; //             case(0):
                    2854   ; //                 dataPattern = 0x00; break;
                    2855   ; //             case(1):
                    2856   ; //                 dataPattern = 0xB2; break;
                    2857   ; //             case(2):
                    2858   ; //                 dataPattern = 0xC3; break;
                    2859   ; //             case(3):
                    2860   ; //                 dataPattern = 0xD4; break;
                    2861   ; //         }
                    2862   ; //         printf("\nReading %d bytes starting from address 0x%X...\n", numBytes, startAddress);
                    2863   ; //         EEPROMSequentialRead(startAddress, numBytes);
                    2864   ; //     }
                    2865   ; //     // Option 4: Write Block of Data
                    2866   ; //     if (testChoice == 4) {
                    2867   ; //     }
                    2868   ; // Updated I2CTest function with improved EEPROM read and write functionality
                    2869   ; int I2CTest() {
                    2870   _I2CTest:
00001A56  4E56 FF4C 2871          link      A6,#-180
00001A5A  48E7 3F3C 2872          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001A5E  45F9 0000 2873          lea       _printf.L,A2
00001A62  456E      
00001A64  47F8 0CA4 2874          lea       _Get8HexDigits.L,A3
00001A68  49F8 1A04 2875          lea       _EEPROMSequentialRead.L,A4
00001A6C  4BF8 0B68 2876          lea       __getch.L,A5
                    2877   ; unsigned int i, j;
                    2878   ; unsigned int readData;
                    2879   ; char c, text[150];
                    2880   ; unsigned char dataByte;
                    2881   ; unsigned int address, size, intBuffer;
                    2882   ; unsigned int testChoice = 0;
00001A70  4285      2883          clr.l     D5
                    2884   ; unsigned int startAddress;
                    2885   ; unsigned int dataPattern = 0;
00001A72  4282      2886          clr.l     D2
                    2887   ; unsigned int numBytes = 0;
00001A74  4283      2888          clr.l     D3
                    2889   ; unsigned int totalsize = 0;
00001A76  42AE FFF8 2890          clr.l     -8(A6)
                    2891   ; int arr[1];
                    2892   ; printf("\r\n I2C Test\n");
00001A7A  4879 0000 2893          pea       @m68kde~1_34.L
00001A7E  52AA      
00001A80  4E92      2894          jsr       (A2)
00001A82  584F      2895          addq.w    #4,A7
                    2896   ; printf("\r\nInitializing I2C...\n");
00001A84  4879 0000 2897          pea       @m68kde~1_35.L
00001A88  52B8      
00001A8A  4E92      2898          jsr       (A2)
00001A8C  584F      2899          addq.w    #4,A7
                    2900   ; IIC_Init();
00001A8E  4EB8 1428 2901          jsr       _IIC_Init
                    2902   ; scanflush();
00001A92  4EB9 0000 2903          jsr       _scanflush
00001A96  3F64      
                    2904   ; memset(text, 0, sizeof(text));  // fills with zeros
00001A98  4878 0096 2905          pea       150
00001A9C  42A7      2906          clr.l     -(A7)
00001A9E  486E FF5C 2907          pea       -164(A6)
00001AA2  4EB9 0000 2908          jsr       _memset
00001AA6  3C7E      
00001AA8  DEFC 000C 2909          add.w     #12,A7
                    2910   ; printf("\r\nChoose option:\n");
00001AAC  4879 0000 2911          pea       @m68kde~1_36.L
00001AB0  52D0      
00001AB2  4E92      2912          jsr       (A2)
00001AB4  584F      2913          addq.w    #4,A7
                    2914   ; printf("1 Read Single Byte from EEPROM\n");
00001AB6  4879 0000 2915          pea       @m68kde~1_37.L
00001ABA  52E2      
00001ABC  4E92      2916          jsr       (A2)
00001ABE  584F      2917          addq.w    #4,A7
                    2918   ; printf("2 Write Single Byte to EEPROM\n");
00001AC0  4879 0000 2919          pea       @m68kde~1_38.L
00001AC4  5302      
00001AC6  4E92      2920          jsr       (A2)
00001AC8  584F      2921          addq.w    #4,A7
                    2922   ; printf("3 Read Block of Data from EEPROM\n");
00001ACA  4879 0000 2923          pea       @m68kde~1_39.L
00001ACE  5322      
00001AD0  4E92      2924          jsr       (A2)
00001AD2  584F      2925          addq.w    #4,A7
                    2926   ; printf("4 Write Block of Data to EEPROM\n");
00001AD4  4879 0000 2927          pea       @m68kde~1_40.L
00001AD8  5344      
00001ADA  4E92      2928          jsr       (A2)
00001ADC  584F      2929          addq.w    #4,A7
                    2930   ; testChoice = _getch() - 48;    
00001ADE  4E95      2931          jsr       (A5)
00001AE0  0480 0000 2932          sub.l     #48,D0
00001AE4  0030      
00001AE6  2A00      2933          move.l    D0,D5
                    2934   ; // Option 1: Read Single Byte
                    2935   ; if (testChoice == 1) {
00001AE8  0C85 0000 2936          cmp.l     #1,D5
00001AEC  0001      
00001AEE  6600 004C 2937          bne       I2CTest_1
                    2938   ; printf("\r\nRead Single Byte\n");
00001AF2  4879 0000 2939          pea       @m68kde~1_41.L
00001AF6  5366      
00001AF8  4E92      2940          jsr       (A2)
00001AFA  584F      2941          addq.w    #4,A7
                    2942   ; printf("Enter address (hex): 0x");
00001AFC  4879 0000 2943          pea       @m68kde~1_42.L
00001B00  537A      
00001B02  4E92      2944          jsr       (A2)
00001B04  584F      2945          addq.w    #4,A7
                    2946   ; address = Get8HexDigits(0);
00001B06  42A7      2947          clr.l     -(A7)
00001B08  4E93      2948          jsr       (A3)
00001B0A  584F      2949          addq.w    #4,A7
00001B0C  2800      2950          move.l    D0,D4
                    2951   ; dataByte = EEPROMRandomRead(EEPROM0, address);
00001B0E  2F04      2952          move.l    D4,-(A7)
00001B10  4878 0050 2953          pea       80
00001B14  4EB8 16C6 2954          jsr       _EEPROMRandomRead
00001B18  504F      2955          addq.w    #8,A7
00001B1A  1D40 FFF3 2956          move.b    D0,-13(A6)
                    2957   ; printf("\r\nRead from address 0x%X: 0x%02X\n", address, dataByte);
00001B1E  122E FFF3 2958          move.b    -13(A6),D1
00001B22  C2BC 0000 2959          and.l     #255,D1
00001B26  00FF      
00001B28  2F01      2960          move.l    D1,-(A7)
00001B2A  2F04      2961          move.l    D4,-(A7)
00001B2C  4879 0000 2962          pea       @m68kde~1_43.L
00001B30  5392      
00001B32  4E92      2963          jsr       (A2)
00001B34  DEFC 000C 2964          add.w     #12,A7
00001B38  6000 0220 2965          bra       I2CTest_17
                    2966   I2CTest_1:
                    2967   ; }
                    2968   ; // Option 2: Write Single Byte
                    2969   ; else if (testChoice == 2) {
00001B3C  0C85 0000 2970          cmp.l     #2,D5
00001B40  0002      
00001B42  6600 00DE 2971          bne       I2CTest_3
                    2972   ; printf("\r\nWrite Single Byte\n"); 
00001B46  4879 0000 2973          pea       @m68kde~1_44.L
00001B4A  53B4      
00001B4C  4E92      2974          jsr       (A2)
00001B4E  584F      2975          addq.w    #4,A7
                    2976   ; printf("\r\nEnter address (hex): 0x");
00001B50  4879 0000 2977          pea       @m68kde~1_45.L
00001B54  53CA      
00001B56  4E92      2978          jsr       (A2)
00001B58  584F      2979          addq.w    #4,A7
                    2980   ; address = Get8HexDigits(0);
00001B5A  42A7      2981          clr.l     -(A7)
00001B5C  4E93      2982          jsr       (A3)
00001B5E  584F      2983          addq.w    #4,A7
00001B60  2800      2984          move.l    D0,D4
                    2985   ; printf("\nEnter which data pattern you want to write into memory:\n");
00001B62  4879 0000 2986          pea       @m68kde~1_46.L
00001B66  53E4      
00001B68  4E92      2987          jsr       (A2)
00001B6A  584F      2988          addq.w    #4,A7
                    2989   ; printf(" 0: 0x00\n 1: 0xB2\n 2: 0xC3\n 3: 0xD4\n 4: Custom value\n");
00001B6C  4879 0000 2990          pea       @m68kde~1_47.L
00001B70  541E      
00001B72  4E92      2991          jsr       (A2)
00001B74  584F      2992          addq.w    #4,A7
                    2993   ; intBuffer = _getch() - 48;
00001B76  4E95      2994          jsr       (A5)
00001B78  0480 0000 2995          sub.l     #48,D0
00001B7C  0030      
00001B7E  2E00      2996          move.l    D0,D7
                    2997   ; if (intBuffer == 4) {
00001B80  0C87 0000 2998          cmp.l     #4,D7
00001B84  0004      
00001B86  6618      2999          bne.s     I2CTest_5
                    3000   ; printf("Select pattern");
00001B88  4879 0000 3001          pea       @m68kde~1_48.L
00001B8C  5454      
00001B8E  4E92      3002          jsr       (A2)
00001B90  584F      3003          addq.w    #4,A7
                    3004   ; dataPattern = Get2HexDigits(0);
00001B92  42A7      3005          clr.l     -(A7)
00001B94  4EB8 0C04 3006          jsr       _Get2HexDigits
00001B98  584F      3007          addq.w    #4,A7
00001B9A  2400      3008          move.l    D0,D2
00001B9C  6000 003C 3009          bra       I2CTest_8
                    3010   I2CTest_5:
                    3011   ; } else {
                    3012   ; switch (intBuffer) {
00001BA0  2007      3013          move.l    D7,D0
00001BA2  0C80 0000 3014          cmp.l     #4,D0
00001BA6  0004      
00001BA8  642E      3015          bhs.s     I2CTest_7
00001BAA  E380      3016          asl.l     #1,D0
00001BAC  303B 0806 3017          move.w    I2CTest_9(PC,D0.L),D0
00001BB0  4EFB 0002 3018          jmp       I2CTest_9(PC,D0.W)
                    3019   I2CTest_9:
00001BB4  0008      3020          dc.w      I2CTest_10-I2CTest_9
00001BB6  000C      3021          dc.w      I2CTest_11-I2CTest_9
00001BB8  0014      3022          dc.w      I2CTest_12-I2CTest_9
00001BBA  001C      3023          dc.w      I2CTest_13-I2CTest_9
                    3024   I2CTest_10:
                    3025   ; case 0:
                    3026   ; dataPattern = 0x00; break;
00001BBC  4282      3027          clr.l     D2
00001BBE  601A      3028          bra.s     I2CTest_8
                    3029   I2CTest_11:
                    3030   ; case 1:
                    3031   ; dataPattern = 0xB2; break;
00001BC0  243C 0000 3032          move.l    #178,D2
00001BC4  00B2      
00001BC6  6012      3033          bra.s     I2CTest_8
                    3034   I2CTest_12:
                    3035   ; case 2:
                    3036   ; dataPattern = 0xC3; break;
00001BC8  243C 0000 3037          move.l    #195,D2
00001BCC  00C3      
00001BCE  600A      3038          bra.s     I2CTest_8
                    3039   I2CTest_13:
                    3040   ; case 3:
                    3041   ; dataPattern = 0xD4; break;
00001BD0  243C 0000 3042          move.l    #212,D2
00001BD4  00D4      
00001BD6  6002      3043          bra.s     I2CTest_8
                    3044   I2CTest_7:
                    3045   ; default:
                    3046   ; dataPattern = 0x00; break;
00001BD8  4282      3047          clr.l     D2
                    3048   I2CTest_8:
                    3049   ; }
                    3050   ; }
                    3051   ; dataPattern &= 0xFF;
00001BDA  C4BC 0000 3052          and.l     #255,D2
00001BDE  00FF      
                    3053   ; EEPROMByteWrite(dataPattern, EEPROM0, address);
00001BE0  2F04      3054          move.l    D4,-(A7)
00001BE2  4878 0050 3055          pea       80
00001BE6  2F02      3056          move.l    D2,-(A7)
00001BE8  4EB8 14B6 3057          jsr       _EEPROMByteWrite
00001BEC  DEFC 000C 3058          add.w     #12,A7
                    3059   ; printf("Wrote 0x%02X to address 0x%X\n", dataPattern, address);
00001BF0  2F04      3060          move.l    D4,-(A7)
00001BF2  2F02      3061          move.l    D2,-(A7)
00001BF4  4879 0000 3062          pea       @m68kde~1_49.L
00001BF8  5464      
00001BFA  4E92      3063          jsr       (A2)
00001BFC  DEFC 000C 3064          add.w     #12,A7
                    3065   ; readData = EEPROMRandomRead(EEPROM0, address);
00001C00  2F04      3066          move.l    D4,-(A7)
00001C02  4878 0050 3067          pea       80
00001C06  4EB8 16C6 3068          jsr       _EEPROMRandomRead
00001C0A  504F      3069          addq.w    #8,A7
00001C0C  2D40 FF56 3070          move.l    D0,-170(A6)
                    3071   ; printf("Read back: 0x%02X\n", readData);
00001C10  2F2E FF56 3072          move.l    -170(A6),-(A7)
00001C14  4879 0000 3073          pea       @m68kde~1_50.L
00001C18  5482      
00001C1A  4E92      3074          jsr       (A2)
00001C1C  504F      3075          addq.w    #8,A7
00001C1E  6000 013A 3076          bra       I2CTest_17
                    3077   I2CTest_3:
                    3078   ; }
                    3079   ; // Option 3: Read Block of Data
                    3080   ; else if (testChoice == 3) {
00001C22  0C85 0000 3081          cmp.l     #3,D5
00001C26  0003      
00001C28  6600 004E 3082          bne       I2CTest_15
                    3083   ; printf("\r\nRead Block of Data\n");
00001C2C  4879 0000 3084          pea       @m68kde~1_51.L
00001C30  5496      
00001C32  4E92      3085          jsr       (A2)
00001C34  584F      3086          addq.w    #4,A7
                    3087   ; printf("Enter start address (hex): 0x");
00001C36  4879 0000 3088          pea       @m68kde~1_52.L
00001C3A  54AC      
00001C3C  4E92      3089          jsr       (A2)
00001C3E  584F      3090          addq.w    #4,A7
                    3091   ; startAddress = Get8HexDigits(0);
00001C40  42A7      3092          clr.l     -(A7)
00001C42  4E93      3093          jsr       (A3)
00001C44  584F      3094          addq.w    #4,A7
00001C46  2C00      3095          move.l    D0,D6
                    3096   ; printf("\r\nEnter number of bytes to read (hex): 0x");
00001C48  4879 0000 3097          pea       @m68kde~1_53.L
00001C4C  54CA      
00001C4E  4E92      3098          jsr       (A2)
00001C50  584F      3099          addq.w    #4,A7
                    3100   ; numBytes = Get8HexDigits(0);
00001C52  42A7      3101          clr.l     -(A7)
00001C54  4E93      3102          jsr       (A3)
00001C56  584F      3103          addq.w    #4,A7
00001C58  2600      3104          move.l    D0,D3
                    3105   ; printf("\r\nReading 0x%X (%d) bytes starting from address 0x%X...\n", numBytes, numBytes, startAddress);
00001C5A  2F06      3106          move.l    D6,-(A7)
00001C5C  2F03      3107          move.l    D3,-(A7)
00001C5E  2F03      3108          move.l    D3,-(A7)
00001C60  4879 0000 3109          pea       @m68kde~1_54.L
00001C64  54F4      
00001C66  4E92      3110          jsr       (A2)
00001C68  DEFC 0010 3111          add.w     #16,A7
                    3112   ; EEPROMSequentialRead(startAddress, numBytes);
00001C6C  2F03      3113          move.l    D3,-(A7)
00001C6E  2F06      3114          move.l    D6,-(A7)
00001C70  4E94      3115          jsr       (A4)
00001C72  504F      3116          addq.w    #8,A7
00001C74  6000 00E4 3117          bra       I2CTest_17
                    3118   I2CTest_15:
                    3119   ; }
                    3120   ; // Option 4: Write Block of Data
                    3121   ; else if (testChoice == 4) {
00001C78  0C85 0000 3122          cmp.l     #4,D5
00001C7C  0004      
00001C7E  6600 00DA 3123          bne       I2CTest_17
                    3124   ; printf("\r\nWrite Block of Data\n");
00001C82  4879 0000 3125          pea       @m68kde~1_55.L
00001C86  552E      
00001C88  4E92      3126          jsr       (A2)
00001C8A  584F      3127          addq.w    #4,A7
                    3128   ; printf("Enter start address (hex): 0x");
00001C8C  4879 0000 3129          pea       @m68kde~1_52.L
00001C90  54AC      
00001C92  4E92      3130          jsr       (A2)
00001C94  584F      3131          addq.w    #4,A7
                    3132   ; startAddress = Get8HexDigits(0);
00001C96  42A7      3133          clr.l     -(A7)
00001C98  4E93      3134          jsr       (A3)
00001C9A  584F      3135          addq.w    #4,A7
00001C9C  2C00      3136          move.l    D0,D6
                    3137   ; printf("\r\nEnter number of bytes to write (hex): 0x");
00001C9E  4879 0000 3138          pea       @m68kde~1_56.L
00001CA2  5546      
00001CA4  4E92      3139          jsr       (A2)
00001CA6  584F      3140          addq.w    #4,A7
                    3141   ; numBytes = Get8HexDigits(0);
00001CA8  42A7      3142          clr.l     -(A7)
00001CAA  4E93      3143          jsr       (A3)
00001CAC  584F      3144          addq.w    #4,A7
00001CAE  2600      3145          move.l    D0,D3
                    3146   ; printf("\r\nEnter which data pattern you want to write into memory:\n");
00001CB0  4879 0000 3147          pea       @m68kde~1_57.L
00001CB4  5572      
00001CB6  4E92      3148          jsr       (A2)
00001CB8  584F      3149          addq.w    #4,A7
                    3150   ; printf(" 0: 0x00\n 1: 0xB2\n 2: 0xC3\n 3: 0xD4\n 4: Incrementing pattern\n");
00001CBA  4879 0000 3151          pea       @m68kde~1_58.L
00001CBE  55AE      
00001CC0  4E92      3152          jsr       (A2)
00001CC2  584F      3153          addq.w    #4,A7
                    3154   ; intBuffer = _getch() - 48;
00001CC4  4E95      3155          jsr       (A5)
00001CC6  0480 0000 3156          sub.l     #48,D0
00001CCA  0030      
00001CCC  2E00      3157          move.l    D0,D7
                    3158   ; if (intBuffer == 4) {
00001CCE  0C87 0000 3159          cmp.l     #4,D7
00001CD2  0004      
00001CD4  6614      3160          bne.s     I2CTest_19
                    3161   ; printf("Selected incrementing pattern (address & 0xFF)\n");
00001CD6  4879 0000 3162          pea       @m68kde~1_59.L
00001CDA  55EC      
00001CDC  4E92      3163          jsr       (A2)
00001CDE  584F      3164          addq.w    #4,A7
                    3165   ; dataPattern = 0xFF;  // Special marker for incrementing pattern
00001CE0  243C 0000 3166          move.l    #255,D2
00001CE4  00FF      
00001CE6  6000 0048 3167          bra       I2CTest_20
                    3168   I2CTest_19:
                    3169   ; } else {
                    3170   ; switch (intBuffer) {
00001CEA  2007      3171          move.l    D7,D0
00001CEC  0C80 0000 3172          cmp.l     #4,D0
00001CF0  0004      
00001CF2  642E      3173          bhs.s     I2CTest_21
00001CF4  E380      3174          asl.l     #1,D0
00001CF6  303B 0806 3175          move.w    I2CTest_23(PC,D0.L),D0
00001CFA  4EFB 0002 3176          jmp       I2CTest_23(PC,D0.W)
                    3177   I2CTest_23:
00001CFE  0008      3178          dc.w      I2CTest_24-I2CTest_23
00001D00  000C      3179          dc.w      I2CTest_25-I2CTest_23
00001D02  0014      3180          dc.w      I2CTest_26-I2CTest_23
00001D04  001C      3181          dc.w      I2CTest_27-I2CTest_23
                    3182   I2CTest_24:
                    3183   ; case 0:
                    3184   ; dataPattern = 0x00; break;
00001D06  4282      3185          clr.l     D2
00001D08  601A      3186          bra.s     I2CTest_22
                    3187   I2CTest_25:
                    3188   ; case 1:
                    3189   ; dataPattern = 0xB2; break;
00001D0A  243C 0000 3190          move.l    #178,D2
00001D0E  00B2      
00001D10  6012      3191          bra.s     I2CTest_22
                    3192   I2CTest_26:
                    3193   ; case 2:
                    3194   ; dataPattern = 0xC3; break;
00001D12  243C 0000 3195          move.l    #195,D2
00001D16  00C3      
00001D18  600A      3196          bra.s     I2CTest_22
                    3197   I2CTest_27:
                    3198   ; case 3:
                    3199   ; dataPattern = 0xD4; break;
00001D1A  243C 0000 3200          move.l    #212,D2
00001D1E  00D4      
00001D20  6002      3201          bra.s     I2CTest_22
                    3202   I2CTest_21:
                    3203   ; default:
                    3204   ; dataPattern = 0x00; break;
00001D22  4282      3205          clr.l     D2
                    3206   I2CTest_22:
                    3207   ; }
                    3208   ; printf("Selected pattern: 0x%02X\n", dataPattern);
00001D24  2F02      3209          move.l    D2,-(A7)
00001D26  4879 0000 3210          pea       @m68kde~1_60.L
00001D2A  561C      
00001D2C  4E92      3211          jsr       (A2)
00001D2E  504F      3212          addq.w    #8,A7
                    3213   I2CTest_20:
                    3214   ; }
                    3215   ; printf("\r\nPreparing to write 0x%X (%d) bytes of data starting at address 0x%X...\n", numBytes, numBytes, startAddress);
00001D30  2F06      3216          move.l    D6,-(A7)
00001D32  2F03      3217          move.l    D3,-(A7)
00001D34  2F03      3218          move.l    D3,-(A7)
00001D36  4879 0000 3219          pea       @m68kde~1_61.L
00001D3A  5636      
00001D3C  4E92      3220          jsr       (A2)
00001D3E  DEFC 0010 3221          add.w     #16,A7
                    3222   ; arr[0] = dataPattern; // Initialize the first byte of the array
00001D42  2D42 FFFC 3223          move.l    D2,-4+0(A6)
                    3224   ; EEPROMFlashPageWrite(arr, startAddress, numBytes, 1);
00001D46  4878 0001 3225          pea       1
00001D4A  2F03      3226          move.l    D3,-(A7)
00001D4C  2F06      3227          move.l    D6,-(A7)
00001D4E  486E FFFC 3228          pea       -4(A6)
00001D52  4EB8 1552 3229          jsr       _EEPROMFlashPageWrite
00001D56  DEFC 0010 3230          add.w     #16,A7
                    3231   I2CTest_17:
                    3232   ; }
                    3233   ; if (testChoice == 5) {
00001D5A  0C85 0000 3234          cmp.l     #5,D5
00001D5E  0005      
00001D60  6600 003E 3235          bne       I2CTest_29
                    3236   ; printf("\r\Printing Entire EEPROM\n");
00001D64  4879 0000 3237          pea       @m68kde~1_62.L
00001D68  5680      
00001D6A  4E92      3238          jsr       (A2)
00001D6C  584F      3239          addq.w    #4,A7
                    3240   ; EEPROMSequentialRead(0x0000, 32768);  // First 32KB
00001D6E  4878 8000 3241          pea       32768
00001D72  42A7      3242          clr.l     -(A7)
00001D74  4E94      3243          jsr       (A4)
00001D76  504F      3244          addq.w    #8,A7
                    3245   ; EEPROMSequentialRead(0x8000, 32768);  // Second 32KB
00001D78  4878 8000 3246          pea       32768
00001D7C  4878 8000 3247          pea       32768
00001D80  4E94      3248          jsr       (A4)
00001D82  504F      3249          addq.w    #8,A7
                    3250   ; EEPROMSequentialRead(0x10000, 32768); // Third 32KB
00001D84  4878 8000 3251          pea       32768
00001D88  4879 0001 3252          pea       65536
00001D8C  0000      
00001D8E  4E94      3253          jsr       (A4)
00001D90  504F      3254          addq.w    #8,A7
                    3255   ; EEPROMSequentialRead(0x18000, 32768); // Fourth 32KB
00001D92  4878 8000 3256          pea       32768
00001D96  4879 0001 3257          pea       98304
00001D9A  8000      
00001D9C  4E94      3258          jsr       (A4)
00001D9E  504F      3259          addq.w    #8,A7
                    3260   I2CTest_29:
00001DA0  4CDF 3CFC 3261          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001DA4  4E5E      3262          unlk      A6
00001DA6  4E75      3263          rts
                    3264   ; }
                    3265   ; }
                    3266   ; // I2CTest() {
                    3267   ; //   unsigned int arraySize = 512;
                    3268   ; //   unsigned int IICData[512];
                    3269   ; //   unsigned int i;
                    3270   ; //   unsigned int writeData = 0xAB;
                    3271   ; //   unsigned int readData;
                    3272   ; //   unsigned int totalBytes = 0x20000;
                    3273   ; //   for (i = 0; i < arraySize; i++) {
                    3274   ; //     IICData[i] = (i % 50) + 1;
                    3275   ; //     IICData[i] = 0xAA;
                    3276   ; //   } 
                    3277   ; //   printf("\r\n I2C Test\n");
                    3278   ; //   IIC_Init();  
                    3279   ; //   printf("Page Write\n");
                    3280   ; //   EEPROMFlashPageWrite(IICData, 0x0, totalBytes); // Write data to EEPROM
                    3281   ; //   printf("Sequential Read\n");
                    3282   ; //   EEPROMSequentialRead(0x0000, 32768);  // First 32KB
                    3283   ; //   EEPROMSequentialRead(0x8000, 32768);  // Second 32KB
                    3284   ; //   EEPROMSequentialRead(0x10000, 32768); // Third 32KB
                    3285   ; //   EEPROMSequentialRead(0x18000, 32768); // Fourth 32KB
                    3286   ; //   printf("\r\n Starting EEPROM Write: Writing 0x%.2x to address 0x00\n", writeData); // Debug: Indicate the start of EEPROM write
                    3287   ; //   for (i = 0x0; i < 0x5; i++) {
                    3288   ; //     printf("\r\n Writing %d to address %d\n", i * 5, i);
                    3289   ; //     EEPROMByteWrite(i * 5, EEPROM1, i); // Write data to EEPROM
                    3290   ; //   }
                    3291   ; //   printf("\r\nFinished write, Starting EEPROM Read\n");
                    3292   ; //   for (i = 0; i < 5; i++) {
                    3293   ; //     readData = EEPROMRandomRead(EEPROM1, i); // Read data from EEPROM
                    3294   ; //     printf("\r\n Address: %d: %d\n", i, readData); // Debug: Indicate the address being read and the data read
                    3295   ; //   }
                    3296   ; //   // readData = EEPROMRandomRead(EEPROM0, 0x0);
                    3297   ; //   IICCoreDisable();
                    3298   ; // }
                    3299   ; // Initialize and enable I2C controller
                    3300   ; // No interrupts and set clock frequency to 100Khz
                    3301   ; // Connect controller to 25 or 45 Mhz CPU clock
                    3302   ; // Check if device is ready before writing anything over I2C bus ie) TX register has written previous command.
                    3303   ; // Check the status register TIP bit to see when transmission has finished
                    3304   ; // Wait for ACK from slave after each write
                    3305   ; // Transmit a byte to the I2C bus
                    3306   ; // write the data to be transmitted into TX register and then write something to the command register that indiciates that you want to write
                    3307   ; // If you want to generate a start or stop condition, set the STA or STO bits in command register when you write to it,
                    3308   ; // Clear the ACK bit if you want to generate an ACK when reading data back from the slave
                    3309   ; // DAC Functions
                    3310   ; // DAC/ADC Address: 1001001 + R/W
                    3311   ; // Control Byte: Set bit6 on to activate unity gain buffer. lower nibble selects the input channel (For DAC ignored once you enter DAC mode)
                    3312   ; // Calculate sine wave values between 0 and 255 
                    3313   ; // Pseudo code process
                    3314   ; // Init I2C 
                    3315   ; // Control byte sent after the slave address. COnfigure this properly
                    3316   ; // Remaining bits can select input channel mode
                    3317   ; // Generate sine wave
                    3318   ; void ADCRead() {
                    3319   _ADCRead:
00001DA8  4E56 FFF0 3320          link      A6,#-16
00001DAC  48E7 003C 3321          movem.l   A2/A3/A4/A5,-(A7)
00001DB0  45F8 1458 3322          lea       _checkTIP.L,A2
00001DB4  47F9 0000 3323          lea       _printf.L,A3
00001DB8  456E      
00001DBA  49F9 0B00 3324          lea       _i.L,A4
00001DBE  00C4      
00001DC0  4BF8 1468 3325          lea       _checkAck.L,A5
                    3326   ; unsigned int thermistor;
                    3327   ; unsigned int potentiometer;
                    3328   ; unsigned int photoresistor;
                    3329   ; unsigned int readData;
                    3330   ; printf("Performing ADC Read\n");
00001DC4  4879 0000 3331          pea       @m68kde~1_63.L
00001DC8  569A      
00001DCA  4E93      3332          jsr       (A3)
00001DCC  584F      3333          addq.w    #4,A7
                    3334   ; IIC_Init();
00001DCE  4EB8 1428 3335          jsr       _IIC_Init
                    3336   ; checkTIP();
00001DD2  4E92      3337          jsr       (A2)
                    3338   ; IIC_TXRX = ((PCF8591 << 1) & 0xFE); // Send EEPROM address with read bit
00001DD4  13FC 0092 3339          move.b    #146,4227078
00001DD8  0040 8006 
                    3340   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
00001DDC  13FC 0091 3341          move.b    #145,4227080
00001DE0  0040 8008 
                    3342   ; checkTIP();
00001DE4  4E92      3343          jsr       (A2)
                    3344   ; checkAck();
00001DE6  4E95      3345          jsr       (A5)
                    3346   ; // Send Control byte for ADC function: 0x0000_0100 (Auto Increment Mode)
                    3347   ; IIC_TXRX = 0x4; // Send EEPROM address with write bit
00001DE8  13FC 0004 3348          move.b    #4,4227078
00001DEC  0040 8006 
                    3349   ; IIC_CRSR = WRITE | IACK; // Start condition with write bit
00001DF0  13FC 0011 3350          move.b    #17,4227080
00001DF4  0040 8008 
                    3351   ; checkTIP();
00001DF8  4E92      3352          jsr       (A2)
                    3353   ; checkAck();
00001DFA  4E95      3354          jsr       (A5)
                    3355   ; IIC_TXRX = ((PCF8591 << 1) | 0x1); // Send EEPROM address with read bit
00001DFC  13FC 0093 3356          move.b    #147,4227078
00001E00  0040 8006 
                    3357   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
00001E04  13FC 0091 3358          move.b    #145,4227080
00001E08  0040 8008 
                    3359   ; checkTIP();
00001E0C  4E92      3360          jsr       (A2)
                    3361   ; checkAck();
00001E0E  4E95      3362          jsr       (A5)
                    3363   ; // Read data from ADC continously 
                    3364   ; while(1) {  // Loop continuously
                    3365   ADCRead_1:
                    3366   ; for (i = 0; i < NUM_SAMPLES; i++) {
00001E10  4294      3367          clr.l     (A4)
                    3368   ADCRead_4:
00001E12  2014      3369          move.l    (A4),D0
00001E14  0C80 0000 3370          cmp.l     #512,D0
00001E18  0200      
00001E1A  6400 010A 3371          bhs       ADCRead_6
                    3372   ; // Load the triangle wave sample into the I2C transmit register
                    3373   ; IIC_CRSR = (READ | IACK) & (~NACK);  // Initiate I2C write for the data byte
00001E1E  13FC 0021 3374          move.b    #33,4227080
00001E22  0040 8008 
                    3375   ; checkTIP();  // Wait until the transmission is complete
00001E26  4E92      3376          jsr       (A2)
                    3377   ; while (!(IIC_CRSR & 0x1)); // Wait for IF flag to be set
                    3378   ADCRead_7:
00001E28  1039 0040 3379          move.b    4227080,D0
00001E2C  8008      
00001E2E  C03C 0001 3380          and.b     #1,D0
00001E32  6602      3381          bne.s     ADCRead_9
00001E34  60F2      3382          bra       ADCRead_7
                    3383   ADCRead_9:
                    3384   ; IIC_CRSR = 0; // Clear IF flag
00001E36  4239 0040 3385          clr.b     4227080
00001E3A  8008      
                    3386   ; photoresistor = IIC_TXRX; // Read data from EEPROM
00001E3C  1039 0040 3387          move.b    4227078,D0
00001E40  8006      
00001E42  C0BC 0000 3388          and.l     #255,D0
00001E46  00FF      
00001E48  2D40 FFF8 3389          move.l    D0,-8(A6)
                    3390   ; printf("\r\n Light: %d\n", photoresistor); // Debug: Indicate the address being read and the data read
00001E4C  2F2E FFF8 3391          move.l    -8(A6),-(A7)
00001E50  4879 0000 3392          pea       @m68kde~1_64.L
00001E54  56B0      
00001E56  4E93      3393          jsr       (A3)
00001E58  504F      3394          addq.w    #8,A7
                    3395   ; IIC_CRSR = (READ | IACK) & (~NACK);  // Initiate I2C write for the data byte
00001E5A  13FC 0021 3396          move.b    #33,4227080
00001E5E  0040 8008 
                    3397   ; checkTIP();  // Wait until the transmission is complete
00001E62  4E92      3398          jsr       (A2)
                    3399   ; while (!(IIC_CRSR & 0x1)); // Wait for IF flag to be set
                    3400   ADCRead_10:
00001E64  1039 0040 3401          move.b    4227080,D0
00001E68  8008      
00001E6A  C03C 0001 3402          and.b     #1,D0
00001E6E  6602      3403          bne.s     ADCRead_12
00001E70  60F2      3404          bra       ADCRead_10
                    3405   ADCRead_12:
                    3406   ; IIC_CRSR = 0; // Clear IF flag
00001E72  4239 0040 3407          clr.b     4227080
00001E76  8008      
                    3408   ; readData = IIC_TXRX; // Read data from EEPROM
00001E78  1039 0040 3409          move.b    4227078,D0
00001E7C  8006      
00001E7E  C0BC 0000 3410          and.l     #255,D0
00001E82  00FF      
00001E84  2D40 FFFC 3411          move.l    D0,-4(A6)
                    3412   ; printf("\r\n External: %d\n", readData); // Debug: Indicate the address being read and the data read
00001E88  2F2E FFFC 3413          move.l    -4(A6),-(A7)
00001E8C  4879 0000 3414          pea       @m68kde~1_65.L
00001E90  56BE      
00001E92  4E93      3415          jsr       (A3)
00001E94  504F      3416          addq.w    #8,A7
                    3417   ; IIC_CRSR = (READ | IACK) & (~NACK);  // Initiate I2C write for the data byte
00001E96  13FC 0021 3418          move.b    #33,4227080
00001E9A  0040 8008 
                    3419   ; checkTIP();  // Wait until the transmission is complete
00001E9E  4E92      3420          jsr       (A2)
                    3421   ; while (!(IIC_CRSR & 0x1)); // Wait for IF flag to be set
                    3422   ADCRead_13:
00001EA0  1039 0040 3423          move.b    4227080,D0
00001EA4  8008      
00001EA6  C03C 0001 3424          and.b     #1,D0
00001EAA  6602      3425          bne.s     ADCRead_15
00001EAC  60F2      3426          bra       ADCRead_13
                    3427   ADCRead_15:
                    3428   ; IIC_CRSR = 0; // Clear IF flag
00001EAE  4239 0040 3429          clr.b     4227080
00001EB2  8008      
                    3430   ; potentiometer = IIC_TXRX; // Read data from EEPROM
00001EB4  1039 0040 3431          move.b    4227078,D0
00001EB8  8006      
00001EBA  C0BC 0000 3432          and.l     #255,D0
00001EBE  00FF      
00001EC0  2D40 FFF4 3433          move.l    D0,-12(A6)
                    3434   ; printf("\r\n Potentiometer: %d\n", potentiometer); // Debug: Indicate the address being read and the data read
00001EC4  2F2E FFF4 3435          move.l    -12(A6),-(A7)
00001EC8  4879 0000 3436          pea       @m68kde~1_66.L
00001ECC  56D0      
00001ECE  4E93      3437          jsr       (A3)
00001ED0  504F      3438          addq.w    #8,A7
                    3439   ; IIC_CRSR = (READ | IACK) & (~NACK);  // Initiate I2C write for the data byte
00001ED2  13FC 0021 3440          move.b    #33,4227080
00001ED6  0040 8008 
                    3441   ; checkTIP();  // Wait until the transmission is complete
00001EDA  4E92      3442          jsr       (A2)
                    3443   ; while (!(IIC_CRSR & 0x1)); // Wait for IF flag to be set
                    3444   ADCRead_16:
00001EDC  1039 0040 3445          move.b    4227080,D0
00001EE0  8008      
00001EE2  C03C 0001 3446          and.b     #1,D0
00001EE6  6602      3447          bne.s     ADCRead_18
00001EE8  60F2      3448          bra       ADCRead_16
                    3449   ADCRead_18:
                    3450   ; IIC_CRSR = 0; // Clear IF flag
00001EEA  4239 0040 3451          clr.b     4227080
00001EEE  8008      
                    3452   ; thermistor = IIC_TXRX; // Read data from EEPROM
00001EF0  1039 0040 3453          move.b    4227078,D0
00001EF4  8006      
00001EF6  C0BC 0000 3454          and.l     #255,D0
00001EFA  00FF      
00001EFC  2D40 FFF0 3455          move.l    D0,-16(A6)
                    3456   ; printf("\r\n Thermistor: %d\n", thermistor); // Debug: Indicate the address being read and the data read
00001F00  2F2E FFF0 3457          move.l    -16(A6),-(A7)
00001F04  4879 0000 3458          pea       @m68kde~1_67.L
00001F08  56E6      
00001F0A  4E93      3459          jsr       (A3)
00001F0C  504F      3460          addq.w    #8,A7
                    3461   ; printf("\n\n\n\n\n");
00001F0E  4879 0000 3462          pea       @m68kde~1_68.L
00001F12  56FA      
00001F14  4E93      3463          jsr       (A3)
00001F16  584F      3464          addq.w    #4,A7
                    3465   ; wait5ms(); Wait3ms();
00001F18  4EB8 1444 3466          jsr       _wait5ms
00001F1C  4EB8 0946 3467          jsr       _Wait3ms
00001F20  5294      3468          addq.l    #1,(A4)
00001F22  6000 FEEE 3469          bra       ADCRead_4
                    3470   ADCRead_6:
00001F26  6000 FEE8 3471          bra       ADCRead_1
                    3472   ; }
                    3473   ; }
                    3474   ; }
                    3475   ; void DACWave() {
                    3476   _DACWave:
00001F2A  4E56 F800 3477          link      A6,#-2048
00001F2E  48E7 2038 3478          movem.l   D2/A2/A3/A4,-(A7)
00001F32  45F8 1458 3479          lea       _checkTIP.L,A2
00001F36  47F8 1468 3480          lea       _checkAck.L,A3
00001F3A  49EE F800 3481          lea       -2048(A6),A4
                    3482   ; int triangle_table[NUM_SAMPLES];
                    3483   ; int i;
                    3484   ; // Generate triangle wave samples
                    3485   ; // Ascending part: from 0 to 255
                    3486   ; for(i = 0; i < HALF_SAMPLES; i++) {
00001F3E  4282      3487          clr.l     D2
                    3488   DACWave_1:
00001F40  0C82 0000 3489          cmp.l     #256,D2
00001F44  0100      
00001F46  6C0C      3490          bge.s     DACWave_3
                    3491   ; triangle_table[i] = i;  // 0 to 255
00001F48  2002      3492          move.l    D2,D0
00001F4A  E588      3493          lsl.l     #2,D0
00001F4C  2982 0800 3494          move.l    D2,0(A4,D0.L)
00001F50  5282      3495          addq.l    #1,D2
00001F52  60EC      3496          bra       DACWave_1
                    3497   DACWave_3:
                    3498   ; }
                    3499   ; // Descending part: from 255 back to 0
                    3500   ; for(i = HALF_SAMPLES; i < NUM_SAMPLES; i++) {
00001F54  243C 0000 3501          move.l    #256,D2
00001F58  0100      
                    3502   DACWave_4:
00001F5A  0C82 0000 3503          cmp.l     #512,D2
00001F5E  0200      
00001F60  6C1C      3504          bge.s     DACWave_6
                    3505   ; triangle_table[i] = 255 - (i - HALF_SAMPLES);
00001F62  303C 00FF 3506          move.w    #255,D0
00001F66  48C0      3507          ext.l     D0
00001F68  2202      3508          move.l    D2,D1
00001F6A  0481 0000 3509          sub.l     #256,D1
00001F6E  0100      
00001F70  9081      3510          sub.l     D1,D0
00001F72  2202      3511          move.l    D2,D1
00001F74  E589      3512          lsl.l     #2,D1
00001F76  2980 1800 3513          move.l    D0,0(A4,D1.L)
00001F7A  5282      3514          addq.l    #1,D2
00001F7C  60DC      3515          bra       DACWave_4
                    3516   DACWave_6:
                    3517   ; }
                    3518   ; IIC_Init();
00001F7E  4EB8 1428 3519          jsr       _IIC_Init
                    3520   ; checkTIP();
00001F82  4E92      3521          jsr       (A2)
                    3522   ; // START condition with slave address
                    3523   ; IIC_TXRX = ((PCF8591 << 1) & 0xFE); // Send EEPROM address with write bit
00001F84  13FC 0092 3524          move.b    #146,4227078
00001F88  0040 8006 
                    3525   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
00001F8C  13FC 0091 3526          move.b    #145,4227080
00001F90  0040 8008 
                    3527   ; checkTIP();
00001F94  4E92      3528          jsr       (A2)
                    3529   ; checkAck();
00001F96  4E93      3530          jsr       (A3)
                    3531   ; // DAC Control Byte: Send 01XX0XXX
                    3532   ; IIC_TXRX = 0x40; // Send EEPROM address with write bit
00001F98  13FC 0040 3533          move.b    #64,4227078
00001F9C  0040 8006 
                    3534   ; IIC_CRSR = WRITE | IACK; // Start condition with write bit
00001FA0  13FC 0011 3535          move.b    #17,4227080
00001FA4  0040 8008 
                    3536   ; checkTIP();
00001FA8  4E92      3537          jsr       (A2)
                    3538   ; checkAck();
00001FAA  4E93      3539          jsr       (A3)
                    3540   ; // Go up and down from 0 to 255 to create effects
                    3541   ; while(1) {  // Loop continuously
                    3542   DACWave_7:
                    3543   ; for (i = 0; i < NUM_SAMPLES; i++) {
00001FAC  4282      3544          clr.l     D2
                    3545   DACWave_10:
00001FAE  0C82 0000 3546          cmp.l     #512,D2
00001FB2  0200      
00001FB4  6C22      3547          bge.s     DACWave_12
                    3548   ; // Load the triangle wave sample into the I2C transmit register
                    3549   ; IIC_TXRX = triangle_table[i];
00001FB6  2002      3550          move.l    D2,D0
00001FB8  E588      3551          lsl.l     #2,D0
00001FBA  2034 0800 3552          move.l    0(A4,D0.L),D0
00001FBE  13C0 0040 3553          move.b    D0,4227078
00001FC2  8006      
                    3554   ; IIC_CRSR = WRITE | IACK;  // Initiate I2C write for the data byte
00001FC4  13FC 0011 3555          move.b    #17,4227080
00001FC8  0040 8008 
                    3556   ; checkTIP();  // Wait until the transmission is complete
00001FCC  4E92      3557          jsr       (A2)
                    3558   ; checkAck();  // Check for acknowledgment from the DAC
00001FCE  4E93      3559          jsr       (A3)
                    3560   ; Wait1ms();
00001FD0  4EB8 0932 3561          jsr       _Wait1ms
00001FD4  5282      3562          addq.l    #1,D2
00001FD6  60D6      3563          bra       DACWave_10
                    3564   DACWave_12:
00001FD8  60D2      3565          bra       DACWave_7
                    3566   ; }
                    3567   ; }
                    3568   ; }
                    3569   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    3570   ; // IMPORTANT
                    3571   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    3572   ; // has to be done with an interrupt (IRQ Level 6)
                    3573   ; //
                    3574   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    3575   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    3576   ; //
                    3577   ; // on return from the IRQ service handler, the first access to the user memory program space
                    3578   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    3579   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    3580   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    3581   ; // program area
                    3582   ; //
                    3583   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    3584   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    3585   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    3586   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    3587   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    3588   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    3589   ; void DumpRegisters()
                    3590   ; {
                    3591   _DumpRegisters:
00001FDA  48E7 3F3C 3592          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001FDE  45F9 0000 3593          lea       _putch.L,A2
00001FE2  3BB2      
00001FE4  47F9 0000 3594          lea       _printf.L,A3
00001FE8  456E      
00001FEA  49F9 0B00 3595          lea       _SR.L,A4
00001FEE  012C      
00001FF0  4BF9 0B00 3596          lea       _WatchPointString.L,A5
00001FF4  01C2      
                    3597   ; short i, x, j, k ;
                    3598   ; unsigned char c, *BytePointer;
                    3599   ; // buld up strings for displaying watchpoints
                    3600   ; for(x = 0; x < (short)(8); x++)
00001FF6  4242      3601          clr.w     D2
                    3602   DumpRegisters_1:
00001FF8  0C42 0008 3603          cmp.w     #8,D2
00001FFC  6C00 01C6 3604          bge       DumpRegisters_3
                    3605   ; {
                    3606   ; if(WatchPointSetOrCleared[x] == 1)
00002000  48C2      3607          ext.l     D2
00002002  2002      3608          move.l    D2,D0
00002004  E588      3609          lsl.l     #2,D0
00002006  41F9 0B00 3610          lea       _WatchPointSetOrCleared.L,A0
0000200A  01A2      
0000200C  2030 0800 3611          move.l    0(A0,D0.L),D0
00002010  0C80 0000 3612          cmp.l     #1,D0
00002014  0001      
00002016  6600 0186 3613          bne       DumpRegisters_4
                    3614   ; {
                    3615   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000201A  48C2      3616          ext.l     D2
0000201C  2202      3617          move.l    D2,D1
0000201E  E589      3618          lsl.l     #2,D1
00002020  41F9 0B00 3619          lea       _WatchPointAddress.L,A0
00002024  0182      
00002026  2F30 1800 3620          move.l    0(A0,D1.L),-(A7)
0000202A  4879 0000 3621          pea       @m68kde~1_69.L
0000202E  5700      
00002030  220D      3622          move.l    A5,D1
00002032  48C2      3623          ext.l     D2
00002034  2F00      3624          move.l    D0,-(A7)
00002036  2002      3625          move.l    D2,D0
00002038  C1FC 0064 3626          muls      #100,D0
0000203C  D280      3627          add.l     D0,D1
0000203E  201F      3628          move.l    (A7)+,D0
00002040  2F01      3629          move.l    D1,-(A7)
00002042  4EB9 0000 3630          jsr       _sprintf
00002046  3C4A      
00002048  DEFC 000C 3631          add.w     #12,A7
                    3632   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000204C  48C2      3633          ext.l     D2
0000204E  2002      3634          move.l    D2,D0
00002050  E588      3635          lsl.l     #2,D0
00002052  41F9 0B00 3636          lea       _WatchPointAddress.L,A0
00002056  0182      
00002058  2A30 0800 3637          move.l    0(A0,D0.L),D5
                    3638   ; for(j = 0; j < (short)(16); j+=2)
0000205C  4243      3639          clr.w     D3
                    3640   DumpRegisters_6:
0000205E  0C43 0010 3641          cmp.w     #16,D3
00002062  6C00 0082 3642          bge       DumpRegisters_8
                    3643   ; {
                    3644   ; for(k = 0; k < (short)(2); k++)
00002066  4246      3645          clr.w     D6
                    3646   DumpRegisters_9:
00002068  0C46 0002 3647          cmp.w     #2,D6
0000206C  6C00 0052 3648          bge       DumpRegisters_11
                    3649   ; {
                    3650   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00002070  2045      3651          move.l    D5,A0
00002072  48C3      3652          ext.l     D3
00002074  2203      3653          move.l    D3,D1
00002076  48C6      3654          ext.l     D6
00002078  D286      3655          add.l     D6,D1
0000207A  1230 1800 3656          move.b    0(A0,D1.L),D1
0000207E  C2BC 0000 3657          and.l     #255,D1
00002082  00FF      
00002084  2F01      3658          move.l    D1,-(A7)
00002086  4879 0000 3659          pea       @m68kde~1_8.L
0000208A  4FBC      
0000208C  4879 0B00 3660          pea       _TempString.L
00002090  04E2      
00002092  4EB9 0000 3661          jsr       _sprintf
00002096  3C4A      
00002098  DEFC 000C 3662          add.w     #12,A7
                    3663   ; strcat(WatchPointString[x], TempString) ;
0000209C  4879 0B00 3664          pea       _TempString.L
000020A0  04E2      
000020A2  220D      3665          move.l    A5,D1
000020A4  48C2      3666          ext.l     D2
000020A6  2F00      3667          move.l    D0,-(A7)
000020A8  2002      3668          move.l    D2,D0
000020AA  C1FC 0064 3669          muls      #100,D0
000020AE  D280      3670          add.l     D0,D1
000020B0  201F      3671          move.l    (A7)+,D0
000020B2  2F01      3672          move.l    D1,-(A7)
000020B4  4EB9 0000 3673          jsr       _strcat
000020B8  3C96      
000020BA  504F      3674          addq.w    #8,A7
000020BC  5246      3675          addq.w    #1,D6
000020BE  60A8      3676          bra       DumpRegisters_9
                    3677   DumpRegisters_11:
                    3678   ; }
                    3679   ; strcat(WatchPointString[x]," ") ;
000020C0  4879 0000 3680          pea       @m68kde~1_70.L
000020C4  5708      
000020C6  220D      3681          move.l    A5,D1
000020C8  48C2      3682          ext.l     D2
000020CA  2F00      3683          move.l    D0,-(A7)
000020CC  2002      3684          move.l    D2,D0
000020CE  C1FC 0064 3685          muls      #100,D0
000020D2  D280      3686          add.l     D0,D1
000020D4  201F      3687          move.l    (A7)+,D0
000020D6  2F01      3688          move.l    D1,-(A7)
000020D8  4EB9 0000 3689          jsr       _strcat
000020DC  3C96      
000020DE  504F      3690          addq.w    #8,A7
000020E0  5443      3691          addq.w    #2,D3
000020E2  6000 FF7A 3692          bra       DumpRegisters_6
                    3693   DumpRegisters_8:
                    3694   ; }
                    3695   ; strcat(WatchPointString[x], "  ") ;
000020E6  4879 0000 3696          pea       @m68kde~1_9.L
000020EA  4FC2      
000020EC  220D      3697          move.l    A5,D1
000020EE  48C2      3698          ext.l     D2
000020F0  2F00      3699          move.l    D0,-(A7)
000020F2  2002      3700          move.l    D2,D0
000020F4  C1FC 0064 3701          muls      #100,D0
000020F8  D280      3702          add.l     D0,D1
000020FA  201F      3703          move.l    (A7)+,D0
000020FC  2F01      3704          move.l    D1,-(A7)
000020FE  4EB9 0000 3705          jsr       _strcat
00002102  3C96      
00002104  504F      3706          addq.w    #8,A7
                    3707   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00002106  48C2      3708          ext.l     D2
00002108  2002      3709          move.l    D2,D0
0000210A  E588      3710          lsl.l     #2,D0
0000210C  41F9 0B00 3711          lea       _WatchPointAddress.L,A0
00002110  0182      
00002112  2A30 0800 3712          move.l    0(A0,D0.L),D5
                    3713   ; for(j = 0; j < (short)(16); j++)
00002116  4243      3714          clr.w     D3
                    3715   DumpRegisters_12:
00002118  0C43 0010 3716          cmp.w     #16,D3
0000211C  6C00 007E 3717          bge       DumpRegisters_14
                    3718   ; {
                    3719   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00002120  2045      3720          move.l    D5,A0
00002122  48C3      3721          ext.l     D3
00002124  1030 3800 3722          move.b    0(A0,D3.L),D0
00002128  C03C 007F 3723          and.b     #127,D0
0000212C  1E00      3724          move.b    D0,D7
                    3725   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000212E  0C07 007F 3726          cmp.b     #127,D7
00002132  6206      3727          bhi.s     DumpRegisters_17
00002134  0C07 0020 3728          cmp.b     #32,D7
00002138  6416      3729          bhs.s     DumpRegisters_15
                    3730   DumpRegisters_17:
                    3731   ; sprintf(TempString, ".") ;
0000213A  4879 0000 3732          pea       @m68kde~1_71.L
0000213E  570A      
00002140  4879 0B00 3733          pea       _TempString.L
00002144  04E2      
00002146  4EB9 0000 3734          jsr       _sprintf
0000214A  3C4A      
0000214C  504F      3735          addq.w    #8,A7
0000214E  6026      3736          bra.s     DumpRegisters_16
                    3737   DumpRegisters_15:
                    3738   ; else
                    3739   ; sprintf(TempString, "%c", BytePointer[j]) ;
00002150  2045      3740          move.l    D5,A0
00002152  48C3      3741          ext.l     D3
00002154  1230 3800 3742          move.b    0(A0,D3.L),D1
00002158  C2BC 0000 3743          and.l     #255,D1
0000215C  00FF      
0000215E  2F01      3744          move.l    D1,-(A7)
00002160  4879 0000 3745          pea       @m68kde~1_72.L
00002164  570C      
00002166  4879 0B00 3746          pea       _TempString.L
0000216A  04E2      
0000216C  4EB9 0000 3747          jsr       _sprintf
00002170  3C4A      
00002172  DEFC 000C 3748          add.w     #12,A7
                    3749   DumpRegisters_16:
                    3750   ; strcat(WatchPointString[x], TempString) ;
00002176  4879 0B00 3751          pea       _TempString.L
0000217A  04E2      
0000217C  220D      3752          move.l    A5,D1
0000217E  48C2      3753          ext.l     D2
00002180  2F00      3754          move.l    D0,-(A7)
00002182  2002      3755          move.l    D2,D0
00002184  C1FC 0064 3756          muls      #100,D0
00002188  D280      3757          add.l     D0,D1
0000218A  201F      3758          move.l    (A7)+,D0
0000218C  2F01      3759          move.l    D1,-(A7)
0000218E  4EB9 0000 3760          jsr       _strcat
00002192  3C96      
00002194  504F      3761          addq.w    #8,A7
00002196  5243      3762          addq.w    #1,D3
00002198  6000 FF7E 3763          bra       DumpRegisters_12
                    3764   DumpRegisters_14:
0000219C  6020      3765          bra.s     DumpRegisters_5
                    3766   DumpRegisters_4:
                    3767   ; }
                    3768   ; }
                    3769   ; else
                    3770   ; strcpy(WatchPointString[x], "") ;
0000219E  4879 0000 3771          pea       @m68kde~1_73.L
000021A2  5710      
000021A4  220D      3772          move.l    A5,D1
000021A6  48C2      3773          ext.l     D2
000021A8  2F00      3774          move.l    D0,-(A7)
000021AA  2002      3775          move.l    D2,D0
000021AC  C1FC 0064 3776          muls      #100,D0
000021B0  D280      3777          add.l     D0,D1
000021B2  201F      3778          move.l    (A7)+,D0
000021B4  2F01      3779          move.l    D1,-(A7)
000021B6  4EB9 0000 3780          jsr       _strcpy
000021BA  3AC4      
000021BC  504F      3781          addq.w    #8,A7
                    3782   DumpRegisters_5:
000021BE  5242      3783          addq.w    #1,D2
000021C0  6000 FE36 3784          bra       DumpRegisters_1
                    3785   DumpRegisters_3:
                    3786   ; }
                    3787   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000021C4  2F39 0B00 3788          move.l    _a0.L,-(A7)
000021C8  0104      
000021CA  2F39 0B00 3789          move.l    _d0.L,-(A7)
000021CE  00E4      
000021D0  4879 0000 3790          pea       @m68kde~1_74.L
000021D4  5712      
000021D6  4E93      3791          jsr       (A3)
000021D8  DEFC 000C 3792          add.w     #12,A7
                    3793   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000021DC  2F39 0B00 3794          move.l    _a1.L,-(A7)
000021E0  0108      
000021E2  2F39 0B00 3795          move.l    _d1.L,-(A7)
000021E6  00E8      
000021E8  4879 0000 3796          pea       @m68kde~1_75.L
000021EC  572E      
000021EE  4E93      3797          jsr       (A3)
000021F0  DEFC 000C 3798          add.w     #12,A7
                    3799   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000021F4  2F39 0B00 3800          move.l    _a2.L,-(A7)
000021F8  010C      
000021FA  2F39 0B00 3801          move.l    _d2.L,-(A7)
000021FE  00EC      
00002200  4879 0000 3802          pea       @m68kde~1_76.L
00002204  5748      
00002206  4E93      3803          jsr       (A3)
00002208  DEFC 000C 3804          add.w     #12,A7
                    3805   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
0000220C  2F39 0B00 3806          move.l    _a3.L,-(A7)
00002210  0110      
00002212  2F39 0B00 3807          move.l    _d3.L,-(A7)
00002216  00F0      
00002218  4879 0000 3808          pea       @m68kde~1_77.L
0000221C  5762      
0000221E  4E93      3809          jsr       (A3)
00002220  DEFC 000C 3810          add.w     #12,A7
                    3811   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00002224  2F39 0B00 3812          move.l    _a4.L,-(A7)
00002228  0114      
0000222A  2F39 0B00 3813          move.l    _d4.L,-(A7)
0000222E  00F4      
00002230  4879 0000 3814          pea       @m68kde~1_78.L
00002234  577C      
00002236  4E93      3815          jsr       (A3)
00002238  DEFC 000C 3816          add.w     #12,A7
                    3817   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
0000223C  2F39 0B00 3818          move.l    _a5.L,-(A7)
00002240  0118      
00002242  2F39 0B00 3819          move.l    _d5.L,-(A7)
00002246  00F8      
00002248  4879 0000 3820          pea       @m68kde~1_79.L
0000224C  5796      
0000224E  4E93      3821          jsr       (A3)
00002250  DEFC 000C 3822          add.w     #12,A7
                    3823   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00002254  2F39 0B00 3824          move.l    _a6.L,-(A7)
00002258  011C      
0000225A  2F39 0B00 3825          move.l    _d6.L,-(A7)
0000225E  00FC      
00002260  4879 0000 3826          pea       @m68kde~1_80.L
00002264  57B0      
00002266  4E93      3827          jsr       (A3)
00002268  DEFC 000C 3828          add.w     #12,A7
                    3829   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
0000226C  3214      3830          move.w    (A4),D1
0000226E  C27C 2000 3831          and.w     #8192,D1
00002272  0C41 2000 3832          cmp.w     #8192,D1
00002276  6608      3833          bne.s     DumpRegisters_18
00002278  2239 0B00 3834          move.l    _SSP.L,D1
0000227C  0124      
0000227E  6006      3835          bra.s     DumpRegisters_19
                    3836   DumpRegisters_18:
00002280  2239 0B00 3837          move.l    _USP.L,D1
00002284  0128      
                    3838   DumpRegisters_19:
00002286  2F01      3839          move.l    D1,-(A7)
00002288  2F39 0B00 3840          move.l    _d7.L,-(A7)
0000228C  0100      
0000228E  4879 0000 3841          pea       @m68kde~1_81.L
00002292  57CA      
00002294  4E93      3842          jsr       (A3)
00002296  DEFC 000C 3843          add.w     #12,A7
                    3844   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000229A  2F39 0B00 3845          move.l    _USP.L,-(A7)
0000229E  0128      
000022A0  4879 0000 3846          pea       @m68kde~1_82.L
000022A4  57E4      
000022A6  4E93      3847          jsr       (A3)
000022A8  504F      3848          addq.w    #8,A7
                    3849   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000022AA  2F39 0B00 3850          move.l    _SSP.L,-(A7)
000022AE  0124      
000022B0  4879 0000 3851          pea       @m68kde~1_83.L
000022B4  5802      
000022B6  4E93      3852          jsr       (A3)
000022B8  504F      3853          addq.w    #8,A7
                    3854   ; printf("\r\n SR = $%04X   ",SR) ;
000022BA  3214      3855          move.w    (A4),D1
000022BC  C2BC 0000 3856          and.l     #65535,D1
000022C0  FFFF      
000022C2  2F01      3857          move.l    D1,-(A7)
000022C4  4879 0000 3858          pea       @m68kde~1_84.L
000022C8  5824      
000022CA  4E93      3859          jsr       (A3)
000022CC  504F      3860          addq.w    #8,A7
                    3861   ; // display the status word in characters etc.
                    3862   ; printf("   [") ;
000022CE  4879 0000 3863          pea       @m68kde~1_85.L
000022D2  5836      
000022D4  4E93      3864          jsr       (A3)
000022D6  584F      3865          addq.w    #4,A7
                    3866   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000022D8  3014      3867          move.w    (A4),D0
000022DA  C07C 8000 3868          and.w     #32768,D0
000022DE  0C40 8000 3869          cmp.w     #32768,D0
000022E2  660A      3870          bne.s     DumpRegisters_20
000022E4  4878 0054 3871          pea       84
000022E8  4E92      3872          jsr       (A2)
000022EA  584F      3873          addq.w    #4,A7
000022EC  6008      3874          bra.s     DumpRegisters_21
                    3875   DumpRegisters_20:
000022EE  4878 002D 3876          pea       45
000022F2  4E92      3877          jsr       (A2)
000022F4  584F      3878          addq.w    #4,A7
                    3879   DumpRegisters_21:
                    3880   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000022F6  3014      3881          move.w    (A4),D0
000022F8  C07C 2000 3882          and.w     #8192,D0
000022FC  0C40 2000 3883          cmp.w     #8192,D0
00002300  660A      3884          bne.s     DumpRegisters_22
00002302  4878 0053 3885          pea       83
00002306  4E92      3886          jsr       (A2)
00002308  584F      3887          addq.w    #4,A7
0000230A  6008      3888          bra.s     DumpRegisters_23
                    3889   DumpRegisters_22:
0000230C  4878 0055 3890          pea       85
00002310  4E92      3891          jsr       (A2)
00002312  584F      3892          addq.w    #4,A7
                    3893   DumpRegisters_23:
                    3894   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00002314  3014      3895          move.w    (A4),D0
00002316  C07C 0400 3896          and.w     #1024,D0
0000231A  0C40 0400 3897          cmp.w     #1024,D0
0000231E  660A      3898          bne.s     DumpRegisters_24
00002320  4878 0031 3899          pea       49
00002324  4E92      3900          jsr       (A2)
00002326  584F      3901          addq.w    #4,A7
00002328  6008      3902          bra.s     DumpRegisters_25
                    3903   DumpRegisters_24:
0000232A  4878 0030 3904          pea       48
0000232E  4E92      3905          jsr       (A2)
00002330  584F      3906          addq.w    #4,A7
                    3907   DumpRegisters_25:
                    3908   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00002332  3014      3909          move.w    (A4),D0
00002334  C07C 0200 3910          and.w     #512,D0
00002338  0C40 0200 3911          cmp.w     #512,D0
0000233C  660A      3912          bne.s     DumpRegisters_26
0000233E  4878 0031 3913          pea       49
00002342  4E92      3914          jsr       (A2)
00002344  584F      3915          addq.w    #4,A7
00002346  6008      3916          bra.s     DumpRegisters_27
                    3917   DumpRegisters_26:
00002348  4878 0030 3918          pea       48
0000234C  4E92      3919          jsr       (A2)
0000234E  584F      3920          addq.w    #4,A7
                    3921   DumpRegisters_27:
                    3922   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00002350  3014      3923          move.w    (A4),D0
00002352  C07C 0100 3924          and.w     #256,D0
00002356  0C40 0100 3925          cmp.w     #256,D0
0000235A  660A      3926          bne.s     DumpRegisters_28
0000235C  4878 0031 3927          pea       49
00002360  4E92      3928          jsr       (A2)
00002362  584F      3929          addq.w    #4,A7
00002364  6008      3930          bra.s     DumpRegisters_29
                    3931   DumpRegisters_28:
00002366  4878 0030 3932          pea       48
0000236A  4E92      3933          jsr       (A2)
0000236C  584F      3934          addq.w    #4,A7
                    3935   DumpRegisters_29:
                    3936   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000236E  3014      3937          move.w    (A4),D0
00002370  C07C 0010 3938          and.w     #16,D0
00002374  0C40 0010 3939          cmp.w     #16,D0
00002378  660A      3940          bne.s     DumpRegisters_30
0000237A  4878 0058 3941          pea       88
0000237E  4E92      3942          jsr       (A2)
00002380  584F      3943          addq.w    #4,A7
00002382  6008      3944          bra.s     DumpRegisters_31
                    3945   DumpRegisters_30:
00002384  4878 002D 3946          pea       45
00002388  4E92      3947          jsr       (A2)
0000238A  584F      3948          addq.w    #4,A7
                    3949   DumpRegisters_31:
                    3950   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
0000238C  3014      3951          move.w    (A4),D0
0000238E  C07C 0008 3952          and.w     #8,D0
00002392  0C40 0008 3953          cmp.w     #8,D0
00002396  660A      3954          bne.s     DumpRegisters_32
00002398  4878 004E 3955          pea       78
0000239C  4E92      3956          jsr       (A2)
0000239E  584F      3957          addq.w    #4,A7
000023A0  6008      3958          bra.s     DumpRegisters_33
                    3959   DumpRegisters_32:
000023A2  4878 002D 3960          pea       45
000023A6  4E92      3961          jsr       (A2)
000023A8  584F      3962          addq.w    #4,A7
                    3963   DumpRegisters_33:
                    3964   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000023AA  3014      3965          move.w    (A4),D0
000023AC  C07C 0004 3966          and.w     #4,D0
000023B0  0C40 0004 3967          cmp.w     #4,D0
000023B4  660A      3968          bne.s     DumpRegisters_34
000023B6  4878 005A 3969          pea       90
000023BA  4E92      3970          jsr       (A2)
000023BC  584F      3971          addq.w    #4,A7
000023BE  6008      3972          bra.s     DumpRegisters_35
                    3973   DumpRegisters_34:
000023C0  4878 002D 3974          pea       45
000023C4  4E92      3975          jsr       (A2)
000023C6  584F      3976          addq.w    #4,A7
                    3977   DumpRegisters_35:
                    3978   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000023C8  3014      3979          move.w    (A4),D0
000023CA  C07C 0002 3980          and.w     #2,D0
000023CE  0C40 0002 3981          cmp.w     #2,D0
000023D2  660A      3982          bne.s     DumpRegisters_36
000023D4  4878 0056 3983          pea       86
000023D8  4E92      3984          jsr       (A2)
000023DA  584F      3985          addq.w    #4,A7
000023DC  6008      3986          bra.s     DumpRegisters_37
                    3987   DumpRegisters_36:
000023DE  4878 002D 3988          pea       45
000023E2  4E92      3989          jsr       (A2)
000023E4  584F      3990          addq.w    #4,A7
                    3991   DumpRegisters_37:
                    3992   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000023E6  3014      3993          move.w    (A4),D0
000023E8  C07C 0001 3994          and.w     #1,D0
000023EC  0C40 0001 3995          cmp.w     #1,D0
000023F0  660A      3996          bne.s     DumpRegisters_38
000023F2  4878 0043 3997          pea       67
000023F6  4E92      3998          jsr       (A2)
000023F8  584F      3999          addq.w    #4,A7
000023FA  6008      4000          bra.s     DumpRegisters_39
                    4001   DumpRegisters_38:
000023FC  4878 002D 4002          pea       45
00002400  4E92      4003          jsr       (A2)
00002402  584F      4004          addq.w    #4,A7
                    4005   DumpRegisters_39:
                    4006   ; putchar(']') ;
00002404  4878 005D 4007          pea       93
00002408  4E92      4008          jsr       (A2)
0000240A  584F      4009          addq.w    #4,A7
                    4010   ; printf("\r\n PC = $%08X  ", PC) ;
0000240C  2F39 0B00 4011          move.l    _PC.L,-(A7)
00002410  0120      
00002412  4879 0000 4012          pea       @m68kde~1_86.L
00002416  583C      
00002418  4E93      4013          jsr       (A3)
0000241A  504F      4014          addq.w    #8,A7
                    4015   ; if(*(unsigned short int *)(PC) == 0x4e4e)
0000241C  2039 0B00 4016          move.l    _PC.L,D0
00002420  0120      
00002422  2040      4017          move.l    D0,A0
00002424  3010      4018          move.w    (A0),D0
00002426  0C40 4E4E 4019          cmp.w     #20046,D0
0000242A  660A      4020          bne.s     DumpRegisters_40
                    4021   ; printf("[@ BREAKPOINT]") ;
0000242C  4879 0000 4022          pea       @m68kde~1_87.L
00002430  584C      
00002432  4E93      4023          jsr       (A3)
00002434  584F      4024          addq.w    #4,A7
                    4025   DumpRegisters_40:
                    4026   ; printf("\r\n") ;
00002436  4879 0000 4027          pea       @m68kde~1_1.L
0000243A  4F44      
0000243C  4E93      4028          jsr       (A3)
0000243E  584F      4029          addq.w    #4,A7
                    4030   ; for(i=0; i < 8; i++)    {
00002440  4244      4031          clr.w     D4
                    4032   DumpRegisters_42:
00002442  0C44 0008 4033          cmp.w     #8,D4
00002446  6C00 0040 4034          bge       DumpRegisters_44
                    4035   ; if(WatchPointSetOrCleared[i] == 1)
0000244A  48C4      4036          ext.l     D4
0000244C  2004      4037          move.l    D4,D0
0000244E  E588      4038          lsl.l     #2,D0
00002450  41F9 0B00 4039          lea       _WatchPointSetOrCleared.L,A0
00002454  01A2      
00002456  2030 0800 4040          move.l    0(A0,D0.L),D0
0000245A  0C80 0000 4041          cmp.l     #1,D0
0000245E  0001      
00002460  6622      4042          bne.s     DumpRegisters_45
                    4043   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00002462  220D      4044          move.l    A5,D1
00002464  48C4      4045          ext.l     D4
00002466  2F00      4046          move.l    D0,-(A7)
00002468  2004      4047          move.l    D4,D0
0000246A  C1FC 0064 4048          muls      #100,D0
0000246E  D280      4049          add.l     D0,D1
00002470  201F      4050          move.l    (A7)+,D0
00002472  2F01      4051          move.l    D1,-(A7)
00002474  48C4      4052          ext.l     D4
00002476  2F04      4053          move.l    D4,-(A7)
00002478  4879 0000 4054          pea       @m68kde~1_88.L
0000247C  585C      
0000247E  4E93      4055          jsr       (A3)
00002480  DEFC 000C 4056          add.w     #12,A7
                    4057   DumpRegisters_45:
00002484  5244      4058          addq.w    #1,D4
00002486  60BA      4059          bra       DumpRegisters_42
                    4060   DumpRegisters_44:
00002488  4CDF 3CFC 4061          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000248C  4E75      4062          rts
                    4063   ; }
                    4064   ; }
                    4065   ; // Trace Exception Handler
                    4066   ; void DumpRegistersandPause(void)
                    4067   ; {
                    4068   _DumpRegistersandPause:
0000248E  2F0A      4069          move.l    A2,-(A7)
00002490  45F9 0000 4070          lea       _printf.L,A2
00002494  456E      
                    4071   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00002496  4879 0000 4072          pea       @m68kde~1_89.L
0000249A  5868      
0000249C  4E92      4073          jsr       (A2)
0000249E  584F      4074          addq.w    #4,A7
                    4075   ; printf("\r\nBreak Points :[Disabled]") ;
000024A0  4879 0000 4076          pea       @m68kde~1_90.L
000024A4  5888      
000024A6  4E92      4077          jsr       (A2)
000024A8  584F      4078          addq.w    #4,A7
                    4079   ; DumpRegisters() ;
000024AA  4EB8 1FDA 4080          jsr       _DumpRegisters
                    4081   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000024AE  4879 0000 4082          pea       @m68kde~1_91.L
000024B2  58A4      
000024B4  4E92      4083          jsr       (A2)
000024B6  584F      4084          addq.w    #4,A7
                    4085   ; printf("\r\nPress <ESC> to Resume Program") ;
000024B8  4879 0000 4086          pea       @m68kde~1_92.L
000024BC  58D0      
000024BE  4E92      4087          jsr       (A2)
000024C0  584F      4088          addq.w    #4,A7
                    4089   ; menu() ;
000024C2  4EB9 0000 4090          jsr       _menu
000024C6  3072      
000024C8  245F      4091          move.l    (A7)+,A2
000024CA  4E75      4092          rts
                    4093   ; }
                    4094   ; void ChangeRegisters(void)
                    4095   ; {
                    4096   _ChangeRegisters:
000024CC  4E56 FFFC 4097          link      A6,#-4
000024D0  48E7 303C 4098          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000024D4  45F9 0000 4099          lea       _printf.L,A2
000024D8  456E      
000024DA  47EE FFFC 4100          lea       -4(A6),A3
000024DE  49F8 0CA4 4101          lea       _Get8HexDigits.L,A4
000024E2  4BF8 0B68 4102          lea       __getch.L,A5
                    4103   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    4104   ; int reg_val ;
                    4105   ; char c, reg[3] ;
                    4106   ; reg[0] = tolower(_getch()) ;
000024E6  2F00      4107          move.l    D0,-(A7)
000024E8  4E95      4108          jsr       (A5)
000024EA  2200      4109          move.l    D0,D1
000024EC  201F      4110          move.l    (A7)+,D0
000024EE  2F01      4111          move.l    D1,-(A7)
000024F0  4EB9 0000 4112          jsr       _tolower
000024F4  3C1E      
000024F6  584F      4113          addq.w    #4,A7
000024F8  1680      4114          move.b    D0,(A3)
                    4115   ; reg[1] = c = tolower(_getch()) ;
000024FA  2F00      4116          move.l    D0,-(A7)
000024FC  4E95      4117          jsr       (A5)
000024FE  2200      4118          move.l    D0,D1
00002500  201F      4119          move.l    (A7)+,D0
00002502  2F01      4120          move.l    D1,-(A7)
00002504  4EB9 0000 4121          jsr       _tolower
00002508  3C1E      
0000250A  584F      4122          addq.w    #4,A7
0000250C  1400      4123          move.b    D0,D2
0000250E  1740 0001 4124          move.b    D0,1(A3)
                    4125   ; if(reg[0] == (char)('d'))  {    // change data register
00002512  1013      4126          move.b    (A3),D0
00002514  0C00 0064 4127          cmp.b     #100,D0
00002518  6600 00AE 4128          bne       ChangeRegisters_1
                    4129   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
0000251C  102B 0001 4130          move.b    1(A3),D0
00002520  0C00 0037 4131          cmp.b     #55,D0
00002524  6E0A      4132          bgt.s     ChangeRegisters_5
00002526  102B 0001 4133          move.b    1(A3),D0
0000252A  0C00 0030 4134          cmp.b     #48,D0
0000252E  6C0E      4135          bge.s     ChangeRegisters_3
                    4136   ChangeRegisters_5:
                    4137   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00002530  4879 0000 4138          pea       @m68kde~1_93.L
00002534  58F0      
00002536  4E92      4139          jsr       (A2)
00002538  584F      4140          addq.w    #4,A7
                    4141   ; return ;
0000253A  6000 0244 4142          bra       ChangeRegisters_6
                    4143   ChangeRegisters_3:
                    4144   ; }
                    4145   ; else {
                    4146   ; printf("\r\nD%c = ", c) ;
0000253E  4882      4147          ext.w     D2
00002540  48C2      4148          ext.l     D2
00002542  2F02      4149          move.l    D2,-(A7)
00002544  4879 0000 4150          pea       @m68kde~1_94.L
00002548  591C      
0000254A  4E92      4151          jsr       (A2)
0000254C  504F      4152          addq.w    #8,A7
                    4153   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000254E  42A7      4154          clr.l     -(A7)
00002550  4E94      4155          jsr       (A4)
00002552  584F      4156          addq.w    #4,A7
00002554  2600      4157          move.l    D0,D3
                    4158   ; }
                    4159   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    4160   ; if(c == (char)('0'))
00002556  0C02 0030 4161          cmp.b     #48,D2
0000255A  660A      4162          bne.s     ChangeRegisters_7
                    4163   ; d0 = reg_val ;
0000255C  23C3 0B00 4164          move.l    D3,_d0.L
00002560  00E4      
00002562  6000 0060 4165          bra       ChangeRegisters_20
                    4166   ChangeRegisters_7:
                    4167   ; else if(c == (char)('1'))
00002566  0C02 0031 4168          cmp.b     #49,D2
0000256A  660A      4169          bne.s     ChangeRegisters_9
                    4170   ; d1 = reg_val ;
0000256C  23C3 0B00 4171          move.l    D3,_d1.L
00002570  00E8      
00002572  6000 0050 4172          bra       ChangeRegisters_20
                    4173   ChangeRegisters_9:
                    4174   ; else if(c == (char)('2'))
00002576  0C02 0032 4175          cmp.b     #50,D2
0000257A  660A      4176          bne.s     ChangeRegisters_11
                    4177   ; d2 = reg_val ;
0000257C  23C3 0B00 4178          move.l    D3,_d2.L
00002580  00EC      
00002582  6000 0040 4179          bra       ChangeRegisters_20
                    4180   ChangeRegisters_11:
                    4181   ; else if(c == (char)('3'))
00002586  0C02 0033 4182          cmp.b     #51,D2
0000258A  6608      4183          bne.s     ChangeRegisters_13
                    4184   ; d3 = reg_val ;
0000258C  23C3 0B00 4185          move.l    D3,_d3.L
00002590  00F0      
00002592  6030      4186          bra.s     ChangeRegisters_20
                    4187   ChangeRegisters_13:
                    4188   ; else if(c == (char)('4'))
00002594  0C02 0034 4189          cmp.b     #52,D2
00002598  6608      4190          bne.s     ChangeRegisters_15
                    4191   ; d4 = reg_val ;
0000259A  23C3 0B00 4192          move.l    D3,_d4.L
0000259E  00F4      
000025A0  6022      4193          bra.s     ChangeRegisters_20
                    4194   ChangeRegisters_15:
                    4195   ; else if(c == (char)('5'))
000025A2  0C02 0035 4196          cmp.b     #53,D2
000025A6  6608      4197          bne.s     ChangeRegisters_17
                    4198   ; d5 = reg_val ;
000025A8  23C3 0B00 4199          move.l    D3,_d5.L
000025AC  00F8      
000025AE  6014      4200          bra.s     ChangeRegisters_20
                    4201   ChangeRegisters_17:
                    4202   ; else if(c == (char)('6'))
000025B0  0C02 0036 4203          cmp.b     #54,D2
000025B4  6608      4204          bne.s     ChangeRegisters_19
                    4205   ; d6 = reg_val ;
000025B6  23C3 0B00 4206          move.l    D3,_d6.L
000025BA  00FC      
000025BC  6006      4207          bra.s     ChangeRegisters_20
                    4208   ChangeRegisters_19:
                    4209   ; else
                    4210   ; d7 = reg_val ;
000025BE  23C3 0B00 4211          move.l    D3,_d7.L
000025C2  0100      
                    4212   ChangeRegisters_20:
000025C4  6000 01B6 4213          bra       ChangeRegisters_51
                    4214   ChangeRegisters_1:
                    4215   ; }
                    4216   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000025C8  1013      4217          move.b    (A3),D0
000025CA  0C00 0061 4218          cmp.b     #97,D0
000025CE  6600 00A6 4219          bne       ChangeRegisters_21
                    4220   ; if((c > (char)('7')) || (c < (char)('0'))) {
000025D2  0C02 0037 4221          cmp.b     #55,D2
000025D6  6E06      4222          bgt.s     ChangeRegisters_25
000025D8  0C02 0030 4223          cmp.b     #48,D2
000025DC  6C0E      4224          bge.s     ChangeRegisters_23
                    4225   ChangeRegisters_25:
                    4226   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000025DE  4879 0000 4227          pea       @m68kde~1_95.L
000025E2  5926      
000025E4  4E92      4228          jsr       (A2)
000025E6  584F      4229          addq.w    #4,A7
                    4230   ; return ;
000025E8  6000 0196 4231          bra       ChangeRegisters_6
                    4232   ChangeRegisters_23:
                    4233   ; }
                    4234   ; else {
                    4235   ; printf("\r\nA%c = ", c) ;
000025EC  4882      4236          ext.w     D2
000025EE  48C2      4237          ext.l     D2
000025F0  2F02      4238          move.l    D2,-(A7)
000025F2  4879 0000 4239          pea       @m68kde~1_96.L
000025F6  5954      
000025F8  4E92      4240          jsr       (A2)
000025FA  504F      4241          addq.w    #8,A7
                    4242   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000025FC  42A7      4243          clr.l     -(A7)
000025FE  4E94      4244          jsr       (A4)
00002600  584F      4245          addq.w    #4,A7
00002602  2600      4246          move.l    D0,D3
                    4247   ; }
                    4248   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    4249   ; if(c == (char)('0'))
00002604  0C02 0030 4250          cmp.b     #48,D2
00002608  660A      4251          bne.s     ChangeRegisters_26
                    4252   ; a0 = reg_val ;
0000260A  23C3 0B00 4253          move.l    D3,_a0.L
0000260E  0104      
00002610  6000 0060 4254          bra       ChangeRegisters_39
                    4255   ChangeRegisters_26:
                    4256   ; else if(c == (char)('1'))
00002614  0C02 0031 4257          cmp.b     #49,D2
00002618  660A      4258          bne.s     ChangeRegisters_28
                    4259   ; a1 = reg_val ;
0000261A  23C3 0B00 4260          move.l    D3,_a1.L
0000261E  0108      
00002620  6000 0050 4261          bra       ChangeRegisters_39
                    4262   ChangeRegisters_28:
                    4263   ; else if(c == (char)('2'))
00002624  0C02 0032 4264          cmp.b     #50,D2
00002628  660A      4265          bne.s     ChangeRegisters_30
                    4266   ; a2 = reg_val ;
0000262A  23C3 0B00 4267          move.l    D3,_a2.L
0000262E  010C      
00002630  6000 0040 4268          bra       ChangeRegisters_39
                    4269   ChangeRegisters_30:
                    4270   ; else if(c == (char)('3'))
00002634  0C02 0033 4271          cmp.b     #51,D2
00002638  6608      4272          bne.s     ChangeRegisters_32
                    4273   ; a3 = reg_val ;
0000263A  23C3 0B00 4274          move.l    D3,_a3.L
0000263E  0110      
00002640  6030      4275          bra.s     ChangeRegisters_39
                    4276   ChangeRegisters_32:
                    4277   ; else if(c == (char)('4'))
00002642  0C02 0034 4278          cmp.b     #52,D2
00002646  6608      4279          bne.s     ChangeRegisters_34
                    4280   ; a4 = reg_val ;
00002648  23C3 0B00 4281          move.l    D3,_a4.L
0000264C  0114      
0000264E  6022      4282          bra.s     ChangeRegisters_39
                    4283   ChangeRegisters_34:
                    4284   ; else if(c == (char)('5'))
00002650  0C02 0035 4285          cmp.b     #53,D2
00002654  6608      4286          bne.s     ChangeRegisters_36
                    4287   ; a5 = reg_val ;
00002656  23C3 0B00 4288          move.l    D3,_a5.L
0000265A  0118      
0000265C  6014      4289          bra.s     ChangeRegisters_39
                    4290   ChangeRegisters_36:
                    4291   ; else if(c == (char)('6'))
0000265E  0C02 0036 4292          cmp.b     #54,D2
00002662  6608      4293          bne.s     ChangeRegisters_38
                    4294   ; a6 = reg_val ;
00002664  23C3 0B00 4295          move.l    D3,_a6.L
00002668  011C      
0000266A  6006      4296          bra.s     ChangeRegisters_39
                    4297   ChangeRegisters_38:
                    4298   ; else
                    4299   ; USP = reg_val ;
0000266C  23C3 0B00 4300          move.l    D3,_USP.L
00002670  0128      
                    4301   ChangeRegisters_39:
00002672  6000 0108 4302          bra       ChangeRegisters_51
                    4303   ChangeRegisters_21:
                    4304   ; }
                    4305   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00002676  1013      4306          move.b    (A3),D0
00002678  0C00 0075 4307          cmp.b     #117,D0
0000267C  6600 004E 4308          bne       ChangeRegisters_40
00002680  0C02 0073 4309          cmp.b     #115,D2
00002684  6600 0046 4310          bne       ChangeRegisters_40
                    4311   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00002688  2F00      4312          move.l    D0,-(A7)
0000268A  4E95      4313          jsr       (A5)
0000268C  2200      4314          move.l    D0,D1
0000268E  201F      4315          move.l    (A7)+,D0
00002690  2F01      4316          move.l    D1,-(A7)
00002692  4EB9 0000 4317          jsr       _tolower
00002696  3C1E      
00002698  584F      4318          addq.w    #4,A7
0000269A  0C80 0000 4319          cmp.l     #112,D0
0000269E  0070      
000026A0  6618      4320          bne.s     ChangeRegisters_42
                    4321   ; printf("\r\nUser SP = ") ;
000026A2  4879 0000 4322          pea       @m68kde~1_97.L
000026A6  595E      
000026A8  4E92      4323          jsr       (A2)
000026AA  584F      4324          addq.w    #4,A7
                    4325   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000026AC  42A7      4326          clr.l     -(A7)
000026AE  4E94      4327          jsr       (A4)
000026B0  584F      4328          addq.w    #4,A7
000026B2  23C0 0B00 4329          move.l    D0,_USP.L
000026B6  0128      
000026B8  600E      4330          bra.s     ChangeRegisters_43
                    4331   ChangeRegisters_42:
                    4332   ; }
                    4333   ; else {
                    4334   ; printf("\r\nIllegal Register....") ;
000026BA  4879 0000 4335          pea       @m68kde~1_98.L
000026BE  596C      
000026C0  4E92      4336          jsr       (A2)
000026C2  584F      4337          addq.w    #4,A7
                    4338   ; return ;
000026C4  6000 00BA 4339          bra       ChangeRegisters_6
                    4340   ChangeRegisters_43:
000026C8  6000 00B2 4341          bra       ChangeRegisters_51
                    4342   ChangeRegisters_40:
                    4343   ; }
                    4344   ; }
                    4345   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000026CC  1013      4346          move.b    (A3),D0
000026CE  0C00 0073 4347          cmp.b     #115,D0
000026D2  6600 004E 4348          bne       ChangeRegisters_44
000026D6  0C02 0073 4349          cmp.b     #115,D2
000026DA  6600 0046 4350          bne       ChangeRegisters_44
                    4351   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000026DE  2F00      4352          move.l    D0,-(A7)
000026E0  4E95      4353          jsr       (A5)
000026E2  2200      4354          move.l    D0,D1
000026E4  201F      4355          move.l    (A7)+,D0
000026E6  2F01      4356          move.l    D1,-(A7)
000026E8  4EB9 0000 4357          jsr       _tolower
000026EC  3C1E      
000026EE  584F      4358          addq.w    #4,A7
000026F0  0C80 0000 4359          cmp.l     #112,D0
000026F4  0070      
000026F6  6618      4360          bne.s     ChangeRegisters_46
                    4361   ; printf("\r\nSystem SP = ") ;
000026F8  4879 0000 4362          pea       @m68kde~1_99.L
000026FC  5984      
000026FE  4E92      4363          jsr       (A2)
00002700  584F      4364          addq.w    #4,A7
                    4365   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00002702  42A7      4366          clr.l     -(A7)
00002704  4E94      4367          jsr       (A4)
00002706  584F      4368          addq.w    #4,A7
00002708  23C0 0B00 4369          move.l    D0,_SSP.L
0000270C  0124      
0000270E  600E      4370          bra.s     ChangeRegisters_47
                    4371   ChangeRegisters_46:
                    4372   ; }
                    4373   ; else {
                    4374   ; printf("\r\nIllegal Register....") ;
00002710  4879 0000 4375          pea       @m68kde~1_98.L
00002714  596C      
00002716  4E92      4376          jsr       (A2)
00002718  584F      4377          addq.w    #4,A7
                    4378   ; return ;
0000271A  6000 0064 4379          bra       ChangeRegisters_6
                    4380   ChangeRegisters_47:
0000271E  6000 005C 4381          bra       ChangeRegisters_51
                    4382   ChangeRegisters_44:
                    4383   ; }
                    4384   ; }
                    4385   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00002722  1013      4386          move.b    (A3),D0
00002724  0C00 0070 4387          cmp.b     #112,D0
00002728  6620      4388          bne.s     ChangeRegisters_48
0000272A  0C02 0063 4389          cmp.b     #99,D2
0000272E  661A      4390          bne.s     ChangeRegisters_48
                    4391   ; printf("\r\nPC = ") ;
00002730  4879 0000 4392          pea       @m68kde~1_100.L
00002734  5994      
00002736  4E92      4393          jsr       (A2)
00002738  584F      4394          addq.w    #4,A7
                    4395   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000273A  42A7      4396          clr.l     -(A7)
0000273C  4E94      4397          jsr       (A4)
0000273E  584F      4398          addq.w    #4,A7
00002740  23C0 0B00 4399          move.l    D0,_PC.L
00002744  0120      
00002746  6000 0034 4400          bra       ChangeRegisters_51
                    4401   ChangeRegisters_48:
                    4402   ; }
                    4403   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
0000274A  1013      4404          move.b    (A3),D0
0000274C  0C00 0073 4405          cmp.b     #115,D0
00002750  6620      4406          bne.s     ChangeRegisters_50
00002752  0C02 0072 4407          cmp.b     #114,D2
00002756  661A      4408          bne.s     ChangeRegisters_50
                    4409   ; printf("\r\nSR = ") ;
00002758  4879 0000 4410          pea       @m68kde~1_101.L
0000275C  599C      
0000275E  4E92      4411          jsr       (A2)
00002760  584F      4412          addq.w    #4,A7
                    4413   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00002762  42A7      4414          clr.l     -(A7)
00002764  4EB8 0C58 4415          jsr       _Get4HexDigits
00002768  584F      4416          addq.w    #4,A7
0000276A  33C0 0B00 4417          move.w    D0,_SR.L
0000276E  012C      
00002770  600A      4418          bra.s     ChangeRegisters_51
                    4419   ChangeRegisters_50:
                    4420   ; }
                    4421   ; else
                    4422   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00002772  4879 0000 4423          pea       @m68kde~1_102.L
00002776  59A4      
00002778  4E92      4424          jsr       (A2)
0000277A  584F      4425          addq.w    #4,A7
                    4426   ChangeRegisters_51:
                    4427   ; DumpRegisters() ;
0000277C  4EB8 1FDA 4428          jsr       _DumpRegisters
                    4429   ChangeRegisters_6:
00002780  4CDF 3C0C 4430          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002784  4E5E      4431          unlk      A6
00002786  4E75      4432          rts
                    4433   ; }
                    4434   ; void BreakPointDisplay(void)
                    4435   ; {
                    4436   _BreakPointDisplay:
00002788  48E7 3030 4437          movem.l   D2/D3/A2/A3,-(A7)
0000278C  45F9 0000 4438          lea       _printf.L,A2
00002790  456E      
00002792  47F9 0B00 4439          lea       _BreakPointAddress.L,A3
00002796  012E      
                    4440   ; int i, BreakPointsSet = 0 ;
00002798  4283      4441          clr.l     D3
                    4442   ; // any break points  set
                    4443   ; for(i = 0; i < 8; i++)  {
0000279A  4282      4444          clr.l     D2
                    4445   BreakPointDisplay_1:
0000279C  0C82 0000 4446          cmp.l     #8,D2
000027A0  0008      
000027A2  6C1C      4447          bge.s     BreakPointDisplay_3
                    4448   ; if(BreakPointSetOrCleared[i] == 1)
000027A4  2002      4449          move.l    D2,D0
000027A6  E588      4450          lsl.l     #2,D0
000027A8  41F9 0B00 4451          lea       _BreakPointSetOrCleared.L,A0
000027AC  015E      
000027AE  2030 0800 4452          move.l    0(A0,D0.L),D0
000027B2  0C80 0000 4453          cmp.l     #1,D0
000027B6  0001      
000027B8  6602      4454          bne.s     BreakPointDisplay_4
                    4455   ; BreakPointsSet = 1;
000027BA  7601      4456          moveq     #1,D3
                    4457   BreakPointDisplay_4:
000027BC  5282      4458          addq.l    #1,D2
000027BE  60DC      4459          bra       BreakPointDisplay_1
                    4460   BreakPointDisplay_3:
                    4461   ; }
                    4462   ; if(BreakPointsSet == 1) {
000027C0  0C83 0000 4463          cmp.l     #1,D3
000027C4  0001      
000027C6  6616      4464          bne.s     BreakPointDisplay_6
                    4465   ; printf("\r\n\r\nNum     Address      Instruction") ;
000027C8  4879 0000 4466          pea       @m68kde~1_103.L
000027CC  59E0      
000027CE  4E92      4467          jsr       (A2)
000027D0  584F      4468          addq.w    #4,A7
                    4469   ; printf("\r\n---     ---------    -----------") ;
000027D2  4879 0000 4470          pea       @m68kde~1_104.L
000027D6  5A06      
000027D8  4E92      4471          jsr       (A2)
000027DA  584F      4472          addq.w    #4,A7
000027DC  600A      4473          bra.s     BreakPointDisplay_7
                    4474   BreakPointDisplay_6:
                    4475   ; }
                    4476   ; else
                    4477   ; printf("\r\nNo BreakPoints Set") ;
000027DE  4879 0000 4478          pea       @m68kde~1_105.L
000027E2  5A2A      
000027E4  4E92      4479          jsr       (A2)
000027E6  584F      4480          addq.w    #4,A7
                    4481   BreakPointDisplay_7:
                    4482   ; for(i = 0; i < 8; i++)  {
000027E8  4282      4483          clr.l     D2
                    4484   BreakPointDisplay_8:
000027EA  0C82 0000 4485          cmp.l     #8,D2
000027EE  0008      
000027F0  6C00 005A 4486          bge       BreakPointDisplay_10
                    4487   ; // put opcode back, then put break point back
                    4488   ; if(BreakPointSetOrCleared[i] == 1)  {
000027F4  2002      4489          move.l    D2,D0
000027F6  E588      4490          lsl.l     #2,D0
000027F8  41F9 0B00 4491          lea       _BreakPointSetOrCleared.L,A0
000027FC  015E      
000027FE  2030 0800 4492          move.l    0(A0,D0.L),D0
00002802  0C80 0000 4493          cmp.l     #1,D0
00002806  0001      
00002808  6600 003E 4494          bne       BreakPointDisplay_11
                    4495   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
0000280C  2002      4496          move.l    D2,D0
0000280E  E388      4497          lsl.l     #1,D0
00002810  41F9 0B00 4498          lea       _BreakPointInstruction.L,A0
00002814  014E      
00002816  2202      4499          move.l    D2,D1
00002818  E589      4500          lsl.l     #2,D1
0000281A  2233 1800 4501          move.l    0(A3,D1.L),D1
0000281E  2241      4502          move.l    D1,A1
00002820  32B0 0800 4503          move.w    0(A0,D0.L),(A1)
                    4504   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00002824  2002      4505          move.l    D2,D0
00002826  E588      4506          lsl.l     #2,D0
00002828  2033 0800 4507          move.l    0(A3,D0.L),D0
0000282C  2040      4508          move.l    D0,A0
0000282E  30BC 4E4E 4509          move.w    #20046,(A0)
                    4510   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00002832  2202      4511          move.l    D2,D1
00002834  E589      4512          lsl.l     #2,D1
00002836  2F33 1800 4513          move.l    0(A3,D1.L),-(A7)
0000283A  2F02      4514          move.l    D2,-(A7)
0000283C  4879 0000 4515          pea       @m68kde~1_106.L
00002840  5A40      
00002842  4E92      4516          jsr       (A2)
00002844  DEFC 000C 4517          add.w     #12,A7
                    4518   BreakPointDisplay_11:
00002848  5282      4519          addq.l    #1,D2
0000284A  609E      4520          bra       BreakPointDisplay_8
                    4521   BreakPointDisplay_10:
                    4522   ; }
                    4523   ; }
                    4524   ; printf("\r\n") ;
0000284C  4879 0000 4525          pea       @m68kde~1_1.L
00002850  4F44      
00002852  4E92      4526          jsr       (A2)
00002854  584F      4527          addq.w    #4,A7
00002856  4CDF 0C0C 4528          movem.l   (A7)+,D2/D3/A2/A3
0000285A  4E75      4529          rts
                    4530   ; }
                    4531   ; void WatchPointDisplay(void)
                    4532   ; {
                    4533   _WatchPointDisplay:
0000285C  48E7 3020 4534          movem.l   D2/D3/A2,-(A7)
00002860  45F9 0000 4535          lea       _printf.L,A2
00002864  456E      
                    4536   ; int i ;
                    4537   ; int WatchPointsSet = 0 ;
00002866  4283      4538          clr.l     D3
                    4539   ; // any watchpoints set
                    4540   ; for(i = 0; i < 8; i++)  {
00002868  4282      4541          clr.l     D2
                    4542   WatchPointDisplay_1:
0000286A  0C82 0000 4543          cmp.l     #8,D2
0000286E  0008      
00002870  6C1C      4544          bge.s     WatchPointDisplay_3
                    4545   ; if(WatchPointSetOrCleared[i] == 1)
00002872  2002      4546          move.l    D2,D0
00002874  E588      4547          lsl.l     #2,D0
00002876  41F9 0B00 4548          lea       _WatchPointSetOrCleared.L,A0
0000287A  01A2      
0000287C  2030 0800 4549          move.l    0(A0,D0.L),D0
00002880  0C80 0000 4550          cmp.l     #1,D0
00002884  0001      
00002886  6602      4551          bne.s     WatchPointDisplay_4
                    4552   ; WatchPointsSet = 1;
00002888  7601      4553          moveq     #1,D3
                    4554   WatchPointDisplay_4:
0000288A  5282      4555          addq.l    #1,D2
0000288C  60DC      4556          bra       WatchPointDisplay_1
                    4557   WatchPointDisplay_3:
                    4558   ; }
                    4559   ; if(WatchPointsSet == 1) {
0000288E  0C83 0000 4560          cmp.l     #1,D3
00002892  0001      
00002894  6616      4561          bne.s     WatchPointDisplay_6
                    4562   ; printf("\r\nNum     Address") ;
00002896  4879 0000 4563          pea       @m68kde~1_107.L
0000289A  5A50      
0000289C  4E92      4564          jsr       (A2)
0000289E  584F      4565          addq.w    #4,A7
                    4566   ; printf("\r\n---     ---------") ;
000028A0  4879 0000 4567          pea       @m68kde~1_108.L
000028A4  5A62      
000028A6  4E92      4568          jsr       (A2)
000028A8  584F      4569          addq.w    #4,A7
000028AA  600A      4570          bra.s     WatchPointDisplay_7
                    4571   WatchPointDisplay_6:
                    4572   ; }
                    4573   ; else
                    4574   ; printf("\r\nNo WatchPoints Set") ;
000028AC  4879 0000 4575          pea       @m68kde~1_109.L
000028B0  5A76      
000028B2  4E92      4576          jsr       (A2)
000028B4  584F      4577          addq.w    #4,A7
                    4578   WatchPointDisplay_7:
                    4579   ; for(i = 0; i < 8; i++)  {
000028B6  4282      4580          clr.l     D2
                    4581   WatchPointDisplay_8:
000028B8  0C82 0000 4582          cmp.l     #8,D2
000028BC  0008      
000028BE  6C00 0038 4583          bge       WatchPointDisplay_10
                    4584   ; if(WatchPointSetOrCleared[i] == 1)
000028C2  2002      4585          move.l    D2,D0
000028C4  E588      4586          lsl.l     #2,D0
000028C6  41F9 0B00 4587          lea       _WatchPointSetOrCleared.L,A0
000028CA  01A2      
000028CC  2030 0800 4588          move.l    0(A0,D0.L),D0
000028D0  0C80 0000 4589          cmp.l     #1,D0
000028D4  0001      
000028D6  661C      4590          bne.s     WatchPointDisplay_11
                    4591   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000028D8  2202      4592          move.l    D2,D1
000028DA  E589      4593          lsl.l     #2,D1
000028DC  41F9 0B00 4594          lea       _WatchPointAddress.L,A0
000028E0  0182      
000028E2  2F30 1800 4595          move.l    0(A0,D1.L),-(A7)
000028E6  2F02      4596          move.l    D2,-(A7)
000028E8  4879 0000 4597          pea       @m68kde~1_106.L
000028EC  5A40      
000028EE  4E92      4598          jsr       (A2)
000028F0  DEFC 000C 4599          add.w     #12,A7
                    4600   WatchPointDisplay_11:
000028F4  5282      4601          addq.l    #1,D2
000028F6  60C0      4602          bra       WatchPointDisplay_8
                    4603   WatchPointDisplay_10:
                    4604   ; }
                    4605   ; printf("\r\n") ;
000028F8  4879 0000 4606          pea       @m68kde~1_1.L
000028FC  4F44      
000028FE  4E92      4607          jsr       (A2)
00002900  584F      4608          addq.w    #4,A7
00002902  4CDF 040C 4609          movem.l   (A7)+,D2/D3/A2
00002906  4E75      4610          rts
                    4611   ; }
                    4612   ; void BreakPointClear(void)
                    4613   ; {
                    4614   _BreakPointClear:
00002908  4E56 FFFC 4615          link      A6,#-4
0000290C  48E7 2020 4616          movem.l   D2/A2,-(A7)
00002910  45F9 0000 4617          lea       _printf.L,A2
00002914  456E      
                    4618   ; unsigned int i ;
                    4619   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4620   ; BreakPointDisplay() ;
00002916  4EB8 2788 4621          jsr       _BreakPointDisplay
                    4622   ; printf("\r\nEnter Break Point Number: ") ;
0000291A  4879 0000 4623          pea       @m68kde~1_110.L
0000291E  5A8C      
00002920  4E92      4624          jsr       (A2)
00002922  584F      4625          addq.w    #4,A7
                    4626   ; i = xtod(_getch()) ;           // get break pointer number
00002924  2F00      4627          move.l    D0,-(A7)
00002926  4EB8 0B68 4628          jsr       __getch
0000292A  2200      4629          move.l    D0,D1
0000292C  201F      4630          move.l    (A7)+,D0
0000292E  2F01      4631          move.l    D1,-(A7)
00002930  4EB8 0BD2 4632          jsr       _xtod
00002934  584F      4633          addq.w    #4,A7
00002936  C0BC 0000 4634          and.l     #255,D0
0000293A  00FF      
0000293C  2400      4635          move.l    D0,D2
                    4636   ; if((i < 0) || (i > 7))   {
0000293E  0C82 0000 4637          cmp.l     #0,D2
00002942  0000      
00002944  6508      4638          blo.s     BreakPointClear_3
00002946  0C82 0000 4639          cmp.l     #7,D2
0000294A  0007      
0000294C  630E      4640          bls.s     BreakPointClear_1
                    4641   BreakPointClear_3:
                    4642   ; printf("\r\nIllegal Range : Use 0 - 7") ;
0000294E  4879 0000 4643          pea       @m68kde~1_111.L
00002952  5AAA      
00002954  4E92      4644          jsr       (A2)
00002956  584F      4645          addq.w    #4,A7
                    4646   ; return ;
00002958  6000 0080 4647          bra       BreakPointClear_4
                    4648   BreakPointClear_1:
                    4649   ; }
                    4650   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
0000295C  2002      4651          move.l    D2,D0
0000295E  E588      4652          lsl.l     #2,D0
00002960  41F9 0B00 4653          lea       _BreakPointSetOrCleared.L,A0
00002964  015E      
00002966  2030 0800 4654          move.l    0(A0,D0.L),D0
0000296A  0C80 0000 4655          cmp.l     #1,D0
0000296E  0001      
00002970  6600 005A 4656          bne       BreakPointClear_5
                    4657   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00002974  2002      4658          move.l    D2,D0
00002976  E588      4659          lsl.l     #2,D0
00002978  41F9 0B00 4660          lea       _BreakPointAddress.L,A0
0000297C  012E      
0000297E  2D70 0800 4661          move.l    0(A0,D0.L),-4(A6)
00002982  FFFC      
                    4662   ; BreakPointAddress[i] = 0 ;
00002984  2002      4663          move.l    D2,D0
00002986  E588      4664          lsl.l     #2,D0
00002988  41F9 0B00 4665          lea       _BreakPointAddress.L,A0
0000298C  012E      
0000298E  42B0 0800 4666          clr.l     0(A0,D0.L)
                    4667   ; BreakPointSetOrCleared[i] = 0 ;
00002992  2002      4668          move.l    D2,D0
00002994  E588      4669          lsl.l     #2,D0
00002996  41F9 0B00 4670          lea       _BreakPointSetOrCleared.L,A0
0000299A  015E      
0000299C  42B0 0800 4671          clr.l     0(A0,D0.L)
                    4672   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000029A0  2002      4673          move.l    D2,D0
000029A2  E388      4674          lsl.l     #1,D0
000029A4  41F9 0B00 4675          lea       _BreakPointInstruction.L,A0
000029A8  014E      
000029AA  226E FFFC 4676          move.l    -4(A6),A1
000029AE  32B0 0800 4677          move.w    0(A0,D0.L),(A1)
                    4678   ; BreakPointInstruction[i] = 0 ;
000029B2  2002      4679          move.l    D2,D0
000029B4  E388      4680          lsl.l     #1,D0
000029B6  41F9 0B00 4681          lea       _BreakPointInstruction.L,A0
000029BA  014E      
000029BC  4270 0800 4682          clr.w     0(A0,D0.L)
                    4683   ; printf("\r\nBreak Point Cleared.....\r\n") ;
000029C0  4879 0000 4684          pea       @m68kde~1_112.L
000029C4  5AC6      
000029C6  4E92      4685          jsr       (A2)
000029C8  584F      4686          addq.w    #4,A7
000029CA  600A      4687          bra.s     BreakPointClear_6
                    4688   BreakPointClear_5:
                    4689   ; }
                    4690   ; else
                    4691   ; printf("\r\nBreak Point wasn't Set.....") ;
000029CC  4879 0000 4692          pea       @m68kde~1_113.L
000029D0  5AE4      
000029D2  4E92      4693          jsr       (A2)
000029D4  584F      4694          addq.w    #4,A7
                    4695   BreakPointClear_6:
                    4696   ; BreakPointDisplay() ;
000029D6  4EB8 2788 4697          jsr       _BreakPointDisplay
                    4698   ; return ;
                    4699   BreakPointClear_4:
000029DA  4CDF 0404 4700          movem.l   (A7)+,D2/A2
000029DE  4E5E      4701          unlk      A6
000029E0  4E75      4702          rts
                    4703   ; }
                    4704   ; void WatchPointClear(void)
                    4705   ; {
                    4706   _WatchPointClear:
000029E2  48E7 2020 4707          movem.l   D2/A2,-(A7)
000029E6  45F9 0000 4708          lea       _printf.L,A2
000029EA  456E      
                    4709   ; unsigned int i ;
                    4710   ; WatchPointDisplay() ;
000029EC  4EB8 285C 4711          jsr       _WatchPointDisplay
                    4712   ; printf("\r\nEnter Watch Point Number: ") ;
000029F0  4879 0000 4713          pea       @m68kde~1_114.L
000029F4  5B02      
000029F6  4E92      4714          jsr       (A2)
000029F8  584F      4715          addq.w    #4,A7
                    4716   ; i = xtod(_getch()) ;           // get watch pointer number
000029FA  2F00      4717          move.l    D0,-(A7)
000029FC  4EB8 0B68 4718          jsr       __getch
00002A00  2200      4719          move.l    D0,D1
00002A02  201F      4720          move.l    (A7)+,D0
00002A04  2F01      4721          move.l    D1,-(A7)
00002A06  4EB8 0BD2 4722          jsr       _xtod
00002A0A  584F      4723          addq.w    #4,A7
00002A0C  C0BC 0000 4724          and.l     #255,D0
00002A10  00FF      
00002A12  2400      4725          move.l    D0,D2
                    4726   ; if((i < 0) || (i > 7))   {
00002A14  0C82 0000 4727          cmp.l     #0,D2
00002A18  0000      
00002A1A  6508      4728          blo.s     WatchPointClear_3
00002A1C  0C82 0000 4729          cmp.l     #7,D2
00002A20  0007      
00002A22  630E      4730          bls.s     WatchPointClear_1
                    4731   WatchPointClear_3:
                    4732   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00002A24  4879 0000 4733          pea       @m68kde~1_111.L
00002A28  5AAA      
00002A2A  4E92      4734          jsr       (A2)
00002A2C  584F      4735          addq.w    #4,A7
                    4736   ; return ;
00002A2E  6000 004E 4737          bra       WatchPointClear_4
                    4738   WatchPointClear_1:
                    4739   ; }
                    4740   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00002A32  2002      4741          move.l    D2,D0
00002A34  E588      4742          lsl.l     #2,D0
00002A36  41F9 0B00 4743          lea       _WatchPointSetOrCleared.L,A0
00002A3A  01A2      
00002A3C  2030 0800 4744          move.l    0(A0,D0.L),D0
00002A40  0C80 0000 4745          cmp.l     #1,D0
00002A44  0001      
00002A46  6628      4746          bne.s     WatchPointClear_5
                    4747   ; WatchPointAddress[i] = 0 ;
00002A48  2002      4748          move.l    D2,D0
00002A4A  E588      4749          lsl.l     #2,D0
00002A4C  41F9 0B00 4750          lea       _WatchPointAddress.L,A0
00002A50  0182      
00002A52  42B0 0800 4751          clr.l     0(A0,D0.L)
                    4752   ; WatchPointSetOrCleared[i] = 0 ;
00002A56  2002      4753          move.l    D2,D0
00002A58  E588      4754          lsl.l     #2,D0
00002A5A  41F9 0B00 4755          lea       _WatchPointSetOrCleared.L,A0
00002A5E  01A2      
00002A60  42B0 0800 4756          clr.l     0(A0,D0.L)
                    4757   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00002A64  4879 0000 4758          pea       @m68kde~1_115.L
00002A68  5B20      
00002A6A  4E92      4759          jsr       (A2)
00002A6C  584F      4760          addq.w    #4,A7
00002A6E  600A      4761          bra.s     WatchPointClear_6
                    4762   WatchPointClear_5:
                    4763   ; }
                    4764   ; else
                    4765   ; printf("\r\nWatch Point Was not Set.....") ;
00002A70  4879 0000 4766          pea       @m68kde~1_116.L
00002A74  5B3E      
00002A76  4E92      4767          jsr       (A2)
00002A78  584F      4768          addq.w    #4,A7
                    4769   WatchPointClear_6:
                    4770   ; WatchPointDisplay() ;
00002A7A  4EB8 285C 4771          jsr       _WatchPointDisplay
                    4772   ; return ;
                    4773   WatchPointClear_4:
00002A7E  4CDF 0404 4774          movem.l   (A7)+,D2/A2
00002A82  4E75      4775          rts
                    4776   ; }
                    4777   ; void DisableBreakPoints(void)
                    4778   ; {
                    4779   _DisableBreakPoints:
00002A84  4E56 FFFC 4780          link      A6,#-4
00002A88  2F02      4781          move.l    D2,-(A7)
                    4782   ; int i ;
                    4783   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4784   ; for(i = 0; i < 8; i++)  {
00002A8A  4282      4785          clr.l     D2
                    4786   DisableBreakPoints_1:
00002A8C  0C82 0000 4787          cmp.l     #8,D2
00002A90  0008      
00002A92  6C00 003E 4788          bge       DisableBreakPoints_3
                    4789   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00002A96  2002      4790          move.l    D2,D0
00002A98  E588      4791          lsl.l     #2,D0
00002A9A  41F9 0B00 4792          lea       _BreakPointSetOrCleared.L,A0
00002A9E  015E      
00002AA0  2030 0800 4793          move.l    0(A0,D0.L),D0
00002AA4  0C80 0000 4794          cmp.l     #1,D0
00002AA8  0001      
00002AAA  6622      4795          bne.s     DisableBreakPoints_4
                    4796   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002AAC  2002      4797          move.l    D2,D0
00002AAE  E588      4798          lsl.l     #2,D0
00002AB0  41F9 0B00 4799          lea       _BreakPointAddress.L,A0
00002AB4  012E      
00002AB6  2D70 0800 4800          move.l    0(A0,D0.L),-4(A6)
00002ABA  FFFC      
                    4801   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00002ABC  2002      4802          move.l    D2,D0
00002ABE  E388      4803          lsl.l     #1,D0
00002AC0  41F9 0B00 4804          lea       _BreakPointInstruction.L,A0
00002AC4  014E      
00002AC6  226E FFFC 4805          move.l    -4(A6),A1
00002ACA  32B0 0800 4806          move.w    0(A0,D0.L),(A1)
                    4807   DisableBreakPoints_4:
00002ACE  5282      4808          addq.l    #1,D2
00002AD0  60BA      4809          bra       DisableBreakPoints_1
                    4810   DisableBreakPoints_3:
00002AD2  241F      4811          move.l    (A7)+,D2
00002AD4  4E5E      4812          unlk      A6
00002AD6  4E75      4813          rts
                    4814   ; }
                    4815   ; }
                    4816   ; }
                    4817   ; void EnableBreakPoints(void)
                    4818   ; {
                    4819   _EnableBreakPoints:
00002AD8  4E56 FFFC 4820          link      A6,#-4
00002ADC  2F02      4821          move.l    D2,-(A7)
                    4822   ; int i ;
                    4823   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4824   ; for(i = 0; i < 8; i++)  {
00002ADE  4282      4825          clr.l     D2
                    4826   EnableBreakPoints_1:
00002AE0  0C82 0000 4827          cmp.l     #8,D2
00002AE4  0008      
00002AE6  6C32      4828          bge.s     EnableBreakPoints_3
                    4829   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00002AE8  2002      4830          move.l    D2,D0
00002AEA  E588      4831          lsl.l     #2,D0
00002AEC  41F9 0B00 4832          lea       _BreakPointSetOrCleared.L,A0
00002AF0  015E      
00002AF2  2030 0800 4833          move.l    0(A0,D0.L),D0
00002AF6  0C80 0000 4834          cmp.l     #1,D0
00002AFA  0001      
00002AFC  6618      4835          bne.s     EnableBreakPoints_4
                    4836   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002AFE  2002      4837          move.l    D2,D0
00002B00  E588      4838          lsl.l     #2,D0
00002B02  41F9 0B00 4839          lea       _BreakPointAddress.L,A0
00002B06  012E      
00002B08  2D70 0800 4840          move.l    0(A0,D0.L),-4(A6)
00002B0C  FFFC      
                    4841   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00002B0E  206E FFFC 4842          move.l    -4(A6),A0
00002B12  30BC 4E4E 4843          move.w    #20046,(A0)
                    4844   EnableBreakPoints_4:
00002B16  5282      4845          addq.l    #1,D2
00002B18  60C6      4846          bra       EnableBreakPoints_1
                    4847   EnableBreakPoints_3:
00002B1A  241F      4848          move.l    (A7)+,D2
00002B1C  4E5E      4849          unlk      A6
00002B1E  4E75      4850          rts
                    4851   ; }
                    4852   ; }
                    4853   ; }
                    4854   ; void KillAllBreakPoints(void)
                    4855   ; {
                    4856   _KillAllBreakPoints:
00002B20  4E56 FFFC 4857          link      A6,#-4
00002B24  2F02      4858          move.l    D2,-(A7)
                    4859   ; int i ;
                    4860   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4861   ; for(i = 0; i < 8; i++)  {
00002B26  4282      4862          clr.l     D2
                    4863   KillAllBreakPoints_1:
00002B28  0C82 0000 4864          cmp.l     #8,D2
00002B2C  0008      
00002B2E  6C00 0052 4865          bge       KillAllBreakPoints_3
                    4866   ; // clear BP
                    4867   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002B32  2002      4868          move.l    D2,D0
00002B34  E588      4869          lsl.l     #2,D0
00002B36  41F9 0B00 4870          lea       _BreakPointAddress.L,A0
00002B3A  012E      
00002B3C  2D70 0800 4871          move.l    0(A0,D0.L),-4(A6)
00002B40  FFFC      
                    4872   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002B42  2002      4873          move.l    D2,D0
00002B44  E388      4874          lsl.l     #1,D0
00002B46  41F9 0B00 4875          lea       _BreakPointInstruction.L,A0
00002B4A  014E      
00002B4C  226E FFFC 4876          move.l    -4(A6),A1
00002B50  32B0 0800 4877          move.w    0(A0,D0.L),(A1)
                    4878   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002B54  2002      4879          move.l    D2,D0
00002B56  E588      4880          lsl.l     #2,D0
00002B58  41F9 0B00 4881          lea       _BreakPointAddress.L,A0
00002B5C  012E      
00002B5E  42B0 0800 4882          clr.l     0(A0,D0.L)
                    4883   ; BreakPointInstruction[i] = 0 ;
00002B62  2002      4884          move.l    D2,D0
00002B64  E388      4885          lsl.l     #1,D0
00002B66  41F9 0B00 4886          lea       _BreakPointInstruction.L,A0
00002B6A  014E      
00002B6C  4270 0800 4887          clr.w     0(A0,D0.L)
                    4888   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002B70  2002      4889          move.l    D2,D0
00002B72  E588      4890          lsl.l     #2,D0
00002B74  41F9 0B00 4891          lea       _BreakPointSetOrCleared.L,A0
00002B78  015E      
00002B7A  42B0 0800 4892          clr.l     0(A0,D0.L)
00002B7E  5282      4893          addq.l    #1,D2
00002B80  60A6      4894          bra       KillAllBreakPoints_1
                    4895   KillAllBreakPoints_3:
00002B82  241F      4896          move.l    (A7)+,D2
00002B84  4E5E      4897          unlk      A6
00002B86  4E75      4898          rts
                    4899   ; }
                    4900   ; //BreakPointDisplay() ;       // display the break points
                    4901   ; }
                    4902   ; void KillAllWatchPoints(void)
                    4903   ; {
                    4904   _KillAllWatchPoints:
00002B88  2F02      4905          move.l    D2,-(A7)
                    4906   ; int i ;
                    4907   ; for(i = 0; i < 8; i++)  {
00002B8A  4282      4908          clr.l     D2
                    4909   KillAllWatchPoints_1:
00002B8C  0C82 0000 4910          cmp.l     #8,D2
00002B90  0008      
00002B92  6C20      4911          bge.s     KillAllWatchPoints_3
                    4912   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002B94  2002      4913          move.l    D2,D0
00002B96  E588      4914          lsl.l     #2,D0
00002B98  41F9 0B00 4915          lea       _WatchPointAddress.L,A0
00002B9C  0182      
00002B9E  42B0 0800 4916          clr.l     0(A0,D0.L)
                    4917   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002BA2  2002      4918          move.l    D2,D0
00002BA4  E588      4919          lsl.l     #2,D0
00002BA6  41F9 0B00 4920          lea       _WatchPointSetOrCleared.L,A0
00002BAA  01A2      
00002BAC  42B0 0800 4921          clr.l     0(A0,D0.L)
00002BB0  5282      4922          addq.l    #1,D2
00002BB2  60D8      4923          bra       KillAllWatchPoints_1
                    4924   KillAllWatchPoints_3:
00002BB4  241F      4925          move.l    (A7)+,D2
00002BB6  4E75      4926          rts
                    4927   ; }
                    4928   ; //WatchPointDisplay() ;       // display the break points
                    4929   ; }
                    4930   ; void SetBreakPoint(void)
                    4931   ; {
                    4932   _SetBreakPoint:
00002BB8  4E56 FFFC 4933          link      A6,#-4
00002BBC  48E7 3830 4934          movem.l   D2/D3/D4/A2/A3,-(A7)
00002BC0  45F9 0000 4935          lea       _printf.L,A2
00002BC4  456E      
00002BC6  47F9 0B00 4936          lea       _BreakPointSetOrCleared.L,A3
00002BCA  015E      
                    4937   ; int i ;
                    4938   ; int BPNumber;
                    4939   ; int BPAddress;
                    4940   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4941   ; // see if any free break points
                    4942   ; for(i = 0; i < 8; i ++) {
00002BCC  4282      4943          clr.l     D2
                    4944   SetBreakPoint_1:
00002BCE  0C82 0000 4945          cmp.l     #8,D2
00002BD2  0008      
00002BD4  6C10      4946          bge.s     SetBreakPoint_3
                    4947   ; if( BreakPointSetOrCleared[i] == 0)
00002BD6  2002      4948          move.l    D2,D0
00002BD8  E588      4949          lsl.l     #2,D0
00002BDA  2033 0800 4950          move.l    0(A3,D0.L),D0
00002BDE  6602      4951          bne.s     SetBreakPoint_4
                    4952   ; break ;         // if spare BP found allow user to set it
00002BE0  6004      4953          bra.s     SetBreakPoint_3
                    4954   SetBreakPoint_4:
00002BE2  5282      4955          addq.l    #1,D2
00002BE4  60E8      4956          bra       SetBreakPoint_1
                    4957   SetBreakPoint_3:
                    4958   ; }
                    4959   ; if(i == 8) {
00002BE6  0C82 0000 4960          cmp.l     #8,D2
00002BEA  0008      
00002BEC  660E      4961          bne.s     SetBreakPoint_6
                    4962   ; printf("\r\nNo FREE Break Points.....") ;
00002BEE  4879 0000 4963          pea       @m68kde~1_117.L
00002BF2  5B5E      
00002BF4  4E92      4964          jsr       (A2)
00002BF6  584F      4965          addq.w    #4,A7
                    4966   ; return ;
00002BF8  6000 00D6 4967          bra       SetBreakPoint_15
                    4968   SetBreakPoint_6:
                    4969   ; }
                    4970   ; printf("\r\nBreak Point Address: ") ;
00002BFC  4879 0000 4971          pea       @m68kde~1_118.L
00002C00  5B7A      
00002C02  4E92      4972          jsr       (A2)
00002C04  584F      4973          addq.w    #4,A7
                    4974   ; BPAddress = Get8HexDigits(0) ;
00002C06  42A7      4975          clr.l     -(A7)
00002C08  4EB8 0CA4 4976          jsr       _Get8HexDigits
00002C0C  584F      4977          addq.w    #4,A7
00002C0E  2600      4978          move.l    D0,D3
                    4979   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00002C10  2803      4980          move.l    D3,D4
                    4981   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00002C12  2003      4982          move.l    D3,D0
00002C14  C0BC 0000 4983          and.l     #1,D0
00002C18  0001      
00002C1A  0C80 0000 4984          cmp.l     #1,D0
00002C1E  0001      
00002C20  660E      4985          bne.s     SetBreakPoint_9
                    4986   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002C22  4879 0000 4987          pea       @m68kde~1_119.L
00002C26  5B92      
00002C28  4E92      4988          jsr       (A2)
00002C2A  584F      4989          addq.w    #4,A7
                    4990   ; return ;
00002C2C  6000 00A2 4991          bra       SetBreakPoint_15
                    4992   SetBreakPoint_9:
                    4993   ; }
                    4994   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002C30  0C83 0000 4995          cmp.l     #32768,D3
00002C34  8000      
00002C36  640E      4996          bhs.s     SetBreakPoint_11
                    4997   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002C38  4879 0000 4998          pea       @m68kde~1_120.L
00002C3C  5BC8      
00002C3E  4E92      4999          jsr       (A2)
00002C40  584F      5000          addq.w    #4,A7
                    5001   ; return ;
00002C42  6000 008C 5002          bra       SetBreakPoint_15
                    5003   SetBreakPoint_11:
                    5004   ; }
                    5005   ; // search for first free bp or existing same BP
                    5006   ; for(i = 0; i < 8; i++)  {
00002C46  4282      5007          clr.l     D2
                    5008   SetBreakPoint_13:
00002C48  0C82 0000 5009          cmp.l     #8,D2
00002C4C  0008      
00002C4E  6C00 0080 5010          bge       SetBreakPoint_15
                    5011   ; if(BreakPointAddress[i] == BPAddress)   {
00002C52  2002      5012          move.l    D2,D0
00002C54  E588      5013          lsl.l     #2,D0
00002C56  41F9 0B00 5014          lea       _BreakPointAddress.L,A0
00002C5A  012E      
00002C5C  B6B0 0800 5015          cmp.l     0(A0,D0.L),D3
00002C60  6610      5016          bne.s     SetBreakPoint_16
                    5017   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002C62  2F03      5018          move.l    D3,-(A7)
00002C64  4879 0000 5019          pea       @m68kde~1_121.L
00002C68  5C10      
00002C6A  4E92      5020          jsr       (A2)
00002C6C  504F      5021          addq.w    #8,A7
                    5022   ; return ;
00002C6E  6000 0060 5023          bra       SetBreakPoint_15
                    5024   SetBreakPoint_16:
                    5025   ; }
                    5026   ; if(BreakPointSetOrCleared[i] == 0) {
00002C72  2002      5027          move.l    D2,D0
00002C74  E588      5028          lsl.l     #2,D0
00002C76  2033 0800 5029          move.l    0(A3,D0.L),D0
00002C7A  6600 004E 5030          bne       SetBreakPoint_18
                    5031   ; // set BP here
                    5032   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002C7E  2002      5033          move.l    D2,D0
00002C80  E588      5034          lsl.l     #2,D0
00002C82  27BC 0000 5035          move.l    #1,0(A3,D0.L)
00002C86  0001 0800 
                    5036   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002C8A  2044      5037          move.l    D4,A0
00002C8C  2002      5038          move.l    D2,D0
00002C8E  E388      5039          lsl.l     #1,D0
00002C90  43F9 0B00 5040          lea       _BreakPointInstruction.L,A1
00002C94  014E      
00002C96  3390 0800 5041          move.w    (A0),0(A1,D0.L)
                    5042   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00002C9A  2F04      5043          move.l    D4,-(A7)
00002C9C  4879 0000 5044          pea       @m68kde~1_122.L
00002CA0  5C48      
00002CA2  4E92      5045          jsr       (A2)
00002CA4  504F      5046          addq.w    #8,A7
                    5047   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00002CA6  2044      5048          move.l    D4,A0
00002CA8  30BC 4E4E 5049          move.w    #20046,(A0)
                    5050   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002CAC  2002      5051          move.l    D2,D0
00002CAE  E588      5052          lsl.l     #2,D0
00002CB0  41F9 0B00 5053          lea       _BreakPointAddress.L,A0
00002CB4  012E      
00002CB6  2183 0800 5054          move.l    D3,0(A0,D0.L)
                    5055   ; printf("\r\n") ;
00002CBA  4879 0000 5056          pea       @m68kde~1_1.L
00002CBE  4F44      
00002CC0  4E92      5057          jsr       (A2)
00002CC2  584F      5058          addq.w    #4,A7
                    5059   ; BreakPointDisplay() ;       // display the break points
00002CC4  4EB8 2788 5060          jsr       _BreakPointDisplay
                    5061   ; return ;
00002CC8  6006      5062          bra.s     SetBreakPoint_15
                    5063   SetBreakPoint_18:
00002CCA  5282      5064          addq.l    #1,D2
00002CCC  6000 FF7A 5065          bra       SetBreakPoint_13
                    5066   SetBreakPoint_15:
00002CD0  4CDF 0C1C 5067          movem.l   (A7)+,D2/D3/D4/A2/A3
00002CD4  4E5E      5068          unlk      A6
00002CD6  4E75      5069          rts
                    5070   ; }
                    5071   ; }
                    5072   ; }
                    5073   ; void SetWatchPoint(void)
                    5074   ; {
                    5075   _SetWatchPoint:
00002CD8  4E56 FFF8 5076          link      A6,#-8
00002CDC  48E7 3030 5077          movem.l   D2/D3/A2/A3,-(A7)
00002CE0  45F9 0000 5078          lea       _printf.L,A2
00002CE4  456E      
00002CE6  47F9 0B00 5079          lea       _WatchPointSetOrCleared.L,A3
00002CEA  01A2      
                    5080   ; int i ;
                    5081   ; int WPNumber;
                    5082   ; int WPAddress;
                    5083   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    5084   ; // see if any free break points
                    5085   ; for(i = 0; i < 8; i ++) {
00002CEC  4282      5086          clr.l     D2
                    5087   SetWatchPoint_1:
00002CEE  0C82 0000 5088          cmp.l     #8,D2
00002CF2  0008      
00002CF4  6C10      5089          bge.s     SetWatchPoint_3
                    5090   ; if( WatchPointSetOrCleared[i] == 0)
00002CF6  2002      5091          move.l    D2,D0
00002CF8  E588      5092          lsl.l     #2,D0
00002CFA  2033 0800 5093          move.l    0(A3,D0.L),D0
00002CFE  6602      5094          bne.s     SetWatchPoint_4
                    5095   ; break ;         // if spare WP found allow user to set it
00002D00  6004      5096          bra.s     SetWatchPoint_3
                    5097   SetWatchPoint_4:
00002D02  5282      5098          addq.l    #1,D2
00002D04  60E8      5099          bra       SetWatchPoint_1
                    5100   SetWatchPoint_3:
                    5101   ; }
                    5102   ; if(i == 8) {
00002D06  0C82 0000 5103          cmp.l     #8,D2
00002D0A  0008      
00002D0C  660E      5104          bne.s     SetWatchPoint_6
                    5105   ; printf("\r\nNo FREE Watch Points.....") ;
00002D0E  4879 0000 5106          pea       @m68kde~1_123.L
00002D12  5C6E      
00002D14  4E92      5107          jsr       (A2)
00002D16  584F      5108          addq.w    #4,A7
                    5109   ; return ;
00002D18  6000 008C 5110          bra       SetWatchPoint_11
                    5111   SetWatchPoint_6:
                    5112   ; }
                    5113   ; printf("\r\nWatch Point Address: ") ;
00002D1C  4879 0000 5114          pea       @m68kde~1_124.L
00002D20  5C8A      
00002D22  4E92      5115          jsr       (A2)
00002D24  584F      5116          addq.w    #4,A7
                    5117   ; WPAddress = Get8HexDigits(0) ;
00002D26  42A7      5118          clr.l     -(A7)
00002D28  4EB8 0CA4 5119          jsr       _Get8HexDigits
00002D2C  584F      5120          addq.w    #4,A7
00002D2E  2600      5121          move.l    D0,D3
                    5122   ; // search for first free wp or existing same wp
                    5123   ; for(i = 0; i < 8; i++)  {
00002D30  4282      5124          clr.l     D2
                    5125   SetWatchPoint_9:
00002D32  0C82 0000 5126          cmp.l     #8,D2
00002D36  0008      
00002D38  6C00 006C 5127          bge       SetWatchPoint_11
                    5128   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002D3C  2002      5129          move.l    D2,D0
00002D3E  E588      5130          lsl.l     #2,D0
00002D40  41F9 0B00 5131          lea       _WatchPointAddress.L,A0
00002D44  0182      
00002D46  B6B0 0800 5132          cmp.l     0(A0,D0.L),D3
00002D4A  6614      5133          bne.s     SetWatchPoint_12
00002D4C  4A83      5134          tst.l     D3
00002D4E  6710      5135          beq.s     SetWatchPoint_12
                    5136   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002D50  2F03      5137          move.l    D3,-(A7)
00002D52  4879 0000 5138          pea       @m68kde~1_125.L
00002D56  5CA2      
00002D58  4E92      5139          jsr       (A2)
00002D5A  504F      5140          addq.w    #8,A7
                    5141   ; return ;
00002D5C  6000 0048 5142          bra       SetWatchPoint_11
                    5143   SetWatchPoint_12:
                    5144   ; }
                    5145   ; if(WatchPointSetOrCleared[i] == 0) {
00002D60  2002      5146          move.l    D2,D0
00002D62  E588      5147          lsl.l     #2,D0
00002D64  2033 0800 5148          move.l    0(A3,D0.L),D0
00002D68  6600 0038 5149          bne       SetWatchPoint_14
                    5150   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002D6C  2002      5151          move.l    D2,D0
00002D6E  E588      5152          lsl.l     #2,D0
00002D70  27BC 0000 5153          move.l    #1,0(A3,D0.L)
00002D74  0001 0800 
                    5154   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002D78  2F03      5155          move.l    D3,-(A7)
00002D7A  4879 0000 5156          pea       @m68kde~1_126.L
00002D7E  5CD8      
00002D80  4E92      5157          jsr       (A2)
00002D82  504F      5158          addq.w    #8,A7
                    5159   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002D84  2002      5160          move.l    D2,D0
00002D86  E588      5161          lsl.l     #2,D0
00002D88  41F9 0B00 5162          lea       _WatchPointAddress.L,A0
00002D8C  0182      
00002D8E  2183 0800 5163          move.l    D3,0(A0,D0.L)
                    5164   ; printf("\r\n") ;
00002D92  4879 0000 5165          pea       @m68kde~1_1.L
00002D96  4F44      
00002D98  4E92      5166          jsr       (A2)
00002D9A  584F      5167          addq.w    #4,A7
                    5168   ; WatchPointDisplay() ;       // display the break points
00002D9C  4EB8 285C 5169          jsr       _WatchPointDisplay
                    5170   ; return ;
00002DA0  6004      5171          bra.s     SetWatchPoint_11
                    5172   SetWatchPoint_14:
00002DA2  5282      5173          addq.l    #1,D2
00002DA4  608C      5174          bra       SetWatchPoint_9
                    5175   SetWatchPoint_11:
00002DA6  4CDF 0C0C 5176          movem.l   (A7)+,D2/D3/A2/A3
00002DAA  4E5E      5177          unlk      A6
00002DAC  4E75      5178          rts
                    5179   ; }
                    5180   ; }
                    5181   ; }
                    5182   ; void HandleBreakPoint(void)
                    5183   ; {
                    5184   _HandleBreakPoint:
00002DAE  4E56 FFFC 5185          link      A6,#-4
00002DB2  48E7 0038 5186          movem.l   A2/A3/A4,-(A7)
00002DB6  45F9 0B00 5187          lea       _i.L,A2
00002DBA  00C4      
00002DBC  47F9 0000 5188          lea       _printf.L,A3
00002DC0  456E      
00002DC2  49F9 0B00 5189          lea       _PC.L,A4
00002DC6  0120      
                    5190   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    5191   ; // now we have to put the break point back to run the instruction
                    5192   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    5193   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00002DC8  5594      5194          subq.l    #2,(A4)
                    5195   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00002DCA  4879 0000 5196          pea       @m68kde~1_127.L
00002DCE  5CFE      
00002DD0  4E93      5197          jsr       (A3)
00002DD2  584F      5198          addq.w    #4,A7
                    5199   ; printf("\r\nSingle Step : [ON]") ;
00002DD4  4879 0000 5200          pea       @m68kde~1_128.L
00002DD8  5D12      
00002DDA  4E93      5201          jsr       (A3)
00002DDC  584F      5202          addq.w    #4,A7
                    5203   ; printf("\r\nBreakPoints : [Enabled]") ;
00002DDE  4879 0000 5204          pea       @m68kde~1_129.L
00002DE2  5D28      
00002DE4  4E93      5205          jsr       (A3)
00002DE6  584F      5206          addq.w    #4,A7
                    5207   ; // now clear the break point (put original instruction back)
                    5208   ; ProgramBreakPointAddress = PC ;
00002DE8  2D54 FFFC 5209          move.l    (A4),-4(A6)
                    5210   ; for(i = 0; i < 8; i ++) {
00002DEC  4292      5211          clr.l     (A2)
                    5212   HandleBreakPoint_1:
00002DEE  2012      5213          move.l    (A2),D0
00002DF0  0C80 0000 5214          cmp.l     #8,D0
00002DF4  0008      
00002DF6  6400 0056 5215          bhs       HandleBreakPoint_3
                    5216   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00002DFA  2012      5217          move.l    (A2),D0
00002DFC  E588      5218          lsl.l     #2,D0
00002DFE  41F9 0B00 5219          lea       _BreakPointAddress.L,A0
00002E02  012E      
00002E04  2230 0800 5220          move.l    0(A0,D0.L),D1
00002E08  B294      5221          cmp.l     (A4),D1
00002E0A  6600 003E 5222          bne       HandleBreakPoint_4
                    5223   ; BreakPointAddress[i] = 0 ;
00002E0E  2012      5224          move.l    (A2),D0
00002E10  E588      5225          lsl.l     #2,D0
00002E12  41F9 0B00 5226          lea       _BreakPointAddress.L,A0
00002E16  012E      
00002E18  42B0 0800 5227          clr.l     0(A0,D0.L)
                    5228   ; BreakPointSetOrCleared[i] = 0 ;
00002E1C  2012      5229          move.l    (A2),D0
00002E1E  E588      5230          lsl.l     #2,D0
00002E20  41F9 0B00 5231          lea       _BreakPointSetOrCleared.L,A0
00002E24  015E      
00002E26  42B0 0800 5232          clr.l     0(A0,D0.L)
                    5233   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002E2A  2012      5234          move.l    (A2),D0
00002E2C  E388      5235          lsl.l     #1,D0
00002E2E  41F9 0B00 5236          lea       _BreakPointInstruction.L,A0
00002E32  014E      
00002E34  226E FFFC 5237          move.l    -4(A6),A1
00002E38  32B0 0800 5238          move.w    0(A0,D0.L),(A1)
                    5239   ; BreakPointInstruction[i] = 0 ;
00002E3C  2012      5240          move.l    (A2),D0
00002E3E  E388      5241          lsl.l     #1,D0
00002E40  41F9 0B00 5242          lea       _BreakPointInstruction.L,A0
00002E44  014E      
00002E46  4270 0800 5243          clr.w     0(A0,D0.L)
                    5244   HandleBreakPoint_4:
00002E4A  5292      5245          addq.l    #1,(A2)
00002E4C  60A0      5246          bra       HandleBreakPoint_1
                    5247   HandleBreakPoint_3:
                    5248   ; }
                    5249   ; }
                    5250   ; DumpRegisters() ;
00002E4E  4EB8 1FDA 5251          jsr       _DumpRegisters
                    5252   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002E52  4879 0000 5253          pea       @m68kde~1_91.L
00002E56  58A4      
00002E58  4E93      5254          jsr       (A3)
00002E5A  584F      5255          addq.w    #4,A7
                    5256   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002E5C  4879 0000 5257          pea       @m68kde~1_130.L
00002E60  5D42      
00002E62  4E93      5258          jsr       (A3)
00002E64  584F      5259          addq.w    #4,A7
                    5260   ; menu() ;
00002E66  4EB9 0000 5261          jsr       _menu
00002E6A  3072      
00002E6C  4CDF 1C00 5262          movem.l   (A7)+,A2/A3/A4
00002E70  4E5E      5263          unlk      A6
00002E72  4E75      5264          rts
                    5265   ; }
                    5266   ; void UnknownCommand()
                    5267   ; {
                    5268   _UnknownCommand:
                    5269   ; printf("\r\nUnknown Command.....\r\n") ;
00002E74  4879 0000 5270          pea       @m68kde~1_131.L
00002E78  5D6A      
00002E7A  4EB9 0000 5271          jsr       _printf
00002E7E  456E      
00002E80  584F      5272          addq.w    #4,A7
                    5273   ; Help() ;
00002E82  4EB9 0000 5274          jsr       _Help
00002E86  2F98      
00002E88  4E75      5275          rts
                    5276   ; }
                    5277   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    5278   ; void CallDebugMonitor(void)
                    5279   ; {
                    5280   _CallDebugMonitor:
                    5281   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002E8A  4879 0000 5282          pea       @m68kde~1_132.L
00002E8E  5D84      
00002E90  4EB9 0000 5283          jsr       _printf
00002E94  456E      
00002E96  584F      5284          addq.w    #4,A7
                    5285   ; menu();
00002E98  4EB9 0000 5286          jsr       _menu
00002E9C  3072      
00002E9E  4E75      5287          rts
                    5288   ; }
                    5289   ; void Breakpoint(void)
                    5290   ; {
                    5291   _Breakpoint:
00002EA0  2F02      5292          move.l    D2,-(A7)
                    5293   ; char c;
                    5294   ; c = toupper(_getch());
00002EA2  2F00      5295          move.l    D0,-(A7)
00002EA4  4EB8 0B68 5296          jsr       __getch
00002EA8  2200      5297          move.l    D0,D1
00002EAA  201F      5298          move.l    (A7)+,D0
00002EAC  2F01      5299          move.l    D1,-(A7)
00002EAE  4EB9 0000 5300          jsr       _toupper
00002EB2  3CAC      
00002EB4  584F      5301          addq.w    #4,A7
00002EB6  1400      5302          move.b    D0,D2
                    5303   ; if( c == (char)('D'))                                      // BreakPoint Display
00002EB8  0C02 0044 5304          cmp.b     #68,D2
00002EBC  6608      5305          bne.s     Breakpoint_1
                    5306   ; BreakPointDisplay() ;
00002EBE  4EB8 2788 5307          jsr       _BreakPointDisplay
00002EC2  6000 0054 5308          bra       Breakpoint_10
                    5309   Breakpoint_1:
                    5310   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00002EC6  0C02 004B 5311          cmp.b     #75,D2
00002ECA  6630      5312          bne.s     Breakpoint_3
                    5313   ; printf("\r\nKill All Break Points...(y/n)?") ;
00002ECC  4879 0000 5314          pea       @m68kde~1_133.L
00002ED0  5DA4      
00002ED2  4EB9 0000 5315          jsr       _printf
00002ED6  456E      
00002ED8  584F      5316          addq.w    #4,A7
                    5317   ; c = toupper(_getch());
00002EDA  2F00      5318          move.l    D0,-(A7)
00002EDC  4EB8 0B68 5319          jsr       __getch
00002EE0  2200      5320          move.l    D0,D1
00002EE2  201F      5321          move.l    (A7)+,D0
00002EE4  2F01      5322          move.l    D1,-(A7)
00002EE6  4EB9 0000 5323          jsr       _toupper
00002EEA  3CAC      
00002EEC  584F      5324          addq.w    #4,A7
00002EEE  1400      5325          move.b    D0,D2
                    5326   ; if(c == (char)('Y'))
00002EF0  0C02 0059 5327          cmp.b     #89,D2
00002EF4  6604      5328          bne.s     Breakpoint_5
                    5329   ; KillAllBreakPoints() ;
00002EF6  4EB8 2B20 5330          jsr       _KillAllBreakPoints
                    5331   Breakpoint_5:
00002EFA  601C      5332          bra.s     Breakpoint_10
                    5333   Breakpoint_3:
                    5334   ; }
                    5335   ; else if(c == (char)('S')) {
00002EFC  0C02 0053 5336          cmp.b     #83,D2
00002F00  6606      5337          bne.s     Breakpoint_7
                    5338   ; SetBreakPoint() ;
00002F02  4EB8 2BB8 5339          jsr       _SetBreakPoint
00002F06  6010      5340          bra.s     Breakpoint_10
                    5341   Breakpoint_7:
                    5342   ; }
                    5343   ; else if(c == (char)('C')) {
00002F08  0C02 0043 5344          cmp.b     #67,D2
00002F0C  6606      5345          bne.s     Breakpoint_9
                    5346   ; BreakPointClear() ;
00002F0E  4EB8 2908 5347          jsr       _BreakPointClear
00002F12  6004      5348          bra.s     Breakpoint_10
                    5349   Breakpoint_9:
                    5350   ; }
                    5351   ; else
                    5352   ; UnknownCommand() ;
00002F14  4EB8 2E74 5353          jsr       _UnknownCommand
                    5354   Breakpoint_10:
00002F18  241F      5355          move.l    (A7)+,D2
00002F1A  4E75      5356          rts
                    5357   ; }
                    5358   ; void Watchpoint(void)
                    5359   ; {
                    5360   _Watchpoint:
00002F1C  2F02      5361          move.l    D2,-(A7)
                    5362   ; char c;
                    5363   ; c = toupper(_getch());
00002F1E  2F00      5364          move.l    D0,-(A7)
00002F20  4EB8 0B68 5365          jsr       __getch
00002F24  2200      5366          move.l    D0,D1
00002F26  201F      5367          move.l    (A7)+,D0
00002F28  2F01      5368          move.l    D1,-(A7)
00002F2A  4EB9 0000 5369          jsr       _toupper
00002F2E  3CAC      
00002F30  584F      5370          addq.w    #4,A7
00002F32  1400      5371          move.b    D0,D2
                    5372   ; if( c == (char)('D'))                                      // WatchPoint Display
00002F34  0C02 0044 5373          cmp.b     #68,D2
00002F38  6608      5374          bne.s     Watchpoint_1
                    5375   ; WatchPointDisplay() ;
00002F3A  4EB8 285C 5376          jsr       _WatchPointDisplay
00002F3E  6000 0054 5377          bra       Watchpoint_10
                    5378   Watchpoint_1:
                    5379   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002F42  0C02 004B 5380          cmp.b     #75,D2
00002F46  6630      5381          bne.s     Watchpoint_3
                    5382   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002F48  4879 0000 5383          pea       @m68kde~1_134.L
00002F4C  5DC6      
00002F4E  4EB9 0000 5384          jsr       _printf
00002F52  456E      
00002F54  584F      5385          addq.w    #4,A7
                    5386   ; c = toupper(_getch());
00002F56  2F00      5387          move.l    D0,-(A7)
00002F58  4EB8 0B68 5388          jsr       __getch
00002F5C  2200      5389          move.l    D0,D1
00002F5E  201F      5390          move.l    (A7)+,D0
00002F60  2F01      5391          move.l    D1,-(A7)
00002F62  4EB9 0000 5392          jsr       _toupper
00002F66  3CAC      
00002F68  584F      5393          addq.w    #4,A7
00002F6A  1400      5394          move.b    D0,D2
                    5395   ; if(c == (char)('Y'))
00002F6C  0C02 0059 5396          cmp.b     #89,D2
00002F70  6604      5397          bne.s     Watchpoint_5
                    5398   ; KillAllWatchPoints() ;
00002F72  4EB8 2B88 5399          jsr       _KillAllWatchPoints
                    5400   Watchpoint_5:
00002F76  601C      5401          bra.s     Watchpoint_10
                    5402   Watchpoint_3:
                    5403   ; }
                    5404   ; else if(c == (char)('S')) {
00002F78  0C02 0053 5405          cmp.b     #83,D2
00002F7C  6606      5406          bne.s     Watchpoint_7
                    5407   ; SetWatchPoint() ;
00002F7E  4EB8 2CD8 5408          jsr       _SetWatchPoint
00002F82  6010      5409          bra.s     Watchpoint_10
                    5410   Watchpoint_7:
                    5411   ; }
                    5412   ; else if(c == (char)('C')) {
00002F84  0C02 0043 5413          cmp.b     #67,D2
00002F88  6606      5414          bne.s     Watchpoint_9
                    5415   ; WatchPointClear() ;
00002F8A  4EB8 29E2 5416          jsr       _WatchPointClear
00002F8E  6004      5417          bra.s     Watchpoint_10
                    5418   Watchpoint_9:
                    5419   ; }
                    5420   ; else
                    5421   ; UnknownCommand() ;
00002F90  4EB8 2E74 5422          jsr       _UnknownCommand
                    5423   Watchpoint_10:
00002F94  241F      5424          move.l    (A7)+,D2
00002F96  4E75      5425          rts
                    5426   ; }
                    5427   ; void Help(void)
                    5428   ; {
                    5429   _Help:
00002F98  48E7 2020 5430          movem.l   D2/A2,-(A7)
00002F9C  45F9 0000 5431          lea       _printf.L,A2
00002FA0  456E      
                    5432   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002FA2  41F9 0000 5433          lea       @m68kde~1_135.L,A0
00002FA6  5DE8      
00002FA8  2408      5434          move.l    A0,D2
                    5435   ; printf(banner) ;
00002FAA  2F02      5436          move.l    D2,-(A7)
00002FAC  4E92      5437          jsr       (A2)
00002FAE  584F      5438          addq.w    #4,A7
                    5439   ; printf("\r\n  Debugger Command Summary") ;
00002FB0  4879 0000 5440          pea       @m68kde~1_136.L
00002FB4  5E2C      
00002FB6  4E92      5441          jsr       (A2)
00002FB8  584F      5442          addq.w    #4,A7
                    5443   ; printf(banner) ;
00002FBA  2F02      5444          move.l    D2,-(A7)
00002FBC  4E92      5445          jsr       (A2)
00002FBE  584F      5446          addq.w    #4,A7
                    5447   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
00002FC0  4879 0000 5448          pea       @m68kde~1_137.L
00002FC4  5E4A      
00002FC6  4E92      5449          jsr       (A2)
00002FC8  584F      5450          addq.w    #4,A7
                    5451   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
00002FCA  4879 0000 5452          pea       @m68kde~1_138.L
00002FCE  5E8E      
00002FD0  4E92      5453          jsr       (A2)
00002FD2  584F      5454          addq.w    #4,A7
                    5455   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002FD4  4879 0000 5456          pea       @m68kde~1_139.L
00002FD8  5EC6      
00002FDA  4E92      5457          jsr       (A2)
00002FDC  584F      5458          addq.w    #4,A7
                    5459   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
00002FDE  4879 0000 5460          pea       @m68kde~1_140.L
00002FE2  5F00      
00002FE4  4E92      5461          jsr       (A2)
00002FE6  584F      5462          addq.w    #4,A7
                    5463   ; printf("\r\n  E            - Enter String into Memory") ;
00002FE8  4879 0000 5464          pea       @m68kde~1_141.L
00002FEC  5F32      
00002FEE  4E92      5465          jsr       (A2)
00002FF0  584F      5466          addq.w    #4,A7
                    5467   ; printf("\r\n  F            - Fill Memory with Data") ;
00002FF2  4879 0000 5468          pea       @m68kde~1_142.L
00002FF6  5F5E      
00002FF8  4E92      5469          jsr       (A2)
00002FFA  584F      5470          addq.w    #4,A7
                    5471   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002FFC  2F39 0B00 5472          move.l    _PC.L,-(A7)
00003000  0120      
00003002  4879 0000 5473          pea       @m68kde~1_143.L
00003006  5F88      
00003008  4E92      5474          jsr       (A2)
0000300A  504F      5475          addq.w    #8,A7
                    5476   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000300C  4879 0000 5477          pea       @m68kde~1_144.L
00003010  5FC2      
00003012  4E92      5478          jsr       (A2)
00003014  584F      5479          addq.w    #4,A7
                    5480   ; printf("\r\n  M            - Memory Examine and Change");
00003016  4879 0000 5481          pea       @m68kde~1_145.L
0000301A  5FFA      
0000301C  4E92      5482          jsr       (A2)
0000301E  584F      5483          addq.w    #4,A7
                    5484   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00003020  4879 0000 5485          pea       @m68kde~1_146.L
00003024  6028      
00003026  4E92      5486          jsr       (A2)
00003028  584F      5487          addq.w    #4,A7
                    5488   ; printf("\r\n  R            - Display 68000 Registers") ;
0000302A  4879 0000 5489          pea       @m68kde~1_147.L
0000302E  6062      
00003030  4E92      5490          jsr       (A2)
00003032  584F      5491          addq.w    #4,A7
                    5492   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00003034  4879 0000 5493          pea       @m68kde~1_148.L
00003038  608E      
0000303A  4E92      5494          jsr       (A2)
0000303C  584F      5495          addq.w    #4,A7
                    5496   ; printf("\r\n  TM           - Test Memory") ;
0000303E  4879 0000 5497          pea       @m68kde~1_149.L
00003042  60C0      
00003044  4E92      5498          jsr       (A2)
00003046  584F      5499          addq.w    #4,A7
                    5500   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00003048  4879 0000 5501          pea       @m68kde~1_150.L
0000304C  60E0      
0000304E  4E92      5502          jsr       (A2)
00003050  584F      5503          addq.w    #4,A7
                    5504   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00003052  4879 0000 5505          pea       @m68kde~1_151.L
00003056  6108      
00003058  4E92      5506          jsr       (A2)
0000305A  584F      5507          addq.w    #4,A7
                    5508   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000305C  4879 0000 5509          pea       @m68kde~1_152.L
00003060  613E      
00003062  4E92      5510          jsr       (A2)
00003064  584F      5511          addq.w    #4,A7
                    5512   ; printf(banner) ;
00003066  2F02      5513          move.l    D2,-(A7)
00003068  4E92      5514          jsr       (A2)
0000306A  584F      5515          addq.w    #4,A7
0000306C  4CDF 0404 5516          movem.l   (A7)+,D2/A2
00003070  4E75      5517          rts
                    5518   ; }
                    5519   ; void menu(void)
                    5520   ; {
                    5521   _menu:
00003072  48E7 303C 5522          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00003076  45F9 0000 5523          lea       _printf.L,A2
0000307A  456E      
0000307C  47F9 0B00 5524          lea       _Trace.L,A3
00003080  00D8      
00003082  49F9 0B00 5525          lea       _x.L,A4
00003086  00C8      
00003088  4BF9 0B00 5526          lea       _SR.L,A5
0000308C  012C      
                    5527   ; char c,c1 ;
                    5528   ; while(1)    {
                    5529   menu_1:
                    5530   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000308E  4EB8 0BA6 5531          jsr       _FlushKeyboard
                    5532   ; printf("\r\n#") ;
00003092  4879 0000 5533          pea       @m68kde~1_153.L
00003096  6176      
00003098  4E92      5534          jsr       (A2)
0000309A  584F      5535          addq.w    #4,A7
                    5536   ; c = toupper(_getch());
0000309C  2F00      5537          move.l    D0,-(A7)
0000309E  4EB8 0B68 5538          jsr       __getch
000030A2  2200      5539          move.l    D0,D1
000030A4  201F      5540          move.l    (A7)+,D0
000030A6  2F01      5541          move.l    D1,-(A7)
000030A8  4EB9 0000 5542          jsr       _toupper
000030AC  3CAC      
000030AE  584F      5543          addq.w    #4,A7
000030B0  1400      5544          move.b    D0,D2
                    5545   ; if( c == (char)('L'))                  // load s record file
000030B2  0C02 004C 5546          cmp.b     #76,D2
000030B6  6608      5547          bne.s     menu_4
                    5548   ; Load_SRecordFile() ;
000030B8  4EB8 0E36 5549          jsr       _Load_SRecordFile
000030BC  6000 0248 5550          bra       menu_52
                    5551   menu_4:
                    5552   ; else if( c == (char)('D'))             // dump memory
000030C0  0C02 0044 5553          cmp.b     #68,D2
000030C4  6608      5554          bne.s     menu_6
                    5555   ; DumpMemory() ;
000030C6  4EB8 0CCC 5556          jsr       _DumpMemory
000030CA  6000 023A 5557          bra       menu_52
                    5558   menu_6:
                    5559   ; else if( c == (char)('E'))             // Enter String into memory
000030CE  0C02 0045 5560          cmp.b     #69,D2
000030D2  660A      5561          bne.s     menu_8
                    5562   ; EnterString() ;
000030D4  4EB9 0000 5563          jsr       _EnterString
000030D8  344E      
000030DA  6000 022A 5564          bra       menu_52
                    5565   menu_8:
                    5566   ; else if( c == (char)('F'))             // fill memory
000030DE  0C02 0046 5567          cmp.b     #70,D2
000030E2  6608      5568          bne.s     menu_10
                    5569   ; FillMemory() ;
000030E4  4EB8 0DBC 5570          jsr       _FillMemory
000030E8  6000 021C 5571          bra       menu_52
                    5572   menu_10:
                    5573   ; else if( c == (char)('G'))  {           // go user program
000030EC  0C02 0047 5574          cmp.b     #71,D2
000030F0  6626      5575          bne.s     menu_12
                    5576   ; printf("\r\nProgram Running.....") ;
000030F2  4879 0000 5577          pea       @m68kde~1_154.L
000030F6  617A      
000030F8  4E92      5578          jsr       (A2)
000030FA  584F      5579          addq.w    #4,A7
                    5580   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000030FC  4879 0000 5581          pea       @m68kde~1_155.L
00003100  6192      
00003102  4E92      5582          jsr       (A2)
00003104  584F      5583          addq.w    #4,A7
                    5584   ; GoFlag = 1 ;
00003106  23FC 0000 5585          move.l    #1,_GoFlag.L
0000310A  0001 0B00 
0000310E  00DC      
                    5586   ; go() ;
00003110  4EB8 08B8 5587          jsr       _go
00003114  6000 01F0 5588          bra       menu_52
                    5589   menu_12:
                    5590   ; }
                    5591   ; else if( c == (char)('M'))           // memory examine and modify
00003118  0C02 004D 5592          cmp.b     #77,D2
0000311C  6608      5593          bne.s     menu_14
                    5594   ; MemoryChange() ;
0000311E  4EB8 0FC4 5595          jsr       _MemoryChange
00003122  6000 01E2 5596          bra       menu_52
                    5597   menu_14:
                    5598   ; else if( c == (char)('I'))           //I2Ctest()
00003126  0C02 0049 5599          cmp.b     #73,D2
0000312A  6608      5600          bne.s     menu_16
                    5601   ; I2CTest(); 
0000312C  4EB8 1A56 5602          jsr       _I2CTest
00003130  6000 01D4 5603          bra       menu_52
                    5604   menu_16:
                    5605   ; else if( c == (char)('W'))           // DAC test
00003134  0C02 0057 5606          cmp.b     #87,D2
00003138  6608      5607          bne.s     menu_18
                    5608   ; DACWave();
0000313A  4EB8 1F2A 5609          jsr       _DACWave
0000313E  6000 01C6 5610          bra       menu_52
                    5611   menu_18:
                    5612   ; else if (c == (char)('A'))
00003142  0C02 0041 5613          cmp.b     #65,D2
00003146  6608      5614          bne.s     menu_20
                    5615   ; ADCRead();
00003148  4EB8 1DA8 5616          jsr       _ADCRead
0000314C  6000 01B8 5617          bra       menu_52
                    5618   menu_20:
                    5619   ; else if( c == (char)('P'))            // Program Flash Chip
00003150  0C02 0050 5620          cmp.b     #80,D2
00003154  6608      5621          bne.s     menu_22
                    5622   ; ProgramFlashChip() ;
00003156  4EB8 1368 5623          jsr       _ProgramFlashChip
0000315A  6000 01AA 5624          bra       menu_52
                    5625   menu_22:
                    5626   ; else if( c == (char)('C'))             // copy flash chip to ram and go
0000315E  0C02 0043 5627          cmp.b     #67,D2
00003162  6608      5628          bne.s     menu_24
                    5629   ; LoadFromFlashChip();
00003164  4EB8 138A 5630          jsr       _LoadFromFlashChip
00003168  6000 019C 5631          bra       menu_52
                    5632   menu_24:
                    5633   ; else if( c == (char)('R'))             // dump registers
0000316C  0C02 0052 5634          cmp.b     #82,D2
00003170  6608      5635          bne.s     menu_26
                    5636   ; DumpRegisters() ;
00003172  4EB8 1FDA 5637          jsr       _DumpRegisters
00003176  6000 018E 5638          bra       menu_52
                    5639   menu_26:
                    5640   ; else if( c == (char)('.'))           // change registers
0000317A  0C02 002E 5641          cmp.b     #46,D2
0000317E  6608      5642          bne.s     menu_28
                    5643   ; ChangeRegisters() ;
00003180  4EB8 24CC 5644          jsr       _ChangeRegisters
00003184  6000 0180 5645          bra       menu_52
                    5646   menu_28:
                    5647   ; else if( c == (char)('B'))              // breakpoint command
00003188  0C02 0042 5648          cmp.b     #66,D2
0000318C  6608      5649          bne.s     menu_30
                    5650   ; Breakpoint() ;
0000318E  4EB8 2EA0 5651          jsr       _Breakpoint
00003192  6000 0172 5652          bra       menu_52
                    5653   menu_30:
                    5654   ; else if( c == (char)('T'))  {          // Test command
00003196  0C02 0054 5655          cmp.b     #84,D2
0000319A  6600 0046 5656          bne       menu_32
                    5657   ; c1 = toupper(_getch()) ;
0000319E  2F00      5658          move.l    D0,-(A7)
000031A0  4EB8 0B68 5659          jsr       __getch
000031A4  2200      5660          move.l    D0,D1
000031A6  201F      5661          move.l    (A7)+,D0
000031A8  2F01      5662          move.l    D1,-(A7)
000031AA  4EB9 0000 5663          jsr       _toupper
000031AE  3CAC      
000031B0  584F      5664          addq.w    #4,A7
000031B2  1600      5665          move.b    D0,D3
                    5666   ; if(c1 == (char)('M'))                    // memory test
000031B4  0C03 004D 5667          cmp.b     #77,D3
000031B8  6608      5668          bne.s     menu_34
                    5669   ; MemoryTest() ;
000031BA  4EB9 0000 5670          jsr       _MemoryTest
000031BE  34C6      
000031C0  601C      5671          bra.s     menu_39
                    5672   menu_34:
                    5673   ; else if( c1 == (char)('S'))              // Switch Test command
000031C2  0C03 0053 5674          cmp.b     #83,D3
000031C6  6606      5675          bne.s     menu_36
                    5676   ; SwitchTest() ;
000031C8  4EB8 0AA4 5677          jsr       _SwitchTest
000031CC  6010      5678          bra.s     menu_39
                    5679   menu_36:
                    5680   ; else if( c1 == (char)('D'))              // display Test command
000031CE  0C03 0044 5681          cmp.b     #68,D3
000031D2  6606      5682          bne.s     menu_38
                    5683   ; TestLEDS() ;
000031D4  4EB8 0A50 5684          jsr       _TestLEDS
000031D8  6004      5685          bra.s     menu_39
                    5686   menu_38:
                    5687   ; else
                    5688   ; UnknownCommand() ;
000031DA  4EB8 2E74 5689          jsr       _UnknownCommand
                    5690   menu_39:
000031DE  6000 0126 5691          bra       menu_52
                    5692   menu_32:
                    5693   ; }
                    5694   ; else if( c == (char)(' ')) {             // Next instruction command
000031E2  0C02 0020 5695          cmp.b     #32,D2
000031E6  6636      5696          bne.s     menu_40
                    5697   ; DisableBreakPoints() ;
000031E8  4EB8 2A84 5698          jsr       _DisableBreakPoints
                    5699   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000031EC  2013      5700          move.l    (A3),D0
000031EE  0C80 0000 5701          cmp.l     #1,D0
000031F2  0001      
000031F4  661A      5702          bne.s     menu_42
000031F6  2039 0B00 5703          move.l    _GoFlag.L,D0
000031FA  00DC      
000031FC  0C80 0000 5704          cmp.l     #1,D0
00003200  0001      
00003202  660C      5705          bne.s     menu_42
                    5706   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00003204  13FC 0001 5707          move.b    #1,4194314
00003208  0040 000A 
                    5708   ; return ;
0000320C  6000 00FC 5709          bra       menu_44
                    5710   menu_42:
                    5711   ; }
                    5712   ; else
                    5713   ; printf("\r\nError: Press 'G' first to start program") ;
00003210  4879 0000 5714          pea       @m68kde~1_156.L
00003214  61C0      
00003216  4E92      5715          jsr       (A2)
00003218  584F      5716          addq.w    #4,A7
0000321A  6000 00EA 5717          bra       menu_52
                    5718   menu_40:
                    5719   ; }
                    5720   ; else if( c == (char)('S')) {             // single step
0000321E  0C02 0053 5721          cmp.b     #83,D2
00003222  6600 008C 5722          bne       menu_45
                    5723   ; if(Trace == 0) {
00003226  2013      5724          move.l    (A3),D0
00003228  6600 0050 5725          bne       menu_47
                    5726   ; DisableBreakPoints() ;
0000322C  4EB8 2A84 5727          jsr       _DisableBreakPoints
                    5728   ; printf("\r\nSingle Step  :[ON]") ;
00003230  4879 0000 5729          pea       @m68kde~1_157.L
00003234  61EA      
00003236  4E92      5730          jsr       (A2)
00003238  584F      5731          addq.w    #4,A7
                    5732   ; printf("\r\nBreak Points :[Disabled]") ;
0000323A  4879 0000 5733          pea       @m68kde~1_90.L
0000323E  5888      
00003240  4E92      5734          jsr       (A2)
00003242  584F      5735          addq.w    #4,A7
                    5736   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00003244  0055 8000 5737          or.w      #32768,(A5)
                    5738   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00003248  2F39 0B00 5739          move.l    _PC.L,-(A7)
0000324C  0120      
0000324E  4879 0000 5740          pea       @m68kde~1_158.L
00003252  6200      
00003254  4E92      5741          jsr       (A2)
00003256  504F      5742          addq.w    #8,A7
                    5743   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00003258  4879 0000 5744          pea       @m68kde~1_159.L
0000325C  6234      
0000325E  4E92      5745          jsr       (A2)
00003260  584F      5746          addq.w    #4,A7
                    5747   ; DumpRegisters() ;
00003262  4EB8 1FDA 5748          jsr       _DumpRegisters
                    5749   ; Trace = 1;
00003266  26BC 0000 5750          move.l    #1,(A3)
0000326A  0001      
                    5751   ; TraceException = 1;
0000326C  13FC 0001 5752          move.b    #1,4194314
00003270  0040 000A 
                    5753   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00003274  28B8 0074 5754          move.l    116,(A4)
00003278  6032      5755          bra.s     menu_48
                    5756   menu_47:
                    5757   ; }
                    5758   ; else {
                    5759   ; Trace = 0 ;
0000327A  4293      5760          clr.l     (A3)
                    5761   ; TraceException = 0 ;
0000327C  4239 0040 5762          clr.b     4194314
00003280  000A      
                    5763   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00003282  28B8 0074 5764          move.l    116,(A4)
                    5765   ; EnableBreakPoints() ;
00003286  4EB8 2AD8 5766          jsr       _EnableBreakPoints
                    5767   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000328A  0255 7FFF 5768          and.w     #32767,(A5)
                    5769   ; printf("\r\nSingle Step : [OFF]") ;
0000328E  4879 0000 5770          pea       @m68kde~1_160.L
00003292  6258      
00003294  4E92      5771          jsr       (A2)
00003296  584F      5772          addq.w    #4,A7
                    5773   ; printf("\r\nBreak Points :[Enabled]") ;
00003298  4879 0000 5774          pea       @m68kde~1_161.L
0000329C  626E      
0000329E  4E92      5775          jsr       (A2)
000032A0  584F      5776          addq.w    #4,A7
                    5777   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000032A2  4879 0000 5778          pea       @m68kde~1_162.L
000032A6  6288      
000032A8  4E92      5779          jsr       (A2)
000032AA  584F      5780          addq.w    #4,A7
                    5781   menu_48:
000032AC  6000 0058 5782          bra       menu_52
                    5783   menu_45:
                    5784   ; }
                    5785   ; }
                    5786   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000032B0  0C02 001B 5787          cmp.b     #27,D2
000032B4  6600 0040 5788          bne       menu_49
                    5789   ; Trace = 0;
000032B8  4293      5790          clr.l     (A3)
                    5791   ; TraceException = 0;
000032BA  4239 0040 5792          clr.b     4194314
000032BE  000A      
                    5793   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000032C0  28B8 0074 5794          move.l    116,(A4)
                    5795   ; EnableBreakPoints() ;
000032C4  4EB8 2AD8 5796          jsr       _EnableBreakPoints
                    5797   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000032C8  0255 7FFF 5798          and.w     #32767,(A5)
                    5799   ; printf("\r\nSingle Step  :[OFF]") ;
000032CC  4879 0000 5800          pea       @m68kde~1_163.L
000032D0  62B2      
000032D2  4E92      5801          jsr       (A2)
000032D4  584F      5802          addq.w    #4,A7
                    5803   ; printf("\r\nBreak Points :[Enabled]");
000032D6  4879 0000 5804          pea       @m68kde~1_161.L
000032DA  626E      
000032DC  4E92      5805          jsr       (A2)
000032DE  584F      5806          addq.w    #4,A7
                    5807   ; printf("\r\nProgram Running.....") ;
000032E0  4879 0000 5808          pea       @m68kde~1_154.L
000032E4  617A      
000032E6  4E92      5809          jsr       (A2)
000032E8  584F      5810          addq.w    #4,A7
                    5811   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000032EA  4879 0000 5812          pea       @m68kde~1_155.L
000032EE  6192      
000032F0  4E92      5813          jsr       (A2)
000032F2  584F      5814          addq.w    #4,A7
                    5815   ; return ;
000032F4  6014      5816          bra.s     menu_44
                    5817   menu_49:
                    5818   ; }
                    5819   ; else if( c == (char)('W'))              // Watchpoint command
000032F6  0C02 0057 5820          cmp.b     #87,D2
000032FA  6606      5821          bne.s     menu_51
                    5822   ; Watchpoint() ;
000032FC  4EB8 2F1C 5823          jsr       _Watchpoint
00003300  6004      5824          bra.s     menu_52
                    5825   menu_51:
                    5826   ; else
                    5827   ; UnknownCommand() ;
00003302  4EB8 2E74 5828          jsr       _UnknownCommand
                    5829   menu_52:
00003306  6000 FD86 5830          bra       menu_1
                    5831   menu_44:
0000330A  4CDF 3C0C 5832          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
0000330E  4E75      5833          rts
                    5834   ; }
                    5835   ; }
                    5836   ; void PrintErrorMessageandAbort(char *string) {
                    5837   _PrintErrorMessageandAbort:
00003310  4E56 0000 5838          link      A6,#0
                    5839   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00003314  4879 0000 5840          pea       @m68kde~1_164.L
00003318  62C8      
0000331A  4EB9 0000 5841          jsr       _printf
0000331E  456E      
00003320  584F      5842          addq.w    #4,A7
                    5843   ; printf("%s\r\n", string) ;
00003322  2F2E 0008 5844          move.l    8(A6),-(A7)
00003326  4879 0000 5845          pea       @m68kde~1_165.L
0000332A  62E4      
0000332C  4EB9 0000 5846          jsr       _printf
00003330  456E      
00003332  504F      5847          addq.w    #8,A7
                    5848   ; menu() ;
00003334  4EB8 3072 5849          jsr       _menu
00003338  4E5E      5850          unlk      A6
0000333A  4E75      5851          rts
                    5852   ; }
                    5853   ; void IRQMessage(int level) {
                    5854   _IRQMessage:
0000333C  4E56 0000 5855          link      A6,#0
                    5856   ; printf("\r\n\r\nProgram ABORT !!!!!");
00003340  4879 0000 5857          pea       @m68kde~1_166.L
00003344  62EA      
00003346  4EB9 0000 5858          jsr       _printf
0000334A  456E      
0000334C  584F      5859          addq.w    #4,A7
                    5860   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
0000334E  2F2E 0008 5861          move.l    8(A6),-(A7)
00003352  4879 0000 5862          pea       @m68kde~1_167.L
00003356  6302      
00003358  4EB9 0000 5863          jsr       _printf
0000335C  456E      
0000335E  504F      5864          addq.w    #8,A7
                    5865   ; menu() ;
00003360  4EB8 3072 5866          jsr       _menu
00003364  4E5E      5867          unlk      A6
00003366  4E75      5868          rts
                    5869   ; }
                    5870   ; void UnhandledIRQ1(void) {
                    5871   _UnhandledIRQ1:
                    5872   ; IRQMessage(1);
00003368  4878 0001 5873          pea       1
0000336C  4EB8 333C 5874          jsr       _IRQMessage
00003370  584F      5875          addq.w    #4,A7
00003372  4E75      5876          rts
                    5877   ; }
                    5878   ; void UnhandledIRQ2(void) {
                    5879   _UnhandledIRQ2:
                    5880   ; IRQMessage(2);
00003374  4878 0002 5881          pea       2
00003378  4EB8 333C 5882          jsr       _IRQMessage
0000337C  584F      5883          addq.w    #4,A7
0000337E  4E75      5884          rts
                    5885   ; }
                    5886   ; void UnhandledIRQ3(void){
                    5887   _UnhandledIRQ3:
                    5888   ; IRQMessage(3);
00003380  4878 0003 5889          pea       3
00003384  4EB8 333C 5890          jsr       _IRQMessage
00003388  584F      5891          addq.w    #4,A7
0000338A  4E75      5892          rts
                    5893   ; }
                    5894   ; void UnhandledIRQ4(void) {
                    5895   _UnhandledIRQ4:
                    5896   ; IRQMessage(4);
0000338C  4878 0004 5897          pea       4
00003390  4EB8 333C 5898          jsr       _IRQMessage
00003394  584F      5899          addq.w    #4,A7
00003396  4E75      5900          rts
                    5901   ; }
                    5902   ; void UnhandledIRQ5(void) {
                    5903   _UnhandledIRQ5:
                    5904   ; IRQMessage(5);
00003398  4878 0005 5905          pea       5
0000339C  4EB8 333C 5906          jsr       _IRQMessage
000033A0  584F      5907          addq.w    #4,A7
000033A2  4E75      5908          rts
                    5909   ; }
                    5910   ; void UnhandledIRQ6(void) {
                    5911   _UnhandledIRQ6:
                    5912   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000033A4  4879 0000 5913          pea       @m68kde~1_168.L
000033A8  6326      
000033AA  4EB8 3310 5914          jsr       _PrintErrorMessageandAbort
000033AE  584F      5915          addq.w    #4,A7
                    5916   ; menu() ;
000033B0  4EB8 3072 5917          jsr       _menu
000033B4  4E75      5918          rts
                    5919   ; }
                    5920   ; void UnhandledIRQ7(void) {
                    5921   _UnhandledIRQ7:
                    5922   ; IRQMessage(7);
000033B6  4878 0007 5923          pea       7
000033BA  4EB8 333C 5924          jsr       _IRQMessage
000033BE  584F      5925          addq.w    #4,A7
000033C0  4E75      5926          rts
                    5927   ; }
                    5928   ; void UnhandledTrap(void) {
                    5929   _UnhandledTrap:
                    5930   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000033C2  4879 0000 5931          pea       @m68kde~1_169.L
000033C6  6366      
000033C8  4EB8 3310 5932          jsr       _PrintErrorMessageandAbort
000033CC  584F      5933          addq.w    #4,A7
000033CE  4E75      5934          rts
                    5935   ; }
                    5936   ; void BusError() {
                    5937   _BusError:
                    5938   ; PrintErrorMessageandAbort("BUS Error!") ;
000033D0  4879 0000 5939          pea       @m68kde~1_170.L
000033D4  637C      
000033D6  4EB8 3310 5940          jsr       _PrintErrorMessageandAbort
000033DA  584F      5941          addq.w    #4,A7
000033DC  4E75      5942          rts
                    5943   ; }
                    5944   ; void AddressError() {
                    5945   _AddressError:
                    5946   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000033DE  4879 0000 5947          pea       @m68kde~1_171.L
000033E2  6388      
000033E4  4EB8 3310 5948          jsr       _PrintErrorMessageandAbort
000033E8  584F      5949          addq.w    #4,A7
000033EA  4E75      5950          rts
                    5951   ; }
                    5952   ; void IllegalInstruction() {
                    5953   _IllegalInstruction:
                    5954   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000033EC  4879 0000 5955          pea       @m68kde~1_172.L
000033F0  6398      
000033F2  4EB8 3310 5956          jsr       _PrintErrorMessageandAbort
000033F6  584F      5957          addq.w    #4,A7
000033F8  4E75      5958          rts
                    5959   ; }
                    5960   ; void Dividebyzero() {
                    5961   _Dividebyzero:
                    5962   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000033FA  4879 0000 5963          pea       @m68kde~1_173.L
000033FE  63AC      
00003400  4EB8 3310 5964          jsr       _PrintErrorMessageandAbort
00003404  584F      5965          addq.w    #4,A7
00003406  4E75      5966          rts
                    5967   ; }
                    5968   ; void Check() {
                    5969   _Check:
                    5970   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00003408  4879 0000 5971          pea       @m68kde~1_174.L
0000340C  63BC      
0000340E  4EB8 3310 5972          jsr       _PrintErrorMessageandAbort
00003412  584F      5973          addq.w    #4,A7
00003414  4E75      5974          rts
                    5975   ; }
                    5976   ; void Trapv() {
                    5977   _Trapv:
                    5978   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00003416  4879 0000 5979          pea       @m68kde~1_175.L
0000341A  63CE      
0000341C  4EB8 3310 5980          jsr       _PrintErrorMessageandAbort
00003420  584F      5981          addq.w    #4,A7
00003422  4E75      5982          rts
                    5983   ; }
                    5984   ; void PrivError() {
                    5985   _PrivError:
                    5986   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00003424  4879 0000 5987          pea       @m68kde~1_176.L
00003428  63E0      
0000342A  4EB8 3310 5988          jsr       _PrintErrorMessageandAbort
0000342E  584F      5989          addq.w    #4,A7
00003430  4E75      5990          rts
                    5991   ; }
                    5992   ; void UnitIRQ() {
                    5993   _UnitIRQ:
                    5994   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00003432  4879 0000 5995          pea       @m68kde~1_177.L
00003436  63F4      
00003438  4EB8 3310 5996          jsr       _PrintErrorMessageandAbort
0000343C  584F      5997          addq.w    #4,A7
0000343E  4E75      5998          rts
                    5999   ; }
                    6000   ; void Spurious() {
                    6001   _Spurious:
                    6002   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00003440  4879 0000 6003          pea       @m68kde~1_178.L
00003444  6406      
00003446  4EB8 3310 6004          jsr       _PrintErrorMessageandAbort
0000344A  584F      6005          addq.w    #4,A7
0000344C  4E75      6006          rts
                    6007   ; }
                    6008   ; void EnterString(void)
                    6009   ; {
                    6010   _EnterString:
0000344E  4E56 FFFC 6011          link      A6,#-4
00003452  2F02      6012          move.l    D2,-(A7)
                    6013   ; unsigned char *Start;
                    6014   ; unsigned char c;
                    6015   ; printf("\r\nStart Address in Memory: ") ;
00003454  4879 0000 6016          pea       @m68kde~1_179.L
00003458  6414      
0000345A  4EB9 0000 6017          jsr       _printf
0000345E  456E      
00003460  584F      6018          addq.w    #4,A7
                    6019   ; Start = Get8HexDigits(0) ;
00003462  42A7      6020          clr.l     -(A7)
00003464  4EB8 0CA4 6021          jsr       _Get8HexDigits
00003468  584F      6022          addq.w    #4,A7
0000346A  2400      6023          move.l    D0,D2
                    6024   ; printf("\r\nEnter String (ESC to end) :") ;
0000346C  4879 0000 6025          pea       @m68kde~1_180.L
00003470  6430      
00003472  4EB9 0000 6026          jsr       _printf
00003476  456E      
00003478  584F      6027          addq.w    #4,A7
                    6028   ; while((c = getchar()) != 0x1b)
                    6029   EnterString_1:
0000347A  4EB9 0000 6030          jsr       _getch
0000347E  3BE2      
00003480  1D40 FFFF 6031          move.b    D0,-1(A6)
00003484  0C00 001B 6032          cmp.b     #27,D0
00003488  670A      6033          beq.s     EnterString_3
                    6034   ; *Start++ = c ;
0000348A  2042      6035          move.l    D2,A0
0000348C  5282      6036          addq.l    #1,D2
0000348E  10AE FFFF 6037          move.b    -1(A6),(A0)
00003492  60E6      6038          bra       EnterString_1
                    6039   EnterString_3:
                    6040   ; *Start = 0x00;  // terminate with a null
00003494  2042      6041          move.l    D2,A0
00003496  4210      6042          clr.b     (A0)
00003498  241F      6043          move.l    (A7)+,D2
0000349A  4E5E      6044          unlk      A6
0000349C  4E75      6045          rts
                    6046   ; }
                    6047   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    6048   ; void clearInputBuffer() {
                    6049   _clearInputBuffer:
0000349E  4E56 FFFC 6050          link      A6,#-4
                    6051   ; int c;
                    6052   ; while ((c = getchar()) != '\n' && c != EOF);
                    6053   clearInputBuffer_1:
000034A2  4EB9 0000 6054          jsr       _getch
000034A6  3BE2      
000034A8  2D40 FFFC 6055          move.l    D0,-4(A6)
000034AC  0C80 0000 6056          cmp.l     #10,D0
000034B0  000A      
000034B2  670E      6057          beq.s     clearInputBuffer_3
000034B4  202E FFFC 6058          move.l    -4(A6),D0
000034B8  0C80 FFFF 6059          cmp.l     #-1,D0
000034BC  FFFF      
000034BE  6702      6060          beq.s     clearInputBuffer_3
000034C0  60E0      6061          bra       clearInputBuffer_1
                    6062   clearInputBuffer_3:
000034C2  4E5E      6063          unlk      A6
000034C4  4E75      6064          rts
                    6065   ; }
                    6066   ; void MemoryTest(void)
                    6067   ; {
                    6068   _MemoryTest:
000034C6  4E56 FF40 6069          link      A6,#-192
000034CA  48E7 3F3C 6070          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000034CE  45F9 0000 6071          lea       _printf.L,A2
000034D2  456E      
000034D4  4BF8 0B68 6072          lea       __getch.L,A5
                    6073   ; unsigned int *RamPtr, counter1=1 ;
000034D8  2D7C 0000 6074          move.l    #1,-188(A6)
000034DC  0001 FF44 
                    6075   ; register unsigned int i ;
                    6076   ; unsigned int Start, End ;
                    6077   ; char c, text[150];
                    6078   ; unsigned int* addressPointer;
                    6079   ; unsigned int startAddress = NULL;
000034E0  42AE FFF0 6080          clr.l     -16(A6)
                    6081   ; unsigned int endAddress = NULL;
000034E4  42AE FFF4 6082          clr.l     -12(A6)
                    6083   ; unsigned int byteLength;
                    6084   ; unsigned int dataSize = 0;
000034E8  4285      6085          clr.l     D5
                    6086   ; unsigned int dataPattern = 0;
000034EA  4283      6087          clr.l     D3
                    6088   ; unsigned int currAddress;
                    6089   ; unsigned int addrCount;
                    6090   ; unsigned int intBuffer = NULL;
000034EC  7E00      6091          moveq     #0,D7
                    6092   ; unsigned char *startAddressPtr = NULL;
000034EE  4282      6093          clr.l     D2
                    6094   ; unsigned char *endAddressPtr = NULL;
000034F0  4286      6095          clr.l     D6
                    6096   ; unsigned short int *wordAddressPtr = NULL;
000034F2  387C 0000 6097          move.w    #0,A4
                    6098   ; unsigned int *longAddressPtr = NULL;
000034F6  367C 0000 6099          move.w    #0,A3
                    6100   ; // IMPROVEMENTS TO BE MADE:
                    6101   ; // Suppossed to be able to write an odd address as a byte
                    6102   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    6103   ; // printf("\r\nStart Address: ") ;
                    6104   ; // Start = Get8HexDigits(0) ;
                    6105   ; // printf("\r\nEnd Address: ") ;
                    6106   ; // End = Get8HexDigits(0) ;
                    6107   ; // TODO
                    6108   ; scanflush();
000034FA  4EB9 0000 6109          jsr       _scanflush
000034FE  3F64      
                    6110   ; memset(text, 0, sizeof(text));  // fills with zeros
00003500  4878 0096 6111          pea       150
00003504  42A7      6112          clr.l     -(A7)
00003506  486E FF56 6113          pea       -170(A6)
0000350A  4EB9 0000 6114          jsr       _memset
0000350E  3C7E      
00003510  DEFC 000C 6115          add.w     #12,A7
                    6116   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
00003514  4879 0000 6117          pea       @m68kde~1_181.L
00003518  644E      
0000351A  4E92      6118          jsr       (A2)
0000351C  584F      6119          addq.w    #4,A7
                    6120   ; dataSize = _getch() - 48;
0000351E  4E95      6121          jsr       (A5)
00003520  0480 0000 6122          sub.l     #48,D0
00003524  0030      
00003526  2A00      6123          move.l    D0,D5
                    6124   ; printf("\n");
00003528  4879 0000 6125          pea       @m68kde~1_28.L
0000352C  51EC      
0000352E  4E92      6126          jsr       (A2)
00003530  584F      6127          addq.w    #4,A7
                    6128   ; if (dataSize == 0) {
00003532  4A85      6129          tst.l     D5
00003534  6600 0058 6130          bne       MemoryTest_1
                    6131   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
00003538  4879 0000 6132          pea       @m68kde~1_182.L
0000353C  64A4      
0000353E  4E92      6133          jsr       (A2)
00003540  584F      6134          addq.w    #4,A7
                    6135   ; intBuffer = _getch() - 48;
00003542  4E95      6136          jsr       (A5)
00003544  0480 0000 6137          sub.l     #48,D0
00003548  0030      
0000354A  2E00      6138          move.l    D0,D7
                    6139   ; // scanf("%d", &intBuffer);
                    6140   ; switch (intBuffer) {
0000354C  2007      6141          move.l    D7,D0
0000354E  0C80 0000 6142          cmp.l     #4,D0
00003552  0004      
00003554  642C      6143          bhs.s     MemoryTest_4
00003556  E380      6144          asl.l     #1,D0
00003558  303B 0806 6145          move.w    MemoryTest_5(PC,D0.L),D0
0000355C  4EFB 0002 6146          jmp       MemoryTest_5(PC,D0.W)
                    6147   MemoryTest_5:
00003560  0008      6148          dc.w      MemoryTest_6-MemoryTest_5
00003562  000C      6149          dc.w      MemoryTest_7-MemoryTest_5
00003564  0014      6150          dc.w      MemoryTest_8-MemoryTest_5
00003566  001C      6151          dc.w      MemoryTest_9-MemoryTest_5
                    6152   MemoryTest_6:
                    6153   ; case(0):
                    6154   ; dataPattern = 0x00; break;
00003568  4283      6155          clr.l     D3
0000356A  6016      6156          bra.s     MemoryTest_4
                    6157   MemoryTest_7:
                    6158   ; case(1):
                    6159   ; dataPattern = 0xB2; break;
0000356C  263C 0000 6160          move.l    #178,D3
00003570  00B2      
00003572  600E      6161          bra.s     MemoryTest_4
                    6162   MemoryTest_8:
                    6163   ; case(2):
                    6164   ; dataPattern = 0xC3; break;
00003574  263C 0000 6165          move.l    #195,D3
00003578  00C3      
0000357A  6006      6166          bra.s     MemoryTest_4
                    6167   MemoryTest_9:
                    6168   ; case(3):
                    6169   ; dataPattern = 0xD4; break;
0000357C  263C 0000 6170          move.l    #212,D3
00003580  00D4      
                    6171   MemoryTest_4:
                    6172   ; }
                    6173   ; dataPattern &= 0xFF;
00003582  C6BC 0000 6174          and.l     #255,D3
00003586  00FF      
                    6175   ; byteLength = 1;
00003588  7801      6176          moveq     #1,D4
0000358A  6000 00AE 6177          bra       MemoryTest_11
                    6178   MemoryTest_1:
                    6179   ; } else if (dataSize == 1) {
0000358E  0C85 0000 6180          cmp.l     #1,D5
00003592  0001      
00003594  6600 0058 6181          bne       MemoryTest_10
                    6182   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
00003598  4879 0000 6183          pea       @m68kde~1_183.L
0000359C  6506      
0000359E  4E92      6184          jsr       (A2)
000035A0  584F      6185          addq.w    #4,A7
                    6186   ; intBuffer = _getch() - 48;
000035A2  4E95      6187          jsr       (A5)
000035A4  0480 0000 6188          sub.l     #48,D0
000035A8  0030      
000035AA  2E00      6189          move.l    D0,D7
                    6190   ; switch (intBuffer) {
000035AC  2007      6191          move.l    D7,D0
000035AE  0C80 0000 6192          cmp.l     #4,D0
000035B2  0004      
000035B4  642C      6193          bhs.s     MemoryTest_13
000035B6  E380      6194          asl.l     #1,D0
000035B8  303B 0806 6195          move.w    MemoryTest_14(PC,D0.L),D0
000035BC  4EFB 0002 6196          jmp       MemoryTest_14(PC,D0.W)
                    6197   MemoryTest_14:
000035C0  0008      6198          dc.w      MemoryTest_15-MemoryTest_14
000035C2  000C      6199          dc.w      MemoryTest_16-MemoryTest_14
000035C4  0014      6200          dc.w      MemoryTest_17-MemoryTest_14
000035C6  001C      6201          dc.w      MemoryTest_18-MemoryTest_14
                    6202   MemoryTest_15:
                    6203   ; case(0):
                    6204   ; dataPattern = 0x0000; break;
000035C8  4283      6205          clr.l     D3
000035CA  6016      6206          bra.s     MemoryTest_13
                    6207   MemoryTest_16:
                    6208   ; case(1):
                    6209   ; dataPattern = 0x1234; break;
000035CC  263C 0000 6210          move.l    #4660,D3
000035D0  1234      
000035D2  600E      6211          bra.s     MemoryTest_13
                    6212   MemoryTest_17:
                    6213   ; case(2):
                    6214   ; dataPattern = 0xA1B2; break;
000035D4  263C 0000 6215          move.l    #41394,D3
000035D8  A1B2      
000035DA  6006      6216          bra.s     MemoryTest_13
                    6217   MemoryTest_18:
                    6218   ; case(3):
                    6219   ; dataPattern = 0xC3D4; break;
000035DC  263C 0000 6220          move.l    #50132,D3
000035E0  C3D4      
                    6221   MemoryTest_13:
                    6222   ; }
                    6223   ; dataPattern &= 0xFFFF;
000035E2  C6BC 0000 6224          and.l     #65535,D3
000035E6  FFFF      
                    6225   ; byteLength = 2;
000035E8  7802      6226          moveq     #2,D4
000035EA  6000 004E 6227          bra       MemoryTest_11
                    6228   MemoryTest_10:
                    6229   ; } else {
                    6230   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
000035EE  4879 0000 6231          pea       @m68kde~1_184.L
000035F2  6570      
000035F4  4E92      6232          jsr       (A2)
000035F6  584F      6233          addq.w    #4,A7
                    6234   ; intBuffer = _getch() - 48;
000035F8  4E95      6235          jsr       (A5)
000035FA  0480 0000 6236          sub.l     #48,D0
000035FE  0030      
00003600  2E00      6237          move.l    D0,D7
                    6238   ; switch (intBuffer) {
00003602  2007      6239          move.l    D7,D0
00003604  0C80 0000 6240          cmp.l     #4,D0
00003608  0004      
0000360A  642C      6241          bhs.s     MemoryTest_20
0000360C  E380      6242          asl.l     #1,D0
0000360E  303B 0806 6243          move.w    MemoryTest_21(PC,D0.L),D0
00003612  4EFB 0002 6244          jmp       MemoryTest_21(PC,D0.W)
                    6245   MemoryTest_21:
00003616  0008      6246          dc.w      MemoryTest_22-MemoryTest_21
00003618  000C      6247          dc.w      MemoryTest_23-MemoryTest_21
0000361A  0014      6248          dc.w      MemoryTest_24-MemoryTest_21
0000361C  001C      6249          dc.w      MemoryTest_25-MemoryTest_21
                    6250   MemoryTest_22:
                    6251   ; case(0):
                    6252   ; dataPattern = 0x00000000; break;
0000361E  4283      6253          clr.l     D3
00003620  6016      6254          bra.s     MemoryTest_20
                    6255   MemoryTest_23:
                    6256   ; case(1):
                    6257   ; dataPattern = 0xAABBCCDD; break;
00003622  263C AABB 6258          move.l    #-1430532899,D3
00003626  CCDD      
00003628  600E      6259          bra.s     MemoryTest_20
                    6260   MemoryTest_24:
                    6261   ; case(2):
                    6262   ; dataPattern = 0x11223344; break;
0000362A  263C 1122 6263          move.l    #287454020,D3
0000362E  3344      
00003630  6006      6264          bra.s     MemoryTest_20
                    6265   MemoryTest_25:
                    6266   ; case(3):
                    6267   ; dataPattern = 0x76543210; break;
00003632  263C 7654 6268          move.l    #1985229328,D3
00003636  3210      
                    6269   MemoryTest_20:
                    6270   ; }
                    6271   ; byteLength = 4;
00003638  7804      6272          moveq     #4,D4
                    6273   MemoryTest_11:
                    6274   ; }
                    6275   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    6276   ; while (startAddressPtr == NULL || 
                    6277   MemoryTest_26:
0000363A  4A82      6278          tst.l     D2
0000363C  6732      6279          beq.s     MemoryTest_29
0000363E  0C84 0000 6280          cmp.l     #1,D4
00003642  0001      
00003644  6316      6281          bls.s     MemoryTest_30
00003646  2F02      6282          move.l    D2,-(A7)
00003648  4878 0002 6283          pea       2
0000364C  4EB9 0000 6284          jsr       ULDIV
00003650  3AD4      
00003652  202F 0004 6285          move.l    4(A7),D0
00003656  504F      6286          addq.w    #8,A7
00003658  4A80      6287          tst.l     D0
0000365A  6614      6288          bne.s     MemoryTest_29
                    6289   MemoryTest_30:
0000365C  0C82 0802 6290          cmp.l     #134348800,D2
00003660  0000      
00003662  650C      6291          blo.s     MemoryTest_29
00003664  203C 0B00 6292          move.l    #184549376,D0
00003668  0000      
0000366A  9084      6293          sub.l     D4,D0
0000366C  B480      6294          cmp.l     D0,D2
0000366E  6316      6295          bls.s     MemoryTest_28
                    6296   MemoryTest_29:
                    6297   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    6298   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    6299   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    6300   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
00003670  4879 0000 6301          pea       @m68kde~1_185.L
00003674  65EE      
00003676  4E92      6302          jsr       (A2)
00003678  584F      6303          addq.w    #4,A7
                    6304   ; startAddressPtr =  Get8HexDigits(0);
0000367A  42A7      6305          clr.l     -(A7)
0000367C  4EB8 0CA4 6306          jsr       _Get8HexDigits
00003680  584F      6307          addq.w    #4,A7
00003682  2400      6308          move.l    D0,D2
00003684  60B4      6309          bra       MemoryTest_26
                    6310   MemoryTest_28:
                    6311   ; }
                    6312   ; while (endAddressPtr == NULL || 
                    6313   MemoryTest_31:
00003686  4A86      6314          tst.l     D6
00003688  670A      6315          beq.s     MemoryTest_34
0000368A  202E FFF0 6316          move.l    -16(A6),D0
0000368E  D084      6317          add.l     D4,D0
00003690  BC80      6318          cmp.l     D0,D6
00003692  6416      6319          bhs.s     MemoryTest_33
                    6320   MemoryTest_34:
                    6321   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    6322   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00003694  4879 0000 6323          pea       @m68kde~1_186.L
00003698  6626      
0000369A  4E92      6324          jsr       (A2)
0000369C  584F      6325          addq.w    #4,A7
                    6326   ; endAddressPtr =  Get8HexDigits(0);
0000369E  42A7      6327          clr.l     -(A7)
000036A0  4EB8 0CA4 6328          jsr       _Get8HexDigits
000036A4  584F      6329          addq.w    #4,A7
000036A6  2C00      6330          move.l    D0,D6
000036A8  60DC      6331          bra       MemoryTest_31
                    6332   MemoryTest_33:
                    6333   ; }
                    6334   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
000036AA  2F02      6335          move.l    D2,-(A7)
000036AC  4879 0000 6336          pea       @m68kde~1_187.L
000036B0  665C      
000036B2  4E92      6337          jsr       (A2)
000036B4  504F      6338          addq.w    #8,A7
                    6339   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
000036B6  2F06      6340          move.l    D6,-(A7)
000036B8  4879 0000 6341          pea       @m68kde~1_188.L
000036BC  6674      
000036BE  4E92      6342          jsr       (A2)
000036C0  504F      6343          addq.w    #8,A7
                    6344   ; addrCount = 0;
000036C2  42AE FFFC 6345          clr.l     -4(A6)
                    6346   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    6347   MemoryTest_35:
000036C6  B486      6348          cmp.l     D6,D2
000036C8  6400 0132 6349          bhs       MemoryTest_37
000036CC  2006      6350          move.l    D6,D0
000036CE  9082      6351          sub.l     D2,D0
000036D0  5280      6352          addq.l    #1,D0
000036D2  B084      6353          cmp.l     D4,D0
000036D4  6500 0126 6354          blo       MemoryTest_37
                    6355   ; // If address goes beyond 0x0B00_0000 then break
                    6356   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
000036D8  203C 0B00 6357          move.l    #184549376,D0
000036DC  0000      
000036DE  9084      6358          sub.l     D4,D0
000036E0  B480      6359          cmp.l     D0,D2
000036E2  6310      6360          bls.s     MemoryTest_38
                    6361   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
000036E4  2F02      6362          move.l    D2,-(A7)
000036E6  4879 0000 6363          pea       @m68kde~1_189.L
000036EA  668A      
000036EC  4E92      6364          jsr       (A2)
000036EE  504F      6365          addq.w    #8,A7
                    6366   ; break;
000036F0  6000 010A 6367          bra       MemoryTest_37
                    6368   MemoryTest_38:
                    6369   ; }
                    6370   ; longAddressPtr = startAddressPtr;
000036F4  2642      6371          move.l    D2,A3
                    6372   ; wordAddressPtr = startAddressPtr;
000036F6  2842      6373          move.l    D2,A4
                    6374   ; if (dataSize == 0) {
000036F8  4A85      6375          tst.l     D5
000036FA  6600 0034 6376          bne       MemoryTest_40
                    6377   ; *startAddressPtr = dataPattern;
000036FE  2042      6378          move.l    D2,A0
00003700  1083      6379          move.b    D3,(A0)
                    6380   ; if ((*startAddressPtr) != dataPattern) {
00003702  2042      6381          move.l    D2,A0
00003704  1010      6382          move.b    (A0),D0
00003706  C0BC 0000 6383          and.l     #255,D0
0000370A  00FF      
0000370C  B083      6384          cmp.l     D3,D0
0000370E  671C      6385          beq.s     MemoryTest_42
                    6386   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00003710  2F03      6387          move.l    D3,-(A7)
00003712  2042      6388          move.l    D2,A0
00003714  1210      6389          move.b    (A0),D1
00003716  C2BC 0000 6390          and.l     #255,D1
0000371A  00FF      
0000371C  2F01      6391          move.l    D1,-(A7)
0000371E  2F02      6392          move.l    D2,-(A7)
00003720  4879 0000 6393          pea       @m68kde~1_190.L
00003724  66BC      
00003726  4E92      6394          jsr       (A2)
00003728  DEFC 0010 6395          add.w     #16,A7
                    6396   MemoryTest_42:
0000372C  6000 0058 6397          bra       MemoryTest_48
                    6398   MemoryTest_40:
                    6399   ; }
                    6400   ; } else if (dataSize == 1) {
00003730  0C85 0000 6401          cmp.l     #1,D5
00003734  0001      
00003736  662C      6402          bne.s     MemoryTest_44
                    6403   ; *wordAddressPtr = dataPattern;
00003738  3883      6404          move.w    D3,(A4)
                    6405   ; if ((*wordAddressPtr) != dataPattern) {
0000373A  3014      6406          move.w    (A4),D0
0000373C  C0BC 0000 6407          and.l     #65535,D0
00003740  FFFF      
00003742  B083      6408          cmp.l     D3,D0
00003744  671C      6409          beq.s     MemoryTest_46
                    6410   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00003746  2F03      6411          move.l    D3,-(A7)
00003748  2042      6412          move.l    D2,A0
0000374A  1210      6413          move.b    (A0),D1
0000374C  C2BC 0000 6414          and.l     #255,D1
00003750  00FF      
00003752  2F01      6415          move.l    D1,-(A7)
00003754  2F02      6416          move.l    D2,-(A7)
00003756  4879 0000 6417          pea       @m68kde~1_190.L
0000375A  66BC      
0000375C  4E92      6418          jsr       (A2)
0000375E  DEFC 0010 6419          add.w     #16,A7
                    6420   MemoryTest_46:
00003762  6022      6421          bra.s     MemoryTest_48
                    6422   MemoryTest_44:
                    6423   ; }
                    6424   ; } else {
                    6425   ; *longAddressPtr = dataPattern;
00003764  2683      6426          move.l    D3,(A3)
                    6427   ; if ((*longAddressPtr) != dataPattern) {
00003766  B693      6428          cmp.l     (A3),D3
00003768  671C      6429          beq.s     MemoryTest_48
                    6430   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
0000376A  2F03      6431          move.l    D3,-(A7)
0000376C  2042      6432          move.l    D2,A0
0000376E  1210      6433          move.b    (A0),D1
00003770  C2BC 0000 6434          and.l     #255,D1
00003774  00FF      
00003776  2F01      6435          move.l    D1,-(A7)
00003778  2F02      6436          move.l    D2,-(A7)
0000377A  4879 0000 6437          pea       @m68kde~1_190.L
0000377E  66BC      
00003780  4E92      6438          jsr       (A2)
00003782  DEFC 0010 6439          add.w     #16,A7
                    6440   MemoryTest_48:
                    6441   ; }
                    6442   ; }
                    6443   ; // if ((*startAddressPtr) != dataPattern) {
                    6444   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    6445   ; // }
                    6446   ; addrCount++;
00003786  52AE FFFC 6447          addq.l    #1,-4(A6)
                    6448   ; if (addrCount % 128 == 0) {
0000378A  2F2E FFFC 6449          move.l    -4(A6),-(A7)
0000378E  4878 0080 6450          pea       128
00003792  4EB9 0000 6451          jsr       ULDIV
00003796  3AD4      
00003798  202F 0004 6452          move.l    4(A7),D0
0000379C  504F      6453          addq.w    #8,A7
0000379E  4A80      6454          tst.l     D0
000037A0  6600 0054 6455          bne       MemoryTest_55
                    6456   ; if (dataSize == 0) {
000037A4  4A85      6457          tst.l     D5
000037A6  661C      6458          bne.s     MemoryTest_52
                    6459   ; printf("Address: 0x%x Value: 0x%02X\n",
000037A8  2042      6460          move.l    D2,A0
000037AA  1210      6461          move.b    (A0),D1
000037AC  C2BC 0000 6462          and.l     #255,D1
000037B0  00FF      
000037B2  2F01      6463          move.l    D1,-(A7)
000037B4  2F02      6464          move.l    D2,-(A7)
000037B6  4879 0000 6465          pea       @m68kde~1_191.L
000037BA  6702      
000037BC  4E92      6466          jsr       (A2)
000037BE  DEFC 000C 6467          add.w     #12,A7
000037C2  6032      6468          bra.s     MemoryTest_55
                    6469   MemoryTest_52:
                    6470   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    6471   ; }
                    6472   ; else if (dataSize == 1) {
000037C4  0C85 0000 6473          cmp.l     #1,D5
000037C8  0001      
000037CA  661A      6474          bne.s     MemoryTest_54
                    6475   ; printf("Address: 0x%x Value: 0x%04X\n",
000037CC  3214      6476          move.w    (A4),D1
000037CE  C2BC 0000 6477          and.l     #65535,D1
000037D2  FFFF      
000037D4  2F01      6478          move.l    D1,-(A7)
000037D6  2F0C      6479          move.l    A4,-(A7)
000037D8  4879 0000 6480          pea       @m68kde~1_192.L
000037DC  6720      
000037DE  4E92      6481          jsr       (A2)
000037E0  DEFC 000C 6482          add.w     #12,A7
000037E4  6010      6483          bra.s     MemoryTest_55
                    6484   MemoryTest_54:
                    6485   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    6486   ; }
                    6487   ; else {
                    6488   ; printf("Address: 0x%x Value: 0x%08X\n",
000037E6  2F13      6489          move.l    (A3),-(A7)
000037E8  2F0B      6490          move.l    A3,-(A7)
000037EA  4879 0000 6491          pea       @m68kde~1_193.L
000037EE  673E      
000037F0  4E92      6492          jsr       (A2)
000037F2  DEFC 000C 6493          add.w     #12,A7
                    6494   MemoryTest_55:
                    6495   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    6496   ; }
                    6497   ; }
                    6498   ; startAddressPtr += byteLength;
000037F6  D484      6499          add.l     D4,D2
000037F8  6000 FECC 6500          bra       MemoryTest_35
                    6501   MemoryTest_37:
000037FC  4CDF 3CFC 6502          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003800  4E5E      6503          unlk      A6
00003802  4E75      6504          rts
                    6505   ; }
                    6506   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    6507   ; }
                    6508   ; void main(void)
                    6509   ; {
                    6510   _main:
00003804  4E56 FFF4 6511          link      A6,#-12
00003808  48E7 3030 6512          movem.l   D2/D3/A2/A3,-(A7)
0000380C  45F8 0A30 6513          lea       _InstallExceptionHandler.L,A2
00003810  47F9 0000 6514          lea       _printf.L,A3
00003814  456E      
                    6515   ; char c ;
                    6516   ; int i, j ;
                    6517   ; char *BugMessage = "DE1-68k Bug V1.77";
00003816  41F9 0000 6518          lea       @m68kde~1_194.L,A0
0000381A  675C      
0000381C  2608      6519          move.l    A0,D3
                    6520   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
0000381E  41F9 0000 6521          lea       @m68kde~1_195.L,A0
00003822  676E      
00003824  2D48 FFFC 6522          move.l    A0,-4(A6)
                    6523   ; KillAllBreakPoints() ;
00003828  4EB8 2B20 6524          jsr       _KillAllBreakPoints
                    6525   ; i = x = y = z = PortA_Count = 0;
0000382C  42B9 0B00 6526          clr.l     _PortA_Count.L
00003830  00D4      
00003832  42B9 0B00 6527          clr.l     _z.L
00003836  00D0      
00003838  42B9 0B00 6528          clr.l     _y.L
0000383C  00CC      
0000383E  42B9 0B00 6529          clr.l     _x.L
00003842  00C8      
00003844  4282      6530          clr.l     D2
                    6531   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00003846  42B9 0B00 6532          clr.l     _GoFlag.L
0000384A  00DC      
0000384C  42B9 0B00 6533          clr.l     _Trace.L
00003850  00D8      
                    6534   ; Echo = 1 ;
00003852  23FC 0000 6535          move.l    #1,_Echo.L
00003856  0001 0B00 
0000385A  00E0      
                    6536   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
0000385C  42B9 0B00 6537          clr.l     _d7.L
00003860  0100      
00003862  42B9 0B00 6538          clr.l     _d6.L
00003866  00FC      
00003868  42B9 0B00 6539          clr.l     _d5.L
0000386C  00F8      
0000386E  42B9 0B00 6540          clr.l     _d4.L
00003872  00F4      
00003874  42B9 0B00 6541          clr.l     _d3.L
00003878  00F0      
0000387A  42B9 0B00 6542          clr.l     _d2.L
0000387E  00EC      
00003880  42B9 0B00 6543          clr.l     _d1.L
00003884  00E8      
00003886  42B9 0B00 6544          clr.l     _d0.L
0000388A  00E4      
                    6545   ; a0=a1=a2=a3=a4=a5=a6=0 ;
0000388C  42B9 0B00 6546          clr.l     _a6.L
00003890  011C      
00003892  42B9 0B00 6547          clr.l     _a5.L
00003896  0118      
00003898  42B9 0B00 6548          clr.l     _a4.L
0000389C  0114      
0000389E  42B9 0B00 6549          clr.l     _a3.L
000038A2  0110      
000038A4  42B9 0B00 6550          clr.l     _a2.L
000038A8  010C      
000038AA  42B9 0B00 6551          clr.l     _a1.L
000038AE  0108      
000038B0  42B9 0B00 6552          clr.l     _a0.L
000038B4  0104      
                    6553   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
000038B6  23FC 0800 6554          move.l    #134217728,_PC.L
000038BA  0000 0B00 
000038BE  0120      
000038C0  23FC 0C00 6555          move.l    #201326592,_SSP.L
000038C4  0000 0B00 
000038C8  0124      
000038CA  23FC 0C00 6556          move.l    #201326592,_USP.L
000038CE  0000 0B00 
000038D2  0128      
                    6557   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
000038D4  33FC 2000 6558          move.w    #8192,_SR.L
000038D8  0B00 012C 
                    6559   ; // Initialise Breakpoint variables
                    6560   ; for(i = 0; i < 8; i++)  {
000038DC  4282      6561          clr.l     D2
                    6562   main_1:
000038DE  0C82 0000 6563          cmp.l     #8,D2
000038E2  0008      
000038E4  6C00 004C 6564          bge       main_3
                    6565   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000038E8  2002      6566          move.l    D2,D0
000038EA  E588      6567          lsl.l     #2,D0
000038EC  41F9 0B00 6568          lea       _BreakPointAddress.L,A0
000038F0  012E      
000038F2  42B0 0800 6569          clr.l     0(A0,D0.L)
                    6570   ; WatchPointAddress[i] = 0 ;
000038F6  2002      6571          move.l    D2,D0
000038F8  E588      6572          lsl.l     #2,D0
000038FA  41F9 0B00 6573          lea       _WatchPointAddress.L,A0
000038FE  0182      
00003900  42B0 0800 6574          clr.l     0(A0,D0.L)
                    6575   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00003904  2002      6576          move.l    D2,D0
00003906  E388      6577          lsl.l     #1,D0
00003908  41F9 0B00 6578          lea       _BreakPointInstruction.L,A0
0000390C  014E      
0000390E  4270 0800 6579          clr.w     0(A0,D0.L)
                    6580   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00003912  2002      6581          move.l    D2,D0
00003914  E588      6582          lsl.l     #2,D0
00003916  41F9 0B00 6583          lea       _BreakPointSetOrCleared.L,A0
0000391A  015E      
0000391C  42B0 0800 6584          clr.l     0(A0,D0.L)
                    6585   ; WatchPointSetOrCleared[i] = 0;
00003920  2002      6586          move.l    D2,D0
00003922  E588      6587          lsl.l     #2,D0
00003924  41F9 0B00 6588          lea       _WatchPointSetOrCleared.L,A0
00003928  01A2      
0000392A  42B0 0800 6589          clr.l     0(A0,D0.L)
0000392E  5282      6590          addq.l    #1,D2
00003930  60AC      6591          bra       main_1
                    6592   main_3:
                    6593   ; }
                    6594   ; Init_RS232() ;     // initialise the RS232 port
00003932  4EB8 0B12 6595          jsr       _Init_RS232
                    6596   ; Init_LCD() ;
00003936  4EB8 095E 6597          jsr       _Init_LCD
                    6598   ; SPI_Init();
0000393A  4EB8 10FC 6599          jsr       _SPI_Init
                    6600   ; IIC_Init();
0000393E  4EB8 1428 6601          jsr       _IIC_Init
                    6602   ; for( i = 32; i < 48; i++)
00003942  7420      6603          moveq     #32,D2
                    6604   main_4:
00003944  0C82 0000 6605          cmp.l     #48,D2
00003948  0030      
0000394A  6C0E      6606          bge.s     main_6
                    6607   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
0000394C  2F02      6608          move.l    D2,-(A7)
0000394E  4878 33C2 6609          pea       _UnhandledTrap.L
00003952  4E92      6610          jsr       (A2)
00003954  504F      6611          addq.w    #8,A7
00003956  5282      6612          addq.l    #1,D2
00003958  60EA      6613          bra       main_4
                    6614   main_6:
                    6615   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
0000395A  4878 002F 6616          pea       47
0000395E  4878 3072 6617          pea       _menu.L
00003962  4E92      6618          jsr       (A2)
00003964  504F      6619          addq.w    #8,A7
                    6620   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00003966  4878 0019 6621          pea       25
0000396A  4878 3368 6622          pea       _UnhandledIRQ1.L
0000396E  4E92      6623          jsr       (A2)
00003970  504F      6624          addq.w    #8,A7
                    6625   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00003972  4878 001A 6626          pea       26
00003976  4878 3374 6627          pea       _UnhandledIRQ2.L
0000397A  4E92      6628          jsr       (A2)
0000397C  504F      6629          addq.w    #8,A7
                    6630   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
0000397E  4878 001B 6631          pea       27
00003982  4878 3380 6632          pea       _UnhandledIRQ3.L
00003986  4E92      6633          jsr       (A2)
00003988  504F      6634          addq.w    #8,A7
                    6635   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
0000398A  4878 001C 6636          pea       28
0000398E  4878 338C 6637          pea       _UnhandledIRQ4.L
00003992  4E92      6638          jsr       (A2)
00003994  504F      6639          addq.w    #8,A7
                    6640   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00003996  4878 001D 6641          pea       29
0000399A  4878 3398 6642          pea       _UnhandledIRQ5.L
0000399E  4E92      6643          jsr       (A2)
000039A0  504F      6644          addq.w    #8,A7
                    6645   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
000039A2  4878 001E 6646          pea       30
000039A6  4878 33A4 6647          pea       _UnhandledIRQ6.L
000039AA  4E92      6648          jsr       (A2)
000039AC  504F      6649          addq.w    #8,A7
                    6650   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
000039AE  4878 001F 6651          pea       31
000039B2  4878 33B6 6652          pea       _UnhandledIRQ7.L
000039B6  4E92      6653          jsr       (A2)
000039B8  504F      6654          addq.w    #8,A7
                    6655   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
000039BA  4878 002E 6656          pea       46
000039BE  4878 2DAE 6657          pea       _HandleBreakPoint.L
000039C2  4E92      6658          jsr       (A2)
000039C4  504F      6659          addq.w    #8,A7
                    6660   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
000039C6  4878 001D 6661          pea       29
000039CA  4878 248E 6662          pea       _DumpRegistersandPause.L
000039CE  4E92      6663          jsr       (A2)
000039D0  504F      6664          addq.w    #8,A7
                    6665   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
000039D2  4878 0002 6666          pea       2
000039D6  4878 33D0 6667          pea       _BusError.L
000039DA  4E92      6668          jsr       (A2)
000039DC  504F      6669          addq.w    #8,A7
                    6670   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
000039DE  4878 0003 6671          pea       3
000039E2  4878 33DE 6672          pea       _AddressError.L
000039E6  4E92      6673          jsr       (A2)
000039E8  504F      6674          addq.w    #8,A7
                    6675   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
000039EA  4878 0004 6676          pea       4
000039EE  4878 33EC 6677          pea       _IllegalInstruction.L
000039F2  4E92      6678          jsr       (A2)
000039F4  504F      6679          addq.w    #8,A7
                    6680   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
000039F6  4878 0005 6681          pea       5
000039FA  4878 33FA 6682          pea       _Dividebyzero.L
000039FE  4E92      6683          jsr       (A2)
00003A00  504F      6684          addq.w    #8,A7
                    6685   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00003A02  4878 0006 6686          pea       6
00003A06  4878 3408 6687          pea       _Check.L
00003A0A  4E92      6688          jsr       (A2)
00003A0C  504F      6689          addq.w    #8,A7
                    6690   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00003A0E  4878 0007 6691          pea       7
00003A12  4878 3416 6692          pea       _Trapv.L
00003A16  4E92      6693          jsr       (A2)
00003A18  504F      6694          addq.w    #8,A7
                    6695   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00003A1A  4878 0008 6696          pea       8
00003A1E  4878 3424 6697          pea       _PrivError.L
00003A22  4E92      6698          jsr       (A2)
00003A24  504F      6699          addq.w    #8,A7
                    6700   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00003A26  4878 000F 6701          pea       15
00003A2A  4878 3432 6702          pea       _UnitIRQ.L
00003A2E  4E92      6703          jsr       (A2)
00003A30  504F      6704          addq.w    #8,A7
                    6705   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00003A32  4878 0018 6706          pea       24
00003A36  4878 3408 6707          pea       _Check.L
00003A3A  4E92      6708          jsr       (A2)
00003A3C  504F      6709          addq.w    #8,A7
                    6710   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00003A3E  4EB8 0BA6 6711          jsr       _FlushKeyboard
                    6712   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00003A42  4239 0040 6713          clr.b     4194314
00003A46  000A      
                    6714   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    6715   ; if (((char)(PortB & 0x02)) == (char)(0x02))    {
00003A48  1039 0040 6716          move.b    4194306,D0
00003A4C  0002      
00003A4E  C03C 0002 6717          and.b     #2,D0
00003A52  0C00 0002 6718          cmp.b     #2,D0
00003A56  6628      6719          bne.s     main_7
                    6720   ; LoadFromFlashChip();
00003A58  4EB8 138A 6721          jsr       _LoadFromFlashChip
                    6722   ; printf("\r\nRunning.....") ;
00003A5C  4879 0000 6723          pea       @m68kde~1_196.L
00003A60  678C      
00003A62  4E93      6724          jsr       (A3)
00003A64  584F      6725          addq.w    #4,A7
                    6726   ; Oline1("Running.....") ;
00003A66  4879 0000 6727          pea       @m68kde~1_197.L
00003A6A  679C      
00003A6C  4EB8 0A02 6728          jsr       _Oline1
00003A70  584F      6729          addq.w    #4,A7
                    6730   ; GoFlag = 1;
00003A72  23FC 0000 6731          move.l    #1,_GoFlag.L
00003A76  0001 0B00 
00003A7A  00DC      
                    6732   ; go() ;
00003A7C  4EB8 08B8 6733          jsr       _go
                    6734   main_7:
                    6735   ; }
                    6736   ; // otherwise start the debug monitor
                    6737   ; Oline0(BugMessage) ;
00003A80  2F03      6738          move.l    D3,-(A7)
00003A82  4EB8 09D4 6739          jsr       _Oline0
00003A86  584F      6740          addq.w    #4,A7
                    6741   ; Oline1("By: PJ Davies") ;
00003A88  4879 0000 6742          pea       @m68kde~1_198.L
00003A8C  67AA      
00003A8E  4EB8 0A02 6743          jsr       _Oline1
00003A92  584F      6744          addq.w    #4,A7
                    6745   ; printf("\r\n%s", BugMessage) ;
00003A94  2F03      6746          move.l    D3,-(A7)
00003A96  4879 0000 6747          pea       @m68kde~1_199.L
00003A9A  67B8      
00003A9C  4E93      6748          jsr       (A3)
00003A9E  504F      6749          addq.w    #8,A7
                    6750   ; printf("\r\n%s", CopyrightMessage) ;
00003AA0  2F2E FFFC 6751          move.l    -4(A6),-(A7)
00003AA4  4879 0000 6752          pea       @m68kde~1_199.L
00003AA8  67B8      
00003AAA  4E93      6753          jsr       (A3)
00003AAC  504F      6754          addq.w    #8,A7
                    6755   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00003AAE  4879 0000 6756          pea       @m68kde~1_200.L
00003AB2  67BE      
00003AB4  4E93      6757          jsr       (A3)
00003AB6  584F      6758          addq.w    #4,A7
                    6759   ; menu();
00003AB8  4EB8 3072 6760          jsr       _menu
00003ABC  4CDF 0C0C 6761          movem.l   (A7)+,D2/D3/A2/A3
00003AC0  4E5E      6762          unlk      A6
00003AC2  4E75      6763          rts
                    6764   ; }
                    6765   _strcpy:
00003AC4  206F 0004 6766          move.l    (4,A7),A0
00003AC8  226F 0008 6767          move.l    (8,A7),A1
00003ACC  2008      6768          move.l    A0,D0
                    6769   strcpy_1:
00003ACE  10D9      6770          move.b    (A1)+,(A0)+
00003AD0  66FC      6771          bne       strcpy_1
00003AD2  4E75      6772          rts
                    6773   ULDIV:
00003AD4  4E56 0000 6774          link    A6,#0
00003AD8  48E7 C000 6775          movem.l D0/D1,-(A7)
00003ADC  222E 0008 6776          move.l  8(A6),D1
00003AE0  202E 000C 6777          move.l  12(A6),D0
00003AE4  6036      6778          bra.s   ldiv_3
                    6779   LDIV:
00003AE6  4E56 0000 6780          link    A6,#0
00003AEA  48E7 C000 6781          movem.l D0/D1,-(A7)
00003AEE  222E 0008 6782          move.l  8(A6),D1
00003AF2  202E 000C 6783          move.l  12(A6),D0
00003AF6  4A80      6784          tst.l   D0
00003AF8  6A0E      6785          bpl.s   ldiv_1
00003AFA  4480      6786          neg.l   D0
00003AFC  4A81      6787          tst.l   D1
00003AFE  6A14      6788          bpl.s   ldiv_2
00003B00  4481      6789          neg.l   D1
00003B02  612A      6790          bsr.s   dodiv
00003B04  4481      6791          neg.l   D1
00003B06  6016      6792          bra.s   ldiv_4
                    6793   ldiv_1:
00003B08  4A81      6794          tst.l   D1
00003B0A  6A10      6795          bpl.s   ldiv_3
00003B0C  4481      6796          neg.l   D1
00003B0E  611E      6797          bsr.s   dodiv
00003B10  4480      6798          neg.l   D0
00003B12  600A      6799          bra.s   ldiv_4
                    6800   ldiv_2:
00003B14  6118      6801          bsr.s   dodiv
00003B16  4480      6802          neg.l   D0
00003B18  4481      6803          neg.l   D1
00003B1A  6002      6804          bra.s   ldiv_4
                    6805   ldiv_3:
00003B1C  6110      6806          bsr.s   dodiv
                    6807   ldiv_4:
00003B1E  2D40 0008 6808          move.l  D0,8(A6)
00003B22  2D41 000C 6809          move.l  D1,12(A6)
00003B26  4CDF 0003 6810          movem.l (A7)+,D0/D1
00003B2A  4E5E      6811          unlk    A6
00003B2C  4E75      6812          rts
                    6813   dodiv:
00003B2E  0C81 0000 6814          cmpi.l  #$FFFF,D1
00003B32  FFFF      
00003B34  6236      6815          bhi.s   dodiv_2
00003B36  0C80 0000 6816          cmpi.l  #$FFFF,D0
00003B3A  FFFF      
00003B3C  6210      6817          bhi.s   dodiv_1
00003B3E  80C1      6818          divu    D1,D0
00003B40  2200      6819          move.l  D0,D1
00003B42  4241      6820          clr.w   D1
00003B44  4841      6821          swap    D1
00003B46  0280 0000 6822          andi.l  #$FFFF,D0
00003B4A  FFFF      
00003B4C  4E75      6823          rts
                    6824   dodiv_1:
00003B4E  48A7 A000 6825          movem.w D0/D2,-(A7)
00003B52  4240      6826          clr.w   D0
00003B54  4840      6827          swap    D0
00003B56  80C1      6828          divu    D1,D0
00003B58  3400      6829          move.w  D0,D2
00003B5A  301F      6830          move.w  (A7)+,D0
00003B5C  80C1      6831          divu    D1,D0
00003B5E  4840      6832          swap    D0
00003B60  4281      6833          clr.l   D1
00003B62  3200      6834          move.w  D0,D1
00003B64  3002      6835          move.w  D2,D0
00003B66  4840      6836          swap    D0
00003B68  341F      6837          move.w  (A7)+,D2
00003B6A  4E75      6838          rts
                    6839   dodiv_2:
00003B6C  48E7 3800 6840          movem.l D2/D3/D4,-(A7)
00003B70  2401      6841          move.l  D1,D2
00003B72  4242      6842          clr.w   D2
00003B74  4842      6843          swap    D2
00003B76  5282      6844          addq.l  #1,D2
00003B78  2600      6845          move.l  D0,D3
00003B7A  2801      6846          move.l  D1,D4
00003B7C  2202      6847          move.l  D2,D1
00003B7E  61CE      6848          bsr.s   dodiv_1
00003B80  2204      6849          move.l  D4,D1
00003B82  82C2      6850          divu    D2,D1
00003B84  80C1      6851          divu    D1,D0
00003B86  0280 0000 6852          andi.l  #$FFFF,D0
00003B8A  FFFF      
                    6853   dodiv_3:
00003B8C  2204      6854          move.l  D4,D1
00003B8E  2404      6855          move.l  D4,D2
00003B90  4842      6856          swap    D2
00003B92  C2C0      6857          mulu    D0,D1
00003B94  C4C0      6858          mulu    D0,D2
00003B96  4842      6859          swap    D2
00003B98  D282      6860          add.l   D2,D1
00003B9A  9283      6861          sub.l   D3,D1
00003B9C  620A      6862          bhi.s   dodiv_4
00003B9E  4481      6863          neg.l   D1
00003BA0  B881      6864          cmp.l   D1,D4
00003BA2  6208      6865          bhi.s   dodiv_5
00003BA4  5280      6866          addq.l  #1,D0
00003BA6  60E4      6867          bra.s   dodiv_3
                    6868   dodiv_4:
00003BA8  5380      6869          subq.l  #1,D0
00003BAA  60E0      6870          bra.s   dodiv_3
                    6871   dodiv_5:
00003BAC  4CDF 001C 6872          movem.l (A7)+,D2/D3/D4
00003BB0  4E75      6873          rts
                    6874   _putch:
00003BB2  4E56 0000 6875          link      A6,#0
00003BB6  48E7 2000 6876          movem.l   D2,-(A7)
00003BBA  242E 0008 6877          move.l    8(A6),D2
00003BBE  0C82 0000 6878          cmp.l     #10,D2
00003BC2  000A      
00003BC4  660A      6879          bne.s     putch_1
00003BC6  4878 000D 6880          pea       13
00003BCA  6100 CF70 6881          bsr       __putch
00003BCE  584F      6882          addq.w    #4,A7
                    6883   putch_1:
00003BD0  2F02      6884          move.l    D2,-(A7)
00003BD2  6100 CF68 6885          bsr       __putch
00003BD6  584F      6886          addq.w    #4,A7
00003BD8  2002      6887          move.l    D2,D0
00003BDA  4CDF 0004 6888          movem.l   (A7)+,D2
00003BDE  4E5E      6889          unlk      A6
00003BE0  4E75      6890          rts
                    6891   _getch:
00003BE2  48E7 2000 6892          movem.l   D2,-(A7)
00003BE6  2439 0B00 6893          move.l    __ungetbuf,D2
00003BEA  00C0      
00003BEC  2039 0B00 6894          move.l    __ungetbuf,D0
00003BF0  00C0      
00003BF2  0C80 FFFF 6895          cmp.l     #-1,D0
00003BF6  FFFF      
00003BF8  670C      6896          beq.s     getch_1
00003BFA  23FC FFFF 6897          move.l    #-1,__ungetbuf
00003BFE  FFFF 0B00 
00003C02  00C0      
00003C04  6010      6898          bra.s     getch_3
                    6899   getch_1:
00003C06  6100 CF60 6900          bsr       __getch
00003C0A  2400      6901          move.l    D0,D2
00003C0C  0C80 0000 6902          cmp.l     #13,D0
00003C10  000D      
00003C12  6602      6903          bne.s     getch_3
00003C14  740A      6904          moveq     #10,D2
                    6905   getch_3:
00003C16  2002      6906          move.l    D2,D0
00003C18  4CDF 0004 6907          movem.l   (A7)+,D2
00003C1C  4E75      6908          rts
                    6909   _tolower:
00003C1E  4E56 0000 6910          link      A6,#0
00003C22  48E7 2000 6911          movem.l   D2,-(A7)
00003C26  242E 0008 6912          move.l    8(A6),D2
00003C2A  0C82 0000 6913          cmp.l     #65,D2
00003C2E  0041      
00003C30  6D0E      6914          blt.s     tolower_1
00003C32  0C82 0000 6915          cmp.l     #90,D2
00003C36  005A      
00003C38  6E06      6916          bgt.s     tolower_1
00003C3A  84BC 0000 6917          or.l      #32,D2
00003C3E  0020      
                    6918   tolower_1:
00003C40  2002      6919          move.l    D2,D0
00003C42  4CDF 0004 6920          movem.l   (A7)+,D2
00003C46  4E5E      6921          unlk      A6
00003C48  4E75      6922          rts
                    6923   _sprintf:
00003C4A  4E56 FFFC 6924          link      A6,#-4
00003C4E  48E7 2000 6925          movem.l   D2,-(A7)
00003C52  41EE 000C 6926          lea       12(A6),A0
00003C56  5848      6927          addq.w    #4,A0
00003C58  2408      6928          move.l    A0,D2
00003C5A  2F02      6929          move.l    D2,-(A7)
00003C5C  2F2E 000C 6930          move.l    12(A6),-(A7)
00003C60  2F2E 0008 6931          move.l    8(A6),-(A7)
00003C64  6100 09EC 6932          bsr       _vsprintf
00003C68  DEFC 000C 6933          add.w     #12,A7
00003C6C  2D40 FFFC 6934          move.l    D0,-4(A6)
00003C70  4282      6935          clr.l     D2
00003C72  202E FFFC 6936          move.l    -4(A6),D0
00003C76  4CDF 0004 6937          movem.l   (A7)+,D2
00003C7A  4E5E      6938          unlk      A6
00003C7C  4E75      6939          rts
                    6940   _memset:
00003C7E  206F 0004 6941          move.l    (4,A7),A0
00003C82  202F 0008 6942          move.l    (8,A7),D0
00003C86  222F 000C 6943          move.l    (12,A7),D1
00003C8A  2248      6944          move.l    A0,A1	
                    6945   memset_1:
00003C8C  12C0      6946          move.b    D0,(A1)+
00003C8E  5341      6947          subq      #1,D1
00003C90  66FA      6948          bne       memset_1
00003C92  2008      6949          move.l    A0,D0
00003C94  4E75      6950          rts
                    6951   _strcat:
00003C96  206F 0004 6952          move.l    (4,A7),A0	
00003C9A  226F 0008 6953          move.l    (8,A7),A1	
00003C9E  2008      6954          move.l    A0,D0		
                    6955   strcat_0:
00003CA0  4A18      6956          tst.b     (A0)+
00003CA2  66FC      6957          bne       strcat_0
00003CA4  5348      6958          subq      #1,A0
                    6959   strcat_1:
00003CA6  10D9      6960          move.b    (A1)+,(A0)+
00003CA8  66FC      6961          bne       strcat_1
00003CAA  4E75      6962          rts
                    6963   _toupper:
00003CAC  4E56 0000 6964          link      A6,#0
00003CB0  48E7 2000 6965          movem.l   D2,-(A7)
00003CB4  242E 0008 6966          move.l    8(A6),D2
00003CB8  0C82 0000 6967          cmp.l     #97,D2
00003CBC  0061      
00003CBE  6D0E      6968          blt.s     toupper_1
00003CC0  0C82 0000 6969          cmp.l     #122,D2
00003CC4  007A      
00003CC6  6E06      6970          bgt.s     toupper_1
00003CC8  C4BC 0000 6971          and.l     #95,D2
00003CCC  005F      
                    6972   toupper_1:
00003CCE  2002      6973          move.l    D2,D0
00003CD0  4CDF 0004 6974          movem.l   (A7)+,D2
00003CD4  4E5E      6975          unlk      A6
00003CD6  4E75      6976          rts
                    6977   @vsscanf_scanread:
00003CD8  4E56 FFFC 6978          link      A6,#-4
00003CDC  48E7 0020 6979          movem.l   A2,-(A7)
00003CE0  45F9 0000 6980          lea       @vsscanf_bufx,A2
00003CE4  6806      
00003CE6  4AAE 0008 6981          tst.l     8(A6)
00003CEA  6722      6982          beq.s     @vsscanf_scanread_1
00003CEC  206E 0008 6983          move.l    8(A6),A0
00003CF0  58AE 0008 6984          addq.l    #4,8(A6)
00003CF4  2050      6985          move.l    (A0),A0
00003CF6  1010      6986          move.b    (A0),D0
00003CF8  4880      6987          ext.w     D0
00003CFA  48C0      6988          ext.l     D0
00003CFC  2D40 FFFC 6989          move.l    D0,-4(A6)
00003D00  6706      6990          beq.s     @vsscanf_scanread_3
00003D02  202E FFFC 6991          move.l    -4(A6),D0
00003D06  6002      6992          bra.s     @vsscanf_scanread_4
                    6993   @vsscanf_scanread_3:
00003D08  70FF      6994          moveq     #-1,D0
                    6995   @vsscanf_scanread_4:
00003D0A  6000 0032 6996          bra       @vsscanf_scanread_5
                    6997   @vsscanf_scanread_1:
00003D0E  2052      6998          move.l    (A2),A0
00003D10  1010      6999          move.b    (A0),D0
00003D12  6620      7000          bne.s     @vsscanf_scanread_6
00003D14  4879 0B00 7001          pea       @vsscanf_buf
00003D18  0546      
00003D1A  6100 1038 7002          bsr       _gets
00003D1E  584F      7003          addq.w    #4,A7
00003D20  2480      7004          move.l    D0,(A2)
00003D22  4879 0000 7005          pea       @vsscanf_1
00003D26  680A      
00003D28  4879 0B00 7006          pea       @vsscanf_buf
00003D2C  0546      
00003D2E  6100 FF66 7007          bsr       _strcat
00003D32  504F      7008          addq.w    #8,A7
                    7009   @vsscanf_scanread_6:
00003D34  2052      7010          move.l    (A2),A0
00003D36  5292      7011          addq.l    #1,(A2)
00003D38  1010      7012          move.b    (A0),D0
00003D3A  4880      7013          ext.w     D0
00003D3C  48C0      7014          ext.l     D0
                    7015   @vsscanf_scanread_5:
00003D3E  4CDF 0400 7016          movem.l   (A7)+,A2
00003D42  4E5E      7017          unlk      A6
00003D44  4E75      7018          rts
                    7019   @vsscanf_scanputback:
00003D46  4E56 0000 7020          link      A6,#0
00003D4A  48E7 3000 7021          movem.l   D2/D3,-(A7)
00003D4E  242E 000C 7022          move.l    12(A6),D2
00003D52  262E 0008 7023          move.l    8(A6),D3
00003D56  6718      7024          beq.s     @vsscanf_scanputback_1
00003D58  0C82 FFFF 7025          cmp.l     #-1,D2
00003D5C  FFFF      
00003D5E  670A      7026          beq.s     @vsscanf_scanputback_3
00003D60  5983      7027          subq.l    #4,D3
00003D62  2043      7028          move.l    D3,A0
00003D64  2050      7029          move.l    (A0),A0
00003D66  1082      7030          move.b    D2,(A0)
00003D68  6004      7031          bra.s     @vsscanf_scanputback_4
                    7032   @vsscanf_scanputback_3:
00003D6A  2043      7033          move.l    D3,A0
00003D6C  5390      7034          subq.l    #1,(A0)
                    7035   @vsscanf_scanputback_4:
00003D6E  602E      7036          bra.s     @vsscanf_scanputback_6
                    7037   @vsscanf_scanputback_1:
00003D70  41F9 0B00 7038          lea       @vsscanf_buf,A0
00003D74  0546      
00003D76  2008      7039          move.l    A0,D0
00003D78  B0B9 0000 7040          cmp.l     @vsscanf_bufx,D0
00003D7C  6806      
00003D7E  6610      7041          bne.s     @vsscanf_scanputback_5
00003D80  4239 0B00 7042          clr.b     @vsscanf_buf
00003D84  0546      
00003D86  2F02      7043          move.l    D2,-(A7)
00003D88  6100 103C 7044          bsr       _ungetch
00003D8C  584F      7045          addq.w    #4,A7
00003D8E  600E      7046          bra.s     @vsscanf_scanputback_6
                    7047   @vsscanf_scanputback_5:
00003D90  53B9 0000 7048          subq.l    #1,@vsscanf_bufx
00003D94  6806      
00003D96  2079 0000 7049          move.l    @vsscanf_bufx,A0
00003D9A  6806      
00003D9C  1082      7050          move.b    D2,(A0)
                    7051   @vsscanf_scanputback_6:
00003D9E  2002      7052          move.l    D2,D0
00003DA0  4CDF 000C 7053          movem.l   (A7)+,D2/D3
00003DA4  4E5E      7054          unlk      A6
00003DA6  4E75      7055          rts
                    7056   @vsscanf_scanspace:
00003DA8  4E56 0000 7057          link      A6,#0
00003DAC  48E7 2000 7058          movem.l   D2,-(A7)
                    7059   @vsscanf_scanspace_1:
00003DB0  2F2E 0008 7060          move.l    8(A6),-(A7)
00003DB4  6100 FF22 7061          bsr       @vsscanf_scanread
00003DB8  584F      7062          addq.w    #4,A7
00003DBA  2400      7063          move.l    D0,D2
00003DBC  206E 000C 7064          move.l    12(A6),A0
00003DC0  5290      7065          addq.l    #1,(A0)
00003DC2  2042      7066          move.l    D2,A0
00003DC4  43F9 0000 7067          lea       __ctype,A1
00003DC8  680C      
00003DCA  1030 9801 7068          move.b    1(A0,A1.L),D0
00003DCE  C03C 0010 7069          and.b     #16,D0
00003DD2  66DC      7070          bne       @vsscanf_scanspace_1
00003DD4  2002      7071          move.l    D2,D0
00003DD6  4CDF 0004 7072          movem.l   (A7)+,D2
00003DDA  4E5E      7073          unlk      A6
00003DDC  4E75      7074          rts
                    7075   @vsscanf_scanselect:
00003DDE  4E56 0000 7076          link      A6,#0
00003DE2  48E7 3F20 7077          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00003DE6  262E 000C 7078          move.l    12(A6),D3
00003DEA  2C2E 0018 7079          move.l    24(A6),D6
00003DEE  2E2E 0014 7080          move.l    20(A6),D7
00003DF2  2043      7081          move.l    D3,A0
00003DF4  1010      7082          move.b    (A0),D0
00003DF6  4880      7083          ext.w     D0
00003DF8  48C0      7084          ext.l     D0
00003DFA  0C80 0000 7085          cmp.l     #94,D0
00003DFE  005E      
00003E00  6608      7086          bne.s     @vsscanf_scanselect_1
00003E02  347C 0001 7087          move.w    #1,A2
00003E06  5283      7088          addq.l    #1,D3
00003E08  6004      7089          bra.s     @vsscanf_scanselect_2
                    7090   @vsscanf_scanselect_1:
00003E0A  347C 0000 7091          move.w    #0,A2
                    7092   @vsscanf_scanselect_2:
00003E0E  202E 0010 7093          move.l    16(A6),D0
00003E12  53AE 0010 7094          subq.l    #1,16(A6)
00003E16  4A80      7095          tst.l     D0
00003E18  6700 0108 7096          beq       @vsscanf_scanselect_5
00003E1C  2F2E 0008 7097          move.l    8(A6),-(A7)
00003E20  6100 FEB6 7098          bsr       @vsscanf_scanread
00003E24  584F      7099          addq.w    #4,A7
00003E26  2800      7100          move.l    D0,D4
00003E28  0C84 FFFF 7101          cmp.l     #-1,D4
00003E2C  FFFF      
00003E2E  6604      7102          bne.s     @vsscanf_scanselect_6
00003E30  6000 00F0 7103          bra       @vsscanf_scanselect_5
                    7104   @vsscanf_scanselect_6:
00003E34  206E 001C 7105          move.l    28(A6),A0
00003E38  5290      7106          addq.l    #1,(A0)
00003E3A  4285      7107          clr.l     D5
00003E3C  4282      7108          clr.l     D2
                    7109   @vsscanf_scanselect_8:
00003E3E  2043      7110          move.l    D3,A0
00003E40  1030 2800 7111          move.b    0(A0,D2.L),D0
00003E44  4880      7112          ext.w     D0
00003E46  48C0      7113          ext.l     D0
00003E48  0C80 0000 7114          cmp.l     #93,D0
00003E4C  005D      
00003E4E  6700 008E 7115          beq       @vsscanf_scanselect_10
00003E52  4A82      7116          tst.l     D2
00003E54  6716      7117          beq.s     @vsscanf_scanselect_11
00003E56  2043      7118          move.l    D3,A0
00003E58  1030 2800 7119          move.b    0(A0,D2.L),D0
00003E5C  4880      7120          ext.w     D0
00003E5E  48C0      7121          ext.l     D0
00003E60  0C80 0000 7122          cmp.l     #93,D0
00003E64  005D      
00003E66  6604      7123          bne.s     @vsscanf_scanselect_11
00003E68  6000 0074 7124          bra       @vsscanf_scanselect_10
                    7125   @vsscanf_scanselect_11:
00003E6C  4A82      7126          tst.l     D2
00003E6E  6700 0058 7127          beq       @vsscanf_scanselect_15
00003E72  2043      7128          move.l    D3,A0
00003E74  1030 2800 7129          move.b    0(A0,D2.L),D0
00003E78  4880      7130          ext.w     D0
00003E7A  48C0      7131          ext.l     D0
00003E7C  0C80 0000 7132          cmp.l     #45,D0
00003E80  002D      
00003E82  6600 0044 7133          bne       @vsscanf_scanselect_15
00003E86  2043      7134          move.l    D3,A0
00003E88  2002      7135          move.l    D2,D0
00003E8A  5380      7136          subq.l    #1,D0
00003E8C  2243      7137          move.l    D3,A1
00003E8E  2F08      7138          move.l    A0,-(A7)
00003E90  2042      7139          move.l    D2,A0
00003E92  1230 0800 7140          move.b    0(A0,D0.L),D1
00003E96  B230 9801 7141          cmp.b     1(A0,A1.L),D1
00003E9A  6C00 002C 7142          bge       @vsscanf_scanselect_15
00003E9E  205F      7143          move.l    (A7)+,A0
00003EA0  2043      7144          move.l    D3,A0
00003EA2  2002      7145          move.l    D2,D0
00003EA4  5380      7146          subq.l    #1,D0
00003EA6  1030 0800 7147          move.b    0(A0,D0.L),D0
00003EAA  4880      7148          ext.w     D0
00003EAC  48C0      7149          ext.l     D0
00003EAE  B880      7150          cmp.l     D0,D4
00003EB0  6D12      7151          blt.s     @vsscanf_scanselect_17
00003EB2  2043      7152          move.l    D3,A0
00003EB4  2242      7153          move.l    D2,A1
00003EB6  1031 8801 7154          move.b    1(A1,A0.L),D0
00003EBA  4880      7155          ext.w     D0
00003EBC  48C0      7156          ext.l     D0
00003EBE  B880      7157          cmp.l     D0,D4
00003EC0  6E02      7158          bgt.s     @vsscanf_scanselect_17
00003EC2  601A      7159          bra.s     @vsscanf_scanselect_10
                    7160   @vsscanf_scanselect_17:
00003EC4  5282      7161          addq.l    #1,D2
00003EC6  6010      7162          bra.s     @vsscanf_scanselect_19
                    7163   @vsscanf_scanselect_15:
00003EC8  2043      7164          move.l    D3,A0
00003ECA  1030 2800 7165          move.b    0(A0,D2.L),D0
00003ECE  4880      7166          ext.w     D0
00003ED0  48C0      7167          ext.l     D0
00003ED2  B880      7168          cmp.l     D0,D4
00003ED4  6602      7169          bne.s     @vsscanf_scanselect_19
00003ED6  6006      7170          bra.s     @vsscanf_scanselect_10
                    7171   @vsscanf_scanselect_19:
00003ED8  5282      7172          addq.l    #1,D2
00003EDA  6000 FF62 7173          bra       @vsscanf_scanselect_8
                    7174   @vsscanf_scanselect_10:
00003EDE  4A82      7175          tst.l     D2
00003EE0  6712      7176          beq.s     @vsscanf_scanselect_23
00003EE2  2043      7177          move.l    D3,A0
00003EE4  1030 2800 7178          move.b    0(A0,D2.L),D0
00003EE8  4880      7179          ext.w     D0
00003EEA  48C0      7180          ext.l     D0
00003EEC  0C80 0000 7181          cmp.l     #93,D0
00003EF0  005D      
00003EF2  6702      7182          beq.s     @vsscanf_scanselect_21
                    7183   @vsscanf_scanselect_23:
00003EF4  7A01      7184          moveq     #1,D5
                    7185   @vsscanf_scanselect_21:
00003EF6  200A      7186          move.l    A2,D0
00003EF8  6712      7187          beq.s     @vsscanf_scanselect_24
00003EFA  4A85      7188          tst.l     D5
00003EFC  660C      7189          bne.s     @vsscanf_scanselect_26
00003EFE  4A87      7190          tst.l     D7
00003F00  6606      7191          bne.s     @vsscanf_scanselect_28
00003F02  2046      7192          move.l    D6,A0
00003F04  5286      7193          addq.l    #1,D6
00003F06  1084      7194          move.b    D4,(A0)
                    7195   @vsscanf_scanselect_28:
00003F08  6014      7196          bra.s     @vsscanf_scanselect_4
                    7197   @vsscanf_scanselect_26:
00003F0A  6016      7198          bra.s     @vsscanf_scanselect_5
                    7199   @vsscanf_scanselect_24:
00003F0C  4A85      7200          tst.l     D5
00003F0E  670C      7201          beq.s     @vsscanf_scanselect_30
00003F10  4A87      7202          tst.l     D7
00003F12  6606      7203          bne.s     @vsscanf_scanselect_32
00003F14  2046      7204          move.l    D6,A0
00003F16  5286      7205          addq.l    #1,D6
00003F18  1084      7206          move.b    D4,(A0)
                    7207   @vsscanf_scanselect_32:
00003F1A  6002      7208          bra.s     @vsscanf_scanselect_4
                    7209   @vsscanf_scanselect_30:
00003F1C  6004      7210          bra.s     @vsscanf_scanselect_5
                    7211   @vsscanf_scanselect_4:
00003F1E  6000 FEEE 7212          bra       @vsscanf_scanselect_2
                    7213   @vsscanf_scanselect_5:
00003F22  0C84 FFFF 7214          cmp.l     #-1,D4
00003F26  FFFF      
00003F28  6712      7215          beq.s     @vsscanf_scanselect_34
00003F2A  2F04      7216          move.l    D4,-(A7)
00003F2C  2F2E 0008 7217          move.l    8(A6),-(A7)
00003F30  6100 FE14 7218          bsr       @vsscanf_scanputback
00003F34  504F      7219          addq.w    #8,A7
00003F36  206E 001C 7220          move.l    28(A6),A0
00003F3A  5390      7221          subq.l    #1,(A0)
                    7222   @vsscanf_scanselect_34:
00003F3C  4A87      7223          tst.l     D7
00003F3E  6604      7224          bne.s     @vsscanf_scanselect_36
00003F40  2046      7225          move.l    D6,A0
00003F42  4210      7226          clr.b     (A0)
                    7227   @vsscanf_scanselect_36:
00003F44  5283      7228          addq.l    #1,D3
00003F46  2043      7229          move.l    D3,A0
00003F48  1010      7230          move.b    (A0),D0
00003F4A  4880      7231          ext.w     D0
00003F4C  48C0      7232          ext.l     D0
00003F4E  0C80 0000 7233          cmp.l     #93,D0
00003F52  005D      
00003F54  6702      7234          beq.s     @vsscanf_scanselect_40
00003F56  60EC      7235          bra       @vsscanf_scanselect_36
                    7236   @vsscanf_scanselect_40:
00003F58  5283      7237          addq.l    #1,D3
00003F5A  2003      7238          move.l    D3,D0
00003F5C  4CDF 04FC 7239          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003F60  4E5E      7240          unlk      A6
00003F62  4E75      7241          rts
                    7242   _scanflush:
00003F64  41F9 0B00 7243          lea       @vsscanf_buf,A0
00003F68  0546      
00003F6A  23C8 0000 7244          move.l    A0,@vsscanf_bufx
00003F6E  6806      
00003F70  4239 0B00 7245          clr.b     @vsscanf_buf
00003F74  0546      
00003F76  4878 FFFF 7246          pea       -1
00003F7A  6100 0E4A 7247          bsr       _ungetch
00003F7E  584F      7248          addq.w    #4,A7
00003F80  4E75      7249          rts
                    7250   _vsscanf:
00003F82  4E56 FF88 7251          link      A6,#-120
00003F86  48E7 3F3C 7252          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003F8A  47F8 3CD8 7253          lea       @vsscanf_scanread,A3
00003F8E  4AAE 0008 7254          tst.l     8(A6)
00003F92  6706      7255          beq.s     vsscanf_1
00003F94  41EE 0008 7256          lea       8(A6),A0
00003F98  6004      7257          bra.s     vsscanf_2
                    7258   vsscanf_1:
00003F9A  4280      7259          clr.l     D0
00003F9C  2040      7260          move.l    D0,A0
                    7261   vsscanf_2:
00003F9E  2A08      7262          move.l    A0,D5
00003FA0  42AE FFE4 7263          clr.l     -28(A6)
00003FA4  4284      7264          clr.l     D4
                    7265   vsscanf_3:
00003FA6  206E 000C 7266          move.l    12(A6),A0
00003FAA  52AE 000C 7267          addq.l    #1,12(A6)
00003FAE  1010      7268          move.b    (A0),D0
00003FB0  4880      7269          ext.w     D0
00003FB2  48C0      7270          ext.l     D0
00003FB4  2600      7271          move.l    D0,D3
00003FB6  6700 05AC 7272          beq       vsscanf_5
00003FBA  4286      7273          clr.l     D6
00003FBC  387C 0000 7274          move.w    #0,A4
00003FC0  0C83 0000 7275          cmp.l     #32,D3
00003FC4  0020      
00003FC6  6712      7276          beq.s     vsscanf_8
00003FC8  0C83 0000 7277          cmp.l     #9,D3
00003FCC  0009      
00003FCE  670A      7278          beq.s     vsscanf_8
00003FD0  0C83 0000 7279          cmp.l     #10,D3
00003FD4  000A      
00003FD6  6600 0048 7280          bne       vsscanf_6
                    7281   vsscanf_8:
00003FDA  2F05      7282          move.l    D5,-(A7)
00003FDC  4E93      7283          jsr       (A3)
00003FDE  584F      7284          addq.w    #4,A7
00003FE0  2400      7285          move.l    D0,D2
00003FE2  52AE FFE4 7286          addq.l    #1,-28(A6)
00003FE6  0C82 FFFF 7287          cmp.l     #-1,D2
00003FEA  FFFF      
00003FEC  660E      7288          bne.s     vsscanf_11
00003FEE  4A84      7289          tst.l     D4
00003FF0  6704      7290          beq.s     vsscanf_13
00003FF2  2004      7291          move.l    D4,D0
00003FF4  6002      7292          bra.s     vsscanf_14
                    7293   vsscanf_13:
00003FF6  70FF      7294          moveq     #-1,D0
                    7295   vsscanf_14:
00003FF8  6000 056C 7296          bra       vsscanf_15
                    7297   vsscanf_11:
00003FFC  2042      7298          move.l    D2,A0
00003FFE  43F9 0000 7299          lea       __ctype,A1
00004002  680C      
00004004  1030 9801 7300          move.b    1(A0,A1.L),D0
00004008  C03C 0010 7301          and.b     #16,D0
0000400C  66CC      7302          bne       vsscanf_8
0000400E  53AE FFE4 7303          subq.l    #1,-28(A6)
00004012  2F02      7304          move.l    D2,-(A7)
00004014  2F05      7305          move.l    D5,-(A7)
00004016  6100 FD2E 7306          bsr       @vsscanf_scanputback
0000401A  504F      7307          addq.w    #8,A7
0000401C  6000 0542 7308          bra       vsscanf_139
                    7309   vsscanf_6:
00004020  0C83 0000 7310          cmp.l     #37,D3
00004024  0025      
00004026  6600 0502 7311          bne       vsscanf_127
0000402A  206E 000C 7312          move.l    12(A6),A0
0000402E  52AE 000C 7313          addq.l    #1,12(A6)
00004032  1010      7314          move.b    (A0),D0
00004034  4880      7315          ext.w     D0
00004036  48C0      7316          ext.l     D0
00004038  2600      7317          move.l    D0,D3
0000403A  42AE FFEC 7318          clr.l     -20(A6)
0000403E  4286      7319          clr.l     D6
00004040  42AE FFE8 7320          clr.l     -24(A6)
00004044  347C 7FFF 7321          move.w    #32767,A2
00004048  0C83 0000 7322          cmp.l     #42,D3
0000404C  002A      
0000404E  6612      7323          bne.s     vsscanf_18
00004050  7C01      7324          moveq     #1,D6
00004052  206E 000C 7325          move.l    12(A6),A0
00004056  52AE 000C 7326          addq.l    #1,12(A6)
0000405A  1010      7327          move.b    (A0),D0
0000405C  4880      7328          ext.w     D0
0000405E  48C0      7329          ext.l     D0
00004060  2600      7330          move.l    D0,D3
                    7331   vsscanf_18:
00004062  2043      7332          move.l    D3,A0
00004064  43F9 0000 7333          lea       __ctype,A1
00004068  680C      
0000406A  1030 9801 7334          move.b    1(A0,A1.L),D0
0000406E  C03C 0004 7335          and.b     #4,D0
00004072  6700 004E 7336          beq       vsscanf_24
00004076  2003      7337          move.l    D3,D0
00004078  0480 0000 7338          sub.l     #48,D0
0000407C  0030      
0000407E  2440      7339          move.l    D0,A2
                    7340   vsscanf_22:
00004080  206E 000C 7341          move.l    12(A6),A0
00004084  52AE 000C 7342          addq.l    #1,12(A6)
00004088  1010      7343          move.b    (A0),D0
0000408A  4880      7344          ext.w     D0
0000408C  48C0      7345          ext.l     D0
0000408E  2600      7346          move.l    D0,D3
00004090  2040      7347          move.l    D0,A0
00004092  43F9 0000 7348          lea       __ctype,A1
00004096  680C      
00004098  1030 9801 7349          move.b    1(A0,A1.L),D0
0000409C  C0BC 0000 7350          and.l     #255,D0
000040A0  00FF      
000040A2  C0BC 0000 7351          and.l     #4,D0
000040A6  0004      
000040A8  6718      7352          beq.s     vsscanf_24
000040AA  70D0      7353          moveq     #-48,D0
000040AC  2F0A      7354          move.l    A2,-(A7)
000040AE  4878 000A 7355          pea       10
000040B2  6100 0C12 7356          bsr       LMUL
000040B6  2217      7357          move.l    (A7),D1
000040B8  504F      7358          addq.w    #8,A7
000040BA  D283      7359          add.l     D3,D1
000040BC  D081      7360          add.l     D1,D0
000040BE  2440      7361          move.l    D0,A2
000040C0  60BE      7362          bra       vsscanf_22
                    7363   vsscanf_24:
000040C2  0C83 0000 7364          cmp.l     #108,D3
000040C6  006C      
000040C8  6708      7365          beq.s     vsscanf_27
000040CA  0C83 0000 7366          cmp.l     #76,D3
000040CE  004C      
000040D0  661A      7367          bne.s     vsscanf_25
                    7368   vsscanf_27:
000040D2  2D7C 0000 7369          move.l    #1,-24(A6)
000040D6  0001 FFE8 
000040DA  206E 000C 7370          move.l    12(A6),A0
000040DE  52AE 000C 7371          addq.l    #1,12(A6)
000040E2  1010      7372          move.b    (A0),D0
000040E4  4880      7373          ext.w     D0
000040E6  48C0      7374          ext.l     D0
000040E8  2600      7375          move.l    D0,D3
000040EA  6020      7376          bra.s     vsscanf_28
                    7377   vsscanf_25:
000040EC  0C83 0000 7378          cmp.l     #104,D3
000040F0  0068      
000040F2  6618      7379          bne.s     vsscanf_28
000040F4  2D7C 0000 7380          move.l    #1,-20(A6)
000040F8  0001 FFEC 
000040FC  206E 000C 7381          move.l    12(A6),A0
00004100  52AE 000C 7382          addq.l    #1,12(A6)
00004104  1010      7383          move.b    (A0),D0
00004106  4880      7384          ext.w     D0
00004108  48C0      7385          ext.l     D0
0000410A  2600      7386          move.l    D0,D3
                    7387   vsscanf_28:
0000410C  0C83 0000 7388          cmp.l     #91,D3
00004110  005B      
00004112  6600 0036 7389          bne       vsscanf_30
00004116  4A86      7390          tst.l     D6
00004118  660A      7391          bne.s     vsscanf_32
0000411A  206E 0010 7392          move.l    16(A6),A0
0000411E  58AE 0010 7393          addq.l    #4,16(A6)
00004122  2E10      7394          move.l    (A0),D7
                    7395   vsscanf_32:
00004124  486E FFE4 7396          pea       -28(A6)
00004128  2F07      7397          move.l    D7,-(A7)
0000412A  2F06      7398          move.l    D6,-(A7)
0000412C  2F0A      7399          move.l    A2,-(A7)
0000412E  2F2E 000C 7400          move.l    12(A6),-(A7)
00004132  2F05      7401          move.l    D5,-(A7)
00004134  6100 FCA8 7402          bsr       @vsscanf_scanselect
00004138  DEFC 0018 7403          add.w     #24,A7
0000413C  2D40 000C 7404          move.l    D0,12(A6)
00004140  4A86      7405          tst.l     D6
00004142  6602      7406          bne.s     vsscanf_34
00004144  5284      7407          addq.l    #1,D4
                    7408   vsscanf_34:
00004146  6000 0418 7409          bra       vsscanf_139
                    7410   vsscanf_30:
0000414A  0C83 0000 7411          cmp.l     #110,D3
0000414E  006E      
00004150  661A      7412          bne.s     vsscanf_36
00004152  4A86      7413          tst.l     D6
00004154  6612      7414          bne.s     vsscanf_38
00004156  206E 0010 7415          move.l    16(A6),A0
0000415A  58AE 0010 7416          addq.l    #4,16(A6)
0000415E  2E10      7417          move.l    (A0),D7
00004160  2047      7418          move.l    D7,A0
00004162  20AE FFE4 7419          move.l    -28(A6),(A0)
00004166  5284      7420          addq.l    #1,D4
                    7421   vsscanf_38:
00004168  6000 03F6 7422          bra       vsscanf_139
                    7423   vsscanf_36:
0000416C  0C83 0000 7424          cmp.l     #115,D3
00004170  0073      
00004172  6600 00AC 7425          bne       vsscanf_40
00004176  486E FFE4 7426          pea       -28(A6)
0000417A  2F05      7427          move.l    D5,-(A7)
0000417C  6100 FC2A 7428          bsr       @vsscanf_scanspace
00004180  504F      7429          addq.w    #8,A7
00004182  2400      7430          move.l    D0,D2
00004184  4A86      7431          tst.l     D6
00004186  660A      7432          bne.s     vsscanf_42
00004188  206E 0010 7433          move.l    16(A6),A0
0000418C  58AE 0010 7434          addq.l    #4,16(A6)
00004190  2E10      7435          move.l    (A0),D7
                    7436   vsscanf_42:
00004192  52AE FFE4 7437          addq.l    #1,-28(A6)
                    7438   vsscanf_44:
00004196  200A      7439          move.l    A2,D0
00004198  534A      7440          subq.w    #1,A2
0000419A  4A80      7441          tst.l     D0
0000419C  6700 0038 7442          beq       vsscanf_46
000041A0  2042      7443          move.l    D2,A0
000041A2  43F9 0000 7444          lea       __ctype,A1
000041A6  680C      
000041A8  1030 9801 7445          move.b    1(A0,A1.L),D0
000041AC  C03C 0010 7446          and.b     #16,D0
000041B0  6624      7447          bne.s     vsscanf_46
000041B2  0C82 FFFF 7448          cmp.l     #-1,D2
000041B6  FFFF      
000041B8  671C      7449          beq.s     vsscanf_46
000041BA  387C 0001 7450          move.w    #1,A4
000041BE  4A86      7451          tst.l     D6
000041C0  6606      7452          bne.s     vsscanf_47
000041C2  2047      7453          move.l    D7,A0
000041C4  5287      7454          addq.l    #1,D7
000041C6  1082      7455          move.b    D2,(A0)
                    7456   vsscanf_47:
000041C8  2F05      7457          move.l    D5,-(A7)
000041CA  4E93      7458          jsr       (A3)
000041CC  584F      7459          addq.w    #4,A7
000041CE  2400      7460          move.l    D0,D2
000041D0  52AE FFE4 7461          addq.l    #1,-28(A6)
000041D4  60C0      7462          bra       vsscanf_44
                    7463   vsscanf_46:
000041D6  4A86      7464          tst.l     D6
000041D8  660A      7465          bne.s     vsscanf_51
000041DA  2047      7466          move.l    D7,A0
000041DC  4210      7467          clr.b     (A0)
000041DE  200C      7468          move.l    A4,D0
000041E0  6702      7469          beq.s     vsscanf_51
000041E2  5284      7470          addq.l    #1,D4
                    7471   vsscanf_51:
000041E4  0C82 FFFF 7472          cmp.l     #-1,D2
000041E8  FFFF      
000041EA  6708      7473          beq.s     vsscanf_55
000041EC  4A86      7474          tst.l     D6
000041EE  661E      7475          bne.s     vsscanf_53
000041F0  200C      7476          move.l    A4,D0
000041F2  661A      7477          bne.s     vsscanf_53
                    7478   vsscanf_55:
000041F4  4A84      7479          tst.l     D4
000041F6  6704      7480          beq.s     vsscanf_56
000041F8  2004      7481          move.l    D4,D0
000041FA  600E      7482          bra.s     vsscanf_59
                    7483   vsscanf_56:
000041FC  0C82 FFFF 7484          cmp.l     #-1,D2
00004200  FFFF      
00004202  6604      7485          bne.s     vsscanf_58
00004204  70FF      7486          moveq     #-1,D0
00004206  6002      7487          bra.s     vsscanf_59
                    7488   vsscanf_58:
00004208  2004      7489          move.l    D4,D0
                    7490   vsscanf_59:
0000420A  6000 035A 7491          bra       vsscanf_15
                    7492   vsscanf_53:
0000420E  53AE FFE4 7493          subq.l    #1,-28(A6)
00004212  2F02      7494          move.l    D2,-(A7)
00004214  2F05      7495          move.l    D5,-(A7)
00004216  6100 FB2E 7496          bsr       @vsscanf_scanputback
0000421A  504F      7497          addq.w    #8,A7
0000421C  6000 0342 7498          bra       vsscanf_139
                    7499   vsscanf_40:
00004220  0C83 0000 7500          cmp.l     #99,D3
00004224  0063      
00004226  6600 008E 7501          bne       vsscanf_60
0000422A  4A86      7502          tst.l     D6
0000422C  660A      7503          bne.s     vsscanf_62
0000422E  206E 0010 7504          move.l    16(A6),A0
00004232  58AE 0010 7505          addq.l    #4,16(A6)
00004236  2E10      7506          move.l    (A0),D7
                    7507   vsscanf_62:
00004238  2F05      7508          move.l    D5,-(A7)
0000423A  4E93      7509          jsr       (A3)
0000423C  584F      7510          addq.w    #4,A7
0000423E  2400      7511          move.l    D0,D2
00004240  52AE FFE4 7512          addq.l    #1,-28(A6)
00004244  200A      7513          move.l    A2,D0
00004246  0C80 0000 7514          cmp.l     #32767,D0
0000424A  7FFF      
0000424C  6604      7515          bne.s     vsscanf_64
0000424E  347C 0001 7516          move.w    #1,A2
                    7517   vsscanf_64:
00004252  0C82 FFFF 7518          cmp.l     #-1,D2
00004256  FFFF      
00004258  6606      7519          bne.s     vsscanf_66
0000425A  4A86      7520          tst.l     D6
0000425C  6602      7521          bne.s     vsscanf_66
0000425E  5384      7522          subq.l    #1,D4
                    7523   vsscanf_66:
00004260  200A      7524          move.l    A2,D0
00004262  534A      7525          subq.w    #1,A2
00004264  4A80      7526          tst.l     D0
00004266  6720      7527          beq.s     vsscanf_70
00004268  0C82 FFFF 7528          cmp.l     #-1,D2
0000426C  FFFF      
0000426E  6718      7529          beq.s     vsscanf_70
00004270  4A86      7530          tst.l     D6
00004272  6606      7531          bne.s     vsscanf_71
00004274  2047      7532          move.l    D7,A0
00004276  5287      7533          addq.l    #1,D7
00004278  1082      7534          move.b    D2,(A0)
                    7535   vsscanf_71:
0000427A  2F05      7536          move.l    D5,-(A7)
0000427C  4E93      7537          jsr       (A3)
0000427E  584F      7538          addq.w    #4,A7
00004280  2400      7539          move.l    D0,D2
00004282  52AE FFE4 7540          addq.l    #1,-28(A6)
00004286  60D8      7541          bra       vsscanf_66
                    7542   vsscanf_70:
00004288  0C82 FFFF 7543          cmp.l     #-1,D2
0000428C  FFFF      
0000428E  660E      7544          bne.s     vsscanf_73
00004290  4A84      7545          tst.l     D4
00004292  6704      7546          beq.s     vsscanf_75
00004294  2004      7547          move.l    D4,D0
00004296  6002      7548          bra.s     vsscanf_76
                    7549   vsscanf_75:
00004298  70FF      7550          moveq     #-1,D0
                    7551   vsscanf_76:
0000429A  6000 02CA 7552          bra       vsscanf_15
                    7553   vsscanf_73:
0000429E  4A86      7554          tst.l     D6
000042A0  6602      7555          bne.s     vsscanf_77
000042A2  5284      7556          addq.l    #1,D4
                    7557   vsscanf_77:
000042A4  53AE FFE4 7558          subq.l    #1,-28(A6)
000042A8  2F02      7559          move.l    D2,-(A7)
000042AA  2F05      7560          move.l    D5,-(A7)
000042AC  6100 FA98 7561          bsr       @vsscanf_scanputback
000042B0  504F      7562          addq.w    #8,A7
000042B2  6000 02AC 7563          bra       vsscanf_139
                    7564   vsscanf_60:
000042B6  0C83 0000 7565          cmp.l     #105,D3
000042BA  0069      
000042BC  6600 0060 7566          bne       vsscanf_82
000042C0  486E FFE4 7567          pea       -28(A6)
000042C4  2F05      7568          move.l    D5,-(A7)
000042C6  6100 FAE0 7569          bsr       @vsscanf_scanspace
000042CA  504F      7570          addq.w    #8,A7
000042CC  2400      7571          move.l    D0,D2
000042CE  0C82 0000 7572          cmp.l     #48,D2
000042D2  0030      
000042D4  6600 0038 7573          bne       vsscanf_81
000042D8  387C 0001 7574          move.w    #1,A4
000042DC  2F05      7575          move.l    D5,-(A7)
000042DE  4E93      7576          jsr       (A3)
000042E0  584F      7577          addq.w    #4,A7
000042E2  2400      7578          move.l    D0,D2
000042E4  2F02      7579          move.l    D2,-(A7)
000042E6  6100 F936 7580          bsr       _tolower
000042EA  584F      7581          addq.w    #4,A7
000042EC  0C80 0000 7582          cmp.l     #120,D0
000042F0  0078      
000042F2  6604      7583          bne.s     vsscanf_83
000042F4  7678      7584          moveq     #120,D3
000042F6  6010      7585          bra.s     vsscanf_84
                    7586   vsscanf_83:
000042F8  53AE FFE4 7587          subq.l    #1,-28(A6)
000042FC  2F02      7588          move.l    D2,-(A7)
000042FE  2F05      7589          move.l    D5,-(A7)
00004300  6100 FA44 7590          bsr       @vsscanf_scanputback
00004304  504F      7591          addq.w    #8,A7
00004306  766F      7592          moveq     #111,D3
                    7593   vsscanf_84:
00004308  52AE FFE4 7594          addq.l    #1,-28(A6)
0000430C  6010      7595          bra.s     vsscanf_82
                    7596   vsscanf_81:
0000430E  53AE FFE4 7597          subq.l    #1,-28(A6)
00004312  2F02      7598          move.l    D2,-(A7)
00004314  2F05      7599          move.l    D5,-(A7)
00004316  6100 FA2E 7600          bsr       @vsscanf_scanputback
0000431A  504F      7601          addq.w    #8,A7
0000431C  7664      7602          moveq     #100,D3
                    7603   vsscanf_82:
0000431E  0C83 0000 7604          cmp.l     #100,D3
00004322  0064      
00004324  671A      7605          beq.s     vsscanf_87
00004326  0C83 0000 7606          cmp.l     #117,D3
0000432A  0075      
0000432C  6712      7607          beq.s     vsscanf_87
0000432E  0C83 0000 7608          cmp.l     #120,D3
00004332  0078      
00004334  670A      7609          beq.s     vsscanf_87
00004336  0C83 0000 7610          cmp.l     #111,D3
0000433A  006F      
0000433C  6600 01A4 7611          bne       vsscanf_85
                    7612   vsscanf_87:
00004340  486E FFE4 7613          pea       -28(A6)
00004344  2F05      7614          move.l    D5,-(A7)
00004346  6100 FA60 7615          bsr       @vsscanf_scanspace
0000434A  504F      7616          addq.w    #8,A7
0000434C  2400      7617          move.l    D0,D2
0000434E  2D7C 0000 7618          move.l    #10,-4(A6)
00004352  000A FFFC 
00004356  0C83 0000 7619          cmp.l     #120,D3
0000435A  0078      
0000435C  6608      7620          bne.s     vsscanf_88
0000435E  2D7C 0000 7621          move.l    #16,-4(A6)
00004362  0010 FFFC 
                    7622   vsscanf_88:
00004366  0C83 0000 7623          cmp.l     #111,D3
0000436A  006F      
0000436C  6608      7624          bne.s     vsscanf_90
0000436E  2D7C 0000 7625          move.l    #8,-4(A6)
00004372  0008 FFFC 
                    7626   vsscanf_90:
00004376  4A86      7627          tst.l     D6
00004378  660A      7628          bne.s     vsscanf_92
0000437A  206E 0010 7629          move.l    16(A6),A0
0000437E  58AE 0010 7630          addq.l    #4,16(A6)
00004382  2E10      7631          move.l    (A0),D7
                    7632   vsscanf_92:
00004384  42AE FFE0 7633          clr.l     -32(A6)
00004388  52AE FFE4 7634          addq.l    #1,-28(A6)
0000438C  0C83 0000 7635          cmp.l     #117,D3
00004390  0075      
00004392  6720      7636          beq.s     vsscanf_94
00004394  0C82 0000 7637          cmp.l     #45,D2
00004398  002D      
0000439A  6618      7638          bne.s     vsscanf_94
0000439C  2F05      7639          move.l    D5,-(A7)
0000439E  4E93      7640          jsr       (A3)
000043A0  584F      7641          addq.w    #4,A7
000043A2  2400      7642          move.l    D0,D2
000043A4  52AE FFE4 7643          addq.l    #1,-28(A6)
000043A8  2D7C 0000 7644          move.l    #1,-32(A6)
000043AC  0001 FFE0 
000043B0  387C 0001 7645          move.w    #1,A4
                    7646   vsscanf_94:
000043B4  3A7C 0000 7647          move.w    #0,A5
000043B8  0C82 FFFF 7648          cmp.l     #-1,D2
000043BC  FFFF      
000043BE  660E      7649          bne.s     vsscanf_96
000043C0  4A84      7650          tst.l     D4
000043C2  6704      7651          beq.s     vsscanf_98
000043C4  2004      7652          move.l    D4,D0
000043C6  6002      7653          bra.s     vsscanf_99
                    7654   vsscanf_98:
000043C8  70FF      7655          moveq     #-1,D0
                    7656   vsscanf_99:
000043CA  6000 019A 7657          bra       vsscanf_15
                    7658   vsscanf_96:
000043CE  200A      7659          move.l    A2,D0
000043D0  534A      7660          subq.w    #1,A2
000043D2  4A80      7661          tst.l     D0
000043D4  6700 0090 7662          beq       vsscanf_102
000043D8  0C83 0000 7663          cmp.l     #120,D3
000043DC  0078      
000043DE  6620      7664          bne.s     vsscanf_104
000043E0  2F02      7665          move.l    D2,-(A7)
000043E2  6100 F8C8 7666          bsr       _toupper
000043E6  584F      7667          addq.w    #4,A7
000043E8  0C80 0000 7668          cmp.l     #65,D0
000043EC  0041      
000043EE  6D10      7669          blt.s     vsscanf_104
000043F0  2F02      7670          move.l    D2,-(A7)
000043F2  6100 F8B8 7671          bsr       _toupper
000043F6  584F      7672          addq.w    #4,A7
000043F8  0C80 0000 7673          cmp.l     #70,D0
000043FC  0046      
000043FE  6F14      7674          ble.s     vsscanf_103
                    7675   vsscanf_104:
00004400  2042      7676          move.l    D2,A0
00004402  43F9 0000 7677          lea       __ctype,A1
00004406  680C      
00004408  1030 9801 7678          move.b    1(A0,A1.L),D0
0000440C  C03C 0004 7679          and.b     #4,D0
00004410  6700 0054 7680          beq       vsscanf_102
                    7681   vsscanf_103:
00004414  2042      7682          move.l    D2,A0
00004416  43F9 0000 7683          lea       __ctype,A1
0000441A  680C      
0000441C  1030 9801 7684          move.b    1(A0,A1.L),D0
00004420  C03C 0004 7685          and.b     #4,D0
00004424  6614      7686          bne.s     vsscanf_105
00004426  70F9      7687          moveq     #-7,D0
00004428  2F00      7688          move.l    D0,-(A7)
0000442A  2F02      7689          move.l    D2,-(A7)
0000442C  6100 F87E 7690          bsr       _toupper
00004430  584F      7691          addq.w    #4,A7
00004432  2200      7692          move.l    D0,D1
00004434  201F      7693          move.l    (A7)+,D0
00004436  D081      7694          add.l     D1,D0
00004438  2400      7695          move.l    D0,D2
                    7696   vsscanf_105:
0000443A  2F0D      7697          move.l    A5,-(A7)
0000443C  2F2E FFFC 7698          move.l    -4(A6),-(A7)
00004440  6100 0884 7699          bsr       LMUL
00004444  2017      7700          move.l    (A7),D0
00004446  504F      7701          addq.w    #8,A7
00004448  D082      7702          add.l     D2,D0
0000444A  0480 0000 7703          sub.l     #48,D0
0000444E  0030      
00004450  2A40      7704          move.l    D0,A5
00004452  2F05      7705          move.l    D5,-(A7)
00004454  4E93      7706          jsr       (A3)
00004456  584F      7707          addq.w    #4,A7
00004458  2400      7708          move.l    D0,D2
0000445A  52AE FFE4 7709          addq.l    #1,-28(A6)
0000445E  387C 0001 7710          move.w    #1,A4
00004462  6000 FF6A 7711          bra       vsscanf_96
                    7712   vsscanf_102:
00004466  0C82 FFFF 7713          cmp.l     #-1,D2
0000446A  FFFF      
0000446C  671A      7714          beq.s     vsscanf_107
0000446E  2F02      7715          move.l    D2,-(A7)
00004470  2F05      7716          move.l    D5,-(A7)
00004472  6100 F8D2 7717          bsr       @vsscanf_scanputback
00004476  504F      7718          addq.w    #8,A7
00004478  53AE FFE4 7719          subq.l    #1,-28(A6)
0000447C  200C      7720          move.l    A4,D0
0000447E  6606      7721          bne.s     vsscanf_109
00004480  2004      7722          move.l    D4,D0
00004482  6000 00E2 7723          bra       vsscanf_15
                    7724   vsscanf_109:
00004486  6012      7725          bra.s     vsscanf_111
                    7726   vsscanf_107:
00004488  200C      7727          move.l    A4,D0
0000448A  660E      7728          bne.s     vsscanf_111
0000448C  4A84      7729          tst.l     D4
0000448E  6704      7730          beq.s     vsscanf_113
00004490  2004      7731          move.l    D4,D0
00004492  6002      7732          bra.s     vsscanf_114
                    7733   vsscanf_113:
00004494  70FF      7734          moveq     #-1,D0
                    7735   vsscanf_114:
00004496  6000 00CE 7736          bra       vsscanf_15
                    7737   vsscanf_111:
0000449A  4AAE FFE0 7738          tst.l     -32(A6)
0000449E  6706      7739          beq.s     vsscanf_115
000044A0  200D      7740          move.l    A5,D0
000044A2  4480      7741          neg.l     D0
000044A4  2A40      7742          move.l    D0,A5
                    7743   vsscanf_115:
000044A6  4A86      7744          tst.l     D6
000044A8  661E      7745          bne.s     vsscanf_117
000044AA  4AAE FFE8 7746          tst.l     -24(A6)
000044AE  6706      7747          beq.s     vsscanf_119
000044B0  2047      7748          move.l    D7,A0
000044B2  208D      7749          move.l    A5,(A0)
000044B4  6010      7750          bra.s     vsscanf_122
                    7751   vsscanf_119:
000044B6  4AAE FFEC 7752          tst.l     -20(A6)
000044BA  6706      7753          beq.s     vsscanf_121
000044BC  2047      7754          move.l    D7,A0
000044BE  308D      7755          move.w    A5,(A0)
000044C0  6004      7756          bra.s     vsscanf_122
                    7757   vsscanf_121:
000044C2  2047      7758          move.l    D7,A0
000044C4  208D      7759          move.l    A5,(A0)
                    7760   vsscanf_122:
000044C6  5284      7761          addq.l    #1,D4
                    7762   vsscanf_117:
000044C8  0C82 FFFF 7763          cmp.l     #-1,D2
000044CC  FFFF      
000044CE  660E      7764          bne.s     vsscanf_123
000044D0  4A84      7765          tst.l     D4
000044D2  6704      7766          beq.s     vsscanf_125
000044D4  2004      7767          move.l    D4,D0
000044D6  6002      7768          bra.s     vsscanf_126
                    7769   vsscanf_125:
000044D8  70FF      7770          moveq     #-1,D0
                    7771   vsscanf_126:
000044DA  6000 008A 7772          bra       vsscanf_15
                    7773   vsscanf_123:
000044DE  6000 0080 7774          bra       vsscanf_139
                    7775   vsscanf_85:
000044E2  0C83 0000 7776          cmp.l     #37,D3
000044E6  0025      
000044E8  6600 0040 7777          bne       vsscanf_127
000044EC  2F05      7778          move.l    D5,-(A7)
000044EE  4E93      7779          jsr       (A3)
000044F0  584F      7780          addq.w    #4,A7
000044F2  2400      7781          move.l    D0,D2
000044F4  0C82 FFFF 7782          cmp.l     #-1,D2
000044F8  FFFF      
000044FA  660E      7783          bne.s     vsscanf_129
000044FC  4A84      7784          tst.l     D4
000044FE  6704      7785          beq.s     vsscanf_131
00004500  2004      7786          move.l    D4,D0
00004502  6002      7787          bra.s     vsscanf_132
                    7788   vsscanf_131:
00004504  70FF      7789          moveq     #-1,D0
                    7790   vsscanf_132:
00004506  6000 005E 7791          bra       vsscanf_15
                    7792   vsscanf_129:
0000450A  52AE FFE4 7793          addq.l    #1,-28(A6)
0000450E  B483      7794          cmp.l     D3,D2
00004510  6714      7795          beq.s     vsscanf_133
00004512  2F02      7796          move.l    D2,-(A7)
00004514  2F05      7797          move.l    D5,-(A7)
00004516  6100 F82E 7798          bsr       @vsscanf_scanputback
0000451A  504F      7799          addq.w    #8,A7
0000451C  53AE FFE4 7800          subq.l    #1,-28(A6)
00004520  2004      7801          move.l    D4,D0
00004522  6000 0042 7802          bra       vsscanf_15
                    7803   vsscanf_133:
00004526  6000 0038 7804          bra       vsscanf_139
                    7805   vsscanf_127:
0000452A  2F05      7806          move.l    D5,-(A7)
0000452C  4E93      7807          jsr       (A3)
0000452E  584F      7808          addq.w    #4,A7
00004530  2400      7809          move.l    D0,D2
00004532  52AE FFE4 7810          addq.l    #1,-28(A6)
00004536  0C82 FFFF 7811          cmp.l     #-1,D2
0000453A  FFFF      
0000453C  660C      7812          bne.s     vsscanf_135
0000453E  4A84      7813          tst.l     D4
00004540  6704      7814          beq.s     vsscanf_137
00004542  2004      7815          move.l    D4,D0
00004544  6002      7816          bra.s     vsscanf_138
                    7817   vsscanf_137:
00004546  70FF      7818          moveq     #-1,D0
                    7819   vsscanf_138:
00004548  601C      7820          bra.s     vsscanf_15
                    7821   vsscanf_135:
0000454A  B483      7822          cmp.l     D3,D2
0000454C  6712      7823          beq.s     vsscanf_139
0000454E  2F02      7824          move.l    D2,-(A7)
00004550  2F05      7825          move.l    D5,-(A7)
00004552  6100 F7F2 7826          bsr       @vsscanf_scanputback
00004556  504F      7827          addq.w    #8,A7
00004558  53AE FFE4 7828          subq.l    #1,-28(A6)
0000455C  2004      7829          move.l    D4,D0
0000455E  6006      7830          bra.s     vsscanf_15
                    7831   vsscanf_139:
00004560  6000 FA44 7832          bra       vsscanf_3
                    7833   vsscanf_5:
00004564  2004      7834          move.l    D4,D0
                    7835   vsscanf_15:
00004566  4CDF 3CFC 7836          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000456A  4E5E      7837          unlk      A6
0000456C  4E75      7838          rts
                    7839   _printf:
0000456E  4E56 FFFC 7840          link      A6,#-4
00004572  48E7 2000 7841          movem.l   D2,-(A7)
00004576  41EE 0008 7842          lea       8(A6),A0
0000457A  5848      7843          addq.w    #4,A0
0000457C  2408      7844          move.l    A0,D2
0000457E  2F02      7845          move.l    D2,-(A7)
00004580  2F2E 0008 7846          move.l    8(A6),-(A7)
00004584  42A7      7847          clr.l     -(A7)
00004586  6100 00CA 7848          bsr       _vsprintf
0000458A  DEFC 000C 7849          add.w     #12,A7
0000458E  2D40 FFFC 7850          move.l    D0,-4(A6)
00004592  4282      7851          clr.l     D2
00004594  202E FFFC 7852          move.l    -4(A6),D0
00004598  4CDF 0004 7853          movem.l   (A7)+,D2
0000459C  4E5E      7854          unlk      A6
0000459E  4E75      7855          rts
                    7856   @vsprintf_copy:
000045A0  4E56 0000 7857          link      A6,#0
000045A4  206E 0008 7858          move.l    8(A6),A0
000045A8  4A90      7859          tst.l     (A0)
000045AA  6710      7860          beq.s     @vsprintf_copy_1
000045AC  202E 000C 7861          move.l    12(A6),D0
000045B0  206E 0008 7862          move.l    8(A6),A0
000045B4  2250      7863          move.l    (A0),A1
000045B6  5290      7864          addq.l    #1,(A0)
000045B8  1280      7865          move.b    D0,(A1)
000045BA  600A      7866          bra.s     @vsprintf_copy_2
                    7867   @vsprintf_copy_1:
000045BC  2F2E 000C 7868          move.l    12(A6),-(A7)
000045C0  6100 F5F0 7869          bsr       _putch
000045C4  584F      7870          addq.w    #4,A7
                    7871   @vsprintf_copy_2:
000045C6  4E5E      7872          unlk      A6
000045C8  4E75      7873          rts
                    7874   @vsprintf_getval:
000045CA  4E56 0000 7875          link      A6,#0
000045CE  48E7 3000 7876          movem.l   D2/D3,-(A7)
000045D2  242E 0008 7877          move.l    8(A6),D2
000045D6  4283      7878          clr.l     D3
000045D8  2042      7879          move.l    D2,A0
000045DA  2050      7880          move.l    (A0),A0
000045DC  1010      7881          move.b    (A0),D0
000045DE  4880      7882          ext.w     D0
000045E0  48C0      7883          ext.l     D0
000045E2  0C80 0000 7884          cmp.l     #42,D0
000045E6  002A      
000045E8  6612      7885          bne.s     @vsprintf_getval_1
000045EA  206E 000C 7886          move.l    12(A6),A0
000045EE  2250      7887          move.l    (A0),A1
000045F0  5890      7888          addq.l    #4,(A0)
000045F2  2611      7889          move.l    (A1),D3
000045F4  2042      7890          move.l    D2,A0
000045F6  5290      7891          addq.l    #1,(A0)
000045F8  6000 004E 7892          bra       @vsprintf_getval_5
                    7893   @vsprintf_getval_1:
000045FC  2042      7894          move.l    D2,A0
000045FE  2050      7895          move.l    (A0),A0
00004600  1010      7896          move.b    (A0),D0
00004602  4880      7897          ext.w     D0
00004604  48C0      7898          ext.l     D0
00004606  0C80 0000 7899          cmp.l     #48,D0
0000460A  0030      
0000460C  6D00 003A 7900          blt       @vsprintf_getval_5
00004610  2042      7901          move.l    D2,A0
00004612  2050      7902          move.l    (A0),A0
00004614  1010      7903          move.b    (A0),D0
00004616  4880      7904          ext.w     D0
00004618  48C0      7905          ext.l     D0
0000461A  0C80 0000 7906          cmp.l     #57,D0
0000461E  0039      
00004620  6E26      7907          bgt.s     @vsprintf_getval_5
00004622  2F03      7908          move.l    D3,-(A7)
00004624  4878 000A 7909          pea       10
00004628  6100 069C 7910          bsr       LMUL
0000462C  2017      7911          move.l    (A7),D0
0000462E  504F      7912          addq.w    #8,A7
00004630  2042      7913          move.l    D2,A0
00004632  2250      7914          move.l    (A0),A1
00004634  5290      7915          addq.l    #1,(A0)
00004636  1211      7916          move.b    (A1),D1
00004638  4881      7917          ext.w     D1
0000463A  48C1      7918          ext.l     D1
0000463C  D081      7919          add.l     D1,D0
0000463E  0480 0000 7920          sub.l     #48,D0
00004642  0030      
00004644  2600      7921          move.l    D0,D3
00004646  60B4      7922          bra       @vsprintf_getval_1
                    7923   @vsprintf_getval_5:
00004648  2003      7924          move.l    D3,D0
0000464A  4CDF 000C 7925          movem.l   (A7)+,D2/D3
0000464E  4E5E      7926          unlk      A6
00004650  4E75      7927          rts
                    7928   _vsprintf:
00004652  4E56 FFCC 7929          link      A6,#-52
00004656  48E7 3F3C 7930          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000465A  45EE 0008 7931          lea       8(A6),A2
0000465E  47F8 45A0 7932          lea       @vsprintf_copy,A3
00004662  49F9 0000 7933          lea       _ultoa,A4
00004666  4ED0      
00004668  4286      7934          clr.l     D6
                    7935   vsprintf_1:
0000466A  206E 000C 7936          move.l    12(A6),A0
0000466E  4A10      7937          tst.b     (A0)
00004670  6700 0624 7938          beq       vsprintf_3
00004674  206E 000C 7939          move.l    12(A6),A0
00004678  1010      7940          move.b    (A0),D0
0000467A  4880      7941          ext.w     D0
0000467C  48C0      7942          ext.l     D0
0000467E  0C80 0000 7943          cmp.l     #37,D0
00004682  0025      
00004684  671C      7944          beq.s     vsprintf_4
00004686  206E 000C 7945          move.l    12(A6),A0
0000468A  52AE 000C 7946          addq.l    #1,12(A6)
0000468E  1210      7947          move.b    (A0),D1
00004690  4881      7948          ext.w     D1
00004692  48C1      7949          ext.l     D1
00004694  2F01      7950          move.l    D1,-(A7)
00004696  2F0A      7951          move.l    A2,-(A7)
00004698  4E93      7952          jsr       (A3)
0000469A  504F      7953          addq.w    #8,A7
0000469C  5286      7954          addq.l    #1,D6
0000469E  6000 05F2 7955          bra       vsprintf_2
                    7956   vsprintf_4:
000046A2  52AE 000C 7957          addq.l    #1,12(A6)
000046A6  422E FFD3 7958          clr.b     -45(A6)
000046AA  422E FFD2 7959          clr.b     -46(A6)
000046AE  422E FFD0 7960          clr.b     -48(A6)
000046B2  422E FFCF 7961          clr.b     -49(A6)
000046B6  422E FFCE 7962          clr.b     -50(A6)
000046BA  422E FFCD 7963          clr.b     -51(A6)
000046BE  42AE FFFC 7964          clr.l     -4(A6)
000046C2  7AFF      7965          moveq     #-1,D5
000046C4  41EE FFDC 7966          lea       -36(A6),A0
000046C8  2608      7967          move.l    A0,D3
000046CA  2408      7968          move.l    A0,D2
                    7969   vsprintf_6:
000046CC  206E 000C 7970          move.l    12(A6),A0
000046D0  1010      7971          move.b    (A0),D0
000046D2  4880      7972          ext.w     D0
000046D4  48C0      7973          ext.l     D0
000046D6  0C80 0000 7974          cmp.l     #43,D0
000046DA  002B      
000046DC  6730      7975          beq.s     vsprintf_12
000046DE  6E18      7976          bgt.s     vsprintf_15
000046E0  0C80 0000 7977          cmp.l     #35,D0
000046E4  0023      
000046E6  6700 003E 7978          beq       vsprintf_14
000046EA  6E00 0046 7979          bgt       vsprintf_9
000046EE  0C80 0000 7980          cmp.l     #32,D0
000046F2  0020      
000046F4  6724      7981          beq.s     vsprintf_13
000046F6  603A      7982          bra.s     vsprintf_9
                    7983   vsprintf_15:
000046F8  0C80 0000 7984          cmp.l     #45,D0
000046FC  002D      
000046FE  6702      7985          beq.s     vsprintf_11
00004700  6030      7986          bra.s     vsprintf_9
                    7987   vsprintf_11:
00004702  1D7C 0001 7988          move.b    #1,-51(A6)
00004706  FFCD      
00004708  52AE 000C 7989          addq.l    #1,12(A6)
0000470C  6026      7990          bra.s     vsprintf_7
                    7991   vsprintf_12:
0000470E  1D7C 0001 7992          move.b    #1,-50(A6)
00004712  FFCE      
00004714  52AE 000C 7993          addq.l    #1,12(A6)
00004718  601A      7994          bra.s     vsprintf_7
                    7995   vsprintf_13:
0000471A  1D7C 0001 7996          move.b    #1,-49(A6)
0000471E  FFCF      
00004720  52AE 000C 7997          addq.l    #1,12(A6)
00004724  600E      7998          bra.s     vsprintf_7
                    7999   vsprintf_14:
00004726  1D7C 0001 8000          move.b    #1,-48(A6)
0000472A  FFD0      
0000472C  52AE 000C 8001          addq.l    #1,12(A6)
00004730  6002      8002          bra.s     vsprintf_7
                    8003   vsprintf_9:
00004732  6002      8004          bra.s     vsprintf_8
                    8005   vsprintf_7:
00004734  6096      8006          bra       vsprintf_6
                    8007   vsprintf_8:
00004736  206E 000C 8008          move.l    12(A6),A0
0000473A  1010      8009          move.b    (A0),D0
0000473C  4880      8010          ext.w     D0
0000473E  48C0      8011          ext.l     D0
00004740  0C80 0000 8012          cmp.l     #48,D0
00004744  0030      
00004746  660A      8013          bne.s     vsprintf_16
00004748  52AE 000C 8014          addq.l    #1,12(A6)
0000474C  1D7C 0001 8015          move.b    #1,-46(A6)
00004750  FFD2      
                    8016   vsprintf_16:
00004752  486E 0010 8017          pea       16(A6)
00004756  486E 000C 8018          pea       12(A6)
0000475A  6100 FE6E 8019          bsr       @vsprintf_getval
0000475E  504F      8020          addq.w    #8,A7
00004760  2A40      8021          move.l    D0,A5
00004762  206E 000C 8022          move.l    12(A6),A0
00004766  1010      8023          move.b    (A0),D0
00004768  4880      8024          ext.w     D0
0000476A  48C0      8025          ext.l     D0
0000476C  0C80 0000 8026          cmp.l     #46,D0
00004770  002E      
00004772  6614      8027          bne.s     vsprintf_18
00004774  52AE 000C 8028          addq.l    #1,12(A6)
00004778  486E 0010 8029          pea       16(A6)
0000477C  486E 000C 8030          pea       12(A6)
00004780  6100 FE48 8031          bsr       @vsprintf_getval
00004784  504F      8032          addq.w    #8,A7
00004786  2A00      8033          move.l    D0,D5
                    8034   vsprintf_18:
00004788  206E 000C 8035          move.l    12(A6),A0
0000478C  1010      8036          move.b    (A0),D0
0000478E  4880      8037          ext.w     D0
00004790  48C0      8038          ext.l     D0
00004792  0C80 0000 8039          cmp.l     #108,D0
00004796  006C      
00004798  660A      8040          bne.s     vsprintf_20
0000479A  52AE 000C 8041          addq.l    #1,12(A6)
0000479E  1D7C 0001 8042          move.b    #1,-45(A6)
000047A2  FFD3      
                    8043   vsprintf_20:
000047A4  206E 000C 8044          move.l    12(A6),A0
000047A8  1010      8045          move.b    (A0),D0
000047AA  4880      8046          ext.w     D0
000047AC  48C0      8047          ext.l     D0
000047AE  0C80 0000 8048          cmp.l     #111,D0
000047B2  006F      
000047B4  6700 00D4 8049          beq       vsprintf_27
000047B8  6E34      8050          bgt.s     vsprintf_33
000047BA  0C80 0000 8051          cmp.l     #100,D0
000047BE  0064      
000047C0  6700 0054 8052          beq       vsprintf_24
000047C4  6E1C      8053          bgt.s     vsprintf_34
000047C6  0C80 0000 8054          cmp.l     #99,D0
000047CA  0063      
000047CC  6700 012C 8055          beq       vsprintf_30
000047D0  6E00 016A 8056          bgt       vsprintf_22
000047D4  0C80 0000 8057          cmp.l     #88,D0
000047D8  0058      
000047DA  6700 00E6 8058          beq       vsprintf_28
000047DE  6000 015C 8059          bra       vsprintf_22
                    8060   vsprintf_34:
000047E2  0C80 0000 8061          cmp.l     #105,D0
000047E6  0069      
000047E8  672C      8062          beq.s     vsprintf_24
000047EA  6000 0150 8063          bra       vsprintf_22
                    8064   vsprintf_33:
000047EE  0C80 0000 8065          cmp.l     #117,D0
000047F2  0075      
000047F4  6700 005C 8066          beq       vsprintf_26
000047F8  6E0E      8067          bgt.s     vsprintf_35
000047FA  0C80 0000 8068          cmp.l     #115,D0
000047FE  0073      
00004800  6700 011C 8069          beq       vsprintf_31
00004804  6000 0136 8070          bra       vsprintf_22
                    8071   vsprintf_35:
00004808  0C80 0000 8072          cmp.l     #120,D0
0000480C  0078      
0000480E  6700 00B2 8073          beq       vsprintf_28
00004812  6000 0128 8074          bra       vsprintf_22
                    8075   vsprintf_24:
00004816  4A2E FFD3 8076          tst.b     -45(A6)
0000481A  671A      8077          beq.s     vsprintf_36
0000481C  4878 000A 8078          pea       10
00004820  2F03      8079          move.l    D3,-(A7)
00004822  206E 0010 8080          move.l    16(A6),A0
00004826  58AE 0010 8081          addq.l    #4,16(A6)
0000482A  2F10      8082          move.l    (A0),-(A7)
0000482C  6100 061E 8083          bsr       _ltoa
00004830  DEFC 000C 8084          add.w     #12,A7
00004834  6018      8085          bra.s     vsprintf_37
                    8086   vsprintf_36:
00004836  4878 000A 8087          pea       10
0000483A  2F03      8088          move.l    D3,-(A7)
0000483C  206E 0010 8089          move.l    16(A6),A0
00004840  58AE 0010 8090          addq.l    #4,16(A6)
00004844  2F10      8091          move.l    (A0),-(A7)
00004846  6100 0604 8092          bsr       _ltoa
0000484A  DEFC 000C 8093          add.w     #12,A7
                    8094   vsprintf_37:
0000484E  6000 00FA 8095          bra       vsprintf_23
                    8096   vsprintf_26:
00004852  4A2E FFD3 8097          tst.b     -45(A6)
00004856  6718      8098          beq.s     vsprintf_38
00004858  4878 000A 8099          pea       10
0000485C  2F03      8100          move.l    D3,-(A7)
0000485E  206E 0010 8101          move.l    16(A6),A0
00004862  58AE 0010 8102          addq.l    #4,16(A6)
00004866  2F10      8103          move.l    (A0),-(A7)
00004868  4E94      8104          jsr       (A4)
0000486A  DEFC 000C 8105          add.w     #12,A7
0000486E  6016      8106          bra.s     vsprintf_39
                    8107   vsprintf_38:
00004870  4878 000A 8108          pea       10
00004874  2F03      8109          move.l    D3,-(A7)
00004876  206E 0010 8110          move.l    16(A6),A0
0000487A  58AE 0010 8111          addq.l    #4,16(A6)
0000487E  2F10      8112          move.l    (A0),-(A7)
00004880  4E94      8113          jsr       (A4)
00004882  DEFC 000C 8114          add.w     #12,A7
                    8115   vsprintf_39:
00004886  6000 00C2 8116          bra       vsprintf_23
                    8117   vsprintf_27:
0000488A  4A2E FFD3 8118          tst.b     -45(A6)
0000488E  6718      8119          beq.s     vsprintf_40
00004890  4878 0008 8120          pea       8
00004894  2F03      8121          move.l    D3,-(A7)
00004896  206E 0010 8122          move.l    16(A6),A0
0000489A  58AE 0010 8123          addq.l    #4,16(A6)
0000489E  2F10      8124          move.l    (A0),-(A7)
000048A0  4E94      8125          jsr       (A4)
000048A2  DEFC 000C 8126          add.w     #12,A7
000048A6  6016      8127          bra.s     vsprintf_41
                    8128   vsprintf_40:
000048A8  4878 0008 8129          pea       8
000048AC  2F03      8130          move.l    D3,-(A7)
000048AE  206E 0010 8131          move.l    16(A6),A0
000048B2  58AE 0010 8132          addq.l    #4,16(A6)
000048B6  2F10      8133          move.l    (A0),-(A7)
000048B8  4E94      8134          jsr       (A4)
000048BA  DEFC 000C 8135          add.w     #12,A7
                    8136   vsprintf_41:
000048BE  6000 008A 8137          bra       vsprintf_23
                    8138   vsprintf_28:
000048C2  4A2E FFD3 8139          tst.b     -45(A6)
000048C6  6718      8140          beq.s     vsprintf_42
000048C8  4878 0010 8141          pea       16
000048CC  2F03      8142          move.l    D3,-(A7)
000048CE  206E 0010 8143          move.l    16(A6),A0
000048D2  58AE 0010 8144          addq.l    #4,16(A6)
000048D6  2F10      8145          move.l    (A0),-(A7)
000048D8  4E94      8146          jsr       (A4)
000048DA  DEFC 000C 8147          add.w     #12,A7
000048DE  6016      8148          bra.s     vsprintf_43
                    8149   vsprintf_42:
000048E0  4878 0010 8150          pea       16
000048E4  2F03      8151          move.l    D3,-(A7)
000048E6  206E 0010 8152          move.l    16(A6),A0
000048EA  58AE 0010 8153          addq.l    #4,16(A6)
000048EE  2F10      8154          move.l    (A0),-(A7)
000048F0  4E94      8155          jsr       (A4)
000048F2  DEFC 000C 8156          add.w     #12,A7
                    8157   vsprintf_43:
000048F6  6000 0052 8158          bra       vsprintf_23
                    8159   vsprintf_30:
000048FA  206E 0010 8160          move.l    16(A6),A0
000048FE  58AE 0010 8161          addq.l    #4,16(A6)
00004902  2010      8162          move.l    (A0),D0
00004904  2042      8163          move.l    D2,A0
00004906  5282      8164          addq.l    #1,D2
00004908  1080      8165          move.b    D0,(A0)
0000490A  2042      8166          move.l    D2,A0
0000490C  4210      8167          clr.b     (A0)
0000490E  200D      8168          move.l    A5,D0
00004910  6704      8169          beq.s     vsprintf_44
00004912  200D      8170          move.l    A5,D0
00004914  6002      8171          bra.s     vsprintf_45
                    8172   vsprintf_44:
00004916  7001      8173          moveq     #1,D0
                    8174   vsprintf_45:
00004918  2A00      8175          move.l    D0,D5
0000491A  6000 002E 8176          bra       vsprintf_23
                    8177   vsprintf_31:
0000491E  206E 0010 8178          move.l    16(A6),A0
00004922  58AE 0010 8179          addq.l    #4,16(A6)
00004926  2610      8180          move.l    (A0),D3
00004928  0C85 FFFF 8181          cmp.l     #-1,D5
0000492C  FFFF      
0000492E  660A      8182          bne.s     vsprintf_46
00004930  2F03      8183          move.l    D3,-(A7)
00004932  6100 05FE 8184          bsr       _strlen
00004936  584F      8185          addq.w    #4,A7
00004938  2A00      8186          move.l    D0,D5
                    8187   vsprintf_46:
0000493A  600E      8188          bra.s     vsprintf_23
                    8189   vsprintf_22:
0000493C  206E 000C 8190          move.l    12(A6),A0
00004940  2242      8191          move.l    D2,A1
00004942  5282      8192          addq.l    #1,D2
00004944  1290      8193          move.b    (A0),(A1)
00004946  2042      8194          move.l    D2,A0
00004948  4210      8195          clr.b     (A0)
                    8196   vsprintf_23:
0000494A  2F03      8197          move.l    D3,-(A7)
0000494C  6100 05E4 8198          bsr       _strlen
00004950  584F      8199          addq.w    #4,A7
00004952  1800      8200          move.b    D0,D4
00004954  206E 000C 8201          move.l    12(A6),A0
00004958  1010      8202          move.b    (A0),D0
0000495A  4880      8203          ext.w     D0
0000495C  48C0      8204          ext.l     D0
0000495E  0C80 0000 8205          cmp.l     #115,D0
00004962  0073      
00004964  6618      8206          bne.s     vsprintf_48
00004966  0C85 0000 8207          cmp.l     #0,D5
0000496A  0000      
0000496C  6D10      8208          blt.s     vsprintf_48
0000496E  4884      8209          ext.w     D4
00004970  48C4      8210          ext.l     D4
00004972  B885      8211          cmp.l     D5,D4
00004974  6F04      8212          ble.s     vsprintf_50
00004976  1005      8213          move.b    D5,D0
00004978  6002      8214          bra.s     vsprintf_51
                    8215   vsprintf_50:
0000497A  1004      8216          move.b    D4,D0
                    8217   vsprintf_51:
0000497C  1800      8218          move.b    D0,D4
                    8219   vsprintf_48:
0000497E  206E 000C 8220          move.l    12(A6),A0
00004982  1010      8221          move.b    (A0),D0
00004984  4880      8222          ext.w     D0
00004986  48C0      8223          ext.l     D0
00004988  0C80 0000 8224          cmp.l     #88,D0
0000498C  0058      
0000498E  6600 0026 8225          bne       vsprintf_56
00004992  41EE FFDC 8226          lea       -36(A6),A0
00004996  2408      8227          move.l    A0,D2
                    8228   vsprintf_54:
00004998  2042      8229          move.l    D2,A0
0000499A  4A10      8230          tst.b     (A0)
0000499C  6718      8231          beq.s     vsprintf_56
0000499E  2042      8232          move.l    D2,A0
000049A0  1210      8233          move.b    (A0),D1
000049A2  4881      8234          ext.w     D1
000049A4  48C1      8235          ext.l     D1
000049A6  2F01      8236          move.l    D1,-(A7)
000049A8  6100 F302 8237          bsr       _toupper
000049AC  584F      8238          addq.w    #4,A7
000049AE  2042      8239          move.l    D2,A0
000049B0  1080      8240          move.b    D0,(A0)
000049B2  5282      8241          addq.l    #1,D2
000049B4  60E2      8242          bra       vsprintf_54
                    8243   vsprintf_56:
000049B6  7E00      8244          moveq     #0,D7
000049B8  41EE FFD4 8245          lea       -44(A6),A0
000049BC  2408      8246          move.l    A0,D2
000049BE  206E 000C 8247          move.l    12(A6),A0
000049C2  1010      8248          move.b    (A0),D0
000049C4  4880      8249          ext.w     D0
000049C6  48C0      8250          ext.l     D0
000049C8  0C80 0000 8251          cmp.l     #100,D0
000049CC  0064      
000049CE  6714      8252          beq.s     vsprintf_59
000049D0  206E 000C 8253          move.l    12(A6),A0
000049D4  1010      8254          move.b    (A0),D0
000049D6  4880      8255          ext.w     D0
000049D8  48C0      8256          ext.l     D0
000049DA  0C80 0000 8257          cmp.l     #105,D0
000049DE  0069      
000049E0  6600 0076 8258          bne       vsprintf_65
                    8259   vsprintf_59:
000049E4  4A2E FFCE 8260          tst.b     -50(A6)
000049E8  6612      8261          bne.s     vsprintf_62
000049EA  2043      8262          move.l    D3,A0
000049EC  1010      8263          move.b    (A0),D0
000049EE  4880      8264          ext.w     D0
000049F0  48C0      8265          ext.l     D0
000049F2  0C80 0000 8266          cmp.l     #45,D0
000049F6  002D      
000049F8  6600 002E 8267          bne       vsprintf_60
                    8268   vsprintf_62:
000049FC  2043      8269          move.l    D3,A0
000049FE  1010      8270          move.b    (A0),D0
00004A00  4880      8271          ext.w     D0
00004A02  48C0      8272          ext.l     D0
00004A04  0C80 0000 8273          cmp.l     #45,D0
00004A08  002D      
00004A0A  660E      8274          bne.s     vsprintf_63
00004A0C  2043      8275          move.l    D3,A0
00004A0E  5283      8276          addq.l    #1,D3
00004A10  2242      8277          move.l    D2,A1
00004A12  5282      8278          addq.l    #1,D2
00004A14  1290      8279          move.b    (A0),(A1)
00004A16  5304      8280          subq.b    #1,D4
00004A18  6008      8281          bra.s     vsprintf_64
                    8282   vsprintf_63:
00004A1A  2042      8283          move.l    D2,A0
00004A1C  5282      8284          addq.l    #1,D2
00004A1E  10BC 002B 8285          move.b    #43,(A0)
                    8286   vsprintf_64:
00004A22  5287      8287          addq.l    #1,D7
00004A24  6000 0032 8288          bra       vsprintf_65
                    8289   vsprintf_60:
00004A28  4A2E FFCF 8290          tst.b     -49(A6)
00004A2C  6700 002A 8291          beq       vsprintf_65
00004A30  2043      8292          move.l    D3,A0
00004A32  1010      8293          move.b    (A0),D0
00004A34  4880      8294          ext.w     D0
00004A36  48C0      8295          ext.l     D0
00004A38  0C80 0000 8296          cmp.l     #45,D0
00004A3C  002D      
00004A3E  660E      8297          bne.s     vsprintf_67
00004A40  2043      8298          move.l    D3,A0
00004A42  5283      8299          addq.l    #1,D3
00004A44  2242      8300          move.l    D2,A1
00004A46  5282      8301          addq.l    #1,D2
00004A48  1290      8302          move.b    (A0),(A1)
00004A4A  5304      8303          subq.b    #1,D4
00004A4C  6008      8304          bra.s     vsprintf_68
                    8305   vsprintf_67:
00004A4E  2042      8306          move.l    D2,A0
00004A50  5282      8307          addq.l    #1,D2
00004A52  10BC 0020 8308          move.b    #32,(A0)
                    8309   vsprintf_68:
00004A56  5287      8310          addq.l    #1,D7
                    8311   vsprintf_65:
00004A58  4A2E FFD0 8312          tst.b     -48(A6)
00004A5C  6700 0066 8313          beq       vsprintf_77
00004A60  206E 000C 8314          move.l    12(A6),A0
00004A64  1010      8315          move.b    (A0),D0
00004A66  4880      8316          ext.w     D0
00004A68  48C0      8317          ext.l     D0
00004A6A  0C80 0000 8318          cmp.l     #111,D0
00004A6E  006F      
00004A70  671A      8319          beq.s     vsprintf_73
00004A72  6E0C      8320          bgt.s     vsprintf_76
00004A74  0C80 0000 8321          cmp.l     #88,D0
00004A78  0058      
00004A7A  6710      8322          beq.s     vsprintf_73
00004A7C  6000 0046 8323          bra       vsprintf_77
                    8324   vsprintf_76:
00004A80  0C80 0000 8325          cmp.l     #120,D0
00004A84  0078      
00004A86  6704      8326          beq.s     vsprintf_73
00004A88  6000 003A 8327          bra       vsprintf_77
                    8328   vsprintf_73:
00004A8C  2042      8329          move.l    D2,A0
00004A8E  5282      8330          addq.l    #1,D2
00004A90  10BC 0030 8331          move.b    #48,(A0)
00004A94  5287      8332          addq.l    #1,D7
00004A96  206E 000C 8333          move.l    12(A6),A0
00004A9A  1010      8334          move.b    (A0),D0
00004A9C  4880      8335          ext.w     D0
00004A9E  48C0      8336          ext.l     D0
00004AA0  0C80 0000 8337          cmp.l     #120,D0
00004AA4  0078      
00004AA6  6712      8338          beq.s     vsprintf_79
00004AA8  206E 000C 8339          move.l    12(A6),A0
00004AAC  1010      8340          move.b    (A0),D0
00004AAE  4880      8341          ext.w     D0
00004AB0  48C0      8342          ext.l     D0
00004AB2  0C80 0000 8343          cmp.l     #88,D0
00004AB6  0058      
00004AB8  660A      8344          bne.s     vsprintf_77
                    8345   vsprintf_79:
00004ABA  2042      8346          move.l    D2,A0
00004ABC  5282      8347          addq.l    #1,D2
00004ABE  10BC 0078 8348          move.b    #120,(A0)
00004AC2  5287      8349          addq.l    #1,D7
                    8350   vsprintf_77:
00004AC4  2042      8351          move.l    D2,A0
00004AC6  4210      8352          clr.b     (A0)
00004AC8  206E 000C 8353          move.l    12(A6),A0
00004ACC  1010      8354          move.b    (A0),D0
00004ACE  4880      8355          ext.w     D0
00004AD0  48C0      8356          ext.l     D0
00004AD2  0C80 0000 8357          cmp.l     #105,D0
00004AD6  0069      
00004AD8  6700 0076 8358          beq       vsprintf_82
00004ADC  6E42      8359          bgt.s     vsprintf_93
00004ADE  0C80 0000 8360          cmp.l     #99,D0
00004AE2  0063      
00004AE4  6700 0084 8361          beq       vsprintf_96
00004AE8  6E1C      8362          bgt.s     vsprintf_94
00004AEA  0C80 0000 8363          cmp.l     #88,D0
00004AEE  0058      
00004AF0  6700 005E 8364          beq       vsprintf_82
00004AF4  6E00 0184 8365          bgt       vsprintf_80
00004AF8  0C80 0000 8366          cmp.l     #69,D0
00004AFC  0045      
00004AFE  6700 0050 8367          beq       vsprintf_82
00004B02  6000 0176 8368          bra       vsprintf_80
                    8369   vsprintf_94:
00004B06  0C80 0000 8370          cmp.l     #101,D0
00004B0A  0065      
00004B0C  6700 0042 8371          beq       vsprintf_82
00004B10  6E00 0168 8372          bgt       vsprintf_80
00004B14  0C80 0000 8373          cmp.l     #100,D0
00004B18  0064      
00004B1A  6734      8374          beq.s     vsprintf_82
00004B1C  6000 015C 8375          bra       vsprintf_80
                    8376   vsprintf_93:
00004B20  0C80 0000 8377          cmp.l     #117,D0
00004B24  0075      
00004B26  6728      8378          beq.s     vsprintf_82
00004B28  6E1A      8379          bgt.s     vsprintf_95
00004B2A  0C80 0000 8380          cmp.l     #115,D0
00004B2E  0073      
00004B30  6700 0038 8381          beq       vsprintf_96
00004B34  6E00 0144 8382          bgt       vsprintf_80
00004B38  0C80 0000 8383          cmp.l     #111,D0
00004B3C  006F      
00004B3E  6710      8384          beq.s     vsprintf_82
00004B40  6000 0138 8385          bra       vsprintf_80
                    8386   vsprintf_95:
00004B44  0C80 0000 8387          cmp.l     #120,D0
00004B48  0078      
00004B4A  6704      8388          beq.s     vsprintf_82
00004B4C  6000 012C 8389          bra       vsprintf_80
                    8390   vsprintf_82:
00004B50  4A2E FFD2 8391          tst.b     -46(A6)
00004B54  6714      8392          beq.s     vsprintf_96
00004B56  4A2E FFCD 8393          tst.b     -51(A6)
00004B5A  660E      8394          bne.s     vsprintf_96
00004B5C  200D      8395          move.l    A5,D0
00004B5E  9087      8396          sub.l     D7,D0
00004B60  4884      8397          ext.w     D4
00004B62  48C4      8398          ext.l     D4
00004B64  9084      8399          sub.l     D4,D0
00004B66  2D40 FFFC 8400          move.l    D0,-4(A6)
                    8401   vsprintf_96:
00004B6A  202E FFFC 8402          move.l    -4(A6),D0
00004B6E  0C80 0000 8403          cmp.l     #0,D0
00004B72  0000      
00004B74  6C04      8404          bge.s     vsprintf_98
00004B76  42AE FFFC 8405          clr.l     -4(A6)
                    8406   vsprintf_98:
00004B7A  4A2E FFCD 8407          tst.b     -51(A6)
00004B7E  6600 0030 8408          bne       vsprintf_104
00004B82  4884      8409          ext.w     D4
00004B84  48C4      8410          ext.l     D4
00004B86  2004      8411          move.l    D4,D0
00004B88  D0AE FFFC 8412          add.l     -4(A6),D0
00004B8C  D087      8413          add.l     D7,D0
00004B8E  1D40 FFD1 8414          move.b    D0,-47(A6)
                    8415   vsprintf_102:
00004B92  102E FFD1 8416          move.b    -47(A6),D0
00004B96  4880      8417          ext.w     D0
00004B98  48C0      8418          ext.l     D0
00004B9A  220D      8419          move.l    A5,D1
00004B9C  534D      8420          subq.w    #1,A5
00004B9E  B081      8421          cmp.l     D1,D0
00004BA0  6C0E      8422          bge.s     vsprintf_104
00004BA2  4878 0020 8423          pea       32
00004BA6  2F0A      8424          move.l    A2,-(A7)
00004BA8  4E93      8425          jsr       (A3)
00004BAA  504F      8426          addq.w    #8,A7
00004BAC  5286      8427          addq.l    #1,D6
00004BAE  60E2      8428          bra       vsprintf_102
                    8429   vsprintf_104:
00004BB0  41EE FFD4 8430          lea       -44(A6),A0
00004BB4  2408      8431          move.l    A0,D2
                    8432   vsprintf_105:
00004BB6  2042      8433          move.l    D2,A0
00004BB8  4A10      8434          tst.b     (A0)
00004BBA  6716      8435          beq.s     vsprintf_107
00004BBC  2042      8436          move.l    D2,A0
00004BBE  5282      8437          addq.l    #1,D2
00004BC0  1210      8438          move.b    (A0),D1
00004BC2  4881      8439          ext.w     D1
00004BC4  48C1      8440          ext.l     D1
00004BC6  2F01      8441          move.l    D1,-(A7)
00004BC8  2F0A      8442          move.l    A2,-(A7)
00004BCA  4E93      8443          jsr       (A3)
00004BCC  504F      8444          addq.w    #8,A7
00004BCE  5286      8445          addq.l    #1,D6
00004BD0  60E4      8446          bra       vsprintf_105
                    8447   vsprintf_107:
00004BD2  202E FFFC 8448          move.l    -4(A6),D0
00004BD6  1D40 FFD1 8449          move.b    D0,-47(A6)
                    8450   vsprintf_108:
00004BDA  102E FFD1 8451          move.b    -47(A6),D0
00004BDE  532E FFD1 8452          subq.b    #1,-47(A6)
00004BE2  4A00      8453          tst.b     D0
00004BE4  670E      8454          beq.s     vsprintf_110
00004BE6  4878 0030 8455          pea       48
00004BEA  2F0A      8456          move.l    A2,-(A7)
00004BEC  4E93      8457          jsr       (A3)
00004BEE  504F      8458          addq.w    #8,A7
00004BF0  5286      8459          addq.l    #1,D6
00004BF2  60E6      8460          bra       vsprintf_108
                    8461   vsprintf_110:
00004BF4  2043      8462          move.l    D3,A0
00004BF6  4A10      8463          tst.b     (A0)
00004BF8  6700 0048 8464          beq       vsprintf_113
00004BFC  206E 000C 8465          move.l    12(A6),A0
00004C00  1010      8466          move.b    (A0),D0
00004C02  4880      8467          ext.w     D0
00004C04  48C0      8468          ext.l     D0
00004C06  0C80 0000 8469          cmp.l     #115,D0
00004C0A  0073      
00004C0C  670C      8470          beq.s     vsprintf_116
00004C0E  6E18      8471          bgt.s     vsprintf_119
00004C10  0C80 0000 8472          cmp.l     #99,D0
00004C14  0063      
00004C16  6702      8473          beq.s     vsprintf_116
00004C18  600E      8474          bra.s     vsprintf_119
                    8475   vsprintf_116:
00004C1A  2005      8476          move.l    D5,D0
00004C1C  5385      8477          subq.l    #1,D5
00004C1E  0C80 0000 8478          cmp.l     #0,D0
00004C22  0000      
00004C24  6E02      8479          bgt.s     vsprintf_119
00004C26  6016      8480          bra.s     vsprintf_115
                    8481   vsprintf_119:
00004C28  2043      8482          move.l    D3,A0
00004C2A  5283      8483          addq.l    #1,D3
00004C2C  1210      8484          move.b    (A0),D1
00004C2E  4881      8485          ext.w     D1
00004C30  48C1      8486          ext.l     D1
00004C32  2F01      8487          move.l    D1,-(A7)
00004C34  2F0A      8488          move.l    A2,-(A7)
00004C36  4E93      8489          jsr       (A3)
00004C38  504F      8490          addq.w    #8,A7
00004C3A  5286      8491          addq.l    #1,D6
00004C3C  6002      8492          bra.s     vsprintf_112
                    8493   vsprintf_115:
00004C3E  6002      8494          bra.s     vsprintf_113
                    8495   vsprintf_112:
00004C40  60B2      8496          bra       vsprintf_110
                    8497   vsprintf_113:
00004C42  4A2E FFCD 8498          tst.b     -51(A6)
00004C46  6700 0030 8499          beq       vsprintf_125
00004C4A  4884      8500          ext.w     D4
00004C4C  48C4      8501          ext.l     D4
00004C4E  2004      8502          move.l    D4,D0
00004C50  D0AE FFFC 8503          add.l     -4(A6),D0
00004C54  D087      8504          add.l     D7,D0
00004C56  1D40 FFD1 8505          move.b    D0,-47(A6)
                    8506   vsprintf_123:
00004C5A  102E FFD1 8507          move.b    -47(A6),D0
00004C5E  4880      8508          ext.w     D0
00004C60  48C0      8509          ext.l     D0
00004C62  220D      8510          move.l    A5,D1
00004C64  534D      8511          subq.w    #1,A5
00004C66  B081      8512          cmp.l     D1,D0
00004C68  6C0E      8513          bge.s     vsprintf_125
00004C6A  4878 0020 8514          pea       32
00004C6E  2F0A      8515          move.l    A2,-(A7)
00004C70  4E93      8516          jsr       (A3)
00004C72  504F      8517          addq.w    #8,A7
00004C74  5386      8518          subq.l    #1,D6
00004C76  60E2      8519          bra       vsprintf_123
                    8520   vsprintf_125:
00004C78  6014      8521          bra.s     vsprintf_81
                    8522   vsprintf_80:
00004C7A  206E 000C 8523          move.l    12(A6),A0
00004C7E  1210      8524          move.b    (A0),D1
00004C80  4881      8525          ext.w     D1
00004C82  48C1      8526          ext.l     D1
00004C84  2F01      8527          move.l    D1,-(A7)
00004C86  2F0A      8528          move.l    A2,-(A7)
00004C88  4E93      8529          jsr       (A3)
00004C8A  504F      8530          addq.w    #8,A7
00004C8C  5286      8531          addq.l    #1,D6
                    8532   vsprintf_81:
00004C8E  52AE 000C 8533          addq.l    #1,12(A6)
                    8534   vsprintf_2:
00004C92  6000 F9D6 8535          bra       vsprintf_1
                    8536   vsprintf_3:
00004C96  4A92      8537          tst.l     (A2)
00004C98  6710      8538          beq.s     vsprintf_126
00004C9A  4201      8539          clr.b     D1
00004C9C  C2BC 0000 8540          and.l     #255,D1
00004CA0  00FF      
00004CA2  2F01      8541          move.l    D1,-(A7)
00004CA4  2F0A      8542          move.l    A2,-(A7)
00004CA6  4E93      8543          jsr       (A3)
00004CA8  504F      8544          addq.w    #8,A7
                    8545   vsprintf_126:
00004CAA  2006      8546          move.l    D6,D0
00004CAC  4CDF 3CFC 8547          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004CB0  4E5E      8548          unlk      A6
00004CB2  4E75      8549          rts
                    8550   ULMUL:
00004CB4  4E56 0000 8551          link    A6,#0
00004CB8  48E7 C000 8552          movem.l D0/D1,-(A7)
00004CBC  222E 0008 8553          move.l  8(A6),D1
00004CC0  202E 000C 8554          move.l  12(A6),D0
00004CC4  602C      8555          bra.s   lmul_3
                    8556   LMUL:
00004CC6  4E56 0000 8557          link    A6,#0
00004CCA  48E7 C000 8558          movem.l D0/D1,-(A7)
00004CCE  222E 0008 8559          move.l  8(A6),D1
00004CD2  202E 000C 8560          move.l  12(A6),D0
00004CD6  4A80      8561          tst.l   D0
00004CD8  6A0A      8562          bpl.s   lmul_1
00004CDA  4480      8563          neg.l   D0
00004CDC  4A81      8564          tst.l   D1
00004CDE  6A0A      8565          bpl.s   lmul_2
00004CE0  4481      8566          neg.l   D1
00004CE2  600E      8567          bra.s   lmul_3
                    8568   lmul_1:
00004CE4  4A81      8569          tst.l   D1
00004CE6  6A0A      8570          bpl.s   lmul_3
00004CE8  4481      8571          neg.l   D1
                    8572   lmul_2:
00004CEA  6114      8573          bsr.s   domul
00004CEC  4481      8574          neg.l   D1
00004CEE  4080      8575          negx.l  D0
00004CF0  6002      8576          bra.s   lmul_4
                    8577   lmul_3:
00004CF2  610C      8578          bsr.s   domul
                    8579   lmul_4:
00004CF4  2D41 0008 8580          move.l  D1,8(A6)
00004CF8  4CDF 0003 8581          movem.l (A7)+,D0/D1
00004CFC  4E5E      8582          unlk    A6
00004CFE  4E75      8583          rts
                    8584   domul:
00004D00  0C81 0000 8585          cmpi.l  #$FFFF,D1
00004D04  FFFF      
00004D06  620C      8586          bhi.s   domul_1
00004D08  0C80 0000 8587          cmpi.l  #$FFFF,D0
00004D0C  FFFF      
00004D0E  620E      8588          bhi.s   domul_2
00004D10  C2C0      8589          mulu    D0,D1
00004D12  4E75      8590          rts
                    8591   domul_1:
00004D14  0C80 0000 8592          cmpi.l  #$FFFF,D0
00004D18  FFFF      
00004D1A  6218      8593          bhi.s   domul_4
00004D1C  6002      8594          bra.s   domul_3
                    8595   domul_2
00004D1E  C141      8596          exg     D0,D1
                    8597   domul_3:
00004D20  2F02      8598          move.l  D2,-(A7)
00004D22  2401      8599          move.l  D1,D2
00004D24  4842      8600          swap    D2
00004D26  C2C0      8601          mulu    D0,D1
00004D28  C4C0      8602          mulu    D0,D2
00004D2A  4842      8603          swap    D2
00004D2C  4242      8604          clr.w   D2
00004D2E  D282      8605          add.l   D2,D1
00004D30  241F      8606          move.l  (A7)+,D2
00004D32  4E75      8607          rts
                    8608   domul_4:
00004D34  48E7 3000 8609          movem.l D2/D3,-(A7)
00004D38  2401      8610          move.l  D1,D2
00004D3A  2601      8611          move.l  D1,D3
00004D3C  C2C0      8612          mulu    D0,D1
00004D3E  4842      8613          swap    D2
00004D40  C4C0      8614          mulu    D0,D2
00004D42  4840      8615          swap    D0
00004D44  C6C0      8616          mulu    D0,D3
00004D46  D483      8617          add.l   D3,D2
00004D48  4842      8618          swap    D2
00004D4A  4242      8619          clr.w   D2
00004D4C  D282      8620          add.l   D2,D1
00004D4E  4CDF 000C 8621          movem.l (A7)+,D2/D3
00004D52  4E75      8622          rts
                    8623   _gets:
00004D54  4E56 0000 8624          link      A6,#0
00004D58  48E7 3820 8625          movem.l   D2/D3/D4/A2,-(A7)
00004D5C  45F8 3BB2 8626          lea       _putch,A2
00004D60  282E 0008 8627          move.l    8(A6),D4
00004D64  2404      8628          move.l    D4,D2
                    8629   gets_1:
00004D66  6100 EE7A 8630          bsr       _getch
00004D6A  2600      8631          move.l    D0,D3
00004D6C  0C80 0000 8632          cmp.l     #10,D0
00004D70  000A      
00004D72  6700 003C 8633          beq       gets_3
00004D76  0C83 0000 8634          cmp.l     #8,D3
00004D7A  0008      
00004D7C  6712      8635          beq.s     gets_4
00004D7E  2042      8636          move.l    D2,A0
00004D80  5282      8637          addq.l    #1,D2
00004D82  1083      8638          move.b    D3,(A0)
00004D84  4883      8639          ext.w     D3
00004D86  48C3      8640          ext.l     D3
00004D88  2F03      8641          move.l    D3,-(A7)
00004D8A  4E92      8642          jsr       (A2)
00004D8C  584F      8643          addq.w    #4,A7
00004D8E  601E      8644          bra.s     gets_6
                    8645   gets_4:
00004D90  B484      8646          cmp.l     D4,D2
00004D92  631A      8647          bls.s     gets_6
00004D94  4878 0008 8648          pea       8
00004D98  4E92      8649          jsr       (A2)
00004D9A  584F      8650          addq.w    #4,A7
00004D9C  4878 0020 8651          pea       32
00004DA0  4E92      8652          jsr       (A2)
00004DA2  584F      8653          addq.w    #4,A7
00004DA4  4878 0008 8654          pea       8
00004DA8  4E92      8655          jsr       (A2)
00004DAA  584F      8656          addq.w    #4,A7
00004DAC  5382      8657          subq.l    #1,D2
                    8658   gets_6:
00004DAE  60B6      8659          bra       gets_1
                    8660   gets_3:
00004DB0  4878 000A 8661          pea       10
00004DB4  4E92      8662          jsr       (A2)
00004DB6  584F      8663          addq.w    #4,A7
00004DB8  2042      8664          move.l    D2,A0
00004DBA  4210      8665          clr.b     (A0)
00004DBC  2004      8666          move.l    D4,D0
00004DBE  4CDF 041C 8667          movem.l   (A7)+,D2/D3/D4/A2
00004DC2  4E5E      8668          unlk      A6
00004DC4  4E75      8669          rts
                    8670   _ungetch:
00004DC6  4E56 0000 8671          link      A6,#0
00004DCA  23EE 0008 8672          move.l    8(A6),__ungetbuf
00004DCE  0B00 00C0 
00004DD2  202E 0008 8673          move.l    8(A6),D0
00004DD6  4E5E      8674          unlk      A6
00004DD8  4E75      8675          rts
                    8676   @itoa_convert:
00004DDA  4E56 0000 8677          link      A6,#0
00004DDE  48E7 3C00 8678          movem.l   D2/D3/D4/D5,-(A7)
00004DE2  242E 0008 8679          move.l    8(A6),D2
00004DE6  262E 0010 8680          move.l    16(A6),D3
00004DEA  2A2E 000C 8681          move.l    12(A6),D5
00004DEE  2F05      8682          move.l    D5,-(A7)
00004DF0  2F03      8683          move.l    D3,-(A7)
00004DF2  6100 ECE0 8684          bsr       ULDIV
00004DF6  202F 0004 8685          move.l    4(A7),D0
00004DFA  504F      8686          addq.w    #8,A7
00004DFC  2800      8687          move.l    D0,D4
00004DFE  BA83      8688          cmp.l     D3,D5
00004E00  651A      8689          blo.s     @itoa_convert_1
00004E02  2F03      8690          move.l    D3,-(A7)
00004E04  2F05      8691          move.l    D5,-(A7)
00004E06  2F03      8692          move.l    D3,-(A7)
00004E08  6100 ECCA 8693          bsr       ULDIV
00004E0C  2217      8694          move.l    (A7),D1
00004E0E  504F      8695          addq.w    #8,A7
00004E10  2F01      8696          move.l    D1,-(A7)
00004E12  2F02      8697          move.l    D2,-(A7)
00004E14  61C4      8698          bsr       @itoa_convert
00004E16  DEFC 000C 8699          add.w     #12,A7
00004E1A  2400      8700          move.l    D0,D2
                    8701   @itoa_convert_1:
00004E1C  0C84 0000 8702          cmp.l     #9,D4
00004E20  0009      
00004E22  6E0A      8703          bgt.s     @itoa_convert_3
00004E24  2004      8704          move.l    D4,D0
00004E26  0680 0000 8705          add.l     #48,D0
00004E2A  0030      
00004E2C  600E      8706          bra.s     @itoa_convert_4
                    8707   @itoa_convert_3:
00004E2E  2004      8708          move.l    D4,D0
00004E30  0680 0000 8709          add.l     #97,D0
00004E34  0061      
00004E36  0480 0000 8710          sub.l     #10,D0
00004E3A  000A      
                    8711   @itoa_convert_4:
00004E3C  2042      8712          move.l    D2,A0
00004E3E  1080      8713          move.b    D0,(A0)
00004E40  2002      8714          move.l    D2,D0
00004E42  5280      8715          addq.l    #1,D0
00004E44  4CDF 003C 8716          movem.l   (A7)+,D2/D3/D4/D5
00004E48  4E5E      8717          unlk      A6
00004E4A  4E75      8718          rts
                    8719   _ltoa:
00004E4C  4E56 0000 8720          link      A6,#0
00004E50  48E7 3C00 8721          movem.l   D2/D3/D4/D5,-(A7)
00004E54  242E 0008 8722          move.l    8(A6),D2
00004E58  262E 000C 8723          move.l    12(A6),D3
00004E5C  2A2E 0010 8724          move.l    16(A6),D5
00004E60  2803      8725          move.l    D3,D4
00004E62  0C85 0000 8726          cmp.l     #2,D5
00004E66  0002      
00004E68  6D08      8727          blt.s     ltoa_3
00004E6A  0C85 0000 8728          cmp.l     #36,D5
00004E6E  0024      
00004E70  6F06      8729          ble.s     ltoa_1
                    8730   ltoa_3:
00004E72  2003      8731          move.l    D3,D0
00004E74  6000 0052 8732          bra       ltoa_4
                    8733   ltoa_1:
00004E78  0C85 0000 8734          cmp.l     #10,D5
00004E7C  000A      
00004E7E  6600 0032 8735          bne       ltoa_5
00004E82  0C82 0000 8736          cmp.l     #0,D2
00004E86  0000      
00004E88  6C28      8737          bge.s     ltoa_5
00004E8A  2002      8738          move.l    D2,D0
00004E8C  4480      8739          neg.l     D0
00004E8E  2400      8740          move.l    D0,D2
00004E90  0C82 0000 8741          cmp.l     #0,D2
00004E94  0000      
00004E96  6C12      8742          bge.s     ltoa_7
00004E98  4879 0000 8743          pea       @itoa_1
00004E9C  690E      
00004E9E  2F03      8744          move.l    D3,-(A7)
00004EA0  6100 EC22 8745          bsr       _strcpy
00004EA4  504F      8746          addq.w    #8,A7
00004EA6  2003      8747          move.l    D3,D0
00004EA8  601E      8748          bra.s     ltoa_4
                    8749   ltoa_7:
00004EAA  2044      8750          move.l    D4,A0
00004EAC  5284      8751          addq.l    #1,D4
00004EAE  10BC 002D 8752          move.b    #45,(A0)
                    8753   ltoa_5:
00004EB2  2F05      8754          move.l    D5,-(A7)
00004EB4  2F02      8755          move.l    D2,-(A7)
00004EB6  2F04      8756          move.l    D4,-(A7)
00004EB8  6100 FF20 8757          bsr       @itoa_convert
00004EBC  DEFC 000C 8758          add.w     #12,A7
00004EC0  2800      8759          move.l    D0,D4
00004EC2  2044      8760          move.l    D4,A0
00004EC4  4210      8761          clr.b     (A0)
00004EC6  2003      8762          move.l    D3,D0
                    8763   ltoa_4:
00004EC8  4CDF 003C 8764          movem.l   (A7)+,D2/D3/D4/D5
00004ECC  4E5E      8765          unlk      A6
00004ECE  4E75      8766          rts
                    8767   _ultoa:
00004ED0  4E56 0000 8768          link      A6,#0
00004ED4  48E7 3800 8769          movem.l   D2/D3/D4,-(A7)
00004ED8  262E 0010 8770          move.l    16(A6),D3
00004EDC  282E 000C 8771          move.l    12(A6),D4
00004EE0  2404      8772          move.l    D4,D2
00004EE2  0C83 0000 8773          cmp.l     #2,D3
00004EE6  0002      
00004EE8  6D08      8774          blt.s     ultoa_3
00004EEA  0C83 0000 8775          cmp.l     #36,D3
00004EEE  0024      
00004EF0  6F04      8776          ble.s     ultoa_1
                    8777   ultoa_3:
00004EF2  2004      8778          move.l    D4,D0
00004EF4  6018      8779          bra.s     ultoa_4
                    8780   ultoa_1:
00004EF6  2F03      8781          move.l    D3,-(A7)
00004EF8  2F2E 0008 8782          move.l    8(A6),-(A7)
00004EFC  2F02      8783          move.l    D2,-(A7)
00004EFE  6100 FEDA 8784          bsr       @itoa_convert
00004F02  DEFC 000C 8785          add.w     #12,A7
00004F06  2400      8786          move.l    D0,D2
00004F08  2042      8787          move.l    D2,A0
00004F0A  4210      8788          clr.b     (A0)
00004F0C  2004      8789          move.l    D4,D0
                    8790   ultoa_4:
00004F0E  4CDF 001C 8791          movem.l   (A7)+,D2/D3/D4
00004F12  4E5E      8792          unlk      A6
00004F14  4E75      8793          rts
                    8794   _itoa:
00004F16  4E56 0000 8795          link      A6,#0
00004F1A  2F2E 0010 8796          move.l    16(A6),-(A7)
00004F1E  2F2E 000C 8797          move.l    12(A6),-(A7)
00004F22  2F2E 0008 8798          move.l    8(A6),-(A7)
00004F26  6100 FF24 8799          bsr       _ltoa
00004F2A  DEFC 000C 8800          add.w     #12,A7
00004F2E  4E5E      8801          unlk      A6
00004F30  4E75      8802          rts
                    8803   _strlen:
00004F32  206F 0004 8804          move.l    (4,A7),A0
00004F36  2248      8805          move.l    A0,A1
                    8806   strlen_1:
00004F38  4A19      8807          tst.b     (A1)+
00004F3A  66FC      8808          bne       strlen_1
00004F3C  2009      8809          move.l    A1,D0
00004F3E  9088      8810          sub.l     A0,D0
00004F40  5380      8811          subq.l    #1,D0
00004F42  4E75      8812          rts
                    8813          section   const
                    8814   
                    8815   @m68kde~1_1:
00004F44  0D0A 00   8816          dc.b      13,10,0
                    8817   @m68kde~1_2:
00004F48  0D53 7769 8818          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004F4C  7463 6865 
00004F50  7320 5357 
00004F54  5B        
00004F55  372D 305D 8819          dc.b      55,45,48,93,32,61,32,0
00004F59  203D 2000 
                    8820   @m68kde~1_3:
00004F5E  3000      8821          dc.b      48,0
                    8822   @m68kde~1_4:
00004F60  3100      8823          dc.b      49,0
                    8824   @m68kde~1_5:
00004F62  0D0A 4475 8825          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004F66  6D70 204D 
00004F6A  656D 6F72 
00004F6E  79        
00004F6F  2042 6C6F 8826          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004F73  636B 3A20 
00004F77  3C45 5343 
00004F7B  3E20      
00004F7D  746F 2041 8827          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004F81  626F 7274 
00004F85  2C20 3C53 
00004F89  50        
00004F8A  4143 453E 8828          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004F8E  2074 6F20 
00004F92  436F 6E74 
00004F96  69        
00004F97  6E75 6500 8829          dc.b      110,117,101,0
                    8830   @m68kde~1_6:
00004F9C  0D0A 456E 8831          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004FA0  7465 7220 
00004FA4  5374 6172 
00004FA8  74        
00004FA9  2041 6464 8832          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004FAD  7265 7373 
00004FB1  3A20 00   
                    8833   @m68kde~1_7:
00004FB4  0D0A 2530 8834          dc.b      13,10,37,48,56,120,32,0
00004FB8  3878 2000 
                    8835   @m68kde~1_8:
00004FBC  2530 3258 8836          dc.b      37,48,50,88,0
00004FC0  00        
                    8837   @m68kde~1_9:
00004FC2  2020 00   8838          dc.b      32,32,0
                    8839   @m68kde~1_10:
00004FC6  0D0A 4669 8840          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004FCA  6C6C 204D 
00004FCE  656D 6F72 
00004FD2  79        
00004FD3  2042 6C6F 8841          dc.b      32,66,108,111,99,107,0
00004FD7  636B 00   
                    8842   @m68kde~1_11:
00004FDA  0D0A 456E 8843          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004FDE  7465 7220 
00004FE2  456E 6420 
00004FE6  41        
00004FE7  6464 7265 8844          dc.b      100,100,114,101,115,115,58,32,0
00004FEB  7373 3A20 
00004FEF  00        
                    8845   @m68kde~1_12:
00004FF0  0D0A 456E 8846          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004FF4  7465 7220 
00004FF8  4669 6C6C 
00004FFC  20        
00004FFD  4461 7461 8847          dc.b      68,97,116,97,58,32,0
00005001  3A20 00   
                    8848   @m68kde~1_13:
00005004  0D0A 4669 8849          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00005008  6C6C 696E 
0000500C  6720 4164 
00005010  64        
00005011  7265 7373 8850          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00005015  6573 205B 
00005019  2425 3038 
0000501D  58        
0000501E  202D 2024 8851          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00005022  2530 3858 
00005026  5D20 7769 
0000502A  7468      
0000502C  2024 2530 8852          dc.b      32,36,37,48,50,88,0
00005030  3258 00   
                    8853   @m68kde~1_14:
00005034  0D0A 5573 8854          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00005038  6520 4879 
0000503C  7065 7254 
00005040  65        
00005041  726D 696E 8855          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00005045  616C 2074 
00005049  6F20 5365 
0000504D  6E64 2054 8856          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00005051  6578 7420 
00005055  4669 6C65 
00005059  2028 2E68 8857          dc.b      32,40,46,104,101,120,41,13,10,0
0000505D  6578 290D 
00005061  0A00      
                    8858   @m68kde~1_15:
00005064  0D0A 4C6F 8859          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00005068  6164 2046 
0000506C  6169 6C65 
00005070  64        
00005071  2061 7420 8860          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00005075  4164 6472 
00005079  6573 7320 
0000507D  3D        
0000507E  205B 2425 8861          dc.b      32,91,36,37,48,56,88,93,13,10,0
00005082  3038 585D 
00005086  0D0A 00   
                    8862   @m68kde~1_16:
0000508A  0D0A 5375 8863          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
0000508E  6363 6573 
00005092  733A 2044 
00005096  6F        
00005097  776E 6C6F 8864          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
0000509B  6164 6564 
0000509F  2025 6420 
000050A3  6279 7465 8865          dc.b      98,121,116,101,115,13,10,0
000050A7  730D 0A00 
                    8866   @m68kde~1_17:
000050AC  0D0A 4578 8867          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
000050B0  616D 696E 
000050B4  6520 616E 
000050B8  64        
000050B9  2043 6861 8868          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
000050BD  6E67 6520 
000050C1  4D65 6D6F 
000050C5  72        
000050C6  7900      8869          dc.b      121,0
                    8870   @m68kde~1_18:
000050C8  0D0A 3C45 8871          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
000050CC  5343 3E20 
000050D0  746F 2053 
000050D4  746F      
000050D6  702C 203C 8872          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000050DA  5350 4143 
000050DE  453E 2074 
000050E2  6F20      
000050E4  4164 7661 8873          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000050E8  6E63 652C 
000050EC  2027 2D27 
000050F0  2074      
000050F2  6F20 476F 8874          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000050F6  2042 6163 
000050FA  6B2C 203C 
000050FE  4441      
00005100  5441 3E20 8875          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00005104  746F 2063 
00005108  6861 6E67 
0000510C  65        
0000510D  00        8876          dc.b      0
                    8877   @m68kde~1_19:
0000510E  0D0A 456E 8878          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00005112  7465 7220 
00005116  4164 6472 
0000511A  65        
0000511B  7373 3A20 8879          dc.b      115,115,58,32,0
0000511F  00        
                    8880   @m68kde~1_20:
00005120  0D0A 5B25 8881          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00005124  3038 785D 
00005128  203A 2025 
0000512C  3032 78   
0000512F  2020 00   8882          dc.b      32,32,0
                    8883   @m68kde~1_21:
00005132  0D0A 5761 8884          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00005136  726E 696E 
0000513A  6720 4368 
0000513E  61        
0000513F  6E67 6520 8885          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00005143  4661 696C 
00005147  6564 3A20 
0000514B  57        
0000514C  726F 7465 8886          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00005150  205B 2530 
00005154  3278 5D2C 
00005158  20        
00005159  5265 6164 8887          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
0000515D  205B 2530 
00005161  3278 5D00 
                    8888   @m68kde~1_22:
00005166  0A45 7261 8889          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
0000516A  7369 6E67 
0000516E  2E2E 2E0A 
00005172  00        
                    8890   @m68kde~1_23:
00005174  0D0A 2050 8891          dc.b      13,10,32,80,114,111,103,114,97,109,109,105,110
00005178  726F 6772 
0000517C  616D 6D69 
00005180  6E        
00005181  6720 436F 8892          dc.b      103,32,67,111,109,112,108,101,116,101,33,0
00005185  6D70 6C65 
00005189  7465 2100 
                    8893   @m68kde~1_24:
0000518E  0D0A 204C 8894          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
00005192  6F61 6469 
00005196  6E67 2050 
0000519A  72        
0000519B  6F67 7261 8895          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
0000519F  6D20 4672 
000051A3  6F6D 2053 
000051A7  50        
000051A8  4920 466C 8896          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
000051AC  6173 682E 
000051B0  2E2E 2E00 
                    8897   @m68kde~1_25:
000051B4  0D0A 2052 8898          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
000051B8  6561 6420 
000051BC  4461 7461 
000051C0  3A20      
000051C2  2530 3878 8899          dc.b      37,48,56,120,32,10,0
000051C6  200A 00   
                    8900   @m68kde~1_26:
000051CA  4949 435F 8901          dc.b      73,73,67,95,67,82,83,82,32,84,114,97,110,115
000051CE  4352 5352 
000051D2  2054 7261 
000051D6  6E73      
000051D8  6D69 7420 8902          dc.b      109,105,116,32,40,66,105,110,97,114,121,41,58
000051DC  2842 696E 
000051E0  6172 7929 
000051E4  3A        
000051E5  2000      8903          dc.b      32,0
                    8904   @m68kde~1_27:
000051E8  2564 00   8905          dc.b      37,100,0
                    8906   @m68kde~1_28:
000051EC  0A00      8907          dc.b      10,0
                    8908   @m68kde~1_29:
000051EE  4545 5052 8909          dc.b      69,69,80,82,79,77,32,70,108,97,115,104,32,80
000051F2  4F4D 2046 
000051F6  6C61 7368 
000051FA  2050      
000051FC  6167 6520 8910          dc.b      97,103,101,32,87,114,105,116,101,58,32,83,116
00005200  5772 6974 
00005204  653A 2053 
00005208  74        
00005209  6172 7420 8911          dc.b      97,114,116,32,65,100,100,114,101,115,115,58
0000520D  4164 6472 
00005211  6573 733A 
00005215  2030 7825 8912          dc.b      32,48,120,37,120,44,32,110,117,109,98,121,116
00005219  782C 206E 
0000521D  756D 6279 
00005221  74        
00005222  6573 3A20 8913          dc.b      101,115,58,32,37,100,10,0
00005226  2564 0A00 
                    8914   @m68kde~1_30:
0000522A  0D0A 2042 8915          dc.b      13,10,32,66,108,111,99,107,32,48,32,65,100,100
0000522E  6C6F 636B 
00005232  2030 2041 
00005236  6464      
00005238  7265 7373 8916          dc.b      114,101,115,115,58,32,48,120,37,48,52,88,58
0000523C  3A20 3078 
00005240  2530 3458 
00005244  3A        
00005245  2025 640A 8917          dc.b      32,37,100,10,0
00005249  00        
                    8918   @m68kde~1_31:
0000524A  0D0A 2045 8919          dc.b      13,10,32,69,120,105,116,105,110,103,32,69,69
0000524E  7869 7469 
00005252  6E67 2045 
00005256  45        
00005257  5052 4F4D 8920          dc.b      80,82,79,77,32,82,101,97,100,32,66,108,111,99
0000525B  2052 6561 
0000525F  6420 426C 
00005263  6F63      
00005265  6B20 300A 8921          dc.b      107,32,48,10,0
00005269  00        
                    8922   @m68kde~1_32:
0000526A  0D0A 2042 8923          dc.b      13,10,32,66,108,111,99,107,32,49,32,65,100,100
0000526E  6C6F 636B 
00005272  2031 2041 
00005276  6464      
00005278  7265 7373 8924          dc.b      114,101,115,115,58,32,48,120,37,48,52,88,58
0000527C  3A20 3078 
00005280  2530 3458 
00005284  3A        
00005285  2025 640A 8925          dc.b      32,37,100,10,0
00005289  00        
                    8926   @m68kde~1_33:
0000528A  0D0A 2045 8927          dc.b      13,10,32,69,120,105,116,105,110,103,32,69,69
0000528E  7869 7469 
00005292  6E67 2045 
00005296  45        
00005297  5052 4F4D 8928          dc.b      80,82,79,77,32,82,101,97,100,32,66,108,111,99
0000529B  2052 6561 
0000529F  6420 426C 
000052A3  6F63      
000052A5  6B20 310A 8929          dc.b      107,32,49,10,0
000052A9  00        
                    8930   @m68kde~1_34:
000052AA  0D0A 2049 8931          dc.b      13,10,32,73,50,67,32,84,101,115,116,10,0
000052AE  3243 2054 
000052B2  6573 740A 
000052B6  00        
                    8932   @m68kde~1_35:
000052B8  0D0A 496E 8933          dc.b      13,10,73,110,105,116,105,97,108,105,122,105
000052BC  6974 6961 
000052C0  6C69 7A69 
000052C4  6E67 2049 8934          dc.b      110,103,32,73,50,67,46,46,46,10,0
000052C8  3243 2E2E 
000052CC  2E0A 00   
                    8935   @m68kde~1_36:
000052D0  0D0A 4368 8936          dc.b      13,10,67,104,111,111,115,101,32,111,112,116
000052D4  6F6F 7365 
000052D8  206F 7074 
000052DC  696F 6E3A 8937          dc.b      105,111,110,58,10,0
000052E0  0A00      
                    8938   @m68kde~1_37:
000052E2  3120 5265 8939          dc.b      49,32,82,101,97,100,32,83,105,110,103,108,101
000052E6  6164 2053 
000052EA  696E 676C 
000052EE  65        
000052EF  2042 7974 8940          dc.b      32,66,121,116,101,32,102,114,111,109,32,69,69
000052F3  6520 6672 
000052F7  6F6D 2045 
000052FB  45        
000052FC  5052 4F4D 8941          dc.b      80,82,79,77,10,0
00005300  0A00      
                    8942   @m68kde~1_38:
00005302  3220 5772 8943          dc.b      50,32,87,114,105,116,101,32,83,105,110,103,108
00005306  6974 6520 
0000530A  5369 6E67 
0000530E  6C        
0000530F  6520 4279 8944          dc.b      101,32,66,121,116,101,32,116,111,32,69,69,80
00005313  7465 2074 
00005317  6F20 4545 
0000531B  50        
0000531C  524F 4D0A 8945          dc.b      82,79,77,10,0
00005320  00        
                    8946   @m68kde~1_39:
00005322  3320 5265 8947          dc.b      51,32,82,101,97,100,32,66,108,111,99,107,32
00005326  6164 2042 
0000532A  6C6F 636B 
0000532E  20        
0000532F  6F66 2044 8948          dc.b      111,102,32,68,97,116,97,32,102,114,111,109,32
00005333  6174 6120 
00005337  6672 6F6D 
0000533B  20        
0000533C  4545 5052 8949          dc.b      69,69,80,82,79,77,10,0
00005340  4F4D 0A00 
                    8950   @m68kde~1_40:
00005344  3420 5772 8951          dc.b      52,32,87,114,105,116,101,32,66,108,111,99,107
00005348  6974 6520 
0000534C  426C 6F63 
00005350  6B        
00005351  206F 6620 8952          dc.b      32,111,102,32,68,97,116,97,32,116,111,32,69
00005355  4461 7461 
00005359  2074 6F20 
0000535D  45        
0000535E  4550 524F 8953          dc.b      69,80,82,79,77,10,0
00005362  4D0A 00   
                    8954   @m68kde~1_41:
00005366  0D0A 5265 8955          dc.b      13,10,82,101,97,100,32,83,105,110,103,108,101
0000536A  6164 2053 
0000536E  696E 676C 
00005372  65        
00005373  2042 7974 8956          dc.b      32,66,121,116,101,10,0
00005377  650A 00   
                    8957   @m68kde~1_42:
0000537A  456E 7465 8958          dc.b      69,110,116,101,114,32,97,100,100,114,101,115
0000537E  7220 6164 
00005382  6472 6573 
00005386  7320 2868 8959          dc.b      115,32,40,104,101,120,41,58,32,48,120,0
0000538A  6578 293A 
0000538E  2030 7800 
                    8960   @m68kde~1_43:
00005392  0D0A 5265 8961          dc.b      13,10,82,101,97,100,32,102,114,111,109,32,97
00005396  6164 2066 
0000539A  726F 6D20 
0000539E  61        
0000539F  6464 7265 8962          dc.b      100,100,114,101,115,115,32,48,120,37,88,58,32
000053A3  7373 2030 
000053A7  7825 583A 
000053AB  20        
000053AC  3078 2530 8963          dc.b      48,120,37,48,50,88,10,0
000053B0  3258 0A00 
                    8964   @m68kde~1_44:
000053B4  0D0A 5772 8965          dc.b      13,10,87,114,105,116,101,32,83,105,110,103,108
000053B8  6974 6520 
000053BC  5369 6E67 
000053C0  6C        
000053C1  6520 4279 8966          dc.b      101,32,66,121,116,101,10,0
000053C5  7465 0A00 
                    8967   @m68kde~1_45:
000053CA  0D0A 456E 8968          dc.b      13,10,69,110,116,101,114,32,97,100,100,114,101
000053CE  7465 7220 
000053D2  6164 6472 
000053D6  65        
000053D7  7373 2028 8969          dc.b      115,115,32,40,104,101,120,41,58,32,48,120,0
000053DB  6865 7829 
000053DF  3A20 3078 
000053E3  00        
                    8970   @m68kde~1_46:
000053E4  0A45 6E74 8971          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000053E8  6572 2077 
000053EC  6869 6368 
000053F0  2064 6174 8972          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000053F4  6120 7061 
000053F8  7474 6572 
000053FC  6E        
000053FD  2079 6F75 8973          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005401  2077 616E 
00005405  7420 746F 
00005409  2077 7269 8974          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000540D  7465 2069 
00005411  6E74 6F20 
00005415  6D65 6D6F 8975          dc.b      109,101,109,111,114,121,58,10,0
00005419  7279 3A0A 
0000541D  00        
                    8976   @m68kde~1_47:
0000541E  2030 3A20 8977          dc.b      32,48,58,32,48,120,48,48,10,32,49,58,32,48,120
00005422  3078 3030 
00005426  0A20 313A 
0000542A  2030 78   
0000542D  4232 0A20 8978          dc.b      66,50,10,32,50,58,32,48,120,67,51,10,32,51,58
00005431  323A 2030 
00005435  7843 330A 
00005439  2033 3A   
0000543C  2030 7844 8979          dc.b      32,48,120,68,52,10,32,52,58,32,67,117,115,116
00005440  340A 2034 
00005444  3A20 4375 
00005448  7374      
0000544A  6F6D 2076 8980          dc.b      111,109,32,118,97,108,117,101,10,0
0000544E  616C 7565 
00005452  0A00      
                    8981   @m68kde~1_48:
00005454  5365 6C65 8982          dc.b      83,101,108,101,99,116,32,112,97,116,116,101
00005458  6374 2070 
0000545C  6174 7465 
00005460  726E 00   8983          dc.b      114,110,0
                    8984   @m68kde~1_49:
00005464  5772 6F74 8985          dc.b      87,114,111,116,101,32,48,120,37,48,50,88,32
00005468  6520 3078 
0000546C  2530 3258 
00005470  20        
00005471  746F 2061 8986          dc.b      116,111,32,97,100,100,114,101,115,115,32,48
00005475  6464 7265 
00005479  7373 2030 
0000547D  7825 580A 8987          dc.b      120,37,88,10,0
00005481  00        
                    8988   @m68kde~1_50:
00005482  5265 6164 8989          dc.b      82,101,97,100,32,98,97,99,107,58,32,48,120,37
00005486  2062 6163 
0000548A  6B3A 2030 
0000548E  7825      
00005490  3032 580A 8990          dc.b      48,50,88,10,0
00005494  00        
                    8991   @m68kde~1_51:
00005496  0D0A 5265 8992          dc.b      13,10,82,101,97,100,32,66,108,111,99,107,32
0000549A  6164 2042 
0000549E  6C6F 636B 
000054A2  20        
000054A3  6F66 2044 8993          dc.b      111,102,32,68,97,116,97,10,0
000054A7  6174 610A 
000054AB  00        
                    8994   @m68kde~1_52:
000054AC  456E 7465 8995          dc.b      69,110,116,101,114,32,115,116,97,114,116,32
000054B0  7220 7374 
000054B4  6172 7420 
000054B8  6164 6472 8996          dc.b      97,100,100,114,101,115,115,32,40,104,101,120
000054BC  6573 7320 
000054C0  2868 6578 
000054C4  293A 2030 8997          dc.b      41,58,32,48,120,0
000054C8  7800      
                    8998   @m68kde~1_53:
000054CA  0D0A 456E 8999          dc.b      13,10,69,110,116,101,114,32,110,117,109,98,101
000054CE  7465 7220 
000054D2  6E75 6D62 
000054D6  65        
000054D7  7220 6F66 9000          dc.b      114,32,111,102,32,98,121,116,101,115,32,116
000054DB  2062 7974 
000054DF  6573 2074 
000054E3  6F20 7265 9001          dc.b      111,32,114,101,97,100,32,40,104,101,120,41,58
000054E7  6164 2028 
000054EB  6865 7829 
000054EF  3A        
000054F0  2030 7800 9002          dc.b      32,48,120,0
                    9003   @m68kde~1_54:
000054F4  0D0A 5265 9004          dc.b      13,10,82,101,97,100,105,110,103,32,48,120,37
000054F8  6164 696E 
000054FC  6720 3078 
00005500  25        
00005501  5820 2825 9005          dc.b      88,32,40,37,100,41,32,98,121,116,101,115,32
00005505  6429 2062 
00005509  7974 6573 
0000550D  20        
0000550E  7374 6172 9006          dc.b      115,116,97,114,116,105,110,103,32,102,114,111
00005512  7469 6E67 
00005516  2066 726F 
0000551A  6D20 6164 9007          dc.b      109,32,97,100,100,114,101,115,115,32,48,120
0000551E  6472 6573 
00005522  7320 3078 
00005526  2558 2E2E 9008          dc.b      37,88,46,46,46,10,0
0000552A  2E0A 00   
                    9009   @m68kde~1_55:
0000552E  0D0A 5772 9010          dc.b      13,10,87,114,105,116,101,32,66,108,111,99,107
00005532  6974 6520 
00005536  426C 6F63 
0000553A  6B        
0000553B  206F 6620 9011          dc.b      32,111,102,32,68,97,116,97,10,0
0000553F  4461 7461 
00005543  0A00      
                    9012   @m68kde~1_56:
00005546  0D0A 456E 9013          dc.b      13,10,69,110,116,101,114,32,110,117,109,98,101
0000554A  7465 7220 
0000554E  6E75 6D62 
00005552  65        
00005553  7220 6F66 9014          dc.b      114,32,111,102,32,98,121,116,101,115,32,116
00005557  2062 7974 
0000555B  6573 2074 
0000555F  6F20 7772 9015          dc.b      111,32,119,114,105,116,101,32,40,104,101,120
00005563  6974 6520 
00005567  2868 6578 
0000556B  293A 2030 9016          dc.b      41,58,32,48,120,0
0000556F  7800      
                    9017   @m68kde~1_57:
00005572  0D0A 456E 9018          dc.b      13,10,69,110,116,101,114,32,119,104,105,99,104
00005576  7465 7220 
0000557A  7768 6963 
0000557E  68        
0000557F  2064 6174 9019          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005583  6120 7061 
00005587  7474 6572 
0000558B  6E        
0000558C  2079 6F75 9020          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005590  2077 616E 
00005594  7420 746F 
00005598  2077 7269 9021          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000559C  7465 2069 
000055A0  6E74 6F20 
000055A4  6D65 6D6F 9022          dc.b      109,101,109,111,114,121,58,10,0
000055A8  7279 3A0A 
000055AC  00        
                    9023   @m68kde~1_58:
000055AE  2030 3A20 9024          dc.b      32,48,58,32,48,120,48,48,10,32,49,58,32,48,120
000055B2  3078 3030 
000055B6  0A20 313A 
000055BA  2030 78   
000055BD  4232 0A20 9025          dc.b      66,50,10,32,50,58,32,48,120,67,51,10,32,51,58
000055C1  323A 2030 
000055C5  7843 330A 
000055C9  2033 3A   
000055CC  2030 7844 9026          dc.b      32,48,120,68,52,10,32,52,58,32,73,110,99,114
000055D0  340A 2034 
000055D4  3A20 496E 
000055D8  6372      
000055DA  656D 656E 9027          dc.b      101,109,101,110,116,105,110,103,32,112,97,116
000055DE  7469 6E67 
000055E2  2070 6174 
000055E6  7465 726E 9028          dc.b      116,101,114,110,10,0
000055EA  0A00      
                    9029   @m68kde~1_59:
000055EC  5365 6C65 9030          dc.b      83,101,108,101,99,116,101,100,32,105,110,99
000055F0  6374 6564 
000055F4  2069 6E63 
000055F8  7265 6D65 9031          dc.b      114,101,109,101,110,116,105,110,103,32,112,97
000055FC  6E74 696E 
00005600  6720 7061 
00005604  7474 6572 9032          dc.b      116,116,101,114,110,32,40,97,100,100,114,101
00005608  6E20 2861 
0000560C  6464 7265 
00005610  7373 2026 9033          dc.b      115,115,32,38,32,48,120,70,70,41,10,0
00005614  2030 7846 
00005618  4629 0A00 
                    9034   @m68kde~1_60:
0000561C  5365 6C65 9035          dc.b      83,101,108,101,99,116,101,100,32,112,97,116
00005620  6374 6564 
00005624  2070 6174 
00005628  7465 726E 9036          dc.b      116,101,114,110,58,32,48,120,37,48,50,88,10
0000562C  3A20 3078 
00005630  2530 3258 
00005634  0A        
00005635  00        9037          dc.b      0
                    9038   @m68kde~1_61:
00005636  0D0A 5072 9039          dc.b      13,10,80,114,101,112,97,114,105,110,103,32,116
0000563A  6570 6172 
0000563E  696E 6720 
00005642  74        
00005643  6F20 7772 9040          dc.b      111,32,119,114,105,116,101,32,48,120,37,88,32
00005647  6974 6520 
0000564B  3078 2558 
0000564F  20        
00005650  2825 6429 9041          dc.b      40,37,100,41,32,98,121,116,101,115,32,111,102
00005654  2062 7974 
00005658  6573 206F 
0000565C  66        
0000565D  2064 6174 9042          dc.b      32,100,97,116,97,32,115,116,97,114,116,105,110
00005661  6120 7374 
00005665  6172 7469 
00005669  6E        
0000566A  6720 6174 9043          dc.b      103,32,97,116,32,97,100,100,114,101,115,115
0000566E  2061 6464 
00005672  7265 7373 
00005676  2030 7825 9044          dc.b      32,48,120,37,88,46,46,46,10,0
0000567A  582E 2E2E 
0000567E  0A00      
                    9045   @m68kde~1_62:
00005680  0D50 7269 9046          dc.b      13,80,114,105,110,116,105,110,103,32,69,110
00005684  6E74 696E 
00005688  6720 456E 
0000568C  7469 7265 9047          dc.b      116,105,114,101,32,69,69,80,82,79,77,10,0
00005690  2045 4550 
00005694  524F 4D0A 
00005698  00        
                    9048   @m68kde~1_63:
0000569A  5065 7266 9049          dc.b      80,101,114,102,111,114,109,105,110,103,32,65
0000569E  6F72 6D69 
000056A2  6E67 2041 
000056A6  4443 2052 9050          dc.b      68,67,32,82,101,97,100,10,0
000056AA  6561 640A 
000056AE  00        
                    9051   @m68kde~1_64:
000056B0  0D0A 204C 9052          dc.b      13,10,32,76,105,103,104,116,58,32,37,100,10
000056B4  6967 6874 
000056B8  3A20 2564 
000056BC  0A        
000056BD  00        9053          dc.b      0
                    9054   @m68kde~1_65:
000056BE  0D0A 2045 9055          dc.b      13,10,32,69,120,116,101,114,110,97,108,58,32
000056C2  7874 6572 
000056C6  6E61 6C3A 
000056CA  20        
000056CB  2564 0A00 9056          dc.b      37,100,10,0
                    9057   @m68kde~1_66:
000056D0  0D0A 2050 9058          dc.b      13,10,32,80,111,116,101,110,116,105,111,109
000056D4  6F74 656E 
000056D8  7469 6F6D 
000056DC  6574 6572 9059          dc.b      101,116,101,114,58,32,37,100,10,0
000056E0  3A20 2564 
000056E4  0A00      
                    9060   @m68kde~1_67:
000056E6  0D0A 2054 9061          dc.b      13,10,32,84,104,101,114,109,105,115,116,111
000056EA  6865 726D 
000056EE  6973 746F 
000056F2  723A 2025 9062          dc.b      114,58,32,37,100,10,0
000056F6  640A 00   
                    9063   @m68kde~1_68:
000056FA  0A0A 0A0A 9064          dc.b      10,10,10,10,10,0
000056FE  0A00      
                    9065   @m68kde~1_69:
00005700  2425 3038 9066          dc.b      36,37,48,56,88,32,32,0
00005704  5820 2000 
                    9067   @m68kde~1_70:
00005708  2000      9068          dc.b      32,0
                    9069   @m68kde~1_71:
0000570A  2E00      9070          dc.b      46,0
                    9071   @m68kde~1_72:
0000570C  2563 00   9072          dc.b      37,99,0
                    9073   @m68kde~1_73:
00005710  00        9074          dc.b      0
                    9075   @m68kde~1_74:
00005712  0D0A 0D0A 9076          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00005716  2044 3020 
0000571A  3D20 2425 
0000571E  3038 58   
00005721  2020 4130 9077          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00005725  203D 2024 
00005729  2530 3858 
0000572D  00        
                    9078   @m68kde~1_75:
0000572E  0D0A 2044 9079          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00005732  3120 3D20 
00005736  2425 3038 
0000573A  5820 20   
0000573D  4131 203D 9080          dc.b      65,49,32,61,32,36,37,48,56,88,0
00005741  2024 2530 
00005745  3858 00   
                    9081   @m68kde~1_76:
00005748  0D0A 2044 9082          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
0000574C  3220 3D20 
00005750  2425 3038 
00005754  5820 20   
00005757  4132 203D 9083          dc.b      65,50,32,61,32,36,37,48,56,88,0
0000575B  2024 2530 
0000575F  3858 00   
                    9084   @m68kde~1_77:
00005762  0D0A 2044 9085          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00005766  3320 3D20 
0000576A  2425 3038 
0000576E  5820 20   
00005771  4133 203D 9086          dc.b      65,51,32,61,32,36,37,48,56,88,0
00005775  2024 2530 
00005779  3858 00   
                    9087   @m68kde~1_78:
0000577C  0D0A 2044 9088          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00005780  3420 3D20 
00005784  2425 3038 
00005788  5820 20   
0000578B  4134 203D 9089          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000578F  2024 2530 
00005793  3858 00   
                    9090   @m68kde~1_79:
00005796  0D0A 2044 9091          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
0000579A  3520 3D20 
0000579E  2425 3038 
000057A2  5820 20   
000057A5  4135 203D 9092          dc.b      65,53,32,61,32,36,37,48,56,88,0
000057A9  2024 2530 
000057AD  3858 00   
                    9093   @m68kde~1_80:
000057B0  0D0A 2044 9094          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000057B4  3620 3D20 
000057B8  2425 3038 
000057BC  5820 20   
000057BF  4136 203D 9095          dc.b      65,54,32,61,32,36,37,48,56,88,0
000057C3  2024 2530 
000057C7  3858 00   
                    9096   @m68kde~1_81:
000057CA  0D0A 2044 9097          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000057CE  3720 3D20 
000057D2  2425 3038 
000057D6  5820 20   
000057D9  4137 203D 9098          dc.b      65,55,32,61,32,36,37,48,56,88,0
000057DD  2024 2530 
000057E1  3858 00   
                    9099   @m68kde~1_82:
000057E4  0D0A 0D0A 9100          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000057E8  5553 5020 
000057EC  3D20 2425 
000057F0  3038 58   
000057F3  2020 2841 9101          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000057F7  3729 2055 
000057FB  7365 7220 
000057FF  5350      
00005801  00        9102          dc.b      0
                    9103   @m68kde~1_83:
00005802  0D0A 5353 9104          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00005806  5020 3D20 
0000580A  2425 3038 
0000580E  5820 20   
00005811  2841 3729 9105          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00005815  2053 7570 
00005819  6572 7669 
0000581D  73        
0000581E  6F72 2053 9106          dc.b      111,114,32,83,80,0
00005822  5000      
                    9107   @m68kde~1_84:
00005824  0D0A 2053 9108          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00005828  5220 3D20 
0000582C  2425 3034 
00005830  5820 20   
00005833  2000      9109          dc.b      32,0
                    9110   @m68kde~1_85:
00005836  2020 205B 9111          dc.b      32,32,32,91,0
0000583A  00        
                    9112   @m68kde~1_86:
0000583C  0D0A 2050 9113          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00005840  4320 3D20 
00005844  2425 3038 
00005848  5820 20   
0000584B  00        9114          dc.b      0
                    9115   @m68kde~1_87:
0000584C  5B40 2042 9116          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00005850  5245 414B 
00005854  504F 494E 
00005858  545D 00   
                    9117   @m68kde~1_88:
0000585C  0D0A 5750 9118          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00005860  2564 203D 
00005864  2025 7300 
                    9119   @m68kde~1_89:
00005868  0D0A 0D0A 9120          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000586C  0D0A 0D0A 
00005870  0D0A 0D0A 
00005874  5369 6E   
00005877  676C 6520 9121          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
0000587B  5374 6570 
0000587F  2020 3A5B 
00005883  4F        
00005884  4E5D 00   9122          dc.b      78,93,0
                    9123   @m68kde~1_90:
00005888  0D0A 4272 9124          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000588C  6561 6B20 
00005890  506F 696E 
00005894  74        
00005895  7320 3A5B 9125          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00005899  4469 7361 
0000589D  626C 6564 
000058A1  5D        
000058A2  00        9126          dc.b      0
                    9127   @m68kde~1_91:
000058A4  0D0A 5072 9128          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000058A8  6573 7320 
000058AC  3C53 5041 
000058B0  4345      
000058B2  3E20 746F 9129          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000058B6  2045 7865 
000058BA  6375 7465 
000058BE  20        
000058BF  4E65 7874 9130          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000058C3  2049 6E73 
000058C7  7472 7563 
000058CB  7469 6F6E 9131          dc.b      116,105,111,110,0
000058CF  00        
                    9132   @m68kde~1_92:
000058D0  0D0A 5072 9133          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000058D4  6573 7320 
000058D8  3C45 5343 
000058DC  3E20      
000058DE  746F 2052 9134          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000058E2  6573 756D 
000058E6  6520 5072 
000058EA  6F67 7261 9135          dc.b      111,103,114,97,109,0
000058EE  6D00      
                    9136   @m68kde~1_93:
000058F0  0D0A 496C 9137          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000058F4  6C65 6761 
000058F8  6C20 4461 
000058FC  74        
000058FD  6120 5265 9138          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00005901  6769 7374 
00005905  6572 203A 
00005909  20        
0000590A  5573 6520 9139          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
0000590E  4430 2D44 
00005912  372E 2E2E 
00005916  2E2E      
00005918  0D0A 00   9140          dc.b      13,10,0
                    9141   @m68kde~1_94:
0000591C  0D0A 4425 9142          dc.b      13,10,68,37,99,32,61,32,0
00005920  6320 3D20 
00005924  00        
                    9143   @m68kde~1_95:
00005926  0D0A 496C 9144          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
0000592A  6C65 6761 
0000592E  6C20 4164 
00005932  64        
00005933  7265 7373 9145          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00005937  2052 6567 
0000593B  6973 7465 
0000593F  7220 3A20 9146          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00005943  5573 6520 
00005947  4130 2D41 
0000594B  372E      
0000594D  2E2E 2E2E 9147          dc.b      46,46,46,46,13,10,0
00005951  0D0A 00   
                    9148   @m68kde~1_96:
00005954  0D0A 4125 9149          dc.b      13,10,65,37,99,32,61,32,0
00005958  6320 3D20 
0000595C  00        
                    9150   @m68kde~1_97:
0000595E  0D0A 5573 9151          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00005962  6572 2053 
00005966  5020 3D20 
0000596A  00        
                    9152   @m68kde~1_98:
0000596C  0D0A 496C 9153          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00005970  6C65 6761 
00005974  6C20 5265 
00005978  67        
00005979  6973 7465 9154          dc.b      105,115,116,101,114,46,46,46,46,0
0000597D  722E 2E2E 
00005981  2E00      
                    9155   @m68kde~1_99:
00005984  0D0A 5379 9156          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00005988  7374 656D 
0000598C  2053 5020 
00005990  3D        
00005991  2000      9157          dc.b      32,0
                    9158   @m68kde~1_100:
00005994  0D0A 5043 9159          dc.b      13,10,80,67,32,61,32,0
00005998  203D 2000 
                    9160   @m68kde~1_101:
0000599C  0D0A 5352 9161          dc.b      13,10,83,82,32,61,32,0
000059A0  203D 2000 
                    9162   @m68kde~1_102:
000059A4  0D0A 496C 9163          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000059A8  6C65 6761 
000059AC  6C20 5265 
000059B0  67        
000059B1  6973 7465 9164          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000059B5  723A 2055 
000059B9  7365 2041 
000059BD  30        
000059BE  2D41 372C 9165          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000059C2  2044 302D 
000059C6  4437 2C20 
000059CA  5353 50   
000059CD  2C20 5553 9166          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000059D1  502C 2050 
000059D5  4320 6F72 
000059D9  2053      
000059DB  520D 0A00 9167          dc.b      82,13,10,0
                    9168   @m68kde~1_103:
000059E0  0D0A 0D0A 9169          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000059E4  4E75 6D20 
000059E8  2020 2020 
000059EC  4164      
000059EE  6472 6573 9170          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000059F2  7320 2020 
000059F6  2020 2049 
000059FA  6E        
000059FB  7374 7275 9171          dc.b      115,116,114,117,99,116,105,111,110,0
000059FF  6374 696F 
00005A03  6E00      
                    9172   @m68kde~1_104:
00005A06  0D0A 2D2D 9173          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00005A0A  2D20 2020 
00005A0E  2020 2D2D 
00005A12  2D2D 2D   
00005A15  2D2D 2D2D 9174          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00005A19  2020 2020 
00005A1D  2D2D 2D2D 
00005A21  2D2D 2D   
00005A24  2D2D 2D2D 9175          dc.b      45,45,45,45,0
00005A28  00        
                    9176   @m68kde~1_105:
00005A2A  0D0A 4E6F 9177          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00005A2E  2042 7265 
00005A32  616B 506F 
00005A36  69        
00005A37  6E74 7320 9178          dc.b      110,116,115,32,83,101,116,0
00005A3B  5365 7400 
                    9179   @m68kde~1_106:
00005A40  0D0A 2533 9180          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00005A44  6420 2020 
00005A48  2020 2425 
00005A4C  3038 78   
00005A4F  00        9181          dc.b      0
                    9182   @m68kde~1_107:
00005A50  0D0A 4E75 9183          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00005A54  6D20 2020 
00005A58  2020 4164 
00005A5C  6472      
00005A5E  6573 7300 9184          dc.b      101,115,115,0
                    9185   @m68kde~1_108:
00005A62  0D0A 2D2D 9186          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00005A66  2D20 2020 
00005A6A  2020 2D2D 
00005A6E  2D2D 2D   
00005A71  2D2D 2D2D 9187          dc.b      45,45,45,45,0
00005A75  00        
                    9188   @m68kde~1_109:
00005A76  0D0A 4E6F 9189          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00005A7A  2057 6174 
00005A7E  6368 506F 
00005A82  69        
00005A83  6E74 7320 9190          dc.b      110,116,115,32,83,101,116,0
00005A87  5365 7400 
                    9191   @m68kde~1_110:
00005A8C  0D0A 456E 9192          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00005A90  7465 7220 
00005A94  4272 6561 
00005A98  6B        
00005A99  2050 6F69 9193          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00005A9D  6E74 204E 
00005AA1  756D 6265 
00005AA5  72        
00005AA6  3A20 00   9194          dc.b      58,32,0
                    9195   @m68kde~1_111:
00005AAA  0D0A 496C 9196          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00005AAE  6C65 6761 
00005AB2  6C20 5261 
00005AB6  6E        
00005AB7  6765 203A 9197          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00005ABB  2055 7365 
00005ABF  2030 202D 
00005AC3  2037      
00005AC5  00        9198          dc.b      0
                    9199   @m68kde~1_112:
00005AC6  0D0A 4272 9200          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005ACA  6561 6B20 
00005ACE  506F 696E 
00005AD2  74        
00005AD3  2043 6C65 9201          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00005AD7  6172 6564 
00005ADB  2E2E 2E2E 
00005ADF  2E        
00005AE0  0D0A 00   9202          dc.b      13,10,0
                    9203   @m68kde~1_113:
00005AE4  0D0A 4272 9204          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005AE8  6561 6B20 
00005AEC  506F 696E 
00005AF0  74        
00005AF1  2077 6173 9205          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00005AF5  6E27 7420 
00005AF9  5365 742E 
00005AFD  2E        
00005AFE  2E2E 2E00 9206          dc.b      46,46,46,0
                    9207   @m68kde~1_114:
00005B02  0D0A 456E 9208          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00005B06  7465 7220 
00005B0A  5761 7463 
00005B0E  68        
00005B0F  2050 6F69 9209          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00005B13  6E74 204E 
00005B17  756D 6265 
00005B1B  72        
00005B1C  3A20 00   9210          dc.b      58,32,0
                    9211   @m68kde~1_115:
00005B20  0D0A 5761 9212          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005B24  7463 6820 
00005B28  506F 696E 
00005B2C  74        
00005B2D  2043 6C65 9213          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00005B31  6172 6564 
00005B35  2E2E 2E2E 
00005B39  2E        
00005B3A  0D0A 00   9214          dc.b      13,10,0
                    9215   @m68kde~1_116:
00005B3E  0D0A 5761 9216          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005B42  7463 6820 
00005B46  506F 696E 
00005B4A  74        
00005B4B  2057 6173 9217          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00005B4F  206E 6F74 
00005B53  2053 6574 
00005B57  2E        
00005B58  2E2E 2E2E 9218          dc.b      46,46,46,46,0
00005B5C  00        
                    9219   @m68kde~1_117:
00005B5E  0D0A 4E6F 9220          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00005B62  2046 5245 
00005B66  4520 4272 
00005B6A  6561      
00005B6C  6B20 506F 9221          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00005B70  696E 7473 
00005B74  2E2E 2E2E 
00005B78  2E        
00005B79  00        9222          dc.b      0
                    9223   @m68kde~1_118:
00005B7A  0D0A 4272 9224          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005B7E  6561 6B20 
00005B82  506F 696E 
00005B86  74        
00005B87  2041 6464 9225          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005B8B  7265 7373 
00005B8F  3A20 00   
                    9226   @m68kde~1_119:
00005B92  0D0A 4572 9227          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00005B96  726F 7220 
00005B9A  3A20 4272 
00005B9E  65        
00005B9F  616B 2050 9228          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00005BA3  6F69 6E74 
00005BA7  7320 4341 
00005BAB  4E        
00005BAC  4E4F 5420 9229          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00005BB0  6265 2073 
00005BB4  6574 2061 
00005BB8  74        
00005BB9  204F 4444 9230          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00005BBD  2061 6464 
00005BC1  7265 7373 
00005BC5  65        
00005BC6  7300      9231          dc.b      115,0
                    9232   @m68kde~1_120:
00005BC8  0D0A 4572 9233          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00005BCC  726F 7220 
00005BD0  3A20 4272 
00005BD4  65        
00005BD5  616B 2050 9234          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00005BD9  6F69 6E74 
00005BDD  7320 4341 
00005BE1  4E        
00005BE2  4E4F 5420 9235          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00005BE6  6265 2073 
00005BEA  6574 2066 
00005BEE  6F        
00005BEF  7220 524F 9236          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00005BF3  4D20 696E 
00005BF7  2052 616E 
00005BFB  67        
00005BFC  6520 3A20 9237          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00005C00  5B24 302D 
00005C04  2430 3030 
00005C08  3037 46   
00005C0B  4646 5D00 9238          dc.b      70,70,93,0
                    9239   @m68kde~1_121:
00005C10  0D0A 4572 9240          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00005C14  726F 723A 
00005C18  2042 7265 
00005C1C  61        
00005C1D  6B20 506F 9241          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00005C21  696E 7420 
00005C25  416C 7265 
00005C29  6164 7920 9242          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00005C2D  4578 6973 
00005C31  7473 2061 
00005C35  74        
00005C36  2041 6464 9243          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00005C3A  7265 7373 
00005C3E  203A 2025 
00005C42  30        
00005C43  3878 0D0A 9244          dc.b      56,120,13,10,0
00005C47  00        
                    9245   @m68kde~1_122:
00005C48  0D0A 4272 9246          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005C4C  6561 6B20 
00005C50  506F 696E 
00005C54  74        
00005C55  2053 6574 9247          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005C59  2061 7420 
00005C5D  4164 6472 
00005C61  65        
00005C62  7373 3A20 9248          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005C66  5B24 2530 
00005C6A  3878 5D00 
                    9249   @m68kde~1_123:
00005C6E  0D0A 4E6F 9250          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00005C72  2046 5245 
00005C76  4520 5761 
00005C7A  7463      
00005C7C  6820 506F 9251          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00005C80  696E 7473 
00005C84  2E2E 2E2E 
00005C88  2E        
00005C89  00        9252          dc.b      0
                    9253   @m68kde~1_124:
00005C8A  0D0A 5761 9254          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005C8E  7463 6820 
00005C92  506F 696E 
00005C96  74        
00005C97  2041 6464 9255          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005C9B  7265 7373 
00005C9F  3A20 00   
                    9256   @m68kde~1_125:
00005CA2  0D0A 4572 9257          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00005CA6  726F 723A 
00005CAA  2057 6174 
00005CAE  63        
00005CAF  6820 506F 9258          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00005CB3  696E 7420 
00005CB7  416C 7265 
00005CBB  6164 7920 9259          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00005CBF  5365 7420 
00005CC3  6174 2041 
00005CC7  64        
00005CC8  6472 6573 9260          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00005CCC  7320 3A20 
00005CD0  2530 3878 
00005CD4  0D        
00005CD5  0A00      9261          dc.b      10,0
                    9262   @m68kde~1_126:
00005CD8  0D0A 5761 9263          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005CDC  7463 6820 
00005CE0  506F 696E 
00005CE4  74        
00005CE5  2053 6574 9264          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005CE9  2061 7420 
00005CED  4164 6472 
00005CF1  65        
00005CF2  7373 3A20 9265          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005CF6  5B24 2530 
00005CFA  3878 5D00 
                    9266   @m68kde~1_127:
00005CFE  0D0A 0D0A 9267          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00005D02  0D0A 0D0A 
00005D06  4042 5245 
00005D0A  414B 50   
00005D0D  4F49 4E54 9268          dc.b      79,73,78,84,0
00005D11  00        
                    9269   @m68kde~1_128:
00005D12  0D0A 5369 9270          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005D16  6E67 6C65 
00005D1A  2053 7465 
00005D1E  70        
00005D1F  203A 205B 9271          dc.b      32,58,32,91,79,78,93,0
00005D23  4F4E 5D00 
                    9272   @m68kde~1_129:
00005D28  0D0A 4272 9273          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00005D2C  6561 6B50 
00005D30  6F69 6E74 
00005D34  73        
00005D35  203A 205B 9274          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00005D39  456E 6162 
00005D3D  6C65 645D 
00005D41  00        
                    9275   @m68kde~1_130:
00005D42  0D0A 5072 9276          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005D46  6573 7320 
00005D4A  3C45 5343 
00005D4E  3E20      
00005D50  746F 2052 9277          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005D54  6573 756D 
00005D58  6520 5573 
00005D5C  6572 2050 9278          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00005D60  726F 6772 
00005D64  616D 0D0A 
00005D68  00        
                    9279   @m68kde~1_131:
00005D6A  0D0A 556E 9280          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00005D6E  6B6E 6F77 
00005D72  6E20 436F 
00005D76  6D        
00005D77  6D61 6E64 9281          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00005D7B  2E2E 2E2E 
00005D7F  2E0D 0A00 
                    9282   @m68kde~1_132:
00005D84  0D0A 5072 9283          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00005D88  6F67 7261 
00005D8C  6D20 456E 
00005D90  64        
00005D91  6564 2028 9284          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00005D95  5452 4150 
00005D99  2023 3135 
00005D9D  292E      
00005D9F  2E2E 2E00 9285          dc.b      46,46,46,0
                    9286   @m68kde~1_133:
00005DA4  0D0A 4B69 9287          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00005DA8  6C6C 2041 
00005DAC  6C6C 2042 
00005DB0  72        
00005DB1  6561 6B20 9288          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00005DB5  506F 696E 
00005DB9  7473 2E2E 
00005DBD  2E        
00005DBE  2879 2F6E 9289          dc.b      40,121,47,110,41,63,0
00005DC2  293F 00   
                    9290   @m68kde~1_134:
00005DC6  0D0A 4B69 9291          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00005DCA  6C6C 2041 
00005DCE  6C6C 2057 
00005DD2  61        
00005DD3  7463 6820 9292          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00005DD7  506F 696E 
00005DDB  7473 2E2E 
00005DDF  2E        
00005DE0  2879 2F6E 9293          dc.b      40,121,47,110,41,63,0
00005DE4  293F 00   
                    9294   @m68kde~1_135:
00005DE8  0D0A 2D2D 9295          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00005DEC  2D2D 2D2D 
00005DF0  2D2D 2D2D 
00005DF4  2D2D 2D   
00005DF7  2D2D 2D2D 9296          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005DFB  2D2D 2D2D 
00005DFF  2D2D 2D2D 
00005E03  2D2D 2D   
00005E06  2D2D 2D2D 9297          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005E0A  2D2D 2D2D 
00005E0E  2D2D 2D2D 
00005E12  2D2D 2D   
00005E15  2D2D 2D2D 9298          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005E19  2D2D 2D2D 
00005E1D  2D2D 2D2D 
00005E21  2D2D 2D   
00005E24  2D2D 2D2D 9299          dc.b      45,45,45,45,45,45,0
00005E28  2D2D 00   
                    9300   @m68kde~1_136:
00005E2C  0D0A 2020 9301          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00005E30  4465 6275 
00005E34  6767 6572 
00005E38  20        
00005E39  436F 6D6D 9302          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00005E3D  616E 6420 
00005E41  5375 6D6D 
00005E45  6172 7900 9303          dc.b      97,114,121,0
                    9304   @m68kde~1_137:
00005E4A  0D0A 2020 9305          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00005E4E  2E28 7265 
00005E52  6729 2020 
00005E56  2020      
00005E58  2020 202D 9306          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00005E5C  2043 6861 
00005E60  6E67 6520 
00005E64  5265      
00005E66  6769 7374 9307          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00005E6A  6572 733A 
00005E6E  2065 2E67 
00005E72  2041 302D 9308          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00005E76  4137 2C44 
00005E7A  302D 4437 
00005E7E  2C50 43   
00005E81  2C53 5350 9309          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00005E85  2C55 5350 
00005E89  2C53 5200 
                    9310   @m68kde~1_138:
00005E8E  0D0A 2020 9311          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00005E92  4244 2F42 
00005E96  532F 4243 
00005E9A  2F42 4B   
00005E9D  2020 2D20 9312          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00005EA1  4272 6561 
00005EA5  6B20 506F 
00005EA9  69        
00005EAA  6E74 3A20 9313          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00005EAE  4469 7370 
00005EB2  6C61 792F 
00005EB6  53        
00005EB7  6574 2F43 9314          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00005EBB  6C65 6172 
00005EBF  2F4B 696C 
00005EC3  6C        
00005EC4  00        9315          dc.b      0
                    9316   @m68kde~1_139:
00005EC6  0D0A 2020 9317          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00005ECA  4320 2020 
00005ECE  2020 2020 
00005ED2  2020 20   
00005ED5  2020 2D20 9318          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00005ED9  436F 7079 
00005EDD  2050 726F 
00005EE1  67        
00005EE2  7261 6D20 9319          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00005EE6  6672 6F6D 
00005EEA  2046 6C61 
00005EEE  73        
00005EEF  6820 746F 9320          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00005EF3  204D 6169 
00005EF7  6E20 4D65 
00005EFB  6D        
00005EFC  6F72 7900 9321          dc.b      111,114,121,0
                    9322   @m68kde~1_140:
00005F00  0D0A 2020 9323          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00005F04  4420 2020 
00005F08  2020 2020 
00005F0C  2020 20   
00005F0F  2020 2D20 9324          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00005F13  4475 6D70 
00005F17  204D 656D 
00005F1B  6F        
00005F1C  7279 2043 9325          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00005F20  6F6E 7465 
00005F24  6E74 7320 
00005F28  746F 2053 9326          dc.b      116,111,32,83,99,114,101,101,110,0
00005F2C  6372 6565 
00005F30  6E00      
                    9327   @m68kde~1_141:
00005F32  0D0A 2020 9328          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00005F36  4520 2020 
00005F3A  2020 2020 
00005F3E  2020 20   
00005F41  2020 2D20 9329          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00005F45  456E 7465 
00005F49  7220 5374 
00005F4D  72        
00005F4E  696E 6720 9330          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00005F52  696E 746F 
00005F56  204D 656D 
00005F5A  6F72 7900 9331          dc.b      111,114,121,0
                    9332   @m68kde~1_142:
00005F5E  0D0A 2020 9333          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00005F62  4620 2020 
00005F66  2020 2020 
00005F6A  2020 20   
00005F6D  2020 2D20 9334          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00005F71  4669 6C6C 
00005F75  204D 656D 
00005F79  6F        
00005F7A  7279 2077 9335          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00005F7E  6974 6820 
00005F82  4461 7461 
00005F86  00        
                    9336   @m68kde~1_143:
00005F88  0D0A 2020 9337          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00005F8C  4720 2020 
00005F90  2020 2020 
00005F94  2020 20   
00005F97  2020 2D20 9338          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00005F9B  476F 2050 
00005F9F  726F 6772 
00005FA3  61        
00005FA4  6D20 5374 9339          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00005FA8  6172 7469 
00005FAC  6E67 2061 
00005FB0  74        
00005FB1  2041 6464 9340          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00005FB5  7265 7373 
00005FB9  3A20 2425 
00005FBD  30        
00005FBE  3858 00   9341          dc.b      56,88,0
                    9342   @m68kde~1_144:
00005FC2  0D0A 2020 9343          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00005FC6  4C20 2020 
00005FCA  2020 2020 
00005FCE  2020 20   
00005FD1  2020 2D20 9344          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00005FD5  4C6F 6164 
00005FD9  2050 726F 
00005FDD  67        
00005FDE  7261 6D20 9345          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00005FE2  282E 4845 
00005FE6  5820 6669 
00005FEA  6C        
00005FEB  6529 2066 9346          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00005FEF  726F 6D20 
00005FF3  4C61 7074 
00005FF7  6F        
00005FF8  7000      9347          dc.b      112,0
                    9348   @m68kde~1_145:
00005FFA  0D0A 2020 9349          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00005FFE  4D20 2020 
00006002  2020 2020 
00006006  2020 20   
00006009  2020 2D20 9350          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000600D  4D65 6D6F 
00006011  7279 2045 
00006015  78        
00006016  616D 696E 9351          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
0000601A  6520 616E 
0000601E  6420 4368 
00006022  61        
00006023  6E67 6500 9352          dc.b      110,103,101,0
                    9353   @m68kde~1_146:
00006028  0D0A 2020 9354          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
0000602C  5020 2020 
00006030  2020 2020 
00006034  2020 20   
00006037  2020 2D20 9355          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
0000603B  5072 6F67 
0000603F  7261 6D20 
00006043  46        
00006044  6C61 7368 9356          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00006048  204D 656D 
0000604C  6F72 7920 
00006050  7769 7468 9357          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00006054  2055 7365 
00006058  7220 5072 
0000605C  6F67 7261 9358          dc.b      111,103,114,97,109,0
00006060  6D00      
                    9359   @m68kde~1_147:
00006062  0D0A 2020 9360          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00006066  5220 2020 
0000606A  2020 2020 
0000606E  2020 20   
00006071  2020 2D20 9361          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00006075  4469 7370 
00006079  6C61 7920 
0000607D  36        
0000607E  3830 3030 9362          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00006082  2052 6567 
00006086  6973 7465 
0000608A  72        
0000608B  7300      9363          dc.b      115,0
                    9364   @m68kde~1_148:
0000608E  0D0A 2020 9365          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00006092  5320 2020 
00006096  2020 2020 
0000609A  2020 20   
0000609D  2020 2D20 9366          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000060A1  546F 6767 
000060A5  6C65 204F 
000060A9  4E        
000060AA  2F4F 4646 9367          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
000060AE  2053 696E 
000060B2  676C 6520 
000060B6  53        
000060B7  7465 7020 9368          dc.b      116,101,112,32,77,111,100,101,0
000060BB  4D6F 6465 
000060BF  00        
                    9369   @m68kde~1_149:
000060C0  0D0A 2020 9370          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000060C4  544D 2020 
000060C8  2020 2020 
000060CC  2020 20   
000060CF  2020 2D20 9371          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000060D3  5465 7374 
000060D7  204D 656D 
000060DB  6F        
000060DC  7279 00   9372          dc.b      114,121,0
                    9373   @m68kde~1_150:
000060E0  0D0A 2020 9374          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000060E4  5453 2020 
000060E8  2020 2020 
000060EC  2020 20   
000060EF  2020 2D20 9375          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
000060F3  5465 7374 
000060F7  2053 7769 
000060FB  74        
000060FC  6368 6573 9376          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00006100  3A20 5357 
00006104  372D 3000 
                    9377   @m68kde~1_151:
00006108  0D0A 2020 9378          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000610C  5444 2020 
00006110  2020 2020 
00006114  2020 20   
00006117  2020 2D20 9379          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
0000611B  5465 7374 
0000611F  2044 6973 
00006123  70        
00006124  6C61 7973 9380          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00006128  3A20 4C45 
0000612C  4473 2061 
00006130  6E        
00006131  6420 372D 9381          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00006135  5365 676D 
00006139  656E 7400 
                    9382   @m68kde~1_152:
0000613E  0D0A 2020 9383          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00006142  5744 2F57 
00006146  532F 5743 
0000614A  2F57 4B   
0000614D  2020 2D20 9384          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00006151  5761 7463 
00006155  6820 506F 
00006159  696E      
0000615B  743A 2044 9385          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
0000615F  6973 706C 
00006163  6179 2F53 
00006167  65        
00006168  742F 436C 9386          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
0000616C  6561 722F 
00006170  4B69 6C6C 
00006174  00        
                    9387   @m68kde~1_153:
00006176  0D0A 2300 9388          dc.b      13,10,35,0
                    9389   @m68kde~1_154:
0000617A  0D0A 5072 9390          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
0000617E  6F67 7261 
00006182  6D20 5275 
00006186  6E        
00006187  6E69 6E67 9391          dc.b      110,105,110,103,46,46,46,46,46,0
0000618B  2E2E 2E2E 
0000618F  2E00      
                    9392   @m68kde~1_155:
00006192  0D0A 5072 9393          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00006196  6573 7320 
0000619A  3C52 4553 
0000619E  4554      
000061A0  3E20 6275 9394          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000061A4  7474 6F6E 
000061A8  203C 4B65 
000061AC  79        
000061AD  303E 206F 9395          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
000061B1  6E20 4445 
000061B5  3120 746F 
000061B9  2073      
000061BB  746F 7000 9396          dc.b      116,111,112,0
                    9397   @m68kde~1_156:
000061C0  0D0A 4572 9398          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000061C4  726F 723A 
000061C8  2050 7265 
000061CC  73        
000061CD  7320 2747 9399          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000061D1  2720 6669 
000061D5  7273 7420 
000061D9  74        
000061DA  6F20 7374 9400          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000061DE  6172 7420 
000061E2  7072 6F67 
000061E6  7261 6D00 9401          dc.b      114,97,109,0
                    9402   @m68kde~1_157:
000061EA  0D0A 5369 9403          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000061EE  6E67 6C65 
000061F2  2053 7465 
000061F6  70        
000061F7  2020 3A5B 9404          dc.b      32,32,58,91,79,78,93,0
000061FB  4F4E 5D00 
                    9405   @m68kde~1_158:
00006200  0D0A 5072 9406          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00006204  6573 7320 
00006208  2747 2720 
0000620C  74        
0000620D  6F20 5472 9407          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00006211  6163 6520 
00006215  5072 6F67 
00006219  72        
0000621A  616D 2066 9408          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
0000621E  726F 6D20 
00006222  6164 6472 
00006226  6573 7320 9409          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
0000622A  2425 582E 
0000622E  2E2E 2E2E 
00006232  00        
                    9410   @m68kde~1_159:
00006234  0D0A 5075 9411          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00006238  7368 203C 
0000623C  5245 5345 
00006240  5420      
00006242  4275 7474 9412          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00006246  6F6E 3E20 
0000624A  746F 2053 
0000624E  74        
0000624F  6F70 2E2E 9413          dc.b      111,112,46,46,46,46,46,0
00006253  2E2E 2E00 
                    9414   @m68kde~1_160:
00006258  0D0A 5369 9415          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000625C  6E67 6C65 
00006260  2053 7465 
00006264  70        
00006265  203A 205B 9416          dc.b      32,58,32,91,79,70,70,93,0
00006269  4F46 465D 
0000626D  00        
                    9417   @m68kde~1_161:
0000626E  0D0A 4272 9418          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006272  6561 6B20 
00006276  506F 696E 
0000627A  74        
0000627B  7320 3A5B 9419          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
0000627F  456E 6162 
00006283  6C65 645D 
00006287  00        
                    9420   @m68kde~1_162:
00006288  0D0A 5072 9421          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000628C  6573 7320 
00006290  3C45 5343 
00006294  3E20      
00006296  746F 2052 9422          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000629A  6573 756D 
0000629E  6520 5573 
000062A2  6572 2050 9423          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
000062A6  726F 6772 
000062AA  616D 2E2E 
000062AE  2E        
000062AF  2E2E 00   9424          dc.b      46,46,0
                    9425   @m68kde~1_163:
000062B2  0D0A 5369 9426          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000062B6  6E67 6C65 
000062BA  2053 7465 
000062BE  70        
000062BF  2020 3A5B 9427          dc.b      32,32,58,91,79,70,70,93,0
000062C3  4F46 465D 
000062C7  00        
                    9428   @m68kde~1_164:
000062C8  0D0A 0D0A 9429          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000062CC  5072 6F67 
000062D0  7261 6D20 
000062D4  41        
000062D5  424F 5254 9430          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000062D9  2021 2121 
000062DD  2121 210D 
000062E1  0A00      
                    9431   @m68kde~1_165:
000062E4  2573 0D0A 9432          dc.b      37,115,13,10,0
000062E8  00        
                    9433   @m68kde~1_166:
000062EA  0D0A 0D0A 9434          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000062EE  5072 6F67 
000062F2  7261 6D20 
000062F6  41        
000062F7  424F 5254 9435          dc.b      66,79,82,84,32,33,33,33,33,33,0
000062FB  2021 2121 
000062FF  2121 00   
                    9436   @m68kde~1_167:
00006302  0D0A 556E 9437          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00006306  6861 6E64 
0000630A  6C65 6420 
0000630E  49        
0000630F  6E74 6572 9438          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00006313  7275 7074 
00006317  3A20 4952 
0000631B  5125 6420 9439          dc.b      81,37,100,32,33,33,33,33,33,0
0000631F  2121 2121 
00006323  2100      
                    9440   @m68kde~1_168:
00006326  4144 4452 9441          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
0000632A  4553 5320 
0000632E  4552 524F 
00006332  523A 20   
00006335  3136 206F 9442          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00006339  7220 3332 
0000633D  2042 6974 
00006341  2054      
00006343  7261 6E73 9443          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00006347  6665 7220 
0000634B  746F 2F66 
0000634F  726F 6D20 9444          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00006353  616E 204F 
00006357  4444 2041 
0000635B  64        
0000635C  6472 6573 9445          dc.b      100,114,101,115,115,46,46,46,46,0
00006360  732E 2E2E 
00006364  2E00      
                    9446   @m68kde~1_169:
00006366  556E 6861 9447          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
0000636A  6E64 6C65 
0000636E  6420 5472 
00006372  6170 2021 9448          dc.b      97,112,32,33,33,33,33,33,0
00006376  2121 2121 
0000637A  00        
                    9449   @m68kde~1_170:
0000637C  4255 5320 9450          dc.b      66,85,83,32,69,114,114,111,114,33,0
00006380  4572 726F 
00006384  7221 00   
                    9451   @m68kde~1_171:
00006388  4144 4452 9452          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000638C  4553 5320 
00006390  4572 726F 
00006394  7221      
00006396  00        9453          dc.b      0
                    9454   @m68kde~1_172:
00006398  494C 4C45 9455          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000639C  4741 4C20 
000063A0  494E 5354 
000063A4  5255 43   
000063A7  5449 4F4E 9456          dc.b      84,73,79,78,0
000063AB  00        
                    9457   @m68kde~1_173:
000063AC  4449 5649 9458          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000063B0  4445 2042 
000063B4  5920 5A45 
000063B8  524F 00   
                    9459   @m68kde~1_174:
000063BC  2743 484B 9460          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000063C0  2720 494E 
000063C4  5354 5255 
000063C8  4354 49   
000063CB  4F4E 00   9461          dc.b      79,78,0
                    9462   @m68kde~1_175:
000063CE  5452 4150 9463          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000063D2  5620 494E 
000063D6  5354 5255 
000063DA  4354 49   
000063DD  4F4E 00   9464          dc.b      79,78,0
                    9465   @m68kde~1_176:
000063E0  5052 4956 9466          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000063E4  494C 4547 
000063E8  4520 5649 
000063EC  4F4C 41   
000063EF  5449 4F4E 9467          dc.b      84,73,79,78,0
000063F3  00        
                    9468   @m68kde~1_177:
000063F4  554E 494E 9469          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
000063F8  4954 4941 
000063FC  4C49 5345 
00006400  4420 49   
00006403  5251 00   9470          dc.b      82,81,0
                    9471   @m68kde~1_178:
00006406  5350 5552 9472          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
0000640A  494F 5553 
0000640E  2049 5251 
00006412  00        
                    9473   @m68kde~1_179:
00006414  0D0A 5374 9474          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00006418  6172 7420 
0000641C  4164 6472 
00006420  65        
00006421  7373 2069 9475          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00006425  6E20 4D65 
00006429  6D6F 7279 
0000642D  3A20 00   9476          dc.b      58,32,0
                    9477   @m68kde~1_180:
00006430  0D0A 456E 9478          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00006434  7465 7220 
00006438  5374 7269 
0000643C  6E        
0000643D  6720 2845 9479          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00006441  5343 2074 
00006445  6F20 656E 
00006449  64        
0000644A  2920 3A00 9480          dc.b      41,32,58,0
                    9481   @m68kde~1_181:
0000644E  0A45 6E74 9482          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
00006452  6572 2077 
00006456  6861 7420 
0000645A  73        
0000645B  697A 6520 9483          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
0000645F  6F66 206D 
00006463  656D 6F72 
00006467  7920 796F 9484          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
0000646B  7520 7761 
0000646F  6E74 2074 
00006473  6F20 7265 9485          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00006477  6164 2F77 
0000647B  7269 7465 
0000647F  0A20 4279 9486          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
00006483  7465 203D 
00006487  2030 0A20 
0000648B  576F      
0000648D  7264 203D 9487          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
00006491  2031 0A20 
00006495  4C6F 6E67 
00006499  20        
0000649A  576F 7264 9488          dc.b      87,111,114,100,32,61,32,50,10,0
0000649E  203D 2032 
000064A2  0A00      
                    9489   @m68kde~1_182:
000064A4  0A45 6E74 9490          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000064A8  6572 2077 
000064AC  6869 6368 
000064B0  2064 6174 9491          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000064B4  6120 7061 
000064B8  7474 6572 
000064BC  6E        
000064BD  2079 6F75 9492          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000064C1  2077 616E 
000064C5  7420 746F 
000064C9  2077 7269 9493          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000064CD  7465 2069 
000064D1  6E74 6F20 
000064D5  6D65 6D6F 9494          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
000064D9  7279 0A20 
000064DD  3078 3030 
000064E1  20        
000064E2  3D20 300A 9495          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
000064E6  2030 7842 
000064EA  3220 3D20 
000064EE  310A 20   
000064F1  3078 4333 9496          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
000064F5  203D 2032 
000064F9  0A20 3078 
000064FD  4434      
000064FF  203D 2033 9497          dc.b      32,61,32,51,10,0
00006503  0A00      
                    9498   @m68kde~1_183:
00006506  0A45 6E74 9499          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
0000650A  6572 2077 
0000650E  6869 6368 
00006512  2064 6174 9500          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00006516  6120 7061 
0000651A  7474 6572 
0000651E  6E        
0000651F  2079 6F75 9501          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00006523  2077 616E 
00006527  7420 746F 
0000652B  2077 7269 9502          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000652F  7465 2069 
00006533  6E74 6F20 
00006537  6D65 6D6F 9503          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
0000653B  7279 0A20 
0000653F  3078 3030 
00006543  30        
00006544  3020 3D20 9504          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
00006548  300A 2030 
0000654C  7831 3233 
00006550  3420 3D   
00006553  2031 0A20 9505          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
00006557  3078 4131 
0000655B  4232 203D 
0000655F  2032 0A   
00006562  2030 7843 9506          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
00006566  3344 3420 
0000656A  3D20 330A 
0000656E  00        
                    9507   @m68kde~1_184:
00006570  0A45 6E74 9508          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00006574  6572 2077 
00006578  6869 6368 
0000657C  2064 6174 9509          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00006580  6120 7061 
00006584  7474 6572 
00006588  6E        
00006589  2079 6F75 9510          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000658D  2077 616E 
00006591  7420 746F 
00006595  2077 7269 9511          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00006599  7465 2069 
0000659D  6E74 6F20 
000065A1  6D65 6D6F 9512          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000065A5  7279 0A20 
000065A9  3078 3030 
000065AD  30        
000065AE  305F 3030 9513          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
000065B2  3030 203D 
000065B6  2030 0A20 
000065BA  3078 41   
000065BD  4142 425F 9514          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
000065C1  4343 4444 
000065C5  203D 2031 
000065C9  0A20 30   
000065CC  7831 3132 9515          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
000065D0  325F 3333 
000065D4  3434 203D 
000065D8  2032 0A   
000065DB  2030 7837 9516          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
000065DF  3635 345F 
000065E3  3332 3130 
000065E7  203D 20   
000065EA  330A 00   9517          dc.b      51,10,0
                    9518   @m68kde~1_185:
000065EE  0A50 726F 9519          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
000065F2  7669 6465 
000065F6  2053 7461 
000065FA  72        
000065FB  7420 4164 9520          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
000065FF  6472 6573 
00006603  7320 696E 
00006607  2068 6578 9521          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
0000660B  2028 646F 
0000660F  206E 6F74 
00006613  2075 7365 9522          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
00006617  2030 7820 
0000661B  7072 6566 
0000661F  6978 290A 9523          dc.b      105,120,41,10,48,120,0
00006623  3078 00   
                    9524   @m68kde~1_186:
00006626  0A50 726F 9525          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
0000662A  7669 6465 
0000662E  2045 6E64 
00006632  2041 6464 9526          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
00006636  7265 7373 
0000663A  2069 6E20 
0000663E  6865 7820 9527          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
00006642  2864 6F20 
00006646  6E6F 7420 
0000664A  7573 6520 9528          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
0000664E  3078 2070 
00006652  7265 6669 
00006656  7829 0A30 9529          dc.b      120,41,10,48,120,0
0000665A  7800      
                    9530   @m68kde~1_187:
0000665C  0A53 7461 9531          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
00006660  7274 2041 
00006664  6464 7265 
00006668  73        
00006669  7320 3078 9532          dc.b      115,32,48,120,37,48,56,120,10,0
0000666D  2530 3878 
00006671  0A00      
                    9533   @m68kde~1_188:
00006674  0A45 6E64 9534          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
00006678  2041 6464 
0000667C  7265 7373 
00006680  3A20 3078 9535          dc.b      58,32,48,120,37,48,56,120,10,0
00006684  2530 3878 
00006688  0A00      
                    9536   @m68kde~1_189:
0000668A  4552 524F 9537          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
0000668E  522E 2E2E 
00006692  2041 6464 
00006696  7265      
00006698  7373 2030 9538          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
0000669C  7825 7820 
000066A0  6973 2062 
000066A4  65        
000066A5  796F 6E64 9539          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
000066A9  2074 6865 
000066AD  206D 656D 
000066B1  6F72 7920 9540          dc.b      111,114,121,32,114,97,110,103,101,10,0
000066B5  7261 6E67 
000066B9  650A 00   
                    9541   @m68kde~1_190:
000066BC  4552 524F 9542          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
000066C0  522E 2E2E 
000066C4  2056 616C 
000066C8  7565      
000066CA  2077 7269 9543          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
000066CE  7474 656E 
000066D2  2074 6F20 
000066D6  6164 6472 9544          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
000066DA  6573 7320 
000066DE  3078 2578 
000066E2  203D 3D20 9545          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
000066E6  3078 2578 
000066EA  2E20 5661 
000066EE  6C75      
000066F0  6520 4578 9546          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
000066F4  7065 6374 
000066F8  6564 3A20 
000066FC  30        
000066FD  7825 780A 9547          dc.b      120,37,120,10,0
00006701  00        
                    9548   @m68kde~1_191:
00006702  4164 6472 9549          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00006706  6573 733A 
0000670A  2030 7825 
0000670E  78        
0000670F  2056 616C 9550          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
00006713  7565 3A20 
00006717  3078 2530 
0000671B  3258      
0000671D  0A00      9551          dc.b      10,0
                    9552   @m68kde~1_192:
00006720  4164 6472 9553          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00006724  6573 733A 
00006728  2030 7825 
0000672C  78        
0000672D  2056 616C 9554          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
00006731  7565 3A20 
00006735  3078 2530 
00006739  3458      
0000673B  0A00      9555          dc.b      10,0
                    9556   @m68kde~1_193:
0000673E  4164 6472 9557          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00006742  6573 733A 
00006746  2030 7825 
0000674A  78        
0000674B  2056 616C 9558          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
0000674F  7565 3A20 
00006753  3078 2530 
00006757  3858      
00006759  0A00      9559          dc.b      10,0
                    9560   @m68kde~1_194:
0000675C  4445 312D 9561          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00006760  3638 6B20 
00006764  4275 6720 
00006768  5631      
0000676A  2E37 3700 9562          dc.b      46,55,55,0
                    9563   @m68kde~1_195:
0000676E  436F 7079 9564          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00006772  7269 6768 
00006776  7420 2843 
0000677A  2920 504A 9565          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
0000677E  2044 6176 
00006782  6965 7320 
00006786  3230      
00006788  3136 00   9566          dc.b      49,54,0
                    9567   @m68kde~1_196:
0000678C  0D0A 5275 9568          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00006790  6E6E 696E 
00006794  672E 2E2E 
00006798  2E        
00006799  2E00      9569          dc.b      46,0
                    9570   @m68kde~1_197:
0000679C  5275 6E6E 9571          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000067A0  696E 672E 
000067A4  2E2E 2E2E 
000067A8  00        
                    9572   @m68kde~1_198:
000067AA  4279 3A20 9573          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000067AE  504A 2044 
000067B2  6176 6965 
000067B6  73        
000067B7  00        9574          dc.b      0
                    9575   @m68kde~1_199:
000067B8  0D0A 2573 9576          dc.b      13,10,37,115,0
000067BC  00        
                    9577   @m68kde~1_200:
000067BE  0A20 5374 9578          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
000067C2  7564 656E 
000067C6  7420 4E61 
000067CA  6D        
000067CB  6573 3A0A 9579          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
000067CF  205A 6163 
000067D3  6861 7269 
000067D7  61        
000067D8  6820 4A6F 9580          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
000067DC  7365 7068 
000067E0  3A20 3435 
000067E4  35        
000067E5  3030 3035 9581          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
000067E9  3520 0A20 
000067ED  556D 6169 
000067F1  7220      
000067F3  4D61 7A68 9582          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
000067F7  6172 3A20 
000067FB  3230 3333 
000067FF  3333      
00006801  3038 0A00 9583          dc.b      48,56,10,0
                    9584          section   data
00006806            9585                   align
          0000 6806 9586   DataStart       equ       *
                    9587   
                    9588   *********************************************************************************************************
                    9589   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    9590   * to ram as part of the CStart routine in this file
                    9591   *********************************************************************************************************
                    9592   
                    9593   @vsscanf_bufx:
00006806  0B00 0546 9594          dc.l      @vsscanf_buf
                    9595   @vsscanf_1:
0000680A  0A00      9596          dc.b      10,0
                    9597   __ctype:
0000680C  0040 4040 9598          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00006810  4040 4040 
00006814  4040 5050 
00006818  5050 50   
0000681B  4040 4040 9599          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
0000681F  4040 4040 
00006823  4040 4040 
00006827  4040 40   
0000682A  4040 40D0 9600          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
0000682E  A0A0 A0A0 
00006832  A0A0 A0A0 
00006836  A0A0 A0A0 9601          dc.b      160,160,160,160,160,160,160,140,140,140,140
0000683A  A0A0 A08C 
0000683E  8C8C 8C   
00006841  8C8C 8C8C 9602          dc.b      140,140,140,140,140,140,160,160,160,160,160
00006845  8C8C A0A0 
00006849  A0A0 A0   
0000684C  A0A0 8A8A 9603          dc.b      160,160,138,138,138,138,138,138,130,130,130
00006850  8A8A 8A8A 
00006854  8282 82   
00006857  8282 8282 9604          dc.b      130,130,130,130,130,130,130,130,130,130,130
0000685B  8282 8282 
0000685F  8282 82   
00006862  8282 8282 9605          dc.b      130,130,130,130,130,130,160,160,160,160,160
00006866  8282 A0A0 
0000686A  A0A0 A0   
0000686D  A089 8989 9606          dc.b      160,137,137,137,137,137,137,129,129,129,129
00006871  8989 8981 
00006875  8181 81   
00006878  8181 8181 9607          dc.b      129,129,129,129,129,129,129,129,129,129,129
0000687C  8181 8181 
00006880  8181 81   
00006883  8181 8181 9608          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00006887  81A0 A0A0 
0000688B  A040 0000 
0000688F  00        
00006890  0000 0000 9609          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006894  0000 0000 
00006898  0000 0000 
0000689C  0000 0000 
000068A0  0000 0000 
000068A4  0000      
000068A6  0000 0000 9610          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000068AA  0000 0000 
000068AE  0000 0000 
000068B2  0000 0000 
000068B6  0000 0000 
000068BA  0000      
000068BC  0000 0000 9611          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000068C0  0000 0000 
000068C4  0000 0000 
000068C8  0000 0000 
000068CC  0000 0000 
000068D0  0000      
000068D2  0000 0000 9612          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000068D6  0000 0000 
000068DA  0000 0000 
000068DE  0000 0000 
000068E2  0000 0000 
000068E6  0000      
000068E8  0000 0000 9613          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000068EC  0000 0000 
000068F0  0000 0000 
000068F4  0000 0000 
000068F8  0000 0000 
000068FC  0000      
000068FE  0000 0000 9614          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006902  0000 0000 
00006906  0000 0000 
0000690A  0000 00   
                    9615   @itoa_1:
0000690E  2D32 3134 9616          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00006912  3734 3833 
00006916  3634 3800 
                    9617          section   bss
0000691A            9618                   align
          0000 691A 9619   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    9620   
                    9621   *********************************************************************************************************
                    9622   * Section for Uninitialised Data held in ROM as constants
                    9623   *********************************************************************************************************
                    9624   
0B000000            9625                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 9626   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    9627   
                    9628   
0B000000            9629   bss             org       bss
                    9630   
                    9631   *********************************************************************************************************
                    9632   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    9633   * install the exception handler using the C function InstallExceptionHandler()
                    9634   *********************************************************************************************************
                    9635   
                    9636   
                    9637   
0B000000            9638   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            9639   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            9640   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            9641   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            9642   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            9643   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            9644   VCheck           ds.l    1      ditto
0B00001C            9645   VTrapV           ds.l    1      ditto
0B000020            9646   VPrivilege       ds.l    1      ditto
0B000024            9647   VTrace           ds.l    1
0B000028            9648   VLine1010emul    ds.l    1
0B00002C            9649   VLine1111emul    ds.l    1
0B000030            9650   VUnassigned1     ds.l    1
0B000034            9651   VUnassigned2     ds.l    1
0B000038            9652   VUnassigned3     ds.l    1
0B00003C            9653   VUninit_IRQ      ds.l    1
0B000040            9654   VUnassigned4     ds.l    1
0B000044            9655   VUnassigned5     ds.l    1
0B000048            9656   VUnassigned6     ds.l    1
0B00004C            9657   VUnassigned7     ds.l    1
0B000050            9658   VUnassigned8     ds.l    1
0B000054            9659   VUnassigned9     ds.l    1
0B000058            9660   VUnassigned10    ds.l    1
0B00005C            9661   VUnassigned11    ds.l    1
0B000060            9662   VSpuriousIRQ     ds.l    1
                    9663   
                    9664   * Interrupt handlers Vector 25-31
0B000064            9665   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            9666   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            9667   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            9668   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            9669   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            9670   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            9671   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    9672   
                    9673   * Trap Handler vectors 32-47
0B000080            9674   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            9675   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            9676   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            9677   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            9678   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            9679   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            9680   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            9681   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            9682   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            9683   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            9684   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            9685   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            9686   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            9687   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            9688   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            9689   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    9690   
                    9691   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    9692   
                    9693   ***********************************************************************************************************
                    9694   * Other Variables
                    9695   ***********************************************************************************************************
                    9696   *__DebugA5       ds.l    1
                    9697   *__UserA5        ds.l    1
                    9698   
                    9699   ***********************************************************************************************************
0B0000C0            9700   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            9701   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            9702   __heap:         ds.l    0       ; pointers for malloc functions
                    9703   
                    9704   *__himem:       ds.l    himem            ; highest memory location + 1
                    9705   *__stklen:      ds.l    stklen           ; default stack size
                    9706   
                    9707   *********************************************************************************************************
                    9708   * Section for Heap
                    9709   *********************************************************************************************************
                    9710   
                    9711   _i:
0B0000C4            9712          ds.b      4
                    9713   _x:
0B0000C8            9714          ds.b      4
                    9715   _y:
0B0000CC            9716          ds.b      4
                    9717   _z:
0B0000D0            9718          ds.b      4
                    9719   _PortA_Count:
0B0000D4            9720          ds.b      4
                    9721   _Trace:
0B0000D8            9722          ds.b      4
                    9723   _GoFlag:
0B0000DC            9724          ds.b      4
                    9725   _Echo:
0B0000E0            9726          ds.b      4
                    9727   _d0:
0B0000E4            9728          ds.b      4
                    9729   _d1:
0B0000E8            9730          ds.b      4
                    9731   _d2:
0B0000EC            9732          ds.b      4
                    9733   _d3:
0B0000F0            9734          ds.b      4
                    9735   _d4:
0B0000F4            9736          ds.b      4
                    9737   _d5:
0B0000F8            9738          ds.b      4
                    9739   _d6:
0B0000FC            9740          ds.b      4
                    9741   _d7:
0B000100            9742          ds.b      4
                    9743   _a0:
0B000104            9744          ds.b      4
                    9745   _a1:
0B000108            9746          ds.b      4
                    9747   _a2:
0B00010C            9748          ds.b      4
                    9749   _a3:
0B000110            9750          ds.b      4
                    9751   _a4:
0B000114            9752          ds.b      4
                    9753   _a5:
0B000118            9754          ds.b      4
                    9755   _a6:
0B00011C            9756          ds.b      4
                    9757   _PC:
0B000120            9758          ds.b      4
                    9759   _SSP:
0B000124            9760          ds.b      4
                    9761   _USP:
0B000128            9762          ds.b      4
                    9763   _SR:
0B00012C            9764          ds.b      2
                    9765   _BreakPointAddress:
0B00012E            9766          ds.b      32
                    9767   _BreakPointInstruction:
0B00014E            9768          ds.b      16
                    9769   _BreakPointSetOrCleared:
0B00015E            9770          ds.b      32
                    9771   _InstructionSize:
0B00017E            9772          ds.b      4
                    9773   _WatchPointAddress:
0B000182            9774          ds.b      32
                    9775   _WatchPointSetOrCleared:
0B0001A2            9776          ds.b      32
                    9777   _WatchPointString:
0B0001C2            9778          ds.b      800
                    9779   _TempString:
0B0004E2            9780          ds.b      100
                    9781   @vsscanf_buf:
0B000546            9782          ds.b      80
                    9783          section   heap
0B000596            9784                   align
          0B00 0596 9785   bssEnd          equ *                   end of storage space for unitialised variables
                    9786   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 9787   heap   equ       *
0B000596            9788                    align
          0000 0000

Assembly errors: 0
