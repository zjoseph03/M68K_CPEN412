680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 27 Mar 2025      Time: 16:57:07          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  30FE      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  27AE      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3F16      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  484C      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  4850      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4866      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  4868      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3F16      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  355A      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  486A      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  48A4      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  48BC      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  48C4      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  48CA      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  484C      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3F16      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  48CE      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  48A4      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  48E2      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  48F8      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  490C      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3F16      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  493C      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  3654      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  33EE      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  355A      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  496C      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4992      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3F16      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  49B4      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  49D0      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  4A16      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  4A28      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  35C6      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  4A3A      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; // TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011 // This might need to be 0x53
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while (TestForSPITransmitDataComplete() == 0);
                    1614   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1615          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1616          tst.l     D0
00001122  6602      1617          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1621          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1622          rts
                    1623   ; }
                    1624   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1625   ; void ClearSPIReadFIFO(void) {
                    1626   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1627          link      A6,#-4
                    1628   ; volatile unsigned char dummy;
                    1629   ; while((SPI_Status & 0x01) == 0) {
                    1630   ClearSPIReadFIFO_1:
00001134  1039 0040 1631          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1632          and.b     #1,D0
0000113E  660A      1633          bne.s     ClearSPIReadFIFO_3
                    1634   ; dummy = SPI_Data;
00001140  1D79 0040 1635          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1636          bra       ClearSPIReadFIFO_1
                    1637   ClearSPIReadFIFO_3:
0000114A  4E5E      1638          unlk      A6
0000114C  4E75      1639          rts
                    1640   ; }
                    1641   ; }
                    1642   ; void SPIFlashPollStatusWLE(void) {
                    1643   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char status;
                    1646   ; unsigned char dummy;
                    1647   ; do {
                    1648   SPIFlashPollStatusWLE_1:
                    1649   ; // Start a new read status register command each time
                    1650   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1651          move.b    #254,4227112
00001156  0040 8028 
                    1652   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1653          pea       5
0000115E  4EB8 10C4 1654          jsr       _SPISafeWrite
00001162  584F      1655          addq.w    #4,A7
                    1656   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1657          pea       255
00001168  4EB8 10C4 1658          jsr       _SPISafeWrite
0000116C  584F      1659          addq.w    #4,A7
0000116E  1D40 FFFE 1660          move.b    D0,-2(A6)
                    1661   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1662          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1663          move.b    -2(A6),D0
0000117E  C03C 0002 1664          and.b     #2,D0
00001182  67CE      1665          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1666          unlk      A6
00001186  4E75      1667          rts
                    1668   ; // printf("\r\n WLE Status: %02x \n", status);
                    1669   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1670   ; }
                    1671   ; void SPIFlashPollStatusBusy(void) {
                    1672   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1673          link      A6,#-4
                    1674   ; unsigned char status;
                    1675   ; unsigned char dummy;
                    1676   ; do {
                    1677   SPIFlashPollStatusBusy_1:
                    1678   ; // Start a new read status register command each time
                    1679   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1680          move.b    #254,4227112
00001190  0040 8028 
                    1681   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1682          pea       5
00001198  4EB8 10C4 1683          jsr       _SPISafeWrite
0000119C  584F      1684          addq.w    #4,A7
                    1685   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1686          pea       255
000011A2  4EB8 10C4 1687          jsr       _SPISafeWrite
000011A6  584F      1688          addq.w    #4,A7
000011A8  1D40 FFFE 1689          move.b    D0,-2(A6)
                    1690   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1691          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1692          move.b    -2(A6),D0
000011B8  C03C 0001 1693          and.b     #1,D0
000011BC  66CE      1694          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1695          unlk      A6
000011C0  4E75      1696          rts
                    1697   ; // printf("\r\n Busy Status: %02x \n", status);
                    1698   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011C2  4E56 0000 1707          link      A6,#0
                    1708   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1709          move.l    8(A6),D1
000011CA  C2BC 0000 1710          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1711          move.l    D1,-(A7)
000011D2  4EB8 10C4 1712          jsr       _SPISafeWrite
000011D6  584F      1713          addq.w    #4,A7
                    1714   ; return SPI_Data;
000011D8  1039 0040 1715          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1716          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1717          unlk      A6
000011E6  4E75      1718          rts
                    1719   ; }
                    1720   ; void SPIFlashWriteEnable() {
                    1721   _SPIFlashWriteEnable:
                    1722   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1723          move.b    #254,4227112
000011EC  0040 8028 
                    1724   ; SPISafeWrite(0x06);
000011F0  4878 0006 1725          pea       6
000011F4  4EB8 10C4 1726          jsr       _SPISafeWrite
000011F8  584F      1727          addq.w    #4,A7
                    1728   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1729          move.b    #255,4227112
000011FE  0040 8028 
                    1730   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1731   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1732          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1733          rts
                    1734   ; }
                    1735   ; void SPISendAddress(int c) {
                    1736   _SPISendAddress:
00001208  4E56 0000 1737          link      A6,#0
0000120C  48E7 2020 1738          movem.l   D2/A2,-(A7)
00001210  242E 0008 1739          move.l    8(A6),D2
00001214  45F8 10C4 1740          lea       _SPISafeWrite.L,A2
                    1741   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1742          move.l    D2,D1
0000121A  E081      1743          asr.l     #8,D1
0000121C  E081      1744          asr.l     #8,D1
0000121E  C2BC 0000 1745          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1746          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1747          move.l    D1,-(A7)
0000122C  4E92      1748          jsr       (A2)
0000122E  584F      1749          addq.w    #4,A7
                    1750   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1751          move.l    D2,D1
00001232  E081      1752          asr.l     #8,D1
00001234  C2BC 0000 1753          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1754          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1755          move.l    D1,-(A7)
00001242  4E92      1756          jsr       (A2)
00001244  584F      1757          addq.w    #4,A7
                    1758   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1759          move.l    D2,D1
00001248  C2BC 0000 1760          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1761          and.l     #255,D1
00001252  00FF      
00001254  2F01      1762          move.l    D1,-(A7)
00001256  4E92      1763          jsr       (A2)
00001258  584F      1764          addq.w    #4,A7
0000125A  4CDF 0404 1765          movem.l   (A7)+,D2/A2
0000125E  4E5E      1766          unlk      A6
00001260  4E75      1767          rts
                    1768   ; }
                    1769   ; void SPIFlashPageProgram(int addr) {
                    1770   _SPIFlashPageProgram:
00001262  4E56 FFF8 1771          link      A6,#-8
00001266  2F02      1772          move.l    D2,-(A7)
                    1773   ; unsigned char *sramMemoryPtr;
                    1774   ; int flashAddr = addr - 0x08000000;
00001268  202E 0008 1775          move.l    8(A6),D0
0000126C  0480 0800 1776          sub.l     #134217728,D0
00001270  0000      
00001272  2D40 FFFC 1777          move.l    D0,-4(A6)
                    1778   ; int i;
                    1779   ; SPI_CS = 0xFE;
00001276  13FC 00FE 1780          move.b    #254,4227112
0000127A  0040 8028 
                    1781   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000127E  4878 0002 1782          pea       2
00001282  4EB8 10C4 1783          jsr       _SPISafeWrite
00001286  584F      1784          addq.w    #4,A7
                    1785   ; SPISendAddress(flashAddr);
00001288  2F2E FFFC 1786          move.l    -4(A6),-(A7)
0000128C  4EB8 1208 1787          jsr       _SPISendAddress
00001290  584F      1788          addq.w    #4,A7
                    1789   ; for (i = 0; i < 256; i++) {
00001292  4282      1790          clr.l     D2
                    1791   SPIFlashPageProgram_1:
00001294  0C82 0000 1792          cmp.l     #256,D2
00001298  0100      
0000129A  6C22      1793          bge.s     SPIFlashPageProgram_3
                    1794   ; sramMemoryPtr = (unsigned char*) (addr + i);
0000129C  202E 0008 1795          move.l    8(A6),D0
000012A0  D082      1796          add.l     D2,D0
000012A2  2D40 FFF8 1797          move.l    D0,-8(A6)
                    1798   ; WriteSPIChar(*sramMemoryPtr); // Random value for testing purposes
000012A6  206E FFF8 1799          move.l    -8(A6),A0
000012AA  1210      1800          move.b    (A0),D1
000012AC  C2BC 0000 1801          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1802          move.l    D1,-(A7)
000012B4  4EB8 11C2 1803          jsr       _WriteSPIChar
000012B8  584F      1804          addq.w    #4,A7
000012BA  5282      1805          addq.l    #1,D2
000012BC  60D6      1806          bra       SPIFlashPageProgram_1
                    1807   SPIFlashPageProgram_3:
                    1808   ; // printf("%02x ", *sramMemoryPtr);
                    1809   ; }
                    1810   ; SPI_CS = 0xFF;
000012BE  13FC 00FF 1811          move.b    #255,4227112
000012C2  0040 8028 
                    1812   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1813   ; SPIFlashPollStatusBusy();
000012C6  4EB8 1188 1814          jsr       _SPIFlashPollStatusBusy
000012CA  241F      1815          move.l    (A7)+,D2
000012CC  4E5E      1816          unlk      A6
000012CE  4E75      1817          rts
                    1818   ; }
                    1819   ; void SPIFlashErase(void) {
                    1820   _SPIFlashErase:
                    1821   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1822   ; printf("\nErasing...\n");
000012D0  4879 0000 1823          pea       @m68kde~1_22.L
000012D4  4A6E      
000012D6  4EB9 0000 1824          jsr       _printf
000012DA  3F16      
000012DC  584F      1825          addq.w    #4,A7
                    1826   ; SPI_CS = 0xFE;
000012DE  13FC 00FE 1827          move.b    #254,4227112
000012E2  0040 8028 
                    1828   ; SPISafeWrite(0xC7);
000012E6  4878 00C7 1829          pea       199
000012EA  4EB8 10C4 1830          jsr       _SPISafeWrite
000012EE  584F      1831          addq.w    #4,A7
                    1832   ; SPI_CS = 0xFF;
000012F0  13FC 00FF 1833          move.b    #255,4227112
000012F4  0040 8028 
                    1834   ; SPIFlashPollStatusBusy();
000012F8  4EB8 1188 1835          jsr       _SPIFlashPollStatusBusy
000012FC  4E75      1836          rts
                    1837   ; }
                    1838   ; int SPIFlashRead() {
                    1839   _SPIFlashRead:
000012FE  4E56 FFFC 1840          link      A6,#-4
00001302  48E7 3000 1841          movem.l   D2/D3,-(A7)
                    1842   ; unsigned char readData;
                    1843   ; unsigned char *sramMemoryPtr;
                    1844   ; int addr;
                    1845   ; ClearSPIReadFIFO();
00001306  4EB8 1130 1846          jsr       _ClearSPIReadFIFO
                    1847   ; SPI_CS = 0xFE;
0000130A  13FC 00FE 1848          move.b    #254,4227112
0000130E  0040 8028 
                    1849   ; SPISafeWrite(0x03);
00001312  4878 0003 1850          pea       3
00001316  4EB8 10C4 1851          jsr       _SPISafeWrite
0000131A  584F      1852          addq.w    #4,A7
                    1853   ; SPISendAddress(0x0);
0000131C  42A7      1854          clr.l     -(A7)
0000131E  4EB8 1208 1855          jsr       _SPISendAddress
00001322  584F      1856          addq.w    #4,A7
                    1857   ; for (addr = 0x08000000; addr < (0x08040000); addr ++) {
00001324  243C 0800 1858          move.l    #134217728,D2
00001328  0000      
                    1859   SPIFlashRead_1:
0000132A  0C82 0804 1860          cmp.l     #134479872,D2
0000132E  0000      
00001330  6C1A      1861          bge.s     SPIFlashRead_3
                    1862   ; sramMemoryPtr = (unsigned char*) addr;
00001332  2D42 FFFC 1863          move.l    D2,-4(A6)
                    1864   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001336  4878 00FF 1865          pea       255
0000133A  4EB8 10C4 1866          jsr       _SPISafeWrite
0000133E  584F      1867          addq.w    #4,A7
00001340  1600      1868          move.b    D0,D3
                    1869   ; *sramMemoryPtr = readData;
00001342  206E FFFC 1870          move.l    -4(A6),A0
00001346  1083      1871          move.b    D3,(A0)
00001348  5282      1872          addq.l    #1,D2
0000134A  60DE      1873          bra       SPIFlashRead_1
                    1874   SPIFlashRead_3:
                    1875   ; }
                    1876   ; SPI_CS = 0xFF;
0000134C  13FC 00FF 1877          move.b    #255,4227112
00001350  0040 8028 
                    1878   ; SPIFlashPollStatusBusy();
00001354  4EB8 1188 1879          jsr       _SPIFlashPollStatusBusy
                    1880   ; return readData;
00001358  C6BC 0000 1881          and.l     #255,D3
0000135C  00FF      
0000135E  2003      1882          move.l    D3,D0
00001360  4CDF 000C 1883          movem.l   (A7)+,D2/D3
00001364  4E5E      1884          unlk      A6
00001366  4E75      1885          rts
                    1886   ; }
                    1887   ; /*******************************************************************
                    1888   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1889   ; ********************************************************************/
                    1890   ; void ProgramFlashChip(void)
                    1891   ; {
                    1892   _ProgramFlashChip:
00001368  4E56 FFFC 1893          link      A6,#-4
                    1894   ; int addr;
                    1895   ; SPIFlashPollStatusBusy();
0000136C  4EB8 1188 1896          jsr       _SPIFlashPollStatusBusy
                    1897   ; SPIFlashWriteEnable();
00001370  4EB8 11E8 1898          jsr       _SPIFlashWriteEnable
                    1899   ; SPIFlashErase();
00001374  4EB8 12D0 1900          jsr       _SPIFlashErase
                    1901   ; // 256KB = 262144 bytes (0x40000)
                    1902   ; // We need to write one page at a time (256 bytes at a time)
                    1903   ; // This code writes the user program from DRAM to FLASH
                    1904   ; // printf("\r\n Starting Programming...");
                    1905   ; // for (addr = 0x08000000; addr < (0x08040000); addr += 256) {
                    1906   ; //     SPIFlashWriteEnable(); 
                    1907   ; //     // printf("\r\n Addr: %08x \n", addr);
                    1908   ; //     SPIFlashPageProgram(addr);
                    1909   ; // }
                    1910   ; printf("\r\n Programming Complete!");
00001378  4879 0000 1911          pea       @m68kde~1_23.L
0000137C  4A7C      
0000137E  4EB9 0000 1912          jsr       _printf
00001382  3F16      
00001384  584F      1913          addq.w    #4,A7
00001386  4E5E      1914          unlk      A6
00001388  4E75      1915          rts
                    1916   ; }
                    1917   ; /*************************************************************************
                    1918   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1919   ; **************************************************************************/
                    1920   ; void LoadFromFlashChip(void)
                    1921   ; {
                    1922   _LoadFromFlashChip:
0000138A  4E56 FFFC 1923          link      A6,#-4
                    1924   ; int readData;
                    1925   ; printf("\r\n Loading Program From SPI Flash....") ;
0000138E  4879 0000 1926          pea       @m68kde~1_24.L
00001392  4A96      
00001394  4EB9 0000 1927          jsr       _printf
00001398  3F16      
0000139A  584F      1928          addq.w    #4,A7
                    1929   ; SPIFlashPollStatusBusy();
0000139C  4EB8 1188 1930          jsr       _SPIFlashPollStatusBusy
                    1931   ; readData = SPIFlashRead();
000013A0  4EB8 12FE 1932          jsr       _SPIFlashRead
000013A4  2D40 FFFC 1933          move.l    D0,-4(A6)
                    1934   ; printf("\r\n Read Data: %08x \n", readData);
000013A8  2F2E FFFC 1935          move.l    -4(A6),-(A7)
000013AC  4879 0000 1936          pea       @m68kde~1_25.L
000013B0  4ABC      
000013B2  4EB9 0000 1937          jsr       _printf
000013B6  3F16      
000013B8  504F      1938          addq.w    #8,A7
000013BA  4E5E      1939          unlk      A6
000013BC  4E75      1940          rts
                    1941   ; }
                    1942   ; void printBinary(unsigned char value) {
                    1943   _printBinary:
000013BE  4E56 0000 1944          link      A6,#0
000013C2  48E7 2020 1945          movem.l   D2/A2,-(A7)
000013C6  45F9 0000 1946          lea       _printf.L,A2
000013CA  3F16      
                    1947   ; int i;
                    1948   ; printf("IIC_CRSR Transmit (Binary): ");
000013CC  4879 0000 1949          pea       @m68kde~1_26.L
000013D0  4AD2      
000013D2  4E92      1950          jsr       (A2)
000013D4  584F      1951          addq.w    #4,A7
                    1952   ; for (i = 7; i >= 0; i--) { // Loop through each bit (from MSB to LSB)
000013D6  7407      1953          moveq     #7,D2
                    1954   printBinary_1:
000013D8  0C82 0000 1955          cmp.l     #0,D2
000013DC  0000      
000013DE  6D22      1956          blt.s     printBinary_3
                    1957   ; printf("%d", (value >> i) & 1); // Shift and mask to extract each bit
000013E0  122E 000B 1958          move.b    11(A6),D1
000013E4  C2BC 0000 1959          and.l     #255,D1
000013E8  00FF      
000013EA  E4A1      1960          asr.l     D2,D1
000013EC  C2BC 0000 1961          and.l     #1,D1
000013F0  0001      
000013F2  2F01      1962          move.l    D1,-(A7)
000013F4  4879 0000 1963          pea       @m68kde~1_27.L
000013F8  4AF0      
000013FA  4E92      1964          jsr       (A2)
000013FC  504F      1965          addq.w    #8,A7
000013FE  5382      1966          subq.l    #1,D2
00001400  60D6      1967          bra       printBinary_1
                    1968   printBinary_3:
                    1969   ; }
                    1970   ; printf("\n");
00001402  4879 0000 1971          pea       @m68kde~1_28.L
00001406  4AF4      
00001408  4E92      1972          jsr       (A2)
0000140A  584F      1973          addq.w    #4,A7
0000140C  4CDF 0404 1974          movem.l   (A7)+,D2/A2
00001410  4E5E      1975          unlk      A6
00001412  4E75      1976          rts
                    1977   ; }
                    1978   ; void IICCoreEnable() {
                    1979   _IICCoreEnable:
                    1980   ; IIC_CTR |= 0x80;     // Enable I2C core in control register (1000_0000)
00001414  0039 0080 1981          or.b      #128,4227076
00001418  0040 8004 
0000141C  4E75      1982          rts
                    1983   ; }
                    1984   ; void IICCoreDisable() {
                    1985   _IICCoreDisable:
                    1986   ; IIC_CTR &= 0x7F;    // Disable I2C core in control register (0011_1111)
0000141E  0239 007F 1987          and.b     #127,4227076
00001422  0040 8004 
00001426  4E75      1988          rts
                    1989   ; }
                    1990   ; // I2C Driver Functions
                    1991   ; void IIC_Init(void) {
                    1992   _IIC_Init:
                    1993   ; IIC_PRER_LO = 0x59;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001428  13FC 0059 1994          move.b    #89,4227072
0000142C  0040 8000 
                    1995   ; IIC_PRER_HI = 0x00;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001430  4239 0040 1996          clr.b     4227074
00001434  8002      
                    1997   ; IIC_CTR &= 0xBF;     // Disable interrupt in control register (1011_1111)
00001436  0239 00BF 1998          and.b     #191,4227076
0000143A  0040 8004 
                    1999   ; IICCoreEnable();
0000143E  4EB8 1414 2000          jsr       _IICCoreEnable
00001442  4E75      2001          rts
                    2002   ; }
                    2003   ; void wait5ms(void) {
                    2004   _wait5ms:
00001444  2F02      2005          move.l    D2,-(A7)
                    2006   ; int i;
                    2007   ; for (i = 0; i < 10000; i++); // Wait for 5 ms
00001446  4282      2008          clr.l     D2
                    2009   wait5ms_1:
00001448  0C82 0000 2010          cmp.l     #10000,D2
0000144C  2710      
0000144E  6C04      2011          bge.s     wait5ms_3
00001450  5282      2012          addq.l    #1,D2
00001452  60F4      2013          bra       wait5ms_1
                    2014   wait5ms_3:
00001454  241F      2015          move.l    (A7)+,D2
00001456  4E75      2016          rts
                    2017   ; }
                    2018   ; void checkTIP() {
                    2019   _checkTIP:
                    2020   ; while (IIC_CRSR & TIP);
                    2021   checkTIP_1:
00001458  1039 0040 2022          move.b    4227080,D0
0000145C  8008      
0000145E  C03C 0002 2023          and.b     #2,D0
00001462  6702      2024          beq.s     checkTIP_3
00001464  60F2      2025          bra       checkTIP_1
                    2026   checkTIP_3:
00001466  4E75      2027          rts
                    2028   ; }
                    2029   ; void checkAck() {
                    2030   _checkAck:
                    2031   ; while ((IIC_CRSR & RXACK) == 1);
                    2032   checkAck_1:
00001468  1039 0040 2033          move.b    4227080,D0
0000146C  8008      
0000146E  C07C 00FF 2034          and.w     #255,D0
00001472  C07C 0080 2035          and.w     #128,D0
00001476  0C40 0001 2036          cmp.w     #1,D0
0000147A  6602      2037          bne.s     checkAck_3
0000147C  60EA      2038          bra       checkAck_1
                    2039   checkAck_3:
0000147E  4E75      2040          rts
                    2041   ; }
                    2042   ; void IICStopCondition() {
                    2043   _IICStopCondition:
                    2044   ; IIC_CRSR |= STOP | READ | IACK; // STOP + READ + IACK
00001480  0039 0061 2045          or.b      #97,4227080
00001484  0040 8008 
                    2046   ; checkTIP();
00001488  4EB8 1458 2047          jsr       _checkTIP
0000148C  4E75      2048          rts
                    2049   ; }
                    2050   ; void IICStartCondition(int rwBit) {
                    2051   _IICStartCondition:
0000148E  4E56 0000 2052          link      A6,#0
                    2053   ; if (rwBit == 0) {
00001492  202E 0008 2054          move.l    8(A6),D0
00001496  660A      2055          bne.s     IICStartCondition_1
                    2056   ; IIC_CRSR |= START | WRITE | IACK; // START + WRITE + IACK
00001498  0039 0091 2057          or.b      #145,4227080
0000149C  0040 8008 
000014A0  6008      2058          bra.s     IICStartCondition_2
                    2059   IICStartCondition_1:
                    2060   ; } else {
                    2061   ; IIC_CRSR |= START | READ | IACK; // Start condition with read bit set
000014A2  0039 00A1 2062          or.b      #161,4227080
000014A6  0040 8008 
                    2063   IICStartCondition_2:
                    2064   ; }
                    2065   ; checkTIP();
000014AA  4EB8 1458 2066          jsr       _checkTIP
                    2067   ; checkAck();
000014AE  4EB8 1468 2068          jsr       _checkAck
000014B2  4E5E      2069          unlk      A6
000014B4  4E75      2070          rts
                    2071   ; }
                    2072   ; // EEPROM Address: 101000{B0} 
                    2073   ; // EEPROM Specific Functions
                    2074   ; void EEPROMByteWrite(int data, short int deviceAddr, short int memoryAddr) {
                    2075   _EEPROMByteWrite:
000014B6  4E56 0000 2076          link      A6,#0
000014BA  48E7 0030 2077          movem.l   A2/A3,-(A7)
000014BE  45F8 1458 2078          lea       _checkTIP.L,A2
000014C2  47F8 1468 2079          lea       _checkAck.L,A3
                    2080   ; // Check if there is a transmission in progress
                    2081   ; // IICCoreEnable();
                    2082   ; checkTIP();
000014C6  4E92      2083          jsr       (A2)
                    2084   ; // Set the start condition
                    2085   ; // IICStartCondition(0);
                    2086   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2087   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2088   ; // Control code, chip select, and block select (ie: Slave Address) and the R/W bit (== 0) are sent
                    2089   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000014C8  302E 000E 2090          move.w    14(A6),D0
000014CC  E340      2091          asl.w     #1,D0
000014CE  C07C 00FE 2092          and.w     #254,D0
000014D2  13C0 0040 2093          move.b    D0,4227078
000014D6  8006      
                    2094   ; IIC_CRSR = START | WRITE | IACK;
000014D8  13FC 0091 2095          move.b    #145,4227080
000014DC  0040 8008 
                    2096   ; // printf("Sent Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2097   ; checkTIP();
000014E0  4E92      2098          jsr       (A2)
                    2099   ; checkAck();
000014E2  4E93      2100          jsr       (A3)
                    2101   ; // printf("Status Register 2: %x\n", IIC_CRSR);
                    2102   ; // Check for ACK
                    2103   ; // printf("\r\n Slave Address Ack Status: : %d\n", checkAck()); //TIP is checked in checkAck function
                    2104   ; // Send the high-order byte of the address
                    2105   ; IIC_TXRX = (memoryAddr >> 8) & 0xFF;
000014E4  302E 0012 2106          move.w    18(A6),D0
000014E8  E040      2107          asr.w     #8,D0
000014EA  C07C 00FF 2108          and.w     #255,D0
000014EE  13C0 0040 2109          move.b    D0,4227078
000014F2  8006      
                    2110   ; IIC_CRSR = WRITE | IACK;
000014F4  13FC 0011 2111          move.b    #17,4227080
000014F8  0040 8008 
                    2112   ; checkTIP();
000014FC  4E92      2113          jsr       (A2)
                    2114   ; checkAck();
000014FE  4E93      2115          jsr       (A3)
                    2116   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2117   ; // Send the lower-order byte of the address
                    2118   ; IIC_TXRX = (memoryAddr & 0xFF);
00001500  302E 0012 2119          move.w    18(A6),D0
00001504  C07C 00FF 2120          and.w     #255,D0
00001508  13C0 0040 2121          move.b    D0,4227078
0000150C  8006      
                    2122   ; IIC_CRSR = WRITE | IACK;
0000150E  13FC 0011 2123          move.b    #17,4227080
00001512  0040 8008 
                    2124   ; checkTIP();
00001516  4E92      2125          jsr       (A2)
                    2126   ; checkAck();
00001518  4E93      2127          jsr       (A3)
                    2128   ; //printf("Sent Lower Memory Byte: %02x\n", memoryAddr & 0xFF);
                    2129   ; // printf("Status Register 4: %x\n", IIC_CRSR);
                    2130   ; // Transmit byte to be written
                    2131   ; IIC_TXRX = data;
0000151A  202E 0008 2132          move.l    8(A6),D0
0000151E  13C0 0040 2133          move.b    D0,4227078
00001522  8006      
                    2134   ; IIC_CRSR = STOP | WRITE | IACK;
00001524  13FC 0051 2135          move.b    #81,4227080
00001528  0040 8008 
                    2136   ; checkTIP();
0000152C  4E92      2137          jsr       (A2)
                    2138   ; checkAck();
0000152E  4E93      2139          jsr       (A3)
                    2140   ; wait5ms();
00001530  4EB8 1444 2141          jsr       _wait5ms
00001534  4CDF 0C00 2142          movem.l   (A7)+,A2/A3
00001538  4E5E      2143          unlk      A6
0000153A  4E75      2144          rts
                    2145   ; // printf("Sent Data: %02x\n", data);
                    2146   ; // printf("Sent Stop Condition");
                    2147   ; // printf("Status Register 6: %x\n", IIC_CRSR);
                    2148   ; // IICCoreDisable();
                    2149   ; //printf("\r\nI2C Byte Write Complete\n");
                    2150   ; }
                    2151   ; // void EEPROMFlashPageWrite(int* data, int startingAddress, int numBytes, int length) {
                    2152   ; //     int currentAddress = startingAddress;
                    2153   ; //     int bytesWritten = 0;
                    2154   ; //     int bytesLeftToWrite = numBytes;
                    2155   ; //   checkTIP();
                    2156   ; //   if (bytesWritten < length) {
                    2157   ; //     if (currentAddress) >= 0x100000;
                    2158   ; //   } 
                    2159   ; //   // start condition
                    2160   ; //   IIC_TXRX = ((deviceAddr << 1) & 0xFE);
                    2161   ; //   IIC_CRSR = START | WRITE | IACK;
                    2162   ; //   checkTIP();
                    2163   ; //   checkAck();
                    2164   ; //   // Send the high-order byte of the address
                    2165   ; //   IIC_TXRX = (memoryAddr >> 8) & 0xFF;
                    2166   ; //   IIC_CRSR = WRITE | IACK;
                    2167   ; //   checkTIP();
                    2168   ; //   checkAck();
                    2169   ; //   // Send the lower-order byte of the address
                    2170   ; //   IIC_TXRX = (memoryAddr & 0xFF);
                    2171   ; //   IIC_CRSR = WRITE | IACK;
                    2172   ; //   checkTIP();
                    2173   ; //   checkAck();
                    2174   ; //   // Transmit byte to be written
                    2175   ; //   IIC_TXRX = data;
                    2176   ; //   // Stop condition
                    2177   ; //   IIC_CRSR = STOP | WRITE | IACK;
                    2178   ; //   checkTIP();
                    2179   ; //   checkAck();
                    2180   ; //   wait5ms();
                    2181   ; // }
                    2182   ; int EEPROMRandomRead(int deviceAddr, int readAddr) {
                    2183   _EEPROMRandomRead:
0000153C  4E56 FFFC 2184          link      A6,#-4
00001540  48E7 0030 2185          movem.l   A2/A3,-(A7)
00001544  45F8 1458 2186          lea       _checkTIP.L,A2
00001548  47F8 1468 2187          lea       _checkAck.L,A3
                    2188   ; int readData;
                    2189   ; // Wait for bus to be idle
                    2190   ; // IICCoreEnable(); 
                    2191   ; checkTIP(); 
0000154C  4E92      2192          jsr       (A2)
                    2193   ; // Print TXRX register
                    2194   ; // Send start condition for a write
                    2195   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
0000154E  202E 0008 2196          move.l    8(A6),D0
00001552  E380      2197          asl.l     #1,D0
00001554  C0BC 0000 2198          and.l     #254,D0
00001558  00FE      
0000155A  13C0 0040 2199          move.b    D0,4227078
0000155E  8006      
                    2200   ; IIC_CRSR = START | WRITE | IACK;
00001560  13FC 0091 2201          move.b    #145,4227080
00001564  0040 8008 
                    2202   ; checkTIP();
00001568  4E92      2203          jsr       (A2)
                    2204   ; checkAck();
0000156A  4E93      2205          jsr       (A3)
                    2206   ; //printf("Sending Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2207   ; // Send the high-order byte of the address
                    2208   ; IIC_TXRX = (readAddr >> 8) & 0xFF;
0000156C  202E 000C 2209          move.l    12(A6),D0
00001570  E080      2210          asr.l     #8,D0
00001572  C0BC 0000 2211          and.l     #255,D0
00001576  00FF      
00001578  13C0 0040 2212          move.b    D0,4227078
0000157C  8006      
                    2213   ; IIC_CRSR = WRITE | IACK;
0000157E  13FC 0011 2214          move.b    #17,4227080
00001582  0040 8008 
                    2215   ; //printf("Sent Upper Memory Byte: %02x\n", readAddr >> 8);
                    2216   ; checkTIP();
00001586  4E92      2217          jsr       (A2)
                    2218   ; checkAck();
00001588  4E93      2219          jsr       (A3)
                    2220   ; // Send the low-order byte of the address
                    2221   ; IIC_TXRX = (readAddr & 0xFF);
0000158A  202E 000C 2222          move.l    12(A6),D0
0000158E  C0BC 0000 2223          and.l     #255,D0
00001592  00FF      
00001594  13C0 0040 2224          move.b    D0,4227078
00001598  8006      
                    2225   ; IIC_CRSR = WRITE | IACK;
0000159A  13FC 0011 2226          move.b    #17,4227080
0000159E  0040 8008 
                    2227   ; //printf("Sent Lower Memory Byte: %02x\n", readAddr & 0xFF);
                    2228   ; checkTIP();
000015A2  4E92      2229          jsr       (A2)
                    2230   ; checkAck();
000015A4  4E93      2231          jsr       (A3)
                    2232   ; // send START condition again followed by slave address with R/W set to 1
                    2233   ; IIC_TXRX = 0xA1; //((deviceAddr << 1) | 0x01);
000015A6  13FC 00A1 2234          move.b    #161,4227078
000015AA  0040 8006 
                    2235   ; IIC_CRSR = START | WRITE | IACK;
000015AE  13FC 0091 2236          move.b    #145,4227080
000015B2  0040 8008 
                    2237   ; checkTIP();
000015B6  4E92      2238          jsr       (A2)
                    2239   ; checkAck();
000015B8  4E93      2240          jsr       (A3)
                    2241   ; // IICStopCondition();
                    2242   ; IIC_CRSR = STOP | READ | IACK | NACK; // STOP + READ + IACK + NACK
000015BA  13FC 0069 2243          move.b    #105,4227080
000015BE  0040 8008 
                    2244   ; checkTIP();
000015C2  4E92      2245          jsr       (A2)
                    2246   ; // Check if IF flag is sent, and if so read the data
                    2247   ; while (!(IIC_CRSR & 0x1));
                    2248   EEPROMRandomRead_1:
000015C4  1039 0040 2249          move.b    4227080,D0
000015C8  8008      
000015CA  C03C 0001 2250          and.b     #1,D0
000015CE  6602      2251          bne.s     EEPROMRandomRead_3
000015D0  60F2      2252          bra       EEPROMRandomRead_1
                    2253   EEPROMRandomRead_3:
                    2254   ; IIC_CRSR = 0;
000015D2  4239 0040 2255          clr.b     4227080
000015D6  8008      
                    2256   ; readData = IIC_TXRX;
000015D8  1039 0040 2257          move.b    4227078,D0
000015DC  8006      
000015DE  C0BC 0000 2258          and.l     #255,D0
000015E2  00FF      
000015E4  2D40 FFFC 2259          move.l    D0,-4(A6)
                    2260   ; return readData;    
000015E8  202E FFFC 2261          move.l    -4(A6),D0
000015EC  4CDF 0C00 2262          movem.l   (A7)+,A2/A3
000015F0  4E5E      2263          unlk      A6
000015F2  4E75      2264          rts
                    2265   ; }
                    2266   ; void EEPROMReadBlock0(int startAddr, int* readLen) {
                    2267   _EEPROMReadBlock0:
000015F4  4E56 FFF8 2268          link      A6,#-8
000015F8  48E7 3030 2269          movem.l   D2/D3/A2/A3,-(A7)
000015FC  45F8 1458 2270          lea       _checkTIP.L,A2
00001600  47F8 1468 2271          lea       _checkAck.L,A3
00001604  262E 0008 2272          move.l    8(A6),D3
                    2273   ; int currAddr = startAddr;
00001608  2403      2274          move.l    D3,D2
                    2275   ; int endAddr = startAddr + *readLen;
0000160A  2003      2276          move.l    D3,D0
0000160C  206E 000C 2277          move.l    12(A6),A0
00001610  D090      2278          add.l     (A0),D0
00001612  2D40 FFF8 2279          move.l    D0,-8(A6)
                    2280   ; int readData;
                    2281   ; // printf("Start Addr: %d\n Read Len: %d\n", startAddr, *readLen);
                    2282   ; checkTIP();
00001616  4E92      2283          jsr       (A2)
                    2284   ; IIC_TXRX = ((EEPROM0 << 1) & 0xFE); // Send EEPROM address with write bit
00001618  13FC 00A0 2285          move.b    #160,4227078
0000161C  0040 8006 
                    2286   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
00001620  13FC 0091 2287          move.b    #145,4227080
00001624  0040 8008 
                    2288   ; checkTIP();
00001628  4E92      2289          jsr       (A2)
                    2290   ; checkAck(); 
0000162A  4E93      2291          jsr       (A3)
                    2292   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
0000162C  2002      2293          move.l    D2,D0
0000162E  E080      2294          asr.l     #8,D0
00001630  C0BC 0000 2295          and.l     #255,D0
00001634  00FF      
00001636  13C0 0040 2296          move.b    D0,4227078
0000163A  8006      
                    2297   ; IIC_CRSR = WRITE | IACK; // Write command
0000163C  13FC 0011 2298          move.b    #17,4227080
00001640  0040 8008 
                    2299   ; checkTIP();
00001644  4E92      2300          jsr       (A2)
                    2301   ; checkAck();
00001646  4E93      2302          jsr       (A3)
                    2303   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
00001648  2002      2304          move.l    D2,D0
0000164A  C0BC 0000 2305          and.l     #255,D0
0000164E  00FF      
00001650  13C0 0040 2306          move.b    D0,4227078
00001654  8006      
                    2307   ; IIC_CRSR = WRITE | IACK; // Write command
00001656  13FC 0011 2308          move.b    #17,4227080
0000165A  0040 8008 
                    2309   ; checkTIP();
0000165E  4E92      2310          jsr       (A2)
                    2311   ; checkAck();
00001660  4E93      2312          jsr       (A3)
                    2313   ; // Repeated start condition here:
                    2314   ; IIC_TXRX = ((EEPROM0 << 1) | 0x01); // (A3) Send EEPROM address with read bit
00001662  13FC 00A1 2315          move.b    #161,4227078
00001666  0040 8006 
                    2316   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
0000166A  13FC 0091 2317          move.b    #145,4227080
0000166E  0040 8008 
                    2318   ; checkTIP();
00001672  4E92      2319          jsr       (A2)
                    2320   ; checkAck();
00001674  4E93      2321          jsr       (A3)
                    2322   ; // Evaluate data here
                    2323   ; for (currAddr = startAddr; currAddr < startAddr + endAddr; currAddr++) {
00001676  2403      2324          move.l    D3,D2
                    2325   EEPROMReadBlock0_1:
00001678  2003      2326          move.l    D3,D0
0000167A  D0AE FFF8 2327          add.l     -8(A6),D0
0000167E  B480      2328          cmp.l     D0,D2
00001680  6C00 006C 2329          bge       EEPROMReadBlock0_3
                    2330   ; if (currAddr == 0xFFFF) {
00001684  0C82 0000 2331          cmp.l     #65535,D2
00001688  FFFF      
0000168A  660A      2332          bne.s     EEPROMReadBlock0_4
                    2333   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
0000168C  13FC 0069 2334          move.b    #105,4227080
00001690  0040 8008 
00001694  6008      2335          bra.s     EEPROMReadBlock0_5
                    2336   EEPROMReadBlock0_4:
                    2337   ; } else {
                    2338   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
00001696  13FC 0021 2339          move.b    #33,4227080
0000169A  0040 8008 
                    2340   EEPROMReadBlock0_5:
                    2341   ; }
                    2342   ; (*readLen)--;
0000169E  206E 000C 2343          move.l    12(A6),A0
000016A2  5390      2344          subq.l    #1,(A0)
                    2345   ; checkTIP();
000016A4  4E92      2346          jsr       (A2)
                    2347   ; checkAck(); // Check for ACK
000016A6  4E93      2348          jsr       (A3)
                    2349   ; // Read data from EEPROM
                    2350   ; while (!IIC_CRSR & 0x1); // Wait for IF flag to be set
                    2351   EEPROMReadBlock0_6:
000016A8  4A39 0040 2352          tst.b     4227080
000016AC  8008      
000016AE  6604      2353          bne.s     EEPROMReadBlock0_9
000016B0  7001      2354          moveq     #1,D0
000016B2  6002      2355          bra.s     EEPROMReadBlock0_10
                    2356   EEPROMReadBlock0_9:
000016B4  4280      2357          clr.l     D0
                    2358   EEPROMReadBlock0_10:
000016B6  C03C 0001 2359          and.b     #1,D0
000016BA  6702      2360          beq.s     EEPROMReadBlock0_8
000016BC  60EA      2361          bra       EEPROMReadBlock0_6
                    2362   EEPROMReadBlock0_8:
                    2363   ; IIC_CRSR = 0; // Clear IF flag
000016BE  4239 0040 2364          clr.b     4227080
000016C2  8008      
                    2365   ; readData = IIC_TXRX; // Read data from EEPROM
000016C4  1039 0040 2366          move.b    4227078,D0
000016C8  8006      
000016CA  C0BC 0000 2367          and.l     #255,D0
000016CE  00FF      
000016D0  2D40 FFFC 2368          move.l    D0,-4(A6)
                    2369   ; printf("\r\n Address: %d: %d\n", currAddr, readData); // Debug: Indicate the address being read and the data read
000016D4  2F2E FFFC 2370          move.l    -4(A6),-(A7)
000016D8  2F02      2371          move.l    D2,-(A7)
000016DA  4879 0000 2372          pea       @m68kde~1_29.L
000016DE  4AF6      
000016E0  4EB9 0000 2373          jsr       _printf
000016E4  3F16      
000016E6  DEFC 000C 2374          add.w     #12,A7
000016EA  5282      2375          addq.l    #1,D2
000016EC  608A      2376          bra       EEPROMReadBlock0_1
                    2377   EEPROMReadBlock0_3:
000016EE  4CDF 0C0C 2378          movem.l   (A7)+,D2/D3/A2/A3
000016F2  4E5E      2379          unlk      A6
000016F4  4E75      2380          rts
                    2381   ; }
                    2382   ; }
                    2383   ; // Edge cases for block 1: size runs out or we reach end of block 1
                    2384   ; void EEPROMReadBlock1(int startAddr, int* readLen) {
                    2385   _EEPROMReadBlock1:
000016F6  4E56 FFF8 2386          link      A6,#-8
000016FA  48E7 3830 2387          movem.l   D2/D3/D4/A2/A3,-(A7)
000016FE  45F8 1458 2388          lea       _checkTIP.L,A2
00001702  47F8 1468 2389          lea       _checkAck.L,A3
00001706  262E 0008 2390          move.l    8(A6),D3
0000170A  282E 000C 2391          move.l    12(A6),D4
                    2392   ; int currAddr = startAddr;
0000170E  2403      2393          move.l    D3,D2
                    2394   ; int endAddr = startAddr + *readLen;
00001710  2003      2395          move.l    D3,D0
00001712  2044      2396          move.l    D4,A0
00001714  D090      2397          add.l     (A0),D0
00001716  2D40 FFF8 2398          move.l    D0,-8(A6)
                    2399   ; int readData;
                    2400   ; checkTIP();
0000171A  4E92      2401          jsr       (A2)
                    2402   ; IIC_TXRX = ((EEPROM1 << 1) & 0xFE); // Send EEPROM address with write bit
0000171C  13FC 00A2 2403          move.b    #162,4227078
00001720  0040 8006 
                    2404   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
00001724  13FC 0091 2405          move.b    #145,4227080
00001728  0040 8008 
                    2406   ; checkTIP();
0000172C  4E92      2407          jsr       (A2)
                    2408   ; checkAck(); 
0000172E  4E93      2409          jsr       (A3)
                    2410   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
00001730  2002      2411          move.l    D2,D0
00001732  E080      2412          asr.l     #8,D0
00001734  C0BC 0000 2413          and.l     #255,D0
00001738  00FF      
0000173A  13C0 0040 2414          move.b    D0,4227078
0000173E  8006      
                    2415   ; IIC_CRSR = WRITE | IACK; // Write command
00001740  13FC 0011 2416          move.b    #17,4227080
00001744  0040 8008 
                    2417   ; checkTIP();
00001748  4E92      2418          jsr       (A2)
                    2419   ; checkAck();
0000174A  4E93      2420          jsr       (A3)
                    2421   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
0000174C  2002      2422          move.l    D2,D0
0000174E  C0BC 0000 2423          and.l     #255,D0
00001752  00FF      
00001754  13C0 0040 2424          move.b    D0,4227078
00001758  8006      
                    2425   ; IIC_CRSR = WRITE | IACK; // Write command
0000175A  13FC 0011 2426          move.b    #17,4227080
0000175E  0040 8008 
                    2427   ; checkTIP();
00001762  4E92      2428          jsr       (A2)
                    2429   ; checkAck();
00001764  4E93      2430          jsr       (A3)
                    2431   ; // Repeated start condition here:
                    2432   ; IIC_TXRX = ((EEPROM1 << 1) | 0x01); // (A3) Send EEPROM address with read bit
00001766  13FC 00A3 2433          move.b    #163,4227078
0000176A  0040 8006 
                    2434   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
0000176E  13FC 0091 2435          move.b    #145,4227080
00001772  0040 8008 
                    2436   ; checkTIP();
00001776  4E92      2437          jsr       (A2)
                    2438   ; checkAck();
00001778  4E93      2439          jsr       (A3)
                    2440   ; // Evaluate data here
                    2441   ; for (currAddr = startAddr; currAddr < startAddr + endAddr; currAddr++) {
0000177A  2403      2442          move.l    D3,D2
                    2443   EEPROMReadBlock1_1:
0000177C  2003      2444          move.l    D3,D0
0000177E  D0AE FFF8 2445          add.l     -8(A6),D0
00001782  B480      2446          cmp.l     D0,D2
00001784  6C00 007E 2447          bge       EEPROMReadBlock1_3
                    2448   ; if (currAddr == 0xFFFF) {
00001788  0C82 0000 2449          cmp.l     #65535,D2
0000178C  FFFF      
0000178E  660A      2450          bne.s     EEPROMReadBlock1_4
                    2451   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
00001790  13FC 0069 2452          move.b    #105,4227080
00001794  0040 8008 
00001798  6008      2453          bra.s     EEPROMReadBlock1_5
                    2454   EEPROMReadBlock1_4:
                    2455   ; } else {
                    2456   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
0000179A  13FC 0021 2457          move.b    #33,4227080
0000179E  0040 8008 
                    2458   EEPROMReadBlock1_5:
                    2459   ; }
                    2460   ; (*readLen)--;
000017A2  2044      2461          move.l    D4,A0
000017A4  5390      2462          subq.l    #1,(A0)
                    2463   ; checkTIP();
000017A6  4E92      2464          jsr       (A2)
                    2465   ; checkAck(); // Check for ACK
000017A8  4E93      2466          jsr       (A3)
                    2467   ; // Read data from EEPROM
                    2468   ; while (!IIC_CRSR & 0x1); // Wait for IF flag to be set
                    2469   EEPROMReadBlock1_6:
000017AA  4A39 0040 2470          tst.b     4227080
000017AE  8008      
000017B0  6604      2471          bne.s     EEPROMReadBlock1_9
000017B2  7001      2472          moveq     #1,D0
000017B4  6002      2473          bra.s     EEPROMReadBlock1_10
                    2474   EEPROMReadBlock1_9:
000017B6  4280      2475          clr.l     D0
                    2476   EEPROMReadBlock1_10:
000017B8  C03C 0001 2477          and.b     #1,D0
000017BC  6702      2478          beq.s     EEPROMReadBlock1_8
000017BE  60EA      2479          bra       EEPROMReadBlock1_6
                    2480   EEPROMReadBlock1_8:
                    2481   ; IIC_CRSR = 0; // Clear IF flag
000017C0  4239 0040 2482          clr.b     4227080
000017C4  8008      
                    2483   ; readData = IIC_TXRX; // Read data from EEPROM
000017C6  1039 0040 2484          move.b    4227078,D0
000017CA  8006      
000017CC  C0BC 0000 2485          and.l     #255,D0
000017D0  00FF      
000017D2  2D40 FFFC 2486          move.l    D0,-4(A6)
                    2487   ; printf("\r\n Address: %d: %d\n", currAddr, readData); // Debug: Indicate the address being read and the data read
000017D6  2F2E FFFC 2488          move.l    -4(A6),-(A7)
000017DA  2F02      2489          move.l    D2,-(A7)
000017DC  4879 0000 2490          pea       @m68kde~1_29.L
000017E0  4AF6      
000017E2  4EB9 0000 2491          jsr       _printf
000017E6  3F16      
000017E8  DEFC 000C 2492          add.w     #12,A7
                    2493   ; printf("Read Len: %d\n", *readLen); // Debug: Indicate the address being read and the data read
000017EC  2044      2494          move.l    D4,A0
000017EE  2F10      2495          move.l    (A0),-(A7)
000017F0  4879 0000 2496          pea       @m68kde~1_30.L
000017F4  4B0A      
000017F6  4EB9 0000 2497          jsr       _printf
000017FA  3F16      
000017FC  504F      2498          addq.w    #8,A7
000017FE  5282      2499          addq.l    #1,D2
00001800  6000 FF7A 2500          bra       EEPROMReadBlock1_1
                    2501   EEPROMReadBlock1_3:
00001804  4CDF 0C1C 2502          movem.l   (A7)+,D2/D3/D4/A2/A3
00001808  4E5E      2503          unlk      A6
0000180A  4E75      2504          rts
                    2505   ; }
                    2506   ; }
                    2507   ; int EEPROMSequentialRead(int startAddr, int readLen) {
                    2508   _EEPROMSequentialRead:
0000180C  4E56 0000 2509          link      A6,#0
00001810  48E7 2020 2510          movem.l   D2/A2,-(A7)
00001814  242E 0008 2511          move.l    8(A6),D2
00001818  45EE 000C 2512          lea       12(A6),A2
                    2513   ; if (startAddr <= 0xFFFF) {
0000181C  0C82 0000 2514          cmp.l     #65535,D2
00001820  FFFF      
00001822  6220      2515          bhi.s     EEPROMSequentialRead_1
                    2516   ; EEPROMReadBlock0(startAddr, &readLen);
00001824  2F0A      2517          move.l    A2,-(A7)
00001826  2F02      2518          move.l    D2,-(A7)
00001828  4EB8 15F4 2519          jsr       _EEPROMReadBlock0
0000182C  504F      2520          addq.w    #8,A7
                    2521   ; if (readLen > 0) {
0000182E  2012      2522          move.l    (A2),D0
00001830  0C80 0000 2523          cmp.l     #0,D0
00001834  0000      
00001836  6F0A      2524          ble.s     EEPROMSequentialRead_3
                    2525   ; EEPROMReadBlock1(startAddr, &readLen);
00001838  2F0A      2526          move.l    A2,-(A7)
0000183A  2F02      2527          move.l    D2,-(A7)
0000183C  4EB8 16F6 2528          jsr       _EEPROMReadBlock1
00001840  504F      2529          addq.w    #8,A7
                    2530   EEPROMSequentialRead_3:
00001842  600A      2531          bra.s     EEPROMSequentialRead_2
                    2532   EEPROMSequentialRead_1:
                    2533   ; }
                    2534   ; } else {
                    2535   ; EEPROMReadBlock1(startAddr, &readLen);
00001844  2F0A      2536          move.l    A2,-(A7)
00001846  2F02      2537          move.l    D2,-(A7)
00001848  4EB8 16F6 2538          jsr       _EEPROMReadBlock1
0000184C  504F      2539          addq.w    #8,A7
                    2540   EEPROMSequentialRead_2:
0000184E  4CDF 0404 2541          movem.l   (A7)+,D2/A2
00001852  4E5E      2542          unlk      A6
00001854  4E75      2543          rts
                    2544   ; }
                    2545   ; }
                    2546   ; I2CTest() {
                    2547   _I2CTest:
00001856  4E56 FFE4 2548          link      A6,#-28
0000185A  48E7 2020 2549          movem.l   D2/A2,-(A7)
0000185E  45F9 0000 2550          lea       _printf.L,A2
00001862  3F16      
                    2551   ; int IICData[5] = {0x01, 0x02, 0x03, 0x04, 0x05};
00001864  41EE FFE4 2552          lea       -28(A6),A0
00001868  43F9 0000 2553          lea       I2CTest_IICData.L,A1
0000186C  5CAE      
0000186E  7004      2554          moveq     #4,D0
00001870  20D9      2555          move.l    (A1)+,(A0)+
00001872  51C8 FFFC 2556          dbra      D0,*-2
                    2557   ; int writeData = 0xAB;
00001876  2D7C 0000 2558          move.l    #171,-8(A6)
0000187A  00AB FFF8 
                    2559   ; int readData;
                    2560   ; int i;
                    2561   ; printf("\r\n I2C Test");
0000187E  4879 0000 2562          pea       @m68kde~1_31.L
00001882  4B18      
00001884  4E92      2563          jsr       (A2)
00001886  584F      2564          addq.w    #4,A7
                    2565   ; IIC_Init();  
00001888  4EB8 1428 2566          jsr       _IIC_Init
                    2567   ; printf("\r\n Starting EEPROM Write: Writing 0x%.2x to address 0x00\n", writeData); // Debug: Indicate the start of EEPROM write
0000188C  2F2E FFF8 2568          move.l    -8(A6),-(A7)
00001890  4879 0000 2569          pea       @m68kde~1_32.L
00001894  4B24      
00001896  4E92      2570          jsr       (A2)
00001898  504F      2571          addq.w    #8,A7
                    2572   ; for (i = 0; i < 50; i++) {
0000189A  4282      2573          clr.l     D2
                    2574   I2CTest_1:
0000189C  0C82 0000 2575          cmp.l     #50,D2
000018A0  0032      
000018A2  6C00 0038 2576          bge       I2CTest_3
                    2577   ; printf("\r\n Writing %d to address %d\n", i, i);
000018A6  2F02      2578          move.l    D2,-(A7)
000018A8  2F02      2579          move.l    D2,-(A7)
000018AA  4879 0000 2580          pea       @m68kde~1_33.L
000018AE  4B5E      
000018B0  4E92      2581          jsr       (A2)
000018B2  DEFC 000C 2582          add.w     #12,A7
                    2583   ; EEPROMByteWrite(i * 2, EEPROM0, i); // Write data to EEPROM
000018B6  48C2      2584          ext.l     D2
000018B8  2F02      2585          move.l    D2,-(A7)
000018BA  4878 0050 2586          pea       80
000018BE  2F02      2587          move.l    D2,-(A7)
000018C0  4878 0002 2588          pea       2
000018C4  4EB9 0000 2589          jsr       LMUL
000018C8  34CC      
000018CA  2217      2590          move.l    (A7),D1
000018CC  504F      2591          addq.w    #8,A7
000018CE  2F01      2592          move.l    D1,-(A7)
000018D0  4EB8 14B6 2593          jsr       _EEPROMByteWrite
000018D4  DEFC 000C 2594          add.w     #12,A7
000018D8  5282      2595          addq.l    #1,D2
000018DA  60C0      2596          bra       I2CTest_1
                    2597   I2CTest_3:
                    2598   ; }
                    2599   ; printf("Sequential Read\n");
000018DC  4879 0000 2600          pea       @m68kde~1_34.L
000018E0  4B7C      
000018E2  4E92      2601          jsr       (A2)
000018E4  584F      2602          addq.w    #4,A7
                    2603   ; EEPROMSequentialRead(0, 50);
000018E6  4878 0032 2604          pea       50
000018EA  42A7      2605          clr.l     -(A7)
000018EC  4EB8 180C 2606          jsr       _EEPROMSequentialRead
000018F0  504F      2607          addq.w    #8,A7
                    2608   ; // printf("\r\nFinished write, Starting EEPROM Read\n");
                    2609   ; // for (i = 0; i < 50; i++) {
                    2610   ; //   readData = EEPROMRandomRead(EEPROM0, i); // Read data from EEPROM
                    2611   ; //   printf("\r\n Address: %d: %d\n", i, readData); // Debug: Indicate the address being read and the data read
                    2612   ; // }
                    2613   ; // readData = EEPROMRandomRead(EEPROM0, 0x0);
                    2614   ; IICCoreDisable();
000018F2  4EB8 141E 2615          jsr       _IICCoreDisable
000018F6  4CDF 0404 2616          movem.l   (A7)+,D2/A2
000018FA  4E5E      2617          unlk      A6
000018FC  4E75      2618          rts
                    2619   ; }
                    2620   ; // Initialize and enable I2C controller
                    2621   ; // No interrupts and set clock frequency to 100Khz
                    2622   ; // Connect controller to 25 or 45 Mhz CPU clock
                    2623   ; // Check if device is ready before writing anything over I2C bus ie) TX register has written previous command.
                    2624   ; // Check the status register TIP bit to see when transmission has finished
                    2625   ; // Wait for ACK from slave after each write
                    2626   ; // Transmit a byte to the I2C bus
                    2627   ; // write the data to be transmitted into TX register and then write something to the command register that indiciates that you want to write
                    2628   ; // If you want to generate a start or stop condition, set the STA or STO bits in command register when you write to it,
                    2629   ; // Clear the ACK bit if you want to generate an ACK when reading data back from the slave
                    2630   ; // EEPROM Functions
                    2631   ; // Write a byte to the EEPROM
                    2632   ; // Start write by writing a slave address and sett bit 0 of the data to be transmitted to 0, to indicate that you are writing an address to the slave
                    2633   ; // Generate start condition, and set the bit select and chip select bits, and set bits [7:4] to 1010
                    2634   ; // Write 2 bytes which correspond to the the 2 byte internal 64k address inside the chip, and then write the data to be stored at that address
                    2635   ; // Read a byte from the EEPROM
                    2636   ; // Write a slave address along with a start condition
                    2637   ; // Write 2 bytes which correspond to the 2 internal address bytes of the EEPROM
                    2638   ; // Send repeated start condition and set RD bit and ACK bit in command register
                    2639   ; // Set stop bit, and don't forget to set IACK bit to clear any pending interrupt flag
                    2640   ; // When data is recieved from slave, you can find it in the I2C Rx register
                    2641   ; // Poll I2C controller to determine when the data has been read from the slave which can be done by checking the IF flag in status register
                    2642   ; // when IF flag == 1, the data has been received.
                    2643   ; // Clear the IF flag with each byte read 
                    2644   ; // If slave does not recieve ACK from I2C controller, it will not send any more data
                    2645   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2646   ; // IMPORTANT
                    2647   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2648   ; // has to be done with an interrupt (IRQ Level 6)
                    2649   ; //
                    2650   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2651   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2652   ; //
                    2653   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2654   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2655   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2656   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2657   ; // program area
                    2658   ; //
                    2659   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2660   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2661   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2662   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2663   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2664   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2665   ; void DumpRegisters()
                    2666   ; {
                    2667   _DumpRegisters:
000018FE  48E7 3F3C 2668          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001902  45F9 0000 2669          lea       _putch.L,A2
00001906  355A      
00001908  47F9 0000 2670          lea       _printf.L,A3
0000190C  3F16      
0000190E  49F9 0B00 2671          lea       _SR.L,A4
00001912  012C      
00001914  4BF9 0B00 2672          lea       _WatchPointString.L,A5
00001918  01C2      
                    2673   ; short i, x, j, k ;
                    2674   ; unsigned char c, *BytePointer;
                    2675   ; // buld up strings for displaying watchpoints
                    2676   ; for(x = 0; x < (short)(8); x++)
0000191A  4242      2677          clr.w     D2
                    2678   DumpRegisters_1:
0000191C  0C42 0008 2679          cmp.w     #8,D2
00001920  6C00 01C6 2680          bge       DumpRegisters_3
                    2681   ; {
                    2682   ; if(WatchPointSetOrCleared[x] == 1)
00001924  48C2      2683          ext.l     D2
00001926  2002      2684          move.l    D2,D0
00001928  E588      2685          lsl.l     #2,D0
0000192A  41F9 0B00 2686          lea       _WatchPointSetOrCleared.L,A0
0000192E  01A2      
00001930  2030 0800 2687          move.l    0(A0,D0.L),D0
00001934  0C80 0000 2688          cmp.l     #1,D0
00001938  0001      
0000193A  6600 0186 2689          bne       DumpRegisters_4
                    2690   ; {
                    2691   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000193E  48C2      2692          ext.l     D2
00001940  2202      2693          move.l    D2,D1
00001942  E589      2694          lsl.l     #2,D1
00001944  41F9 0B00 2695          lea       _WatchPointAddress.L,A0
00001948  0182      
0000194A  2F30 1800 2696          move.l    0(A0,D1.L),-(A7)
0000194E  4879 0000 2697          pea       @m68kde~1_35.L
00001952  4B8E      
00001954  220D      2698          move.l    A5,D1
00001956  48C2      2699          ext.l     D2
00001958  2F00      2700          move.l    D0,-(A7)
0000195A  2002      2701          move.l    D2,D0
0000195C  C1FC 0064 2702          muls      #100,D0
00001960  D280      2703          add.l     D0,D1
00001962  201F      2704          move.l    (A7)+,D0
00001964  2F01      2705          move.l    D1,-(A7)
00001966  4EB9 0000 2706          jsr       _sprintf
0000196A  35F2      
0000196C  DEFC 000C 2707          add.w     #12,A7
                    2708   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001970  48C2      2709          ext.l     D2
00001972  2002      2710          move.l    D2,D0
00001974  E588      2711          lsl.l     #2,D0
00001976  41F9 0B00 2712          lea       _WatchPointAddress.L,A0
0000197A  0182      
0000197C  2A30 0800 2713          move.l    0(A0,D0.L),D5
                    2714   ; for(j = 0; j < (short)(16); j+=2)
00001980  4243      2715          clr.w     D3
                    2716   DumpRegisters_6:
00001982  0C43 0010 2717          cmp.w     #16,D3
00001986  6C00 0082 2718          bge       DumpRegisters_8
                    2719   ; {
                    2720   ; for(k = 0; k < (short)(2); k++)
0000198A  4246      2721          clr.w     D6
                    2722   DumpRegisters_9:
0000198C  0C46 0002 2723          cmp.w     #2,D6
00001990  6C00 0052 2724          bge       DumpRegisters_11
                    2725   ; {
                    2726   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001994  2045      2727          move.l    D5,A0
00001996  48C3      2728          ext.l     D3
00001998  2203      2729          move.l    D3,D1
0000199A  48C6      2730          ext.l     D6
0000199C  D286      2731          add.l     D6,D1
0000199E  1230 1800 2732          move.b    0(A0,D1.L),D1
000019A2  C2BC 0000 2733          and.l     #255,D1
000019A6  00FF      
000019A8  2F01      2734          move.l    D1,-(A7)
000019AA  4879 0000 2735          pea       @m68kde~1_8.L
000019AE  48C4      
000019B0  4879 0B00 2736          pea       _TempString.L
000019B4  04E2      
000019B6  4EB9 0000 2737          jsr       _sprintf
000019BA  35F2      
000019BC  DEFC 000C 2738          add.w     #12,A7
                    2739   ; strcat(WatchPointString[x], TempString) ;
000019C0  4879 0B00 2740          pea       _TempString.L
000019C4  04E2      
000019C6  220D      2741          move.l    A5,D1
000019C8  48C2      2742          ext.l     D2
000019CA  2F00      2743          move.l    D0,-(A7)
000019CC  2002      2744          move.l    D2,D0
000019CE  C1FC 0064 2745          muls      #100,D0
000019D2  D280      2746          add.l     D0,D1
000019D4  201F      2747          move.l    (A7)+,D0
000019D6  2F01      2748          move.l    D1,-(A7)
000019D8  4EB9 0000 2749          jsr       _strcat
000019DC  363E      
000019DE  504F      2750          addq.w    #8,A7
000019E0  5246      2751          addq.w    #1,D6
000019E2  60A8      2752          bra       DumpRegisters_9
                    2753   DumpRegisters_11:
                    2754   ; }
                    2755   ; strcat(WatchPointString[x]," ") ;
000019E4  4879 0000 2756          pea       @m68kde~1_36.L
000019E8  4B96      
000019EA  220D      2757          move.l    A5,D1
000019EC  48C2      2758          ext.l     D2
000019EE  2F00      2759          move.l    D0,-(A7)
000019F0  2002      2760          move.l    D2,D0
000019F2  C1FC 0064 2761          muls      #100,D0
000019F6  D280      2762          add.l     D0,D1
000019F8  201F      2763          move.l    (A7)+,D0
000019FA  2F01      2764          move.l    D1,-(A7)
000019FC  4EB9 0000 2765          jsr       _strcat
00001A00  363E      
00001A02  504F      2766          addq.w    #8,A7
00001A04  5443      2767          addq.w    #2,D3
00001A06  6000 FF7A 2768          bra       DumpRegisters_6
                    2769   DumpRegisters_8:
                    2770   ; }
                    2771   ; strcat(WatchPointString[x], "  ") ;
00001A0A  4879 0000 2772          pea       @m68kde~1_9.L
00001A0E  48CA      
00001A10  220D      2773          move.l    A5,D1
00001A12  48C2      2774          ext.l     D2
00001A14  2F00      2775          move.l    D0,-(A7)
00001A16  2002      2776          move.l    D2,D0
00001A18  C1FC 0064 2777          muls      #100,D0
00001A1C  D280      2778          add.l     D0,D1
00001A1E  201F      2779          move.l    (A7)+,D0
00001A20  2F01      2780          move.l    D1,-(A7)
00001A22  4EB9 0000 2781          jsr       _strcat
00001A26  363E      
00001A28  504F      2782          addq.w    #8,A7
                    2783   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001A2A  48C2      2784          ext.l     D2
00001A2C  2002      2785          move.l    D2,D0
00001A2E  E588      2786          lsl.l     #2,D0
00001A30  41F9 0B00 2787          lea       _WatchPointAddress.L,A0
00001A34  0182      
00001A36  2A30 0800 2788          move.l    0(A0,D0.L),D5
                    2789   ; for(j = 0; j < (short)(16); j++)
00001A3A  4243      2790          clr.w     D3
                    2791   DumpRegisters_12:
00001A3C  0C43 0010 2792          cmp.w     #16,D3
00001A40  6C00 007E 2793          bge       DumpRegisters_14
                    2794   ; {
                    2795   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001A44  2045      2796          move.l    D5,A0
00001A46  48C3      2797          ext.l     D3
00001A48  1030 3800 2798          move.b    0(A0,D3.L),D0
00001A4C  C03C 007F 2799          and.b     #127,D0
00001A50  1E00      2800          move.b    D0,D7
                    2801   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001A52  0C07 007F 2802          cmp.b     #127,D7
00001A56  6206      2803          bhi.s     DumpRegisters_17
00001A58  0C07 0020 2804          cmp.b     #32,D7
00001A5C  6416      2805          bhs.s     DumpRegisters_15
                    2806   DumpRegisters_17:
                    2807   ; sprintf(TempString, ".") ;
00001A5E  4879 0000 2808          pea       @m68kde~1_37.L
00001A62  4B98      
00001A64  4879 0B00 2809          pea       _TempString.L
00001A68  04E2      
00001A6A  4EB9 0000 2810          jsr       _sprintf
00001A6E  35F2      
00001A70  504F      2811          addq.w    #8,A7
00001A72  6026      2812          bra.s     DumpRegisters_16
                    2813   DumpRegisters_15:
                    2814   ; else
                    2815   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001A74  2045      2816          move.l    D5,A0
00001A76  48C3      2817          ext.l     D3
00001A78  1230 3800 2818          move.b    0(A0,D3.L),D1
00001A7C  C2BC 0000 2819          and.l     #255,D1
00001A80  00FF      
00001A82  2F01      2820          move.l    D1,-(A7)
00001A84  4879 0000 2821          pea       @m68kde~1_38.L
00001A88  4B9A      
00001A8A  4879 0B00 2822          pea       _TempString.L
00001A8E  04E2      
00001A90  4EB9 0000 2823          jsr       _sprintf
00001A94  35F2      
00001A96  DEFC 000C 2824          add.w     #12,A7
                    2825   DumpRegisters_16:
                    2826   ; strcat(WatchPointString[x], TempString) ;
00001A9A  4879 0B00 2827          pea       _TempString.L
00001A9E  04E2      
00001AA0  220D      2828          move.l    A5,D1
00001AA2  48C2      2829          ext.l     D2
00001AA4  2F00      2830          move.l    D0,-(A7)
00001AA6  2002      2831          move.l    D2,D0
00001AA8  C1FC 0064 2832          muls      #100,D0
00001AAC  D280      2833          add.l     D0,D1
00001AAE  201F      2834          move.l    (A7)+,D0
00001AB0  2F01      2835          move.l    D1,-(A7)
00001AB2  4EB9 0000 2836          jsr       _strcat
00001AB6  363E      
00001AB8  504F      2837          addq.w    #8,A7
00001ABA  5243      2838          addq.w    #1,D3
00001ABC  6000 FF7E 2839          bra       DumpRegisters_12
                    2840   DumpRegisters_14:
00001AC0  6020      2841          bra.s     DumpRegisters_5
                    2842   DumpRegisters_4:
                    2843   ; }
                    2844   ; }
                    2845   ; else
                    2846   ; strcpy(WatchPointString[x], "") ;
00001AC2  4879 0000 2847          pea       @m68kde~1_39.L
00001AC6  4B9E      
00001AC8  220D      2848          move.l    A5,D1
00001ACA  48C2      2849          ext.l     D2
00001ACC  2F00      2850          move.l    D0,-(A7)
00001ACE  2002      2851          move.l    D2,D0
00001AD0  C1FC 0064 2852          muls      #100,D0
00001AD4  D280      2853          add.l     D0,D1
00001AD6  201F      2854          move.l    (A7)+,D0
00001AD8  2F01      2855          move.l    D1,-(A7)
00001ADA  4EB9 0000 2856          jsr       _strcpy
00001ADE  33CC      
00001AE0  504F      2857          addq.w    #8,A7
                    2858   DumpRegisters_5:
00001AE2  5242      2859          addq.w    #1,D2
00001AE4  6000 FE36 2860          bra       DumpRegisters_1
                    2861   DumpRegisters_3:
                    2862   ; }
                    2863   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001AE8  2F39 0B00 2864          move.l    _a0.L,-(A7)
00001AEC  0104      
00001AEE  2F39 0B00 2865          move.l    _d0.L,-(A7)
00001AF2  00E4      
00001AF4  4879 0000 2866          pea       @m68kde~1_40.L
00001AF8  4BA0      
00001AFA  4E93      2867          jsr       (A3)
00001AFC  DEFC 000C 2868          add.w     #12,A7
                    2869   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001B00  2F39 0B00 2870          move.l    _a1.L,-(A7)
00001B04  0108      
00001B06  2F39 0B00 2871          move.l    _d1.L,-(A7)
00001B0A  00E8      
00001B0C  4879 0000 2872          pea       @m68kde~1_41.L
00001B10  4BBC      
00001B12  4E93      2873          jsr       (A3)
00001B14  DEFC 000C 2874          add.w     #12,A7
                    2875   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001B18  2F39 0B00 2876          move.l    _a2.L,-(A7)
00001B1C  010C      
00001B1E  2F39 0B00 2877          move.l    _d2.L,-(A7)
00001B22  00EC      
00001B24  4879 0000 2878          pea       @m68kde~1_42.L
00001B28  4BD6      
00001B2A  4E93      2879          jsr       (A3)
00001B2C  DEFC 000C 2880          add.w     #12,A7
                    2881   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001B30  2F39 0B00 2882          move.l    _a3.L,-(A7)
00001B34  0110      
00001B36  2F39 0B00 2883          move.l    _d3.L,-(A7)
00001B3A  00F0      
00001B3C  4879 0000 2884          pea       @m68kde~1_43.L
00001B40  4BF0      
00001B42  4E93      2885          jsr       (A3)
00001B44  DEFC 000C 2886          add.w     #12,A7
                    2887   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001B48  2F39 0B00 2888          move.l    _a4.L,-(A7)
00001B4C  0114      
00001B4E  2F39 0B00 2889          move.l    _d4.L,-(A7)
00001B52  00F4      
00001B54  4879 0000 2890          pea       @m68kde~1_44.L
00001B58  4C0A      
00001B5A  4E93      2891          jsr       (A3)
00001B5C  DEFC 000C 2892          add.w     #12,A7
                    2893   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001B60  2F39 0B00 2894          move.l    _a5.L,-(A7)
00001B64  0118      
00001B66  2F39 0B00 2895          move.l    _d5.L,-(A7)
00001B6A  00F8      
00001B6C  4879 0000 2896          pea       @m68kde~1_45.L
00001B70  4C24      
00001B72  4E93      2897          jsr       (A3)
00001B74  DEFC 000C 2898          add.w     #12,A7
                    2899   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001B78  2F39 0B00 2900          move.l    _a6.L,-(A7)
00001B7C  011C      
00001B7E  2F39 0B00 2901          move.l    _d6.L,-(A7)
00001B82  00FC      
00001B84  4879 0000 2902          pea       @m68kde~1_46.L
00001B88  4C3E      
00001B8A  4E93      2903          jsr       (A3)
00001B8C  DEFC 000C 2904          add.w     #12,A7
                    2905   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001B90  3214      2906          move.w    (A4),D1
00001B92  C27C 2000 2907          and.w     #8192,D1
00001B96  0C41 2000 2908          cmp.w     #8192,D1
00001B9A  6608      2909          bne.s     DumpRegisters_18
00001B9C  2239 0B00 2910          move.l    _SSP.L,D1
00001BA0  0124      
00001BA2  6006      2911          bra.s     DumpRegisters_19
                    2912   DumpRegisters_18:
00001BA4  2239 0B00 2913          move.l    _USP.L,D1
00001BA8  0128      
                    2914   DumpRegisters_19:
00001BAA  2F01      2915          move.l    D1,-(A7)
00001BAC  2F39 0B00 2916          move.l    _d7.L,-(A7)
00001BB0  0100      
00001BB2  4879 0000 2917          pea       @m68kde~1_47.L
00001BB6  4C58      
00001BB8  4E93      2918          jsr       (A3)
00001BBA  DEFC 000C 2919          add.w     #12,A7
                    2920   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001BBE  2F39 0B00 2921          move.l    _USP.L,-(A7)
00001BC2  0128      
00001BC4  4879 0000 2922          pea       @m68kde~1_48.L
00001BC8  4C72      
00001BCA  4E93      2923          jsr       (A3)
00001BCC  504F      2924          addq.w    #8,A7
                    2925   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001BCE  2F39 0B00 2926          move.l    _SSP.L,-(A7)
00001BD2  0124      
00001BD4  4879 0000 2927          pea       @m68kde~1_49.L
00001BD8  4C90      
00001BDA  4E93      2928          jsr       (A3)
00001BDC  504F      2929          addq.w    #8,A7
                    2930   ; printf("\r\n SR = $%04X   ",SR) ;
00001BDE  3214      2931          move.w    (A4),D1
00001BE0  C2BC 0000 2932          and.l     #65535,D1
00001BE4  FFFF      
00001BE6  2F01      2933          move.l    D1,-(A7)
00001BE8  4879 0000 2934          pea       @m68kde~1_50.L
00001BEC  4CB2      
00001BEE  4E93      2935          jsr       (A3)
00001BF0  504F      2936          addq.w    #8,A7
                    2937   ; // display the status word in characters etc.
                    2938   ; printf("   [") ;
00001BF2  4879 0000 2939          pea       @m68kde~1_51.L
00001BF6  4CC4      
00001BF8  4E93      2940          jsr       (A3)
00001BFA  584F      2941          addq.w    #4,A7
                    2942   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001BFC  3014      2943          move.w    (A4),D0
00001BFE  C07C 8000 2944          and.w     #32768,D0
00001C02  0C40 8000 2945          cmp.w     #32768,D0
00001C06  660A      2946          bne.s     DumpRegisters_20
00001C08  4878 0054 2947          pea       84
00001C0C  4E92      2948          jsr       (A2)
00001C0E  584F      2949          addq.w    #4,A7
00001C10  6008      2950          bra.s     DumpRegisters_21
                    2951   DumpRegisters_20:
00001C12  4878 002D 2952          pea       45
00001C16  4E92      2953          jsr       (A2)
00001C18  584F      2954          addq.w    #4,A7
                    2955   DumpRegisters_21:
                    2956   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001C1A  3014      2957          move.w    (A4),D0
00001C1C  C07C 2000 2958          and.w     #8192,D0
00001C20  0C40 2000 2959          cmp.w     #8192,D0
00001C24  660A      2960          bne.s     DumpRegisters_22
00001C26  4878 0053 2961          pea       83
00001C2A  4E92      2962          jsr       (A2)
00001C2C  584F      2963          addq.w    #4,A7
00001C2E  6008      2964          bra.s     DumpRegisters_23
                    2965   DumpRegisters_22:
00001C30  4878 0055 2966          pea       85
00001C34  4E92      2967          jsr       (A2)
00001C36  584F      2968          addq.w    #4,A7
                    2969   DumpRegisters_23:
                    2970   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001C38  3014      2971          move.w    (A4),D0
00001C3A  C07C 0400 2972          and.w     #1024,D0
00001C3E  0C40 0400 2973          cmp.w     #1024,D0
00001C42  660A      2974          bne.s     DumpRegisters_24
00001C44  4878 0031 2975          pea       49
00001C48  4E92      2976          jsr       (A2)
00001C4A  584F      2977          addq.w    #4,A7
00001C4C  6008      2978          bra.s     DumpRegisters_25
                    2979   DumpRegisters_24:
00001C4E  4878 0030 2980          pea       48
00001C52  4E92      2981          jsr       (A2)
00001C54  584F      2982          addq.w    #4,A7
                    2983   DumpRegisters_25:
                    2984   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001C56  3014      2985          move.w    (A4),D0
00001C58  C07C 0200 2986          and.w     #512,D0
00001C5C  0C40 0200 2987          cmp.w     #512,D0
00001C60  660A      2988          bne.s     DumpRegisters_26
00001C62  4878 0031 2989          pea       49
00001C66  4E92      2990          jsr       (A2)
00001C68  584F      2991          addq.w    #4,A7
00001C6A  6008      2992          bra.s     DumpRegisters_27
                    2993   DumpRegisters_26:
00001C6C  4878 0030 2994          pea       48
00001C70  4E92      2995          jsr       (A2)
00001C72  584F      2996          addq.w    #4,A7
                    2997   DumpRegisters_27:
                    2998   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001C74  3014      2999          move.w    (A4),D0
00001C76  C07C 0100 3000          and.w     #256,D0
00001C7A  0C40 0100 3001          cmp.w     #256,D0
00001C7E  660A      3002          bne.s     DumpRegisters_28
00001C80  4878 0031 3003          pea       49
00001C84  4E92      3004          jsr       (A2)
00001C86  584F      3005          addq.w    #4,A7
00001C88  6008      3006          bra.s     DumpRegisters_29
                    3007   DumpRegisters_28:
00001C8A  4878 0030 3008          pea       48
00001C8E  4E92      3009          jsr       (A2)
00001C90  584F      3010          addq.w    #4,A7
                    3011   DumpRegisters_29:
                    3012   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001C92  3014      3013          move.w    (A4),D0
00001C94  C07C 0010 3014          and.w     #16,D0
00001C98  0C40 0010 3015          cmp.w     #16,D0
00001C9C  660A      3016          bne.s     DumpRegisters_30
00001C9E  4878 0058 3017          pea       88
00001CA2  4E92      3018          jsr       (A2)
00001CA4  584F      3019          addq.w    #4,A7
00001CA6  6008      3020          bra.s     DumpRegisters_31
                    3021   DumpRegisters_30:
00001CA8  4878 002D 3022          pea       45
00001CAC  4E92      3023          jsr       (A2)
00001CAE  584F      3024          addq.w    #4,A7
                    3025   DumpRegisters_31:
                    3026   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001CB0  3014      3027          move.w    (A4),D0
00001CB2  C07C 0008 3028          and.w     #8,D0
00001CB6  0C40 0008 3029          cmp.w     #8,D0
00001CBA  660A      3030          bne.s     DumpRegisters_32
00001CBC  4878 004E 3031          pea       78
00001CC0  4E92      3032          jsr       (A2)
00001CC2  584F      3033          addq.w    #4,A7
00001CC4  6008      3034          bra.s     DumpRegisters_33
                    3035   DumpRegisters_32:
00001CC6  4878 002D 3036          pea       45
00001CCA  4E92      3037          jsr       (A2)
00001CCC  584F      3038          addq.w    #4,A7
                    3039   DumpRegisters_33:
                    3040   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001CCE  3014      3041          move.w    (A4),D0
00001CD0  C07C 0004 3042          and.w     #4,D0
00001CD4  0C40 0004 3043          cmp.w     #4,D0
00001CD8  660A      3044          bne.s     DumpRegisters_34
00001CDA  4878 005A 3045          pea       90
00001CDE  4E92      3046          jsr       (A2)
00001CE0  584F      3047          addq.w    #4,A7
00001CE2  6008      3048          bra.s     DumpRegisters_35
                    3049   DumpRegisters_34:
00001CE4  4878 002D 3050          pea       45
00001CE8  4E92      3051          jsr       (A2)
00001CEA  584F      3052          addq.w    #4,A7
                    3053   DumpRegisters_35:
                    3054   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001CEC  3014      3055          move.w    (A4),D0
00001CEE  C07C 0002 3056          and.w     #2,D0
00001CF2  0C40 0002 3057          cmp.w     #2,D0
00001CF6  660A      3058          bne.s     DumpRegisters_36
00001CF8  4878 0056 3059          pea       86
00001CFC  4E92      3060          jsr       (A2)
00001CFE  584F      3061          addq.w    #4,A7
00001D00  6008      3062          bra.s     DumpRegisters_37
                    3063   DumpRegisters_36:
00001D02  4878 002D 3064          pea       45
00001D06  4E92      3065          jsr       (A2)
00001D08  584F      3066          addq.w    #4,A7
                    3067   DumpRegisters_37:
                    3068   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001D0A  3014      3069          move.w    (A4),D0
00001D0C  C07C 0001 3070          and.w     #1,D0
00001D10  0C40 0001 3071          cmp.w     #1,D0
00001D14  660A      3072          bne.s     DumpRegisters_38
00001D16  4878 0043 3073          pea       67
00001D1A  4E92      3074          jsr       (A2)
00001D1C  584F      3075          addq.w    #4,A7
00001D1E  6008      3076          bra.s     DumpRegisters_39
                    3077   DumpRegisters_38:
00001D20  4878 002D 3078          pea       45
00001D24  4E92      3079          jsr       (A2)
00001D26  584F      3080          addq.w    #4,A7
                    3081   DumpRegisters_39:
                    3082   ; putchar(']') ;
00001D28  4878 005D 3083          pea       93
00001D2C  4E92      3084          jsr       (A2)
00001D2E  584F      3085          addq.w    #4,A7
                    3086   ; printf("\r\n PC = $%08X  ", PC) ;
00001D30  2F39 0B00 3087          move.l    _PC.L,-(A7)
00001D34  0120      
00001D36  4879 0000 3088          pea       @m68kde~1_52.L
00001D3A  4CCA      
00001D3C  4E93      3089          jsr       (A3)
00001D3E  504F      3090          addq.w    #8,A7
                    3091   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001D40  2039 0B00 3092          move.l    _PC.L,D0
00001D44  0120      
00001D46  2040      3093          move.l    D0,A0
00001D48  3010      3094          move.w    (A0),D0
00001D4A  0C40 4E4E 3095          cmp.w     #20046,D0
00001D4E  660A      3096          bne.s     DumpRegisters_40
                    3097   ; printf("[@ BREAKPOINT]") ;
00001D50  4879 0000 3098          pea       @m68kde~1_53.L
00001D54  4CDA      
00001D56  4E93      3099          jsr       (A3)
00001D58  584F      3100          addq.w    #4,A7
                    3101   DumpRegisters_40:
                    3102   ; printf("\r\n") ;
00001D5A  4879 0000 3103          pea       @m68kde~1_1.L
00001D5E  484C      
00001D60  4E93      3104          jsr       (A3)
00001D62  584F      3105          addq.w    #4,A7
                    3106   ; for(i=0; i < 8; i++)    {
00001D64  4244      3107          clr.w     D4
                    3108   DumpRegisters_42:
00001D66  0C44 0008 3109          cmp.w     #8,D4
00001D6A  6C00 0040 3110          bge       DumpRegisters_44
                    3111   ; if(WatchPointSetOrCleared[i] == 1)
00001D6E  48C4      3112          ext.l     D4
00001D70  2004      3113          move.l    D4,D0
00001D72  E588      3114          lsl.l     #2,D0
00001D74  41F9 0B00 3115          lea       _WatchPointSetOrCleared.L,A0
00001D78  01A2      
00001D7A  2030 0800 3116          move.l    0(A0,D0.L),D0
00001D7E  0C80 0000 3117          cmp.l     #1,D0
00001D82  0001      
00001D84  6622      3118          bne.s     DumpRegisters_45
                    3119   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001D86  220D      3120          move.l    A5,D1
00001D88  48C4      3121          ext.l     D4
00001D8A  2F00      3122          move.l    D0,-(A7)
00001D8C  2004      3123          move.l    D4,D0
00001D8E  C1FC 0064 3124          muls      #100,D0
00001D92  D280      3125          add.l     D0,D1
00001D94  201F      3126          move.l    (A7)+,D0
00001D96  2F01      3127          move.l    D1,-(A7)
00001D98  48C4      3128          ext.l     D4
00001D9A  2F04      3129          move.l    D4,-(A7)
00001D9C  4879 0000 3130          pea       @m68kde~1_54.L
00001DA0  4CEA      
00001DA2  4E93      3131          jsr       (A3)
00001DA4  DEFC 000C 3132          add.w     #12,A7
                    3133   DumpRegisters_45:
00001DA8  5244      3134          addq.w    #1,D4
00001DAA  60BA      3135          bra       DumpRegisters_42
                    3136   DumpRegisters_44:
00001DAC  4CDF 3CFC 3137          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001DB0  4E75      3138          rts
                    3139   ; }
                    3140   ; }
                    3141   ; // Trace Exception Handler
                    3142   ; void DumpRegistersandPause(void)
                    3143   ; {
                    3144   _DumpRegistersandPause:
00001DB2  2F0A      3145          move.l    A2,-(A7)
00001DB4  45F9 0000 3146          lea       _printf.L,A2
00001DB8  3F16      
                    3147   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001DBA  4879 0000 3148          pea       @m68kde~1_55.L
00001DBE  4CF6      
00001DC0  4E92      3149          jsr       (A2)
00001DC2  584F      3150          addq.w    #4,A7
                    3151   ; printf("\r\nBreak Points :[Disabled]") ;
00001DC4  4879 0000 3152          pea       @m68kde~1_56.L
00001DC8  4D16      
00001DCA  4E92      3153          jsr       (A2)
00001DCC  584F      3154          addq.w    #4,A7
                    3155   ; DumpRegisters() ;
00001DCE  4EB8 18FE 3156          jsr       _DumpRegisters
                    3157   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001DD2  4879 0000 3158          pea       @m68kde~1_57.L
00001DD6  4D32      
00001DD8  4E92      3159          jsr       (A2)
00001DDA  584F      3160          addq.w    #4,A7
                    3161   ; printf("\r\nPress <ESC> to Resume Program") ;
00001DDC  4879 0000 3162          pea       @m68kde~1_58.L
00001DE0  4D5E      
00001DE2  4E92      3163          jsr       (A2)
00001DE4  584F      3164          addq.w    #4,A7
                    3165   ; menu() ;
00001DE6  4EB9 0000 3166          jsr       _menu
00001DEA  2996      
00001DEC  245F      3167          move.l    (A7)+,A2
00001DEE  4E75      3168          rts
                    3169   ; }
                    3170   ; void ChangeRegisters(void)
                    3171   ; {
                    3172   _ChangeRegisters:
00001DF0  4E56 FFFC 3173          link      A6,#-4
00001DF4  48E7 303C 3174          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001DF8  45F9 0000 3175          lea       _printf.L,A2
00001DFC  3F16      
00001DFE  47EE FFFC 3176          lea       -4(A6),A3
00001E02  49F8 0CA4 3177          lea       _Get8HexDigits.L,A4
00001E06  4BF8 0B68 3178          lea       __getch.L,A5
                    3179   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    3180   ; int reg_val ;
                    3181   ; char c, reg[3] ;
                    3182   ; reg[0] = tolower(_getch()) ;
00001E0A  2F00      3183          move.l    D0,-(A7)
00001E0C  4E95      3184          jsr       (A5)
00001E0E  2200      3185          move.l    D0,D1
00001E10  201F      3186          move.l    (A7)+,D0
00001E12  2F01      3187          move.l    D1,-(A7)
00001E14  4EB9 0000 3188          jsr       _tolower
00001E18  35C6      
00001E1A  584F      3189          addq.w    #4,A7
00001E1C  1680      3190          move.b    D0,(A3)
                    3191   ; reg[1] = c = tolower(_getch()) ;
00001E1E  2F00      3192          move.l    D0,-(A7)
00001E20  4E95      3193          jsr       (A5)
00001E22  2200      3194          move.l    D0,D1
00001E24  201F      3195          move.l    (A7)+,D0
00001E26  2F01      3196          move.l    D1,-(A7)
00001E28  4EB9 0000 3197          jsr       _tolower
00001E2C  35C6      
00001E2E  584F      3198          addq.w    #4,A7
00001E30  1400      3199          move.b    D0,D2
00001E32  1740 0001 3200          move.b    D0,1(A3)
                    3201   ; if(reg[0] == (char)('d'))  {    // change data register
00001E36  1013      3202          move.b    (A3),D0
00001E38  0C00 0064 3203          cmp.b     #100,D0
00001E3C  6600 00AE 3204          bne       ChangeRegisters_1
                    3205   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001E40  102B 0001 3206          move.b    1(A3),D0
00001E44  0C00 0037 3207          cmp.b     #55,D0
00001E48  6E0A      3208          bgt.s     ChangeRegisters_5
00001E4A  102B 0001 3209          move.b    1(A3),D0
00001E4E  0C00 0030 3210          cmp.b     #48,D0
00001E52  6C0E      3211          bge.s     ChangeRegisters_3
                    3212   ChangeRegisters_5:
                    3213   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001E54  4879 0000 3214          pea       @m68kde~1_59.L
00001E58  4D7E      
00001E5A  4E92      3215          jsr       (A2)
00001E5C  584F      3216          addq.w    #4,A7
                    3217   ; return ;
00001E5E  6000 0244 3218          bra       ChangeRegisters_6
                    3219   ChangeRegisters_3:
                    3220   ; }
                    3221   ; else {
                    3222   ; printf("\r\nD%c = ", c) ;
00001E62  4882      3223          ext.w     D2
00001E64  48C2      3224          ext.l     D2
00001E66  2F02      3225          move.l    D2,-(A7)
00001E68  4879 0000 3226          pea       @m68kde~1_60.L
00001E6C  4DAA      
00001E6E  4E92      3227          jsr       (A2)
00001E70  504F      3228          addq.w    #8,A7
                    3229   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001E72  42A7      3230          clr.l     -(A7)
00001E74  4E94      3231          jsr       (A4)
00001E76  584F      3232          addq.w    #4,A7
00001E78  2600      3233          move.l    D0,D3
                    3234   ; }
                    3235   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    3236   ; if(c == (char)('0'))
00001E7A  0C02 0030 3237          cmp.b     #48,D2
00001E7E  660A      3238          bne.s     ChangeRegisters_7
                    3239   ; d0 = reg_val ;
00001E80  23C3 0B00 3240          move.l    D3,_d0.L
00001E84  00E4      
00001E86  6000 0060 3241          bra       ChangeRegisters_20
                    3242   ChangeRegisters_7:
                    3243   ; else if(c == (char)('1'))
00001E8A  0C02 0031 3244          cmp.b     #49,D2
00001E8E  660A      3245          bne.s     ChangeRegisters_9
                    3246   ; d1 = reg_val ;
00001E90  23C3 0B00 3247          move.l    D3,_d1.L
00001E94  00E8      
00001E96  6000 0050 3248          bra       ChangeRegisters_20
                    3249   ChangeRegisters_9:
                    3250   ; else if(c == (char)('2'))
00001E9A  0C02 0032 3251          cmp.b     #50,D2
00001E9E  660A      3252          bne.s     ChangeRegisters_11
                    3253   ; d2 = reg_val ;
00001EA0  23C3 0B00 3254          move.l    D3,_d2.L
00001EA4  00EC      
00001EA6  6000 0040 3255          bra       ChangeRegisters_20
                    3256   ChangeRegisters_11:
                    3257   ; else if(c == (char)('3'))
00001EAA  0C02 0033 3258          cmp.b     #51,D2
00001EAE  6608      3259          bne.s     ChangeRegisters_13
                    3260   ; d3 = reg_val ;
00001EB0  23C3 0B00 3261          move.l    D3,_d3.L
00001EB4  00F0      
00001EB6  6030      3262          bra.s     ChangeRegisters_20
                    3263   ChangeRegisters_13:
                    3264   ; else if(c == (char)('4'))
00001EB8  0C02 0034 3265          cmp.b     #52,D2
00001EBC  6608      3266          bne.s     ChangeRegisters_15
                    3267   ; d4 = reg_val ;
00001EBE  23C3 0B00 3268          move.l    D3,_d4.L
00001EC2  00F4      
00001EC4  6022      3269          bra.s     ChangeRegisters_20
                    3270   ChangeRegisters_15:
                    3271   ; else if(c == (char)('5'))
00001EC6  0C02 0035 3272          cmp.b     #53,D2
00001ECA  6608      3273          bne.s     ChangeRegisters_17
                    3274   ; d5 = reg_val ;
00001ECC  23C3 0B00 3275          move.l    D3,_d5.L
00001ED0  00F8      
00001ED2  6014      3276          bra.s     ChangeRegisters_20
                    3277   ChangeRegisters_17:
                    3278   ; else if(c == (char)('6'))
00001ED4  0C02 0036 3279          cmp.b     #54,D2
00001ED8  6608      3280          bne.s     ChangeRegisters_19
                    3281   ; d6 = reg_val ;
00001EDA  23C3 0B00 3282          move.l    D3,_d6.L
00001EDE  00FC      
00001EE0  6006      3283          bra.s     ChangeRegisters_20
                    3284   ChangeRegisters_19:
                    3285   ; else
                    3286   ; d7 = reg_val ;
00001EE2  23C3 0B00 3287          move.l    D3,_d7.L
00001EE6  0100      
                    3288   ChangeRegisters_20:
00001EE8  6000 01B6 3289          bra       ChangeRegisters_51
                    3290   ChangeRegisters_1:
                    3291   ; }
                    3292   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001EEC  1013      3293          move.b    (A3),D0
00001EEE  0C00 0061 3294          cmp.b     #97,D0
00001EF2  6600 00A6 3295          bne       ChangeRegisters_21
                    3296   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001EF6  0C02 0037 3297          cmp.b     #55,D2
00001EFA  6E06      3298          bgt.s     ChangeRegisters_25
00001EFC  0C02 0030 3299          cmp.b     #48,D2
00001F00  6C0E      3300          bge.s     ChangeRegisters_23
                    3301   ChangeRegisters_25:
                    3302   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001F02  4879 0000 3303          pea       @m68kde~1_61.L
00001F06  4DB4      
00001F08  4E92      3304          jsr       (A2)
00001F0A  584F      3305          addq.w    #4,A7
                    3306   ; return ;
00001F0C  6000 0196 3307          bra       ChangeRegisters_6
                    3308   ChangeRegisters_23:
                    3309   ; }
                    3310   ; else {
                    3311   ; printf("\r\nA%c = ", c) ;
00001F10  4882      3312          ext.w     D2
00001F12  48C2      3313          ext.l     D2
00001F14  2F02      3314          move.l    D2,-(A7)
00001F16  4879 0000 3315          pea       @m68kde~1_62.L
00001F1A  4DE2      
00001F1C  4E92      3316          jsr       (A2)
00001F1E  504F      3317          addq.w    #8,A7
                    3318   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001F20  42A7      3319          clr.l     -(A7)
00001F22  4E94      3320          jsr       (A4)
00001F24  584F      3321          addq.w    #4,A7
00001F26  2600      3322          move.l    D0,D3
                    3323   ; }
                    3324   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    3325   ; if(c == (char)('0'))
00001F28  0C02 0030 3326          cmp.b     #48,D2
00001F2C  660A      3327          bne.s     ChangeRegisters_26
                    3328   ; a0 = reg_val ;
00001F2E  23C3 0B00 3329          move.l    D3,_a0.L
00001F32  0104      
00001F34  6000 0060 3330          bra       ChangeRegisters_39
                    3331   ChangeRegisters_26:
                    3332   ; else if(c == (char)('1'))
00001F38  0C02 0031 3333          cmp.b     #49,D2
00001F3C  660A      3334          bne.s     ChangeRegisters_28
                    3335   ; a1 = reg_val ;
00001F3E  23C3 0B00 3336          move.l    D3,_a1.L
00001F42  0108      
00001F44  6000 0050 3337          bra       ChangeRegisters_39
                    3338   ChangeRegisters_28:
                    3339   ; else if(c == (char)('2'))
00001F48  0C02 0032 3340          cmp.b     #50,D2
00001F4C  660A      3341          bne.s     ChangeRegisters_30
                    3342   ; a2 = reg_val ;
00001F4E  23C3 0B00 3343          move.l    D3,_a2.L
00001F52  010C      
00001F54  6000 0040 3344          bra       ChangeRegisters_39
                    3345   ChangeRegisters_30:
                    3346   ; else if(c == (char)('3'))
00001F58  0C02 0033 3347          cmp.b     #51,D2
00001F5C  6608      3348          bne.s     ChangeRegisters_32
                    3349   ; a3 = reg_val ;
00001F5E  23C3 0B00 3350          move.l    D3,_a3.L
00001F62  0110      
00001F64  6030      3351          bra.s     ChangeRegisters_39
                    3352   ChangeRegisters_32:
                    3353   ; else if(c == (char)('4'))
00001F66  0C02 0034 3354          cmp.b     #52,D2
00001F6A  6608      3355          bne.s     ChangeRegisters_34
                    3356   ; a4 = reg_val ;
00001F6C  23C3 0B00 3357          move.l    D3,_a4.L
00001F70  0114      
00001F72  6022      3358          bra.s     ChangeRegisters_39
                    3359   ChangeRegisters_34:
                    3360   ; else if(c == (char)('5'))
00001F74  0C02 0035 3361          cmp.b     #53,D2
00001F78  6608      3362          bne.s     ChangeRegisters_36
                    3363   ; a5 = reg_val ;
00001F7A  23C3 0B00 3364          move.l    D3,_a5.L
00001F7E  0118      
00001F80  6014      3365          bra.s     ChangeRegisters_39
                    3366   ChangeRegisters_36:
                    3367   ; else if(c == (char)('6'))
00001F82  0C02 0036 3368          cmp.b     #54,D2
00001F86  6608      3369          bne.s     ChangeRegisters_38
                    3370   ; a6 = reg_val ;
00001F88  23C3 0B00 3371          move.l    D3,_a6.L
00001F8C  011C      
00001F8E  6006      3372          bra.s     ChangeRegisters_39
                    3373   ChangeRegisters_38:
                    3374   ; else
                    3375   ; USP = reg_val ;
00001F90  23C3 0B00 3376          move.l    D3,_USP.L
00001F94  0128      
                    3377   ChangeRegisters_39:
00001F96  6000 0108 3378          bra       ChangeRegisters_51
                    3379   ChangeRegisters_21:
                    3380   ; }
                    3381   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001F9A  1013      3382          move.b    (A3),D0
00001F9C  0C00 0075 3383          cmp.b     #117,D0
00001FA0  6600 004E 3384          bne       ChangeRegisters_40
00001FA4  0C02 0073 3385          cmp.b     #115,D2
00001FA8  6600 0046 3386          bne       ChangeRegisters_40
                    3387   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001FAC  2F00      3388          move.l    D0,-(A7)
00001FAE  4E95      3389          jsr       (A5)
00001FB0  2200      3390          move.l    D0,D1
00001FB2  201F      3391          move.l    (A7)+,D0
00001FB4  2F01      3392          move.l    D1,-(A7)
00001FB6  4EB9 0000 3393          jsr       _tolower
00001FBA  35C6      
00001FBC  584F      3394          addq.w    #4,A7
00001FBE  0C80 0000 3395          cmp.l     #112,D0
00001FC2  0070      
00001FC4  6618      3396          bne.s     ChangeRegisters_42
                    3397   ; printf("\r\nUser SP = ") ;
00001FC6  4879 0000 3398          pea       @m68kde~1_63.L
00001FCA  4DEC      
00001FCC  4E92      3399          jsr       (A2)
00001FCE  584F      3400          addq.w    #4,A7
                    3401   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001FD0  42A7      3402          clr.l     -(A7)
00001FD2  4E94      3403          jsr       (A4)
00001FD4  584F      3404          addq.w    #4,A7
00001FD6  23C0 0B00 3405          move.l    D0,_USP.L
00001FDA  0128      
00001FDC  600E      3406          bra.s     ChangeRegisters_43
                    3407   ChangeRegisters_42:
                    3408   ; }
                    3409   ; else {
                    3410   ; printf("\r\nIllegal Register....") ;
00001FDE  4879 0000 3411          pea       @m68kde~1_64.L
00001FE2  4DFA      
00001FE4  4E92      3412          jsr       (A2)
00001FE6  584F      3413          addq.w    #4,A7
                    3414   ; return ;
00001FE8  6000 00BA 3415          bra       ChangeRegisters_6
                    3416   ChangeRegisters_43:
00001FEC  6000 00B2 3417          bra       ChangeRegisters_51
                    3418   ChangeRegisters_40:
                    3419   ; }
                    3420   ; }
                    3421   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001FF0  1013      3422          move.b    (A3),D0
00001FF2  0C00 0073 3423          cmp.b     #115,D0
00001FF6  6600 004E 3424          bne       ChangeRegisters_44
00001FFA  0C02 0073 3425          cmp.b     #115,D2
00001FFE  6600 0046 3426          bne       ChangeRegisters_44
                    3427   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00002002  2F00      3428          move.l    D0,-(A7)
00002004  4E95      3429          jsr       (A5)
00002006  2200      3430          move.l    D0,D1
00002008  201F      3431          move.l    (A7)+,D0
0000200A  2F01      3432          move.l    D1,-(A7)
0000200C  4EB9 0000 3433          jsr       _tolower
00002010  35C6      
00002012  584F      3434          addq.w    #4,A7
00002014  0C80 0000 3435          cmp.l     #112,D0
00002018  0070      
0000201A  6618      3436          bne.s     ChangeRegisters_46
                    3437   ; printf("\r\nSystem SP = ") ;
0000201C  4879 0000 3438          pea       @m68kde~1_65.L
00002020  4E12      
00002022  4E92      3439          jsr       (A2)
00002024  584F      3440          addq.w    #4,A7
                    3441   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00002026  42A7      3442          clr.l     -(A7)
00002028  4E94      3443          jsr       (A4)
0000202A  584F      3444          addq.w    #4,A7
0000202C  23C0 0B00 3445          move.l    D0,_SSP.L
00002030  0124      
00002032  600E      3446          bra.s     ChangeRegisters_47
                    3447   ChangeRegisters_46:
                    3448   ; }
                    3449   ; else {
                    3450   ; printf("\r\nIllegal Register....") ;
00002034  4879 0000 3451          pea       @m68kde~1_64.L
00002038  4DFA      
0000203A  4E92      3452          jsr       (A2)
0000203C  584F      3453          addq.w    #4,A7
                    3454   ; return ;
0000203E  6000 0064 3455          bra       ChangeRegisters_6
                    3456   ChangeRegisters_47:
00002042  6000 005C 3457          bra       ChangeRegisters_51
                    3458   ChangeRegisters_44:
                    3459   ; }
                    3460   ; }
                    3461   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00002046  1013      3462          move.b    (A3),D0
00002048  0C00 0070 3463          cmp.b     #112,D0
0000204C  6620      3464          bne.s     ChangeRegisters_48
0000204E  0C02 0063 3465          cmp.b     #99,D2
00002052  661A      3466          bne.s     ChangeRegisters_48
                    3467   ; printf("\r\nPC = ") ;
00002054  4879 0000 3468          pea       @m68kde~1_66.L
00002058  4E22      
0000205A  4E92      3469          jsr       (A2)
0000205C  584F      3470          addq.w    #4,A7
                    3471   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000205E  42A7      3472          clr.l     -(A7)
00002060  4E94      3473          jsr       (A4)
00002062  584F      3474          addq.w    #4,A7
00002064  23C0 0B00 3475          move.l    D0,_PC.L
00002068  0120      
0000206A  6000 0034 3476          bra       ChangeRegisters_51
                    3477   ChangeRegisters_48:
                    3478   ; }
                    3479   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
0000206E  1013      3480          move.b    (A3),D0
00002070  0C00 0073 3481          cmp.b     #115,D0
00002074  6620      3482          bne.s     ChangeRegisters_50
00002076  0C02 0072 3483          cmp.b     #114,D2
0000207A  661A      3484          bne.s     ChangeRegisters_50
                    3485   ; printf("\r\nSR = ") ;
0000207C  4879 0000 3486          pea       @m68kde~1_67.L
00002080  4E2A      
00002082  4E92      3487          jsr       (A2)
00002084  584F      3488          addq.w    #4,A7
                    3489   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00002086  42A7      3490          clr.l     -(A7)
00002088  4EB8 0C58 3491          jsr       _Get4HexDigits
0000208C  584F      3492          addq.w    #4,A7
0000208E  33C0 0B00 3493          move.w    D0,_SR.L
00002092  012C      
00002094  600A      3494          bra.s     ChangeRegisters_51
                    3495   ChangeRegisters_50:
                    3496   ; }
                    3497   ; else
                    3498   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00002096  4879 0000 3499          pea       @m68kde~1_68.L
0000209A  4E32      
0000209C  4E92      3500          jsr       (A2)
0000209E  584F      3501          addq.w    #4,A7
                    3502   ChangeRegisters_51:
                    3503   ; DumpRegisters() ;
000020A0  4EB8 18FE 3504          jsr       _DumpRegisters
                    3505   ChangeRegisters_6:
000020A4  4CDF 3C0C 3506          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000020A8  4E5E      3507          unlk      A6
000020AA  4E75      3508          rts
                    3509   ; }
                    3510   ; void BreakPointDisplay(void)
                    3511   ; {
                    3512   _BreakPointDisplay:
000020AC  48E7 3030 3513          movem.l   D2/D3/A2/A3,-(A7)
000020B0  45F9 0000 3514          lea       _printf.L,A2
000020B4  3F16      
000020B6  47F9 0B00 3515          lea       _BreakPointAddress.L,A3
000020BA  012E      
                    3516   ; int i, BreakPointsSet = 0 ;
000020BC  4283      3517          clr.l     D3
                    3518   ; // any break points  set
                    3519   ; for(i = 0; i < 8; i++)  {
000020BE  4282      3520          clr.l     D2
                    3521   BreakPointDisplay_1:
000020C0  0C82 0000 3522          cmp.l     #8,D2
000020C4  0008      
000020C6  6C1C      3523          bge.s     BreakPointDisplay_3
                    3524   ; if(BreakPointSetOrCleared[i] == 1)
000020C8  2002      3525          move.l    D2,D0
000020CA  E588      3526          lsl.l     #2,D0
000020CC  41F9 0B00 3527          lea       _BreakPointSetOrCleared.L,A0
000020D0  015E      
000020D2  2030 0800 3528          move.l    0(A0,D0.L),D0
000020D6  0C80 0000 3529          cmp.l     #1,D0
000020DA  0001      
000020DC  6602      3530          bne.s     BreakPointDisplay_4
                    3531   ; BreakPointsSet = 1;
000020DE  7601      3532          moveq     #1,D3
                    3533   BreakPointDisplay_4:
000020E0  5282      3534          addq.l    #1,D2
000020E2  60DC      3535          bra       BreakPointDisplay_1
                    3536   BreakPointDisplay_3:
                    3537   ; }
                    3538   ; if(BreakPointsSet == 1) {
000020E4  0C83 0000 3539          cmp.l     #1,D3
000020E8  0001      
000020EA  6616      3540          bne.s     BreakPointDisplay_6
                    3541   ; printf("\r\n\r\nNum     Address      Instruction") ;
000020EC  4879 0000 3542          pea       @m68kde~1_69.L
000020F0  4E6E      
000020F2  4E92      3543          jsr       (A2)
000020F4  584F      3544          addq.w    #4,A7
                    3545   ; printf("\r\n---     ---------    -----------") ;
000020F6  4879 0000 3546          pea       @m68kde~1_70.L
000020FA  4E94      
000020FC  4E92      3547          jsr       (A2)
000020FE  584F      3548          addq.w    #4,A7
00002100  600A      3549          bra.s     BreakPointDisplay_7
                    3550   BreakPointDisplay_6:
                    3551   ; }
                    3552   ; else
                    3553   ; printf("\r\nNo BreakPoints Set") ;
00002102  4879 0000 3554          pea       @m68kde~1_71.L
00002106  4EB8      
00002108  4E92      3555          jsr       (A2)
0000210A  584F      3556          addq.w    #4,A7
                    3557   BreakPointDisplay_7:
                    3558   ; for(i = 0; i < 8; i++)  {
0000210C  4282      3559          clr.l     D2
                    3560   BreakPointDisplay_8:
0000210E  0C82 0000 3561          cmp.l     #8,D2
00002112  0008      
00002114  6C00 005A 3562          bge       BreakPointDisplay_10
                    3563   ; // put opcode back, then put break point back
                    3564   ; if(BreakPointSetOrCleared[i] == 1)  {
00002118  2002      3565          move.l    D2,D0
0000211A  E588      3566          lsl.l     #2,D0
0000211C  41F9 0B00 3567          lea       _BreakPointSetOrCleared.L,A0
00002120  015E      
00002122  2030 0800 3568          move.l    0(A0,D0.L),D0
00002126  0C80 0000 3569          cmp.l     #1,D0
0000212A  0001      
0000212C  6600 003E 3570          bne       BreakPointDisplay_11
                    3571   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00002130  2002      3572          move.l    D2,D0
00002132  E388      3573          lsl.l     #1,D0
00002134  41F9 0B00 3574          lea       _BreakPointInstruction.L,A0
00002138  014E      
0000213A  2202      3575          move.l    D2,D1
0000213C  E589      3576          lsl.l     #2,D1
0000213E  2233 1800 3577          move.l    0(A3,D1.L),D1
00002142  2241      3578          move.l    D1,A1
00002144  32B0 0800 3579          move.w    0(A0,D0.L),(A1)
                    3580   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00002148  2002      3581          move.l    D2,D0
0000214A  E588      3582          lsl.l     #2,D0
0000214C  2033 0800 3583          move.l    0(A3,D0.L),D0
00002150  2040      3584          move.l    D0,A0
00002152  30BC 4E4E 3585          move.w    #20046,(A0)
                    3586   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00002156  2202      3587          move.l    D2,D1
00002158  E589      3588          lsl.l     #2,D1
0000215A  2F33 1800 3589          move.l    0(A3,D1.L),-(A7)
0000215E  2F02      3590          move.l    D2,-(A7)
00002160  4879 0000 3591          pea       @m68kde~1_72.L
00002164  4ECE      
00002166  4E92      3592          jsr       (A2)
00002168  DEFC 000C 3593          add.w     #12,A7
                    3594   BreakPointDisplay_11:
0000216C  5282      3595          addq.l    #1,D2
0000216E  609E      3596          bra       BreakPointDisplay_8
                    3597   BreakPointDisplay_10:
                    3598   ; }
                    3599   ; }
                    3600   ; printf("\r\n") ;
00002170  4879 0000 3601          pea       @m68kde~1_1.L
00002174  484C      
00002176  4E92      3602          jsr       (A2)
00002178  584F      3603          addq.w    #4,A7
0000217A  4CDF 0C0C 3604          movem.l   (A7)+,D2/D3/A2/A3
0000217E  4E75      3605          rts
                    3606   ; }
                    3607   ; void WatchPointDisplay(void)
                    3608   ; {
                    3609   _WatchPointDisplay:
00002180  48E7 3020 3610          movem.l   D2/D3/A2,-(A7)
00002184  45F9 0000 3611          lea       _printf.L,A2
00002188  3F16      
                    3612   ; int i ;
                    3613   ; int WatchPointsSet = 0 ;
0000218A  4283      3614          clr.l     D3
                    3615   ; // any watchpoints set
                    3616   ; for(i = 0; i < 8; i++)  {
0000218C  4282      3617          clr.l     D2
                    3618   WatchPointDisplay_1:
0000218E  0C82 0000 3619          cmp.l     #8,D2
00002192  0008      
00002194  6C1C      3620          bge.s     WatchPointDisplay_3
                    3621   ; if(WatchPointSetOrCleared[i] == 1)
00002196  2002      3622          move.l    D2,D0
00002198  E588      3623          lsl.l     #2,D0
0000219A  41F9 0B00 3624          lea       _WatchPointSetOrCleared.L,A0
0000219E  01A2      
000021A0  2030 0800 3625          move.l    0(A0,D0.L),D0
000021A4  0C80 0000 3626          cmp.l     #1,D0
000021A8  0001      
000021AA  6602      3627          bne.s     WatchPointDisplay_4
                    3628   ; WatchPointsSet = 1;
000021AC  7601      3629          moveq     #1,D3
                    3630   WatchPointDisplay_4:
000021AE  5282      3631          addq.l    #1,D2
000021B0  60DC      3632          bra       WatchPointDisplay_1
                    3633   WatchPointDisplay_3:
                    3634   ; }
                    3635   ; if(WatchPointsSet == 1) {
000021B2  0C83 0000 3636          cmp.l     #1,D3
000021B6  0001      
000021B8  6616      3637          bne.s     WatchPointDisplay_6
                    3638   ; printf("\r\nNum     Address") ;
000021BA  4879 0000 3639          pea       @m68kde~1_73.L
000021BE  4EDE      
000021C0  4E92      3640          jsr       (A2)
000021C2  584F      3641          addq.w    #4,A7
                    3642   ; printf("\r\n---     ---------") ;
000021C4  4879 0000 3643          pea       @m68kde~1_74.L
000021C8  4EF0      
000021CA  4E92      3644          jsr       (A2)
000021CC  584F      3645          addq.w    #4,A7
000021CE  600A      3646          bra.s     WatchPointDisplay_7
                    3647   WatchPointDisplay_6:
                    3648   ; }
                    3649   ; else
                    3650   ; printf("\r\nNo WatchPoints Set") ;
000021D0  4879 0000 3651          pea       @m68kde~1_75.L
000021D4  4F04      
000021D6  4E92      3652          jsr       (A2)
000021D8  584F      3653          addq.w    #4,A7
                    3654   WatchPointDisplay_7:
                    3655   ; for(i = 0; i < 8; i++)  {
000021DA  4282      3656          clr.l     D2
                    3657   WatchPointDisplay_8:
000021DC  0C82 0000 3658          cmp.l     #8,D2
000021E0  0008      
000021E2  6C00 0038 3659          bge       WatchPointDisplay_10
                    3660   ; if(WatchPointSetOrCleared[i] == 1)
000021E6  2002      3661          move.l    D2,D0
000021E8  E588      3662          lsl.l     #2,D0
000021EA  41F9 0B00 3663          lea       _WatchPointSetOrCleared.L,A0
000021EE  01A2      
000021F0  2030 0800 3664          move.l    0(A0,D0.L),D0
000021F4  0C80 0000 3665          cmp.l     #1,D0
000021F8  0001      
000021FA  661C      3666          bne.s     WatchPointDisplay_11
                    3667   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000021FC  2202      3668          move.l    D2,D1
000021FE  E589      3669          lsl.l     #2,D1
00002200  41F9 0B00 3670          lea       _WatchPointAddress.L,A0
00002204  0182      
00002206  2F30 1800 3671          move.l    0(A0,D1.L),-(A7)
0000220A  2F02      3672          move.l    D2,-(A7)
0000220C  4879 0000 3673          pea       @m68kde~1_72.L
00002210  4ECE      
00002212  4E92      3674          jsr       (A2)
00002214  DEFC 000C 3675          add.w     #12,A7
                    3676   WatchPointDisplay_11:
00002218  5282      3677          addq.l    #1,D2
0000221A  60C0      3678          bra       WatchPointDisplay_8
                    3679   WatchPointDisplay_10:
                    3680   ; }
                    3681   ; printf("\r\n") ;
0000221C  4879 0000 3682          pea       @m68kde~1_1.L
00002220  484C      
00002222  4E92      3683          jsr       (A2)
00002224  584F      3684          addq.w    #4,A7
00002226  4CDF 040C 3685          movem.l   (A7)+,D2/D3/A2
0000222A  4E75      3686          rts
                    3687   ; }
                    3688   ; void BreakPointClear(void)
                    3689   ; {
                    3690   _BreakPointClear:
0000222C  4E56 FFFC 3691          link      A6,#-4
00002230  48E7 2020 3692          movem.l   D2/A2,-(A7)
00002234  45F9 0000 3693          lea       _printf.L,A2
00002238  3F16      
                    3694   ; unsigned int i ;
                    3695   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3696   ; BreakPointDisplay() ;
0000223A  4EB8 20AC 3697          jsr       _BreakPointDisplay
                    3698   ; printf("\r\nEnter Break Point Number: ") ;
0000223E  4879 0000 3699          pea       @m68kde~1_76.L
00002242  4F1A      
00002244  4E92      3700          jsr       (A2)
00002246  584F      3701          addq.w    #4,A7
                    3702   ; i = xtod(_getch()) ;           // get break pointer number
00002248  2F00      3703          move.l    D0,-(A7)
0000224A  4EB8 0B68 3704          jsr       __getch
0000224E  2200      3705          move.l    D0,D1
00002250  201F      3706          move.l    (A7)+,D0
00002252  2F01      3707          move.l    D1,-(A7)
00002254  4EB8 0BD2 3708          jsr       _xtod
00002258  584F      3709          addq.w    #4,A7
0000225A  C0BC 0000 3710          and.l     #255,D0
0000225E  00FF      
00002260  2400      3711          move.l    D0,D2
                    3712   ; if((i < 0) || (i > 7))   {
00002262  0C82 0000 3713          cmp.l     #0,D2
00002266  0000      
00002268  6508      3714          blo.s     BreakPointClear_3
0000226A  0C82 0000 3715          cmp.l     #7,D2
0000226E  0007      
00002270  630E      3716          bls.s     BreakPointClear_1
                    3717   BreakPointClear_3:
                    3718   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00002272  4879 0000 3719          pea       @m68kde~1_77.L
00002276  4F38      
00002278  4E92      3720          jsr       (A2)
0000227A  584F      3721          addq.w    #4,A7
                    3722   ; return ;
0000227C  6000 0080 3723          bra       BreakPointClear_4
                    3724   BreakPointClear_1:
                    3725   ; }
                    3726   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00002280  2002      3727          move.l    D2,D0
00002282  E588      3728          lsl.l     #2,D0
00002284  41F9 0B00 3729          lea       _BreakPointSetOrCleared.L,A0
00002288  015E      
0000228A  2030 0800 3730          move.l    0(A0,D0.L),D0
0000228E  0C80 0000 3731          cmp.l     #1,D0
00002292  0001      
00002294  6600 005A 3732          bne       BreakPointClear_5
                    3733   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00002298  2002      3734          move.l    D2,D0
0000229A  E588      3735          lsl.l     #2,D0
0000229C  41F9 0B00 3736          lea       _BreakPointAddress.L,A0
000022A0  012E      
000022A2  2D70 0800 3737          move.l    0(A0,D0.L),-4(A6)
000022A6  FFFC      
                    3738   ; BreakPointAddress[i] = 0 ;
000022A8  2002      3739          move.l    D2,D0
000022AA  E588      3740          lsl.l     #2,D0
000022AC  41F9 0B00 3741          lea       _BreakPointAddress.L,A0
000022B0  012E      
000022B2  42B0 0800 3742          clr.l     0(A0,D0.L)
                    3743   ; BreakPointSetOrCleared[i] = 0 ;
000022B6  2002      3744          move.l    D2,D0
000022B8  E588      3745          lsl.l     #2,D0
000022BA  41F9 0B00 3746          lea       _BreakPointSetOrCleared.L,A0
000022BE  015E      
000022C0  42B0 0800 3747          clr.l     0(A0,D0.L)
                    3748   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000022C4  2002      3749          move.l    D2,D0
000022C6  E388      3750          lsl.l     #1,D0
000022C8  41F9 0B00 3751          lea       _BreakPointInstruction.L,A0
000022CC  014E      
000022CE  226E FFFC 3752          move.l    -4(A6),A1
000022D2  32B0 0800 3753          move.w    0(A0,D0.L),(A1)
                    3754   ; BreakPointInstruction[i] = 0 ;
000022D6  2002      3755          move.l    D2,D0
000022D8  E388      3756          lsl.l     #1,D0
000022DA  41F9 0B00 3757          lea       _BreakPointInstruction.L,A0
000022DE  014E      
000022E0  4270 0800 3758          clr.w     0(A0,D0.L)
                    3759   ; printf("\r\nBreak Point Cleared.....\r\n") ;
000022E4  4879 0000 3760          pea       @m68kde~1_78.L
000022E8  4F54      
000022EA  4E92      3761          jsr       (A2)
000022EC  584F      3762          addq.w    #4,A7
000022EE  600A      3763          bra.s     BreakPointClear_6
                    3764   BreakPointClear_5:
                    3765   ; }
                    3766   ; else
                    3767   ; printf("\r\nBreak Point wasn't Set.....") ;
000022F0  4879 0000 3768          pea       @m68kde~1_79.L
000022F4  4F72      
000022F6  4E92      3769          jsr       (A2)
000022F8  584F      3770          addq.w    #4,A7
                    3771   BreakPointClear_6:
                    3772   ; BreakPointDisplay() ;
000022FA  4EB8 20AC 3773          jsr       _BreakPointDisplay
                    3774   ; return ;
                    3775   BreakPointClear_4:
000022FE  4CDF 0404 3776          movem.l   (A7)+,D2/A2
00002302  4E5E      3777          unlk      A6
00002304  4E75      3778          rts
                    3779   ; }
                    3780   ; void WatchPointClear(void)
                    3781   ; {
                    3782   _WatchPointClear:
00002306  48E7 2020 3783          movem.l   D2/A2,-(A7)
0000230A  45F9 0000 3784          lea       _printf.L,A2
0000230E  3F16      
                    3785   ; unsigned int i ;
                    3786   ; WatchPointDisplay() ;
00002310  4EB8 2180 3787          jsr       _WatchPointDisplay
                    3788   ; printf("\r\nEnter Watch Point Number: ") ;
00002314  4879 0000 3789          pea       @m68kde~1_80.L
00002318  4F90      
0000231A  4E92      3790          jsr       (A2)
0000231C  584F      3791          addq.w    #4,A7
                    3792   ; i = xtod(_getch()) ;           // get watch pointer number
0000231E  2F00      3793          move.l    D0,-(A7)
00002320  4EB8 0B68 3794          jsr       __getch
00002324  2200      3795          move.l    D0,D1
00002326  201F      3796          move.l    (A7)+,D0
00002328  2F01      3797          move.l    D1,-(A7)
0000232A  4EB8 0BD2 3798          jsr       _xtod
0000232E  584F      3799          addq.w    #4,A7
00002330  C0BC 0000 3800          and.l     #255,D0
00002334  00FF      
00002336  2400      3801          move.l    D0,D2
                    3802   ; if((i < 0) || (i > 7))   {
00002338  0C82 0000 3803          cmp.l     #0,D2
0000233C  0000      
0000233E  6508      3804          blo.s     WatchPointClear_3
00002340  0C82 0000 3805          cmp.l     #7,D2
00002344  0007      
00002346  630E      3806          bls.s     WatchPointClear_1
                    3807   WatchPointClear_3:
                    3808   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00002348  4879 0000 3809          pea       @m68kde~1_77.L
0000234C  4F38      
0000234E  4E92      3810          jsr       (A2)
00002350  584F      3811          addq.w    #4,A7
                    3812   ; return ;
00002352  6000 004E 3813          bra       WatchPointClear_4
                    3814   WatchPointClear_1:
                    3815   ; }
                    3816   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00002356  2002      3817          move.l    D2,D0
00002358  E588      3818          lsl.l     #2,D0
0000235A  41F9 0B00 3819          lea       _WatchPointSetOrCleared.L,A0
0000235E  01A2      
00002360  2030 0800 3820          move.l    0(A0,D0.L),D0
00002364  0C80 0000 3821          cmp.l     #1,D0
00002368  0001      
0000236A  6628      3822          bne.s     WatchPointClear_5
                    3823   ; WatchPointAddress[i] = 0 ;
0000236C  2002      3824          move.l    D2,D0
0000236E  E588      3825          lsl.l     #2,D0
00002370  41F9 0B00 3826          lea       _WatchPointAddress.L,A0
00002374  0182      
00002376  42B0 0800 3827          clr.l     0(A0,D0.L)
                    3828   ; WatchPointSetOrCleared[i] = 0 ;
0000237A  2002      3829          move.l    D2,D0
0000237C  E588      3830          lsl.l     #2,D0
0000237E  41F9 0B00 3831          lea       _WatchPointSetOrCleared.L,A0
00002382  01A2      
00002384  42B0 0800 3832          clr.l     0(A0,D0.L)
                    3833   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00002388  4879 0000 3834          pea       @m68kde~1_81.L
0000238C  4FAE      
0000238E  4E92      3835          jsr       (A2)
00002390  584F      3836          addq.w    #4,A7
00002392  600A      3837          bra.s     WatchPointClear_6
                    3838   WatchPointClear_5:
                    3839   ; }
                    3840   ; else
                    3841   ; printf("\r\nWatch Point Was not Set.....") ;
00002394  4879 0000 3842          pea       @m68kde~1_82.L
00002398  4FCC      
0000239A  4E92      3843          jsr       (A2)
0000239C  584F      3844          addq.w    #4,A7
                    3845   WatchPointClear_6:
                    3846   ; WatchPointDisplay() ;
0000239E  4EB8 2180 3847          jsr       _WatchPointDisplay
                    3848   ; return ;
                    3849   WatchPointClear_4:
000023A2  4CDF 0404 3850          movem.l   (A7)+,D2/A2
000023A6  4E75      3851          rts
                    3852   ; }
                    3853   ; void DisableBreakPoints(void)
                    3854   ; {
                    3855   _DisableBreakPoints:
000023A8  4E56 FFFC 3856          link      A6,#-4
000023AC  2F02      3857          move.l    D2,-(A7)
                    3858   ; int i ;
                    3859   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3860   ; for(i = 0; i < 8; i++)  {
000023AE  4282      3861          clr.l     D2
                    3862   DisableBreakPoints_1:
000023B0  0C82 0000 3863          cmp.l     #8,D2
000023B4  0008      
000023B6  6C00 003E 3864          bge       DisableBreakPoints_3
                    3865   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
000023BA  2002      3866          move.l    D2,D0
000023BC  E588      3867          lsl.l     #2,D0
000023BE  41F9 0B00 3868          lea       _BreakPointSetOrCleared.L,A0
000023C2  015E      
000023C4  2030 0800 3869          move.l    0(A0,D0.L),D0
000023C8  0C80 0000 3870          cmp.l     #1,D0
000023CC  0001      
000023CE  6622      3871          bne.s     DisableBreakPoints_4
                    3872   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000023D0  2002      3873          move.l    D2,D0
000023D2  E588      3874          lsl.l     #2,D0
000023D4  41F9 0B00 3875          lea       _BreakPointAddress.L,A0
000023D8  012E      
000023DA  2D70 0800 3876          move.l    0(A0,D0.L),-4(A6)
000023DE  FFFC      
                    3877   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
000023E0  2002      3878          move.l    D2,D0
000023E2  E388      3879          lsl.l     #1,D0
000023E4  41F9 0B00 3880          lea       _BreakPointInstruction.L,A0
000023E8  014E      
000023EA  226E FFFC 3881          move.l    -4(A6),A1
000023EE  32B0 0800 3882          move.w    0(A0,D0.L),(A1)
                    3883   DisableBreakPoints_4:
000023F2  5282      3884          addq.l    #1,D2
000023F4  60BA      3885          bra       DisableBreakPoints_1
                    3886   DisableBreakPoints_3:
000023F6  241F      3887          move.l    (A7)+,D2
000023F8  4E5E      3888          unlk      A6
000023FA  4E75      3889          rts
                    3890   ; }
                    3891   ; }
                    3892   ; }
                    3893   ; void EnableBreakPoints(void)
                    3894   ; {
                    3895   _EnableBreakPoints:
000023FC  4E56 FFFC 3896          link      A6,#-4
00002400  2F02      3897          move.l    D2,-(A7)
                    3898   ; int i ;
                    3899   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3900   ; for(i = 0; i < 8; i++)  {
00002402  4282      3901          clr.l     D2
                    3902   EnableBreakPoints_1:
00002404  0C82 0000 3903          cmp.l     #8,D2
00002408  0008      
0000240A  6C32      3904          bge.s     EnableBreakPoints_3
                    3905   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
0000240C  2002      3906          move.l    D2,D0
0000240E  E588      3907          lsl.l     #2,D0
00002410  41F9 0B00 3908          lea       _BreakPointSetOrCleared.L,A0
00002414  015E      
00002416  2030 0800 3909          move.l    0(A0,D0.L),D0
0000241A  0C80 0000 3910          cmp.l     #1,D0
0000241E  0001      
00002420  6618      3911          bne.s     EnableBreakPoints_4
                    3912   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002422  2002      3913          move.l    D2,D0
00002424  E588      3914          lsl.l     #2,D0
00002426  41F9 0B00 3915          lea       _BreakPointAddress.L,A0
0000242A  012E      
0000242C  2D70 0800 3916          move.l    0(A0,D0.L),-4(A6)
00002430  FFFC      
                    3917   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00002432  206E FFFC 3918          move.l    -4(A6),A0
00002436  30BC 4E4E 3919          move.w    #20046,(A0)
                    3920   EnableBreakPoints_4:
0000243A  5282      3921          addq.l    #1,D2
0000243C  60C6      3922          bra       EnableBreakPoints_1
                    3923   EnableBreakPoints_3:
0000243E  241F      3924          move.l    (A7)+,D2
00002440  4E5E      3925          unlk      A6
00002442  4E75      3926          rts
                    3927   ; }
                    3928   ; }
                    3929   ; }
                    3930   ; void KillAllBreakPoints(void)
                    3931   ; {
                    3932   _KillAllBreakPoints:
00002444  4E56 FFFC 3933          link      A6,#-4
00002448  2F02      3934          move.l    D2,-(A7)
                    3935   ; int i ;
                    3936   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3937   ; for(i = 0; i < 8; i++)  {
0000244A  4282      3938          clr.l     D2
                    3939   KillAllBreakPoints_1:
0000244C  0C82 0000 3940          cmp.l     #8,D2
00002450  0008      
00002452  6C00 0052 3941          bge       KillAllBreakPoints_3
                    3942   ; // clear BP
                    3943   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002456  2002      3944          move.l    D2,D0
00002458  E588      3945          lsl.l     #2,D0
0000245A  41F9 0B00 3946          lea       _BreakPointAddress.L,A0
0000245E  012E      
00002460  2D70 0800 3947          move.l    0(A0,D0.L),-4(A6)
00002464  FFFC      
                    3948   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002466  2002      3949          move.l    D2,D0
00002468  E388      3950          lsl.l     #1,D0
0000246A  41F9 0B00 3951          lea       _BreakPointInstruction.L,A0
0000246E  014E      
00002470  226E FFFC 3952          move.l    -4(A6),A1
00002474  32B0 0800 3953          move.w    0(A0,D0.L),(A1)
                    3954   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002478  2002      3955          move.l    D2,D0
0000247A  E588      3956          lsl.l     #2,D0
0000247C  41F9 0B00 3957          lea       _BreakPointAddress.L,A0
00002480  012E      
00002482  42B0 0800 3958          clr.l     0(A0,D0.L)
                    3959   ; BreakPointInstruction[i] = 0 ;
00002486  2002      3960          move.l    D2,D0
00002488  E388      3961          lsl.l     #1,D0
0000248A  41F9 0B00 3962          lea       _BreakPointInstruction.L,A0
0000248E  014E      
00002490  4270 0800 3963          clr.w     0(A0,D0.L)
                    3964   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002494  2002      3965          move.l    D2,D0
00002496  E588      3966          lsl.l     #2,D0
00002498  41F9 0B00 3967          lea       _BreakPointSetOrCleared.L,A0
0000249C  015E      
0000249E  42B0 0800 3968          clr.l     0(A0,D0.L)
000024A2  5282      3969          addq.l    #1,D2
000024A4  60A6      3970          bra       KillAllBreakPoints_1
                    3971   KillAllBreakPoints_3:
000024A6  241F      3972          move.l    (A7)+,D2
000024A8  4E5E      3973          unlk      A6
000024AA  4E75      3974          rts
                    3975   ; }
                    3976   ; //BreakPointDisplay() ;       // display the break points
                    3977   ; }
                    3978   ; void KillAllWatchPoints(void)
                    3979   ; {
                    3980   _KillAllWatchPoints:
000024AC  2F02      3981          move.l    D2,-(A7)
                    3982   ; int i ;
                    3983   ; for(i = 0; i < 8; i++)  {
000024AE  4282      3984          clr.l     D2
                    3985   KillAllWatchPoints_1:
000024B0  0C82 0000 3986          cmp.l     #8,D2
000024B4  0008      
000024B6  6C20      3987          bge.s     KillAllWatchPoints_3
                    3988   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
000024B8  2002      3989          move.l    D2,D0
000024BA  E588      3990          lsl.l     #2,D0
000024BC  41F9 0B00 3991          lea       _WatchPointAddress.L,A0
000024C0  0182      
000024C2  42B0 0800 3992          clr.l     0(A0,D0.L)
                    3993   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
000024C6  2002      3994          move.l    D2,D0
000024C8  E588      3995          lsl.l     #2,D0
000024CA  41F9 0B00 3996          lea       _WatchPointSetOrCleared.L,A0
000024CE  01A2      
000024D0  42B0 0800 3997          clr.l     0(A0,D0.L)
000024D4  5282      3998          addq.l    #1,D2
000024D6  60D8      3999          bra       KillAllWatchPoints_1
                    4000   KillAllWatchPoints_3:
000024D8  241F      4001          move.l    (A7)+,D2
000024DA  4E75      4002          rts
                    4003   ; }
                    4004   ; //WatchPointDisplay() ;       // display the break points
                    4005   ; }
                    4006   ; void SetBreakPoint(void)
                    4007   ; {
                    4008   _SetBreakPoint:
000024DC  4E56 FFFC 4009          link      A6,#-4
000024E0  48E7 3830 4010          movem.l   D2/D3/D4/A2/A3,-(A7)
000024E4  45F9 0000 4011          lea       _printf.L,A2
000024E8  3F16      
000024EA  47F9 0B00 4012          lea       _BreakPointSetOrCleared.L,A3
000024EE  015E      
                    4013   ; int i ;
                    4014   ; int BPNumber;
                    4015   ; int BPAddress;
                    4016   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4017   ; // see if any free break points
                    4018   ; for(i = 0; i < 8; i ++) {
000024F0  4282      4019          clr.l     D2
                    4020   SetBreakPoint_1:
000024F2  0C82 0000 4021          cmp.l     #8,D2
000024F6  0008      
000024F8  6C10      4022          bge.s     SetBreakPoint_3
                    4023   ; if( BreakPointSetOrCleared[i] == 0)
000024FA  2002      4024          move.l    D2,D0
000024FC  E588      4025          lsl.l     #2,D0
000024FE  2033 0800 4026          move.l    0(A3,D0.L),D0
00002502  6602      4027          bne.s     SetBreakPoint_4
                    4028   ; break ;         // if spare BP found allow user to set it
00002504  6004      4029          bra.s     SetBreakPoint_3
                    4030   SetBreakPoint_4:
00002506  5282      4031          addq.l    #1,D2
00002508  60E8      4032          bra       SetBreakPoint_1
                    4033   SetBreakPoint_3:
                    4034   ; }
                    4035   ; if(i == 8) {
0000250A  0C82 0000 4036          cmp.l     #8,D2
0000250E  0008      
00002510  660E      4037          bne.s     SetBreakPoint_6
                    4038   ; printf("\r\nNo FREE Break Points.....") ;
00002512  4879 0000 4039          pea       @m68kde~1_83.L
00002516  4FEC      
00002518  4E92      4040          jsr       (A2)
0000251A  584F      4041          addq.w    #4,A7
                    4042   ; return ;
0000251C  6000 00D6 4043          bra       SetBreakPoint_15
                    4044   SetBreakPoint_6:
                    4045   ; }
                    4046   ; printf("\r\nBreak Point Address: ") ;
00002520  4879 0000 4047          pea       @m68kde~1_84.L
00002524  5008      
00002526  4E92      4048          jsr       (A2)
00002528  584F      4049          addq.w    #4,A7
                    4050   ; BPAddress = Get8HexDigits(0) ;
0000252A  42A7      4051          clr.l     -(A7)
0000252C  4EB8 0CA4 4052          jsr       _Get8HexDigits
00002530  584F      4053          addq.w    #4,A7
00002532  2600      4054          move.l    D0,D3
                    4055   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00002534  2803      4056          move.l    D3,D4
                    4057   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00002536  2003      4058          move.l    D3,D0
00002538  C0BC 0000 4059          and.l     #1,D0
0000253C  0001      
0000253E  0C80 0000 4060          cmp.l     #1,D0
00002542  0001      
00002544  660E      4061          bne.s     SetBreakPoint_9
                    4062   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002546  4879 0000 4063          pea       @m68kde~1_85.L
0000254A  5020      
0000254C  4E92      4064          jsr       (A2)
0000254E  584F      4065          addq.w    #4,A7
                    4066   ; return ;
00002550  6000 00A2 4067          bra       SetBreakPoint_15
                    4068   SetBreakPoint_9:
                    4069   ; }
                    4070   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002554  0C83 0000 4071          cmp.l     #32768,D3
00002558  8000      
0000255A  640E      4072          bhs.s     SetBreakPoint_11
                    4073   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000255C  4879 0000 4074          pea       @m68kde~1_86.L
00002560  5056      
00002562  4E92      4075          jsr       (A2)
00002564  584F      4076          addq.w    #4,A7
                    4077   ; return ;
00002566  6000 008C 4078          bra       SetBreakPoint_15
                    4079   SetBreakPoint_11:
                    4080   ; }
                    4081   ; // search for first free bp or existing same BP
                    4082   ; for(i = 0; i < 8; i++)  {
0000256A  4282      4083          clr.l     D2
                    4084   SetBreakPoint_13:
0000256C  0C82 0000 4085          cmp.l     #8,D2
00002570  0008      
00002572  6C00 0080 4086          bge       SetBreakPoint_15
                    4087   ; if(BreakPointAddress[i] == BPAddress)   {
00002576  2002      4088          move.l    D2,D0
00002578  E588      4089          lsl.l     #2,D0
0000257A  41F9 0B00 4090          lea       _BreakPointAddress.L,A0
0000257E  012E      
00002580  B6B0 0800 4091          cmp.l     0(A0,D0.L),D3
00002584  6610      4092          bne.s     SetBreakPoint_16
                    4093   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002586  2F03      4094          move.l    D3,-(A7)
00002588  4879 0000 4095          pea       @m68kde~1_87.L
0000258C  509E      
0000258E  4E92      4096          jsr       (A2)
00002590  504F      4097          addq.w    #8,A7
                    4098   ; return ;
00002592  6000 0060 4099          bra       SetBreakPoint_15
                    4100   SetBreakPoint_16:
                    4101   ; }
                    4102   ; if(BreakPointSetOrCleared[i] == 0) {
00002596  2002      4103          move.l    D2,D0
00002598  E588      4104          lsl.l     #2,D0
0000259A  2033 0800 4105          move.l    0(A3,D0.L),D0
0000259E  6600 004E 4106          bne       SetBreakPoint_18
                    4107   ; // set BP here
                    4108   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
000025A2  2002      4109          move.l    D2,D0
000025A4  E588      4110          lsl.l     #2,D0
000025A6  27BC 0000 4111          move.l    #1,0(A3,D0.L)
000025AA  0001 0800 
                    4112   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
000025AE  2044      4113          move.l    D4,A0
000025B0  2002      4114          move.l    D2,D0
000025B2  E388      4115          lsl.l     #1,D0
000025B4  43F9 0B00 4116          lea       _BreakPointInstruction.L,A1
000025B8  014E      
000025BA  3390 0800 4117          move.w    (A0),0(A1,D0.L)
                    4118   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
000025BE  2F04      4119          move.l    D4,-(A7)
000025C0  4879 0000 4120          pea       @m68kde~1_88.L
000025C4  50D6      
000025C6  4E92      4121          jsr       (A2)
000025C8  504F      4122          addq.w    #8,A7
                    4123   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
000025CA  2044      4124          move.l    D4,A0
000025CC  30BC 4E4E 4125          move.w    #20046,(A0)
                    4126   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000025D0  2002      4127          move.l    D2,D0
000025D2  E588      4128          lsl.l     #2,D0
000025D4  41F9 0B00 4129          lea       _BreakPointAddress.L,A0
000025D8  012E      
000025DA  2183 0800 4130          move.l    D3,0(A0,D0.L)
                    4131   ; printf("\r\n") ;
000025DE  4879 0000 4132          pea       @m68kde~1_1.L
000025E2  484C      
000025E4  4E92      4133          jsr       (A2)
000025E6  584F      4134          addq.w    #4,A7
                    4135   ; BreakPointDisplay() ;       // display the break points
000025E8  4EB8 20AC 4136          jsr       _BreakPointDisplay
                    4137   ; return ;
000025EC  6006      4138          bra.s     SetBreakPoint_15
                    4139   SetBreakPoint_18:
000025EE  5282      4140          addq.l    #1,D2
000025F0  6000 FF7A 4141          bra       SetBreakPoint_13
                    4142   SetBreakPoint_15:
000025F4  4CDF 0C1C 4143          movem.l   (A7)+,D2/D3/D4/A2/A3
000025F8  4E5E      4144          unlk      A6
000025FA  4E75      4145          rts
                    4146   ; }
                    4147   ; }
                    4148   ; }
                    4149   ; void SetWatchPoint(void)
                    4150   ; {
                    4151   _SetWatchPoint:
000025FC  4E56 FFF8 4152          link      A6,#-8
00002600  48E7 3030 4153          movem.l   D2/D3/A2/A3,-(A7)
00002604  45F9 0000 4154          lea       _printf.L,A2
00002608  3F16      
0000260A  47F9 0B00 4155          lea       _WatchPointSetOrCleared.L,A3
0000260E  01A2      
                    4156   ; int i ;
                    4157   ; int WPNumber;
                    4158   ; int WPAddress;
                    4159   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    4160   ; // see if any free break points
                    4161   ; for(i = 0; i < 8; i ++) {
00002610  4282      4162          clr.l     D2
                    4163   SetWatchPoint_1:
00002612  0C82 0000 4164          cmp.l     #8,D2
00002616  0008      
00002618  6C10      4165          bge.s     SetWatchPoint_3
                    4166   ; if( WatchPointSetOrCleared[i] == 0)
0000261A  2002      4167          move.l    D2,D0
0000261C  E588      4168          lsl.l     #2,D0
0000261E  2033 0800 4169          move.l    0(A3,D0.L),D0
00002622  6602      4170          bne.s     SetWatchPoint_4
                    4171   ; break ;         // if spare WP found allow user to set it
00002624  6004      4172          bra.s     SetWatchPoint_3
                    4173   SetWatchPoint_4:
00002626  5282      4174          addq.l    #1,D2
00002628  60E8      4175          bra       SetWatchPoint_1
                    4176   SetWatchPoint_3:
                    4177   ; }
                    4178   ; if(i == 8) {
0000262A  0C82 0000 4179          cmp.l     #8,D2
0000262E  0008      
00002630  660E      4180          bne.s     SetWatchPoint_6
                    4181   ; printf("\r\nNo FREE Watch Points.....") ;
00002632  4879 0000 4182          pea       @m68kde~1_89.L
00002636  50FC      
00002638  4E92      4183          jsr       (A2)
0000263A  584F      4184          addq.w    #4,A7
                    4185   ; return ;
0000263C  6000 008C 4186          bra       SetWatchPoint_11
                    4187   SetWatchPoint_6:
                    4188   ; }
                    4189   ; printf("\r\nWatch Point Address: ") ;
00002640  4879 0000 4190          pea       @m68kde~1_90.L
00002644  5118      
00002646  4E92      4191          jsr       (A2)
00002648  584F      4192          addq.w    #4,A7
                    4193   ; WPAddress = Get8HexDigits(0) ;
0000264A  42A7      4194          clr.l     -(A7)
0000264C  4EB8 0CA4 4195          jsr       _Get8HexDigits
00002650  584F      4196          addq.w    #4,A7
00002652  2600      4197          move.l    D0,D3
                    4198   ; // search for first free wp or existing same wp
                    4199   ; for(i = 0; i < 8; i++)  {
00002654  4282      4200          clr.l     D2
                    4201   SetWatchPoint_9:
00002656  0C82 0000 4202          cmp.l     #8,D2
0000265A  0008      
0000265C  6C00 006C 4203          bge       SetWatchPoint_11
                    4204   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002660  2002      4205          move.l    D2,D0
00002662  E588      4206          lsl.l     #2,D0
00002664  41F9 0B00 4207          lea       _WatchPointAddress.L,A0
00002668  0182      
0000266A  B6B0 0800 4208          cmp.l     0(A0,D0.L),D3
0000266E  6614      4209          bne.s     SetWatchPoint_12
00002670  4A83      4210          tst.l     D3
00002672  6710      4211          beq.s     SetWatchPoint_12
                    4212   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002674  2F03      4213          move.l    D3,-(A7)
00002676  4879 0000 4214          pea       @m68kde~1_91.L
0000267A  5130      
0000267C  4E92      4215          jsr       (A2)
0000267E  504F      4216          addq.w    #8,A7
                    4217   ; return ;
00002680  6000 0048 4218          bra       SetWatchPoint_11
                    4219   SetWatchPoint_12:
                    4220   ; }
                    4221   ; if(WatchPointSetOrCleared[i] == 0) {
00002684  2002      4222          move.l    D2,D0
00002686  E588      4223          lsl.l     #2,D0
00002688  2033 0800 4224          move.l    0(A3,D0.L),D0
0000268C  6600 0038 4225          bne       SetWatchPoint_14
                    4226   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002690  2002      4227          move.l    D2,D0
00002692  E588      4228          lsl.l     #2,D0
00002694  27BC 0000 4229          move.l    #1,0(A3,D0.L)
00002698  0001 0800 
                    4230   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000269C  2F03      4231          move.l    D3,-(A7)
0000269E  4879 0000 4232          pea       @m68kde~1_92.L
000026A2  5166      
000026A4  4E92      4233          jsr       (A2)
000026A6  504F      4234          addq.w    #8,A7
                    4235   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
000026A8  2002      4236          move.l    D2,D0
000026AA  E588      4237          lsl.l     #2,D0
000026AC  41F9 0B00 4238          lea       _WatchPointAddress.L,A0
000026B0  0182      
000026B2  2183 0800 4239          move.l    D3,0(A0,D0.L)
                    4240   ; printf("\r\n") ;
000026B6  4879 0000 4241          pea       @m68kde~1_1.L
000026BA  484C      
000026BC  4E92      4242          jsr       (A2)
000026BE  584F      4243          addq.w    #4,A7
                    4244   ; WatchPointDisplay() ;       // display the break points
000026C0  4EB8 2180 4245          jsr       _WatchPointDisplay
                    4246   ; return ;
000026C4  6004      4247          bra.s     SetWatchPoint_11
                    4248   SetWatchPoint_14:
000026C6  5282      4249          addq.l    #1,D2
000026C8  608C      4250          bra       SetWatchPoint_9
                    4251   SetWatchPoint_11:
000026CA  4CDF 0C0C 4252          movem.l   (A7)+,D2/D3/A2/A3
000026CE  4E5E      4253          unlk      A6
000026D0  4E75      4254          rts
                    4255   ; }
                    4256   ; }
                    4257   ; }
                    4258   ; void HandleBreakPoint(void)
                    4259   ; {
                    4260   _HandleBreakPoint:
000026D2  4E56 FFFC 4261          link      A6,#-4
000026D6  48E7 0038 4262          movem.l   A2/A3/A4,-(A7)
000026DA  45F9 0B00 4263          lea       _i.L,A2
000026DE  00C4      
000026E0  47F9 0000 4264          lea       _printf.L,A3
000026E4  3F16      
000026E6  49F9 0B00 4265          lea       _PC.L,A4
000026EA  0120      
                    4266   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4267   ; // now we have to put the break point back to run the instruction
                    4268   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    4269   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000026EC  5594      4270          subq.l    #2,(A4)
                    4271   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000026EE  4879 0000 4272          pea       @m68kde~1_93.L
000026F2  518C      
000026F4  4E93      4273          jsr       (A3)
000026F6  584F      4274          addq.w    #4,A7
                    4275   ; printf("\r\nSingle Step : [ON]") ;
000026F8  4879 0000 4276          pea       @m68kde~1_94.L
000026FC  51A0      
000026FE  4E93      4277          jsr       (A3)
00002700  584F      4278          addq.w    #4,A7
                    4279   ; printf("\r\nBreakPoints : [Enabled]") ;
00002702  4879 0000 4280          pea       @m68kde~1_95.L
00002706  51B6      
00002708  4E93      4281          jsr       (A3)
0000270A  584F      4282          addq.w    #4,A7
                    4283   ; // now clear the break point (put original instruction back)
                    4284   ; ProgramBreakPointAddress = PC ;
0000270C  2D54 FFFC 4285          move.l    (A4),-4(A6)
                    4286   ; for(i = 0; i < 8; i ++) {
00002710  4292      4287          clr.l     (A2)
                    4288   HandleBreakPoint_1:
00002712  2012      4289          move.l    (A2),D0
00002714  0C80 0000 4290          cmp.l     #8,D0
00002718  0008      
0000271A  6400 0056 4291          bhs       HandleBreakPoint_3
                    4292   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
0000271E  2012      4293          move.l    (A2),D0
00002720  E588      4294          lsl.l     #2,D0
00002722  41F9 0B00 4295          lea       _BreakPointAddress.L,A0
00002726  012E      
00002728  2230 0800 4296          move.l    0(A0,D0.L),D1
0000272C  B294      4297          cmp.l     (A4),D1
0000272E  6600 003E 4298          bne       HandleBreakPoint_4
                    4299   ; BreakPointAddress[i] = 0 ;
00002732  2012      4300          move.l    (A2),D0
00002734  E588      4301          lsl.l     #2,D0
00002736  41F9 0B00 4302          lea       _BreakPointAddress.L,A0
0000273A  012E      
0000273C  42B0 0800 4303          clr.l     0(A0,D0.L)
                    4304   ; BreakPointSetOrCleared[i] = 0 ;
00002740  2012      4305          move.l    (A2),D0
00002742  E588      4306          lsl.l     #2,D0
00002744  41F9 0B00 4307          lea       _BreakPointSetOrCleared.L,A0
00002748  015E      
0000274A  42B0 0800 4308          clr.l     0(A0,D0.L)
                    4309   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000274E  2012      4310          move.l    (A2),D0
00002750  E388      4311          lsl.l     #1,D0
00002752  41F9 0B00 4312          lea       _BreakPointInstruction.L,A0
00002756  014E      
00002758  226E FFFC 4313          move.l    -4(A6),A1
0000275C  32B0 0800 4314          move.w    0(A0,D0.L),(A1)
                    4315   ; BreakPointInstruction[i] = 0 ;
00002760  2012      4316          move.l    (A2),D0
00002762  E388      4317          lsl.l     #1,D0
00002764  41F9 0B00 4318          lea       _BreakPointInstruction.L,A0
00002768  014E      
0000276A  4270 0800 4319          clr.w     0(A0,D0.L)
                    4320   HandleBreakPoint_4:
0000276E  5292      4321          addq.l    #1,(A2)
00002770  60A0      4322          bra       HandleBreakPoint_1
                    4323   HandleBreakPoint_3:
                    4324   ; }
                    4325   ; }
                    4326   ; DumpRegisters() ;
00002772  4EB8 18FE 4327          jsr       _DumpRegisters
                    4328   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002776  4879 0000 4329          pea       @m68kde~1_57.L
0000277A  4D32      
0000277C  4E93      4330          jsr       (A3)
0000277E  584F      4331          addq.w    #4,A7
                    4332   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002780  4879 0000 4333          pea       @m68kde~1_96.L
00002784  51D0      
00002786  4E93      4334          jsr       (A3)
00002788  584F      4335          addq.w    #4,A7
                    4336   ; menu() ;
0000278A  4EB9 0000 4337          jsr       _menu
0000278E  2996      
00002790  4CDF 1C00 4338          movem.l   (A7)+,A2/A3/A4
00002794  4E5E      4339          unlk      A6
00002796  4E75      4340          rts
                    4341   ; }
                    4342   ; void UnknownCommand()
                    4343   ; {
                    4344   _UnknownCommand:
                    4345   ; printf("\r\nUnknown Command.....\r\n") ;
00002798  4879 0000 4346          pea       @m68kde~1_97.L
0000279C  51F8      
0000279E  4EB9 0000 4347          jsr       _printf
000027A2  3F16      
000027A4  584F      4348          addq.w    #4,A7
                    4349   ; Help() ;
000027A6  4EB9 0000 4350          jsr       _Help
000027AA  28BC      
000027AC  4E75      4351          rts
                    4352   ; }
                    4353   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    4354   ; void CallDebugMonitor(void)
                    4355   ; {
                    4356   _CallDebugMonitor:
                    4357   ; printf("\r\nProgram Ended (TRAP #15)....") ;
000027AE  4879 0000 4358          pea       @m68kde~1_98.L
000027B2  5212      
000027B4  4EB9 0000 4359          jsr       _printf
000027B8  3F16      
000027BA  584F      4360          addq.w    #4,A7
                    4361   ; menu();
000027BC  4EB9 0000 4362          jsr       _menu
000027C0  2996      
000027C2  4E75      4363          rts
                    4364   ; }
                    4365   ; void Breakpoint(void)
                    4366   ; {
                    4367   _Breakpoint:
000027C4  2F02      4368          move.l    D2,-(A7)
                    4369   ; char c;
                    4370   ; c = toupper(_getch());
000027C6  2F00      4371          move.l    D0,-(A7)
000027C8  4EB8 0B68 4372          jsr       __getch
000027CC  2200      4373          move.l    D0,D1
000027CE  201F      4374          move.l    (A7)+,D0
000027D0  2F01      4375          move.l    D1,-(A7)
000027D2  4EB9 0000 4376          jsr       _toupper
000027D6  3654      
000027D8  584F      4377          addq.w    #4,A7
000027DA  1400      4378          move.b    D0,D2
                    4379   ; if( c == (char)('D'))                                      // BreakPoint Display
000027DC  0C02 0044 4380          cmp.b     #68,D2
000027E0  6608      4381          bne.s     Breakpoint_1
                    4382   ; BreakPointDisplay() ;
000027E2  4EB8 20AC 4383          jsr       _BreakPointDisplay
000027E6  6000 0054 4384          bra       Breakpoint_10
                    4385   Breakpoint_1:
                    4386   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000027EA  0C02 004B 4387          cmp.b     #75,D2
000027EE  6630      4388          bne.s     Breakpoint_3
                    4389   ; printf("\r\nKill All Break Points...(y/n)?") ;
000027F0  4879 0000 4390          pea       @m68kde~1_99.L
000027F4  5232      
000027F6  4EB9 0000 4391          jsr       _printf
000027FA  3F16      
000027FC  584F      4392          addq.w    #4,A7
                    4393   ; c = toupper(_getch());
000027FE  2F00      4394          move.l    D0,-(A7)
00002800  4EB8 0B68 4395          jsr       __getch
00002804  2200      4396          move.l    D0,D1
00002806  201F      4397          move.l    (A7)+,D0
00002808  2F01      4398          move.l    D1,-(A7)
0000280A  4EB9 0000 4399          jsr       _toupper
0000280E  3654      
00002810  584F      4400          addq.w    #4,A7
00002812  1400      4401          move.b    D0,D2
                    4402   ; if(c == (char)('Y'))
00002814  0C02 0059 4403          cmp.b     #89,D2
00002818  6604      4404          bne.s     Breakpoint_5
                    4405   ; KillAllBreakPoints() ;
0000281A  4EB8 2444 4406          jsr       _KillAllBreakPoints
                    4407   Breakpoint_5:
0000281E  601C      4408          bra.s     Breakpoint_10
                    4409   Breakpoint_3:
                    4410   ; }
                    4411   ; else if(c == (char)('S')) {
00002820  0C02 0053 4412          cmp.b     #83,D2
00002824  6606      4413          bne.s     Breakpoint_7
                    4414   ; SetBreakPoint() ;
00002826  4EB8 24DC 4415          jsr       _SetBreakPoint
0000282A  6010      4416          bra.s     Breakpoint_10
                    4417   Breakpoint_7:
                    4418   ; }
                    4419   ; else if(c == (char)('C')) {
0000282C  0C02 0043 4420          cmp.b     #67,D2
00002830  6606      4421          bne.s     Breakpoint_9
                    4422   ; BreakPointClear() ;
00002832  4EB8 222C 4423          jsr       _BreakPointClear
00002836  6004      4424          bra.s     Breakpoint_10
                    4425   Breakpoint_9:
                    4426   ; }
                    4427   ; else
                    4428   ; UnknownCommand() ;
00002838  4EB8 2798 4429          jsr       _UnknownCommand
                    4430   Breakpoint_10:
0000283C  241F      4431          move.l    (A7)+,D2
0000283E  4E75      4432          rts
                    4433   ; }
                    4434   ; void Watchpoint(void)
                    4435   ; {
                    4436   _Watchpoint:
00002840  2F02      4437          move.l    D2,-(A7)
                    4438   ; char c;
                    4439   ; c = toupper(_getch());
00002842  2F00      4440          move.l    D0,-(A7)
00002844  4EB8 0B68 4441          jsr       __getch
00002848  2200      4442          move.l    D0,D1
0000284A  201F      4443          move.l    (A7)+,D0
0000284C  2F01      4444          move.l    D1,-(A7)
0000284E  4EB9 0000 4445          jsr       _toupper
00002852  3654      
00002854  584F      4446          addq.w    #4,A7
00002856  1400      4447          move.b    D0,D2
                    4448   ; if( c == (char)('D'))                                      // WatchPoint Display
00002858  0C02 0044 4449          cmp.b     #68,D2
0000285C  6608      4450          bne.s     Watchpoint_1
                    4451   ; WatchPointDisplay() ;
0000285E  4EB8 2180 4452          jsr       _WatchPointDisplay
00002862  6000 0054 4453          bra       Watchpoint_10
                    4454   Watchpoint_1:
                    4455   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002866  0C02 004B 4456          cmp.b     #75,D2
0000286A  6630      4457          bne.s     Watchpoint_3
                    4458   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000286C  4879 0000 4459          pea       @m68kde~1_100.L
00002870  5254      
00002872  4EB9 0000 4460          jsr       _printf
00002876  3F16      
00002878  584F      4461          addq.w    #4,A7
                    4462   ; c = toupper(_getch());
0000287A  2F00      4463          move.l    D0,-(A7)
0000287C  4EB8 0B68 4464          jsr       __getch
00002880  2200      4465          move.l    D0,D1
00002882  201F      4466          move.l    (A7)+,D0
00002884  2F01      4467          move.l    D1,-(A7)
00002886  4EB9 0000 4468          jsr       _toupper
0000288A  3654      
0000288C  584F      4469          addq.w    #4,A7
0000288E  1400      4470          move.b    D0,D2
                    4471   ; if(c == (char)('Y'))
00002890  0C02 0059 4472          cmp.b     #89,D2
00002894  6604      4473          bne.s     Watchpoint_5
                    4474   ; KillAllWatchPoints() ;
00002896  4EB8 24AC 4475          jsr       _KillAllWatchPoints
                    4476   Watchpoint_5:
0000289A  601C      4477          bra.s     Watchpoint_10
                    4478   Watchpoint_3:
                    4479   ; }
                    4480   ; else if(c == (char)('S')) {
0000289C  0C02 0053 4481          cmp.b     #83,D2
000028A0  6606      4482          bne.s     Watchpoint_7
                    4483   ; SetWatchPoint() ;
000028A2  4EB8 25FC 4484          jsr       _SetWatchPoint
000028A6  6010      4485          bra.s     Watchpoint_10
                    4486   Watchpoint_7:
                    4487   ; }
                    4488   ; else if(c == (char)('C')) {
000028A8  0C02 0043 4489          cmp.b     #67,D2
000028AC  6606      4490          bne.s     Watchpoint_9
                    4491   ; WatchPointClear() ;
000028AE  4EB8 2306 4492          jsr       _WatchPointClear
000028B2  6004      4493          bra.s     Watchpoint_10
                    4494   Watchpoint_9:
                    4495   ; }
                    4496   ; else
                    4497   ; UnknownCommand() ;
000028B4  4EB8 2798 4498          jsr       _UnknownCommand
                    4499   Watchpoint_10:
000028B8  241F      4500          move.l    (A7)+,D2
000028BA  4E75      4501          rts
                    4502   ; }
                    4503   ; void Help(void)
                    4504   ; {
                    4505   _Help:
000028BC  48E7 2020 4506          movem.l   D2/A2,-(A7)
000028C0  45F9 0000 4507          lea       _printf.L,A2
000028C4  3F16      
                    4508   ; char *banner = "\r\n----------------------------------------------------------------" ;
000028C6  41F9 0000 4509          lea       @m68kde~1_101.L,A0
000028CA  5276      
000028CC  2408      4510          move.l    A0,D2
                    4511   ; printf(banner) ;
000028CE  2F02      4512          move.l    D2,-(A7)
000028D0  4E92      4513          jsr       (A2)
000028D2  584F      4514          addq.w    #4,A7
                    4515   ; printf("\r\n  Debugger Command Summary") ;
000028D4  4879 0000 4516          pea       @m68kde~1_102.L
000028D8  52BA      
000028DA  4E92      4517          jsr       (A2)
000028DC  584F      4518          addq.w    #4,A7
                    4519   ; printf(banner) ;
000028DE  2F02      4520          move.l    D2,-(A7)
000028E0  4E92      4521          jsr       (A2)
000028E2  584F      4522          addq.w    #4,A7
                    4523   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000028E4  4879 0000 4524          pea       @m68kde~1_103.L
000028E8  52D8      
000028EA  4E92      4525          jsr       (A2)
000028EC  584F      4526          addq.w    #4,A7
                    4527   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000028EE  4879 0000 4528          pea       @m68kde~1_104.L
000028F2  531C      
000028F4  4E92      4529          jsr       (A2)
000028F6  584F      4530          addq.w    #4,A7
                    4531   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000028F8  4879 0000 4532          pea       @m68kde~1_105.L
000028FC  5354      
000028FE  4E92      4533          jsr       (A2)
00002900  584F      4534          addq.w    #4,A7
                    4535   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
00002902  4879 0000 4536          pea       @m68kde~1_106.L
00002906  538E      
00002908  4E92      4537          jsr       (A2)
0000290A  584F      4538          addq.w    #4,A7
                    4539   ; printf("\r\n  E            - Enter String into Memory") ;
0000290C  4879 0000 4540          pea       @m68kde~1_107.L
00002910  53C0      
00002912  4E92      4541          jsr       (A2)
00002914  584F      4542          addq.w    #4,A7
                    4543   ; printf("\r\n  F            - Fill Memory with Data") ;
00002916  4879 0000 4544          pea       @m68kde~1_108.L
0000291A  53EC      
0000291C  4E92      4545          jsr       (A2)
0000291E  584F      4546          addq.w    #4,A7
                    4547   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002920  2F39 0B00 4548          move.l    _PC.L,-(A7)
00002924  0120      
00002926  4879 0000 4549          pea       @m68kde~1_109.L
0000292A  5416      
0000292C  4E92      4550          jsr       (A2)
0000292E  504F      4551          addq.w    #8,A7
                    4552   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002930  4879 0000 4553          pea       @m68kde~1_110.L
00002934  5450      
00002936  4E92      4554          jsr       (A2)
00002938  584F      4555          addq.w    #4,A7
                    4556   ; printf("\r\n  M            - Memory Examine and Change");
0000293A  4879 0000 4557          pea       @m68kde~1_111.L
0000293E  5488      
00002940  4E92      4558          jsr       (A2)
00002942  584F      4559          addq.w    #4,A7
                    4560   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002944  4879 0000 4561          pea       @m68kde~1_112.L
00002948  54B6      
0000294A  4E92      4562          jsr       (A2)
0000294C  584F      4563          addq.w    #4,A7
                    4564   ; printf("\r\n  R            - Display 68000 Registers") ;
0000294E  4879 0000 4565          pea       @m68kde~1_113.L
00002952  54F0      
00002954  4E92      4566          jsr       (A2)
00002956  584F      4567          addq.w    #4,A7
                    4568   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002958  4879 0000 4569          pea       @m68kde~1_114.L
0000295C  551C      
0000295E  4E92      4570          jsr       (A2)
00002960  584F      4571          addq.w    #4,A7
                    4572   ; printf("\r\n  TM           - Test Memory") ;
00002962  4879 0000 4573          pea       @m68kde~1_115.L
00002966  554E      
00002968  4E92      4574          jsr       (A2)
0000296A  584F      4575          addq.w    #4,A7
                    4576   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000296C  4879 0000 4577          pea       @m68kde~1_116.L
00002970  556E      
00002972  4E92      4578          jsr       (A2)
00002974  584F      4579          addq.w    #4,A7
                    4580   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002976  4879 0000 4581          pea       @m68kde~1_117.L
0000297A  5596      
0000297C  4E92      4582          jsr       (A2)
0000297E  584F      4583          addq.w    #4,A7
                    4584   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002980  4879 0000 4585          pea       @m68kde~1_118.L
00002984  55CC      
00002986  4E92      4586          jsr       (A2)
00002988  584F      4587          addq.w    #4,A7
                    4588   ; printf(banner) ;
0000298A  2F02      4589          move.l    D2,-(A7)
0000298C  4E92      4590          jsr       (A2)
0000298E  584F      4591          addq.w    #4,A7
00002990  4CDF 0404 4592          movem.l   (A7)+,D2/A2
00002994  4E75      4593          rts
                    4594   ; }
                    4595   ; void menu(void)
                    4596   ; {
                    4597   _menu:
00002996  48E7 303C 4598          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000299A  45F9 0000 4599          lea       _printf.L,A2
0000299E  3F16      
000029A0  47F9 0B00 4600          lea       _Trace.L,A3
000029A4  00D8      
000029A6  49F9 0B00 4601          lea       _x.L,A4
000029AA  00C8      
000029AC  4BF9 0B00 4602          lea       _SR.L,A5
000029B0  012C      
                    4603   ; char c,c1 ;
                    4604   ; while(1)    {
                    4605   menu_1:
                    4606   ; FlushKeyboard() ;               // dump unread characters from keyboard
000029B2  4EB8 0BA6 4607          jsr       _FlushKeyboard
                    4608   ; printf("\r\n#") ;
000029B6  4879 0000 4609          pea       @m68kde~1_119.L
000029BA  5604      
000029BC  4E92      4610          jsr       (A2)
000029BE  584F      4611          addq.w    #4,A7
                    4612   ; c = toupper(_getch());
000029C0  2F00      4613          move.l    D0,-(A7)
000029C2  4EB8 0B68 4614          jsr       __getch
000029C6  2200      4615          move.l    D0,D1
000029C8  201F      4616          move.l    (A7)+,D0
000029CA  2F01      4617          move.l    D1,-(A7)
000029CC  4EB9 0000 4618          jsr       _toupper
000029D0  3654      
000029D2  584F      4619          addq.w    #4,A7
000029D4  1400      4620          move.b    D0,D2
                    4621   ; if( c == (char)('L'))                  // load s record file
000029D6  0C02 004C 4622          cmp.b     #76,D2
000029DA  6608      4623          bne.s     menu_4
                    4624   ; Load_SRecordFile() ;
000029DC  4EB8 0E36 4625          jsr       _Load_SRecordFile
000029E0  6000 021E 4626          bra       menu_46
                    4627   menu_4:
                    4628   ; else if( c == (char)('D'))             // dump memory
000029E4  0C02 0044 4629          cmp.b     #68,D2
000029E8  6608      4630          bne.s     menu_6
                    4631   ; DumpMemory() ;
000029EA  4EB8 0CCC 4632          jsr       _DumpMemory
000029EE  6000 0210 4633          bra       menu_46
                    4634   menu_6:
                    4635   ; else if( c == (char)('E'))             // Enter String into memory
000029F2  0C02 0045 4636          cmp.b     #69,D2
000029F6  660A      4637          bne.s     menu_8
                    4638   ; EnterString() ;
000029F8  4EB9 0000 4639          jsr       _EnterString
000029FC  2D48      
000029FE  6000 0200 4640          bra       menu_46
                    4641   menu_8:
                    4642   ; else if( c == (char)('F'))             // fill memory
00002A02  0C02 0046 4643          cmp.b     #70,D2
00002A06  6608      4644          bne.s     menu_10
                    4645   ; FillMemory() ;
00002A08  4EB8 0DBC 4646          jsr       _FillMemory
00002A0C  6000 01F2 4647          bra       menu_46
                    4648   menu_10:
                    4649   ; else if( c == (char)('G'))  {           // go user program
00002A10  0C02 0047 4650          cmp.b     #71,D2
00002A14  6626      4651          bne.s     menu_12
                    4652   ; printf("\r\nProgram Running.....") ;
00002A16  4879 0000 4653          pea       @m68kde~1_120.L
00002A1A  5608      
00002A1C  4E92      4654          jsr       (A2)
00002A1E  584F      4655          addq.w    #4,A7
                    4656   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002A20  4879 0000 4657          pea       @m68kde~1_121.L
00002A24  5620      
00002A26  4E92      4658          jsr       (A2)
00002A28  584F      4659          addq.w    #4,A7
                    4660   ; GoFlag = 1 ;
00002A2A  23FC 0000 4661          move.l    #1,_GoFlag.L
00002A2E  0001 0B00 
00002A32  00DC      
                    4662   ; go() ;
00002A34  4EB8 08B8 4663          jsr       _go
00002A38  6000 01C6 4664          bra       menu_46
                    4665   menu_12:
                    4666   ; }
                    4667   ; else if( c == (char)('M'))           // memory examine and modify
00002A3C  0C02 004D 4668          cmp.b     #77,D2
00002A40  6608      4669          bne.s     menu_14
                    4670   ; MemoryChange() ;
00002A42  4EB8 0FC4 4671          jsr       _MemoryChange
00002A46  6000 01B8 4672          bra       menu_46
                    4673   menu_14:
                    4674   ; else if( c == (char)('P'))            // Program Flash Chip
00002A4A  0C02 0050 4675          cmp.b     #80,D2
00002A4E  6608      4676          bne.s     menu_16
                    4677   ; ProgramFlashChip() ;
00002A50  4EB8 1368 4678          jsr       _ProgramFlashChip
00002A54  6000 01AA 4679          bra       menu_46
                    4680   menu_16:
                    4681   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002A58  0C02 0043 4682          cmp.b     #67,D2
00002A5C  6608      4683          bne.s     menu_18
                    4684   ; LoadFromFlashChip();
00002A5E  4EB8 138A 4685          jsr       _LoadFromFlashChip
00002A62  6000 019C 4686          bra       menu_46
                    4687   menu_18:
                    4688   ; else if( c == (char)('R'))             // dump registers
00002A66  0C02 0052 4689          cmp.b     #82,D2
00002A6A  6608      4690          bne.s     menu_20
                    4691   ; DumpRegisters() ;
00002A6C  4EB8 18FE 4692          jsr       _DumpRegisters
00002A70  6000 018E 4693          bra       menu_46
                    4694   menu_20:
                    4695   ; else if( c == (char)('.'))           // change registers
00002A74  0C02 002E 4696          cmp.b     #46,D2
00002A78  6608      4697          bne.s     menu_22
                    4698   ; ChangeRegisters() ;
00002A7A  4EB8 1DF0 4699          jsr       _ChangeRegisters
00002A7E  6000 0180 4700          bra       menu_46
                    4701   menu_22:
                    4702   ; else if( c == (char)('B'))              // breakpoint command
00002A82  0C02 0042 4703          cmp.b     #66,D2
00002A86  6608      4704          bne.s     menu_24
                    4705   ; Breakpoint() ;
00002A88  4EB8 27C4 4706          jsr       _Breakpoint
00002A8C  6000 0172 4707          bra       menu_46
                    4708   menu_24:
                    4709   ; else if( c == (char)('T'))  {          // Test command
00002A90  0C02 0054 4710          cmp.b     #84,D2
00002A94  6600 0046 4711          bne       menu_26
                    4712   ; c1 = toupper(_getch()) ;
00002A98  2F00      4713          move.l    D0,-(A7)
00002A9A  4EB8 0B68 4714          jsr       __getch
00002A9E  2200      4715          move.l    D0,D1
00002AA0  201F      4716          move.l    (A7)+,D0
00002AA2  2F01      4717          move.l    D1,-(A7)
00002AA4  4EB9 0000 4718          jsr       _toupper
00002AA8  3654      
00002AAA  584F      4719          addq.w    #4,A7
00002AAC  1600      4720          move.b    D0,D3
                    4721   ; if(c1 == (char)('M'))                    // memory test
00002AAE  0C03 004D 4722          cmp.b     #77,D3
00002AB2  6608      4723          bne.s     menu_28
                    4724   ; MemoryTest() ;
00002AB4  4EB9 0000 4725          jsr       _MemoryTest
00002AB8  2DC0      
00002ABA  601C      4726          bra.s     menu_33
                    4727   menu_28:
                    4728   ; else if( c1 == (char)('S'))              // Switch Test command
00002ABC  0C03 0053 4729          cmp.b     #83,D3
00002AC0  6606      4730          bne.s     menu_30
                    4731   ; SwitchTest() ;
00002AC2  4EB8 0AA4 4732          jsr       _SwitchTest
00002AC6  6010      4733          bra.s     menu_33
                    4734   menu_30:
                    4735   ; else if( c1 == (char)('D'))              // display Test command
00002AC8  0C03 0044 4736          cmp.b     #68,D3
00002ACC  6606      4737          bne.s     menu_32
                    4738   ; TestLEDS() ;
00002ACE  4EB8 0A50 4739          jsr       _TestLEDS
00002AD2  6004      4740          bra.s     menu_33
                    4741   menu_32:
                    4742   ; else
                    4743   ; UnknownCommand() ;
00002AD4  4EB8 2798 4744          jsr       _UnknownCommand
                    4745   menu_33:
00002AD8  6000 0126 4746          bra       menu_46
                    4747   menu_26:
                    4748   ; }
                    4749   ; else if( c == (char)(' ')) {             // Next instruction command
00002ADC  0C02 0020 4750          cmp.b     #32,D2
00002AE0  6636      4751          bne.s     menu_34
                    4752   ; DisableBreakPoints() ;
00002AE2  4EB8 23A8 4753          jsr       _DisableBreakPoints
                    4754   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002AE6  2013      4755          move.l    (A3),D0
00002AE8  0C80 0000 4756          cmp.l     #1,D0
00002AEC  0001      
00002AEE  661A      4757          bne.s     menu_36
00002AF0  2039 0B00 4758          move.l    _GoFlag.L,D0
00002AF4  00DC      
00002AF6  0C80 0000 4759          cmp.l     #1,D0
00002AFA  0001      
00002AFC  660C      4760          bne.s     menu_36
                    4761   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002AFE  13FC 0001 4762          move.b    #1,4194314
00002B02  0040 000A 
                    4763   ; return ;
00002B06  6000 00FC 4764          bra       menu_38
                    4765   menu_36:
                    4766   ; }
                    4767   ; else
                    4768   ; printf("\r\nError: Press 'G' first to start program") ;
00002B0A  4879 0000 4769          pea       @m68kde~1_122.L
00002B0E  564E      
00002B10  4E92      4770          jsr       (A2)
00002B12  584F      4771          addq.w    #4,A7
00002B14  6000 00EA 4772          bra       menu_46
                    4773   menu_34:
                    4774   ; }
                    4775   ; else if( c == (char)('S')) {             // single step
00002B18  0C02 0053 4776          cmp.b     #83,D2
00002B1C  6600 008C 4777          bne       menu_39
                    4778   ; if(Trace == 0) {
00002B20  2013      4779          move.l    (A3),D0
00002B22  6600 0050 4780          bne       menu_41
                    4781   ; DisableBreakPoints() ;
00002B26  4EB8 23A8 4782          jsr       _DisableBreakPoints
                    4783   ; printf("\r\nSingle Step  :[ON]") ;
00002B2A  4879 0000 4784          pea       @m68kde~1_123.L
00002B2E  5678      
00002B30  4E92      4785          jsr       (A2)
00002B32  584F      4786          addq.w    #4,A7
                    4787   ; printf("\r\nBreak Points :[Disabled]") ;
00002B34  4879 0000 4788          pea       @m68kde~1_56.L
00002B38  4D16      
00002B3A  4E92      4789          jsr       (A2)
00002B3C  584F      4790          addq.w    #4,A7
                    4791   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002B3E  0055 8000 4792          or.w      #32768,(A5)
                    4793   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002B42  2F39 0B00 4794          move.l    _PC.L,-(A7)
00002B46  0120      
00002B48  4879 0000 4795          pea       @m68kde~1_124.L
00002B4C  568E      
00002B4E  4E92      4796          jsr       (A2)
00002B50  504F      4797          addq.w    #8,A7
                    4798   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002B52  4879 0000 4799          pea       @m68kde~1_125.L
00002B56  56C2      
00002B58  4E92      4800          jsr       (A2)
00002B5A  584F      4801          addq.w    #4,A7
                    4802   ; DumpRegisters() ;
00002B5C  4EB8 18FE 4803          jsr       _DumpRegisters
                    4804   ; Trace = 1;
00002B60  26BC 0000 4805          move.l    #1,(A3)
00002B64  0001      
                    4806   ; TraceException = 1;
00002B66  13FC 0001 4807          move.b    #1,4194314
00002B6A  0040 000A 
                    4808   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002B6E  28B8 0074 4809          move.l    116,(A4)
00002B72  6032      4810          bra.s     menu_42
                    4811   menu_41:
                    4812   ; }
                    4813   ; else {
                    4814   ; Trace = 0 ;
00002B74  4293      4815          clr.l     (A3)
                    4816   ; TraceException = 0 ;
00002B76  4239 0040 4817          clr.b     4194314
00002B7A  000A      
                    4818   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002B7C  28B8 0074 4819          move.l    116,(A4)
                    4820   ; EnableBreakPoints() ;
00002B80  4EB8 23FC 4821          jsr       _EnableBreakPoints
                    4822   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002B84  0255 7FFF 4823          and.w     #32767,(A5)
                    4824   ; printf("\r\nSingle Step : [OFF]") ;
00002B88  4879 0000 4825          pea       @m68kde~1_126.L
00002B8C  56E6      
00002B8E  4E92      4826          jsr       (A2)
00002B90  584F      4827          addq.w    #4,A7
                    4828   ; printf("\r\nBreak Points :[Enabled]") ;
00002B92  4879 0000 4829          pea       @m68kde~1_127.L
00002B96  56FC      
00002B98  4E92      4830          jsr       (A2)
00002B9A  584F      4831          addq.w    #4,A7
                    4832   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002B9C  4879 0000 4833          pea       @m68kde~1_128.L
00002BA0  5716      
00002BA2  4E92      4834          jsr       (A2)
00002BA4  584F      4835          addq.w    #4,A7
                    4836   menu_42:
00002BA6  6000 0058 4837          bra       menu_46
                    4838   menu_39:
                    4839   ; }
                    4840   ; }
                    4841   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002BAA  0C02 001B 4842          cmp.b     #27,D2
00002BAE  6600 0040 4843          bne       menu_43
                    4844   ; Trace = 0;
00002BB2  4293      4845          clr.l     (A3)
                    4846   ; TraceException = 0;
00002BB4  4239 0040 4847          clr.b     4194314
00002BB8  000A      
                    4848   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002BBA  28B8 0074 4849          move.l    116,(A4)
                    4850   ; EnableBreakPoints() ;
00002BBE  4EB8 23FC 4851          jsr       _EnableBreakPoints
                    4852   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002BC2  0255 7FFF 4853          and.w     #32767,(A5)
                    4854   ; printf("\r\nSingle Step  :[OFF]") ;
00002BC6  4879 0000 4855          pea       @m68kde~1_129.L
00002BCA  5740      
00002BCC  4E92      4856          jsr       (A2)
00002BCE  584F      4857          addq.w    #4,A7
                    4858   ; printf("\r\nBreak Points :[Enabled]");
00002BD0  4879 0000 4859          pea       @m68kde~1_127.L
00002BD4  56FC      
00002BD6  4E92      4860          jsr       (A2)
00002BD8  584F      4861          addq.w    #4,A7
                    4862   ; printf("\r\nProgram Running.....") ;
00002BDA  4879 0000 4863          pea       @m68kde~1_120.L
00002BDE  5608      
00002BE0  4E92      4864          jsr       (A2)
00002BE2  584F      4865          addq.w    #4,A7
                    4866   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002BE4  4879 0000 4867          pea       @m68kde~1_121.L
00002BE8  5620      
00002BEA  4E92      4868          jsr       (A2)
00002BEC  584F      4869          addq.w    #4,A7
                    4870   ; return ;
00002BEE  6014      4871          bra.s     menu_38
                    4872   menu_43:
                    4873   ; }
                    4874   ; else if( c == (char)('W'))              // Watchpoint command
00002BF0  0C02 0057 4875          cmp.b     #87,D2
00002BF4  6606      4876          bne.s     menu_45
                    4877   ; Watchpoint() ;
00002BF6  4EB8 2840 4878          jsr       _Watchpoint
00002BFA  6004      4879          bra.s     menu_46
                    4880   menu_45:
                    4881   ; else
                    4882   ; UnknownCommand() ;
00002BFC  4EB8 2798 4883          jsr       _UnknownCommand
                    4884   menu_46:
00002C00  6000 FDB0 4885          bra       menu_1
                    4886   menu_38:
00002C04  4CDF 3C0C 4887          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002C08  4E75      4888          rts
                    4889   ; }
                    4890   ; }
                    4891   ; void PrintErrorMessageandAbort(char *string) {
                    4892   _PrintErrorMessageandAbort:
00002C0A  4E56 0000 4893          link      A6,#0
                    4894   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002C0E  4879 0000 4895          pea       @m68kde~1_130.L
00002C12  5756      
00002C14  4EB9 0000 4896          jsr       _printf
00002C18  3F16      
00002C1A  584F      4897          addq.w    #4,A7
                    4898   ; printf("%s\r\n", string) ;
00002C1C  2F2E 0008 4899          move.l    8(A6),-(A7)
00002C20  4879 0000 4900          pea       @m68kde~1_131.L
00002C24  5772      
00002C26  4EB9 0000 4901          jsr       _printf
00002C2A  3F16      
00002C2C  504F      4902          addq.w    #8,A7
                    4903   ; menu() ;
00002C2E  4EB8 2996 4904          jsr       _menu
00002C32  4E5E      4905          unlk      A6
00002C34  4E75      4906          rts
                    4907   ; }
                    4908   ; void IRQMessage(int level) {
                    4909   _IRQMessage:
00002C36  4E56 0000 4910          link      A6,#0
                    4911   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002C3A  4879 0000 4912          pea       @m68kde~1_132.L
00002C3E  5778      
00002C40  4EB9 0000 4913          jsr       _printf
00002C44  3F16      
00002C46  584F      4914          addq.w    #4,A7
                    4915   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002C48  2F2E 0008 4916          move.l    8(A6),-(A7)
00002C4C  4879 0000 4917          pea       @m68kde~1_133.L
00002C50  5790      
00002C52  4EB9 0000 4918          jsr       _printf
00002C56  3F16      
00002C58  504F      4919          addq.w    #8,A7
                    4920   ; menu() ;
00002C5A  4EB8 2996 4921          jsr       _menu
00002C5E  4E5E      4922          unlk      A6
00002C60  4E75      4923          rts
                    4924   ; }
                    4925   ; void UnhandledIRQ1(void) {
                    4926   _UnhandledIRQ1:
                    4927   ; IRQMessage(1);
00002C62  4878 0001 4928          pea       1
00002C66  4EB8 2C36 4929          jsr       _IRQMessage
00002C6A  584F      4930          addq.w    #4,A7
00002C6C  4E75      4931          rts
                    4932   ; }
                    4933   ; void UnhandledIRQ2(void) {
                    4934   _UnhandledIRQ2:
                    4935   ; IRQMessage(2);
00002C6E  4878 0002 4936          pea       2
00002C72  4EB8 2C36 4937          jsr       _IRQMessage
00002C76  584F      4938          addq.w    #4,A7
00002C78  4E75      4939          rts
                    4940   ; }
                    4941   ; void UnhandledIRQ3(void){
                    4942   _UnhandledIRQ3:
                    4943   ; IRQMessage(3);
00002C7A  4878 0003 4944          pea       3
00002C7E  4EB8 2C36 4945          jsr       _IRQMessage
00002C82  584F      4946          addq.w    #4,A7
00002C84  4E75      4947          rts
                    4948   ; }
                    4949   ; void UnhandledIRQ4(void) {
                    4950   _UnhandledIRQ4:
                    4951   ; IRQMessage(4);
00002C86  4878 0004 4952          pea       4
00002C8A  4EB8 2C36 4953          jsr       _IRQMessage
00002C8E  584F      4954          addq.w    #4,A7
00002C90  4E75      4955          rts
                    4956   ; }
                    4957   ; void UnhandledIRQ5(void) {
                    4958   _UnhandledIRQ5:
                    4959   ; IRQMessage(5);
00002C92  4878 0005 4960          pea       5
00002C96  4EB8 2C36 4961          jsr       _IRQMessage
00002C9A  584F      4962          addq.w    #4,A7
00002C9C  4E75      4963          rts
                    4964   ; }
                    4965   ; void UnhandledIRQ6(void) {
                    4966   _UnhandledIRQ6:
                    4967   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002C9E  4879 0000 4968          pea       @m68kde~1_134.L
00002CA2  57B4      
00002CA4  4EB8 2C0A 4969          jsr       _PrintErrorMessageandAbort
00002CA8  584F      4970          addq.w    #4,A7
                    4971   ; menu() ;
00002CAA  4EB8 2996 4972          jsr       _menu
00002CAE  4E75      4973          rts
                    4974   ; }
                    4975   ; void UnhandledIRQ7(void) {
                    4976   _UnhandledIRQ7:
                    4977   ; IRQMessage(7);
00002CB0  4878 0007 4978          pea       7
00002CB4  4EB8 2C36 4979          jsr       _IRQMessage
00002CB8  584F      4980          addq.w    #4,A7
00002CBA  4E75      4981          rts
                    4982   ; }
                    4983   ; void UnhandledTrap(void) {
                    4984   _UnhandledTrap:
                    4985   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002CBC  4879 0000 4986          pea       @m68kde~1_135.L
00002CC0  57F4      
00002CC2  4EB8 2C0A 4987          jsr       _PrintErrorMessageandAbort
00002CC6  584F      4988          addq.w    #4,A7
00002CC8  4E75      4989          rts
                    4990   ; }
                    4991   ; void BusError() {
                    4992   _BusError:
                    4993   ; PrintErrorMessageandAbort("BUS Error!") ;
00002CCA  4879 0000 4994          pea       @m68kde~1_136.L
00002CCE  580A      
00002CD0  4EB8 2C0A 4995          jsr       _PrintErrorMessageandAbort
00002CD4  584F      4996          addq.w    #4,A7
00002CD6  4E75      4997          rts
                    4998   ; }
                    4999   ; void AddressError() {
                    5000   _AddressError:
                    5001   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002CD8  4879 0000 5002          pea       @m68kde~1_137.L
00002CDC  5816      
00002CDE  4EB8 2C0A 5003          jsr       _PrintErrorMessageandAbort
00002CE2  584F      5004          addq.w    #4,A7
00002CE4  4E75      5005          rts
                    5006   ; }
                    5007   ; void IllegalInstruction() {
                    5008   _IllegalInstruction:
                    5009   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002CE6  4879 0000 5010          pea       @m68kde~1_138.L
00002CEA  5826      
00002CEC  4EB8 2C0A 5011          jsr       _PrintErrorMessageandAbort
00002CF0  584F      5012          addq.w    #4,A7
00002CF2  4E75      5013          rts
                    5014   ; }
                    5015   ; void Dividebyzero() {
                    5016   _Dividebyzero:
                    5017   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002CF4  4879 0000 5018          pea       @m68kde~1_139.L
00002CF8  583A      
00002CFA  4EB8 2C0A 5019          jsr       _PrintErrorMessageandAbort
00002CFE  584F      5020          addq.w    #4,A7
00002D00  4E75      5021          rts
                    5022   ; }
                    5023   ; void Check() {
                    5024   _Check:
                    5025   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002D02  4879 0000 5026          pea       @m68kde~1_140.L
00002D06  584A      
00002D08  4EB8 2C0A 5027          jsr       _PrintErrorMessageandAbort
00002D0C  584F      5028          addq.w    #4,A7
00002D0E  4E75      5029          rts
                    5030   ; }
                    5031   ; void Trapv() {
                    5032   _Trapv:
                    5033   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002D10  4879 0000 5034          pea       @m68kde~1_141.L
00002D14  585C      
00002D16  4EB8 2C0A 5035          jsr       _PrintErrorMessageandAbort
00002D1A  584F      5036          addq.w    #4,A7
00002D1C  4E75      5037          rts
                    5038   ; }
                    5039   ; void PrivError() {
                    5040   _PrivError:
                    5041   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002D1E  4879 0000 5042          pea       @m68kde~1_142.L
00002D22  586E      
00002D24  4EB8 2C0A 5043          jsr       _PrintErrorMessageandAbort
00002D28  584F      5044          addq.w    #4,A7
00002D2A  4E75      5045          rts
                    5046   ; }
                    5047   ; void UnitIRQ() {
                    5048   _UnitIRQ:
                    5049   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002D2C  4879 0000 5050          pea       @m68kde~1_143.L
00002D30  5882      
00002D32  4EB8 2C0A 5051          jsr       _PrintErrorMessageandAbort
00002D36  584F      5052          addq.w    #4,A7
00002D38  4E75      5053          rts
                    5054   ; }
                    5055   ; void Spurious() {
                    5056   _Spurious:
                    5057   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002D3A  4879 0000 5058          pea       @m68kde~1_144.L
00002D3E  5894      
00002D40  4EB8 2C0A 5059          jsr       _PrintErrorMessageandAbort
00002D44  584F      5060          addq.w    #4,A7
00002D46  4E75      5061          rts
                    5062   ; }
                    5063   ; void EnterString(void)
                    5064   ; {
                    5065   _EnterString:
00002D48  4E56 FFFC 5066          link      A6,#-4
00002D4C  2F02      5067          move.l    D2,-(A7)
                    5068   ; unsigned char *Start;
                    5069   ; unsigned char c;
                    5070   ; printf("\r\nStart Address in Memory: ") ;
00002D4E  4879 0000 5071          pea       @m68kde~1_145.L
00002D52  58A2      
00002D54  4EB9 0000 5072          jsr       _printf
00002D58  3F16      
00002D5A  584F      5073          addq.w    #4,A7
                    5074   ; Start = Get8HexDigits(0) ;
00002D5C  42A7      5075          clr.l     -(A7)
00002D5E  4EB8 0CA4 5076          jsr       _Get8HexDigits
00002D62  584F      5077          addq.w    #4,A7
00002D64  2400      5078          move.l    D0,D2
                    5079   ; printf("\r\nEnter String (ESC to end) :") ;
00002D66  4879 0000 5080          pea       @m68kde~1_146.L
00002D6A  58BE      
00002D6C  4EB9 0000 5081          jsr       _printf
00002D70  3F16      
00002D72  584F      5082          addq.w    #4,A7
                    5083   ; while((c = getchar()) != 0x1b)
                    5084   EnterString_1:
00002D74  4EB9 0000 5085          jsr       _getch
00002D78  358A      
00002D7A  1D40 FFFF 5086          move.b    D0,-1(A6)
00002D7E  0C00 001B 5087          cmp.b     #27,D0
00002D82  670A      5088          beq.s     EnterString_3
                    5089   ; *Start++ = c ;
00002D84  2042      5090          move.l    D2,A0
00002D86  5282      5091          addq.l    #1,D2
00002D88  10AE FFFF 5092          move.b    -1(A6),(A0)
00002D8C  60E6      5093          bra       EnterString_1
                    5094   EnterString_3:
                    5095   ; *Start = 0x00;  // terminate with a null
00002D8E  2042      5096          move.l    D2,A0
00002D90  4210      5097          clr.b     (A0)
00002D92  241F      5098          move.l    (A7)+,D2
00002D94  4E5E      5099          unlk      A6
00002D96  4E75      5100          rts
                    5101   ; }
                    5102   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    5103   ; void clearInputBuffer() {
                    5104   _clearInputBuffer:
00002D98  4E56 FFFC 5105          link      A6,#-4
                    5106   ; int c;
                    5107   ; while ((c = getchar()) != '\n' && c != EOF);
                    5108   clearInputBuffer_1:
00002D9C  4EB9 0000 5109          jsr       _getch
00002DA0  358A      
00002DA2  2D40 FFFC 5110          move.l    D0,-4(A6)
00002DA6  0C80 0000 5111          cmp.l     #10,D0
00002DAA  000A      
00002DAC  670E      5112          beq.s     clearInputBuffer_3
00002DAE  202E FFFC 5113          move.l    -4(A6),D0
00002DB2  0C80 FFFF 5114          cmp.l     #-1,D0
00002DB6  FFFF      
00002DB8  6702      5115          beq.s     clearInputBuffer_3
00002DBA  60E0      5116          bra       clearInputBuffer_1
                    5117   clearInputBuffer_3:
00002DBC  4E5E      5118          unlk      A6
00002DBE  4E75      5119          rts
                    5120   ; }
                    5121   ; void MemoryTest(void)
                    5122   ; {
                    5123   _MemoryTest:
00002DC0  4E56 FF40 5124          link      A6,#-192
00002DC4  48E7 3F3C 5125          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002DC8  45F9 0000 5126          lea       _printf.L,A2
00002DCC  3F16      
00002DCE  4BF8 0B68 5127          lea       __getch.L,A5
                    5128   ; unsigned int *RamPtr, counter1=1 ;
00002DD2  2D7C 0000 5129          move.l    #1,-188(A6)
00002DD6  0001 FF44 
                    5130   ; register unsigned int i ;
                    5131   ; unsigned int Start, End ;
                    5132   ; char c, text[150];
                    5133   ; unsigned int* addressPointer;
                    5134   ; unsigned int startAddress = NULL;
00002DDA  42AE FFF0 5135          clr.l     -16(A6)
                    5136   ; unsigned int endAddress = NULL;
00002DDE  42AE FFF4 5137          clr.l     -12(A6)
                    5138   ; unsigned int byteLength;
                    5139   ; unsigned int dataSize = 0;
00002DE2  4285      5140          clr.l     D5
                    5141   ; unsigned int dataPattern = 0;
00002DE4  4283      5142          clr.l     D3
                    5143   ; unsigned int currAddress;
                    5144   ; unsigned int addrCount;
                    5145   ; unsigned int intBuffer = NULL;
00002DE6  7E00      5146          moveq     #0,D7
                    5147   ; unsigned char *startAddressPtr = NULL;
00002DE8  4282      5148          clr.l     D2
                    5149   ; unsigned char *endAddressPtr = NULL;
00002DEA  4286      5150          clr.l     D6
                    5151   ; unsigned short int *wordAddressPtr = NULL;
00002DEC  387C 0000 5152          move.w    #0,A4
                    5153   ; unsigned int *longAddressPtr = NULL;
00002DF0  367C 0000 5154          move.w    #0,A3
                    5155   ; // IMPROVEMENTS TO BE MADE:
                    5156   ; // Suppossed to be able to write an odd address as a byte
                    5157   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    5158   ; // printf("\r\nStart Address: ") ;
                    5159   ; // Start = Get8HexDigits(0) ;
                    5160   ; // printf("\r\nEnd Address: ") ;
                    5161   ; // End = Get8HexDigits(0) ;
                    5162   ; // TODO
                    5163   ; scanflush();
00002DF4  4EB9 0000 5164          jsr       _scanflush
00002DF8  390C      
                    5165   ; memset(text, 0, sizeof(text));  // fills with zeros
00002DFA  4878 0096 5166          pea       150
00002DFE  42A7      5167          clr.l     -(A7)
00002E00  486E FF56 5168          pea       -170(A6)
00002E04  4EB9 0000 5169          jsr       _memset
00002E08  3626      
00002E0A  DEFC 000C 5170          add.w     #12,A7
                    5171   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
00002E0E  4879 0000 5172          pea       @m68kde~1_147.L
00002E12  58DC      
00002E14  4E92      5173          jsr       (A2)
00002E16  584F      5174          addq.w    #4,A7
                    5175   ; dataSize = _getch() - 48;
00002E18  4E95      5176          jsr       (A5)
00002E1A  0480 0000 5177          sub.l     #48,D0
00002E1E  0030      
00002E20  2A00      5178          move.l    D0,D5
                    5179   ; printf("\n");
00002E22  4879 0000 5180          pea       @m68kde~1_28.L
00002E26  4AF4      
00002E28  4E92      5181          jsr       (A2)
00002E2A  584F      5182          addq.w    #4,A7
                    5183   ; if (dataSize == 0) {
00002E2C  4A85      5184          tst.l     D5
00002E2E  6600 0058 5185          bne       MemoryTest_1
                    5186   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
00002E32  4879 0000 5187          pea       @m68kde~1_148.L
00002E36  5932      
00002E38  4E92      5188          jsr       (A2)
00002E3A  584F      5189          addq.w    #4,A7
                    5190   ; intBuffer = _getch() - 48;
00002E3C  4E95      5191          jsr       (A5)
00002E3E  0480 0000 5192          sub.l     #48,D0
00002E42  0030      
00002E44  2E00      5193          move.l    D0,D7
                    5194   ; // scanf("%d", &intBuffer);
                    5195   ; switch (intBuffer) {
00002E46  2007      5196          move.l    D7,D0
00002E48  0C80 0000 5197          cmp.l     #4,D0
00002E4C  0004      
00002E4E  642C      5198          bhs.s     MemoryTest_4
00002E50  E380      5199          asl.l     #1,D0
00002E52  303B 0806 5200          move.w    MemoryTest_5(PC,D0.L),D0
00002E56  4EFB 0002 5201          jmp       MemoryTest_5(PC,D0.W)
                    5202   MemoryTest_5:
00002E5A  0008      5203          dc.w      MemoryTest_6-MemoryTest_5
00002E5C  000C      5204          dc.w      MemoryTest_7-MemoryTest_5
00002E5E  0014      5205          dc.w      MemoryTest_8-MemoryTest_5
00002E60  001C      5206          dc.w      MemoryTest_9-MemoryTest_5
                    5207   MemoryTest_6:
                    5208   ; case(0):
                    5209   ; dataPattern = 0x00; break;
00002E62  4283      5210          clr.l     D3
00002E64  6016      5211          bra.s     MemoryTest_4
                    5212   MemoryTest_7:
                    5213   ; case(1):
                    5214   ; dataPattern = 0xB2; break;
00002E66  263C 0000 5215          move.l    #178,D3
00002E6A  00B2      
00002E6C  600E      5216          bra.s     MemoryTest_4
                    5217   MemoryTest_8:
                    5218   ; case(2):
                    5219   ; dataPattern = 0xC3; break;
00002E6E  263C 0000 5220          move.l    #195,D3
00002E72  00C3      
00002E74  6006      5221          bra.s     MemoryTest_4
                    5222   MemoryTest_9:
                    5223   ; case(3):
                    5224   ; dataPattern = 0xD4; break;
00002E76  263C 0000 5225          move.l    #212,D3
00002E7A  00D4      
                    5226   MemoryTest_4:
                    5227   ; }
                    5228   ; dataPattern &= 0xFF;
00002E7C  C6BC 0000 5229          and.l     #255,D3
00002E80  00FF      
                    5230   ; byteLength = 1;
00002E82  7801      5231          moveq     #1,D4
00002E84  6000 00AE 5232          bra       MemoryTest_11
                    5233   MemoryTest_1:
                    5234   ; } else if (dataSize == 1) {
00002E88  0C85 0000 5235          cmp.l     #1,D5
00002E8C  0001      
00002E8E  6600 0058 5236          bne       MemoryTest_10
                    5237   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
00002E92  4879 0000 5238          pea       @m68kde~1_149.L
00002E96  5994      
00002E98  4E92      5239          jsr       (A2)
00002E9A  584F      5240          addq.w    #4,A7
                    5241   ; intBuffer = _getch() - 48;
00002E9C  4E95      5242          jsr       (A5)
00002E9E  0480 0000 5243          sub.l     #48,D0
00002EA2  0030      
00002EA4  2E00      5244          move.l    D0,D7
                    5245   ; switch (intBuffer) {
00002EA6  2007      5246          move.l    D7,D0
00002EA8  0C80 0000 5247          cmp.l     #4,D0
00002EAC  0004      
00002EAE  642C      5248          bhs.s     MemoryTest_13
00002EB0  E380      5249          asl.l     #1,D0
00002EB2  303B 0806 5250          move.w    MemoryTest_14(PC,D0.L),D0
00002EB6  4EFB 0002 5251          jmp       MemoryTest_14(PC,D0.W)
                    5252   MemoryTest_14:
00002EBA  0008      5253          dc.w      MemoryTest_15-MemoryTest_14
00002EBC  000C      5254          dc.w      MemoryTest_16-MemoryTest_14
00002EBE  0014      5255          dc.w      MemoryTest_17-MemoryTest_14
00002EC0  001C      5256          dc.w      MemoryTest_18-MemoryTest_14
                    5257   MemoryTest_15:
                    5258   ; case(0):
                    5259   ; dataPattern = 0x0000; break;
00002EC2  4283      5260          clr.l     D3
00002EC4  6016      5261          bra.s     MemoryTest_13
                    5262   MemoryTest_16:
                    5263   ; case(1):
                    5264   ; dataPattern = 0x1234; break;
00002EC6  263C 0000 5265          move.l    #4660,D3
00002ECA  1234      
00002ECC  600E      5266          bra.s     MemoryTest_13
                    5267   MemoryTest_17:
                    5268   ; case(2):
                    5269   ; dataPattern = 0xA1B2; break;
00002ECE  263C 0000 5270          move.l    #41394,D3
00002ED2  A1B2      
00002ED4  6006      5271          bra.s     MemoryTest_13
                    5272   MemoryTest_18:
                    5273   ; case(3):
                    5274   ; dataPattern = 0xC3D4; break;
00002ED6  263C 0000 5275          move.l    #50132,D3
00002EDA  C3D4      
                    5276   MemoryTest_13:
                    5277   ; }
                    5278   ; dataPattern &= 0xFFFF;
00002EDC  C6BC 0000 5279          and.l     #65535,D3
00002EE0  FFFF      
                    5280   ; byteLength = 2;
00002EE2  7802      5281          moveq     #2,D4
00002EE4  6000 004E 5282          bra       MemoryTest_11
                    5283   MemoryTest_10:
                    5284   ; } else {
                    5285   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
00002EE8  4879 0000 5286          pea       @m68kde~1_150.L
00002EEC  59FE      
00002EEE  4E92      5287          jsr       (A2)
00002EF0  584F      5288          addq.w    #4,A7
                    5289   ; intBuffer = _getch() - 48;
00002EF2  4E95      5290          jsr       (A5)
00002EF4  0480 0000 5291          sub.l     #48,D0
00002EF8  0030      
00002EFA  2E00      5292          move.l    D0,D7
                    5293   ; switch (intBuffer) {
00002EFC  2007      5294          move.l    D7,D0
00002EFE  0C80 0000 5295          cmp.l     #4,D0
00002F02  0004      
00002F04  642C      5296          bhs.s     MemoryTest_20
00002F06  E380      5297          asl.l     #1,D0
00002F08  303B 0806 5298          move.w    MemoryTest_21(PC,D0.L),D0
00002F0C  4EFB 0002 5299          jmp       MemoryTest_21(PC,D0.W)
                    5300   MemoryTest_21:
00002F10  0008      5301          dc.w      MemoryTest_22-MemoryTest_21
00002F12  000C      5302          dc.w      MemoryTest_23-MemoryTest_21
00002F14  0014      5303          dc.w      MemoryTest_24-MemoryTest_21
00002F16  001C      5304          dc.w      MemoryTest_25-MemoryTest_21
                    5305   MemoryTest_22:
                    5306   ; case(0):
                    5307   ; dataPattern = 0x00000000; break;
00002F18  4283      5308          clr.l     D3
00002F1A  6016      5309          bra.s     MemoryTest_20
                    5310   MemoryTest_23:
                    5311   ; case(1):
                    5312   ; dataPattern = 0xAABBCCDD; break;
00002F1C  263C AABB 5313          move.l    #-1430532899,D3
00002F20  CCDD      
00002F22  600E      5314          bra.s     MemoryTest_20
                    5315   MemoryTest_24:
                    5316   ; case(2):
                    5317   ; dataPattern = 0x11223344; break;
00002F24  263C 1122 5318          move.l    #287454020,D3
00002F28  3344      
00002F2A  6006      5319          bra.s     MemoryTest_20
                    5320   MemoryTest_25:
                    5321   ; case(3):
                    5322   ; dataPattern = 0x76543210; break;
00002F2C  263C 7654 5323          move.l    #1985229328,D3
00002F30  3210      
                    5324   MemoryTest_20:
                    5325   ; }
                    5326   ; byteLength = 4;
00002F32  7804      5327          moveq     #4,D4
                    5328   MemoryTest_11:
                    5329   ; }
                    5330   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    5331   ; while (startAddressPtr == NULL || 
                    5332   MemoryTest_26:
00002F34  4A82      5333          tst.l     D2
00002F36  6732      5334          beq.s     MemoryTest_29
00002F38  0C84 0000 5335          cmp.l     #1,D4
00002F3C  0001      
00002F3E  6316      5336          bls.s     MemoryTest_30
00002F40  2F02      5337          move.l    D2,-(A7)
00002F42  4878 0002 5338          pea       2
00002F46  4EB9 0000 5339          jsr       ULDIV
00002F4A  33DC      
00002F4C  202F 0004 5340          move.l    4(A7),D0
00002F50  504F      5341          addq.w    #8,A7
00002F52  4A80      5342          tst.l     D0
00002F54  6614      5343          bne.s     MemoryTest_29
                    5344   MemoryTest_30:
00002F56  0C82 0802 5345          cmp.l     #134348800,D2
00002F5A  0000      
00002F5C  650C      5346          blo.s     MemoryTest_29
00002F5E  203C 0B00 5347          move.l    #184549376,D0
00002F62  0000      
00002F64  9084      5348          sub.l     D4,D0
00002F66  B480      5349          cmp.l     D0,D2
00002F68  6316      5350          bls.s     MemoryTest_28
                    5351   MemoryTest_29:
                    5352   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    5353   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    5354   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    5355   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
00002F6A  4879 0000 5356          pea       @m68kde~1_151.L
00002F6E  5A7C      
00002F70  4E92      5357          jsr       (A2)
00002F72  584F      5358          addq.w    #4,A7
                    5359   ; startAddressPtr =  Get8HexDigits(0);
00002F74  42A7      5360          clr.l     -(A7)
00002F76  4EB8 0CA4 5361          jsr       _Get8HexDigits
00002F7A  584F      5362          addq.w    #4,A7
00002F7C  2400      5363          move.l    D0,D2
00002F7E  60B4      5364          bra       MemoryTest_26
                    5365   MemoryTest_28:
                    5366   ; }
                    5367   ; while (endAddressPtr == NULL || 
                    5368   MemoryTest_31:
00002F80  4A86      5369          tst.l     D6
00002F82  670A      5370          beq.s     MemoryTest_34
00002F84  202E FFF0 5371          move.l    -16(A6),D0
00002F88  D084      5372          add.l     D4,D0
00002F8A  BC80      5373          cmp.l     D0,D6
00002F8C  6416      5374          bhs.s     MemoryTest_33
                    5375   MemoryTest_34:
                    5376   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    5377   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00002F8E  4879 0000 5378          pea       @m68kde~1_152.L
00002F92  5AB4      
00002F94  4E92      5379          jsr       (A2)
00002F96  584F      5380          addq.w    #4,A7
                    5381   ; endAddressPtr =  Get8HexDigits(0);
00002F98  42A7      5382          clr.l     -(A7)
00002F9A  4EB8 0CA4 5383          jsr       _Get8HexDigits
00002F9E  584F      5384          addq.w    #4,A7
00002FA0  2C00      5385          move.l    D0,D6
00002FA2  60DC      5386          bra       MemoryTest_31
                    5387   MemoryTest_33:
                    5388   ; }
                    5389   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00002FA4  2F02      5390          move.l    D2,-(A7)
00002FA6  4879 0000 5391          pea       @m68kde~1_153.L
00002FAA  5AEA      
00002FAC  4E92      5392          jsr       (A2)
00002FAE  504F      5393          addq.w    #8,A7
                    5394   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
00002FB0  2F06      5395          move.l    D6,-(A7)
00002FB2  4879 0000 5396          pea       @m68kde~1_154.L
00002FB6  5B02      
00002FB8  4E92      5397          jsr       (A2)
00002FBA  504F      5398          addq.w    #8,A7
                    5399   ; addrCount = 0;
00002FBC  42AE FFFC 5400          clr.l     -4(A6)
                    5401   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    5402   MemoryTest_35:
00002FC0  B486      5403          cmp.l     D6,D2
00002FC2  6400 0132 5404          bhs       MemoryTest_37
00002FC6  2006      5405          move.l    D6,D0
00002FC8  9082      5406          sub.l     D2,D0
00002FCA  5280      5407          addq.l    #1,D0
00002FCC  B084      5408          cmp.l     D4,D0
00002FCE  6500 0126 5409          blo       MemoryTest_37
                    5410   ; // If address goes beyond 0x0B00_0000 then break
                    5411   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
00002FD2  203C 0B00 5412          move.l    #184549376,D0
00002FD6  0000      
00002FD8  9084      5413          sub.l     D4,D0
00002FDA  B480      5414          cmp.l     D0,D2
00002FDC  6310      5415          bls.s     MemoryTest_38
                    5416   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
00002FDE  2F02      5417          move.l    D2,-(A7)
00002FE0  4879 0000 5418          pea       @m68kde~1_155.L
00002FE4  5B18      
00002FE6  4E92      5419          jsr       (A2)
00002FE8  504F      5420          addq.w    #8,A7
                    5421   ; break;
00002FEA  6000 010A 5422          bra       MemoryTest_37
                    5423   MemoryTest_38:
                    5424   ; }
                    5425   ; longAddressPtr = startAddressPtr;
00002FEE  2642      5426          move.l    D2,A3
                    5427   ; wordAddressPtr = startAddressPtr;
00002FF0  2842      5428          move.l    D2,A4
                    5429   ; if (dataSize == 0) {
00002FF2  4A85      5430          tst.l     D5
00002FF4  6600 0034 5431          bne       MemoryTest_40
                    5432   ; *startAddressPtr = dataPattern;
00002FF8  2042      5433          move.l    D2,A0
00002FFA  1083      5434          move.b    D3,(A0)
                    5435   ; if ((*startAddressPtr) != dataPattern) {
00002FFC  2042      5436          move.l    D2,A0
00002FFE  1010      5437          move.b    (A0),D0
00003000  C0BC 0000 5438          and.l     #255,D0
00003004  00FF      
00003006  B083      5439          cmp.l     D3,D0
00003008  671C      5440          beq.s     MemoryTest_42
                    5441   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
0000300A  2F03      5442          move.l    D3,-(A7)
0000300C  2042      5443          move.l    D2,A0
0000300E  1210      5444          move.b    (A0),D1
00003010  C2BC 0000 5445          and.l     #255,D1
00003014  00FF      
00003016  2F01      5446          move.l    D1,-(A7)
00003018  2F02      5447          move.l    D2,-(A7)
0000301A  4879 0000 5448          pea       @m68kde~1_156.L
0000301E  5B4A      
00003020  4E92      5449          jsr       (A2)
00003022  DEFC 0010 5450          add.w     #16,A7
                    5451   MemoryTest_42:
00003026  6000 0058 5452          bra       MemoryTest_48
                    5453   MemoryTest_40:
                    5454   ; }
                    5455   ; } else if (dataSize == 1) {
0000302A  0C85 0000 5456          cmp.l     #1,D5
0000302E  0001      
00003030  662C      5457          bne.s     MemoryTest_44
                    5458   ; *wordAddressPtr = dataPattern;
00003032  3883      5459          move.w    D3,(A4)
                    5460   ; if ((*wordAddressPtr) != dataPattern) {
00003034  3014      5461          move.w    (A4),D0
00003036  C0BC 0000 5462          and.l     #65535,D0
0000303A  FFFF      
0000303C  B083      5463          cmp.l     D3,D0
0000303E  671C      5464          beq.s     MemoryTest_46
                    5465   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00003040  2F03      5466          move.l    D3,-(A7)
00003042  2042      5467          move.l    D2,A0
00003044  1210      5468          move.b    (A0),D1
00003046  C2BC 0000 5469          and.l     #255,D1
0000304A  00FF      
0000304C  2F01      5470          move.l    D1,-(A7)
0000304E  2F02      5471          move.l    D2,-(A7)
00003050  4879 0000 5472          pea       @m68kde~1_156.L
00003054  5B4A      
00003056  4E92      5473          jsr       (A2)
00003058  DEFC 0010 5474          add.w     #16,A7
                    5475   MemoryTest_46:
0000305C  6022      5476          bra.s     MemoryTest_48
                    5477   MemoryTest_44:
                    5478   ; }
                    5479   ; } else {
                    5480   ; *longAddressPtr = dataPattern;
0000305E  2683      5481          move.l    D3,(A3)
                    5482   ; if ((*longAddressPtr) != dataPattern) {
00003060  B693      5483          cmp.l     (A3),D3
00003062  671C      5484          beq.s     MemoryTest_48
                    5485   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00003064  2F03      5486          move.l    D3,-(A7)
00003066  2042      5487          move.l    D2,A0
00003068  1210      5488          move.b    (A0),D1
0000306A  C2BC 0000 5489          and.l     #255,D1
0000306E  00FF      
00003070  2F01      5490          move.l    D1,-(A7)
00003072  2F02      5491          move.l    D2,-(A7)
00003074  4879 0000 5492          pea       @m68kde~1_156.L
00003078  5B4A      
0000307A  4E92      5493          jsr       (A2)
0000307C  DEFC 0010 5494          add.w     #16,A7
                    5495   MemoryTest_48:
                    5496   ; }
                    5497   ; }
                    5498   ; // if ((*startAddressPtr) != dataPattern) {
                    5499   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    5500   ; // }
                    5501   ; addrCount++;
00003080  52AE FFFC 5502          addq.l    #1,-4(A6)
                    5503   ; if (addrCount % 128 == 0) {
00003084  2F2E FFFC 5504          move.l    -4(A6),-(A7)
00003088  4878 0080 5505          pea       128
0000308C  4EB9 0000 5506          jsr       ULDIV
00003090  33DC      
00003092  202F 0004 5507          move.l    4(A7),D0
00003096  504F      5508          addq.w    #8,A7
00003098  4A80      5509          tst.l     D0
0000309A  6600 0054 5510          bne       MemoryTest_55
                    5511   ; if (dataSize == 0) {
0000309E  4A85      5512          tst.l     D5
000030A0  661C      5513          bne.s     MemoryTest_52
                    5514   ; printf("Address: 0x%x Value: 0x%02X\n",
000030A2  2042      5515          move.l    D2,A0
000030A4  1210      5516          move.b    (A0),D1
000030A6  C2BC 0000 5517          and.l     #255,D1
000030AA  00FF      
000030AC  2F01      5518          move.l    D1,-(A7)
000030AE  2F02      5519          move.l    D2,-(A7)
000030B0  4879 0000 5520          pea       @m68kde~1_157.L
000030B4  5B90      
000030B6  4E92      5521          jsr       (A2)
000030B8  DEFC 000C 5522          add.w     #12,A7
000030BC  6032      5523          bra.s     MemoryTest_55
                    5524   MemoryTest_52:
                    5525   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    5526   ; }
                    5527   ; else if (dataSize == 1) {
000030BE  0C85 0000 5528          cmp.l     #1,D5
000030C2  0001      
000030C4  661A      5529          bne.s     MemoryTest_54
                    5530   ; printf("Address: 0x%x Value: 0x%04X\n",
000030C6  3214      5531          move.w    (A4),D1
000030C8  C2BC 0000 5532          and.l     #65535,D1
000030CC  FFFF      
000030CE  2F01      5533          move.l    D1,-(A7)
000030D0  2F0C      5534          move.l    A4,-(A7)
000030D2  4879 0000 5535          pea       @m68kde~1_158.L
000030D6  5BAE      
000030D8  4E92      5536          jsr       (A2)
000030DA  DEFC 000C 5537          add.w     #12,A7
000030DE  6010      5538          bra.s     MemoryTest_55
                    5539   MemoryTest_54:
                    5540   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    5541   ; }
                    5542   ; else {
                    5543   ; printf("Address: 0x%x Value: 0x%08X\n",
000030E0  2F13      5544          move.l    (A3),-(A7)
000030E2  2F0B      5545          move.l    A3,-(A7)
000030E4  4879 0000 5546          pea       @m68kde~1_159.L
000030E8  5BCC      
000030EA  4E92      5547          jsr       (A2)
000030EC  DEFC 000C 5548          add.w     #12,A7
                    5549   MemoryTest_55:
                    5550   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    5551   ; }
                    5552   ; }
                    5553   ; startAddressPtr += byteLength;
000030F0  D484      5554          add.l     D4,D2
000030F2  6000 FECC 5555          bra       MemoryTest_35
                    5556   MemoryTest_37:
000030F6  4CDF 3CFC 5557          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000030FA  4E5E      5558          unlk      A6
000030FC  4E75      5559          rts
                    5560   ; }
                    5561   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    5562   ; }
                    5563   ; void main(void)
                    5564   ; {
                    5565   _main:
000030FE  4E56 FFF4 5566          link      A6,#-12
00003102  48E7 3030 5567          movem.l   D2/D3/A2/A3,-(A7)
00003106  45F8 0A30 5568          lea       _InstallExceptionHandler.L,A2
0000310A  47F9 0000 5569          lea       _printf.L,A3
0000310E  3F16      
                    5570   ; char c ;
                    5571   ; int i, j ;
                    5572   ; char *BugMessage = "DE1-68k Bug V1.77";
00003110  41F9 0000 5573          lea       @m68kde~1_160.L,A0
00003114  5BEA      
00003116  2608      5574          move.l    A0,D3
                    5575   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00003118  41F9 0000 5576          lea       @m68kde~1_161.L,A0
0000311C  5BFC      
0000311E  2D48 FFFC 5577          move.l    A0,-4(A6)
                    5578   ; KillAllBreakPoints() ;
00003122  4EB8 2444 5579          jsr       _KillAllBreakPoints
                    5580   ; i = x = y = z = PortA_Count = 0;
00003126  42B9 0B00 5581          clr.l     _PortA_Count.L
0000312A  00D4      
0000312C  42B9 0B00 5582          clr.l     _z.L
00003130  00D0      
00003132  42B9 0B00 5583          clr.l     _y.L
00003136  00CC      
00003138  42B9 0B00 5584          clr.l     _x.L
0000313C  00C8      
0000313E  4282      5585          clr.l     D2
                    5586   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00003140  42B9 0B00 5587          clr.l     _GoFlag.L
00003144  00DC      
00003146  42B9 0B00 5588          clr.l     _Trace.L
0000314A  00D8      
                    5589   ; Echo = 1 ;
0000314C  23FC 0000 5590          move.l    #1,_Echo.L
00003150  0001 0B00 
00003154  00E0      
                    5591   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00003156  42B9 0B00 5592          clr.l     _d7.L
0000315A  0100      
0000315C  42B9 0B00 5593          clr.l     _d6.L
00003160  00FC      
00003162  42B9 0B00 5594          clr.l     _d5.L
00003166  00F8      
00003168  42B9 0B00 5595          clr.l     _d4.L
0000316C  00F4      
0000316E  42B9 0B00 5596          clr.l     _d3.L
00003172  00F0      
00003174  42B9 0B00 5597          clr.l     _d2.L
00003178  00EC      
0000317A  42B9 0B00 5598          clr.l     _d1.L
0000317E  00E8      
00003180  42B9 0B00 5599          clr.l     _d0.L
00003184  00E4      
                    5600   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00003186  42B9 0B00 5601          clr.l     _a6.L
0000318A  011C      
0000318C  42B9 0B00 5602          clr.l     _a5.L
00003190  0118      
00003192  42B9 0B00 5603          clr.l     _a4.L
00003196  0114      
00003198  42B9 0B00 5604          clr.l     _a3.L
0000319C  0110      
0000319E  42B9 0B00 5605          clr.l     _a2.L
000031A2  010C      
000031A4  42B9 0B00 5606          clr.l     _a1.L
000031A8  0108      
000031AA  42B9 0B00 5607          clr.l     _a0.L
000031AE  0104      
                    5608   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
000031B0  23FC 0800 5609          move.l    #134217728,_PC.L
000031B4  0000 0B00 
000031B8  0120      
000031BA  23FC 0C00 5610          move.l    #201326592,_SSP.L
000031BE  0000 0B00 
000031C2  0124      
000031C4  23FC 0C00 5611          move.l    #201326592,_USP.L
000031C8  0000 0B00 
000031CC  0128      
                    5612   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
000031CE  33FC 2000 5613          move.w    #8192,_SR.L
000031D2  0B00 012C 
                    5614   ; // Initialise Breakpoint variables
                    5615   ; for(i = 0; i < 8; i++)  {
000031D6  4282      5616          clr.l     D2
                    5617   main_1:
000031D8  0C82 0000 5618          cmp.l     #8,D2
000031DC  0008      
000031DE  6C00 004C 5619          bge       main_3
                    5620   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000031E2  2002      5621          move.l    D2,D0
000031E4  E588      5622          lsl.l     #2,D0
000031E6  41F9 0B00 5623          lea       _BreakPointAddress.L,A0
000031EA  012E      
000031EC  42B0 0800 5624          clr.l     0(A0,D0.L)
                    5625   ; WatchPointAddress[i] = 0 ;
000031F0  2002      5626          move.l    D2,D0
000031F2  E588      5627          lsl.l     #2,D0
000031F4  41F9 0B00 5628          lea       _WatchPointAddress.L,A0
000031F8  0182      
000031FA  42B0 0800 5629          clr.l     0(A0,D0.L)
                    5630   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
000031FE  2002      5631          move.l    D2,D0
00003200  E388      5632          lsl.l     #1,D0
00003202  41F9 0B00 5633          lea       _BreakPointInstruction.L,A0
00003206  014E      
00003208  4270 0800 5634          clr.w     0(A0,D0.L)
                    5635   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
0000320C  2002      5636          move.l    D2,D0
0000320E  E588      5637          lsl.l     #2,D0
00003210  41F9 0B00 5638          lea       _BreakPointSetOrCleared.L,A0
00003214  015E      
00003216  42B0 0800 5639          clr.l     0(A0,D0.L)
                    5640   ; WatchPointSetOrCleared[i] = 0;
0000321A  2002      5641          move.l    D2,D0
0000321C  E588      5642          lsl.l     #2,D0
0000321E  41F9 0B00 5643          lea       _WatchPointSetOrCleared.L,A0
00003222  01A2      
00003224  42B0 0800 5644          clr.l     0(A0,D0.L)
00003228  5282      5645          addq.l    #1,D2
0000322A  60AC      5646          bra       main_1
                    5647   main_3:
                    5648   ; }
                    5649   ; Init_RS232() ;     // initialise the RS232 port
0000322C  4EB8 0B12 5650          jsr       _Init_RS232
                    5651   ; Init_LCD() ;
00003230  4EB8 095E 5652          jsr       _Init_LCD
                    5653   ; SPI_Init();
00003234  4EB8 10FC 5654          jsr       _SPI_Init
                    5655   ; IIC_Init();
00003238  4EB8 1428 5656          jsr       _IIC_Init
                    5657   ; for( i = 32; i < 48; i++)
0000323C  7420      5658          moveq     #32,D2
                    5659   main_4:
0000323E  0C82 0000 5660          cmp.l     #48,D2
00003242  0030      
00003244  6C0E      5661          bge.s     main_6
                    5662   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00003246  2F02      5663          move.l    D2,-(A7)
00003248  4878 2CBC 5664          pea       _UnhandledTrap.L
0000324C  4E92      5665          jsr       (A2)
0000324E  504F      5666          addq.w    #8,A7
00003250  5282      5667          addq.l    #1,D2
00003252  60EA      5668          bra       main_4
                    5669   main_6:
                    5670   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00003254  4878 002F 5671          pea       47
00003258  4878 2996 5672          pea       _menu.L
0000325C  4E92      5673          jsr       (A2)
0000325E  504F      5674          addq.w    #8,A7
                    5675   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00003260  4878 0019 5676          pea       25
00003264  4878 2C62 5677          pea       _UnhandledIRQ1.L
00003268  4E92      5678          jsr       (A2)
0000326A  504F      5679          addq.w    #8,A7
                    5680   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
0000326C  4878 001A 5681          pea       26
00003270  4878 2C6E 5682          pea       _UnhandledIRQ2.L
00003274  4E92      5683          jsr       (A2)
00003276  504F      5684          addq.w    #8,A7
                    5685   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00003278  4878 001B 5686          pea       27
0000327C  4878 2C7A 5687          pea       _UnhandledIRQ3.L
00003280  4E92      5688          jsr       (A2)
00003282  504F      5689          addq.w    #8,A7
                    5690   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00003284  4878 001C 5691          pea       28
00003288  4878 2C86 5692          pea       _UnhandledIRQ4.L
0000328C  4E92      5693          jsr       (A2)
0000328E  504F      5694          addq.w    #8,A7
                    5695   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00003290  4878 001D 5696          pea       29
00003294  4878 2C92 5697          pea       _UnhandledIRQ5.L
00003298  4E92      5698          jsr       (A2)
0000329A  504F      5699          addq.w    #8,A7
                    5700   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
0000329C  4878 001E 5701          pea       30
000032A0  4878 2C9E 5702          pea       _UnhandledIRQ6.L
000032A4  4E92      5703          jsr       (A2)
000032A6  504F      5704          addq.w    #8,A7
                    5705   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
000032A8  4878 001F 5706          pea       31
000032AC  4878 2CB0 5707          pea       _UnhandledIRQ7.L
000032B0  4E92      5708          jsr       (A2)
000032B2  504F      5709          addq.w    #8,A7
                    5710   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
000032B4  4878 002E 5711          pea       46
000032B8  4878 26D2 5712          pea       _HandleBreakPoint.L
000032BC  4E92      5713          jsr       (A2)
000032BE  504F      5714          addq.w    #8,A7
                    5715   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
000032C0  4878 001D 5716          pea       29
000032C4  4878 1DB2 5717          pea       _DumpRegistersandPause.L
000032C8  4E92      5718          jsr       (A2)
000032CA  504F      5719          addq.w    #8,A7
                    5720   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
000032CC  4878 0002 5721          pea       2
000032D0  4878 2CCA 5722          pea       _BusError.L
000032D4  4E92      5723          jsr       (A2)
000032D6  504F      5724          addq.w    #8,A7
                    5725   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
000032D8  4878 0003 5726          pea       3
000032DC  4878 2CD8 5727          pea       _AddressError.L
000032E0  4E92      5728          jsr       (A2)
000032E2  504F      5729          addq.w    #8,A7
                    5730   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
000032E4  4878 0004 5731          pea       4
000032E8  4878 2CE6 5732          pea       _IllegalInstruction.L
000032EC  4E92      5733          jsr       (A2)
000032EE  504F      5734          addq.w    #8,A7
                    5735   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
000032F0  4878 0005 5736          pea       5
000032F4  4878 2CF4 5737          pea       _Dividebyzero.L
000032F8  4E92      5738          jsr       (A2)
000032FA  504F      5739          addq.w    #8,A7
                    5740   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
000032FC  4878 0006 5741          pea       6
00003300  4878 2D02 5742          pea       _Check.L
00003304  4E92      5743          jsr       (A2)
00003306  504F      5744          addq.w    #8,A7
                    5745   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00003308  4878 0007 5746          pea       7
0000330C  4878 2D10 5747          pea       _Trapv.L
00003310  4E92      5748          jsr       (A2)
00003312  504F      5749          addq.w    #8,A7
                    5750   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00003314  4878 0008 5751          pea       8
00003318  4878 2D1E 5752          pea       _PrivError.L
0000331C  4E92      5753          jsr       (A2)
0000331E  504F      5754          addq.w    #8,A7
                    5755   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00003320  4878 000F 5756          pea       15
00003324  4878 2D2C 5757          pea       _UnitIRQ.L
00003328  4E92      5758          jsr       (A2)
0000332A  504F      5759          addq.w    #8,A7
                    5760   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
0000332C  4878 0018 5761          pea       24
00003330  4878 2D02 5762          pea       _Check.L
00003334  4E92      5763          jsr       (A2)
00003336  504F      5764          addq.w    #8,A7
                    5765   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00003338  4EB8 0BA6 5766          jsr       _FlushKeyboard
                    5767   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
0000333C  4239 0040 5768          clr.b     4194314
00003340  000A      
                    5769   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5770   ; if (((char)(PortB & 0x02)) == (char)(0x02))    {
00003342  1039 0040 5771          move.b    4194306,D0
00003346  0002      
00003348  C03C 0002 5772          and.b     #2,D0
0000334C  0C00 0002 5773          cmp.b     #2,D0
00003350  6628      5774          bne.s     main_7
                    5775   ; LoadFromFlashChip();
00003352  4EB8 138A 5776          jsr       _LoadFromFlashChip
                    5777   ; printf("\r\nRunning.....") ;
00003356  4879 0000 5778          pea       @m68kde~1_162.L
0000335A  5C1A      
0000335C  4E93      5779          jsr       (A3)
0000335E  584F      5780          addq.w    #4,A7
                    5781   ; Oline1("Running.....") ;
00003360  4879 0000 5782          pea       @m68kde~1_163.L
00003364  5C2A      
00003366  4EB8 0A02 5783          jsr       _Oline1
0000336A  584F      5784          addq.w    #4,A7
                    5785   ; GoFlag = 1;
0000336C  23FC 0000 5786          move.l    #1,_GoFlag.L
00003370  0001 0B00 
00003374  00DC      
                    5787   ; go() ;
00003376  4EB8 08B8 5788          jsr       _go
                    5789   main_7:
                    5790   ; }
                    5791   ; // otherwise start the debug monitor
                    5792   ; Oline0(BugMessage) ;
0000337A  2F03      5793          move.l    D3,-(A7)
0000337C  4EB8 09D4 5794          jsr       _Oline0
00003380  584F      5795          addq.w    #4,A7
                    5796   ; Oline1("By: PJ Davies") ;
00003382  4879 0000 5797          pea       @m68kde~1_164.L
00003386  5C38      
00003388  4EB8 0A02 5798          jsr       _Oline1
0000338C  584F      5799          addq.w    #4,A7
                    5800   ; printf("\r\n%s", BugMessage) ;
0000338E  2F03      5801          move.l    D3,-(A7)
00003390  4879 0000 5802          pea       @m68kde~1_165.L
00003394  5C46      
00003396  4E93      5803          jsr       (A3)
00003398  504F      5804          addq.w    #8,A7
                    5805   ; printf("\r\n%s", CopyrightMessage) ;
0000339A  2F2E FFFC 5806          move.l    -4(A6),-(A7)
0000339E  4879 0000 5807          pea       @m68kde~1_165.L
000033A2  5C46      
000033A4  4E93      5808          jsr       (A3)
000033A6  504F      5809          addq.w    #8,A7
                    5810   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
000033A8  4879 0000 5811          pea       @m68kde~1_166.L
000033AC  5C4C      
000033AE  4E93      5812          jsr       (A3)
000033B0  584F      5813          addq.w    #4,A7
                    5814   ; printf("Initializing i2c test...\n");
000033B2  4879 0000 5815          pea       @m68kde~1_167.L
000033B6  5C94      
000033B8  4E93      5816          jsr       (A3)
000033BA  584F      5817          addq.w    #4,A7
                    5818   ; I2CTest();
000033BC  4EB8 1856 5819          jsr       _I2CTest
                    5820   ; menu();
000033C0  4EB8 2996 5821          jsr       _menu
000033C4  4CDF 0C0C 5822          movem.l   (A7)+,D2/D3/A2/A3
000033C8  4E5E      5823          unlk      A6
000033CA  4E75      5824          rts
                    5825   ; }
                    5826   _strcpy:
000033CC  206F 0004 5827          move.l    (4,A7),A0
000033D0  226F 0008 5828          move.l    (8,A7),A1
000033D4  2008      5829          move.l    A0,D0
                    5830   strcpy_1:
000033D6  10D9      5831          move.b    (A1)+,(A0)+
000033D8  66FC      5832          bne       strcpy_1
000033DA  4E75      5833          rts
                    5834   ULDIV:
000033DC  4E56 0000 5835          link    A6,#0
000033E0  48E7 C000 5836          movem.l D0/D1,-(A7)
000033E4  222E 0008 5837          move.l  8(A6),D1
000033E8  202E 000C 5838          move.l  12(A6),D0
000033EC  6036      5839          bra.s   ldiv_3
                    5840   LDIV:
000033EE  4E56 0000 5841          link    A6,#0
000033F2  48E7 C000 5842          movem.l D0/D1,-(A7)
000033F6  222E 0008 5843          move.l  8(A6),D1
000033FA  202E 000C 5844          move.l  12(A6),D0
000033FE  4A80      5845          tst.l   D0
00003400  6A0E      5846          bpl.s   ldiv_1
00003402  4480      5847          neg.l   D0
00003404  4A81      5848          tst.l   D1
00003406  6A14      5849          bpl.s   ldiv_2
00003408  4481      5850          neg.l   D1
0000340A  612A      5851          bsr.s   dodiv
0000340C  4481      5852          neg.l   D1
0000340E  6016      5853          bra.s   ldiv_4
                    5854   ldiv_1:
00003410  4A81      5855          tst.l   D1
00003412  6A10      5856          bpl.s   ldiv_3
00003414  4481      5857          neg.l   D1
00003416  611E      5858          bsr.s   dodiv
00003418  4480      5859          neg.l   D0
0000341A  600A      5860          bra.s   ldiv_4
                    5861   ldiv_2:
0000341C  6118      5862          bsr.s   dodiv
0000341E  4480      5863          neg.l   D0
00003420  4481      5864          neg.l   D1
00003422  6002      5865          bra.s   ldiv_4
                    5866   ldiv_3:
00003424  6110      5867          bsr.s   dodiv
                    5868   ldiv_4:
00003426  2D40 0008 5869          move.l  D0,8(A6)
0000342A  2D41 000C 5870          move.l  D1,12(A6)
0000342E  4CDF 0003 5871          movem.l (A7)+,D0/D1
00003432  4E5E      5872          unlk    A6
00003434  4E75      5873          rts
                    5874   dodiv:
00003436  0C81 0000 5875          cmpi.l  #$FFFF,D1
0000343A  FFFF      
0000343C  6236      5876          bhi.s   dodiv_2
0000343E  0C80 0000 5877          cmpi.l  #$FFFF,D0
00003442  FFFF      
00003444  6210      5878          bhi.s   dodiv_1
00003446  80C1      5879          divu    D1,D0
00003448  2200      5880          move.l  D0,D1
0000344A  4241      5881          clr.w   D1
0000344C  4841      5882          swap    D1
0000344E  0280 0000 5883          andi.l  #$FFFF,D0
00003452  FFFF      
00003454  4E75      5884          rts
                    5885   dodiv_1:
00003456  48A7 A000 5886          movem.w D0/D2,-(A7)
0000345A  4240      5887          clr.w   D0
0000345C  4840      5888          swap    D0
0000345E  80C1      5889          divu    D1,D0
00003460  3400      5890          move.w  D0,D2
00003462  301F      5891          move.w  (A7)+,D0
00003464  80C1      5892          divu    D1,D0
00003466  4840      5893          swap    D0
00003468  4281      5894          clr.l   D1
0000346A  3200      5895          move.w  D0,D1
0000346C  3002      5896          move.w  D2,D0
0000346E  4840      5897          swap    D0
00003470  341F      5898          move.w  (A7)+,D2
00003472  4E75      5899          rts
                    5900   dodiv_2:
00003474  48E7 3800 5901          movem.l D2/D3/D4,-(A7)
00003478  2401      5902          move.l  D1,D2
0000347A  4242      5903          clr.w   D2
0000347C  4842      5904          swap    D2
0000347E  5282      5905          addq.l  #1,D2
00003480  2600      5906          move.l  D0,D3
00003482  2801      5907          move.l  D1,D4
00003484  2202      5908          move.l  D2,D1
00003486  61CE      5909          bsr.s   dodiv_1
00003488  2204      5910          move.l  D4,D1
0000348A  82C2      5911          divu    D2,D1
0000348C  80C1      5912          divu    D1,D0
0000348E  0280 0000 5913          andi.l  #$FFFF,D0
00003492  FFFF      
                    5914   dodiv_3:
00003494  2204      5915          move.l  D4,D1
00003496  2404      5916          move.l  D4,D2
00003498  4842      5917          swap    D2
0000349A  C2C0      5918          mulu    D0,D1
0000349C  C4C0      5919          mulu    D0,D2
0000349E  4842      5920          swap    D2
000034A0  D282      5921          add.l   D2,D1
000034A2  9283      5922          sub.l   D3,D1
000034A4  620A      5923          bhi.s   dodiv_4
000034A6  4481      5924          neg.l   D1
000034A8  B881      5925          cmp.l   D1,D4
000034AA  6208      5926          bhi.s   dodiv_5
000034AC  5280      5927          addq.l  #1,D0
000034AE  60E4      5928          bra.s   dodiv_3
                    5929   dodiv_4:
000034B0  5380      5930          subq.l  #1,D0
000034B2  60E0      5931          bra.s   dodiv_3
                    5932   dodiv_5:
000034B4  4CDF 001C 5933          movem.l (A7)+,D2/D3/D4
000034B8  4E75      5934          rts
                    5935   ULMUL:
000034BA  4E56 0000 5936          link    A6,#0
000034BE  48E7 C000 5937          movem.l D0/D1,-(A7)
000034C2  222E 0008 5938          move.l  8(A6),D1
000034C6  202E 000C 5939          move.l  12(A6),D0
000034CA  602C      5940          bra.s   lmul_3
                    5941   LMUL:
000034CC  4E56 0000 5942          link    A6,#0
000034D0  48E7 C000 5943          movem.l D0/D1,-(A7)
000034D4  222E 0008 5944          move.l  8(A6),D1
000034D8  202E 000C 5945          move.l  12(A6),D0
000034DC  4A80      5946          tst.l   D0
000034DE  6A0A      5947          bpl.s   lmul_1
000034E0  4480      5948          neg.l   D0
000034E2  4A81      5949          tst.l   D1
000034E4  6A0A      5950          bpl.s   lmul_2
000034E6  4481      5951          neg.l   D1
000034E8  600E      5952          bra.s   lmul_3
                    5953   lmul_1:
000034EA  4A81      5954          tst.l   D1
000034EC  6A0A      5955          bpl.s   lmul_3
000034EE  4481      5956          neg.l   D1
                    5957   lmul_2:
000034F0  6114      5958          bsr.s   domul
000034F2  4481      5959          neg.l   D1
000034F4  4080      5960          negx.l  D0
000034F6  6002      5961          bra.s   lmul_4
                    5962   lmul_3:
000034F8  610C      5963          bsr.s   domul
                    5964   lmul_4:
000034FA  2D41 0008 5965          move.l  D1,8(A6)
000034FE  4CDF 0003 5966          movem.l (A7)+,D0/D1
00003502  4E5E      5967          unlk    A6
00003504  4E75      5968          rts
                    5969   domul:
00003506  0C81 0000 5970          cmpi.l  #$FFFF,D1
0000350A  FFFF      
0000350C  620C      5971          bhi.s   domul_1
0000350E  0C80 0000 5972          cmpi.l  #$FFFF,D0
00003512  FFFF      
00003514  620E      5973          bhi.s   domul_2
00003516  C2C0      5974          mulu    D0,D1
00003518  4E75      5975          rts
                    5976   domul_1:
0000351A  0C80 0000 5977          cmpi.l  #$FFFF,D0
0000351E  FFFF      
00003520  6218      5978          bhi.s   domul_4
00003522  6002      5979          bra.s   domul_3
                    5980   domul_2
00003524  C141      5981          exg     D0,D1
                    5982   domul_3:
00003526  2F02      5983          move.l  D2,-(A7)
00003528  2401      5984          move.l  D1,D2
0000352A  4842      5985          swap    D2
0000352C  C2C0      5986          mulu    D0,D1
0000352E  C4C0      5987          mulu    D0,D2
00003530  4842      5988          swap    D2
00003532  4242      5989          clr.w   D2
00003534  D282      5990          add.l   D2,D1
00003536  241F      5991          move.l  (A7)+,D2
00003538  4E75      5992          rts
                    5993   domul_4:
0000353A  48E7 3000 5994          movem.l D2/D3,-(A7)
0000353E  2401      5995          move.l  D1,D2
00003540  2601      5996          move.l  D1,D3
00003542  C2C0      5997          mulu    D0,D1
00003544  4842      5998          swap    D2
00003546  C4C0      5999          mulu    D0,D2
00003548  4840      6000          swap    D0
0000354A  C6C0      6001          mulu    D0,D3
0000354C  D483      6002          add.l   D3,D2
0000354E  4842      6003          swap    D2
00003550  4242      6004          clr.w   D2
00003552  D282      6005          add.l   D2,D1
00003554  4CDF 000C 6006          movem.l (A7)+,D2/D3
00003558  4E75      6007          rts
                    6008   _putch:
0000355A  4E56 0000 6009          link      A6,#0
0000355E  48E7 2000 6010          movem.l   D2,-(A7)
00003562  242E 0008 6011          move.l    8(A6),D2
00003566  0C82 0000 6012          cmp.l     #10,D2
0000356A  000A      
0000356C  660A      6013          bne.s     putch_1
0000356E  4878 000D 6014          pea       13
00003572  6100 D5C8 6015          bsr       __putch
00003576  584F      6016          addq.w    #4,A7
                    6017   putch_1:
00003578  2F02      6018          move.l    D2,-(A7)
0000357A  6100 D5C0 6019          bsr       __putch
0000357E  584F      6020          addq.w    #4,A7
00003580  2002      6021          move.l    D2,D0
00003582  4CDF 0004 6022          movem.l   (A7)+,D2
00003586  4E5E      6023          unlk      A6
00003588  4E75      6024          rts
                    6025   _getch:
0000358A  48E7 2000 6026          movem.l   D2,-(A7)
0000358E  2439 0B00 6027          move.l    __ungetbuf,D2
00003592  00C0      
00003594  2039 0B00 6028          move.l    __ungetbuf,D0
00003598  00C0      
0000359A  0C80 FFFF 6029          cmp.l     #-1,D0
0000359E  FFFF      
000035A0  670C      6030          beq.s     getch_1
000035A2  23FC FFFF 6031          move.l    #-1,__ungetbuf
000035A6  FFFF 0B00 
000035AA  00C0      
000035AC  6010      6032          bra.s     getch_3
                    6033   getch_1:
000035AE  6100 D5B8 6034          bsr       __getch
000035B2  2400      6035          move.l    D0,D2
000035B4  0C80 0000 6036          cmp.l     #13,D0
000035B8  000D      
000035BA  6602      6037          bne.s     getch_3
000035BC  740A      6038          moveq     #10,D2
                    6039   getch_3:
000035BE  2002      6040          move.l    D2,D0
000035C0  4CDF 0004 6041          movem.l   (A7)+,D2
000035C4  4E75      6042          rts
                    6043   _tolower:
000035C6  4E56 0000 6044          link      A6,#0
000035CA  48E7 2000 6045          movem.l   D2,-(A7)
000035CE  242E 0008 6046          move.l    8(A6),D2
000035D2  0C82 0000 6047          cmp.l     #65,D2
000035D6  0041      
000035D8  6D0E      6048          blt.s     tolower_1
000035DA  0C82 0000 6049          cmp.l     #90,D2
000035DE  005A      
000035E0  6E06      6050          bgt.s     tolower_1
000035E2  84BC 0000 6051          or.l      #32,D2
000035E6  0020      
                    6052   tolower_1:
000035E8  2002      6053          move.l    D2,D0
000035EA  4CDF 0004 6054          movem.l   (A7)+,D2
000035EE  4E5E      6055          unlk      A6
000035F0  4E75      6056          rts
                    6057   _sprintf:
000035F2  4E56 FFFC 6058          link      A6,#-4
000035F6  48E7 2000 6059          movem.l   D2,-(A7)
000035FA  41EE 000C 6060          lea       12(A6),A0
000035FE  5848      6061          addq.w    #4,A0
00003600  2408      6062          move.l    A0,D2
00003602  2F02      6063          move.l    D2,-(A7)
00003604  2F2E 000C 6064          move.l    12(A6),-(A7)
00003608  2F2E 0008 6065          move.l    8(A6),-(A7)
0000360C  6100 09EC 6066          bsr       _vsprintf
00003610  DEFC 000C 6067          add.w     #12,A7
00003614  2D40 FFFC 6068          move.l    D0,-4(A6)
00003618  4282      6069          clr.l     D2
0000361A  202E FFFC 6070          move.l    -4(A6),D0
0000361E  4CDF 0004 6071          movem.l   (A7)+,D2
00003622  4E5E      6072          unlk      A6
00003624  4E75      6073          rts
                    6074   _memset:
00003626  206F 0004 6075          move.l    (4,A7),A0
0000362A  202F 0008 6076          move.l    (8,A7),D0
0000362E  222F 000C 6077          move.l    (12,A7),D1
00003632  2248      6078          move.l    A0,A1	
                    6079   memset_1:
00003634  12C0      6080          move.b    D0,(A1)+
00003636  5341      6081          subq      #1,D1
00003638  66FA      6082          bne       memset_1
0000363A  2008      6083          move.l    A0,D0
0000363C  4E75      6084          rts
                    6085   _strcat:
0000363E  206F 0004 6086          move.l    (4,A7),A0	
00003642  226F 0008 6087          move.l    (8,A7),A1	
00003646  2008      6088          move.l    A0,D0		
                    6089   strcat_0:
00003648  4A18      6090          tst.b     (A0)+
0000364A  66FC      6091          bne       strcat_0
0000364C  5348      6092          subq      #1,A0
                    6093   strcat_1:
0000364E  10D9      6094          move.b    (A1)+,(A0)+
00003650  66FC      6095          bne       strcat_1
00003652  4E75      6096          rts
                    6097   _toupper:
00003654  4E56 0000 6098          link      A6,#0
00003658  48E7 2000 6099          movem.l   D2,-(A7)
0000365C  242E 0008 6100          move.l    8(A6),D2
00003660  0C82 0000 6101          cmp.l     #97,D2
00003664  0061      
00003666  6D0E      6102          blt.s     toupper_1
00003668  0C82 0000 6103          cmp.l     #122,D2
0000366C  007A      
0000366E  6E06      6104          bgt.s     toupper_1
00003670  C4BC 0000 6105          and.l     #95,D2
00003674  005F      
                    6106   toupper_1:
00003676  2002      6107          move.l    D2,D0
00003678  4CDF 0004 6108          movem.l   (A7)+,D2
0000367C  4E5E      6109          unlk      A6
0000367E  4E75      6110          rts
                    6111   @vsscanf_scanread:
00003680  4E56 FFFC 6112          link      A6,#-4
00003684  48E7 0020 6113          movem.l   A2,-(A7)
00003688  45F9 0000 6114          lea       @vsscanf_bufx,A2
0000368C  5CC2      
0000368E  4AAE 0008 6115          tst.l     8(A6)
00003692  6722      6116          beq.s     @vsscanf_scanread_1
00003694  206E 0008 6117          move.l    8(A6),A0
00003698  58AE 0008 6118          addq.l    #4,8(A6)
0000369C  2050      6119          move.l    (A0),A0
0000369E  1010      6120          move.b    (A0),D0
000036A0  4880      6121          ext.w     D0
000036A2  48C0      6122          ext.l     D0
000036A4  2D40 FFFC 6123          move.l    D0,-4(A6)
000036A8  6706      6124          beq.s     @vsscanf_scanread_3
000036AA  202E FFFC 6125          move.l    -4(A6),D0
000036AE  6002      6126          bra.s     @vsscanf_scanread_4
                    6127   @vsscanf_scanread_3:
000036B0  70FF      6128          moveq     #-1,D0
                    6129   @vsscanf_scanread_4:
000036B2  6000 0032 6130          bra       @vsscanf_scanread_5
                    6131   @vsscanf_scanread_1:
000036B6  2052      6132          move.l    (A2),A0
000036B8  1010      6133          move.b    (A0),D0
000036BA  6620      6134          bne.s     @vsscanf_scanread_6
000036BC  4879 0B00 6135          pea       @vsscanf_buf
000036C0  0546      
000036C2  6100 0F98 6136          bsr       _gets
000036C6  584F      6137          addq.w    #4,A7
000036C8  2480      6138          move.l    D0,(A2)
000036CA  4879 0000 6139          pea       @vsscanf_1
000036CE  5CC6      
000036D0  4879 0B00 6140          pea       @vsscanf_buf
000036D4  0546      
000036D6  6100 FF66 6141          bsr       _strcat
000036DA  504F      6142          addq.w    #8,A7
                    6143   @vsscanf_scanread_6:
000036DC  2052      6144          move.l    (A2),A0
000036DE  5292      6145          addq.l    #1,(A2)
000036E0  1010      6146          move.b    (A0),D0
000036E2  4880      6147          ext.w     D0
000036E4  48C0      6148          ext.l     D0
                    6149   @vsscanf_scanread_5:
000036E6  4CDF 0400 6150          movem.l   (A7)+,A2
000036EA  4E5E      6151          unlk      A6
000036EC  4E75      6152          rts
                    6153   @vsscanf_scanputback:
000036EE  4E56 0000 6154          link      A6,#0
000036F2  48E7 3000 6155          movem.l   D2/D3,-(A7)
000036F6  242E 000C 6156          move.l    12(A6),D2
000036FA  262E 0008 6157          move.l    8(A6),D3
000036FE  6718      6158          beq.s     @vsscanf_scanputback_1
00003700  0C82 FFFF 6159          cmp.l     #-1,D2
00003704  FFFF      
00003706  670A      6160          beq.s     @vsscanf_scanputback_3
00003708  5983      6161          subq.l    #4,D3
0000370A  2043      6162          move.l    D3,A0
0000370C  2050      6163          move.l    (A0),A0
0000370E  1082      6164          move.b    D2,(A0)
00003710  6004      6165          bra.s     @vsscanf_scanputback_4
                    6166   @vsscanf_scanputback_3:
00003712  2043      6167          move.l    D3,A0
00003714  5390      6168          subq.l    #1,(A0)
                    6169   @vsscanf_scanputback_4:
00003716  602E      6170          bra.s     @vsscanf_scanputback_6
                    6171   @vsscanf_scanputback_1:
00003718  41F9 0B00 6172          lea       @vsscanf_buf,A0
0000371C  0546      
0000371E  2008      6173          move.l    A0,D0
00003720  B0B9 0000 6174          cmp.l     @vsscanf_bufx,D0
00003724  5CC2      
00003726  6610      6175          bne.s     @vsscanf_scanputback_5
00003728  4239 0B00 6176          clr.b     @vsscanf_buf
0000372C  0546      
0000372E  2F02      6177          move.l    D2,-(A7)
00003730  6100 0F9C 6178          bsr       _ungetch
00003734  584F      6179          addq.w    #4,A7
00003736  600E      6180          bra.s     @vsscanf_scanputback_6
                    6181   @vsscanf_scanputback_5:
00003738  53B9 0000 6182          subq.l    #1,@vsscanf_bufx
0000373C  5CC2      
0000373E  2079 0000 6183          move.l    @vsscanf_bufx,A0
00003742  5CC2      
00003744  1082      6184          move.b    D2,(A0)
                    6185   @vsscanf_scanputback_6:
00003746  2002      6186          move.l    D2,D0
00003748  4CDF 000C 6187          movem.l   (A7)+,D2/D3
0000374C  4E5E      6188          unlk      A6
0000374E  4E75      6189          rts
                    6190   @vsscanf_scanspace:
00003750  4E56 0000 6191          link      A6,#0
00003754  48E7 2000 6192          movem.l   D2,-(A7)
                    6193   @vsscanf_scanspace_1:
00003758  2F2E 0008 6194          move.l    8(A6),-(A7)
0000375C  6100 FF22 6195          bsr       @vsscanf_scanread
00003760  584F      6196          addq.w    #4,A7
00003762  2400      6197          move.l    D0,D2
00003764  206E 000C 6198          move.l    12(A6),A0
00003768  5290      6199          addq.l    #1,(A0)
0000376A  2042      6200          move.l    D2,A0
0000376C  43F9 0000 6201          lea       __ctype,A1
00003770  5CC8      
00003772  1030 9801 6202          move.b    1(A0,A1.L),D0
00003776  C03C 0010 6203          and.b     #16,D0
0000377A  66DC      6204          bne       @vsscanf_scanspace_1
0000377C  2002      6205          move.l    D2,D0
0000377E  4CDF 0004 6206          movem.l   (A7)+,D2
00003782  4E5E      6207          unlk      A6
00003784  4E75      6208          rts
                    6209   @vsscanf_scanselect:
00003786  4E56 0000 6210          link      A6,#0
0000378A  48E7 3F20 6211          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
0000378E  262E 000C 6212          move.l    12(A6),D3
00003792  2C2E 0018 6213          move.l    24(A6),D6
00003796  2E2E 0014 6214          move.l    20(A6),D7
0000379A  2043      6215          move.l    D3,A0
0000379C  1010      6216          move.b    (A0),D0
0000379E  4880      6217          ext.w     D0
000037A0  48C0      6218          ext.l     D0
000037A2  0C80 0000 6219          cmp.l     #94,D0
000037A6  005E      
000037A8  6608      6220          bne.s     @vsscanf_scanselect_1
000037AA  347C 0001 6221          move.w    #1,A2
000037AE  5283      6222          addq.l    #1,D3
000037B0  6004      6223          bra.s     @vsscanf_scanselect_2
                    6224   @vsscanf_scanselect_1:
000037B2  347C 0000 6225          move.w    #0,A2
                    6226   @vsscanf_scanselect_2:
000037B6  202E 0010 6227          move.l    16(A6),D0
000037BA  53AE 0010 6228          subq.l    #1,16(A6)
000037BE  4A80      6229          tst.l     D0
000037C0  6700 0108 6230          beq       @vsscanf_scanselect_5
000037C4  2F2E 0008 6231          move.l    8(A6),-(A7)
000037C8  6100 FEB6 6232          bsr       @vsscanf_scanread
000037CC  584F      6233          addq.w    #4,A7
000037CE  2800      6234          move.l    D0,D4
000037D0  0C84 FFFF 6235          cmp.l     #-1,D4
000037D4  FFFF      
000037D6  6604      6236          bne.s     @vsscanf_scanselect_6
000037D8  6000 00F0 6237          bra       @vsscanf_scanselect_5
                    6238   @vsscanf_scanselect_6:
000037DC  206E 001C 6239          move.l    28(A6),A0
000037E0  5290      6240          addq.l    #1,(A0)
000037E2  4285      6241          clr.l     D5
000037E4  4282      6242          clr.l     D2
                    6243   @vsscanf_scanselect_8:
000037E6  2043      6244          move.l    D3,A0
000037E8  1030 2800 6245          move.b    0(A0,D2.L),D0
000037EC  4880      6246          ext.w     D0
000037EE  48C0      6247          ext.l     D0
000037F0  0C80 0000 6248          cmp.l     #93,D0
000037F4  005D      
000037F6  6700 008E 6249          beq       @vsscanf_scanselect_10
000037FA  4A82      6250          tst.l     D2
000037FC  6716      6251          beq.s     @vsscanf_scanselect_11
000037FE  2043      6252          move.l    D3,A0
00003800  1030 2800 6253          move.b    0(A0,D2.L),D0
00003804  4880      6254          ext.w     D0
00003806  48C0      6255          ext.l     D0
00003808  0C80 0000 6256          cmp.l     #93,D0
0000380C  005D      
0000380E  6604      6257          bne.s     @vsscanf_scanselect_11
00003810  6000 0074 6258          bra       @vsscanf_scanselect_10
                    6259   @vsscanf_scanselect_11:
00003814  4A82      6260          tst.l     D2
00003816  6700 0058 6261          beq       @vsscanf_scanselect_15
0000381A  2043      6262          move.l    D3,A0
0000381C  1030 2800 6263          move.b    0(A0,D2.L),D0
00003820  4880      6264          ext.w     D0
00003822  48C0      6265          ext.l     D0
00003824  0C80 0000 6266          cmp.l     #45,D0
00003828  002D      
0000382A  6600 0044 6267          bne       @vsscanf_scanselect_15
0000382E  2043      6268          move.l    D3,A0
00003830  2002      6269          move.l    D2,D0
00003832  5380      6270          subq.l    #1,D0
00003834  2243      6271          move.l    D3,A1
00003836  2F08      6272          move.l    A0,-(A7)
00003838  2042      6273          move.l    D2,A0
0000383A  1230 0800 6274          move.b    0(A0,D0.L),D1
0000383E  B230 9801 6275          cmp.b     1(A0,A1.L),D1
00003842  6C00 002C 6276          bge       @vsscanf_scanselect_15
00003846  205F      6277          move.l    (A7)+,A0
00003848  2043      6278          move.l    D3,A0
0000384A  2002      6279          move.l    D2,D0
0000384C  5380      6280          subq.l    #1,D0
0000384E  1030 0800 6281          move.b    0(A0,D0.L),D0
00003852  4880      6282          ext.w     D0
00003854  48C0      6283          ext.l     D0
00003856  B880      6284          cmp.l     D0,D4
00003858  6D12      6285          blt.s     @vsscanf_scanselect_17
0000385A  2043      6286          move.l    D3,A0
0000385C  2242      6287          move.l    D2,A1
0000385E  1031 8801 6288          move.b    1(A1,A0.L),D0
00003862  4880      6289          ext.w     D0
00003864  48C0      6290          ext.l     D0
00003866  B880      6291          cmp.l     D0,D4
00003868  6E02      6292          bgt.s     @vsscanf_scanselect_17
0000386A  601A      6293          bra.s     @vsscanf_scanselect_10
                    6294   @vsscanf_scanselect_17:
0000386C  5282      6295          addq.l    #1,D2
0000386E  6010      6296          bra.s     @vsscanf_scanselect_19
                    6297   @vsscanf_scanselect_15:
00003870  2043      6298          move.l    D3,A0
00003872  1030 2800 6299          move.b    0(A0,D2.L),D0
00003876  4880      6300          ext.w     D0
00003878  48C0      6301          ext.l     D0
0000387A  B880      6302          cmp.l     D0,D4
0000387C  6602      6303          bne.s     @vsscanf_scanselect_19
0000387E  6006      6304          bra.s     @vsscanf_scanselect_10
                    6305   @vsscanf_scanselect_19:
00003880  5282      6306          addq.l    #1,D2
00003882  6000 FF62 6307          bra       @vsscanf_scanselect_8
                    6308   @vsscanf_scanselect_10:
00003886  4A82      6309          tst.l     D2
00003888  6712      6310          beq.s     @vsscanf_scanselect_23
0000388A  2043      6311          move.l    D3,A0
0000388C  1030 2800 6312          move.b    0(A0,D2.L),D0
00003890  4880      6313          ext.w     D0
00003892  48C0      6314          ext.l     D0
00003894  0C80 0000 6315          cmp.l     #93,D0
00003898  005D      
0000389A  6702      6316          beq.s     @vsscanf_scanselect_21
                    6317   @vsscanf_scanselect_23:
0000389C  7A01      6318          moveq     #1,D5
                    6319   @vsscanf_scanselect_21:
0000389E  200A      6320          move.l    A2,D0
000038A0  6712      6321          beq.s     @vsscanf_scanselect_24
000038A2  4A85      6322          tst.l     D5
000038A4  660C      6323          bne.s     @vsscanf_scanselect_26
000038A6  4A87      6324          tst.l     D7
000038A8  6606      6325          bne.s     @vsscanf_scanselect_28
000038AA  2046      6326          move.l    D6,A0
000038AC  5286      6327          addq.l    #1,D6
000038AE  1084      6328          move.b    D4,(A0)
                    6329   @vsscanf_scanselect_28:
000038B0  6014      6330          bra.s     @vsscanf_scanselect_4
                    6331   @vsscanf_scanselect_26:
000038B2  6016      6332          bra.s     @vsscanf_scanselect_5
                    6333   @vsscanf_scanselect_24:
000038B4  4A85      6334          tst.l     D5
000038B6  670C      6335          beq.s     @vsscanf_scanselect_30
000038B8  4A87      6336          tst.l     D7
000038BA  6606      6337          bne.s     @vsscanf_scanselect_32
000038BC  2046      6338          move.l    D6,A0
000038BE  5286      6339          addq.l    #1,D6
000038C0  1084      6340          move.b    D4,(A0)
                    6341   @vsscanf_scanselect_32:
000038C2  6002      6342          bra.s     @vsscanf_scanselect_4
                    6343   @vsscanf_scanselect_30:
000038C4  6004      6344          bra.s     @vsscanf_scanselect_5
                    6345   @vsscanf_scanselect_4:
000038C6  6000 FEEE 6346          bra       @vsscanf_scanselect_2
                    6347   @vsscanf_scanselect_5:
000038CA  0C84 FFFF 6348          cmp.l     #-1,D4
000038CE  FFFF      
000038D0  6712      6349          beq.s     @vsscanf_scanselect_34
000038D2  2F04      6350          move.l    D4,-(A7)
000038D4  2F2E 0008 6351          move.l    8(A6),-(A7)
000038D8  6100 FE14 6352          bsr       @vsscanf_scanputback
000038DC  504F      6353          addq.w    #8,A7
000038DE  206E 001C 6354          move.l    28(A6),A0
000038E2  5390      6355          subq.l    #1,(A0)
                    6356   @vsscanf_scanselect_34:
000038E4  4A87      6357          tst.l     D7
000038E6  6604      6358          bne.s     @vsscanf_scanselect_36
000038E8  2046      6359          move.l    D6,A0
000038EA  4210      6360          clr.b     (A0)
                    6361   @vsscanf_scanselect_36:
000038EC  5283      6362          addq.l    #1,D3
000038EE  2043      6363          move.l    D3,A0
000038F0  1010      6364          move.b    (A0),D0
000038F2  4880      6365          ext.w     D0
000038F4  48C0      6366          ext.l     D0
000038F6  0C80 0000 6367          cmp.l     #93,D0
000038FA  005D      
000038FC  6702      6368          beq.s     @vsscanf_scanselect_40
000038FE  60EC      6369          bra       @vsscanf_scanselect_36
                    6370   @vsscanf_scanselect_40:
00003900  5283      6371          addq.l    #1,D3
00003902  2003      6372          move.l    D3,D0
00003904  4CDF 04FC 6373          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003908  4E5E      6374          unlk      A6
0000390A  4E75      6375          rts
                    6376   _scanflush:
0000390C  41F9 0B00 6377          lea       @vsscanf_buf,A0
00003910  0546      
00003912  23C8 0000 6378          move.l    A0,@vsscanf_bufx
00003916  5CC2      
00003918  4239 0B00 6379          clr.b     @vsscanf_buf
0000391C  0546      
0000391E  4878 FFFF 6380          pea       -1
00003922  6100 0DAA 6381          bsr       _ungetch
00003926  584F      6382          addq.w    #4,A7
00003928  4E75      6383          rts
                    6384   _vsscanf:
0000392A  4E56 FF88 6385          link      A6,#-120
0000392E  48E7 3F3C 6386          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003932  47F8 3680 6387          lea       @vsscanf_scanread,A3
00003936  4AAE 0008 6388          tst.l     8(A6)
0000393A  6706      6389          beq.s     vsscanf_1
0000393C  41EE 0008 6390          lea       8(A6),A0
00003940  6004      6391          bra.s     vsscanf_2
                    6392   vsscanf_1:
00003942  4280      6393          clr.l     D0
00003944  2040      6394          move.l    D0,A0
                    6395   vsscanf_2:
00003946  2A08      6396          move.l    A0,D5
00003948  42AE FFE4 6397          clr.l     -28(A6)
0000394C  4284      6398          clr.l     D4
                    6399   vsscanf_3:
0000394E  206E 000C 6400          move.l    12(A6),A0
00003952  52AE 000C 6401          addq.l    #1,12(A6)
00003956  1010      6402          move.b    (A0),D0
00003958  4880      6403          ext.w     D0
0000395A  48C0      6404          ext.l     D0
0000395C  2600      6405          move.l    D0,D3
0000395E  6700 05AC 6406          beq       vsscanf_5
00003962  4286      6407          clr.l     D6
00003964  387C 0000 6408          move.w    #0,A4
00003968  0C83 0000 6409          cmp.l     #32,D3
0000396C  0020      
0000396E  6712      6410          beq.s     vsscanf_8
00003970  0C83 0000 6411          cmp.l     #9,D3
00003974  0009      
00003976  670A      6412          beq.s     vsscanf_8
00003978  0C83 0000 6413          cmp.l     #10,D3
0000397C  000A      
0000397E  6600 0048 6414          bne       vsscanf_6
                    6415   vsscanf_8:
00003982  2F05      6416          move.l    D5,-(A7)
00003984  4E93      6417          jsr       (A3)
00003986  584F      6418          addq.w    #4,A7
00003988  2400      6419          move.l    D0,D2
0000398A  52AE FFE4 6420          addq.l    #1,-28(A6)
0000398E  0C82 FFFF 6421          cmp.l     #-1,D2
00003992  FFFF      
00003994  660E      6422          bne.s     vsscanf_11
00003996  4A84      6423          tst.l     D4
00003998  6704      6424          beq.s     vsscanf_13
0000399A  2004      6425          move.l    D4,D0
0000399C  6002      6426          bra.s     vsscanf_14
                    6427   vsscanf_13:
0000399E  70FF      6428          moveq     #-1,D0
                    6429   vsscanf_14:
000039A0  6000 056C 6430          bra       vsscanf_15
                    6431   vsscanf_11:
000039A4  2042      6432          move.l    D2,A0
000039A6  43F9 0000 6433          lea       __ctype,A1
000039AA  5CC8      
000039AC  1030 9801 6434          move.b    1(A0,A1.L),D0
000039B0  C03C 0010 6435          and.b     #16,D0
000039B4  66CC      6436          bne       vsscanf_8
000039B6  53AE FFE4 6437          subq.l    #1,-28(A6)
000039BA  2F02      6438          move.l    D2,-(A7)
000039BC  2F05      6439          move.l    D5,-(A7)
000039BE  6100 FD2E 6440          bsr       @vsscanf_scanputback
000039C2  504F      6441          addq.w    #8,A7
000039C4  6000 0542 6442          bra       vsscanf_139
                    6443   vsscanf_6:
000039C8  0C83 0000 6444          cmp.l     #37,D3
000039CC  0025      
000039CE  6600 0502 6445          bne       vsscanf_127
000039D2  206E 000C 6446          move.l    12(A6),A0
000039D6  52AE 000C 6447          addq.l    #1,12(A6)
000039DA  1010      6448          move.b    (A0),D0
000039DC  4880      6449          ext.w     D0
000039DE  48C0      6450          ext.l     D0
000039E0  2600      6451          move.l    D0,D3
000039E2  42AE FFEC 6452          clr.l     -20(A6)
000039E6  4286      6453          clr.l     D6
000039E8  42AE FFE8 6454          clr.l     -24(A6)
000039EC  347C 7FFF 6455          move.w    #32767,A2
000039F0  0C83 0000 6456          cmp.l     #42,D3
000039F4  002A      
000039F6  6612      6457          bne.s     vsscanf_18
000039F8  7C01      6458          moveq     #1,D6
000039FA  206E 000C 6459          move.l    12(A6),A0
000039FE  52AE 000C 6460          addq.l    #1,12(A6)
00003A02  1010      6461          move.b    (A0),D0
00003A04  4880      6462          ext.w     D0
00003A06  48C0      6463          ext.l     D0
00003A08  2600      6464          move.l    D0,D3
                    6465   vsscanf_18:
00003A0A  2043      6466          move.l    D3,A0
00003A0C  43F9 0000 6467          lea       __ctype,A1
00003A10  5CC8      
00003A12  1030 9801 6468          move.b    1(A0,A1.L),D0
00003A16  C03C 0004 6469          and.b     #4,D0
00003A1A  6700 004E 6470          beq       vsscanf_24
00003A1E  2003      6471          move.l    D3,D0
00003A20  0480 0000 6472          sub.l     #48,D0
00003A24  0030      
00003A26  2440      6473          move.l    D0,A2
                    6474   vsscanf_22:
00003A28  206E 000C 6475          move.l    12(A6),A0
00003A2C  52AE 000C 6476          addq.l    #1,12(A6)
00003A30  1010      6477          move.b    (A0),D0
00003A32  4880      6478          ext.w     D0
00003A34  48C0      6479          ext.l     D0
00003A36  2600      6480          move.l    D0,D3
00003A38  2040      6481          move.l    D0,A0
00003A3A  43F9 0000 6482          lea       __ctype,A1
00003A3E  5CC8      
00003A40  1030 9801 6483          move.b    1(A0,A1.L),D0
00003A44  C0BC 0000 6484          and.l     #255,D0
00003A48  00FF      
00003A4A  C0BC 0000 6485          and.l     #4,D0
00003A4E  0004      
00003A50  6718      6486          beq.s     vsscanf_24
00003A52  70D0      6487          moveq     #-48,D0
00003A54  2F0A      6488          move.l    A2,-(A7)
00003A56  4878 000A 6489          pea       10
00003A5A  6100 FA70 6490          bsr       LMUL
00003A5E  2217      6491          move.l    (A7),D1
00003A60  504F      6492          addq.w    #8,A7
00003A62  D283      6493          add.l     D3,D1
00003A64  D081      6494          add.l     D1,D0
00003A66  2440      6495          move.l    D0,A2
00003A68  60BE      6496          bra       vsscanf_22
                    6497   vsscanf_24:
00003A6A  0C83 0000 6498          cmp.l     #108,D3
00003A6E  006C      
00003A70  6708      6499          beq.s     vsscanf_27
00003A72  0C83 0000 6500          cmp.l     #76,D3
00003A76  004C      
00003A78  661A      6501          bne.s     vsscanf_25
                    6502   vsscanf_27:
00003A7A  2D7C 0000 6503          move.l    #1,-24(A6)
00003A7E  0001 FFE8 
00003A82  206E 000C 6504          move.l    12(A6),A0
00003A86  52AE 000C 6505          addq.l    #1,12(A6)
00003A8A  1010      6506          move.b    (A0),D0
00003A8C  4880      6507          ext.w     D0
00003A8E  48C0      6508          ext.l     D0
00003A90  2600      6509          move.l    D0,D3
00003A92  6020      6510          bra.s     vsscanf_28
                    6511   vsscanf_25:
00003A94  0C83 0000 6512          cmp.l     #104,D3
00003A98  0068      
00003A9A  6618      6513          bne.s     vsscanf_28
00003A9C  2D7C 0000 6514          move.l    #1,-20(A6)
00003AA0  0001 FFEC 
00003AA4  206E 000C 6515          move.l    12(A6),A0
00003AA8  52AE 000C 6516          addq.l    #1,12(A6)
00003AAC  1010      6517          move.b    (A0),D0
00003AAE  4880      6518          ext.w     D0
00003AB0  48C0      6519          ext.l     D0
00003AB2  2600      6520          move.l    D0,D3
                    6521   vsscanf_28:
00003AB4  0C83 0000 6522          cmp.l     #91,D3
00003AB8  005B      
00003ABA  6600 0036 6523          bne       vsscanf_30
00003ABE  4A86      6524          tst.l     D6
00003AC0  660A      6525          bne.s     vsscanf_32
00003AC2  206E 0010 6526          move.l    16(A6),A0
00003AC6  58AE 0010 6527          addq.l    #4,16(A6)
00003ACA  2E10      6528          move.l    (A0),D7
                    6529   vsscanf_32:
00003ACC  486E FFE4 6530          pea       -28(A6)
00003AD0  2F07      6531          move.l    D7,-(A7)
00003AD2  2F06      6532          move.l    D6,-(A7)
00003AD4  2F0A      6533          move.l    A2,-(A7)
00003AD6  2F2E 000C 6534          move.l    12(A6),-(A7)
00003ADA  2F05      6535          move.l    D5,-(A7)
00003ADC  6100 FCA8 6536          bsr       @vsscanf_scanselect
00003AE0  DEFC 0018 6537          add.w     #24,A7
00003AE4  2D40 000C 6538          move.l    D0,12(A6)
00003AE8  4A86      6539          tst.l     D6
00003AEA  6602      6540          bne.s     vsscanf_34
00003AEC  5284      6541          addq.l    #1,D4
                    6542   vsscanf_34:
00003AEE  6000 0418 6543          bra       vsscanf_139
                    6544   vsscanf_30:
00003AF2  0C83 0000 6545          cmp.l     #110,D3
00003AF6  006E      
00003AF8  661A      6546          bne.s     vsscanf_36
00003AFA  4A86      6547          tst.l     D6
00003AFC  6612      6548          bne.s     vsscanf_38
00003AFE  206E 0010 6549          move.l    16(A6),A0
00003B02  58AE 0010 6550          addq.l    #4,16(A6)
00003B06  2E10      6551          move.l    (A0),D7
00003B08  2047      6552          move.l    D7,A0
00003B0A  20AE FFE4 6553          move.l    -28(A6),(A0)
00003B0E  5284      6554          addq.l    #1,D4
                    6555   vsscanf_38:
00003B10  6000 03F6 6556          bra       vsscanf_139
                    6557   vsscanf_36:
00003B14  0C83 0000 6558          cmp.l     #115,D3
00003B18  0073      
00003B1A  6600 00AC 6559          bne       vsscanf_40
00003B1E  486E FFE4 6560          pea       -28(A6)
00003B22  2F05      6561          move.l    D5,-(A7)
00003B24  6100 FC2A 6562          bsr       @vsscanf_scanspace
00003B28  504F      6563          addq.w    #8,A7
00003B2A  2400      6564          move.l    D0,D2
00003B2C  4A86      6565          tst.l     D6
00003B2E  660A      6566          bne.s     vsscanf_42
00003B30  206E 0010 6567          move.l    16(A6),A0
00003B34  58AE 0010 6568          addq.l    #4,16(A6)
00003B38  2E10      6569          move.l    (A0),D7
                    6570   vsscanf_42:
00003B3A  52AE FFE4 6571          addq.l    #1,-28(A6)
                    6572   vsscanf_44:
00003B3E  200A      6573          move.l    A2,D0
00003B40  534A      6574          subq.w    #1,A2
00003B42  4A80      6575          tst.l     D0
00003B44  6700 0038 6576          beq       vsscanf_46
00003B48  2042      6577          move.l    D2,A0
00003B4A  43F9 0000 6578          lea       __ctype,A1
00003B4E  5CC8      
00003B50  1030 9801 6579          move.b    1(A0,A1.L),D0
00003B54  C03C 0010 6580          and.b     #16,D0
00003B58  6624      6581          bne.s     vsscanf_46
00003B5A  0C82 FFFF 6582          cmp.l     #-1,D2
00003B5E  FFFF      
00003B60  671C      6583          beq.s     vsscanf_46
00003B62  387C 0001 6584          move.w    #1,A4
00003B66  4A86      6585          tst.l     D6
00003B68  6606      6586          bne.s     vsscanf_47
00003B6A  2047      6587          move.l    D7,A0
00003B6C  5287      6588          addq.l    #1,D7
00003B6E  1082      6589          move.b    D2,(A0)
                    6590   vsscanf_47:
00003B70  2F05      6591          move.l    D5,-(A7)
00003B72  4E93      6592          jsr       (A3)
00003B74  584F      6593          addq.w    #4,A7
00003B76  2400      6594          move.l    D0,D2
00003B78  52AE FFE4 6595          addq.l    #1,-28(A6)
00003B7C  60C0      6596          bra       vsscanf_44
                    6597   vsscanf_46:
00003B7E  4A86      6598          tst.l     D6
00003B80  660A      6599          bne.s     vsscanf_51
00003B82  2047      6600          move.l    D7,A0
00003B84  4210      6601          clr.b     (A0)
00003B86  200C      6602          move.l    A4,D0
00003B88  6702      6603          beq.s     vsscanf_51
00003B8A  5284      6604          addq.l    #1,D4
                    6605   vsscanf_51:
00003B8C  0C82 FFFF 6606          cmp.l     #-1,D2
00003B90  FFFF      
00003B92  6708      6607          beq.s     vsscanf_55
00003B94  4A86      6608          tst.l     D6
00003B96  661E      6609          bne.s     vsscanf_53
00003B98  200C      6610          move.l    A4,D0
00003B9A  661A      6611          bne.s     vsscanf_53
                    6612   vsscanf_55:
00003B9C  4A84      6613          tst.l     D4
00003B9E  6704      6614          beq.s     vsscanf_56
00003BA0  2004      6615          move.l    D4,D0
00003BA2  600E      6616          bra.s     vsscanf_59
                    6617   vsscanf_56:
00003BA4  0C82 FFFF 6618          cmp.l     #-1,D2
00003BA8  FFFF      
00003BAA  6604      6619          bne.s     vsscanf_58
00003BAC  70FF      6620          moveq     #-1,D0
00003BAE  6002      6621          bra.s     vsscanf_59
                    6622   vsscanf_58:
00003BB0  2004      6623          move.l    D4,D0
                    6624   vsscanf_59:
00003BB2  6000 035A 6625          bra       vsscanf_15
                    6626   vsscanf_53:
00003BB6  53AE FFE4 6627          subq.l    #1,-28(A6)
00003BBA  2F02      6628          move.l    D2,-(A7)
00003BBC  2F05      6629          move.l    D5,-(A7)
00003BBE  6100 FB2E 6630          bsr       @vsscanf_scanputback
00003BC2  504F      6631          addq.w    #8,A7
00003BC4  6000 0342 6632          bra       vsscanf_139
                    6633   vsscanf_40:
00003BC8  0C83 0000 6634          cmp.l     #99,D3
00003BCC  0063      
00003BCE  6600 008E 6635          bne       vsscanf_60
00003BD2  4A86      6636          tst.l     D6
00003BD4  660A      6637          bne.s     vsscanf_62
00003BD6  206E 0010 6638          move.l    16(A6),A0
00003BDA  58AE 0010 6639          addq.l    #4,16(A6)
00003BDE  2E10      6640          move.l    (A0),D7
                    6641   vsscanf_62:
00003BE0  2F05      6642          move.l    D5,-(A7)
00003BE2  4E93      6643          jsr       (A3)
00003BE4  584F      6644          addq.w    #4,A7
00003BE6  2400      6645          move.l    D0,D2
00003BE8  52AE FFE4 6646          addq.l    #1,-28(A6)
00003BEC  200A      6647          move.l    A2,D0
00003BEE  0C80 0000 6648          cmp.l     #32767,D0
00003BF2  7FFF      
00003BF4  6604      6649          bne.s     vsscanf_64
00003BF6  347C 0001 6650          move.w    #1,A2
                    6651   vsscanf_64:
00003BFA  0C82 FFFF 6652          cmp.l     #-1,D2
00003BFE  FFFF      
00003C00  6606      6653          bne.s     vsscanf_66
00003C02  4A86      6654          tst.l     D6
00003C04  6602      6655          bne.s     vsscanf_66
00003C06  5384      6656          subq.l    #1,D4
                    6657   vsscanf_66:
00003C08  200A      6658          move.l    A2,D0
00003C0A  534A      6659          subq.w    #1,A2
00003C0C  4A80      6660          tst.l     D0
00003C0E  6720      6661          beq.s     vsscanf_70
00003C10  0C82 FFFF 6662          cmp.l     #-1,D2
00003C14  FFFF      
00003C16  6718      6663          beq.s     vsscanf_70
00003C18  4A86      6664          tst.l     D6
00003C1A  6606      6665          bne.s     vsscanf_71
00003C1C  2047      6666          move.l    D7,A0
00003C1E  5287      6667          addq.l    #1,D7
00003C20  1082      6668          move.b    D2,(A0)
                    6669   vsscanf_71:
00003C22  2F05      6670          move.l    D5,-(A7)
00003C24  4E93      6671          jsr       (A3)
00003C26  584F      6672          addq.w    #4,A7
00003C28  2400      6673          move.l    D0,D2
00003C2A  52AE FFE4 6674          addq.l    #1,-28(A6)
00003C2E  60D8      6675          bra       vsscanf_66
                    6676   vsscanf_70:
00003C30  0C82 FFFF 6677          cmp.l     #-1,D2
00003C34  FFFF      
00003C36  660E      6678          bne.s     vsscanf_73
00003C38  4A84      6679          tst.l     D4
00003C3A  6704      6680          beq.s     vsscanf_75
00003C3C  2004      6681          move.l    D4,D0
00003C3E  6002      6682          bra.s     vsscanf_76
                    6683   vsscanf_75:
00003C40  70FF      6684          moveq     #-1,D0
                    6685   vsscanf_76:
00003C42  6000 02CA 6686          bra       vsscanf_15
                    6687   vsscanf_73:
00003C46  4A86      6688          tst.l     D6
00003C48  6602      6689          bne.s     vsscanf_77
00003C4A  5284      6690          addq.l    #1,D4
                    6691   vsscanf_77:
00003C4C  53AE FFE4 6692          subq.l    #1,-28(A6)
00003C50  2F02      6693          move.l    D2,-(A7)
00003C52  2F05      6694          move.l    D5,-(A7)
00003C54  6100 FA98 6695          bsr       @vsscanf_scanputback
00003C58  504F      6696          addq.w    #8,A7
00003C5A  6000 02AC 6697          bra       vsscanf_139
                    6698   vsscanf_60:
00003C5E  0C83 0000 6699          cmp.l     #105,D3
00003C62  0069      
00003C64  6600 0060 6700          bne       vsscanf_82
00003C68  486E FFE4 6701          pea       -28(A6)
00003C6C  2F05      6702          move.l    D5,-(A7)
00003C6E  6100 FAE0 6703          bsr       @vsscanf_scanspace
00003C72  504F      6704          addq.w    #8,A7
00003C74  2400      6705          move.l    D0,D2
00003C76  0C82 0000 6706          cmp.l     #48,D2
00003C7A  0030      
00003C7C  6600 0038 6707          bne       vsscanf_81
00003C80  387C 0001 6708          move.w    #1,A4
00003C84  2F05      6709          move.l    D5,-(A7)
00003C86  4E93      6710          jsr       (A3)
00003C88  584F      6711          addq.w    #4,A7
00003C8A  2400      6712          move.l    D0,D2
00003C8C  2F02      6713          move.l    D2,-(A7)
00003C8E  6100 F936 6714          bsr       _tolower
00003C92  584F      6715          addq.w    #4,A7
00003C94  0C80 0000 6716          cmp.l     #120,D0
00003C98  0078      
00003C9A  6604      6717          bne.s     vsscanf_83
00003C9C  7678      6718          moveq     #120,D3
00003C9E  6010      6719          bra.s     vsscanf_84
                    6720   vsscanf_83:
00003CA0  53AE FFE4 6721          subq.l    #1,-28(A6)
00003CA4  2F02      6722          move.l    D2,-(A7)
00003CA6  2F05      6723          move.l    D5,-(A7)
00003CA8  6100 FA44 6724          bsr       @vsscanf_scanputback
00003CAC  504F      6725          addq.w    #8,A7
00003CAE  766F      6726          moveq     #111,D3
                    6727   vsscanf_84:
00003CB0  52AE FFE4 6728          addq.l    #1,-28(A6)
00003CB4  6010      6729          bra.s     vsscanf_82
                    6730   vsscanf_81:
00003CB6  53AE FFE4 6731          subq.l    #1,-28(A6)
00003CBA  2F02      6732          move.l    D2,-(A7)
00003CBC  2F05      6733          move.l    D5,-(A7)
00003CBE  6100 FA2E 6734          bsr       @vsscanf_scanputback
00003CC2  504F      6735          addq.w    #8,A7
00003CC4  7664      6736          moveq     #100,D3
                    6737   vsscanf_82:
00003CC6  0C83 0000 6738          cmp.l     #100,D3
00003CCA  0064      
00003CCC  671A      6739          beq.s     vsscanf_87
00003CCE  0C83 0000 6740          cmp.l     #117,D3
00003CD2  0075      
00003CD4  6712      6741          beq.s     vsscanf_87
00003CD6  0C83 0000 6742          cmp.l     #120,D3
00003CDA  0078      
00003CDC  670A      6743          beq.s     vsscanf_87
00003CDE  0C83 0000 6744          cmp.l     #111,D3
00003CE2  006F      
00003CE4  6600 01A4 6745          bne       vsscanf_85
                    6746   vsscanf_87:
00003CE8  486E FFE4 6747          pea       -28(A6)
00003CEC  2F05      6748          move.l    D5,-(A7)
00003CEE  6100 FA60 6749          bsr       @vsscanf_scanspace
00003CF2  504F      6750          addq.w    #8,A7
00003CF4  2400      6751          move.l    D0,D2
00003CF6  2D7C 0000 6752          move.l    #10,-4(A6)
00003CFA  000A FFFC 
00003CFE  0C83 0000 6753          cmp.l     #120,D3
00003D02  0078      
00003D04  6608      6754          bne.s     vsscanf_88
00003D06  2D7C 0000 6755          move.l    #16,-4(A6)
00003D0A  0010 FFFC 
                    6756   vsscanf_88:
00003D0E  0C83 0000 6757          cmp.l     #111,D3
00003D12  006F      
00003D14  6608      6758          bne.s     vsscanf_90
00003D16  2D7C 0000 6759          move.l    #8,-4(A6)
00003D1A  0008 FFFC 
                    6760   vsscanf_90:
00003D1E  4A86      6761          tst.l     D6
00003D20  660A      6762          bne.s     vsscanf_92
00003D22  206E 0010 6763          move.l    16(A6),A0
00003D26  58AE 0010 6764          addq.l    #4,16(A6)
00003D2A  2E10      6765          move.l    (A0),D7
                    6766   vsscanf_92:
00003D2C  42AE FFE0 6767          clr.l     -32(A6)
00003D30  52AE FFE4 6768          addq.l    #1,-28(A6)
00003D34  0C83 0000 6769          cmp.l     #117,D3
00003D38  0075      
00003D3A  6720      6770          beq.s     vsscanf_94
00003D3C  0C82 0000 6771          cmp.l     #45,D2
00003D40  002D      
00003D42  6618      6772          bne.s     vsscanf_94
00003D44  2F05      6773          move.l    D5,-(A7)
00003D46  4E93      6774          jsr       (A3)
00003D48  584F      6775          addq.w    #4,A7
00003D4A  2400      6776          move.l    D0,D2
00003D4C  52AE FFE4 6777          addq.l    #1,-28(A6)
00003D50  2D7C 0000 6778          move.l    #1,-32(A6)
00003D54  0001 FFE0 
00003D58  387C 0001 6779          move.w    #1,A4
                    6780   vsscanf_94:
00003D5C  3A7C 0000 6781          move.w    #0,A5
00003D60  0C82 FFFF 6782          cmp.l     #-1,D2
00003D64  FFFF      
00003D66  660E      6783          bne.s     vsscanf_96
00003D68  4A84      6784          tst.l     D4
00003D6A  6704      6785          beq.s     vsscanf_98
00003D6C  2004      6786          move.l    D4,D0
00003D6E  6002      6787          bra.s     vsscanf_99
                    6788   vsscanf_98:
00003D70  70FF      6789          moveq     #-1,D0
                    6790   vsscanf_99:
00003D72  6000 019A 6791          bra       vsscanf_15
                    6792   vsscanf_96:
00003D76  200A      6793          move.l    A2,D0
00003D78  534A      6794          subq.w    #1,A2
00003D7A  4A80      6795          tst.l     D0
00003D7C  6700 0090 6796          beq       vsscanf_102
00003D80  0C83 0000 6797          cmp.l     #120,D3
00003D84  0078      
00003D86  6620      6798          bne.s     vsscanf_104
00003D88  2F02      6799          move.l    D2,-(A7)
00003D8A  6100 F8C8 6800          bsr       _toupper
00003D8E  584F      6801          addq.w    #4,A7
00003D90  0C80 0000 6802          cmp.l     #65,D0
00003D94  0041      
00003D96  6D10      6803          blt.s     vsscanf_104
00003D98  2F02      6804          move.l    D2,-(A7)
00003D9A  6100 F8B8 6805          bsr       _toupper
00003D9E  584F      6806          addq.w    #4,A7
00003DA0  0C80 0000 6807          cmp.l     #70,D0
00003DA4  0046      
00003DA6  6F14      6808          ble.s     vsscanf_103
                    6809   vsscanf_104:
00003DA8  2042      6810          move.l    D2,A0
00003DAA  43F9 0000 6811          lea       __ctype,A1
00003DAE  5CC8      
00003DB0  1030 9801 6812          move.b    1(A0,A1.L),D0
00003DB4  C03C 0004 6813          and.b     #4,D0
00003DB8  6700 0054 6814          beq       vsscanf_102
                    6815   vsscanf_103:
00003DBC  2042      6816          move.l    D2,A0
00003DBE  43F9 0000 6817          lea       __ctype,A1
00003DC2  5CC8      
00003DC4  1030 9801 6818          move.b    1(A0,A1.L),D0
00003DC8  C03C 0004 6819          and.b     #4,D0
00003DCC  6614      6820          bne.s     vsscanf_105
00003DCE  70F9      6821          moveq     #-7,D0
00003DD0  2F00      6822          move.l    D0,-(A7)
00003DD2  2F02      6823          move.l    D2,-(A7)
00003DD4  6100 F87E 6824          bsr       _toupper
00003DD8  584F      6825          addq.w    #4,A7
00003DDA  2200      6826          move.l    D0,D1
00003DDC  201F      6827          move.l    (A7)+,D0
00003DDE  D081      6828          add.l     D1,D0
00003DE0  2400      6829          move.l    D0,D2
                    6830   vsscanf_105:
00003DE2  2F0D      6831          move.l    A5,-(A7)
00003DE4  2F2E FFFC 6832          move.l    -4(A6),-(A7)
00003DE8  6100 F6E2 6833          bsr       LMUL
00003DEC  2017      6834          move.l    (A7),D0
00003DEE  504F      6835          addq.w    #8,A7
00003DF0  D082      6836          add.l     D2,D0
00003DF2  0480 0000 6837          sub.l     #48,D0
00003DF6  0030      
00003DF8  2A40      6838          move.l    D0,A5
00003DFA  2F05      6839          move.l    D5,-(A7)
00003DFC  4E93      6840          jsr       (A3)
00003DFE  584F      6841          addq.w    #4,A7
00003E00  2400      6842          move.l    D0,D2
00003E02  52AE FFE4 6843          addq.l    #1,-28(A6)
00003E06  387C 0001 6844          move.w    #1,A4
00003E0A  6000 FF6A 6845          bra       vsscanf_96
                    6846   vsscanf_102:
00003E0E  0C82 FFFF 6847          cmp.l     #-1,D2
00003E12  FFFF      
00003E14  671A      6848          beq.s     vsscanf_107
00003E16  2F02      6849          move.l    D2,-(A7)
00003E18  2F05      6850          move.l    D5,-(A7)
00003E1A  6100 F8D2 6851          bsr       @vsscanf_scanputback
00003E1E  504F      6852          addq.w    #8,A7
00003E20  53AE FFE4 6853          subq.l    #1,-28(A6)
00003E24  200C      6854          move.l    A4,D0
00003E26  6606      6855          bne.s     vsscanf_109
00003E28  2004      6856          move.l    D4,D0
00003E2A  6000 00E2 6857          bra       vsscanf_15
                    6858   vsscanf_109:
00003E2E  6012      6859          bra.s     vsscanf_111
                    6860   vsscanf_107:
00003E30  200C      6861          move.l    A4,D0
00003E32  660E      6862          bne.s     vsscanf_111
00003E34  4A84      6863          tst.l     D4
00003E36  6704      6864          beq.s     vsscanf_113
00003E38  2004      6865          move.l    D4,D0
00003E3A  6002      6866          bra.s     vsscanf_114
                    6867   vsscanf_113:
00003E3C  70FF      6868          moveq     #-1,D0
                    6869   vsscanf_114:
00003E3E  6000 00CE 6870          bra       vsscanf_15
                    6871   vsscanf_111:
00003E42  4AAE FFE0 6872          tst.l     -32(A6)
00003E46  6706      6873          beq.s     vsscanf_115
00003E48  200D      6874          move.l    A5,D0
00003E4A  4480      6875          neg.l     D0
00003E4C  2A40      6876          move.l    D0,A5
                    6877   vsscanf_115:
00003E4E  4A86      6878          tst.l     D6
00003E50  661E      6879          bne.s     vsscanf_117
00003E52  4AAE FFE8 6880          tst.l     -24(A6)
00003E56  6706      6881          beq.s     vsscanf_119
00003E58  2047      6882          move.l    D7,A0
00003E5A  208D      6883          move.l    A5,(A0)
00003E5C  6010      6884          bra.s     vsscanf_122
                    6885   vsscanf_119:
00003E5E  4AAE FFEC 6886          tst.l     -20(A6)
00003E62  6706      6887          beq.s     vsscanf_121
00003E64  2047      6888          move.l    D7,A0
00003E66  308D      6889          move.w    A5,(A0)
00003E68  6004      6890          bra.s     vsscanf_122
                    6891   vsscanf_121:
00003E6A  2047      6892          move.l    D7,A0
00003E6C  208D      6893          move.l    A5,(A0)
                    6894   vsscanf_122:
00003E6E  5284      6895          addq.l    #1,D4
                    6896   vsscanf_117:
00003E70  0C82 FFFF 6897          cmp.l     #-1,D2
00003E74  FFFF      
00003E76  660E      6898          bne.s     vsscanf_123
00003E78  4A84      6899          tst.l     D4
00003E7A  6704      6900          beq.s     vsscanf_125
00003E7C  2004      6901          move.l    D4,D0
00003E7E  6002      6902          bra.s     vsscanf_126
                    6903   vsscanf_125:
00003E80  70FF      6904          moveq     #-1,D0
                    6905   vsscanf_126:
00003E82  6000 008A 6906          bra       vsscanf_15
                    6907   vsscanf_123:
00003E86  6000 0080 6908          bra       vsscanf_139
                    6909   vsscanf_85:
00003E8A  0C83 0000 6910          cmp.l     #37,D3
00003E8E  0025      
00003E90  6600 0040 6911          bne       vsscanf_127
00003E94  2F05      6912          move.l    D5,-(A7)
00003E96  4E93      6913          jsr       (A3)
00003E98  584F      6914          addq.w    #4,A7
00003E9A  2400      6915          move.l    D0,D2
00003E9C  0C82 FFFF 6916          cmp.l     #-1,D2
00003EA0  FFFF      
00003EA2  660E      6917          bne.s     vsscanf_129
00003EA4  4A84      6918          tst.l     D4
00003EA6  6704      6919          beq.s     vsscanf_131
00003EA8  2004      6920          move.l    D4,D0
00003EAA  6002      6921          bra.s     vsscanf_132
                    6922   vsscanf_131:
00003EAC  70FF      6923          moveq     #-1,D0
                    6924   vsscanf_132:
00003EAE  6000 005E 6925          bra       vsscanf_15
                    6926   vsscanf_129:
00003EB2  52AE FFE4 6927          addq.l    #1,-28(A6)
00003EB6  B483      6928          cmp.l     D3,D2
00003EB8  6714      6929          beq.s     vsscanf_133
00003EBA  2F02      6930          move.l    D2,-(A7)
00003EBC  2F05      6931          move.l    D5,-(A7)
00003EBE  6100 F82E 6932          bsr       @vsscanf_scanputback
00003EC2  504F      6933          addq.w    #8,A7
00003EC4  53AE FFE4 6934          subq.l    #1,-28(A6)
00003EC8  2004      6935          move.l    D4,D0
00003ECA  6000 0042 6936          bra       vsscanf_15
                    6937   vsscanf_133:
00003ECE  6000 0038 6938          bra       vsscanf_139
                    6939   vsscanf_127:
00003ED2  2F05      6940          move.l    D5,-(A7)
00003ED4  4E93      6941          jsr       (A3)
00003ED6  584F      6942          addq.w    #4,A7
00003ED8  2400      6943          move.l    D0,D2
00003EDA  52AE FFE4 6944          addq.l    #1,-28(A6)
00003EDE  0C82 FFFF 6945          cmp.l     #-1,D2
00003EE2  FFFF      
00003EE4  660C      6946          bne.s     vsscanf_135
00003EE6  4A84      6947          tst.l     D4
00003EE8  6704      6948          beq.s     vsscanf_137
00003EEA  2004      6949          move.l    D4,D0
00003EEC  6002      6950          bra.s     vsscanf_138
                    6951   vsscanf_137:
00003EEE  70FF      6952          moveq     #-1,D0
                    6953   vsscanf_138:
00003EF0  601C      6954          bra.s     vsscanf_15
                    6955   vsscanf_135:
00003EF2  B483      6956          cmp.l     D3,D2
00003EF4  6712      6957          beq.s     vsscanf_139
00003EF6  2F02      6958          move.l    D2,-(A7)
00003EF8  2F05      6959          move.l    D5,-(A7)
00003EFA  6100 F7F2 6960          bsr       @vsscanf_scanputback
00003EFE  504F      6961          addq.w    #8,A7
00003F00  53AE FFE4 6962          subq.l    #1,-28(A6)
00003F04  2004      6963          move.l    D4,D0
00003F06  6006      6964          bra.s     vsscanf_15
                    6965   vsscanf_139:
00003F08  6000 FA44 6966          bra       vsscanf_3
                    6967   vsscanf_5:
00003F0C  2004      6968          move.l    D4,D0
                    6969   vsscanf_15:
00003F0E  4CDF 3CFC 6970          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003F12  4E5E      6971          unlk      A6
00003F14  4E75      6972          rts
                    6973   _printf:
00003F16  4E56 FFFC 6974          link      A6,#-4
00003F1A  48E7 2000 6975          movem.l   D2,-(A7)
00003F1E  41EE 0008 6976          lea       8(A6),A0
00003F22  5848      6977          addq.w    #4,A0
00003F24  2408      6978          move.l    A0,D2
00003F26  2F02      6979          move.l    D2,-(A7)
00003F28  2F2E 0008 6980          move.l    8(A6),-(A7)
00003F2C  42A7      6981          clr.l     -(A7)
00003F2E  6100 00CA 6982          bsr       _vsprintf
00003F32  DEFC 000C 6983          add.w     #12,A7
00003F36  2D40 FFFC 6984          move.l    D0,-4(A6)
00003F3A  4282      6985          clr.l     D2
00003F3C  202E FFFC 6986          move.l    -4(A6),D0
00003F40  4CDF 0004 6987          movem.l   (A7)+,D2
00003F44  4E5E      6988          unlk      A6
00003F46  4E75      6989          rts
                    6990   @vsprintf_copy:
00003F48  4E56 0000 6991          link      A6,#0
00003F4C  206E 0008 6992          move.l    8(A6),A0
00003F50  4A90      6993          tst.l     (A0)
00003F52  6710      6994          beq.s     @vsprintf_copy_1
00003F54  202E 000C 6995          move.l    12(A6),D0
00003F58  206E 0008 6996          move.l    8(A6),A0
00003F5C  2250      6997          move.l    (A0),A1
00003F5E  5290      6998          addq.l    #1,(A0)
00003F60  1280      6999          move.b    D0,(A1)
00003F62  600A      7000          bra.s     @vsprintf_copy_2
                    7001   @vsprintf_copy_1:
00003F64  2F2E 000C 7002          move.l    12(A6),-(A7)
00003F68  6100 F5F0 7003          bsr       _putch
00003F6C  584F      7004          addq.w    #4,A7
                    7005   @vsprintf_copy_2:
00003F6E  4E5E      7006          unlk      A6
00003F70  4E75      7007          rts
                    7008   @vsprintf_getval:
00003F72  4E56 0000 7009          link      A6,#0
00003F76  48E7 3000 7010          movem.l   D2/D3,-(A7)
00003F7A  242E 0008 7011          move.l    8(A6),D2
00003F7E  4283      7012          clr.l     D3
00003F80  2042      7013          move.l    D2,A0
00003F82  2050      7014          move.l    (A0),A0
00003F84  1010      7015          move.b    (A0),D0
00003F86  4880      7016          ext.w     D0
00003F88  48C0      7017          ext.l     D0
00003F8A  0C80 0000 7018          cmp.l     #42,D0
00003F8E  002A      
00003F90  6612      7019          bne.s     @vsprintf_getval_1
00003F92  206E 000C 7020          move.l    12(A6),A0
00003F96  2250      7021          move.l    (A0),A1
00003F98  5890      7022          addq.l    #4,(A0)
00003F9A  2611      7023          move.l    (A1),D3
00003F9C  2042      7024          move.l    D2,A0
00003F9E  5290      7025          addq.l    #1,(A0)
00003FA0  6000 004E 7026          bra       @vsprintf_getval_5
                    7027   @vsprintf_getval_1:
00003FA4  2042      7028          move.l    D2,A0
00003FA6  2050      7029          move.l    (A0),A0
00003FA8  1010      7030          move.b    (A0),D0
00003FAA  4880      7031          ext.w     D0
00003FAC  48C0      7032          ext.l     D0
00003FAE  0C80 0000 7033          cmp.l     #48,D0
00003FB2  0030      
00003FB4  6D00 003A 7034          blt       @vsprintf_getval_5
00003FB8  2042      7035          move.l    D2,A0
00003FBA  2050      7036          move.l    (A0),A0
00003FBC  1010      7037          move.b    (A0),D0
00003FBE  4880      7038          ext.w     D0
00003FC0  48C0      7039          ext.l     D0
00003FC2  0C80 0000 7040          cmp.l     #57,D0
00003FC6  0039      
00003FC8  6E26      7041          bgt.s     @vsprintf_getval_5
00003FCA  2F03      7042          move.l    D3,-(A7)
00003FCC  4878 000A 7043          pea       10
00003FD0  6100 F4FA 7044          bsr       LMUL
00003FD4  2017      7045          move.l    (A7),D0
00003FD6  504F      7046          addq.w    #8,A7
00003FD8  2042      7047          move.l    D2,A0
00003FDA  2250      7048          move.l    (A0),A1
00003FDC  5290      7049          addq.l    #1,(A0)
00003FDE  1211      7050          move.b    (A1),D1
00003FE0  4881      7051          ext.w     D1
00003FE2  48C1      7052          ext.l     D1
00003FE4  D081      7053          add.l     D1,D0
00003FE6  0480 0000 7054          sub.l     #48,D0
00003FEA  0030      
00003FEC  2600      7055          move.l    D0,D3
00003FEE  60B4      7056          bra       @vsprintf_getval_1
                    7057   @vsprintf_getval_5:
00003FF0  2003      7058          move.l    D3,D0
00003FF2  4CDF 000C 7059          movem.l   (A7)+,D2/D3
00003FF6  4E5E      7060          unlk      A6
00003FF8  4E75      7061          rts
                    7062   _vsprintf:
00003FFA  4E56 FFCC 7063          link      A6,#-52
00003FFE  48E7 3F3C 7064          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00004002  45EE 0008 7065          lea       8(A6),A2
00004006  47F8 3F48 7066          lea       @vsprintf_copy,A3
0000400A  49F9 0000 7067          lea       _ultoa,A4
0000400E  47D8      
00004010  4286      7068          clr.l     D6
                    7069   vsprintf_1:
00004012  206E 000C 7070          move.l    12(A6),A0
00004016  4A10      7071          tst.b     (A0)
00004018  6700 0624 7072          beq       vsprintf_3
0000401C  206E 000C 7073          move.l    12(A6),A0
00004020  1010      7074          move.b    (A0),D0
00004022  4880      7075          ext.w     D0
00004024  48C0      7076          ext.l     D0
00004026  0C80 0000 7077          cmp.l     #37,D0
0000402A  0025      
0000402C  671C      7078          beq.s     vsprintf_4
0000402E  206E 000C 7079          move.l    12(A6),A0
00004032  52AE 000C 7080          addq.l    #1,12(A6)
00004036  1210      7081          move.b    (A0),D1
00004038  4881      7082          ext.w     D1
0000403A  48C1      7083          ext.l     D1
0000403C  2F01      7084          move.l    D1,-(A7)
0000403E  2F0A      7085          move.l    A2,-(A7)
00004040  4E93      7086          jsr       (A3)
00004042  504F      7087          addq.w    #8,A7
00004044  5286      7088          addq.l    #1,D6
00004046  6000 05F2 7089          bra       vsprintf_2
                    7090   vsprintf_4:
0000404A  52AE 000C 7091          addq.l    #1,12(A6)
0000404E  422E FFD3 7092          clr.b     -45(A6)
00004052  422E FFD2 7093          clr.b     -46(A6)
00004056  422E FFD0 7094          clr.b     -48(A6)
0000405A  422E FFCF 7095          clr.b     -49(A6)
0000405E  422E FFCE 7096          clr.b     -50(A6)
00004062  422E FFCD 7097          clr.b     -51(A6)
00004066  42AE FFFC 7098          clr.l     -4(A6)
0000406A  7AFF      7099          moveq     #-1,D5
0000406C  41EE FFDC 7100          lea       -36(A6),A0
00004070  2608      7101          move.l    A0,D3
00004072  2408      7102          move.l    A0,D2
                    7103   vsprintf_6:
00004074  206E 000C 7104          move.l    12(A6),A0
00004078  1010      7105          move.b    (A0),D0
0000407A  4880      7106          ext.w     D0
0000407C  48C0      7107          ext.l     D0
0000407E  0C80 0000 7108          cmp.l     #43,D0
00004082  002B      
00004084  6730      7109          beq.s     vsprintf_12
00004086  6E18      7110          bgt.s     vsprintf_15
00004088  0C80 0000 7111          cmp.l     #35,D0
0000408C  0023      
0000408E  6700 003E 7112          beq       vsprintf_14
00004092  6E00 0046 7113          bgt       vsprintf_9
00004096  0C80 0000 7114          cmp.l     #32,D0
0000409A  0020      
0000409C  6724      7115          beq.s     vsprintf_13
0000409E  603A      7116          bra.s     vsprintf_9
                    7117   vsprintf_15:
000040A0  0C80 0000 7118          cmp.l     #45,D0
000040A4  002D      
000040A6  6702      7119          beq.s     vsprintf_11
000040A8  6030      7120          bra.s     vsprintf_9
                    7121   vsprintf_11:
000040AA  1D7C 0001 7122          move.b    #1,-51(A6)
000040AE  FFCD      
000040B0  52AE 000C 7123          addq.l    #1,12(A6)
000040B4  6026      7124          bra.s     vsprintf_7
                    7125   vsprintf_12:
000040B6  1D7C 0001 7126          move.b    #1,-50(A6)
000040BA  FFCE      
000040BC  52AE 000C 7127          addq.l    #1,12(A6)
000040C0  601A      7128          bra.s     vsprintf_7
                    7129   vsprintf_13:
000040C2  1D7C 0001 7130          move.b    #1,-49(A6)
000040C6  FFCF      
000040C8  52AE 000C 7131          addq.l    #1,12(A6)
000040CC  600E      7132          bra.s     vsprintf_7
                    7133   vsprintf_14:
000040CE  1D7C 0001 7134          move.b    #1,-48(A6)
000040D2  FFD0      
000040D4  52AE 000C 7135          addq.l    #1,12(A6)
000040D8  6002      7136          bra.s     vsprintf_7
                    7137   vsprintf_9:
000040DA  6002      7138          bra.s     vsprintf_8
                    7139   vsprintf_7:
000040DC  6096      7140          bra       vsprintf_6
                    7141   vsprintf_8:
000040DE  206E 000C 7142          move.l    12(A6),A0
000040E2  1010      7143          move.b    (A0),D0
000040E4  4880      7144          ext.w     D0
000040E6  48C0      7145          ext.l     D0
000040E8  0C80 0000 7146          cmp.l     #48,D0
000040EC  0030      
000040EE  660A      7147          bne.s     vsprintf_16
000040F0  52AE 000C 7148          addq.l    #1,12(A6)
000040F4  1D7C 0001 7149          move.b    #1,-46(A6)
000040F8  FFD2      
                    7150   vsprintf_16:
000040FA  486E 0010 7151          pea       16(A6)
000040FE  486E 000C 7152          pea       12(A6)
00004102  6100 FE6E 7153          bsr       @vsprintf_getval
00004106  504F      7154          addq.w    #8,A7
00004108  2A40      7155          move.l    D0,A5
0000410A  206E 000C 7156          move.l    12(A6),A0
0000410E  1010      7157          move.b    (A0),D0
00004110  4880      7158          ext.w     D0
00004112  48C0      7159          ext.l     D0
00004114  0C80 0000 7160          cmp.l     #46,D0
00004118  002E      
0000411A  6614      7161          bne.s     vsprintf_18
0000411C  52AE 000C 7162          addq.l    #1,12(A6)
00004120  486E 0010 7163          pea       16(A6)
00004124  486E 000C 7164          pea       12(A6)
00004128  6100 FE48 7165          bsr       @vsprintf_getval
0000412C  504F      7166          addq.w    #8,A7
0000412E  2A00      7167          move.l    D0,D5
                    7168   vsprintf_18:
00004130  206E 000C 7169          move.l    12(A6),A0
00004134  1010      7170          move.b    (A0),D0
00004136  4880      7171          ext.w     D0
00004138  48C0      7172          ext.l     D0
0000413A  0C80 0000 7173          cmp.l     #108,D0
0000413E  006C      
00004140  660A      7174          bne.s     vsprintf_20
00004142  52AE 000C 7175          addq.l    #1,12(A6)
00004146  1D7C 0001 7176          move.b    #1,-45(A6)
0000414A  FFD3      
                    7177   vsprintf_20:
0000414C  206E 000C 7178          move.l    12(A6),A0
00004150  1010      7179          move.b    (A0),D0
00004152  4880      7180          ext.w     D0
00004154  48C0      7181          ext.l     D0
00004156  0C80 0000 7182          cmp.l     #111,D0
0000415A  006F      
0000415C  6700 00D4 7183          beq       vsprintf_27
00004160  6E34      7184          bgt.s     vsprintf_33
00004162  0C80 0000 7185          cmp.l     #100,D0
00004166  0064      
00004168  6700 0054 7186          beq       vsprintf_24
0000416C  6E1C      7187          bgt.s     vsprintf_34
0000416E  0C80 0000 7188          cmp.l     #99,D0
00004172  0063      
00004174  6700 012C 7189          beq       vsprintf_30
00004178  6E00 016A 7190          bgt       vsprintf_22
0000417C  0C80 0000 7191          cmp.l     #88,D0
00004180  0058      
00004182  6700 00E6 7192          beq       vsprintf_28
00004186  6000 015C 7193          bra       vsprintf_22
                    7194   vsprintf_34:
0000418A  0C80 0000 7195          cmp.l     #105,D0
0000418E  0069      
00004190  672C      7196          beq.s     vsprintf_24
00004192  6000 0150 7197          bra       vsprintf_22
                    7198   vsprintf_33:
00004196  0C80 0000 7199          cmp.l     #117,D0
0000419A  0075      
0000419C  6700 005C 7200          beq       vsprintf_26
000041A0  6E0E      7201          bgt.s     vsprintf_35
000041A2  0C80 0000 7202          cmp.l     #115,D0
000041A6  0073      
000041A8  6700 011C 7203          beq       vsprintf_31
000041AC  6000 0136 7204          bra       vsprintf_22
                    7205   vsprintf_35:
000041B0  0C80 0000 7206          cmp.l     #120,D0
000041B4  0078      
000041B6  6700 00B2 7207          beq       vsprintf_28
000041BA  6000 0128 7208          bra       vsprintf_22
                    7209   vsprintf_24:
000041BE  4A2E FFD3 7210          tst.b     -45(A6)
000041C2  671A      7211          beq.s     vsprintf_36
000041C4  4878 000A 7212          pea       10
000041C8  2F03      7213          move.l    D3,-(A7)
000041CA  206E 0010 7214          move.l    16(A6),A0
000041CE  58AE 0010 7215          addq.l    #4,16(A6)
000041D2  2F10      7216          move.l    (A0),-(A7)
000041D4  6100 057E 7217          bsr       _ltoa
000041D8  DEFC 000C 7218          add.w     #12,A7
000041DC  6018      7219          bra.s     vsprintf_37
                    7220   vsprintf_36:
000041DE  4878 000A 7221          pea       10
000041E2  2F03      7222          move.l    D3,-(A7)
000041E4  206E 0010 7223          move.l    16(A6),A0
000041E8  58AE 0010 7224          addq.l    #4,16(A6)
000041EC  2F10      7225          move.l    (A0),-(A7)
000041EE  6100 0564 7226          bsr       _ltoa
000041F2  DEFC 000C 7227          add.w     #12,A7
                    7228   vsprintf_37:
000041F6  6000 00FA 7229          bra       vsprintf_23
                    7230   vsprintf_26:
000041FA  4A2E FFD3 7231          tst.b     -45(A6)
000041FE  6718      7232          beq.s     vsprintf_38
00004200  4878 000A 7233          pea       10
00004204  2F03      7234          move.l    D3,-(A7)
00004206  206E 0010 7235          move.l    16(A6),A0
0000420A  58AE 0010 7236          addq.l    #4,16(A6)
0000420E  2F10      7237          move.l    (A0),-(A7)
00004210  4E94      7238          jsr       (A4)
00004212  DEFC 000C 7239          add.w     #12,A7
00004216  6016      7240          bra.s     vsprintf_39
                    7241   vsprintf_38:
00004218  4878 000A 7242          pea       10
0000421C  2F03      7243          move.l    D3,-(A7)
0000421E  206E 0010 7244          move.l    16(A6),A0
00004222  58AE 0010 7245          addq.l    #4,16(A6)
00004226  2F10      7246          move.l    (A0),-(A7)
00004228  4E94      7247          jsr       (A4)
0000422A  DEFC 000C 7248          add.w     #12,A7
                    7249   vsprintf_39:
0000422E  6000 00C2 7250          bra       vsprintf_23
                    7251   vsprintf_27:
00004232  4A2E FFD3 7252          tst.b     -45(A6)
00004236  6718      7253          beq.s     vsprintf_40
00004238  4878 0008 7254          pea       8
0000423C  2F03      7255          move.l    D3,-(A7)
0000423E  206E 0010 7256          move.l    16(A6),A0
00004242  58AE 0010 7257          addq.l    #4,16(A6)
00004246  2F10      7258          move.l    (A0),-(A7)
00004248  4E94      7259          jsr       (A4)
0000424A  DEFC 000C 7260          add.w     #12,A7
0000424E  6016      7261          bra.s     vsprintf_41
                    7262   vsprintf_40:
00004250  4878 0008 7263          pea       8
00004254  2F03      7264          move.l    D3,-(A7)
00004256  206E 0010 7265          move.l    16(A6),A0
0000425A  58AE 0010 7266          addq.l    #4,16(A6)
0000425E  2F10      7267          move.l    (A0),-(A7)
00004260  4E94      7268          jsr       (A4)
00004262  DEFC 000C 7269          add.w     #12,A7
                    7270   vsprintf_41:
00004266  6000 008A 7271          bra       vsprintf_23
                    7272   vsprintf_28:
0000426A  4A2E FFD3 7273          tst.b     -45(A6)
0000426E  6718      7274          beq.s     vsprintf_42
00004270  4878 0010 7275          pea       16
00004274  2F03      7276          move.l    D3,-(A7)
00004276  206E 0010 7277          move.l    16(A6),A0
0000427A  58AE 0010 7278          addq.l    #4,16(A6)
0000427E  2F10      7279          move.l    (A0),-(A7)
00004280  4E94      7280          jsr       (A4)
00004282  DEFC 000C 7281          add.w     #12,A7
00004286  6016      7282          bra.s     vsprintf_43
                    7283   vsprintf_42:
00004288  4878 0010 7284          pea       16
0000428C  2F03      7285          move.l    D3,-(A7)
0000428E  206E 0010 7286          move.l    16(A6),A0
00004292  58AE 0010 7287          addq.l    #4,16(A6)
00004296  2F10      7288          move.l    (A0),-(A7)
00004298  4E94      7289          jsr       (A4)
0000429A  DEFC 000C 7290          add.w     #12,A7
                    7291   vsprintf_43:
0000429E  6000 0052 7292          bra       vsprintf_23
                    7293   vsprintf_30:
000042A2  206E 0010 7294          move.l    16(A6),A0
000042A6  58AE 0010 7295          addq.l    #4,16(A6)
000042AA  2010      7296          move.l    (A0),D0
000042AC  2042      7297          move.l    D2,A0
000042AE  5282      7298          addq.l    #1,D2
000042B0  1080      7299          move.b    D0,(A0)
000042B2  2042      7300          move.l    D2,A0
000042B4  4210      7301          clr.b     (A0)
000042B6  200D      7302          move.l    A5,D0
000042B8  6704      7303          beq.s     vsprintf_44
000042BA  200D      7304          move.l    A5,D0
000042BC  6002      7305          bra.s     vsprintf_45
                    7306   vsprintf_44:
000042BE  7001      7307          moveq     #1,D0
                    7308   vsprintf_45:
000042C0  2A00      7309          move.l    D0,D5
000042C2  6000 002E 7310          bra       vsprintf_23
                    7311   vsprintf_31:
000042C6  206E 0010 7312          move.l    16(A6),A0
000042CA  58AE 0010 7313          addq.l    #4,16(A6)
000042CE  2610      7314          move.l    (A0),D3
000042D0  0C85 FFFF 7315          cmp.l     #-1,D5
000042D4  FFFF      
000042D6  660A      7316          bne.s     vsprintf_46
000042D8  2F03      7317          move.l    D3,-(A7)
000042DA  6100 055E 7318          bsr       _strlen
000042DE  584F      7319          addq.w    #4,A7
000042E0  2A00      7320          move.l    D0,D5
                    7321   vsprintf_46:
000042E2  600E      7322          bra.s     vsprintf_23
                    7323   vsprintf_22:
000042E4  206E 000C 7324          move.l    12(A6),A0
000042E8  2242      7325          move.l    D2,A1
000042EA  5282      7326          addq.l    #1,D2
000042EC  1290      7327          move.b    (A0),(A1)
000042EE  2042      7328          move.l    D2,A0
000042F0  4210      7329          clr.b     (A0)
                    7330   vsprintf_23:
000042F2  2F03      7331          move.l    D3,-(A7)
000042F4  6100 0544 7332          bsr       _strlen
000042F8  584F      7333          addq.w    #4,A7
000042FA  1800      7334          move.b    D0,D4
000042FC  206E 000C 7335          move.l    12(A6),A0
00004300  1010      7336          move.b    (A0),D0
00004302  4880      7337          ext.w     D0
00004304  48C0      7338          ext.l     D0
00004306  0C80 0000 7339          cmp.l     #115,D0
0000430A  0073      
0000430C  6618      7340          bne.s     vsprintf_48
0000430E  0C85 0000 7341          cmp.l     #0,D5
00004312  0000      
00004314  6D10      7342          blt.s     vsprintf_48
00004316  4884      7343          ext.w     D4
00004318  48C4      7344          ext.l     D4
0000431A  B885      7345          cmp.l     D5,D4
0000431C  6F04      7346          ble.s     vsprintf_50
0000431E  1005      7347          move.b    D5,D0
00004320  6002      7348          bra.s     vsprintf_51
                    7349   vsprintf_50:
00004322  1004      7350          move.b    D4,D0
                    7351   vsprintf_51:
00004324  1800      7352          move.b    D0,D4
                    7353   vsprintf_48:
00004326  206E 000C 7354          move.l    12(A6),A0
0000432A  1010      7355          move.b    (A0),D0
0000432C  4880      7356          ext.w     D0
0000432E  48C0      7357          ext.l     D0
00004330  0C80 0000 7358          cmp.l     #88,D0
00004334  0058      
00004336  6600 0026 7359          bne       vsprintf_56
0000433A  41EE FFDC 7360          lea       -36(A6),A0
0000433E  2408      7361          move.l    A0,D2
                    7362   vsprintf_54:
00004340  2042      7363          move.l    D2,A0
00004342  4A10      7364          tst.b     (A0)
00004344  6718      7365          beq.s     vsprintf_56
00004346  2042      7366          move.l    D2,A0
00004348  1210      7367          move.b    (A0),D1
0000434A  4881      7368          ext.w     D1
0000434C  48C1      7369          ext.l     D1
0000434E  2F01      7370          move.l    D1,-(A7)
00004350  6100 F302 7371          bsr       _toupper
00004354  584F      7372          addq.w    #4,A7
00004356  2042      7373          move.l    D2,A0
00004358  1080      7374          move.b    D0,(A0)
0000435A  5282      7375          addq.l    #1,D2
0000435C  60E2      7376          bra       vsprintf_54
                    7377   vsprintf_56:
0000435E  7E00      7378          moveq     #0,D7
00004360  41EE FFD4 7379          lea       -44(A6),A0
00004364  2408      7380          move.l    A0,D2
00004366  206E 000C 7381          move.l    12(A6),A0
0000436A  1010      7382          move.b    (A0),D0
0000436C  4880      7383          ext.w     D0
0000436E  48C0      7384          ext.l     D0
00004370  0C80 0000 7385          cmp.l     #100,D0
00004374  0064      
00004376  6714      7386          beq.s     vsprintf_59
00004378  206E 000C 7387          move.l    12(A6),A0
0000437C  1010      7388          move.b    (A0),D0
0000437E  4880      7389          ext.w     D0
00004380  48C0      7390          ext.l     D0
00004382  0C80 0000 7391          cmp.l     #105,D0
00004386  0069      
00004388  6600 0076 7392          bne       vsprintf_65
                    7393   vsprintf_59:
0000438C  4A2E FFCE 7394          tst.b     -50(A6)
00004390  6612      7395          bne.s     vsprintf_62
00004392  2043      7396          move.l    D3,A0
00004394  1010      7397          move.b    (A0),D0
00004396  4880      7398          ext.w     D0
00004398  48C0      7399          ext.l     D0
0000439A  0C80 0000 7400          cmp.l     #45,D0
0000439E  002D      
000043A0  6600 002E 7401          bne       vsprintf_60
                    7402   vsprintf_62:
000043A4  2043      7403          move.l    D3,A0
000043A6  1010      7404          move.b    (A0),D0
000043A8  4880      7405          ext.w     D0
000043AA  48C0      7406          ext.l     D0
000043AC  0C80 0000 7407          cmp.l     #45,D0
000043B0  002D      
000043B2  660E      7408          bne.s     vsprintf_63
000043B4  2043      7409          move.l    D3,A0
000043B6  5283      7410          addq.l    #1,D3
000043B8  2242      7411          move.l    D2,A1
000043BA  5282      7412          addq.l    #1,D2
000043BC  1290      7413          move.b    (A0),(A1)
000043BE  5304      7414          subq.b    #1,D4
000043C0  6008      7415          bra.s     vsprintf_64
                    7416   vsprintf_63:
000043C2  2042      7417          move.l    D2,A0
000043C4  5282      7418          addq.l    #1,D2
000043C6  10BC 002B 7419          move.b    #43,(A0)
                    7420   vsprintf_64:
000043CA  5287      7421          addq.l    #1,D7
000043CC  6000 0032 7422          bra       vsprintf_65
                    7423   vsprintf_60:
000043D0  4A2E FFCF 7424          tst.b     -49(A6)
000043D4  6700 002A 7425          beq       vsprintf_65
000043D8  2043      7426          move.l    D3,A0
000043DA  1010      7427          move.b    (A0),D0
000043DC  4880      7428          ext.w     D0
000043DE  48C0      7429          ext.l     D0
000043E0  0C80 0000 7430          cmp.l     #45,D0
000043E4  002D      
000043E6  660E      7431          bne.s     vsprintf_67
000043E8  2043      7432          move.l    D3,A0
000043EA  5283      7433          addq.l    #1,D3
000043EC  2242      7434          move.l    D2,A1
000043EE  5282      7435          addq.l    #1,D2
000043F0  1290      7436          move.b    (A0),(A1)
000043F2  5304      7437          subq.b    #1,D4
000043F4  6008      7438          bra.s     vsprintf_68
                    7439   vsprintf_67:
000043F6  2042      7440          move.l    D2,A0
000043F8  5282      7441          addq.l    #1,D2
000043FA  10BC 0020 7442          move.b    #32,(A0)
                    7443   vsprintf_68:
000043FE  5287      7444          addq.l    #1,D7
                    7445   vsprintf_65:
00004400  4A2E FFD0 7446          tst.b     -48(A6)
00004404  6700 0066 7447          beq       vsprintf_77
00004408  206E 000C 7448          move.l    12(A6),A0
0000440C  1010      7449          move.b    (A0),D0
0000440E  4880      7450          ext.w     D0
00004410  48C0      7451          ext.l     D0
00004412  0C80 0000 7452          cmp.l     #111,D0
00004416  006F      
00004418  671A      7453          beq.s     vsprintf_73
0000441A  6E0C      7454          bgt.s     vsprintf_76
0000441C  0C80 0000 7455          cmp.l     #88,D0
00004420  0058      
00004422  6710      7456          beq.s     vsprintf_73
00004424  6000 0046 7457          bra       vsprintf_77
                    7458   vsprintf_76:
00004428  0C80 0000 7459          cmp.l     #120,D0
0000442C  0078      
0000442E  6704      7460          beq.s     vsprintf_73
00004430  6000 003A 7461          bra       vsprintf_77
                    7462   vsprintf_73:
00004434  2042      7463          move.l    D2,A0
00004436  5282      7464          addq.l    #1,D2
00004438  10BC 0030 7465          move.b    #48,(A0)
0000443C  5287      7466          addq.l    #1,D7
0000443E  206E 000C 7467          move.l    12(A6),A0
00004442  1010      7468          move.b    (A0),D0
00004444  4880      7469          ext.w     D0
00004446  48C0      7470          ext.l     D0
00004448  0C80 0000 7471          cmp.l     #120,D0
0000444C  0078      
0000444E  6712      7472          beq.s     vsprintf_79
00004450  206E 000C 7473          move.l    12(A6),A0
00004454  1010      7474          move.b    (A0),D0
00004456  4880      7475          ext.w     D0
00004458  48C0      7476          ext.l     D0
0000445A  0C80 0000 7477          cmp.l     #88,D0
0000445E  0058      
00004460  660A      7478          bne.s     vsprintf_77
                    7479   vsprintf_79:
00004462  2042      7480          move.l    D2,A0
00004464  5282      7481          addq.l    #1,D2
00004466  10BC 0078 7482          move.b    #120,(A0)
0000446A  5287      7483          addq.l    #1,D7
                    7484   vsprintf_77:
0000446C  2042      7485          move.l    D2,A0
0000446E  4210      7486          clr.b     (A0)
00004470  206E 000C 7487          move.l    12(A6),A0
00004474  1010      7488          move.b    (A0),D0
00004476  4880      7489          ext.w     D0
00004478  48C0      7490          ext.l     D0
0000447A  0C80 0000 7491          cmp.l     #105,D0
0000447E  0069      
00004480  6700 0076 7492          beq       vsprintf_82
00004484  6E42      7493          bgt.s     vsprintf_93
00004486  0C80 0000 7494          cmp.l     #99,D0
0000448A  0063      
0000448C  6700 0084 7495          beq       vsprintf_96
00004490  6E1C      7496          bgt.s     vsprintf_94
00004492  0C80 0000 7497          cmp.l     #88,D0
00004496  0058      
00004498  6700 005E 7498          beq       vsprintf_82
0000449C  6E00 0184 7499          bgt       vsprintf_80
000044A0  0C80 0000 7500          cmp.l     #69,D0
000044A4  0045      
000044A6  6700 0050 7501          beq       vsprintf_82
000044AA  6000 0176 7502          bra       vsprintf_80
                    7503   vsprintf_94:
000044AE  0C80 0000 7504          cmp.l     #101,D0
000044B2  0065      
000044B4  6700 0042 7505          beq       vsprintf_82
000044B8  6E00 0168 7506          bgt       vsprintf_80
000044BC  0C80 0000 7507          cmp.l     #100,D0
000044C0  0064      
000044C2  6734      7508          beq.s     vsprintf_82
000044C4  6000 015C 7509          bra       vsprintf_80
                    7510   vsprintf_93:
000044C8  0C80 0000 7511          cmp.l     #117,D0
000044CC  0075      
000044CE  6728      7512          beq.s     vsprintf_82
000044D0  6E1A      7513          bgt.s     vsprintf_95
000044D2  0C80 0000 7514          cmp.l     #115,D0
000044D6  0073      
000044D8  6700 0038 7515          beq       vsprintf_96
000044DC  6E00 0144 7516          bgt       vsprintf_80
000044E0  0C80 0000 7517          cmp.l     #111,D0
000044E4  006F      
000044E6  6710      7518          beq.s     vsprintf_82
000044E8  6000 0138 7519          bra       vsprintf_80
                    7520   vsprintf_95:
000044EC  0C80 0000 7521          cmp.l     #120,D0
000044F0  0078      
000044F2  6704      7522          beq.s     vsprintf_82
000044F4  6000 012C 7523          bra       vsprintf_80
                    7524   vsprintf_82:
000044F8  4A2E FFD2 7525          tst.b     -46(A6)
000044FC  6714      7526          beq.s     vsprintf_96
000044FE  4A2E FFCD 7527          tst.b     -51(A6)
00004502  660E      7528          bne.s     vsprintf_96
00004504  200D      7529          move.l    A5,D0
00004506  9087      7530          sub.l     D7,D0
00004508  4884      7531          ext.w     D4
0000450A  48C4      7532          ext.l     D4
0000450C  9084      7533          sub.l     D4,D0
0000450E  2D40 FFFC 7534          move.l    D0,-4(A6)
                    7535   vsprintf_96:
00004512  202E FFFC 7536          move.l    -4(A6),D0
00004516  0C80 0000 7537          cmp.l     #0,D0
0000451A  0000      
0000451C  6C04      7538          bge.s     vsprintf_98
0000451E  42AE FFFC 7539          clr.l     -4(A6)
                    7540   vsprintf_98:
00004522  4A2E FFCD 7541          tst.b     -51(A6)
00004526  6600 0030 7542          bne       vsprintf_104
0000452A  4884      7543          ext.w     D4
0000452C  48C4      7544          ext.l     D4
0000452E  2004      7545          move.l    D4,D0
00004530  D0AE FFFC 7546          add.l     -4(A6),D0
00004534  D087      7547          add.l     D7,D0
00004536  1D40 FFD1 7548          move.b    D0,-47(A6)
                    7549   vsprintf_102:
0000453A  102E FFD1 7550          move.b    -47(A6),D0
0000453E  4880      7551          ext.w     D0
00004540  48C0      7552          ext.l     D0
00004542  220D      7553          move.l    A5,D1
00004544  534D      7554          subq.w    #1,A5
00004546  B081      7555          cmp.l     D1,D0
00004548  6C0E      7556          bge.s     vsprintf_104
0000454A  4878 0020 7557          pea       32
0000454E  2F0A      7558          move.l    A2,-(A7)
00004550  4E93      7559          jsr       (A3)
00004552  504F      7560          addq.w    #8,A7
00004554  5286      7561          addq.l    #1,D6
00004556  60E2      7562          bra       vsprintf_102
                    7563   vsprintf_104:
00004558  41EE FFD4 7564          lea       -44(A6),A0
0000455C  2408      7565          move.l    A0,D2
                    7566   vsprintf_105:
0000455E  2042      7567          move.l    D2,A0
00004560  4A10      7568          tst.b     (A0)
00004562  6716      7569          beq.s     vsprintf_107
00004564  2042      7570          move.l    D2,A0
00004566  5282      7571          addq.l    #1,D2
00004568  1210      7572          move.b    (A0),D1
0000456A  4881      7573          ext.w     D1
0000456C  48C1      7574          ext.l     D1
0000456E  2F01      7575          move.l    D1,-(A7)
00004570  2F0A      7576          move.l    A2,-(A7)
00004572  4E93      7577          jsr       (A3)
00004574  504F      7578          addq.w    #8,A7
00004576  5286      7579          addq.l    #1,D6
00004578  60E4      7580          bra       vsprintf_105
                    7581   vsprintf_107:
0000457A  202E FFFC 7582          move.l    -4(A6),D0
0000457E  1D40 FFD1 7583          move.b    D0,-47(A6)
                    7584   vsprintf_108:
00004582  102E FFD1 7585          move.b    -47(A6),D0
00004586  532E FFD1 7586          subq.b    #1,-47(A6)
0000458A  4A00      7587          tst.b     D0
0000458C  670E      7588          beq.s     vsprintf_110
0000458E  4878 0030 7589          pea       48
00004592  2F0A      7590          move.l    A2,-(A7)
00004594  4E93      7591          jsr       (A3)
00004596  504F      7592          addq.w    #8,A7
00004598  5286      7593          addq.l    #1,D6
0000459A  60E6      7594          bra       vsprintf_108
                    7595   vsprintf_110:
0000459C  2043      7596          move.l    D3,A0
0000459E  4A10      7597          tst.b     (A0)
000045A0  6700 0048 7598          beq       vsprintf_113
000045A4  206E 000C 7599          move.l    12(A6),A0
000045A8  1010      7600          move.b    (A0),D0
000045AA  4880      7601          ext.w     D0
000045AC  48C0      7602          ext.l     D0
000045AE  0C80 0000 7603          cmp.l     #115,D0
000045B2  0073      
000045B4  670C      7604          beq.s     vsprintf_116
000045B6  6E18      7605          bgt.s     vsprintf_119
000045B8  0C80 0000 7606          cmp.l     #99,D0
000045BC  0063      
000045BE  6702      7607          beq.s     vsprintf_116
000045C0  600E      7608          bra.s     vsprintf_119
                    7609   vsprintf_116:
000045C2  2005      7610          move.l    D5,D0
000045C4  5385      7611          subq.l    #1,D5
000045C6  0C80 0000 7612          cmp.l     #0,D0
000045CA  0000      
000045CC  6E02      7613          bgt.s     vsprintf_119
000045CE  6016      7614          bra.s     vsprintf_115
                    7615   vsprintf_119:
000045D0  2043      7616          move.l    D3,A0
000045D2  5283      7617          addq.l    #1,D3
000045D4  1210      7618          move.b    (A0),D1
000045D6  4881      7619          ext.w     D1
000045D8  48C1      7620          ext.l     D1
000045DA  2F01      7621          move.l    D1,-(A7)
000045DC  2F0A      7622          move.l    A2,-(A7)
000045DE  4E93      7623          jsr       (A3)
000045E0  504F      7624          addq.w    #8,A7
000045E2  5286      7625          addq.l    #1,D6
000045E4  6002      7626          bra.s     vsprintf_112
                    7627   vsprintf_115:
000045E6  6002      7628          bra.s     vsprintf_113
                    7629   vsprintf_112:
000045E8  60B2      7630          bra       vsprintf_110
                    7631   vsprintf_113:
000045EA  4A2E FFCD 7632          tst.b     -51(A6)
000045EE  6700 0030 7633          beq       vsprintf_125
000045F2  4884      7634          ext.w     D4
000045F4  48C4      7635          ext.l     D4
000045F6  2004      7636          move.l    D4,D0
000045F8  D0AE FFFC 7637          add.l     -4(A6),D0
000045FC  D087      7638          add.l     D7,D0
000045FE  1D40 FFD1 7639          move.b    D0,-47(A6)
                    7640   vsprintf_123:
00004602  102E FFD1 7641          move.b    -47(A6),D0
00004606  4880      7642          ext.w     D0
00004608  48C0      7643          ext.l     D0
0000460A  220D      7644          move.l    A5,D1
0000460C  534D      7645          subq.w    #1,A5
0000460E  B081      7646          cmp.l     D1,D0
00004610  6C0E      7647          bge.s     vsprintf_125
00004612  4878 0020 7648          pea       32
00004616  2F0A      7649          move.l    A2,-(A7)
00004618  4E93      7650          jsr       (A3)
0000461A  504F      7651          addq.w    #8,A7
0000461C  5386      7652          subq.l    #1,D6
0000461E  60E2      7653          bra       vsprintf_123
                    7654   vsprintf_125:
00004620  6014      7655          bra.s     vsprintf_81
                    7656   vsprintf_80:
00004622  206E 000C 7657          move.l    12(A6),A0
00004626  1210      7658          move.b    (A0),D1
00004628  4881      7659          ext.w     D1
0000462A  48C1      7660          ext.l     D1
0000462C  2F01      7661          move.l    D1,-(A7)
0000462E  2F0A      7662          move.l    A2,-(A7)
00004630  4E93      7663          jsr       (A3)
00004632  504F      7664          addq.w    #8,A7
00004634  5286      7665          addq.l    #1,D6
                    7666   vsprintf_81:
00004636  52AE 000C 7667          addq.l    #1,12(A6)
                    7668   vsprintf_2:
0000463A  6000 F9D6 7669          bra       vsprintf_1
                    7670   vsprintf_3:
0000463E  4A92      7671          tst.l     (A2)
00004640  6710      7672          beq.s     vsprintf_126
00004642  4201      7673          clr.b     D1
00004644  C2BC 0000 7674          and.l     #255,D1
00004648  00FF      
0000464A  2F01      7675          move.l    D1,-(A7)
0000464C  2F0A      7676          move.l    A2,-(A7)
0000464E  4E93      7677          jsr       (A3)
00004650  504F      7678          addq.w    #8,A7
                    7679   vsprintf_126:
00004652  2006      7680          move.l    D6,D0
00004654  4CDF 3CFC 7681          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004658  4E5E      7682          unlk      A6
0000465A  4E75      7683          rts
                    7684   _gets:
0000465C  4E56 0000 7685          link      A6,#0
00004660  48E7 3820 7686          movem.l   D2/D3/D4/A2,-(A7)
00004664  45F8 355A 7687          lea       _putch,A2
00004668  282E 0008 7688          move.l    8(A6),D4
0000466C  2404      7689          move.l    D4,D2
                    7690   gets_1:
0000466E  6100 EF1A 7691          bsr       _getch
00004672  2600      7692          move.l    D0,D3
00004674  0C80 0000 7693          cmp.l     #10,D0
00004678  000A      
0000467A  6700 003C 7694          beq       gets_3
0000467E  0C83 0000 7695          cmp.l     #8,D3
00004682  0008      
00004684  6712      7696          beq.s     gets_4
00004686  2042      7697          move.l    D2,A0
00004688  5282      7698          addq.l    #1,D2
0000468A  1083      7699          move.b    D3,(A0)
0000468C  4883      7700          ext.w     D3
0000468E  48C3      7701          ext.l     D3
00004690  2F03      7702          move.l    D3,-(A7)
00004692  4E92      7703          jsr       (A2)
00004694  584F      7704          addq.w    #4,A7
00004696  601E      7705          bra.s     gets_6
                    7706   gets_4:
00004698  B484      7707          cmp.l     D4,D2
0000469A  631A      7708          bls.s     gets_6
0000469C  4878 0008 7709          pea       8
000046A0  4E92      7710          jsr       (A2)
000046A2  584F      7711          addq.w    #4,A7
000046A4  4878 0020 7712          pea       32
000046A8  4E92      7713          jsr       (A2)
000046AA  584F      7714          addq.w    #4,A7
000046AC  4878 0008 7715          pea       8
000046B0  4E92      7716          jsr       (A2)
000046B2  584F      7717          addq.w    #4,A7
000046B4  5382      7718          subq.l    #1,D2
                    7719   gets_6:
000046B6  60B6      7720          bra       gets_1
                    7721   gets_3:
000046B8  4878 000A 7722          pea       10
000046BC  4E92      7723          jsr       (A2)
000046BE  584F      7724          addq.w    #4,A7
000046C0  2042      7725          move.l    D2,A0
000046C2  4210      7726          clr.b     (A0)
000046C4  2004      7727          move.l    D4,D0
000046C6  4CDF 041C 7728          movem.l   (A7)+,D2/D3/D4/A2
000046CA  4E5E      7729          unlk      A6
000046CC  4E75      7730          rts
                    7731   _ungetch:
000046CE  4E56 0000 7732          link      A6,#0
000046D2  23EE 0008 7733          move.l    8(A6),__ungetbuf
000046D6  0B00 00C0 
000046DA  202E 0008 7734          move.l    8(A6),D0
000046DE  4E5E      7735          unlk      A6
000046E0  4E75      7736          rts
                    7737   @itoa_convert:
000046E2  4E56 0000 7738          link      A6,#0
000046E6  48E7 3C00 7739          movem.l   D2/D3/D4/D5,-(A7)
000046EA  242E 0008 7740          move.l    8(A6),D2
000046EE  262E 0010 7741          move.l    16(A6),D3
000046F2  2A2E 000C 7742          move.l    12(A6),D5
000046F6  2F05      7743          move.l    D5,-(A7)
000046F8  2F03      7744          move.l    D3,-(A7)
000046FA  6100 ECE0 7745          bsr       ULDIV
000046FE  202F 0004 7746          move.l    4(A7),D0
00004702  504F      7747          addq.w    #8,A7
00004704  2800      7748          move.l    D0,D4
00004706  BA83      7749          cmp.l     D3,D5
00004708  651A      7750          blo.s     @itoa_convert_1
0000470A  2F03      7751          move.l    D3,-(A7)
0000470C  2F05      7752          move.l    D5,-(A7)
0000470E  2F03      7753          move.l    D3,-(A7)
00004710  6100 ECCA 7754          bsr       ULDIV
00004714  2217      7755          move.l    (A7),D1
00004716  504F      7756          addq.w    #8,A7
00004718  2F01      7757          move.l    D1,-(A7)
0000471A  2F02      7758          move.l    D2,-(A7)
0000471C  61C4      7759          bsr       @itoa_convert
0000471E  DEFC 000C 7760          add.w     #12,A7
00004722  2400      7761          move.l    D0,D2
                    7762   @itoa_convert_1:
00004724  0C84 0000 7763          cmp.l     #9,D4
00004728  0009      
0000472A  6E0A      7764          bgt.s     @itoa_convert_3
0000472C  2004      7765          move.l    D4,D0
0000472E  0680 0000 7766          add.l     #48,D0
00004732  0030      
00004734  600E      7767          bra.s     @itoa_convert_4
                    7768   @itoa_convert_3:
00004736  2004      7769          move.l    D4,D0
00004738  0680 0000 7770          add.l     #97,D0
0000473C  0061      
0000473E  0480 0000 7771          sub.l     #10,D0
00004742  000A      
                    7772   @itoa_convert_4:
00004744  2042      7773          move.l    D2,A0
00004746  1080      7774          move.b    D0,(A0)
00004748  2002      7775          move.l    D2,D0
0000474A  5280      7776          addq.l    #1,D0
0000474C  4CDF 003C 7777          movem.l   (A7)+,D2/D3/D4/D5
00004750  4E5E      7778          unlk      A6
00004752  4E75      7779          rts
                    7780   _ltoa:
00004754  4E56 0000 7781          link      A6,#0
00004758  48E7 3C00 7782          movem.l   D2/D3/D4/D5,-(A7)
0000475C  242E 0008 7783          move.l    8(A6),D2
00004760  262E 000C 7784          move.l    12(A6),D3
00004764  2A2E 0010 7785          move.l    16(A6),D5
00004768  2803      7786          move.l    D3,D4
0000476A  0C85 0000 7787          cmp.l     #2,D5
0000476E  0002      
00004770  6D08      7788          blt.s     ltoa_3
00004772  0C85 0000 7789          cmp.l     #36,D5
00004776  0024      
00004778  6F06      7790          ble.s     ltoa_1
                    7791   ltoa_3:
0000477A  2003      7792          move.l    D3,D0
0000477C  6000 0052 7793          bra       ltoa_4
                    7794   ltoa_1:
00004780  0C85 0000 7795          cmp.l     #10,D5
00004784  000A      
00004786  6600 0032 7796          bne       ltoa_5
0000478A  0C82 0000 7797          cmp.l     #0,D2
0000478E  0000      
00004790  6C28      7798          bge.s     ltoa_5
00004792  2002      7799          move.l    D2,D0
00004794  4480      7800          neg.l     D0
00004796  2400      7801          move.l    D0,D2
00004798  0C82 0000 7802          cmp.l     #0,D2
0000479C  0000      
0000479E  6C12      7803          bge.s     ltoa_7
000047A0  4879 0000 7804          pea       @itoa_1
000047A4  5DCA      
000047A6  2F03      7805          move.l    D3,-(A7)
000047A8  6100 EC22 7806          bsr       _strcpy
000047AC  504F      7807          addq.w    #8,A7
000047AE  2003      7808          move.l    D3,D0
000047B0  601E      7809          bra.s     ltoa_4
                    7810   ltoa_7:
000047B2  2044      7811          move.l    D4,A0
000047B4  5284      7812          addq.l    #1,D4
000047B6  10BC 002D 7813          move.b    #45,(A0)
                    7814   ltoa_5:
000047BA  2F05      7815          move.l    D5,-(A7)
000047BC  2F02      7816          move.l    D2,-(A7)
000047BE  2F04      7817          move.l    D4,-(A7)
000047C0  6100 FF20 7818          bsr       @itoa_convert
000047C4  DEFC 000C 7819          add.w     #12,A7
000047C8  2800      7820          move.l    D0,D4
000047CA  2044      7821          move.l    D4,A0
000047CC  4210      7822          clr.b     (A0)
000047CE  2003      7823          move.l    D3,D0
                    7824   ltoa_4:
000047D0  4CDF 003C 7825          movem.l   (A7)+,D2/D3/D4/D5
000047D4  4E5E      7826          unlk      A6
000047D6  4E75      7827          rts
                    7828   _ultoa:
000047D8  4E56 0000 7829          link      A6,#0
000047DC  48E7 3800 7830          movem.l   D2/D3/D4,-(A7)
000047E0  262E 0010 7831          move.l    16(A6),D3
000047E4  282E 000C 7832          move.l    12(A6),D4
000047E8  2404      7833          move.l    D4,D2
000047EA  0C83 0000 7834          cmp.l     #2,D3
000047EE  0002      
000047F0  6D08      7835          blt.s     ultoa_3
000047F2  0C83 0000 7836          cmp.l     #36,D3
000047F6  0024      
000047F8  6F04      7837          ble.s     ultoa_1
                    7838   ultoa_3:
000047FA  2004      7839          move.l    D4,D0
000047FC  6018      7840          bra.s     ultoa_4
                    7841   ultoa_1:
000047FE  2F03      7842          move.l    D3,-(A7)
00004800  2F2E 0008 7843          move.l    8(A6),-(A7)
00004804  2F02      7844          move.l    D2,-(A7)
00004806  6100 FEDA 7845          bsr       @itoa_convert
0000480A  DEFC 000C 7846          add.w     #12,A7
0000480E  2400      7847          move.l    D0,D2
00004810  2042      7848          move.l    D2,A0
00004812  4210      7849          clr.b     (A0)
00004814  2004      7850          move.l    D4,D0
                    7851   ultoa_4:
00004816  4CDF 001C 7852          movem.l   (A7)+,D2/D3/D4
0000481A  4E5E      7853          unlk      A6
0000481C  4E75      7854          rts
                    7855   _itoa:
0000481E  4E56 0000 7856          link      A6,#0
00004822  2F2E 0010 7857          move.l    16(A6),-(A7)
00004826  2F2E 000C 7858          move.l    12(A6),-(A7)
0000482A  2F2E 0008 7859          move.l    8(A6),-(A7)
0000482E  6100 FF24 7860          bsr       _ltoa
00004832  DEFC 000C 7861          add.w     #12,A7
00004836  4E5E      7862          unlk      A6
00004838  4E75      7863          rts
                    7864   _strlen:
0000483A  206F 0004 7865          move.l    (4,A7),A0
0000483E  2248      7866          move.l    A0,A1
                    7867   strlen_1:
00004840  4A19      7868          tst.b     (A1)+
00004842  66FC      7869          bne       strlen_1
00004844  2009      7870          move.l    A1,D0
00004846  9088      7871          sub.l     A0,D0
00004848  5380      7872          subq.l    #1,D0
0000484A  4E75      7873          rts
                    7874          section   const
                    7875   
                    7876   @m68kde~1_1:
0000484C  0D0A 00   7877          dc.b      13,10,0
                    7878   @m68kde~1_2:
00004850  0D53 7769 7879          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004854  7463 6865 
00004858  7320 5357 
0000485C  5B        
0000485D  372D 305D 7880          dc.b      55,45,48,93,32,61,32,0
00004861  203D 2000 
                    7881   @m68kde~1_3:
00004866  3000      7882          dc.b      48,0
                    7883   @m68kde~1_4:
00004868  3100      7884          dc.b      49,0
                    7885   @m68kde~1_5:
0000486A  0D0A 4475 7886          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
0000486E  6D70 204D 
00004872  656D 6F72 
00004876  79        
00004877  2042 6C6F 7887          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
0000487B  636B 3A20 
0000487F  3C45 5343 
00004883  3E20      
00004885  746F 2041 7888          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004889  626F 7274 
0000488D  2C20 3C53 
00004891  50        
00004892  4143 453E 7889          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004896  2074 6F20 
0000489A  436F 6E74 
0000489E  69        
0000489F  6E75 6500 7890          dc.b      110,117,101,0
                    7891   @m68kde~1_6:
000048A4  0D0A 456E 7892          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000048A8  7465 7220 
000048AC  5374 6172 
000048B0  74        
000048B1  2041 6464 7893          dc.b      32,65,100,100,114,101,115,115,58,32,0
000048B5  7265 7373 
000048B9  3A20 00   
                    7894   @m68kde~1_7:
000048BC  0D0A 2530 7895          dc.b      13,10,37,48,56,120,32,0
000048C0  3878 2000 
                    7896   @m68kde~1_8:
000048C4  2530 3258 7897          dc.b      37,48,50,88,0
000048C8  00        
                    7898   @m68kde~1_9:
000048CA  2020 00   7899          dc.b      32,32,0
                    7900   @m68kde~1_10:
000048CE  0D0A 4669 7901          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
000048D2  6C6C 204D 
000048D6  656D 6F72 
000048DA  79        
000048DB  2042 6C6F 7902          dc.b      32,66,108,111,99,107,0
000048DF  636B 00   
                    7903   @m68kde~1_11:
000048E2  0D0A 456E 7904          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000048E6  7465 7220 
000048EA  456E 6420 
000048EE  41        
000048EF  6464 7265 7905          dc.b      100,100,114,101,115,115,58,32,0
000048F3  7373 3A20 
000048F7  00        
                    7906   @m68kde~1_12:
000048F8  0D0A 456E 7907          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000048FC  7465 7220 
00004900  4669 6C6C 
00004904  20        
00004905  4461 7461 7908          dc.b      68,97,116,97,58,32,0
00004909  3A20 00   
                    7909   @m68kde~1_13:
0000490C  0D0A 4669 7910          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00004910  6C6C 696E 
00004914  6720 4164 
00004918  64        
00004919  7265 7373 7911          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000491D  6573 205B 
00004921  2425 3038 
00004925  58        
00004926  202D 2024 7912          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
0000492A  2530 3858 
0000492E  5D20 7769 
00004932  7468      
00004934  2024 2530 7913          dc.b      32,36,37,48,50,88,0
00004938  3258 00   
                    7914   @m68kde~1_14:
0000493C  0D0A 5573 7915          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00004940  6520 4879 
00004944  7065 7254 
00004948  65        
00004949  726D 696E 7916          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
0000494D  616C 2074 
00004951  6F20 5365 
00004955  6E64 2054 7917          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004959  6578 7420 
0000495D  4669 6C65 
00004961  2028 2E68 7918          dc.b      32,40,46,104,101,120,41,13,10,0
00004965  6578 290D 
00004969  0A00      
                    7919   @m68kde~1_15:
0000496C  0D0A 4C6F 7920          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004970  6164 2046 
00004974  6169 6C65 
00004978  64        
00004979  2061 7420 7921          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000497D  4164 6472 
00004981  6573 7320 
00004985  3D        
00004986  205B 2425 7922          dc.b      32,91,36,37,48,56,88,93,13,10,0
0000498A  3038 585D 
0000498E  0D0A 00   
                    7923   @m68kde~1_16:
00004992  0D0A 5375 7924          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004996  6363 6573 
0000499A  733A 2044 
0000499E  6F        
0000499F  776E 6C6F 7925          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
000049A3  6164 6564 
000049A7  2025 6420 
000049AB  6279 7465 7926          dc.b      98,121,116,101,115,13,10,0
000049AF  730D 0A00 
                    7927   @m68kde~1_17:
000049B4  0D0A 4578 7928          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
000049B8  616D 696E 
000049BC  6520 616E 
000049C0  64        
000049C1  2043 6861 7929          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
000049C5  6E67 6520 
000049C9  4D65 6D6F 
000049CD  72        
000049CE  7900      7930          dc.b      121,0
                    7931   @m68kde~1_18:
000049D0  0D0A 3C45 7932          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
000049D4  5343 3E20 
000049D8  746F 2053 
000049DC  746F      
000049DE  702C 203C 7933          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000049E2  5350 4143 
000049E6  453E 2074 
000049EA  6F20      
000049EC  4164 7661 7934          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000049F0  6E63 652C 
000049F4  2027 2D27 
000049F8  2074      
000049FA  6F20 476F 7935          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000049FE  2042 6163 
00004A02  6B2C 203C 
00004A06  4441      
00004A08  5441 3E20 7936          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004A0C  746F 2063 
00004A10  6861 6E67 
00004A14  65        
00004A15  00        7937          dc.b      0
                    7938   @m68kde~1_19:
00004A16  0D0A 456E 7939          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004A1A  7465 7220 
00004A1E  4164 6472 
00004A22  65        
00004A23  7373 3A20 7940          dc.b      115,115,58,32,0
00004A27  00        
                    7941   @m68kde~1_20:
00004A28  0D0A 5B25 7942          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00004A2C  3038 785D 
00004A30  203A 2025 
00004A34  3032 78   
00004A37  2020 00   7943          dc.b      32,32,0
                    7944   @m68kde~1_21:
00004A3A  0D0A 5761 7945          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00004A3E  726E 696E 
00004A42  6720 4368 
00004A46  61        
00004A47  6E67 6520 7946          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004A4B  4661 696C 
00004A4F  6564 3A20 
00004A53  57        
00004A54  726F 7465 7947          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004A58  205B 2530 
00004A5C  3278 5D2C 
00004A60  20        
00004A61  5265 6164 7948          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004A65  205B 2530 
00004A69  3278 5D00 
                    7949   @m68kde~1_22:
00004A6E  0A45 7261 7950          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
00004A72  7369 6E67 
00004A76  2E2E 2E0A 
00004A7A  00        
                    7951   @m68kde~1_23:
00004A7C  0D0A 2050 7952          dc.b      13,10,32,80,114,111,103,114,97,109,109,105,110
00004A80  726F 6772 
00004A84  616D 6D69 
00004A88  6E        
00004A89  6720 436F 7953          dc.b      103,32,67,111,109,112,108,101,116,101,33,0
00004A8D  6D70 6C65 
00004A91  7465 2100 
                    7954   @m68kde~1_24:
00004A96  0D0A 204C 7955          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
00004A9A  6F61 6469 
00004A9E  6E67 2050 
00004AA2  72        
00004AA3  6F67 7261 7956          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
00004AA7  6D20 4672 
00004AAB  6F6D 2053 
00004AAF  50        
00004AB0  4920 466C 7957          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
00004AB4  6173 682E 
00004AB8  2E2E 2E00 
                    7958   @m68kde~1_25:
00004ABC  0D0A 2052 7959          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
00004AC0  6561 6420 
00004AC4  4461 7461 
00004AC8  3A20      
00004ACA  2530 3878 7960          dc.b      37,48,56,120,32,10,0
00004ACE  200A 00   
                    7961   @m68kde~1_26:
00004AD2  4949 435F 7962          dc.b      73,73,67,95,67,82,83,82,32,84,114,97,110,115
00004AD6  4352 5352 
00004ADA  2054 7261 
00004ADE  6E73      
00004AE0  6D69 7420 7963          dc.b      109,105,116,32,40,66,105,110,97,114,121,41,58
00004AE4  2842 696E 
00004AE8  6172 7929 
00004AEC  3A        
00004AED  2000      7964          dc.b      32,0
                    7965   @m68kde~1_27:
00004AF0  2564 00   7966          dc.b      37,100,0
                    7967   @m68kde~1_28:
00004AF4  0A00      7968          dc.b      10,0
                    7969   @m68kde~1_29:
00004AF6  0D0A 2041 7970          dc.b      13,10,32,65,100,100,114,101,115,115,58,32,37
00004AFA  6464 7265 
00004AFE  7373 3A20 
00004B02  25        
00004B03  643A 2025 7971          dc.b      100,58,32,37,100,10,0
00004B07  640A 00   
                    7972   @m68kde~1_30:
00004B0A  5265 6164 7973          dc.b      82,101,97,100,32,76,101,110,58,32,37,100,10
00004B0E  204C 656E 
00004B12  3A20 2564 
00004B16  0A        
00004B17  00        7974          dc.b      0
                    7975   @m68kde~1_31:
00004B18  0D0A 2049 7976          dc.b      13,10,32,73,50,67,32,84,101,115,116,0
00004B1C  3243 2054 
00004B20  6573 7400 
                    7977   @m68kde~1_32:
00004B24  0D0A 2053 7978          dc.b      13,10,32,83,116,97,114,116,105,110,103,32,69
00004B28  7461 7274 
00004B2C  696E 6720 
00004B30  45        
00004B31  4550 524F 7979          dc.b      69,80,82,79,77,32,87,114,105,116,101,58,32,87
00004B35  4D20 5772 
00004B39  6974 653A 
00004B3D  2057      
00004B3F  7269 7469 7980          dc.b      114,105,116,105,110,103,32,48,120,37,46,50,120
00004B43  6E67 2030 
00004B47  7825 2E32 
00004B4B  78        
00004B4C  2074 6F20 7981          dc.b      32,116,111,32,97,100,100,114,101,115,115,32
00004B50  6164 6472 
00004B54  6573 7320 
00004B58  3078 3030 7982          dc.b      48,120,48,48,10,0
00004B5C  0A00      
                    7983   @m68kde~1_33:
00004B5E  0D0A 2057 7984          dc.b      13,10,32,87,114,105,116,105,110,103,32,37,100
00004B62  7269 7469 
00004B66  6E67 2025 
00004B6A  64        
00004B6B  2074 6F20 7985          dc.b      32,116,111,32,97,100,100,114,101,115,115,32
00004B6F  6164 6472 
00004B73  6573 7320 
00004B77  2564 0A00 7986          dc.b      37,100,10,0
                    7987   @m68kde~1_34:
00004B7C  5365 7175 7988          dc.b      83,101,113,117,101,110,116,105,97,108,32,82
00004B80  656E 7469 
00004B84  616C 2052 
00004B88  6561 640A 7989          dc.b      101,97,100,10,0
00004B8C  00        
                    7990   @m68kde~1_35:
00004B8E  2425 3038 7991          dc.b      36,37,48,56,88,32,32,0
00004B92  5820 2000 
                    7992   @m68kde~1_36:
00004B96  2000      7993          dc.b      32,0
                    7994   @m68kde~1_37:
00004B98  2E00      7995          dc.b      46,0
                    7996   @m68kde~1_38:
00004B9A  2563 00   7997          dc.b      37,99,0
                    7998   @m68kde~1_39:
00004B9E  00        7999          dc.b      0
                    8000   @m68kde~1_40:
00004BA0  0D0A 0D0A 8001          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004BA4  2044 3020 
00004BA8  3D20 2425 
00004BAC  3038 58   
00004BAF  2020 4130 8002          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004BB3  203D 2024 
00004BB7  2530 3858 
00004BBB  00        
                    8003   @m68kde~1_41:
00004BBC  0D0A 2044 8004          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004BC0  3120 3D20 
00004BC4  2425 3038 
00004BC8  5820 20   
00004BCB  4131 203D 8005          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004BCF  2024 2530 
00004BD3  3858 00   
                    8006   @m68kde~1_42:
00004BD6  0D0A 2044 8007          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004BDA  3220 3D20 
00004BDE  2425 3038 
00004BE2  5820 20   
00004BE5  4132 203D 8008          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004BE9  2024 2530 
00004BED  3858 00   
                    8009   @m68kde~1_43:
00004BF0  0D0A 2044 8010          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004BF4  3320 3D20 
00004BF8  2425 3038 
00004BFC  5820 20   
00004BFF  4133 203D 8011          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004C03  2024 2530 
00004C07  3858 00   
                    8012   @m68kde~1_44:
00004C0A  0D0A 2044 8013          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004C0E  3420 3D20 
00004C12  2425 3038 
00004C16  5820 20   
00004C19  4134 203D 8014          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004C1D  2024 2530 
00004C21  3858 00   
                    8015   @m68kde~1_45:
00004C24  0D0A 2044 8016          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004C28  3520 3D20 
00004C2C  2425 3038 
00004C30  5820 20   
00004C33  4135 203D 8017          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004C37  2024 2530 
00004C3B  3858 00   
                    8018   @m68kde~1_46:
00004C3E  0D0A 2044 8019          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004C42  3620 3D20 
00004C46  2425 3038 
00004C4A  5820 20   
00004C4D  4136 203D 8020          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004C51  2024 2530 
00004C55  3858 00   
                    8021   @m68kde~1_47:
00004C58  0D0A 2044 8022          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004C5C  3720 3D20 
00004C60  2425 3038 
00004C64  5820 20   
00004C67  4137 203D 8023          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004C6B  2024 2530 
00004C6F  3858 00   
                    8024   @m68kde~1_48:
00004C72  0D0A 0D0A 8025          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004C76  5553 5020 
00004C7A  3D20 2425 
00004C7E  3038 58   
00004C81  2020 2841 8026          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004C85  3729 2055 
00004C89  7365 7220 
00004C8D  5350      
00004C8F  00        8027          dc.b      0
                    8028   @m68kde~1_49:
00004C90  0D0A 5353 8029          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004C94  5020 3D20 
00004C98  2425 3038 
00004C9C  5820 20   
00004C9F  2841 3729 8030          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004CA3  2053 7570 
00004CA7  6572 7669 
00004CAB  73        
00004CAC  6F72 2053 8031          dc.b      111,114,32,83,80,0
00004CB0  5000      
                    8032   @m68kde~1_50:
00004CB2  0D0A 2053 8033          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004CB6  5220 3D20 
00004CBA  2425 3034 
00004CBE  5820 20   
00004CC1  2000      8034          dc.b      32,0
                    8035   @m68kde~1_51:
00004CC4  2020 205B 8036          dc.b      32,32,32,91,0
00004CC8  00        
                    8037   @m68kde~1_52:
00004CCA  0D0A 2050 8038          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004CCE  4320 3D20 
00004CD2  2425 3038 
00004CD6  5820 20   
00004CD9  00        8039          dc.b      0
                    8040   @m68kde~1_53:
00004CDA  5B40 2042 8041          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004CDE  5245 414B 
00004CE2  504F 494E 
00004CE6  545D 00   
                    8042   @m68kde~1_54:
00004CEA  0D0A 5750 8043          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004CEE  2564 203D 
00004CF2  2025 7300 
                    8044   @m68kde~1_55:
00004CF6  0D0A 0D0A 8045          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004CFA  0D0A 0D0A 
00004CFE  0D0A 0D0A 
00004D02  5369 6E   
00004D05  676C 6520 8046          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004D09  5374 6570 
00004D0D  2020 3A5B 
00004D11  4F        
00004D12  4E5D 00   8047          dc.b      78,93,0
                    8048   @m68kde~1_56:
00004D16  0D0A 4272 8049          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D1A  6561 6B20 
00004D1E  506F 696E 
00004D22  74        
00004D23  7320 3A5B 8050          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004D27  4469 7361 
00004D2B  626C 6564 
00004D2F  5D        
00004D30  00        8051          dc.b      0
                    8052   @m68kde~1_57:
00004D32  0D0A 5072 8053          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004D36  6573 7320 
00004D3A  3C53 5041 
00004D3E  4345      
00004D40  3E20 746F 8054          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004D44  2045 7865 
00004D48  6375 7465 
00004D4C  20        
00004D4D  4E65 7874 8055          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004D51  2049 6E73 
00004D55  7472 7563 
00004D59  7469 6F6E 8056          dc.b      116,105,111,110,0
00004D5D  00        
                    8057   @m68kde~1_58:
00004D5E  0D0A 5072 8058          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004D62  6573 7320 
00004D66  3C45 5343 
00004D6A  3E20      
00004D6C  746F 2052 8059          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004D70  6573 756D 
00004D74  6520 5072 
00004D78  6F67 7261 8060          dc.b      111,103,114,97,109,0
00004D7C  6D00      
                    8061   @m68kde~1_59:
00004D7E  0D0A 496C 8062          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004D82  6C65 6761 
00004D86  6C20 4461 
00004D8A  74        
00004D8B  6120 5265 8063          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004D8F  6769 7374 
00004D93  6572 203A 
00004D97  20        
00004D98  5573 6520 8064          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004D9C  4430 2D44 
00004DA0  372E 2E2E 
00004DA4  2E2E      
00004DA6  0D0A 00   8065          dc.b      13,10,0
                    8066   @m68kde~1_60:
00004DAA  0D0A 4425 8067          dc.b      13,10,68,37,99,32,61,32,0
00004DAE  6320 3D20 
00004DB2  00        
                    8068   @m68kde~1_61:
00004DB4  0D0A 496C 8069          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004DB8  6C65 6761 
00004DBC  6C20 4164 
00004DC0  64        
00004DC1  7265 7373 8070          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004DC5  2052 6567 
00004DC9  6973 7465 
00004DCD  7220 3A20 8071          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004DD1  5573 6520 
00004DD5  4130 2D41 
00004DD9  372E      
00004DDB  2E2E 2E2E 8072          dc.b      46,46,46,46,13,10,0
00004DDF  0D0A 00   
                    8073   @m68kde~1_62:
00004DE2  0D0A 4125 8074          dc.b      13,10,65,37,99,32,61,32,0
00004DE6  6320 3D20 
00004DEA  00        
                    8075   @m68kde~1_63:
00004DEC  0D0A 5573 8076          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004DF0  6572 2053 
00004DF4  5020 3D20 
00004DF8  00        
                    8077   @m68kde~1_64:
00004DFA  0D0A 496C 8078          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004DFE  6C65 6761 
00004E02  6C20 5265 
00004E06  67        
00004E07  6973 7465 8079          dc.b      105,115,116,101,114,46,46,46,46,0
00004E0B  722E 2E2E 
00004E0F  2E00      
                    8080   @m68kde~1_65:
00004E12  0D0A 5379 8081          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004E16  7374 656D 
00004E1A  2053 5020 
00004E1E  3D        
00004E1F  2000      8082          dc.b      32,0
                    8083   @m68kde~1_66:
00004E22  0D0A 5043 8084          dc.b      13,10,80,67,32,61,32,0
00004E26  203D 2000 
                    8085   @m68kde~1_67:
00004E2A  0D0A 5352 8086          dc.b      13,10,83,82,32,61,32,0
00004E2E  203D 2000 
                    8087   @m68kde~1_68:
00004E32  0D0A 496C 8088          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004E36  6C65 6761 
00004E3A  6C20 5265 
00004E3E  67        
00004E3F  6973 7465 8089          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004E43  723A 2055 
00004E47  7365 2041 
00004E4B  30        
00004E4C  2D41 372C 8090          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004E50  2044 302D 
00004E54  4437 2C20 
00004E58  5353 50   
00004E5B  2C20 5553 8091          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004E5F  502C 2050 
00004E63  4320 6F72 
00004E67  2053      
00004E69  520D 0A00 8092          dc.b      82,13,10,0
                    8093   @m68kde~1_69:
00004E6E  0D0A 0D0A 8094          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004E72  4E75 6D20 
00004E76  2020 2020 
00004E7A  4164      
00004E7C  6472 6573 8095          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004E80  7320 2020 
00004E84  2020 2049 
00004E88  6E        
00004E89  7374 7275 8096          dc.b      115,116,114,117,99,116,105,111,110,0
00004E8D  6374 696F 
00004E91  6E00      
                    8097   @m68kde~1_70:
00004E94  0D0A 2D2D 8098          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004E98  2D20 2020 
00004E9C  2020 2D2D 
00004EA0  2D2D 2D   
00004EA3  2D2D 2D2D 8099          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004EA7  2020 2020 
00004EAB  2D2D 2D2D 
00004EAF  2D2D 2D   
00004EB2  2D2D 2D2D 8100          dc.b      45,45,45,45,0
00004EB6  00        
                    8101   @m68kde~1_71:
00004EB8  0D0A 4E6F 8102          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004EBC  2042 7265 
00004EC0  616B 506F 
00004EC4  69        
00004EC5  6E74 7320 8103          dc.b      110,116,115,32,83,101,116,0
00004EC9  5365 7400 
                    8104   @m68kde~1_72:
00004ECE  0D0A 2533 8105          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004ED2  6420 2020 
00004ED6  2020 2425 
00004EDA  3038 78   
00004EDD  00        8106          dc.b      0
                    8107   @m68kde~1_73:
00004EDE  0D0A 4E75 8108          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004EE2  6D20 2020 
00004EE6  2020 4164 
00004EEA  6472      
00004EEC  6573 7300 8109          dc.b      101,115,115,0
                    8110   @m68kde~1_74:
00004EF0  0D0A 2D2D 8111          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004EF4  2D20 2020 
00004EF8  2020 2D2D 
00004EFC  2D2D 2D   
00004EFF  2D2D 2D2D 8112          dc.b      45,45,45,45,0
00004F03  00        
                    8113   @m68kde~1_75:
00004F04  0D0A 4E6F 8114          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004F08  2057 6174 
00004F0C  6368 506F 
00004F10  69        
00004F11  6E74 7320 8115          dc.b      110,116,115,32,83,101,116,0
00004F15  5365 7400 
                    8116   @m68kde~1_76:
00004F1A  0D0A 456E 8117          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004F1E  7465 7220 
00004F22  4272 6561 
00004F26  6B        
00004F27  2050 6F69 8118          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004F2B  6E74 204E 
00004F2F  756D 6265 
00004F33  72        
00004F34  3A20 00   8119          dc.b      58,32,0
                    8120   @m68kde~1_77:
00004F38  0D0A 496C 8121          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004F3C  6C65 6761 
00004F40  6C20 5261 
00004F44  6E        
00004F45  6765 203A 8122          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004F49  2055 7365 
00004F4D  2030 202D 
00004F51  2037      
00004F53  00        8123          dc.b      0
                    8124   @m68kde~1_78:
00004F54  0D0A 4272 8125          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004F58  6561 6B20 
00004F5C  506F 696E 
00004F60  74        
00004F61  2043 6C65 8126          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004F65  6172 6564 
00004F69  2E2E 2E2E 
00004F6D  2E        
00004F6E  0D0A 00   8127          dc.b      13,10,0
                    8128   @m68kde~1_79:
00004F72  0D0A 4272 8129          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004F76  6561 6B20 
00004F7A  506F 696E 
00004F7E  74        
00004F7F  2077 6173 8130          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004F83  6E27 7420 
00004F87  5365 742E 
00004F8B  2E        
00004F8C  2E2E 2E00 8131          dc.b      46,46,46,0
                    8132   @m68kde~1_80:
00004F90  0D0A 456E 8133          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004F94  7465 7220 
00004F98  5761 7463 
00004F9C  68        
00004F9D  2050 6F69 8134          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004FA1  6E74 204E 
00004FA5  756D 6265 
00004FA9  72        
00004FAA  3A20 00   8135          dc.b      58,32,0
                    8136   @m68kde~1_81:
00004FAE  0D0A 5761 8137          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004FB2  7463 6820 
00004FB6  506F 696E 
00004FBA  74        
00004FBB  2043 6C65 8138          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004FBF  6172 6564 
00004FC3  2E2E 2E2E 
00004FC7  2E        
00004FC8  0D0A 00   8139          dc.b      13,10,0
                    8140   @m68kde~1_82:
00004FCC  0D0A 5761 8141          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004FD0  7463 6820 
00004FD4  506F 696E 
00004FD8  74        
00004FD9  2057 6173 8142          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004FDD  206E 6F74 
00004FE1  2053 6574 
00004FE5  2E        
00004FE6  2E2E 2E2E 8143          dc.b      46,46,46,46,0
00004FEA  00        
                    8144   @m68kde~1_83:
00004FEC  0D0A 4E6F 8145          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004FF0  2046 5245 
00004FF4  4520 4272 
00004FF8  6561      
00004FFA  6B20 506F 8146          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004FFE  696E 7473 
00005002  2E2E 2E2E 
00005006  2E        
00005007  00        8147          dc.b      0
                    8148   @m68kde~1_84:
00005008  0D0A 4272 8149          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000500C  6561 6B20 
00005010  506F 696E 
00005014  74        
00005015  2041 6464 8150          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005019  7265 7373 
0000501D  3A20 00   
                    8151   @m68kde~1_85:
00005020  0D0A 4572 8152          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00005024  726F 7220 
00005028  3A20 4272 
0000502C  65        
0000502D  616B 2050 8153          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00005031  6F69 6E74 
00005035  7320 4341 
00005039  4E        
0000503A  4E4F 5420 8154          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000503E  6265 2073 
00005042  6574 2061 
00005046  74        
00005047  204F 4444 8155          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
0000504B  2061 6464 
0000504F  7265 7373 
00005053  65        
00005054  7300      8156          dc.b      115,0
                    8157   @m68kde~1_86:
00005056  0D0A 4572 8158          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000505A  726F 7220 
0000505E  3A20 4272 
00005062  65        
00005063  616B 2050 8159          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00005067  6F69 6E74 
0000506B  7320 4341 
0000506F  4E        
00005070  4E4F 5420 8160          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00005074  6265 2073 
00005078  6574 2066 
0000507C  6F        
0000507D  7220 524F 8161          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00005081  4D20 696E 
00005085  2052 616E 
00005089  67        
0000508A  6520 3A20 8162          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
0000508E  5B24 302D 
00005092  2430 3030 
00005096  3037 46   
00005099  4646 5D00 8163          dc.b      70,70,93,0
                    8164   @m68kde~1_87:
0000509E  0D0A 4572 8165          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000050A2  726F 723A 
000050A6  2042 7265 
000050AA  61        
000050AB  6B20 506F 8166          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000050AF  696E 7420 
000050B3  416C 7265 
000050B7  6164 7920 8167          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000050BB  4578 6973 
000050BF  7473 2061 
000050C3  74        
000050C4  2041 6464 8168          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000050C8  7265 7373 
000050CC  203A 2025 
000050D0  30        
000050D1  3878 0D0A 8169          dc.b      56,120,13,10,0
000050D5  00        
                    8170   @m68kde~1_88:
000050D6  0D0A 4272 8171          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000050DA  6561 6B20 
000050DE  506F 696E 
000050E2  74        
000050E3  2053 6574 8172          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000050E7  2061 7420 
000050EB  4164 6472 
000050EF  65        
000050F0  7373 3A20 8173          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000050F4  5B24 2530 
000050F8  3878 5D00 
                    8174   @m68kde~1_89:
000050FC  0D0A 4E6F 8175          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00005100  2046 5245 
00005104  4520 5761 
00005108  7463      
0000510A  6820 506F 8176          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
0000510E  696E 7473 
00005112  2E2E 2E2E 
00005116  2E        
00005117  00        8177          dc.b      0
                    8178   @m68kde~1_90:
00005118  0D0A 5761 8179          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000511C  7463 6820 
00005120  506F 696E 
00005124  74        
00005125  2041 6464 8180          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005129  7265 7373 
0000512D  3A20 00   
                    8181   @m68kde~1_91:
00005130  0D0A 4572 8182          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00005134  726F 723A 
00005138  2057 6174 
0000513C  63        
0000513D  6820 506F 8183          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00005141  696E 7420 
00005145  416C 7265 
00005149  6164 7920 8184          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
0000514D  5365 7420 
00005151  6174 2041 
00005155  64        
00005156  6472 6573 8185          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
0000515A  7320 3A20 
0000515E  2530 3878 
00005162  0D        
00005163  0A00      8186          dc.b      10,0
                    8187   @m68kde~1_92:
00005166  0D0A 5761 8188          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000516A  7463 6820 
0000516E  506F 696E 
00005172  74        
00005173  2053 6574 8189          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005177  2061 7420 
0000517B  4164 6472 
0000517F  65        
00005180  7373 3A20 8190          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005184  5B24 2530 
00005188  3878 5D00 
                    8191   @m68kde~1_93:
0000518C  0D0A 0D0A 8192          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00005190  0D0A 0D0A 
00005194  4042 5245 
00005198  414B 50   
0000519B  4F49 4E54 8193          dc.b      79,73,78,84,0
0000519F  00        
                    8194   @m68kde~1_94:
000051A0  0D0A 5369 8195          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000051A4  6E67 6C65 
000051A8  2053 7465 
000051AC  70        
000051AD  203A 205B 8196          dc.b      32,58,32,91,79,78,93,0
000051B1  4F4E 5D00 
                    8197   @m68kde~1_95:
000051B6  0D0A 4272 8198          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000051BA  6561 6B50 
000051BE  6F69 6E74 
000051C2  73        
000051C3  203A 205B 8199          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000051C7  456E 6162 
000051CB  6C65 645D 
000051CF  00        
                    8200   @m68kde~1_96:
000051D0  0D0A 5072 8201          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000051D4  6573 7320 
000051D8  3C45 5343 
000051DC  3E20      
000051DE  746F 2052 8202          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000051E2  6573 756D 
000051E6  6520 5573 
000051EA  6572 2050 8203          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
000051EE  726F 6772 
000051F2  616D 0D0A 
000051F6  00        
                    8204   @m68kde~1_97:
000051F8  0D0A 556E 8205          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000051FC  6B6E 6F77 
00005200  6E20 436F 
00005204  6D        
00005205  6D61 6E64 8206          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00005209  2E2E 2E2E 
0000520D  2E0D 0A00 
                    8207   @m68kde~1_98:
00005212  0D0A 5072 8208          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00005216  6F67 7261 
0000521A  6D20 456E 
0000521E  64        
0000521F  6564 2028 8209          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00005223  5452 4150 
00005227  2023 3135 
0000522B  292E      
0000522D  2E2E 2E00 8210          dc.b      46,46,46,0
                    8211   @m68kde~1_99:
00005232  0D0A 4B69 8212          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00005236  6C6C 2041 
0000523A  6C6C 2042 
0000523E  72        
0000523F  6561 6B20 8213          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00005243  506F 696E 
00005247  7473 2E2E 
0000524B  2E        
0000524C  2879 2F6E 8214          dc.b      40,121,47,110,41,63,0
00005250  293F 00   
                    8215   @m68kde~1_100:
00005254  0D0A 4B69 8216          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00005258  6C6C 2041 
0000525C  6C6C 2057 
00005260  61        
00005261  7463 6820 8217          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00005265  506F 696E 
00005269  7473 2E2E 
0000526D  2E        
0000526E  2879 2F6E 8218          dc.b      40,121,47,110,41,63,0
00005272  293F 00   
                    8219   @m68kde~1_101:
00005276  0D0A 2D2D 8220          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000527A  2D2D 2D2D 
0000527E  2D2D 2D2D 
00005282  2D2D 2D   
00005285  2D2D 2D2D 8221          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005289  2D2D 2D2D 
0000528D  2D2D 2D2D 
00005291  2D2D 2D   
00005294  2D2D 2D2D 8222          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005298  2D2D 2D2D 
0000529C  2D2D 2D2D 
000052A0  2D2D 2D   
000052A3  2D2D 2D2D 8223          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000052A7  2D2D 2D2D 
000052AB  2D2D 2D2D 
000052AF  2D2D 2D   
000052B2  2D2D 2D2D 8224          dc.b      45,45,45,45,45,45,0
000052B6  2D2D 00   
                    8225   @m68kde~1_102:
000052BA  0D0A 2020 8226          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000052BE  4465 6275 
000052C2  6767 6572 
000052C6  20        
000052C7  436F 6D6D 8227          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
000052CB  616E 6420 
000052CF  5375 6D6D 
000052D3  6172 7900 8228          dc.b      97,114,121,0
                    8229   @m68kde~1_103:
000052D8  0D0A 2020 8230          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
000052DC  2E28 7265 
000052E0  6729 2020 
000052E4  2020      
000052E6  2020 202D 8231          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
000052EA  2043 6861 
000052EE  6E67 6520 
000052F2  5265      
000052F4  6769 7374 8232          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
000052F8  6572 733A 
000052FC  2065 2E67 
00005300  2041 302D 8233          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00005304  4137 2C44 
00005308  302D 4437 
0000530C  2C50 43   
0000530F  2C53 5350 8234          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00005313  2C55 5350 
00005317  2C53 5200 
                    8235   @m68kde~1_104:
0000531C  0D0A 2020 8236          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00005320  4244 2F42 
00005324  532F 4243 
00005328  2F42 4B   
0000532B  2020 2D20 8237          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
0000532F  4272 6561 
00005333  6B20 506F 
00005337  69        
00005338  6E74 3A20 8238          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
0000533C  4469 7370 
00005340  6C61 792F 
00005344  53        
00005345  6574 2F43 8239          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00005349  6C65 6172 
0000534D  2F4B 696C 
00005351  6C        
00005352  00        8240          dc.b      0
                    8241   @m68kde~1_105:
00005354  0D0A 2020 8242          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00005358  4320 2020 
0000535C  2020 2020 
00005360  2020 20   
00005363  2020 2D20 8243          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00005367  436F 7079 
0000536B  2050 726F 
0000536F  67        
00005370  7261 6D20 8244          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00005374  6672 6F6D 
00005378  2046 6C61 
0000537C  73        
0000537D  6820 746F 8245          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00005381  204D 6169 
00005385  6E20 4D65 
00005389  6D        
0000538A  6F72 7900 8246          dc.b      111,114,121,0
                    8247   @m68kde~1_106:
0000538E  0D0A 2020 8248          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00005392  4420 2020 
00005396  2020 2020 
0000539A  2020 20   
0000539D  2020 2D20 8249          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
000053A1  4475 6D70 
000053A5  204D 656D 
000053A9  6F        
000053AA  7279 2043 8250          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000053AE  6F6E 7465 
000053B2  6E74 7320 
000053B6  746F 2053 8251          dc.b      116,111,32,83,99,114,101,101,110,0
000053BA  6372 6565 
000053BE  6E00      
                    8252   @m68kde~1_107:
000053C0  0D0A 2020 8253          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
000053C4  4520 2020 
000053C8  2020 2020 
000053CC  2020 20   
000053CF  2020 2D20 8254          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
000053D3  456E 7465 
000053D7  7220 5374 
000053DB  72        
000053DC  696E 6720 8255          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
000053E0  696E 746F 
000053E4  204D 656D 
000053E8  6F72 7900 8256          dc.b      111,114,121,0
                    8257   @m68kde~1_108:
000053EC  0D0A 2020 8258          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
000053F0  4620 2020 
000053F4  2020 2020 
000053F8  2020 20   
000053FB  2020 2D20 8259          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
000053FF  4669 6C6C 
00005403  204D 656D 
00005407  6F        
00005408  7279 2077 8260          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
0000540C  6974 6820 
00005410  4461 7461 
00005414  00        
                    8261   @m68kde~1_109:
00005416  0D0A 2020 8262          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
0000541A  4720 2020 
0000541E  2020 2020 
00005422  2020 20   
00005425  2020 2D20 8263          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00005429  476F 2050 
0000542D  726F 6772 
00005431  61        
00005432  6D20 5374 8264          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00005436  6172 7469 
0000543A  6E67 2061 
0000543E  74        
0000543F  2041 6464 8265          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00005443  7265 7373 
00005447  3A20 2425 
0000544B  30        
0000544C  3858 00   8266          dc.b      56,88,0
                    8267   @m68kde~1_110:
00005450  0D0A 2020 8268          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00005454  4C20 2020 
00005458  2020 2020 
0000545C  2020 20   
0000545F  2020 2D20 8269          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00005463  4C6F 6164 
00005467  2050 726F 
0000546B  67        
0000546C  7261 6D20 8270          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00005470  282E 4845 
00005474  5820 6669 
00005478  6C        
00005479  6529 2066 8271          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
0000547D  726F 6D20 
00005481  4C61 7074 
00005485  6F        
00005486  7000      8272          dc.b      112,0
                    8273   @m68kde~1_111:
00005488  0D0A 2020 8274          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
0000548C  4D20 2020 
00005490  2020 2020 
00005494  2020 20   
00005497  2020 2D20 8275          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000549B  4D65 6D6F 
0000549F  7279 2045 
000054A3  78        
000054A4  616D 696E 8276          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
000054A8  6520 616E 
000054AC  6420 4368 
000054B0  61        
000054B1  6E67 6500 8277          dc.b      110,103,101,0
                    8278   @m68kde~1_112:
000054B6  0D0A 2020 8279          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
000054BA  5020 2020 
000054BE  2020 2020 
000054C2  2020 20   
000054C5  2020 2D20 8280          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
000054C9  5072 6F67 
000054CD  7261 6D20 
000054D1  46        
000054D2  6C61 7368 8281          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
000054D6  204D 656D 
000054DA  6F72 7920 
000054DE  7769 7468 8282          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
000054E2  2055 7365 
000054E6  7220 5072 
000054EA  6F67 7261 8283          dc.b      111,103,114,97,109,0
000054EE  6D00      
                    8284   @m68kde~1_113:
000054F0  0D0A 2020 8285          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
000054F4  5220 2020 
000054F8  2020 2020 
000054FC  2020 20   
000054FF  2020 2D20 8286          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00005503  4469 7370 
00005507  6C61 7920 
0000550B  36        
0000550C  3830 3030 8287          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00005510  2052 6567 
00005514  6973 7465 
00005518  72        
00005519  7300      8288          dc.b      115,0
                    8289   @m68kde~1_114:
0000551C  0D0A 2020 8290          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00005520  5320 2020 
00005524  2020 2020 
00005528  2020 20   
0000552B  2020 2D20 8291          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
0000552F  546F 6767 
00005533  6C65 204F 
00005537  4E        
00005538  2F4F 4646 8292          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
0000553C  2053 696E 
00005540  676C 6520 
00005544  53        
00005545  7465 7020 8293          dc.b      116,101,112,32,77,111,100,101,0
00005549  4D6F 6465 
0000554D  00        
                    8294   @m68kde~1_115:
0000554E  0D0A 2020 8295          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00005552  544D 2020 
00005556  2020 2020 
0000555A  2020 20   
0000555D  2020 2D20 8296          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00005561  5465 7374 
00005565  204D 656D 
00005569  6F        
0000556A  7279 00   8297          dc.b      114,121,0
                    8298   @m68kde~1_116:
0000556E  0D0A 2020 8299          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00005572  5453 2020 
00005576  2020 2020 
0000557A  2020 20   
0000557D  2020 2D20 8300          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00005581  5465 7374 
00005585  2053 7769 
00005589  74        
0000558A  6368 6573 8301          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
0000558E  3A20 5357 
00005592  372D 3000 
                    8302   @m68kde~1_117:
00005596  0D0A 2020 8303          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000559A  5444 2020 
0000559E  2020 2020 
000055A2  2020 20   
000055A5  2020 2D20 8304          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
000055A9  5465 7374 
000055AD  2044 6973 
000055B1  70        
000055B2  6C61 7973 8305          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
000055B6  3A20 4C45 
000055BA  4473 2061 
000055BE  6E        
000055BF  6420 372D 8306          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
000055C3  5365 676D 
000055C7  656E 7400 
                    8307   @m68kde~1_118:
000055CC  0D0A 2020 8308          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
000055D0  5744 2F57 
000055D4  532F 5743 
000055D8  2F57 4B   
000055DB  2020 2D20 8309          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
000055DF  5761 7463 
000055E3  6820 506F 
000055E7  696E      
000055E9  743A 2044 8310          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
000055ED  6973 706C 
000055F1  6179 2F53 
000055F5  65        
000055F6  742F 436C 8311          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
000055FA  6561 722F 
000055FE  4B69 6C6C 
00005602  00        
                    8312   @m68kde~1_119:
00005604  0D0A 2300 8313          dc.b      13,10,35,0
                    8314   @m68kde~1_120:
00005608  0D0A 5072 8315          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
0000560C  6F67 7261 
00005610  6D20 5275 
00005614  6E        
00005615  6E69 6E67 8316          dc.b      110,105,110,103,46,46,46,46,46,0
00005619  2E2E 2E2E 
0000561D  2E00      
                    8317   @m68kde~1_121:
00005620  0D0A 5072 8318          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00005624  6573 7320 
00005628  3C52 4553 
0000562C  4554      
0000562E  3E20 6275 8319          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00005632  7474 6F6E 
00005636  203C 4B65 
0000563A  79        
0000563B  303E 206F 8320          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
0000563F  6E20 4445 
00005643  3120 746F 
00005647  2073      
00005649  746F 7000 8321          dc.b      116,111,112,0
                    8322   @m68kde~1_122:
0000564E  0D0A 4572 8323          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00005652  726F 723A 
00005656  2050 7265 
0000565A  73        
0000565B  7320 2747 8324          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
0000565F  2720 6669 
00005663  7273 7420 
00005667  74        
00005668  6F20 7374 8325          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
0000566C  6172 7420 
00005670  7072 6F67 
00005674  7261 6D00 8326          dc.b      114,97,109,0
                    8327   @m68kde~1_123:
00005678  0D0A 5369 8328          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000567C  6E67 6C65 
00005680  2053 7465 
00005684  70        
00005685  2020 3A5B 8329          dc.b      32,32,58,91,79,78,93,0
00005689  4F4E 5D00 
                    8330   @m68kde~1_124:
0000568E  0D0A 5072 8331          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00005692  6573 7320 
00005696  2747 2720 
0000569A  74        
0000569B  6F20 5472 8332          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
0000569F  6163 6520 
000056A3  5072 6F67 
000056A7  72        
000056A8  616D 2066 8333          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
000056AC  726F 6D20 
000056B0  6164 6472 
000056B4  6573 7320 8334          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000056B8  2425 582E 
000056BC  2E2E 2E2E 
000056C0  00        
                    8335   @m68kde~1_125:
000056C2  0D0A 5075 8336          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
000056C6  7368 203C 
000056CA  5245 5345 
000056CE  5420      
000056D0  4275 7474 8337          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
000056D4  6F6E 3E20 
000056D8  746F 2053 
000056DC  74        
000056DD  6F70 2E2E 8338          dc.b      111,112,46,46,46,46,46,0
000056E1  2E2E 2E00 
                    8339   @m68kde~1_126:
000056E6  0D0A 5369 8340          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000056EA  6E67 6C65 
000056EE  2053 7465 
000056F2  70        
000056F3  203A 205B 8341          dc.b      32,58,32,91,79,70,70,93,0
000056F7  4F46 465D 
000056FB  00        
                    8342   @m68kde~1_127:
000056FC  0D0A 4272 8343          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005700  6561 6B20 
00005704  506F 696E 
00005708  74        
00005709  7320 3A5B 8344          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
0000570D  456E 6162 
00005711  6C65 645D 
00005715  00        
                    8345   @m68kde~1_128:
00005716  0D0A 5072 8346          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000571A  6573 7320 
0000571E  3C45 5343 
00005722  3E20      
00005724  746F 2052 8347          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005728  6573 756D 
0000572C  6520 5573 
00005730  6572 2050 8348          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00005734  726F 6772 
00005738  616D 2E2E 
0000573C  2E        
0000573D  2E2E 00   8349          dc.b      46,46,0
                    8350   @m68kde~1_129:
00005740  0D0A 5369 8351          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005744  6E67 6C65 
00005748  2053 7465 
0000574C  70        
0000574D  2020 3A5B 8352          dc.b      32,32,58,91,79,70,70,93,0
00005751  4F46 465D 
00005755  00        
                    8353   @m68kde~1_130:
00005756  0D0A 0D0A 8354          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000575A  5072 6F67 
0000575E  7261 6D20 
00005762  41        
00005763  424F 5254 8355          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00005767  2021 2121 
0000576B  2121 210D 
0000576F  0A00      
                    8356   @m68kde~1_131:
00005772  2573 0D0A 8357          dc.b      37,115,13,10,0
00005776  00        
                    8358   @m68kde~1_132:
00005778  0D0A 0D0A 8359          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000577C  5072 6F67 
00005780  7261 6D20 
00005784  41        
00005785  424F 5254 8360          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005789  2021 2121 
0000578D  2121 00   
                    8361   @m68kde~1_133:
00005790  0D0A 556E 8362          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005794  6861 6E64 
00005798  6C65 6420 
0000579C  49        
0000579D  6E74 6572 8363          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
000057A1  7275 7074 
000057A5  3A20 4952 
000057A9  5125 6420 8364          dc.b      81,37,100,32,33,33,33,33,33,0
000057AD  2121 2121 
000057B1  2100      
                    8365   @m68kde~1_134:
000057B4  4144 4452 8366          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000057B8  4553 5320 
000057BC  4552 524F 
000057C0  523A 20   
000057C3  3136 206F 8367          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000057C7  7220 3332 
000057CB  2042 6974 
000057CF  2054      
000057D1  7261 6E73 8368          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
000057D5  6665 7220 
000057D9  746F 2F66 
000057DD  726F 6D20 8369          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000057E1  616E 204F 
000057E5  4444 2041 
000057E9  64        
000057EA  6472 6573 8370          dc.b      100,114,101,115,115,46,46,46,46,0
000057EE  732E 2E2E 
000057F2  2E00      
                    8371   @m68kde~1_135:
000057F4  556E 6861 8372          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000057F8  6E64 6C65 
000057FC  6420 5472 
00005800  6170 2021 8373          dc.b      97,112,32,33,33,33,33,33,0
00005804  2121 2121 
00005808  00        
                    8374   @m68kde~1_136:
0000580A  4255 5320 8375          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000580E  4572 726F 
00005812  7221 00   
                    8376   @m68kde~1_137:
00005816  4144 4452 8377          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000581A  4553 5320 
0000581E  4572 726F 
00005822  7221      
00005824  00        8378          dc.b      0
                    8379   @m68kde~1_138:
00005826  494C 4C45 8380          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000582A  4741 4C20 
0000582E  494E 5354 
00005832  5255 43   
00005835  5449 4F4E 8381          dc.b      84,73,79,78,0
00005839  00        
                    8382   @m68kde~1_139:
0000583A  4449 5649 8383          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
0000583E  4445 2042 
00005842  5920 5A45 
00005846  524F 00   
                    8384   @m68kde~1_140:
0000584A  2743 484B 8385          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
0000584E  2720 494E 
00005852  5354 5255 
00005856  4354 49   
00005859  4F4E 00   8386          dc.b      79,78,0
                    8387   @m68kde~1_141:
0000585C  5452 4150 8388          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00005860  5620 494E 
00005864  5354 5255 
00005868  4354 49   
0000586B  4F4E 00   8389          dc.b      79,78,0
                    8390   @m68kde~1_142:
0000586E  5052 4956 8391          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00005872  494C 4547 
00005876  4520 5649 
0000587A  4F4C 41   
0000587D  5449 4F4E 8392          dc.b      84,73,79,78,0
00005881  00        
                    8393   @m68kde~1_143:
00005882  554E 494E 8394          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005886  4954 4941 
0000588A  4C49 5345 
0000588E  4420 49   
00005891  5251 00   8395          dc.b      82,81,0
                    8396   @m68kde~1_144:
00005894  5350 5552 8397          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005898  494F 5553 
0000589C  2049 5251 
000058A0  00        
                    8398   @m68kde~1_145:
000058A2  0D0A 5374 8399          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000058A6  6172 7420 
000058AA  4164 6472 
000058AE  65        
000058AF  7373 2069 8400          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000058B3  6E20 4D65 
000058B7  6D6F 7279 
000058BB  3A20 00   8401          dc.b      58,32,0
                    8402   @m68kde~1_146:
000058BE  0D0A 456E 8403          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000058C2  7465 7220 
000058C6  5374 7269 
000058CA  6E        
000058CB  6720 2845 8404          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000058CF  5343 2074 
000058D3  6F20 656E 
000058D7  64        
000058D8  2920 3A00 8405          dc.b      41,32,58,0
                    8406   @m68kde~1_147:
000058DC  0A45 6E74 8407          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
000058E0  6572 2077 
000058E4  6861 7420 
000058E8  73        
000058E9  697A 6520 8408          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
000058ED  6F66 206D 
000058F1  656D 6F72 
000058F5  7920 796F 8409          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
000058F9  7520 7761 
000058FD  6E74 2074 
00005901  6F20 7265 8410          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00005905  6164 2F77 
00005909  7269 7465 
0000590D  0A20 4279 8411          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
00005911  7465 203D 
00005915  2030 0A20 
00005919  576F      
0000591B  7264 203D 8412          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
0000591F  2031 0A20 
00005923  4C6F 6E67 
00005927  20        
00005928  576F 7264 8413          dc.b      87,111,114,100,32,61,32,50,10,0
0000592C  203D 2032 
00005930  0A00      
                    8414   @m68kde~1_148:
00005932  0A45 6E74 8415          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005936  6572 2077 
0000593A  6869 6368 
0000593E  2064 6174 8416          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005942  6120 7061 
00005946  7474 6572 
0000594A  6E        
0000594B  2079 6F75 8417          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000594F  2077 616E 
00005953  7420 746F 
00005957  2077 7269 8418          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000595B  7465 2069 
0000595F  6E74 6F20 
00005963  6D65 6D6F 8419          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
00005967  7279 0A20 
0000596B  3078 3030 
0000596F  20        
00005970  3D20 300A 8420          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
00005974  2030 7842 
00005978  3220 3D20 
0000597C  310A 20   
0000597F  3078 4333 8421          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
00005983  203D 2032 
00005987  0A20 3078 
0000598B  4434      
0000598D  203D 2033 8422          dc.b      32,61,32,51,10,0
00005991  0A00      
                    8423   @m68kde~1_149:
00005994  0A45 6E74 8424          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005998  6572 2077 
0000599C  6869 6368 
000059A0  2064 6174 8425          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000059A4  6120 7061 
000059A8  7474 6572 
000059AC  6E        
000059AD  2079 6F75 8426          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000059B1  2077 616E 
000059B5  7420 746F 
000059B9  2077 7269 8427          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000059BD  7465 2069 
000059C1  6E74 6F20 
000059C5  6D65 6D6F 8428          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000059C9  7279 0A20 
000059CD  3078 3030 
000059D1  30        
000059D2  3020 3D20 8429          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
000059D6  300A 2030 
000059DA  7831 3233 
000059DE  3420 3D   
000059E1  2031 0A20 8430          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
000059E5  3078 4131 
000059E9  4232 203D 
000059ED  2032 0A   
000059F0  2030 7843 8431          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
000059F4  3344 3420 
000059F8  3D20 330A 
000059FC  00        
                    8432   @m68kde~1_150:
000059FE  0A45 6E74 8433          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005A02  6572 2077 
00005A06  6869 6368 
00005A0A  2064 6174 8434          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005A0E  6120 7061 
00005A12  7474 6572 
00005A16  6E        
00005A17  2079 6F75 8435          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005A1B  2077 616E 
00005A1F  7420 746F 
00005A23  2077 7269 8436          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005A27  7465 2069 
00005A2B  6E74 6F20 
00005A2F  6D65 6D6F 8437          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005A33  7279 0A20 
00005A37  3078 3030 
00005A3B  30        
00005A3C  305F 3030 8438          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
00005A40  3030 203D 
00005A44  2030 0A20 
00005A48  3078 41   
00005A4B  4142 425F 8439          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
00005A4F  4343 4444 
00005A53  203D 2031 
00005A57  0A20 30   
00005A5A  7831 3132 8440          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
00005A5E  325F 3333 
00005A62  3434 203D 
00005A66  2032 0A   
00005A69  2030 7837 8441          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
00005A6D  3635 345F 
00005A71  3332 3130 
00005A75  203D 20   
00005A78  330A 00   8442          dc.b      51,10,0
                    8443   @m68kde~1_151:
00005A7C  0A50 726F 8444          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
00005A80  7669 6465 
00005A84  2053 7461 
00005A88  72        
00005A89  7420 4164 8445          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
00005A8D  6472 6573 
00005A91  7320 696E 
00005A95  2068 6578 8446          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
00005A99  2028 646F 
00005A9D  206E 6F74 
00005AA1  2075 7365 8447          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
00005AA5  2030 7820 
00005AA9  7072 6566 
00005AAD  6978 290A 8448          dc.b      105,120,41,10,48,120,0
00005AB1  3078 00   
                    8449   @m68kde~1_152:
00005AB4  0A50 726F 8450          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
00005AB8  7669 6465 
00005ABC  2045 6E64 
00005AC0  2041 6464 8451          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
00005AC4  7265 7373 
00005AC8  2069 6E20 
00005ACC  6865 7820 8452          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
00005AD0  2864 6F20 
00005AD4  6E6F 7420 
00005AD8  7573 6520 8453          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
00005ADC  3078 2070 
00005AE0  7265 6669 
00005AE4  7829 0A30 8454          dc.b      120,41,10,48,120,0
00005AE8  7800      
                    8455   @m68kde~1_153:
00005AEA  0A53 7461 8456          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
00005AEE  7274 2041 
00005AF2  6464 7265 
00005AF6  73        
00005AF7  7320 3078 8457          dc.b      115,32,48,120,37,48,56,120,10,0
00005AFB  2530 3878 
00005AFF  0A00      
                    8458   @m68kde~1_154:
00005B02  0A45 6E64 8459          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
00005B06  2041 6464 
00005B0A  7265 7373 
00005B0E  3A20 3078 8460          dc.b      58,32,48,120,37,48,56,120,10,0
00005B12  2530 3878 
00005B16  0A00      
                    8461   @m68kde~1_155:
00005B18  4552 524F 8462          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
00005B1C  522E 2E2E 
00005B20  2041 6464 
00005B24  7265      
00005B26  7373 2030 8463          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
00005B2A  7825 7820 
00005B2E  6973 2062 
00005B32  65        
00005B33  796F 6E64 8464          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005B37  2074 6865 
00005B3B  206D 656D 
00005B3F  6F72 7920 8465          dc.b      111,114,121,32,114,97,110,103,101,10,0
00005B43  7261 6E67 
00005B47  650A 00   
                    8466   @m68kde~1_156:
00005B4A  4552 524F 8467          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
00005B4E  522E 2E2E 
00005B52  2056 616C 
00005B56  7565      
00005B58  2077 7269 8468          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
00005B5C  7474 656E 
00005B60  2074 6F20 
00005B64  6164 6472 8469          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00005B68  6573 7320 
00005B6C  3078 2578 
00005B70  203D 3D20 8470          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00005B74  3078 2578 
00005B78  2E20 5661 
00005B7C  6C75      
00005B7E  6520 4578 8471          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
00005B82  7065 6374 
00005B86  6564 3A20 
00005B8A  30        
00005B8B  7825 780A 8472          dc.b      120,37,120,10,0
00005B8F  00        
                    8473   @m68kde~1_157:
00005B90  4164 6472 8474          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005B94  6573 733A 
00005B98  2030 7825 
00005B9C  78        
00005B9D  2056 616C 8475          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
00005BA1  7565 3A20 
00005BA5  3078 2530 
00005BA9  3258      
00005BAB  0A00      8476          dc.b      10,0
                    8477   @m68kde~1_158:
00005BAE  4164 6472 8478          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005BB2  6573 733A 
00005BB6  2030 7825 
00005BBA  78        
00005BBB  2056 616C 8479          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
00005BBF  7565 3A20 
00005BC3  3078 2530 
00005BC7  3458      
00005BC9  0A00      8480          dc.b      10,0
                    8481   @m68kde~1_159:
00005BCC  4164 6472 8482          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005BD0  6573 733A 
00005BD4  2030 7825 
00005BD8  78        
00005BD9  2056 616C 8483          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
00005BDD  7565 3A20 
00005BE1  3078 2530 
00005BE5  3858      
00005BE7  0A00      8484          dc.b      10,0
                    8485   @m68kde~1_160:
00005BEA  4445 312D 8486          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00005BEE  3638 6B20 
00005BF2  4275 6720 
00005BF6  5631      
00005BF8  2E37 3700 8487          dc.b      46,55,55,0
                    8488   @m68kde~1_161:
00005BFC  436F 7079 8489          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00005C00  7269 6768 
00005C04  7420 2843 
00005C08  2920 504A 8490          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00005C0C  2044 6176 
00005C10  6965 7320 
00005C14  3230      
00005C16  3136 00   8491          dc.b      49,54,0
                    8492   @m68kde~1_162:
00005C1A  0D0A 5275 8493          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00005C1E  6E6E 696E 
00005C22  672E 2E2E 
00005C26  2E        
00005C27  2E00      8494          dc.b      46,0
                    8495   @m68kde~1_163:
00005C2A  5275 6E6E 8496          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005C2E  696E 672E 
00005C32  2E2E 2E2E 
00005C36  00        
                    8497   @m68kde~1_164:
00005C38  4279 3A20 8498          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005C3C  504A 2044 
00005C40  6176 6965 
00005C44  73        
00005C45  00        8499          dc.b      0
                    8500   @m68kde~1_165:
00005C46  0D0A 2573 8501          dc.b      13,10,37,115,0
00005C4A  00        
                    8502   @m68kde~1_166:
00005C4C  0A20 5374 8503          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
00005C50  7564 656E 
00005C54  7420 4E61 
00005C58  6D        
00005C59  6573 3A0A 8504          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
00005C5D  205A 6163 
00005C61  6861 7269 
00005C65  61        
00005C66  6820 4A6F 8505          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
00005C6A  7365 7068 
00005C6E  3A20 3435 
00005C72  35        
00005C73  3030 3035 8506          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00005C77  3520 0A20 
00005C7B  556D 6169 
00005C7F  7220      
00005C81  4D61 7A68 8507          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
00005C85  6172 3A20 
00005C89  3230 3333 
00005C8D  3333      
00005C8F  3038 0A00 8508          dc.b      48,56,10,0
                    8509   @m68kde~1_167:
00005C94  496E 6974 8510          dc.b      73,110,105,116,105,97,108,105,122,105,110,103
00005C98  6961 6C69 
00005C9C  7A69 6E67 
00005CA0  2069 3263 8511          dc.b      32,105,50,99,32,116,101,115,116,46,46,46,10
00005CA4  2074 6573 
00005CA8  742E 2E2E 
00005CAC  0A        
00005CAD  00        8512          dc.b      0
                    8513          section   data
00005CAE            8514                   align
          0000 5CAE 8515   DataStart       equ       *
                    8516   
                    8517   *********************************************************************************************************
                    8518   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8519   * to ram as part of the CStart routine in this file
                    8520   *********************************************************************************************************
                    8521   
                    8522   I2CTest_IICData:
00005CAE  0000 0001 8523          dc.l      1,2,3,4,5
00005CB2  0000 0002 
00005CB6  0000 0003 
00005CBA  0000 0004 
00005CBE  0000 0005 
                    8524   @vsscanf_bufx:
00005CC2  0B00 0546 8525          dc.l      @vsscanf_buf
                    8526   @vsscanf_1:
00005CC6  0A00      8527          dc.b      10,0
                    8528   __ctype:
00005CC8  0040 4040 8529          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005CCC  4040 4040 
00005CD0  4040 5050 
00005CD4  5050 50   
00005CD7  4040 4040 8530          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00005CDB  4040 4040 
00005CDF  4040 4040 
00005CE3  4040 40   
00005CE6  4040 40D0 8531          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005CEA  A0A0 A0A0 
00005CEE  A0A0 A0A0 
00005CF2  A0A0 A0A0 8532          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005CF6  A0A0 A08C 
00005CFA  8C8C 8C   
00005CFD  8C8C 8C8C 8533          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005D01  8C8C A0A0 
00005D05  A0A0 A0   
00005D08  A0A0 8A8A 8534          dc.b      160,160,138,138,138,138,138,138,130,130,130
00005D0C  8A8A 8A8A 
00005D10  8282 82   
00005D13  8282 8282 8535          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005D17  8282 8282 
00005D1B  8282 82   
00005D1E  8282 8282 8536          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005D22  8282 A0A0 
00005D26  A0A0 A0   
00005D29  A089 8989 8537          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005D2D  8989 8981 
00005D31  8181 81   
00005D34  8181 8181 8538          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005D38  8181 8181 
00005D3C  8181 81   
00005D3F  8181 8181 8539          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005D43  81A0 A0A0 
00005D47  A040 0000 
00005D4B  00        
00005D4C  0000 0000 8540          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005D50  0000 0000 
00005D54  0000 0000 
00005D58  0000 0000 
00005D5C  0000 0000 
00005D60  0000      
00005D62  0000 0000 8541          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005D66  0000 0000 
00005D6A  0000 0000 
00005D6E  0000 0000 
00005D72  0000 0000 
00005D76  0000      
00005D78  0000 0000 8542          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005D7C  0000 0000 
00005D80  0000 0000 
00005D84  0000 0000 
00005D88  0000 0000 
00005D8C  0000      
00005D8E  0000 0000 8543          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005D92  0000 0000 
00005D96  0000 0000 
00005D9A  0000 0000 
00005D9E  0000 0000 
00005DA2  0000      
00005DA4  0000 0000 8544          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005DA8  0000 0000 
00005DAC  0000 0000 
00005DB0  0000 0000 
00005DB4  0000 0000 
00005DB8  0000      
00005DBA  0000 0000 8545          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005DBE  0000 0000 
00005DC2  0000 0000 
00005DC6  0000 00   
                    8546   @itoa_1:
00005DCA  2D32 3134 8547          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005DCE  3734 3833 
00005DD2  3634 3800 
                    8548          section   bss
00005DD6            8549                   align
          0000 5DD6 8550   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8551   
                    8552   *********************************************************************************************************
                    8553   * Section for Uninitialised Data held in ROM as constants
                    8554   *********************************************************************************************************
                    8555   
0B000000            8556                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0128 8557   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8558   
                    8559   
0B000000            8560   bss             org       bss
                    8561   
                    8562   *********************************************************************************************************
                    8563   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8564   * install the exception handler using the C function InstallExceptionHandler()
                    8565   *********************************************************************************************************
                    8566   
                    8567   
                    8568   
0B000000            8569   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            8570   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            8571   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            8572   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            8573   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            8574   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            8575   VCheck           ds.l    1      ditto
0B00001C            8576   VTrapV           ds.l    1      ditto
0B000020            8577   VPrivilege       ds.l    1      ditto
0B000024            8578   VTrace           ds.l    1
0B000028            8579   VLine1010emul    ds.l    1
0B00002C            8580   VLine1111emul    ds.l    1
0B000030            8581   VUnassigned1     ds.l    1
0B000034            8582   VUnassigned2     ds.l    1
0B000038            8583   VUnassigned3     ds.l    1
0B00003C            8584   VUninit_IRQ      ds.l    1
0B000040            8585   VUnassigned4     ds.l    1
0B000044            8586   VUnassigned5     ds.l    1
0B000048            8587   VUnassigned6     ds.l    1
0B00004C            8588   VUnassigned7     ds.l    1
0B000050            8589   VUnassigned8     ds.l    1
0B000054            8590   VUnassigned9     ds.l    1
0B000058            8591   VUnassigned10    ds.l    1
0B00005C            8592   VUnassigned11    ds.l    1
0B000060            8593   VSpuriousIRQ     ds.l    1
                    8594   
                    8595   * Interrupt handlers Vector 25-31
0B000064            8596   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            8597   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            8598   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            8599   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            8600   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            8601   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            8602   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8603   
                    8604   * Trap Handler vectors 32-47
0B000080            8605   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            8606   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            8607   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            8608   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            8609   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            8610   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            8611   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            8612   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            8613   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            8614   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            8615   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            8616   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            8617   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            8618   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            8619   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            8620   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8621   
                    8622   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8623   
                    8624   ***********************************************************************************************************
                    8625   * Other Variables
                    8626   ***********************************************************************************************************
                    8627   *__DebugA5       ds.l    1
                    8628   *__UserA5        ds.l    1
                    8629   
                    8630   ***********************************************************************************************************
0B0000C0            8631   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            8632   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            8633   __heap:         ds.l    0       ; pointers for malloc functions
                    8634   
                    8635   *__himem:       ds.l    himem            ; highest memory location + 1
                    8636   *__stklen:      ds.l    stklen           ; default stack size
                    8637   
                    8638   *********************************************************************************************************
                    8639   * Section for Heap
                    8640   *********************************************************************************************************
                    8641   
                    8642   _i:
0B0000C4            8643          ds.b      4
                    8644   _x:
0B0000C8            8645          ds.b      4
                    8646   _y:
0B0000CC            8647          ds.b      4
                    8648   _z:
0B0000D0            8649          ds.b      4
                    8650   _PortA_Count:
0B0000D4            8651          ds.b      4
                    8652   _Trace:
0B0000D8            8653          ds.b      4
                    8654   _GoFlag:
0B0000DC            8655          ds.b      4
                    8656   _Echo:
0B0000E0            8657          ds.b      4
                    8658   _d0:
0B0000E4            8659          ds.b      4
                    8660   _d1:
0B0000E8            8661          ds.b      4
                    8662   _d2:
0B0000EC            8663          ds.b      4
                    8664   _d3:
0B0000F0            8665          ds.b      4
                    8666   _d4:
0B0000F4            8667          ds.b      4
                    8668   _d5:
0B0000F8            8669          ds.b      4
                    8670   _d6:
0B0000FC            8671          ds.b      4
                    8672   _d7:
0B000100            8673          ds.b      4
                    8674   _a0:
0B000104            8675          ds.b      4
                    8676   _a1:
0B000108            8677          ds.b      4
                    8678   _a2:
0B00010C            8679          ds.b      4
                    8680   _a3:
0B000110            8681          ds.b      4
                    8682   _a4:
0B000114            8683          ds.b      4
                    8684   _a5:
0B000118            8685          ds.b      4
                    8686   _a6:
0B00011C            8687          ds.b      4
                    8688   _PC:
0B000120            8689          ds.b      4
                    8690   _SSP:
0B000124            8691          ds.b      4
                    8692   _USP:
0B000128            8693          ds.b      4
                    8694   _SR:
0B00012C            8695          ds.b      2
                    8696   _BreakPointAddress:
0B00012E            8697          ds.b      32
                    8698   _BreakPointInstruction:
0B00014E            8699          ds.b      16
                    8700   _BreakPointSetOrCleared:
0B00015E            8701          ds.b      32
                    8702   _InstructionSize:
0B00017E            8703          ds.b      4
                    8704   _WatchPointAddress:
0B000182            8705          ds.b      32
                    8706   _WatchPointSetOrCleared:
0B0001A2            8707          ds.b      32
                    8708   _WatchPointString:
0B0001C2            8709          ds.b      800
                    8710   _TempString:
0B0004E2            8711          ds.b      100
                    8712   @vsscanf_buf:
0B000546            8713          ds.b      80
                    8714          section   heap
0B000596            8715                   align
          0B00 0596 8716   bssEnd          equ *                   end of storage space for unitialised variables
                    8717   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 8718   heap   equ       *
0B000596            8719                    align
          0000 0000

Assembly errors: 0
