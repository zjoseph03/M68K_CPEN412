680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 26 Feb 2025      Time: 00:00:58          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2B88      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2238      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  38F0      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  42C6      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  42CA      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  42E0      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  42E2      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  38F0      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2F34      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  42E4      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  431E      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  4336      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  433E      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  4344      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  42C6      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  38F0      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  4348      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  431E      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  435C      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  4372      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  4386      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  38F0      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  43B6      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  302E      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2E68      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2F34      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  43E6      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  440C      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  38F0      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  442E      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  444A      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  4490      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  44A2      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  2FA0      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  44B4      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  113A      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; //TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; // Clear read FIFO (if applicable for your SPI controller)
                    1608   ; void ClearSPIReadFIFO(void) {
                    1609   _ClearSPIReadFIFO:
0000111C  4E56 FFFC 1610          link      A6,#-4
                    1611   ; volatile unsigned char dummy;
                    1612   ; // Read from SPI_Data until FIFO is empty
                    1613   ; while((SPI_Status & 0x01) == 0) { // Assuming bit 0 indicates data in read FIFO
                    1614   ClearSPIReadFIFO_1:
00001120  1039 0040 1615          move.b    4227106,D0
00001124  8022      
00001126  C03C 0001 1616          and.b     #1,D0
0000112A  660A      1617          bne.s     ClearSPIReadFIFO_3
                    1618   ; dummy = SPI_Data;
0000112C  1D79 0040 1619          move.b    4227108,-1(A6)
00001130  8024 FFFF 
00001134  60EA      1620          bra       ClearSPIReadFIFO_1
                    1621   ClearSPIReadFIFO_3:
00001136  4E5E      1622          unlk      A6
00001138  4E75      1623          rts
                    1624   ; }
                    1625   ; }
                    1626   ; void WaitForSPITransmitComplete(void)
                    1627   ; {
                    1628   _WaitForSPITransmitComplete:
                    1629   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1630   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1631   ; // just in case they were set
                    1632   ; while (TestForSPITransmitDataComplete() == 0);
                    1633   WaitForSPITransmitComplete_1:
0000113A  4EB8 10EC 1634          jsr       _TestForSPITransmitDataComplete
0000113E  4A80      1635          tst.l     D0
00001140  6602      1636          bne.s     WaitForSPITransmitComplete_3
00001142  60F6      1637          bra       WaitForSPITransmitComplete_1
                    1638   WaitForSPITransmitComplete_3:
                    1639   ; SPI_Status |= 0xC0;
00001144  0039 00C0 1640          or.b      #192,4227106
00001148  0040 8022 
0000114C  4E75      1641          rts
                    1642   ; }
                    1643   ; void SPIFlashPollStatusWLE(void) {
                    1644   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1645          link      A6,#-4
                    1646   ; unsigned char status;
                    1647   ; unsigned char dummy;
                    1648   ; do {
                    1649   SPIFlashPollStatusWLE_1:
                    1650   ; // Start a new read status register command each time
                    1651   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1652          move.b    #254,4227112
00001156  0040 8028 
                    1653   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1654          pea       5
0000115E  4EB8 10C4 1655          jsr       _SPISafeWrite
00001162  584F      1656          addq.w    #4,A7
                    1657   ; SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1658          pea       255
00001168  4EB8 10C4 1659          jsr       _SPISafeWrite
0000116C  584F      1660          addq.w    #4,A7
                    1661   ; status = SPI_Data;   // Read the status
0000116E  1D79 0040 1662          move.b    4227108,-2(A6)
00001172  8024 FFFE 
                    1663   ; SPI_CS = 0xFF;       // End the SPI transaction
00001176  13FC 00FF 1664          move.b    #255,4227112
0000117A  0040 8028 
0000117E  102E FFFE 1665          move.b    -2(A6),D0
00001182  C03C 0002 1666          and.b     #2,D0
00001186  67CA      1667          beq       SPIFlashPollStatusWLE_1
00001188  4E5E      1668          unlk      A6
0000118A  4E75      1669          rts
                    1670   ; // printf("\r\n WLE Status: %02x \n", status);
                    1671   ; // NOTE: for some reason when I don't check the busy bit, the erase doesn't happen, but when I do we don't exit this loop
                    1672   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1673   ; }
                    1674   ; void SPIFlashPollStatusBusy(void) {
                    1675   _SPIFlashPollStatusBusy:
0000118C  4E56 FFFC 1676          link      A6,#-4
                    1677   ; unsigned char status;
                    1678   ; unsigned char dummy;
                    1679   ; do {
                    1680   SPIFlashPollStatusBusy_1:
                    1681   ; // Start a new read status register command each time
                    1682   ; SPI_CS = 0xFE;
00001190  13FC 00FE 1683          move.b    #254,4227112
00001194  0040 8028 
                    1684   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001198  4878 0005 1685          pea       5
0000119C  4EB8 10C4 1686          jsr       _SPISafeWrite
000011A0  584F      1687          addq.w    #4,A7
                    1688   ; SPISafeWrite(0xFF);  // Dummy write to clock in data
000011A2  4878 00FF 1689          pea       255
000011A6  4EB8 10C4 1690          jsr       _SPISafeWrite
000011AA  584F      1691          addq.w    #4,A7
                    1692   ; status = SPI_Data;   // Read the status
000011AC  1D79 0040 1693          move.b    4227108,-2(A6)
000011B0  8024 FFFE 
                    1694   ; SPI_CS = 0xFF;       // End the SPI transaction
000011B4  13FC 00FF 1695          move.b    #255,4227112
000011B8  0040 8028 
000011BC  102E FFFE 1696          move.b    -2(A6),D0
000011C0  C03C 0001 1697          and.b     #1,D0
000011C4  66CA      1698          bne       SPIFlashPollStatusBusy_1
000011C6  4E5E      1699          unlk      A6
000011C8  4E75      1700          rts
                    1701   ; // printf("\r\n Busy Status: %02x \n", status);
                    1702   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1703   ; }
                    1704   ; /************************************************************************************
                    1705   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1706   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1707   ; ************************************************************************************/
                    1708   ; int WriteSPIChar(int c)
                    1709   ; {
                    1710   _WriteSPIChar:
000011CA  4E56 0000 1711          link      A6,#0
                    1712   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1713   ; // wait for completion of transmission
                    1714   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1715   ; // by reading fom the SPI controller Data Register.
                    1716   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1717   ; //
                    1718   ; // modify '0' below to return back read byte from data register
                    1719   ; //
                    1720   ; SPISafeWrite((unsigned char)c);
000011CE  222E 0008 1721          move.l    8(A6),D1
000011D2  C2BC 0000 1722          and.l     #255,D1
000011D6  00FF      
000011D8  2F01      1723          move.l    D1,-(A7)
000011DA  4EB8 10C4 1724          jsr       _SPISafeWrite
000011DE  584F      1725          addq.w    #4,A7
                    1726   ; printf("WRITTEN VAL: %08x \n", (unsigned char)c);
000011E0  222E 0008 1727          move.l    8(A6),D1
000011E4  C2BC 0000 1728          and.l     #255,D1
000011E8  00FF      
000011EA  2F01      1729          move.l    D1,-(A7)
000011EC  4879 0000 1730          pea       @m68kde~1_22.L
000011F0  44E8      
000011F2  4EB9 0000 1731          jsr       _printf
000011F6  38F0      
000011F8  504F      1732          addq.w    #8,A7
                    1733   ; return SPI_Data;
000011FA  1039 0040 1734          move.b    4227108,D0
000011FE  8024      
00001200  C0BC 0000 1735          and.l     #255,D0
00001204  00FF      
00001206  4E5E      1736          unlk      A6
00001208  4E75      1737          rts
                    1738   ; }
                    1739   ; void SPIFlashWriteEnable() {
                    1740   _SPIFlashWriteEnable:
                    1741   ; SPI_CS = 0xFE;
0000120A  13FC 00FE 1742          move.b    #254,4227112
0000120E  0040 8028 
                    1743   ; SPISafeWrite(0x06);
00001212  4878 0006 1744          pea       6
00001216  4EB8 10C4 1745          jsr       _SPISafeWrite
0000121A  584F      1746          addq.w    #4,A7
                    1747   ; SPI_CS = 0xFF;
0000121C  13FC 00FF 1748          move.b    #255,4227112
00001220  0040 8028 
                    1749   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1750   ; SPIFlashPollStatusWLE();
00001224  4EB8 114E 1751          jsr       _SPIFlashPollStatusWLE
00001228  4E75      1752          rts
                    1753   ; }
                    1754   ; void SPISendAddress(int c) {
                    1755   _SPISendAddress:
0000122A  4E56 0000 1756          link      A6,#0
0000122E  48E7 2020 1757          movem.l   D2/A2,-(A7)
00001232  242E 0008 1758          move.l    8(A6),D2
00001236  45F8 10C4 1759          lea       _SPISafeWrite.L,A2
                    1760   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
0000123A  2202      1761          move.l    D2,D1
0000123C  E081      1762          asr.l     #8,D1
0000123E  E081      1763          asr.l     #8,D1
00001240  C2BC 0000 1764          and.l     #255,D1
00001244  00FF      
00001246  C2BC 0000 1765          and.l     #255,D1
0000124A  00FF      
0000124C  2F01      1766          move.l    D1,-(A7)
0000124E  4E92      1767          jsr       (A2)
00001250  584F      1768          addq.w    #4,A7
                    1769   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001252  2202      1770          move.l    D2,D1
00001254  E081      1771          asr.l     #8,D1
00001256  C2BC 0000 1772          and.l     #255,D1
0000125A  00FF      
0000125C  C2BC 0000 1773          and.l     #255,D1
00001260  00FF      
00001262  2F01      1774          move.l    D1,-(A7)
00001264  4E92      1775          jsr       (A2)
00001266  584F      1776          addq.w    #4,A7
                    1777   ; SPISafeWrite(c & 0xFF);             // third byte
00001268  2202      1778          move.l    D2,D1
0000126A  C2BC 0000 1779          and.l     #255,D1
0000126E  00FF      
00001270  C2BC 0000 1780          and.l     #255,D1
00001274  00FF      
00001276  2F01      1781          move.l    D1,-(A7)
00001278  4E92      1782          jsr       (A2)
0000127A  584F      1783          addq.w    #4,A7
0000127C  4CDF 0404 1784          movem.l   (A7)+,D2/A2
00001280  4E5E      1785          unlk      A6
00001282  4E75      1786          rts
                    1787   ; }
                    1788   ; void SPIFlashPageProgram(void) {
                    1789   _SPIFlashPageProgram:
                    1790   ; SPI_CS = 0xFE;
00001284  13FC 00FE 1791          move.b    #254,4227112
00001288  0040 8028 
                    1792   ; // NOTE: We should make the below 1 function called SPIFlashWriteCommand() or smthn like that
                    1793   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000128C  4878 0002 1794          pea       2
00001290  4EB8 10C4 1795          jsr       _SPISafeWrite
00001294  584F      1796          addq.w    #4,A7
                    1797   ; SPISendAddress(0x0);
00001296  42A7      1798          clr.l     -(A7)
00001298  4EB8 122A 1799          jsr       _SPISendAddress
0000129C  584F      1800          addq.w    #4,A7
                    1801   ; WriteSPIChar(0xAB); // Random value for testing purposes
0000129E  4878 00AB 1802          pea       171
000012A2  4EB8 11CA 1803          jsr       _WriteSPIChar
000012A6  584F      1804          addq.w    #4,A7
                    1805   ; SPI_CS = 0xFF;
000012A8  13FC 00FF 1806          move.b    #255,4227112
000012AC  0040 8028 
                    1807   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1808   ; SPIFlashPollStatusBusy();
000012B0  4EB8 118C 1809          jsr       _SPIFlashPollStatusBusy
000012B4  4E75      1810          rts
                    1811   ; }
                    1812   ; void SPIFlashErase(void) {
                    1813   _SPIFlashErase:
                    1814   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1815   ; printf("Erasing...\n");
000012B6  4879 0000 1816          pea       @m68kde~1_23.L
000012BA  44FC      
000012BC  4EB9 0000 1817          jsr       _printf
000012C0  38F0      
000012C2  584F      1818          addq.w    #4,A7
                    1819   ; SPI_CS = 0xFE;
000012C4  13FC 00FE 1820          move.b    #254,4227112
000012C8  0040 8028 
                    1821   ; SPISafeWrite(0xC7);
000012CC  4878 00C7 1822          pea       199
000012D0  4EB8 10C4 1823          jsr       _SPISafeWrite
000012D4  584F      1824          addq.w    #4,A7
                    1825   ; SPI_CS = 0xFF;
000012D6  13FC 00FF 1826          move.b    #255,4227112
000012DA  0040 8028 
                    1827   ; SPIFlashPollStatusBusy();
000012DE  4EB8 118C 1828          jsr       _SPIFlashPollStatusBusy
000012E2  4E75      1829          rts
                    1830   ; }
                    1831   ; int SPIFlashRead() {
                    1832   _SPIFlashRead:
000012E4  2F02      1833          move.l    D2,-(A7)
                    1834   ; unsigned char readData;
                    1835   ; ClearSPIReadFIFO();
000012E6  4EB8 111C 1836          jsr       _ClearSPIReadFIFO
                    1837   ; SPI_CS = 0xFE;
000012EA  13FC 00FE 1838          move.b    #254,4227112
000012EE  0040 8028 
                    1839   ; SPISafeWrite(0x03);
000012F2  4878 0003 1840          pea       3
000012F6  4EB8 10C4 1841          jsr       _SPISafeWrite
000012FA  584F      1842          addq.w    #4,A7
                    1843   ; SPISendAddress(0x0);
000012FC  42A7      1844          clr.l     -(A7)
000012FE  4EB8 122A 1845          jsr       _SPISendAddress
00001302  584F      1846          addq.w    #4,A7
                    1847   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001304  4878 00FF 1848          pea       255
00001308  4EB8 10C4 1849          jsr       _SPISafeWrite
0000130C  584F      1850          addq.w    #4,A7
0000130E  1400      1851          move.b    D0,D2
                    1852   ; printf("\r\nRead Data: %08x\n", readData);
00001310  C4BC 0000 1853          and.l     #255,D2
00001314  00FF      
00001316  2F02      1854          move.l    D2,-(A7)
00001318  4879 0000 1855          pea       @m68kde~1_24.L
0000131C  4508      
0000131E  4EB9 0000 1856          jsr       _printf
00001322  38F0      
00001324  504F      1857          addq.w    #8,A7
                    1858   ; SPI_CS = 0xFF;
00001326  13FC 00FF 1859          move.b    #255,4227112
0000132A  0040 8028 
                    1860   ; SPIFlashPollStatusBusy();
0000132E  4EB8 118C 1861          jsr       _SPIFlashPollStatusBusy
                    1862   ; return readData;
00001332  C4BC 0000 1863          and.l     #255,D2
00001336  00FF      
00001338  2002      1864          move.l    D2,D0
0000133A  241F      1865          move.l    (A7)+,D2
0000133C  4E75      1866          rts
                    1867   ; }
                    1868   ; /*******************************************************************
                    1869   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1870   ; ********************************************************************/
                    1871   ; void ProgramFlashChip(void)
                    1872   ; {
                    1873   _ProgramFlashChip:
                    1874   ; //
                    1875   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1876   ; // TODO : then verify by reading it back and comparing to memory
                    1877   ; //
                    1878   ; SPIFlashPollStatusBusy();
0000133E  4EB8 118C 1879          jsr       _SPIFlashPollStatusBusy
                    1880   ; // Erase is not working
                    1881   ; SPIFlashWriteEnable();
00001342  4EB8 120A 1882          jsr       _SPIFlashWriteEnable
                    1883   ; SPIFlashErase();
00001346  4EB8 12B6 1884          jsr       _SPIFlashErase
                    1885   ; SPIFlashWriteEnable(); // NOTE: This is not asserting the WEL
0000134A  4EB8 120A 1886          jsr       _SPIFlashWriteEnable
                    1887   ; SPIFlashPageProgram(); // we can modify the parameter later
0000134E  4EB8 1284 1888          jsr       _SPIFlashPageProgram
00001352  4E75      1889          rts
                    1890   ; // For now well test writing a byte of data
                    1891   ; // Then send h'02 as instruction into data register
                    1892   ; // Then send 24 bit flash address
                    1893   ; // Then atleast 1 data byte
                    1894   ; // If were sending multiple bytes / an entire page then the last (least significant) byte should be set to 0
                    1895   ; // We should poll for the flash chips status register to indicate when the write has been completed in the flash memory after we set CS back to high
                    1896   ; // Using read status register command
                    1897   ; }
                    1898   ; /*************************************************************************
                    1899   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1900   ; **************************************************************************/
                    1901   ; void LoadFromFlashChip(void)
                    1902   ; {
                    1903   _LoadFromFlashChip:
00001354  4E56 FFFC 1904          link      A6,#-4
                    1905   ; int readData;
                    1906   ; printf("\r\n Loading Program From SPI Flash....") ;
00001358  4879 0000 1907          pea       @m68kde~1_25.L
0000135C  451C      
0000135E  4EB9 0000 1908          jsr       _printf
00001362  38F0      
00001364  584F      1909          addq.w    #4,A7
                    1910   ; SPIFlashPollStatusBusy();
00001366  4EB8 118C 1911          jsr       _SPIFlashPollStatusBusy
                    1912   ; readData = SPIFlashRead();
0000136A  4EB8 12E4 1913          jsr       _SPIFlashRead
0000136E  2D40 FFFC 1914          move.l    D0,-4(A6)
                    1915   ; printf("\r\n Read Data: %08x \n", readData);
00001372  2F2E FFFC 1916          move.l    -4(A6),-(A7)
00001376  4879 0000 1917          pea       @m68kde~1_26.L
0000137A  4542      
0000137C  4EB9 0000 1918          jsr       _printf
00001380  38F0      
00001382  504F      1919          addq.w    #8,A7
00001384  4E5E      1920          unlk      A6
00001386  4E75      1921          rts
                    1922   ; // Read the flash status register to see if we can send commands (Check if its busy)
                    1923   ; // 
                    1924   ; //
                    1925   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1926   ; //
                    1927   ; }
                    1928   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1929   ; // IMPORTANT
                    1930   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1931   ; // has to be done with an interrupt (IRQ Level 6)
                    1932   ; //
                    1933   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1934   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1935   ; //
                    1936   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1937   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1938   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1939   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1940   ; // program area
                    1941   ; //
                    1942   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1943   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1944   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1945   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1946   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1947   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1948   ; void DumpRegisters()
                    1949   ; {
                    1950   _DumpRegisters:
00001388  48E7 3F3C 1951          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000138C  45F9 0000 1952          lea       _putch.L,A2
00001390  2F34      
00001392  47F9 0000 1953          lea       _printf.L,A3
00001396  38F0      
00001398  49F9 0B00 1954          lea       _SR.L,A4
0000139C  012C      
0000139E  4BF9 0B00 1955          lea       _WatchPointString.L,A5
000013A2  01C2      
                    1956   ; short i, x, j, k ;
                    1957   ; unsigned char c, *BytePointer;
                    1958   ; // buld up strings for displaying watchpoints
                    1959   ; for(x = 0; x < (short)(8); x++)
000013A4  4242      1960          clr.w     D2
                    1961   DumpRegisters_1:
000013A6  0C42 0008 1962          cmp.w     #8,D2
000013AA  6C00 01C6 1963          bge       DumpRegisters_3
                    1964   ; {
                    1965   ; if(WatchPointSetOrCleared[x] == 1)
000013AE  48C2      1966          ext.l     D2
000013B0  2002      1967          move.l    D2,D0
000013B2  E588      1968          lsl.l     #2,D0
000013B4  41F9 0B00 1969          lea       _WatchPointSetOrCleared.L,A0
000013B8  01A2      
000013BA  2030 0800 1970          move.l    0(A0,D0.L),D0
000013BE  0C80 0000 1971          cmp.l     #1,D0
000013C2  0001      
000013C4  6600 0186 1972          bne       DumpRegisters_4
                    1973   ; {
                    1974   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
000013C8  48C2      1975          ext.l     D2
000013CA  2202      1976          move.l    D2,D1
000013CC  E589      1977          lsl.l     #2,D1
000013CE  41F9 0B00 1978          lea       _WatchPointAddress.L,A0
000013D2  0182      
000013D4  2F30 1800 1979          move.l    0(A0,D1.L),-(A7)
000013D8  4879 0000 1980          pea       @m68kde~1_27.L
000013DC  4558      
000013DE  220D      1981          move.l    A5,D1
000013E0  48C2      1982          ext.l     D2
000013E2  2F00      1983          move.l    D0,-(A7)
000013E4  2002      1984          move.l    D2,D0
000013E6  C1FC 0064 1985          muls      #100,D0
000013EA  D280      1986          add.l     D0,D1
000013EC  201F      1987          move.l    (A7)+,D0
000013EE  2F01      1988          move.l    D1,-(A7)
000013F0  4EB9 0000 1989          jsr       _sprintf
000013F4  2FCC      
000013F6  DEFC 000C 1990          add.w     #12,A7
                    1991   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013FA  48C2      1992          ext.l     D2
000013FC  2002      1993          move.l    D2,D0
000013FE  E588      1994          lsl.l     #2,D0
00001400  41F9 0B00 1995          lea       _WatchPointAddress.L,A0
00001404  0182      
00001406  2A30 0800 1996          move.l    0(A0,D0.L),D5
                    1997   ; for(j = 0; j < (short)(16); j+=2)
0000140A  4243      1998          clr.w     D3
                    1999   DumpRegisters_6:
0000140C  0C43 0010 2000          cmp.w     #16,D3
00001410  6C00 0082 2001          bge       DumpRegisters_8
                    2002   ; {
                    2003   ; for(k = 0; k < (short)(2); k++)
00001414  4246      2004          clr.w     D6
                    2005   DumpRegisters_9:
00001416  0C46 0002 2006          cmp.w     #2,D6
0000141A  6C00 0052 2007          bge       DumpRegisters_11
                    2008   ; {
                    2009   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000141E  2045      2010          move.l    D5,A0
00001420  48C3      2011          ext.l     D3
00001422  2203      2012          move.l    D3,D1
00001424  48C6      2013          ext.l     D6
00001426  D286      2014          add.l     D6,D1
00001428  1230 1800 2015          move.b    0(A0,D1.L),D1
0000142C  C2BC 0000 2016          and.l     #255,D1
00001430  00FF      
00001432  2F01      2017          move.l    D1,-(A7)
00001434  4879 0000 2018          pea       @m68kde~1_8.L
00001438  433E      
0000143A  4879 0B00 2019          pea       _TempString.L
0000143E  04E2      
00001440  4EB9 0000 2020          jsr       _sprintf
00001444  2FCC      
00001446  DEFC 000C 2021          add.w     #12,A7
                    2022   ; strcat(WatchPointString[x], TempString) ;
0000144A  4879 0B00 2023          pea       _TempString.L
0000144E  04E2      
00001450  220D      2024          move.l    A5,D1
00001452  48C2      2025          ext.l     D2
00001454  2F00      2026          move.l    D0,-(A7)
00001456  2002      2027          move.l    D2,D0
00001458  C1FC 0064 2028          muls      #100,D0
0000145C  D280      2029          add.l     D0,D1
0000145E  201F      2030          move.l    (A7)+,D0
00001460  2F01      2031          move.l    D1,-(A7)
00001462  4EB9 0000 2032          jsr       _strcat
00001466  3018      
00001468  504F      2033          addq.w    #8,A7
0000146A  5246      2034          addq.w    #1,D6
0000146C  60A8      2035          bra       DumpRegisters_9
                    2036   DumpRegisters_11:
                    2037   ; }
                    2038   ; strcat(WatchPointString[x]," ") ;
0000146E  4879 0000 2039          pea       @m68kde~1_28.L
00001472  4560      
00001474  220D      2040          move.l    A5,D1
00001476  48C2      2041          ext.l     D2
00001478  2F00      2042          move.l    D0,-(A7)
0000147A  2002      2043          move.l    D2,D0
0000147C  C1FC 0064 2044          muls      #100,D0
00001480  D280      2045          add.l     D0,D1
00001482  201F      2046          move.l    (A7)+,D0
00001484  2F01      2047          move.l    D1,-(A7)
00001486  4EB9 0000 2048          jsr       _strcat
0000148A  3018      
0000148C  504F      2049          addq.w    #8,A7
0000148E  5443      2050          addq.w    #2,D3
00001490  6000 FF7A 2051          bra       DumpRegisters_6
                    2052   DumpRegisters_8:
                    2053   ; }
                    2054   ; strcat(WatchPointString[x], "  ") ;
00001494  4879 0000 2055          pea       @m68kde~1_9.L
00001498  4344      
0000149A  220D      2056          move.l    A5,D1
0000149C  48C2      2057          ext.l     D2
0000149E  2F00      2058          move.l    D0,-(A7)
000014A0  2002      2059          move.l    D2,D0
000014A2  C1FC 0064 2060          muls      #100,D0
000014A6  D280      2061          add.l     D0,D1
000014A8  201F      2062          move.l    (A7)+,D0
000014AA  2F01      2063          move.l    D1,-(A7)
000014AC  4EB9 0000 2064          jsr       _strcat
000014B0  3018      
000014B2  504F      2065          addq.w    #8,A7
                    2066   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000014B4  48C2      2067          ext.l     D2
000014B6  2002      2068          move.l    D2,D0
000014B8  E588      2069          lsl.l     #2,D0
000014BA  41F9 0B00 2070          lea       _WatchPointAddress.L,A0
000014BE  0182      
000014C0  2A30 0800 2071          move.l    0(A0,D0.L),D5
                    2072   ; for(j = 0; j < (short)(16); j++)
000014C4  4243      2073          clr.w     D3
                    2074   DumpRegisters_12:
000014C6  0C43 0010 2075          cmp.w     #16,D3
000014CA  6C00 007E 2076          bge       DumpRegisters_14
                    2077   ; {
                    2078   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014CE  2045      2079          move.l    D5,A0
000014D0  48C3      2080          ext.l     D3
000014D2  1030 3800 2081          move.b    0(A0,D3.L),D0
000014D6  C03C 007F 2082          and.b     #127,D0
000014DA  1E00      2083          move.b    D0,D7
                    2084   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014DC  0C07 007F 2085          cmp.b     #127,D7
000014E0  6206      2086          bhi.s     DumpRegisters_17
000014E2  0C07 0020 2087          cmp.b     #32,D7
000014E6  6416      2088          bhs.s     DumpRegisters_15
                    2089   DumpRegisters_17:
                    2090   ; sprintf(TempString, ".") ;
000014E8  4879 0000 2091          pea       @m68kde~1_29.L
000014EC  4562      
000014EE  4879 0B00 2092          pea       _TempString.L
000014F2  04E2      
000014F4  4EB9 0000 2093          jsr       _sprintf
000014F8  2FCC      
000014FA  504F      2094          addq.w    #8,A7
000014FC  6026      2095          bra.s     DumpRegisters_16
                    2096   DumpRegisters_15:
                    2097   ; else
                    2098   ; sprintf(TempString, "%c", BytePointer[j]) ;
000014FE  2045      2099          move.l    D5,A0
00001500  48C3      2100          ext.l     D3
00001502  1230 3800 2101          move.b    0(A0,D3.L),D1
00001506  C2BC 0000 2102          and.l     #255,D1
0000150A  00FF      
0000150C  2F01      2103          move.l    D1,-(A7)
0000150E  4879 0000 2104          pea       @m68kde~1_30.L
00001512  4564      
00001514  4879 0B00 2105          pea       _TempString.L
00001518  04E2      
0000151A  4EB9 0000 2106          jsr       _sprintf
0000151E  2FCC      
00001520  DEFC 000C 2107          add.w     #12,A7
                    2108   DumpRegisters_16:
                    2109   ; strcat(WatchPointString[x], TempString) ;
00001524  4879 0B00 2110          pea       _TempString.L
00001528  04E2      
0000152A  220D      2111          move.l    A5,D1
0000152C  48C2      2112          ext.l     D2
0000152E  2F00      2113          move.l    D0,-(A7)
00001530  2002      2114          move.l    D2,D0
00001532  C1FC 0064 2115          muls      #100,D0
00001536  D280      2116          add.l     D0,D1
00001538  201F      2117          move.l    (A7)+,D0
0000153A  2F01      2118          move.l    D1,-(A7)
0000153C  4EB9 0000 2119          jsr       _strcat
00001540  3018      
00001542  504F      2120          addq.w    #8,A7
00001544  5243      2121          addq.w    #1,D3
00001546  6000 FF7E 2122          bra       DumpRegisters_12
                    2123   DumpRegisters_14:
0000154A  6020      2124          bra.s     DumpRegisters_5
                    2125   DumpRegisters_4:
                    2126   ; }
                    2127   ; }
                    2128   ; else
                    2129   ; strcpy(WatchPointString[x], "") ;
0000154C  4879 0000 2130          pea       @m68kde~1_31.L
00001550  4568      
00001552  220D      2131          move.l    A5,D1
00001554  48C2      2132          ext.l     D2
00001556  2F00      2133          move.l    D0,-(A7)
00001558  2002      2134          move.l    D2,D0
0000155A  C1FC 0064 2135          muls      #100,D0
0000155E  D280      2136          add.l     D0,D1
00001560  201F      2137          move.l    (A7)+,D0
00001562  2F01      2138          move.l    D1,-(A7)
00001564  4EB9 0000 2139          jsr       _strcpy
00001568  2E46      
0000156A  504F      2140          addq.w    #8,A7
                    2141   DumpRegisters_5:
0000156C  5242      2142          addq.w    #1,D2
0000156E  6000 FE36 2143          bra       DumpRegisters_1
                    2144   DumpRegisters_3:
                    2145   ; }
                    2146   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001572  2F39 0B00 2147          move.l    _a0.L,-(A7)
00001576  0104      
00001578  2F39 0B00 2148          move.l    _d0.L,-(A7)
0000157C  00E4      
0000157E  4879 0000 2149          pea       @m68kde~1_32.L
00001582  456A      
00001584  4E93      2150          jsr       (A3)
00001586  DEFC 000C 2151          add.w     #12,A7
                    2152   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
0000158A  2F39 0B00 2153          move.l    _a1.L,-(A7)
0000158E  0108      
00001590  2F39 0B00 2154          move.l    _d1.L,-(A7)
00001594  00E8      
00001596  4879 0000 2155          pea       @m68kde~1_33.L
0000159A  4586      
0000159C  4E93      2156          jsr       (A3)
0000159E  DEFC 000C 2157          add.w     #12,A7
                    2158   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000015A2  2F39 0B00 2159          move.l    _a2.L,-(A7)
000015A6  010C      
000015A8  2F39 0B00 2160          move.l    _d2.L,-(A7)
000015AC  00EC      
000015AE  4879 0000 2161          pea       @m68kde~1_34.L
000015B2  45A0      
000015B4  4E93      2162          jsr       (A3)
000015B6  DEFC 000C 2163          add.w     #12,A7
                    2164   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000015BA  2F39 0B00 2165          move.l    _a3.L,-(A7)
000015BE  0110      
000015C0  2F39 0B00 2166          move.l    _d3.L,-(A7)
000015C4  00F0      
000015C6  4879 0000 2167          pea       @m68kde~1_35.L
000015CA  45BA      
000015CC  4E93      2168          jsr       (A3)
000015CE  DEFC 000C 2169          add.w     #12,A7
                    2170   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015D2  2F39 0B00 2171          move.l    _a4.L,-(A7)
000015D6  0114      
000015D8  2F39 0B00 2172          move.l    _d4.L,-(A7)
000015DC  00F4      
000015DE  4879 0000 2173          pea       @m68kde~1_36.L
000015E2  45D4      
000015E4  4E93      2174          jsr       (A3)
000015E6  DEFC 000C 2175          add.w     #12,A7
                    2176   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015EA  2F39 0B00 2177          move.l    _a5.L,-(A7)
000015EE  0118      
000015F0  2F39 0B00 2178          move.l    _d5.L,-(A7)
000015F4  00F8      
000015F6  4879 0000 2179          pea       @m68kde~1_37.L
000015FA  45EE      
000015FC  4E93      2180          jsr       (A3)
000015FE  DEFC 000C 2181          add.w     #12,A7
                    2182   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001602  2F39 0B00 2183          move.l    _a6.L,-(A7)
00001606  011C      
00001608  2F39 0B00 2184          move.l    _d6.L,-(A7)
0000160C  00FC      
0000160E  4879 0000 2185          pea       @m68kde~1_38.L
00001612  4608      
00001614  4E93      2186          jsr       (A3)
00001616  DEFC 000C 2187          add.w     #12,A7
                    2188   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
0000161A  3214      2189          move.w    (A4),D1
0000161C  C27C 2000 2190          and.w     #8192,D1
00001620  0C41 2000 2191          cmp.w     #8192,D1
00001624  6608      2192          bne.s     DumpRegisters_18
00001626  2239 0B00 2193          move.l    _SSP.L,D1
0000162A  0124      
0000162C  6006      2194          bra.s     DumpRegisters_19
                    2195   DumpRegisters_18:
0000162E  2239 0B00 2196          move.l    _USP.L,D1
00001632  0128      
                    2197   DumpRegisters_19:
00001634  2F01      2198          move.l    D1,-(A7)
00001636  2F39 0B00 2199          move.l    _d7.L,-(A7)
0000163A  0100      
0000163C  4879 0000 2200          pea       @m68kde~1_39.L
00001640  4622      
00001642  4E93      2201          jsr       (A3)
00001644  DEFC 000C 2202          add.w     #12,A7
                    2203   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001648  2F39 0B00 2204          move.l    _USP.L,-(A7)
0000164C  0128      
0000164E  4879 0000 2205          pea       @m68kde~1_40.L
00001652  463C      
00001654  4E93      2206          jsr       (A3)
00001656  504F      2207          addq.w    #8,A7
                    2208   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001658  2F39 0B00 2209          move.l    _SSP.L,-(A7)
0000165C  0124      
0000165E  4879 0000 2210          pea       @m68kde~1_41.L
00001662  465A      
00001664  4E93      2211          jsr       (A3)
00001666  504F      2212          addq.w    #8,A7
                    2213   ; printf("\r\n SR = $%04X   ",SR) ;
00001668  3214      2214          move.w    (A4),D1
0000166A  C2BC 0000 2215          and.l     #65535,D1
0000166E  FFFF      
00001670  2F01      2216          move.l    D1,-(A7)
00001672  4879 0000 2217          pea       @m68kde~1_42.L
00001676  467C      
00001678  4E93      2218          jsr       (A3)
0000167A  504F      2219          addq.w    #8,A7
                    2220   ; // display the status word in characters etc.
                    2221   ; printf("   [") ;
0000167C  4879 0000 2222          pea       @m68kde~1_43.L
00001680  468E      
00001682  4E93      2223          jsr       (A3)
00001684  584F      2224          addq.w    #4,A7
                    2225   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001686  3014      2226          move.w    (A4),D0
00001688  C07C 8000 2227          and.w     #32768,D0
0000168C  0C40 8000 2228          cmp.w     #32768,D0
00001690  660A      2229          bne.s     DumpRegisters_20
00001692  4878 0054 2230          pea       84
00001696  4E92      2231          jsr       (A2)
00001698  584F      2232          addq.w    #4,A7
0000169A  6008      2233          bra.s     DumpRegisters_21
                    2234   DumpRegisters_20:
0000169C  4878 002D 2235          pea       45
000016A0  4E92      2236          jsr       (A2)
000016A2  584F      2237          addq.w    #4,A7
                    2238   DumpRegisters_21:
                    2239   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000016A4  3014      2240          move.w    (A4),D0
000016A6  C07C 2000 2241          and.w     #8192,D0
000016AA  0C40 2000 2242          cmp.w     #8192,D0
000016AE  660A      2243          bne.s     DumpRegisters_22
000016B0  4878 0053 2244          pea       83
000016B4  4E92      2245          jsr       (A2)
000016B6  584F      2246          addq.w    #4,A7
000016B8  6008      2247          bra.s     DumpRegisters_23
                    2248   DumpRegisters_22:
000016BA  4878 0055 2249          pea       85
000016BE  4E92      2250          jsr       (A2)
000016C0  584F      2251          addq.w    #4,A7
                    2252   DumpRegisters_23:
                    2253   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000016C2  3014      2254          move.w    (A4),D0
000016C4  C07C 0400 2255          and.w     #1024,D0
000016C8  0C40 0400 2256          cmp.w     #1024,D0
000016CC  660A      2257          bne.s     DumpRegisters_24
000016CE  4878 0031 2258          pea       49
000016D2  4E92      2259          jsr       (A2)
000016D4  584F      2260          addq.w    #4,A7
000016D6  6008      2261          bra.s     DumpRegisters_25
                    2262   DumpRegisters_24:
000016D8  4878 0030 2263          pea       48
000016DC  4E92      2264          jsr       (A2)
000016DE  584F      2265          addq.w    #4,A7
                    2266   DumpRegisters_25:
                    2267   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016E0  3014      2268          move.w    (A4),D0
000016E2  C07C 0200 2269          and.w     #512,D0
000016E6  0C40 0200 2270          cmp.w     #512,D0
000016EA  660A      2271          bne.s     DumpRegisters_26
000016EC  4878 0031 2272          pea       49
000016F0  4E92      2273          jsr       (A2)
000016F2  584F      2274          addq.w    #4,A7
000016F4  6008      2275          bra.s     DumpRegisters_27
                    2276   DumpRegisters_26:
000016F6  4878 0030 2277          pea       48
000016FA  4E92      2278          jsr       (A2)
000016FC  584F      2279          addq.w    #4,A7
                    2280   DumpRegisters_27:
                    2281   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000016FE  3014      2282          move.w    (A4),D0
00001700  C07C 0100 2283          and.w     #256,D0
00001704  0C40 0100 2284          cmp.w     #256,D0
00001708  660A      2285          bne.s     DumpRegisters_28
0000170A  4878 0031 2286          pea       49
0000170E  4E92      2287          jsr       (A2)
00001710  584F      2288          addq.w    #4,A7
00001712  6008      2289          bra.s     DumpRegisters_29
                    2290   DumpRegisters_28:
00001714  4878 0030 2291          pea       48
00001718  4E92      2292          jsr       (A2)
0000171A  584F      2293          addq.w    #4,A7
                    2294   DumpRegisters_29:
                    2295   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000171C  3014      2296          move.w    (A4),D0
0000171E  C07C 0010 2297          and.w     #16,D0
00001722  0C40 0010 2298          cmp.w     #16,D0
00001726  660A      2299          bne.s     DumpRegisters_30
00001728  4878 0058 2300          pea       88
0000172C  4E92      2301          jsr       (A2)
0000172E  584F      2302          addq.w    #4,A7
00001730  6008      2303          bra.s     DumpRegisters_31
                    2304   DumpRegisters_30:
00001732  4878 002D 2305          pea       45
00001736  4E92      2306          jsr       (A2)
00001738  584F      2307          addq.w    #4,A7
                    2308   DumpRegisters_31:
                    2309   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
0000173A  3014      2310          move.w    (A4),D0
0000173C  C07C 0008 2311          and.w     #8,D0
00001740  0C40 0008 2312          cmp.w     #8,D0
00001744  660A      2313          bne.s     DumpRegisters_32
00001746  4878 004E 2314          pea       78
0000174A  4E92      2315          jsr       (A2)
0000174C  584F      2316          addq.w    #4,A7
0000174E  6008      2317          bra.s     DumpRegisters_33
                    2318   DumpRegisters_32:
00001750  4878 002D 2319          pea       45
00001754  4E92      2320          jsr       (A2)
00001756  584F      2321          addq.w    #4,A7
                    2322   DumpRegisters_33:
                    2323   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001758  3014      2324          move.w    (A4),D0
0000175A  C07C 0004 2325          and.w     #4,D0
0000175E  0C40 0004 2326          cmp.w     #4,D0
00001762  660A      2327          bne.s     DumpRegisters_34
00001764  4878 005A 2328          pea       90
00001768  4E92      2329          jsr       (A2)
0000176A  584F      2330          addq.w    #4,A7
0000176C  6008      2331          bra.s     DumpRegisters_35
                    2332   DumpRegisters_34:
0000176E  4878 002D 2333          pea       45
00001772  4E92      2334          jsr       (A2)
00001774  584F      2335          addq.w    #4,A7
                    2336   DumpRegisters_35:
                    2337   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001776  3014      2338          move.w    (A4),D0
00001778  C07C 0002 2339          and.w     #2,D0
0000177C  0C40 0002 2340          cmp.w     #2,D0
00001780  660A      2341          bne.s     DumpRegisters_36
00001782  4878 0056 2342          pea       86
00001786  4E92      2343          jsr       (A2)
00001788  584F      2344          addq.w    #4,A7
0000178A  6008      2345          bra.s     DumpRegisters_37
                    2346   DumpRegisters_36:
0000178C  4878 002D 2347          pea       45
00001790  4E92      2348          jsr       (A2)
00001792  584F      2349          addq.w    #4,A7
                    2350   DumpRegisters_37:
                    2351   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001794  3014      2352          move.w    (A4),D0
00001796  C07C 0001 2353          and.w     #1,D0
0000179A  0C40 0001 2354          cmp.w     #1,D0
0000179E  660A      2355          bne.s     DumpRegisters_38
000017A0  4878 0043 2356          pea       67
000017A4  4E92      2357          jsr       (A2)
000017A6  584F      2358          addq.w    #4,A7
000017A8  6008      2359          bra.s     DumpRegisters_39
                    2360   DumpRegisters_38:
000017AA  4878 002D 2361          pea       45
000017AE  4E92      2362          jsr       (A2)
000017B0  584F      2363          addq.w    #4,A7
                    2364   DumpRegisters_39:
                    2365   ; putchar(']') ;
000017B2  4878 005D 2366          pea       93
000017B6  4E92      2367          jsr       (A2)
000017B8  584F      2368          addq.w    #4,A7
                    2369   ; printf("\r\n PC = $%08X  ", PC) ;
000017BA  2F39 0B00 2370          move.l    _PC.L,-(A7)
000017BE  0120      
000017C0  4879 0000 2371          pea       @m68kde~1_44.L
000017C4  4694      
000017C6  4E93      2372          jsr       (A3)
000017C8  504F      2373          addq.w    #8,A7
                    2374   ; if(*(unsigned short int *)(PC) == 0x4e4e)
000017CA  2039 0B00 2375          move.l    _PC.L,D0
000017CE  0120      
000017D0  2040      2376          move.l    D0,A0
000017D2  3010      2377          move.w    (A0),D0
000017D4  0C40 4E4E 2378          cmp.w     #20046,D0
000017D8  660A      2379          bne.s     DumpRegisters_40
                    2380   ; printf("[@ BREAKPOINT]") ;
000017DA  4879 0000 2381          pea       @m68kde~1_45.L
000017DE  46A4      
000017E0  4E93      2382          jsr       (A3)
000017E2  584F      2383          addq.w    #4,A7
                    2384   DumpRegisters_40:
                    2385   ; printf("\r\n") ;
000017E4  4879 0000 2386          pea       @m68kde~1_1.L
000017E8  42C6      
000017EA  4E93      2387          jsr       (A3)
000017EC  584F      2388          addq.w    #4,A7
                    2389   ; for(i=0; i < 8; i++)    {
000017EE  4244      2390          clr.w     D4
                    2391   DumpRegisters_42:
000017F0  0C44 0008 2392          cmp.w     #8,D4
000017F4  6C00 0040 2393          bge       DumpRegisters_44
                    2394   ; if(WatchPointSetOrCleared[i] == 1)
000017F8  48C4      2395          ext.l     D4
000017FA  2004      2396          move.l    D4,D0
000017FC  E588      2397          lsl.l     #2,D0
000017FE  41F9 0B00 2398          lea       _WatchPointSetOrCleared.L,A0
00001802  01A2      
00001804  2030 0800 2399          move.l    0(A0,D0.L),D0
00001808  0C80 0000 2400          cmp.l     #1,D0
0000180C  0001      
0000180E  6622      2401          bne.s     DumpRegisters_45
                    2402   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001810  220D      2403          move.l    A5,D1
00001812  48C4      2404          ext.l     D4
00001814  2F00      2405          move.l    D0,-(A7)
00001816  2004      2406          move.l    D4,D0
00001818  C1FC 0064 2407          muls      #100,D0
0000181C  D280      2408          add.l     D0,D1
0000181E  201F      2409          move.l    (A7)+,D0
00001820  2F01      2410          move.l    D1,-(A7)
00001822  48C4      2411          ext.l     D4
00001824  2F04      2412          move.l    D4,-(A7)
00001826  4879 0000 2413          pea       @m68kde~1_46.L
0000182A  46B4      
0000182C  4E93      2414          jsr       (A3)
0000182E  DEFC 000C 2415          add.w     #12,A7
                    2416   DumpRegisters_45:
00001832  5244      2417          addq.w    #1,D4
00001834  60BA      2418          bra       DumpRegisters_42
                    2419   DumpRegisters_44:
00001836  4CDF 3CFC 2420          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000183A  4E75      2421          rts
                    2422   ; }
                    2423   ; }
                    2424   ; // Trace Exception Handler
                    2425   ; void DumpRegistersandPause(void)
                    2426   ; {
                    2427   _DumpRegistersandPause:
0000183C  2F0A      2428          move.l    A2,-(A7)
0000183E  45F9 0000 2429          lea       _printf.L,A2
00001842  38F0      
                    2430   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001844  4879 0000 2431          pea       @m68kde~1_47.L
00001848  46C0      
0000184A  4E92      2432          jsr       (A2)
0000184C  584F      2433          addq.w    #4,A7
                    2434   ; printf("\r\nBreak Points :[Disabled]") ;
0000184E  4879 0000 2435          pea       @m68kde~1_48.L
00001852  46E0      
00001854  4E92      2436          jsr       (A2)
00001856  584F      2437          addq.w    #4,A7
                    2438   ; DumpRegisters() ;
00001858  4EB8 1388 2439          jsr       _DumpRegisters
                    2440   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000185C  4879 0000 2441          pea       @m68kde~1_49.L
00001860  46FC      
00001862  4E92      2442          jsr       (A2)
00001864  584F      2443          addq.w    #4,A7
                    2444   ; printf("\r\nPress <ESC> to Resume Program") ;
00001866  4879 0000 2445          pea       @m68kde~1_50.L
0000186A  4728      
0000186C  4E92      2446          jsr       (A2)
0000186E  584F      2447          addq.w    #4,A7
                    2448   ; menu() ;
00001870  4EB9 0000 2449          jsr       _menu
00001874  2420      
00001876  245F      2450          move.l    (A7)+,A2
00001878  4E75      2451          rts
                    2452   ; }
                    2453   ; void ChangeRegisters(void)
                    2454   ; {
                    2455   _ChangeRegisters:
0000187A  4E56 FFFC 2456          link      A6,#-4
0000187E  48E7 303C 2457          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001882  45F9 0000 2458          lea       _printf.L,A2
00001886  38F0      
00001888  47EE FFFC 2459          lea       -4(A6),A3
0000188C  49F8 0CA4 2460          lea       _Get8HexDigits.L,A4
00001890  4BF8 0B68 2461          lea       __getch.L,A5
                    2462   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2463   ; int reg_val ;
                    2464   ; char c, reg[3] ;
                    2465   ; reg[0] = tolower(_getch()) ;
00001894  2F00      2466          move.l    D0,-(A7)
00001896  4E95      2467          jsr       (A5)
00001898  2200      2468          move.l    D0,D1
0000189A  201F      2469          move.l    (A7)+,D0
0000189C  2F01      2470          move.l    D1,-(A7)
0000189E  4EB9 0000 2471          jsr       _tolower
000018A2  2FA0      
000018A4  584F      2472          addq.w    #4,A7
000018A6  1680      2473          move.b    D0,(A3)
                    2474   ; reg[1] = c = tolower(_getch()) ;
000018A8  2F00      2475          move.l    D0,-(A7)
000018AA  4E95      2476          jsr       (A5)
000018AC  2200      2477          move.l    D0,D1
000018AE  201F      2478          move.l    (A7)+,D0
000018B0  2F01      2479          move.l    D1,-(A7)
000018B2  4EB9 0000 2480          jsr       _tolower
000018B6  2FA0      
000018B8  584F      2481          addq.w    #4,A7
000018BA  1400      2482          move.b    D0,D2
000018BC  1740 0001 2483          move.b    D0,1(A3)
                    2484   ; if(reg[0] == (char)('d'))  {    // change data register
000018C0  1013      2485          move.b    (A3),D0
000018C2  0C00 0064 2486          cmp.b     #100,D0
000018C6  6600 00AE 2487          bne       ChangeRegisters_1
                    2488   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018CA  102B 0001 2489          move.b    1(A3),D0
000018CE  0C00 0037 2490          cmp.b     #55,D0
000018D2  6E0A      2491          bgt.s     ChangeRegisters_5
000018D4  102B 0001 2492          move.b    1(A3),D0
000018D8  0C00 0030 2493          cmp.b     #48,D0
000018DC  6C0E      2494          bge.s     ChangeRegisters_3
                    2495   ChangeRegisters_5:
                    2496   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018DE  4879 0000 2497          pea       @m68kde~1_51.L
000018E2  4748      
000018E4  4E92      2498          jsr       (A2)
000018E6  584F      2499          addq.w    #4,A7
                    2500   ; return ;
000018E8  6000 0244 2501          bra       ChangeRegisters_6
                    2502   ChangeRegisters_3:
                    2503   ; }
                    2504   ; else {
                    2505   ; printf("\r\nD%c = ", c) ;
000018EC  4882      2506          ext.w     D2
000018EE  48C2      2507          ext.l     D2
000018F0  2F02      2508          move.l    D2,-(A7)
000018F2  4879 0000 2509          pea       @m68kde~1_52.L
000018F6  4774      
000018F8  4E92      2510          jsr       (A2)
000018FA  504F      2511          addq.w    #8,A7
                    2512   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018FC  42A7      2513          clr.l     -(A7)
000018FE  4E94      2514          jsr       (A4)
00001900  584F      2515          addq.w    #4,A7
00001902  2600      2516          move.l    D0,D3
                    2517   ; }
                    2518   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2519   ; if(c == (char)('0'))
00001904  0C02 0030 2520          cmp.b     #48,D2
00001908  660A      2521          bne.s     ChangeRegisters_7
                    2522   ; d0 = reg_val ;
0000190A  23C3 0B00 2523          move.l    D3,_d0.L
0000190E  00E4      
00001910  6000 0060 2524          bra       ChangeRegisters_20
                    2525   ChangeRegisters_7:
                    2526   ; else if(c == (char)('1'))
00001914  0C02 0031 2527          cmp.b     #49,D2
00001918  660A      2528          bne.s     ChangeRegisters_9
                    2529   ; d1 = reg_val ;
0000191A  23C3 0B00 2530          move.l    D3,_d1.L
0000191E  00E8      
00001920  6000 0050 2531          bra       ChangeRegisters_20
                    2532   ChangeRegisters_9:
                    2533   ; else if(c == (char)('2'))
00001924  0C02 0032 2534          cmp.b     #50,D2
00001928  660A      2535          bne.s     ChangeRegisters_11
                    2536   ; d2 = reg_val ;
0000192A  23C3 0B00 2537          move.l    D3,_d2.L
0000192E  00EC      
00001930  6000 0040 2538          bra       ChangeRegisters_20
                    2539   ChangeRegisters_11:
                    2540   ; else if(c == (char)('3'))
00001934  0C02 0033 2541          cmp.b     #51,D2
00001938  6608      2542          bne.s     ChangeRegisters_13
                    2543   ; d3 = reg_val ;
0000193A  23C3 0B00 2544          move.l    D3,_d3.L
0000193E  00F0      
00001940  6030      2545          bra.s     ChangeRegisters_20
                    2546   ChangeRegisters_13:
                    2547   ; else if(c == (char)('4'))
00001942  0C02 0034 2548          cmp.b     #52,D2
00001946  6608      2549          bne.s     ChangeRegisters_15
                    2550   ; d4 = reg_val ;
00001948  23C3 0B00 2551          move.l    D3,_d4.L
0000194C  00F4      
0000194E  6022      2552          bra.s     ChangeRegisters_20
                    2553   ChangeRegisters_15:
                    2554   ; else if(c == (char)('5'))
00001950  0C02 0035 2555          cmp.b     #53,D2
00001954  6608      2556          bne.s     ChangeRegisters_17
                    2557   ; d5 = reg_val ;
00001956  23C3 0B00 2558          move.l    D3,_d5.L
0000195A  00F8      
0000195C  6014      2559          bra.s     ChangeRegisters_20
                    2560   ChangeRegisters_17:
                    2561   ; else if(c == (char)('6'))
0000195E  0C02 0036 2562          cmp.b     #54,D2
00001962  6608      2563          bne.s     ChangeRegisters_19
                    2564   ; d6 = reg_val ;
00001964  23C3 0B00 2565          move.l    D3,_d6.L
00001968  00FC      
0000196A  6006      2566          bra.s     ChangeRegisters_20
                    2567   ChangeRegisters_19:
                    2568   ; else
                    2569   ; d7 = reg_val ;
0000196C  23C3 0B00 2570          move.l    D3,_d7.L
00001970  0100      
                    2571   ChangeRegisters_20:
00001972  6000 01B6 2572          bra       ChangeRegisters_51
                    2573   ChangeRegisters_1:
                    2574   ; }
                    2575   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001976  1013      2576          move.b    (A3),D0
00001978  0C00 0061 2577          cmp.b     #97,D0
0000197C  6600 00A6 2578          bne       ChangeRegisters_21
                    2579   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001980  0C02 0037 2580          cmp.b     #55,D2
00001984  6E06      2581          bgt.s     ChangeRegisters_25
00001986  0C02 0030 2582          cmp.b     #48,D2
0000198A  6C0E      2583          bge.s     ChangeRegisters_23
                    2584   ChangeRegisters_25:
                    2585   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
0000198C  4879 0000 2586          pea       @m68kde~1_53.L
00001990  477E      
00001992  4E92      2587          jsr       (A2)
00001994  584F      2588          addq.w    #4,A7
                    2589   ; return ;
00001996  6000 0196 2590          bra       ChangeRegisters_6
                    2591   ChangeRegisters_23:
                    2592   ; }
                    2593   ; else {
                    2594   ; printf("\r\nA%c = ", c) ;
0000199A  4882      2595          ext.w     D2
0000199C  48C2      2596          ext.l     D2
0000199E  2F02      2597          move.l    D2,-(A7)
000019A0  4879 0000 2598          pea       @m68kde~1_54.L
000019A4  47AC      
000019A6  4E92      2599          jsr       (A2)
000019A8  504F      2600          addq.w    #8,A7
                    2601   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019AA  42A7      2602          clr.l     -(A7)
000019AC  4E94      2603          jsr       (A4)
000019AE  584F      2604          addq.w    #4,A7
000019B0  2600      2605          move.l    D0,D3
                    2606   ; }
                    2607   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2608   ; if(c == (char)('0'))
000019B2  0C02 0030 2609          cmp.b     #48,D2
000019B6  660A      2610          bne.s     ChangeRegisters_26
                    2611   ; a0 = reg_val ;
000019B8  23C3 0B00 2612          move.l    D3,_a0.L
000019BC  0104      
000019BE  6000 0060 2613          bra       ChangeRegisters_39
                    2614   ChangeRegisters_26:
                    2615   ; else if(c == (char)('1'))
000019C2  0C02 0031 2616          cmp.b     #49,D2
000019C6  660A      2617          bne.s     ChangeRegisters_28
                    2618   ; a1 = reg_val ;
000019C8  23C3 0B00 2619          move.l    D3,_a1.L
000019CC  0108      
000019CE  6000 0050 2620          bra       ChangeRegisters_39
                    2621   ChangeRegisters_28:
                    2622   ; else if(c == (char)('2'))
000019D2  0C02 0032 2623          cmp.b     #50,D2
000019D6  660A      2624          bne.s     ChangeRegisters_30
                    2625   ; a2 = reg_val ;
000019D8  23C3 0B00 2626          move.l    D3,_a2.L
000019DC  010C      
000019DE  6000 0040 2627          bra       ChangeRegisters_39
                    2628   ChangeRegisters_30:
                    2629   ; else if(c == (char)('3'))
000019E2  0C02 0033 2630          cmp.b     #51,D2
000019E6  6608      2631          bne.s     ChangeRegisters_32
                    2632   ; a3 = reg_val ;
000019E8  23C3 0B00 2633          move.l    D3,_a3.L
000019EC  0110      
000019EE  6030      2634          bra.s     ChangeRegisters_39
                    2635   ChangeRegisters_32:
                    2636   ; else if(c == (char)('4'))
000019F0  0C02 0034 2637          cmp.b     #52,D2
000019F4  6608      2638          bne.s     ChangeRegisters_34
                    2639   ; a4 = reg_val ;
000019F6  23C3 0B00 2640          move.l    D3,_a4.L
000019FA  0114      
000019FC  6022      2641          bra.s     ChangeRegisters_39
                    2642   ChangeRegisters_34:
                    2643   ; else if(c == (char)('5'))
000019FE  0C02 0035 2644          cmp.b     #53,D2
00001A02  6608      2645          bne.s     ChangeRegisters_36
                    2646   ; a5 = reg_val ;
00001A04  23C3 0B00 2647          move.l    D3,_a5.L
00001A08  0118      
00001A0A  6014      2648          bra.s     ChangeRegisters_39
                    2649   ChangeRegisters_36:
                    2650   ; else if(c == (char)('6'))
00001A0C  0C02 0036 2651          cmp.b     #54,D2
00001A10  6608      2652          bne.s     ChangeRegisters_38
                    2653   ; a6 = reg_val ;
00001A12  23C3 0B00 2654          move.l    D3,_a6.L
00001A16  011C      
00001A18  6006      2655          bra.s     ChangeRegisters_39
                    2656   ChangeRegisters_38:
                    2657   ; else
                    2658   ; USP = reg_val ;
00001A1A  23C3 0B00 2659          move.l    D3,_USP.L
00001A1E  0128      
                    2660   ChangeRegisters_39:
00001A20  6000 0108 2661          bra       ChangeRegisters_51
                    2662   ChangeRegisters_21:
                    2663   ; }
                    2664   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A24  1013      2665          move.b    (A3),D0
00001A26  0C00 0075 2666          cmp.b     #117,D0
00001A2A  6600 004E 2667          bne       ChangeRegisters_40
00001A2E  0C02 0073 2668          cmp.b     #115,D2
00001A32  6600 0046 2669          bne       ChangeRegisters_40
                    2670   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A36  2F00      2671          move.l    D0,-(A7)
00001A38  4E95      2672          jsr       (A5)
00001A3A  2200      2673          move.l    D0,D1
00001A3C  201F      2674          move.l    (A7)+,D0
00001A3E  2F01      2675          move.l    D1,-(A7)
00001A40  4EB9 0000 2676          jsr       _tolower
00001A44  2FA0      
00001A46  584F      2677          addq.w    #4,A7
00001A48  0C80 0000 2678          cmp.l     #112,D0
00001A4C  0070      
00001A4E  6618      2679          bne.s     ChangeRegisters_42
                    2680   ; printf("\r\nUser SP = ") ;
00001A50  4879 0000 2681          pea       @m68kde~1_55.L
00001A54  47B6      
00001A56  4E92      2682          jsr       (A2)
00001A58  584F      2683          addq.w    #4,A7
                    2684   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A5A  42A7      2685          clr.l     -(A7)
00001A5C  4E94      2686          jsr       (A4)
00001A5E  584F      2687          addq.w    #4,A7
00001A60  23C0 0B00 2688          move.l    D0,_USP.L
00001A64  0128      
00001A66  600E      2689          bra.s     ChangeRegisters_43
                    2690   ChangeRegisters_42:
                    2691   ; }
                    2692   ; else {
                    2693   ; printf("\r\nIllegal Register....") ;
00001A68  4879 0000 2694          pea       @m68kde~1_56.L
00001A6C  47C4      
00001A6E  4E92      2695          jsr       (A2)
00001A70  584F      2696          addq.w    #4,A7
                    2697   ; return ;
00001A72  6000 00BA 2698          bra       ChangeRegisters_6
                    2699   ChangeRegisters_43:
00001A76  6000 00B2 2700          bra       ChangeRegisters_51
                    2701   ChangeRegisters_40:
                    2702   ; }
                    2703   ; }
                    2704   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A7A  1013      2705          move.b    (A3),D0
00001A7C  0C00 0073 2706          cmp.b     #115,D0
00001A80  6600 004E 2707          bne       ChangeRegisters_44
00001A84  0C02 0073 2708          cmp.b     #115,D2
00001A88  6600 0046 2709          bne       ChangeRegisters_44
                    2710   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A8C  2F00      2711          move.l    D0,-(A7)
00001A8E  4E95      2712          jsr       (A5)
00001A90  2200      2713          move.l    D0,D1
00001A92  201F      2714          move.l    (A7)+,D0
00001A94  2F01      2715          move.l    D1,-(A7)
00001A96  4EB9 0000 2716          jsr       _tolower
00001A9A  2FA0      
00001A9C  584F      2717          addq.w    #4,A7
00001A9E  0C80 0000 2718          cmp.l     #112,D0
00001AA2  0070      
00001AA4  6618      2719          bne.s     ChangeRegisters_46
                    2720   ; printf("\r\nSystem SP = ") ;
00001AA6  4879 0000 2721          pea       @m68kde~1_57.L
00001AAA  47DC      
00001AAC  4E92      2722          jsr       (A2)
00001AAE  584F      2723          addq.w    #4,A7
                    2724   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AB0  42A7      2725          clr.l     -(A7)
00001AB2  4E94      2726          jsr       (A4)
00001AB4  584F      2727          addq.w    #4,A7
00001AB6  23C0 0B00 2728          move.l    D0,_SSP.L
00001ABA  0124      
00001ABC  600E      2729          bra.s     ChangeRegisters_47
                    2730   ChangeRegisters_46:
                    2731   ; }
                    2732   ; else {
                    2733   ; printf("\r\nIllegal Register....") ;
00001ABE  4879 0000 2734          pea       @m68kde~1_56.L
00001AC2  47C4      
00001AC4  4E92      2735          jsr       (A2)
00001AC6  584F      2736          addq.w    #4,A7
                    2737   ; return ;
00001AC8  6000 0064 2738          bra       ChangeRegisters_6
                    2739   ChangeRegisters_47:
00001ACC  6000 005C 2740          bra       ChangeRegisters_51
                    2741   ChangeRegisters_44:
                    2742   ; }
                    2743   ; }
                    2744   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001AD0  1013      2745          move.b    (A3),D0
00001AD2  0C00 0070 2746          cmp.b     #112,D0
00001AD6  6620      2747          bne.s     ChangeRegisters_48
00001AD8  0C02 0063 2748          cmp.b     #99,D2
00001ADC  661A      2749          bne.s     ChangeRegisters_48
                    2750   ; printf("\r\nPC = ") ;
00001ADE  4879 0000 2751          pea       @m68kde~1_58.L
00001AE2  47EC      
00001AE4  4E92      2752          jsr       (A2)
00001AE6  584F      2753          addq.w    #4,A7
                    2754   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AE8  42A7      2755          clr.l     -(A7)
00001AEA  4E94      2756          jsr       (A4)
00001AEC  584F      2757          addq.w    #4,A7
00001AEE  23C0 0B00 2758          move.l    D0,_PC.L
00001AF2  0120      
00001AF4  6000 0034 2759          bra       ChangeRegisters_51
                    2760   ChangeRegisters_48:
                    2761   ; }
                    2762   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001AF8  1013      2763          move.b    (A3),D0
00001AFA  0C00 0073 2764          cmp.b     #115,D0
00001AFE  6620      2765          bne.s     ChangeRegisters_50
00001B00  0C02 0072 2766          cmp.b     #114,D2
00001B04  661A      2767          bne.s     ChangeRegisters_50
                    2768   ; printf("\r\nSR = ") ;
00001B06  4879 0000 2769          pea       @m68kde~1_59.L
00001B0A  47F4      
00001B0C  4E92      2770          jsr       (A2)
00001B0E  584F      2771          addq.w    #4,A7
                    2772   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B10  42A7      2773          clr.l     -(A7)
00001B12  4EB8 0C58 2774          jsr       _Get4HexDigits
00001B16  584F      2775          addq.w    #4,A7
00001B18  33C0 0B00 2776          move.w    D0,_SR.L
00001B1C  012C      
00001B1E  600A      2777          bra.s     ChangeRegisters_51
                    2778   ChangeRegisters_50:
                    2779   ; }
                    2780   ; else
                    2781   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B20  4879 0000 2782          pea       @m68kde~1_60.L
00001B24  47FC      
00001B26  4E92      2783          jsr       (A2)
00001B28  584F      2784          addq.w    #4,A7
                    2785   ChangeRegisters_51:
                    2786   ; DumpRegisters() ;
00001B2A  4EB8 1388 2787          jsr       _DumpRegisters
                    2788   ChangeRegisters_6:
00001B2E  4CDF 3C0C 2789          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B32  4E5E      2790          unlk      A6
00001B34  4E75      2791          rts
                    2792   ; }
                    2793   ; void BreakPointDisplay(void)
                    2794   ; {
                    2795   _BreakPointDisplay:
00001B36  48E7 3030 2796          movem.l   D2/D3/A2/A3,-(A7)
00001B3A  45F9 0000 2797          lea       _printf.L,A2
00001B3E  38F0      
00001B40  47F9 0B00 2798          lea       _BreakPointAddress.L,A3
00001B44  012E      
                    2799   ; int i, BreakPointsSet = 0 ;
00001B46  4283      2800          clr.l     D3
                    2801   ; // any break points  set
                    2802   ; for(i = 0; i < 8; i++)  {
00001B48  4282      2803          clr.l     D2
                    2804   BreakPointDisplay_1:
00001B4A  0C82 0000 2805          cmp.l     #8,D2
00001B4E  0008      
00001B50  6C1C      2806          bge.s     BreakPointDisplay_3
                    2807   ; if(BreakPointSetOrCleared[i] == 1)
00001B52  2002      2808          move.l    D2,D0
00001B54  E588      2809          lsl.l     #2,D0
00001B56  41F9 0B00 2810          lea       _BreakPointSetOrCleared.L,A0
00001B5A  015E      
00001B5C  2030 0800 2811          move.l    0(A0,D0.L),D0
00001B60  0C80 0000 2812          cmp.l     #1,D0
00001B64  0001      
00001B66  6602      2813          bne.s     BreakPointDisplay_4
                    2814   ; BreakPointsSet = 1;
00001B68  7601      2815          moveq     #1,D3
                    2816   BreakPointDisplay_4:
00001B6A  5282      2817          addq.l    #1,D2
00001B6C  60DC      2818          bra       BreakPointDisplay_1
                    2819   BreakPointDisplay_3:
                    2820   ; }
                    2821   ; if(BreakPointsSet == 1) {
00001B6E  0C83 0000 2822          cmp.l     #1,D3
00001B72  0001      
00001B74  6616      2823          bne.s     BreakPointDisplay_6
                    2824   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B76  4879 0000 2825          pea       @m68kde~1_61.L
00001B7A  4838      
00001B7C  4E92      2826          jsr       (A2)
00001B7E  584F      2827          addq.w    #4,A7
                    2828   ; printf("\r\n---     ---------    -----------") ;
00001B80  4879 0000 2829          pea       @m68kde~1_62.L
00001B84  485E      
00001B86  4E92      2830          jsr       (A2)
00001B88  584F      2831          addq.w    #4,A7
00001B8A  600A      2832          bra.s     BreakPointDisplay_7
                    2833   BreakPointDisplay_6:
                    2834   ; }
                    2835   ; else
                    2836   ; printf("\r\nNo BreakPoints Set") ;
00001B8C  4879 0000 2837          pea       @m68kde~1_63.L
00001B90  4882      
00001B92  4E92      2838          jsr       (A2)
00001B94  584F      2839          addq.w    #4,A7
                    2840   BreakPointDisplay_7:
                    2841   ; for(i = 0; i < 8; i++)  {
00001B96  4282      2842          clr.l     D2
                    2843   BreakPointDisplay_8:
00001B98  0C82 0000 2844          cmp.l     #8,D2
00001B9C  0008      
00001B9E  6C00 005A 2845          bge       BreakPointDisplay_10
                    2846   ; // put opcode back, then put break point back
                    2847   ; if(BreakPointSetOrCleared[i] == 1)  {
00001BA2  2002      2848          move.l    D2,D0
00001BA4  E588      2849          lsl.l     #2,D0
00001BA6  41F9 0B00 2850          lea       _BreakPointSetOrCleared.L,A0
00001BAA  015E      
00001BAC  2030 0800 2851          move.l    0(A0,D0.L),D0
00001BB0  0C80 0000 2852          cmp.l     #1,D0
00001BB4  0001      
00001BB6  6600 003E 2853          bne       BreakPointDisplay_11
                    2854   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BBA  2002      2855          move.l    D2,D0
00001BBC  E388      2856          lsl.l     #1,D0
00001BBE  41F9 0B00 2857          lea       _BreakPointInstruction.L,A0
00001BC2  014E      
00001BC4  2202      2858          move.l    D2,D1
00001BC6  E589      2859          lsl.l     #2,D1
00001BC8  2233 1800 2860          move.l    0(A3,D1.L),D1
00001BCC  2241      2861          move.l    D1,A1
00001BCE  32B0 0800 2862          move.w    0(A0,D0.L),(A1)
                    2863   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BD2  2002      2864          move.l    D2,D0
00001BD4  E588      2865          lsl.l     #2,D0
00001BD6  2033 0800 2866          move.l    0(A3,D0.L),D0
00001BDA  2040      2867          move.l    D0,A0
00001BDC  30BC 4E4E 2868          move.w    #20046,(A0)
                    2869   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001BE0  2202      2870          move.l    D2,D1
00001BE2  E589      2871          lsl.l     #2,D1
00001BE4  2F33 1800 2872          move.l    0(A3,D1.L),-(A7)
00001BE8  2F02      2873          move.l    D2,-(A7)
00001BEA  4879 0000 2874          pea       @m68kde~1_64.L
00001BEE  4898      
00001BF0  4E92      2875          jsr       (A2)
00001BF2  DEFC 000C 2876          add.w     #12,A7
                    2877   BreakPointDisplay_11:
00001BF6  5282      2878          addq.l    #1,D2
00001BF8  609E      2879          bra       BreakPointDisplay_8
                    2880   BreakPointDisplay_10:
                    2881   ; }
                    2882   ; }
                    2883   ; printf("\r\n") ;
00001BFA  4879 0000 2884          pea       @m68kde~1_1.L
00001BFE  42C6      
00001C00  4E92      2885          jsr       (A2)
00001C02  584F      2886          addq.w    #4,A7
00001C04  4CDF 0C0C 2887          movem.l   (A7)+,D2/D3/A2/A3
00001C08  4E75      2888          rts
                    2889   ; }
                    2890   ; void WatchPointDisplay(void)
                    2891   ; {
                    2892   _WatchPointDisplay:
00001C0A  48E7 3020 2893          movem.l   D2/D3/A2,-(A7)
00001C0E  45F9 0000 2894          lea       _printf.L,A2
00001C12  38F0      
                    2895   ; int i ;
                    2896   ; int WatchPointsSet = 0 ;
00001C14  4283      2897          clr.l     D3
                    2898   ; // any watchpoints set
                    2899   ; for(i = 0; i < 8; i++)  {
00001C16  4282      2900          clr.l     D2
                    2901   WatchPointDisplay_1:
00001C18  0C82 0000 2902          cmp.l     #8,D2
00001C1C  0008      
00001C1E  6C1C      2903          bge.s     WatchPointDisplay_3
                    2904   ; if(WatchPointSetOrCleared[i] == 1)
00001C20  2002      2905          move.l    D2,D0
00001C22  E588      2906          lsl.l     #2,D0
00001C24  41F9 0B00 2907          lea       _WatchPointSetOrCleared.L,A0
00001C28  01A2      
00001C2A  2030 0800 2908          move.l    0(A0,D0.L),D0
00001C2E  0C80 0000 2909          cmp.l     #1,D0
00001C32  0001      
00001C34  6602      2910          bne.s     WatchPointDisplay_4
                    2911   ; WatchPointsSet = 1;
00001C36  7601      2912          moveq     #1,D3
                    2913   WatchPointDisplay_4:
00001C38  5282      2914          addq.l    #1,D2
00001C3A  60DC      2915          bra       WatchPointDisplay_1
                    2916   WatchPointDisplay_3:
                    2917   ; }
                    2918   ; if(WatchPointsSet == 1) {
00001C3C  0C83 0000 2919          cmp.l     #1,D3
00001C40  0001      
00001C42  6616      2920          bne.s     WatchPointDisplay_6
                    2921   ; printf("\r\nNum     Address") ;
00001C44  4879 0000 2922          pea       @m68kde~1_65.L
00001C48  48A8      
00001C4A  4E92      2923          jsr       (A2)
00001C4C  584F      2924          addq.w    #4,A7
                    2925   ; printf("\r\n---     ---------") ;
00001C4E  4879 0000 2926          pea       @m68kde~1_66.L
00001C52  48BA      
00001C54  4E92      2927          jsr       (A2)
00001C56  584F      2928          addq.w    #4,A7
00001C58  600A      2929          bra.s     WatchPointDisplay_7
                    2930   WatchPointDisplay_6:
                    2931   ; }
                    2932   ; else
                    2933   ; printf("\r\nNo WatchPoints Set") ;
00001C5A  4879 0000 2934          pea       @m68kde~1_67.L
00001C5E  48CE      
00001C60  4E92      2935          jsr       (A2)
00001C62  584F      2936          addq.w    #4,A7
                    2937   WatchPointDisplay_7:
                    2938   ; for(i = 0; i < 8; i++)  {
00001C64  4282      2939          clr.l     D2
                    2940   WatchPointDisplay_8:
00001C66  0C82 0000 2941          cmp.l     #8,D2
00001C6A  0008      
00001C6C  6C00 0038 2942          bge       WatchPointDisplay_10
                    2943   ; if(WatchPointSetOrCleared[i] == 1)
00001C70  2002      2944          move.l    D2,D0
00001C72  E588      2945          lsl.l     #2,D0
00001C74  41F9 0B00 2946          lea       _WatchPointSetOrCleared.L,A0
00001C78  01A2      
00001C7A  2030 0800 2947          move.l    0(A0,D0.L),D0
00001C7E  0C80 0000 2948          cmp.l     #1,D0
00001C82  0001      
00001C84  661C      2949          bne.s     WatchPointDisplay_11
                    2950   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001C86  2202      2951          move.l    D2,D1
00001C88  E589      2952          lsl.l     #2,D1
00001C8A  41F9 0B00 2953          lea       _WatchPointAddress.L,A0
00001C8E  0182      
00001C90  2F30 1800 2954          move.l    0(A0,D1.L),-(A7)
00001C94  2F02      2955          move.l    D2,-(A7)
00001C96  4879 0000 2956          pea       @m68kde~1_64.L
00001C9A  4898      
00001C9C  4E92      2957          jsr       (A2)
00001C9E  DEFC 000C 2958          add.w     #12,A7
                    2959   WatchPointDisplay_11:
00001CA2  5282      2960          addq.l    #1,D2
00001CA4  60C0      2961          bra       WatchPointDisplay_8
                    2962   WatchPointDisplay_10:
                    2963   ; }
                    2964   ; printf("\r\n") ;
00001CA6  4879 0000 2965          pea       @m68kde~1_1.L
00001CAA  42C6      
00001CAC  4E92      2966          jsr       (A2)
00001CAE  584F      2967          addq.w    #4,A7
00001CB0  4CDF 040C 2968          movem.l   (A7)+,D2/D3/A2
00001CB4  4E75      2969          rts
                    2970   ; }
                    2971   ; void BreakPointClear(void)
                    2972   ; {
                    2973   _BreakPointClear:
00001CB6  4E56 FFFC 2974          link      A6,#-4
00001CBA  48E7 2020 2975          movem.l   D2/A2,-(A7)
00001CBE  45F9 0000 2976          lea       _printf.L,A2
00001CC2  38F0      
                    2977   ; unsigned int i ;
                    2978   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2979   ; BreakPointDisplay() ;
00001CC4  4EB8 1B36 2980          jsr       _BreakPointDisplay
                    2981   ; printf("\r\nEnter Break Point Number: ") ;
00001CC8  4879 0000 2982          pea       @m68kde~1_68.L
00001CCC  48E4      
00001CCE  4E92      2983          jsr       (A2)
00001CD0  584F      2984          addq.w    #4,A7
                    2985   ; i = xtod(_getch()) ;           // get break pointer number
00001CD2  2F00      2986          move.l    D0,-(A7)
00001CD4  4EB8 0B68 2987          jsr       __getch
00001CD8  2200      2988          move.l    D0,D1
00001CDA  201F      2989          move.l    (A7)+,D0
00001CDC  2F01      2990          move.l    D1,-(A7)
00001CDE  4EB8 0BD2 2991          jsr       _xtod
00001CE2  584F      2992          addq.w    #4,A7
00001CE4  C0BC 0000 2993          and.l     #255,D0
00001CE8  00FF      
00001CEA  2400      2994          move.l    D0,D2
                    2995   ; if((i < 0) || (i > 7))   {
00001CEC  0C82 0000 2996          cmp.l     #0,D2
00001CF0  0000      
00001CF2  6508      2997          blo.s     BreakPointClear_3
00001CF4  0C82 0000 2998          cmp.l     #7,D2
00001CF8  0007      
00001CFA  630E      2999          bls.s     BreakPointClear_1
                    3000   BreakPointClear_3:
                    3001   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001CFC  4879 0000 3002          pea       @m68kde~1_69.L
00001D00  4902      
00001D02  4E92      3003          jsr       (A2)
00001D04  584F      3004          addq.w    #4,A7
                    3005   ; return ;
00001D06  6000 0080 3006          bra       BreakPointClear_4
                    3007   BreakPointClear_1:
                    3008   ; }
                    3009   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D0A  2002      3010          move.l    D2,D0
00001D0C  E588      3011          lsl.l     #2,D0
00001D0E  41F9 0B00 3012          lea       _BreakPointSetOrCleared.L,A0
00001D12  015E      
00001D14  2030 0800 3013          move.l    0(A0,D0.L),D0
00001D18  0C80 0000 3014          cmp.l     #1,D0
00001D1C  0001      
00001D1E  6600 005A 3015          bne       BreakPointClear_5
                    3016   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D22  2002      3017          move.l    D2,D0
00001D24  E588      3018          lsl.l     #2,D0
00001D26  41F9 0B00 3019          lea       _BreakPointAddress.L,A0
00001D2A  012E      
00001D2C  2D70 0800 3020          move.l    0(A0,D0.L),-4(A6)
00001D30  FFFC      
                    3021   ; BreakPointAddress[i] = 0 ;
00001D32  2002      3022          move.l    D2,D0
00001D34  E588      3023          lsl.l     #2,D0
00001D36  41F9 0B00 3024          lea       _BreakPointAddress.L,A0
00001D3A  012E      
00001D3C  42B0 0800 3025          clr.l     0(A0,D0.L)
                    3026   ; BreakPointSetOrCleared[i] = 0 ;
00001D40  2002      3027          move.l    D2,D0
00001D42  E588      3028          lsl.l     #2,D0
00001D44  41F9 0B00 3029          lea       _BreakPointSetOrCleared.L,A0
00001D48  015E      
00001D4A  42B0 0800 3030          clr.l     0(A0,D0.L)
                    3031   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D4E  2002      3032          move.l    D2,D0
00001D50  E388      3033          lsl.l     #1,D0
00001D52  41F9 0B00 3034          lea       _BreakPointInstruction.L,A0
00001D56  014E      
00001D58  226E FFFC 3035          move.l    -4(A6),A1
00001D5C  32B0 0800 3036          move.w    0(A0,D0.L),(A1)
                    3037   ; BreakPointInstruction[i] = 0 ;
00001D60  2002      3038          move.l    D2,D0
00001D62  E388      3039          lsl.l     #1,D0
00001D64  41F9 0B00 3040          lea       _BreakPointInstruction.L,A0
00001D68  014E      
00001D6A  4270 0800 3041          clr.w     0(A0,D0.L)
                    3042   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001D6E  4879 0000 3043          pea       @m68kde~1_70.L
00001D72  491E      
00001D74  4E92      3044          jsr       (A2)
00001D76  584F      3045          addq.w    #4,A7
00001D78  600A      3046          bra.s     BreakPointClear_6
                    3047   BreakPointClear_5:
                    3048   ; }
                    3049   ; else
                    3050   ; printf("\r\nBreak Point wasn't Set.....") ;
00001D7A  4879 0000 3051          pea       @m68kde~1_71.L
00001D7E  493C      
00001D80  4E92      3052          jsr       (A2)
00001D82  584F      3053          addq.w    #4,A7
                    3054   BreakPointClear_6:
                    3055   ; BreakPointDisplay() ;
00001D84  4EB8 1B36 3056          jsr       _BreakPointDisplay
                    3057   ; return ;
                    3058   BreakPointClear_4:
00001D88  4CDF 0404 3059          movem.l   (A7)+,D2/A2
00001D8C  4E5E      3060          unlk      A6
00001D8E  4E75      3061          rts
                    3062   ; }
                    3063   ; void WatchPointClear(void)
                    3064   ; {
                    3065   _WatchPointClear:
00001D90  48E7 2020 3066          movem.l   D2/A2,-(A7)
00001D94  45F9 0000 3067          lea       _printf.L,A2
00001D98  38F0      
                    3068   ; unsigned int i ;
                    3069   ; WatchPointDisplay() ;
00001D9A  4EB8 1C0A 3070          jsr       _WatchPointDisplay
                    3071   ; printf("\r\nEnter Watch Point Number: ") ;
00001D9E  4879 0000 3072          pea       @m68kde~1_72.L
00001DA2  495A      
00001DA4  4E92      3073          jsr       (A2)
00001DA6  584F      3074          addq.w    #4,A7
                    3075   ; i = xtod(_getch()) ;           // get watch pointer number
00001DA8  2F00      3076          move.l    D0,-(A7)
00001DAA  4EB8 0B68 3077          jsr       __getch
00001DAE  2200      3078          move.l    D0,D1
00001DB0  201F      3079          move.l    (A7)+,D0
00001DB2  2F01      3080          move.l    D1,-(A7)
00001DB4  4EB8 0BD2 3081          jsr       _xtod
00001DB8  584F      3082          addq.w    #4,A7
00001DBA  C0BC 0000 3083          and.l     #255,D0
00001DBE  00FF      
00001DC0  2400      3084          move.l    D0,D2
                    3085   ; if((i < 0) || (i > 7))   {
00001DC2  0C82 0000 3086          cmp.l     #0,D2
00001DC6  0000      
00001DC8  6508      3087          blo.s     WatchPointClear_3
00001DCA  0C82 0000 3088          cmp.l     #7,D2
00001DCE  0007      
00001DD0  630E      3089          bls.s     WatchPointClear_1
                    3090   WatchPointClear_3:
                    3091   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001DD2  4879 0000 3092          pea       @m68kde~1_69.L
00001DD6  4902      
00001DD8  4E92      3093          jsr       (A2)
00001DDA  584F      3094          addq.w    #4,A7
                    3095   ; return ;
00001DDC  6000 004E 3096          bra       WatchPointClear_4
                    3097   WatchPointClear_1:
                    3098   ; }
                    3099   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001DE0  2002      3100          move.l    D2,D0
00001DE2  E588      3101          lsl.l     #2,D0
00001DE4  41F9 0B00 3102          lea       _WatchPointSetOrCleared.L,A0
00001DE8  01A2      
00001DEA  2030 0800 3103          move.l    0(A0,D0.L),D0
00001DEE  0C80 0000 3104          cmp.l     #1,D0
00001DF2  0001      
00001DF4  6628      3105          bne.s     WatchPointClear_5
                    3106   ; WatchPointAddress[i] = 0 ;
00001DF6  2002      3107          move.l    D2,D0
00001DF8  E588      3108          lsl.l     #2,D0
00001DFA  41F9 0B00 3109          lea       _WatchPointAddress.L,A0
00001DFE  0182      
00001E00  42B0 0800 3110          clr.l     0(A0,D0.L)
                    3111   ; WatchPointSetOrCleared[i] = 0 ;
00001E04  2002      3112          move.l    D2,D0
00001E06  E588      3113          lsl.l     #2,D0
00001E08  41F9 0B00 3114          lea       _WatchPointSetOrCleared.L,A0
00001E0C  01A2      
00001E0E  42B0 0800 3115          clr.l     0(A0,D0.L)
                    3116   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E12  4879 0000 3117          pea       @m68kde~1_73.L
00001E16  4978      
00001E18  4E92      3118          jsr       (A2)
00001E1A  584F      3119          addq.w    #4,A7
00001E1C  600A      3120          bra.s     WatchPointClear_6
                    3121   WatchPointClear_5:
                    3122   ; }
                    3123   ; else
                    3124   ; printf("\r\nWatch Point Was not Set.....") ;
00001E1E  4879 0000 3125          pea       @m68kde~1_74.L
00001E22  4996      
00001E24  4E92      3126          jsr       (A2)
00001E26  584F      3127          addq.w    #4,A7
                    3128   WatchPointClear_6:
                    3129   ; WatchPointDisplay() ;
00001E28  4EB8 1C0A 3130          jsr       _WatchPointDisplay
                    3131   ; return ;
                    3132   WatchPointClear_4:
00001E2C  4CDF 0404 3133          movem.l   (A7)+,D2/A2
00001E30  4E75      3134          rts
                    3135   ; }
                    3136   ; void DisableBreakPoints(void)
                    3137   ; {
                    3138   _DisableBreakPoints:
00001E32  4E56 FFFC 3139          link      A6,#-4
00001E36  2F02      3140          move.l    D2,-(A7)
                    3141   ; int i ;
                    3142   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3143   ; for(i = 0; i < 8; i++)  {
00001E38  4282      3144          clr.l     D2
                    3145   DisableBreakPoints_1:
00001E3A  0C82 0000 3146          cmp.l     #8,D2
00001E3E  0008      
00001E40  6C00 003E 3147          bge       DisableBreakPoints_3
                    3148   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E44  2002      3149          move.l    D2,D0
00001E46  E588      3150          lsl.l     #2,D0
00001E48  41F9 0B00 3151          lea       _BreakPointSetOrCleared.L,A0
00001E4C  015E      
00001E4E  2030 0800 3152          move.l    0(A0,D0.L),D0
00001E52  0C80 0000 3153          cmp.l     #1,D0
00001E56  0001      
00001E58  6622      3154          bne.s     DisableBreakPoints_4
                    3155   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E5A  2002      3156          move.l    D2,D0
00001E5C  E588      3157          lsl.l     #2,D0
00001E5E  41F9 0B00 3158          lea       _BreakPointAddress.L,A0
00001E62  012E      
00001E64  2D70 0800 3159          move.l    0(A0,D0.L),-4(A6)
00001E68  FFFC      
                    3160   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E6A  2002      3161          move.l    D2,D0
00001E6C  E388      3162          lsl.l     #1,D0
00001E6E  41F9 0B00 3163          lea       _BreakPointInstruction.L,A0
00001E72  014E      
00001E74  226E FFFC 3164          move.l    -4(A6),A1
00001E78  32B0 0800 3165          move.w    0(A0,D0.L),(A1)
                    3166   DisableBreakPoints_4:
00001E7C  5282      3167          addq.l    #1,D2
00001E7E  60BA      3168          bra       DisableBreakPoints_1
                    3169   DisableBreakPoints_3:
00001E80  241F      3170          move.l    (A7)+,D2
00001E82  4E5E      3171          unlk      A6
00001E84  4E75      3172          rts
                    3173   ; }
                    3174   ; }
                    3175   ; }
                    3176   ; void EnableBreakPoints(void)
                    3177   ; {
                    3178   _EnableBreakPoints:
00001E86  4E56 FFFC 3179          link      A6,#-4
00001E8A  2F02      3180          move.l    D2,-(A7)
                    3181   ; int i ;
                    3182   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3183   ; for(i = 0; i < 8; i++)  {
00001E8C  4282      3184          clr.l     D2
                    3185   EnableBreakPoints_1:
00001E8E  0C82 0000 3186          cmp.l     #8,D2
00001E92  0008      
00001E94  6C32      3187          bge.s     EnableBreakPoints_3
                    3188   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001E96  2002      3189          move.l    D2,D0
00001E98  E588      3190          lsl.l     #2,D0
00001E9A  41F9 0B00 3191          lea       _BreakPointSetOrCleared.L,A0
00001E9E  015E      
00001EA0  2030 0800 3192          move.l    0(A0,D0.L),D0
00001EA4  0C80 0000 3193          cmp.l     #1,D0
00001EA8  0001      
00001EAA  6618      3194          bne.s     EnableBreakPoints_4
                    3195   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001EAC  2002      3196          move.l    D2,D0
00001EAE  E588      3197          lsl.l     #2,D0
00001EB0  41F9 0B00 3198          lea       _BreakPointAddress.L,A0
00001EB4  012E      
00001EB6  2D70 0800 3199          move.l    0(A0,D0.L),-4(A6)
00001EBA  FFFC      
                    3200   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EBC  206E FFFC 3201          move.l    -4(A6),A0
00001EC0  30BC 4E4E 3202          move.w    #20046,(A0)
                    3203   EnableBreakPoints_4:
00001EC4  5282      3204          addq.l    #1,D2
00001EC6  60C6      3205          bra       EnableBreakPoints_1
                    3206   EnableBreakPoints_3:
00001EC8  241F      3207          move.l    (A7)+,D2
00001ECA  4E5E      3208          unlk      A6
00001ECC  4E75      3209          rts
                    3210   ; }
                    3211   ; }
                    3212   ; }
                    3213   ; void KillAllBreakPoints(void)
                    3214   ; {
                    3215   _KillAllBreakPoints:
00001ECE  4E56 FFFC 3216          link      A6,#-4
00001ED2  2F02      3217          move.l    D2,-(A7)
                    3218   ; int i ;
                    3219   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3220   ; for(i = 0; i < 8; i++)  {
00001ED4  4282      3221          clr.l     D2
                    3222   KillAllBreakPoints_1:
00001ED6  0C82 0000 3223          cmp.l     #8,D2
00001EDA  0008      
00001EDC  6C00 0052 3224          bge       KillAllBreakPoints_3
                    3225   ; // clear BP
                    3226   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001EE0  2002      3227          move.l    D2,D0
00001EE2  E588      3228          lsl.l     #2,D0
00001EE4  41F9 0B00 3229          lea       _BreakPointAddress.L,A0
00001EE8  012E      
00001EEA  2D70 0800 3230          move.l    0(A0,D0.L),-4(A6)
00001EEE  FFFC      
                    3231   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001EF0  2002      3232          move.l    D2,D0
00001EF2  E388      3233          lsl.l     #1,D0
00001EF4  41F9 0B00 3234          lea       _BreakPointInstruction.L,A0
00001EF8  014E      
00001EFA  226E FFFC 3235          move.l    -4(A6),A1
00001EFE  32B0 0800 3236          move.w    0(A0,D0.L),(A1)
                    3237   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F02  2002      3238          move.l    D2,D0
00001F04  E588      3239          lsl.l     #2,D0
00001F06  41F9 0B00 3240          lea       _BreakPointAddress.L,A0
00001F0A  012E      
00001F0C  42B0 0800 3241          clr.l     0(A0,D0.L)
                    3242   ; BreakPointInstruction[i] = 0 ;
00001F10  2002      3243          move.l    D2,D0
00001F12  E388      3244          lsl.l     #1,D0
00001F14  41F9 0B00 3245          lea       _BreakPointInstruction.L,A0
00001F18  014E      
00001F1A  4270 0800 3246          clr.w     0(A0,D0.L)
                    3247   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F1E  2002      3248          move.l    D2,D0
00001F20  E588      3249          lsl.l     #2,D0
00001F22  41F9 0B00 3250          lea       _BreakPointSetOrCleared.L,A0
00001F26  015E      
00001F28  42B0 0800 3251          clr.l     0(A0,D0.L)
00001F2C  5282      3252          addq.l    #1,D2
00001F2E  60A6      3253          bra       KillAllBreakPoints_1
                    3254   KillAllBreakPoints_3:
00001F30  241F      3255          move.l    (A7)+,D2
00001F32  4E5E      3256          unlk      A6
00001F34  4E75      3257          rts
                    3258   ; }
                    3259   ; //BreakPointDisplay() ;       // display the break points
                    3260   ; }
                    3261   ; void KillAllWatchPoints(void)
                    3262   ; {
                    3263   _KillAllWatchPoints:
00001F36  2F02      3264          move.l    D2,-(A7)
                    3265   ; int i ;
                    3266   ; for(i = 0; i < 8; i++)  {
00001F38  4282      3267          clr.l     D2
                    3268   KillAllWatchPoints_1:
00001F3A  0C82 0000 3269          cmp.l     #8,D2
00001F3E  0008      
00001F40  6C20      3270          bge.s     KillAllWatchPoints_3
                    3271   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F42  2002      3272          move.l    D2,D0
00001F44  E588      3273          lsl.l     #2,D0
00001F46  41F9 0B00 3274          lea       _WatchPointAddress.L,A0
00001F4A  0182      
00001F4C  42B0 0800 3275          clr.l     0(A0,D0.L)
                    3276   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F50  2002      3277          move.l    D2,D0
00001F52  E588      3278          lsl.l     #2,D0
00001F54  41F9 0B00 3279          lea       _WatchPointSetOrCleared.L,A0
00001F58  01A2      
00001F5A  42B0 0800 3280          clr.l     0(A0,D0.L)
00001F5E  5282      3281          addq.l    #1,D2
00001F60  60D8      3282          bra       KillAllWatchPoints_1
                    3283   KillAllWatchPoints_3:
00001F62  241F      3284          move.l    (A7)+,D2
00001F64  4E75      3285          rts
                    3286   ; }
                    3287   ; //WatchPointDisplay() ;       // display the break points
                    3288   ; }
                    3289   ; void SetBreakPoint(void)
                    3290   ; {
                    3291   _SetBreakPoint:
00001F66  4E56 FFFC 3292          link      A6,#-4
00001F6A  48E7 3830 3293          movem.l   D2/D3/D4/A2/A3,-(A7)
00001F6E  45F9 0000 3294          lea       _printf.L,A2
00001F72  38F0      
00001F74  47F9 0B00 3295          lea       _BreakPointSetOrCleared.L,A3
00001F78  015E      
                    3296   ; int i ;
                    3297   ; int BPNumber;
                    3298   ; int BPAddress;
                    3299   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3300   ; // see if any free break points
                    3301   ; for(i = 0; i < 8; i ++) {
00001F7A  4282      3302          clr.l     D2
                    3303   SetBreakPoint_1:
00001F7C  0C82 0000 3304          cmp.l     #8,D2
00001F80  0008      
00001F82  6C10      3305          bge.s     SetBreakPoint_3
                    3306   ; if( BreakPointSetOrCleared[i] == 0)
00001F84  2002      3307          move.l    D2,D0
00001F86  E588      3308          lsl.l     #2,D0
00001F88  2033 0800 3309          move.l    0(A3,D0.L),D0
00001F8C  6602      3310          bne.s     SetBreakPoint_4
                    3311   ; break ;         // if spare BP found allow user to set it
00001F8E  6004      3312          bra.s     SetBreakPoint_3
                    3313   SetBreakPoint_4:
00001F90  5282      3314          addq.l    #1,D2
00001F92  60E8      3315          bra       SetBreakPoint_1
                    3316   SetBreakPoint_3:
                    3317   ; }
                    3318   ; if(i == 8) {
00001F94  0C82 0000 3319          cmp.l     #8,D2
00001F98  0008      
00001F9A  660E      3320          bne.s     SetBreakPoint_6
                    3321   ; printf("\r\nNo FREE Break Points.....") ;
00001F9C  4879 0000 3322          pea       @m68kde~1_75.L
00001FA0  49B6      
00001FA2  4E92      3323          jsr       (A2)
00001FA4  584F      3324          addq.w    #4,A7
                    3325   ; return ;
00001FA6  6000 00D6 3326          bra       SetBreakPoint_15
                    3327   SetBreakPoint_6:
                    3328   ; }
                    3329   ; printf("\r\nBreak Point Address: ") ;
00001FAA  4879 0000 3330          pea       @m68kde~1_76.L
00001FAE  49D2      
00001FB0  4E92      3331          jsr       (A2)
00001FB2  584F      3332          addq.w    #4,A7
                    3333   ; BPAddress = Get8HexDigits(0) ;
00001FB4  42A7      3334          clr.l     -(A7)
00001FB6  4EB8 0CA4 3335          jsr       _Get8HexDigits
00001FBA  584F      3336          addq.w    #4,A7
00001FBC  2600      3337          move.l    D0,D3
                    3338   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FBE  2803      3339          move.l    D3,D4
                    3340   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FC0  2003      3341          move.l    D3,D0
00001FC2  C0BC 0000 3342          and.l     #1,D0
00001FC6  0001      
00001FC8  0C80 0000 3343          cmp.l     #1,D0
00001FCC  0001      
00001FCE  660E      3344          bne.s     SetBreakPoint_9
                    3345   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001FD0  4879 0000 3346          pea       @m68kde~1_77.L
00001FD4  49EA      
00001FD6  4E92      3347          jsr       (A2)
00001FD8  584F      3348          addq.w    #4,A7
                    3349   ; return ;
00001FDA  6000 00A2 3350          bra       SetBreakPoint_15
                    3351   SetBreakPoint_9:
                    3352   ; }
                    3353   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001FDE  0C83 0000 3354          cmp.l     #32768,D3
00001FE2  8000      
00001FE4  640E      3355          bhs.s     SetBreakPoint_11
                    3356   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001FE6  4879 0000 3357          pea       @m68kde~1_78.L
00001FEA  4A20      
00001FEC  4E92      3358          jsr       (A2)
00001FEE  584F      3359          addq.w    #4,A7
                    3360   ; return ;
00001FF0  6000 008C 3361          bra       SetBreakPoint_15
                    3362   SetBreakPoint_11:
                    3363   ; }
                    3364   ; // search for first free bp or existing same BP
                    3365   ; for(i = 0; i < 8; i++)  {
00001FF4  4282      3366          clr.l     D2
                    3367   SetBreakPoint_13:
00001FF6  0C82 0000 3368          cmp.l     #8,D2
00001FFA  0008      
00001FFC  6C00 0080 3369          bge       SetBreakPoint_15
                    3370   ; if(BreakPointAddress[i] == BPAddress)   {
00002000  2002      3371          move.l    D2,D0
00002002  E588      3372          lsl.l     #2,D0
00002004  41F9 0B00 3373          lea       _BreakPointAddress.L,A0
00002008  012E      
0000200A  B6B0 0800 3374          cmp.l     0(A0,D0.L),D3
0000200E  6610      3375          bne.s     SetBreakPoint_16
                    3376   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002010  2F03      3377          move.l    D3,-(A7)
00002012  4879 0000 3378          pea       @m68kde~1_79.L
00002016  4A68      
00002018  4E92      3379          jsr       (A2)
0000201A  504F      3380          addq.w    #8,A7
                    3381   ; return ;
0000201C  6000 0060 3382          bra       SetBreakPoint_15
                    3383   SetBreakPoint_16:
                    3384   ; }
                    3385   ; if(BreakPointSetOrCleared[i] == 0) {
00002020  2002      3386          move.l    D2,D0
00002022  E588      3387          lsl.l     #2,D0
00002024  2033 0800 3388          move.l    0(A3,D0.L),D0
00002028  6600 004E 3389          bne       SetBreakPoint_18
                    3390   ; // set BP here
                    3391   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000202C  2002      3392          move.l    D2,D0
0000202E  E588      3393          lsl.l     #2,D0
00002030  27BC 0000 3394          move.l    #1,0(A3,D0.L)
00002034  0001 0800 
                    3395   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002038  2044      3396          move.l    D4,A0
0000203A  2002      3397          move.l    D2,D0
0000203C  E388      3398          lsl.l     #1,D0
0000203E  43F9 0B00 3399          lea       _BreakPointInstruction.L,A1
00002042  014E      
00002044  3390 0800 3400          move.w    (A0),0(A1,D0.L)
                    3401   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00002048  2F04      3402          move.l    D4,-(A7)
0000204A  4879 0000 3403          pea       @m68kde~1_80.L
0000204E  4AA0      
00002050  4E92      3404          jsr       (A2)
00002052  504F      3405          addq.w    #8,A7
                    3406   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00002054  2044      3407          move.l    D4,A0
00002056  30BC 4E4E 3408          move.w    #20046,(A0)
                    3409   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
0000205A  2002      3410          move.l    D2,D0
0000205C  E588      3411          lsl.l     #2,D0
0000205E  41F9 0B00 3412          lea       _BreakPointAddress.L,A0
00002062  012E      
00002064  2183 0800 3413          move.l    D3,0(A0,D0.L)
                    3414   ; printf("\r\n") ;
00002068  4879 0000 3415          pea       @m68kde~1_1.L
0000206C  42C6      
0000206E  4E92      3416          jsr       (A2)
00002070  584F      3417          addq.w    #4,A7
                    3418   ; BreakPointDisplay() ;       // display the break points
00002072  4EB8 1B36 3419          jsr       _BreakPointDisplay
                    3420   ; return ;
00002076  6006      3421          bra.s     SetBreakPoint_15
                    3422   SetBreakPoint_18:
00002078  5282      3423          addq.l    #1,D2
0000207A  6000 FF7A 3424          bra       SetBreakPoint_13
                    3425   SetBreakPoint_15:
0000207E  4CDF 0C1C 3426          movem.l   (A7)+,D2/D3/D4/A2/A3
00002082  4E5E      3427          unlk      A6
00002084  4E75      3428          rts
                    3429   ; }
                    3430   ; }
                    3431   ; }
                    3432   ; void SetWatchPoint(void)
                    3433   ; {
                    3434   _SetWatchPoint:
00002086  4E56 FFF8 3435          link      A6,#-8
0000208A  48E7 3030 3436          movem.l   D2/D3/A2/A3,-(A7)
0000208E  45F9 0000 3437          lea       _printf.L,A2
00002092  38F0      
00002094  47F9 0B00 3438          lea       _WatchPointSetOrCleared.L,A3
00002098  01A2      
                    3439   ; int i ;
                    3440   ; int WPNumber;
                    3441   ; int WPAddress;
                    3442   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3443   ; // see if any free break points
                    3444   ; for(i = 0; i < 8; i ++) {
0000209A  4282      3445          clr.l     D2
                    3446   SetWatchPoint_1:
0000209C  0C82 0000 3447          cmp.l     #8,D2
000020A0  0008      
000020A2  6C10      3448          bge.s     SetWatchPoint_3
                    3449   ; if( WatchPointSetOrCleared[i] == 0)
000020A4  2002      3450          move.l    D2,D0
000020A6  E588      3451          lsl.l     #2,D0
000020A8  2033 0800 3452          move.l    0(A3,D0.L),D0
000020AC  6602      3453          bne.s     SetWatchPoint_4
                    3454   ; break ;         // if spare WP found allow user to set it
000020AE  6004      3455          bra.s     SetWatchPoint_3
                    3456   SetWatchPoint_4:
000020B0  5282      3457          addq.l    #1,D2
000020B2  60E8      3458          bra       SetWatchPoint_1
                    3459   SetWatchPoint_3:
                    3460   ; }
                    3461   ; if(i == 8) {
000020B4  0C82 0000 3462          cmp.l     #8,D2
000020B8  0008      
000020BA  660E      3463          bne.s     SetWatchPoint_6
                    3464   ; printf("\r\nNo FREE Watch Points.....") ;
000020BC  4879 0000 3465          pea       @m68kde~1_81.L
000020C0  4AC6      
000020C2  4E92      3466          jsr       (A2)
000020C4  584F      3467          addq.w    #4,A7
                    3468   ; return ;
000020C6  6000 008C 3469          bra       SetWatchPoint_11
                    3470   SetWatchPoint_6:
                    3471   ; }
                    3472   ; printf("\r\nWatch Point Address: ") ;
000020CA  4879 0000 3473          pea       @m68kde~1_82.L
000020CE  4AE2      
000020D0  4E92      3474          jsr       (A2)
000020D2  584F      3475          addq.w    #4,A7
                    3476   ; WPAddress = Get8HexDigits(0) ;
000020D4  42A7      3477          clr.l     -(A7)
000020D6  4EB8 0CA4 3478          jsr       _Get8HexDigits
000020DA  584F      3479          addq.w    #4,A7
000020DC  2600      3480          move.l    D0,D3
                    3481   ; // search for first free wp or existing same wp
                    3482   ; for(i = 0; i < 8; i++)  {
000020DE  4282      3483          clr.l     D2
                    3484   SetWatchPoint_9:
000020E0  0C82 0000 3485          cmp.l     #8,D2
000020E4  0008      
000020E6  6C00 006C 3486          bge       SetWatchPoint_11
                    3487   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
000020EA  2002      3488          move.l    D2,D0
000020EC  E588      3489          lsl.l     #2,D0
000020EE  41F9 0B00 3490          lea       _WatchPointAddress.L,A0
000020F2  0182      
000020F4  B6B0 0800 3491          cmp.l     0(A0,D0.L),D3
000020F8  6614      3492          bne.s     SetWatchPoint_12
000020FA  4A83      3493          tst.l     D3
000020FC  6710      3494          beq.s     SetWatchPoint_12
                    3495   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
000020FE  2F03      3496          move.l    D3,-(A7)
00002100  4879 0000 3497          pea       @m68kde~1_83.L
00002104  4AFA      
00002106  4E92      3498          jsr       (A2)
00002108  504F      3499          addq.w    #8,A7
                    3500   ; return ;
0000210A  6000 0048 3501          bra       SetWatchPoint_11
                    3502   SetWatchPoint_12:
                    3503   ; }
                    3504   ; if(WatchPointSetOrCleared[i] == 0) {
0000210E  2002      3505          move.l    D2,D0
00002110  E588      3506          lsl.l     #2,D0
00002112  2033 0800 3507          move.l    0(A3,D0.L),D0
00002116  6600 0038 3508          bne       SetWatchPoint_14
                    3509   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
0000211A  2002      3510          move.l    D2,D0
0000211C  E588      3511          lsl.l     #2,D0
0000211E  27BC 0000 3512          move.l    #1,0(A3,D0.L)
00002122  0001 0800 
                    3513   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002126  2F03      3514          move.l    D3,-(A7)
00002128  4879 0000 3515          pea       @m68kde~1_84.L
0000212C  4B30      
0000212E  4E92      3516          jsr       (A2)
00002130  504F      3517          addq.w    #8,A7
                    3518   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002132  2002      3519          move.l    D2,D0
00002134  E588      3520          lsl.l     #2,D0
00002136  41F9 0B00 3521          lea       _WatchPointAddress.L,A0
0000213A  0182      
0000213C  2183 0800 3522          move.l    D3,0(A0,D0.L)
                    3523   ; printf("\r\n") ;
00002140  4879 0000 3524          pea       @m68kde~1_1.L
00002144  42C6      
00002146  4E92      3525          jsr       (A2)
00002148  584F      3526          addq.w    #4,A7
                    3527   ; WatchPointDisplay() ;       // display the break points
0000214A  4EB8 1C0A 3528          jsr       _WatchPointDisplay
                    3529   ; return ;
0000214E  6004      3530          bra.s     SetWatchPoint_11
                    3531   SetWatchPoint_14:
00002150  5282      3532          addq.l    #1,D2
00002152  608C      3533          bra       SetWatchPoint_9
                    3534   SetWatchPoint_11:
00002154  4CDF 0C0C 3535          movem.l   (A7)+,D2/D3/A2/A3
00002158  4E5E      3536          unlk      A6
0000215A  4E75      3537          rts
                    3538   ; }
                    3539   ; }
                    3540   ; }
                    3541   ; void HandleBreakPoint(void)
                    3542   ; {
                    3543   _HandleBreakPoint:
0000215C  4E56 FFFC 3544          link      A6,#-4
00002160  48E7 0038 3545          movem.l   A2/A3/A4,-(A7)
00002164  45F9 0B00 3546          lea       _i.L,A2
00002168  00C4      
0000216A  47F9 0000 3547          lea       _printf.L,A3
0000216E  38F0      
00002170  49F9 0B00 3548          lea       _PC.L,A4
00002174  0120      
                    3549   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3550   ; // now we have to put the break point back to run the instruction
                    3551   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3552   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00002176  5594      3553          subq.l    #2,(A4)
                    3554   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00002178  4879 0000 3555          pea       @m68kde~1_85.L
0000217C  4B56      
0000217E  4E93      3556          jsr       (A3)
00002180  584F      3557          addq.w    #4,A7
                    3558   ; printf("\r\nSingle Step : [ON]") ;
00002182  4879 0000 3559          pea       @m68kde~1_86.L
00002186  4B6A      
00002188  4E93      3560          jsr       (A3)
0000218A  584F      3561          addq.w    #4,A7
                    3562   ; printf("\r\nBreakPoints : [Enabled]") ;
0000218C  4879 0000 3563          pea       @m68kde~1_87.L
00002190  4B80      
00002192  4E93      3564          jsr       (A3)
00002194  584F      3565          addq.w    #4,A7
                    3566   ; // now clear the break point (put original instruction back)
                    3567   ; ProgramBreakPointAddress = PC ;
00002196  2D54 FFFC 3568          move.l    (A4),-4(A6)
                    3569   ; for(i = 0; i < 8; i ++) {
0000219A  4292      3570          clr.l     (A2)
                    3571   HandleBreakPoint_1:
0000219C  2012      3572          move.l    (A2),D0
0000219E  0C80 0000 3573          cmp.l     #8,D0
000021A2  0008      
000021A4  6400 0056 3574          bhs       HandleBreakPoint_3
                    3575   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021A8  2012      3576          move.l    (A2),D0
000021AA  E588      3577          lsl.l     #2,D0
000021AC  41F9 0B00 3578          lea       _BreakPointAddress.L,A0
000021B0  012E      
000021B2  2230 0800 3579          move.l    0(A0,D0.L),D1
000021B6  B294      3580          cmp.l     (A4),D1
000021B8  6600 003E 3581          bne       HandleBreakPoint_4
                    3582   ; BreakPointAddress[i] = 0 ;
000021BC  2012      3583          move.l    (A2),D0
000021BE  E588      3584          lsl.l     #2,D0
000021C0  41F9 0B00 3585          lea       _BreakPointAddress.L,A0
000021C4  012E      
000021C6  42B0 0800 3586          clr.l     0(A0,D0.L)
                    3587   ; BreakPointSetOrCleared[i] = 0 ;
000021CA  2012      3588          move.l    (A2),D0
000021CC  E588      3589          lsl.l     #2,D0
000021CE  41F9 0B00 3590          lea       _BreakPointSetOrCleared.L,A0
000021D2  015E      
000021D4  42B0 0800 3591          clr.l     0(A0,D0.L)
                    3592   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000021D8  2012      3593          move.l    (A2),D0
000021DA  E388      3594          lsl.l     #1,D0
000021DC  41F9 0B00 3595          lea       _BreakPointInstruction.L,A0
000021E0  014E      
000021E2  226E FFFC 3596          move.l    -4(A6),A1
000021E6  32B0 0800 3597          move.w    0(A0,D0.L),(A1)
                    3598   ; BreakPointInstruction[i] = 0 ;
000021EA  2012      3599          move.l    (A2),D0
000021EC  E388      3600          lsl.l     #1,D0
000021EE  41F9 0B00 3601          lea       _BreakPointInstruction.L,A0
000021F2  014E      
000021F4  4270 0800 3602          clr.w     0(A0,D0.L)
                    3603   HandleBreakPoint_4:
000021F8  5292      3604          addq.l    #1,(A2)
000021FA  60A0      3605          bra       HandleBreakPoint_1
                    3606   HandleBreakPoint_3:
                    3607   ; }
                    3608   ; }
                    3609   ; DumpRegisters() ;
000021FC  4EB8 1388 3610          jsr       _DumpRegisters
                    3611   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002200  4879 0000 3612          pea       @m68kde~1_49.L
00002204  46FC      
00002206  4E93      3613          jsr       (A3)
00002208  584F      3614          addq.w    #4,A7
                    3615   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
0000220A  4879 0000 3616          pea       @m68kde~1_88.L
0000220E  4B9A      
00002210  4E93      3617          jsr       (A3)
00002212  584F      3618          addq.w    #4,A7
                    3619   ; menu() ;
00002214  4EB9 0000 3620          jsr       _menu
00002218  2420      
0000221A  4CDF 1C00 3621          movem.l   (A7)+,A2/A3/A4
0000221E  4E5E      3622          unlk      A6
00002220  4E75      3623          rts
                    3624   ; }
                    3625   ; void UnknownCommand()
                    3626   ; {
                    3627   _UnknownCommand:
                    3628   ; printf("\r\nUnknown Command.....\r\n") ;
00002222  4879 0000 3629          pea       @m68kde~1_89.L
00002226  4BC2      
00002228  4EB9 0000 3630          jsr       _printf
0000222C  38F0      
0000222E  584F      3631          addq.w    #4,A7
                    3632   ; Help() ;
00002230  4EB9 0000 3633          jsr       _Help
00002234  2346      
00002236  4E75      3634          rts
                    3635   ; }
                    3636   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3637   ; void CallDebugMonitor(void)
                    3638   ; {
                    3639   _CallDebugMonitor:
                    3640   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002238  4879 0000 3641          pea       @m68kde~1_90.L
0000223C  4BDC      
0000223E  4EB9 0000 3642          jsr       _printf
00002242  38F0      
00002244  584F      3643          addq.w    #4,A7
                    3644   ; menu();
00002246  4EB9 0000 3645          jsr       _menu
0000224A  2420      
0000224C  4E75      3646          rts
                    3647   ; }
                    3648   ; void Breakpoint(void)
                    3649   ; {
                    3650   _Breakpoint:
0000224E  2F02      3651          move.l    D2,-(A7)
                    3652   ; char c;
                    3653   ; c = toupper(_getch());
00002250  2F00      3654          move.l    D0,-(A7)
00002252  4EB8 0B68 3655          jsr       __getch
00002256  2200      3656          move.l    D0,D1
00002258  201F      3657          move.l    (A7)+,D0
0000225A  2F01      3658          move.l    D1,-(A7)
0000225C  4EB9 0000 3659          jsr       _toupper
00002260  302E      
00002262  584F      3660          addq.w    #4,A7
00002264  1400      3661          move.b    D0,D2
                    3662   ; if( c == (char)('D'))                                      // BreakPoint Display
00002266  0C02 0044 3663          cmp.b     #68,D2
0000226A  6608      3664          bne.s     Breakpoint_1
                    3665   ; BreakPointDisplay() ;
0000226C  4EB8 1B36 3666          jsr       _BreakPointDisplay
00002270  6000 0054 3667          bra       Breakpoint_10
                    3668   Breakpoint_1:
                    3669   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00002274  0C02 004B 3670          cmp.b     #75,D2
00002278  6630      3671          bne.s     Breakpoint_3
                    3672   ; printf("\r\nKill All Break Points...(y/n)?") ;
0000227A  4879 0000 3673          pea       @m68kde~1_91.L
0000227E  4BFC      
00002280  4EB9 0000 3674          jsr       _printf
00002284  38F0      
00002286  584F      3675          addq.w    #4,A7
                    3676   ; c = toupper(_getch());
00002288  2F00      3677          move.l    D0,-(A7)
0000228A  4EB8 0B68 3678          jsr       __getch
0000228E  2200      3679          move.l    D0,D1
00002290  201F      3680          move.l    (A7)+,D0
00002292  2F01      3681          move.l    D1,-(A7)
00002294  4EB9 0000 3682          jsr       _toupper
00002298  302E      
0000229A  584F      3683          addq.w    #4,A7
0000229C  1400      3684          move.b    D0,D2
                    3685   ; if(c == (char)('Y'))
0000229E  0C02 0059 3686          cmp.b     #89,D2
000022A2  6604      3687          bne.s     Breakpoint_5
                    3688   ; KillAllBreakPoints() ;
000022A4  4EB8 1ECE 3689          jsr       _KillAllBreakPoints
                    3690   Breakpoint_5:
000022A8  601C      3691          bra.s     Breakpoint_10
                    3692   Breakpoint_3:
                    3693   ; }
                    3694   ; else if(c == (char)('S')) {
000022AA  0C02 0053 3695          cmp.b     #83,D2
000022AE  6606      3696          bne.s     Breakpoint_7
                    3697   ; SetBreakPoint() ;
000022B0  4EB8 1F66 3698          jsr       _SetBreakPoint
000022B4  6010      3699          bra.s     Breakpoint_10
                    3700   Breakpoint_7:
                    3701   ; }
                    3702   ; else if(c == (char)('C')) {
000022B6  0C02 0043 3703          cmp.b     #67,D2
000022BA  6606      3704          bne.s     Breakpoint_9
                    3705   ; BreakPointClear() ;
000022BC  4EB8 1CB6 3706          jsr       _BreakPointClear
000022C0  6004      3707          bra.s     Breakpoint_10
                    3708   Breakpoint_9:
                    3709   ; }
                    3710   ; else
                    3711   ; UnknownCommand() ;
000022C2  4EB8 2222 3712          jsr       _UnknownCommand
                    3713   Breakpoint_10:
000022C6  241F      3714          move.l    (A7)+,D2
000022C8  4E75      3715          rts
                    3716   ; }
                    3717   ; void Watchpoint(void)
                    3718   ; {
                    3719   _Watchpoint:
000022CA  2F02      3720          move.l    D2,-(A7)
                    3721   ; char c;
                    3722   ; c = toupper(_getch());
000022CC  2F00      3723          move.l    D0,-(A7)
000022CE  4EB8 0B68 3724          jsr       __getch
000022D2  2200      3725          move.l    D0,D1
000022D4  201F      3726          move.l    (A7)+,D0
000022D6  2F01      3727          move.l    D1,-(A7)
000022D8  4EB9 0000 3728          jsr       _toupper
000022DC  302E      
000022DE  584F      3729          addq.w    #4,A7
000022E0  1400      3730          move.b    D0,D2
                    3731   ; if( c == (char)('D'))                                      // WatchPoint Display
000022E2  0C02 0044 3732          cmp.b     #68,D2
000022E6  6608      3733          bne.s     Watchpoint_1
                    3734   ; WatchPointDisplay() ;
000022E8  4EB8 1C0A 3735          jsr       _WatchPointDisplay
000022EC  6000 0054 3736          bra       Watchpoint_10
                    3737   Watchpoint_1:
                    3738   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
000022F0  0C02 004B 3739          cmp.b     #75,D2
000022F4  6630      3740          bne.s     Watchpoint_3
                    3741   ; printf("\r\nKill All Watch Points...(y/n)?") ;
000022F6  4879 0000 3742          pea       @m68kde~1_92.L
000022FA  4C1E      
000022FC  4EB9 0000 3743          jsr       _printf
00002300  38F0      
00002302  584F      3744          addq.w    #4,A7
                    3745   ; c = toupper(_getch());
00002304  2F00      3746          move.l    D0,-(A7)
00002306  4EB8 0B68 3747          jsr       __getch
0000230A  2200      3748          move.l    D0,D1
0000230C  201F      3749          move.l    (A7)+,D0
0000230E  2F01      3750          move.l    D1,-(A7)
00002310  4EB9 0000 3751          jsr       _toupper
00002314  302E      
00002316  584F      3752          addq.w    #4,A7
00002318  1400      3753          move.b    D0,D2
                    3754   ; if(c == (char)('Y'))
0000231A  0C02 0059 3755          cmp.b     #89,D2
0000231E  6604      3756          bne.s     Watchpoint_5
                    3757   ; KillAllWatchPoints() ;
00002320  4EB8 1F36 3758          jsr       _KillAllWatchPoints
                    3759   Watchpoint_5:
00002324  601C      3760          bra.s     Watchpoint_10
                    3761   Watchpoint_3:
                    3762   ; }
                    3763   ; else if(c == (char)('S')) {
00002326  0C02 0053 3764          cmp.b     #83,D2
0000232A  6606      3765          bne.s     Watchpoint_7
                    3766   ; SetWatchPoint() ;
0000232C  4EB8 2086 3767          jsr       _SetWatchPoint
00002330  6010      3768          bra.s     Watchpoint_10
                    3769   Watchpoint_7:
                    3770   ; }
                    3771   ; else if(c == (char)('C')) {
00002332  0C02 0043 3772          cmp.b     #67,D2
00002336  6606      3773          bne.s     Watchpoint_9
                    3774   ; WatchPointClear() ;
00002338  4EB8 1D90 3775          jsr       _WatchPointClear
0000233C  6004      3776          bra.s     Watchpoint_10
                    3777   Watchpoint_9:
                    3778   ; }
                    3779   ; else
                    3780   ; UnknownCommand() ;
0000233E  4EB8 2222 3781          jsr       _UnknownCommand
                    3782   Watchpoint_10:
00002342  241F      3783          move.l    (A7)+,D2
00002344  4E75      3784          rts
                    3785   ; }
                    3786   ; void Help(void)
                    3787   ; {
                    3788   _Help:
00002346  48E7 2020 3789          movem.l   D2/A2,-(A7)
0000234A  45F9 0000 3790          lea       _printf.L,A2
0000234E  38F0      
                    3791   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002350  41F9 0000 3792          lea       @m68kde~1_93.L,A0
00002354  4C40      
00002356  2408      3793          move.l    A0,D2
                    3794   ; printf(banner) ;
00002358  2F02      3795          move.l    D2,-(A7)
0000235A  4E92      3796          jsr       (A2)
0000235C  584F      3797          addq.w    #4,A7
                    3798   ; printf("\r\n  Debugger Command Summary") ;
0000235E  4879 0000 3799          pea       @m68kde~1_94.L
00002362  4C84      
00002364  4E92      3800          jsr       (A2)
00002366  584F      3801          addq.w    #4,A7
                    3802   ; printf(banner) ;
00002368  2F02      3803          move.l    D2,-(A7)
0000236A  4E92      3804          jsr       (A2)
0000236C  584F      3805          addq.w    #4,A7
                    3806   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
0000236E  4879 0000 3807          pea       @m68kde~1_95.L
00002372  4CA2      
00002374  4E92      3808          jsr       (A2)
00002376  584F      3809          addq.w    #4,A7
                    3810   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
00002378  4879 0000 3811          pea       @m68kde~1_96.L
0000237C  4CE6      
0000237E  4E92      3812          jsr       (A2)
00002380  584F      3813          addq.w    #4,A7
                    3814   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002382  4879 0000 3815          pea       @m68kde~1_97.L
00002386  4D1E      
00002388  4E92      3816          jsr       (A2)
0000238A  584F      3817          addq.w    #4,A7
                    3818   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
0000238C  4879 0000 3819          pea       @m68kde~1_98.L
00002390  4D58      
00002392  4E92      3820          jsr       (A2)
00002394  584F      3821          addq.w    #4,A7
                    3822   ; printf("\r\n  E            - Enter String into Memory") ;
00002396  4879 0000 3823          pea       @m68kde~1_99.L
0000239A  4D8A      
0000239C  4E92      3824          jsr       (A2)
0000239E  584F      3825          addq.w    #4,A7
                    3826   ; printf("\r\n  F            - Fill Memory with Data") ;
000023A0  4879 0000 3827          pea       @m68kde~1_100.L
000023A4  4DB6      
000023A6  4E92      3828          jsr       (A2)
000023A8  584F      3829          addq.w    #4,A7
                    3830   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000023AA  2F39 0B00 3831          move.l    _PC.L,-(A7)
000023AE  0120      
000023B0  4879 0000 3832          pea       @m68kde~1_101.L
000023B4  4DE0      
000023B6  4E92      3833          jsr       (A2)
000023B8  504F      3834          addq.w    #8,A7
                    3835   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
000023BA  4879 0000 3836          pea       @m68kde~1_102.L
000023BE  4E1A      
000023C0  4E92      3837          jsr       (A2)
000023C2  584F      3838          addq.w    #4,A7
                    3839   ; printf("\r\n  M            - Memory Examine and Change");
000023C4  4879 0000 3840          pea       @m68kde~1_103.L
000023C8  4E52      
000023CA  4E92      3841          jsr       (A2)
000023CC  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
000023CE  4879 0000 3844          pea       @m68kde~1_104.L
000023D2  4E80      
000023D4  4E92      3845          jsr       (A2)
000023D6  584F      3846          addq.w    #4,A7
                    3847   ; printf("\r\n  R            - Display 68000 Registers") ;
000023D8  4879 0000 3848          pea       @m68kde~1_105.L
000023DC  4EBA      
000023DE  4E92      3849          jsr       (A2)
000023E0  584F      3850          addq.w    #4,A7
                    3851   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
000023E2  4879 0000 3852          pea       @m68kde~1_106.L
000023E6  4EE6      
000023E8  4E92      3853          jsr       (A2)
000023EA  584F      3854          addq.w    #4,A7
                    3855   ; printf("\r\n  TM           - Test Memory") ;
000023EC  4879 0000 3856          pea       @m68kde~1_107.L
000023F0  4F18      
000023F2  4E92      3857          jsr       (A2)
000023F4  584F      3858          addq.w    #4,A7
                    3859   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
000023F6  4879 0000 3860          pea       @m68kde~1_108.L
000023FA  4F38      
000023FC  4E92      3861          jsr       (A2)
000023FE  584F      3862          addq.w    #4,A7
                    3863   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002400  4879 0000 3864          pea       @m68kde~1_109.L
00002404  4F60      
00002406  4E92      3865          jsr       (A2)
00002408  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000240A  4879 0000 3868          pea       @m68kde~1_110.L
0000240E  4F96      
00002410  4E92      3869          jsr       (A2)
00002412  584F      3870          addq.w    #4,A7
                    3871   ; printf(banner) ;
00002414  2F02      3872          move.l    D2,-(A7)
00002416  4E92      3873          jsr       (A2)
00002418  584F      3874          addq.w    #4,A7
0000241A  4CDF 0404 3875          movem.l   (A7)+,D2/A2
0000241E  4E75      3876          rts
                    3877   ; }
                    3878   ; void menu(void)
                    3879   ; {
                    3880   _menu:
00002420  48E7 303C 3881          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002424  45F9 0000 3882          lea       _printf.L,A2
00002428  38F0      
0000242A  47F9 0B00 3883          lea       _Trace.L,A3
0000242E  00D8      
00002430  49F9 0B00 3884          lea       _x.L,A4
00002434  00C8      
00002436  4BF9 0B00 3885          lea       _SR.L,A5
0000243A  012C      
                    3886   ; char c,c1 ;
                    3887   ; while(1)    {
                    3888   menu_1:
                    3889   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000243C  4EB8 0BA6 3890          jsr       _FlushKeyboard
                    3891   ; printf("\r\n#") ;
00002440  4879 0000 3892          pea       @m68kde~1_111.L
00002444  4FCE      
00002446  4E92      3893          jsr       (A2)
00002448  584F      3894          addq.w    #4,A7
                    3895   ; c = toupper(_getch());
0000244A  2F00      3896          move.l    D0,-(A7)
0000244C  4EB8 0B68 3897          jsr       __getch
00002450  2200      3898          move.l    D0,D1
00002452  201F      3899          move.l    (A7)+,D0
00002454  2F01      3900          move.l    D1,-(A7)
00002456  4EB9 0000 3901          jsr       _toupper
0000245A  302E      
0000245C  584F      3902          addq.w    #4,A7
0000245E  1400      3903          move.b    D0,D2
                    3904   ; if( c == (char)('L'))                  // load s record file
00002460  0C02 004C 3905          cmp.b     #76,D2
00002464  6608      3906          bne.s     menu_4
                    3907   ; Load_SRecordFile() ;
00002466  4EB8 0E36 3908          jsr       _Load_SRecordFile
0000246A  6000 021E 3909          bra       menu_46
                    3910   menu_4:
                    3911   ; else if( c == (char)('D'))             // dump memory
0000246E  0C02 0044 3912          cmp.b     #68,D2
00002472  6608      3913          bne.s     menu_6
                    3914   ; DumpMemory() ;
00002474  4EB8 0CCC 3915          jsr       _DumpMemory
00002478  6000 0210 3916          bra       menu_46
                    3917   menu_6:
                    3918   ; else if( c == (char)('E'))             // Enter String into memory
0000247C  0C02 0045 3919          cmp.b     #69,D2
00002480  660A      3920          bne.s     menu_8
                    3921   ; EnterString() ;
00002482  4EB9 0000 3922          jsr       _EnterString
00002486  27D2      
00002488  6000 0200 3923          bra       menu_46
                    3924   menu_8:
                    3925   ; else if( c == (char)('F'))             // fill memory
0000248C  0C02 0046 3926          cmp.b     #70,D2
00002490  6608      3927          bne.s     menu_10
                    3928   ; FillMemory() ;
00002492  4EB8 0DBC 3929          jsr       _FillMemory
00002496  6000 01F2 3930          bra       menu_46
                    3931   menu_10:
                    3932   ; else if( c == (char)('G'))  {           // go user program
0000249A  0C02 0047 3933          cmp.b     #71,D2
0000249E  6626      3934          bne.s     menu_12
                    3935   ; printf("\r\nProgram Running.....") ;
000024A0  4879 0000 3936          pea       @m68kde~1_112.L
000024A4  4FD2      
000024A6  4E92      3937          jsr       (A2)
000024A8  584F      3938          addq.w    #4,A7
                    3939   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000024AA  4879 0000 3940          pea       @m68kde~1_113.L
000024AE  4FEA      
000024B0  4E92      3941          jsr       (A2)
000024B2  584F      3942          addq.w    #4,A7
                    3943   ; GoFlag = 1 ;
000024B4  23FC 0000 3944          move.l    #1,_GoFlag.L
000024B8  0001 0B00 
000024BC  00DC      
                    3945   ; go() ;
000024BE  4EB8 08B8 3946          jsr       _go
000024C2  6000 01C6 3947          bra       menu_46
                    3948   menu_12:
                    3949   ; }
                    3950   ; else if( c == (char)('M'))           // memory examine and modify
000024C6  0C02 004D 3951          cmp.b     #77,D2
000024CA  6608      3952          bne.s     menu_14
                    3953   ; MemoryChange() ;
000024CC  4EB8 0FC4 3954          jsr       _MemoryChange
000024D0  6000 01B8 3955          bra       menu_46
                    3956   menu_14:
                    3957   ; else if( c == (char)('P'))            // Program Flash Chip
000024D4  0C02 0050 3958          cmp.b     #80,D2
000024D8  6608      3959          bne.s     menu_16
                    3960   ; ProgramFlashChip() ;
000024DA  4EB8 133E 3961          jsr       _ProgramFlashChip
000024DE  6000 01AA 3962          bra       menu_46
                    3963   menu_16:
                    3964   ; else if( c == (char)('C'))             // copy flash chip to ram and go
000024E2  0C02 0043 3965          cmp.b     #67,D2
000024E6  6608      3966          bne.s     menu_18
                    3967   ; LoadFromFlashChip();
000024E8  4EB8 1354 3968          jsr       _LoadFromFlashChip
000024EC  6000 019C 3969          bra       menu_46
                    3970   menu_18:
                    3971   ; else if( c == (char)('R'))             // dump registers
000024F0  0C02 0052 3972          cmp.b     #82,D2
000024F4  6608      3973          bne.s     menu_20
                    3974   ; DumpRegisters() ;
000024F6  4EB8 1388 3975          jsr       _DumpRegisters
000024FA  6000 018E 3976          bra       menu_46
                    3977   menu_20:
                    3978   ; else if( c == (char)('.'))           // change registers
000024FE  0C02 002E 3979          cmp.b     #46,D2
00002502  6608      3980          bne.s     menu_22
                    3981   ; ChangeRegisters() ;
00002504  4EB8 187A 3982          jsr       _ChangeRegisters
00002508  6000 0180 3983          bra       menu_46
                    3984   menu_22:
                    3985   ; else if( c == (char)('B'))              // breakpoint command
0000250C  0C02 0042 3986          cmp.b     #66,D2
00002510  6608      3987          bne.s     menu_24
                    3988   ; Breakpoint() ;
00002512  4EB8 224E 3989          jsr       _Breakpoint
00002516  6000 0172 3990          bra       menu_46
                    3991   menu_24:
                    3992   ; else if( c == (char)('T'))  {          // Test command
0000251A  0C02 0054 3993          cmp.b     #84,D2
0000251E  6600 0046 3994          bne       menu_26
                    3995   ; c1 = toupper(_getch()) ;
00002522  2F00      3996          move.l    D0,-(A7)
00002524  4EB8 0B68 3997          jsr       __getch
00002528  2200      3998          move.l    D0,D1
0000252A  201F      3999          move.l    (A7)+,D0
0000252C  2F01      4000          move.l    D1,-(A7)
0000252E  4EB9 0000 4001          jsr       _toupper
00002532  302E      
00002534  584F      4002          addq.w    #4,A7
00002536  1600      4003          move.b    D0,D3
                    4004   ; if(c1 == (char)('M'))                    // memory test
00002538  0C03 004D 4005          cmp.b     #77,D3
0000253C  6608      4006          bne.s     menu_28
                    4007   ; MemoryTest() ;
0000253E  4EB9 0000 4008          jsr       _MemoryTest
00002542  284A      
00002544  601C      4009          bra.s     menu_33
                    4010   menu_28:
                    4011   ; else if( c1 == (char)('S'))              // Switch Test command
00002546  0C03 0053 4012          cmp.b     #83,D3
0000254A  6606      4013          bne.s     menu_30
                    4014   ; SwitchTest() ;
0000254C  4EB8 0AA4 4015          jsr       _SwitchTest
00002550  6010      4016          bra.s     menu_33
                    4017   menu_30:
                    4018   ; else if( c1 == (char)('D'))              // display Test command
00002552  0C03 0044 4019          cmp.b     #68,D3
00002556  6606      4020          bne.s     menu_32
                    4021   ; TestLEDS() ;
00002558  4EB8 0A50 4022          jsr       _TestLEDS
0000255C  6004      4023          bra.s     menu_33
                    4024   menu_32:
                    4025   ; else
                    4026   ; UnknownCommand() ;
0000255E  4EB8 2222 4027          jsr       _UnknownCommand
                    4028   menu_33:
00002562  6000 0126 4029          bra       menu_46
                    4030   menu_26:
                    4031   ; }
                    4032   ; else if( c == (char)(' ')) {             // Next instruction command
00002566  0C02 0020 4033          cmp.b     #32,D2
0000256A  6636      4034          bne.s     menu_34
                    4035   ; DisableBreakPoints() ;
0000256C  4EB8 1E32 4036          jsr       _DisableBreakPoints
                    4037   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002570  2013      4038          move.l    (A3),D0
00002572  0C80 0000 4039          cmp.l     #1,D0
00002576  0001      
00002578  661A      4040          bne.s     menu_36
0000257A  2039 0B00 4041          move.l    _GoFlag.L,D0
0000257E  00DC      
00002580  0C80 0000 4042          cmp.l     #1,D0
00002584  0001      
00002586  660C      4043          bne.s     menu_36
                    4044   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002588  13FC 0001 4045          move.b    #1,4194314
0000258C  0040 000A 
                    4046   ; return ;
00002590  6000 00FC 4047          bra       menu_38
                    4048   menu_36:
                    4049   ; }
                    4050   ; else
                    4051   ; printf("\r\nError: Press 'G' first to start program") ;
00002594  4879 0000 4052          pea       @m68kde~1_114.L
00002598  5018      
0000259A  4E92      4053          jsr       (A2)
0000259C  584F      4054          addq.w    #4,A7
0000259E  6000 00EA 4055          bra       menu_46
                    4056   menu_34:
                    4057   ; }
                    4058   ; else if( c == (char)('S')) {             // single step
000025A2  0C02 0053 4059          cmp.b     #83,D2
000025A6  6600 008C 4060          bne       menu_39
                    4061   ; if(Trace == 0) {
000025AA  2013      4062          move.l    (A3),D0
000025AC  6600 0050 4063          bne       menu_41
                    4064   ; DisableBreakPoints() ;
000025B0  4EB8 1E32 4065          jsr       _DisableBreakPoints
                    4066   ; printf("\r\nSingle Step  :[ON]") ;
000025B4  4879 0000 4067          pea       @m68kde~1_115.L
000025B8  5042      
000025BA  4E92      4068          jsr       (A2)
000025BC  584F      4069          addq.w    #4,A7
                    4070   ; printf("\r\nBreak Points :[Disabled]") ;
000025BE  4879 0000 4071          pea       @m68kde~1_48.L
000025C2  46E0      
000025C4  4E92      4072          jsr       (A2)
000025C6  584F      4073          addq.w    #4,A7
                    4074   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
000025C8  0055 8000 4075          or.w      #32768,(A5)
                    4076   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
000025CC  2F39 0B00 4077          move.l    _PC.L,-(A7)
000025D0  0120      
000025D2  4879 0000 4078          pea       @m68kde~1_116.L
000025D6  5058      
000025D8  4E92      4079          jsr       (A2)
000025DA  504F      4080          addq.w    #8,A7
                    4081   ; printf("\r\nPush <RESET Button> to Stop.....") ;
000025DC  4879 0000 4082          pea       @m68kde~1_117.L
000025E0  508C      
000025E2  4E92      4083          jsr       (A2)
000025E4  584F      4084          addq.w    #4,A7
                    4085   ; DumpRegisters() ;
000025E6  4EB8 1388 4086          jsr       _DumpRegisters
                    4087   ; Trace = 1;
000025EA  26BC 0000 4088          move.l    #1,(A3)
000025EE  0001      
                    4089   ; TraceException = 1;
000025F0  13FC 0001 4090          move.b    #1,4194314
000025F4  0040 000A 
                    4091   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000025F8  28B8 0074 4092          move.l    116,(A4)
000025FC  6032      4093          bra.s     menu_42
                    4094   menu_41:
                    4095   ; }
                    4096   ; else {
                    4097   ; Trace = 0 ;
000025FE  4293      4098          clr.l     (A3)
                    4099   ; TraceException = 0 ;
00002600  4239 0040 4100          clr.b     4194314
00002604  000A      
                    4101   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002606  28B8 0074 4102          move.l    116,(A4)
                    4103   ; EnableBreakPoints() ;
0000260A  4EB8 1E86 4104          jsr       _EnableBreakPoints
                    4105   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000260E  0255 7FFF 4106          and.w     #32767,(A5)
                    4107   ; printf("\r\nSingle Step : [OFF]") ;
00002612  4879 0000 4108          pea       @m68kde~1_118.L
00002616  50B0      
00002618  4E92      4109          jsr       (A2)
0000261A  584F      4110          addq.w    #4,A7
                    4111   ; printf("\r\nBreak Points :[Enabled]") ;
0000261C  4879 0000 4112          pea       @m68kde~1_119.L
00002620  50C6      
00002622  4E92      4113          jsr       (A2)
00002624  584F      4114          addq.w    #4,A7
                    4115   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002626  4879 0000 4116          pea       @m68kde~1_120.L
0000262A  50E0      
0000262C  4E92      4117          jsr       (A2)
0000262E  584F      4118          addq.w    #4,A7
                    4119   menu_42:
00002630  6000 0058 4120          bra       menu_46
                    4121   menu_39:
                    4122   ; }
                    4123   ; }
                    4124   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002634  0C02 001B 4125          cmp.b     #27,D2
00002638  6600 0040 4126          bne       menu_43
                    4127   ; Trace = 0;
0000263C  4293      4128          clr.l     (A3)
                    4129   ; TraceException = 0;
0000263E  4239 0040 4130          clr.b     4194314
00002642  000A      
                    4131   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002644  28B8 0074 4132          move.l    116,(A4)
                    4133   ; EnableBreakPoints() ;
00002648  4EB8 1E86 4134          jsr       _EnableBreakPoints
                    4135   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000264C  0255 7FFF 4136          and.w     #32767,(A5)
                    4137   ; printf("\r\nSingle Step  :[OFF]") ;
00002650  4879 0000 4138          pea       @m68kde~1_121.L
00002654  510A      
00002656  4E92      4139          jsr       (A2)
00002658  584F      4140          addq.w    #4,A7
                    4141   ; printf("\r\nBreak Points :[Enabled]");
0000265A  4879 0000 4142          pea       @m68kde~1_119.L
0000265E  50C6      
00002660  4E92      4143          jsr       (A2)
00002662  584F      4144          addq.w    #4,A7
                    4145   ; printf("\r\nProgram Running.....") ;
00002664  4879 0000 4146          pea       @m68kde~1_112.L
00002668  4FD2      
0000266A  4E92      4147          jsr       (A2)
0000266C  584F      4148          addq.w    #4,A7
                    4149   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000266E  4879 0000 4150          pea       @m68kde~1_113.L
00002672  4FEA      
00002674  4E92      4151          jsr       (A2)
00002676  584F      4152          addq.w    #4,A7
                    4153   ; return ;
00002678  6014      4154          bra.s     menu_38
                    4155   menu_43:
                    4156   ; }
                    4157   ; else if( c == (char)('W'))              // Watchpoint command
0000267A  0C02 0057 4158          cmp.b     #87,D2
0000267E  6606      4159          bne.s     menu_45
                    4160   ; Watchpoint() ;
00002680  4EB8 22CA 4161          jsr       _Watchpoint
00002684  6004      4162          bra.s     menu_46
                    4163   menu_45:
                    4164   ; else
                    4165   ; UnknownCommand() ;
00002686  4EB8 2222 4166          jsr       _UnknownCommand
                    4167   menu_46:
0000268A  6000 FDB0 4168          bra       menu_1
                    4169   menu_38:
0000268E  4CDF 3C0C 4170          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002692  4E75      4171          rts
                    4172   ; }
                    4173   ; }
                    4174   ; void PrintErrorMessageandAbort(char *string) {
                    4175   _PrintErrorMessageandAbort:
00002694  4E56 0000 4176          link      A6,#0
                    4177   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002698  4879 0000 4178          pea       @m68kde~1_122.L
0000269C  5120      
0000269E  4EB9 0000 4179          jsr       _printf
000026A2  38F0      
000026A4  584F      4180          addq.w    #4,A7
                    4181   ; printf("%s\r\n", string) ;
000026A6  2F2E 0008 4182          move.l    8(A6),-(A7)
000026AA  4879 0000 4183          pea       @m68kde~1_123.L
000026AE  513C      
000026B0  4EB9 0000 4184          jsr       _printf
000026B4  38F0      
000026B6  504F      4185          addq.w    #8,A7
                    4186   ; menu() ;
000026B8  4EB8 2420 4187          jsr       _menu
000026BC  4E5E      4188          unlk      A6
000026BE  4E75      4189          rts
                    4190   ; }
                    4191   ; void IRQMessage(int level) {
                    4192   _IRQMessage:
000026C0  4E56 0000 4193          link      A6,#0
                    4194   ; printf("\r\n\r\nProgram ABORT !!!!!");
000026C4  4879 0000 4195          pea       @m68kde~1_124.L
000026C8  5142      
000026CA  4EB9 0000 4196          jsr       _printf
000026CE  38F0      
000026D0  584F      4197          addq.w    #4,A7
                    4198   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
000026D2  2F2E 0008 4199          move.l    8(A6),-(A7)
000026D6  4879 0000 4200          pea       @m68kde~1_125.L
000026DA  515A      
000026DC  4EB9 0000 4201          jsr       _printf
000026E0  38F0      
000026E2  504F      4202          addq.w    #8,A7
                    4203   ; menu() ;
000026E4  4EB8 2420 4204          jsr       _menu
000026E8  4E5E      4205          unlk      A6
000026EA  4E75      4206          rts
                    4207   ; }
                    4208   ; void UnhandledIRQ1(void) {
                    4209   _UnhandledIRQ1:
                    4210   ; IRQMessage(1);
000026EC  4878 0001 4211          pea       1
000026F0  4EB8 26C0 4212          jsr       _IRQMessage
000026F4  584F      4213          addq.w    #4,A7
000026F6  4E75      4214          rts
                    4215   ; }
                    4216   ; void UnhandledIRQ2(void) {
                    4217   _UnhandledIRQ2:
                    4218   ; IRQMessage(2);
000026F8  4878 0002 4219          pea       2
000026FC  4EB8 26C0 4220          jsr       _IRQMessage
00002700  584F      4221          addq.w    #4,A7
00002702  4E75      4222          rts
                    4223   ; }
                    4224   ; void UnhandledIRQ3(void){
                    4225   _UnhandledIRQ3:
                    4226   ; IRQMessage(3);
00002704  4878 0003 4227          pea       3
00002708  4EB8 26C0 4228          jsr       _IRQMessage
0000270C  584F      4229          addq.w    #4,A7
0000270E  4E75      4230          rts
                    4231   ; }
                    4232   ; void UnhandledIRQ4(void) {
                    4233   _UnhandledIRQ4:
                    4234   ; IRQMessage(4);
00002710  4878 0004 4235          pea       4
00002714  4EB8 26C0 4236          jsr       _IRQMessage
00002718  584F      4237          addq.w    #4,A7
0000271A  4E75      4238          rts
                    4239   ; }
                    4240   ; void UnhandledIRQ5(void) {
                    4241   _UnhandledIRQ5:
                    4242   ; IRQMessage(5);
0000271C  4878 0005 4243          pea       5
00002720  4EB8 26C0 4244          jsr       _IRQMessage
00002724  584F      4245          addq.w    #4,A7
00002726  4E75      4246          rts
                    4247   ; }
                    4248   ; void UnhandledIRQ6(void) {
                    4249   _UnhandledIRQ6:
                    4250   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002728  4879 0000 4251          pea       @m68kde~1_126.L
0000272C  517E      
0000272E  4EB8 2694 4252          jsr       _PrintErrorMessageandAbort
00002732  584F      4253          addq.w    #4,A7
                    4254   ; menu() ;
00002734  4EB8 2420 4255          jsr       _menu
00002738  4E75      4256          rts
                    4257   ; }
                    4258   ; void UnhandledIRQ7(void) {
                    4259   _UnhandledIRQ7:
                    4260   ; IRQMessage(7);
0000273A  4878 0007 4261          pea       7
0000273E  4EB8 26C0 4262          jsr       _IRQMessage
00002742  584F      4263          addq.w    #4,A7
00002744  4E75      4264          rts
                    4265   ; }
                    4266   ; void UnhandledTrap(void) {
                    4267   _UnhandledTrap:
                    4268   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002746  4879 0000 4269          pea       @m68kde~1_127.L
0000274A  51BE      
0000274C  4EB8 2694 4270          jsr       _PrintErrorMessageandAbort
00002750  584F      4271          addq.w    #4,A7
00002752  4E75      4272          rts
                    4273   ; }
                    4274   ; void BusError() {
                    4275   _BusError:
                    4276   ; PrintErrorMessageandAbort("BUS Error!") ;
00002754  4879 0000 4277          pea       @m68kde~1_128.L
00002758  51D4      
0000275A  4EB8 2694 4278          jsr       _PrintErrorMessageandAbort
0000275E  584F      4279          addq.w    #4,A7
00002760  4E75      4280          rts
                    4281   ; }
                    4282   ; void AddressError() {
                    4283   _AddressError:
                    4284   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002762  4879 0000 4285          pea       @m68kde~1_129.L
00002766  51E0      
00002768  4EB8 2694 4286          jsr       _PrintErrorMessageandAbort
0000276C  584F      4287          addq.w    #4,A7
0000276E  4E75      4288          rts
                    4289   ; }
                    4290   ; void IllegalInstruction() {
                    4291   _IllegalInstruction:
                    4292   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002770  4879 0000 4293          pea       @m68kde~1_130.L
00002774  51F0      
00002776  4EB8 2694 4294          jsr       _PrintErrorMessageandAbort
0000277A  584F      4295          addq.w    #4,A7
0000277C  4E75      4296          rts
                    4297   ; }
                    4298   ; void Dividebyzero() {
                    4299   _Dividebyzero:
                    4300   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
0000277E  4879 0000 4301          pea       @m68kde~1_131.L
00002782  5204      
00002784  4EB8 2694 4302          jsr       _PrintErrorMessageandAbort
00002788  584F      4303          addq.w    #4,A7
0000278A  4E75      4304          rts
                    4305   ; }
                    4306   ; void Check() {
                    4307   _Check:
                    4308   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000278C  4879 0000 4309          pea       @m68kde~1_132.L
00002790  5214      
00002792  4EB8 2694 4310          jsr       _PrintErrorMessageandAbort
00002796  584F      4311          addq.w    #4,A7
00002798  4E75      4312          rts
                    4313   ; }
                    4314   ; void Trapv() {
                    4315   _Trapv:
                    4316   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000279A  4879 0000 4317          pea       @m68kde~1_133.L
0000279E  5226      
000027A0  4EB8 2694 4318          jsr       _PrintErrorMessageandAbort
000027A4  584F      4319          addq.w    #4,A7
000027A6  4E75      4320          rts
                    4321   ; }
                    4322   ; void PrivError() {
                    4323   _PrivError:
                    4324   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000027A8  4879 0000 4325          pea       @m68kde~1_134.L
000027AC  5238      
000027AE  4EB8 2694 4326          jsr       _PrintErrorMessageandAbort
000027B2  584F      4327          addq.w    #4,A7
000027B4  4E75      4328          rts
                    4329   ; }
                    4330   ; void UnitIRQ() {
                    4331   _UnitIRQ:
                    4332   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
000027B6  4879 0000 4333          pea       @m68kde~1_135.L
000027BA  524C      
000027BC  4EB8 2694 4334          jsr       _PrintErrorMessageandAbort
000027C0  584F      4335          addq.w    #4,A7
000027C2  4E75      4336          rts
                    4337   ; }
                    4338   ; void Spurious() {
                    4339   _Spurious:
                    4340   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
000027C4  4879 0000 4341          pea       @m68kde~1_136.L
000027C8  525E      
000027CA  4EB8 2694 4342          jsr       _PrintErrorMessageandAbort
000027CE  584F      4343          addq.w    #4,A7
000027D0  4E75      4344          rts
                    4345   ; }
                    4346   ; void EnterString(void)
                    4347   ; {
                    4348   _EnterString:
000027D2  4E56 FFFC 4349          link      A6,#-4
000027D6  2F02      4350          move.l    D2,-(A7)
                    4351   ; unsigned char *Start;
                    4352   ; unsigned char c;
                    4353   ; printf("\r\nStart Address in Memory: ") ;
000027D8  4879 0000 4354          pea       @m68kde~1_137.L
000027DC  526C      
000027DE  4EB9 0000 4355          jsr       _printf
000027E2  38F0      
000027E4  584F      4356          addq.w    #4,A7
                    4357   ; Start = Get8HexDigits(0) ;
000027E6  42A7      4358          clr.l     -(A7)
000027E8  4EB8 0CA4 4359          jsr       _Get8HexDigits
000027EC  584F      4360          addq.w    #4,A7
000027EE  2400      4361          move.l    D0,D2
                    4362   ; printf("\r\nEnter String (ESC to end) :") ;
000027F0  4879 0000 4363          pea       @m68kde~1_138.L
000027F4  5288      
000027F6  4EB9 0000 4364          jsr       _printf
000027FA  38F0      
000027FC  584F      4365          addq.w    #4,A7
                    4366   ; while((c = getchar()) != 0x1b)
                    4367   EnterString_1:
000027FE  4EB9 0000 4368          jsr       _getch
00002802  2F64      
00002804  1D40 FFFF 4369          move.b    D0,-1(A6)
00002808  0C00 001B 4370          cmp.b     #27,D0
0000280C  670A      4371          beq.s     EnterString_3
                    4372   ; *Start++ = c ;
0000280E  2042      4373          move.l    D2,A0
00002810  5282      4374          addq.l    #1,D2
00002812  10AE FFFF 4375          move.b    -1(A6),(A0)
00002816  60E6      4376          bra       EnterString_1
                    4377   EnterString_3:
                    4378   ; *Start = 0x00;  // terminate with a null
00002818  2042      4379          move.l    D2,A0
0000281A  4210      4380          clr.b     (A0)
0000281C  241F      4381          move.l    (A7)+,D2
0000281E  4E5E      4382          unlk      A6
00002820  4E75      4383          rts
                    4384   ; }
                    4385   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4386   ; void clearInputBuffer() {
                    4387   _clearInputBuffer:
00002822  4E56 FFFC 4388          link      A6,#-4
                    4389   ; int c;
                    4390   ; while ((c = getchar()) != '\n' && c != EOF);
                    4391   clearInputBuffer_1:
00002826  4EB9 0000 4392          jsr       _getch
0000282A  2F64      
0000282C  2D40 FFFC 4393          move.l    D0,-4(A6)
00002830  0C80 0000 4394          cmp.l     #10,D0
00002834  000A      
00002836  670E      4395          beq.s     clearInputBuffer_3
00002838  202E FFFC 4396          move.l    -4(A6),D0
0000283C  0C80 FFFF 4397          cmp.l     #-1,D0
00002840  FFFF      
00002842  6702      4398          beq.s     clearInputBuffer_3
00002844  60E0      4399          bra       clearInputBuffer_1
                    4400   clearInputBuffer_3:
00002846  4E5E      4401          unlk      A6
00002848  4E75      4402          rts
                    4403   ; }
                    4404   ; void MemoryTest(void)
                    4405   ; {
                    4406   _MemoryTest:
0000284A  4E56 FF40 4407          link      A6,#-192
0000284E  48E7 3F3C 4408          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002852  45F9 0000 4409          lea       _printf.L,A2
00002856  38F0      
00002858  4BF8 0B68 4410          lea       __getch.L,A5
                    4411   ; unsigned int *RamPtr, counter1=1 ;
0000285C  2D7C 0000 4412          move.l    #1,-188(A6)
00002860  0001 FF44 
                    4413   ; register unsigned int i ;
                    4414   ; unsigned int Start, End ;
                    4415   ; char c, text[150];
                    4416   ; unsigned int* addressPointer;
                    4417   ; unsigned int startAddress = NULL;
00002864  42AE FFF0 4418          clr.l     -16(A6)
                    4419   ; unsigned int endAddress = NULL;
00002868  42AE FFF4 4420          clr.l     -12(A6)
                    4421   ; unsigned int byteLength;
                    4422   ; unsigned int dataSize = 0;
0000286C  4285      4423          clr.l     D5
                    4424   ; unsigned int dataPattern = 0;
0000286E  4283      4425          clr.l     D3
                    4426   ; unsigned int currAddress;
                    4427   ; unsigned int addrCount;
                    4428   ; unsigned int intBuffer = NULL;
00002870  7E00      4429          moveq     #0,D7
                    4430   ; unsigned char *startAddressPtr = NULL;
00002872  4282      4431          clr.l     D2
                    4432   ; unsigned char *endAddressPtr = NULL;
00002874  4286      4433          clr.l     D6
                    4434   ; unsigned short int *wordAddressPtr = NULL;
00002876  387C 0000 4435          move.w    #0,A4
                    4436   ; unsigned int *longAddressPtr = NULL;
0000287A  367C 0000 4437          move.w    #0,A3
                    4438   ; // IMPROVEMENTS TO BE MADE:
                    4439   ; // Suppossed to be able to write an odd address as a byte
                    4440   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    4441   ; // printf("\r\nStart Address: ") ;
                    4442   ; // Start = Get8HexDigits(0) ;
                    4443   ; // printf("\r\nEnd Address: ") ;
                    4444   ; // End = Get8HexDigits(0) ;
                    4445   ; // TODO
                    4446   ; scanflush();
0000287E  4EB9 0000 4447          jsr       _scanflush
00002882  32E6      
                    4448   ; memset(text, 0, sizeof(text));  // fills with zeros
00002884  4878 0096 4449          pea       150
00002888  42A7      4450          clr.l     -(A7)
0000288A  486E FF56 4451          pea       -170(A6)
0000288E  4EB9 0000 4452          jsr       _memset
00002892  3000      
00002894  DEFC 000C 4453          add.w     #12,A7
                    4454   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
00002898  4879 0000 4455          pea       @m68kde~1_139.L
0000289C  52A6      
0000289E  4E92      4456          jsr       (A2)
000028A0  584F      4457          addq.w    #4,A7
                    4458   ; dataSize = _getch() - 48;
000028A2  4E95      4459          jsr       (A5)
000028A4  0480 0000 4460          sub.l     #48,D0
000028A8  0030      
000028AA  2A00      4461          move.l    D0,D5
                    4462   ; printf("\n");
000028AC  4879 0000 4463          pea       @m68kde~1_140.L
000028B0  52FC      
000028B2  4E92      4464          jsr       (A2)
000028B4  584F      4465          addq.w    #4,A7
                    4466   ; if (dataSize == 0) {
000028B6  4A85      4467          tst.l     D5
000028B8  6600 0058 4468          bne       MemoryTest_1
                    4469   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
000028BC  4879 0000 4470          pea       @m68kde~1_141.L
000028C0  52FE      
000028C2  4E92      4471          jsr       (A2)
000028C4  584F      4472          addq.w    #4,A7
                    4473   ; intBuffer = _getch() - 48;
000028C6  4E95      4474          jsr       (A5)
000028C8  0480 0000 4475          sub.l     #48,D0
000028CC  0030      
000028CE  2E00      4476          move.l    D0,D7
                    4477   ; // scanf("%d", &intBuffer);
                    4478   ; switch (intBuffer) {
000028D0  2007      4479          move.l    D7,D0
000028D2  0C80 0000 4480          cmp.l     #4,D0
000028D6  0004      
000028D8  642C      4481          bhs.s     MemoryTest_4
000028DA  E380      4482          asl.l     #1,D0
000028DC  303B 0806 4483          move.w    MemoryTest_5(PC,D0.L),D0
000028E0  4EFB 0002 4484          jmp       MemoryTest_5(PC,D0.W)
                    4485   MemoryTest_5:
000028E4  0008      4486          dc.w      MemoryTest_6-MemoryTest_5
000028E6  000C      4487          dc.w      MemoryTest_7-MemoryTest_5
000028E8  0014      4488          dc.w      MemoryTest_8-MemoryTest_5
000028EA  001C      4489          dc.w      MemoryTest_9-MemoryTest_5
                    4490   MemoryTest_6:
                    4491   ; case(0):
                    4492   ; dataPattern = 0x00; break;
000028EC  4283      4493          clr.l     D3
000028EE  6016      4494          bra.s     MemoryTest_4
                    4495   MemoryTest_7:
                    4496   ; case(1):
                    4497   ; dataPattern = 0xB2; break;
000028F0  263C 0000 4498          move.l    #178,D3
000028F4  00B2      
000028F6  600E      4499          bra.s     MemoryTest_4
                    4500   MemoryTest_8:
                    4501   ; case(2):
                    4502   ; dataPattern = 0xC3; break;
000028F8  263C 0000 4503          move.l    #195,D3
000028FC  00C3      
000028FE  6006      4504          bra.s     MemoryTest_4
                    4505   MemoryTest_9:
                    4506   ; case(3):
                    4507   ; dataPattern = 0xD4; break;
00002900  263C 0000 4508          move.l    #212,D3
00002904  00D4      
                    4509   MemoryTest_4:
                    4510   ; }
                    4511   ; dataPattern &= 0xFF;
00002906  C6BC 0000 4512          and.l     #255,D3
0000290A  00FF      
                    4513   ; byteLength = 1;
0000290C  7801      4514          moveq     #1,D4
0000290E  6000 00AE 4515          bra       MemoryTest_11
                    4516   MemoryTest_1:
                    4517   ; } else if (dataSize == 1) {
00002912  0C85 0000 4518          cmp.l     #1,D5
00002916  0001      
00002918  6600 0058 4519          bne       MemoryTest_10
                    4520   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
0000291C  4879 0000 4521          pea       @m68kde~1_142.L
00002920  5360      
00002922  4E92      4522          jsr       (A2)
00002924  584F      4523          addq.w    #4,A7
                    4524   ; intBuffer = _getch() - 48;
00002926  4E95      4525          jsr       (A5)
00002928  0480 0000 4526          sub.l     #48,D0
0000292C  0030      
0000292E  2E00      4527          move.l    D0,D7
                    4528   ; switch (intBuffer) {
00002930  2007      4529          move.l    D7,D0
00002932  0C80 0000 4530          cmp.l     #4,D0
00002936  0004      
00002938  642C      4531          bhs.s     MemoryTest_13
0000293A  E380      4532          asl.l     #1,D0
0000293C  303B 0806 4533          move.w    MemoryTest_14(PC,D0.L),D0
00002940  4EFB 0002 4534          jmp       MemoryTest_14(PC,D0.W)
                    4535   MemoryTest_14:
00002944  0008      4536          dc.w      MemoryTest_15-MemoryTest_14
00002946  000C      4537          dc.w      MemoryTest_16-MemoryTest_14
00002948  0014      4538          dc.w      MemoryTest_17-MemoryTest_14
0000294A  001C      4539          dc.w      MemoryTest_18-MemoryTest_14
                    4540   MemoryTest_15:
                    4541   ; case(0):
                    4542   ; dataPattern = 0x0000; break;
0000294C  4283      4543          clr.l     D3
0000294E  6016      4544          bra.s     MemoryTest_13
                    4545   MemoryTest_16:
                    4546   ; case(1):
                    4547   ; dataPattern = 0x1234; break;
00002950  263C 0000 4548          move.l    #4660,D3
00002954  1234      
00002956  600E      4549          bra.s     MemoryTest_13
                    4550   MemoryTest_17:
                    4551   ; case(2):
                    4552   ; dataPattern = 0xA1B2; break;
00002958  263C 0000 4553          move.l    #41394,D3
0000295C  A1B2      
0000295E  6006      4554          bra.s     MemoryTest_13
                    4555   MemoryTest_18:
                    4556   ; case(3):
                    4557   ; dataPattern = 0xC3D4; break;
00002960  263C 0000 4558          move.l    #50132,D3
00002964  C3D4      
                    4559   MemoryTest_13:
                    4560   ; }
                    4561   ; dataPattern &= 0xFFFF;
00002966  C6BC 0000 4562          and.l     #65535,D3
0000296A  FFFF      
                    4563   ; byteLength = 2;
0000296C  7802      4564          moveq     #2,D4
0000296E  6000 004E 4565          bra       MemoryTest_11
                    4566   MemoryTest_10:
                    4567   ; } else {
                    4568   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
00002972  4879 0000 4569          pea       @m68kde~1_143.L
00002976  53CA      
00002978  4E92      4570          jsr       (A2)
0000297A  584F      4571          addq.w    #4,A7
                    4572   ; intBuffer = _getch() - 48;
0000297C  4E95      4573          jsr       (A5)
0000297E  0480 0000 4574          sub.l     #48,D0
00002982  0030      
00002984  2E00      4575          move.l    D0,D7
                    4576   ; switch (intBuffer) {
00002986  2007      4577          move.l    D7,D0
00002988  0C80 0000 4578          cmp.l     #4,D0
0000298C  0004      
0000298E  642C      4579          bhs.s     MemoryTest_20
00002990  E380      4580          asl.l     #1,D0
00002992  303B 0806 4581          move.w    MemoryTest_21(PC,D0.L),D0
00002996  4EFB 0002 4582          jmp       MemoryTest_21(PC,D0.W)
                    4583   MemoryTest_21:
0000299A  0008      4584          dc.w      MemoryTest_22-MemoryTest_21
0000299C  000C      4585          dc.w      MemoryTest_23-MemoryTest_21
0000299E  0014      4586          dc.w      MemoryTest_24-MemoryTest_21
000029A0  001C      4587          dc.w      MemoryTest_25-MemoryTest_21
                    4588   MemoryTest_22:
                    4589   ; case(0):
                    4590   ; dataPattern = 0x00000000; break;
000029A2  4283      4591          clr.l     D3
000029A4  6016      4592          bra.s     MemoryTest_20
                    4593   MemoryTest_23:
                    4594   ; case(1):
                    4595   ; dataPattern = 0xAABBCCDD; break;
000029A6  263C AABB 4596          move.l    #-1430532899,D3
000029AA  CCDD      
000029AC  600E      4597          bra.s     MemoryTest_20
                    4598   MemoryTest_24:
                    4599   ; case(2):
                    4600   ; dataPattern = 0x11223344; break;
000029AE  263C 1122 4601          move.l    #287454020,D3
000029B2  3344      
000029B4  6006      4602          bra.s     MemoryTest_20
                    4603   MemoryTest_25:
                    4604   ; case(3):
                    4605   ; dataPattern = 0x76543210; break;
000029B6  263C 7654 4606          move.l    #1985229328,D3
000029BA  3210      
                    4607   MemoryTest_20:
                    4608   ; }
                    4609   ; byteLength = 4;
000029BC  7804      4610          moveq     #4,D4
                    4611   MemoryTest_11:
                    4612   ; }
                    4613   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    4614   ; while (startAddressPtr == NULL || 
                    4615   MemoryTest_26:
000029BE  4A82      4616          tst.l     D2
000029C0  6732      4617          beq.s     MemoryTest_29
000029C2  0C84 0000 4618          cmp.l     #1,D4
000029C6  0001      
000029C8  6316      4619          bls.s     MemoryTest_30
000029CA  2F02      4620          move.l    D2,-(A7)
000029CC  4878 0002 4621          pea       2
000029D0  4EB9 0000 4622          jsr       ULDIV
000029D4  2E56      
000029D6  202F 0004 4623          move.l    4(A7),D0
000029DA  504F      4624          addq.w    #8,A7
000029DC  4A80      4625          tst.l     D0
000029DE  6614      4626          bne.s     MemoryTest_29
                    4627   MemoryTest_30:
000029E0  0C82 0802 4628          cmp.l     #134348800,D2
000029E4  0000      
000029E6  650C      4629          blo.s     MemoryTest_29
000029E8  203C 0B00 4630          move.l    #184549376,D0
000029EC  0000      
000029EE  9084      4631          sub.l     D4,D0
000029F0  B480      4632          cmp.l     D0,D2
000029F2  6316      4633          bls.s     MemoryTest_28
                    4634   MemoryTest_29:
                    4635   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    4636   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    4637   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    4638   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
000029F4  4879 0000 4639          pea       @m68kde~1_144.L
000029F8  5448      
000029FA  4E92      4640          jsr       (A2)
000029FC  584F      4641          addq.w    #4,A7
                    4642   ; startAddressPtr =  Get8HexDigits(0);
000029FE  42A7      4643          clr.l     -(A7)
00002A00  4EB8 0CA4 4644          jsr       _Get8HexDigits
00002A04  584F      4645          addq.w    #4,A7
00002A06  2400      4646          move.l    D0,D2
00002A08  60B4      4647          bra       MemoryTest_26
                    4648   MemoryTest_28:
                    4649   ; }
                    4650   ; while (endAddressPtr == NULL || 
                    4651   MemoryTest_31:
00002A0A  4A86      4652          tst.l     D6
00002A0C  670A      4653          beq.s     MemoryTest_34
00002A0E  202E FFF0 4654          move.l    -16(A6),D0
00002A12  D084      4655          add.l     D4,D0
00002A14  BC80      4656          cmp.l     D0,D6
00002A16  6416      4657          bhs.s     MemoryTest_33
                    4658   MemoryTest_34:
                    4659   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    4660   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00002A18  4879 0000 4661          pea       @m68kde~1_145.L
00002A1C  5480      
00002A1E  4E92      4662          jsr       (A2)
00002A20  584F      4663          addq.w    #4,A7
                    4664   ; endAddressPtr =  Get8HexDigits(0);
00002A22  42A7      4665          clr.l     -(A7)
00002A24  4EB8 0CA4 4666          jsr       _Get8HexDigits
00002A28  584F      4667          addq.w    #4,A7
00002A2A  2C00      4668          move.l    D0,D6
00002A2C  60DC      4669          bra       MemoryTest_31
                    4670   MemoryTest_33:
                    4671   ; }
                    4672   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00002A2E  2F02      4673          move.l    D2,-(A7)
00002A30  4879 0000 4674          pea       @m68kde~1_146.L
00002A34  54B6      
00002A36  4E92      4675          jsr       (A2)
00002A38  504F      4676          addq.w    #8,A7
                    4677   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
00002A3A  2F06      4678          move.l    D6,-(A7)
00002A3C  4879 0000 4679          pea       @m68kde~1_147.L
00002A40  54CE      
00002A42  4E92      4680          jsr       (A2)
00002A44  504F      4681          addq.w    #8,A7
                    4682   ; addrCount = 0;
00002A46  42AE FFFC 4683          clr.l     -4(A6)
                    4684   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    4685   MemoryTest_35:
00002A4A  B486      4686          cmp.l     D6,D2
00002A4C  6400 0132 4687          bhs       MemoryTest_37
00002A50  2006      4688          move.l    D6,D0
00002A52  9082      4689          sub.l     D2,D0
00002A54  5280      4690          addq.l    #1,D0
00002A56  B084      4691          cmp.l     D4,D0
00002A58  6500 0126 4692          blo       MemoryTest_37
                    4693   ; // If address goes beyond 0x0B00_0000 then break
                    4694   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
00002A5C  203C 0B00 4695          move.l    #184549376,D0
00002A60  0000      
00002A62  9084      4696          sub.l     D4,D0
00002A64  B480      4697          cmp.l     D0,D2
00002A66  6310      4698          bls.s     MemoryTest_38
                    4699   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
00002A68  2F02      4700          move.l    D2,-(A7)
00002A6A  4879 0000 4701          pea       @m68kde~1_148.L
00002A6E  54E4      
00002A70  4E92      4702          jsr       (A2)
00002A72  504F      4703          addq.w    #8,A7
                    4704   ; break;
00002A74  6000 010A 4705          bra       MemoryTest_37
                    4706   MemoryTest_38:
                    4707   ; }
                    4708   ; longAddressPtr = startAddressPtr;
00002A78  2642      4709          move.l    D2,A3
                    4710   ; wordAddressPtr = startAddressPtr;
00002A7A  2842      4711          move.l    D2,A4
                    4712   ; if (dataSize == 0) {
00002A7C  4A85      4713          tst.l     D5
00002A7E  6600 0034 4714          bne       MemoryTest_40
                    4715   ; *startAddressPtr = dataPattern;
00002A82  2042      4716          move.l    D2,A0
00002A84  1083      4717          move.b    D3,(A0)
                    4718   ; if ((*startAddressPtr) != dataPattern) {
00002A86  2042      4719          move.l    D2,A0
00002A88  1010      4720          move.b    (A0),D0
00002A8A  C0BC 0000 4721          and.l     #255,D0
00002A8E  00FF      
00002A90  B083      4722          cmp.l     D3,D0
00002A92  671C      4723          beq.s     MemoryTest_42
                    4724   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002A94  2F03      4725          move.l    D3,-(A7)
00002A96  2042      4726          move.l    D2,A0
00002A98  1210      4727          move.b    (A0),D1
00002A9A  C2BC 0000 4728          and.l     #255,D1
00002A9E  00FF      
00002AA0  2F01      4729          move.l    D1,-(A7)
00002AA2  2F02      4730          move.l    D2,-(A7)
00002AA4  4879 0000 4731          pea       @m68kde~1_149.L
00002AA8  5516      
00002AAA  4E92      4732          jsr       (A2)
00002AAC  DEFC 0010 4733          add.w     #16,A7
                    4734   MemoryTest_42:
00002AB0  6000 0058 4735          bra       MemoryTest_48
                    4736   MemoryTest_40:
                    4737   ; }
                    4738   ; } else if (dataSize == 1) {
00002AB4  0C85 0000 4739          cmp.l     #1,D5
00002AB8  0001      
00002ABA  662C      4740          bne.s     MemoryTest_44
                    4741   ; *wordAddressPtr = dataPattern;
00002ABC  3883      4742          move.w    D3,(A4)
                    4743   ; if ((*wordAddressPtr) != dataPattern) {
00002ABE  3014      4744          move.w    (A4),D0
00002AC0  C0BC 0000 4745          and.l     #65535,D0
00002AC4  FFFF      
00002AC6  B083      4746          cmp.l     D3,D0
00002AC8  671C      4747          beq.s     MemoryTest_46
                    4748   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002ACA  2F03      4749          move.l    D3,-(A7)
00002ACC  2042      4750          move.l    D2,A0
00002ACE  1210      4751          move.b    (A0),D1
00002AD0  C2BC 0000 4752          and.l     #255,D1
00002AD4  00FF      
00002AD6  2F01      4753          move.l    D1,-(A7)
00002AD8  2F02      4754          move.l    D2,-(A7)
00002ADA  4879 0000 4755          pea       @m68kde~1_149.L
00002ADE  5516      
00002AE0  4E92      4756          jsr       (A2)
00002AE2  DEFC 0010 4757          add.w     #16,A7
                    4758   MemoryTest_46:
00002AE6  6022      4759          bra.s     MemoryTest_48
                    4760   MemoryTest_44:
                    4761   ; }
                    4762   ; } else {
                    4763   ; *longAddressPtr = dataPattern;
00002AE8  2683      4764          move.l    D3,(A3)
                    4765   ; if ((*longAddressPtr) != dataPattern) {
00002AEA  B693      4766          cmp.l     (A3),D3
00002AEC  671C      4767          beq.s     MemoryTest_48
                    4768   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002AEE  2F03      4769          move.l    D3,-(A7)
00002AF0  2042      4770          move.l    D2,A0
00002AF2  1210      4771          move.b    (A0),D1
00002AF4  C2BC 0000 4772          and.l     #255,D1
00002AF8  00FF      
00002AFA  2F01      4773          move.l    D1,-(A7)
00002AFC  2F02      4774          move.l    D2,-(A7)
00002AFE  4879 0000 4775          pea       @m68kde~1_149.L
00002B02  5516      
00002B04  4E92      4776          jsr       (A2)
00002B06  DEFC 0010 4777          add.w     #16,A7
                    4778   MemoryTest_48:
                    4779   ; }
                    4780   ; }
                    4781   ; // if ((*startAddressPtr) != dataPattern) {
                    4782   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    4783   ; // }
                    4784   ; addrCount++;
00002B0A  52AE FFFC 4785          addq.l    #1,-4(A6)
                    4786   ; if (addrCount % 128 == 0) {
00002B0E  2F2E FFFC 4787          move.l    -4(A6),-(A7)
00002B12  4878 0080 4788          pea       128
00002B16  4EB9 0000 4789          jsr       ULDIV
00002B1A  2E56      
00002B1C  202F 0004 4790          move.l    4(A7),D0
00002B20  504F      4791          addq.w    #8,A7
00002B22  4A80      4792          tst.l     D0
00002B24  6600 0054 4793          bne       MemoryTest_55
                    4794   ; if (dataSize == 0) {
00002B28  4A85      4795          tst.l     D5
00002B2A  661C      4796          bne.s     MemoryTest_52
                    4797   ; printf("Address: 0x%x Value: 0x%02X\n",
00002B2C  2042      4798          move.l    D2,A0
00002B2E  1210      4799          move.b    (A0),D1
00002B30  C2BC 0000 4800          and.l     #255,D1
00002B34  00FF      
00002B36  2F01      4801          move.l    D1,-(A7)
00002B38  2F02      4802          move.l    D2,-(A7)
00002B3A  4879 0000 4803          pea       @m68kde~1_150.L
00002B3E  555C      
00002B40  4E92      4804          jsr       (A2)
00002B42  DEFC 000C 4805          add.w     #12,A7
00002B46  6032      4806          bra.s     MemoryTest_55
                    4807   MemoryTest_52:
                    4808   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    4809   ; }
                    4810   ; else if (dataSize == 1) {
00002B48  0C85 0000 4811          cmp.l     #1,D5
00002B4C  0001      
00002B4E  661A      4812          bne.s     MemoryTest_54
                    4813   ; printf("Address: 0x%x Value: 0x%04X\n",
00002B50  3214      4814          move.w    (A4),D1
00002B52  C2BC 0000 4815          and.l     #65535,D1
00002B56  FFFF      
00002B58  2F01      4816          move.l    D1,-(A7)
00002B5A  2F0C      4817          move.l    A4,-(A7)
00002B5C  4879 0000 4818          pea       @m68kde~1_151.L
00002B60  557A      
00002B62  4E92      4819          jsr       (A2)
00002B64  DEFC 000C 4820          add.w     #12,A7
00002B68  6010      4821          bra.s     MemoryTest_55
                    4822   MemoryTest_54:
                    4823   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    4824   ; }
                    4825   ; else {
                    4826   ; printf("Address: 0x%x Value: 0x%08X\n",
00002B6A  2F13      4827          move.l    (A3),-(A7)
00002B6C  2F0B      4828          move.l    A3,-(A7)
00002B6E  4879 0000 4829          pea       @m68kde~1_152.L
00002B72  5598      
00002B74  4E92      4830          jsr       (A2)
00002B76  DEFC 000C 4831          add.w     #12,A7
                    4832   MemoryTest_55:
                    4833   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    4834   ; }
                    4835   ; }
                    4836   ; startAddressPtr += byteLength;
00002B7A  D484      4837          add.l     D4,D2
00002B7C  6000 FECC 4838          bra       MemoryTest_35
                    4839   MemoryTest_37:
00002B80  4CDF 3CFC 4840          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002B84  4E5E      4841          unlk      A6
00002B86  4E75      4842          rts
                    4843   ; }
                    4844   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4845   ; }
                    4846   ; void main(void)
                    4847   ; {
                    4848   _main:
00002B88  4E56 FFF4 4849          link      A6,#-12
00002B8C  48E7 3030 4850          movem.l   D2/D3/A2/A3,-(A7)
00002B90  45F8 0A30 4851          lea       _InstallExceptionHandler.L,A2
00002B94  47F9 0000 4852          lea       _printf.L,A3
00002B98  38F0      
                    4853   ; char c ;
                    4854   ; int i, j ;
                    4855   ; char *BugMessage = "DE1-68k Bug V1.77";
00002B9A  41F9 0000 4856          lea       @m68kde~1_153.L,A0
00002B9E  55B6      
00002BA0  2608      4857          move.l    A0,D3
                    4858   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002BA2  41F9 0000 4859          lea       @m68kde~1_154.L,A0
00002BA6  55C8      
00002BA8  2D48 FFFC 4860          move.l    A0,-4(A6)
                    4861   ; KillAllBreakPoints() ;
00002BAC  4EB8 1ECE 4862          jsr       _KillAllBreakPoints
                    4863   ; i = x = y = z = PortA_Count = 0;
00002BB0  42B9 0B00 4864          clr.l     _PortA_Count.L
00002BB4  00D4      
00002BB6  42B9 0B00 4865          clr.l     _z.L
00002BBA  00D0      
00002BBC  42B9 0B00 4866          clr.l     _y.L
00002BC0  00CC      
00002BC2  42B9 0B00 4867          clr.l     _x.L
00002BC6  00C8      
00002BC8  4282      4868          clr.l     D2
                    4869   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002BCA  42B9 0B00 4870          clr.l     _GoFlag.L
00002BCE  00DC      
00002BD0  42B9 0B00 4871          clr.l     _Trace.L
00002BD4  00D8      
                    4872   ; Echo = 1 ;
00002BD6  23FC 0000 4873          move.l    #1,_Echo.L
00002BDA  0001 0B00 
00002BDE  00E0      
                    4874   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002BE0  42B9 0B00 4875          clr.l     _d7.L
00002BE4  0100      
00002BE6  42B9 0B00 4876          clr.l     _d6.L
00002BEA  00FC      
00002BEC  42B9 0B00 4877          clr.l     _d5.L
00002BF0  00F8      
00002BF2  42B9 0B00 4878          clr.l     _d4.L
00002BF6  00F4      
00002BF8  42B9 0B00 4879          clr.l     _d3.L
00002BFC  00F0      
00002BFE  42B9 0B00 4880          clr.l     _d2.L
00002C02  00EC      
00002C04  42B9 0B00 4881          clr.l     _d1.L
00002C08  00E8      
00002C0A  42B9 0B00 4882          clr.l     _d0.L
00002C0E  00E4      
                    4883   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002C10  42B9 0B00 4884          clr.l     _a6.L
00002C14  011C      
00002C16  42B9 0B00 4885          clr.l     _a5.L
00002C1A  0118      
00002C1C  42B9 0B00 4886          clr.l     _a4.L
00002C20  0114      
00002C22  42B9 0B00 4887          clr.l     _a3.L
00002C26  0110      
00002C28  42B9 0B00 4888          clr.l     _a2.L
00002C2C  010C      
00002C2E  42B9 0B00 4889          clr.l     _a1.L
00002C32  0108      
00002C34  42B9 0B00 4890          clr.l     _a0.L
00002C38  0104      
                    4891   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002C3A  23FC 0800 4892          move.l    #134217728,_PC.L
00002C3E  0000 0B00 
00002C42  0120      
00002C44  23FC 0C00 4893          move.l    #201326592,_SSP.L
00002C48  0000 0B00 
00002C4C  0124      
00002C4E  23FC 0C00 4894          move.l    #201326592,_USP.L
00002C52  0000 0B00 
00002C56  0128      
                    4895   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002C58  33FC 2000 4896          move.w    #8192,_SR.L
00002C5C  0B00 012C 
                    4897   ; // Initialise Breakpoint variables
                    4898   ; for(i = 0; i < 8; i++)  {
00002C60  4282      4899          clr.l     D2
                    4900   main_1:
00002C62  0C82 0000 4901          cmp.l     #8,D2
00002C66  0008      
00002C68  6C00 004C 4902          bge       main_3
                    4903   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002C6C  2002      4904          move.l    D2,D0
00002C6E  E588      4905          lsl.l     #2,D0
00002C70  41F9 0B00 4906          lea       _BreakPointAddress.L,A0
00002C74  012E      
00002C76  42B0 0800 4907          clr.l     0(A0,D0.L)
                    4908   ; WatchPointAddress[i] = 0 ;
00002C7A  2002      4909          move.l    D2,D0
00002C7C  E588      4910          lsl.l     #2,D0
00002C7E  41F9 0B00 4911          lea       _WatchPointAddress.L,A0
00002C82  0182      
00002C84  42B0 0800 4912          clr.l     0(A0,D0.L)
                    4913   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002C88  2002      4914          move.l    D2,D0
00002C8A  E388      4915          lsl.l     #1,D0
00002C8C  41F9 0B00 4916          lea       _BreakPointInstruction.L,A0
00002C90  014E      
00002C92  4270 0800 4917          clr.w     0(A0,D0.L)
                    4918   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002C96  2002      4919          move.l    D2,D0
00002C98  E588      4920          lsl.l     #2,D0
00002C9A  41F9 0B00 4921          lea       _BreakPointSetOrCleared.L,A0
00002C9E  015E      
00002CA0  42B0 0800 4922          clr.l     0(A0,D0.L)
                    4923   ; WatchPointSetOrCleared[i] = 0;
00002CA4  2002      4924          move.l    D2,D0
00002CA6  E588      4925          lsl.l     #2,D0
00002CA8  41F9 0B00 4926          lea       _WatchPointSetOrCleared.L,A0
00002CAC  01A2      
00002CAE  42B0 0800 4927          clr.l     0(A0,D0.L)
00002CB2  5282      4928          addq.l    #1,D2
00002CB4  60AC      4929          bra       main_1
                    4930   main_3:
                    4931   ; }
                    4932   ; Init_RS232() ;     // initialise the RS232 port
00002CB6  4EB8 0B12 4933          jsr       _Init_RS232
                    4934   ; Init_LCD() ;
00002CBA  4EB8 095E 4935          jsr       _Init_LCD
                    4936   ; SPI_Init();
00002CBE  4EB8 10FC 4937          jsr       _SPI_Init
                    4938   ; for( i = 32; i < 48; i++)
00002CC2  7420      4939          moveq     #32,D2
                    4940   main_4:
00002CC4  0C82 0000 4941          cmp.l     #48,D2
00002CC8  0030      
00002CCA  6C0E      4942          bge.s     main_6
                    4943   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002CCC  2F02      4944          move.l    D2,-(A7)
00002CCE  4878 2746 4945          pea       _UnhandledTrap.L
00002CD2  4E92      4946          jsr       (A2)
00002CD4  504F      4947          addq.w    #8,A7
00002CD6  5282      4948          addq.l    #1,D2
00002CD8  60EA      4949          bra       main_4
                    4950   main_6:
                    4951   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002CDA  4878 002F 4952          pea       47
00002CDE  4878 2420 4953          pea       _menu.L
00002CE2  4E92      4954          jsr       (A2)
00002CE4  504F      4955          addq.w    #8,A7
                    4956   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002CE6  4878 0019 4957          pea       25
00002CEA  4878 26EC 4958          pea       _UnhandledIRQ1.L
00002CEE  4E92      4959          jsr       (A2)
00002CF0  504F      4960          addq.w    #8,A7
                    4961   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002CF2  4878 001A 4962          pea       26
00002CF6  4878 26F8 4963          pea       _UnhandledIRQ2.L
00002CFA  4E92      4964          jsr       (A2)
00002CFC  504F      4965          addq.w    #8,A7
                    4966   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002CFE  4878 001B 4967          pea       27
00002D02  4878 2704 4968          pea       _UnhandledIRQ3.L
00002D06  4E92      4969          jsr       (A2)
00002D08  504F      4970          addq.w    #8,A7
                    4971   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002D0A  4878 001C 4972          pea       28
00002D0E  4878 2710 4973          pea       _UnhandledIRQ4.L
00002D12  4E92      4974          jsr       (A2)
00002D14  504F      4975          addq.w    #8,A7
                    4976   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002D16  4878 001D 4977          pea       29
00002D1A  4878 271C 4978          pea       _UnhandledIRQ5.L
00002D1E  4E92      4979          jsr       (A2)
00002D20  504F      4980          addq.w    #8,A7
                    4981   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002D22  4878 001E 4982          pea       30
00002D26  4878 2728 4983          pea       _UnhandledIRQ6.L
00002D2A  4E92      4984          jsr       (A2)
00002D2C  504F      4985          addq.w    #8,A7
                    4986   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002D2E  4878 001F 4987          pea       31
00002D32  4878 273A 4988          pea       _UnhandledIRQ7.L
00002D36  4E92      4989          jsr       (A2)
00002D38  504F      4990          addq.w    #8,A7
                    4991   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002D3A  4878 002E 4992          pea       46
00002D3E  4878 215C 4993          pea       _HandleBreakPoint.L
00002D42  4E92      4994          jsr       (A2)
00002D44  504F      4995          addq.w    #8,A7
                    4996   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002D46  4878 001D 4997          pea       29
00002D4A  4878 183C 4998          pea       _DumpRegistersandPause.L
00002D4E  4E92      4999          jsr       (A2)
00002D50  504F      5000          addq.w    #8,A7
                    5001   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002D52  4878 0002 5002          pea       2
00002D56  4878 2754 5003          pea       _BusError.L
00002D5A  4E92      5004          jsr       (A2)
00002D5C  504F      5005          addq.w    #8,A7
                    5006   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002D5E  4878 0003 5007          pea       3
00002D62  4878 2762 5008          pea       _AddressError.L
00002D66  4E92      5009          jsr       (A2)
00002D68  504F      5010          addq.w    #8,A7
                    5011   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002D6A  4878 0004 5012          pea       4
00002D6E  4878 2770 5013          pea       _IllegalInstruction.L
00002D72  4E92      5014          jsr       (A2)
00002D74  504F      5015          addq.w    #8,A7
                    5016   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002D76  4878 0005 5017          pea       5
00002D7A  4878 277E 5018          pea       _Dividebyzero.L
00002D7E  4E92      5019          jsr       (A2)
00002D80  504F      5020          addq.w    #8,A7
                    5021   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002D82  4878 0006 5022          pea       6
00002D86  4878 278C 5023          pea       _Check.L
00002D8A  4E92      5024          jsr       (A2)
00002D8C  504F      5025          addq.w    #8,A7
                    5026   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002D8E  4878 0007 5027          pea       7
00002D92  4878 279A 5028          pea       _Trapv.L
00002D96  4E92      5029          jsr       (A2)
00002D98  504F      5030          addq.w    #8,A7
                    5031   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002D9A  4878 0008 5032          pea       8
00002D9E  4878 27A8 5033          pea       _PrivError.L
00002DA2  4E92      5034          jsr       (A2)
00002DA4  504F      5035          addq.w    #8,A7
                    5036   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002DA6  4878 000F 5037          pea       15
00002DAA  4878 27B6 5038          pea       _UnitIRQ.L
00002DAE  4E92      5039          jsr       (A2)
00002DB0  504F      5040          addq.w    #8,A7
                    5041   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002DB2  4878 0018 5042          pea       24
00002DB6  4878 278C 5043          pea       _Check.L
00002DBA  4E92      5044          jsr       (A2)
00002DBC  504F      5045          addq.w    #8,A7
                    5046   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002DBE  4EB8 0BA6 5047          jsr       _FlushKeyboard
                    5048   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002DC2  4239 0040 5049          clr.b     4194314
00002DC6  000A      
                    5050   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5051   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5052   main_7:
00002DC8  1039 0040 5053          move.b    4194306,D0
00002DCC  0002      
00002DCE  C03C 0002 5054          and.b     #2,D0
00002DD2  0C00 0002 5055          cmp.b     #2,D0
00002DD6  662A      5056          bne.s     main_9
                    5057   ; LoadFromFlashChip();
00002DD8  4EB8 1354 5058          jsr       _LoadFromFlashChip
                    5059   ; printf("\r\nRunning.....") ;
00002DDC  4879 0000 5060          pea       @m68kde~1_155.L
00002DE0  55E6      
00002DE2  4E93      5061          jsr       (A3)
00002DE4  584F      5062          addq.w    #4,A7
                    5063   ; Oline1("Running.....") ;
00002DE6  4879 0000 5064          pea       @m68kde~1_156.L
00002DEA  55F6      
00002DEC  4EB8 0A02 5065          jsr       _Oline1
00002DF0  584F      5066          addq.w    #4,A7
                    5067   ; GoFlag = 1;
00002DF2  23FC 0000 5068          move.l    #1,_GoFlag.L
00002DF6  0001 0B00 
00002DFA  00DC      
                    5069   ; go() ;
00002DFC  4EB8 08B8 5070          jsr       _go
00002E00  60C6      5071          bra       main_7
                    5072   main_9:
                    5073   ; }
                    5074   ; // otherwise start the debug monitor
                    5075   ; Oline0(BugMessage) ;
00002E02  2F03      5076          move.l    D3,-(A7)
00002E04  4EB8 09D4 5077          jsr       _Oline0
00002E08  584F      5078          addq.w    #4,A7
                    5079   ; Oline1("By: PJ Davies") ;
00002E0A  4879 0000 5080          pea       @m68kde~1_157.L
00002E0E  5604      
00002E10  4EB8 0A02 5081          jsr       _Oline1
00002E14  584F      5082          addq.w    #4,A7
                    5083   ; printf("\r\n%s", BugMessage) ;
00002E16  2F03      5084          move.l    D3,-(A7)
00002E18  4879 0000 5085          pea       @m68kde~1_158.L
00002E1C  5612      
00002E1E  4E93      5086          jsr       (A3)
00002E20  504F      5087          addq.w    #8,A7
                    5088   ; printf("\r\n%s", CopyrightMessage) ;
00002E22  2F2E FFFC 5089          move.l    -4(A6),-(A7)
00002E26  4879 0000 5090          pea       @m68kde~1_158.L
00002E2A  5612      
00002E2C  4E93      5091          jsr       (A3)
00002E2E  504F      5092          addq.w    #8,A7
                    5093   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00002E30  4879 0000 5094          pea       @m68kde~1_159.L
00002E34  5618      
00002E36  4E93      5095          jsr       (A3)
00002E38  584F      5096          addq.w    #4,A7
                    5097   ; menu();
00002E3A  4EB8 2420 5098          jsr       _menu
00002E3E  4CDF 0C0C 5099          movem.l   (A7)+,D2/D3/A2/A3
00002E42  4E5E      5100          unlk      A6
00002E44  4E75      5101          rts
                    5102   ; }
                    5103   _strcpy:
00002E46  206F 0004 5104          move.l    (4,A7),A0
00002E4A  226F 0008 5105          move.l    (8,A7),A1
00002E4E  2008      5106          move.l    A0,D0
                    5107   strcpy_1:
00002E50  10D9      5108          move.b    (A1)+,(A0)+
00002E52  66FC      5109          bne       strcpy_1
00002E54  4E75      5110          rts
                    5111   ULDIV:
00002E56  4E56 0000 5112          link    A6,#0
00002E5A  48E7 C000 5113          movem.l D0/D1,-(A7)
00002E5E  222E 0008 5114          move.l  8(A6),D1
00002E62  202E 000C 5115          move.l  12(A6),D0
00002E66  6036      5116          bra.s   ldiv_3
                    5117   LDIV:
00002E68  4E56 0000 5118          link    A6,#0
00002E6C  48E7 C000 5119          movem.l D0/D1,-(A7)
00002E70  222E 0008 5120          move.l  8(A6),D1
00002E74  202E 000C 5121          move.l  12(A6),D0
00002E78  4A80      5122          tst.l   D0
00002E7A  6A0E      5123          bpl.s   ldiv_1
00002E7C  4480      5124          neg.l   D0
00002E7E  4A81      5125          tst.l   D1
00002E80  6A14      5126          bpl.s   ldiv_2
00002E82  4481      5127          neg.l   D1
00002E84  612A      5128          bsr.s   dodiv
00002E86  4481      5129          neg.l   D1
00002E88  6016      5130          bra.s   ldiv_4
                    5131   ldiv_1:
00002E8A  4A81      5132          tst.l   D1
00002E8C  6A10      5133          bpl.s   ldiv_3
00002E8E  4481      5134          neg.l   D1
00002E90  611E      5135          bsr.s   dodiv
00002E92  4480      5136          neg.l   D0
00002E94  600A      5137          bra.s   ldiv_4
                    5138   ldiv_2:
00002E96  6118      5139          bsr.s   dodiv
00002E98  4480      5140          neg.l   D0
00002E9A  4481      5141          neg.l   D1
00002E9C  6002      5142          bra.s   ldiv_4
                    5143   ldiv_3:
00002E9E  6110      5144          bsr.s   dodiv
                    5145   ldiv_4:
00002EA0  2D40 0008 5146          move.l  D0,8(A6)
00002EA4  2D41 000C 5147          move.l  D1,12(A6)
00002EA8  4CDF 0003 5148          movem.l (A7)+,D0/D1
00002EAC  4E5E      5149          unlk    A6
00002EAE  4E75      5150          rts
                    5151   dodiv:
00002EB0  0C81 0000 5152          cmpi.l  #$FFFF,D1
00002EB4  FFFF      
00002EB6  6236      5153          bhi.s   dodiv_2
00002EB8  0C80 0000 5154          cmpi.l  #$FFFF,D0
00002EBC  FFFF      
00002EBE  6210      5155          bhi.s   dodiv_1
00002EC0  80C1      5156          divu    D1,D0
00002EC2  2200      5157          move.l  D0,D1
00002EC4  4241      5158          clr.w   D1
00002EC6  4841      5159          swap    D1
00002EC8  0280 0000 5160          andi.l  #$FFFF,D0
00002ECC  FFFF      
00002ECE  4E75      5161          rts
                    5162   dodiv_1:
00002ED0  48A7 A000 5163          movem.w D0/D2,-(A7)
00002ED4  4240      5164          clr.w   D0
00002ED6  4840      5165          swap    D0
00002ED8  80C1      5166          divu    D1,D0
00002EDA  3400      5167          move.w  D0,D2
00002EDC  301F      5168          move.w  (A7)+,D0
00002EDE  80C1      5169          divu    D1,D0
00002EE0  4840      5170          swap    D0
00002EE2  4281      5171          clr.l   D1
00002EE4  3200      5172          move.w  D0,D1
00002EE6  3002      5173          move.w  D2,D0
00002EE8  4840      5174          swap    D0
00002EEA  341F      5175          move.w  (A7)+,D2
00002EEC  4E75      5176          rts
                    5177   dodiv_2:
00002EEE  48E7 3800 5178          movem.l D2/D3/D4,-(A7)
00002EF2  2401      5179          move.l  D1,D2
00002EF4  4242      5180          clr.w   D2
00002EF6  4842      5181          swap    D2
00002EF8  5282      5182          addq.l  #1,D2
00002EFA  2600      5183          move.l  D0,D3
00002EFC  2801      5184          move.l  D1,D4
00002EFE  2202      5185          move.l  D2,D1
00002F00  61CE      5186          bsr.s   dodiv_1
00002F02  2204      5187          move.l  D4,D1
00002F04  82C2      5188          divu    D2,D1
00002F06  80C1      5189          divu    D1,D0
00002F08  0280 0000 5190          andi.l  #$FFFF,D0
00002F0C  FFFF      
                    5191   dodiv_3:
00002F0E  2204      5192          move.l  D4,D1
00002F10  2404      5193          move.l  D4,D2
00002F12  4842      5194          swap    D2
00002F14  C2C0      5195          mulu    D0,D1
00002F16  C4C0      5196          mulu    D0,D2
00002F18  4842      5197          swap    D2
00002F1A  D282      5198          add.l   D2,D1
00002F1C  9283      5199          sub.l   D3,D1
00002F1E  620A      5200          bhi.s   dodiv_4
00002F20  4481      5201          neg.l   D1
00002F22  B881      5202          cmp.l   D1,D4
00002F24  6208      5203          bhi.s   dodiv_5
00002F26  5280      5204          addq.l  #1,D0
00002F28  60E4      5205          bra.s   dodiv_3
                    5206   dodiv_4:
00002F2A  5380      5207          subq.l  #1,D0
00002F2C  60E0      5208          bra.s   dodiv_3
                    5209   dodiv_5:
00002F2E  4CDF 001C 5210          movem.l (A7)+,D2/D3/D4
00002F32  4E75      5211          rts
                    5212   _putch:
00002F34  4E56 0000 5213          link      A6,#0
00002F38  48E7 2000 5214          movem.l   D2,-(A7)
00002F3C  242E 0008 5215          move.l    8(A6),D2
00002F40  0C82 0000 5216          cmp.l     #10,D2
00002F44  000A      
00002F46  660A      5217          bne.s     putch_1
00002F48  4878 000D 5218          pea       13
00002F4C  6100 DBEE 5219          bsr       __putch
00002F50  584F      5220          addq.w    #4,A7
                    5221   putch_1:
00002F52  2F02      5222          move.l    D2,-(A7)
00002F54  6100 DBE6 5223          bsr       __putch
00002F58  584F      5224          addq.w    #4,A7
00002F5A  2002      5225          move.l    D2,D0
00002F5C  4CDF 0004 5226          movem.l   (A7)+,D2
00002F60  4E5E      5227          unlk      A6
00002F62  4E75      5228          rts
                    5229   _getch:
00002F64  48E7 2000 5230          movem.l   D2,-(A7)
00002F68  2439 0B00 5231          move.l    __ungetbuf,D2
00002F6C  00C0      
00002F6E  2039 0B00 5232          move.l    __ungetbuf,D0
00002F72  00C0      
00002F74  0C80 FFFF 5233          cmp.l     #-1,D0
00002F78  FFFF      
00002F7A  670C      5234          beq.s     getch_1
00002F7C  23FC FFFF 5235          move.l    #-1,__ungetbuf
00002F80  FFFF 0B00 
00002F84  00C0      
00002F86  6010      5236          bra.s     getch_3
                    5237   getch_1:
00002F88  6100 DBDE 5238          bsr       __getch
00002F8C  2400      5239          move.l    D0,D2
00002F8E  0C80 0000 5240          cmp.l     #13,D0
00002F92  000D      
00002F94  6602      5241          bne.s     getch_3
00002F96  740A      5242          moveq     #10,D2
                    5243   getch_3:
00002F98  2002      5244          move.l    D2,D0
00002F9A  4CDF 0004 5245          movem.l   (A7)+,D2
00002F9E  4E75      5246          rts
                    5247   _tolower:
00002FA0  4E56 0000 5248          link      A6,#0
00002FA4  48E7 2000 5249          movem.l   D2,-(A7)
00002FA8  242E 0008 5250          move.l    8(A6),D2
00002FAC  0C82 0000 5251          cmp.l     #65,D2
00002FB0  0041      
00002FB2  6D0E      5252          blt.s     tolower_1
00002FB4  0C82 0000 5253          cmp.l     #90,D2
00002FB8  005A      
00002FBA  6E06      5254          bgt.s     tolower_1
00002FBC  84BC 0000 5255          or.l      #32,D2
00002FC0  0020      
                    5256   tolower_1:
00002FC2  2002      5257          move.l    D2,D0
00002FC4  4CDF 0004 5258          movem.l   (A7)+,D2
00002FC8  4E5E      5259          unlk      A6
00002FCA  4E75      5260          rts
                    5261   _sprintf:
00002FCC  4E56 FFFC 5262          link      A6,#-4
00002FD0  48E7 2000 5263          movem.l   D2,-(A7)
00002FD4  41EE 000C 5264          lea       12(A6),A0
00002FD8  5848      5265          addq.w    #4,A0
00002FDA  2408      5266          move.l    A0,D2
00002FDC  2F02      5267          move.l    D2,-(A7)
00002FDE  2F2E 000C 5268          move.l    12(A6),-(A7)
00002FE2  2F2E 0008 5269          move.l    8(A6),-(A7)
00002FE6  6100 09EC 5270          bsr       _vsprintf
00002FEA  DEFC 000C 5271          add.w     #12,A7
00002FEE  2D40 FFFC 5272          move.l    D0,-4(A6)
00002FF2  4282      5273          clr.l     D2
00002FF4  202E FFFC 5274          move.l    -4(A6),D0
00002FF8  4CDF 0004 5275          movem.l   (A7)+,D2
00002FFC  4E5E      5276          unlk      A6
00002FFE  4E75      5277          rts
                    5278   _memset:
00003000  206F 0004 5279          move.l    (4,A7),A0
00003004  202F 0008 5280          move.l    (8,A7),D0
00003008  222F 000C 5281          move.l    (12,A7),D1
0000300C  2248      5282          move.l    A0,A1	
                    5283   memset_1:
0000300E  12C0      5284          move.b    D0,(A1)+
00003010  5341      5285          subq      #1,D1
00003012  66FA      5286          bne       memset_1
00003014  2008      5287          move.l    A0,D0
00003016  4E75      5288          rts
                    5289   _strcat:
00003018  206F 0004 5290          move.l    (4,A7),A0	
0000301C  226F 0008 5291          move.l    (8,A7),A1	
00003020  2008      5292          move.l    A0,D0		
                    5293   strcat_0:
00003022  4A18      5294          tst.b     (A0)+
00003024  66FC      5295          bne       strcat_0
00003026  5348      5296          subq      #1,A0
                    5297   strcat_1:
00003028  10D9      5298          move.b    (A1)+,(A0)+
0000302A  66FC      5299          bne       strcat_1
0000302C  4E75      5300          rts
                    5301   _toupper:
0000302E  4E56 0000 5302          link      A6,#0
00003032  48E7 2000 5303          movem.l   D2,-(A7)
00003036  242E 0008 5304          move.l    8(A6),D2
0000303A  0C82 0000 5305          cmp.l     #97,D2
0000303E  0061      
00003040  6D0E      5306          blt.s     toupper_1
00003042  0C82 0000 5307          cmp.l     #122,D2
00003046  007A      
00003048  6E06      5308          bgt.s     toupper_1
0000304A  C4BC 0000 5309          and.l     #95,D2
0000304E  005F      
                    5310   toupper_1:
00003050  2002      5311          move.l    D2,D0
00003052  4CDF 0004 5312          movem.l   (A7)+,D2
00003056  4E5E      5313          unlk      A6
00003058  4E75      5314          rts
                    5315   @vsscanf_scanread:
0000305A  4E56 FFFC 5316          link      A6,#-4
0000305E  48E7 0020 5317          movem.l   A2,-(A7)
00003062  45F9 0000 5318          lea       @vsscanf_bufx,A2
00003066  5660      
00003068  4AAE 0008 5319          tst.l     8(A6)
0000306C  6722      5320          beq.s     @vsscanf_scanread_1
0000306E  206E 0008 5321          move.l    8(A6),A0
00003072  58AE 0008 5322          addq.l    #4,8(A6)
00003076  2050      5323          move.l    (A0),A0
00003078  1010      5324          move.b    (A0),D0
0000307A  4880      5325          ext.w     D0
0000307C  48C0      5326          ext.l     D0
0000307E  2D40 FFFC 5327          move.l    D0,-4(A6)
00003082  6706      5328          beq.s     @vsscanf_scanread_3
00003084  202E FFFC 5329          move.l    -4(A6),D0
00003088  6002      5330          bra.s     @vsscanf_scanread_4
                    5331   @vsscanf_scanread_3:
0000308A  70FF      5332          moveq     #-1,D0
                    5333   @vsscanf_scanread_4:
0000308C  6000 0032 5334          bra       @vsscanf_scanread_5
                    5335   @vsscanf_scanread_1:
00003090  2052      5336          move.l    (A2),A0
00003092  1010      5337          move.b    (A0),D0
00003094  6620      5338          bne.s     @vsscanf_scanread_6
00003096  4879 0B00 5339          pea       @vsscanf_buf
0000309A  0546      
0000309C  6100 1038 5340          bsr       _gets
000030A0  584F      5341          addq.w    #4,A7
000030A2  2480      5342          move.l    D0,(A2)
000030A4  4879 0000 5343          pea       @vsscanf_1
000030A8  5664      
000030AA  4879 0B00 5344          pea       @vsscanf_buf
000030AE  0546      
000030B0  6100 FF66 5345          bsr       _strcat
000030B4  504F      5346          addq.w    #8,A7
                    5347   @vsscanf_scanread_6:
000030B6  2052      5348          move.l    (A2),A0
000030B8  5292      5349          addq.l    #1,(A2)
000030BA  1010      5350          move.b    (A0),D0
000030BC  4880      5351          ext.w     D0
000030BE  48C0      5352          ext.l     D0
                    5353   @vsscanf_scanread_5:
000030C0  4CDF 0400 5354          movem.l   (A7)+,A2
000030C4  4E5E      5355          unlk      A6
000030C6  4E75      5356          rts
                    5357   @vsscanf_scanputback:
000030C8  4E56 0000 5358          link      A6,#0
000030CC  48E7 3000 5359          movem.l   D2/D3,-(A7)
000030D0  242E 000C 5360          move.l    12(A6),D2
000030D4  262E 0008 5361          move.l    8(A6),D3
000030D8  6718      5362          beq.s     @vsscanf_scanputback_1
000030DA  0C82 FFFF 5363          cmp.l     #-1,D2
000030DE  FFFF      
000030E0  670A      5364          beq.s     @vsscanf_scanputback_3
000030E2  5983      5365          subq.l    #4,D3
000030E4  2043      5366          move.l    D3,A0
000030E6  2050      5367          move.l    (A0),A0
000030E8  1082      5368          move.b    D2,(A0)
000030EA  6004      5369          bra.s     @vsscanf_scanputback_4
                    5370   @vsscanf_scanputback_3:
000030EC  2043      5371          move.l    D3,A0
000030EE  5390      5372          subq.l    #1,(A0)
                    5373   @vsscanf_scanputback_4:
000030F0  602E      5374          bra.s     @vsscanf_scanputback_6
                    5375   @vsscanf_scanputback_1:
000030F2  41F9 0B00 5376          lea       @vsscanf_buf,A0
000030F6  0546      
000030F8  2008      5377          move.l    A0,D0
000030FA  B0B9 0000 5378          cmp.l     @vsscanf_bufx,D0
000030FE  5660      
00003100  6610      5379          bne.s     @vsscanf_scanputback_5
00003102  4239 0B00 5380          clr.b     @vsscanf_buf
00003106  0546      
00003108  2F02      5381          move.l    D2,-(A7)
0000310A  6100 103C 5382          bsr       _ungetch
0000310E  584F      5383          addq.w    #4,A7
00003110  600E      5384          bra.s     @vsscanf_scanputback_6
                    5385   @vsscanf_scanputback_5:
00003112  53B9 0000 5386          subq.l    #1,@vsscanf_bufx
00003116  5660      
00003118  2079 0000 5387          move.l    @vsscanf_bufx,A0
0000311C  5660      
0000311E  1082      5388          move.b    D2,(A0)
                    5389   @vsscanf_scanputback_6:
00003120  2002      5390          move.l    D2,D0
00003122  4CDF 000C 5391          movem.l   (A7)+,D2/D3
00003126  4E5E      5392          unlk      A6
00003128  4E75      5393          rts
                    5394   @vsscanf_scanspace:
0000312A  4E56 0000 5395          link      A6,#0
0000312E  48E7 2000 5396          movem.l   D2,-(A7)
                    5397   @vsscanf_scanspace_1:
00003132  2F2E 0008 5398          move.l    8(A6),-(A7)
00003136  6100 FF22 5399          bsr       @vsscanf_scanread
0000313A  584F      5400          addq.w    #4,A7
0000313C  2400      5401          move.l    D0,D2
0000313E  206E 000C 5402          move.l    12(A6),A0
00003142  5290      5403          addq.l    #1,(A0)
00003144  2042      5404          move.l    D2,A0
00003146  43F9 0000 5405          lea       __ctype,A1
0000314A  5666      
0000314C  1030 9801 5406          move.b    1(A0,A1.L),D0
00003150  C03C 0010 5407          and.b     #16,D0
00003154  66DC      5408          bne       @vsscanf_scanspace_1
00003156  2002      5409          move.l    D2,D0
00003158  4CDF 0004 5410          movem.l   (A7)+,D2
0000315C  4E5E      5411          unlk      A6
0000315E  4E75      5412          rts
                    5413   @vsscanf_scanselect:
00003160  4E56 0000 5414          link      A6,#0
00003164  48E7 3F20 5415          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00003168  262E 000C 5416          move.l    12(A6),D3
0000316C  2C2E 0018 5417          move.l    24(A6),D6
00003170  2E2E 0014 5418          move.l    20(A6),D7
00003174  2043      5419          move.l    D3,A0
00003176  1010      5420          move.b    (A0),D0
00003178  4880      5421          ext.w     D0
0000317A  48C0      5422          ext.l     D0
0000317C  0C80 0000 5423          cmp.l     #94,D0
00003180  005E      
00003182  6608      5424          bne.s     @vsscanf_scanselect_1
00003184  347C 0001 5425          move.w    #1,A2
00003188  5283      5426          addq.l    #1,D3
0000318A  6004      5427          bra.s     @vsscanf_scanselect_2
                    5428   @vsscanf_scanselect_1:
0000318C  347C 0000 5429          move.w    #0,A2
                    5430   @vsscanf_scanselect_2:
00003190  202E 0010 5431          move.l    16(A6),D0
00003194  53AE 0010 5432          subq.l    #1,16(A6)
00003198  4A80      5433          tst.l     D0
0000319A  6700 0108 5434          beq       @vsscanf_scanselect_5
0000319E  2F2E 0008 5435          move.l    8(A6),-(A7)
000031A2  6100 FEB6 5436          bsr       @vsscanf_scanread
000031A6  584F      5437          addq.w    #4,A7
000031A8  2800      5438          move.l    D0,D4
000031AA  0C84 FFFF 5439          cmp.l     #-1,D4
000031AE  FFFF      
000031B0  6604      5440          bne.s     @vsscanf_scanselect_6
000031B2  6000 00F0 5441          bra       @vsscanf_scanselect_5
                    5442   @vsscanf_scanselect_6:
000031B6  206E 001C 5443          move.l    28(A6),A0
000031BA  5290      5444          addq.l    #1,(A0)
000031BC  4285      5445          clr.l     D5
000031BE  4282      5446          clr.l     D2
                    5447   @vsscanf_scanselect_8:
000031C0  2043      5448          move.l    D3,A0
000031C2  1030 2800 5449          move.b    0(A0,D2.L),D0
000031C6  4880      5450          ext.w     D0
000031C8  48C0      5451          ext.l     D0
000031CA  0C80 0000 5452          cmp.l     #93,D0
000031CE  005D      
000031D0  6700 008E 5453          beq       @vsscanf_scanselect_10
000031D4  4A82      5454          tst.l     D2
000031D6  6716      5455          beq.s     @vsscanf_scanselect_11
000031D8  2043      5456          move.l    D3,A0
000031DA  1030 2800 5457          move.b    0(A0,D2.L),D0
000031DE  4880      5458          ext.w     D0
000031E0  48C0      5459          ext.l     D0
000031E2  0C80 0000 5460          cmp.l     #93,D0
000031E6  005D      
000031E8  6604      5461          bne.s     @vsscanf_scanselect_11
000031EA  6000 0074 5462          bra       @vsscanf_scanselect_10
                    5463   @vsscanf_scanselect_11:
000031EE  4A82      5464          tst.l     D2
000031F0  6700 0058 5465          beq       @vsscanf_scanselect_15
000031F4  2043      5466          move.l    D3,A0
000031F6  1030 2800 5467          move.b    0(A0,D2.L),D0
000031FA  4880      5468          ext.w     D0
000031FC  48C0      5469          ext.l     D0
000031FE  0C80 0000 5470          cmp.l     #45,D0
00003202  002D      
00003204  6600 0044 5471          bne       @vsscanf_scanselect_15
00003208  2043      5472          move.l    D3,A0
0000320A  2002      5473          move.l    D2,D0
0000320C  5380      5474          subq.l    #1,D0
0000320E  2243      5475          move.l    D3,A1
00003210  2F08      5476          move.l    A0,-(A7)
00003212  2042      5477          move.l    D2,A0
00003214  1230 0800 5478          move.b    0(A0,D0.L),D1
00003218  B230 9801 5479          cmp.b     1(A0,A1.L),D1
0000321C  6C00 002C 5480          bge       @vsscanf_scanselect_15
00003220  205F      5481          move.l    (A7)+,A0
00003222  2043      5482          move.l    D3,A0
00003224  2002      5483          move.l    D2,D0
00003226  5380      5484          subq.l    #1,D0
00003228  1030 0800 5485          move.b    0(A0,D0.L),D0
0000322C  4880      5486          ext.w     D0
0000322E  48C0      5487          ext.l     D0
00003230  B880      5488          cmp.l     D0,D4
00003232  6D12      5489          blt.s     @vsscanf_scanselect_17
00003234  2043      5490          move.l    D3,A0
00003236  2242      5491          move.l    D2,A1
00003238  1031 8801 5492          move.b    1(A1,A0.L),D0
0000323C  4880      5493          ext.w     D0
0000323E  48C0      5494          ext.l     D0
00003240  B880      5495          cmp.l     D0,D4
00003242  6E02      5496          bgt.s     @vsscanf_scanselect_17
00003244  601A      5497          bra.s     @vsscanf_scanselect_10
                    5498   @vsscanf_scanselect_17:
00003246  5282      5499          addq.l    #1,D2
00003248  6010      5500          bra.s     @vsscanf_scanselect_19
                    5501   @vsscanf_scanselect_15:
0000324A  2043      5502          move.l    D3,A0
0000324C  1030 2800 5503          move.b    0(A0,D2.L),D0
00003250  4880      5504          ext.w     D0
00003252  48C0      5505          ext.l     D0
00003254  B880      5506          cmp.l     D0,D4
00003256  6602      5507          bne.s     @vsscanf_scanselect_19
00003258  6006      5508          bra.s     @vsscanf_scanselect_10
                    5509   @vsscanf_scanselect_19:
0000325A  5282      5510          addq.l    #1,D2
0000325C  6000 FF62 5511          bra       @vsscanf_scanselect_8
                    5512   @vsscanf_scanselect_10:
00003260  4A82      5513          tst.l     D2
00003262  6712      5514          beq.s     @vsscanf_scanselect_23
00003264  2043      5515          move.l    D3,A0
00003266  1030 2800 5516          move.b    0(A0,D2.L),D0
0000326A  4880      5517          ext.w     D0
0000326C  48C0      5518          ext.l     D0
0000326E  0C80 0000 5519          cmp.l     #93,D0
00003272  005D      
00003274  6702      5520          beq.s     @vsscanf_scanselect_21
                    5521   @vsscanf_scanselect_23:
00003276  7A01      5522          moveq     #1,D5
                    5523   @vsscanf_scanselect_21:
00003278  200A      5524          move.l    A2,D0
0000327A  6712      5525          beq.s     @vsscanf_scanselect_24
0000327C  4A85      5526          tst.l     D5
0000327E  660C      5527          bne.s     @vsscanf_scanselect_26
00003280  4A87      5528          tst.l     D7
00003282  6606      5529          bne.s     @vsscanf_scanselect_28
00003284  2046      5530          move.l    D6,A0
00003286  5286      5531          addq.l    #1,D6
00003288  1084      5532          move.b    D4,(A0)
                    5533   @vsscanf_scanselect_28:
0000328A  6014      5534          bra.s     @vsscanf_scanselect_4
                    5535   @vsscanf_scanselect_26:
0000328C  6016      5536          bra.s     @vsscanf_scanselect_5
                    5537   @vsscanf_scanselect_24:
0000328E  4A85      5538          tst.l     D5
00003290  670C      5539          beq.s     @vsscanf_scanselect_30
00003292  4A87      5540          tst.l     D7
00003294  6606      5541          bne.s     @vsscanf_scanselect_32
00003296  2046      5542          move.l    D6,A0
00003298  5286      5543          addq.l    #1,D6
0000329A  1084      5544          move.b    D4,(A0)
                    5545   @vsscanf_scanselect_32:
0000329C  6002      5546          bra.s     @vsscanf_scanselect_4
                    5547   @vsscanf_scanselect_30:
0000329E  6004      5548          bra.s     @vsscanf_scanselect_5
                    5549   @vsscanf_scanselect_4:
000032A0  6000 FEEE 5550          bra       @vsscanf_scanselect_2
                    5551   @vsscanf_scanselect_5:
000032A4  0C84 FFFF 5552          cmp.l     #-1,D4
000032A8  FFFF      
000032AA  6712      5553          beq.s     @vsscanf_scanselect_34
000032AC  2F04      5554          move.l    D4,-(A7)
000032AE  2F2E 0008 5555          move.l    8(A6),-(A7)
000032B2  6100 FE14 5556          bsr       @vsscanf_scanputback
000032B6  504F      5557          addq.w    #8,A7
000032B8  206E 001C 5558          move.l    28(A6),A0
000032BC  5390      5559          subq.l    #1,(A0)
                    5560   @vsscanf_scanselect_34:
000032BE  4A87      5561          tst.l     D7
000032C0  6604      5562          bne.s     @vsscanf_scanselect_36
000032C2  2046      5563          move.l    D6,A0
000032C4  4210      5564          clr.b     (A0)
                    5565   @vsscanf_scanselect_36:
000032C6  5283      5566          addq.l    #1,D3
000032C8  2043      5567          move.l    D3,A0
000032CA  1010      5568          move.b    (A0),D0
000032CC  4880      5569          ext.w     D0
000032CE  48C0      5570          ext.l     D0
000032D0  0C80 0000 5571          cmp.l     #93,D0
000032D4  005D      
000032D6  6702      5572          beq.s     @vsscanf_scanselect_40
000032D8  60EC      5573          bra       @vsscanf_scanselect_36
                    5574   @vsscanf_scanselect_40:
000032DA  5283      5575          addq.l    #1,D3
000032DC  2003      5576          move.l    D3,D0
000032DE  4CDF 04FC 5577          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
000032E2  4E5E      5578          unlk      A6
000032E4  4E75      5579          rts
                    5580   _scanflush:
000032E6  41F9 0B00 5581          lea       @vsscanf_buf,A0
000032EA  0546      
000032EC  23C8 0000 5582          move.l    A0,@vsscanf_bufx
000032F0  5660      
000032F2  4239 0B00 5583          clr.b     @vsscanf_buf
000032F6  0546      
000032F8  4878 FFFF 5584          pea       -1
000032FC  6100 0E4A 5585          bsr       _ungetch
00003300  584F      5586          addq.w    #4,A7
00003302  4E75      5587          rts
                    5588   _vsscanf:
00003304  4E56 FF88 5589          link      A6,#-120
00003308  48E7 3F3C 5590          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000330C  47F8 305A 5591          lea       @vsscanf_scanread,A3
00003310  4AAE 0008 5592          tst.l     8(A6)
00003314  6706      5593          beq.s     vsscanf_1
00003316  41EE 0008 5594          lea       8(A6),A0
0000331A  6004      5595          bra.s     vsscanf_2
                    5596   vsscanf_1:
0000331C  4280      5597          clr.l     D0
0000331E  2040      5598          move.l    D0,A0
                    5599   vsscanf_2:
00003320  2A08      5600          move.l    A0,D5
00003322  42AE FFE4 5601          clr.l     -28(A6)
00003326  4284      5602          clr.l     D4
                    5603   vsscanf_3:
00003328  206E 000C 5604          move.l    12(A6),A0
0000332C  52AE 000C 5605          addq.l    #1,12(A6)
00003330  1010      5606          move.b    (A0),D0
00003332  4880      5607          ext.w     D0
00003334  48C0      5608          ext.l     D0
00003336  2600      5609          move.l    D0,D3
00003338  6700 05AC 5610          beq       vsscanf_5
0000333C  4286      5611          clr.l     D6
0000333E  387C 0000 5612          move.w    #0,A4
00003342  0C83 0000 5613          cmp.l     #32,D3
00003346  0020      
00003348  6712      5614          beq.s     vsscanf_8
0000334A  0C83 0000 5615          cmp.l     #9,D3
0000334E  0009      
00003350  670A      5616          beq.s     vsscanf_8
00003352  0C83 0000 5617          cmp.l     #10,D3
00003356  000A      
00003358  6600 0048 5618          bne       vsscanf_6
                    5619   vsscanf_8:
0000335C  2F05      5620          move.l    D5,-(A7)
0000335E  4E93      5621          jsr       (A3)
00003360  584F      5622          addq.w    #4,A7
00003362  2400      5623          move.l    D0,D2
00003364  52AE FFE4 5624          addq.l    #1,-28(A6)
00003368  0C82 FFFF 5625          cmp.l     #-1,D2
0000336C  FFFF      
0000336E  660E      5626          bne.s     vsscanf_11
00003370  4A84      5627          tst.l     D4
00003372  6704      5628          beq.s     vsscanf_13
00003374  2004      5629          move.l    D4,D0
00003376  6002      5630          bra.s     vsscanf_14
                    5631   vsscanf_13:
00003378  70FF      5632          moveq     #-1,D0
                    5633   vsscanf_14:
0000337A  6000 056C 5634          bra       vsscanf_15
                    5635   vsscanf_11:
0000337E  2042      5636          move.l    D2,A0
00003380  43F9 0000 5637          lea       __ctype,A1
00003384  5666      
00003386  1030 9801 5638          move.b    1(A0,A1.L),D0
0000338A  C03C 0010 5639          and.b     #16,D0
0000338E  66CC      5640          bne       vsscanf_8
00003390  53AE FFE4 5641          subq.l    #1,-28(A6)
00003394  2F02      5642          move.l    D2,-(A7)
00003396  2F05      5643          move.l    D5,-(A7)
00003398  6100 FD2E 5644          bsr       @vsscanf_scanputback
0000339C  504F      5645          addq.w    #8,A7
0000339E  6000 0542 5646          bra       vsscanf_139
                    5647   vsscanf_6:
000033A2  0C83 0000 5648          cmp.l     #37,D3
000033A6  0025      
000033A8  6600 0502 5649          bne       vsscanf_127
000033AC  206E 000C 5650          move.l    12(A6),A0
000033B0  52AE 000C 5651          addq.l    #1,12(A6)
000033B4  1010      5652          move.b    (A0),D0
000033B6  4880      5653          ext.w     D0
000033B8  48C0      5654          ext.l     D0
000033BA  2600      5655          move.l    D0,D3
000033BC  42AE FFEC 5656          clr.l     -20(A6)
000033C0  4286      5657          clr.l     D6
000033C2  42AE FFE8 5658          clr.l     -24(A6)
000033C6  347C 7FFF 5659          move.w    #32767,A2
000033CA  0C83 0000 5660          cmp.l     #42,D3
000033CE  002A      
000033D0  6612      5661          bne.s     vsscanf_18
000033D2  7C01      5662          moveq     #1,D6
000033D4  206E 000C 5663          move.l    12(A6),A0
000033D8  52AE 000C 5664          addq.l    #1,12(A6)
000033DC  1010      5665          move.b    (A0),D0
000033DE  4880      5666          ext.w     D0
000033E0  48C0      5667          ext.l     D0
000033E2  2600      5668          move.l    D0,D3
                    5669   vsscanf_18:
000033E4  2043      5670          move.l    D3,A0
000033E6  43F9 0000 5671          lea       __ctype,A1
000033EA  5666      
000033EC  1030 9801 5672          move.b    1(A0,A1.L),D0
000033F0  C03C 0004 5673          and.b     #4,D0
000033F4  6700 004E 5674          beq       vsscanf_24
000033F8  2003      5675          move.l    D3,D0
000033FA  0480 0000 5676          sub.l     #48,D0
000033FE  0030      
00003400  2440      5677          move.l    D0,A2
                    5678   vsscanf_22:
00003402  206E 000C 5679          move.l    12(A6),A0
00003406  52AE 000C 5680          addq.l    #1,12(A6)
0000340A  1010      5681          move.b    (A0),D0
0000340C  4880      5682          ext.w     D0
0000340E  48C0      5683          ext.l     D0
00003410  2600      5684          move.l    D0,D3
00003412  2040      5685          move.l    D0,A0
00003414  43F9 0000 5686          lea       __ctype,A1
00003418  5666      
0000341A  1030 9801 5687          move.b    1(A0,A1.L),D0
0000341E  C0BC 0000 5688          and.l     #255,D0
00003422  00FF      
00003424  C0BC 0000 5689          and.l     #4,D0
00003428  0004      
0000342A  6718      5690          beq.s     vsscanf_24
0000342C  70D0      5691          moveq     #-48,D0
0000342E  2F0A      5692          move.l    A2,-(A7)
00003430  4878 000A 5693          pea       10
00003434  6100 0C12 5694          bsr       LMUL
00003438  2217      5695          move.l    (A7),D1
0000343A  504F      5696          addq.w    #8,A7
0000343C  D283      5697          add.l     D3,D1
0000343E  D081      5698          add.l     D1,D0
00003440  2440      5699          move.l    D0,A2
00003442  60BE      5700          bra       vsscanf_22
                    5701   vsscanf_24:
00003444  0C83 0000 5702          cmp.l     #108,D3
00003448  006C      
0000344A  6708      5703          beq.s     vsscanf_27
0000344C  0C83 0000 5704          cmp.l     #76,D3
00003450  004C      
00003452  661A      5705          bne.s     vsscanf_25
                    5706   vsscanf_27:
00003454  2D7C 0000 5707          move.l    #1,-24(A6)
00003458  0001 FFE8 
0000345C  206E 000C 5708          move.l    12(A6),A0
00003460  52AE 000C 5709          addq.l    #1,12(A6)
00003464  1010      5710          move.b    (A0),D0
00003466  4880      5711          ext.w     D0
00003468  48C0      5712          ext.l     D0
0000346A  2600      5713          move.l    D0,D3
0000346C  6020      5714          bra.s     vsscanf_28
                    5715   vsscanf_25:
0000346E  0C83 0000 5716          cmp.l     #104,D3
00003472  0068      
00003474  6618      5717          bne.s     vsscanf_28
00003476  2D7C 0000 5718          move.l    #1,-20(A6)
0000347A  0001 FFEC 
0000347E  206E 000C 5719          move.l    12(A6),A0
00003482  52AE 000C 5720          addq.l    #1,12(A6)
00003486  1010      5721          move.b    (A0),D0
00003488  4880      5722          ext.w     D0
0000348A  48C0      5723          ext.l     D0
0000348C  2600      5724          move.l    D0,D3
                    5725   vsscanf_28:
0000348E  0C83 0000 5726          cmp.l     #91,D3
00003492  005B      
00003494  6600 0036 5727          bne       vsscanf_30
00003498  4A86      5728          tst.l     D6
0000349A  660A      5729          bne.s     vsscanf_32
0000349C  206E 0010 5730          move.l    16(A6),A0
000034A0  58AE 0010 5731          addq.l    #4,16(A6)
000034A4  2E10      5732          move.l    (A0),D7
                    5733   vsscanf_32:
000034A6  486E FFE4 5734          pea       -28(A6)
000034AA  2F07      5735          move.l    D7,-(A7)
000034AC  2F06      5736          move.l    D6,-(A7)
000034AE  2F0A      5737          move.l    A2,-(A7)
000034B0  2F2E 000C 5738          move.l    12(A6),-(A7)
000034B4  2F05      5739          move.l    D5,-(A7)
000034B6  6100 FCA8 5740          bsr       @vsscanf_scanselect
000034BA  DEFC 0018 5741          add.w     #24,A7
000034BE  2D40 000C 5742          move.l    D0,12(A6)
000034C2  4A86      5743          tst.l     D6
000034C4  6602      5744          bne.s     vsscanf_34
000034C6  5284      5745          addq.l    #1,D4
                    5746   vsscanf_34:
000034C8  6000 0418 5747          bra       vsscanf_139
                    5748   vsscanf_30:
000034CC  0C83 0000 5749          cmp.l     #110,D3
000034D0  006E      
000034D2  661A      5750          bne.s     vsscanf_36
000034D4  4A86      5751          tst.l     D6
000034D6  6612      5752          bne.s     vsscanf_38
000034D8  206E 0010 5753          move.l    16(A6),A0
000034DC  58AE 0010 5754          addq.l    #4,16(A6)
000034E0  2E10      5755          move.l    (A0),D7
000034E2  2047      5756          move.l    D7,A0
000034E4  20AE FFE4 5757          move.l    -28(A6),(A0)
000034E8  5284      5758          addq.l    #1,D4
                    5759   vsscanf_38:
000034EA  6000 03F6 5760          bra       vsscanf_139
                    5761   vsscanf_36:
000034EE  0C83 0000 5762          cmp.l     #115,D3
000034F2  0073      
000034F4  6600 00AC 5763          bne       vsscanf_40
000034F8  486E FFE4 5764          pea       -28(A6)
000034FC  2F05      5765          move.l    D5,-(A7)
000034FE  6100 FC2A 5766          bsr       @vsscanf_scanspace
00003502  504F      5767          addq.w    #8,A7
00003504  2400      5768          move.l    D0,D2
00003506  4A86      5769          tst.l     D6
00003508  660A      5770          bne.s     vsscanf_42
0000350A  206E 0010 5771          move.l    16(A6),A0
0000350E  58AE 0010 5772          addq.l    #4,16(A6)
00003512  2E10      5773          move.l    (A0),D7
                    5774   vsscanf_42:
00003514  52AE FFE4 5775          addq.l    #1,-28(A6)
                    5776   vsscanf_44:
00003518  200A      5777          move.l    A2,D0
0000351A  534A      5778          subq.w    #1,A2
0000351C  4A80      5779          tst.l     D0
0000351E  6700 0038 5780          beq       vsscanf_46
00003522  2042      5781          move.l    D2,A0
00003524  43F9 0000 5782          lea       __ctype,A1
00003528  5666      
0000352A  1030 9801 5783          move.b    1(A0,A1.L),D0
0000352E  C03C 0010 5784          and.b     #16,D0
00003532  6624      5785          bne.s     vsscanf_46
00003534  0C82 FFFF 5786          cmp.l     #-1,D2
00003538  FFFF      
0000353A  671C      5787          beq.s     vsscanf_46
0000353C  387C 0001 5788          move.w    #1,A4
00003540  4A86      5789          tst.l     D6
00003542  6606      5790          bne.s     vsscanf_47
00003544  2047      5791          move.l    D7,A0
00003546  5287      5792          addq.l    #1,D7
00003548  1082      5793          move.b    D2,(A0)
                    5794   vsscanf_47:
0000354A  2F05      5795          move.l    D5,-(A7)
0000354C  4E93      5796          jsr       (A3)
0000354E  584F      5797          addq.w    #4,A7
00003550  2400      5798          move.l    D0,D2
00003552  52AE FFE4 5799          addq.l    #1,-28(A6)
00003556  60C0      5800          bra       vsscanf_44
                    5801   vsscanf_46:
00003558  4A86      5802          tst.l     D6
0000355A  660A      5803          bne.s     vsscanf_51
0000355C  2047      5804          move.l    D7,A0
0000355E  4210      5805          clr.b     (A0)
00003560  200C      5806          move.l    A4,D0
00003562  6702      5807          beq.s     vsscanf_51
00003564  5284      5808          addq.l    #1,D4
                    5809   vsscanf_51:
00003566  0C82 FFFF 5810          cmp.l     #-1,D2
0000356A  FFFF      
0000356C  6708      5811          beq.s     vsscanf_55
0000356E  4A86      5812          tst.l     D6
00003570  661E      5813          bne.s     vsscanf_53
00003572  200C      5814          move.l    A4,D0
00003574  661A      5815          bne.s     vsscanf_53
                    5816   vsscanf_55:
00003576  4A84      5817          tst.l     D4
00003578  6704      5818          beq.s     vsscanf_56
0000357A  2004      5819          move.l    D4,D0
0000357C  600E      5820          bra.s     vsscanf_59
                    5821   vsscanf_56:
0000357E  0C82 FFFF 5822          cmp.l     #-1,D2
00003582  FFFF      
00003584  6604      5823          bne.s     vsscanf_58
00003586  70FF      5824          moveq     #-1,D0
00003588  6002      5825          bra.s     vsscanf_59
                    5826   vsscanf_58:
0000358A  2004      5827          move.l    D4,D0
                    5828   vsscanf_59:
0000358C  6000 035A 5829          bra       vsscanf_15
                    5830   vsscanf_53:
00003590  53AE FFE4 5831          subq.l    #1,-28(A6)
00003594  2F02      5832          move.l    D2,-(A7)
00003596  2F05      5833          move.l    D5,-(A7)
00003598  6100 FB2E 5834          bsr       @vsscanf_scanputback
0000359C  504F      5835          addq.w    #8,A7
0000359E  6000 0342 5836          bra       vsscanf_139
                    5837   vsscanf_40:
000035A2  0C83 0000 5838          cmp.l     #99,D3
000035A6  0063      
000035A8  6600 008E 5839          bne       vsscanf_60
000035AC  4A86      5840          tst.l     D6
000035AE  660A      5841          bne.s     vsscanf_62
000035B0  206E 0010 5842          move.l    16(A6),A0
000035B4  58AE 0010 5843          addq.l    #4,16(A6)
000035B8  2E10      5844          move.l    (A0),D7
                    5845   vsscanf_62:
000035BA  2F05      5846          move.l    D5,-(A7)
000035BC  4E93      5847          jsr       (A3)
000035BE  584F      5848          addq.w    #4,A7
000035C0  2400      5849          move.l    D0,D2
000035C2  52AE FFE4 5850          addq.l    #1,-28(A6)
000035C6  200A      5851          move.l    A2,D0
000035C8  0C80 0000 5852          cmp.l     #32767,D0
000035CC  7FFF      
000035CE  6604      5853          bne.s     vsscanf_64
000035D0  347C 0001 5854          move.w    #1,A2
                    5855   vsscanf_64:
000035D4  0C82 FFFF 5856          cmp.l     #-1,D2
000035D8  FFFF      
000035DA  6606      5857          bne.s     vsscanf_66
000035DC  4A86      5858          tst.l     D6
000035DE  6602      5859          bne.s     vsscanf_66
000035E0  5384      5860          subq.l    #1,D4
                    5861   vsscanf_66:
000035E2  200A      5862          move.l    A2,D0
000035E4  534A      5863          subq.w    #1,A2
000035E6  4A80      5864          tst.l     D0
000035E8  6720      5865          beq.s     vsscanf_70
000035EA  0C82 FFFF 5866          cmp.l     #-1,D2
000035EE  FFFF      
000035F0  6718      5867          beq.s     vsscanf_70
000035F2  4A86      5868          tst.l     D6
000035F4  6606      5869          bne.s     vsscanf_71
000035F6  2047      5870          move.l    D7,A0
000035F8  5287      5871          addq.l    #1,D7
000035FA  1082      5872          move.b    D2,(A0)
                    5873   vsscanf_71:
000035FC  2F05      5874          move.l    D5,-(A7)
000035FE  4E93      5875          jsr       (A3)
00003600  584F      5876          addq.w    #4,A7
00003602  2400      5877          move.l    D0,D2
00003604  52AE FFE4 5878          addq.l    #1,-28(A6)
00003608  60D8      5879          bra       vsscanf_66
                    5880   vsscanf_70:
0000360A  0C82 FFFF 5881          cmp.l     #-1,D2
0000360E  FFFF      
00003610  660E      5882          bne.s     vsscanf_73
00003612  4A84      5883          tst.l     D4
00003614  6704      5884          beq.s     vsscanf_75
00003616  2004      5885          move.l    D4,D0
00003618  6002      5886          bra.s     vsscanf_76
                    5887   vsscanf_75:
0000361A  70FF      5888          moveq     #-1,D0
                    5889   vsscanf_76:
0000361C  6000 02CA 5890          bra       vsscanf_15
                    5891   vsscanf_73:
00003620  4A86      5892          tst.l     D6
00003622  6602      5893          bne.s     vsscanf_77
00003624  5284      5894          addq.l    #1,D4
                    5895   vsscanf_77:
00003626  53AE FFE4 5896          subq.l    #1,-28(A6)
0000362A  2F02      5897          move.l    D2,-(A7)
0000362C  2F05      5898          move.l    D5,-(A7)
0000362E  6100 FA98 5899          bsr       @vsscanf_scanputback
00003632  504F      5900          addq.w    #8,A7
00003634  6000 02AC 5901          bra       vsscanf_139
                    5902   vsscanf_60:
00003638  0C83 0000 5903          cmp.l     #105,D3
0000363C  0069      
0000363E  6600 0060 5904          bne       vsscanf_82
00003642  486E FFE4 5905          pea       -28(A6)
00003646  2F05      5906          move.l    D5,-(A7)
00003648  6100 FAE0 5907          bsr       @vsscanf_scanspace
0000364C  504F      5908          addq.w    #8,A7
0000364E  2400      5909          move.l    D0,D2
00003650  0C82 0000 5910          cmp.l     #48,D2
00003654  0030      
00003656  6600 0038 5911          bne       vsscanf_81
0000365A  387C 0001 5912          move.w    #1,A4
0000365E  2F05      5913          move.l    D5,-(A7)
00003660  4E93      5914          jsr       (A3)
00003662  584F      5915          addq.w    #4,A7
00003664  2400      5916          move.l    D0,D2
00003666  2F02      5917          move.l    D2,-(A7)
00003668  6100 F936 5918          bsr       _tolower
0000366C  584F      5919          addq.w    #4,A7
0000366E  0C80 0000 5920          cmp.l     #120,D0
00003672  0078      
00003674  6604      5921          bne.s     vsscanf_83
00003676  7678      5922          moveq     #120,D3
00003678  6010      5923          bra.s     vsscanf_84
                    5924   vsscanf_83:
0000367A  53AE FFE4 5925          subq.l    #1,-28(A6)
0000367E  2F02      5926          move.l    D2,-(A7)
00003680  2F05      5927          move.l    D5,-(A7)
00003682  6100 FA44 5928          bsr       @vsscanf_scanputback
00003686  504F      5929          addq.w    #8,A7
00003688  766F      5930          moveq     #111,D3
                    5931   vsscanf_84:
0000368A  52AE FFE4 5932          addq.l    #1,-28(A6)
0000368E  6010      5933          bra.s     vsscanf_82
                    5934   vsscanf_81:
00003690  53AE FFE4 5935          subq.l    #1,-28(A6)
00003694  2F02      5936          move.l    D2,-(A7)
00003696  2F05      5937          move.l    D5,-(A7)
00003698  6100 FA2E 5938          bsr       @vsscanf_scanputback
0000369C  504F      5939          addq.w    #8,A7
0000369E  7664      5940          moveq     #100,D3
                    5941   vsscanf_82:
000036A0  0C83 0000 5942          cmp.l     #100,D3
000036A4  0064      
000036A6  671A      5943          beq.s     vsscanf_87
000036A8  0C83 0000 5944          cmp.l     #117,D3
000036AC  0075      
000036AE  6712      5945          beq.s     vsscanf_87
000036B0  0C83 0000 5946          cmp.l     #120,D3
000036B4  0078      
000036B6  670A      5947          beq.s     vsscanf_87
000036B8  0C83 0000 5948          cmp.l     #111,D3
000036BC  006F      
000036BE  6600 01A4 5949          bne       vsscanf_85
                    5950   vsscanf_87:
000036C2  486E FFE4 5951          pea       -28(A6)
000036C6  2F05      5952          move.l    D5,-(A7)
000036C8  6100 FA60 5953          bsr       @vsscanf_scanspace
000036CC  504F      5954          addq.w    #8,A7
000036CE  2400      5955          move.l    D0,D2
000036D0  2D7C 0000 5956          move.l    #10,-4(A6)
000036D4  000A FFFC 
000036D8  0C83 0000 5957          cmp.l     #120,D3
000036DC  0078      
000036DE  6608      5958          bne.s     vsscanf_88
000036E0  2D7C 0000 5959          move.l    #16,-4(A6)
000036E4  0010 FFFC 
                    5960   vsscanf_88:
000036E8  0C83 0000 5961          cmp.l     #111,D3
000036EC  006F      
000036EE  6608      5962          bne.s     vsscanf_90
000036F0  2D7C 0000 5963          move.l    #8,-4(A6)
000036F4  0008 FFFC 
                    5964   vsscanf_90:
000036F8  4A86      5965          tst.l     D6
000036FA  660A      5966          bne.s     vsscanf_92
000036FC  206E 0010 5967          move.l    16(A6),A0
00003700  58AE 0010 5968          addq.l    #4,16(A6)
00003704  2E10      5969          move.l    (A0),D7
                    5970   vsscanf_92:
00003706  42AE FFE0 5971          clr.l     -32(A6)
0000370A  52AE FFE4 5972          addq.l    #1,-28(A6)
0000370E  0C83 0000 5973          cmp.l     #117,D3
00003712  0075      
00003714  6720      5974          beq.s     vsscanf_94
00003716  0C82 0000 5975          cmp.l     #45,D2
0000371A  002D      
0000371C  6618      5976          bne.s     vsscanf_94
0000371E  2F05      5977          move.l    D5,-(A7)
00003720  4E93      5978          jsr       (A3)
00003722  584F      5979          addq.w    #4,A7
00003724  2400      5980          move.l    D0,D2
00003726  52AE FFE4 5981          addq.l    #1,-28(A6)
0000372A  2D7C 0000 5982          move.l    #1,-32(A6)
0000372E  0001 FFE0 
00003732  387C 0001 5983          move.w    #1,A4
                    5984   vsscanf_94:
00003736  3A7C 0000 5985          move.w    #0,A5
0000373A  0C82 FFFF 5986          cmp.l     #-1,D2
0000373E  FFFF      
00003740  660E      5987          bne.s     vsscanf_96
00003742  4A84      5988          tst.l     D4
00003744  6704      5989          beq.s     vsscanf_98
00003746  2004      5990          move.l    D4,D0
00003748  6002      5991          bra.s     vsscanf_99
                    5992   vsscanf_98:
0000374A  70FF      5993          moveq     #-1,D0
                    5994   vsscanf_99:
0000374C  6000 019A 5995          bra       vsscanf_15
                    5996   vsscanf_96:
00003750  200A      5997          move.l    A2,D0
00003752  534A      5998          subq.w    #1,A2
00003754  4A80      5999          tst.l     D0
00003756  6700 0090 6000          beq       vsscanf_102
0000375A  0C83 0000 6001          cmp.l     #120,D3
0000375E  0078      
00003760  6620      6002          bne.s     vsscanf_104
00003762  2F02      6003          move.l    D2,-(A7)
00003764  6100 F8C8 6004          bsr       _toupper
00003768  584F      6005          addq.w    #4,A7
0000376A  0C80 0000 6006          cmp.l     #65,D0
0000376E  0041      
00003770  6D10      6007          blt.s     vsscanf_104
00003772  2F02      6008          move.l    D2,-(A7)
00003774  6100 F8B8 6009          bsr       _toupper
00003778  584F      6010          addq.w    #4,A7
0000377A  0C80 0000 6011          cmp.l     #70,D0
0000377E  0046      
00003780  6F14      6012          ble.s     vsscanf_103
                    6013   vsscanf_104:
00003782  2042      6014          move.l    D2,A0
00003784  43F9 0000 6015          lea       __ctype,A1
00003788  5666      
0000378A  1030 9801 6016          move.b    1(A0,A1.L),D0
0000378E  C03C 0004 6017          and.b     #4,D0
00003792  6700 0054 6018          beq       vsscanf_102
                    6019   vsscanf_103:
00003796  2042      6020          move.l    D2,A0
00003798  43F9 0000 6021          lea       __ctype,A1
0000379C  5666      
0000379E  1030 9801 6022          move.b    1(A0,A1.L),D0
000037A2  C03C 0004 6023          and.b     #4,D0
000037A6  6614      6024          bne.s     vsscanf_105
000037A8  70F9      6025          moveq     #-7,D0
000037AA  2F00      6026          move.l    D0,-(A7)
000037AC  2F02      6027          move.l    D2,-(A7)
000037AE  6100 F87E 6028          bsr       _toupper
000037B2  584F      6029          addq.w    #4,A7
000037B4  2200      6030          move.l    D0,D1
000037B6  201F      6031          move.l    (A7)+,D0
000037B8  D081      6032          add.l     D1,D0
000037BA  2400      6033          move.l    D0,D2
                    6034   vsscanf_105:
000037BC  2F0D      6035          move.l    A5,-(A7)
000037BE  2F2E FFFC 6036          move.l    -4(A6),-(A7)
000037C2  6100 0884 6037          bsr       LMUL
000037C6  2017      6038          move.l    (A7),D0
000037C8  504F      6039          addq.w    #8,A7
000037CA  D082      6040          add.l     D2,D0
000037CC  0480 0000 6041          sub.l     #48,D0
000037D0  0030      
000037D2  2A40      6042          move.l    D0,A5
000037D4  2F05      6043          move.l    D5,-(A7)
000037D6  4E93      6044          jsr       (A3)
000037D8  584F      6045          addq.w    #4,A7
000037DA  2400      6046          move.l    D0,D2
000037DC  52AE FFE4 6047          addq.l    #1,-28(A6)
000037E0  387C 0001 6048          move.w    #1,A4
000037E4  6000 FF6A 6049          bra       vsscanf_96
                    6050   vsscanf_102:
000037E8  0C82 FFFF 6051          cmp.l     #-1,D2
000037EC  FFFF      
000037EE  671A      6052          beq.s     vsscanf_107
000037F0  2F02      6053          move.l    D2,-(A7)
000037F2  2F05      6054          move.l    D5,-(A7)
000037F4  6100 F8D2 6055          bsr       @vsscanf_scanputback
000037F8  504F      6056          addq.w    #8,A7
000037FA  53AE FFE4 6057          subq.l    #1,-28(A6)
000037FE  200C      6058          move.l    A4,D0
00003800  6606      6059          bne.s     vsscanf_109
00003802  2004      6060          move.l    D4,D0
00003804  6000 00E2 6061          bra       vsscanf_15
                    6062   vsscanf_109:
00003808  6012      6063          bra.s     vsscanf_111
                    6064   vsscanf_107:
0000380A  200C      6065          move.l    A4,D0
0000380C  660E      6066          bne.s     vsscanf_111
0000380E  4A84      6067          tst.l     D4
00003810  6704      6068          beq.s     vsscanf_113
00003812  2004      6069          move.l    D4,D0
00003814  6002      6070          bra.s     vsscanf_114
                    6071   vsscanf_113:
00003816  70FF      6072          moveq     #-1,D0
                    6073   vsscanf_114:
00003818  6000 00CE 6074          bra       vsscanf_15
                    6075   vsscanf_111:
0000381C  4AAE FFE0 6076          tst.l     -32(A6)
00003820  6706      6077          beq.s     vsscanf_115
00003822  200D      6078          move.l    A5,D0
00003824  4480      6079          neg.l     D0
00003826  2A40      6080          move.l    D0,A5
                    6081   vsscanf_115:
00003828  4A86      6082          tst.l     D6
0000382A  661E      6083          bne.s     vsscanf_117
0000382C  4AAE FFE8 6084          tst.l     -24(A6)
00003830  6706      6085          beq.s     vsscanf_119
00003832  2047      6086          move.l    D7,A0
00003834  208D      6087          move.l    A5,(A0)
00003836  6010      6088          bra.s     vsscanf_122
                    6089   vsscanf_119:
00003838  4AAE FFEC 6090          tst.l     -20(A6)
0000383C  6706      6091          beq.s     vsscanf_121
0000383E  2047      6092          move.l    D7,A0
00003840  308D      6093          move.w    A5,(A0)
00003842  6004      6094          bra.s     vsscanf_122
                    6095   vsscanf_121:
00003844  2047      6096          move.l    D7,A0
00003846  208D      6097          move.l    A5,(A0)
                    6098   vsscanf_122:
00003848  5284      6099          addq.l    #1,D4
                    6100   vsscanf_117:
0000384A  0C82 FFFF 6101          cmp.l     #-1,D2
0000384E  FFFF      
00003850  660E      6102          bne.s     vsscanf_123
00003852  4A84      6103          tst.l     D4
00003854  6704      6104          beq.s     vsscanf_125
00003856  2004      6105          move.l    D4,D0
00003858  6002      6106          bra.s     vsscanf_126
                    6107   vsscanf_125:
0000385A  70FF      6108          moveq     #-1,D0
                    6109   vsscanf_126:
0000385C  6000 008A 6110          bra       vsscanf_15
                    6111   vsscanf_123:
00003860  6000 0080 6112          bra       vsscanf_139
                    6113   vsscanf_85:
00003864  0C83 0000 6114          cmp.l     #37,D3
00003868  0025      
0000386A  6600 0040 6115          bne       vsscanf_127
0000386E  2F05      6116          move.l    D5,-(A7)
00003870  4E93      6117          jsr       (A3)
00003872  584F      6118          addq.w    #4,A7
00003874  2400      6119          move.l    D0,D2
00003876  0C82 FFFF 6120          cmp.l     #-1,D2
0000387A  FFFF      
0000387C  660E      6121          bne.s     vsscanf_129
0000387E  4A84      6122          tst.l     D4
00003880  6704      6123          beq.s     vsscanf_131
00003882  2004      6124          move.l    D4,D0
00003884  6002      6125          bra.s     vsscanf_132
                    6126   vsscanf_131:
00003886  70FF      6127          moveq     #-1,D0
                    6128   vsscanf_132:
00003888  6000 005E 6129          bra       vsscanf_15
                    6130   vsscanf_129:
0000388C  52AE FFE4 6131          addq.l    #1,-28(A6)
00003890  B483      6132          cmp.l     D3,D2
00003892  6714      6133          beq.s     vsscanf_133
00003894  2F02      6134          move.l    D2,-(A7)
00003896  2F05      6135          move.l    D5,-(A7)
00003898  6100 F82E 6136          bsr       @vsscanf_scanputback
0000389C  504F      6137          addq.w    #8,A7
0000389E  53AE FFE4 6138          subq.l    #1,-28(A6)
000038A2  2004      6139          move.l    D4,D0
000038A4  6000 0042 6140          bra       vsscanf_15
                    6141   vsscanf_133:
000038A8  6000 0038 6142          bra       vsscanf_139
                    6143   vsscanf_127:
000038AC  2F05      6144          move.l    D5,-(A7)
000038AE  4E93      6145          jsr       (A3)
000038B0  584F      6146          addq.w    #4,A7
000038B2  2400      6147          move.l    D0,D2
000038B4  52AE FFE4 6148          addq.l    #1,-28(A6)
000038B8  0C82 FFFF 6149          cmp.l     #-1,D2
000038BC  FFFF      
000038BE  660C      6150          bne.s     vsscanf_135
000038C0  4A84      6151          tst.l     D4
000038C2  6704      6152          beq.s     vsscanf_137
000038C4  2004      6153          move.l    D4,D0
000038C6  6002      6154          bra.s     vsscanf_138
                    6155   vsscanf_137:
000038C8  70FF      6156          moveq     #-1,D0
                    6157   vsscanf_138:
000038CA  601C      6158          bra.s     vsscanf_15
                    6159   vsscanf_135:
000038CC  B483      6160          cmp.l     D3,D2
000038CE  6712      6161          beq.s     vsscanf_139
000038D0  2F02      6162          move.l    D2,-(A7)
000038D2  2F05      6163          move.l    D5,-(A7)
000038D4  6100 F7F2 6164          bsr       @vsscanf_scanputback
000038D8  504F      6165          addq.w    #8,A7
000038DA  53AE FFE4 6166          subq.l    #1,-28(A6)
000038DE  2004      6167          move.l    D4,D0
000038E0  6006      6168          bra.s     vsscanf_15
                    6169   vsscanf_139:
000038E2  6000 FA44 6170          bra       vsscanf_3
                    6171   vsscanf_5:
000038E6  2004      6172          move.l    D4,D0
                    6173   vsscanf_15:
000038E8  4CDF 3CFC 6174          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000038EC  4E5E      6175          unlk      A6
000038EE  4E75      6176          rts
                    6177   _printf:
000038F0  4E56 FFFC 6178          link      A6,#-4
000038F4  48E7 2000 6179          movem.l   D2,-(A7)
000038F8  41EE 0008 6180          lea       8(A6),A0
000038FC  5848      6181          addq.w    #4,A0
000038FE  2408      6182          move.l    A0,D2
00003900  2F02      6183          move.l    D2,-(A7)
00003902  2F2E 0008 6184          move.l    8(A6),-(A7)
00003906  42A7      6185          clr.l     -(A7)
00003908  6100 00CA 6186          bsr       _vsprintf
0000390C  DEFC 000C 6187          add.w     #12,A7
00003910  2D40 FFFC 6188          move.l    D0,-4(A6)
00003914  4282      6189          clr.l     D2
00003916  202E FFFC 6190          move.l    -4(A6),D0
0000391A  4CDF 0004 6191          movem.l   (A7)+,D2
0000391E  4E5E      6192          unlk      A6
00003920  4E75      6193          rts
                    6194   @vsprintf_copy:
00003922  4E56 0000 6195          link      A6,#0
00003926  206E 0008 6196          move.l    8(A6),A0
0000392A  4A90      6197          tst.l     (A0)
0000392C  6710      6198          beq.s     @vsprintf_copy_1
0000392E  202E 000C 6199          move.l    12(A6),D0
00003932  206E 0008 6200          move.l    8(A6),A0
00003936  2250      6201          move.l    (A0),A1
00003938  5290      6202          addq.l    #1,(A0)
0000393A  1280      6203          move.b    D0,(A1)
0000393C  600A      6204          bra.s     @vsprintf_copy_2
                    6205   @vsprintf_copy_1:
0000393E  2F2E 000C 6206          move.l    12(A6),-(A7)
00003942  6100 F5F0 6207          bsr       _putch
00003946  584F      6208          addq.w    #4,A7
                    6209   @vsprintf_copy_2:
00003948  4E5E      6210          unlk      A6
0000394A  4E75      6211          rts
                    6212   @vsprintf_getval:
0000394C  4E56 0000 6213          link      A6,#0
00003950  48E7 3000 6214          movem.l   D2/D3,-(A7)
00003954  242E 0008 6215          move.l    8(A6),D2
00003958  4283      6216          clr.l     D3
0000395A  2042      6217          move.l    D2,A0
0000395C  2050      6218          move.l    (A0),A0
0000395E  1010      6219          move.b    (A0),D0
00003960  4880      6220          ext.w     D0
00003962  48C0      6221          ext.l     D0
00003964  0C80 0000 6222          cmp.l     #42,D0
00003968  002A      
0000396A  6612      6223          bne.s     @vsprintf_getval_1
0000396C  206E 000C 6224          move.l    12(A6),A0
00003970  2250      6225          move.l    (A0),A1
00003972  5890      6226          addq.l    #4,(A0)
00003974  2611      6227          move.l    (A1),D3
00003976  2042      6228          move.l    D2,A0
00003978  5290      6229          addq.l    #1,(A0)
0000397A  6000 004E 6230          bra       @vsprintf_getval_5
                    6231   @vsprintf_getval_1:
0000397E  2042      6232          move.l    D2,A0
00003980  2050      6233          move.l    (A0),A0
00003982  1010      6234          move.b    (A0),D0
00003984  4880      6235          ext.w     D0
00003986  48C0      6236          ext.l     D0
00003988  0C80 0000 6237          cmp.l     #48,D0
0000398C  0030      
0000398E  6D00 003A 6238          blt       @vsprintf_getval_5
00003992  2042      6239          move.l    D2,A0
00003994  2050      6240          move.l    (A0),A0
00003996  1010      6241          move.b    (A0),D0
00003998  4880      6242          ext.w     D0
0000399A  48C0      6243          ext.l     D0
0000399C  0C80 0000 6244          cmp.l     #57,D0
000039A0  0039      
000039A2  6E26      6245          bgt.s     @vsprintf_getval_5
000039A4  2F03      6246          move.l    D3,-(A7)
000039A6  4878 000A 6247          pea       10
000039AA  6100 069C 6248          bsr       LMUL
000039AE  2017      6249          move.l    (A7),D0
000039B0  504F      6250          addq.w    #8,A7
000039B2  2042      6251          move.l    D2,A0
000039B4  2250      6252          move.l    (A0),A1
000039B6  5290      6253          addq.l    #1,(A0)
000039B8  1211      6254          move.b    (A1),D1
000039BA  4881      6255          ext.w     D1
000039BC  48C1      6256          ext.l     D1
000039BE  D081      6257          add.l     D1,D0
000039C0  0480 0000 6258          sub.l     #48,D0
000039C4  0030      
000039C6  2600      6259          move.l    D0,D3
000039C8  60B4      6260          bra       @vsprintf_getval_1
                    6261   @vsprintf_getval_5:
000039CA  2003      6262          move.l    D3,D0
000039CC  4CDF 000C 6263          movem.l   (A7)+,D2/D3
000039D0  4E5E      6264          unlk      A6
000039D2  4E75      6265          rts
                    6266   _vsprintf:
000039D4  4E56 FFCC 6267          link      A6,#-52
000039D8  48E7 3F3C 6268          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000039DC  45EE 0008 6269          lea       8(A6),A2
000039E0  47F8 3922 6270          lea       @vsprintf_copy,A3
000039E4  49F9 0000 6271          lea       _ultoa,A4
000039E8  4252      
000039EA  4286      6272          clr.l     D6
                    6273   vsprintf_1:
000039EC  206E 000C 6274          move.l    12(A6),A0
000039F0  4A10      6275          tst.b     (A0)
000039F2  6700 0624 6276          beq       vsprintf_3
000039F6  206E 000C 6277          move.l    12(A6),A0
000039FA  1010      6278          move.b    (A0),D0
000039FC  4880      6279          ext.w     D0
000039FE  48C0      6280          ext.l     D0
00003A00  0C80 0000 6281          cmp.l     #37,D0
00003A04  0025      
00003A06  671C      6282          beq.s     vsprintf_4
00003A08  206E 000C 6283          move.l    12(A6),A0
00003A0C  52AE 000C 6284          addq.l    #1,12(A6)
00003A10  1210      6285          move.b    (A0),D1
00003A12  4881      6286          ext.w     D1
00003A14  48C1      6287          ext.l     D1
00003A16  2F01      6288          move.l    D1,-(A7)
00003A18  2F0A      6289          move.l    A2,-(A7)
00003A1A  4E93      6290          jsr       (A3)
00003A1C  504F      6291          addq.w    #8,A7
00003A1E  5286      6292          addq.l    #1,D6
00003A20  6000 05F2 6293          bra       vsprintf_2
                    6294   vsprintf_4:
00003A24  52AE 000C 6295          addq.l    #1,12(A6)
00003A28  422E FFD3 6296          clr.b     -45(A6)
00003A2C  422E FFD2 6297          clr.b     -46(A6)
00003A30  422E FFD0 6298          clr.b     -48(A6)
00003A34  422E FFCF 6299          clr.b     -49(A6)
00003A38  422E FFCE 6300          clr.b     -50(A6)
00003A3C  422E FFCD 6301          clr.b     -51(A6)
00003A40  42AE FFFC 6302          clr.l     -4(A6)
00003A44  7AFF      6303          moveq     #-1,D5
00003A46  41EE FFDC 6304          lea       -36(A6),A0
00003A4A  2608      6305          move.l    A0,D3
00003A4C  2408      6306          move.l    A0,D2
                    6307   vsprintf_6:
00003A4E  206E 000C 6308          move.l    12(A6),A0
00003A52  1010      6309          move.b    (A0),D0
00003A54  4880      6310          ext.w     D0
00003A56  48C0      6311          ext.l     D0
00003A58  0C80 0000 6312          cmp.l     #43,D0
00003A5C  002B      
00003A5E  6730      6313          beq.s     vsprintf_12
00003A60  6E18      6314          bgt.s     vsprintf_15
00003A62  0C80 0000 6315          cmp.l     #35,D0
00003A66  0023      
00003A68  6700 003E 6316          beq       vsprintf_14
00003A6C  6E00 0046 6317          bgt       vsprintf_9
00003A70  0C80 0000 6318          cmp.l     #32,D0
00003A74  0020      
00003A76  6724      6319          beq.s     vsprintf_13
00003A78  603A      6320          bra.s     vsprintf_9
                    6321   vsprintf_15:
00003A7A  0C80 0000 6322          cmp.l     #45,D0
00003A7E  002D      
00003A80  6702      6323          beq.s     vsprintf_11
00003A82  6030      6324          bra.s     vsprintf_9
                    6325   vsprintf_11:
00003A84  1D7C 0001 6326          move.b    #1,-51(A6)
00003A88  FFCD      
00003A8A  52AE 000C 6327          addq.l    #1,12(A6)
00003A8E  6026      6328          bra.s     vsprintf_7
                    6329   vsprintf_12:
00003A90  1D7C 0001 6330          move.b    #1,-50(A6)
00003A94  FFCE      
00003A96  52AE 000C 6331          addq.l    #1,12(A6)
00003A9A  601A      6332          bra.s     vsprintf_7
                    6333   vsprintf_13:
00003A9C  1D7C 0001 6334          move.b    #1,-49(A6)
00003AA0  FFCF      
00003AA2  52AE 000C 6335          addq.l    #1,12(A6)
00003AA6  600E      6336          bra.s     vsprintf_7
                    6337   vsprintf_14:
00003AA8  1D7C 0001 6338          move.b    #1,-48(A6)
00003AAC  FFD0      
00003AAE  52AE 000C 6339          addq.l    #1,12(A6)
00003AB2  6002      6340          bra.s     vsprintf_7
                    6341   vsprintf_9:
00003AB4  6002      6342          bra.s     vsprintf_8
                    6343   vsprintf_7:
00003AB6  6096      6344          bra       vsprintf_6
                    6345   vsprintf_8:
00003AB8  206E 000C 6346          move.l    12(A6),A0
00003ABC  1010      6347          move.b    (A0),D0
00003ABE  4880      6348          ext.w     D0
00003AC0  48C0      6349          ext.l     D0
00003AC2  0C80 0000 6350          cmp.l     #48,D0
00003AC6  0030      
00003AC8  660A      6351          bne.s     vsprintf_16
00003ACA  52AE 000C 6352          addq.l    #1,12(A6)
00003ACE  1D7C 0001 6353          move.b    #1,-46(A6)
00003AD2  FFD2      
                    6354   vsprintf_16:
00003AD4  486E 0010 6355          pea       16(A6)
00003AD8  486E 000C 6356          pea       12(A6)
00003ADC  6100 FE6E 6357          bsr       @vsprintf_getval
00003AE0  504F      6358          addq.w    #8,A7
00003AE2  2A40      6359          move.l    D0,A5
00003AE4  206E 000C 6360          move.l    12(A6),A0
00003AE8  1010      6361          move.b    (A0),D0
00003AEA  4880      6362          ext.w     D0
00003AEC  48C0      6363          ext.l     D0
00003AEE  0C80 0000 6364          cmp.l     #46,D0
00003AF2  002E      
00003AF4  6614      6365          bne.s     vsprintf_18
00003AF6  52AE 000C 6366          addq.l    #1,12(A6)
00003AFA  486E 0010 6367          pea       16(A6)
00003AFE  486E 000C 6368          pea       12(A6)
00003B02  6100 FE48 6369          bsr       @vsprintf_getval
00003B06  504F      6370          addq.w    #8,A7
00003B08  2A00      6371          move.l    D0,D5
                    6372   vsprintf_18:
00003B0A  206E 000C 6373          move.l    12(A6),A0
00003B0E  1010      6374          move.b    (A0),D0
00003B10  4880      6375          ext.w     D0
00003B12  48C0      6376          ext.l     D0
00003B14  0C80 0000 6377          cmp.l     #108,D0
00003B18  006C      
00003B1A  660A      6378          bne.s     vsprintf_20
00003B1C  52AE 000C 6379          addq.l    #1,12(A6)
00003B20  1D7C 0001 6380          move.b    #1,-45(A6)
00003B24  FFD3      
                    6381   vsprintf_20:
00003B26  206E 000C 6382          move.l    12(A6),A0
00003B2A  1010      6383          move.b    (A0),D0
00003B2C  4880      6384          ext.w     D0
00003B2E  48C0      6385          ext.l     D0
00003B30  0C80 0000 6386          cmp.l     #111,D0
00003B34  006F      
00003B36  6700 00D4 6387          beq       vsprintf_27
00003B3A  6E34      6388          bgt.s     vsprintf_33
00003B3C  0C80 0000 6389          cmp.l     #100,D0
00003B40  0064      
00003B42  6700 0054 6390          beq       vsprintf_24
00003B46  6E1C      6391          bgt.s     vsprintf_34
00003B48  0C80 0000 6392          cmp.l     #99,D0
00003B4C  0063      
00003B4E  6700 012C 6393          beq       vsprintf_30
00003B52  6E00 016A 6394          bgt       vsprintf_22
00003B56  0C80 0000 6395          cmp.l     #88,D0
00003B5A  0058      
00003B5C  6700 00E6 6396          beq       vsprintf_28
00003B60  6000 015C 6397          bra       vsprintf_22
                    6398   vsprintf_34:
00003B64  0C80 0000 6399          cmp.l     #105,D0
00003B68  0069      
00003B6A  672C      6400          beq.s     vsprintf_24
00003B6C  6000 0150 6401          bra       vsprintf_22
                    6402   vsprintf_33:
00003B70  0C80 0000 6403          cmp.l     #117,D0
00003B74  0075      
00003B76  6700 005C 6404          beq       vsprintf_26
00003B7A  6E0E      6405          bgt.s     vsprintf_35
00003B7C  0C80 0000 6406          cmp.l     #115,D0
00003B80  0073      
00003B82  6700 011C 6407          beq       vsprintf_31
00003B86  6000 0136 6408          bra       vsprintf_22
                    6409   vsprintf_35:
00003B8A  0C80 0000 6410          cmp.l     #120,D0
00003B8E  0078      
00003B90  6700 00B2 6411          beq       vsprintf_28
00003B94  6000 0128 6412          bra       vsprintf_22
                    6413   vsprintf_24:
00003B98  4A2E FFD3 6414          tst.b     -45(A6)
00003B9C  671A      6415          beq.s     vsprintf_36
00003B9E  4878 000A 6416          pea       10
00003BA2  2F03      6417          move.l    D3,-(A7)
00003BA4  206E 0010 6418          move.l    16(A6),A0
00003BA8  58AE 0010 6419          addq.l    #4,16(A6)
00003BAC  2F10      6420          move.l    (A0),-(A7)
00003BAE  6100 061E 6421          bsr       _ltoa
00003BB2  DEFC 000C 6422          add.w     #12,A7
00003BB6  6018      6423          bra.s     vsprintf_37
                    6424   vsprintf_36:
00003BB8  4878 000A 6425          pea       10
00003BBC  2F03      6426          move.l    D3,-(A7)
00003BBE  206E 0010 6427          move.l    16(A6),A0
00003BC2  58AE 0010 6428          addq.l    #4,16(A6)
00003BC6  2F10      6429          move.l    (A0),-(A7)
00003BC8  6100 0604 6430          bsr       _ltoa
00003BCC  DEFC 000C 6431          add.w     #12,A7
                    6432   vsprintf_37:
00003BD0  6000 00FA 6433          bra       vsprintf_23
                    6434   vsprintf_26:
00003BD4  4A2E FFD3 6435          tst.b     -45(A6)
00003BD8  6718      6436          beq.s     vsprintf_38
00003BDA  4878 000A 6437          pea       10
00003BDE  2F03      6438          move.l    D3,-(A7)
00003BE0  206E 0010 6439          move.l    16(A6),A0
00003BE4  58AE 0010 6440          addq.l    #4,16(A6)
00003BE8  2F10      6441          move.l    (A0),-(A7)
00003BEA  4E94      6442          jsr       (A4)
00003BEC  DEFC 000C 6443          add.w     #12,A7
00003BF0  6016      6444          bra.s     vsprintf_39
                    6445   vsprintf_38:
00003BF2  4878 000A 6446          pea       10
00003BF6  2F03      6447          move.l    D3,-(A7)
00003BF8  206E 0010 6448          move.l    16(A6),A0
00003BFC  58AE 0010 6449          addq.l    #4,16(A6)
00003C00  2F10      6450          move.l    (A0),-(A7)
00003C02  4E94      6451          jsr       (A4)
00003C04  DEFC 000C 6452          add.w     #12,A7
                    6453   vsprintf_39:
00003C08  6000 00C2 6454          bra       vsprintf_23
                    6455   vsprintf_27:
00003C0C  4A2E FFD3 6456          tst.b     -45(A6)
00003C10  6718      6457          beq.s     vsprintf_40
00003C12  4878 0008 6458          pea       8
00003C16  2F03      6459          move.l    D3,-(A7)
00003C18  206E 0010 6460          move.l    16(A6),A0
00003C1C  58AE 0010 6461          addq.l    #4,16(A6)
00003C20  2F10      6462          move.l    (A0),-(A7)
00003C22  4E94      6463          jsr       (A4)
00003C24  DEFC 000C 6464          add.w     #12,A7
00003C28  6016      6465          bra.s     vsprintf_41
                    6466   vsprintf_40:
00003C2A  4878 0008 6467          pea       8
00003C2E  2F03      6468          move.l    D3,-(A7)
00003C30  206E 0010 6469          move.l    16(A6),A0
00003C34  58AE 0010 6470          addq.l    #4,16(A6)
00003C38  2F10      6471          move.l    (A0),-(A7)
00003C3A  4E94      6472          jsr       (A4)
00003C3C  DEFC 000C 6473          add.w     #12,A7
                    6474   vsprintf_41:
00003C40  6000 008A 6475          bra       vsprintf_23
                    6476   vsprintf_28:
00003C44  4A2E FFD3 6477          tst.b     -45(A6)
00003C48  6718      6478          beq.s     vsprintf_42
00003C4A  4878 0010 6479          pea       16
00003C4E  2F03      6480          move.l    D3,-(A7)
00003C50  206E 0010 6481          move.l    16(A6),A0
00003C54  58AE 0010 6482          addq.l    #4,16(A6)
00003C58  2F10      6483          move.l    (A0),-(A7)
00003C5A  4E94      6484          jsr       (A4)
00003C5C  DEFC 000C 6485          add.w     #12,A7
00003C60  6016      6486          bra.s     vsprintf_43
                    6487   vsprintf_42:
00003C62  4878 0010 6488          pea       16
00003C66  2F03      6489          move.l    D3,-(A7)
00003C68  206E 0010 6490          move.l    16(A6),A0
00003C6C  58AE 0010 6491          addq.l    #4,16(A6)
00003C70  2F10      6492          move.l    (A0),-(A7)
00003C72  4E94      6493          jsr       (A4)
00003C74  DEFC 000C 6494          add.w     #12,A7
                    6495   vsprintf_43:
00003C78  6000 0052 6496          bra       vsprintf_23
                    6497   vsprintf_30:
00003C7C  206E 0010 6498          move.l    16(A6),A0
00003C80  58AE 0010 6499          addq.l    #4,16(A6)
00003C84  2010      6500          move.l    (A0),D0
00003C86  2042      6501          move.l    D2,A0
00003C88  5282      6502          addq.l    #1,D2
00003C8A  1080      6503          move.b    D0,(A0)
00003C8C  2042      6504          move.l    D2,A0
00003C8E  4210      6505          clr.b     (A0)
00003C90  200D      6506          move.l    A5,D0
00003C92  6704      6507          beq.s     vsprintf_44
00003C94  200D      6508          move.l    A5,D0
00003C96  6002      6509          bra.s     vsprintf_45
                    6510   vsprintf_44:
00003C98  7001      6511          moveq     #1,D0
                    6512   vsprintf_45:
00003C9A  2A00      6513          move.l    D0,D5
00003C9C  6000 002E 6514          bra       vsprintf_23
                    6515   vsprintf_31:
00003CA0  206E 0010 6516          move.l    16(A6),A0
00003CA4  58AE 0010 6517          addq.l    #4,16(A6)
00003CA8  2610      6518          move.l    (A0),D3
00003CAA  0C85 FFFF 6519          cmp.l     #-1,D5
00003CAE  FFFF      
00003CB0  660A      6520          bne.s     vsprintf_46
00003CB2  2F03      6521          move.l    D3,-(A7)
00003CB4  6100 05FE 6522          bsr       _strlen
00003CB8  584F      6523          addq.w    #4,A7
00003CBA  2A00      6524          move.l    D0,D5
                    6525   vsprintf_46:
00003CBC  600E      6526          bra.s     vsprintf_23
                    6527   vsprintf_22:
00003CBE  206E 000C 6528          move.l    12(A6),A0
00003CC2  2242      6529          move.l    D2,A1
00003CC4  5282      6530          addq.l    #1,D2
00003CC6  1290      6531          move.b    (A0),(A1)
00003CC8  2042      6532          move.l    D2,A0
00003CCA  4210      6533          clr.b     (A0)
                    6534   vsprintf_23:
00003CCC  2F03      6535          move.l    D3,-(A7)
00003CCE  6100 05E4 6536          bsr       _strlen
00003CD2  584F      6537          addq.w    #4,A7
00003CD4  1800      6538          move.b    D0,D4
00003CD6  206E 000C 6539          move.l    12(A6),A0
00003CDA  1010      6540          move.b    (A0),D0
00003CDC  4880      6541          ext.w     D0
00003CDE  48C0      6542          ext.l     D0
00003CE0  0C80 0000 6543          cmp.l     #115,D0
00003CE4  0073      
00003CE6  6618      6544          bne.s     vsprintf_48
00003CE8  0C85 0000 6545          cmp.l     #0,D5
00003CEC  0000      
00003CEE  6D10      6546          blt.s     vsprintf_48
00003CF0  4884      6547          ext.w     D4
00003CF2  48C4      6548          ext.l     D4
00003CF4  B885      6549          cmp.l     D5,D4
00003CF6  6F04      6550          ble.s     vsprintf_50
00003CF8  1005      6551          move.b    D5,D0
00003CFA  6002      6552          bra.s     vsprintf_51
                    6553   vsprintf_50:
00003CFC  1004      6554          move.b    D4,D0
                    6555   vsprintf_51:
00003CFE  1800      6556          move.b    D0,D4
                    6557   vsprintf_48:
00003D00  206E 000C 6558          move.l    12(A6),A0
00003D04  1010      6559          move.b    (A0),D0
00003D06  4880      6560          ext.w     D0
00003D08  48C0      6561          ext.l     D0
00003D0A  0C80 0000 6562          cmp.l     #88,D0
00003D0E  0058      
00003D10  6600 0026 6563          bne       vsprintf_56
00003D14  41EE FFDC 6564          lea       -36(A6),A0
00003D18  2408      6565          move.l    A0,D2
                    6566   vsprintf_54:
00003D1A  2042      6567          move.l    D2,A0
00003D1C  4A10      6568          tst.b     (A0)
00003D1E  6718      6569          beq.s     vsprintf_56
00003D20  2042      6570          move.l    D2,A0
00003D22  1210      6571          move.b    (A0),D1
00003D24  4881      6572          ext.w     D1
00003D26  48C1      6573          ext.l     D1
00003D28  2F01      6574          move.l    D1,-(A7)
00003D2A  6100 F302 6575          bsr       _toupper
00003D2E  584F      6576          addq.w    #4,A7
00003D30  2042      6577          move.l    D2,A0
00003D32  1080      6578          move.b    D0,(A0)
00003D34  5282      6579          addq.l    #1,D2
00003D36  60E2      6580          bra       vsprintf_54
                    6581   vsprintf_56:
00003D38  7E00      6582          moveq     #0,D7
00003D3A  41EE FFD4 6583          lea       -44(A6),A0
00003D3E  2408      6584          move.l    A0,D2
00003D40  206E 000C 6585          move.l    12(A6),A0
00003D44  1010      6586          move.b    (A0),D0
00003D46  4880      6587          ext.w     D0
00003D48  48C0      6588          ext.l     D0
00003D4A  0C80 0000 6589          cmp.l     #100,D0
00003D4E  0064      
00003D50  6714      6590          beq.s     vsprintf_59
00003D52  206E 000C 6591          move.l    12(A6),A0
00003D56  1010      6592          move.b    (A0),D0
00003D58  4880      6593          ext.w     D0
00003D5A  48C0      6594          ext.l     D0
00003D5C  0C80 0000 6595          cmp.l     #105,D0
00003D60  0069      
00003D62  6600 0076 6596          bne       vsprintf_65
                    6597   vsprintf_59:
00003D66  4A2E FFCE 6598          tst.b     -50(A6)
00003D6A  6612      6599          bne.s     vsprintf_62
00003D6C  2043      6600          move.l    D3,A0
00003D6E  1010      6601          move.b    (A0),D0
00003D70  4880      6602          ext.w     D0
00003D72  48C0      6603          ext.l     D0
00003D74  0C80 0000 6604          cmp.l     #45,D0
00003D78  002D      
00003D7A  6600 002E 6605          bne       vsprintf_60
                    6606   vsprintf_62:
00003D7E  2043      6607          move.l    D3,A0
00003D80  1010      6608          move.b    (A0),D0
00003D82  4880      6609          ext.w     D0
00003D84  48C0      6610          ext.l     D0
00003D86  0C80 0000 6611          cmp.l     #45,D0
00003D8A  002D      
00003D8C  660E      6612          bne.s     vsprintf_63
00003D8E  2043      6613          move.l    D3,A0
00003D90  5283      6614          addq.l    #1,D3
00003D92  2242      6615          move.l    D2,A1
00003D94  5282      6616          addq.l    #1,D2
00003D96  1290      6617          move.b    (A0),(A1)
00003D98  5304      6618          subq.b    #1,D4
00003D9A  6008      6619          bra.s     vsprintf_64
                    6620   vsprintf_63:
00003D9C  2042      6621          move.l    D2,A0
00003D9E  5282      6622          addq.l    #1,D2
00003DA0  10BC 002B 6623          move.b    #43,(A0)
                    6624   vsprintf_64:
00003DA4  5287      6625          addq.l    #1,D7
00003DA6  6000 0032 6626          bra       vsprintf_65
                    6627   vsprintf_60:
00003DAA  4A2E FFCF 6628          tst.b     -49(A6)
00003DAE  6700 002A 6629          beq       vsprintf_65
00003DB2  2043      6630          move.l    D3,A0
00003DB4  1010      6631          move.b    (A0),D0
00003DB6  4880      6632          ext.w     D0
00003DB8  48C0      6633          ext.l     D0
00003DBA  0C80 0000 6634          cmp.l     #45,D0
00003DBE  002D      
00003DC0  660E      6635          bne.s     vsprintf_67
00003DC2  2043      6636          move.l    D3,A0
00003DC4  5283      6637          addq.l    #1,D3
00003DC6  2242      6638          move.l    D2,A1
00003DC8  5282      6639          addq.l    #1,D2
00003DCA  1290      6640          move.b    (A0),(A1)
00003DCC  5304      6641          subq.b    #1,D4
00003DCE  6008      6642          bra.s     vsprintf_68
                    6643   vsprintf_67:
00003DD0  2042      6644          move.l    D2,A0
00003DD2  5282      6645          addq.l    #1,D2
00003DD4  10BC 0020 6646          move.b    #32,(A0)
                    6647   vsprintf_68:
00003DD8  5287      6648          addq.l    #1,D7
                    6649   vsprintf_65:
00003DDA  4A2E FFD0 6650          tst.b     -48(A6)
00003DDE  6700 0066 6651          beq       vsprintf_77
00003DE2  206E 000C 6652          move.l    12(A6),A0
00003DE6  1010      6653          move.b    (A0),D0
00003DE8  4880      6654          ext.w     D0
00003DEA  48C0      6655          ext.l     D0
00003DEC  0C80 0000 6656          cmp.l     #111,D0
00003DF0  006F      
00003DF2  671A      6657          beq.s     vsprintf_73
00003DF4  6E0C      6658          bgt.s     vsprintf_76
00003DF6  0C80 0000 6659          cmp.l     #88,D0
00003DFA  0058      
00003DFC  6710      6660          beq.s     vsprintf_73
00003DFE  6000 0046 6661          bra       vsprintf_77
                    6662   vsprintf_76:
00003E02  0C80 0000 6663          cmp.l     #120,D0
00003E06  0078      
00003E08  6704      6664          beq.s     vsprintf_73
00003E0A  6000 003A 6665          bra       vsprintf_77
                    6666   vsprintf_73:
00003E0E  2042      6667          move.l    D2,A0
00003E10  5282      6668          addq.l    #1,D2
00003E12  10BC 0030 6669          move.b    #48,(A0)
00003E16  5287      6670          addq.l    #1,D7
00003E18  206E 000C 6671          move.l    12(A6),A0
00003E1C  1010      6672          move.b    (A0),D0
00003E1E  4880      6673          ext.w     D0
00003E20  48C0      6674          ext.l     D0
00003E22  0C80 0000 6675          cmp.l     #120,D0
00003E26  0078      
00003E28  6712      6676          beq.s     vsprintf_79
00003E2A  206E 000C 6677          move.l    12(A6),A0
00003E2E  1010      6678          move.b    (A0),D0
00003E30  4880      6679          ext.w     D0
00003E32  48C0      6680          ext.l     D0
00003E34  0C80 0000 6681          cmp.l     #88,D0
00003E38  0058      
00003E3A  660A      6682          bne.s     vsprintf_77
                    6683   vsprintf_79:
00003E3C  2042      6684          move.l    D2,A0
00003E3E  5282      6685          addq.l    #1,D2
00003E40  10BC 0078 6686          move.b    #120,(A0)
00003E44  5287      6687          addq.l    #1,D7
                    6688   vsprintf_77:
00003E46  2042      6689          move.l    D2,A0
00003E48  4210      6690          clr.b     (A0)
00003E4A  206E 000C 6691          move.l    12(A6),A0
00003E4E  1010      6692          move.b    (A0),D0
00003E50  4880      6693          ext.w     D0
00003E52  48C0      6694          ext.l     D0
00003E54  0C80 0000 6695          cmp.l     #105,D0
00003E58  0069      
00003E5A  6700 0076 6696          beq       vsprintf_82
00003E5E  6E42      6697          bgt.s     vsprintf_93
00003E60  0C80 0000 6698          cmp.l     #99,D0
00003E64  0063      
00003E66  6700 0084 6699          beq       vsprintf_96
00003E6A  6E1C      6700          bgt.s     vsprintf_94
00003E6C  0C80 0000 6701          cmp.l     #88,D0
00003E70  0058      
00003E72  6700 005E 6702          beq       vsprintf_82
00003E76  6E00 0184 6703          bgt       vsprintf_80
00003E7A  0C80 0000 6704          cmp.l     #69,D0
00003E7E  0045      
00003E80  6700 0050 6705          beq       vsprintf_82
00003E84  6000 0176 6706          bra       vsprintf_80
                    6707   vsprintf_94:
00003E88  0C80 0000 6708          cmp.l     #101,D0
00003E8C  0065      
00003E8E  6700 0042 6709          beq       vsprintf_82
00003E92  6E00 0168 6710          bgt       vsprintf_80
00003E96  0C80 0000 6711          cmp.l     #100,D0
00003E9A  0064      
00003E9C  6734      6712          beq.s     vsprintf_82
00003E9E  6000 015C 6713          bra       vsprintf_80
                    6714   vsprintf_93:
00003EA2  0C80 0000 6715          cmp.l     #117,D0
00003EA6  0075      
00003EA8  6728      6716          beq.s     vsprintf_82
00003EAA  6E1A      6717          bgt.s     vsprintf_95
00003EAC  0C80 0000 6718          cmp.l     #115,D0
00003EB0  0073      
00003EB2  6700 0038 6719          beq       vsprintf_96
00003EB6  6E00 0144 6720          bgt       vsprintf_80
00003EBA  0C80 0000 6721          cmp.l     #111,D0
00003EBE  006F      
00003EC0  6710      6722          beq.s     vsprintf_82
00003EC2  6000 0138 6723          bra       vsprintf_80
                    6724   vsprintf_95:
00003EC6  0C80 0000 6725          cmp.l     #120,D0
00003ECA  0078      
00003ECC  6704      6726          beq.s     vsprintf_82
00003ECE  6000 012C 6727          bra       vsprintf_80
                    6728   vsprintf_82:
00003ED2  4A2E FFD2 6729          tst.b     -46(A6)
00003ED6  6714      6730          beq.s     vsprintf_96
00003ED8  4A2E FFCD 6731          tst.b     -51(A6)
00003EDC  660E      6732          bne.s     vsprintf_96
00003EDE  200D      6733          move.l    A5,D0
00003EE0  9087      6734          sub.l     D7,D0
00003EE2  4884      6735          ext.w     D4
00003EE4  48C4      6736          ext.l     D4
00003EE6  9084      6737          sub.l     D4,D0
00003EE8  2D40 FFFC 6738          move.l    D0,-4(A6)
                    6739   vsprintf_96:
00003EEC  202E FFFC 6740          move.l    -4(A6),D0
00003EF0  0C80 0000 6741          cmp.l     #0,D0
00003EF4  0000      
00003EF6  6C04      6742          bge.s     vsprintf_98
00003EF8  42AE FFFC 6743          clr.l     -4(A6)
                    6744   vsprintf_98:
00003EFC  4A2E FFCD 6745          tst.b     -51(A6)
00003F00  6600 0030 6746          bne       vsprintf_104
00003F04  4884      6747          ext.w     D4
00003F06  48C4      6748          ext.l     D4
00003F08  2004      6749          move.l    D4,D0
00003F0A  D0AE FFFC 6750          add.l     -4(A6),D0
00003F0E  D087      6751          add.l     D7,D0
00003F10  1D40 FFD1 6752          move.b    D0,-47(A6)
                    6753   vsprintf_102:
00003F14  102E FFD1 6754          move.b    -47(A6),D0
00003F18  4880      6755          ext.w     D0
00003F1A  48C0      6756          ext.l     D0
00003F1C  220D      6757          move.l    A5,D1
00003F1E  534D      6758          subq.w    #1,A5
00003F20  B081      6759          cmp.l     D1,D0
00003F22  6C0E      6760          bge.s     vsprintf_104
00003F24  4878 0020 6761          pea       32
00003F28  2F0A      6762          move.l    A2,-(A7)
00003F2A  4E93      6763          jsr       (A3)
00003F2C  504F      6764          addq.w    #8,A7
00003F2E  5286      6765          addq.l    #1,D6
00003F30  60E2      6766          bra       vsprintf_102
                    6767   vsprintf_104:
00003F32  41EE FFD4 6768          lea       -44(A6),A0
00003F36  2408      6769          move.l    A0,D2
                    6770   vsprintf_105:
00003F38  2042      6771          move.l    D2,A0
00003F3A  4A10      6772          tst.b     (A0)
00003F3C  6716      6773          beq.s     vsprintf_107
00003F3E  2042      6774          move.l    D2,A0
00003F40  5282      6775          addq.l    #1,D2
00003F42  1210      6776          move.b    (A0),D1
00003F44  4881      6777          ext.w     D1
00003F46  48C1      6778          ext.l     D1
00003F48  2F01      6779          move.l    D1,-(A7)
00003F4A  2F0A      6780          move.l    A2,-(A7)
00003F4C  4E93      6781          jsr       (A3)
00003F4E  504F      6782          addq.w    #8,A7
00003F50  5286      6783          addq.l    #1,D6
00003F52  60E4      6784          bra       vsprintf_105
                    6785   vsprintf_107:
00003F54  202E FFFC 6786          move.l    -4(A6),D0
00003F58  1D40 FFD1 6787          move.b    D0,-47(A6)
                    6788   vsprintf_108:
00003F5C  102E FFD1 6789          move.b    -47(A6),D0
00003F60  532E FFD1 6790          subq.b    #1,-47(A6)
00003F64  4A00      6791          tst.b     D0
00003F66  670E      6792          beq.s     vsprintf_110
00003F68  4878 0030 6793          pea       48
00003F6C  2F0A      6794          move.l    A2,-(A7)
00003F6E  4E93      6795          jsr       (A3)
00003F70  504F      6796          addq.w    #8,A7
00003F72  5286      6797          addq.l    #1,D6
00003F74  60E6      6798          bra       vsprintf_108
                    6799   vsprintf_110:
00003F76  2043      6800          move.l    D3,A0
00003F78  4A10      6801          tst.b     (A0)
00003F7A  6700 0048 6802          beq       vsprintf_113
00003F7E  206E 000C 6803          move.l    12(A6),A0
00003F82  1010      6804          move.b    (A0),D0
00003F84  4880      6805          ext.w     D0
00003F86  48C0      6806          ext.l     D0
00003F88  0C80 0000 6807          cmp.l     #115,D0
00003F8C  0073      
00003F8E  670C      6808          beq.s     vsprintf_116
00003F90  6E18      6809          bgt.s     vsprintf_119
00003F92  0C80 0000 6810          cmp.l     #99,D0
00003F96  0063      
00003F98  6702      6811          beq.s     vsprintf_116
00003F9A  600E      6812          bra.s     vsprintf_119
                    6813   vsprintf_116:
00003F9C  2005      6814          move.l    D5,D0
00003F9E  5385      6815          subq.l    #1,D5
00003FA0  0C80 0000 6816          cmp.l     #0,D0
00003FA4  0000      
00003FA6  6E02      6817          bgt.s     vsprintf_119
00003FA8  6016      6818          bra.s     vsprintf_115
                    6819   vsprintf_119:
00003FAA  2043      6820          move.l    D3,A0
00003FAC  5283      6821          addq.l    #1,D3
00003FAE  1210      6822          move.b    (A0),D1
00003FB0  4881      6823          ext.w     D1
00003FB2  48C1      6824          ext.l     D1
00003FB4  2F01      6825          move.l    D1,-(A7)
00003FB6  2F0A      6826          move.l    A2,-(A7)
00003FB8  4E93      6827          jsr       (A3)
00003FBA  504F      6828          addq.w    #8,A7
00003FBC  5286      6829          addq.l    #1,D6
00003FBE  6002      6830          bra.s     vsprintf_112
                    6831   vsprintf_115:
00003FC0  6002      6832          bra.s     vsprintf_113
                    6833   vsprintf_112:
00003FC2  60B2      6834          bra       vsprintf_110
                    6835   vsprintf_113:
00003FC4  4A2E FFCD 6836          tst.b     -51(A6)
00003FC8  6700 0030 6837          beq       vsprintf_125
00003FCC  4884      6838          ext.w     D4
00003FCE  48C4      6839          ext.l     D4
00003FD0  2004      6840          move.l    D4,D0
00003FD2  D0AE FFFC 6841          add.l     -4(A6),D0
00003FD6  D087      6842          add.l     D7,D0
00003FD8  1D40 FFD1 6843          move.b    D0,-47(A6)
                    6844   vsprintf_123:
00003FDC  102E FFD1 6845          move.b    -47(A6),D0
00003FE0  4880      6846          ext.w     D0
00003FE2  48C0      6847          ext.l     D0
00003FE4  220D      6848          move.l    A5,D1
00003FE6  534D      6849          subq.w    #1,A5
00003FE8  B081      6850          cmp.l     D1,D0
00003FEA  6C0E      6851          bge.s     vsprintf_125
00003FEC  4878 0020 6852          pea       32
00003FF0  2F0A      6853          move.l    A2,-(A7)
00003FF2  4E93      6854          jsr       (A3)
00003FF4  504F      6855          addq.w    #8,A7
00003FF6  5386      6856          subq.l    #1,D6
00003FF8  60E2      6857          bra       vsprintf_123
                    6858   vsprintf_125:
00003FFA  6014      6859          bra.s     vsprintf_81
                    6860   vsprintf_80:
00003FFC  206E 000C 6861          move.l    12(A6),A0
00004000  1210      6862          move.b    (A0),D1
00004002  4881      6863          ext.w     D1
00004004  48C1      6864          ext.l     D1
00004006  2F01      6865          move.l    D1,-(A7)
00004008  2F0A      6866          move.l    A2,-(A7)
0000400A  4E93      6867          jsr       (A3)
0000400C  504F      6868          addq.w    #8,A7
0000400E  5286      6869          addq.l    #1,D6
                    6870   vsprintf_81:
00004010  52AE 000C 6871          addq.l    #1,12(A6)
                    6872   vsprintf_2:
00004014  6000 F9D6 6873          bra       vsprintf_1
                    6874   vsprintf_3:
00004018  4A92      6875          tst.l     (A2)
0000401A  6710      6876          beq.s     vsprintf_126
0000401C  4201      6877          clr.b     D1
0000401E  C2BC 0000 6878          and.l     #255,D1
00004022  00FF      
00004024  2F01      6879          move.l    D1,-(A7)
00004026  2F0A      6880          move.l    A2,-(A7)
00004028  4E93      6881          jsr       (A3)
0000402A  504F      6882          addq.w    #8,A7
                    6883   vsprintf_126:
0000402C  2006      6884          move.l    D6,D0
0000402E  4CDF 3CFC 6885          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004032  4E5E      6886          unlk      A6
00004034  4E75      6887          rts
                    6888   ULMUL:
00004036  4E56 0000 6889          link    A6,#0
0000403A  48E7 C000 6890          movem.l D0/D1,-(A7)
0000403E  222E 0008 6891          move.l  8(A6),D1
00004042  202E 000C 6892          move.l  12(A6),D0
00004046  602C      6893          bra.s   lmul_3
                    6894   LMUL:
00004048  4E56 0000 6895          link    A6,#0
0000404C  48E7 C000 6896          movem.l D0/D1,-(A7)
00004050  222E 0008 6897          move.l  8(A6),D1
00004054  202E 000C 6898          move.l  12(A6),D0
00004058  4A80      6899          tst.l   D0
0000405A  6A0A      6900          bpl.s   lmul_1
0000405C  4480      6901          neg.l   D0
0000405E  4A81      6902          tst.l   D1
00004060  6A0A      6903          bpl.s   lmul_2
00004062  4481      6904          neg.l   D1
00004064  600E      6905          bra.s   lmul_3
                    6906   lmul_1:
00004066  4A81      6907          tst.l   D1
00004068  6A0A      6908          bpl.s   lmul_3
0000406A  4481      6909          neg.l   D1
                    6910   lmul_2:
0000406C  6114      6911          bsr.s   domul
0000406E  4481      6912          neg.l   D1
00004070  4080      6913          negx.l  D0
00004072  6002      6914          bra.s   lmul_4
                    6915   lmul_3:
00004074  610C      6916          bsr.s   domul
                    6917   lmul_4:
00004076  2D41 0008 6918          move.l  D1,8(A6)
0000407A  4CDF 0003 6919          movem.l (A7)+,D0/D1
0000407E  4E5E      6920          unlk    A6
00004080  4E75      6921          rts
                    6922   domul:
00004082  0C81 0000 6923          cmpi.l  #$FFFF,D1
00004086  FFFF      
00004088  620C      6924          bhi.s   domul_1
0000408A  0C80 0000 6925          cmpi.l  #$FFFF,D0
0000408E  FFFF      
00004090  620E      6926          bhi.s   domul_2
00004092  C2C0      6927          mulu    D0,D1
00004094  4E75      6928          rts
                    6929   domul_1:
00004096  0C80 0000 6930          cmpi.l  #$FFFF,D0
0000409A  FFFF      
0000409C  6218      6931          bhi.s   domul_4
0000409E  6002      6932          bra.s   domul_3
                    6933   domul_2
000040A0  C141      6934          exg     D0,D1
                    6935   domul_3:
000040A2  2F02      6936          move.l  D2,-(A7)
000040A4  2401      6937          move.l  D1,D2
000040A6  4842      6938          swap    D2
000040A8  C2C0      6939          mulu    D0,D1
000040AA  C4C0      6940          mulu    D0,D2
000040AC  4842      6941          swap    D2
000040AE  4242      6942          clr.w   D2
000040B0  D282      6943          add.l   D2,D1
000040B2  241F      6944          move.l  (A7)+,D2
000040B4  4E75      6945          rts
                    6946   domul_4:
000040B6  48E7 3000 6947          movem.l D2/D3,-(A7)
000040BA  2401      6948          move.l  D1,D2
000040BC  2601      6949          move.l  D1,D3
000040BE  C2C0      6950          mulu    D0,D1
000040C0  4842      6951          swap    D2
000040C2  C4C0      6952          mulu    D0,D2
000040C4  4840      6953          swap    D0
000040C6  C6C0      6954          mulu    D0,D3
000040C8  D483      6955          add.l   D3,D2
000040CA  4842      6956          swap    D2
000040CC  4242      6957          clr.w   D2
000040CE  D282      6958          add.l   D2,D1
000040D0  4CDF 000C 6959          movem.l (A7)+,D2/D3
000040D4  4E75      6960          rts
                    6961   _gets:
000040D6  4E56 0000 6962          link      A6,#0
000040DA  48E7 3820 6963          movem.l   D2/D3/D4/A2,-(A7)
000040DE  45F8 2F34 6964          lea       _putch,A2
000040E2  282E 0008 6965          move.l    8(A6),D4
000040E6  2404      6966          move.l    D4,D2
                    6967   gets_1:
000040E8  6100 EE7A 6968          bsr       _getch
000040EC  2600      6969          move.l    D0,D3
000040EE  0C80 0000 6970          cmp.l     #10,D0
000040F2  000A      
000040F4  6700 003C 6971          beq       gets_3
000040F8  0C83 0000 6972          cmp.l     #8,D3
000040FC  0008      
000040FE  6712      6973          beq.s     gets_4
00004100  2042      6974          move.l    D2,A0
00004102  5282      6975          addq.l    #1,D2
00004104  1083      6976          move.b    D3,(A0)
00004106  4883      6977          ext.w     D3
00004108  48C3      6978          ext.l     D3
0000410A  2F03      6979          move.l    D3,-(A7)
0000410C  4E92      6980          jsr       (A2)
0000410E  584F      6981          addq.w    #4,A7
00004110  601E      6982          bra.s     gets_6
                    6983   gets_4:
00004112  B484      6984          cmp.l     D4,D2
00004114  631A      6985          bls.s     gets_6
00004116  4878 0008 6986          pea       8
0000411A  4E92      6987          jsr       (A2)
0000411C  584F      6988          addq.w    #4,A7
0000411E  4878 0020 6989          pea       32
00004122  4E92      6990          jsr       (A2)
00004124  584F      6991          addq.w    #4,A7
00004126  4878 0008 6992          pea       8
0000412A  4E92      6993          jsr       (A2)
0000412C  584F      6994          addq.w    #4,A7
0000412E  5382      6995          subq.l    #1,D2
                    6996   gets_6:
00004130  60B6      6997          bra       gets_1
                    6998   gets_3:
00004132  4878 000A 6999          pea       10
00004136  4E92      7000          jsr       (A2)
00004138  584F      7001          addq.w    #4,A7
0000413A  2042      7002          move.l    D2,A0
0000413C  4210      7003          clr.b     (A0)
0000413E  2004      7004          move.l    D4,D0
00004140  4CDF 041C 7005          movem.l   (A7)+,D2/D3/D4/A2
00004144  4E5E      7006          unlk      A6
00004146  4E75      7007          rts
                    7008   _ungetch:
00004148  4E56 0000 7009          link      A6,#0
0000414C  23EE 0008 7010          move.l    8(A6),__ungetbuf
00004150  0B00 00C0 
00004154  202E 0008 7011          move.l    8(A6),D0
00004158  4E5E      7012          unlk      A6
0000415A  4E75      7013          rts
                    7014   @itoa_convert:
0000415C  4E56 0000 7015          link      A6,#0
00004160  48E7 3C00 7016          movem.l   D2/D3/D4/D5,-(A7)
00004164  242E 0008 7017          move.l    8(A6),D2
00004168  262E 0010 7018          move.l    16(A6),D3
0000416C  2A2E 000C 7019          move.l    12(A6),D5
00004170  2F05      7020          move.l    D5,-(A7)
00004172  2F03      7021          move.l    D3,-(A7)
00004174  6100 ECE0 7022          bsr       ULDIV
00004178  202F 0004 7023          move.l    4(A7),D0
0000417C  504F      7024          addq.w    #8,A7
0000417E  2800      7025          move.l    D0,D4
00004180  BA83      7026          cmp.l     D3,D5
00004182  651A      7027          blo.s     @itoa_convert_1
00004184  2F03      7028          move.l    D3,-(A7)
00004186  2F05      7029          move.l    D5,-(A7)
00004188  2F03      7030          move.l    D3,-(A7)
0000418A  6100 ECCA 7031          bsr       ULDIV
0000418E  2217      7032          move.l    (A7),D1
00004190  504F      7033          addq.w    #8,A7
00004192  2F01      7034          move.l    D1,-(A7)
00004194  2F02      7035          move.l    D2,-(A7)
00004196  61C4      7036          bsr       @itoa_convert
00004198  DEFC 000C 7037          add.w     #12,A7
0000419C  2400      7038          move.l    D0,D2
                    7039   @itoa_convert_1:
0000419E  0C84 0000 7040          cmp.l     #9,D4
000041A2  0009      
000041A4  6E0A      7041          bgt.s     @itoa_convert_3
000041A6  2004      7042          move.l    D4,D0
000041A8  0680 0000 7043          add.l     #48,D0
000041AC  0030      
000041AE  600E      7044          bra.s     @itoa_convert_4
                    7045   @itoa_convert_3:
000041B0  2004      7046          move.l    D4,D0
000041B2  0680 0000 7047          add.l     #97,D0
000041B6  0061      
000041B8  0480 0000 7048          sub.l     #10,D0
000041BC  000A      
                    7049   @itoa_convert_4:
000041BE  2042      7050          move.l    D2,A0
000041C0  1080      7051          move.b    D0,(A0)
000041C2  2002      7052          move.l    D2,D0
000041C4  5280      7053          addq.l    #1,D0
000041C6  4CDF 003C 7054          movem.l   (A7)+,D2/D3/D4/D5
000041CA  4E5E      7055          unlk      A6
000041CC  4E75      7056          rts
                    7057   _ltoa:
000041CE  4E56 0000 7058          link      A6,#0
000041D2  48E7 3C00 7059          movem.l   D2/D3/D4/D5,-(A7)
000041D6  242E 0008 7060          move.l    8(A6),D2
000041DA  262E 000C 7061          move.l    12(A6),D3
000041DE  2A2E 0010 7062          move.l    16(A6),D5
000041E2  2803      7063          move.l    D3,D4
000041E4  0C85 0000 7064          cmp.l     #2,D5
000041E8  0002      
000041EA  6D08      7065          blt.s     ltoa_3
000041EC  0C85 0000 7066          cmp.l     #36,D5
000041F0  0024      
000041F2  6F06      7067          ble.s     ltoa_1
                    7068   ltoa_3:
000041F4  2003      7069          move.l    D3,D0
000041F6  6000 0052 7070          bra       ltoa_4
                    7071   ltoa_1:
000041FA  0C85 0000 7072          cmp.l     #10,D5
000041FE  000A      
00004200  6600 0032 7073          bne       ltoa_5
00004204  0C82 0000 7074          cmp.l     #0,D2
00004208  0000      
0000420A  6C28      7075          bge.s     ltoa_5
0000420C  2002      7076          move.l    D2,D0
0000420E  4480      7077          neg.l     D0
00004210  2400      7078          move.l    D0,D2
00004212  0C82 0000 7079          cmp.l     #0,D2
00004216  0000      
00004218  6C12      7080          bge.s     ltoa_7
0000421A  4879 0000 7081          pea       @itoa_1
0000421E  5768      
00004220  2F03      7082          move.l    D3,-(A7)
00004222  6100 EC22 7083          bsr       _strcpy
00004226  504F      7084          addq.w    #8,A7
00004228  2003      7085          move.l    D3,D0
0000422A  601E      7086          bra.s     ltoa_4
                    7087   ltoa_7:
0000422C  2044      7088          move.l    D4,A0
0000422E  5284      7089          addq.l    #1,D4
00004230  10BC 002D 7090          move.b    #45,(A0)
                    7091   ltoa_5:
00004234  2F05      7092          move.l    D5,-(A7)
00004236  2F02      7093          move.l    D2,-(A7)
00004238  2F04      7094          move.l    D4,-(A7)
0000423A  6100 FF20 7095          bsr       @itoa_convert
0000423E  DEFC 000C 7096          add.w     #12,A7
00004242  2800      7097          move.l    D0,D4
00004244  2044      7098          move.l    D4,A0
00004246  4210      7099          clr.b     (A0)
00004248  2003      7100          move.l    D3,D0
                    7101   ltoa_4:
0000424A  4CDF 003C 7102          movem.l   (A7)+,D2/D3/D4/D5
0000424E  4E5E      7103          unlk      A6
00004250  4E75      7104          rts
                    7105   _ultoa:
00004252  4E56 0000 7106          link      A6,#0
00004256  48E7 3800 7107          movem.l   D2/D3/D4,-(A7)
0000425A  262E 0010 7108          move.l    16(A6),D3
0000425E  282E 000C 7109          move.l    12(A6),D4
00004262  2404      7110          move.l    D4,D2
00004264  0C83 0000 7111          cmp.l     #2,D3
00004268  0002      
0000426A  6D08      7112          blt.s     ultoa_3
0000426C  0C83 0000 7113          cmp.l     #36,D3
00004270  0024      
00004272  6F04      7114          ble.s     ultoa_1
                    7115   ultoa_3:
00004274  2004      7116          move.l    D4,D0
00004276  6018      7117          bra.s     ultoa_4
                    7118   ultoa_1:
00004278  2F03      7119          move.l    D3,-(A7)
0000427A  2F2E 0008 7120          move.l    8(A6),-(A7)
0000427E  2F02      7121          move.l    D2,-(A7)
00004280  6100 FEDA 7122          bsr       @itoa_convert
00004284  DEFC 000C 7123          add.w     #12,A7
00004288  2400      7124          move.l    D0,D2
0000428A  2042      7125          move.l    D2,A0
0000428C  4210      7126          clr.b     (A0)
0000428E  2004      7127          move.l    D4,D0
                    7128   ultoa_4:
00004290  4CDF 001C 7129          movem.l   (A7)+,D2/D3/D4
00004294  4E5E      7130          unlk      A6
00004296  4E75      7131          rts
                    7132   _itoa:
00004298  4E56 0000 7133          link      A6,#0
0000429C  2F2E 0010 7134          move.l    16(A6),-(A7)
000042A0  2F2E 000C 7135          move.l    12(A6),-(A7)
000042A4  2F2E 0008 7136          move.l    8(A6),-(A7)
000042A8  6100 FF24 7137          bsr       _ltoa
000042AC  DEFC 000C 7138          add.w     #12,A7
000042B0  4E5E      7139          unlk      A6
000042B2  4E75      7140          rts
                    7141   _strlen:
000042B4  206F 0004 7142          move.l    (4,A7),A0
000042B8  2248      7143          move.l    A0,A1
                    7144   strlen_1:
000042BA  4A19      7145          tst.b     (A1)+
000042BC  66FC      7146          bne       strlen_1
000042BE  2009      7147          move.l    A1,D0
000042C0  9088      7148          sub.l     A0,D0
000042C2  5380      7149          subq.l    #1,D0
000042C4  4E75      7150          rts
                    7151          section   const
                    7152   
                    7153   @m68kde~1_1:
000042C6  0D0A 00   7154          dc.b      13,10,0
                    7155   @m68kde~1_2:
000042CA  0D53 7769 7156          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000042CE  7463 6865 
000042D2  7320 5357 
000042D6  5B        
000042D7  372D 305D 7157          dc.b      55,45,48,93,32,61,32,0
000042DB  203D 2000 
                    7158   @m68kde~1_3:
000042E0  3000      7159          dc.b      48,0
                    7160   @m68kde~1_4:
000042E2  3100      7161          dc.b      49,0
                    7162   @m68kde~1_5:
000042E4  0D0A 4475 7163          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000042E8  6D70 204D 
000042EC  656D 6F72 
000042F0  79        
000042F1  2042 6C6F 7164          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000042F5  636B 3A20 
000042F9  3C45 5343 
000042FD  3E20      
000042FF  746F 2041 7165          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004303  626F 7274 
00004307  2C20 3C53 
0000430B  50        
0000430C  4143 453E 7166          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004310  2074 6F20 
00004314  436F 6E74 
00004318  69        
00004319  6E75 6500 7167          dc.b      110,117,101,0
                    7168   @m68kde~1_6:
0000431E  0D0A 456E 7169          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004322  7465 7220 
00004326  5374 6172 
0000432A  74        
0000432B  2041 6464 7170          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000432F  7265 7373 
00004333  3A20 00   
                    7171   @m68kde~1_7:
00004336  0D0A 2530 7172          dc.b      13,10,37,48,56,120,32,0
0000433A  3878 2000 
                    7173   @m68kde~1_8:
0000433E  2530 3258 7174          dc.b      37,48,50,88,0
00004342  00        
                    7175   @m68kde~1_9:
00004344  2020 00   7176          dc.b      32,32,0
                    7177   @m68kde~1_10:
00004348  0D0A 4669 7178          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0000434C  6C6C 204D 
00004350  656D 6F72 
00004354  79        
00004355  2042 6C6F 7179          dc.b      32,66,108,111,99,107,0
00004359  636B 00   
                    7180   @m68kde~1_11:
0000435C  0D0A 456E 7181          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004360  7465 7220 
00004364  456E 6420 
00004368  41        
00004369  6464 7265 7182          dc.b      100,100,114,101,115,115,58,32,0
0000436D  7373 3A20 
00004371  00        
                    7183   @m68kde~1_12:
00004372  0D0A 456E 7184          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004376  7465 7220 
0000437A  4669 6C6C 
0000437E  20        
0000437F  4461 7461 7185          dc.b      68,97,116,97,58,32,0
00004383  3A20 00   
                    7186   @m68kde~1_13:
00004386  0D0A 4669 7187          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
0000438A  6C6C 696E 
0000438E  6720 4164 
00004392  64        
00004393  7265 7373 7188          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00004397  6573 205B 
0000439B  2425 3038 
0000439F  58        
000043A0  202D 2024 7189          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000043A4  2530 3858 
000043A8  5D20 7769 
000043AC  7468      
000043AE  2024 2530 7190          dc.b      32,36,37,48,50,88,0
000043B2  3258 00   
                    7191   @m68kde~1_14:
000043B6  0D0A 5573 7192          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000043BA  6520 4879 
000043BE  7065 7254 
000043C2  65        
000043C3  726D 696E 7193          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000043C7  616C 2074 
000043CB  6F20 5365 
000043CF  6E64 2054 7194          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000043D3  6578 7420 
000043D7  4669 6C65 
000043DB  2028 2E68 7195          dc.b      32,40,46,104,101,120,41,13,10,0
000043DF  6578 290D 
000043E3  0A00      
                    7196   @m68kde~1_15:
000043E6  0D0A 4C6F 7197          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000043EA  6164 2046 
000043EE  6169 6C65 
000043F2  64        
000043F3  2061 7420 7198          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000043F7  4164 6472 
000043FB  6573 7320 
000043FF  3D        
00004400  205B 2425 7199          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004404  3038 585D 
00004408  0D0A 00   
                    7200   @m68kde~1_16:
0000440C  0D0A 5375 7201          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004410  6363 6573 
00004414  733A 2044 
00004418  6F        
00004419  776E 6C6F 7202          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
0000441D  6164 6564 
00004421  2025 6420 
00004425  6279 7465 7203          dc.b      98,121,116,101,115,13,10,0
00004429  730D 0A00 
                    7204   @m68kde~1_17:
0000442E  0D0A 4578 7205          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004432  616D 696E 
00004436  6520 616E 
0000443A  64        
0000443B  2043 6861 7206          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
0000443F  6E67 6520 
00004443  4D65 6D6F 
00004447  72        
00004448  7900      7207          dc.b      121,0
                    7208   @m68kde~1_18:
0000444A  0D0A 3C45 7209          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
0000444E  5343 3E20 
00004452  746F 2053 
00004456  746F      
00004458  702C 203C 7210          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000445C  5350 4143 
00004460  453E 2074 
00004464  6F20      
00004466  4164 7661 7211          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000446A  6E63 652C 
0000446E  2027 2D27 
00004472  2074      
00004474  6F20 476F 7212          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004478  2042 6163 
0000447C  6B2C 203C 
00004480  4441      
00004482  5441 3E20 7213          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004486  746F 2063 
0000448A  6861 6E67 
0000448E  65        
0000448F  00        7214          dc.b      0
                    7215   @m68kde~1_19:
00004490  0D0A 456E 7216          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004494  7465 7220 
00004498  4164 6472 
0000449C  65        
0000449D  7373 3A20 7217          dc.b      115,115,58,32,0
000044A1  00        
                    7218   @m68kde~1_20:
000044A2  0D0A 5B25 7219          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000044A6  3038 785D 
000044AA  203A 2025 
000044AE  3032 78   
000044B1  2020 00   7220          dc.b      32,32,0
                    7221   @m68kde~1_21:
000044B4  0D0A 5761 7222          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000044B8  726E 696E 
000044BC  6720 4368 
000044C0  61        
000044C1  6E67 6520 7223          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000044C5  4661 696C 
000044C9  6564 3A20 
000044CD  57        
000044CE  726F 7465 7224          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000044D2  205B 2530 
000044D6  3278 5D2C 
000044DA  20        
000044DB  5265 6164 7225          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000044DF  205B 2530 
000044E3  3278 5D00 
                    7226   @m68kde~1_22:
000044E8  5752 4954 7227          dc.b      87,82,73,84,84,69,78,32,86,65,76,58,32,37,48
000044EC  5445 4E20 
000044F0  5641 4C3A 
000044F4  2025 30   
000044F7  3878 200A 7228          dc.b      56,120,32,10,0
000044FB  00        
                    7229   @m68kde~1_23:
000044FC  4572 6173 7230          dc.b      69,114,97,115,105,110,103,46,46,46,10,0
00004500  696E 672E 
00004504  2E2E 0A00 
                    7231   @m68kde~1_24:
00004508  0D0A 5265 7232          dc.b      13,10,82,101,97,100,32,68,97,116,97,58,32,37
0000450C  6164 2044 
00004510  6174 613A 
00004514  2025      
00004516  3038 780A 7233          dc.b      48,56,120,10,0
0000451A  00        
                    7234   @m68kde~1_25:
0000451C  0D0A 204C 7235          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
00004520  6F61 6469 
00004524  6E67 2050 
00004528  72        
00004529  6F67 7261 7236          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
0000452D  6D20 4672 
00004531  6F6D 2053 
00004535  50        
00004536  4920 466C 7237          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
0000453A  6173 682E 
0000453E  2E2E 2E00 
                    7238   @m68kde~1_26:
00004542  0D0A 2052 7239          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
00004546  6561 6420 
0000454A  4461 7461 
0000454E  3A20      
00004550  2530 3878 7240          dc.b      37,48,56,120,32,10,0
00004554  200A 00   
                    7241   @m68kde~1_27:
00004558  2425 3038 7242          dc.b      36,37,48,56,88,32,32,0
0000455C  5820 2000 
                    7243   @m68kde~1_28:
00004560  2000      7244          dc.b      32,0
                    7245   @m68kde~1_29:
00004562  2E00      7246          dc.b      46,0
                    7247   @m68kde~1_30:
00004564  2563 00   7248          dc.b      37,99,0
                    7249   @m68kde~1_31:
00004568  00        7250          dc.b      0
                    7251   @m68kde~1_32:
0000456A  0D0A 0D0A 7252          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
0000456E  2044 3020 
00004572  3D20 2425 
00004576  3038 58   
00004579  2020 4130 7253          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
0000457D  203D 2024 
00004581  2530 3858 
00004585  00        
                    7254   @m68kde~1_33:
00004586  0D0A 2044 7255          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
0000458A  3120 3D20 
0000458E  2425 3038 
00004592  5820 20   
00004595  4131 203D 7256          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004599  2024 2530 
0000459D  3858 00   
                    7257   @m68kde~1_34:
000045A0  0D0A 2044 7258          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000045A4  3220 3D20 
000045A8  2425 3038 
000045AC  5820 20   
000045AF  4132 203D 7259          dc.b      65,50,32,61,32,36,37,48,56,88,0
000045B3  2024 2530 
000045B7  3858 00   
                    7260   @m68kde~1_35:
000045BA  0D0A 2044 7261          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
000045BE  3320 3D20 
000045C2  2425 3038 
000045C6  5820 20   
000045C9  4133 203D 7262          dc.b      65,51,32,61,32,36,37,48,56,88,0
000045CD  2024 2530 
000045D1  3858 00   
                    7263   @m68kde~1_36:
000045D4  0D0A 2044 7264          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000045D8  3420 3D20 
000045DC  2425 3038 
000045E0  5820 20   
000045E3  4134 203D 7265          dc.b      65,52,32,61,32,36,37,48,56,88,0
000045E7  2024 2530 
000045EB  3858 00   
                    7266   @m68kde~1_37:
000045EE  0D0A 2044 7267          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000045F2  3520 3D20 
000045F6  2425 3038 
000045FA  5820 20   
000045FD  4135 203D 7268          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004601  2024 2530 
00004605  3858 00   
                    7269   @m68kde~1_38:
00004608  0D0A 2044 7270          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
0000460C  3620 3D20 
00004610  2425 3038 
00004614  5820 20   
00004617  4136 203D 7271          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000461B  2024 2530 
0000461F  3858 00   
                    7272   @m68kde~1_39:
00004622  0D0A 2044 7273          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004626  3720 3D20 
0000462A  2425 3038 
0000462E  5820 20   
00004631  4137 203D 7274          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004635  2024 2530 
00004639  3858 00   
                    7275   @m68kde~1_40:
0000463C  0D0A 0D0A 7276          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004640  5553 5020 
00004644  3D20 2425 
00004648  3038 58   
0000464B  2020 2841 7277          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
0000464F  3729 2055 
00004653  7365 7220 
00004657  5350      
00004659  00        7278          dc.b      0
                    7279   @m68kde~1_41:
0000465A  0D0A 5353 7280          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
0000465E  5020 3D20 
00004662  2425 3038 
00004666  5820 20   
00004669  2841 3729 7281          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
0000466D  2053 7570 
00004671  6572 7669 
00004675  73        
00004676  6F72 2053 7282          dc.b      111,114,32,83,80,0
0000467A  5000      
                    7283   @m68kde~1_42:
0000467C  0D0A 2053 7284          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004680  5220 3D20 
00004684  2425 3034 
00004688  5820 20   
0000468B  2000      7285          dc.b      32,0
                    7286   @m68kde~1_43:
0000468E  2020 205B 7287          dc.b      32,32,32,91,0
00004692  00        
                    7288   @m68kde~1_44:
00004694  0D0A 2050 7289          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004698  4320 3D20 
0000469C  2425 3038 
000046A0  5820 20   
000046A3  00        7290          dc.b      0
                    7291   @m68kde~1_45:
000046A4  5B40 2042 7292          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
000046A8  5245 414B 
000046AC  504F 494E 
000046B0  545D 00   
                    7293   @m68kde~1_46:
000046B4  0D0A 5750 7294          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000046B8  2564 203D 
000046BC  2025 7300 
                    7295   @m68kde~1_47:
000046C0  0D0A 0D0A 7296          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000046C4  0D0A 0D0A 
000046C8  0D0A 0D0A 
000046CC  5369 6E   
000046CF  676C 6520 7297          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000046D3  5374 6570 
000046D7  2020 3A5B 
000046DB  4F        
000046DC  4E5D 00   7298          dc.b      78,93,0
                    7299   @m68kde~1_48:
000046E0  0D0A 4272 7300          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000046E4  6561 6B20 
000046E8  506F 696E 
000046EC  74        
000046ED  7320 3A5B 7301          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000046F1  4469 7361 
000046F5  626C 6564 
000046F9  5D        
000046FA  00        7302          dc.b      0
                    7303   @m68kde~1_49:
000046FC  0D0A 5072 7304          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004700  6573 7320 
00004704  3C53 5041 
00004708  4345      
0000470A  3E20 746F 7305          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
0000470E  2045 7865 
00004712  6375 7465 
00004716  20        
00004717  4E65 7874 7306          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000471B  2049 6E73 
0000471F  7472 7563 
00004723  7469 6F6E 7307          dc.b      116,105,111,110,0
00004727  00        
                    7308   @m68kde~1_50:
00004728  0D0A 5072 7309          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000472C  6573 7320 
00004730  3C45 5343 
00004734  3E20      
00004736  746F 2052 7310          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
0000473A  6573 756D 
0000473E  6520 5072 
00004742  6F67 7261 7311          dc.b      111,103,114,97,109,0
00004746  6D00      
                    7312   @m68kde~1_51:
00004748  0D0A 496C 7313          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
0000474C  6C65 6761 
00004750  6C20 4461 
00004754  74        
00004755  6120 5265 7314          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004759  6769 7374 
0000475D  6572 203A 
00004761  20        
00004762  5573 6520 7315          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004766  4430 2D44 
0000476A  372E 2E2E 
0000476E  2E2E      
00004770  0D0A 00   7316          dc.b      13,10,0
                    7317   @m68kde~1_52:
00004774  0D0A 4425 7318          dc.b      13,10,68,37,99,32,61,32,0
00004778  6320 3D20 
0000477C  00        
                    7319   @m68kde~1_53:
0000477E  0D0A 496C 7320          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004782  6C65 6761 
00004786  6C20 4164 
0000478A  64        
0000478B  7265 7373 7321          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
0000478F  2052 6567 
00004793  6973 7465 
00004797  7220 3A20 7322          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
0000479B  5573 6520 
0000479F  4130 2D41 
000047A3  372E      
000047A5  2E2E 2E2E 7323          dc.b      46,46,46,46,13,10,0
000047A9  0D0A 00   
                    7324   @m68kde~1_54:
000047AC  0D0A 4125 7325          dc.b      13,10,65,37,99,32,61,32,0
000047B0  6320 3D20 
000047B4  00        
                    7326   @m68kde~1_55:
000047B6  0D0A 5573 7327          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000047BA  6572 2053 
000047BE  5020 3D20 
000047C2  00        
                    7328   @m68kde~1_56:
000047C4  0D0A 496C 7329          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000047C8  6C65 6761 
000047CC  6C20 5265 
000047D0  67        
000047D1  6973 7465 7330          dc.b      105,115,116,101,114,46,46,46,46,0
000047D5  722E 2E2E 
000047D9  2E00      
                    7331   @m68kde~1_57:
000047DC  0D0A 5379 7332          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000047E0  7374 656D 
000047E4  2053 5020 
000047E8  3D        
000047E9  2000      7333          dc.b      32,0
                    7334   @m68kde~1_58:
000047EC  0D0A 5043 7335          dc.b      13,10,80,67,32,61,32,0
000047F0  203D 2000 
                    7336   @m68kde~1_59:
000047F4  0D0A 5352 7337          dc.b      13,10,83,82,32,61,32,0
000047F8  203D 2000 
                    7338   @m68kde~1_60:
000047FC  0D0A 496C 7339          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004800  6C65 6761 
00004804  6C20 5265 
00004808  67        
00004809  6973 7465 7340          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
0000480D  723A 2055 
00004811  7365 2041 
00004815  30        
00004816  2D41 372C 7341          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000481A  2044 302D 
0000481E  4437 2C20 
00004822  5353 50   
00004825  2C20 5553 7342          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004829  502C 2050 
0000482D  4320 6F72 
00004831  2053      
00004833  520D 0A00 7343          dc.b      82,13,10,0
                    7344   @m68kde~1_61:
00004838  0D0A 0D0A 7345          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
0000483C  4E75 6D20 
00004840  2020 2020 
00004844  4164      
00004846  6472 6573 7346          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
0000484A  7320 2020 
0000484E  2020 2049 
00004852  6E        
00004853  7374 7275 7347          dc.b      115,116,114,117,99,116,105,111,110,0
00004857  6374 696F 
0000485B  6E00      
                    7348   @m68kde~1_62:
0000485E  0D0A 2D2D 7349          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004862  2D20 2020 
00004866  2020 2D2D 
0000486A  2D2D 2D   
0000486D  2D2D 2D2D 7350          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004871  2020 2020 
00004875  2D2D 2D2D 
00004879  2D2D 2D   
0000487C  2D2D 2D2D 7351          dc.b      45,45,45,45,0
00004880  00        
                    7352   @m68kde~1_63:
00004882  0D0A 4E6F 7353          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004886  2042 7265 
0000488A  616B 506F 
0000488E  69        
0000488F  6E74 7320 7354          dc.b      110,116,115,32,83,101,116,0
00004893  5365 7400 
                    7355   @m68kde~1_64:
00004898  0D0A 2533 7356          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
0000489C  6420 2020 
000048A0  2020 2425 
000048A4  3038 78   
000048A7  00        7357          dc.b      0
                    7358   @m68kde~1_65:
000048A8  0D0A 4E75 7359          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000048AC  6D20 2020 
000048B0  2020 4164 
000048B4  6472      
000048B6  6573 7300 7360          dc.b      101,115,115,0
                    7361   @m68kde~1_66:
000048BA  0D0A 2D2D 7362          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000048BE  2D20 2020 
000048C2  2020 2D2D 
000048C6  2D2D 2D   
000048C9  2D2D 2D2D 7363          dc.b      45,45,45,45,0
000048CD  00        
                    7364   @m68kde~1_67:
000048CE  0D0A 4E6F 7365          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000048D2  2057 6174 
000048D6  6368 506F 
000048DA  69        
000048DB  6E74 7320 7366          dc.b      110,116,115,32,83,101,116,0
000048DF  5365 7400 
                    7367   @m68kde~1_68:
000048E4  0D0A 456E 7368          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000048E8  7465 7220 
000048EC  4272 6561 
000048F0  6B        
000048F1  2050 6F69 7369          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000048F5  6E74 204E 
000048F9  756D 6265 
000048FD  72        
000048FE  3A20 00   7370          dc.b      58,32,0
                    7371   @m68kde~1_69:
00004902  0D0A 496C 7372          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004906  6C65 6761 
0000490A  6C20 5261 
0000490E  6E        
0000490F  6765 203A 7373          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004913  2055 7365 
00004917  2030 202D 
0000491B  2037      
0000491D  00        7374          dc.b      0
                    7375   @m68kde~1_70:
0000491E  0D0A 4272 7376          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004922  6561 6B20 
00004926  506F 696E 
0000492A  74        
0000492B  2043 6C65 7377          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000492F  6172 6564 
00004933  2E2E 2E2E 
00004937  2E        
00004938  0D0A 00   7378          dc.b      13,10,0
                    7379   @m68kde~1_71:
0000493C  0D0A 4272 7380          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004940  6561 6B20 
00004944  506F 696E 
00004948  74        
00004949  2077 6173 7381          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
0000494D  6E27 7420 
00004951  5365 742E 
00004955  2E        
00004956  2E2E 2E00 7382          dc.b      46,46,46,0
                    7383   @m68kde~1_72:
0000495A  0D0A 456E 7384          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
0000495E  7465 7220 
00004962  5761 7463 
00004966  68        
00004967  2050 6F69 7385          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000496B  6E74 204E 
0000496F  756D 6265 
00004973  72        
00004974  3A20 00   7386          dc.b      58,32,0
                    7387   @m68kde~1_73:
00004978  0D0A 5761 7388          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000497C  7463 6820 
00004980  506F 696E 
00004984  74        
00004985  2043 6C65 7389          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004989  6172 6564 
0000498D  2E2E 2E2E 
00004991  2E        
00004992  0D0A 00   7390          dc.b      13,10,0
                    7391   @m68kde~1_74:
00004996  0D0A 5761 7392          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000499A  7463 6820 
0000499E  506F 696E 
000049A2  74        
000049A3  2057 6173 7393          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000049A7  206E 6F74 
000049AB  2053 6574 
000049AF  2E        
000049B0  2E2E 2E2E 7394          dc.b      46,46,46,46,0
000049B4  00        
                    7395   @m68kde~1_75:
000049B6  0D0A 4E6F 7396          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000049BA  2046 5245 
000049BE  4520 4272 
000049C2  6561      
000049C4  6B20 506F 7397          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000049C8  696E 7473 
000049CC  2E2E 2E2E 
000049D0  2E        
000049D1  00        7398          dc.b      0
                    7399   @m68kde~1_76:
000049D2  0D0A 4272 7400          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000049D6  6561 6B20 
000049DA  506F 696E 
000049DE  74        
000049DF  2041 6464 7401          dc.b      32,65,100,100,114,101,115,115,58,32,0
000049E3  7265 7373 
000049E7  3A20 00   
                    7402   @m68kde~1_77:
000049EA  0D0A 4572 7403          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000049EE  726F 7220 
000049F2  3A20 4272 
000049F6  65        
000049F7  616B 2050 7404          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000049FB  6F69 6E74 
000049FF  7320 4341 
00004A03  4E        
00004A04  4E4F 5420 7405          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004A08  6265 2073 
00004A0C  6574 2061 
00004A10  74        
00004A11  204F 4444 7406          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004A15  2061 6464 
00004A19  7265 7373 
00004A1D  65        
00004A1E  7300      7407          dc.b      115,0
                    7408   @m68kde~1_78:
00004A20  0D0A 4572 7409          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004A24  726F 7220 
00004A28  3A20 4272 
00004A2C  65        
00004A2D  616B 2050 7410          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004A31  6F69 6E74 
00004A35  7320 4341 
00004A39  4E        
00004A3A  4E4F 5420 7411          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004A3E  6265 2073 
00004A42  6574 2066 
00004A46  6F        
00004A47  7220 524F 7412          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004A4B  4D20 696E 
00004A4F  2052 616E 
00004A53  67        
00004A54  6520 3A20 7413          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004A58  5B24 302D 
00004A5C  2430 3030 
00004A60  3037 46   
00004A63  4646 5D00 7414          dc.b      70,70,93,0
                    7415   @m68kde~1_79:
00004A68  0D0A 4572 7416          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004A6C  726F 723A 
00004A70  2042 7265 
00004A74  61        
00004A75  6B20 506F 7417          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004A79  696E 7420 
00004A7D  416C 7265 
00004A81  6164 7920 7418          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004A85  4578 6973 
00004A89  7473 2061 
00004A8D  74        
00004A8E  2041 6464 7419          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004A92  7265 7373 
00004A96  203A 2025 
00004A9A  30        
00004A9B  3878 0D0A 7420          dc.b      56,120,13,10,0
00004A9F  00        
                    7421   @m68kde~1_80:
00004AA0  0D0A 4272 7422          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004AA4  6561 6B20 
00004AA8  506F 696E 
00004AAC  74        
00004AAD  2053 6574 7423          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004AB1  2061 7420 
00004AB5  4164 6472 
00004AB9  65        
00004ABA  7373 3A20 7424          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004ABE  5B24 2530 
00004AC2  3878 5D00 
                    7425   @m68kde~1_81:
00004AC6  0D0A 4E6F 7426          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004ACA  2046 5245 
00004ACE  4520 5761 
00004AD2  7463      
00004AD4  6820 506F 7427          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004AD8  696E 7473 
00004ADC  2E2E 2E2E 
00004AE0  2E        
00004AE1  00        7428          dc.b      0
                    7429   @m68kde~1_82:
00004AE2  0D0A 5761 7430          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004AE6  7463 6820 
00004AEA  506F 696E 
00004AEE  74        
00004AEF  2041 6464 7431          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004AF3  7265 7373 
00004AF7  3A20 00   
                    7432   @m68kde~1_83:
00004AFA  0D0A 4572 7433          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004AFE  726F 723A 
00004B02  2057 6174 
00004B06  63        
00004B07  6820 506F 7434          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004B0B  696E 7420 
00004B0F  416C 7265 
00004B13  6164 7920 7435          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004B17  5365 7420 
00004B1B  6174 2041 
00004B1F  64        
00004B20  6472 6573 7436          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004B24  7320 3A20 
00004B28  2530 3878 
00004B2C  0D        
00004B2D  0A00      7437          dc.b      10,0
                    7438   @m68kde~1_84:
00004B30  0D0A 5761 7439          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004B34  7463 6820 
00004B38  506F 696E 
00004B3C  74        
00004B3D  2053 6574 7440          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004B41  2061 7420 
00004B45  4164 6472 
00004B49  65        
00004B4A  7373 3A20 7441          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004B4E  5B24 2530 
00004B52  3878 5D00 
                    7442   @m68kde~1_85:
00004B56  0D0A 0D0A 7443          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004B5A  0D0A 0D0A 
00004B5E  4042 5245 
00004B62  414B 50   
00004B65  4F49 4E54 7444          dc.b      79,73,78,84,0
00004B69  00        
                    7445   @m68kde~1_86:
00004B6A  0D0A 5369 7446          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004B6E  6E67 6C65 
00004B72  2053 7465 
00004B76  70        
00004B77  203A 205B 7447          dc.b      32,58,32,91,79,78,93,0
00004B7B  4F4E 5D00 
                    7448   @m68kde~1_87:
00004B80  0D0A 4272 7449          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004B84  6561 6B50 
00004B88  6F69 6E74 
00004B8C  73        
00004B8D  203A 205B 7450          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004B91  456E 6162 
00004B95  6C65 645D 
00004B99  00        
                    7451   @m68kde~1_88:
00004B9A  0D0A 5072 7452          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004B9E  6573 7320 
00004BA2  3C45 5343 
00004BA6  3E20      
00004BA8  746F 2052 7453          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004BAC  6573 756D 
00004BB0  6520 5573 
00004BB4  6572 2050 7454          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004BB8  726F 6772 
00004BBC  616D 0D0A 
00004BC0  00        
                    7455   @m68kde~1_89:
00004BC2  0D0A 556E 7456          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004BC6  6B6E 6F77 
00004BCA  6E20 436F 
00004BCE  6D        
00004BCF  6D61 6E64 7457          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004BD3  2E2E 2E2E 
00004BD7  2E0D 0A00 
                    7458   @m68kde~1_90:
00004BDC  0D0A 5072 7459          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004BE0  6F67 7261 
00004BE4  6D20 456E 
00004BE8  64        
00004BE9  6564 2028 7460          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004BED  5452 4150 
00004BF1  2023 3135 
00004BF5  292E      
00004BF7  2E2E 2E00 7461          dc.b      46,46,46,0
                    7462   @m68kde~1_91:
00004BFC  0D0A 4B69 7463          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004C00  6C6C 2041 
00004C04  6C6C 2042 
00004C08  72        
00004C09  6561 6B20 7464          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004C0D  506F 696E 
00004C11  7473 2E2E 
00004C15  2E        
00004C16  2879 2F6E 7465          dc.b      40,121,47,110,41,63,0
00004C1A  293F 00   
                    7466   @m68kde~1_92:
00004C1E  0D0A 4B69 7467          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004C22  6C6C 2041 
00004C26  6C6C 2057 
00004C2A  61        
00004C2B  7463 6820 7468          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004C2F  506F 696E 
00004C33  7473 2E2E 
00004C37  2E        
00004C38  2879 2F6E 7469          dc.b      40,121,47,110,41,63,0
00004C3C  293F 00   
                    7470   @m68kde~1_93:
00004C40  0D0A 2D2D 7471          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C44  2D2D 2D2D 
00004C48  2D2D 2D2D 
00004C4C  2D2D 2D   
00004C4F  2D2D 2D2D 7472          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C53  2D2D 2D2D 
00004C57  2D2D 2D2D 
00004C5B  2D2D 2D   
00004C5E  2D2D 2D2D 7473          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C62  2D2D 2D2D 
00004C66  2D2D 2D2D 
00004C6A  2D2D 2D   
00004C6D  2D2D 2D2D 7474          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C71  2D2D 2D2D 
00004C75  2D2D 2D2D 
00004C79  2D2D 2D   
00004C7C  2D2D 2D2D 7475          dc.b      45,45,45,45,45,45,0
00004C80  2D2D 00   
                    7476   @m68kde~1_94:
00004C84  0D0A 2020 7477          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004C88  4465 6275 
00004C8C  6767 6572 
00004C90  20        
00004C91  436F 6D6D 7478          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004C95  616E 6420 
00004C99  5375 6D6D 
00004C9D  6172 7900 7479          dc.b      97,114,121,0
                    7480   @m68kde~1_95:
00004CA2  0D0A 2020 7481          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004CA6  2E28 7265 
00004CAA  6729 2020 
00004CAE  2020      
00004CB0  2020 202D 7482          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004CB4  2043 6861 
00004CB8  6E67 6520 
00004CBC  5265      
00004CBE  6769 7374 7483          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004CC2  6572 733A 
00004CC6  2065 2E67 
00004CCA  2041 302D 7484          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004CCE  4137 2C44 
00004CD2  302D 4437 
00004CD6  2C50 43   
00004CD9  2C53 5350 7485          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004CDD  2C55 5350 
00004CE1  2C53 5200 
                    7486   @m68kde~1_96:
00004CE6  0D0A 2020 7487          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004CEA  4244 2F42 
00004CEE  532F 4243 
00004CF2  2F42 4B   
00004CF5  2020 2D20 7488          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004CF9  4272 6561 
00004CFD  6B20 506F 
00004D01  69        
00004D02  6E74 3A20 7489          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004D06  4469 7370 
00004D0A  6C61 792F 
00004D0E  53        
00004D0F  6574 2F43 7490          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004D13  6C65 6172 
00004D17  2F4B 696C 
00004D1B  6C        
00004D1C  00        7491          dc.b      0
                    7492   @m68kde~1_97:
00004D1E  0D0A 2020 7493          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004D22  4320 2020 
00004D26  2020 2020 
00004D2A  2020 20   
00004D2D  2020 2D20 7494          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004D31  436F 7079 
00004D35  2050 726F 
00004D39  67        
00004D3A  7261 6D20 7495          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004D3E  6672 6F6D 
00004D42  2046 6C61 
00004D46  73        
00004D47  6820 746F 7496          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004D4B  204D 6169 
00004D4F  6E20 4D65 
00004D53  6D        
00004D54  6F72 7900 7497          dc.b      111,114,121,0
                    7498   @m68kde~1_98:
00004D58  0D0A 2020 7499          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004D5C  4420 2020 
00004D60  2020 2020 
00004D64  2020 20   
00004D67  2020 2D20 7500          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004D6B  4475 6D70 
00004D6F  204D 656D 
00004D73  6F        
00004D74  7279 2043 7501          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004D78  6F6E 7465 
00004D7C  6E74 7320 
00004D80  746F 2053 7502          dc.b      116,111,32,83,99,114,101,101,110,0
00004D84  6372 6565 
00004D88  6E00      
                    7503   @m68kde~1_99:
00004D8A  0D0A 2020 7504          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004D8E  4520 2020 
00004D92  2020 2020 
00004D96  2020 20   
00004D99  2020 2D20 7505          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004D9D  456E 7465 
00004DA1  7220 5374 
00004DA5  72        
00004DA6  696E 6720 7506          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004DAA  696E 746F 
00004DAE  204D 656D 
00004DB2  6F72 7900 7507          dc.b      111,114,121,0
                    7508   @m68kde~1_100:
00004DB6  0D0A 2020 7509          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004DBA  4620 2020 
00004DBE  2020 2020 
00004DC2  2020 20   
00004DC5  2020 2D20 7510          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004DC9  4669 6C6C 
00004DCD  204D 656D 
00004DD1  6F        
00004DD2  7279 2077 7511          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004DD6  6974 6820 
00004DDA  4461 7461 
00004DDE  00        
                    7512   @m68kde~1_101:
00004DE0  0D0A 2020 7513          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004DE4  4720 2020 
00004DE8  2020 2020 
00004DEC  2020 20   
00004DEF  2020 2D20 7514          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004DF3  476F 2050 
00004DF7  726F 6772 
00004DFB  61        
00004DFC  6D20 5374 7515          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004E00  6172 7469 
00004E04  6E67 2061 
00004E08  74        
00004E09  2041 6464 7516          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004E0D  7265 7373 
00004E11  3A20 2425 
00004E15  30        
00004E16  3858 00   7517          dc.b      56,88,0
                    7518   @m68kde~1_102:
00004E1A  0D0A 2020 7519          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004E1E  4C20 2020 
00004E22  2020 2020 
00004E26  2020 20   
00004E29  2020 2D20 7520          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004E2D  4C6F 6164 
00004E31  2050 726F 
00004E35  67        
00004E36  7261 6D20 7521          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004E3A  282E 4845 
00004E3E  5820 6669 
00004E42  6C        
00004E43  6529 2066 7522          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004E47  726F 6D20 
00004E4B  4C61 7074 
00004E4F  6F        
00004E50  7000      7523          dc.b      112,0
                    7524   @m68kde~1_103:
00004E52  0D0A 2020 7525          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004E56  4D20 2020 
00004E5A  2020 2020 
00004E5E  2020 20   
00004E61  2020 2D20 7526          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004E65  4D65 6D6F 
00004E69  7279 2045 
00004E6D  78        
00004E6E  616D 696E 7527          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004E72  6520 616E 
00004E76  6420 4368 
00004E7A  61        
00004E7B  6E67 6500 7528          dc.b      110,103,101,0
                    7529   @m68kde~1_104:
00004E80  0D0A 2020 7530          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004E84  5020 2020 
00004E88  2020 2020 
00004E8C  2020 20   
00004E8F  2020 2D20 7531          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004E93  5072 6F67 
00004E97  7261 6D20 
00004E9B  46        
00004E9C  6C61 7368 7532          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004EA0  204D 656D 
00004EA4  6F72 7920 
00004EA8  7769 7468 7533          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004EAC  2055 7365 
00004EB0  7220 5072 
00004EB4  6F67 7261 7534          dc.b      111,103,114,97,109,0
00004EB8  6D00      
                    7535   @m68kde~1_105:
00004EBA  0D0A 2020 7536          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004EBE  5220 2020 
00004EC2  2020 2020 
00004EC6  2020 20   
00004EC9  2020 2D20 7537          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004ECD  4469 7370 
00004ED1  6C61 7920 
00004ED5  36        
00004ED6  3830 3030 7538          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004EDA  2052 6567 
00004EDE  6973 7465 
00004EE2  72        
00004EE3  7300      7539          dc.b      115,0
                    7540   @m68kde~1_106:
00004EE6  0D0A 2020 7541          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004EEA  5320 2020 
00004EEE  2020 2020 
00004EF2  2020 20   
00004EF5  2020 2D20 7542          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004EF9  546F 6767 
00004EFD  6C65 204F 
00004F01  4E        
00004F02  2F4F 4646 7543          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004F06  2053 696E 
00004F0A  676C 6520 
00004F0E  53        
00004F0F  7465 7020 7544          dc.b      116,101,112,32,77,111,100,101,0
00004F13  4D6F 6465 
00004F17  00        
                    7545   @m68kde~1_107:
00004F18  0D0A 2020 7546          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004F1C  544D 2020 
00004F20  2020 2020 
00004F24  2020 20   
00004F27  2020 2D20 7547          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004F2B  5465 7374 
00004F2F  204D 656D 
00004F33  6F        
00004F34  7279 00   7548          dc.b      114,121,0
                    7549   @m68kde~1_108:
00004F38  0D0A 2020 7550          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004F3C  5453 2020 
00004F40  2020 2020 
00004F44  2020 20   
00004F47  2020 2D20 7551          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004F4B  5465 7374 
00004F4F  2053 7769 
00004F53  74        
00004F54  6368 6573 7552          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004F58  3A20 5357 
00004F5C  372D 3000 
                    7553   @m68kde~1_109:
00004F60  0D0A 2020 7554          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004F64  5444 2020 
00004F68  2020 2020 
00004F6C  2020 20   
00004F6F  2020 2D20 7555          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004F73  5465 7374 
00004F77  2044 6973 
00004F7B  70        
00004F7C  6C61 7973 7556          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004F80  3A20 4C45 
00004F84  4473 2061 
00004F88  6E        
00004F89  6420 372D 7557          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004F8D  5365 676D 
00004F91  656E 7400 
                    7558   @m68kde~1_110:
00004F96  0D0A 2020 7559          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004F9A  5744 2F57 
00004F9E  532F 5743 
00004FA2  2F57 4B   
00004FA5  2020 2D20 7560          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004FA9  5761 7463 
00004FAD  6820 506F 
00004FB1  696E      
00004FB3  743A 2044 7561          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004FB7  6973 706C 
00004FBB  6179 2F53 
00004FBF  65        
00004FC0  742F 436C 7562          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004FC4  6561 722F 
00004FC8  4B69 6C6C 
00004FCC  00        
                    7563   @m68kde~1_111:
00004FCE  0D0A 2300 7564          dc.b      13,10,35,0
                    7565   @m68kde~1_112:
00004FD2  0D0A 5072 7566          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004FD6  6F67 7261 
00004FDA  6D20 5275 
00004FDE  6E        
00004FDF  6E69 6E67 7567          dc.b      110,105,110,103,46,46,46,46,46,0
00004FE3  2E2E 2E2E 
00004FE7  2E00      
                    7568   @m68kde~1_113:
00004FEA  0D0A 5072 7569          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004FEE  6573 7320 
00004FF2  3C52 4553 
00004FF6  4554      
00004FF8  3E20 6275 7570          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004FFC  7474 6F6E 
00005000  203C 4B65 
00005004  79        
00005005  303E 206F 7571          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00005009  6E20 4445 
0000500D  3120 746F 
00005011  2073      
00005013  746F 7000 7572          dc.b      116,111,112,0
                    7573   @m68kde~1_114:
00005018  0D0A 4572 7574          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
0000501C  726F 723A 
00005020  2050 7265 
00005024  73        
00005025  7320 2747 7575          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00005029  2720 6669 
0000502D  7273 7420 
00005031  74        
00005032  6F20 7374 7576          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00005036  6172 7420 
0000503A  7072 6F67 
0000503E  7261 6D00 7577          dc.b      114,97,109,0
                    7578   @m68kde~1_115:
00005042  0D0A 5369 7579          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005046  6E67 6C65 
0000504A  2053 7465 
0000504E  70        
0000504F  2020 3A5B 7580          dc.b      32,32,58,91,79,78,93,0
00005053  4F4E 5D00 
                    7581   @m68kde~1_116:
00005058  0D0A 5072 7582          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
0000505C  6573 7320 
00005060  2747 2720 
00005064  74        
00005065  6F20 5472 7583          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00005069  6163 6520 
0000506D  5072 6F67 
00005071  72        
00005072  616D 2066 7584          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00005076  726F 6D20 
0000507A  6164 6472 
0000507E  6573 7320 7585          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00005082  2425 582E 
00005086  2E2E 2E2E 
0000508A  00        
                    7586   @m68kde~1_117:
0000508C  0D0A 5075 7587          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00005090  7368 203C 
00005094  5245 5345 
00005098  5420      
0000509A  4275 7474 7588          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
0000509E  6F6E 3E20 
000050A2  746F 2053 
000050A6  74        
000050A7  6F70 2E2E 7589          dc.b      111,112,46,46,46,46,46,0
000050AB  2E2E 2E00 
                    7590   @m68kde~1_118:
000050B0  0D0A 5369 7591          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000050B4  6E67 6C65 
000050B8  2053 7465 
000050BC  70        
000050BD  203A 205B 7592          dc.b      32,58,32,91,79,70,70,93,0
000050C1  4F46 465D 
000050C5  00        
                    7593   @m68kde~1_119:
000050C6  0D0A 4272 7594          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000050CA  6561 6B20 
000050CE  506F 696E 
000050D2  74        
000050D3  7320 3A5B 7595          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
000050D7  456E 6162 
000050DB  6C65 645D 
000050DF  00        
                    7596   @m68kde~1_120:
000050E0  0D0A 5072 7597          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000050E4  6573 7320 
000050E8  3C45 5343 
000050EC  3E20      
000050EE  746F 2052 7598          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000050F2  6573 756D 
000050F6  6520 5573 
000050FA  6572 2050 7599          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
000050FE  726F 6772 
00005102  616D 2E2E 
00005106  2E        
00005107  2E2E 00   7600          dc.b      46,46,0
                    7601   @m68kde~1_121:
0000510A  0D0A 5369 7602          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000510E  6E67 6C65 
00005112  2053 7465 
00005116  70        
00005117  2020 3A5B 7603          dc.b      32,32,58,91,79,70,70,93,0
0000511B  4F46 465D 
0000511F  00        
                    7604   @m68kde~1_122:
00005120  0D0A 0D0A 7605          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005124  5072 6F67 
00005128  7261 6D20 
0000512C  41        
0000512D  424F 5254 7606          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00005131  2021 2121 
00005135  2121 210D 
00005139  0A00      
                    7607   @m68kde~1_123:
0000513C  2573 0D0A 7608          dc.b      37,115,13,10,0
00005140  00        
                    7609   @m68kde~1_124:
00005142  0D0A 0D0A 7610          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005146  5072 6F67 
0000514A  7261 6D20 
0000514E  41        
0000514F  424F 5254 7611          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005153  2021 2121 
00005157  2121 00   
                    7612   @m68kde~1_125:
0000515A  0D0A 556E 7613          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
0000515E  6861 6E64 
00005162  6C65 6420 
00005166  49        
00005167  6E74 6572 7614          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
0000516B  7275 7074 
0000516F  3A20 4952 
00005173  5125 6420 7615          dc.b      81,37,100,32,33,33,33,33,33,0
00005177  2121 2121 
0000517B  2100      
                    7616   @m68kde~1_126:
0000517E  4144 4452 7617          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00005182  4553 5320 
00005186  4552 524F 
0000518A  523A 20   
0000518D  3136 206F 7618          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005191  7220 3332 
00005195  2042 6974 
00005199  2054      
0000519B  7261 6E73 7619          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
0000519F  6665 7220 
000051A3  746F 2F66 
000051A7  726F 6D20 7620          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000051AB  616E 204F 
000051AF  4444 2041 
000051B3  64        
000051B4  6472 6573 7621          dc.b      100,114,101,115,115,46,46,46,46,0
000051B8  732E 2E2E 
000051BC  2E00      
                    7622   @m68kde~1_127:
000051BE  556E 6861 7623          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000051C2  6E64 6C65 
000051C6  6420 5472 
000051CA  6170 2021 7624          dc.b      97,112,32,33,33,33,33,33,0
000051CE  2121 2121 
000051D2  00        
                    7625   @m68kde~1_128:
000051D4  4255 5320 7626          dc.b      66,85,83,32,69,114,114,111,114,33,0
000051D8  4572 726F 
000051DC  7221 00   
                    7627   @m68kde~1_129:
000051E0  4144 4452 7628          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
000051E4  4553 5320 
000051E8  4572 726F 
000051EC  7221      
000051EE  00        7629          dc.b      0
                    7630   @m68kde~1_130:
000051F0  494C 4C45 7631          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000051F4  4741 4C20 
000051F8  494E 5354 
000051FC  5255 43   
000051FF  5449 4F4E 7632          dc.b      84,73,79,78,0
00005203  00        
                    7633   @m68kde~1_131:
00005204  4449 5649 7634          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00005208  4445 2042 
0000520C  5920 5A45 
00005210  524F 00   
                    7635   @m68kde~1_132:
00005214  2743 484B 7636          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00005218  2720 494E 
0000521C  5354 5255 
00005220  4354 49   
00005223  4F4E 00   7637          dc.b      79,78,0
                    7638   @m68kde~1_133:
00005226  5452 4150 7639          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
0000522A  5620 494E 
0000522E  5354 5255 
00005232  4354 49   
00005235  4F4E 00   7640          dc.b      79,78,0
                    7641   @m68kde~1_134:
00005238  5052 4956 7642          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
0000523C  494C 4547 
00005240  4520 5649 
00005244  4F4C 41   
00005247  5449 4F4E 7643          dc.b      84,73,79,78,0
0000524B  00        
                    7644   @m68kde~1_135:
0000524C  554E 494E 7645          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005250  4954 4941 
00005254  4C49 5345 
00005258  4420 49   
0000525B  5251 00   7646          dc.b      82,81,0
                    7647   @m68kde~1_136:
0000525E  5350 5552 7648          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005262  494F 5553 
00005266  2049 5251 
0000526A  00        
                    7649   @m68kde~1_137:
0000526C  0D0A 5374 7650          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005270  6172 7420 
00005274  4164 6472 
00005278  65        
00005279  7373 2069 7651          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
0000527D  6E20 4D65 
00005281  6D6F 7279 
00005285  3A20 00   7652          dc.b      58,32,0
                    7653   @m68kde~1_138:
00005288  0D0A 456E 7654          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
0000528C  7465 7220 
00005290  5374 7269 
00005294  6E        
00005295  6720 2845 7655          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00005299  5343 2074 
0000529D  6F20 656E 
000052A1  64        
000052A2  2920 3A00 7656          dc.b      41,32,58,0
                    7657   @m68kde~1_139:
000052A6  0A45 6E74 7658          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
000052AA  6572 2077 
000052AE  6861 7420 
000052B2  73        
000052B3  697A 6520 7659          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
000052B7  6F66 206D 
000052BB  656D 6F72 
000052BF  7920 796F 7660          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
000052C3  7520 7761 
000052C7  6E74 2074 
000052CB  6F20 7265 7661          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
000052CF  6164 2F77 
000052D3  7269 7465 
000052D7  0A20 4279 7662          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
000052DB  7465 203D 
000052DF  2030 0A20 
000052E3  576F      
000052E5  7264 203D 7663          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
000052E9  2031 0A20 
000052ED  4C6F 6E67 
000052F1  20        
000052F2  576F 7264 7664          dc.b      87,111,114,100,32,61,32,50,10,0
000052F6  203D 2032 
000052FA  0A00      
                    7665   @m68kde~1_140:
000052FC  0A00      7666          dc.b      10,0
                    7667   @m68kde~1_141:
000052FE  0A45 6E74 7668          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005302  6572 2077 
00005306  6869 6368 
0000530A  2064 6174 7669          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
0000530E  6120 7061 
00005312  7474 6572 
00005316  6E        
00005317  2079 6F75 7670          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000531B  2077 616E 
0000531F  7420 746F 
00005323  2077 7269 7671          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005327  7465 2069 
0000532B  6E74 6F20 
0000532F  6D65 6D6F 7672          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
00005333  7279 0A20 
00005337  3078 3030 
0000533B  20        
0000533C  3D20 300A 7673          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
00005340  2030 7842 
00005344  3220 3D20 
00005348  310A 20   
0000534B  3078 4333 7674          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
0000534F  203D 2032 
00005353  0A20 3078 
00005357  4434      
00005359  203D 2033 7675          dc.b      32,61,32,51,10,0
0000535D  0A00      
                    7676   @m68kde~1_142:
00005360  0A45 6E74 7677          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005364  6572 2077 
00005368  6869 6368 
0000536C  2064 6174 7678          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005370  6120 7061 
00005374  7474 6572 
00005378  6E        
00005379  2079 6F75 7679          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000537D  2077 616E 
00005381  7420 746F 
00005385  2077 7269 7680          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005389  7465 2069 
0000538D  6E74 6F20 
00005391  6D65 6D6F 7681          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005395  7279 0A20 
00005399  3078 3030 
0000539D  30        
0000539E  3020 3D20 7682          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
000053A2  300A 2030 
000053A6  7831 3233 
000053AA  3420 3D   
000053AD  2031 0A20 7683          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
000053B1  3078 4131 
000053B5  4232 203D 
000053B9  2032 0A   
000053BC  2030 7843 7684          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
000053C0  3344 3420 
000053C4  3D20 330A 
000053C8  00        
                    7685   @m68kde~1_143:
000053CA  0A45 6E74 7686          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000053CE  6572 2077 
000053D2  6869 6368 
000053D6  2064 6174 7687          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000053DA  6120 7061 
000053DE  7474 6572 
000053E2  6E        
000053E3  2079 6F75 7688          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000053E7  2077 616E 
000053EB  7420 746F 
000053EF  2077 7269 7689          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000053F3  7465 2069 
000053F7  6E74 6F20 
000053FB  6D65 6D6F 7690          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000053FF  7279 0A20 
00005403  3078 3030 
00005407  30        
00005408  305F 3030 7691          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
0000540C  3030 203D 
00005410  2030 0A20 
00005414  3078 41   
00005417  4142 425F 7692          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
0000541B  4343 4444 
0000541F  203D 2031 
00005423  0A20 30   
00005426  7831 3132 7693          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
0000542A  325F 3333 
0000542E  3434 203D 
00005432  2032 0A   
00005435  2030 7837 7694          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
00005439  3635 345F 
0000543D  3332 3130 
00005441  203D 20   
00005444  330A 00   7695          dc.b      51,10,0
                    7696   @m68kde~1_144:
00005448  0A50 726F 7697          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
0000544C  7669 6465 
00005450  2053 7461 
00005454  72        
00005455  7420 4164 7698          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
00005459  6472 6573 
0000545D  7320 696E 
00005461  2068 6578 7699          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
00005465  2028 646F 
00005469  206E 6F74 
0000546D  2075 7365 7700          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
00005471  2030 7820 
00005475  7072 6566 
00005479  6978 290A 7701          dc.b      105,120,41,10,48,120,0
0000547D  3078 00   
                    7702   @m68kde~1_145:
00005480  0A50 726F 7703          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
00005484  7669 6465 
00005488  2045 6E64 
0000548C  2041 6464 7704          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
00005490  7265 7373 
00005494  2069 6E20 
00005498  6865 7820 7705          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
0000549C  2864 6F20 
000054A0  6E6F 7420 
000054A4  7573 6520 7706          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
000054A8  3078 2070 
000054AC  7265 6669 
000054B0  7829 0A30 7707          dc.b      120,41,10,48,120,0
000054B4  7800      
                    7708   @m68kde~1_146:
000054B6  0A53 7461 7709          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
000054BA  7274 2041 
000054BE  6464 7265 
000054C2  73        
000054C3  7320 3078 7710          dc.b      115,32,48,120,37,48,56,120,10,0
000054C7  2530 3878 
000054CB  0A00      
                    7711   @m68kde~1_147:
000054CE  0A45 6E64 7712          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
000054D2  2041 6464 
000054D6  7265 7373 
000054DA  3A20 3078 7713          dc.b      58,32,48,120,37,48,56,120,10,0
000054DE  2530 3878 
000054E2  0A00      
                    7714   @m68kde~1_148:
000054E4  4552 524F 7715          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
000054E8  522E 2E2E 
000054EC  2041 6464 
000054F0  7265      
000054F2  7373 2030 7716          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
000054F6  7825 7820 
000054FA  6973 2062 
000054FE  65        
000054FF  796F 6E64 7717          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005503  2074 6865 
00005507  206D 656D 
0000550B  6F72 7920 7718          dc.b      111,114,121,32,114,97,110,103,101,10,0
0000550F  7261 6E67 
00005513  650A 00   
                    7719   @m68kde~1_149:
00005516  4552 524F 7720          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
0000551A  522E 2E2E 
0000551E  2056 616C 
00005522  7565      
00005524  2077 7269 7721          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
00005528  7474 656E 
0000552C  2074 6F20 
00005530  6164 6472 7722          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00005534  6573 7320 
00005538  3078 2578 
0000553C  203D 3D20 7723          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00005540  3078 2578 
00005544  2E20 5661 
00005548  6C75      
0000554A  6520 4578 7724          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
0000554E  7065 6374 
00005552  6564 3A20 
00005556  30        
00005557  7825 780A 7725          dc.b      120,37,120,10,0
0000555B  00        
                    7726   @m68kde~1_150:
0000555C  4164 6472 7727          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005560  6573 733A 
00005564  2030 7825 
00005568  78        
00005569  2056 616C 7728          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
0000556D  7565 3A20 
00005571  3078 2530 
00005575  3258      
00005577  0A00      7729          dc.b      10,0
                    7730   @m68kde~1_151:
0000557A  4164 6472 7731          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
0000557E  6573 733A 
00005582  2030 7825 
00005586  78        
00005587  2056 616C 7732          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
0000558B  7565 3A20 
0000558F  3078 2530 
00005593  3458      
00005595  0A00      7733          dc.b      10,0
                    7734   @m68kde~1_152:
00005598  4164 6472 7735          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
0000559C  6573 733A 
000055A0  2030 7825 
000055A4  78        
000055A5  2056 616C 7736          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
000055A9  7565 3A20 
000055AD  3078 2530 
000055B1  3858      
000055B3  0A00      7737          dc.b      10,0
                    7738   @m68kde~1_153:
000055B6  4445 312D 7739          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000055BA  3638 6B20 
000055BE  4275 6720 
000055C2  5631      
000055C4  2E37 3700 7740          dc.b      46,55,55,0
                    7741   @m68kde~1_154:
000055C8  436F 7079 7742          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000055CC  7269 6768 
000055D0  7420 2843 
000055D4  2920 504A 7743          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000055D8  2044 6176 
000055DC  6965 7320 
000055E0  3230      
000055E2  3136 00   7744          dc.b      49,54,0
                    7745   @m68kde~1_155:
000055E6  0D0A 5275 7746          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000055EA  6E6E 696E 
000055EE  672E 2E2E 
000055F2  2E        
000055F3  2E00      7747          dc.b      46,0
                    7748   @m68kde~1_156:
000055F6  5275 6E6E 7749          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000055FA  696E 672E 
000055FE  2E2E 2E2E 
00005602  00        
                    7750   @m68kde~1_157:
00005604  4279 3A20 7751          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005608  504A 2044 
0000560C  6176 6965 
00005610  73        
00005611  00        7752          dc.b      0
                    7753   @m68kde~1_158:
00005612  0D0A 2573 7754          dc.b      13,10,37,115,0
00005616  00        
                    7755   @m68kde~1_159:
00005618  0A20 5374 7756          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
0000561C  7564 656E 
00005620  7420 4E61 
00005624  6D        
00005625  6573 3A0A 7757          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
00005629  205A 6163 
0000562D  6861 7269 
00005631  61        
00005632  6820 4A6F 7758          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
00005636  7365 7068 
0000563A  3A20 3435 
0000563E  35        
0000563F  3030 3035 7759          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00005643  3520 0A20 
00005647  556D 6169 
0000564B  7220      
0000564D  4D61 7A68 7760          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
00005651  6172 3A20 
00005655  3230 3333 
00005659  3333      
0000565B  3038 0A00 7761          dc.b      48,56,10,0
                    7762          section   data
00005660            7763                   align
          0000 5660 7764   DataStart       equ       *
                    7765   
                    7766   *********************************************************************************************************
                    7767   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7768   * to ram as part of the CStart routine in this file
                    7769   *********************************************************************************************************
                    7770   
                    7771   @vsscanf_bufx:
00005660  0B00 0546 7772          dc.l      @vsscanf_buf
                    7773   @vsscanf_1:
00005664  0A00      7774          dc.b      10,0
                    7775   __ctype:
00005666  0040 4040 7776          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
0000566A  4040 4040 
0000566E  4040 5050 
00005672  5050 50   
00005675  4040 4040 7777          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00005679  4040 4040 
0000567D  4040 4040 
00005681  4040 40   
00005684  4040 40D0 7778          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005688  A0A0 A0A0 
0000568C  A0A0 A0A0 
00005690  A0A0 A0A0 7779          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005694  A0A0 A08C 
00005698  8C8C 8C   
0000569B  8C8C 8C8C 7780          dc.b      140,140,140,140,140,140,160,160,160,160,160
0000569F  8C8C A0A0 
000056A3  A0A0 A0   
000056A6  A0A0 8A8A 7781          dc.b      160,160,138,138,138,138,138,138,130,130,130
000056AA  8A8A 8A8A 
000056AE  8282 82   
000056B1  8282 8282 7782          dc.b      130,130,130,130,130,130,130,130,130,130,130
000056B5  8282 8282 
000056B9  8282 82   
000056BC  8282 8282 7783          dc.b      130,130,130,130,130,130,160,160,160,160,160
000056C0  8282 A0A0 
000056C4  A0A0 A0   
000056C7  A089 8989 7784          dc.b      160,137,137,137,137,137,137,129,129,129,129
000056CB  8989 8981 
000056CF  8181 81   
000056D2  8181 8181 7785          dc.b      129,129,129,129,129,129,129,129,129,129,129
000056D6  8181 8181 
000056DA  8181 81   
000056DD  8181 8181 7786          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
000056E1  81A0 A0A0 
000056E5  A040 0000 
000056E9  00        
000056EA  0000 0000 7787          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000056EE  0000 0000 
000056F2  0000 0000 
000056F6  0000 0000 
000056FA  0000 0000 
000056FE  0000      
00005700  0000 0000 7788          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005704  0000 0000 
00005708  0000 0000 
0000570C  0000 0000 
00005710  0000 0000 
00005714  0000      
00005716  0000 0000 7789          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000571A  0000 0000 
0000571E  0000 0000 
00005722  0000 0000 
00005726  0000 0000 
0000572A  0000      
0000572C  0000 0000 7790          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005730  0000 0000 
00005734  0000 0000 
00005738  0000 0000 
0000573C  0000 0000 
00005740  0000      
00005742  0000 0000 7791          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005746  0000 0000 
0000574A  0000 0000 
0000574E  0000 0000 
00005752  0000 0000 
00005756  0000      
00005758  0000 0000 7792          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000575C  0000 0000 
00005760  0000 0000 
00005764  0000 00   
                    7793   @itoa_1:
00005768  2D32 3134 7794          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0000576C  3734 3833 
00005770  3634 3800 
                    7795          section   bss
00005774            7796                   align
          0000 5774 7797   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7798   
                    7799   *********************************************************************************************************
                    7800   * Section for Uninitialised Data held in ROM as constants
                    7801   *********************************************************************************************************
                    7802   
0B000000            7803                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 7804   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7805   
                    7806   
0B000000            7807   bss             org       bss
                    7808   
                    7809   *********************************************************************************************************
                    7810   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7811   * install the exception handler using the C function InstallExceptionHandler()
                    7812   *********************************************************************************************************
                    7813   
                    7814   
                    7815   
0B000000            7816   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7817   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7818   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7819   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7820   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7821   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7822   VCheck           ds.l    1      ditto
0B00001C            7823   VTrapV           ds.l    1      ditto
0B000020            7824   VPrivilege       ds.l    1      ditto
0B000024            7825   VTrace           ds.l    1
0B000028            7826   VLine1010emul    ds.l    1
0B00002C            7827   VLine1111emul    ds.l    1
0B000030            7828   VUnassigned1     ds.l    1
0B000034            7829   VUnassigned2     ds.l    1
0B000038            7830   VUnassigned3     ds.l    1
0B00003C            7831   VUninit_IRQ      ds.l    1
0B000040            7832   VUnassigned4     ds.l    1
0B000044            7833   VUnassigned5     ds.l    1
0B000048            7834   VUnassigned6     ds.l    1
0B00004C            7835   VUnassigned7     ds.l    1
0B000050            7836   VUnassigned8     ds.l    1
0B000054            7837   VUnassigned9     ds.l    1
0B000058            7838   VUnassigned10    ds.l    1
0B00005C            7839   VUnassigned11    ds.l    1
0B000060            7840   VSpuriousIRQ     ds.l    1
                    7841   
                    7842   * Interrupt handlers Vector 25-31
0B000064            7843   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7844   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7845   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7846   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7847   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7848   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7849   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7850   
                    7851   * Trap Handler vectors 32-47
0B000080            7852   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7853   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7854   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7855   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7856   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7857   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7858   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7859   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7860   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7861   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7862   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7863   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7864   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7865   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7866   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7867   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7868   
                    7869   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7870   
                    7871   ***********************************************************************************************************
                    7872   * Other Variables
                    7873   ***********************************************************************************************************
                    7874   *__DebugA5       ds.l    1
                    7875   *__UserA5        ds.l    1
                    7876   
                    7877   ***********************************************************************************************************
0B0000C0            7878   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7879   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7880   __heap:         ds.l    0       ; pointers for malloc functions
                    7881   
                    7882   *__himem:       ds.l    himem            ; highest memory location + 1
                    7883   *__stklen:      ds.l    stklen           ; default stack size
                    7884   
                    7885   *********************************************************************************************************
                    7886   * Section for Heap
                    7887   *********************************************************************************************************
                    7888   
                    7889   _i:
0B0000C4            7890          ds.b      4
                    7891   _x:
0B0000C8            7892          ds.b      4
                    7893   _y:
0B0000CC            7894          ds.b      4
                    7895   _z:
0B0000D0            7896          ds.b      4
                    7897   _PortA_Count:
0B0000D4            7898          ds.b      4
                    7899   _Trace:
0B0000D8            7900          ds.b      4
                    7901   _GoFlag:
0B0000DC            7902          ds.b      4
                    7903   _Echo:
0B0000E0            7904          ds.b      4
                    7905   _d0:
0B0000E4            7906          ds.b      4
                    7907   _d1:
0B0000E8            7908          ds.b      4
                    7909   _d2:
0B0000EC            7910          ds.b      4
                    7911   _d3:
0B0000F0            7912          ds.b      4
                    7913   _d4:
0B0000F4            7914          ds.b      4
                    7915   _d5:
0B0000F8            7916          ds.b      4
                    7917   _d6:
0B0000FC            7918          ds.b      4
                    7919   _d7:
0B000100            7920          ds.b      4
                    7921   _a0:
0B000104            7922          ds.b      4
                    7923   _a1:
0B000108            7924          ds.b      4
                    7925   _a2:
0B00010C            7926          ds.b      4
                    7927   _a3:
0B000110            7928          ds.b      4
                    7929   _a4:
0B000114            7930          ds.b      4
                    7931   _a5:
0B000118            7932          ds.b      4
                    7933   _a6:
0B00011C            7934          ds.b      4
                    7935   _PC:
0B000120            7936          ds.b      4
                    7937   _SSP:
0B000124            7938          ds.b      4
                    7939   _USP:
0B000128            7940          ds.b      4
                    7941   _SR:
0B00012C            7942          ds.b      2
                    7943   _BreakPointAddress:
0B00012E            7944          ds.b      32
                    7945   _BreakPointInstruction:
0B00014E            7946          ds.b      16
                    7947   _BreakPointSetOrCleared:
0B00015E            7948          ds.b      32
                    7949   _InstructionSize:
0B00017E            7950          ds.b      4
                    7951   _WatchPointAddress:
0B000182            7952          ds.b      32
                    7953   _WatchPointSetOrCleared:
0B0001A2            7954          ds.b      32
                    7955   _WatchPointString:
0B0001C2            7956          ds.b      800
                    7957   _TempString:
0B0004E2            7958          ds.b      100
                    7959   @vsscanf_buf:
0B000546            7960          ds.b      80
                    7961          section   heap
0B000596            7962                   align
          0B00 0596 7963   bssEnd          equ *                   end of storage space for unitialised variables
                    7964   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 7965   heap   equ       *
0B000596            7966                    align
          0000 0000

Assembly errors: 0
