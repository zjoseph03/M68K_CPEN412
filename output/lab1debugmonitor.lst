680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 27 Mar 2025      Time: 18:33:41          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  3202      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  28B2      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3F7A      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  4950      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  4954      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  496A      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  496C      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3F7A      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  35BE      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  496E      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  49A8      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  49C0      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  49C8      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  49CE      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  4950      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3F7A      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  49D2      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  49A8      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  49E6      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  49FC      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  4A10      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3F7A      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  4A40      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  36B8      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  34F2      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  35BE      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  4A70      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4A96      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3F7A      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4AB8      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  4AD4      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  4B1A      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  4B2C      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  362A      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  4B3E      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; // TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011 // This might need to be 0x53
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while (TestForSPITransmitDataComplete() == 0);
                    1614   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1615          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1616          tst.l     D0
00001122  6602      1617          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1621          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1622          rts
                    1623   ; }
                    1624   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1625   ; void ClearSPIReadFIFO(void) {
                    1626   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1627          link      A6,#-4
                    1628   ; volatile unsigned char dummy;
                    1629   ; while((SPI_Status & 0x01) == 0) {
                    1630   ClearSPIReadFIFO_1:
00001134  1039 0040 1631          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1632          and.b     #1,D0
0000113E  660A      1633          bne.s     ClearSPIReadFIFO_3
                    1634   ; dummy = SPI_Data;
00001140  1D79 0040 1635          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1636          bra       ClearSPIReadFIFO_1
                    1637   ClearSPIReadFIFO_3:
0000114A  4E5E      1638          unlk      A6
0000114C  4E75      1639          rts
                    1640   ; }
                    1641   ; }
                    1642   ; void SPIFlashPollStatusWLE(void) {
                    1643   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char status;
                    1646   ; unsigned char dummy;
                    1647   ; do {
                    1648   SPIFlashPollStatusWLE_1:
                    1649   ; // Start a new read status register command each time
                    1650   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1651          move.b    #254,4227112
00001156  0040 8028 
                    1652   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1653          pea       5
0000115E  4EB8 10C4 1654          jsr       _SPISafeWrite
00001162  584F      1655          addq.w    #4,A7
                    1656   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1657          pea       255
00001168  4EB8 10C4 1658          jsr       _SPISafeWrite
0000116C  584F      1659          addq.w    #4,A7
0000116E  1D40 FFFE 1660          move.b    D0,-2(A6)
                    1661   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1662          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1663          move.b    -2(A6),D0
0000117E  C03C 0002 1664          and.b     #2,D0
00001182  67CE      1665          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1666          unlk      A6
00001186  4E75      1667          rts
                    1668   ; // printf("\r\n WLE Status: %02x \n", status);
                    1669   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1670   ; }
                    1671   ; void SPIFlashPollStatusBusy(void) {
                    1672   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1673          link      A6,#-4
                    1674   ; unsigned char status;
                    1675   ; unsigned char dummy;
                    1676   ; do {
                    1677   SPIFlashPollStatusBusy_1:
                    1678   ; // Start a new read status register command each time
                    1679   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1680          move.b    #254,4227112
00001190  0040 8028 
                    1681   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1682          pea       5
00001198  4EB8 10C4 1683          jsr       _SPISafeWrite
0000119C  584F      1684          addq.w    #4,A7
                    1685   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1686          pea       255
000011A2  4EB8 10C4 1687          jsr       _SPISafeWrite
000011A6  584F      1688          addq.w    #4,A7
000011A8  1D40 FFFE 1689          move.b    D0,-2(A6)
                    1690   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1691          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1692          move.b    -2(A6),D0
000011B8  C03C 0001 1693          and.b     #1,D0
000011BC  66CE      1694          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1695          unlk      A6
000011C0  4E75      1696          rts
                    1697   ; // printf("\r\n Busy Status: %02x \n", status);
                    1698   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011C2  4E56 0000 1707          link      A6,#0
                    1708   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1709          move.l    8(A6),D1
000011CA  C2BC 0000 1710          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1711          move.l    D1,-(A7)
000011D2  4EB8 10C4 1712          jsr       _SPISafeWrite
000011D6  584F      1713          addq.w    #4,A7
                    1714   ; return SPI_Data;
000011D8  1039 0040 1715          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1716          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1717          unlk      A6
000011E6  4E75      1718          rts
                    1719   ; }
                    1720   ; void SPIFlashWriteEnable() {
                    1721   _SPIFlashWriteEnable:
                    1722   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1723          move.b    #254,4227112
000011EC  0040 8028 
                    1724   ; SPISafeWrite(0x06);
000011F0  4878 0006 1725          pea       6
000011F4  4EB8 10C4 1726          jsr       _SPISafeWrite
000011F8  584F      1727          addq.w    #4,A7
                    1728   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1729          move.b    #255,4227112
000011FE  0040 8028 
                    1730   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1731   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1732          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1733          rts
                    1734   ; }
                    1735   ; void SPISendAddress(int c) {
                    1736   _SPISendAddress:
00001208  4E56 0000 1737          link      A6,#0
0000120C  48E7 2020 1738          movem.l   D2/A2,-(A7)
00001210  242E 0008 1739          move.l    8(A6),D2
00001214  45F8 10C4 1740          lea       _SPISafeWrite.L,A2
                    1741   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1742          move.l    D2,D1
0000121A  E081      1743          asr.l     #8,D1
0000121C  E081      1744          asr.l     #8,D1
0000121E  C2BC 0000 1745          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1746          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1747          move.l    D1,-(A7)
0000122C  4E92      1748          jsr       (A2)
0000122E  584F      1749          addq.w    #4,A7
                    1750   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1751          move.l    D2,D1
00001232  E081      1752          asr.l     #8,D1
00001234  C2BC 0000 1753          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1754          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1755          move.l    D1,-(A7)
00001242  4E92      1756          jsr       (A2)
00001244  584F      1757          addq.w    #4,A7
                    1758   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1759          move.l    D2,D1
00001248  C2BC 0000 1760          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1761          and.l     #255,D1
00001252  00FF      
00001254  2F01      1762          move.l    D1,-(A7)
00001256  4E92      1763          jsr       (A2)
00001258  584F      1764          addq.w    #4,A7
0000125A  4CDF 0404 1765          movem.l   (A7)+,D2/A2
0000125E  4E5E      1766          unlk      A6
00001260  4E75      1767          rts
                    1768   ; }
                    1769   ; void SPIFlashPageProgram(int addr) {
                    1770   _SPIFlashPageProgram:
00001262  4E56 FFF8 1771          link      A6,#-8
00001266  2F02      1772          move.l    D2,-(A7)
                    1773   ; unsigned char *sramMemoryPtr;
                    1774   ; int flashAddr = addr - 0x08000000;
00001268  202E 0008 1775          move.l    8(A6),D0
0000126C  0480 0800 1776          sub.l     #134217728,D0
00001270  0000      
00001272  2D40 FFFC 1777          move.l    D0,-4(A6)
                    1778   ; int i;
                    1779   ; SPI_CS = 0xFE;
00001276  13FC 00FE 1780          move.b    #254,4227112
0000127A  0040 8028 
                    1781   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000127E  4878 0002 1782          pea       2
00001282  4EB8 10C4 1783          jsr       _SPISafeWrite
00001286  584F      1784          addq.w    #4,A7
                    1785   ; SPISendAddress(flashAddr);
00001288  2F2E FFFC 1786          move.l    -4(A6),-(A7)
0000128C  4EB8 1208 1787          jsr       _SPISendAddress
00001290  584F      1788          addq.w    #4,A7
                    1789   ; for (i = 0; i < 256; i++) {
00001292  4282      1790          clr.l     D2
                    1791   SPIFlashPageProgram_1:
00001294  0C82 0000 1792          cmp.l     #256,D2
00001298  0100      
0000129A  6C22      1793          bge.s     SPIFlashPageProgram_3
                    1794   ; sramMemoryPtr = (unsigned char*) (addr + i);
0000129C  202E 0008 1795          move.l    8(A6),D0
000012A0  D082      1796          add.l     D2,D0
000012A2  2D40 FFF8 1797          move.l    D0,-8(A6)
                    1798   ; WriteSPIChar(*sramMemoryPtr); // Random value for testing purposes
000012A6  206E FFF8 1799          move.l    -8(A6),A0
000012AA  1210      1800          move.b    (A0),D1
000012AC  C2BC 0000 1801          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1802          move.l    D1,-(A7)
000012B4  4EB8 11C2 1803          jsr       _WriteSPIChar
000012B8  584F      1804          addq.w    #4,A7
000012BA  5282      1805          addq.l    #1,D2
000012BC  60D6      1806          bra       SPIFlashPageProgram_1
                    1807   SPIFlashPageProgram_3:
                    1808   ; // printf("%02x ", *sramMemoryPtr);
                    1809   ; }
                    1810   ; SPI_CS = 0xFF;
000012BE  13FC 00FF 1811          move.b    #255,4227112
000012C2  0040 8028 
                    1812   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1813   ; SPIFlashPollStatusBusy();
000012C6  4EB8 1188 1814          jsr       _SPIFlashPollStatusBusy
000012CA  241F      1815          move.l    (A7)+,D2
000012CC  4E5E      1816          unlk      A6
000012CE  4E75      1817          rts
                    1818   ; }
                    1819   ; void SPIFlashErase(void) {
                    1820   _SPIFlashErase:
                    1821   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1822   ; printf("\nErasing...\n");
000012D0  4879 0000 1823          pea       @m68kde~1_22.L
000012D4  4B72      
000012D6  4EB9 0000 1824          jsr       _printf
000012DA  3F7A      
000012DC  584F      1825          addq.w    #4,A7
                    1826   ; SPI_CS = 0xFE;
000012DE  13FC 00FE 1827          move.b    #254,4227112
000012E2  0040 8028 
                    1828   ; SPISafeWrite(0xC7);
000012E6  4878 00C7 1829          pea       199
000012EA  4EB8 10C4 1830          jsr       _SPISafeWrite
000012EE  584F      1831          addq.w    #4,A7
                    1832   ; SPI_CS = 0xFF;
000012F0  13FC 00FF 1833          move.b    #255,4227112
000012F4  0040 8028 
                    1834   ; SPIFlashPollStatusBusy();
000012F8  4EB8 1188 1835          jsr       _SPIFlashPollStatusBusy
000012FC  4E75      1836          rts
                    1837   ; }
                    1838   ; int SPIFlashRead() {
                    1839   _SPIFlashRead:
000012FE  4E56 FFFC 1840          link      A6,#-4
00001302  48E7 3000 1841          movem.l   D2/D3,-(A7)
                    1842   ; unsigned char readData;
                    1843   ; unsigned char *sramMemoryPtr;
                    1844   ; int addr;
                    1845   ; ClearSPIReadFIFO();
00001306  4EB8 1130 1846          jsr       _ClearSPIReadFIFO
                    1847   ; SPI_CS = 0xFE;
0000130A  13FC 00FE 1848          move.b    #254,4227112
0000130E  0040 8028 
                    1849   ; SPISafeWrite(0x03);
00001312  4878 0003 1850          pea       3
00001316  4EB8 10C4 1851          jsr       _SPISafeWrite
0000131A  584F      1852          addq.w    #4,A7
                    1853   ; SPISendAddress(0x0);
0000131C  42A7      1854          clr.l     -(A7)
0000131E  4EB8 1208 1855          jsr       _SPISendAddress
00001322  584F      1856          addq.w    #4,A7
                    1857   ; for (addr = 0x08000000; addr < (0x08040000); addr ++) {
00001324  243C 0800 1858          move.l    #134217728,D2
00001328  0000      
                    1859   SPIFlashRead_1:
0000132A  0C82 0804 1860          cmp.l     #134479872,D2
0000132E  0000      
00001330  6C1A      1861          bge.s     SPIFlashRead_3
                    1862   ; sramMemoryPtr = (unsigned char*) addr;
00001332  2D42 FFFC 1863          move.l    D2,-4(A6)
                    1864   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001336  4878 00FF 1865          pea       255
0000133A  4EB8 10C4 1866          jsr       _SPISafeWrite
0000133E  584F      1867          addq.w    #4,A7
00001340  1600      1868          move.b    D0,D3
                    1869   ; *sramMemoryPtr = readData;
00001342  206E FFFC 1870          move.l    -4(A6),A0
00001346  1083      1871          move.b    D3,(A0)
00001348  5282      1872          addq.l    #1,D2
0000134A  60DE      1873          bra       SPIFlashRead_1
                    1874   SPIFlashRead_3:
                    1875   ; }
                    1876   ; SPI_CS = 0xFF;
0000134C  13FC 00FF 1877          move.b    #255,4227112
00001350  0040 8028 
                    1878   ; SPIFlashPollStatusBusy();
00001354  4EB8 1188 1879          jsr       _SPIFlashPollStatusBusy
                    1880   ; return readData;
00001358  C6BC 0000 1881          and.l     #255,D3
0000135C  00FF      
0000135E  2003      1882          move.l    D3,D0
00001360  4CDF 000C 1883          movem.l   (A7)+,D2/D3
00001364  4E5E      1884          unlk      A6
00001366  4E75      1885          rts
                    1886   ; }
                    1887   ; /*******************************************************************
                    1888   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1889   ; ********************************************************************/
                    1890   ; void ProgramFlashChip(void)
                    1891   ; {
                    1892   _ProgramFlashChip:
00001368  4E56 FFFC 1893          link      A6,#-4
                    1894   ; int addr;
                    1895   ; SPIFlashPollStatusBusy();
0000136C  4EB8 1188 1896          jsr       _SPIFlashPollStatusBusy
                    1897   ; SPIFlashWriteEnable();
00001370  4EB8 11E8 1898          jsr       _SPIFlashWriteEnable
                    1899   ; SPIFlashErase();
00001374  4EB8 12D0 1900          jsr       _SPIFlashErase
                    1901   ; // 256KB = 262144 bytes (0x40000)
                    1902   ; // We need to write one page at a time (256 bytes at a time)
                    1903   ; // This code writes the user program from DRAM to FLASH
                    1904   ; // printf("\r\n Starting Programming...");
                    1905   ; // for (addr = 0x08000000; addr < (0x08040000); addr += 256) {
                    1906   ; //     SPIFlashWriteEnable(); 
                    1907   ; //     // printf("\r\n Addr: %08x \n", addr);
                    1908   ; //     SPIFlashPageProgram(addr);
                    1909   ; // }
                    1910   ; printf("\r\n Programming Complete!");
00001378  4879 0000 1911          pea       @m68kde~1_23.L
0000137C  4B80      
0000137E  4EB9 0000 1912          jsr       _printf
00001382  3F7A      
00001384  584F      1913          addq.w    #4,A7
00001386  4E5E      1914          unlk      A6
00001388  4E75      1915          rts
                    1916   ; }
                    1917   ; /*************************************************************************
                    1918   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1919   ; **************************************************************************/
                    1920   ; void LoadFromFlashChip(void)
                    1921   ; {
                    1922   _LoadFromFlashChip:
0000138A  4E56 FFFC 1923          link      A6,#-4
                    1924   ; int readData;
                    1925   ; printf("\r\n Loading Program From SPI Flash....") ;
0000138E  4879 0000 1926          pea       @m68kde~1_24.L
00001392  4B9A      
00001394  4EB9 0000 1927          jsr       _printf
00001398  3F7A      
0000139A  584F      1928          addq.w    #4,A7
                    1929   ; SPIFlashPollStatusBusy();
0000139C  4EB8 1188 1930          jsr       _SPIFlashPollStatusBusy
                    1931   ; readData = SPIFlashRead();
000013A0  4EB8 12FE 1932          jsr       _SPIFlashRead
000013A4  2D40 FFFC 1933          move.l    D0,-4(A6)
                    1934   ; printf("\r\n Read Data: %08x \n", readData);
000013A8  2F2E FFFC 1935          move.l    -4(A6),-(A7)
000013AC  4879 0000 1936          pea       @m68kde~1_25.L
000013B0  4BC0      
000013B2  4EB9 0000 1937          jsr       _printf
000013B6  3F7A      
000013B8  504F      1938          addq.w    #8,A7
000013BA  4E5E      1939          unlk      A6
000013BC  4E75      1940          rts
                    1941   ; }
                    1942   ; void printBinary(unsigned char value) {
                    1943   _printBinary:
000013BE  4E56 0000 1944          link      A6,#0
000013C2  48E7 2020 1945          movem.l   D2/A2,-(A7)
000013C6  45F9 0000 1946          lea       _printf.L,A2
000013CA  3F7A      
                    1947   ; int i;
                    1948   ; printf("IIC_CRSR Transmit (Binary): ");
000013CC  4879 0000 1949          pea       @m68kde~1_26.L
000013D0  4BD6      
000013D2  4E92      1950          jsr       (A2)
000013D4  584F      1951          addq.w    #4,A7
                    1952   ; for (i = 7; i >= 0; i--) { // Loop through each bit (from MSB to LSB)
000013D6  7407      1953          moveq     #7,D2
                    1954   printBinary_1:
000013D8  0C82 0000 1955          cmp.l     #0,D2
000013DC  0000      
000013DE  6D22      1956          blt.s     printBinary_3
                    1957   ; printf("%d", (value >> i) & 1); // Shift and mask to extract each bit
000013E0  122E 000B 1958          move.b    11(A6),D1
000013E4  C2BC 0000 1959          and.l     #255,D1
000013E8  00FF      
000013EA  E4A1      1960          asr.l     D2,D1
000013EC  C2BC 0000 1961          and.l     #1,D1
000013F0  0001      
000013F2  2F01      1962          move.l    D1,-(A7)
000013F4  4879 0000 1963          pea       @m68kde~1_27.L
000013F8  4BF4      
000013FA  4E92      1964          jsr       (A2)
000013FC  504F      1965          addq.w    #8,A7
000013FE  5382      1966          subq.l    #1,D2
00001400  60D6      1967          bra       printBinary_1
                    1968   printBinary_3:
                    1969   ; }
                    1970   ; printf("\n");
00001402  4879 0000 1971          pea       @m68kde~1_28.L
00001406  4BF8      
00001408  4E92      1972          jsr       (A2)
0000140A  584F      1973          addq.w    #4,A7
0000140C  4CDF 0404 1974          movem.l   (A7)+,D2/A2
00001410  4E5E      1975          unlk      A6
00001412  4E75      1976          rts
                    1977   ; }
                    1978   ; void IICCoreEnable() {
                    1979   _IICCoreEnable:
                    1980   ; IIC_CTR |= 0x80;     // Enable I2C core in control register (1000_0000)
00001414  0039 0080 1981          or.b      #128,4227076
00001418  0040 8004 
0000141C  4E75      1982          rts
                    1983   ; }
                    1984   ; void IICCoreDisable() {
                    1985   _IICCoreDisable:
                    1986   ; IIC_CTR &= 0x7F;    // Disable I2C core in control register (0011_1111)
0000141E  0239 007F 1987          and.b     #127,4227076
00001422  0040 8004 
00001426  4E75      1988          rts
                    1989   ; }
                    1990   ; // I2C Driver Functions
                    1991   ; void IIC_Init(void) {
                    1992   _IIC_Init:
                    1993   ; IIC_PRER_LO = 0x59;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001428  13FC 0059 1994          move.b    #89,4227072
0000142C  0040 8000 
                    1995   ; IIC_PRER_HI = 0x00;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001430  4239 0040 1996          clr.b     4227074
00001434  8002      
                    1997   ; IIC_CTR &= 0xBF;     // Disable interrupt in control register (1011_1111)
00001436  0239 00BF 1998          and.b     #191,4227076
0000143A  0040 8004 
                    1999   ; IICCoreEnable();
0000143E  4EB8 1414 2000          jsr       _IICCoreEnable
00001442  4E75      2001          rts
                    2002   ; }
                    2003   ; void wait5ms(void) {
                    2004   _wait5ms:
00001444  2F02      2005          move.l    D2,-(A7)
                    2006   ; int i;
                    2007   ; for (i = 0; i < 10000; i++); // Wait for 5 ms
00001446  4282      2008          clr.l     D2
                    2009   wait5ms_1:
00001448  0C82 0000 2010          cmp.l     #10000,D2
0000144C  2710      
0000144E  6C04      2011          bge.s     wait5ms_3
00001450  5282      2012          addq.l    #1,D2
00001452  60F4      2013          bra       wait5ms_1
                    2014   wait5ms_3:
00001454  241F      2015          move.l    (A7)+,D2
00001456  4E75      2016          rts
                    2017   ; }
                    2018   ; void checkTIP() {
                    2019   _checkTIP:
                    2020   ; while (IIC_CRSR & TIP);
                    2021   checkTIP_1:
00001458  1039 0040 2022          move.b    4227080,D0
0000145C  8008      
0000145E  C03C 0002 2023          and.b     #2,D0
00001462  6702      2024          beq.s     checkTIP_3
00001464  60F2      2025          bra       checkTIP_1
                    2026   checkTIP_3:
00001466  4E75      2027          rts
                    2028   ; }
                    2029   ; void checkAck() {
                    2030   _checkAck:
                    2031   ; while ((IIC_CRSR & RXACK) == 1);
                    2032   checkAck_1:
00001468  1039 0040 2033          move.b    4227080,D0
0000146C  8008      
0000146E  C07C 00FF 2034          and.w     #255,D0
00001472  C07C 0080 2035          and.w     #128,D0
00001476  0C40 0001 2036          cmp.w     #1,D0
0000147A  6602      2037          bne.s     checkAck_3
0000147C  60EA      2038          bra       checkAck_1
                    2039   checkAck_3:
0000147E  4E75      2040          rts
                    2041   ; }
                    2042   ; void IICStopCondition() {
                    2043   _IICStopCondition:
                    2044   ; IIC_CRSR |= STOP | READ | IACK; // STOP + READ + IACK
00001480  0039 0061 2045          or.b      #97,4227080
00001484  0040 8008 
                    2046   ; checkTIP();
00001488  4EB8 1458 2047          jsr       _checkTIP
0000148C  4E75      2048          rts
                    2049   ; }
                    2050   ; void IICStartCondition(int rwBit) {
                    2051   _IICStartCondition:
0000148E  4E56 0000 2052          link      A6,#0
                    2053   ; if (rwBit == 0) {
00001492  202E 0008 2054          move.l    8(A6),D0
00001496  660A      2055          bne.s     IICStartCondition_1
                    2056   ; IIC_CRSR |= START | WRITE | IACK; // START + WRITE + IACK
00001498  0039 0091 2057          or.b      #145,4227080
0000149C  0040 8008 
000014A0  6008      2058          bra.s     IICStartCondition_2
                    2059   IICStartCondition_1:
                    2060   ; } else {
                    2061   ; IIC_CRSR |= START | READ | IACK; // Start condition with read bit set
000014A2  0039 00A1 2062          or.b      #161,4227080
000014A6  0040 8008 
                    2063   IICStartCondition_2:
                    2064   ; }
                    2065   ; checkTIP();
000014AA  4EB8 1458 2066          jsr       _checkTIP
                    2067   ; checkAck();
000014AE  4EB8 1468 2068          jsr       _checkAck
000014B2  4E5E      2069          unlk      A6
000014B4  4E75      2070          rts
                    2071   ; }
                    2072   ; // EEPROM Address: 101000{B0} 
                    2073   ; // EEPROM Specific Functions
                    2074   ; void EEPROMByteWrite(int data, short int deviceAddr, short int memoryAddr) {
                    2075   _EEPROMByteWrite:
000014B6  4E56 0000 2076          link      A6,#0
000014BA  48E7 0030 2077          movem.l   A2/A3,-(A7)
000014BE  45F8 1458 2078          lea       _checkTIP.L,A2
000014C2  47F8 1468 2079          lea       _checkAck.L,A3
                    2080   ; // Check if there is a transmission in progress
                    2081   ; // IICCoreEnable();
                    2082   ; checkTIP();
000014C6  4E92      2083          jsr       (A2)
                    2084   ; // Set the start condition
                    2085   ; // IICStartCondition(0);
                    2086   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2087   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2088   ; // Control code, chip select, and block select (ie: Slave Address) and the R/W bit (== 0) are sent
                    2089   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000014C8  302E 000E 2090          move.w    14(A6),D0
000014CC  E340      2091          asl.w     #1,D0
000014CE  C07C 00FE 2092          and.w     #254,D0
000014D2  13C0 0040 2093          move.b    D0,4227078
000014D6  8006      
                    2094   ; IIC_CRSR = START | WRITE | IACK;
000014D8  13FC 0091 2095          move.b    #145,4227080
000014DC  0040 8008 
                    2096   ; // printf("Sent Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2097   ; checkTIP();
000014E0  4E92      2098          jsr       (A2)
                    2099   ; checkAck();
000014E2  4E93      2100          jsr       (A3)
                    2101   ; // printf("Status Register 2: %x\n", IIC_CRSR);
                    2102   ; // Check for ACK
                    2103   ; // printf("\r\n Slave Address Ack Status: : %d\n", checkAck()); //TIP is checked in checkAck function
                    2104   ; // Send the high-order byte of the address
                    2105   ; IIC_TXRX = (memoryAddr >> 8) & 0xFF;
000014E4  302E 0012 2106          move.w    18(A6),D0
000014E8  E040      2107          asr.w     #8,D0
000014EA  C07C 00FF 2108          and.w     #255,D0
000014EE  13C0 0040 2109          move.b    D0,4227078
000014F2  8006      
                    2110   ; IIC_CRSR = WRITE | IACK;
000014F4  13FC 0011 2111          move.b    #17,4227080
000014F8  0040 8008 
                    2112   ; checkTIP();
000014FC  4E92      2113          jsr       (A2)
                    2114   ; checkAck();
000014FE  4E93      2115          jsr       (A3)
                    2116   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2117   ; // Send the lower-order byte of the address
                    2118   ; IIC_TXRX = (memoryAddr & 0xFF);
00001500  302E 0012 2119          move.w    18(A6),D0
00001504  C07C 00FF 2120          and.w     #255,D0
00001508  13C0 0040 2121          move.b    D0,4227078
0000150C  8006      
                    2122   ; IIC_CRSR = WRITE | IACK;
0000150E  13FC 0011 2123          move.b    #17,4227080
00001512  0040 8008 
                    2124   ; checkTIP();
00001516  4E92      2125          jsr       (A2)
                    2126   ; checkAck();
00001518  4E93      2127          jsr       (A3)
                    2128   ; //printf("Sent Lower Memory Byte: %02x\n", memoryAddr & 0xFF);
                    2129   ; // printf("Status Register 4: %x\n", IIC_CRSR);
                    2130   ; // Transmit byte to be written
                    2131   ; IIC_TXRX = data;
0000151A  202E 0008 2132          move.l    8(A6),D0
0000151E  13C0 0040 2133          move.b    D0,4227078
00001522  8006      
                    2134   ; IIC_CRSR = STOP | WRITE | IACK;
00001524  13FC 0051 2135          move.b    #81,4227080
00001528  0040 8008 
                    2136   ; checkTIP();
0000152C  4E92      2137          jsr       (A2)
                    2138   ; checkAck();
0000152E  4E93      2139          jsr       (A3)
                    2140   ; wait5ms();
00001530  4EB8 1444 2141          jsr       _wait5ms
00001534  4CDF 0C00 2142          movem.l   (A7)+,A2/A3
00001538  4E5E      2143          unlk      A6
0000153A  4E75      2144          rts
                    2145   ; // printf("Sent Data: %02x\n", data);
                    2146   ; // printf("Sent Stop Condition");
                    2147   ; // printf("Status Register 6: %x\n", IIC_CRSR);
                    2148   ; // IICCoreDisable();
                    2149   ; //printf("\r\nI2C Byte Write Complete\n");
                    2150   ; }
                    2151   ; void EEPROMFlashPageWrite(int* data, int startingGlobalAddress, int numBytes) {
                    2152   _EEPROMFlashPageWrite:
0000153C  4E56 0000 2153          link      A6,#0
00001540  48E7 3F38 2154          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4,-(A7)
00001544  45F8 1458 2155          lea       _checkTIP.L,A2
00001548  47F8 1468 2156          lea       _checkAck.L,A3
0000154C  2C2E 000C 2157          move.l    12(A6),D6
                    2158   ; int currentAddress = startingGlobalAddress; 
00001550  2606      2159          move.l    D6,D3
                    2160   ; int endAddress = startingGlobalAddress + numBytes;
00001552  2006      2161          move.l    D6,D0
00001554  D0AE 0010 2162          add.l     16(A6),D0
00001558  2840      2163          move.l    D0,A4
                    2164   ; int blockAddress;
                    2165   ; int deviceAddress;
                    2166   ; int pageFlag;
                    2167   ; int currIndex = 0;
0000155A  7E00      2168          moveq     #0,D7
                    2169   ; if (currentAddress < 0x10000) {
0000155C  0C83 0001 2170          cmp.l     #65536,D3
00001560  0000      
00001562  6C06      2171          bge.s     EEPROMFlashPageWrite_1
                    2172   ; blockAddress = startingGlobalAddress; // Lower 64KB block
00001564  2406      2173          move.l    D6,D2
                    2174   ; deviceAddress = EEPROM0;
00001566  7A50      2175          moveq     #80,D5
00001568  600C      2176          bra.s     EEPROMFlashPageWrite_2
                    2177   EEPROMFlashPageWrite_1:
                    2178   ; } else {
                    2179   ; blockAddress = startingGlobalAddress - 0x10000; // Upper 64KB block
0000156A  2006      2180          move.l    D6,D0
0000156C  0480 0001 2181          sub.l     #65536,D0
00001570  0000      
00001572  2400      2182          move.l    D0,D2
                    2183   ; deviceAddress = EEPROM1;
00001574  7A51      2184          moveq     #81,D5
                    2185   EEPROMFlashPageWrite_2:
                    2186   ; }
                    2187   ; checkTIP();
00001576  4E92      2188          jsr       (A2)
                    2189   ; while (currentAddress < endAddress) {
                    2190   EEPROMFlashPageWrite_3:
00001578  B68C      2191          cmp.l     A4,D3
0000157A  6C00 00DE 2192          bge       EEPROMFlashPageWrite_5
                    2193   ; pageFlag = 1;
0000157E  7801      2194          moveq     #1,D4
                    2195   ; // START condition
                    2196   ; IIC_TXRX = (deviceAddress << 1) & 0xFE;    // Upper 64KB block
00001580  2005      2197          move.l    D5,D0
00001582  E380      2198          asl.l     #1,D0
00001584  C0BC 0000 2199          and.l     #254,D0
00001588  00FE      
0000158A  13C0 0040 2200          move.b    D0,4227078
0000158E  8006      
                    2201   ; IIC_CRSR = START | WRITE | IACK;
00001590  13FC 0091 2202          move.b    #145,4227080
00001594  0040 8008 
                    2203   ; checkTIP();
00001598  4E92      2204          jsr       (A2)
                    2205   ; checkAck();
0000159A  4E93      2206          jsr       (A3)
                    2207   ; // Send the two address bytes
                    2208   ; // Send the high-order byte of the address
                    2209   ; IIC_TXRX = (blockAddress >> 8) & 0xFF;
0000159C  2002      2210          move.l    D2,D0
0000159E  E080      2211          asr.l     #8,D0
000015A0  C0BC 0000 2212          and.l     #255,D0
000015A4  00FF      
000015A6  13C0 0040 2213          move.b    D0,4227078
000015AA  8006      
                    2214   ; IIC_CRSR = WRITE | IACK;
000015AC  13FC 0011 2215          move.b    #17,4227080
000015B0  0040 8008 
                    2216   ; checkTIP();
000015B4  4E92      2217          jsr       (A2)
                    2218   ; checkAck();
000015B6  4E93      2219          jsr       (A3)
                    2220   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2221   ; // Send the lower-order byte of the address
                    2222   ; IIC_TXRX = (blockAddress & 0xFF);
000015B8  2002      2223          move.l    D2,D0
000015BA  C0BC 0000 2224          and.l     #255,D0
000015BE  00FF      
000015C0  13C0 0040 2225          move.b    D0,4227078
000015C4  8006      
                    2226   ; IIC_CRSR = WRITE | IACK;
000015C6  13FC 0011 2227          move.b    #17,4227080
000015CA  0040 8008 
                    2228   ; checkTIP();
000015CE  4E92      2229          jsr       (A2)
                    2230   ; checkAck();
000015D0  4E93      2231          jsr       (A3)
                    2232   ; while (pageFlag) {        
                    2233   EEPROMFlashPageWrite_6:
000015D2  4A84      2234          tst.l     D4
000015D4  6700 0080 2235          beq       EEPROMFlashPageWrite_8
                    2236   ; IIC_TXRX = data[currIndex];
000015D8  206E 0008 2237          move.l    8(A6),A0
000015DC  2007      2238          move.l    D7,D0
000015DE  E588      2239          lsl.l     #2,D0
000015E0  2030 0800 2240          move.l    0(A0,D0.L),D0
000015E4  13C0 0040 2241          move.b    D0,4227078
000015E8  8006      
                    2242   ; if (blockAddress % 128 == 127) {
000015EA  2F02      2243          move.l    D2,-(A7)
000015EC  4878 0080 2244          pea       128
000015F0  4EB9 0000 2245          jsr       LDIV
000015F4  34F2      
000015F6  202F 0004 2246          move.l    4(A7),D0
000015FA  504F      2247          addq.w    #8,A7
000015FC  0C80 0000 2248          cmp.l     #127,D0
00001600  007F      
00001602  6614      2249          bne.s     EEPROMFlashPageWrite_9
                    2250   ; IIC_CRSR = STOP | WRITE | IACK;
00001604  13FC 0051 2251          move.b    #81,4227080
00001608  0040 8008 
                    2252   ; pageFlag = 0;
0000160C  4284      2253          clr.l     D4
                    2254   ; checkTIP();
0000160E  4E92      2255          jsr       (A2)
                    2256   ; checkAck();
00001610  4E93      2257          jsr       (A3)
                    2258   ; wait5ms();
00001612  4EB8 1444 2259          jsr       _wait5ms
00001616  6028      2260          bra.s     EEPROMFlashPageWrite_12
                    2261   EEPROMFlashPageWrite_9:
                    2262   ; } else if (currentAddress == endAddress - 1) {
00001618  200C      2263          move.l    A4,D0
0000161A  5380      2264          subq.l    #1,D0
0000161C  B680      2265          cmp.l     D0,D3
0000161E  6614      2266          bne.s     EEPROMFlashPageWrite_11
                    2267   ; pageFlag = 0;
00001620  4284      2268          clr.l     D4
                    2269   ; IIC_CRSR = STOP | WRITE | IACK;
00001622  13FC 0051 2270          move.b    #81,4227080
00001626  0040 8008 
                    2271   ; checkTIP();
0000162A  4E92      2272          jsr       (A2)
                    2273   ; checkAck();
0000162C  4E93      2274          jsr       (A3)
                    2275   ; wait5ms();
0000162E  4EB8 1444 2276          jsr       _wait5ms
00001632  600C      2277          bra.s     EEPROMFlashPageWrite_12
                    2278   EEPROMFlashPageWrite_11:
                    2279   ; }
                    2280   ; else {
                    2281   ; IIC_CRSR =  WRITE | IACK;
00001634  13FC 0011 2282          move.b    #17,4227080
00001638  0040 8008 
                    2283   ; checkTIP();
0000163C  4E92      2284          jsr       (A2)
                    2285   ; checkAck();
0000163E  4E93      2286          jsr       (A3)
                    2287   EEPROMFlashPageWrite_12:
                    2288   ; }
                    2289   ; if (currentAddress == 0xFFFF) {
00001640  0C83 0000 2290          cmp.l     #65535,D3
00001644  FFFF      
00001646  6606      2291          bne.s     EEPROMFlashPageWrite_13
                    2292   ; deviceAddress = EEPROM1;
00001648  7A51      2293          moveq     #81,D5
                    2294   ; blockAddress = 0;
0000164A  4282      2295          clr.l     D2
0000164C  6002      2296          bra.s     EEPROMFlashPageWrite_14
                    2297   EEPROMFlashPageWrite_13:
                    2298   ; } else {
                    2299   ; currentAddress++;
0000164E  5283      2300          addq.l    #1,D3
                    2301   EEPROMFlashPageWrite_14:
                    2302   ; }
                    2303   ; currIndex++;
00001650  5287      2304          addq.l    #1,D7
00001652  6000 FF7E 2305          bra       EEPROMFlashPageWrite_6
                    2306   EEPROMFlashPageWrite_8:
00001656  6000 FF20 2307          bra       EEPROMFlashPageWrite_3
                    2308   EEPROMFlashPageWrite_5:
0000165A  4CDF 1CFC 2309          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4
0000165E  4E5E      2310          unlk      A6
00001660  4E75      2311          rts
                    2312   ; }
                    2313   ; }
                    2314   ; }
                    2315   ; int EEPROMRandomRead(int deviceAddr, int readAddr) {
                    2316   _EEPROMRandomRead:
00001662  4E56 FFFC 2317          link      A6,#-4
00001666  48E7 0030 2318          movem.l   A2/A3,-(A7)
0000166A  45F8 1458 2319          lea       _checkTIP.L,A2
0000166E  47F8 1468 2320          lea       _checkAck.L,A3
                    2321   ; int readData;
                    2322   ; // Wait for bus to be idle
                    2323   ; // IICCoreEnable(); 
                    2324   ; checkTIP(); 
00001672  4E92      2325          jsr       (A2)
                    2326   ; // Print TXRX register
                    2327   ; // Send start condition for a write
                    2328   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
00001674  202E 0008 2329          move.l    8(A6),D0
00001678  E380      2330          asl.l     #1,D0
0000167A  C0BC 0000 2331          and.l     #254,D0
0000167E  00FE      
00001680  13C0 0040 2332          move.b    D0,4227078
00001684  8006      
                    2333   ; IIC_CRSR = START | WRITE | IACK;
00001686  13FC 0091 2334          move.b    #145,4227080
0000168A  0040 8008 
                    2335   ; checkTIP();
0000168E  4E92      2336          jsr       (A2)
                    2337   ; checkAck();
00001690  4E93      2338          jsr       (A3)
                    2339   ; //printf("Sending Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2340   ; // Send the high-order byte of the address
                    2341   ; IIC_TXRX = (readAddr >> 8) & 0xFF;
00001692  202E 000C 2342          move.l    12(A6),D0
00001696  E080      2343          asr.l     #8,D0
00001698  C0BC 0000 2344          and.l     #255,D0
0000169C  00FF      
0000169E  13C0 0040 2345          move.b    D0,4227078
000016A2  8006      
                    2346   ; IIC_CRSR = WRITE | IACK;
000016A4  13FC 0011 2347          move.b    #17,4227080
000016A8  0040 8008 
                    2348   ; //printf("Sent Upper Memory Byte: %02x\n", readAddr >> 8);
                    2349   ; checkTIP();
000016AC  4E92      2350          jsr       (A2)
                    2351   ; checkAck();
000016AE  4E93      2352          jsr       (A3)
                    2353   ; // Send the low-order byte of the address
                    2354   ; IIC_TXRX = (readAddr & 0xFF);
000016B0  202E 000C 2355          move.l    12(A6),D0
000016B4  C0BC 0000 2356          and.l     #255,D0
000016B8  00FF      
000016BA  13C0 0040 2357          move.b    D0,4227078
000016BE  8006      
                    2358   ; IIC_CRSR = WRITE | IACK;
000016C0  13FC 0011 2359          move.b    #17,4227080
000016C4  0040 8008 
                    2360   ; //printf("Sent Lower Memory Byte: %02x\n", readAddr & 0xFF);
                    2361   ; checkTIP();
000016C8  4E92      2362          jsr       (A2)
                    2363   ; checkAck();
000016CA  4E93      2364          jsr       (A3)
                    2365   ; // send START condition again followed by slave address with R/W set to 1
                    2366   ; IIC_TXRX = ((deviceAddr << 1) | 0x01);
000016CC  202E 0008 2367          move.l    8(A6),D0
000016D0  E380      2368          asl.l     #1,D0
000016D2  80BC 0000 2369          or.l      #1,D0
000016D6  0001      
000016D8  13C0 0040 2370          move.b    D0,4227078
000016DC  8006      
                    2371   ; IIC_CRSR = START | WRITE | IACK;
000016DE  13FC 0091 2372          move.b    #145,4227080
000016E2  0040 8008 
                    2373   ; checkTIP();
000016E6  4E92      2374          jsr       (A2)
                    2375   ; checkAck();
000016E8  4E93      2376          jsr       (A3)
                    2377   ; // IICStopCondition();
                    2378   ; IIC_CRSR = STOP | READ | IACK | NACK; // STOP + READ + IACK + NACK
000016EA  13FC 0069 2379          move.b    #105,4227080
000016EE  0040 8008 
                    2380   ; checkTIP();
000016F2  4E92      2381          jsr       (A2)
                    2382   ; // Check if IF flag is sent, and if so read the data
                    2383   ; while (!(IIC_CRSR & 0x1));
                    2384   EEPROMRandomRead_1:
000016F4  1039 0040 2385          move.b    4227080,D0
000016F8  8008      
000016FA  C03C 0001 2386          and.b     #1,D0
000016FE  6602      2387          bne.s     EEPROMRandomRead_3
00001700  60F2      2388          bra       EEPROMRandomRead_1
                    2389   EEPROMRandomRead_3:
                    2390   ; IIC_CRSR = 0;
00001702  4239 0040 2391          clr.b     4227080
00001706  8008      
                    2392   ; readData = IIC_TXRX;
00001708  1039 0040 2393          move.b    4227078,D0
0000170C  8006      
0000170E  C0BC 0000 2394          and.l     #255,D0
00001712  00FF      
00001714  2D40 FFFC 2395          move.l    D0,-4(A6)
                    2396   ; return readData;    
00001718  202E FFFC 2397          move.l    -4(A6),D0
0000171C  4CDF 0C00 2398          movem.l   (A7)+,A2/A3
00001720  4E5E      2399          unlk      A6
00001722  4E75      2400          rts
                    2401   ; }
                    2402   ; void EEPROMReadBlock0(int startAddr, int* readLen) {
                    2403   _EEPROMReadBlock0:
00001724  4E56 FFFC 2404          link      A6,#-4
00001728  48E7 3C30 2405          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
0000172C  45F8 1458 2406          lea       _checkTIP.L,A2
00001730  47F8 1468 2407          lea       _checkAck.L,A3
00001734  262E 0008 2408          move.l    8(A6),D3
00001738  282E 000C 2409          move.l    12(A6),D4
                    2410   ; int currAddr = startAddr;
0000173C  2403      2411          move.l    D3,D2
                    2412   ; int endAddr = startAddr + *readLen;
0000173E  2003      2413          move.l    D3,D0
00001740  2044      2414          move.l    D4,A0
00001742  D090      2415          add.l     (A0),D0
00001744  2A00      2416          move.l    D0,D5
                    2417   ; int readData;
                    2418   ; printf("Start Addr: %d\n Curr Addr: %d, Read Len: %d\n", startAddr, currAddr, *readLen);
00001746  2044      2419          move.l    D4,A0
00001748  2F10      2420          move.l    (A0),-(A7)
0000174A  2F02      2421          move.l    D2,-(A7)
0000174C  2F03      2422          move.l    D3,-(A7)
0000174E  4879 0000 2423          pea       @m68kde~1_29.L
00001752  4BFA      
00001754  4EB9 0000 2424          jsr       _printf
00001758  3F7A      
0000175A  DEFC 0010 2425          add.w     #16,A7
                    2426   ; checkTIP();
0000175E  4E92      2427          jsr       (A2)
                    2428   ; IIC_TXRX = ((EEPROM0 << 1) & 0xFE); // Send EEPROM address with write bit
00001760  13FC 00A0 2429          move.b    #160,4227078
00001764  0040 8006 
                    2430   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
00001768  13FC 0091 2431          move.b    #145,4227080
0000176C  0040 8008 
                    2432   ; checkTIP();
00001770  4E92      2433          jsr       (A2)
                    2434   ; checkAck(); 
00001772  4E93      2435          jsr       (A3)
                    2436   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
00001774  2002      2437          move.l    D2,D0
00001776  E080      2438          asr.l     #8,D0
00001778  C0BC 0000 2439          and.l     #255,D0
0000177C  00FF      
0000177E  13C0 0040 2440          move.b    D0,4227078
00001782  8006      
                    2441   ; IIC_CRSR = WRITE | IACK; // Write command
00001784  13FC 0011 2442          move.b    #17,4227080
00001788  0040 8008 
                    2443   ; checkTIP();
0000178C  4E92      2444          jsr       (A2)
                    2445   ; checkAck();
0000178E  4E93      2446          jsr       (A3)
                    2447   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
00001790  2002      2448          move.l    D2,D0
00001792  C0BC 0000 2449          and.l     #255,D0
00001796  00FF      
00001798  13C0 0040 2450          move.b    D0,4227078
0000179C  8006      
                    2451   ; IIC_CRSR = WRITE | IACK; // Write command
0000179E  13FC 0011 2452          move.b    #17,4227080
000017A2  0040 8008 
                    2453   ; checkTIP();
000017A6  4E92      2454          jsr       (A2)
                    2455   ; checkAck();
000017A8  4E93      2456          jsr       (A3)
                    2457   ; // Repeated start condition here:
                    2458   ; IIC_TXRX = ((EEPROM0 << 1) | 0x01); // (A3) Send EEPROM address with read bit
000017AA  13FC 00A1 2459          move.b    #161,4227078
000017AE  0040 8006 
                    2460   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
000017B2  13FC 0091 2461          move.b    #145,4227080
000017B6  0040 8008 
                    2462   ; checkTIP();
000017BA  4E92      2463          jsr       (A2)
                    2464   ; checkAck();
000017BC  4E93      2465          jsr       (A3)
                    2466   ; // Evaluate data here
                    2467   ; for (currAddr = startAddr; currAddr < endAddr; currAddr++) {
000017BE  2403      2468          move.l    D3,D2
                    2469   EEPROMReadBlock0_1:
000017C0  B485      2470          cmp.l     D5,D2
000017C2  6C00 0072 2471          bge       EEPROMReadBlock0_3
                    2472   ; if (currAddr == 0xFFFF || currAddr == endAddr - 1) {
000017C6  0C82 0000 2473          cmp.l     #65535,D2
000017CA  FFFF      
000017CC  6708      2474          beq.s     EEPROMReadBlock0_6
000017CE  2005      2475          move.l    D5,D0
000017D0  5380      2476          subq.l    #1,D0
000017D2  B480      2477          cmp.l     D0,D2
000017D4  660A      2478          bne.s     EEPROMReadBlock0_4
                    2479   EEPROMReadBlock0_6:
                    2480   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
000017D6  13FC 0069 2481          move.b    #105,4227080
000017DA  0040 8008 
000017DE  6008      2482          bra.s     EEPROMReadBlock0_5
                    2483   EEPROMReadBlock0_4:
                    2484   ; } else {
                    2485   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
000017E0  13FC 0021 2486          move.b    #33,4227080
000017E4  0040 8008 
                    2487   EEPROMReadBlock0_5:
                    2488   ; }
                    2489   ; (*readLen)--;
000017E8  2044      2490          move.l    D4,A0
000017EA  5390      2491          subq.l    #1,(A0)
                    2492   ; checkTIP();
000017EC  4E92      2493          jsr       (A2)
                    2494   ; checkAck(); // Check for ACK
000017EE  4E93      2495          jsr       (A3)
                    2496   ; // Read data from EEPROM
                    2497   ; while (!IIC_CRSR & 0x1); // Wait for IF flag to be set
                    2498   EEPROMReadBlock0_7:
000017F0  4A39 0040 2499          tst.b     4227080
000017F4  8008      
000017F6  6604      2500          bne.s     EEPROMReadBlock0_10
000017F8  7001      2501          moveq     #1,D0
000017FA  6002      2502          bra.s     EEPROMReadBlock0_11
                    2503   EEPROMReadBlock0_10:
000017FC  4280      2504          clr.l     D0
                    2505   EEPROMReadBlock0_11:
000017FE  C03C 0001 2506          and.b     #1,D0
00001802  6702      2507          beq.s     EEPROMReadBlock0_9
00001804  60EA      2508          bra       EEPROMReadBlock0_7
                    2509   EEPROMReadBlock0_9:
                    2510   ; IIC_CRSR = 0; // Clear IF flag
00001806  4239 0040 2511          clr.b     4227080
0000180A  8008      
                    2512   ; readData = IIC_TXRX; // Read data from EEPROM
0000180C  1039 0040 2513          move.b    4227078,D0
00001810  8006      
00001812  C0BC 0000 2514          and.l     #255,D0
00001816  00FF      
00001818  2D40 FFFC 2515          move.l    D0,-4(A6)
                    2516   ; printf("\r\n Block 0 Address: %d: %d\n", currAddr, readData); // Debug: Indicate the address being read and the data read
0000181C  2F2E FFFC 2517          move.l    -4(A6),-(A7)
00001820  2F02      2518          move.l    D2,-(A7)
00001822  4879 0000 2519          pea       @m68kde~1_30.L
00001826  4C28      
00001828  4EB9 0000 2520          jsr       _printf
0000182C  3F7A      
0000182E  DEFC 000C 2521          add.w     #12,A7
00001832  5282      2522          addq.l    #1,D2
00001834  608A      2523          bra       EEPROMReadBlock0_1
                    2524   EEPROMReadBlock0_3:
00001836  4CDF 0C3C 2525          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
0000183A  4E5E      2526          unlk      A6
0000183C  4E75      2527          rts
                    2528   ; }
                    2529   ; }
                    2530   ; // STILL NEED TO TEST BLOCK 1 MORE AND CROSSING THE BLOCK BOUNDARY
                    2531   ; void EEPROMReadBlock1(int startAddr, int* readLen) {
                    2532   _EEPROMReadBlock1:
0000183E  4E56 FFF8 2533          link      A6,#-8
00001842  48E7 3030 2534          movem.l   D2/D3/A2/A3,-(A7)
00001846  45F8 1458 2535          lea       _checkTIP.L,A2
0000184A  47F8 1468 2536          lea       _checkAck.L,A3
0000184E  262E 0008 2537          move.l    8(A6),D3
                    2538   ; int currAddr = startAddr;
00001852  2403      2539          move.l    D3,D2
                    2540   ; int endAddr = startAddr + *readLen;
00001854  2003      2541          move.l    D3,D0
00001856  206E 000C 2542          move.l    12(A6),A0
0000185A  D090      2543          add.l     (A0),D0
0000185C  2D40 FFF8 2544          move.l    D0,-8(A6)
                    2545   ; int readData;
                    2546   ; checkTIP();
00001860  4E92      2547          jsr       (A2)
                    2548   ; IIC_TXRX = ((EEPROM1 << 1) & 0xFE); // Send EEPROM address with write bit
00001862  13FC 00A2 2549          move.b    #162,4227078
00001866  0040 8006 
                    2550   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
0000186A  13FC 0091 2551          move.b    #145,4227080
0000186E  0040 8008 
                    2552   ; checkTIP();
00001872  4E92      2553          jsr       (A2)
                    2554   ; checkAck(); 
00001874  4E93      2555          jsr       (A3)
                    2556   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
00001876  2002      2557          move.l    D2,D0
00001878  E080      2558          asr.l     #8,D0
0000187A  C0BC 0000 2559          and.l     #255,D0
0000187E  00FF      
00001880  13C0 0040 2560          move.b    D0,4227078
00001884  8006      
                    2561   ; IIC_CRSR = WRITE | IACK; // Write command
00001886  13FC 0011 2562          move.b    #17,4227080
0000188A  0040 8008 
                    2563   ; checkTIP();
0000188E  4E92      2564          jsr       (A2)
                    2565   ; checkAck();
00001890  4E93      2566          jsr       (A3)
                    2567   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
00001892  2002      2568          move.l    D2,D0
00001894  C0BC 0000 2569          and.l     #255,D0
00001898  00FF      
0000189A  13C0 0040 2570          move.b    D0,4227078
0000189E  8006      
                    2571   ; IIC_CRSR = WRITE | IACK; // Write command
000018A0  13FC 0011 2572          move.b    #17,4227080
000018A4  0040 8008 
                    2573   ; checkTIP();
000018A8  4E92      2574          jsr       (A2)
                    2575   ; checkAck();
000018AA  4E93      2576          jsr       (A3)
                    2577   ; // Repeated start condition here:
                    2578   ; IIC_TXRX = ((EEPROM1 << 1) | 0x01); // (A3) Send EEPROM address with read bit
000018AC  13FC 00A3 2579          move.b    #163,4227078
000018B0  0040 8006 
                    2580   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
000018B4  13FC 0091 2581          move.b    #145,4227080
000018B8  0040 8008 
                    2582   ; checkTIP();
000018BC  4E92      2583          jsr       (A2)
                    2584   ; checkAck();
000018BE  4E93      2585          jsr       (A3)
                    2586   ; // Evaluate data here
                    2587   ; for (currAddr = startAddr; currAddr < endAddr; currAddr++) {
000018C0  2403      2588          move.l    D3,D2
                    2589   EEPROMReadBlock1_1:
000018C2  B4AE FFF8 2590          cmp.l     -8(A6),D2
000018C6  6C00 006C 2591          bge       EEPROMReadBlock1_3
                    2592   ; if (currAddr == 0xFFFF) {
000018CA  0C82 0000 2593          cmp.l     #65535,D2
000018CE  FFFF      
000018D0  660A      2594          bne.s     EEPROMReadBlock1_4
                    2595   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
000018D2  13FC 0069 2596          move.b    #105,4227080
000018D6  0040 8008 
000018DA  6008      2597          bra.s     EEPROMReadBlock1_5
                    2598   EEPROMReadBlock1_4:
                    2599   ; } else {
                    2600   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
000018DC  13FC 0021 2601          move.b    #33,4227080
000018E0  0040 8008 
                    2602   EEPROMReadBlock1_5:
                    2603   ; }
                    2604   ; (*readLen)--;
000018E4  206E 000C 2605          move.l    12(A6),A0
000018E8  5390      2606          subq.l    #1,(A0)
                    2607   ; checkTIP();
000018EA  4E92      2608          jsr       (A2)
                    2609   ; checkAck(); // Check for ACK
000018EC  4E93      2610          jsr       (A3)
                    2611   ; // Read data from EEPROM
                    2612   ; while (!IIC_CRSR & 0x1); // Wait for IF flag to be set
                    2613   EEPROMReadBlock1_6:
000018EE  4A39 0040 2614          tst.b     4227080
000018F2  8008      
000018F4  6604      2615          bne.s     EEPROMReadBlock1_9
000018F6  7001      2616          moveq     #1,D0
000018F8  6002      2617          bra.s     EEPROMReadBlock1_10
                    2618   EEPROMReadBlock1_9:
000018FA  4280      2619          clr.l     D0
                    2620   EEPROMReadBlock1_10:
000018FC  C03C 0001 2621          and.b     #1,D0
00001900  6702      2622          beq.s     EEPROMReadBlock1_8
00001902  60EA      2623          bra       EEPROMReadBlock1_6
                    2624   EEPROMReadBlock1_8:
                    2625   ; IIC_CRSR = 0; // Clear IF flag
00001904  4239 0040 2626          clr.b     4227080
00001908  8008      
                    2627   ; readData = IIC_TXRX; // Read data from EEPROM
0000190A  1039 0040 2628          move.b    4227078,D0
0000190E  8006      
00001910  C0BC 0000 2629          and.l     #255,D0
00001914  00FF      
00001916  2D40 FFFC 2630          move.l    D0,-4(A6)
                    2631   ; printf("\r\n Block 1 Address: %d: %d\n", currAddr, readData); // Debug: Indicate the address being read and the data read
0000191A  2F2E FFFC 2632          move.l    -4(A6),-(A7)
0000191E  2F02      2633          move.l    D2,-(A7)
00001920  4879 0000 2634          pea       @m68kde~1_31.L
00001924  4C44      
00001926  4EB9 0000 2635          jsr       _printf
0000192A  3F7A      
0000192C  DEFC 000C 2636          add.w     #12,A7
00001930  5282      2637          addq.l    #1,D2
00001932  608E      2638          bra       EEPROMReadBlock1_1
                    2639   EEPROMReadBlock1_3:
00001934  4CDF 0C0C 2640          movem.l   (A7)+,D2/D3/A2/A3
00001938  4E5E      2641          unlk      A6
0000193A  4E75      2642          rts
                    2643   ; // printf("Read Len: %d\n", *readLen); // Debug: Indicate the address being read and the data read
                    2644   ; }
                    2645   ; }
                    2646   ; int EEPROMSequentialRead(int startGlobalAddr, int readLen) {
                    2647   _EEPROMSequentialRead:
0000193C  4E56 0000 2648          link      A6,#0
00001940  48E7 2020 2649          movem.l   D2/A2,-(A7)
00001944  45EE 000C 2650          lea       12(A6),A2
00001948  242E 0008 2651          move.l    8(A6),D2
                    2652   ; if (startGlobalAddr <= 0xFFFF) {
0000194C  0C82 0000 2653          cmp.l     #65535,D2
00001950  FFFF      
00001952  6220      2654          bhi.s     EEPROMSequentialRead_1
                    2655   ; EEPROMReadBlock0(startGlobalAddr, &readLen);
00001954  2F0A      2656          move.l    A2,-(A7)
00001956  2F02      2657          move.l    D2,-(A7)
00001958  4EB8 1724 2658          jsr       _EEPROMReadBlock0
0000195C  504F      2659          addq.w    #8,A7
                    2660   ; if (readLen > 0) {
0000195E  2012      2661          move.l    (A2),D0
00001960  0C80 0000 2662          cmp.l     #0,D0
00001964  0000      
00001966  6F0A      2663          ble.s     EEPROMSequentialRead_3
                    2664   ; EEPROMReadBlock1(0, &readLen);
00001968  2F0A      2665          move.l    A2,-(A7)
0000196A  42A7      2666          clr.l     -(A7)
0000196C  4EB8 183E 2667          jsr       _EEPROMReadBlock1
00001970  504F      2668          addq.w    #8,A7
                    2669   EEPROMSequentialRead_3:
00001972  6012      2670          bra.s     EEPROMSequentialRead_2
                    2671   EEPROMSequentialRead_1:
                    2672   ; }
                    2673   ; } else {
                    2674   ; EEPROMReadBlock1(startGlobalAddr - 0x10000, &readLen);
00001974  2F0A      2675          move.l    A2,-(A7)
00001976  2202      2676          move.l    D2,D1
00001978  0481 0001 2677          sub.l     #65536,D1
0000197C  0000      
0000197E  2F01      2678          move.l    D1,-(A7)
00001980  4EB8 183E 2679          jsr       _EEPROMReadBlock1
00001984  504F      2680          addq.w    #8,A7
                    2681   EEPROMSequentialRead_2:
00001986  4CDF 0404 2682          movem.l   (A7)+,D2/A2
0000198A  4E5E      2683          unlk      A6
0000198C  4E75      2684          rts
                    2685   ; }
                    2686   ; }
                    2687   ; I2CTest() {
                    2688   _I2CTest:
0000198E  4E56 FFE0 2689          link      A6,#-32
00001992  2F0A      2690          move.l    A2,-(A7)
00001994  45F9 0000 2691          lea       _printf.L,A2
00001998  3F7A      
                    2692   ; int IICData[5] = {0xA, 0xB, 0xC, 0xD, 0xE};
0000199A  41EE FFE0 2693          lea       -32(A6),A0
0000199E  43F9 0000 2694          lea       I2CTest_IICData.L,A1
000019A2  5DAC      
000019A4  7004      2695          moveq     #4,D0
000019A6  20D9      2696          move.l    (A1)+,(A0)+
000019A8  51C8 FFFC 2697          dbra      D0,*-2
                    2698   ; int writeData = 0xAB;
000019AC  2D7C 0000 2699          move.l    #171,-12(A6)
000019B0  00AB FFF4 
                    2700   ; int readData;
                    2701   ; int i;
                    2702   ; printf("\r\n I2C Test\n");
000019B4  4879 0000 2703          pea       @m68kde~1_32.L
000019B8  4C60      
000019BA  4E92      2704          jsr       (A2)
000019BC  584F      2705          addq.w    #4,A7
                    2706   ; IIC_Init();  
000019BE  4EB8 1428 2707          jsr       _IIC_Init
                    2708   ; printf("Page Write\n");
000019C2  4879 0000 2709          pea       @m68kde~1_33.L
000019C6  4C6E      
000019C8  4E92      2710          jsr       (A2)
000019CA  584F      2711          addq.w    #4,A7
                    2712   ; EEPROMFlashPageWrite(IICData, 0x000F, 5); // Write data to EEPROM
000019CC  4878 0005 2713          pea       5
000019D0  4878 000F 2714          pea       15
000019D4  486E FFE0 2715          pea       -32(A6)
000019D8  4EB8 153C 2716          jsr       _EEPROMFlashPageWrite
000019DC  DEFC 000C 2717          add.w     #12,A7
                    2718   ; printf("Sequential Read\n");
000019E0  4879 0000 2719          pea       @m68kde~1_34.L
000019E4  4C7A      
000019E6  4E92      2720          jsr       (A2)
000019E8  584F      2721          addq.w    #4,A7
                    2722   ; EEPROMSequentialRead(0x000F, 5);
000019EA  4878 0005 2723          pea       5
000019EE  4878 000F 2724          pea       15
000019F2  4EB8 193C 2725          jsr       _EEPROMSequentialRead
000019F6  504F      2726          addq.w    #8,A7
                    2727   ; // printf("\r\n Starting EEPROM Write: Writing 0x%.2x to address 0x00\n", writeData); // Debug: Indicate the start of EEPROM write
                    2728   ; // for (i = 0x0; i < 0x5; i++) {
                    2729   ; //   printf("\r\n Writing %d to address %d\n", i * 5, i);
                    2730   ; //   EEPROMByteWrite(i * 5, EEPROM1, i); // Write data to EEPROM
                    2731   ; // }
                    2732   ; // printf("\r\nFinished write, Starting EEPROM Read\n");
                    2733   ; // for (i = 0; i < 5; i++) {
                    2734   ; //   readData = EEPROMRandomRead(EEPROM1, i); // Read data from EEPROM
                    2735   ; //   printf("\r\n Address: %d: %d\n", i, readData); // Debug: Indicate the address being read and the data read
                    2736   ; // }
                    2737   ; // readData = EEPROMRandomRead(EEPROM0, 0x0);
                    2738   ; IICCoreDisable();
000019F8  4EB8 141E 2739          jsr       _IICCoreDisable
000019FC  245F      2740          move.l    (A7)+,A2
000019FE  4E5E      2741          unlk      A6
00001A00  4E75      2742          rts
                    2743   ; }
                    2744   ; // Initialize and enable I2C controller
                    2745   ; // No interrupts and set clock frequency to 100Khz
                    2746   ; // Connect controller to 25 or 45 Mhz CPU clock
                    2747   ; // Check if device is ready before writing anything over I2C bus ie) TX register has written previous command.
                    2748   ; // Check the status register TIP bit to see when transmission has finished
                    2749   ; // Wait for ACK from slave after each write
                    2750   ; // Transmit a byte to the I2C bus
                    2751   ; // write the data to be transmitted into TX register and then write something to the command register that indiciates that you want to write
                    2752   ; // If you want to generate a start or stop condition, set the STA or STO bits in command register when you write to it,
                    2753   ; // Clear the ACK bit if you want to generate an ACK when reading data back from the slave
                    2754   ; // EEPROM Functions
                    2755   ; // Write a byte to the EEPROM
                    2756   ; // Start write by writing a slave address and sett bit 0 of the data to be transmitted to 0, to indicate that you are writing an address to the slave
                    2757   ; // Generate start condition, and set the bit select and chip select bits, and set bits [7:4] to 1010
                    2758   ; // Write 2 bytes which correspond to the the 2 byte internal 64k address inside the chip, and then write the data to be stored at that address
                    2759   ; // Read a byte from the EEPROM
                    2760   ; // Write a slave address along with a start condition
                    2761   ; // Write 2 bytes which correspond to the 2 internal address bytes of the EEPROM
                    2762   ; // Send repeated start condition and set RD bit and ACK bit in command register
                    2763   ; // Set stop bit, and don't forget to set IACK bit to clear any pending interrupt flag
                    2764   ; // When data is recieved from slave, you can find it in the I2C Rx register
                    2765   ; // Poll I2C controller to determine when the data has been read from the slave which can be done by checking the IF flag in status register
                    2766   ; // when IF flag == 1, the data has been received.
                    2767   ; // Clear the IF flag with each byte read 
                    2768   ; // If slave does not recieve ACK from I2C controller, it will not send any more data
                    2769   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2770   ; // IMPORTANT
                    2771   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2772   ; // has to be done with an interrupt (IRQ Level 6)
                    2773   ; //
                    2774   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2775   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2776   ; //
                    2777   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2778   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2779   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2780   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2781   ; // program area
                    2782   ; //
                    2783   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2784   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2785   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2786   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2787   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2788   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2789   ; void DumpRegisters()
                    2790   ; {
                    2791   _DumpRegisters:
00001A02  48E7 3F3C 2792          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001A06  45F9 0000 2793          lea       _putch.L,A2
00001A0A  35BE      
00001A0C  47F9 0000 2794          lea       _printf.L,A3
00001A10  3F7A      
00001A12  49F9 0B00 2795          lea       _SR.L,A4
00001A16  012C      
00001A18  4BF9 0B00 2796          lea       _WatchPointString.L,A5
00001A1C  01C2      
                    2797   ; short i, x, j, k ;
                    2798   ; unsigned char c, *BytePointer;
                    2799   ; // buld up strings for displaying watchpoints
                    2800   ; for(x = 0; x < (short)(8); x++)
00001A1E  4242      2801          clr.w     D2
                    2802   DumpRegisters_1:
00001A20  0C42 0008 2803          cmp.w     #8,D2
00001A24  6C00 01C6 2804          bge       DumpRegisters_3
                    2805   ; {
                    2806   ; if(WatchPointSetOrCleared[x] == 1)
00001A28  48C2      2807          ext.l     D2
00001A2A  2002      2808          move.l    D2,D0
00001A2C  E588      2809          lsl.l     #2,D0
00001A2E  41F9 0B00 2810          lea       _WatchPointSetOrCleared.L,A0
00001A32  01A2      
00001A34  2030 0800 2811          move.l    0(A0,D0.L),D0
00001A38  0C80 0000 2812          cmp.l     #1,D0
00001A3C  0001      
00001A3E  6600 0186 2813          bne       DumpRegisters_4
                    2814   ; {
                    2815   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001A42  48C2      2816          ext.l     D2
00001A44  2202      2817          move.l    D2,D1
00001A46  E589      2818          lsl.l     #2,D1
00001A48  41F9 0B00 2819          lea       _WatchPointAddress.L,A0
00001A4C  0182      
00001A4E  2F30 1800 2820          move.l    0(A0,D1.L),-(A7)
00001A52  4879 0000 2821          pea       @m68kde~1_35.L
00001A56  4C8C      
00001A58  220D      2822          move.l    A5,D1
00001A5A  48C2      2823          ext.l     D2
00001A5C  2F00      2824          move.l    D0,-(A7)
00001A5E  2002      2825          move.l    D2,D0
00001A60  C1FC 0064 2826          muls      #100,D0
00001A64  D280      2827          add.l     D0,D1
00001A66  201F      2828          move.l    (A7)+,D0
00001A68  2F01      2829          move.l    D1,-(A7)
00001A6A  4EB9 0000 2830          jsr       _sprintf
00001A6E  3656      
00001A70  DEFC 000C 2831          add.w     #12,A7
                    2832   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001A74  48C2      2833          ext.l     D2
00001A76  2002      2834          move.l    D2,D0
00001A78  E588      2835          lsl.l     #2,D0
00001A7A  41F9 0B00 2836          lea       _WatchPointAddress.L,A0
00001A7E  0182      
00001A80  2A30 0800 2837          move.l    0(A0,D0.L),D5
                    2838   ; for(j = 0; j < (short)(16); j+=2)
00001A84  4243      2839          clr.w     D3
                    2840   DumpRegisters_6:
00001A86  0C43 0010 2841          cmp.w     #16,D3
00001A8A  6C00 0082 2842          bge       DumpRegisters_8
                    2843   ; {
                    2844   ; for(k = 0; k < (short)(2); k++)
00001A8E  4246      2845          clr.w     D6
                    2846   DumpRegisters_9:
00001A90  0C46 0002 2847          cmp.w     #2,D6
00001A94  6C00 0052 2848          bge       DumpRegisters_11
                    2849   ; {
                    2850   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001A98  2045      2851          move.l    D5,A0
00001A9A  48C3      2852          ext.l     D3
00001A9C  2203      2853          move.l    D3,D1
00001A9E  48C6      2854          ext.l     D6
00001AA0  D286      2855          add.l     D6,D1
00001AA2  1230 1800 2856          move.b    0(A0,D1.L),D1
00001AA6  C2BC 0000 2857          and.l     #255,D1
00001AAA  00FF      
00001AAC  2F01      2858          move.l    D1,-(A7)
00001AAE  4879 0000 2859          pea       @m68kde~1_8.L
00001AB2  49C8      
00001AB4  4879 0B00 2860          pea       _TempString.L
00001AB8  04E2      
00001ABA  4EB9 0000 2861          jsr       _sprintf
00001ABE  3656      
00001AC0  DEFC 000C 2862          add.w     #12,A7
                    2863   ; strcat(WatchPointString[x], TempString) ;
00001AC4  4879 0B00 2864          pea       _TempString.L
00001AC8  04E2      
00001ACA  220D      2865          move.l    A5,D1
00001ACC  48C2      2866          ext.l     D2
00001ACE  2F00      2867          move.l    D0,-(A7)
00001AD0  2002      2868          move.l    D2,D0
00001AD2  C1FC 0064 2869          muls      #100,D0
00001AD6  D280      2870          add.l     D0,D1
00001AD8  201F      2871          move.l    (A7)+,D0
00001ADA  2F01      2872          move.l    D1,-(A7)
00001ADC  4EB9 0000 2873          jsr       _strcat
00001AE0  36A2      
00001AE2  504F      2874          addq.w    #8,A7
00001AE4  5246      2875          addq.w    #1,D6
00001AE6  60A8      2876          bra       DumpRegisters_9
                    2877   DumpRegisters_11:
                    2878   ; }
                    2879   ; strcat(WatchPointString[x]," ") ;
00001AE8  4879 0000 2880          pea       @m68kde~1_36.L
00001AEC  4C94      
00001AEE  220D      2881          move.l    A5,D1
00001AF0  48C2      2882          ext.l     D2
00001AF2  2F00      2883          move.l    D0,-(A7)
00001AF4  2002      2884          move.l    D2,D0
00001AF6  C1FC 0064 2885          muls      #100,D0
00001AFA  D280      2886          add.l     D0,D1
00001AFC  201F      2887          move.l    (A7)+,D0
00001AFE  2F01      2888          move.l    D1,-(A7)
00001B00  4EB9 0000 2889          jsr       _strcat
00001B04  36A2      
00001B06  504F      2890          addq.w    #8,A7
00001B08  5443      2891          addq.w    #2,D3
00001B0A  6000 FF7A 2892          bra       DumpRegisters_6
                    2893   DumpRegisters_8:
                    2894   ; }
                    2895   ; strcat(WatchPointString[x], "  ") ;
00001B0E  4879 0000 2896          pea       @m68kde~1_9.L
00001B12  49CE      
00001B14  220D      2897          move.l    A5,D1
00001B16  48C2      2898          ext.l     D2
00001B18  2F00      2899          move.l    D0,-(A7)
00001B1A  2002      2900          move.l    D2,D0
00001B1C  C1FC 0064 2901          muls      #100,D0
00001B20  D280      2902          add.l     D0,D1
00001B22  201F      2903          move.l    (A7)+,D0
00001B24  2F01      2904          move.l    D1,-(A7)
00001B26  4EB9 0000 2905          jsr       _strcat
00001B2A  36A2      
00001B2C  504F      2906          addq.w    #8,A7
                    2907   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001B2E  48C2      2908          ext.l     D2
00001B30  2002      2909          move.l    D2,D0
00001B32  E588      2910          lsl.l     #2,D0
00001B34  41F9 0B00 2911          lea       _WatchPointAddress.L,A0
00001B38  0182      
00001B3A  2A30 0800 2912          move.l    0(A0,D0.L),D5
                    2913   ; for(j = 0; j < (short)(16); j++)
00001B3E  4243      2914          clr.w     D3
                    2915   DumpRegisters_12:
00001B40  0C43 0010 2916          cmp.w     #16,D3
00001B44  6C00 007E 2917          bge       DumpRegisters_14
                    2918   ; {
                    2919   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001B48  2045      2920          move.l    D5,A0
00001B4A  48C3      2921          ext.l     D3
00001B4C  1030 3800 2922          move.b    0(A0,D3.L),D0
00001B50  C03C 007F 2923          and.b     #127,D0
00001B54  1E00      2924          move.b    D0,D7
                    2925   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001B56  0C07 007F 2926          cmp.b     #127,D7
00001B5A  6206      2927          bhi.s     DumpRegisters_17
00001B5C  0C07 0020 2928          cmp.b     #32,D7
00001B60  6416      2929          bhs.s     DumpRegisters_15
                    2930   DumpRegisters_17:
                    2931   ; sprintf(TempString, ".") ;
00001B62  4879 0000 2932          pea       @m68kde~1_37.L
00001B66  4C96      
00001B68  4879 0B00 2933          pea       _TempString.L
00001B6C  04E2      
00001B6E  4EB9 0000 2934          jsr       _sprintf
00001B72  3656      
00001B74  504F      2935          addq.w    #8,A7
00001B76  6026      2936          bra.s     DumpRegisters_16
                    2937   DumpRegisters_15:
                    2938   ; else
                    2939   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001B78  2045      2940          move.l    D5,A0
00001B7A  48C3      2941          ext.l     D3
00001B7C  1230 3800 2942          move.b    0(A0,D3.L),D1
00001B80  C2BC 0000 2943          and.l     #255,D1
00001B84  00FF      
00001B86  2F01      2944          move.l    D1,-(A7)
00001B88  4879 0000 2945          pea       @m68kde~1_38.L
00001B8C  4C98      
00001B8E  4879 0B00 2946          pea       _TempString.L
00001B92  04E2      
00001B94  4EB9 0000 2947          jsr       _sprintf
00001B98  3656      
00001B9A  DEFC 000C 2948          add.w     #12,A7
                    2949   DumpRegisters_16:
                    2950   ; strcat(WatchPointString[x], TempString) ;
00001B9E  4879 0B00 2951          pea       _TempString.L
00001BA2  04E2      
00001BA4  220D      2952          move.l    A5,D1
00001BA6  48C2      2953          ext.l     D2
00001BA8  2F00      2954          move.l    D0,-(A7)
00001BAA  2002      2955          move.l    D2,D0
00001BAC  C1FC 0064 2956          muls      #100,D0
00001BB0  D280      2957          add.l     D0,D1
00001BB2  201F      2958          move.l    (A7)+,D0
00001BB4  2F01      2959          move.l    D1,-(A7)
00001BB6  4EB9 0000 2960          jsr       _strcat
00001BBA  36A2      
00001BBC  504F      2961          addq.w    #8,A7
00001BBE  5243      2962          addq.w    #1,D3
00001BC0  6000 FF7E 2963          bra       DumpRegisters_12
                    2964   DumpRegisters_14:
00001BC4  6020      2965          bra.s     DumpRegisters_5
                    2966   DumpRegisters_4:
                    2967   ; }
                    2968   ; }
                    2969   ; else
                    2970   ; strcpy(WatchPointString[x], "") ;
00001BC6  4879 0000 2971          pea       @m68kde~1_39.L
00001BCA  4C9C      
00001BCC  220D      2972          move.l    A5,D1
00001BCE  48C2      2973          ext.l     D2
00001BD0  2F00      2974          move.l    D0,-(A7)
00001BD2  2002      2975          move.l    D2,D0
00001BD4  C1FC 0064 2976          muls      #100,D0
00001BD8  D280      2977          add.l     D0,D1
00001BDA  201F      2978          move.l    (A7)+,D0
00001BDC  2F01      2979          move.l    D1,-(A7)
00001BDE  4EB9 0000 2980          jsr       _strcpy
00001BE2  34D0      
00001BE4  504F      2981          addq.w    #8,A7
                    2982   DumpRegisters_5:
00001BE6  5242      2983          addq.w    #1,D2
00001BE8  6000 FE36 2984          bra       DumpRegisters_1
                    2985   DumpRegisters_3:
                    2986   ; }
                    2987   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001BEC  2F39 0B00 2988          move.l    _a0.L,-(A7)
00001BF0  0104      
00001BF2  2F39 0B00 2989          move.l    _d0.L,-(A7)
00001BF6  00E4      
00001BF8  4879 0000 2990          pea       @m68kde~1_40.L
00001BFC  4C9E      
00001BFE  4E93      2991          jsr       (A3)
00001C00  DEFC 000C 2992          add.w     #12,A7
                    2993   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001C04  2F39 0B00 2994          move.l    _a1.L,-(A7)
00001C08  0108      
00001C0A  2F39 0B00 2995          move.l    _d1.L,-(A7)
00001C0E  00E8      
00001C10  4879 0000 2996          pea       @m68kde~1_41.L
00001C14  4CBA      
00001C16  4E93      2997          jsr       (A3)
00001C18  DEFC 000C 2998          add.w     #12,A7
                    2999   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001C1C  2F39 0B00 3000          move.l    _a2.L,-(A7)
00001C20  010C      
00001C22  2F39 0B00 3001          move.l    _d2.L,-(A7)
00001C26  00EC      
00001C28  4879 0000 3002          pea       @m68kde~1_42.L
00001C2C  4CD4      
00001C2E  4E93      3003          jsr       (A3)
00001C30  DEFC 000C 3004          add.w     #12,A7
                    3005   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001C34  2F39 0B00 3006          move.l    _a3.L,-(A7)
00001C38  0110      
00001C3A  2F39 0B00 3007          move.l    _d3.L,-(A7)
00001C3E  00F0      
00001C40  4879 0000 3008          pea       @m68kde~1_43.L
00001C44  4CEE      
00001C46  4E93      3009          jsr       (A3)
00001C48  DEFC 000C 3010          add.w     #12,A7
                    3011   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001C4C  2F39 0B00 3012          move.l    _a4.L,-(A7)
00001C50  0114      
00001C52  2F39 0B00 3013          move.l    _d4.L,-(A7)
00001C56  00F4      
00001C58  4879 0000 3014          pea       @m68kde~1_44.L
00001C5C  4D08      
00001C5E  4E93      3015          jsr       (A3)
00001C60  DEFC 000C 3016          add.w     #12,A7
                    3017   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001C64  2F39 0B00 3018          move.l    _a5.L,-(A7)
00001C68  0118      
00001C6A  2F39 0B00 3019          move.l    _d5.L,-(A7)
00001C6E  00F8      
00001C70  4879 0000 3020          pea       @m68kde~1_45.L
00001C74  4D22      
00001C76  4E93      3021          jsr       (A3)
00001C78  DEFC 000C 3022          add.w     #12,A7
                    3023   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001C7C  2F39 0B00 3024          move.l    _a6.L,-(A7)
00001C80  011C      
00001C82  2F39 0B00 3025          move.l    _d6.L,-(A7)
00001C86  00FC      
00001C88  4879 0000 3026          pea       @m68kde~1_46.L
00001C8C  4D3C      
00001C8E  4E93      3027          jsr       (A3)
00001C90  DEFC 000C 3028          add.w     #12,A7
                    3029   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001C94  3214      3030          move.w    (A4),D1
00001C96  C27C 2000 3031          and.w     #8192,D1
00001C9A  0C41 2000 3032          cmp.w     #8192,D1
00001C9E  6608      3033          bne.s     DumpRegisters_18
00001CA0  2239 0B00 3034          move.l    _SSP.L,D1
00001CA4  0124      
00001CA6  6006      3035          bra.s     DumpRegisters_19
                    3036   DumpRegisters_18:
00001CA8  2239 0B00 3037          move.l    _USP.L,D1
00001CAC  0128      
                    3038   DumpRegisters_19:
00001CAE  2F01      3039          move.l    D1,-(A7)
00001CB0  2F39 0B00 3040          move.l    _d7.L,-(A7)
00001CB4  0100      
00001CB6  4879 0000 3041          pea       @m68kde~1_47.L
00001CBA  4D56      
00001CBC  4E93      3042          jsr       (A3)
00001CBE  DEFC 000C 3043          add.w     #12,A7
                    3044   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001CC2  2F39 0B00 3045          move.l    _USP.L,-(A7)
00001CC6  0128      
00001CC8  4879 0000 3046          pea       @m68kde~1_48.L
00001CCC  4D70      
00001CCE  4E93      3047          jsr       (A3)
00001CD0  504F      3048          addq.w    #8,A7
                    3049   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001CD2  2F39 0B00 3050          move.l    _SSP.L,-(A7)
00001CD6  0124      
00001CD8  4879 0000 3051          pea       @m68kde~1_49.L
00001CDC  4D8E      
00001CDE  4E93      3052          jsr       (A3)
00001CE0  504F      3053          addq.w    #8,A7
                    3054   ; printf("\r\n SR = $%04X   ",SR) ;
00001CE2  3214      3055          move.w    (A4),D1
00001CE4  C2BC 0000 3056          and.l     #65535,D1
00001CE8  FFFF      
00001CEA  2F01      3057          move.l    D1,-(A7)
00001CEC  4879 0000 3058          pea       @m68kde~1_50.L
00001CF0  4DB0      
00001CF2  4E93      3059          jsr       (A3)
00001CF4  504F      3060          addq.w    #8,A7
                    3061   ; // display the status word in characters etc.
                    3062   ; printf("   [") ;
00001CF6  4879 0000 3063          pea       @m68kde~1_51.L
00001CFA  4DC2      
00001CFC  4E93      3064          jsr       (A3)
00001CFE  584F      3065          addq.w    #4,A7
                    3066   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001D00  3014      3067          move.w    (A4),D0
00001D02  C07C 8000 3068          and.w     #32768,D0
00001D06  0C40 8000 3069          cmp.w     #32768,D0
00001D0A  660A      3070          bne.s     DumpRegisters_20
00001D0C  4878 0054 3071          pea       84
00001D10  4E92      3072          jsr       (A2)
00001D12  584F      3073          addq.w    #4,A7
00001D14  6008      3074          bra.s     DumpRegisters_21
                    3075   DumpRegisters_20:
00001D16  4878 002D 3076          pea       45
00001D1A  4E92      3077          jsr       (A2)
00001D1C  584F      3078          addq.w    #4,A7
                    3079   DumpRegisters_21:
                    3080   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001D1E  3014      3081          move.w    (A4),D0
00001D20  C07C 2000 3082          and.w     #8192,D0
00001D24  0C40 2000 3083          cmp.w     #8192,D0
00001D28  660A      3084          bne.s     DumpRegisters_22
00001D2A  4878 0053 3085          pea       83
00001D2E  4E92      3086          jsr       (A2)
00001D30  584F      3087          addq.w    #4,A7
00001D32  6008      3088          bra.s     DumpRegisters_23
                    3089   DumpRegisters_22:
00001D34  4878 0055 3090          pea       85
00001D38  4E92      3091          jsr       (A2)
00001D3A  584F      3092          addq.w    #4,A7
                    3093   DumpRegisters_23:
                    3094   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001D3C  3014      3095          move.w    (A4),D0
00001D3E  C07C 0400 3096          and.w     #1024,D0
00001D42  0C40 0400 3097          cmp.w     #1024,D0
00001D46  660A      3098          bne.s     DumpRegisters_24
00001D48  4878 0031 3099          pea       49
00001D4C  4E92      3100          jsr       (A2)
00001D4E  584F      3101          addq.w    #4,A7
00001D50  6008      3102          bra.s     DumpRegisters_25
                    3103   DumpRegisters_24:
00001D52  4878 0030 3104          pea       48
00001D56  4E92      3105          jsr       (A2)
00001D58  584F      3106          addq.w    #4,A7
                    3107   DumpRegisters_25:
                    3108   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001D5A  3014      3109          move.w    (A4),D0
00001D5C  C07C 0200 3110          and.w     #512,D0
00001D60  0C40 0200 3111          cmp.w     #512,D0
00001D64  660A      3112          bne.s     DumpRegisters_26
00001D66  4878 0031 3113          pea       49
00001D6A  4E92      3114          jsr       (A2)
00001D6C  584F      3115          addq.w    #4,A7
00001D6E  6008      3116          bra.s     DumpRegisters_27
                    3117   DumpRegisters_26:
00001D70  4878 0030 3118          pea       48
00001D74  4E92      3119          jsr       (A2)
00001D76  584F      3120          addq.w    #4,A7
                    3121   DumpRegisters_27:
                    3122   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001D78  3014      3123          move.w    (A4),D0
00001D7A  C07C 0100 3124          and.w     #256,D0
00001D7E  0C40 0100 3125          cmp.w     #256,D0
00001D82  660A      3126          bne.s     DumpRegisters_28
00001D84  4878 0031 3127          pea       49
00001D88  4E92      3128          jsr       (A2)
00001D8A  584F      3129          addq.w    #4,A7
00001D8C  6008      3130          bra.s     DumpRegisters_29
                    3131   DumpRegisters_28:
00001D8E  4878 0030 3132          pea       48
00001D92  4E92      3133          jsr       (A2)
00001D94  584F      3134          addq.w    #4,A7
                    3135   DumpRegisters_29:
                    3136   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001D96  3014      3137          move.w    (A4),D0
00001D98  C07C 0010 3138          and.w     #16,D0
00001D9C  0C40 0010 3139          cmp.w     #16,D0
00001DA0  660A      3140          bne.s     DumpRegisters_30
00001DA2  4878 0058 3141          pea       88
00001DA6  4E92      3142          jsr       (A2)
00001DA8  584F      3143          addq.w    #4,A7
00001DAA  6008      3144          bra.s     DumpRegisters_31
                    3145   DumpRegisters_30:
00001DAC  4878 002D 3146          pea       45
00001DB0  4E92      3147          jsr       (A2)
00001DB2  584F      3148          addq.w    #4,A7
                    3149   DumpRegisters_31:
                    3150   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001DB4  3014      3151          move.w    (A4),D0
00001DB6  C07C 0008 3152          and.w     #8,D0
00001DBA  0C40 0008 3153          cmp.w     #8,D0
00001DBE  660A      3154          bne.s     DumpRegisters_32
00001DC0  4878 004E 3155          pea       78
00001DC4  4E92      3156          jsr       (A2)
00001DC6  584F      3157          addq.w    #4,A7
00001DC8  6008      3158          bra.s     DumpRegisters_33
                    3159   DumpRegisters_32:
00001DCA  4878 002D 3160          pea       45
00001DCE  4E92      3161          jsr       (A2)
00001DD0  584F      3162          addq.w    #4,A7
                    3163   DumpRegisters_33:
                    3164   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001DD2  3014      3165          move.w    (A4),D0
00001DD4  C07C 0004 3166          and.w     #4,D0
00001DD8  0C40 0004 3167          cmp.w     #4,D0
00001DDC  660A      3168          bne.s     DumpRegisters_34
00001DDE  4878 005A 3169          pea       90
00001DE2  4E92      3170          jsr       (A2)
00001DE4  584F      3171          addq.w    #4,A7
00001DE6  6008      3172          bra.s     DumpRegisters_35
                    3173   DumpRegisters_34:
00001DE8  4878 002D 3174          pea       45
00001DEC  4E92      3175          jsr       (A2)
00001DEE  584F      3176          addq.w    #4,A7
                    3177   DumpRegisters_35:
                    3178   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001DF0  3014      3179          move.w    (A4),D0
00001DF2  C07C 0002 3180          and.w     #2,D0
00001DF6  0C40 0002 3181          cmp.w     #2,D0
00001DFA  660A      3182          bne.s     DumpRegisters_36
00001DFC  4878 0056 3183          pea       86
00001E00  4E92      3184          jsr       (A2)
00001E02  584F      3185          addq.w    #4,A7
00001E04  6008      3186          bra.s     DumpRegisters_37
                    3187   DumpRegisters_36:
00001E06  4878 002D 3188          pea       45
00001E0A  4E92      3189          jsr       (A2)
00001E0C  584F      3190          addq.w    #4,A7
                    3191   DumpRegisters_37:
                    3192   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001E0E  3014      3193          move.w    (A4),D0
00001E10  C07C 0001 3194          and.w     #1,D0
00001E14  0C40 0001 3195          cmp.w     #1,D0
00001E18  660A      3196          bne.s     DumpRegisters_38
00001E1A  4878 0043 3197          pea       67
00001E1E  4E92      3198          jsr       (A2)
00001E20  584F      3199          addq.w    #4,A7
00001E22  6008      3200          bra.s     DumpRegisters_39
                    3201   DumpRegisters_38:
00001E24  4878 002D 3202          pea       45
00001E28  4E92      3203          jsr       (A2)
00001E2A  584F      3204          addq.w    #4,A7
                    3205   DumpRegisters_39:
                    3206   ; putchar(']') ;
00001E2C  4878 005D 3207          pea       93
00001E30  4E92      3208          jsr       (A2)
00001E32  584F      3209          addq.w    #4,A7
                    3210   ; printf("\r\n PC = $%08X  ", PC) ;
00001E34  2F39 0B00 3211          move.l    _PC.L,-(A7)
00001E38  0120      
00001E3A  4879 0000 3212          pea       @m68kde~1_52.L
00001E3E  4DC8      
00001E40  4E93      3213          jsr       (A3)
00001E42  504F      3214          addq.w    #8,A7
                    3215   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001E44  2039 0B00 3216          move.l    _PC.L,D0
00001E48  0120      
00001E4A  2040      3217          move.l    D0,A0
00001E4C  3010      3218          move.w    (A0),D0
00001E4E  0C40 4E4E 3219          cmp.w     #20046,D0
00001E52  660A      3220          bne.s     DumpRegisters_40
                    3221   ; printf("[@ BREAKPOINT]") ;
00001E54  4879 0000 3222          pea       @m68kde~1_53.L
00001E58  4DD8      
00001E5A  4E93      3223          jsr       (A3)
00001E5C  584F      3224          addq.w    #4,A7
                    3225   DumpRegisters_40:
                    3226   ; printf("\r\n") ;
00001E5E  4879 0000 3227          pea       @m68kde~1_1.L
00001E62  4950      
00001E64  4E93      3228          jsr       (A3)
00001E66  584F      3229          addq.w    #4,A7
                    3230   ; for(i=0; i < 8; i++)    {
00001E68  4244      3231          clr.w     D4
                    3232   DumpRegisters_42:
00001E6A  0C44 0008 3233          cmp.w     #8,D4
00001E6E  6C00 0040 3234          bge       DumpRegisters_44
                    3235   ; if(WatchPointSetOrCleared[i] == 1)
00001E72  48C4      3236          ext.l     D4
00001E74  2004      3237          move.l    D4,D0
00001E76  E588      3238          lsl.l     #2,D0
00001E78  41F9 0B00 3239          lea       _WatchPointSetOrCleared.L,A0
00001E7C  01A2      
00001E7E  2030 0800 3240          move.l    0(A0,D0.L),D0
00001E82  0C80 0000 3241          cmp.l     #1,D0
00001E86  0001      
00001E88  6622      3242          bne.s     DumpRegisters_45
                    3243   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001E8A  220D      3244          move.l    A5,D1
00001E8C  48C4      3245          ext.l     D4
00001E8E  2F00      3246          move.l    D0,-(A7)
00001E90  2004      3247          move.l    D4,D0
00001E92  C1FC 0064 3248          muls      #100,D0
00001E96  D280      3249          add.l     D0,D1
00001E98  201F      3250          move.l    (A7)+,D0
00001E9A  2F01      3251          move.l    D1,-(A7)
00001E9C  48C4      3252          ext.l     D4
00001E9E  2F04      3253          move.l    D4,-(A7)
00001EA0  4879 0000 3254          pea       @m68kde~1_54.L
00001EA4  4DE8      
00001EA6  4E93      3255          jsr       (A3)
00001EA8  DEFC 000C 3256          add.w     #12,A7
                    3257   DumpRegisters_45:
00001EAC  5244      3258          addq.w    #1,D4
00001EAE  60BA      3259          bra       DumpRegisters_42
                    3260   DumpRegisters_44:
00001EB0  4CDF 3CFC 3261          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001EB4  4E75      3262          rts
                    3263   ; }
                    3264   ; }
                    3265   ; // Trace Exception Handler
                    3266   ; void DumpRegistersandPause(void)
                    3267   ; {
                    3268   _DumpRegistersandPause:
00001EB6  2F0A      3269          move.l    A2,-(A7)
00001EB8  45F9 0000 3270          lea       _printf.L,A2
00001EBC  3F7A      
                    3271   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001EBE  4879 0000 3272          pea       @m68kde~1_55.L
00001EC2  4DF4      
00001EC4  4E92      3273          jsr       (A2)
00001EC6  584F      3274          addq.w    #4,A7
                    3275   ; printf("\r\nBreak Points :[Disabled]") ;
00001EC8  4879 0000 3276          pea       @m68kde~1_56.L
00001ECC  4E14      
00001ECE  4E92      3277          jsr       (A2)
00001ED0  584F      3278          addq.w    #4,A7
                    3279   ; DumpRegisters() ;
00001ED2  4EB8 1A02 3280          jsr       _DumpRegisters
                    3281   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001ED6  4879 0000 3282          pea       @m68kde~1_57.L
00001EDA  4E30      
00001EDC  4E92      3283          jsr       (A2)
00001EDE  584F      3284          addq.w    #4,A7
                    3285   ; printf("\r\nPress <ESC> to Resume Program") ;
00001EE0  4879 0000 3286          pea       @m68kde~1_58.L
00001EE4  4E5C      
00001EE6  4E92      3287          jsr       (A2)
00001EE8  584F      3288          addq.w    #4,A7
                    3289   ; menu() ;
00001EEA  4EB9 0000 3290          jsr       _menu
00001EEE  2A9A      
00001EF0  245F      3291          move.l    (A7)+,A2
00001EF2  4E75      3292          rts
                    3293   ; }
                    3294   ; void ChangeRegisters(void)
                    3295   ; {
                    3296   _ChangeRegisters:
00001EF4  4E56 FFFC 3297          link      A6,#-4
00001EF8  48E7 303C 3298          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001EFC  45F9 0000 3299          lea       _printf.L,A2
00001F00  3F7A      
00001F02  47EE FFFC 3300          lea       -4(A6),A3
00001F06  49F8 0CA4 3301          lea       _Get8HexDigits.L,A4
00001F0A  4BF8 0B68 3302          lea       __getch.L,A5
                    3303   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    3304   ; int reg_val ;
                    3305   ; char c, reg[3] ;
                    3306   ; reg[0] = tolower(_getch()) ;
00001F0E  2F00      3307          move.l    D0,-(A7)
00001F10  4E95      3308          jsr       (A5)
00001F12  2200      3309          move.l    D0,D1
00001F14  201F      3310          move.l    (A7)+,D0
00001F16  2F01      3311          move.l    D1,-(A7)
00001F18  4EB9 0000 3312          jsr       _tolower
00001F1C  362A      
00001F1E  584F      3313          addq.w    #4,A7
00001F20  1680      3314          move.b    D0,(A3)
                    3315   ; reg[1] = c = tolower(_getch()) ;
00001F22  2F00      3316          move.l    D0,-(A7)
00001F24  4E95      3317          jsr       (A5)
00001F26  2200      3318          move.l    D0,D1
00001F28  201F      3319          move.l    (A7)+,D0
00001F2A  2F01      3320          move.l    D1,-(A7)
00001F2C  4EB9 0000 3321          jsr       _tolower
00001F30  362A      
00001F32  584F      3322          addq.w    #4,A7
00001F34  1400      3323          move.b    D0,D2
00001F36  1740 0001 3324          move.b    D0,1(A3)
                    3325   ; if(reg[0] == (char)('d'))  {    // change data register
00001F3A  1013      3326          move.b    (A3),D0
00001F3C  0C00 0064 3327          cmp.b     #100,D0
00001F40  6600 00AE 3328          bne       ChangeRegisters_1
                    3329   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001F44  102B 0001 3330          move.b    1(A3),D0
00001F48  0C00 0037 3331          cmp.b     #55,D0
00001F4C  6E0A      3332          bgt.s     ChangeRegisters_5
00001F4E  102B 0001 3333          move.b    1(A3),D0
00001F52  0C00 0030 3334          cmp.b     #48,D0
00001F56  6C0E      3335          bge.s     ChangeRegisters_3
                    3336   ChangeRegisters_5:
                    3337   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001F58  4879 0000 3338          pea       @m68kde~1_59.L
00001F5C  4E7C      
00001F5E  4E92      3339          jsr       (A2)
00001F60  584F      3340          addq.w    #4,A7
                    3341   ; return ;
00001F62  6000 0244 3342          bra       ChangeRegisters_6
                    3343   ChangeRegisters_3:
                    3344   ; }
                    3345   ; else {
                    3346   ; printf("\r\nD%c = ", c) ;
00001F66  4882      3347          ext.w     D2
00001F68  48C2      3348          ext.l     D2
00001F6A  2F02      3349          move.l    D2,-(A7)
00001F6C  4879 0000 3350          pea       @m68kde~1_60.L
00001F70  4EA8      
00001F72  4E92      3351          jsr       (A2)
00001F74  504F      3352          addq.w    #8,A7
                    3353   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001F76  42A7      3354          clr.l     -(A7)
00001F78  4E94      3355          jsr       (A4)
00001F7A  584F      3356          addq.w    #4,A7
00001F7C  2600      3357          move.l    D0,D3
                    3358   ; }
                    3359   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    3360   ; if(c == (char)('0'))
00001F7E  0C02 0030 3361          cmp.b     #48,D2
00001F82  660A      3362          bne.s     ChangeRegisters_7
                    3363   ; d0 = reg_val ;
00001F84  23C3 0B00 3364          move.l    D3,_d0.L
00001F88  00E4      
00001F8A  6000 0060 3365          bra       ChangeRegisters_20
                    3366   ChangeRegisters_7:
                    3367   ; else if(c == (char)('1'))
00001F8E  0C02 0031 3368          cmp.b     #49,D2
00001F92  660A      3369          bne.s     ChangeRegisters_9
                    3370   ; d1 = reg_val ;
00001F94  23C3 0B00 3371          move.l    D3,_d1.L
00001F98  00E8      
00001F9A  6000 0050 3372          bra       ChangeRegisters_20
                    3373   ChangeRegisters_9:
                    3374   ; else if(c == (char)('2'))
00001F9E  0C02 0032 3375          cmp.b     #50,D2
00001FA2  660A      3376          bne.s     ChangeRegisters_11
                    3377   ; d2 = reg_val ;
00001FA4  23C3 0B00 3378          move.l    D3,_d2.L
00001FA8  00EC      
00001FAA  6000 0040 3379          bra       ChangeRegisters_20
                    3380   ChangeRegisters_11:
                    3381   ; else if(c == (char)('3'))
00001FAE  0C02 0033 3382          cmp.b     #51,D2
00001FB2  6608      3383          bne.s     ChangeRegisters_13
                    3384   ; d3 = reg_val ;
00001FB4  23C3 0B00 3385          move.l    D3,_d3.L
00001FB8  00F0      
00001FBA  6030      3386          bra.s     ChangeRegisters_20
                    3387   ChangeRegisters_13:
                    3388   ; else if(c == (char)('4'))
00001FBC  0C02 0034 3389          cmp.b     #52,D2
00001FC0  6608      3390          bne.s     ChangeRegisters_15
                    3391   ; d4 = reg_val ;
00001FC2  23C3 0B00 3392          move.l    D3,_d4.L
00001FC6  00F4      
00001FC8  6022      3393          bra.s     ChangeRegisters_20
                    3394   ChangeRegisters_15:
                    3395   ; else if(c == (char)('5'))
00001FCA  0C02 0035 3396          cmp.b     #53,D2
00001FCE  6608      3397          bne.s     ChangeRegisters_17
                    3398   ; d5 = reg_val ;
00001FD0  23C3 0B00 3399          move.l    D3,_d5.L
00001FD4  00F8      
00001FD6  6014      3400          bra.s     ChangeRegisters_20
                    3401   ChangeRegisters_17:
                    3402   ; else if(c == (char)('6'))
00001FD8  0C02 0036 3403          cmp.b     #54,D2
00001FDC  6608      3404          bne.s     ChangeRegisters_19
                    3405   ; d6 = reg_val ;
00001FDE  23C3 0B00 3406          move.l    D3,_d6.L
00001FE2  00FC      
00001FE4  6006      3407          bra.s     ChangeRegisters_20
                    3408   ChangeRegisters_19:
                    3409   ; else
                    3410   ; d7 = reg_val ;
00001FE6  23C3 0B00 3411          move.l    D3,_d7.L
00001FEA  0100      
                    3412   ChangeRegisters_20:
00001FEC  6000 01B6 3413          bra       ChangeRegisters_51
                    3414   ChangeRegisters_1:
                    3415   ; }
                    3416   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001FF0  1013      3417          move.b    (A3),D0
00001FF2  0C00 0061 3418          cmp.b     #97,D0
00001FF6  6600 00A6 3419          bne       ChangeRegisters_21
                    3420   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001FFA  0C02 0037 3421          cmp.b     #55,D2
00001FFE  6E06      3422          bgt.s     ChangeRegisters_25
00002000  0C02 0030 3423          cmp.b     #48,D2
00002004  6C0E      3424          bge.s     ChangeRegisters_23
                    3425   ChangeRegisters_25:
                    3426   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00002006  4879 0000 3427          pea       @m68kde~1_61.L
0000200A  4EB2      
0000200C  4E92      3428          jsr       (A2)
0000200E  584F      3429          addq.w    #4,A7
                    3430   ; return ;
00002010  6000 0196 3431          bra       ChangeRegisters_6
                    3432   ChangeRegisters_23:
                    3433   ; }
                    3434   ; else {
                    3435   ; printf("\r\nA%c = ", c) ;
00002014  4882      3436          ext.w     D2
00002016  48C2      3437          ext.l     D2
00002018  2F02      3438          move.l    D2,-(A7)
0000201A  4879 0000 3439          pea       @m68kde~1_62.L
0000201E  4EE0      
00002020  4E92      3440          jsr       (A2)
00002022  504F      3441          addq.w    #8,A7
                    3442   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00002024  42A7      3443          clr.l     -(A7)
00002026  4E94      3444          jsr       (A4)
00002028  584F      3445          addq.w    #4,A7
0000202A  2600      3446          move.l    D0,D3
                    3447   ; }
                    3448   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    3449   ; if(c == (char)('0'))
0000202C  0C02 0030 3450          cmp.b     #48,D2
00002030  660A      3451          bne.s     ChangeRegisters_26
                    3452   ; a0 = reg_val ;
00002032  23C3 0B00 3453          move.l    D3,_a0.L
00002036  0104      
00002038  6000 0060 3454          bra       ChangeRegisters_39
                    3455   ChangeRegisters_26:
                    3456   ; else if(c == (char)('1'))
0000203C  0C02 0031 3457          cmp.b     #49,D2
00002040  660A      3458          bne.s     ChangeRegisters_28
                    3459   ; a1 = reg_val ;
00002042  23C3 0B00 3460          move.l    D3,_a1.L
00002046  0108      
00002048  6000 0050 3461          bra       ChangeRegisters_39
                    3462   ChangeRegisters_28:
                    3463   ; else if(c == (char)('2'))
0000204C  0C02 0032 3464          cmp.b     #50,D2
00002050  660A      3465          bne.s     ChangeRegisters_30
                    3466   ; a2 = reg_val ;
00002052  23C3 0B00 3467          move.l    D3,_a2.L
00002056  010C      
00002058  6000 0040 3468          bra       ChangeRegisters_39
                    3469   ChangeRegisters_30:
                    3470   ; else if(c == (char)('3'))
0000205C  0C02 0033 3471          cmp.b     #51,D2
00002060  6608      3472          bne.s     ChangeRegisters_32
                    3473   ; a3 = reg_val ;
00002062  23C3 0B00 3474          move.l    D3,_a3.L
00002066  0110      
00002068  6030      3475          bra.s     ChangeRegisters_39
                    3476   ChangeRegisters_32:
                    3477   ; else if(c == (char)('4'))
0000206A  0C02 0034 3478          cmp.b     #52,D2
0000206E  6608      3479          bne.s     ChangeRegisters_34
                    3480   ; a4 = reg_val ;
00002070  23C3 0B00 3481          move.l    D3,_a4.L
00002074  0114      
00002076  6022      3482          bra.s     ChangeRegisters_39
                    3483   ChangeRegisters_34:
                    3484   ; else if(c == (char)('5'))
00002078  0C02 0035 3485          cmp.b     #53,D2
0000207C  6608      3486          bne.s     ChangeRegisters_36
                    3487   ; a5 = reg_val ;
0000207E  23C3 0B00 3488          move.l    D3,_a5.L
00002082  0118      
00002084  6014      3489          bra.s     ChangeRegisters_39
                    3490   ChangeRegisters_36:
                    3491   ; else if(c == (char)('6'))
00002086  0C02 0036 3492          cmp.b     #54,D2
0000208A  6608      3493          bne.s     ChangeRegisters_38
                    3494   ; a6 = reg_val ;
0000208C  23C3 0B00 3495          move.l    D3,_a6.L
00002090  011C      
00002092  6006      3496          bra.s     ChangeRegisters_39
                    3497   ChangeRegisters_38:
                    3498   ; else
                    3499   ; USP = reg_val ;
00002094  23C3 0B00 3500          move.l    D3,_USP.L
00002098  0128      
                    3501   ChangeRegisters_39:
0000209A  6000 0108 3502          bra       ChangeRegisters_51
                    3503   ChangeRegisters_21:
                    3504   ; }
                    3505   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
0000209E  1013      3506          move.b    (A3),D0
000020A0  0C00 0075 3507          cmp.b     #117,D0
000020A4  6600 004E 3508          bne       ChangeRegisters_40
000020A8  0C02 0073 3509          cmp.b     #115,D2
000020AC  6600 0046 3510          bne       ChangeRegisters_40
                    3511   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
000020B0  2F00      3512          move.l    D0,-(A7)
000020B2  4E95      3513          jsr       (A5)
000020B4  2200      3514          move.l    D0,D1
000020B6  201F      3515          move.l    (A7)+,D0
000020B8  2F01      3516          move.l    D1,-(A7)
000020BA  4EB9 0000 3517          jsr       _tolower
000020BE  362A      
000020C0  584F      3518          addq.w    #4,A7
000020C2  0C80 0000 3519          cmp.l     #112,D0
000020C6  0070      
000020C8  6618      3520          bne.s     ChangeRegisters_42
                    3521   ; printf("\r\nUser SP = ") ;
000020CA  4879 0000 3522          pea       @m68kde~1_63.L
000020CE  4EEA      
000020D0  4E92      3523          jsr       (A2)
000020D2  584F      3524          addq.w    #4,A7
                    3525   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000020D4  42A7      3526          clr.l     -(A7)
000020D6  4E94      3527          jsr       (A4)
000020D8  584F      3528          addq.w    #4,A7
000020DA  23C0 0B00 3529          move.l    D0,_USP.L
000020DE  0128      
000020E0  600E      3530          bra.s     ChangeRegisters_43
                    3531   ChangeRegisters_42:
                    3532   ; }
                    3533   ; else {
                    3534   ; printf("\r\nIllegal Register....") ;
000020E2  4879 0000 3535          pea       @m68kde~1_64.L
000020E6  4EF8      
000020E8  4E92      3536          jsr       (A2)
000020EA  584F      3537          addq.w    #4,A7
                    3538   ; return ;
000020EC  6000 00BA 3539          bra       ChangeRegisters_6
                    3540   ChangeRegisters_43:
000020F0  6000 00B2 3541          bra       ChangeRegisters_51
                    3542   ChangeRegisters_40:
                    3543   ; }
                    3544   ; }
                    3545   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000020F4  1013      3546          move.b    (A3),D0
000020F6  0C00 0073 3547          cmp.b     #115,D0
000020FA  6600 004E 3548          bne       ChangeRegisters_44
000020FE  0C02 0073 3549          cmp.b     #115,D2
00002102  6600 0046 3550          bne       ChangeRegisters_44
                    3551   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00002106  2F00      3552          move.l    D0,-(A7)
00002108  4E95      3553          jsr       (A5)
0000210A  2200      3554          move.l    D0,D1
0000210C  201F      3555          move.l    (A7)+,D0
0000210E  2F01      3556          move.l    D1,-(A7)
00002110  4EB9 0000 3557          jsr       _tolower
00002114  362A      
00002116  584F      3558          addq.w    #4,A7
00002118  0C80 0000 3559          cmp.l     #112,D0
0000211C  0070      
0000211E  6618      3560          bne.s     ChangeRegisters_46
                    3561   ; printf("\r\nSystem SP = ") ;
00002120  4879 0000 3562          pea       @m68kde~1_65.L
00002124  4F10      
00002126  4E92      3563          jsr       (A2)
00002128  584F      3564          addq.w    #4,A7
                    3565   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000212A  42A7      3566          clr.l     -(A7)
0000212C  4E94      3567          jsr       (A4)
0000212E  584F      3568          addq.w    #4,A7
00002130  23C0 0B00 3569          move.l    D0,_SSP.L
00002134  0124      
00002136  600E      3570          bra.s     ChangeRegisters_47
                    3571   ChangeRegisters_46:
                    3572   ; }
                    3573   ; else {
                    3574   ; printf("\r\nIllegal Register....") ;
00002138  4879 0000 3575          pea       @m68kde~1_64.L
0000213C  4EF8      
0000213E  4E92      3576          jsr       (A2)
00002140  584F      3577          addq.w    #4,A7
                    3578   ; return ;
00002142  6000 0064 3579          bra       ChangeRegisters_6
                    3580   ChangeRegisters_47:
00002146  6000 005C 3581          bra       ChangeRegisters_51
                    3582   ChangeRegisters_44:
                    3583   ; }
                    3584   ; }
                    3585   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
0000214A  1013      3586          move.b    (A3),D0
0000214C  0C00 0070 3587          cmp.b     #112,D0
00002150  6620      3588          bne.s     ChangeRegisters_48
00002152  0C02 0063 3589          cmp.b     #99,D2
00002156  661A      3590          bne.s     ChangeRegisters_48
                    3591   ; printf("\r\nPC = ") ;
00002158  4879 0000 3592          pea       @m68kde~1_66.L
0000215C  4F20      
0000215E  4E92      3593          jsr       (A2)
00002160  584F      3594          addq.w    #4,A7
                    3595   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00002162  42A7      3596          clr.l     -(A7)
00002164  4E94      3597          jsr       (A4)
00002166  584F      3598          addq.w    #4,A7
00002168  23C0 0B00 3599          move.l    D0,_PC.L
0000216C  0120      
0000216E  6000 0034 3600          bra       ChangeRegisters_51
                    3601   ChangeRegisters_48:
                    3602   ; }
                    3603   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00002172  1013      3604          move.b    (A3),D0
00002174  0C00 0073 3605          cmp.b     #115,D0
00002178  6620      3606          bne.s     ChangeRegisters_50
0000217A  0C02 0072 3607          cmp.b     #114,D2
0000217E  661A      3608          bne.s     ChangeRegisters_50
                    3609   ; printf("\r\nSR = ") ;
00002180  4879 0000 3610          pea       @m68kde~1_67.L
00002184  4F28      
00002186  4E92      3611          jsr       (A2)
00002188  584F      3612          addq.w    #4,A7
                    3613   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000218A  42A7      3614          clr.l     -(A7)
0000218C  4EB8 0C58 3615          jsr       _Get4HexDigits
00002190  584F      3616          addq.w    #4,A7
00002192  33C0 0B00 3617          move.w    D0,_SR.L
00002196  012C      
00002198  600A      3618          bra.s     ChangeRegisters_51
                    3619   ChangeRegisters_50:
                    3620   ; }
                    3621   ; else
                    3622   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000219A  4879 0000 3623          pea       @m68kde~1_68.L
0000219E  4F30      
000021A0  4E92      3624          jsr       (A2)
000021A2  584F      3625          addq.w    #4,A7
                    3626   ChangeRegisters_51:
                    3627   ; DumpRegisters() ;
000021A4  4EB8 1A02 3628          jsr       _DumpRegisters
                    3629   ChangeRegisters_6:
000021A8  4CDF 3C0C 3630          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000021AC  4E5E      3631          unlk      A6
000021AE  4E75      3632          rts
                    3633   ; }
                    3634   ; void BreakPointDisplay(void)
                    3635   ; {
                    3636   _BreakPointDisplay:
000021B0  48E7 3030 3637          movem.l   D2/D3/A2/A3,-(A7)
000021B4  45F9 0000 3638          lea       _printf.L,A2
000021B8  3F7A      
000021BA  47F9 0B00 3639          lea       _BreakPointAddress.L,A3
000021BE  012E      
                    3640   ; int i, BreakPointsSet = 0 ;
000021C0  4283      3641          clr.l     D3
                    3642   ; // any break points  set
                    3643   ; for(i = 0; i < 8; i++)  {
000021C2  4282      3644          clr.l     D2
                    3645   BreakPointDisplay_1:
000021C4  0C82 0000 3646          cmp.l     #8,D2
000021C8  0008      
000021CA  6C1C      3647          bge.s     BreakPointDisplay_3
                    3648   ; if(BreakPointSetOrCleared[i] == 1)
000021CC  2002      3649          move.l    D2,D0
000021CE  E588      3650          lsl.l     #2,D0
000021D0  41F9 0B00 3651          lea       _BreakPointSetOrCleared.L,A0
000021D4  015E      
000021D6  2030 0800 3652          move.l    0(A0,D0.L),D0
000021DA  0C80 0000 3653          cmp.l     #1,D0
000021DE  0001      
000021E0  6602      3654          bne.s     BreakPointDisplay_4
                    3655   ; BreakPointsSet = 1;
000021E2  7601      3656          moveq     #1,D3
                    3657   BreakPointDisplay_4:
000021E4  5282      3658          addq.l    #1,D2
000021E6  60DC      3659          bra       BreakPointDisplay_1
                    3660   BreakPointDisplay_3:
                    3661   ; }
                    3662   ; if(BreakPointsSet == 1) {
000021E8  0C83 0000 3663          cmp.l     #1,D3
000021EC  0001      
000021EE  6616      3664          bne.s     BreakPointDisplay_6
                    3665   ; printf("\r\n\r\nNum     Address      Instruction") ;
000021F0  4879 0000 3666          pea       @m68kde~1_69.L
000021F4  4F6C      
000021F6  4E92      3667          jsr       (A2)
000021F8  584F      3668          addq.w    #4,A7
                    3669   ; printf("\r\n---     ---------    -----------") ;
000021FA  4879 0000 3670          pea       @m68kde~1_70.L
000021FE  4F92      
00002200  4E92      3671          jsr       (A2)
00002202  584F      3672          addq.w    #4,A7
00002204  600A      3673          bra.s     BreakPointDisplay_7
                    3674   BreakPointDisplay_6:
                    3675   ; }
                    3676   ; else
                    3677   ; printf("\r\nNo BreakPoints Set") ;
00002206  4879 0000 3678          pea       @m68kde~1_71.L
0000220A  4FB6      
0000220C  4E92      3679          jsr       (A2)
0000220E  584F      3680          addq.w    #4,A7
                    3681   BreakPointDisplay_7:
                    3682   ; for(i = 0; i < 8; i++)  {
00002210  4282      3683          clr.l     D2
                    3684   BreakPointDisplay_8:
00002212  0C82 0000 3685          cmp.l     #8,D2
00002216  0008      
00002218  6C00 005A 3686          bge       BreakPointDisplay_10
                    3687   ; // put opcode back, then put break point back
                    3688   ; if(BreakPointSetOrCleared[i] == 1)  {
0000221C  2002      3689          move.l    D2,D0
0000221E  E588      3690          lsl.l     #2,D0
00002220  41F9 0B00 3691          lea       _BreakPointSetOrCleared.L,A0
00002224  015E      
00002226  2030 0800 3692          move.l    0(A0,D0.L),D0
0000222A  0C80 0000 3693          cmp.l     #1,D0
0000222E  0001      
00002230  6600 003E 3694          bne       BreakPointDisplay_11
                    3695   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00002234  2002      3696          move.l    D2,D0
00002236  E388      3697          lsl.l     #1,D0
00002238  41F9 0B00 3698          lea       _BreakPointInstruction.L,A0
0000223C  014E      
0000223E  2202      3699          move.l    D2,D1
00002240  E589      3700          lsl.l     #2,D1
00002242  2233 1800 3701          move.l    0(A3,D1.L),D1
00002246  2241      3702          move.l    D1,A1
00002248  32B0 0800 3703          move.w    0(A0,D0.L),(A1)
                    3704   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
0000224C  2002      3705          move.l    D2,D0
0000224E  E588      3706          lsl.l     #2,D0
00002250  2033 0800 3707          move.l    0(A3,D0.L),D0
00002254  2040      3708          move.l    D0,A0
00002256  30BC 4E4E 3709          move.w    #20046,(A0)
                    3710   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
0000225A  2202      3711          move.l    D2,D1
0000225C  E589      3712          lsl.l     #2,D1
0000225E  2F33 1800 3713          move.l    0(A3,D1.L),-(A7)
00002262  2F02      3714          move.l    D2,-(A7)
00002264  4879 0000 3715          pea       @m68kde~1_72.L
00002268  4FCC      
0000226A  4E92      3716          jsr       (A2)
0000226C  DEFC 000C 3717          add.w     #12,A7
                    3718   BreakPointDisplay_11:
00002270  5282      3719          addq.l    #1,D2
00002272  609E      3720          bra       BreakPointDisplay_8
                    3721   BreakPointDisplay_10:
                    3722   ; }
                    3723   ; }
                    3724   ; printf("\r\n") ;
00002274  4879 0000 3725          pea       @m68kde~1_1.L
00002278  4950      
0000227A  4E92      3726          jsr       (A2)
0000227C  584F      3727          addq.w    #4,A7
0000227E  4CDF 0C0C 3728          movem.l   (A7)+,D2/D3/A2/A3
00002282  4E75      3729          rts
                    3730   ; }
                    3731   ; void WatchPointDisplay(void)
                    3732   ; {
                    3733   _WatchPointDisplay:
00002284  48E7 3020 3734          movem.l   D2/D3/A2,-(A7)
00002288  45F9 0000 3735          lea       _printf.L,A2
0000228C  3F7A      
                    3736   ; int i ;
                    3737   ; int WatchPointsSet = 0 ;
0000228E  4283      3738          clr.l     D3
                    3739   ; // any watchpoints set
                    3740   ; for(i = 0; i < 8; i++)  {
00002290  4282      3741          clr.l     D2
                    3742   WatchPointDisplay_1:
00002292  0C82 0000 3743          cmp.l     #8,D2
00002296  0008      
00002298  6C1C      3744          bge.s     WatchPointDisplay_3
                    3745   ; if(WatchPointSetOrCleared[i] == 1)
0000229A  2002      3746          move.l    D2,D0
0000229C  E588      3747          lsl.l     #2,D0
0000229E  41F9 0B00 3748          lea       _WatchPointSetOrCleared.L,A0
000022A2  01A2      
000022A4  2030 0800 3749          move.l    0(A0,D0.L),D0
000022A8  0C80 0000 3750          cmp.l     #1,D0
000022AC  0001      
000022AE  6602      3751          bne.s     WatchPointDisplay_4
                    3752   ; WatchPointsSet = 1;
000022B0  7601      3753          moveq     #1,D3
                    3754   WatchPointDisplay_4:
000022B2  5282      3755          addq.l    #1,D2
000022B4  60DC      3756          bra       WatchPointDisplay_1
                    3757   WatchPointDisplay_3:
                    3758   ; }
                    3759   ; if(WatchPointsSet == 1) {
000022B6  0C83 0000 3760          cmp.l     #1,D3
000022BA  0001      
000022BC  6616      3761          bne.s     WatchPointDisplay_6
                    3762   ; printf("\r\nNum     Address") ;
000022BE  4879 0000 3763          pea       @m68kde~1_73.L
000022C2  4FDC      
000022C4  4E92      3764          jsr       (A2)
000022C6  584F      3765          addq.w    #4,A7
                    3766   ; printf("\r\n---     ---------") ;
000022C8  4879 0000 3767          pea       @m68kde~1_74.L
000022CC  4FEE      
000022CE  4E92      3768          jsr       (A2)
000022D0  584F      3769          addq.w    #4,A7
000022D2  600A      3770          bra.s     WatchPointDisplay_7
                    3771   WatchPointDisplay_6:
                    3772   ; }
                    3773   ; else
                    3774   ; printf("\r\nNo WatchPoints Set") ;
000022D4  4879 0000 3775          pea       @m68kde~1_75.L
000022D8  5002      
000022DA  4E92      3776          jsr       (A2)
000022DC  584F      3777          addq.w    #4,A7
                    3778   WatchPointDisplay_7:
                    3779   ; for(i = 0; i < 8; i++)  {
000022DE  4282      3780          clr.l     D2
                    3781   WatchPointDisplay_8:
000022E0  0C82 0000 3782          cmp.l     #8,D2
000022E4  0008      
000022E6  6C00 0038 3783          bge       WatchPointDisplay_10
                    3784   ; if(WatchPointSetOrCleared[i] == 1)
000022EA  2002      3785          move.l    D2,D0
000022EC  E588      3786          lsl.l     #2,D0
000022EE  41F9 0B00 3787          lea       _WatchPointSetOrCleared.L,A0
000022F2  01A2      
000022F4  2030 0800 3788          move.l    0(A0,D0.L),D0
000022F8  0C80 0000 3789          cmp.l     #1,D0
000022FC  0001      
000022FE  661C      3790          bne.s     WatchPointDisplay_11
                    3791   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00002300  2202      3792          move.l    D2,D1
00002302  E589      3793          lsl.l     #2,D1
00002304  41F9 0B00 3794          lea       _WatchPointAddress.L,A0
00002308  0182      
0000230A  2F30 1800 3795          move.l    0(A0,D1.L),-(A7)
0000230E  2F02      3796          move.l    D2,-(A7)
00002310  4879 0000 3797          pea       @m68kde~1_72.L
00002314  4FCC      
00002316  4E92      3798          jsr       (A2)
00002318  DEFC 000C 3799          add.w     #12,A7
                    3800   WatchPointDisplay_11:
0000231C  5282      3801          addq.l    #1,D2
0000231E  60C0      3802          bra       WatchPointDisplay_8
                    3803   WatchPointDisplay_10:
                    3804   ; }
                    3805   ; printf("\r\n") ;
00002320  4879 0000 3806          pea       @m68kde~1_1.L
00002324  4950      
00002326  4E92      3807          jsr       (A2)
00002328  584F      3808          addq.w    #4,A7
0000232A  4CDF 040C 3809          movem.l   (A7)+,D2/D3/A2
0000232E  4E75      3810          rts
                    3811   ; }
                    3812   ; void BreakPointClear(void)
                    3813   ; {
                    3814   _BreakPointClear:
00002330  4E56 FFFC 3815          link      A6,#-4
00002334  48E7 2020 3816          movem.l   D2/A2,-(A7)
00002338  45F9 0000 3817          lea       _printf.L,A2
0000233C  3F7A      
                    3818   ; unsigned int i ;
                    3819   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3820   ; BreakPointDisplay() ;
0000233E  4EB8 21B0 3821          jsr       _BreakPointDisplay
                    3822   ; printf("\r\nEnter Break Point Number: ") ;
00002342  4879 0000 3823          pea       @m68kde~1_76.L
00002346  5018      
00002348  4E92      3824          jsr       (A2)
0000234A  584F      3825          addq.w    #4,A7
                    3826   ; i = xtod(_getch()) ;           // get break pointer number
0000234C  2F00      3827          move.l    D0,-(A7)
0000234E  4EB8 0B68 3828          jsr       __getch
00002352  2200      3829          move.l    D0,D1
00002354  201F      3830          move.l    (A7)+,D0
00002356  2F01      3831          move.l    D1,-(A7)
00002358  4EB8 0BD2 3832          jsr       _xtod
0000235C  584F      3833          addq.w    #4,A7
0000235E  C0BC 0000 3834          and.l     #255,D0
00002362  00FF      
00002364  2400      3835          move.l    D0,D2
                    3836   ; if((i < 0) || (i > 7))   {
00002366  0C82 0000 3837          cmp.l     #0,D2
0000236A  0000      
0000236C  6508      3838          blo.s     BreakPointClear_3
0000236E  0C82 0000 3839          cmp.l     #7,D2
00002372  0007      
00002374  630E      3840          bls.s     BreakPointClear_1
                    3841   BreakPointClear_3:
                    3842   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00002376  4879 0000 3843          pea       @m68kde~1_77.L
0000237A  5036      
0000237C  4E92      3844          jsr       (A2)
0000237E  584F      3845          addq.w    #4,A7
                    3846   ; return ;
00002380  6000 0080 3847          bra       BreakPointClear_4
                    3848   BreakPointClear_1:
                    3849   ; }
                    3850   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00002384  2002      3851          move.l    D2,D0
00002386  E588      3852          lsl.l     #2,D0
00002388  41F9 0B00 3853          lea       _BreakPointSetOrCleared.L,A0
0000238C  015E      
0000238E  2030 0800 3854          move.l    0(A0,D0.L),D0
00002392  0C80 0000 3855          cmp.l     #1,D0
00002396  0001      
00002398  6600 005A 3856          bne       BreakPointClear_5
                    3857   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
0000239C  2002      3858          move.l    D2,D0
0000239E  E588      3859          lsl.l     #2,D0
000023A0  41F9 0B00 3860          lea       _BreakPointAddress.L,A0
000023A4  012E      
000023A6  2D70 0800 3861          move.l    0(A0,D0.L),-4(A6)
000023AA  FFFC      
                    3862   ; BreakPointAddress[i] = 0 ;
000023AC  2002      3863          move.l    D2,D0
000023AE  E588      3864          lsl.l     #2,D0
000023B0  41F9 0B00 3865          lea       _BreakPointAddress.L,A0
000023B4  012E      
000023B6  42B0 0800 3866          clr.l     0(A0,D0.L)
                    3867   ; BreakPointSetOrCleared[i] = 0 ;
000023BA  2002      3868          move.l    D2,D0
000023BC  E588      3869          lsl.l     #2,D0
000023BE  41F9 0B00 3870          lea       _BreakPointSetOrCleared.L,A0
000023C2  015E      
000023C4  42B0 0800 3871          clr.l     0(A0,D0.L)
                    3872   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000023C8  2002      3873          move.l    D2,D0
000023CA  E388      3874          lsl.l     #1,D0
000023CC  41F9 0B00 3875          lea       _BreakPointInstruction.L,A0
000023D0  014E      
000023D2  226E FFFC 3876          move.l    -4(A6),A1
000023D6  32B0 0800 3877          move.w    0(A0,D0.L),(A1)
                    3878   ; BreakPointInstruction[i] = 0 ;
000023DA  2002      3879          move.l    D2,D0
000023DC  E388      3880          lsl.l     #1,D0
000023DE  41F9 0B00 3881          lea       _BreakPointInstruction.L,A0
000023E2  014E      
000023E4  4270 0800 3882          clr.w     0(A0,D0.L)
                    3883   ; printf("\r\nBreak Point Cleared.....\r\n") ;
000023E8  4879 0000 3884          pea       @m68kde~1_78.L
000023EC  5052      
000023EE  4E92      3885          jsr       (A2)
000023F0  584F      3886          addq.w    #4,A7
000023F2  600A      3887          bra.s     BreakPointClear_6
                    3888   BreakPointClear_5:
                    3889   ; }
                    3890   ; else
                    3891   ; printf("\r\nBreak Point wasn't Set.....") ;
000023F4  4879 0000 3892          pea       @m68kde~1_79.L
000023F8  5070      
000023FA  4E92      3893          jsr       (A2)
000023FC  584F      3894          addq.w    #4,A7
                    3895   BreakPointClear_6:
                    3896   ; BreakPointDisplay() ;
000023FE  4EB8 21B0 3897          jsr       _BreakPointDisplay
                    3898   ; return ;
                    3899   BreakPointClear_4:
00002402  4CDF 0404 3900          movem.l   (A7)+,D2/A2
00002406  4E5E      3901          unlk      A6
00002408  4E75      3902          rts
                    3903   ; }
                    3904   ; void WatchPointClear(void)
                    3905   ; {
                    3906   _WatchPointClear:
0000240A  48E7 2020 3907          movem.l   D2/A2,-(A7)
0000240E  45F9 0000 3908          lea       _printf.L,A2
00002412  3F7A      
                    3909   ; unsigned int i ;
                    3910   ; WatchPointDisplay() ;
00002414  4EB8 2284 3911          jsr       _WatchPointDisplay
                    3912   ; printf("\r\nEnter Watch Point Number: ") ;
00002418  4879 0000 3913          pea       @m68kde~1_80.L
0000241C  508E      
0000241E  4E92      3914          jsr       (A2)
00002420  584F      3915          addq.w    #4,A7
                    3916   ; i = xtod(_getch()) ;           // get watch pointer number
00002422  2F00      3917          move.l    D0,-(A7)
00002424  4EB8 0B68 3918          jsr       __getch
00002428  2200      3919          move.l    D0,D1
0000242A  201F      3920          move.l    (A7)+,D0
0000242C  2F01      3921          move.l    D1,-(A7)
0000242E  4EB8 0BD2 3922          jsr       _xtod
00002432  584F      3923          addq.w    #4,A7
00002434  C0BC 0000 3924          and.l     #255,D0
00002438  00FF      
0000243A  2400      3925          move.l    D0,D2
                    3926   ; if((i < 0) || (i > 7))   {
0000243C  0C82 0000 3927          cmp.l     #0,D2
00002440  0000      
00002442  6508      3928          blo.s     WatchPointClear_3
00002444  0C82 0000 3929          cmp.l     #7,D2
00002448  0007      
0000244A  630E      3930          bls.s     WatchPointClear_1
                    3931   WatchPointClear_3:
                    3932   ; printf("\r\nIllegal Range : Use 0 - 7") ;
0000244C  4879 0000 3933          pea       @m68kde~1_77.L
00002450  5036      
00002452  4E92      3934          jsr       (A2)
00002454  584F      3935          addq.w    #4,A7
                    3936   ; return ;
00002456  6000 004E 3937          bra       WatchPointClear_4
                    3938   WatchPointClear_1:
                    3939   ; }
                    3940   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
0000245A  2002      3941          move.l    D2,D0
0000245C  E588      3942          lsl.l     #2,D0
0000245E  41F9 0B00 3943          lea       _WatchPointSetOrCleared.L,A0
00002462  01A2      
00002464  2030 0800 3944          move.l    0(A0,D0.L),D0
00002468  0C80 0000 3945          cmp.l     #1,D0
0000246C  0001      
0000246E  6628      3946          bne.s     WatchPointClear_5
                    3947   ; WatchPointAddress[i] = 0 ;
00002470  2002      3948          move.l    D2,D0
00002472  E588      3949          lsl.l     #2,D0
00002474  41F9 0B00 3950          lea       _WatchPointAddress.L,A0
00002478  0182      
0000247A  42B0 0800 3951          clr.l     0(A0,D0.L)
                    3952   ; WatchPointSetOrCleared[i] = 0 ;
0000247E  2002      3953          move.l    D2,D0
00002480  E588      3954          lsl.l     #2,D0
00002482  41F9 0B00 3955          lea       _WatchPointSetOrCleared.L,A0
00002486  01A2      
00002488  42B0 0800 3956          clr.l     0(A0,D0.L)
                    3957   ; printf("\r\nWatch Point Cleared.....\r\n") ;
0000248C  4879 0000 3958          pea       @m68kde~1_81.L
00002490  50AC      
00002492  4E92      3959          jsr       (A2)
00002494  584F      3960          addq.w    #4,A7
00002496  600A      3961          bra.s     WatchPointClear_6
                    3962   WatchPointClear_5:
                    3963   ; }
                    3964   ; else
                    3965   ; printf("\r\nWatch Point Was not Set.....") ;
00002498  4879 0000 3966          pea       @m68kde~1_82.L
0000249C  50CA      
0000249E  4E92      3967          jsr       (A2)
000024A0  584F      3968          addq.w    #4,A7
                    3969   WatchPointClear_6:
                    3970   ; WatchPointDisplay() ;
000024A2  4EB8 2284 3971          jsr       _WatchPointDisplay
                    3972   ; return ;
                    3973   WatchPointClear_4:
000024A6  4CDF 0404 3974          movem.l   (A7)+,D2/A2
000024AA  4E75      3975          rts
                    3976   ; }
                    3977   ; void DisableBreakPoints(void)
                    3978   ; {
                    3979   _DisableBreakPoints:
000024AC  4E56 FFFC 3980          link      A6,#-4
000024B0  2F02      3981          move.l    D2,-(A7)
                    3982   ; int i ;
                    3983   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3984   ; for(i = 0; i < 8; i++)  {
000024B2  4282      3985          clr.l     D2
                    3986   DisableBreakPoints_1:
000024B4  0C82 0000 3987          cmp.l     #8,D2
000024B8  0008      
000024BA  6C00 003E 3988          bge       DisableBreakPoints_3
                    3989   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
000024BE  2002      3990          move.l    D2,D0
000024C0  E588      3991          lsl.l     #2,D0
000024C2  41F9 0B00 3992          lea       _BreakPointSetOrCleared.L,A0
000024C6  015E      
000024C8  2030 0800 3993          move.l    0(A0,D0.L),D0
000024CC  0C80 0000 3994          cmp.l     #1,D0
000024D0  0001      
000024D2  6622      3995          bne.s     DisableBreakPoints_4
                    3996   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000024D4  2002      3997          move.l    D2,D0
000024D6  E588      3998          lsl.l     #2,D0
000024D8  41F9 0B00 3999          lea       _BreakPointAddress.L,A0
000024DC  012E      
000024DE  2D70 0800 4000          move.l    0(A0,D0.L),-4(A6)
000024E2  FFFC      
                    4001   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
000024E4  2002      4002          move.l    D2,D0
000024E6  E388      4003          lsl.l     #1,D0
000024E8  41F9 0B00 4004          lea       _BreakPointInstruction.L,A0
000024EC  014E      
000024EE  226E FFFC 4005          move.l    -4(A6),A1
000024F2  32B0 0800 4006          move.w    0(A0,D0.L),(A1)
                    4007   DisableBreakPoints_4:
000024F6  5282      4008          addq.l    #1,D2
000024F8  60BA      4009          bra       DisableBreakPoints_1
                    4010   DisableBreakPoints_3:
000024FA  241F      4011          move.l    (A7)+,D2
000024FC  4E5E      4012          unlk      A6
000024FE  4E75      4013          rts
                    4014   ; }
                    4015   ; }
                    4016   ; }
                    4017   ; void EnableBreakPoints(void)
                    4018   ; {
                    4019   _EnableBreakPoints:
00002500  4E56 FFFC 4020          link      A6,#-4
00002504  2F02      4021          move.l    D2,-(A7)
                    4022   ; int i ;
                    4023   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4024   ; for(i = 0; i < 8; i++)  {
00002506  4282      4025          clr.l     D2
                    4026   EnableBreakPoints_1:
00002508  0C82 0000 4027          cmp.l     #8,D2
0000250C  0008      
0000250E  6C32      4028          bge.s     EnableBreakPoints_3
                    4029   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00002510  2002      4030          move.l    D2,D0
00002512  E588      4031          lsl.l     #2,D0
00002514  41F9 0B00 4032          lea       _BreakPointSetOrCleared.L,A0
00002518  015E      
0000251A  2030 0800 4033          move.l    0(A0,D0.L),D0
0000251E  0C80 0000 4034          cmp.l     #1,D0
00002522  0001      
00002524  6618      4035          bne.s     EnableBreakPoints_4
                    4036   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002526  2002      4037          move.l    D2,D0
00002528  E588      4038          lsl.l     #2,D0
0000252A  41F9 0B00 4039          lea       _BreakPointAddress.L,A0
0000252E  012E      
00002530  2D70 0800 4040          move.l    0(A0,D0.L),-4(A6)
00002534  FFFC      
                    4041   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00002536  206E FFFC 4042          move.l    -4(A6),A0
0000253A  30BC 4E4E 4043          move.w    #20046,(A0)
                    4044   EnableBreakPoints_4:
0000253E  5282      4045          addq.l    #1,D2
00002540  60C6      4046          bra       EnableBreakPoints_1
                    4047   EnableBreakPoints_3:
00002542  241F      4048          move.l    (A7)+,D2
00002544  4E5E      4049          unlk      A6
00002546  4E75      4050          rts
                    4051   ; }
                    4052   ; }
                    4053   ; }
                    4054   ; void KillAllBreakPoints(void)
                    4055   ; {
                    4056   _KillAllBreakPoints:
00002548  4E56 FFFC 4057          link      A6,#-4
0000254C  2F02      4058          move.l    D2,-(A7)
                    4059   ; int i ;
                    4060   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4061   ; for(i = 0; i < 8; i++)  {
0000254E  4282      4062          clr.l     D2
                    4063   KillAllBreakPoints_1:
00002550  0C82 0000 4064          cmp.l     #8,D2
00002554  0008      
00002556  6C00 0052 4065          bge       KillAllBreakPoints_3
                    4066   ; // clear BP
                    4067   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
0000255A  2002      4068          move.l    D2,D0
0000255C  E588      4069          lsl.l     #2,D0
0000255E  41F9 0B00 4070          lea       _BreakPointAddress.L,A0
00002562  012E      
00002564  2D70 0800 4071          move.l    0(A0,D0.L),-4(A6)
00002568  FFFC      
                    4072   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
0000256A  2002      4073          move.l    D2,D0
0000256C  E388      4074          lsl.l     #1,D0
0000256E  41F9 0B00 4075          lea       _BreakPointInstruction.L,A0
00002572  014E      
00002574  226E FFFC 4076          move.l    -4(A6),A1
00002578  32B0 0800 4077          move.w    0(A0,D0.L),(A1)
                    4078   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
0000257C  2002      4079          move.l    D2,D0
0000257E  E588      4080          lsl.l     #2,D0
00002580  41F9 0B00 4081          lea       _BreakPointAddress.L,A0
00002584  012E      
00002586  42B0 0800 4082          clr.l     0(A0,D0.L)
                    4083   ; BreakPointInstruction[i] = 0 ;
0000258A  2002      4084          move.l    D2,D0
0000258C  E388      4085          lsl.l     #1,D0
0000258E  41F9 0B00 4086          lea       _BreakPointInstruction.L,A0
00002592  014E      
00002594  4270 0800 4087          clr.w     0(A0,D0.L)
                    4088   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002598  2002      4089          move.l    D2,D0
0000259A  E588      4090          lsl.l     #2,D0
0000259C  41F9 0B00 4091          lea       _BreakPointSetOrCleared.L,A0
000025A0  015E      
000025A2  42B0 0800 4092          clr.l     0(A0,D0.L)
000025A6  5282      4093          addq.l    #1,D2
000025A8  60A6      4094          bra       KillAllBreakPoints_1
                    4095   KillAllBreakPoints_3:
000025AA  241F      4096          move.l    (A7)+,D2
000025AC  4E5E      4097          unlk      A6
000025AE  4E75      4098          rts
                    4099   ; }
                    4100   ; //BreakPointDisplay() ;       // display the break points
                    4101   ; }
                    4102   ; void KillAllWatchPoints(void)
                    4103   ; {
                    4104   _KillAllWatchPoints:
000025B0  2F02      4105          move.l    D2,-(A7)
                    4106   ; int i ;
                    4107   ; for(i = 0; i < 8; i++)  {
000025B2  4282      4108          clr.l     D2
                    4109   KillAllWatchPoints_1:
000025B4  0C82 0000 4110          cmp.l     #8,D2
000025B8  0008      
000025BA  6C20      4111          bge.s     KillAllWatchPoints_3
                    4112   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
000025BC  2002      4113          move.l    D2,D0
000025BE  E588      4114          lsl.l     #2,D0
000025C0  41F9 0B00 4115          lea       _WatchPointAddress.L,A0
000025C4  0182      
000025C6  42B0 0800 4116          clr.l     0(A0,D0.L)
                    4117   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
000025CA  2002      4118          move.l    D2,D0
000025CC  E588      4119          lsl.l     #2,D0
000025CE  41F9 0B00 4120          lea       _WatchPointSetOrCleared.L,A0
000025D2  01A2      
000025D4  42B0 0800 4121          clr.l     0(A0,D0.L)
000025D8  5282      4122          addq.l    #1,D2
000025DA  60D8      4123          bra       KillAllWatchPoints_1
                    4124   KillAllWatchPoints_3:
000025DC  241F      4125          move.l    (A7)+,D2
000025DE  4E75      4126          rts
                    4127   ; }
                    4128   ; //WatchPointDisplay() ;       // display the break points
                    4129   ; }
                    4130   ; void SetBreakPoint(void)
                    4131   ; {
                    4132   _SetBreakPoint:
000025E0  4E56 FFFC 4133          link      A6,#-4
000025E4  48E7 3830 4134          movem.l   D2/D3/D4/A2/A3,-(A7)
000025E8  45F9 0000 4135          lea       _printf.L,A2
000025EC  3F7A      
000025EE  47F9 0B00 4136          lea       _BreakPointSetOrCleared.L,A3
000025F2  015E      
                    4137   ; int i ;
                    4138   ; int BPNumber;
                    4139   ; int BPAddress;
                    4140   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4141   ; // see if any free break points
                    4142   ; for(i = 0; i < 8; i ++) {
000025F4  4282      4143          clr.l     D2
                    4144   SetBreakPoint_1:
000025F6  0C82 0000 4145          cmp.l     #8,D2
000025FA  0008      
000025FC  6C10      4146          bge.s     SetBreakPoint_3
                    4147   ; if( BreakPointSetOrCleared[i] == 0)
000025FE  2002      4148          move.l    D2,D0
00002600  E588      4149          lsl.l     #2,D0
00002602  2033 0800 4150          move.l    0(A3,D0.L),D0
00002606  6602      4151          bne.s     SetBreakPoint_4
                    4152   ; break ;         // if spare BP found allow user to set it
00002608  6004      4153          bra.s     SetBreakPoint_3
                    4154   SetBreakPoint_4:
0000260A  5282      4155          addq.l    #1,D2
0000260C  60E8      4156          bra       SetBreakPoint_1
                    4157   SetBreakPoint_3:
                    4158   ; }
                    4159   ; if(i == 8) {
0000260E  0C82 0000 4160          cmp.l     #8,D2
00002612  0008      
00002614  660E      4161          bne.s     SetBreakPoint_6
                    4162   ; printf("\r\nNo FREE Break Points.....") ;
00002616  4879 0000 4163          pea       @m68kde~1_83.L
0000261A  50EA      
0000261C  4E92      4164          jsr       (A2)
0000261E  584F      4165          addq.w    #4,A7
                    4166   ; return ;
00002620  6000 00D6 4167          bra       SetBreakPoint_15
                    4168   SetBreakPoint_6:
                    4169   ; }
                    4170   ; printf("\r\nBreak Point Address: ") ;
00002624  4879 0000 4171          pea       @m68kde~1_84.L
00002628  5106      
0000262A  4E92      4172          jsr       (A2)
0000262C  584F      4173          addq.w    #4,A7
                    4174   ; BPAddress = Get8HexDigits(0) ;
0000262E  42A7      4175          clr.l     -(A7)
00002630  4EB8 0CA4 4176          jsr       _Get8HexDigits
00002634  584F      4177          addq.w    #4,A7
00002636  2600      4178          move.l    D0,D3
                    4179   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00002638  2803      4180          move.l    D3,D4
                    4181   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
0000263A  2003      4182          move.l    D3,D0
0000263C  C0BC 0000 4183          and.l     #1,D0
00002640  0001      
00002642  0C80 0000 4184          cmp.l     #1,D0
00002646  0001      
00002648  660E      4185          bne.s     SetBreakPoint_9
                    4186   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
0000264A  4879 0000 4187          pea       @m68kde~1_85.L
0000264E  511E      
00002650  4E92      4188          jsr       (A2)
00002652  584F      4189          addq.w    #4,A7
                    4190   ; return ;
00002654  6000 00A2 4191          bra       SetBreakPoint_15
                    4192   SetBreakPoint_9:
                    4193   ; }
                    4194   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002658  0C83 0000 4195          cmp.l     #32768,D3
0000265C  8000      
0000265E  640E      4196          bhs.s     SetBreakPoint_11
                    4197   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002660  4879 0000 4198          pea       @m68kde~1_86.L
00002664  5154      
00002666  4E92      4199          jsr       (A2)
00002668  584F      4200          addq.w    #4,A7
                    4201   ; return ;
0000266A  6000 008C 4202          bra       SetBreakPoint_15
                    4203   SetBreakPoint_11:
                    4204   ; }
                    4205   ; // search for first free bp or existing same BP
                    4206   ; for(i = 0; i < 8; i++)  {
0000266E  4282      4207          clr.l     D2
                    4208   SetBreakPoint_13:
00002670  0C82 0000 4209          cmp.l     #8,D2
00002674  0008      
00002676  6C00 0080 4210          bge       SetBreakPoint_15
                    4211   ; if(BreakPointAddress[i] == BPAddress)   {
0000267A  2002      4212          move.l    D2,D0
0000267C  E588      4213          lsl.l     #2,D0
0000267E  41F9 0B00 4214          lea       _BreakPointAddress.L,A0
00002682  012E      
00002684  B6B0 0800 4215          cmp.l     0(A0,D0.L),D3
00002688  6610      4216          bne.s     SetBreakPoint_16
                    4217   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
0000268A  2F03      4218          move.l    D3,-(A7)
0000268C  4879 0000 4219          pea       @m68kde~1_87.L
00002690  519C      
00002692  4E92      4220          jsr       (A2)
00002694  504F      4221          addq.w    #8,A7
                    4222   ; return ;
00002696  6000 0060 4223          bra       SetBreakPoint_15
                    4224   SetBreakPoint_16:
                    4225   ; }
                    4226   ; if(BreakPointSetOrCleared[i] == 0) {
0000269A  2002      4227          move.l    D2,D0
0000269C  E588      4228          lsl.l     #2,D0
0000269E  2033 0800 4229          move.l    0(A3,D0.L),D0
000026A2  6600 004E 4230          bne       SetBreakPoint_18
                    4231   ; // set BP here
                    4232   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
000026A6  2002      4233          move.l    D2,D0
000026A8  E588      4234          lsl.l     #2,D0
000026AA  27BC 0000 4235          move.l    #1,0(A3,D0.L)
000026AE  0001 0800 
                    4236   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
000026B2  2044      4237          move.l    D4,A0
000026B4  2002      4238          move.l    D2,D0
000026B6  E388      4239          lsl.l     #1,D0
000026B8  43F9 0B00 4240          lea       _BreakPointInstruction.L,A1
000026BC  014E      
000026BE  3390 0800 4241          move.w    (A0),0(A1,D0.L)
                    4242   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
000026C2  2F04      4243          move.l    D4,-(A7)
000026C4  4879 0000 4244          pea       @m68kde~1_88.L
000026C8  51D4      
000026CA  4E92      4245          jsr       (A2)
000026CC  504F      4246          addq.w    #8,A7
                    4247   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
000026CE  2044      4248          move.l    D4,A0
000026D0  30BC 4E4E 4249          move.w    #20046,(A0)
                    4250   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000026D4  2002      4251          move.l    D2,D0
000026D6  E588      4252          lsl.l     #2,D0
000026D8  41F9 0B00 4253          lea       _BreakPointAddress.L,A0
000026DC  012E      
000026DE  2183 0800 4254          move.l    D3,0(A0,D0.L)
                    4255   ; printf("\r\n") ;
000026E2  4879 0000 4256          pea       @m68kde~1_1.L
000026E6  4950      
000026E8  4E92      4257          jsr       (A2)
000026EA  584F      4258          addq.w    #4,A7
                    4259   ; BreakPointDisplay() ;       // display the break points
000026EC  4EB8 21B0 4260          jsr       _BreakPointDisplay
                    4261   ; return ;
000026F0  6006      4262          bra.s     SetBreakPoint_15
                    4263   SetBreakPoint_18:
000026F2  5282      4264          addq.l    #1,D2
000026F4  6000 FF7A 4265          bra       SetBreakPoint_13
                    4266   SetBreakPoint_15:
000026F8  4CDF 0C1C 4267          movem.l   (A7)+,D2/D3/D4/A2/A3
000026FC  4E5E      4268          unlk      A6
000026FE  4E75      4269          rts
                    4270   ; }
                    4271   ; }
                    4272   ; }
                    4273   ; void SetWatchPoint(void)
                    4274   ; {
                    4275   _SetWatchPoint:
00002700  4E56 FFF8 4276          link      A6,#-8
00002704  48E7 3030 4277          movem.l   D2/D3/A2/A3,-(A7)
00002708  45F9 0000 4278          lea       _printf.L,A2
0000270C  3F7A      
0000270E  47F9 0B00 4279          lea       _WatchPointSetOrCleared.L,A3
00002712  01A2      
                    4280   ; int i ;
                    4281   ; int WPNumber;
                    4282   ; int WPAddress;
                    4283   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    4284   ; // see if any free break points
                    4285   ; for(i = 0; i < 8; i ++) {
00002714  4282      4286          clr.l     D2
                    4287   SetWatchPoint_1:
00002716  0C82 0000 4288          cmp.l     #8,D2
0000271A  0008      
0000271C  6C10      4289          bge.s     SetWatchPoint_3
                    4290   ; if( WatchPointSetOrCleared[i] == 0)
0000271E  2002      4291          move.l    D2,D0
00002720  E588      4292          lsl.l     #2,D0
00002722  2033 0800 4293          move.l    0(A3,D0.L),D0
00002726  6602      4294          bne.s     SetWatchPoint_4
                    4295   ; break ;         // if spare WP found allow user to set it
00002728  6004      4296          bra.s     SetWatchPoint_3
                    4297   SetWatchPoint_4:
0000272A  5282      4298          addq.l    #1,D2
0000272C  60E8      4299          bra       SetWatchPoint_1
                    4300   SetWatchPoint_3:
                    4301   ; }
                    4302   ; if(i == 8) {
0000272E  0C82 0000 4303          cmp.l     #8,D2
00002732  0008      
00002734  660E      4304          bne.s     SetWatchPoint_6
                    4305   ; printf("\r\nNo FREE Watch Points.....") ;
00002736  4879 0000 4306          pea       @m68kde~1_89.L
0000273A  51FA      
0000273C  4E92      4307          jsr       (A2)
0000273E  584F      4308          addq.w    #4,A7
                    4309   ; return ;
00002740  6000 008C 4310          bra       SetWatchPoint_11
                    4311   SetWatchPoint_6:
                    4312   ; }
                    4313   ; printf("\r\nWatch Point Address: ") ;
00002744  4879 0000 4314          pea       @m68kde~1_90.L
00002748  5216      
0000274A  4E92      4315          jsr       (A2)
0000274C  584F      4316          addq.w    #4,A7
                    4317   ; WPAddress = Get8HexDigits(0) ;
0000274E  42A7      4318          clr.l     -(A7)
00002750  4EB8 0CA4 4319          jsr       _Get8HexDigits
00002754  584F      4320          addq.w    #4,A7
00002756  2600      4321          move.l    D0,D3
                    4322   ; // search for first free wp or existing same wp
                    4323   ; for(i = 0; i < 8; i++)  {
00002758  4282      4324          clr.l     D2
                    4325   SetWatchPoint_9:
0000275A  0C82 0000 4326          cmp.l     #8,D2
0000275E  0008      
00002760  6C00 006C 4327          bge       SetWatchPoint_11
                    4328   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002764  2002      4329          move.l    D2,D0
00002766  E588      4330          lsl.l     #2,D0
00002768  41F9 0B00 4331          lea       _WatchPointAddress.L,A0
0000276C  0182      
0000276E  B6B0 0800 4332          cmp.l     0(A0,D0.L),D3
00002772  6614      4333          bne.s     SetWatchPoint_12
00002774  4A83      4334          tst.l     D3
00002776  6710      4335          beq.s     SetWatchPoint_12
                    4336   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002778  2F03      4337          move.l    D3,-(A7)
0000277A  4879 0000 4338          pea       @m68kde~1_91.L
0000277E  522E      
00002780  4E92      4339          jsr       (A2)
00002782  504F      4340          addq.w    #8,A7
                    4341   ; return ;
00002784  6000 0048 4342          bra       SetWatchPoint_11
                    4343   SetWatchPoint_12:
                    4344   ; }
                    4345   ; if(WatchPointSetOrCleared[i] == 0) {
00002788  2002      4346          move.l    D2,D0
0000278A  E588      4347          lsl.l     #2,D0
0000278C  2033 0800 4348          move.l    0(A3,D0.L),D0
00002790  6600 0038 4349          bne       SetWatchPoint_14
                    4350   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002794  2002      4351          move.l    D2,D0
00002796  E588      4352          lsl.l     #2,D0
00002798  27BC 0000 4353          move.l    #1,0(A3,D0.L)
0000279C  0001 0800 
                    4354   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
000027A0  2F03      4355          move.l    D3,-(A7)
000027A2  4879 0000 4356          pea       @m68kde~1_92.L
000027A6  5264      
000027A8  4E92      4357          jsr       (A2)
000027AA  504F      4358          addq.w    #8,A7
                    4359   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
000027AC  2002      4360          move.l    D2,D0
000027AE  E588      4361          lsl.l     #2,D0
000027B0  41F9 0B00 4362          lea       _WatchPointAddress.L,A0
000027B4  0182      
000027B6  2183 0800 4363          move.l    D3,0(A0,D0.L)
                    4364   ; printf("\r\n") ;
000027BA  4879 0000 4365          pea       @m68kde~1_1.L
000027BE  4950      
000027C0  4E92      4366          jsr       (A2)
000027C2  584F      4367          addq.w    #4,A7
                    4368   ; WatchPointDisplay() ;       // display the break points
000027C4  4EB8 2284 4369          jsr       _WatchPointDisplay
                    4370   ; return ;
000027C8  6004      4371          bra.s     SetWatchPoint_11
                    4372   SetWatchPoint_14:
000027CA  5282      4373          addq.l    #1,D2
000027CC  608C      4374          bra       SetWatchPoint_9
                    4375   SetWatchPoint_11:
000027CE  4CDF 0C0C 4376          movem.l   (A7)+,D2/D3/A2/A3
000027D2  4E5E      4377          unlk      A6
000027D4  4E75      4378          rts
                    4379   ; }
                    4380   ; }
                    4381   ; }
                    4382   ; void HandleBreakPoint(void)
                    4383   ; {
                    4384   _HandleBreakPoint:
000027D6  4E56 FFFC 4385          link      A6,#-4
000027DA  48E7 0038 4386          movem.l   A2/A3/A4,-(A7)
000027DE  45F9 0B00 4387          lea       _i.L,A2
000027E2  00C4      
000027E4  47F9 0000 4388          lea       _printf.L,A3
000027E8  3F7A      
000027EA  49F9 0B00 4389          lea       _PC.L,A4
000027EE  0120      
                    4390   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4391   ; // now we have to put the break point back to run the instruction
                    4392   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    4393   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000027F0  5594      4394          subq.l    #2,(A4)
                    4395   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000027F2  4879 0000 4396          pea       @m68kde~1_93.L
000027F6  528A      
000027F8  4E93      4397          jsr       (A3)
000027FA  584F      4398          addq.w    #4,A7
                    4399   ; printf("\r\nSingle Step : [ON]") ;
000027FC  4879 0000 4400          pea       @m68kde~1_94.L
00002800  529E      
00002802  4E93      4401          jsr       (A3)
00002804  584F      4402          addq.w    #4,A7
                    4403   ; printf("\r\nBreakPoints : [Enabled]") ;
00002806  4879 0000 4404          pea       @m68kde~1_95.L
0000280A  52B4      
0000280C  4E93      4405          jsr       (A3)
0000280E  584F      4406          addq.w    #4,A7
                    4407   ; // now clear the break point (put original instruction back)
                    4408   ; ProgramBreakPointAddress = PC ;
00002810  2D54 FFFC 4409          move.l    (A4),-4(A6)
                    4410   ; for(i = 0; i < 8; i ++) {
00002814  4292      4411          clr.l     (A2)
                    4412   HandleBreakPoint_1:
00002816  2012      4413          move.l    (A2),D0
00002818  0C80 0000 4414          cmp.l     #8,D0
0000281C  0008      
0000281E  6400 0056 4415          bhs       HandleBreakPoint_3
                    4416   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00002822  2012      4417          move.l    (A2),D0
00002824  E588      4418          lsl.l     #2,D0
00002826  41F9 0B00 4419          lea       _BreakPointAddress.L,A0
0000282A  012E      
0000282C  2230 0800 4420          move.l    0(A0,D0.L),D1
00002830  B294      4421          cmp.l     (A4),D1
00002832  6600 003E 4422          bne       HandleBreakPoint_4
                    4423   ; BreakPointAddress[i] = 0 ;
00002836  2012      4424          move.l    (A2),D0
00002838  E588      4425          lsl.l     #2,D0
0000283A  41F9 0B00 4426          lea       _BreakPointAddress.L,A0
0000283E  012E      
00002840  42B0 0800 4427          clr.l     0(A0,D0.L)
                    4428   ; BreakPointSetOrCleared[i] = 0 ;
00002844  2012      4429          move.l    (A2),D0
00002846  E588      4430          lsl.l     #2,D0
00002848  41F9 0B00 4431          lea       _BreakPointSetOrCleared.L,A0
0000284C  015E      
0000284E  42B0 0800 4432          clr.l     0(A0,D0.L)
                    4433   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002852  2012      4434          move.l    (A2),D0
00002854  E388      4435          lsl.l     #1,D0
00002856  41F9 0B00 4436          lea       _BreakPointInstruction.L,A0
0000285A  014E      
0000285C  226E FFFC 4437          move.l    -4(A6),A1
00002860  32B0 0800 4438          move.w    0(A0,D0.L),(A1)
                    4439   ; BreakPointInstruction[i] = 0 ;
00002864  2012      4440          move.l    (A2),D0
00002866  E388      4441          lsl.l     #1,D0
00002868  41F9 0B00 4442          lea       _BreakPointInstruction.L,A0
0000286C  014E      
0000286E  4270 0800 4443          clr.w     0(A0,D0.L)
                    4444   HandleBreakPoint_4:
00002872  5292      4445          addq.l    #1,(A2)
00002874  60A0      4446          bra       HandleBreakPoint_1
                    4447   HandleBreakPoint_3:
                    4448   ; }
                    4449   ; }
                    4450   ; DumpRegisters() ;
00002876  4EB8 1A02 4451          jsr       _DumpRegisters
                    4452   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000287A  4879 0000 4453          pea       @m68kde~1_57.L
0000287E  4E30      
00002880  4E93      4454          jsr       (A3)
00002882  584F      4455          addq.w    #4,A7
                    4456   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002884  4879 0000 4457          pea       @m68kde~1_96.L
00002888  52CE      
0000288A  4E93      4458          jsr       (A3)
0000288C  584F      4459          addq.w    #4,A7
                    4460   ; menu() ;
0000288E  4EB9 0000 4461          jsr       _menu
00002892  2A9A      
00002894  4CDF 1C00 4462          movem.l   (A7)+,A2/A3/A4
00002898  4E5E      4463          unlk      A6
0000289A  4E75      4464          rts
                    4465   ; }
                    4466   ; void UnknownCommand()
                    4467   ; {
                    4468   _UnknownCommand:
                    4469   ; printf("\r\nUnknown Command.....\r\n") ;
0000289C  4879 0000 4470          pea       @m68kde~1_97.L
000028A0  52F6      
000028A2  4EB9 0000 4471          jsr       _printf
000028A6  3F7A      
000028A8  584F      4472          addq.w    #4,A7
                    4473   ; Help() ;
000028AA  4EB9 0000 4474          jsr       _Help
000028AE  29C0      
000028B0  4E75      4475          rts
                    4476   ; }
                    4477   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    4478   ; void CallDebugMonitor(void)
                    4479   ; {
                    4480   _CallDebugMonitor:
                    4481   ; printf("\r\nProgram Ended (TRAP #15)....") ;
000028B2  4879 0000 4482          pea       @m68kde~1_98.L
000028B6  5310      
000028B8  4EB9 0000 4483          jsr       _printf
000028BC  3F7A      
000028BE  584F      4484          addq.w    #4,A7
                    4485   ; menu();
000028C0  4EB9 0000 4486          jsr       _menu
000028C4  2A9A      
000028C6  4E75      4487          rts
                    4488   ; }
                    4489   ; void Breakpoint(void)
                    4490   ; {
                    4491   _Breakpoint:
000028C8  2F02      4492          move.l    D2,-(A7)
                    4493   ; char c;
                    4494   ; c = toupper(_getch());
000028CA  2F00      4495          move.l    D0,-(A7)
000028CC  4EB8 0B68 4496          jsr       __getch
000028D0  2200      4497          move.l    D0,D1
000028D2  201F      4498          move.l    (A7)+,D0
000028D4  2F01      4499          move.l    D1,-(A7)
000028D6  4EB9 0000 4500          jsr       _toupper
000028DA  36B8      
000028DC  584F      4501          addq.w    #4,A7
000028DE  1400      4502          move.b    D0,D2
                    4503   ; if( c == (char)('D'))                                      // BreakPoint Display
000028E0  0C02 0044 4504          cmp.b     #68,D2
000028E4  6608      4505          bne.s     Breakpoint_1
                    4506   ; BreakPointDisplay() ;
000028E6  4EB8 21B0 4507          jsr       _BreakPointDisplay
000028EA  6000 0054 4508          bra       Breakpoint_10
                    4509   Breakpoint_1:
                    4510   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000028EE  0C02 004B 4511          cmp.b     #75,D2
000028F2  6630      4512          bne.s     Breakpoint_3
                    4513   ; printf("\r\nKill All Break Points...(y/n)?") ;
000028F4  4879 0000 4514          pea       @m68kde~1_99.L
000028F8  5330      
000028FA  4EB9 0000 4515          jsr       _printf
000028FE  3F7A      
00002900  584F      4516          addq.w    #4,A7
                    4517   ; c = toupper(_getch());
00002902  2F00      4518          move.l    D0,-(A7)
00002904  4EB8 0B68 4519          jsr       __getch
00002908  2200      4520          move.l    D0,D1
0000290A  201F      4521          move.l    (A7)+,D0
0000290C  2F01      4522          move.l    D1,-(A7)
0000290E  4EB9 0000 4523          jsr       _toupper
00002912  36B8      
00002914  584F      4524          addq.w    #4,A7
00002916  1400      4525          move.b    D0,D2
                    4526   ; if(c == (char)('Y'))
00002918  0C02 0059 4527          cmp.b     #89,D2
0000291C  6604      4528          bne.s     Breakpoint_5
                    4529   ; KillAllBreakPoints() ;
0000291E  4EB8 2548 4530          jsr       _KillAllBreakPoints
                    4531   Breakpoint_5:
00002922  601C      4532          bra.s     Breakpoint_10
                    4533   Breakpoint_3:
                    4534   ; }
                    4535   ; else if(c == (char)('S')) {
00002924  0C02 0053 4536          cmp.b     #83,D2
00002928  6606      4537          bne.s     Breakpoint_7
                    4538   ; SetBreakPoint() ;
0000292A  4EB8 25E0 4539          jsr       _SetBreakPoint
0000292E  6010      4540          bra.s     Breakpoint_10
                    4541   Breakpoint_7:
                    4542   ; }
                    4543   ; else if(c == (char)('C')) {
00002930  0C02 0043 4544          cmp.b     #67,D2
00002934  6606      4545          bne.s     Breakpoint_9
                    4546   ; BreakPointClear() ;
00002936  4EB8 2330 4547          jsr       _BreakPointClear
0000293A  6004      4548          bra.s     Breakpoint_10
                    4549   Breakpoint_9:
                    4550   ; }
                    4551   ; else
                    4552   ; UnknownCommand() ;
0000293C  4EB8 289C 4553          jsr       _UnknownCommand
                    4554   Breakpoint_10:
00002940  241F      4555          move.l    (A7)+,D2
00002942  4E75      4556          rts
                    4557   ; }
                    4558   ; void Watchpoint(void)
                    4559   ; {
                    4560   _Watchpoint:
00002944  2F02      4561          move.l    D2,-(A7)
                    4562   ; char c;
                    4563   ; c = toupper(_getch());
00002946  2F00      4564          move.l    D0,-(A7)
00002948  4EB8 0B68 4565          jsr       __getch
0000294C  2200      4566          move.l    D0,D1
0000294E  201F      4567          move.l    (A7)+,D0
00002950  2F01      4568          move.l    D1,-(A7)
00002952  4EB9 0000 4569          jsr       _toupper
00002956  36B8      
00002958  584F      4570          addq.w    #4,A7
0000295A  1400      4571          move.b    D0,D2
                    4572   ; if( c == (char)('D'))                                      // WatchPoint Display
0000295C  0C02 0044 4573          cmp.b     #68,D2
00002960  6608      4574          bne.s     Watchpoint_1
                    4575   ; WatchPointDisplay() ;
00002962  4EB8 2284 4576          jsr       _WatchPointDisplay
00002966  6000 0054 4577          bra       Watchpoint_10
                    4578   Watchpoint_1:
                    4579   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000296A  0C02 004B 4580          cmp.b     #75,D2
0000296E  6630      4581          bne.s     Watchpoint_3
                    4582   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002970  4879 0000 4583          pea       @m68kde~1_100.L
00002974  5352      
00002976  4EB9 0000 4584          jsr       _printf
0000297A  3F7A      
0000297C  584F      4585          addq.w    #4,A7
                    4586   ; c = toupper(_getch());
0000297E  2F00      4587          move.l    D0,-(A7)
00002980  4EB8 0B68 4588          jsr       __getch
00002984  2200      4589          move.l    D0,D1
00002986  201F      4590          move.l    (A7)+,D0
00002988  2F01      4591          move.l    D1,-(A7)
0000298A  4EB9 0000 4592          jsr       _toupper
0000298E  36B8      
00002990  584F      4593          addq.w    #4,A7
00002992  1400      4594          move.b    D0,D2
                    4595   ; if(c == (char)('Y'))
00002994  0C02 0059 4596          cmp.b     #89,D2
00002998  6604      4597          bne.s     Watchpoint_5
                    4598   ; KillAllWatchPoints() ;
0000299A  4EB8 25B0 4599          jsr       _KillAllWatchPoints
                    4600   Watchpoint_5:
0000299E  601C      4601          bra.s     Watchpoint_10
                    4602   Watchpoint_3:
                    4603   ; }
                    4604   ; else if(c == (char)('S')) {
000029A0  0C02 0053 4605          cmp.b     #83,D2
000029A4  6606      4606          bne.s     Watchpoint_7
                    4607   ; SetWatchPoint() ;
000029A6  4EB8 2700 4608          jsr       _SetWatchPoint
000029AA  6010      4609          bra.s     Watchpoint_10
                    4610   Watchpoint_7:
                    4611   ; }
                    4612   ; else if(c == (char)('C')) {
000029AC  0C02 0043 4613          cmp.b     #67,D2
000029B0  6606      4614          bne.s     Watchpoint_9
                    4615   ; WatchPointClear() ;
000029B2  4EB8 240A 4616          jsr       _WatchPointClear
000029B6  6004      4617          bra.s     Watchpoint_10
                    4618   Watchpoint_9:
                    4619   ; }
                    4620   ; else
                    4621   ; UnknownCommand() ;
000029B8  4EB8 289C 4622          jsr       _UnknownCommand
                    4623   Watchpoint_10:
000029BC  241F      4624          move.l    (A7)+,D2
000029BE  4E75      4625          rts
                    4626   ; }
                    4627   ; void Help(void)
                    4628   ; {
                    4629   _Help:
000029C0  48E7 2020 4630          movem.l   D2/A2,-(A7)
000029C4  45F9 0000 4631          lea       _printf.L,A2
000029C8  3F7A      
                    4632   ; char *banner = "\r\n----------------------------------------------------------------" ;
000029CA  41F9 0000 4633          lea       @m68kde~1_101.L,A0
000029CE  5374      
000029D0  2408      4634          move.l    A0,D2
                    4635   ; printf(banner) ;
000029D2  2F02      4636          move.l    D2,-(A7)
000029D4  4E92      4637          jsr       (A2)
000029D6  584F      4638          addq.w    #4,A7
                    4639   ; printf("\r\n  Debugger Command Summary") ;
000029D8  4879 0000 4640          pea       @m68kde~1_102.L
000029DC  53B8      
000029DE  4E92      4641          jsr       (A2)
000029E0  584F      4642          addq.w    #4,A7
                    4643   ; printf(banner) ;
000029E2  2F02      4644          move.l    D2,-(A7)
000029E4  4E92      4645          jsr       (A2)
000029E6  584F      4646          addq.w    #4,A7
                    4647   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000029E8  4879 0000 4648          pea       @m68kde~1_103.L
000029EC  53D6      
000029EE  4E92      4649          jsr       (A2)
000029F0  584F      4650          addq.w    #4,A7
                    4651   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000029F2  4879 0000 4652          pea       @m68kde~1_104.L
000029F6  541A      
000029F8  4E92      4653          jsr       (A2)
000029FA  584F      4654          addq.w    #4,A7
                    4655   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000029FC  4879 0000 4656          pea       @m68kde~1_105.L
00002A00  5452      
00002A02  4E92      4657          jsr       (A2)
00002A04  584F      4658          addq.w    #4,A7
                    4659   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
00002A06  4879 0000 4660          pea       @m68kde~1_106.L
00002A0A  548C      
00002A0C  4E92      4661          jsr       (A2)
00002A0E  584F      4662          addq.w    #4,A7
                    4663   ; printf("\r\n  E            - Enter String into Memory") ;
00002A10  4879 0000 4664          pea       @m68kde~1_107.L
00002A14  54BE      
00002A16  4E92      4665          jsr       (A2)
00002A18  584F      4666          addq.w    #4,A7
                    4667   ; printf("\r\n  F            - Fill Memory with Data") ;
00002A1A  4879 0000 4668          pea       @m68kde~1_108.L
00002A1E  54EA      
00002A20  4E92      4669          jsr       (A2)
00002A22  584F      4670          addq.w    #4,A7
                    4671   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002A24  2F39 0B00 4672          move.l    _PC.L,-(A7)
00002A28  0120      
00002A2A  4879 0000 4673          pea       @m68kde~1_109.L
00002A2E  5514      
00002A30  4E92      4674          jsr       (A2)
00002A32  504F      4675          addq.w    #8,A7
                    4676   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002A34  4879 0000 4677          pea       @m68kde~1_110.L
00002A38  554E      
00002A3A  4E92      4678          jsr       (A2)
00002A3C  584F      4679          addq.w    #4,A7
                    4680   ; printf("\r\n  M            - Memory Examine and Change");
00002A3E  4879 0000 4681          pea       @m68kde~1_111.L
00002A42  5586      
00002A44  4E92      4682          jsr       (A2)
00002A46  584F      4683          addq.w    #4,A7
                    4684   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002A48  4879 0000 4685          pea       @m68kde~1_112.L
00002A4C  55B4      
00002A4E  4E92      4686          jsr       (A2)
00002A50  584F      4687          addq.w    #4,A7
                    4688   ; printf("\r\n  R            - Display 68000 Registers") ;
00002A52  4879 0000 4689          pea       @m68kde~1_113.L
00002A56  55EE      
00002A58  4E92      4690          jsr       (A2)
00002A5A  584F      4691          addq.w    #4,A7
                    4692   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002A5C  4879 0000 4693          pea       @m68kde~1_114.L
00002A60  561A      
00002A62  4E92      4694          jsr       (A2)
00002A64  584F      4695          addq.w    #4,A7
                    4696   ; printf("\r\n  TM           - Test Memory") ;
00002A66  4879 0000 4697          pea       @m68kde~1_115.L
00002A6A  564C      
00002A6C  4E92      4698          jsr       (A2)
00002A6E  584F      4699          addq.w    #4,A7
                    4700   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002A70  4879 0000 4701          pea       @m68kde~1_116.L
00002A74  566C      
00002A76  4E92      4702          jsr       (A2)
00002A78  584F      4703          addq.w    #4,A7
                    4704   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002A7A  4879 0000 4705          pea       @m68kde~1_117.L
00002A7E  5694      
00002A80  4E92      4706          jsr       (A2)
00002A82  584F      4707          addq.w    #4,A7
                    4708   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002A84  4879 0000 4709          pea       @m68kde~1_118.L
00002A88  56CA      
00002A8A  4E92      4710          jsr       (A2)
00002A8C  584F      4711          addq.w    #4,A7
                    4712   ; printf(banner) ;
00002A8E  2F02      4713          move.l    D2,-(A7)
00002A90  4E92      4714          jsr       (A2)
00002A92  584F      4715          addq.w    #4,A7
00002A94  4CDF 0404 4716          movem.l   (A7)+,D2/A2
00002A98  4E75      4717          rts
                    4718   ; }
                    4719   ; void menu(void)
                    4720   ; {
                    4721   _menu:
00002A9A  48E7 303C 4722          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002A9E  45F9 0000 4723          lea       _printf.L,A2
00002AA2  3F7A      
00002AA4  47F9 0B00 4724          lea       _Trace.L,A3
00002AA8  00D8      
00002AAA  49F9 0B00 4725          lea       _x.L,A4
00002AAE  00C8      
00002AB0  4BF9 0B00 4726          lea       _SR.L,A5
00002AB4  012C      
                    4727   ; char c,c1 ;
                    4728   ; while(1)    {
                    4729   menu_1:
                    4730   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002AB6  4EB8 0BA6 4731          jsr       _FlushKeyboard
                    4732   ; printf("\r\n#") ;
00002ABA  4879 0000 4733          pea       @m68kde~1_119.L
00002ABE  5702      
00002AC0  4E92      4734          jsr       (A2)
00002AC2  584F      4735          addq.w    #4,A7
                    4736   ; c = toupper(_getch());
00002AC4  2F00      4737          move.l    D0,-(A7)
00002AC6  4EB8 0B68 4738          jsr       __getch
00002ACA  2200      4739          move.l    D0,D1
00002ACC  201F      4740          move.l    (A7)+,D0
00002ACE  2F01      4741          move.l    D1,-(A7)
00002AD0  4EB9 0000 4742          jsr       _toupper
00002AD4  36B8      
00002AD6  584F      4743          addq.w    #4,A7
00002AD8  1400      4744          move.b    D0,D2
                    4745   ; if( c == (char)('L'))                  // load s record file
00002ADA  0C02 004C 4746          cmp.b     #76,D2
00002ADE  6608      4747          bne.s     menu_4
                    4748   ; Load_SRecordFile() ;
00002AE0  4EB8 0E36 4749          jsr       _Load_SRecordFile
00002AE4  6000 021E 4750          bra       menu_46
                    4751   menu_4:
                    4752   ; else if( c == (char)('D'))             // dump memory
00002AE8  0C02 0044 4753          cmp.b     #68,D2
00002AEC  6608      4754          bne.s     menu_6
                    4755   ; DumpMemory() ;
00002AEE  4EB8 0CCC 4756          jsr       _DumpMemory
00002AF2  6000 0210 4757          bra       menu_46
                    4758   menu_6:
                    4759   ; else if( c == (char)('E'))             // Enter String into memory
00002AF6  0C02 0045 4760          cmp.b     #69,D2
00002AFA  660A      4761          bne.s     menu_8
                    4762   ; EnterString() ;
00002AFC  4EB9 0000 4763          jsr       _EnterString
00002B00  2E4C      
00002B02  6000 0200 4764          bra       menu_46
                    4765   menu_8:
                    4766   ; else if( c == (char)('F'))             // fill memory
00002B06  0C02 0046 4767          cmp.b     #70,D2
00002B0A  6608      4768          bne.s     menu_10
                    4769   ; FillMemory() ;
00002B0C  4EB8 0DBC 4770          jsr       _FillMemory
00002B10  6000 01F2 4771          bra       menu_46
                    4772   menu_10:
                    4773   ; else if( c == (char)('G'))  {           // go user program
00002B14  0C02 0047 4774          cmp.b     #71,D2
00002B18  6626      4775          bne.s     menu_12
                    4776   ; printf("\r\nProgram Running.....") ;
00002B1A  4879 0000 4777          pea       @m68kde~1_120.L
00002B1E  5706      
00002B20  4E92      4778          jsr       (A2)
00002B22  584F      4779          addq.w    #4,A7
                    4780   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002B24  4879 0000 4781          pea       @m68kde~1_121.L
00002B28  571E      
00002B2A  4E92      4782          jsr       (A2)
00002B2C  584F      4783          addq.w    #4,A7
                    4784   ; GoFlag = 1 ;
00002B2E  23FC 0000 4785          move.l    #1,_GoFlag.L
00002B32  0001 0B00 
00002B36  00DC      
                    4786   ; go() ;
00002B38  4EB8 08B8 4787          jsr       _go
00002B3C  6000 01C6 4788          bra       menu_46
                    4789   menu_12:
                    4790   ; }
                    4791   ; else if( c == (char)('M'))           // memory examine and modify
00002B40  0C02 004D 4792          cmp.b     #77,D2
00002B44  6608      4793          bne.s     menu_14
                    4794   ; MemoryChange() ;
00002B46  4EB8 0FC4 4795          jsr       _MemoryChange
00002B4A  6000 01B8 4796          bra       menu_46
                    4797   menu_14:
                    4798   ; else if( c == (char)('P'))            // Program Flash Chip
00002B4E  0C02 0050 4799          cmp.b     #80,D2
00002B52  6608      4800          bne.s     menu_16
                    4801   ; ProgramFlashChip() ;
00002B54  4EB8 1368 4802          jsr       _ProgramFlashChip
00002B58  6000 01AA 4803          bra       menu_46
                    4804   menu_16:
                    4805   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002B5C  0C02 0043 4806          cmp.b     #67,D2
00002B60  6608      4807          bne.s     menu_18
                    4808   ; LoadFromFlashChip();
00002B62  4EB8 138A 4809          jsr       _LoadFromFlashChip
00002B66  6000 019C 4810          bra       menu_46
                    4811   menu_18:
                    4812   ; else if( c == (char)('R'))             // dump registers
00002B6A  0C02 0052 4813          cmp.b     #82,D2
00002B6E  6608      4814          bne.s     menu_20
                    4815   ; DumpRegisters() ;
00002B70  4EB8 1A02 4816          jsr       _DumpRegisters
00002B74  6000 018E 4817          bra       menu_46
                    4818   menu_20:
                    4819   ; else if( c == (char)('.'))           // change registers
00002B78  0C02 002E 4820          cmp.b     #46,D2
00002B7C  6608      4821          bne.s     menu_22
                    4822   ; ChangeRegisters() ;
00002B7E  4EB8 1EF4 4823          jsr       _ChangeRegisters
00002B82  6000 0180 4824          bra       menu_46
                    4825   menu_22:
                    4826   ; else if( c == (char)('B'))              // breakpoint command
00002B86  0C02 0042 4827          cmp.b     #66,D2
00002B8A  6608      4828          bne.s     menu_24
                    4829   ; Breakpoint() ;
00002B8C  4EB8 28C8 4830          jsr       _Breakpoint
00002B90  6000 0172 4831          bra       menu_46
                    4832   menu_24:
                    4833   ; else if( c == (char)('T'))  {          // Test command
00002B94  0C02 0054 4834          cmp.b     #84,D2
00002B98  6600 0046 4835          bne       menu_26
                    4836   ; c1 = toupper(_getch()) ;
00002B9C  2F00      4837          move.l    D0,-(A7)
00002B9E  4EB8 0B68 4838          jsr       __getch
00002BA2  2200      4839          move.l    D0,D1
00002BA4  201F      4840          move.l    (A7)+,D0
00002BA6  2F01      4841          move.l    D1,-(A7)
00002BA8  4EB9 0000 4842          jsr       _toupper
00002BAC  36B8      
00002BAE  584F      4843          addq.w    #4,A7
00002BB0  1600      4844          move.b    D0,D3
                    4845   ; if(c1 == (char)('M'))                    // memory test
00002BB2  0C03 004D 4846          cmp.b     #77,D3
00002BB6  6608      4847          bne.s     menu_28
                    4848   ; MemoryTest() ;
00002BB8  4EB9 0000 4849          jsr       _MemoryTest
00002BBC  2EC4      
00002BBE  601C      4850          bra.s     menu_33
                    4851   menu_28:
                    4852   ; else if( c1 == (char)('S'))              // Switch Test command
00002BC0  0C03 0053 4853          cmp.b     #83,D3
00002BC4  6606      4854          bne.s     menu_30
                    4855   ; SwitchTest() ;
00002BC6  4EB8 0AA4 4856          jsr       _SwitchTest
00002BCA  6010      4857          bra.s     menu_33
                    4858   menu_30:
                    4859   ; else if( c1 == (char)('D'))              // display Test command
00002BCC  0C03 0044 4860          cmp.b     #68,D3
00002BD0  6606      4861          bne.s     menu_32
                    4862   ; TestLEDS() ;
00002BD2  4EB8 0A50 4863          jsr       _TestLEDS
00002BD6  6004      4864          bra.s     menu_33
                    4865   menu_32:
                    4866   ; else
                    4867   ; UnknownCommand() ;
00002BD8  4EB8 289C 4868          jsr       _UnknownCommand
                    4869   menu_33:
00002BDC  6000 0126 4870          bra       menu_46
                    4871   menu_26:
                    4872   ; }
                    4873   ; else if( c == (char)(' ')) {             // Next instruction command
00002BE0  0C02 0020 4874          cmp.b     #32,D2
00002BE4  6636      4875          bne.s     menu_34
                    4876   ; DisableBreakPoints() ;
00002BE6  4EB8 24AC 4877          jsr       _DisableBreakPoints
                    4878   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002BEA  2013      4879          move.l    (A3),D0
00002BEC  0C80 0000 4880          cmp.l     #1,D0
00002BF0  0001      
00002BF2  661A      4881          bne.s     menu_36
00002BF4  2039 0B00 4882          move.l    _GoFlag.L,D0
00002BF8  00DC      
00002BFA  0C80 0000 4883          cmp.l     #1,D0
00002BFE  0001      
00002C00  660C      4884          bne.s     menu_36
                    4885   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002C02  13FC 0001 4886          move.b    #1,4194314
00002C06  0040 000A 
                    4887   ; return ;
00002C0A  6000 00FC 4888          bra       menu_38
                    4889   menu_36:
                    4890   ; }
                    4891   ; else
                    4892   ; printf("\r\nError: Press 'G' first to start program") ;
00002C0E  4879 0000 4893          pea       @m68kde~1_122.L
00002C12  574C      
00002C14  4E92      4894          jsr       (A2)
00002C16  584F      4895          addq.w    #4,A7
00002C18  6000 00EA 4896          bra       menu_46
                    4897   menu_34:
                    4898   ; }
                    4899   ; else if( c == (char)('S')) {             // single step
00002C1C  0C02 0053 4900          cmp.b     #83,D2
00002C20  6600 008C 4901          bne       menu_39
                    4902   ; if(Trace == 0) {
00002C24  2013      4903          move.l    (A3),D0
00002C26  6600 0050 4904          bne       menu_41
                    4905   ; DisableBreakPoints() ;
00002C2A  4EB8 24AC 4906          jsr       _DisableBreakPoints
                    4907   ; printf("\r\nSingle Step  :[ON]") ;
00002C2E  4879 0000 4908          pea       @m68kde~1_123.L
00002C32  5776      
00002C34  4E92      4909          jsr       (A2)
00002C36  584F      4910          addq.w    #4,A7
                    4911   ; printf("\r\nBreak Points :[Disabled]") ;
00002C38  4879 0000 4912          pea       @m68kde~1_56.L
00002C3C  4E14      
00002C3E  4E92      4913          jsr       (A2)
00002C40  584F      4914          addq.w    #4,A7
                    4915   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002C42  0055 8000 4916          or.w      #32768,(A5)
                    4917   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002C46  2F39 0B00 4918          move.l    _PC.L,-(A7)
00002C4A  0120      
00002C4C  4879 0000 4919          pea       @m68kde~1_124.L
00002C50  578C      
00002C52  4E92      4920          jsr       (A2)
00002C54  504F      4921          addq.w    #8,A7
                    4922   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002C56  4879 0000 4923          pea       @m68kde~1_125.L
00002C5A  57C0      
00002C5C  4E92      4924          jsr       (A2)
00002C5E  584F      4925          addq.w    #4,A7
                    4926   ; DumpRegisters() ;
00002C60  4EB8 1A02 4927          jsr       _DumpRegisters
                    4928   ; Trace = 1;
00002C64  26BC 0000 4929          move.l    #1,(A3)
00002C68  0001      
                    4930   ; TraceException = 1;
00002C6A  13FC 0001 4931          move.b    #1,4194314
00002C6E  0040 000A 
                    4932   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002C72  28B8 0074 4933          move.l    116,(A4)
00002C76  6032      4934          bra.s     menu_42
                    4935   menu_41:
                    4936   ; }
                    4937   ; else {
                    4938   ; Trace = 0 ;
00002C78  4293      4939          clr.l     (A3)
                    4940   ; TraceException = 0 ;
00002C7A  4239 0040 4941          clr.b     4194314
00002C7E  000A      
                    4942   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002C80  28B8 0074 4943          move.l    116,(A4)
                    4944   ; EnableBreakPoints() ;
00002C84  4EB8 2500 4945          jsr       _EnableBreakPoints
                    4946   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002C88  0255 7FFF 4947          and.w     #32767,(A5)
                    4948   ; printf("\r\nSingle Step : [OFF]") ;
00002C8C  4879 0000 4949          pea       @m68kde~1_126.L
00002C90  57E4      
00002C92  4E92      4950          jsr       (A2)
00002C94  584F      4951          addq.w    #4,A7
                    4952   ; printf("\r\nBreak Points :[Enabled]") ;
00002C96  4879 0000 4953          pea       @m68kde~1_127.L
00002C9A  57FA      
00002C9C  4E92      4954          jsr       (A2)
00002C9E  584F      4955          addq.w    #4,A7
                    4956   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002CA0  4879 0000 4957          pea       @m68kde~1_128.L
00002CA4  5814      
00002CA6  4E92      4958          jsr       (A2)
00002CA8  584F      4959          addq.w    #4,A7
                    4960   menu_42:
00002CAA  6000 0058 4961          bra       menu_46
                    4962   menu_39:
                    4963   ; }
                    4964   ; }
                    4965   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002CAE  0C02 001B 4966          cmp.b     #27,D2
00002CB2  6600 0040 4967          bne       menu_43
                    4968   ; Trace = 0;
00002CB6  4293      4969          clr.l     (A3)
                    4970   ; TraceException = 0;
00002CB8  4239 0040 4971          clr.b     4194314
00002CBC  000A      
                    4972   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002CBE  28B8 0074 4973          move.l    116,(A4)
                    4974   ; EnableBreakPoints() ;
00002CC2  4EB8 2500 4975          jsr       _EnableBreakPoints
                    4976   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002CC6  0255 7FFF 4977          and.w     #32767,(A5)
                    4978   ; printf("\r\nSingle Step  :[OFF]") ;
00002CCA  4879 0000 4979          pea       @m68kde~1_129.L
00002CCE  583E      
00002CD0  4E92      4980          jsr       (A2)
00002CD2  584F      4981          addq.w    #4,A7
                    4982   ; printf("\r\nBreak Points :[Enabled]");
00002CD4  4879 0000 4983          pea       @m68kde~1_127.L
00002CD8  57FA      
00002CDA  4E92      4984          jsr       (A2)
00002CDC  584F      4985          addq.w    #4,A7
                    4986   ; printf("\r\nProgram Running.....") ;
00002CDE  4879 0000 4987          pea       @m68kde~1_120.L
00002CE2  5706      
00002CE4  4E92      4988          jsr       (A2)
00002CE6  584F      4989          addq.w    #4,A7
                    4990   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002CE8  4879 0000 4991          pea       @m68kde~1_121.L
00002CEC  571E      
00002CEE  4E92      4992          jsr       (A2)
00002CF0  584F      4993          addq.w    #4,A7
                    4994   ; return ;
00002CF2  6014      4995          bra.s     menu_38
                    4996   menu_43:
                    4997   ; }
                    4998   ; else if( c == (char)('W'))              // Watchpoint command
00002CF4  0C02 0057 4999          cmp.b     #87,D2
00002CF8  6606      5000          bne.s     menu_45
                    5001   ; Watchpoint() ;
00002CFA  4EB8 2944 5002          jsr       _Watchpoint
00002CFE  6004      5003          bra.s     menu_46
                    5004   menu_45:
                    5005   ; else
                    5006   ; UnknownCommand() ;
00002D00  4EB8 289C 5007          jsr       _UnknownCommand
                    5008   menu_46:
00002D04  6000 FDB0 5009          bra       menu_1
                    5010   menu_38:
00002D08  4CDF 3C0C 5011          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002D0C  4E75      5012          rts
                    5013   ; }
                    5014   ; }
                    5015   ; void PrintErrorMessageandAbort(char *string) {
                    5016   _PrintErrorMessageandAbort:
00002D0E  4E56 0000 5017          link      A6,#0
                    5018   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002D12  4879 0000 5019          pea       @m68kde~1_130.L
00002D16  5854      
00002D18  4EB9 0000 5020          jsr       _printf
00002D1C  3F7A      
00002D1E  584F      5021          addq.w    #4,A7
                    5022   ; printf("%s\r\n", string) ;
00002D20  2F2E 0008 5023          move.l    8(A6),-(A7)
00002D24  4879 0000 5024          pea       @m68kde~1_131.L
00002D28  5870      
00002D2A  4EB9 0000 5025          jsr       _printf
00002D2E  3F7A      
00002D30  504F      5026          addq.w    #8,A7
                    5027   ; menu() ;
00002D32  4EB8 2A9A 5028          jsr       _menu
00002D36  4E5E      5029          unlk      A6
00002D38  4E75      5030          rts
                    5031   ; }
                    5032   ; void IRQMessage(int level) {
                    5033   _IRQMessage:
00002D3A  4E56 0000 5034          link      A6,#0
                    5035   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002D3E  4879 0000 5036          pea       @m68kde~1_132.L
00002D42  5876      
00002D44  4EB9 0000 5037          jsr       _printf
00002D48  3F7A      
00002D4A  584F      5038          addq.w    #4,A7
                    5039   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002D4C  2F2E 0008 5040          move.l    8(A6),-(A7)
00002D50  4879 0000 5041          pea       @m68kde~1_133.L
00002D54  588E      
00002D56  4EB9 0000 5042          jsr       _printf
00002D5A  3F7A      
00002D5C  504F      5043          addq.w    #8,A7
                    5044   ; menu() ;
00002D5E  4EB8 2A9A 5045          jsr       _menu
00002D62  4E5E      5046          unlk      A6
00002D64  4E75      5047          rts
                    5048   ; }
                    5049   ; void UnhandledIRQ1(void) {
                    5050   _UnhandledIRQ1:
                    5051   ; IRQMessage(1);
00002D66  4878 0001 5052          pea       1
00002D6A  4EB8 2D3A 5053          jsr       _IRQMessage
00002D6E  584F      5054          addq.w    #4,A7
00002D70  4E75      5055          rts
                    5056   ; }
                    5057   ; void UnhandledIRQ2(void) {
                    5058   _UnhandledIRQ2:
                    5059   ; IRQMessage(2);
00002D72  4878 0002 5060          pea       2
00002D76  4EB8 2D3A 5061          jsr       _IRQMessage
00002D7A  584F      5062          addq.w    #4,A7
00002D7C  4E75      5063          rts
                    5064   ; }
                    5065   ; void UnhandledIRQ3(void){
                    5066   _UnhandledIRQ3:
                    5067   ; IRQMessage(3);
00002D7E  4878 0003 5068          pea       3
00002D82  4EB8 2D3A 5069          jsr       _IRQMessage
00002D86  584F      5070          addq.w    #4,A7
00002D88  4E75      5071          rts
                    5072   ; }
                    5073   ; void UnhandledIRQ4(void) {
                    5074   _UnhandledIRQ4:
                    5075   ; IRQMessage(4);
00002D8A  4878 0004 5076          pea       4
00002D8E  4EB8 2D3A 5077          jsr       _IRQMessage
00002D92  584F      5078          addq.w    #4,A7
00002D94  4E75      5079          rts
                    5080   ; }
                    5081   ; void UnhandledIRQ5(void) {
                    5082   _UnhandledIRQ5:
                    5083   ; IRQMessage(5);
00002D96  4878 0005 5084          pea       5
00002D9A  4EB8 2D3A 5085          jsr       _IRQMessage
00002D9E  584F      5086          addq.w    #4,A7
00002DA0  4E75      5087          rts
                    5088   ; }
                    5089   ; void UnhandledIRQ6(void) {
                    5090   _UnhandledIRQ6:
                    5091   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002DA2  4879 0000 5092          pea       @m68kde~1_134.L
00002DA6  58B2      
00002DA8  4EB8 2D0E 5093          jsr       _PrintErrorMessageandAbort
00002DAC  584F      5094          addq.w    #4,A7
                    5095   ; menu() ;
00002DAE  4EB8 2A9A 5096          jsr       _menu
00002DB2  4E75      5097          rts
                    5098   ; }
                    5099   ; void UnhandledIRQ7(void) {
                    5100   _UnhandledIRQ7:
                    5101   ; IRQMessage(7);
00002DB4  4878 0007 5102          pea       7
00002DB8  4EB8 2D3A 5103          jsr       _IRQMessage
00002DBC  584F      5104          addq.w    #4,A7
00002DBE  4E75      5105          rts
                    5106   ; }
                    5107   ; void UnhandledTrap(void) {
                    5108   _UnhandledTrap:
                    5109   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002DC0  4879 0000 5110          pea       @m68kde~1_135.L
00002DC4  58F2      
00002DC6  4EB8 2D0E 5111          jsr       _PrintErrorMessageandAbort
00002DCA  584F      5112          addq.w    #4,A7
00002DCC  4E75      5113          rts
                    5114   ; }
                    5115   ; void BusError() {
                    5116   _BusError:
                    5117   ; PrintErrorMessageandAbort("BUS Error!") ;
00002DCE  4879 0000 5118          pea       @m68kde~1_136.L
00002DD2  5908      
00002DD4  4EB8 2D0E 5119          jsr       _PrintErrorMessageandAbort
00002DD8  584F      5120          addq.w    #4,A7
00002DDA  4E75      5121          rts
                    5122   ; }
                    5123   ; void AddressError() {
                    5124   _AddressError:
                    5125   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002DDC  4879 0000 5126          pea       @m68kde~1_137.L
00002DE0  5914      
00002DE2  4EB8 2D0E 5127          jsr       _PrintErrorMessageandAbort
00002DE6  584F      5128          addq.w    #4,A7
00002DE8  4E75      5129          rts
                    5130   ; }
                    5131   ; void IllegalInstruction() {
                    5132   _IllegalInstruction:
                    5133   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002DEA  4879 0000 5134          pea       @m68kde~1_138.L
00002DEE  5924      
00002DF0  4EB8 2D0E 5135          jsr       _PrintErrorMessageandAbort
00002DF4  584F      5136          addq.w    #4,A7
00002DF6  4E75      5137          rts
                    5138   ; }
                    5139   ; void Dividebyzero() {
                    5140   _Dividebyzero:
                    5141   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002DF8  4879 0000 5142          pea       @m68kde~1_139.L
00002DFC  5938      
00002DFE  4EB8 2D0E 5143          jsr       _PrintErrorMessageandAbort
00002E02  584F      5144          addq.w    #4,A7
00002E04  4E75      5145          rts
                    5146   ; }
                    5147   ; void Check() {
                    5148   _Check:
                    5149   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002E06  4879 0000 5150          pea       @m68kde~1_140.L
00002E0A  5948      
00002E0C  4EB8 2D0E 5151          jsr       _PrintErrorMessageandAbort
00002E10  584F      5152          addq.w    #4,A7
00002E12  4E75      5153          rts
                    5154   ; }
                    5155   ; void Trapv() {
                    5156   _Trapv:
                    5157   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002E14  4879 0000 5158          pea       @m68kde~1_141.L
00002E18  595A      
00002E1A  4EB8 2D0E 5159          jsr       _PrintErrorMessageandAbort
00002E1E  584F      5160          addq.w    #4,A7
00002E20  4E75      5161          rts
                    5162   ; }
                    5163   ; void PrivError() {
                    5164   _PrivError:
                    5165   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002E22  4879 0000 5166          pea       @m68kde~1_142.L
00002E26  596C      
00002E28  4EB8 2D0E 5167          jsr       _PrintErrorMessageandAbort
00002E2C  584F      5168          addq.w    #4,A7
00002E2E  4E75      5169          rts
                    5170   ; }
                    5171   ; void UnitIRQ() {
                    5172   _UnitIRQ:
                    5173   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002E30  4879 0000 5174          pea       @m68kde~1_143.L
00002E34  5980      
00002E36  4EB8 2D0E 5175          jsr       _PrintErrorMessageandAbort
00002E3A  584F      5176          addq.w    #4,A7
00002E3C  4E75      5177          rts
                    5178   ; }
                    5179   ; void Spurious() {
                    5180   _Spurious:
                    5181   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002E3E  4879 0000 5182          pea       @m68kde~1_144.L
00002E42  5992      
00002E44  4EB8 2D0E 5183          jsr       _PrintErrorMessageandAbort
00002E48  584F      5184          addq.w    #4,A7
00002E4A  4E75      5185          rts
                    5186   ; }
                    5187   ; void EnterString(void)
                    5188   ; {
                    5189   _EnterString:
00002E4C  4E56 FFFC 5190          link      A6,#-4
00002E50  2F02      5191          move.l    D2,-(A7)
                    5192   ; unsigned char *Start;
                    5193   ; unsigned char c;
                    5194   ; printf("\r\nStart Address in Memory: ") ;
00002E52  4879 0000 5195          pea       @m68kde~1_145.L
00002E56  59A0      
00002E58  4EB9 0000 5196          jsr       _printf
00002E5C  3F7A      
00002E5E  584F      5197          addq.w    #4,A7
                    5198   ; Start = Get8HexDigits(0) ;
00002E60  42A7      5199          clr.l     -(A7)
00002E62  4EB8 0CA4 5200          jsr       _Get8HexDigits
00002E66  584F      5201          addq.w    #4,A7
00002E68  2400      5202          move.l    D0,D2
                    5203   ; printf("\r\nEnter String (ESC to end) :") ;
00002E6A  4879 0000 5204          pea       @m68kde~1_146.L
00002E6E  59BC      
00002E70  4EB9 0000 5205          jsr       _printf
00002E74  3F7A      
00002E76  584F      5206          addq.w    #4,A7
                    5207   ; while((c = getchar()) != 0x1b)
                    5208   EnterString_1:
00002E78  4EB9 0000 5209          jsr       _getch
00002E7C  35EE      
00002E7E  1D40 FFFF 5210          move.b    D0,-1(A6)
00002E82  0C00 001B 5211          cmp.b     #27,D0
00002E86  670A      5212          beq.s     EnterString_3
                    5213   ; *Start++ = c ;
00002E88  2042      5214          move.l    D2,A0
00002E8A  5282      5215          addq.l    #1,D2
00002E8C  10AE FFFF 5216          move.b    -1(A6),(A0)
00002E90  60E6      5217          bra       EnterString_1
                    5218   EnterString_3:
                    5219   ; *Start = 0x00;  // terminate with a null
00002E92  2042      5220          move.l    D2,A0
00002E94  4210      5221          clr.b     (A0)
00002E96  241F      5222          move.l    (A7)+,D2
00002E98  4E5E      5223          unlk      A6
00002E9A  4E75      5224          rts
                    5225   ; }
                    5226   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    5227   ; void clearInputBuffer() {
                    5228   _clearInputBuffer:
00002E9C  4E56 FFFC 5229          link      A6,#-4
                    5230   ; int c;
                    5231   ; while ((c = getchar()) != '\n' && c != EOF);
                    5232   clearInputBuffer_1:
00002EA0  4EB9 0000 5233          jsr       _getch
00002EA4  35EE      
00002EA6  2D40 FFFC 5234          move.l    D0,-4(A6)
00002EAA  0C80 0000 5235          cmp.l     #10,D0
00002EAE  000A      
00002EB0  670E      5236          beq.s     clearInputBuffer_3
00002EB2  202E FFFC 5237          move.l    -4(A6),D0
00002EB6  0C80 FFFF 5238          cmp.l     #-1,D0
00002EBA  FFFF      
00002EBC  6702      5239          beq.s     clearInputBuffer_3
00002EBE  60E0      5240          bra       clearInputBuffer_1
                    5241   clearInputBuffer_3:
00002EC0  4E5E      5242          unlk      A6
00002EC2  4E75      5243          rts
                    5244   ; }
                    5245   ; void MemoryTest(void)
                    5246   ; {
                    5247   _MemoryTest:
00002EC4  4E56 FF40 5248          link      A6,#-192
00002EC8  48E7 3F3C 5249          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002ECC  45F9 0000 5250          lea       _printf.L,A2
00002ED0  3F7A      
00002ED2  4BF8 0B68 5251          lea       __getch.L,A5
                    5252   ; unsigned int *RamPtr, counter1=1 ;
00002ED6  2D7C 0000 5253          move.l    #1,-188(A6)
00002EDA  0001 FF44 
                    5254   ; register unsigned int i ;
                    5255   ; unsigned int Start, End ;
                    5256   ; char c, text[150];
                    5257   ; unsigned int* addressPointer;
                    5258   ; unsigned int startAddress = NULL;
00002EDE  42AE FFF0 5259          clr.l     -16(A6)
                    5260   ; unsigned int endAddress = NULL;
00002EE2  42AE FFF4 5261          clr.l     -12(A6)
                    5262   ; unsigned int byteLength;
                    5263   ; unsigned int dataSize = 0;
00002EE6  4285      5264          clr.l     D5
                    5265   ; unsigned int dataPattern = 0;
00002EE8  4283      5266          clr.l     D3
                    5267   ; unsigned int currAddress;
                    5268   ; unsigned int addrCount;
                    5269   ; unsigned int intBuffer = NULL;
00002EEA  7E00      5270          moveq     #0,D7
                    5271   ; unsigned char *startAddressPtr = NULL;
00002EEC  4282      5272          clr.l     D2
                    5273   ; unsigned char *endAddressPtr = NULL;
00002EEE  4286      5274          clr.l     D6
                    5275   ; unsigned short int *wordAddressPtr = NULL;
00002EF0  387C 0000 5276          move.w    #0,A4
                    5277   ; unsigned int *longAddressPtr = NULL;
00002EF4  367C 0000 5278          move.w    #0,A3
                    5279   ; // IMPROVEMENTS TO BE MADE:
                    5280   ; // Suppossed to be able to write an odd address as a byte
                    5281   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    5282   ; // printf("\r\nStart Address: ") ;
                    5283   ; // Start = Get8HexDigits(0) ;
                    5284   ; // printf("\r\nEnd Address: ") ;
                    5285   ; // End = Get8HexDigits(0) ;
                    5286   ; // TODO
                    5287   ; scanflush();
00002EF8  4EB9 0000 5288          jsr       _scanflush
00002EFC  3970      
                    5289   ; memset(text, 0, sizeof(text));  // fills with zeros
00002EFE  4878 0096 5290          pea       150
00002F02  42A7      5291          clr.l     -(A7)
00002F04  486E FF56 5292          pea       -170(A6)
00002F08  4EB9 0000 5293          jsr       _memset
00002F0C  368A      
00002F0E  DEFC 000C 5294          add.w     #12,A7
                    5295   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
00002F12  4879 0000 5296          pea       @m68kde~1_147.L
00002F16  59DA      
00002F18  4E92      5297          jsr       (A2)
00002F1A  584F      5298          addq.w    #4,A7
                    5299   ; dataSize = _getch() - 48;
00002F1C  4E95      5300          jsr       (A5)
00002F1E  0480 0000 5301          sub.l     #48,D0
00002F22  0030      
00002F24  2A00      5302          move.l    D0,D5
                    5303   ; printf("\n");
00002F26  4879 0000 5304          pea       @m68kde~1_28.L
00002F2A  4BF8      
00002F2C  4E92      5305          jsr       (A2)
00002F2E  584F      5306          addq.w    #4,A7
                    5307   ; if (dataSize == 0) {
00002F30  4A85      5308          tst.l     D5
00002F32  6600 0058 5309          bne       MemoryTest_1
                    5310   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
00002F36  4879 0000 5311          pea       @m68kde~1_148.L
00002F3A  5A30      
00002F3C  4E92      5312          jsr       (A2)
00002F3E  584F      5313          addq.w    #4,A7
                    5314   ; intBuffer = _getch() - 48;
00002F40  4E95      5315          jsr       (A5)
00002F42  0480 0000 5316          sub.l     #48,D0
00002F46  0030      
00002F48  2E00      5317          move.l    D0,D7
                    5318   ; // scanf("%d", &intBuffer);
                    5319   ; switch (intBuffer) {
00002F4A  2007      5320          move.l    D7,D0
00002F4C  0C80 0000 5321          cmp.l     #4,D0
00002F50  0004      
00002F52  642C      5322          bhs.s     MemoryTest_4
00002F54  E380      5323          asl.l     #1,D0
00002F56  303B 0806 5324          move.w    MemoryTest_5(PC,D0.L),D0
00002F5A  4EFB 0002 5325          jmp       MemoryTest_5(PC,D0.W)
                    5326   MemoryTest_5:
00002F5E  0008      5327          dc.w      MemoryTest_6-MemoryTest_5
00002F60  000C      5328          dc.w      MemoryTest_7-MemoryTest_5
00002F62  0014      5329          dc.w      MemoryTest_8-MemoryTest_5
00002F64  001C      5330          dc.w      MemoryTest_9-MemoryTest_5
                    5331   MemoryTest_6:
                    5332   ; case(0):
                    5333   ; dataPattern = 0x00; break;
00002F66  4283      5334          clr.l     D3
00002F68  6016      5335          bra.s     MemoryTest_4
                    5336   MemoryTest_7:
                    5337   ; case(1):
                    5338   ; dataPattern = 0xB2; break;
00002F6A  263C 0000 5339          move.l    #178,D3
00002F6E  00B2      
00002F70  600E      5340          bra.s     MemoryTest_4
                    5341   MemoryTest_8:
                    5342   ; case(2):
                    5343   ; dataPattern = 0xC3; break;
00002F72  263C 0000 5344          move.l    #195,D3
00002F76  00C3      
00002F78  6006      5345          bra.s     MemoryTest_4
                    5346   MemoryTest_9:
                    5347   ; case(3):
                    5348   ; dataPattern = 0xD4; break;
00002F7A  263C 0000 5349          move.l    #212,D3
00002F7E  00D4      
                    5350   MemoryTest_4:
                    5351   ; }
                    5352   ; dataPattern &= 0xFF;
00002F80  C6BC 0000 5353          and.l     #255,D3
00002F84  00FF      
                    5354   ; byteLength = 1;
00002F86  7801      5355          moveq     #1,D4
00002F88  6000 00AE 5356          bra       MemoryTest_11
                    5357   MemoryTest_1:
                    5358   ; } else if (dataSize == 1) {
00002F8C  0C85 0000 5359          cmp.l     #1,D5
00002F90  0001      
00002F92  6600 0058 5360          bne       MemoryTest_10
                    5361   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
00002F96  4879 0000 5362          pea       @m68kde~1_149.L
00002F9A  5A92      
00002F9C  4E92      5363          jsr       (A2)
00002F9E  584F      5364          addq.w    #4,A7
                    5365   ; intBuffer = _getch() - 48;
00002FA0  4E95      5366          jsr       (A5)
00002FA2  0480 0000 5367          sub.l     #48,D0
00002FA6  0030      
00002FA8  2E00      5368          move.l    D0,D7
                    5369   ; switch (intBuffer) {
00002FAA  2007      5370          move.l    D7,D0
00002FAC  0C80 0000 5371          cmp.l     #4,D0
00002FB0  0004      
00002FB2  642C      5372          bhs.s     MemoryTest_13
00002FB4  E380      5373          asl.l     #1,D0
00002FB6  303B 0806 5374          move.w    MemoryTest_14(PC,D0.L),D0
00002FBA  4EFB 0002 5375          jmp       MemoryTest_14(PC,D0.W)
                    5376   MemoryTest_14:
00002FBE  0008      5377          dc.w      MemoryTest_15-MemoryTest_14
00002FC0  000C      5378          dc.w      MemoryTest_16-MemoryTest_14
00002FC2  0014      5379          dc.w      MemoryTest_17-MemoryTest_14
00002FC4  001C      5380          dc.w      MemoryTest_18-MemoryTest_14
                    5381   MemoryTest_15:
                    5382   ; case(0):
                    5383   ; dataPattern = 0x0000; break;
00002FC6  4283      5384          clr.l     D3
00002FC8  6016      5385          bra.s     MemoryTest_13
                    5386   MemoryTest_16:
                    5387   ; case(1):
                    5388   ; dataPattern = 0x1234; break;
00002FCA  263C 0000 5389          move.l    #4660,D3
00002FCE  1234      
00002FD0  600E      5390          bra.s     MemoryTest_13
                    5391   MemoryTest_17:
                    5392   ; case(2):
                    5393   ; dataPattern = 0xA1B2; break;
00002FD2  263C 0000 5394          move.l    #41394,D3
00002FD6  A1B2      
00002FD8  6006      5395          bra.s     MemoryTest_13
                    5396   MemoryTest_18:
                    5397   ; case(3):
                    5398   ; dataPattern = 0xC3D4; break;
00002FDA  263C 0000 5399          move.l    #50132,D3
00002FDE  C3D4      
                    5400   MemoryTest_13:
                    5401   ; }
                    5402   ; dataPattern &= 0xFFFF;
00002FE0  C6BC 0000 5403          and.l     #65535,D3
00002FE4  FFFF      
                    5404   ; byteLength = 2;
00002FE6  7802      5405          moveq     #2,D4
00002FE8  6000 004E 5406          bra       MemoryTest_11
                    5407   MemoryTest_10:
                    5408   ; } else {
                    5409   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
00002FEC  4879 0000 5410          pea       @m68kde~1_150.L
00002FF0  5AFC      
00002FF2  4E92      5411          jsr       (A2)
00002FF4  584F      5412          addq.w    #4,A7
                    5413   ; intBuffer = _getch() - 48;
00002FF6  4E95      5414          jsr       (A5)
00002FF8  0480 0000 5415          sub.l     #48,D0
00002FFC  0030      
00002FFE  2E00      5416          move.l    D0,D7
                    5417   ; switch (intBuffer) {
00003000  2007      5418          move.l    D7,D0
00003002  0C80 0000 5419          cmp.l     #4,D0
00003006  0004      
00003008  642C      5420          bhs.s     MemoryTest_20
0000300A  E380      5421          asl.l     #1,D0
0000300C  303B 0806 5422          move.w    MemoryTest_21(PC,D0.L),D0
00003010  4EFB 0002 5423          jmp       MemoryTest_21(PC,D0.W)
                    5424   MemoryTest_21:
00003014  0008      5425          dc.w      MemoryTest_22-MemoryTest_21
00003016  000C      5426          dc.w      MemoryTest_23-MemoryTest_21
00003018  0014      5427          dc.w      MemoryTest_24-MemoryTest_21
0000301A  001C      5428          dc.w      MemoryTest_25-MemoryTest_21
                    5429   MemoryTest_22:
                    5430   ; case(0):
                    5431   ; dataPattern = 0x00000000; break;
0000301C  4283      5432          clr.l     D3
0000301E  6016      5433          bra.s     MemoryTest_20
                    5434   MemoryTest_23:
                    5435   ; case(1):
                    5436   ; dataPattern = 0xAABBCCDD; break;
00003020  263C AABB 5437          move.l    #-1430532899,D3
00003024  CCDD      
00003026  600E      5438          bra.s     MemoryTest_20
                    5439   MemoryTest_24:
                    5440   ; case(2):
                    5441   ; dataPattern = 0x11223344; break;
00003028  263C 1122 5442          move.l    #287454020,D3
0000302C  3344      
0000302E  6006      5443          bra.s     MemoryTest_20
                    5444   MemoryTest_25:
                    5445   ; case(3):
                    5446   ; dataPattern = 0x76543210; break;
00003030  263C 7654 5447          move.l    #1985229328,D3
00003034  3210      
                    5448   MemoryTest_20:
                    5449   ; }
                    5450   ; byteLength = 4;
00003036  7804      5451          moveq     #4,D4
                    5452   MemoryTest_11:
                    5453   ; }
                    5454   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    5455   ; while (startAddressPtr == NULL || 
                    5456   MemoryTest_26:
00003038  4A82      5457          tst.l     D2
0000303A  6732      5458          beq.s     MemoryTest_29
0000303C  0C84 0000 5459          cmp.l     #1,D4
00003040  0001      
00003042  6316      5460          bls.s     MemoryTest_30
00003044  2F02      5461          move.l    D2,-(A7)
00003046  4878 0002 5462          pea       2
0000304A  4EB9 0000 5463          jsr       ULDIV
0000304E  34E0      
00003050  202F 0004 5464          move.l    4(A7),D0
00003054  504F      5465          addq.w    #8,A7
00003056  4A80      5466          tst.l     D0
00003058  6614      5467          bne.s     MemoryTest_29
                    5468   MemoryTest_30:
0000305A  0C82 0802 5469          cmp.l     #134348800,D2
0000305E  0000      
00003060  650C      5470          blo.s     MemoryTest_29
00003062  203C 0B00 5471          move.l    #184549376,D0
00003066  0000      
00003068  9084      5472          sub.l     D4,D0
0000306A  B480      5473          cmp.l     D0,D2
0000306C  6316      5474          bls.s     MemoryTest_28
                    5475   MemoryTest_29:
                    5476   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    5477   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    5478   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    5479   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
0000306E  4879 0000 5480          pea       @m68kde~1_151.L
00003072  5B7A      
00003074  4E92      5481          jsr       (A2)
00003076  584F      5482          addq.w    #4,A7
                    5483   ; startAddressPtr =  Get8HexDigits(0);
00003078  42A7      5484          clr.l     -(A7)
0000307A  4EB8 0CA4 5485          jsr       _Get8HexDigits
0000307E  584F      5486          addq.w    #4,A7
00003080  2400      5487          move.l    D0,D2
00003082  60B4      5488          bra       MemoryTest_26
                    5489   MemoryTest_28:
                    5490   ; }
                    5491   ; while (endAddressPtr == NULL || 
                    5492   MemoryTest_31:
00003084  4A86      5493          tst.l     D6
00003086  670A      5494          beq.s     MemoryTest_34
00003088  202E FFF0 5495          move.l    -16(A6),D0
0000308C  D084      5496          add.l     D4,D0
0000308E  BC80      5497          cmp.l     D0,D6
00003090  6416      5498          bhs.s     MemoryTest_33
                    5499   MemoryTest_34:
                    5500   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    5501   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00003092  4879 0000 5502          pea       @m68kde~1_152.L
00003096  5BB2      
00003098  4E92      5503          jsr       (A2)
0000309A  584F      5504          addq.w    #4,A7
                    5505   ; endAddressPtr =  Get8HexDigits(0);
0000309C  42A7      5506          clr.l     -(A7)
0000309E  4EB8 0CA4 5507          jsr       _Get8HexDigits
000030A2  584F      5508          addq.w    #4,A7
000030A4  2C00      5509          move.l    D0,D6
000030A6  60DC      5510          bra       MemoryTest_31
                    5511   MemoryTest_33:
                    5512   ; }
                    5513   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
000030A8  2F02      5514          move.l    D2,-(A7)
000030AA  4879 0000 5515          pea       @m68kde~1_153.L
000030AE  5BE8      
000030B0  4E92      5516          jsr       (A2)
000030B2  504F      5517          addq.w    #8,A7
                    5518   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
000030B4  2F06      5519          move.l    D6,-(A7)
000030B6  4879 0000 5520          pea       @m68kde~1_154.L
000030BA  5C00      
000030BC  4E92      5521          jsr       (A2)
000030BE  504F      5522          addq.w    #8,A7
                    5523   ; addrCount = 0;
000030C0  42AE FFFC 5524          clr.l     -4(A6)
                    5525   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    5526   MemoryTest_35:
000030C4  B486      5527          cmp.l     D6,D2
000030C6  6400 0132 5528          bhs       MemoryTest_37
000030CA  2006      5529          move.l    D6,D0
000030CC  9082      5530          sub.l     D2,D0
000030CE  5280      5531          addq.l    #1,D0
000030D0  B084      5532          cmp.l     D4,D0
000030D2  6500 0126 5533          blo       MemoryTest_37
                    5534   ; // If address goes beyond 0x0B00_0000 then break
                    5535   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
000030D6  203C 0B00 5536          move.l    #184549376,D0
000030DA  0000      
000030DC  9084      5537          sub.l     D4,D0
000030DE  B480      5538          cmp.l     D0,D2
000030E0  6310      5539          bls.s     MemoryTest_38
                    5540   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
000030E2  2F02      5541          move.l    D2,-(A7)
000030E4  4879 0000 5542          pea       @m68kde~1_155.L
000030E8  5C16      
000030EA  4E92      5543          jsr       (A2)
000030EC  504F      5544          addq.w    #8,A7
                    5545   ; break;
000030EE  6000 010A 5546          bra       MemoryTest_37
                    5547   MemoryTest_38:
                    5548   ; }
                    5549   ; longAddressPtr = startAddressPtr;
000030F2  2642      5550          move.l    D2,A3
                    5551   ; wordAddressPtr = startAddressPtr;
000030F4  2842      5552          move.l    D2,A4
                    5553   ; if (dataSize == 0) {
000030F6  4A85      5554          tst.l     D5
000030F8  6600 0034 5555          bne       MemoryTest_40
                    5556   ; *startAddressPtr = dataPattern;
000030FC  2042      5557          move.l    D2,A0
000030FE  1083      5558          move.b    D3,(A0)
                    5559   ; if ((*startAddressPtr) != dataPattern) {
00003100  2042      5560          move.l    D2,A0
00003102  1010      5561          move.b    (A0),D0
00003104  C0BC 0000 5562          and.l     #255,D0
00003108  00FF      
0000310A  B083      5563          cmp.l     D3,D0
0000310C  671C      5564          beq.s     MemoryTest_42
                    5565   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
0000310E  2F03      5566          move.l    D3,-(A7)
00003110  2042      5567          move.l    D2,A0
00003112  1210      5568          move.b    (A0),D1
00003114  C2BC 0000 5569          and.l     #255,D1
00003118  00FF      
0000311A  2F01      5570          move.l    D1,-(A7)
0000311C  2F02      5571          move.l    D2,-(A7)
0000311E  4879 0000 5572          pea       @m68kde~1_156.L
00003122  5C48      
00003124  4E92      5573          jsr       (A2)
00003126  DEFC 0010 5574          add.w     #16,A7
                    5575   MemoryTest_42:
0000312A  6000 0058 5576          bra       MemoryTest_48
                    5577   MemoryTest_40:
                    5578   ; }
                    5579   ; } else if (dataSize == 1) {
0000312E  0C85 0000 5580          cmp.l     #1,D5
00003132  0001      
00003134  662C      5581          bne.s     MemoryTest_44
                    5582   ; *wordAddressPtr = dataPattern;
00003136  3883      5583          move.w    D3,(A4)
                    5584   ; if ((*wordAddressPtr) != dataPattern) {
00003138  3014      5585          move.w    (A4),D0
0000313A  C0BC 0000 5586          and.l     #65535,D0
0000313E  FFFF      
00003140  B083      5587          cmp.l     D3,D0
00003142  671C      5588          beq.s     MemoryTest_46
                    5589   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00003144  2F03      5590          move.l    D3,-(A7)
00003146  2042      5591          move.l    D2,A0
00003148  1210      5592          move.b    (A0),D1
0000314A  C2BC 0000 5593          and.l     #255,D1
0000314E  00FF      
00003150  2F01      5594          move.l    D1,-(A7)
00003152  2F02      5595          move.l    D2,-(A7)
00003154  4879 0000 5596          pea       @m68kde~1_156.L
00003158  5C48      
0000315A  4E92      5597          jsr       (A2)
0000315C  DEFC 0010 5598          add.w     #16,A7
                    5599   MemoryTest_46:
00003160  6022      5600          bra.s     MemoryTest_48
                    5601   MemoryTest_44:
                    5602   ; }
                    5603   ; } else {
                    5604   ; *longAddressPtr = dataPattern;
00003162  2683      5605          move.l    D3,(A3)
                    5606   ; if ((*longAddressPtr) != dataPattern) {
00003164  B693      5607          cmp.l     (A3),D3
00003166  671C      5608          beq.s     MemoryTest_48
                    5609   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00003168  2F03      5610          move.l    D3,-(A7)
0000316A  2042      5611          move.l    D2,A0
0000316C  1210      5612          move.b    (A0),D1
0000316E  C2BC 0000 5613          and.l     #255,D1
00003172  00FF      
00003174  2F01      5614          move.l    D1,-(A7)
00003176  2F02      5615          move.l    D2,-(A7)
00003178  4879 0000 5616          pea       @m68kde~1_156.L
0000317C  5C48      
0000317E  4E92      5617          jsr       (A2)
00003180  DEFC 0010 5618          add.w     #16,A7
                    5619   MemoryTest_48:
                    5620   ; }
                    5621   ; }
                    5622   ; // if ((*startAddressPtr) != dataPattern) {
                    5623   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    5624   ; // }
                    5625   ; addrCount++;
00003184  52AE FFFC 5626          addq.l    #1,-4(A6)
                    5627   ; if (addrCount % 128 == 0) {
00003188  2F2E FFFC 5628          move.l    -4(A6),-(A7)
0000318C  4878 0080 5629          pea       128
00003190  4EB9 0000 5630          jsr       ULDIV
00003194  34E0      
00003196  202F 0004 5631          move.l    4(A7),D0
0000319A  504F      5632          addq.w    #8,A7
0000319C  4A80      5633          tst.l     D0
0000319E  6600 0054 5634          bne       MemoryTest_55
                    5635   ; if (dataSize == 0) {
000031A2  4A85      5636          tst.l     D5
000031A4  661C      5637          bne.s     MemoryTest_52
                    5638   ; printf("Address: 0x%x Value: 0x%02X\n",
000031A6  2042      5639          move.l    D2,A0
000031A8  1210      5640          move.b    (A0),D1
000031AA  C2BC 0000 5641          and.l     #255,D1
000031AE  00FF      
000031B0  2F01      5642          move.l    D1,-(A7)
000031B2  2F02      5643          move.l    D2,-(A7)
000031B4  4879 0000 5644          pea       @m68kde~1_157.L
000031B8  5C8E      
000031BA  4E92      5645          jsr       (A2)
000031BC  DEFC 000C 5646          add.w     #12,A7
000031C0  6032      5647          bra.s     MemoryTest_55
                    5648   MemoryTest_52:
                    5649   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    5650   ; }
                    5651   ; else if (dataSize == 1) {
000031C2  0C85 0000 5652          cmp.l     #1,D5
000031C6  0001      
000031C8  661A      5653          bne.s     MemoryTest_54
                    5654   ; printf("Address: 0x%x Value: 0x%04X\n",
000031CA  3214      5655          move.w    (A4),D1
000031CC  C2BC 0000 5656          and.l     #65535,D1
000031D0  FFFF      
000031D2  2F01      5657          move.l    D1,-(A7)
000031D4  2F0C      5658          move.l    A4,-(A7)
000031D6  4879 0000 5659          pea       @m68kde~1_158.L
000031DA  5CAC      
000031DC  4E92      5660          jsr       (A2)
000031DE  DEFC 000C 5661          add.w     #12,A7
000031E2  6010      5662          bra.s     MemoryTest_55
                    5663   MemoryTest_54:
                    5664   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    5665   ; }
                    5666   ; else {
                    5667   ; printf("Address: 0x%x Value: 0x%08X\n",
000031E4  2F13      5668          move.l    (A3),-(A7)
000031E6  2F0B      5669          move.l    A3,-(A7)
000031E8  4879 0000 5670          pea       @m68kde~1_159.L
000031EC  5CCA      
000031EE  4E92      5671          jsr       (A2)
000031F0  DEFC 000C 5672          add.w     #12,A7
                    5673   MemoryTest_55:
                    5674   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    5675   ; }
                    5676   ; }
                    5677   ; startAddressPtr += byteLength;
000031F4  D484      5678          add.l     D4,D2
000031F6  6000 FECC 5679          bra       MemoryTest_35
                    5680   MemoryTest_37:
000031FA  4CDF 3CFC 5681          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000031FE  4E5E      5682          unlk      A6
00003200  4E75      5683          rts
                    5684   ; }
                    5685   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    5686   ; }
                    5687   ; void main(void)
                    5688   ; {
                    5689   _main:
00003202  4E56 FFF4 5690          link      A6,#-12
00003206  48E7 3030 5691          movem.l   D2/D3/A2/A3,-(A7)
0000320A  45F8 0A30 5692          lea       _InstallExceptionHandler.L,A2
0000320E  47F9 0000 5693          lea       _printf.L,A3
00003212  3F7A      
                    5694   ; char c ;
                    5695   ; int i, j ;
                    5696   ; char *BugMessage = "DE1-68k Bug V1.77";
00003214  41F9 0000 5697          lea       @m68kde~1_160.L,A0
00003218  5CE8      
0000321A  2608      5698          move.l    A0,D3
                    5699   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
0000321C  41F9 0000 5700          lea       @m68kde~1_161.L,A0
00003220  5CFA      
00003222  2D48 FFFC 5701          move.l    A0,-4(A6)
                    5702   ; KillAllBreakPoints() ;
00003226  4EB8 2548 5703          jsr       _KillAllBreakPoints
                    5704   ; i = x = y = z = PortA_Count = 0;
0000322A  42B9 0B00 5705          clr.l     _PortA_Count.L
0000322E  00D4      
00003230  42B9 0B00 5706          clr.l     _z.L
00003234  00D0      
00003236  42B9 0B00 5707          clr.l     _y.L
0000323A  00CC      
0000323C  42B9 0B00 5708          clr.l     _x.L
00003240  00C8      
00003242  4282      5709          clr.l     D2
                    5710   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00003244  42B9 0B00 5711          clr.l     _GoFlag.L
00003248  00DC      
0000324A  42B9 0B00 5712          clr.l     _Trace.L
0000324E  00D8      
                    5713   ; Echo = 1 ;
00003250  23FC 0000 5714          move.l    #1,_Echo.L
00003254  0001 0B00 
00003258  00E0      
                    5715   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
0000325A  42B9 0B00 5716          clr.l     _d7.L
0000325E  0100      
00003260  42B9 0B00 5717          clr.l     _d6.L
00003264  00FC      
00003266  42B9 0B00 5718          clr.l     _d5.L
0000326A  00F8      
0000326C  42B9 0B00 5719          clr.l     _d4.L
00003270  00F4      
00003272  42B9 0B00 5720          clr.l     _d3.L
00003276  00F0      
00003278  42B9 0B00 5721          clr.l     _d2.L
0000327C  00EC      
0000327E  42B9 0B00 5722          clr.l     _d1.L
00003282  00E8      
00003284  42B9 0B00 5723          clr.l     _d0.L
00003288  00E4      
                    5724   ; a0=a1=a2=a3=a4=a5=a6=0 ;
0000328A  42B9 0B00 5725          clr.l     _a6.L
0000328E  011C      
00003290  42B9 0B00 5726          clr.l     _a5.L
00003294  0118      
00003296  42B9 0B00 5727          clr.l     _a4.L
0000329A  0114      
0000329C  42B9 0B00 5728          clr.l     _a3.L
000032A0  0110      
000032A2  42B9 0B00 5729          clr.l     _a2.L
000032A6  010C      
000032A8  42B9 0B00 5730          clr.l     _a1.L
000032AC  0108      
000032AE  42B9 0B00 5731          clr.l     _a0.L
000032B2  0104      
                    5732   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
000032B4  23FC 0800 5733          move.l    #134217728,_PC.L
000032B8  0000 0B00 
000032BC  0120      
000032BE  23FC 0C00 5734          move.l    #201326592,_SSP.L
000032C2  0000 0B00 
000032C6  0124      
000032C8  23FC 0C00 5735          move.l    #201326592,_USP.L
000032CC  0000 0B00 
000032D0  0128      
                    5736   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
000032D2  33FC 2000 5737          move.w    #8192,_SR.L
000032D6  0B00 012C 
                    5738   ; // Initialise Breakpoint variables
                    5739   ; for(i = 0; i < 8; i++)  {
000032DA  4282      5740          clr.l     D2
                    5741   main_1:
000032DC  0C82 0000 5742          cmp.l     #8,D2
000032E0  0008      
000032E2  6C00 004C 5743          bge       main_3
                    5744   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000032E6  2002      5745          move.l    D2,D0
000032E8  E588      5746          lsl.l     #2,D0
000032EA  41F9 0B00 5747          lea       _BreakPointAddress.L,A0
000032EE  012E      
000032F0  42B0 0800 5748          clr.l     0(A0,D0.L)
                    5749   ; WatchPointAddress[i] = 0 ;
000032F4  2002      5750          move.l    D2,D0
000032F6  E588      5751          lsl.l     #2,D0
000032F8  41F9 0B00 5752          lea       _WatchPointAddress.L,A0
000032FC  0182      
000032FE  42B0 0800 5753          clr.l     0(A0,D0.L)
                    5754   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00003302  2002      5755          move.l    D2,D0
00003304  E388      5756          lsl.l     #1,D0
00003306  41F9 0B00 5757          lea       _BreakPointInstruction.L,A0
0000330A  014E      
0000330C  4270 0800 5758          clr.w     0(A0,D0.L)
                    5759   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00003310  2002      5760          move.l    D2,D0
00003312  E588      5761          lsl.l     #2,D0
00003314  41F9 0B00 5762          lea       _BreakPointSetOrCleared.L,A0
00003318  015E      
0000331A  42B0 0800 5763          clr.l     0(A0,D0.L)
                    5764   ; WatchPointSetOrCleared[i] = 0;
0000331E  2002      5765          move.l    D2,D0
00003320  E588      5766          lsl.l     #2,D0
00003322  41F9 0B00 5767          lea       _WatchPointSetOrCleared.L,A0
00003326  01A2      
00003328  42B0 0800 5768          clr.l     0(A0,D0.L)
0000332C  5282      5769          addq.l    #1,D2
0000332E  60AC      5770          bra       main_1
                    5771   main_3:
                    5772   ; }
                    5773   ; Init_RS232() ;     // initialise the RS232 port
00003330  4EB8 0B12 5774          jsr       _Init_RS232
                    5775   ; Init_LCD() ;
00003334  4EB8 095E 5776          jsr       _Init_LCD
                    5777   ; SPI_Init();
00003338  4EB8 10FC 5778          jsr       _SPI_Init
                    5779   ; IIC_Init();
0000333C  4EB8 1428 5780          jsr       _IIC_Init
                    5781   ; for( i = 32; i < 48; i++)
00003340  7420      5782          moveq     #32,D2
                    5783   main_4:
00003342  0C82 0000 5784          cmp.l     #48,D2
00003346  0030      
00003348  6C0E      5785          bge.s     main_6
                    5786   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
0000334A  2F02      5787          move.l    D2,-(A7)
0000334C  4878 2DC0 5788          pea       _UnhandledTrap.L
00003350  4E92      5789          jsr       (A2)
00003352  504F      5790          addq.w    #8,A7
00003354  5282      5791          addq.l    #1,D2
00003356  60EA      5792          bra       main_4
                    5793   main_6:
                    5794   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00003358  4878 002F 5795          pea       47
0000335C  4878 2A9A 5796          pea       _menu.L
00003360  4E92      5797          jsr       (A2)
00003362  504F      5798          addq.w    #8,A7
                    5799   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00003364  4878 0019 5800          pea       25
00003368  4878 2D66 5801          pea       _UnhandledIRQ1.L
0000336C  4E92      5802          jsr       (A2)
0000336E  504F      5803          addq.w    #8,A7
                    5804   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00003370  4878 001A 5805          pea       26
00003374  4878 2D72 5806          pea       _UnhandledIRQ2.L
00003378  4E92      5807          jsr       (A2)
0000337A  504F      5808          addq.w    #8,A7
                    5809   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
0000337C  4878 001B 5810          pea       27
00003380  4878 2D7E 5811          pea       _UnhandledIRQ3.L
00003384  4E92      5812          jsr       (A2)
00003386  504F      5813          addq.w    #8,A7
                    5814   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00003388  4878 001C 5815          pea       28
0000338C  4878 2D8A 5816          pea       _UnhandledIRQ4.L
00003390  4E92      5817          jsr       (A2)
00003392  504F      5818          addq.w    #8,A7
                    5819   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00003394  4878 001D 5820          pea       29
00003398  4878 2D96 5821          pea       _UnhandledIRQ5.L
0000339C  4E92      5822          jsr       (A2)
0000339E  504F      5823          addq.w    #8,A7
                    5824   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
000033A0  4878 001E 5825          pea       30
000033A4  4878 2DA2 5826          pea       _UnhandledIRQ6.L
000033A8  4E92      5827          jsr       (A2)
000033AA  504F      5828          addq.w    #8,A7
                    5829   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
000033AC  4878 001F 5830          pea       31
000033B0  4878 2DB4 5831          pea       _UnhandledIRQ7.L
000033B4  4E92      5832          jsr       (A2)
000033B6  504F      5833          addq.w    #8,A7
                    5834   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
000033B8  4878 002E 5835          pea       46
000033BC  4878 27D6 5836          pea       _HandleBreakPoint.L
000033C0  4E92      5837          jsr       (A2)
000033C2  504F      5838          addq.w    #8,A7
                    5839   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
000033C4  4878 001D 5840          pea       29
000033C8  4878 1EB6 5841          pea       _DumpRegistersandPause.L
000033CC  4E92      5842          jsr       (A2)
000033CE  504F      5843          addq.w    #8,A7
                    5844   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
000033D0  4878 0002 5845          pea       2
000033D4  4878 2DCE 5846          pea       _BusError.L
000033D8  4E92      5847          jsr       (A2)
000033DA  504F      5848          addq.w    #8,A7
                    5849   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
000033DC  4878 0003 5850          pea       3
000033E0  4878 2DDC 5851          pea       _AddressError.L
000033E4  4E92      5852          jsr       (A2)
000033E6  504F      5853          addq.w    #8,A7
                    5854   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
000033E8  4878 0004 5855          pea       4
000033EC  4878 2DEA 5856          pea       _IllegalInstruction.L
000033F0  4E92      5857          jsr       (A2)
000033F2  504F      5858          addq.w    #8,A7
                    5859   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
000033F4  4878 0005 5860          pea       5
000033F8  4878 2DF8 5861          pea       _Dividebyzero.L
000033FC  4E92      5862          jsr       (A2)
000033FE  504F      5863          addq.w    #8,A7
                    5864   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00003400  4878 0006 5865          pea       6
00003404  4878 2E06 5866          pea       _Check.L
00003408  4E92      5867          jsr       (A2)
0000340A  504F      5868          addq.w    #8,A7
                    5869   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
0000340C  4878 0007 5870          pea       7
00003410  4878 2E14 5871          pea       _Trapv.L
00003414  4E92      5872          jsr       (A2)
00003416  504F      5873          addq.w    #8,A7
                    5874   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00003418  4878 0008 5875          pea       8
0000341C  4878 2E22 5876          pea       _PrivError.L
00003420  4E92      5877          jsr       (A2)
00003422  504F      5878          addq.w    #8,A7
                    5879   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00003424  4878 000F 5880          pea       15
00003428  4878 2E30 5881          pea       _UnitIRQ.L
0000342C  4E92      5882          jsr       (A2)
0000342E  504F      5883          addq.w    #8,A7
                    5884   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00003430  4878 0018 5885          pea       24
00003434  4878 2E06 5886          pea       _Check.L
00003438  4E92      5887          jsr       (A2)
0000343A  504F      5888          addq.w    #8,A7
                    5889   ; FlushKeyboard() ;                        // dump unread characters from keyboard
0000343C  4EB8 0BA6 5890          jsr       _FlushKeyboard
                    5891   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00003440  4239 0040 5892          clr.b     4194314
00003444  000A      
                    5893   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5894   ; if (((char)(PortB & 0x02)) == (char)(0x02))    {
00003446  1039 0040 5895          move.b    4194306,D0
0000344A  0002      
0000344C  C03C 0002 5896          and.b     #2,D0
00003450  0C00 0002 5897          cmp.b     #2,D0
00003454  6628      5898          bne.s     main_7
                    5899   ; LoadFromFlashChip();
00003456  4EB8 138A 5900          jsr       _LoadFromFlashChip
                    5901   ; printf("\r\nRunning.....") ;
0000345A  4879 0000 5902          pea       @m68kde~1_162.L
0000345E  5D18      
00003460  4E93      5903          jsr       (A3)
00003462  584F      5904          addq.w    #4,A7
                    5905   ; Oline1("Running.....") ;
00003464  4879 0000 5906          pea       @m68kde~1_163.L
00003468  5D28      
0000346A  4EB8 0A02 5907          jsr       _Oline1
0000346E  584F      5908          addq.w    #4,A7
                    5909   ; GoFlag = 1;
00003470  23FC 0000 5910          move.l    #1,_GoFlag.L
00003474  0001 0B00 
00003478  00DC      
                    5911   ; go() ;
0000347A  4EB8 08B8 5912          jsr       _go
                    5913   main_7:
                    5914   ; }
                    5915   ; // otherwise start the debug monitor
                    5916   ; Oline0(BugMessage) ;
0000347E  2F03      5917          move.l    D3,-(A7)
00003480  4EB8 09D4 5918          jsr       _Oline0
00003484  584F      5919          addq.w    #4,A7
                    5920   ; Oline1("By: PJ Davies") ;
00003486  4879 0000 5921          pea       @m68kde~1_164.L
0000348A  5D36      
0000348C  4EB8 0A02 5922          jsr       _Oline1
00003490  584F      5923          addq.w    #4,A7
                    5924   ; printf("\r\n%s", BugMessage) ;
00003492  2F03      5925          move.l    D3,-(A7)
00003494  4879 0000 5926          pea       @m68kde~1_165.L
00003498  5D44      
0000349A  4E93      5927          jsr       (A3)
0000349C  504F      5928          addq.w    #8,A7
                    5929   ; printf("\r\n%s", CopyrightMessage) ;
0000349E  2F2E FFFC 5930          move.l    -4(A6),-(A7)
000034A2  4879 0000 5931          pea       @m68kde~1_165.L
000034A6  5D44      
000034A8  4E93      5932          jsr       (A3)
000034AA  504F      5933          addq.w    #8,A7
                    5934   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
000034AC  4879 0000 5935          pea       @m68kde~1_166.L
000034B0  5D4A      
000034B2  4E93      5936          jsr       (A3)
000034B4  584F      5937          addq.w    #4,A7
                    5938   ; printf("Initializing i2c test...\n");
000034B6  4879 0000 5939          pea       @m68kde~1_167.L
000034BA  5D92      
000034BC  4E93      5940          jsr       (A3)
000034BE  584F      5941          addq.w    #4,A7
                    5942   ; I2CTest();
000034C0  4EB8 198E 5943          jsr       _I2CTest
                    5944   ; menu();
000034C4  4EB8 2A9A 5945          jsr       _menu
000034C8  4CDF 0C0C 5946          movem.l   (A7)+,D2/D3/A2/A3
000034CC  4E5E      5947          unlk      A6
000034CE  4E75      5948          rts
                    5949   ; }
                    5950   _strcpy:
000034D0  206F 0004 5951          move.l    (4,A7),A0
000034D4  226F 0008 5952          move.l    (8,A7),A1
000034D8  2008      5953          move.l    A0,D0
                    5954   strcpy_1:
000034DA  10D9      5955          move.b    (A1)+,(A0)+
000034DC  66FC      5956          bne       strcpy_1
000034DE  4E75      5957          rts
                    5958   ULDIV:
000034E0  4E56 0000 5959          link    A6,#0
000034E4  48E7 C000 5960          movem.l D0/D1,-(A7)
000034E8  222E 0008 5961          move.l  8(A6),D1
000034EC  202E 000C 5962          move.l  12(A6),D0
000034F0  6036      5963          bra.s   ldiv_3
                    5964   LDIV:
000034F2  4E56 0000 5965          link    A6,#0
000034F6  48E7 C000 5966          movem.l D0/D1,-(A7)
000034FA  222E 0008 5967          move.l  8(A6),D1
000034FE  202E 000C 5968          move.l  12(A6),D0
00003502  4A80      5969          tst.l   D0
00003504  6A0E      5970          bpl.s   ldiv_1
00003506  4480      5971          neg.l   D0
00003508  4A81      5972          tst.l   D1
0000350A  6A14      5973          bpl.s   ldiv_2
0000350C  4481      5974          neg.l   D1
0000350E  612A      5975          bsr.s   dodiv
00003510  4481      5976          neg.l   D1
00003512  6016      5977          bra.s   ldiv_4
                    5978   ldiv_1:
00003514  4A81      5979          tst.l   D1
00003516  6A10      5980          bpl.s   ldiv_3
00003518  4481      5981          neg.l   D1
0000351A  611E      5982          bsr.s   dodiv
0000351C  4480      5983          neg.l   D0
0000351E  600A      5984          bra.s   ldiv_4
                    5985   ldiv_2:
00003520  6118      5986          bsr.s   dodiv
00003522  4480      5987          neg.l   D0
00003524  4481      5988          neg.l   D1
00003526  6002      5989          bra.s   ldiv_4
                    5990   ldiv_3:
00003528  6110      5991          bsr.s   dodiv
                    5992   ldiv_4:
0000352A  2D40 0008 5993          move.l  D0,8(A6)
0000352E  2D41 000C 5994          move.l  D1,12(A6)
00003532  4CDF 0003 5995          movem.l (A7)+,D0/D1
00003536  4E5E      5996          unlk    A6
00003538  4E75      5997          rts
                    5998   dodiv:
0000353A  0C81 0000 5999          cmpi.l  #$FFFF,D1
0000353E  FFFF      
00003540  6236      6000          bhi.s   dodiv_2
00003542  0C80 0000 6001          cmpi.l  #$FFFF,D0
00003546  FFFF      
00003548  6210      6002          bhi.s   dodiv_1
0000354A  80C1      6003          divu    D1,D0
0000354C  2200      6004          move.l  D0,D1
0000354E  4241      6005          clr.w   D1
00003550  4841      6006          swap    D1
00003552  0280 0000 6007          andi.l  #$FFFF,D0
00003556  FFFF      
00003558  4E75      6008          rts
                    6009   dodiv_1:
0000355A  48A7 A000 6010          movem.w D0/D2,-(A7)
0000355E  4240      6011          clr.w   D0
00003560  4840      6012          swap    D0
00003562  80C1      6013          divu    D1,D0
00003564  3400      6014          move.w  D0,D2
00003566  301F      6015          move.w  (A7)+,D0
00003568  80C1      6016          divu    D1,D0
0000356A  4840      6017          swap    D0
0000356C  4281      6018          clr.l   D1
0000356E  3200      6019          move.w  D0,D1
00003570  3002      6020          move.w  D2,D0
00003572  4840      6021          swap    D0
00003574  341F      6022          move.w  (A7)+,D2
00003576  4E75      6023          rts
                    6024   dodiv_2:
00003578  48E7 3800 6025          movem.l D2/D3/D4,-(A7)
0000357C  2401      6026          move.l  D1,D2
0000357E  4242      6027          clr.w   D2
00003580  4842      6028          swap    D2
00003582  5282      6029          addq.l  #1,D2
00003584  2600      6030          move.l  D0,D3
00003586  2801      6031          move.l  D1,D4
00003588  2202      6032          move.l  D2,D1
0000358A  61CE      6033          bsr.s   dodiv_1
0000358C  2204      6034          move.l  D4,D1
0000358E  82C2      6035          divu    D2,D1
00003590  80C1      6036          divu    D1,D0
00003592  0280 0000 6037          andi.l  #$FFFF,D0
00003596  FFFF      
                    6038   dodiv_3:
00003598  2204      6039          move.l  D4,D1
0000359A  2404      6040          move.l  D4,D2
0000359C  4842      6041          swap    D2
0000359E  C2C0      6042          mulu    D0,D1
000035A0  C4C0      6043          mulu    D0,D2
000035A2  4842      6044          swap    D2
000035A4  D282      6045          add.l   D2,D1
000035A6  9283      6046          sub.l   D3,D1
000035A8  620A      6047          bhi.s   dodiv_4
000035AA  4481      6048          neg.l   D1
000035AC  B881      6049          cmp.l   D1,D4
000035AE  6208      6050          bhi.s   dodiv_5
000035B0  5280      6051          addq.l  #1,D0
000035B2  60E4      6052          bra.s   dodiv_3
                    6053   dodiv_4:
000035B4  5380      6054          subq.l  #1,D0
000035B6  60E0      6055          bra.s   dodiv_3
                    6056   dodiv_5:
000035B8  4CDF 001C 6057          movem.l (A7)+,D2/D3/D4
000035BC  4E75      6058          rts
                    6059   _putch:
000035BE  4E56 0000 6060          link      A6,#0
000035C2  48E7 2000 6061          movem.l   D2,-(A7)
000035C6  242E 0008 6062          move.l    8(A6),D2
000035CA  0C82 0000 6063          cmp.l     #10,D2
000035CE  000A      
000035D0  660A      6064          bne.s     putch_1
000035D2  4878 000D 6065          pea       13
000035D6  6100 D564 6066          bsr       __putch
000035DA  584F      6067          addq.w    #4,A7
                    6068   putch_1:
000035DC  2F02      6069          move.l    D2,-(A7)
000035DE  6100 D55C 6070          bsr       __putch
000035E2  584F      6071          addq.w    #4,A7
000035E4  2002      6072          move.l    D2,D0
000035E6  4CDF 0004 6073          movem.l   (A7)+,D2
000035EA  4E5E      6074          unlk      A6
000035EC  4E75      6075          rts
                    6076   _getch:
000035EE  48E7 2000 6077          movem.l   D2,-(A7)
000035F2  2439 0B00 6078          move.l    __ungetbuf,D2
000035F6  00C0      
000035F8  2039 0B00 6079          move.l    __ungetbuf,D0
000035FC  00C0      
000035FE  0C80 FFFF 6080          cmp.l     #-1,D0
00003602  FFFF      
00003604  670C      6081          beq.s     getch_1
00003606  23FC FFFF 6082          move.l    #-1,__ungetbuf
0000360A  FFFF 0B00 
0000360E  00C0      
00003610  6010      6083          bra.s     getch_3
                    6084   getch_1:
00003612  6100 D554 6085          bsr       __getch
00003616  2400      6086          move.l    D0,D2
00003618  0C80 0000 6087          cmp.l     #13,D0
0000361C  000D      
0000361E  6602      6088          bne.s     getch_3
00003620  740A      6089          moveq     #10,D2
                    6090   getch_3:
00003622  2002      6091          move.l    D2,D0
00003624  4CDF 0004 6092          movem.l   (A7)+,D2
00003628  4E75      6093          rts
                    6094   _tolower:
0000362A  4E56 0000 6095          link      A6,#0
0000362E  48E7 2000 6096          movem.l   D2,-(A7)
00003632  242E 0008 6097          move.l    8(A6),D2
00003636  0C82 0000 6098          cmp.l     #65,D2
0000363A  0041      
0000363C  6D0E      6099          blt.s     tolower_1
0000363E  0C82 0000 6100          cmp.l     #90,D2
00003642  005A      
00003644  6E06      6101          bgt.s     tolower_1
00003646  84BC 0000 6102          or.l      #32,D2
0000364A  0020      
                    6103   tolower_1:
0000364C  2002      6104          move.l    D2,D0
0000364E  4CDF 0004 6105          movem.l   (A7)+,D2
00003652  4E5E      6106          unlk      A6
00003654  4E75      6107          rts
                    6108   _sprintf:
00003656  4E56 FFFC 6109          link      A6,#-4
0000365A  48E7 2000 6110          movem.l   D2,-(A7)
0000365E  41EE 000C 6111          lea       12(A6),A0
00003662  5848      6112          addq.w    #4,A0
00003664  2408      6113          move.l    A0,D2
00003666  2F02      6114          move.l    D2,-(A7)
00003668  2F2E 000C 6115          move.l    12(A6),-(A7)
0000366C  2F2E 0008 6116          move.l    8(A6),-(A7)
00003670  6100 09EC 6117          bsr       _vsprintf
00003674  DEFC 000C 6118          add.w     #12,A7
00003678  2D40 FFFC 6119          move.l    D0,-4(A6)
0000367C  4282      6120          clr.l     D2
0000367E  202E FFFC 6121          move.l    -4(A6),D0
00003682  4CDF 0004 6122          movem.l   (A7)+,D2
00003686  4E5E      6123          unlk      A6
00003688  4E75      6124          rts
                    6125   _memset:
0000368A  206F 0004 6126          move.l    (4,A7),A0
0000368E  202F 0008 6127          move.l    (8,A7),D0
00003692  222F 000C 6128          move.l    (12,A7),D1
00003696  2248      6129          move.l    A0,A1	
                    6130   memset_1:
00003698  12C0      6131          move.b    D0,(A1)+
0000369A  5341      6132          subq      #1,D1
0000369C  66FA      6133          bne       memset_1
0000369E  2008      6134          move.l    A0,D0
000036A0  4E75      6135          rts
                    6136   _strcat:
000036A2  206F 0004 6137          move.l    (4,A7),A0	
000036A6  226F 0008 6138          move.l    (8,A7),A1	
000036AA  2008      6139          move.l    A0,D0		
                    6140   strcat_0:
000036AC  4A18      6141          tst.b     (A0)+
000036AE  66FC      6142          bne       strcat_0
000036B0  5348      6143          subq      #1,A0
                    6144   strcat_1:
000036B2  10D9      6145          move.b    (A1)+,(A0)+
000036B4  66FC      6146          bne       strcat_1
000036B6  4E75      6147          rts
                    6148   _toupper:
000036B8  4E56 0000 6149          link      A6,#0
000036BC  48E7 2000 6150          movem.l   D2,-(A7)
000036C0  242E 0008 6151          move.l    8(A6),D2
000036C4  0C82 0000 6152          cmp.l     #97,D2
000036C8  0061      
000036CA  6D0E      6153          blt.s     toupper_1
000036CC  0C82 0000 6154          cmp.l     #122,D2
000036D0  007A      
000036D2  6E06      6155          bgt.s     toupper_1
000036D4  C4BC 0000 6156          and.l     #95,D2
000036D8  005F      
                    6157   toupper_1:
000036DA  2002      6158          move.l    D2,D0
000036DC  4CDF 0004 6159          movem.l   (A7)+,D2
000036E0  4E5E      6160          unlk      A6
000036E2  4E75      6161          rts
                    6162   @vsscanf_scanread:
000036E4  4E56 FFFC 6163          link      A6,#-4
000036E8  48E7 0020 6164          movem.l   A2,-(A7)
000036EC  45F9 0000 6165          lea       @vsscanf_bufx,A2
000036F0  5DC0      
000036F2  4AAE 0008 6166          tst.l     8(A6)
000036F6  6722      6167          beq.s     @vsscanf_scanread_1
000036F8  206E 0008 6168          move.l    8(A6),A0
000036FC  58AE 0008 6169          addq.l    #4,8(A6)
00003700  2050      6170          move.l    (A0),A0
00003702  1010      6171          move.b    (A0),D0
00003704  4880      6172          ext.w     D0
00003706  48C0      6173          ext.l     D0
00003708  2D40 FFFC 6174          move.l    D0,-4(A6)
0000370C  6706      6175          beq.s     @vsscanf_scanread_3
0000370E  202E FFFC 6176          move.l    -4(A6),D0
00003712  6002      6177          bra.s     @vsscanf_scanread_4
                    6178   @vsscanf_scanread_3:
00003714  70FF      6179          moveq     #-1,D0
                    6180   @vsscanf_scanread_4:
00003716  6000 0032 6181          bra       @vsscanf_scanread_5
                    6182   @vsscanf_scanread_1:
0000371A  2052      6183          move.l    (A2),A0
0000371C  1010      6184          move.b    (A0),D0
0000371E  6620      6185          bne.s     @vsscanf_scanread_6
00003720  4879 0B00 6186          pea       @vsscanf_buf
00003724  0546      
00003726  6100 1038 6187          bsr       _gets
0000372A  584F      6188          addq.w    #4,A7
0000372C  2480      6189          move.l    D0,(A2)
0000372E  4879 0000 6190          pea       @vsscanf_1
00003732  5DC4      
00003734  4879 0B00 6191          pea       @vsscanf_buf
00003738  0546      
0000373A  6100 FF66 6192          bsr       _strcat
0000373E  504F      6193          addq.w    #8,A7
                    6194   @vsscanf_scanread_6:
00003740  2052      6195          move.l    (A2),A0
00003742  5292      6196          addq.l    #1,(A2)
00003744  1010      6197          move.b    (A0),D0
00003746  4880      6198          ext.w     D0
00003748  48C0      6199          ext.l     D0
                    6200   @vsscanf_scanread_5:
0000374A  4CDF 0400 6201          movem.l   (A7)+,A2
0000374E  4E5E      6202          unlk      A6
00003750  4E75      6203          rts
                    6204   @vsscanf_scanputback:
00003752  4E56 0000 6205          link      A6,#0
00003756  48E7 3000 6206          movem.l   D2/D3,-(A7)
0000375A  242E 000C 6207          move.l    12(A6),D2
0000375E  262E 0008 6208          move.l    8(A6),D3
00003762  6718      6209          beq.s     @vsscanf_scanputback_1
00003764  0C82 FFFF 6210          cmp.l     #-1,D2
00003768  FFFF      
0000376A  670A      6211          beq.s     @vsscanf_scanputback_3
0000376C  5983      6212          subq.l    #4,D3
0000376E  2043      6213          move.l    D3,A0
00003770  2050      6214          move.l    (A0),A0
00003772  1082      6215          move.b    D2,(A0)
00003774  6004      6216          bra.s     @vsscanf_scanputback_4
                    6217   @vsscanf_scanputback_3:
00003776  2043      6218          move.l    D3,A0
00003778  5390      6219          subq.l    #1,(A0)
                    6220   @vsscanf_scanputback_4:
0000377A  602E      6221          bra.s     @vsscanf_scanputback_6
                    6222   @vsscanf_scanputback_1:
0000377C  41F9 0B00 6223          lea       @vsscanf_buf,A0
00003780  0546      
00003782  2008      6224          move.l    A0,D0
00003784  B0B9 0000 6225          cmp.l     @vsscanf_bufx,D0
00003788  5DC0      
0000378A  6610      6226          bne.s     @vsscanf_scanputback_5
0000378C  4239 0B00 6227          clr.b     @vsscanf_buf
00003790  0546      
00003792  2F02      6228          move.l    D2,-(A7)
00003794  6100 103C 6229          bsr       _ungetch
00003798  584F      6230          addq.w    #4,A7
0000379A  600E      6231          bra.s     @vsscanf_scanputback_6
                    6232   @vsscanf_scanputback_5:
0000379C  53B9 0000 6233          subq.l    #1,@vsscanf_bufx
000037A0  5DC0      
000037A2  2079 0000 6234          move.l    @vsscanf_bufx,A0
000037A6  5DC0      
000037A8  1082      6235          move.b    D2,(A0)
                    6236   @vsscanf_scanputback_6:
000037AA  2002      6237          move.l    D2,D0
000037AC  4CDF 000C 6238          movem.l   (A7)+,D2/D3
000037B0  4E5E      6239          unlk      A6
000037B2  4E75      6240          rts
                    6241   @vsscanf_scanspace:
000037B4  4E56 0000 6242          link      A6,#0
000037B8  48E7 2000 6243          movem.l   D2,-(A7)
                    6244   @vsscanf_scanspace_1:
000037BC  2F2E 0008 6245          move.l    8(A6),-(A7)
000037C0  6100 FF22 6246          bsr       @vsscanf_scanread
000037C4  584F      6247          addq.w    #4,A7
000037C6  2400      6248          move.l    D0,D2
000037C8  206E 000C 6249          move.l    12(A6),A0
000037CC  5290      6250          addq.l    #1,(A0)
000037CE  2042      6251          move.l    D2,A0
000037D0  43F9 0000 6252          lea       __ctype,A1
000037D4  5DC6      
000037D6  1030 9801 6253          move.b    1(A0,A1.L),D0
000037DA  C03C 0010 6254          and.b     #16,D0
000037DE  66DC      6255          bne       @vsscanf_scanspace_1
000037E0  2002      6256          move.l    D2,D0
000037E2  4CDF 0004 6257          movem.l   (A7)+,D2
000037E6  4E5E      6258          unlk      A6
000037E8  4E75      6259          rts
                    6260   @vsscanf_scanselect:
000037EA  4E56 0000 6261          link      A6,#0
000037EE  48E7 3F20 6262          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
000037F2  262E 000C 6263          move.l    12(A6),D3
000037F6  2C2E 0018 6264          move.l    24(A6),D6
000037FA  2E2E 0014 6265          move.l    20(A6),D7
000037FE  2043      6266          move.l    D3,A0
00003800  1010      6267          move.b    (A0),D0
00003802  4880      6268          ext.w     D0
00003804  48C0      6269          ext.l     D0
00003806  0C80 0000 6270          cmp.l     #94,D0
0000380A  005E      
0000380C  6608      6271          bne.s     @vsscanf_scanselect_1
0000380E  347C 0001 6272          move.w    #1,A2
00003812  5283      6273          addq.l    #1,D3
00003814  6004      6274          bra.s     @vsscanf_scanselect_2
                    6275   @vsscanf_scanselect_1:
00003816  347C 0000 6276          move.w    #0,A2
                    6277   @vsscanf_scanselect_2:
0000381A  202E 0010 6278          move.l    16(A6),D0
0000381E  53AE 0010 6279          subq.l    #1,16(A6)
00003822  4A80      6280          tst.l     D0
00003824  6700 0108 6281          beq       @vsscanf_scanselect_5
00003828  2F2E 0008 6282          move.l    8(A6),-(A7)
0000382C  6100 FEB6 6283          bsr       @vsscanf_scanread
00003830  584F      6284          addq.w    #4,A7
00003832  2800      6285          move.l    D0,D4
00003834  0C84 FFFF 6286          cmp.l     #-1,D4
00003838  FFFF      
0000383A  6604      6287          bne.s     @vsscanf_scanselect_6
0000383C  6000 00F0 6288          bra       @vsscanf_scanselect_5
                    6289   @vsscanf_scanselect_6:
00003840  206E 001C 6290          move.l    28(A6),A0
00003844  5290      6291          addq.l    #1,(A0)
00003846  4285      6292          clr.l     D5
00003848  4282      6293          clr.l     D2
                    6294   @vsscanf_scanselect_8:
0000384A  2043      6295          move.l    D3,A0
0000384C  1030 2800 6296          move.b    0(A0,D2.L),D0
00003850  4880      6297          ext.w     D0
00003852  48C0      6298          ext.l     D0
00003854  0C80 0000 6299          cmp.l     #93,D0
00003858  005D      
0000385A  6700 008E 6300          beq       @vsscanf_scanselect_10
0000385E  4A82      6301          tst.l     D2
00003860  6716      6302          beq.s     @vsscanf_scanselect_11
00003862  2043      6303          move.l    D3,A0
00003864  1030 2800 6304          move.b    0(A0,D2.L),D0
00003868  4880      6305          ext.w     D0
0000386A  48C0      6306          ext.l     D0
0000386C  0C80 0000 6307          cmp.l     #93,D0
00003870  005D      
00003872  6604      6308          bne.s     @vsscanf_scanselect_11
00003874  6000 0074 6309          bra       @vsscanf_scanselect_10
                    6310   @vsscanf_scanselect_11:
00003878  4A82      6311          tst.l     D2
0000387A  6700 0058 6312          beq       @vsscanf_scanselect_15
0000387E  2043      6313          move.l    D3,A0
00003880  1030 2800 6314          move.b    0(A0,D2.L),D0
00003884  4880      6315          ext.w     D0
00003886  48C0      6316          ext.l     D0
00003888  0C80 0000 6317          cmp.l     #45,D0
0000388C  002D      
0000388E  6600 0044 6318          bne       @vsscanf_scanselect_15
00003892  2043      6319          move.l    D3,A0
00003894  2002      6320          move.l    D2,D0
00003896  5380      6321          subq.l    #1,D0
00003898  2243      6322          move.l    D3,A1
0000389A  2F08      6323          move.l    A0,-(A7)
0000389C  2042      6324          move.l    D2,A0
0000389E  1230 0800 6325          move.b    0(A0,D0.L),D1
000038A2  B230 9801 6326          cmp.b     1(A0,A1.L),D1
000038A6  6C00 002C 6327          bge       @vsscanf_scanselect_15
000038AA  205F      6328          move.l    (A7)+,A0
000038AC  2043      6329          move.l    D3,A0
000038AE  2002      6330          move.l    D2,D0
000038B0  5380      6331          subq.l    #1,D0
000038B2  1030 0800 6332          move.b    0(A0,D0.L),D0
000038B6  4880      6333          ext.w     D0
000038B8  48C0      6334          ext.l     D0
000038BA  B880      6335          cmp.l     D0,D4
000038BC  6D12      6336          blt.s     @vsscanf_scanselect_17
000038BE  2043      6337          move.l    D3,A0
000038C0  2242      6338          move.l    D2,A1
000038C2  1031 8801 6339          move.b    1(A1,A0.L),D0
000038C6  4880      6340          ext.w     D0
000038C8  48C0      6341          ext.l     D0
000038CA  B880      6342          cmp.l     D0,D4
000038CC  6E02      6343          bgt.s     @vsscanf_scanselect_17
000038CE  601A      6344          bra.s     @vsscanf_scanselect_10
                    6345   @vsscanf_scanselect_17:
000038D0  5282      6346          addq.l    #1,D2
000038D2  6010      6347          bra.s     @vsscanf_scanselect_19
                    6348   @vsscanf_scanselect_15:
000038D4  2043      6349          move.l    D3,A0
000038D6  1030 2800 6350          move.b    0(A0,D2.L),D0
000038DA  4880      6351          ext.w     D0
000038DC  48C0      6352          ext.l     D0
000038DE  B880      6353          cmp.l     D0,D4
000038E0  6602      6354          bne.s     @vsscanf_scanselect_19
000038E2  6006      6355          bra.s     @vsscanf_scanselect_10
                    6356   @vsscanf_scanselect_19:
000038E4  5282      6357          addq.l    #1,D2
000038E6  6000 FF62 6358          bra       @vsscanf_scanselect_8
                    6359   @vsscanf_scanselect_10:
000038EA  4A82      6360          tst.l     D2
000038EC  6712      6361          beq.s     @vsscanf_scanselect_23
000038EE  2043      6362          move.l    D3,A0
000038F0  1030 2800 6363          move.b    0(A0,D2.L),D0
000038F4  4880      6364          ext.w     D0
000038F6  48C0      6365          ext.l     D0
000038F8  0C80 0000 6366          cmp.l     #93,D0
000038FC  005D      
000038FE  6702      6367          beq.s     @vsscanf_scanselect_21
                    6368   @vsscanf_scanselect_23:
00003900  7A01      6369          moveq     #1,D5
                    6370   @vsscanf_scanselect_21:
00003902  200A      6371          move.l    A2,D0
00003904  6712      6372          beq.s     @vsscanf_scanselect_24
00003906  4A85      6373          tst.l     D5
00003908  660C      6374          bne.s     @vsscanf_scanselect_26
0000390A  4A87      6375          tst.l     D7
0000390C  6606      6376          bne.s     @vsscanf_scanselect_28
0000390E  2046      6377          move.l    D6,A0
00003910  5286      6378          addq.l    #1,D6
00003912  1084      6379          move.b    D4,(A0)
                    6380   @vsscanf_scanselect_28:
00003914  6014      6381          bra.s     @vsscanf_scanselect_4
                    6382   @vsscanf_scanselect_26:
00003916  6016      6383          bra.s     @vsscanf_scanselect_5
                    6384   @vsscanf_scanselect_24:
00003918  4A85      6385          tst.l     D5
0000391A  670C      6386          beq.s     @vsscanf_scanselect_30
0000391C  4A87      6387          tst.l     D7
0000391E  6606      6388          bne.s     @vsscanf_scanselect_32
00003920  2046      6389          move.l    D6,A0
00003922  5286      6390          addq.l    #1,D6
00003924  1084      6391          move.b    D4,(A0)
                    6392   @vsscanf_scanselect_32:
00003926  6002      6393          bra.s     @vsscanf_scanselect_4
                    6394   @vsscanf_scanselect_30:
00003928  6004      6395          bra.s     @vsscanf_scanselect_5
                    6396   @vsscanf_scanselect_4:
0000392A  6000 FEEE 6397          bra       @vsscanf_scanselect_2
                    6398   @vsscanf_scanselect_5:
0000392E  0C84 FFFF 6399          cmp.l     #-1,D4
00003932  FFFF      
00003934  6712      6400          beq.s     @vsscanf_scanselect_34
00003936  2F04      6401          move.l    D4,-(A7)
00003938  2F2E 0008 6402          move.l    8(A6),-(A7)
0000393C  6100 FE14 6403          bsr       @vsscanf_scanputback
00003940  504F      6404          addq.w    #8,A7
00003942  206E 001C 6405          move.l    28(A6),A0
00003946  5390      6406          subq.l    #1,(A0)
                    6407   @vsscanf_scanselect_34:
00003948  4A87      6408          tst.l     D7
0000394A  6604      6409          bne.s     @vsscanf_scanselect_36
0000394C  2046      6410          move.l    D6,A0
0000394E  4210      6411          clr.b     (A0)
                    6412   @vsscanf_scanselect_36:
00003950  5283      6413          addq.l    #1,D3
00003952  2043      6414          move.l    D3,A0
00003954  1010      6415          move.b    (A0),D0
00003956  4880      6416          ext.w     D0
00003958  48C0      6417          ext.l     D0
0000395A  0C80 0000 6418          cmp.l     #93,D0
0000395E  005D      
00003960  6702      6419          beq.s     @vsscanf_scanselect_40
00003962  60EC      6420          bra       @vsscanf_scanselect_36
                    6421   @vsscanf_scanselect_40:
00003964  5283      6422          addq.l    #1,D3
00003966  2003      6423          move.l    D3,D0
00003968  4CDF 04FC 6424          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
0000396C  4E5E      6425          unlk      A6
0000396E  4E75      6426          rts
                    6427   _scanflush:
00003970  41F9 0B00 6428          lea       @vsscanf_buf,A0
00003974  0546      
00003976  23C8 0000 6429          move.l    A0,@vsscanf_bufx
0000397A  5DC0      
0000397C  4239 0B00 6430          clr.b     @vsscanf_buf
00003980  0546      
00003982  4878 FFFF 6431          pea       -1
00003986  6100 0E4A 6432          bsr       _ungetch
0000398A  584F      6433          addq.w    #4,A7
0000398C  4E75      6434          rts
                    6435   _vsscanf:
0000398E  4E56 FF88 6436          link      A6,#-120
00003992  48E7 3F3C 6437          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003996  47F8 36E4 6438          lea       @vsscanf_scanread,A3
0000399A  4AAE 0008 6439          tst.l     8(A6)
0000399E  6706      6440          beq.s     vsscanf_1
000039A0  41EE 0008 6441          lea       8(A6),A0
000039A4  6004      6442          bra.s     vsscanf_2
                    6443   vsscanf_1:
000039A6  4280      6444          clr.l     D0
000039A8  2040      6445          move.l    D0,A0
                    6446   vsscanf_2:
000039AA  2A08      6447          move.l    A0,D5
000039AC  42AE FFE4 6448          clr.l     -28(A6)
000039B0  4284      6449          clr.l     D4
                    6450   vsscanf_3:
000039B2  206E 000C 6451          move.l    12(A6),A0
000039B6  52AE 000C 6452          addq.l    #1,12(A6)
000039BA  1010      6453          move.b    (A0),D0
000039BC  4880      6454          ext.w     D0
000039BE  48C0      6455          ext.l     D0
000039C0  2600      6456          move.l    D0,D3
000039C2  6700 05AC 6457          beq       vsscanf_5
000039C6  4286      6458          clr.l     D6
000039C8  387C 0000 6459          move.w    #0,A4
000039CC  0C83 0000 6460          cmp.l     #32,D3
000039D0  0020      
000039D2  6712      6461          beq.s     vsscanf_8
000039D4  0C83 0000 6462          cmp.l     #9,D3
000039D8  0009      
000039DA  670A      6463          beq.s     vsscanf_8
000039DC  0C83 0000 6464          cmp.l     #10,D3
000039E0  000A      
000039E2  6600 0048 6465          bne       vsscanf_6
                    6466   vsscanf_8:
000039E6  2F05      6467          move.l    D5,-(A7)
000039E8  4E93      6468          jsr       (A3)
000039EA  584F      6469          addq.w    #4,A7
000039EC  2400      6470          move.l    D0,D2
000039EE  52AE FFE4 6471          addq.l    #1,-28(A6)
000039F2  0C82 FFFF 6472          cmp.l     #-1,D2
000039F6  FFFF      
000039F8  660E      6473          bne.s     vsscanf_11
000039FA  4A84      6474          tst.l     D4
000039FC  6704      6475          beq.s     vsscanf_13
000039FE  2004      6476          move.l    D4,D0
00003A00  6002      6477          bra.s     vsscanf_14
                    6478   vsscanf_13:
00003A02  70FF      6479          moveq     #-1,D0
                    6480   vsscanf_14:
00003A04  6000 056C 6481          bra       vsscanf_15
                    6482   vsscanf_11:
00003A08  2042      6483          move.l    D2,A0
00003A0A  43F9 0000 6484          lea       __ctype,A1
00003A0E  5DC6      
00003A10  1030 9801 6485          move.b    1(A0,A1.L),D0
00003A14  C03C 0010 6486          and.b     #16,D0
00003A18  66CC      6487          bne       vsscanf_8
00003A1A  53AE FFE4 6488          subq.l    #1,-28(A6)
00003A1E  2F02      6489          move.l    D2,-(A7)
00003A20  2F05      6490          move.l    D5,-(A7)
00003A22  6100 FD2E 6491          bsr       @vsscanf_scanputback
00003A26  504F      6492          addq.w    #8,A7
00003A28  6000 0542 6493          bra       vsscanf_139
                    6494   vsscanf_6:
00003A2C  0C83 0000 6495          cmp.l     #37,D3
00003A30  0025      
00003A32  6600 0502 6496          bne       vsscanf_127
00003A36  206E 000C 6497          move.l    12(A6),A0
00003A3A  52AE 000C 6498          addq.l    #1,12(A6)
00003A3E  1010      6499          move.b    (A0),D0
00003A40  4880      6500          ext.w     D0
00003A42  48C0      6501          ext.l     D0
00003A44  2600      6502          move.l    D0,D3
00003A46  42AE FFEC 6503          clr.l     -20(A6)
00003A4A  4286      6504          clr.l     D6
00003A4C  42AE FFE8 6505          clr.l     -24(A6)
00003A50  347C 7FFF 6506          move.w    #32767,A2
00003A54  0C83 0000 6507          cmp.l     #42,D3
00003A58  002A      
00003A5A  6612      6508          bne.s     vsscanf_18
00003A5C  7C01      6509          moveq     #1,D6
00003A5E  206E 000C 6510          move.l    12(A6),A0
00003A62  52AE 000C 6511          addq.l    #1,12(A6)
00003A66  1010      6512          move.b    (A0),D0
00003A68  4880      6513          ext.w     D0
00003A6A  48C0      6514          ext.l     D0
00003A6C  2600      6515          move.l    D0,D3
                    6516   vsscanf_18:
00003A6E  2043      6517          move.l    D3,A0
00003A70  43F9 0000 6518          lea       __ctype,A1
00003A74  5DC6      
00003A76  1030 9801 6519          move.b    1(A0,A1.L),D0
00003A7A  C03C 0004 6520          and.b     #4,D0
00003A7E  6700 004E 6521          beq       vsscanf_24
00003A82  2003      6522          move.l    D3,D0
00003A84  0480 0000 6523          sub.l     #48,D0
00003A88  0030      
00003A8A  2440      6524          move.l    D0,A2
                    6525   vsscanf_22:
00003A8C  206E 000C 6526          move.l    12(A6),A0
00003A90  52AE 000C 6527          addq.l    #1,12(A6)
00003A94  1010      6528          move.b    (A0),D0
00003A96  4880      6529          ext.w     D0
00003A98  48C0      6530          ext.l     D0
00003A9A  2600      6531          move.l    D0,D3
00003A9C  2040      6532          move.l    D0,A0
00003A9E  43F9 0000 6533          lea       __ctype,A1
00003AA2  5DC6      
00003AA4  1030 9801 6534          move.b    1(A0,A1.L),D0
00003AA8  C0BC 0000 6535          and.l     #255,D0
00003AAC  00FF      
00003AAE  C0BC 0000 6536          and.l     #4,D0
00003AB2  0004      
00003AB4  6718      6537          beq.s     vsscanf_24
00003AB6  70D0      6538          moveq     #-48,D0
00003AB8  2F0A      6539          move.l    A2,-(A7)
00003ABA  4878 000A 6540          pea       10
00003ABE  6100 0C12 6541          bsr       LMUL
00003AC2  2217      6542          move.l    (A7),D1
00003AC4  504F      6543          addq.w    #8,A7
00003AC6  D283      6544          add.l     D3,D1
00003AC8  D081      6545          add.l     D1,D0
00003ACA  2440      6546          move.l    D0,A2
00003ACC  60BE      6547          bra       vsscanf_22
                    6548   vsscanf_24:
00003ACE  0C83 0000 6549          cmp.l     #108,D3
00003AD2  006C      
00003AD4  6708      6550          beq.s     vsscanf_27
00003AD6  0C83 0000 6551          cmp.l     #76,D3
00003ADA  004C      
00003ADC  661A      6552          bne.s     vsscanf_25
                    6553   vsscanf_27:
00003ADE  2D7C 0000 6554          move.l    #1,-24(A6)
00003AE2  0001 FFE8 
00003AE6  206E 000C 6555          move.l    12(A6),A0
00003AEA  52AE 000C 6556          addq.l    #1,12(A6)
00003AEE  1010      6557          move.b    (A0),D0
00003AF0  4880      6558          ext.w     D0
00003AF2  48C0      6559          ext.l     D0
00003AF4  2600      6560          move.l    D0,D3
00003AF6  6020      6561          bra.s     vsscanf_28
                    6562   vsscanf_25:
00003AF8  0C83 0000 6563          cmp.l     #104,D3
00003AFC  0068      
00003AFE  6618      6564          bne.s     vsscanf_28
00003B00  2D7C 0000 6565          move.l    #1,-20(A6)
00003B04  0001 FFEC 
00003B08  206E 000C 6566          move.l    12(A6),A0
00003B0C  52AE 000C 6567          addq.l    #1,12(A6)
00003B10  1010      6568          move.b    (A0),D0
00003B12  4880      6569          ext.w     D0
00003B14  48C0      6570          ext.l     D0
00003B16  2600      6571          move.l    D0,D3
                    6572   vsscanf_28:
00003B18  0C83 0000 6573          cmp.l     #91,D3
00003B1C  005B      
00003B1E  6600 0036 6574          bne       vsscanf_30
00003B22  4A86      6575          tst.l     D6
00003B24  660A      6576          bne.s     vsscanf_32
00003B26  206E 0010 6577          move.l    16(A6),A0
00003B2A  58AE 0010 6578          addq.l    #4,16(A6)
00003B2E  2E10      6579          move.l    (A0),D7
                    6580   vsscanf_32:
00003B30  486E FFE4 6581          pea       -28(A6)
00003B34  2F07      6582          move.l    D7,-(A7)
00003B36  2F06      6583          move.l    D6,-(A7)
00003B38  2F0A      6584          move.l    A2,-(A7)
00003B3A  2F2E 000C 6585          move.l    12(A6),-(A7)
00003B3E  2F05      6586          move.l    D5,-(A7)
00003B40  6100 FCA8 6587          bsr       @vsscanf_scanselect
00003B44  DEFC 0018 6588          add.w     #24,A7
00003B48  2D40 000C 6589          move.l    D0,12(A6)
00003B4C  4A86      6590          tst.l     D6
00003B4E  6602      6591          bne.s     vsscanf_34
00003B50  5284      6592          addq.l    #1,D4
                    6593   vsscanf_34:
00003B52  6000 0418 6594          bra       vsscanf_139
                    6595   vsscanf_30:
00003B56  0C83 0000 6596          cmp.l     #110,D3
00003B5A  006E      
00003B5C  661A      6597          bne.s     vsscanf_36
00003B5E  4A86      6598          tst.l     D6
00003B60  6612      6599          bne.s     vsscanf_38
00003B62  206E 0010 6600          move.l    16(A6),A0
00003B66  58AE 0010 6601          addq.l    #4,16(A6)
00003B6A  2E10      6602          move.l    (A0),D7
00003B6C  2047      6603          move.l    D7,A0
00003B6E  20AE FFE4 6604          move.l    -28(A6),(A0)
00003B72  5284      6605          addq.l    #1,D4
                    6606   vsscanf_38:
00003B74  6000 03F6 6607          bra       vsscanf_139
                    6608   vsscanf_36:
00003B78  0C83 0000 6609          cmp.l     #115,D3
00003B7C  0073      
00003B7E  6600 00AC 6610          bne       vsscanf_40
00003B82  486E FFE4 6611          pea       -28(A6)
00003B86  2F05      6612          move.l    D5,-(A7)
00003B88  6100 FC2A 6613          bsr       @vsscanf_scanspace
00003B8C  504F      6614          addq.w    #8,A7
00003B8E  2400      6615          move.l    D0,D2
00003B90  4A86      6616          tst.l     D6
00003B92  660A      6617          bne.s     vsscanf_42
00003B94  206E 0010 6618          move.l    16(A6),A0
00003B98  58AE 0010 6619          addq.l    #4,16(A6)
00003B9C  2E10      6620          move.l    (A0),D7
                    6621   vsscanf_42:
00003B9E  52AE FFE4 6622          addq.l    #1,-28(A6)
                    6623   vsscanf_44:
00003BA2  200A      6624          move.l    A2,D0
00003BA4  534A      6625          subq.w    #1,A2
00003BA6  4A80      6626          tst.l     D0
00003BA8  6700 0038 6627          beq       vsscanf_46
00003BAC  2042      6628          move.l    D2,A0
00003BAE  43F9 0000 6629          lea       __ctype,A1
00003BB2  5DC6      
00003BB4  1030 9801 6630          move.b    1(A0,A1.L),D0
00003BB8  C03C 0010 6631          and.b     #16,D0
00003BBC  6624      6632          bne.s     vsscanf_46
00003BBE  0C82 FFFF 6633          cmp.l     #-1,D2
00003BC2  FFFF      
00003BC4  671C      6634          beq.s     vsscanf_46
00003BC6  387C 0001 6635          move.w    #1,A4
00003BCA  4A86      6636          tst.l     D6
00003BCC  6606      6637          bne.s     vsscanf_47
00003BCE  2047      6638          move.l    D7,A0
00003BD0  5287      6639          addq.l    #1,D7
00003BD2  1082      6640          move.b    D2,(A0)
                    6641   vsscanf_47:
00003BD4  2F05      6642          move.l    D5,-(A7)
00003BD6  4E93      6643          jsr       (A3)
00003BD8  584F      6644          addq.w    #4,A7
00003BDA  2400      6645          move.l    D0,D2
00003BDC  52AE FFE4 6646          addq.l    #1,-28(A6)
00003BE0  60C0      6647          bra       vsscanf_44
                    6648   vsscanf_46:
00003BE2  4A86      6649          tst.l     D6
00003BE4  660A      6650          bne.s     vsscanf_51
00003BE6  2047      6651          move.l    D7,A0
00003BE8  4210      6652          clr.b     (A0)
00003BEA  200C      6653          move.l    A4,D0
00003BEC  6702      6654          beq.s     vsscanf_51
00003BEE  5284      6655          addq.l    #1,D4
                    6656   vsscanf_51:
00003BF0  0C82 FFFF 6657          cmp.l     #-1,D2
00003BF4  FFFF      
00003BF6  6708      6658          beq.s     vsscanf_55
00003BF8  4A86      6659          tst.l     D6
00003BFA  661E      6660          bne.s     vsscanf_53
00003BFC  200C      6661          move.l    A4,D0
00003BFE  661A      6662          bne.s     vsscanf_53
                    6663   vsscanf_55:
00003C00  4A84      6664          tst.l     D4
00003C02  6704      6665          beq.s     vsscanf_56
00003C04  2004      6666          move.l    D4,D0
00003C06  600E      6667          bra.s     vsscanf_59
                    6668   vsscanf_56:
00003C08  0C82 FFFF 6669          cmp.l     #-1,D2
00003C0C  FFFF      
00003C0E  6604      6670          bne.s     vsscanf_58
00003C10  70FF      6671          moveq     #-1,D0
00003C12  6002      6672          bra.s     vsscanf_59
                    6673   vsscanf_58:
00003C14  2004      6674          move.l    D4,D0
                    6675   vsscanf_59:
00003C16  6000 035A 6676          bra       vsscanf_15
                    6677   vsscanf_53:
00003C1A  53AE FFE4 6678          subq.l    #1,-28(A6)
00003C1E  2F02      6679          move.l    D2,-(A7)
00003C20  2F05      6680          move.l    D5,-(A7)
00003C22  6100 FB2E 6681          bsr       @vsscanf_scanputback
00003C26  504F      6682          addq.w    #8,A7
00003C28  6000 0342 6683          bra       vsscanf_139
                    6684   vsscanf_40:
00003C2C  0C83 0000 6685          cmp.l     #99,D3
00003C30  0063      
00003C32  6600 008E 6686          bne       vsscanf_60
00003C36  4A86      6687          tst.l     D6
00003C38  660A      6688          bne.s     vsscanf_62
00003C3A  206E 0010 6689          move.l    16(A6),A0
00003C3E  58AE 0010 6690          addq.l    #4,16(A6)
00003C42  2E10      6691          move.l    (A0),D7
                    6692   vsscanf_62:
00003C44  2F05      6693          move.l    D5,-(A7)
00003C46  4E93      6694          jsr       (A3)
00003C48  584F      6695          addq.w    #4,A7
00003C4A  2400      6696          move.l    D0,D2
00003C4C  52AE FFE4 6697          addq.l    #1,-28(A6)
00003C50  200A      6698          move.l    A2,D0
00003C52  0C80 0000 6699          cmp.l     #32767,D0
00003C56  7FFF      
00003C58  6604      6700          bne.s     vsscanf_64
00003C5A  347C 0001 6701          move.w    #1,A2
                    6702   vsscanf_64:
00003C5E  0C82 FFFF 6703          cmp.l     #-1,D2
00003C62  FFFF      
00003C64  6606      6704          bne.s     vsscanf_66
00003C66  4A86      6705          tst.l     D6
00003C68  6602      6706          bne.s     vsscanf_66
00003C6A  5384      6707          subq.l    #1,D4
                    6708   vsscanf_66:
00003C6C  200A      6709          move.l    A2,D0
00003C6E  534A      6710          subq.w    #1,A2
00003C70  4A80      6711          tst.l     D0
00003C72  6720      6712          beq.s     vsscanf_70
00003C74  0C82 FFFF 6713          cmp.l     #-1,D2
00003C78  FFFF      
00003C7A  6718      6714          beq.s     vsscanf_70
00003C7C  4A86      6715          tst.l     D6
00003C7E  6606      6716          bne.s     vsscanf_71
00003C80  2047      6717          move.l    D7,A0
00003C82  5287      6718          addq.l    #1,D7
00003C84  1082      6719          move.b    D2,(A0)
                    6720   vsscanf_71:
00003C86  2F05      6721          move.l    D5,-(A7)
00003C88  4E93      6722          jsr       (A3)
00003C8A  584F      6723          addq.w    #4,A7
00003C8C  2400      6724          move.l    D0,D2
00003C8E  52AE FFE4 6725          addq.l    #1,-28(A6)
00003C92  60D8      6726          bra       vsscanf_66
                    6727   vsscanf_70:
00003C94  0C82 FFFF 6728          cmp.l     #-1,D2
00003C98  FFFF      
00003C9A  660E      6729          bne.s     vsscanf_73
00003C9C  4A84      6730          tst.l     D4
00003C9E  6704      6731          beq.s     vsscanf_75
00003CA0  2004      6732          move.l    D4,D0
00003CA2  6002      6733          bra.s     vsscanf_76
                    6734   vsscanf_75:
00003CA4  70FF      6735          moveq     #-1,D0
                    6736   vsscanf_76:
00003CA6  6000 02CA 6737          bra       vsscanf_15
                    6738   vsscanf_73:
00003CAA  4A86      6739          tst.l     D6
00003CAC  6602      6740          bne.s     vsscanf_77
00003CAE  5284      6741          addq.l    #1,D4
                    6742   vsscanf_77:
00003CB0  53AE FFE4 6743          subq.l    #1,-28(A6)
00003CB4  2F02      6744          move.l    D2,-(A7)
00003CB6  2F05      6745          move.l    D5,-(A7)
00003CB8  6100 FA98 6746          bsr       @vsscanf_scanputback
00003CBC  504F      6747          addq.w    #8,A7
00003CBE  6000 02AC 6748          bra       vsscanf_139
                    6749   vsscanf_60:
00003CC2  0C83 0000 6750          cmp.l     #105,D3
00003CC6  0069      
00003CC8  6600 0060 6751          bne       vsscanf_82
00003CCC  486E FFE4 6752          pea       -28(A6)
00003CD0  2F05      6753          move.l    D5,-(A7)
00003CD2  6100 FAE0 6754          bsr       @vsscanf_scanspace
00003CD6  504F      6755          addq.w    #8,A7
00003CD8  2400      6756          move.l    D0,D2
00003CDA  0C82 0000 6757          cmp.l     #48,D2
00003CDE  0030      
00003CE0  6600 0038 6758          bne       vsscanf_81
00003CE4  387C 0001 6759          move.w    #1,A4
00003CE8  2F05      6760          move.l    D5,-(A7)
00003CEA  4E93      6761          jsr       (A3)
00003CEC  584F      6762          addq.w    #4,A7
00003CEE  2400      6763          move.l    D0,D2
00003CF0  2F02      6764          move.l    D2,-(A7)
00003CF2  6100 F936 6765          bsr       _tolower
00003CF6  584F      6766          addq.w    #4,A7
00003CF8  0C80 0000 6767          cmp.l     #120,D0
00003CFC  0078      
00003CFE  6604      6768          bne.s     vsscanf_83
00003D00  7678      6769          moveq     #120,D3
00003D02  6010      6770          bra.s     vsscanf_84
                    6771   vsscanf_83:
00003D04  53AE FFE4 6772          subq.l    #1,-28(A6)
00003D08  2F02      6773          move.l    D2,-(A7)
00003D0A  2F05      6774          move.l    D5,-(A7)
00003D0C  6100 FA44 6775          bsr       @vsscanf_scanputback
00003D10  504F      6776          addq.w    #8,A7
00003D12  766F      6777          moveq     #111,D3
                    6778   vsscanf_84:
00003D14  52AE FFE4 6779          addq.l    #1,-28(A6)
00003D18  6010      6780          bra.s     vsscanf_82
                    6781   vsscanf_81:
00003D1A  53AE FFE4 6782          subq.l    #1,-28(A6)
00003D1E  2F02      6783          move.l    D2,-(A7)
00003D20  2F05      6784          move.l    D5,-(A7)
00003D22  6100 FA2E 6785          bsr       @vsscanf_scanputback
00003D26  504F      6786          addq.w    #8,A7
00003D28  7664      6787          moveq     #100,D3
                    6788   vsscanf_82:
00003D2A  0C83 0000 6789          cmp.l     #100,D3
00003D2E  0064      
00003D30  671A      6790          beq.s     vsscanf_87
00003D32  0C83 0000 6791          cmp.l     #117,D3
00003D36  0075      
00003D38  6712      6792          beq.s     vsscanf_87
00003D3A  0C83 0000 6793          cmp.l     #120,D3
00003D3E  0078      
00003D40  670A      6794          beq.s     vsscanf_87
00003D42  0C83 0000 6795          cmp.l     #111,D3
00003D46  006F      
00003D48  6600 01A4 6796          bne       vsscanf_85
                    6797   vsscanf_87:
00003D4C  486E FFE4 6798          pea       -28(A6)
00003D50  2F05      6799          move.l    D5,-(A7)
00003D52  6100 FA60 6800          bsr       @vsscanf_scanspace
00003D56  504F      6801          addq.w    #8,A7
00003D58  2400      6802          move.l    D0,D2
00003D5A  2D7C 0000 6803          move.l    #10,-4(A6)
00003D5E  000A FFFC 
00003D62  0C83 0000 6804          cmp.l     #120,D3
00003D66  0078      
00003D68  6608      6805          bne.s     vsscanf_88
00003D6A  2D7C 0000 6806          move.l    #16,-4(A6)
00003D6E  0010 FFFC 
                    6807   vsscanf_88:
00003D72  0C83 0000 6808          cmp.l     #111,D3
00003D76  006F      
00003D78  6608      6809          bne.s     vsscanf_90
00003D7A  2D7C 0000 6810          move.l    #8,-4(A6)
00003D7E  0008 FFFC 
                    6811   vsscanf_90:
00003D82  4A86      6812          tst.l     D6
00003D84  660A      6813          bne.s     vsscanf_92
00003D86  206E 0010 6814          move.l    16(A6),A0
00003D8A  58AE 0010 6815          addq.l    #4,16(A6)
00003D8E  2E10      6816          move.l    (A0),D7
                    6817   vsscanf_92:
00003D90  42AE FFE0 6818          clr.l     -32(A6)
00003D94  52AE FFE4 6819          addq.l    #1,-28(A6)
00003D98  0C83 0000 6820          cmp.l     #117,D3
00003D9C  0075      
00003D9E  6720      6821          beq.s     vsscanf_94
00003DA0  0C82 0000 6822          cmp.l     #45,D2
00003DA4  002D      
00003DA6  6618      6823          bne.s     vsscanf_94
00003DA8  2F05      6824          move.l    D5,-(A7)
00003DAA  4E93      6825          jsr       (A3)
00003DAC  584F      6826          addq.w    #4,A7
00003DAE  2400      6827          move.l    D0,D2
00003DB0  52AE FFE4 6828          addq.l    #1,-28(A6)
00003DB4  2D7C 0000 6829          move.l    #1,-32(A6)
00003DB8  0001 FFE0 
00003DBC  387C 0001 6830          move.w    #1,A4
                    6831   vsscanf_94:
00003DC0  3A7C 0000 6832          move.w    #0,A5
00003DC4  0C82 FFFF 6833          cmp.l     #-1,D2
00003DC8  FFFF      
00003DCA  660E      6834          bne.s     vsscanf_96
00003DCC  4A84      6835          tst.l     D4
00003DCE  6704      6836          beq.s     vsscanf_98
00003DD0  2004      6837          move.l    D4,D0
00003DD2  6002      6838          bra.s     vsscanf_99
                    6839   vsscanf_98:
00003DD4  70FF      6840          moveq     #-1,D0
                    6841   vsscanf_99:
00003DD6  6000 019A 6842          bra       vsscanf_15
                    6843   vsscanf_96:
00003DDA  200A      6844          move.l    A2,D0
00003DDC  534A      6845          subq.w    #1,A2
00003DDE  4A80      6846          tst.l     D0
00003DE0  6700 0090 6847          beq       vsscanf_102
00003DE4  0C83 0000 6848          cmp.l     #120,D3
00003DE8  0078      
00003DEA  6620      6849          bne.s     vsscanf_104
00003DEC  2F02      6850          move.l    D2,-(A7)
00003DEE  6100 F8C8 6851          bsr       _toupper
00003DF2  584F      6852          addq.w    #4,A7
00003DF4  0C80 0000 6853          cmp.l     #65,D0
00003DF8  0041      
00003DFA  6D10      6854          blt.s     vsscanf_104
00003DFC  2F02      6855          move.l    D2,-(A7)
00003DFE  6100 F8B8 6856          bsr       _toupper
00003E02  584F      6857          addq.w    #4,A7
00003E04  0C80 0000 6858          cmp.l     #70,D0
00003E08  0046      
00003E0A  6F14      6859          ble.s     vsscanf_103
                    6860   vsscanf_104:
00003E0C  2042      6861          move.l    D2,A0
00003E0E  43F9 0000 6862          lea       __ctype,A1
00003E12  5DC6      
00003E14  1030 9801 6863          move.b    1(A0,A1.L),D0
00003E18  C03C 0004 6864          and.b     #4,D0
00003E1C  6700 0054 6865          beq       vsscanf_102
                    6866   vsscanf_103:
00003E20  2042      6867          move.l    D2,A0
00003E22  43F9 0000 6868          lea       __ctype,A1
00003E26  5DC6      
00003E28  1030 9801 6869          move.b    1(A0,A1.L),D0
00003E2C  C03C 0004 6870          and.b     #4,D0
00003E30  6614      6871          bne.s     vsscanf_105
00003E32  70F9      6872          moveq     #-7,D0
00003E34  2F00      6873          move.l    D0,-(A7)
00003E36  2F02      6874          move.l    D2,-(A7)
00003E38  6100 F87E 6875          bsr       _toupper
00003E3C  584F      6876          addq.w    #4,A7
00003E3E  2200      6877          move.l    D0,D1
00003E40  201F      6878          move.l    (A7)+,D0
00003E42  D081      6879          add.l     D1,D0
00003E44  2400      6880          move.l    D0,D2
                    6881   vsscanf_105:
00003E46  2F0D      6882          move.l    A5,-(A7)
00003E48  2F2E FFFC 6883          move.l    -4(A6),-(A7)
00003E4C  6100 0884 6884          bsr       LMUL
00003E50  2017      6885          move.l    (A7),D0
00003E52  504F      6886          addq.w    #8,A7
00003E54  D082      6887          add.l     D2,D0
00003E56  0480 0000 6888          sub.l     #48,D0
00003E5A  0030      
00003E5C  2A40      6889          move.l    D0,A5
00003E5E  2F05      6890          move.l    D5,-(A7)
00003E60  4E93      6891          jsr       (A3)
00003E62  584F      6892          addq.w    #4,A7
00003E64  2400      6893          move.l    D0,D2
00003E66  52AE FFE4 6894          addq.l    #1,-28(A6)
00003E6A  387C 0001 6895          move.w    #1,A4
00003E6E  6000 FF6A 6896          bra       vsscanf_96
                    6897   vsscanf_102:
00003E72  0C82 FFFF 6898          cmp.l     #-1,D2
00003E76  FFFF      
00003E78  671A      6899          beq.s     vsscanf_107
00003E7A  2F02      6900          move.l    D2,-(A7)
00003E7C  2F05      6901          move.l    D5,-(A7)
00003E7E  6100 F8D2 6902          bsr       @vsscanf_scanputback
00003E82  504F      6903          addq.w    #8,A7
00003E84  53AE FFE4 6904          subq.l    #1,-28(A6)
00003E88  200C      6905          move.l    A4,D0
00003E8A  6606      6906          bne.s     vsscanf_109
00003E8C  2004      6907          move.l    D4,D0
00003E8E  6000 00E2 6908          bra       vsscanf_15
                    6909   vsscanf_109:
00003E92  6012      6910          bra.s     vsscanf_111
                    6911   vsscanf_107:
00003E94  200C      6912          move.l    A4,D0
00003E96  660E      6913          bne.s     vsscanf_111
00003E98  4A84      6914          tst.l     D4
00003E9A  6704      6915          beq.s     vsscanf_113
00003E9C  2004      6916          move.l    D4,D0
00003E9E  6002      6917          bra.s     vsscanf_114
                    6918   vsscanf_113:
00003EA0  70FF      6919          moveq     #-1,D0
                    6920   vsscanf_114:
00003EA2  6000 00CE 6921          bra       vsscanf_15
                    6922   vsscanf_111:
00003EA6  4AAE FFE0 6923          tst.l     -32(A6)
00003EAA  6706      6924          beq.s     vsscanf_115
00003EAC  200D      6925          move.l    A5,D0
00003EAE  4480      6926          neg.l     D0
00003EB0  2A40      6927          move.l    D0,A5
                    6928   vsscanf_115:
00003EB2  4A86      6929          tst.l     D6
00003EB4  661E      6930          bne.s     vsscanf_117
00003EB6  4AAE FFE8 6931          tst.l     -24(A6)
00003EBA  6706      6932          beq.s     vsscanf_119
00003EBC  2047      6933          move.l    D7,A0
00003EBE  208D      6934          move.l    A5,(A0)
00003EC0  6010      6935          bra.s     vsscanf_122
                    6936   vsscanf_119:
00003EC2  4AAE FFEC 6937          tst.l     -20(A6)
00003EC6  6706      6938          beq.s     vsscanf_121
00003EC8  2047      6939          move.l    D7,A0
00003ECA  308D      6940          move.w    A5,(A0)
00003ECC  6004      6941          bra.s     vsscanf_122
                    6942   vsscanf_121:
00003ECE  2047      6943          move.l    D7,A0
00003ED0  208D      6944          move.l    A5,(A0)
                    6945   vsscanf_122:
00003ED2  5284      6946          addq.l    #1,D4
                    6947   vsscanf_117:
00003ED4  0C82 FFFF 6948          cmp.l     #-1,D2
00003ED8  FFFF      
00003EDA  660E      6949          bne.s     vsscanf_123
00003EDC  4A84      6950          tst.l     D4
00003EDE  6704      6951          beq.s     vsscanf_125
00003EE0  2004      6952          move.l    D4,D0
00003EE2  6002      6953          bra.s     vsscanf_126
                    6954   vsscanf_125:
00003EE4  70FF      6955          moveq     #-1,D0
                    6956   vsscanf_126:
00003EE6  6000 008A 6957          bra       vsscanf_15
                    6958   vsscanf_123:
00003EEA  6000 0080 6959          bra       vsscanf_139
                    6960   vsscanf_85:
00003EEE  0C83 0000 6961          cmp.l     #37,D3
00003EF2  0025      
00003EF4  6600 0040 6962          bne       vsscanf_127
00003EF8  2F05      6963          move.l    D5,-(A7)
00003EFA  4E93      6964          jsr       (A3)
00003EFC  584F      6965          addq.w    #4,A7
00003EFE  2400      6966          move.l    D0,D2
00003F00  0C82 FFFF 6967          cmp.l     #-1,D2
00003F04  FFFF      
00003F06  660E      6968          bne.s     vsscanf_129
00003F08  4A84      6969          tst.l     D4
00003F0A  6704      6970          beq.s     vsscanf_131
00003F0C  2004      6971          move.l    D4,D0
00003F0E  6002      6972          bra.s     vsscanf_132
                    6973   vsscanf_131:
00003F10  70FF      6974          moveq     #-1,D0
                    6975   vsscanf_132:
00003F12  6000 005E 6976          bra       vsscanf_15
                    6977   vsscanf_129:
00003F16  52AE FFE4 6978          addq.l    #1,-28(A6)
00003F1A  B483      6979          cmp.l     D3,D2
00003F1C  6714      6980          beq.s     vsscanf_133
00003F1E  2F02      6981          move.l    D2,-(A7)
00003F20  2F05      6982          move.l    D5,-(A7)
00003F22  6100 F82E 6983          bsr       @vsscanf_scanputback
00003F26  504F      6984          addq.w    #8,A7
00003F28  53AE FFE4 6985          subq.l    #1,-28(A6)
00003F2C  2004      6986          move.l    D4,D0
00003F2E  6000 0042 6987          bra       vsscanf_15
                    6988   vsscanf_133:
00003F32  6000 0038 6989          bra       vsscanf_139
                    6990   vsscanf_127:
00003F36  2F05      6991          move.l    D5,-(A7)
00003F38  4E93      6992          jsr       (A3)
00003F3A  584F      6993          addq.w    #4,A7
00003F3C  2400      6994          move.l    D0,D2
00003F3E  52AE FFE4 6995          addq.l    #1,-28(A6)
00003F42  0C82 FFFF 6996          cmp.l     #-1,D2
00003F46  FFFF      
00003F48  660C      6997          bne.s     vsscanf_135
00003F4A  4A84      6998          tst.l     D4
00003F4C  6704      6999          beq.s     vsscanf_137
00003F4E  2004      7000          move.l    D4,D0
00003F50  6002      7001          bra.s     vsscanf_138
                    7002   vsscanf_137:
00003F52  70FF      7003          moveq     #-1,D0
                    7004   vsscanf_138:
00003F54  601C      7005          bra.s     vsscanf_15
                    7006   vsscanf_135:
00003F56  B483      7007          cmp.l     D3,D2
00003F58  6712      7008          beq.s     vsscanf_139
00003F5A  2F02      7009          move.l    D2,-(A7)
00003F5C  2F05      7010          move.l    D5,-(A7)
00003F5E  6100 F7F2 7011          bsr       @vsscanf_scanputback
00003F62  504F      7012          addq.w    #8,A7
00003F64  53AE FFE4 7013          subq.l    #1,-28(A6)
00003F68  2004      7014          move.l    D4,D0
00003F6A  6006      7015          bra.s     vsscanf_15
                    7016   vsscanf_139:
00003F6C  6000 FA44 7017          bra       vsscanf_3
                    7018   vsscanf_5:
00003F70  2004      7019          move.l    D4,D0
                    7020   vsscanf_15:
00003F72  4CDF 3CFC 7021          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003F76  4E5E      7022          unlk      A6
00003F78  4E75      7023          rts
                    7024   _printf:
00003F7A  4E56 FFFC 7025          link      A6,#-4
00003F7E  48E7 2000 7026          movem.l   D2,-(A7)
00003F82  41EE 0008 7027          lea       8(A6),A0
00003F86  5848      7028          addq.w    #4,A0
00003F88  2408      7029          move.l    A0,D2
00003F8A  2F02      7030          move.l    D2,-(A7)
00003F8C  2F2E 0008 7031          move.l    8(A6),-(A7)
00003F90  42A7      7032          clr.l     -(A7)
00003F92  6100 00CA 7033          bsr       _vsprintf
00003F96  DEFC 000C 7034          add.w     #12,A7
00003F9A  2D40 FFFC 7035          move.l    D0,-4(A6)
00003F9E  4282      7036          clr.l     D2
00003FA0  202E FFFC 7037          move.l    -4(A6),D0
00003FA4  4CDF 0004 7038          movem.l   (A7)+,D2
00003FA8  4E5E      7039          unlk      A6
00003FAA  4E75      7040          rts
                    7041   @vsprintf_copy:
00003FAC  4E56 0000 7042          link      A6,#0
00003FB0  206E 0008 7043          move.l    8(A6),A0
00003FB4  4A90      7044          tst.l     (A0)
00003FB6  6710      7045          beq.s     @vsprintf_copy_1
00003FB8  202E 000C 7046          move.l    12(A6),D0
00003FBC  206E 0008 7047          move.l    8(A6),A0
00003FC0  2250      7048          move.l    (A0),A1
00003FC2  5290      7049          addq.l    #1,(A0)
00003FC4  1280      7050          move.b    D0,(A1)
00003FC6  600A      7051          bra.s     @vsprintf_copy_2
                    7052   @vsprintf_copy_1:
00003FC8  2F2E 000C 7053          move.l    12(A6),-(A7)
00003FCC  6100 F5F0 7054          bsr       _putch
00003FD0  584F      7055          addq.w    #4,A7
                    7056   @vsprintf_copy_2:
00003FD2  4E5E      7057          unlk      A6
00003FD4  4E75      7058          rts
                    7059   @vsprintf_getval:
00003FD6  4E56 0000 7060          link      A6,#0
00003FDA  48E7 3000 7061          movem.l   D2/D3,-(A7)
00003FDE  242E 0008 7062          move.l    8(A6),D2
00003FE2  4283      7063          clr.l     D3
00003FE4  2042      7064          move.l    D2,A0
00003FE6  2050      7065          move.l    (A0),A0
00003FE8  1010      7066          move.b    (A0),D0
00003FEA  4880      7067          ext.w     D0
00003FEC  48C0      7068          ext.l     D0
00003FEE  0C80 0000 7069          cmp.l     #42,D0
00003FF2  002A      
00003FF4  6612      7070          bne.s     @vsprintf_getval_1
00003FF6  206E 000C 7071          move.l    12(A6),A0
00003FFA  2250      7072          move.l    (A0),A1
00003FFC  5890      7073          addq.l    #4,(A0)
00003FFE  2611      7074          move.l    (A1),D3
00004000  2042      7075          move.l    D2,A0
00004002  5290      7076          addq.l    #1,(A0)
00004004  6000 004E 7077          bra       @vsprintf_getval_5
                    7078   @vsprintf_getval_1:
00004008  2042      7079          move.l    D2,A0
0000400A  2050      7080          move.l    (A0),A0
0000400C  1010      7081          move.b    (A0),D0
0000400E  4880      7082          ext.w     D0
00004010  48C0      7083          ext.l     D0
00004012  0C80 0000 7084          cmp.l     #48,D0
00004016  0030      
00004018  6D00 003A 7085          blt       @vsprintf_getval_5
0000401C  2042      7086          move.l    D2,A0
0000401E  2050      7087          move.l    (A0),A0
00004020  1010      7088          move.b    (A0),D0
00004022  4880      7089          ext.w     D0
00004024  48C0      7090          ext.l     D0
00004026  0C80 0000 7091          cmp.l     #57,D0
0000402A  0039      
0000402C  6E26      7092          bgt.s     @vsprintf_getval_5
0000402E  2F03      7093          move.l    D3,-(A7)
00004030  4878 000A 7094          pea       10
00004034  6100 069C 7095          bsr       LMUL
00004038  2017      7096          move.l    (A7),D0
0000403A  504F      7097          addq.w    #8,A7
0000403C  2042      7098          move.l    D2,A0
0000403E  2250      7099          move.l    (A0),A1
00004040  5290      7100          addq.l    #1,(A0)
00004042  1211      7101          move.b    (A1),D1
00004044  4881      7102          ext.w     D1
00004046  48C1      7103          ext.l     D1
00004048  D081      7104          add.l     D1,D0
0000404A  0480 0000 7105          sub.l     #48,D0
0000404E  0030      
00004050  2600      7106          move.l    D0,D3
00004052  60B4      7107          bra       @vsprintf_getval_1
                    7108   @vsprintf_getval_5:
00004054  2003      7109          move.l    D3,D0
00004056  4CDF 000C 7110          movem.l   (A7)+,D2/D3
0000405A  4E5E      7111          unlk      A6
0000405C  4E75      7112          rts
                    7113   _vsprintf:
0000405E  4E56 FFCC 7114          link      A6,#-52
00004062  48E7 3F3C 7115          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00004066  45EE 0008 7116          lea       8(A6),A2
0000406A  47F8 3FAC 7117          lea       @vsprintf_copy,A3
0000406E  49F9 0000 7118          lea       _ultoa,A4
00004072  48DC      
00004074  4286      7119          clr.l     D6
                    7120   vsprintf_1:
00004076  206E 000C 7121          move.l    12(A6),A0
0000407A  4A10      7122          tst.b     (A0)
0000407C  6700 0624 7123          beq       vsprintf_3
00004080  206E 000C 7124          move.l    12(A6),A0
00004084  1010      7125          move.b    (A0),D0
00004086  4880      7126          ext.w     D0
00004088  48C0      7127          ext.l     D0
0000408A  0C80 0000 7128          cmp.l     #37,D0
0000408E  0025      
00004090  671C      7129          beq.s     vsprintf_4
00004092  206E 000C 7130          move.l    12(A6),A0
00004096  52AE 000C 7131          addq.l    #1,12(A6)
0000409A  1210      7132          move.b    (A0),D1
0000409C  4881      7133          ext.w     D1
0000409E  48C1      7134          ext.l     D1
000040A0  2F01      7135          move.l    D1,-(A7)
000040A2  2F0A      7136          move.l    A2,-(A7)
000040A4  4E93      7137          jsr       (A3)
000040A6  504F      7138          addq.w    #8,A7
000040A8  5286      7139          addq.l    #1,D6
000040AA  6000 05F2 7140          bra       vsprintf_2
                    7141   vsprintf_4:
000040AE  52AE 000C 7142          addq.l    #1,12(A6)
000040B2  422E FFD3 7143          clr.b     -45(A6)
000040B6  422E FFD2 7144          clr.b     -46(A6)
000040BA  422E FFD0 7145          clr.b     -48(A6)
000040BE  422E FFCF 7146          clr.b     -49(A6)
000040C2  422E FFCE 7147          clr.b     -50(A6)
000040C6  422E FFCD 7148          clr.b     -51(A6)
000040CA  42AE FFFC 7149          clr.l     -4(A6)
000040CE  7AFF      7150          moveq     #-1,D5
000040D0  41EE FFDC 7151          lea       -36(A6),A0
000040D4  2608      7152          move.l    A0,D3
000040D6  2408      7153          move.l    A0,D2
                    7154   vsprintf_6:
000040D8  206E 000C 7155          move.l    12(A6),A0
000040DC  1010      7156          move.b    (A0),D0
000040DE  4880      7157          ext.w     D0
000040E0  48C0      7158          ext.l     D0
000040E2  0C80 0000 7159          cmp.l     #43,D0
000040E6  002B      
000040E8  6730      7160          beq.s     vsprintf_12
000040EA  6E18      7161          bgt.s     vsprintf_15
000040EC  0C80 0000 7162          cmp.l     #35,D0
000040F0  0023      
000040F2  6700 003E 7163          beq       vsprintf_14
000040F6  6E00 0046 7164          bgt       vsprintf_9
000040FA  0C80 0000 7165          cmp.l     #32,D0
000040FE  0020      
00004100  6724      7166          beq.s     vsprintf_13
00004102  603A      7167          bra.s     vsprintf_9
                    7168   vsprintf_15:
00004104  0C80 0000 7169          cmp.l     #45,D0
00004108  002D      
0000410A  6702      7170          beq.s     vsprintf_11
0000410C  6030      7171          bra.s     vsprintf_9
                    7172   vsprintf_11:
0000410E  1D7C 0001 7173          move.b    #1,-51(A6)
00004112  FFCD      
00004114  52AE 000C 7174          addq.l    #1,12(A6)
00004118  6026      7175          bra.s     vsprintf_7
                    7176   vsprintf_12:
0000411A  1D7C 0001 7177          move.b    #1,-50(A6)
0000411E  FFCE      
00004120  52AE 000C 7178          addq.l    #1,12(A6)
00004124  601A      7179          bra.s     vsprintf_7
                    7180   vsprintf_13:
00004126  1D7C 0001 7181          move.b    #1,-49(A6)
0000412A  FFCF      
0000412C  52AE 000C 7182          addq.l    #1,12(A6)
00004130  600E      7183          bra.s     vsprintf_7
                    7184   vsprintf_14:
00004132  1D7C 0001 7185          move.b    #1,-48(A6)
00004136  FFD0      
00004138  52AE 000C 7186          addq.l    #1,12(A6)
0000413C  6002      7187          bra.s     vsprintf_7
                    7188   vsprintf_9:
0000413E  6002      7189          bra.s     vsprintf_8
                    7190   vsprintf_7:
00004140  6096      7191          bra       vsprintf_6
                    7192   vsprintf_8:
00004142  206E 000C 7193          move.l    12(A6),A0
00004146  1010      7194          move.b    (A0),D0
00004148  4880      7195          ext.w     D0
0000414A  48C0      7196          ext.l     D0
0000414C  0C80 0000 7197          cmp.l     #48,D0
00004150  0030      
00004152  660A      7198          bne.s     vsprintf_16
00004154  52AE 000C 7199          addq.l    #1,12(A6)
00004158  1D7C 0001 7200          move.b    #1,-46(A6)
0000415C  FFD2      
                    7201   vsprintf_16:
0000415E  486E 0010 7202          pea       16(A6)
00004162  486E 000C 7203          pea       12(A6)
00004166  6100 FE6E 7204          bsr       @vsprintf_getval
0000416A  504F      7205          addq.w    #8,A7
0000416C  2A40      7206          move.l    D0,A5
0000416E  206E 000C 7207          move.l    12(A6),A0
00004172  1010      7208          move.b    (A0),D0
00004174  4880      7209          ext.w     D0
00004176  48C0      7210          ext.l     D0
00004178  0C80 0000 7211          cmp.l     #46,D0
0000417C  002E      
0000417E  6614      7212          bne.s     vsprintf_18
00004180  52AE 000C 7213          addq.l    #1,12(A6)
00004184  486E 0010 7214          pea       16(A6)
00004188  486E 000C 7215          pea       12(A6)
0000418C  6100 FE48 7216          bsr       @vsprintf_getval
00004190  504F      7217          addq.w    #8,A7
00004192  2A00      7218          move.l    D0,D5
                    7219   vsprintf_18:
00004194  206E 000C 7220          move.l    12(A6),A0
00004198  1010      7221          move.b    (A0),D0
0000419A  4880      7222          ext.w     D0
0000419C  48C0      7223          ext.l     D0
0000419E  0C80 0000 7224          cmp.l     #108,D0
000041A2  006C      
000041A4  660A      7225          bne.s     vsprintf_20
000041A6  52AE 000C 7226          addq.l    #1,12(A6)
000041AA  1D7C 0001 7227          move.b    #1,-45(A6)
000041AE  FFD3      
                    7228   vsprintf_20:
000041B0  206E 000C 7229          move.l    12(A6),A0
000041B4  1010      7230          move.b    (A0),D0
000041B6  4880      7231          ext.w     D0
000041B8  48C0      7232          ext.l     D0
000041BA  0C80 0000 7233          cmp.l     #111,D0
000041BE  006F      
000041C0  6700 00D4 7234          beq       vsprintf_27
000041C4  6E34      7235          bgt.s     vsprintf_33
000041C6  0C80 0000 7236          cmp.l     #100,D0
000041CA  0064      
000041CC  6700 0054 7237          beq       vsprintf_24
000041D0  6E1C      7238          bgt.s     vsprintf_34
000041D2  0C80 0000 7239          cmp.l     #99,D0
000041D6  0063      
000041D8  6700 012C 7240          beq       vsprintf_30
000041DC  6E00 016A 7241          bgt       vsprintf_22
000041E0  0C80 0000 7242          cmp.l     #88,D0
000041E4  0058      
000041E6  6700 00E6 7243          beq       vsprintf_28
000041EA  6000 015C 7244          bra       vsprintf_22
                    7245   vsprintf_34:
000041EE  0C80 0000 7246          cmp.l     #105,D0
000041F2  0069      
000041F4  672C      7247          beq.s     vsprintf_24
000041F6  6000 0150 7248          bra       vsprintf_22
                    7249   vsprintf_33:
000041FA  0C80 0000 7250          cmp.l     #117,D0
000041FE  0075      
00004200  6700 005C 7251          beq       vsprintf_26
00004204  6E0E      7252          bgt.s     vsprintf_35
00004206  0C80 0000 7253          cmp.l     #115,D0
0000420A  0073      
0000420C  6700 011C 7254          beq       vsprintf_31
00004210  6000 0136 7255          bra       vsprintf_22
                    7256   vsprintf_35:
00004214  0C80 0000 7257          cmp.l     #120,D0
00004218  0078      
0000421A  6700 00B2 7258          beq       vsprintf_28
0000421E  6000 0128 7259          bra       vsprintf_22
                    7260   vsprintf_24:
00004222  4A2E FFD3 7261          tst.b     -45(A6)
00004226  671A      7262          beq.s     vsprintf_36
00004228  4878 000A 7263          pea       10
0000422C  2F03      7264          move.l    D3,-(A7)
0000422E  206E 0010 7265          move.l    16(A6),A0
00004232  58AE 0010 7266          addq.l    #4,16(A6)
00004236  2F10      7267          move.l    (A0),-(A7)
00004238  6100 061E 7268          bsr       _ltoa
0000423C  DEFC 000C 7269          add.w     #12,A7
00004240  6018      7270          bra.s     vsprintf_37
                    7271   vsprintf_36:
00004242  4878 000A 7272          pea       10
00004246  2F03      7273          move.l    D3,-(A7)
00004248  206E 0010 7274          move.l    16(A6),A0
0000424C  58AE 0010 7275          addq.l    #4,16(A6)
00004250  2F10      7276          move.l    (A0),-(A7)
00004252  6100 0604 7277          bsr       _ltoa
00004256  DEFC 000C 7278          add.w     #12,A7
                    7279   vsprintf_37:
0000425A  6000 00FA 7280          bra       vsprintf_23
                    7281   vsprintf_26:
0000425E  4A2E FFD3 7282          tst.b     -45(A6)
00004262  6718      7283          beq.s     vsprintf_38
00004264  4878 000A 7284          pea       10
00004268  2F03      7285          move.l    D3,-(A7)
0000426A  206E 0010 7286          move.l    16(A6),A0
0000426E  58AE 0010 7287          addq.l    #4,16(A6)
00004272  2F10      7288          move.l    (A0),-(A7)
00004274  4E94      7289          jsr       (A4)
00004276  DEFC 000C 7290          add.w     #12,A7
0000427A  6016      7291          bra.s     vsprintf_39
                    7292   vsprintf_38:
0000427C  4878 000A 7293          pea       10
00004280  2F03      7294          move.l    D3,-(A7)
00004282  206E 0010 7295          move.l    16(A6),A0
00004286  58AE 0010 7296          addq.l    #4,16(A6)
0000428A  2F10      7297          move.l    (A0),-(A7)
0000428C  4E94      7298          jsr       (A4)
0000428E  DEFC 000C 7299          add.w     #12,A7
                    7300   vsprintf_39:
00004292  6000 00C2 7301          bra       vsprintf_23
                    7302   vsprintf_27:
00004296  4A2E FFD3 7303          tst.b     -45(A6)
0000429A  6718      7304          beq.s     vsprintf_40
0000429C  4878 0008 7305          pea       8
000042A0  2F03      7306          move.l    D3,-(A7)
000042A2  206E 0010 7307          move.l    16(A6),A0
000042A6  58AE 0010 7308          addq.l    #4,16(A6)
000042AA  2F10      7309          move.l    (A0),-(A7)
000042AC  4E94      7310          jsr       (A4)
000042AE  DEFC 000C 7311          add.w     #12,A7
000042B2  6016      7312          bra.s     vsprintf_41
                    7313   vsprintf_40:
000042B4  4878 0008 7314          pea       8
000042B8  2F03      7315          move.l    D3,-(A7)
000042BA  206E 0010 7316          move.l    16(A6),A0
000042BE  58AE 0010 7317          addq.l    #4,16(A6)
000042C2  2F10      7318          move.l    (A0),-(A7)
000042C4  4E94      7319          jsr       (A4)
000042C6  DEFC 000C 7320          add.w     #12,A7
                    7321   vsprintf_41:
000042CA  6000 008A 7322          bra       vsprintf_23
                    7323   vsprintf_28:
000042CE  4A2E FFD3 7324          tst.b     -45(A6)
000042D2  6718      7325          beq.s     vsprintf_42
000042D4  4878 0010 7326          pea       16
000042D8  2F03      7327          move.l    D3,-(A7)
000042DA  206E 0010 7328          move.l    16(A6),A0
000042DE  58AE 0010 7329          addq.l    #4,16(A6)
000042E2  2F10      7330          move.l    (A0),-(A7)
000042E4  4E94      7331          jsr       (A4)
000042E6  DEFC 000C 7332          add.w     #12,A7
000042EA  6016      7333          bra.s     vsprintf_43
                    7334   vsprintf_42:
000042EC  4878 0010 7335          pea       16
000042F0  2F03      7336          move.l    D3,-(A7)
000042F2  206E 0010 7337          move.l    16(A6),A0
000042F6  58AE 0010 7338          addq.l    #4,16(A6)
000042FA  2F10      7339          move.l    (A0),-(A7)
000042FC  4E94      7340          jsr       (A4)
000042FE  DEFC 000C 7341          add.w     #12,A7
                    7342   vsprintf_43:
00004302  6000 0052 7343          bra       vsprintf_23
                    7344   vsprintf_30:
00004306  206E 0010 7345          move.l    16(A6),A0
0000430A  58AE 0010 7346          addq.l    #4,16(A6)
0000430E  2010      7347          move.l    (A0),D0
00004310  2042      7348          move.l    D2,A0
00004312  5282      7349          addq.l    #1,D2
00004314  1080      7350          move.b    D0,(A0)
00004316  2042      7351          move.l    D2,A0
00004318  4210      7352          clr.b     (A0)
0000431A  200D      7353          move.l    A5,D0
0000431C  6704      7354          beq.s     vsprintf_44
0000431E  200D      7355          move.l    A5,D0
00004320  6002      7356          bra.s     vsprintf_45
                    7357   vsprintf_44:
00004322  7001      7358          moveq     #1,D0
                    7359   vsprintf_45:
00004324  2A00      7360          move.l    D0,D5
00004326  6000 002E 7361          bra       vsprintf_23
                    7362   vsprintf_31:
0000432A  206E 0010 7363          move.l    16(A6),A0
0000432E  58AE 0010 7364          addq.l    #4,16(A6)
00004332  2610      7365          move.l    (A0),D3
00004334  0C85 FFFF 7366          cmp.l     #-1,D5
00004338  FFFF      
0000433A  660A      7367          bne.s     vsprintf_46
0000433C  2F03      7368          move.l    D3,-(A7)
0000433E  6100 05FE 7369          bsr       _strlen
00004342  584F      7370          addq.w    #4,A7
00004344  2A00      7371          move.l    D0,D5
                    7372   vsprintf_46:
00004346  600E      7373          bra.s     vsprintf_23
                    7374   vsprintf_22:
00004348  206E 000C 7375          move.l    12(A6),A0
0000434C  2242      7376          move.l    D2,A1
0000434E  5282      7377          addq.l    #1,D2
00004350  1290      7378          move.b    (A0),(A1)
00004352  2042      7379          move.l    D2,A0
00004354  4210      7380          clr.b     (A0)
                    7381   vsprintf_23:
00004356  2F03      7382          move.l    D3,-(A7)
00004358  6100 05E4 7383          bsr       _strlen
0000435C  584F      7384          addq.w    #4,A7
0000435E  1800      7385          move.b    D0,D4
00004360  206E 000C 7386          move.l    12(A6),A0
00004364  1010      7387          move.b    (A0),D0
00004366  4880      7388          ext.w     D0
00004368  48C0      7389          ext.l     D0
0000436A  0C80 0000 7390          cmp.l     #115,D0
0000436E  0073      
00004370  6618      7391          bne.s     vsprintf_48
00004372  0C85 0000 7392          cmp.l     #0,D5
00004376  0000      
00004378  6D10      7393          blt.s     vsprintf_48
0000437A  4884      7394          ext.w     D4
0000437C  48C4      7395          ext.l     D4
0000437E  B885      7396          cmp.l     D5,D4
00004380  6F04      7397          ble.s     vsprintf_50
00004382  1005      7398          move.b    D5,D0
00004384  6002      7399          bra.s     vsprintf_51
                    7400   vsprintf_50:
00004386  1004      7401          move.b    D4,D0
                    7402   vsprintf_51:
00004388  1800      7403          move.b    D0,D4
                    7404   vsprintf_48:
0000438A  206E 000C 7405          move.l    12(A6),A0
0000438E  1010      7406          move.b    (A0),D0
00004390  4880      7407          ext.w     D0
00004392  48C0      7408          ext.l     D0
00004394  0C80 0000 7409          cmp.l     #88,D0
00004398  0058      
0000439A  6600 0026 7410          bne       vsprintf_56
0000439E  41EE FFDC 7411          lea       -36(A6),A0
000043A2  2408      7412          move.l    A0,D2
                    7413   vsprintf_54:
000043A4  2042      7414          move.l    D2,A0
000043A6  4A10      7415          tst.b     (A0)
000043A8  6718      7416          beq.s     vsprintf_56
000043AA  2042      7417          move.l    D2,A0
000043AC  1210      7418          move.b    (A0),D1
000043AE  4881      7419          ext.w     D1
000043B0  48C1      7420          ext.l     D1
000043B2  2F01      7421          move.l    D1,-(A7)
000043B4  6100 F302 7422          bsr       _toupper
000043B8  584F      7423          addq.w    #4,A7
000043BA  2042      7424          move.l    D2,A0
000043BC  1080      7425          move.b    D0,(A0)
000043BE  5282      7426          addq.l    #1,D2
000043C0  60E2      7427          bra       vsprintf_54
                    7428   vsprintf_56:
000043C2  7E00      7429          moveq     #0,D7
000043C4  41EE FFD4 7430          lea       -44(A6),A0
000043C8  2408      7431          move.l    A0,D2
000043CA  206E 000C 7432          move.l    12(A6),A0
000043CE  1010      7433          move.b    (A0),D0
000043D0  4880      7434          ext.w     D0
000043D2  48C0      7435          ext.l     D0
000043D4  0C80 0000 7436          cmp.l     #100,D0
000043D8  0064      
000043DA  6714      7437          beq.s     vsprintf_59
000043DC  206E 000C 7438          move.l    12(A6),A0
000043E0  1010      7439          move.b    (A0),D0
000043E2  4880      7440          ext.w     D0
000043E4  48C0      7441          ext.l     D0
000043E6  0C80 0000 7442          cmp.l     #105,D0
000043EA  0069      
000043EC  6600 0076 7443          bne       vsprintf_65
                    7444   vsprintf_59:
000043F0  4A2E FFCE 7445          tst.b     -50(A6)
000043F4  6612      7446          bne.s     vsprintf_62
000043F6  2043      7447          move.l    D3,A0
000043F8  1010      7448          move.b    (A0),D0
000043FA  4880      7449          ext.w     D0
000043FC  48C0      7450          ext.l     D0
000043FE  0C80 0000 7451          cmp.l     #45,D0
00004402  002D      
00004404  6600 002E 7452          bne       vsprintf_60
                    7453   vsprintf_62:
00004408  2043      7454          move.l    D3,A0
0000440A  1010      7455          move.b    (A0),D0
0000440C  4880      7456          ext.w     D0
0000440E  48C0      7457          ext.l     D0
00004410  0C80 0000 7458          cmp.l     #45,D0
00004414  002D      
00004416  660E      7459          bne.s     vsprintf_63
00004418  2043      7460          move.l    D3,A0
0000441A  5283      7461          addq.l    #1,D3
0000441C  2242      7462          move.l    D2,A1
0000441E  5282      7463          addq.l    #1,D2
00004420  1290      7464          move.b    (A0),(A1)
00004422  5304      7465          subq.b    #1,D4
00004424  6008      7466          bra.s     vsprintf_64
                    7467   vsprintf_63:
00004426  2042      7468          move.l    D2,A0
00004428  5282      7469          addq.l    #1,D2
0000442A  10BC 002B 7470          move.b    #43,(A0)
                    7471   vsprintf_64:
0000442E  5287      7472          addq.l    #1,D7
00004430  6000 0032 7473          bra       vsprintf_65
                    7474   vsprintf_60:
00004434  4A2E FFCF 7475          tst.b     -49(A6)
00004438  6700 002A 7476          beq       vsprintf_65
0000443C  2043      7477          move.l    D3,A0
0000443E  1010      7478          move.b    (A0),D0
00004440  4880      7479          ext.w     D0
00004442  48C0      7480          ext.l     D0
00004444  0C80 0000 7481          cmp.l     #45,D0
00004448  002D      
0000444A  660E      7482          bne.s     vsprintf_67
0000444C  2043      7483          move.l    D3,A0
0000444E  5283      7484          addq.l    #1,D3
00004450  2242      7485          move.l    D2,A1
00004452  5282      7486          addq.l    #1,D2
00004454  1290      7487          move.b    (A0),(A1)
00004456  5304      7488          subq.b    #1,D4
00004458  6008      7489          bra.s     vsprintf_68
                    7490   vsprintf_67:
0000445A  2042      7491          move.l    D2,A0
0000445C  5282      7492          addq.l    #1,D2
0000445E  10BC 0020 7493          move.b    #32,(A0)
                    7494   vsprintf_68:
00004462  5287      7495          addq.l    #1,D7
                    7496   vsprintf_65:
00004464  4A2E FFD0 7497          tst.b     -48(A6)
00004468  6700 0066 7498          beq       vsprintf_77
0000446C  206E 000C 7499          move.l    12(A6),A0
00004470  1010      7500          move.b    (A0),D0
00004472  4880      7501          ext.w     D0
00004474  48C0      7502          ext.l     D0
00004476  0C80 0000 7503          cmp.l     #111,D0
0000447A  006F      
0000447C  671A      7504          beq.s     vsprintf_73
0000447E  6E0C      7505          bgt.s     vsprintf_76
00004480  0C80 0000 7506          cmp.l     #88,D0
00004484  0058      
00004486  6710      7507          beq.s     vsprintf_73
00004488  6000 0046 7508          bra       vsprintf_77
                    7509   vsprintf_76:
0000448C  0C80 0000 7510          cmp.l     #120,D0
00004490  0078      
00004492  6704      7511          beq.s     vsprintf_73
00004494  6000 003A 7512          bra       vsprintf_77
                    7513   vsprintf_73:
00004498  2042      7514          move.l    D2,A0
0000449A  5282      7515          addq.l    #1,D2
0000449C  10BC 0030 7516          move.b    #48,(A0)
000044A0  5287      7517          addq.l    #1,D7
000044A2  206E 000C 7518          move.l    12(A6),A0
000044A6  1010      7519          move.b    (A0),D0
000044A8  4880      7520          ext.w     D0
000044AA  48C0      7521          ext.l     D0
000044AC  0C80 0000 7522          cmp.l     #120,D0
000044B0  0078      
000044B2  6712      7523          beq.s     vsprintf_79
000044B4  206E 000C 7524          move.l    12(A6),A0
000044B8  1010      7525          move.b    (A0),D0
000044BA  4880      7526          ext.w     D0
000044BC  48C0      7527          ext.l     D0
000044BE  0C80 0000 7528          cmp.l     #88,D0
000044C2  0058      
000044C4  660A      7529          bne.s     vsprintf_77
                    7530   vsprintf_79:
000044C6  2042      7531          move.l    D2,A0
000044C8  5282      7532          addq.l    #1,D2
000044CA  10BC 0078 7533          move.b    #120,(A0)
000044CE  5287      7534          addq.l    #1,D7
                    7535   vsprintf_77:
000044D0  2042      7536          move.l    D2,A0
000044D2  4210      7537          clr.b     (A0)
000044D4  206E 000C 7538          move.l    12(A6),A0
000044D8  1010      7539          move.b    (A0),D0
000044DA  4880      7540          ext.w     D0
000044DC  48C0      7541          ext.l     D0
000044DE  0C80 0000 7542          cmp.l     #105,D0
000044E2  0069      
000044E4  6700 0076 7543          beq       vsprintf_82
000044E8  6E42      7544          bgt.s     vsprintf_93
000044EA  0C80 0000 7545          cmp.l     #99,D0
000044EE  0063      
000044F0  6700 0084 7546          beq       vsprintf_96
000044F4  6E1C      7547          bgt.s     vsprintf_94
000044F6  0C80 0000 7548          cmp.l     #88,D0
000044FA  0058      
000044FC  6700 005E 7549          beq       vsprintf_82
00004500  6E00 0184 7550          bgt       vsprintf_80
00004504  0C80 0000 7551          cmp.l     #69,D0
00004508  0045      
0000450A  6700 0050 7552          beq       vsprintf_82
0000450E  6000 0176 7553          bra       vsprintf_80
                    7554   vsprintf_94:
00004512  0C80 0000 7555          cmp.l     #101,D0
00004516  0065      
00004518  6700 0042 7556          beq       vsprintf_82
0000451C  6E00 0168 7557          bgt       vsprintf_80
00004520  0C80 0000 7558          cmp.l     #100,D0
00004524  0064      
00004526  6734      7559          beq.s     vsprintf_82
00004528  6000 015C 7560          bra       vsprintf_80
                    7561   vsprintf_93:
0000452C  0C80 0000 7562          cmp.l     #117,D0
00004530  0075      
00004532  6728      7563          beq.s     vsprintf_82
00004534  6E1A      7564          bgt.s     vsprintf_95
00004536  0C80 0000 7565          cmp.l     #115,D0
0000453A  0073      
0000453C  6700 0038 7566          beq       vsprintf_96
00004540  6E00 0144 7567          bgt       vsprintf_80
00004544  0C80 0000 7568          cmp.l     #111,D0
00004548  006F      
0000454A  6710      7569          beq.s     vsprintf_82
0000454C  6000 0138 7570          bra       vsprintf_80
                    7571   vsprintf_95:
00004550  0C80 0000 7572          cmp.l     #120,D0
00004554  0078      
00004556  6704      7573          beq.s     vsprintf_82
00004558  6000 012C 7574          bra       vsprintf_80
                    7575   vsprintf_82:
0000455C  4A2E FFD2 7576          tst.b     -46(A6)
00004560  6714      7577          beq.s     vsprintf_96
00004562  4A2E FFCD 7578          tst.b     -51(A6)
00004566  660E      7579          bne.s     vsprintf_96
00004568  200D      7580          move.l    A5,D0
0000456A  9087      7581          sub.l     D7,D0
0000456C  4884      7582          ext.w     D4
0000456E  48C4      7583          ext.l     D4
00004570  9084      7584          sub.l     D4,D0
00004572  2D40 FFFC 7585          move.l    D0,-4(A6)
                    7586   vsprintf_96:
00004576  202E FFFC 7587          move.l    -4(A6),D0
0000457A  0C80 0000 7588          cmp.l     #0,D0
0000457E  0000      
00004580  6C04      7589          bge.s     vsprintf_98
00004582  42AE FFFC 7590          clr.l     -4(A6)
                    7591   vsprintf_98:
00004586  4A2E FFCD 7592          tst.b     -51(A6)
0000458A  6600 0030 7593          bne       vsprintf_104
0000458E  4884      7594          ext.w     D4
00004590  48C4      7595          ext.l     D4
00004592  2004      7596          move.l    D4,D0
00004594  D0AE FFFC 7597          add.l     -4(A6),D0
00004598  D087      7598          add.l     D7,D0
0000459A  1D40 FFD1 7599          move.b    D0,-47(A6)
                    7600   vsprintf_102:
0000459E  102E FFD1 7601          move.b    -47(A6),D0
000045A2  4880      7602          ext.w     D0
000045A4  48C0      7603          ext.l     D0
000045A6  220D      7604          move.l    A5,D1
000045A8  534D      7605          subq.w    #1,A5
000045AA  B081      7606          cmp.l     D1,D0
000045AC  6C0E      7607          bge.s     vsprintf_104
000045AE  4878 0020 7608          pea       32
000045B2  2F0A      7609          move.l    A2,-(A7)
000045B4  4E93      7610          jsr       (A3)
000045B6  504F      7611          addq.w    #8,A7
000045B8  5286      7612          addq.l    #1,D6
000045BA  60E2      7613          bra       vsprintf_102
                    7614   vsprintf_104:
000045BC  41EE FFD4 7615          lea       -44(A6),A0
000045C0  2408      7616          move.l    A0,D2
                    7617   vsprintf_105:
000045C2  2042      7618          move.l    D2,A0
000045C4  4A10      7619          tst.b     (A0)
000045C6  6716      7620          beq.s     vsprintf_107
000045C8  2042      7621          move.l    D2,A0
000045CA  5282      7622          addq.l    #1,D2
000045CC  1210      7623          move.b    (A0),D1
000045CE  4881      7624          ext.w     D1
000045D0  48C1      7625          ext.l     D1
000045D2  2F01      7626          move.l    D1,-(A7)
000045D4  2F0A      7627          move.l    A2,-(A7)
000045D6  4E93      7628          jsr       (A3)
000045D8  504F      7629          addq.w    #8,A7
000045DA  5286      7630          addq.l    #1,D6
000045DC  60E4      7631          bra       vsprintf_105
                    7632   vsprintf_107:
000045DE  202E FFFC 7633          move.l    -4(A6),D0
000045E2  1D40 FFD1 7634          move.b    D0,-47(A6)
                    7635   vsprintf_108:
000045E6  102E FFD1 7636          move.b    -47(A6),D0
000045EA  532E FFD1 7637          subq.b    #1,-47(A6)
000045EE  4A00      7638          tst.b     D0
000045F0  670E      7639          beq.s     vsprintf_110
000045F2  4878 0030 7640          pea       48
000045F6  2F0A      7641          move.l    A2,-(A7)
000045F8  4E93      7642          jsr       (A3)
000045FA  504F      7643          addq.w    #8,A7
000045FC  5286      7644          addq.l    #1,D6
000045FE  60E6      7645          bra       vsprintf_108
                    7646   vsprintf_110:
00004600  2043      7647          move.l    D3,A0
00004602  4A10      7648          tst.b     (A0)
00004604  6700 0048 7649          beq       vsprintf_113
00004608  206E 000C 7650          move.l    12(A6),A0
0000460C  1010      7651          move.b    (A0),D0
0000460E  4880      7652          ext.w     D0
00004610  48C0      7653          ext.l     D0
00004612  0C80 0000 7654          cmp.l     #115,D0
00004616  0073      
00004618  670C      7655          beq.s     vsprintf_116
0000461A  6E18      7656          bgt.s     vsprintf_119
0000461C  0C80 0000 7657          cmp.l     #99,D0
00004620  0063      
00004622  6702      7658          beq.s     vsprintf_116
00004624  600E      7659          bra.s     vsprintf_119
                    7660   vsprintf_116:
00004626  2005      7661          move.l    D5,D0
00004628  5385      7662          subq.l    #1,D5
0000462A  0C80 0000 7663          cmp.l     #0,D0
0000462E  0000      
00004630  6E02      7664          bgt.s     vsprintf_119
00004632  6016      7665          bra.s     vsprintf_115
                    7666   vsprintf_119:
00004634  2043      7667          move.l    D3,A0
00004636  5283      7668          addq.l    #1,D3
00004638  1210      7669          move.b    (A0),D1
0000463A  4881      7670          ext.w     D1
0000463C  48C1      7671          ext.l     D1
0000463E  2F01      7672          move.l    D1,-(A7)
00004640  2F0A      7673          move.l    A2,-(A7)
00004642  4E93      7674          jsr       (A3)
00004644  504F      7675          addq.w    #8,A7
00004646  5286      7676          addq.l    #1,D6
00004648  6002      7677          bra.s     vsprintf_112
                    7678   vsprintf_115:
0000464A  6002      7679          bra.s     vsprintf_113
                    7680   vsprintf_112:
0000464C  60B2      7681          bra       vsprintf_110
                    7682   vsprintf_113:
0000464E  4A2E FFCD 7683          tst.b     -51(A6)
00004652  6700 0030 7684          beq       vsprintf_125
00004656  4884      7685          ext.w     D4
00004658  48C4      7686          ext.l     D4
0000465A  2004      7687          move.l    D4,D0
0000465C  D0AE FFFC 7688          add.l     -4(A6),D0
00004660  D087      7689          add.l     D7,D0
00004662  1D40 FFD1 7690          move.b    D0,-47(A6)
                    7691   vsprintf_123:
00004666  102E FFD1 7692          move.b    -47(A6),D0
0000466A  4880      7693          ext.w     D0
0000466C  48C0      7694          ext.l     D0
0000466E  220D      7695          move.l    A5,D1
00004670  534D      7696          subq.w    #1,A5
00004672  B081      7697          cmp.l     D1,D0
00004674  6C0E      7698          bge.s     vsprintf_125
00004676  4878 0020 7699          pea       32
0000467A  2F0A      7700          move.l    A2,-(A7)
0000467C  4E93      7701          jsr       (A3)
0000467E  504F      7702          addq.w    #8,A7
00004680  5386      7703          subq.l    #1,D6
00004682  60E2      7704          bra       vsprintf_123
                    7705   vsprintf_125:
00004684  6014      7706          bra.s     vsprintf_81
                    7707   vsprintf_80:
00004686  206E 000C 7708          move.l    12(A6),A0
0000468A  1210      7709          move.b    (A0),D1
0000468C  4881      7710          ext.w     D1
0000468E  48C1      7711          ext.l     D1
00004690  2F01      7712          move.l    D1,-(A7)
00004692  2F0A      7713          move.l    A2,-(A7)
00004694  4E93      7714          jsr       (A3)
00004696  504F      7715          addq.w    #8,A7
00004698  5286      7716          addq.l    #1,D6
                    7717   vsprintf_81:
0000469A  52AE 000C 7718          addq.l    #1,12(A6)
                    7719   vsprintf_2:
0000469E  6000 F9D6 7720          bra       vsprintf_1
                    7721   vsprintf_3:
000046A2  4A92      7722          tst.l     (A2)
000046A4  6710      7723          beq.s     vsprintf_126
000046A6  4201      7724          clr.b     D1
000046A8  C2BC 0000 7725          and.l     #255,D1
000046AC  00FF      
000046AE  2F01      7726          move.l    D1,-(A7)
000046B0  2F0A      7727          move.l    A2,-(A7)
000046B2  4E93      7728          jsr       (A3)
000046B4  504F      7729          addq.w    #8,A7
                    7730   vsprintf_126:
000046B6  2006      7731          move.l    D6,D0
000046B8  4CDF 3CFC 7732          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000046BC  4E5E      7733          unlk      A6
000046BE  4E75      7734          rts
                    7735   ULMUL:
000046C0  4E56 0000 7736          link    A6,#0
000046C4  48E7 C000 7737          movem.l D0/D1,-(A7)
000046C8  222E 0008 7738          move.l  8(A6),D1
000046CC  202E 000C 7739          move.l  12(A6),D0
000046D0  602C      7740          bra.s   lmul_3
                    7741   LMUL:
000046D2  4E56 0000 7742          link    A6,#0
000046D6  48E7 C000 7743          movem.l D0/D1,-(A7)
000046DA  222E 0008 7744          move.l  8(A6),D1
000046DE  202E 000C 7745          move.l  12(A6),D0
000046E2  4A80      7746          tst.l   D0
000046E4  6A0A      7747          bpl.s   lmul_1
000046E6  4480      7748          neg.l   D0
000046E8  4A81      7749          tst.l   D1
000046EA  6A0A      7750          bpl.s   lmul_2
000046EC  4481      7751          neg.l   D1
000046EE  600E      7752          bra.s   lmul_3
                    7753   lmul_1:
000046F0  4A81      7754          tst.l   D1
000046F2  6A0A      7755          bpl.s   lmul_3
000046F4  4481      7756          neg.l   D1
                    7757   lmul_2:
000046F6  6114      7758          bsr.s   domul
000046F8  4481      7759          neg.l   D1
000046FA  4080      7760          negx.l  D0
000046FC  6002      7761          bra.s   lmul_4
                    7762   lmul_3:
000046FE  610C      7763          bsr.s   domul
                    7764   lmul_4:
00004700  2D41 0008 7765          move.l  D1,8(A6)
00004704  4CDF 0003 7766          movem.l (A7)+,D0/D1
00004708  4E5E      7767          unlk    A6
0000470A  4E75      7768          rts
                    7769   domul:
0000470C  0C81 0000 7770          cmpi.l  #$FFFF,D1
00004710  FFFF      
00004712  620C      7771          bhi.s   domul_1
00004714  0C80 0000 7772          cmpi.l  #$FFFF,D0
00004718  FFFF      
0000471A  620E      7773          bhi.s   domul_2
0000471C  C2C0      7774          mulu    D0,D1
0000471E  4E75      7775          rts
                    7776   domul_1:
00004720  0C80 0000 7777          cmpi.l  #$FFFF,D0
00004724  FFFF      
00004726  6218      7778          bhi.s   domul_4
00004728  6002      7779          bra.s   domul_3
                    7780   domul_2
0000472A  C141      7781          exg     D0,D1
                    7782   domul_3:
0000472C  2F02      7783          move.l  D2,-(A7)
0000472E  2401      7784          move.l  D1,D2
00004730  4842      7785          swap    D2
00004732  C2C0      7786          mulu    D0,D1
00004734  C4C0      7787          mulu    D0,D2
00004736  4842      7788          swap    D2
00004738  4242      7789          clr.w   D2
0000473A  D282      7790          add.l   D2,D1
0000473C  241F      7791          move.l  (A7)+,D2
0000473E  4E75      7792          rts
                    7793   domul_4:
00004740  48E7 3000 7794          movem.l D2/D3,-(A7)
00004744  2401      7795          move.l  D1,D2
00004746  2601      7796          move.l  D1,D3
00004748  C2C0      7797          mulu    D0,D1
0000474A  4842      7798          swap    D2
0000474C  C4C0      7799          mulu    D0,D2
0000474E  4840      7800          swap    D0
00004750  C6C0      7801          mulu    D0,D3
00004752  D483      7802          add.l   D3,D2
00004754  4842      7803          swap    D2
00004756  4242      7804          clr.w   D2
00004758  D282      7805          add.l   D2,D1
0000475A  4CDF 000C 7806          movem.l (A7)+,D2/D3
0000475E  4E75      7807          rts
                    7808   _gets:
00004760  4E56 0000 7809          link      A6,#0
00004764  48E7 3820 7810          movem.l   D2/D3/D4/A2,-(A7)
00004768  45F8 35BE 7811          lea       _putch,A2
0000476C  282E 0008 7812          move.l    8(A6),D4
00004770  2404      7813          move.l    D4,D2
                    7814   gets_1:
00004772  6100 EE7A 7815          bsr       _getch
00004776  2600      7816          move.l    D0,D3
00004778  0C80 0000 7817          cmp.l     #10,D0
0000477C  000A      
0000477E  6700 003C 7818          beq       gets_3
00004782  0C83 0000 7819          cmp.l     #8,D3
00004786  0008      
00004788  6712      7820          beq.s     gets_4
0000478A  2042      7821          move.l    D2,A0
0000478C  5282      7822          addq.l    #1,D2
0000478E  1083      7823          move.b    D3,(A0)
00004790  4883      7824          ext.w     D3
00004792  48C3      7825          ext.l     D3
00004794  2F03      7826          move.l    D3,-(A7)
00004796  4E92      7827          jsr       (A2)
00004798  584F      7828          addq.w    #4,A7
0000479A  601E      7829          bra.s     gets_6
                    7830   gets_4:
0000479C  B484      7831          cmp.l     D4,D2
0000479E  631A      7832          bls.s     gets_6
000047A0  4878 0008 7833          pea       8
000047A4  4E92      7834          jsr       (A2)
000047A6  584F      7835          addq.w    #4,A7
000047A8  4878 0020 7836          pea       32
000047AC  4E92      7837          jsr       (A2)
000047AE  584F      7838          addq.w    #4,A7
000047B0  4878 0008 7839          pea       8
000047B4  4E92      7840          jsr       (A2)
000047B6  584F      7841          addq.w    #4,A7
000047B8  5382      7842          subq.l    #1,D2
                    7843   gets_6:
000047BA  60B6      7844          bra       gets_1
                    7845   gets_3:
000047BC  4878 000A 7846          pea       10
000047C0  4E92      7847          jsr       (A2)
000047C2  584F      7848          addq.w    #4,A7
000047C4  2042      7849          move.l    D2,A0
000047C6  4210      7850          clr.b     (A0)
000047C8  2004      7851          move.l    D4,D0
000047CA  4CDF 041C 7852          movem.l   (A7)+,D2/D3/D4/A2
000047CE  4E5E      7853          unlk      A6
000047D0  4E75      7854          rts
                    7855   _ungetch:
000047D2  4E56 0000 7856          link      A6,#0
000047D6  23EE 0008 7857          move.l    8(A6),__ungetbuf
000047DA  0B00 00C0 
000047DE  202E 0008 7858          move.l    8(A6),D0
000047E2  4E5E      7859          unlk      A6
000047E4  4E75      7860          rts
                    7861   @itoa_convert:
000047E6  4E56 0000 7862          link      A6,#0
000047EA  48E7 3C00 7863          movem.l   D2/D3/D4/D5,-(A7)
000047EE  242E 0008 7864          move.l    8(A6),D2
000047F2  262E 0010 7865          move.l    16(A6),D3
000047F6  2A2E 000C 7866          move.l    12(A6),D5
000047FA  2F05      7867          move.l    D5,-(A7)
000047FC  2F03      7868          move.l    D3,-(A7)
000047FE  6100 ECE0 7869          bsr       ULDIV
00004802  202F 0004 7870          move.l    4(A7),D0
00004806  504F      7871          addq.w    #8,A7
00004808  2800      7872          move.l    D0,D4
0000480A  BA83      7873          cmp.l     D3,D5
0000480C  651A      7874          blo.s     @itoa_convert_1
0000480E  2F03      7875          move.l    D3,-(A7)
00004810  2F05      7876          move.l    D5,-(A7)
00004812  2F03      7877          move.l    D3,-(A7)
00004814  6100 ECCA 7878          bsr       ULDIV
00004818  2217      7879          move.l    (A7),D1
0000481A  504F      7880          addq.w    #8,A7
0000481C  2F01      7881          move.l    D1,-(A7)
0000481E  2F02      7882          move.l    D2,-(A7)
00004820  61C4      7883          bsr       @itoa_convert
00004822  DEFC 000C 7884          add.w     #12,A7
00004826  2400      7885          move.l    D0,D2
                    7886   @itoa_convert_1:
00004828  0C84 0000 7887          cmp.l     #9,D4
0000482C  0009      
0000482E  6E0A      7888          bgt.s     @itoa_convert_3
00004830  2004      7889          move.l    D4,D0
00004832  0680 0000 7890          add.l     #48,D0
00004836  0030      
00004838  600E      7891          bra.s     @itoa_convert_4
                    7892   @itoa_convert_3:
0000483A  2004      7893          move.l    D4,D0
0000483C  0680 0000 7894          add.l     #97,D0
00004840  0061      
00004842  0480 0000 7895          sub.l     #10,D0
00004846  000A      
                    7896   @itoa_convert_4:
00004848  2042      7897          move.l    D2,A0
0000484A  1080      7898          move.b    D0,(A0)
0000484C  2002      7899          move.l    D2,D0
0000484E  5280      7900          addq.l    #1,D0
00004850  4CDF 003C 7901          movem.l   (A7)+,D2/D3/D4/D5
00004854  4E5E      7902          unlk      A6
00004856  4E75      7903          rts
                    7904   _ltoa:
00004858  4E56 0000 7905          link      A6,#0
0000485C  48E7 3C00 7906          movem.l   D2/D3/D4/D5,-(A7)
00004860  242E 0008 7907          move.l    8(A6),D2
00004864  262E 000C 7908          move.l    12(A6),D3
00004868  2A2E 0010 7909          move.l    16(A6),D5
0000486C  2803      7910          move.l    D3,D4
0000486E  0C85 0000 7911          cmp.l     #2,D5
00004872  0002      
00004874  6D08      7912          blt.s     ltoa_3
00004876  0C85 0000 7913          cmp.l     #36,D5
0000487A  0024      
0000487C  6F06      7914          ble.s     ltoa_1
                    7915   ltoa_3:
0000487E  2003      7916          move.l    D3,D0
00004880  6000 0052 7917          bra       ltoa_4
                    7918   ltoa_1:
00004884  0C85 0000 7919          cmp.l     #10,D5
00004888  000A      
0000488A  6600 0032 7920          bne       ltoa_5
0000488E  0C82 0000 7921          cmp.l     #0,D2
00004892  0000      
00004894  6C28      7922          bge.s     ltoa_5
00004896  2002      7923          move.l    D2,D0
00004898  4480      7924          neg.l     D0
0000489A  2400      7925          move.l    D0,D2
0000489C  0C82 0000 7926          cmp.l     #0,D2
000048A0  0000      
000048A2  6C12      7927          bge.s     ltoa_7
000048A4  4879 0000 7928          pea       @itoa_1
000048A8  5EC8      
000048AA  2F03      7929          move.l    D3,-(A7)
000048AC  6100 EC22 7930          bsr       _strcpy
000048B0  504F      7931          addq.w    #8,A7
000048B2  2003      7932          move.l    D3,D0
000048B4  601E      7933          bra.s     ltoa_4
                    7934   ltoa_7:
000048B6  2044      7935          move.l    D4,A0
000048B8  5284      7936          addq.l    #1,D4
000048BA  10BC 002D 7937          move.b    #45,(A0)
                    7938   ltoa_5:
000048BE  2F05      7939          move.l    D5,-(A7)
000048C0  2F02      7940          move.l    D2,-(A7)
000048C2  2F04      7941          move.l    D4,-(A7)
000048C4  6100 FF20 7942          bsr       @itoa_convert
000048C8  DEFC 000C 7943          add.w     #12,A7
000048CC  2800      7944          move.l    D0,D4
000048CE  2044      7945          move.l    D4,A0
000048D0  4210      7946          clr.b     (A0)
000048D2  2003      7947          move.l    D3,D0
                    7948   ltoa_4:
000048D4  4CDF 003C 7949          movem.l   (A7)+,D2/D3/D4/D5
000048D8  4E5E      7950          unlk      A6
000048DA  4E75      7951          rts
                    7952   _ultoa:
000048DC  4E56 0000 7953          link      A6,#0
000048E0  48E7 3800 7954          movem.l   D2/D3/D4,-(A7)
000048E4  262E 0010 7955          move.l    16(A6),D3
000048E8  282E 000C 7956          move.l    12(A6),D4
000048EC  2404      7957          move.l    D4,D2
000048EE  0C83 0000 7958          cmp.l     #2,D3
000048F2  0002      
000048F4  6D08      7959          blt.s     ultoa_3
000048F6  0C83 0000 7960          cmp.l     #36,D3
000048FA  0024      
000048FC  6F04      7961          ble.s     ultoa_1
                    7962   ultoa_3:
000048FE  2004      7963          move.l    D4,D0
00004900  6018      7964          bra.s     ultoa_4
                    7965   ultoa_1:
00004902  2F03      7966          move.l    D3,-(A7)
00004904  2F2E 0008 7967          move.l    8(A6),-(A7)
00004908  2F02      7968          move.l    D2,-(A7)
0000490A  6100 FEDA 7969          bsr       @itoa_convert
0000490E  DEFC 000C 7970          add.w     #12,A7
00004912  2400      7971          move.l    D0,D2
00004914  2042      7972          move.l    D2,A0
00004916  4210      7973          clr.b     (A0)
00004918  2004      7974          move.l    D4,D0
                    7975   ultoa_4:
0000491A  4CDF 001C 7976          movem.l   (A7)+,D2/D3/D4
0000491E  4E5E      7977          unlk      A6
00004920  4E75      7978          rts
                    7979   _itoa:
00004922  4E56 0000 7980          link      A6,#0
00004926  2F2E 0010 7981          move.l    16(A6),-(A7)
0000492A  2F2E 000C 7982          move.l    12(A6),-(A7)
0000492E  2F2E 0008 7983          move.l    8(A6),-(A7)
00004932  6100 FF24 7984          bsr       _ltoa
00004936  DEFC 000C 7985          add.w     #12,A7
0000493A  4E5E      7986          unlk      A6
0000493C  4E75      7987          rts
                    7988   _strlen:
0000493E  206F 0004 7989          move.l    (4,A7),A0
00004942  2248      7990          move.l    A0,A1
                    7991   strlen_1:
00004944  4A19      7992          tst.b     (A1)+
00004946  66FC      7993          bne       strlen_1
00004948  2009      7994          move.l    A1,D0
0000494A  9088      7995          sub.l     A0,D0
0000494C  5380      7996          subq.l    #1,D0
0000494E  4E75      7997          rts
                    7998          section   const
                    7999   
                    8000   @m68kde~1_1:
00004950  0D0A 00   8001          dc.b      13,10,0
                    8002   @m68kde~1_2:
00004954  0D53 7769 8003          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004958  7463 6865 
0000495C  7320 5357 
00004960  5B        
00004961  372D 305D 8004          dc.b      55,45,48,93,32,61,32,0
00004965  203D 2000 
                    8005   @m68kde~1_3:
0000496A  3000      8006          dc.b      48,0
                    8007   @m68kde~1_4:
0000496C  3100      8008          dc.b      49,0
                    8009   @m68kde~1_5:
0000496E  0D0A 4475 8010          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004972  6D70 204D 
00004976  656D 6F72 
0000497A  79        
0000497B  2042 6C6F 8011          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
0000497F  636B 3A20 
00004983  3C45 5343 
00004987  3E20      
00004989  746F 2041 8012          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
0000498D  626F 7274 
00004991  2C20 3C53 
00004995  50        
00004996  4143 453E 8013          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
0000499A  2074 6F20 
0000499E  436F 6E74 
000049A2  69        
000049A3  6E75 6500 8014          dc.b      110,117,101,0
                    8015   @m68kde~1_6:
000049A8  0D0A 456E 8016          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000049AC  7465 7220 
000049B0  5374 6172 
000049B4  74        
000049B5  2041 6464 8017          dc.b      32,65,100,100,114,101,115,115,58,32,0
000049B9  7265 7373 
000049BD  3A20 00   
                    8018   @m68kde~1_7:
000049C0  0D0A 2530 8019          dc.b      13,10,37,48,56,120,32,0
000049C4  3878 2000 
                    8020   @m68kde~1_8:
000049C8  2530 3258 8021          dc.b      37,48,50,88,0
000049CC  00        
                    8022   @m68kde~1_9:
000049CE  2020 00   8023          dc.b      32,32,0
                    8024   @m68kde~1_10:
000049D2  0D0A 4669 8025          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
000049D6  6C6C 204D 
000049DA  656D 6F72 
000049DE  79        
000049DF  2042 6C6F 8026          dc.b      32,66,108,111,99,107,0
000049E3  636B 00   
                    8027   @m68kde~1_11:
000049E6  0D0A 456E 8028          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000049EA  7465 7220 
000049EE  456E 6420 
000049F2  41        
000049F3  6464 7265 8029          dc.b      100,100,114,101,115,115,58,32,0
000049F7  7373 3A20 
000049FB  00        
                    8030   @m68kde~1_12:
000049FC  0D0A 456E 8031          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004A00  7465 7220 
00004A04  4669 6C6C 
00004A08  20        
00004A09  4461 7461 8032          dc.b      68,97,116,97,58,32,0
00004A0D  3A20 00   
                    8033   @m68kde~1_13:
00004A10  0D0A 4669 8034          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00004A14  6C6C 696E 
00004A18  6720 4164 
00004A1C  64        
00004A1D  7265 7373 8035          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00004A21  6573 205B 
00004A25  2425 3038 
00004A29  58        
00004A2A  202D 2024 8036          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00004A2E  2530 3858 
00004A32  5D20 7769 
00004A36  7468      
00004A38  2024 2530 8037          dc.b      32,36,37,48,50,88,0
00004A3C  3258 00   
                    8038   @m68kde~1_14:
00004A40  0D0A 5573 8039          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00004A44  6520 4879 
00004A48  7065 7254 
00004A4C  65        
00004A4D  726D 696E 8040          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00004A51  616C 2074 
00004A55  6F20 5365 
00004A59  6E64 2054 8041          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004A5D  6578 7420 
00004A61  4669 6C65 
00004A65  2028 2E68 8042          dc.b      32,40,46,104,101,120,41,13,10,0
00004A69  6578 290D 
00004A6D  0A00      
                    8043   @m68kde~1_15:
00004A70  0D0A 4C6F 8044          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004A74  6164 2046 
00004A78  6169 6C65 
00004A7C  64        
00004A7D  2061 7420 8045          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00004A81  4164 6472 
00004A85  6573 7320 
00004A89  3D        
00004A8A  205B 2425 8046          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004A8E  3038 585D 
00004A92  0D0A 00   
                    8047   @m68kde~1_16:
00004A96  0D0A 5375 8048          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004A9A  6363 6573 
00004A9E  733A 2044 
00004AA2  6F        
00004AA3  776E 6C6F 8049          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004AA7  6164 6564 
00004AAB  2025 6420 
00004AAF  6279 7465 8050          dc.b      98,121,116,101,115,13,10,0
00004AB3  730D 0A00 
                    8051   @m68kde~1_17:
00004AB8  0D0A 4578 8052          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004ABC  616D 696E 
00004AC0  6520 616E 
00004AC4  64        
00004AC5  2043 6861 8053          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004AC9  6E67 6520 
00004ACD  4D65 6D6F 
00004AD1  72        
00004AD2  7900      8054          dc.b      121,0
                    8055   @m68kde~1_18:
00004AD4  0D0A 3C45 8056          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004AD8  5343 3E20 
00004ADC  746F 2053 
00004AE0  746F      
00004AE2  702C 203C 8057          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004AE6  5350 4143 
00004AEA  453E 2074 
00004AEE  6F20      
00004AF0  4164 7661 8058          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00004AF4  6E63 652C 
00004AF8  2027 2D27 
00004AFC  2074      
00004AFE  6F20 476F 8059          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004B02  2042 6163 
00004B06  6B2C 203C 
00004B0A  4441      
00004B0C  5441 3E20 8060          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004B10  746F 2063 
00004B14  6861 6E67 
00004B18  65        
00004B19  00        8061          dc.b      0
                    8062   @m68kde~1_19:
00004B1A  0D0A 456E 8063          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004B1E  7465 7220 
00004B22  4164 6472 
00004B26  65        
00004B27  7373 3A20 8064          dc.b      115,115,58,32,0
00004B2B  00        
                    8065   @m68kde~1_20:
00004B2C  0D0A 5B25 8066          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00004B30  3038 785D 
00004B34  203A 2025 
00004B38  3032 78   
00004B3B  2020 00   8067          dc.b      32,32,0
                    8068   @m68kde~1_21:
00004B3E  0D0A 5761 8069          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00004B42  726E 696E 
00004B46  6720 4368 
00004B4A  61        
00004B4B  6E67 6520 8070          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004B4F  4661 696C 
00004B53  6564 3A20 
00004B57  57        
00004B58  726F 7465 8071          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004B5C  205B 2530 
00004B60  3278 5D2C 
00004B64  20        
00004B65  5265 6164 8072          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004B69  205B 2530 
00004B6D  3278 5D00 
                    8073   @m68kde~1_22:
00004B72  0A45 7261 8074          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
00004B76  7369 6E67 
00004B7A  2E2E 2E0A 
00004B7E  00        
                    8075   @m68kde~1_23:
00004B80  0D0A 2050 8076          dc.b      13,10,32,80,114,111,103,114,97,109,109,105,110
00004B84  726F 6772 
00004B88  616D 6D69 
00004B8C  6E        
00004B8D  6720 436F 8077          dc.b      103,32,67,111,109,112,108,101,116,101,33,0
00004B91  6D70 6C65 
00004B95  7465 2100 
                    8078   @m68kde~1_24:
00004B9A  0D0A 204C 8079          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
00004B9E  6F61 6469 
00004BA2  6E67 2050 
00004BA6  72        
00004BA7  6F67 7261 8080          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
00004BAB  6D20 4672 
00004BAF  6F6D 2053 
00004BB3  50        
00004BB4  4920 466C 8081          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
00004BB8  6173 682E 
00004BBC  2E2E 2E00 
                    8082   @m68kde~1_25:
00004BC0  0D0A 2052 8083          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
00004BC4  6561 6420 
00004BC8  4461 7461 
00004BCC  3A20      
00004BCE  2530 3878 8084          dc.b      37,48,56,120,32,10,0
00004BD2  200A 00   
                    8085   @m68kde~1_26:
00004BD6  4949 435F 8086          dc.b      73,73,67,95,67,82,83,82,32,84,114,97,110,115
00004BDA  4352 5352 
00004BDE  2054 7261 
00004BE2  6E73      
00004BE4  6D69 7420 8087          dc.b      109,105,116,32,40,66,105,110,97,114,121,41,58
00004BE8  2842 696E 
00004BEC  6172 7929 
00004BF0  3A        
00004BF1  2000      8088          dc.b      32,0
                    8089   @m68kde~1_27:
00004BF4  2564 00   8090          dc.b      37,100,0
                    8091   @m68kde~1_28:
00004BF8  0A00      8092          dc.b      10,0
                    8093   @m68kde~1_29:
00004BFA  5374 6172 8094          dc.b      83,116,97,114,116,32,65,100,100,114,58,32,37
00004BFE  7420 4164 
00004C02  6472 3A20 
00004C06  25        
00004C07  640A 2043 8095          dc.b      100,10,32,67,117,114,114,32,65,100,100,114,58
00004C0B  7572 7220 
00004C0F  4164 6472 
00004C13  3A        
00004C14  2025 642C 8096          dc.b      32,37,100,44,32,82,101,97,100,32,76,101,110
00004C18  2052 6561 
00004C1C  6420 4C65 
00004C20  6E        
00004C21  3A20 2564 8097          dc.b      58,32,37,100,10,0
00004C25  0A00      
                    8098   @m68kde~1_30:
00004C28  0D0A 2042 8099          dc.b      13,10,32,66,108,111,99,107,32,48,32,65,100,100
00004C2C  6C6F 636B 
00004C30  2030 2041 
00004C34  6464      
00004C36  7265 7373 8100          dc.b      114,101,115,115,58,32,37,100,58,32,37,100,10
00004C3A  3A20 2564 
00004C3E  3A20 2564 
00004C42  0A        
00004C43  00        8101          dc.b      0
                    8102   @m68kde~1_31:
00004C44  0D0A 2042 8103          dc.b      13,10,32,66,108,111,99,107,32,49,32,65,100,100
00004C48  6C6F 636B 
00004C4C  2031 2041 
00004C50  6464      
00004C52  7265 7373 8104          dc.b      114,101,115,115,58,32,37,100,58,32,37,100,10
00004C56  3A20 2564 
00004C5A  3A20 2564 
00004C5E  0A        
00004C5F  00        8105          dc.b      0
                    8106   @m68kde~1_32:
00004C60  0D0A 2049 8107          dc.b      13,10,32,73,50,67,32,84,101,115,116,10,0
00004C64  3243 2054 
00004C68  6573 740A 
00004C6C  00        
                    8108   @m68kde~1_33:
00004C6E  5061 6765 8109          dc.b      80,97,103,101,32,87,114,105,116,101,10,0
00004C72  2057 7269 
00004C76  7465 0A00 
                    8110   @m68kde~1_34:
00004C7A  5365 7175 8111          dc.b      83,101,113,117,101,110,116,105,97,108,32,82
00004C7E  656E 7469 
00004C82  616C 2052 
00004C86  6561 640A 8112          dc.b      101,97,100,10,0
00004C8A  00        
                    8113   @m68kde~1_35:
00004C8C  2425 3038 8114          dc.b      36,37,48,56,88,32,32,0
00004C90  5820 2000 
                    8115   @m68kde~1_36:
00004C94  2000      8116          dc.b      32,0
                    8117   @m68kde~1_37:
00004C96  2E00      8118          dc.b      46,0
                    8119   @m68kde~1_38:
00004C98  2563 00   8120          dc.b      37,99,0
                    8121   @m68kde~1_39:
00004C9C  00        8122          dc.b      0
                    8123   @m68kde~1_40:
00004C9E  0D0A 0D0A 8124          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004CA2  2044 3020 
00004CA6  3D20 2425 
00004CAA  3038 58   
00004CAD  2020 4130 8125          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004CB1  203D 2024 
00004CB5  2530 3858 
00004CB9  00        
                    8126   @m68kde~1_41:
00004CBA  0D0A 2044 8127          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004CBE  3120 3D20 
00004CC2  2425 3038 
00004CC6  5820 20   
00004CC9  4131 203D 8128          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004CCD  2024 2530 
00004CD1  3858 00   
                    8129   @m68kde~1_42:
00004CD4  0D0A 2044 8130          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004CD8  3220 3D20 
00004CDC  2425 3038 
00004CE0  5820 20   
00004CE3  4132 203D 8131          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004CE7  2024 2530 
00004CEB  3858 00   
                    8132   @m68kde~1_43:
00004CEE  0D0A 2044 8133          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004CF2  3320 3D20 
00004CF6  2425 3038 
00004CFA  5820 20   
00004CFD  4133 203D 8134          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004D01  2024 2530 
00004D05  3858 00   
                    8135   @m68kde~1_44:
00004D08  0D0A 2044 8136          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004D0C  3420 3D20 
00004D10  2425 3038 
00004D14  5820 20   
00004D17  4134 203D 8137          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004D1B  2024 2530 
00004D1F  3858 00   
                    8138   @m68kde~1_45:
00004D22  0D0A 2044 8139          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004D26  3520 3D20 
00004D2A  2425 3038 
00004D2E  5820 20   
00004D31  4135 203D 8140          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004D35  2024 2530 
00004D39  3858 00   
                    8141   @m68kde~1_46:
00004D3C  0D0A 2044 8142          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004D40  3620 3D20 
00004D44  2425 3038 
00004D48  5820 20   
00004D4B  4136 203D 8143          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004D4F  2024 2530 
00004D53  3858 00   
                    8144   @m68kde~1_47:
00004D56  0D0A 2044 8145          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004D5A  3720 3D20 
00004D5E  2425 3038 
00004D62  5820 20   
00004D65  4137 203D 8146          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004D69  2024 2530 
00004D6D  3858 00   
                    8147   @m68kde~1_48:
00004D70  0D0A 0D0A 8148          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004D74  5553 5020 
00004D78  3D20 2425 
00004D7C  3038 58   
00004D7F  2020 2841 8149          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004D83  3729 2055 
00004D87  7365 7220 
00004D8B  5350      
00004D8D  00        8150          dc.b      0
                    8151   @m68kde~1_49:
00004D8E  0D0A 5353 8152          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004D92  5020 3D20 
00004D96  2425 3038 
00004D9A  5820 20   
00004D9D  2841 3729 8153          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004DA1  2053 7570 
00004DA5  6572 7669 
00004DA9  73        
00004DAA  6F72 2053 8154          dc.b      111,114,32,83,80,0
00004DAE  5000      
                    8155   @m68kde~1_50:
00004DB0  0D0A 2053 8156          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004DB4  5220 3D20 
00004DB8  2425 3034 
00004DBC  5820 20   
00004DBF  2000      8157          dc.b      32,0
                    8158   @m68kde~1_51:
00004DC2  2020 205B 8159          dc.b      32,32,32,91,0
00004DC6  00        
                    8160   @m68kde~1_52:
00004DC8  0D0A 2050 8161          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004DCC  4320 3D20 
00004DD0  2425 3038 
00004DD4  5820 20   
00004DD7  00        8162          dc.b      0
                    8163   @m68kde~1_53:
00004DD8  5B40 2042 8164          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004DDC  5245 414B 
00004DE0  504F 494E 
00004DE4  545D 00   
                    8165   @m68kde~1_54:
00004DE8  0D0A 5750 8166          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004DEC  2564 203D 
00004DF0  2025 7300 
                    8167   @m68kde~1_55:
00004DF4  0D0A 0D0A 8168          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004DF8  0D0A 0D0A 
00004DFC  0D0A 0D0A 
00004E00  5369 6E   
00004E03  676C 6520 8169          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004E07  5374 6570 
00004E0B  2020 3A5B 
00004E0F  4F        
00004E10  4E5D 00   8170          dc.b      78,93,0
                    8171   @m68kde~1_56:
00004E14  0D0A 4272 8172          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004E18  6561 6B20 
00004E1C  506F 696E 
00004E20  74        
00004E21  7320 3A5B 8173          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004E25  4469 7361 
00004E29  626C 6564 
00004E2D  5D        
00004E2E  00        8174          dc.b      0
                    8175   @m68kde~1_57:
00004E30  0D0A 5072 8176          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004E34  6573 7320 
00004E38  3C53 5041 
00004E3C  4345      
00004E3E  3E20 746F 8177          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004E42  2045 7865 
00004E46  6375 7465 
00004E4A  20        
00004E4B  4E65 7874 8178          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004E4F  2049 6E73 
00004E53  7472 7563 
00004E57  7469 6F6E 8179          dc.b      116,105,111,110,0
00004E5B  00        
                    8180   @m68kde~1_58:
00004E5C  0D0A 5072 8181          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004E60  6573 7320 
00004E64  3C45 5343 
00004E68  3E20      
00004E6A  746F 2052 8182          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004E6E  6573 756D 
00004E72  6520 5072 
00004E76  6F67 7261 8183          dc.b      111,103,114,97,109,0
00004E7A  6D00      
                    8184   @m68kde~1_59:
00004E7C  0D0A 496C 8185          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004E80  6C65 6761 
00004E84  6C20 4461 
00004E88  74        
00004E89  6120 5265 8186          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004E8D  6769 7374 
00004E91  6572 203A 
00004E95  20        
00004E96  5573 6520 8187          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004E9A  4430 2D44 
00004E9E  372E 2E2E 
00004EA2  2E2E      
00004EA4  0D0A 00   8188          dc.b      13,10,0
                    8189   @m68kde~1_60:
00004EA8  0D0A 4425 8190          dc.b      13,10,68,37,99,32,61,32,0
00004EAC  6320 3D20 
00004EB0  00        
                    8191   @m68kde~1_61:
00004EB2  0D0A 496C 8192          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004EB6  6C65 6761 
00004EBA  6C20 4164 
00004EBE  64        
00004EBF  7265 7373 8193          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004EC3  2052 6567 
00004EC7  6973 7465 
00004ECB  7220 3A20 8194          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004ECF  5573 6520 
00004ED3  4130 2D41 
00004ED7  372E      
00004ED9  2E2E 2E2E 8195          dc.b      46,46,46,46,13,10,0
00004EDD  0D0A 00   
                    8196   @m68kde~1_62:
00004EE0  0D0A 4125 8197          dc.b      13,10,65,37,99,32,61,32,0
00004EE4  6320 3D20 
00004EE8  00        
                    8198   @m68kde~1_63:
00004EEA  0D0A 5573 8199          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004EEE  6572 2053 
00004EF2  5020 3D20 
00004EF6  00        
                    8200   @m68kde~1_64:
00004EF8  0D0A 496C 8201          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004EFC  6C65 6761 
00004F00  6C20 5265 
00004F04  67        
00004F05  6973 7465 8202          dc.b      105,115,116,101,114,46,46,46,46,0
00004F09  722E 2E2E 
00004F0D  2E00      
                    8203   @m68kde~1_65:
00004F10  0D0A 5379 8204          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004F14  7374 656D 
00004F18  2053 5020 
00004F1C  3D        
00004F1D  2000      8205          dc.b      32,0
                    8206   @m68kde~1_66:
00004F20  0D0A 5043 8207          dc.b      13,10,80,67,32,61,32,0
00004F24  203D 2000 
                    8208   @m68kde~1_67:
00004F28  0D0A 5352 8209          dc.b      13,10,83,82,32,61,32,0
00004F2C  203D 2000 
                    8210   @m68kde~1_68:
00004F30  0D0A 496C 8211          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004F34  6C65 6761 
00004F38  6C20 5265 
00004F3C  67        
00004F3D  6973 7465 8212          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004F41  723A 2055 
00004F45  7365 2041 
00004F49  30        
00004F4A  2D41 372C 8213          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004F4E  2044 302D 
00004F52  4437 2C20 
00004F56  5353 50   
00004F59  2C20 5553 8214          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004F5D  502C 2050 
00004F61  4320 6F72 
00004F65  2053      
00004F67  520D 0A00 8215          dc.b      82,13,10,0
                    8216   @m68kde~1_69:
00004F6C  0D0A 0D0A 8217          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004F70  4E75 6D20 
00004F74  2020 2020 
00004F78  4164      
00004F7A  6472 6573 8218          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004F7E  7320 2020 
00004F82  2020 2049 
00004F86  6E        
00004F87  7374 7275 8219          dc.b      115,116,114,117,99,116,105,111,110,0
00004F8B  6374 696F 
00004F8F  6E00      
                    8220   @m68kde~1_70:
00004F92  0D0A 2D2D 8221          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004F96  2D20 2020 
00004F9A  2020 2D2D 
00004F9E  2D2D 2D   
00004FA1  2D2D 2D2D 8222          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004FA5  2020 2020 
00004FA9  2D2D 2D2D 
00004FAD  2D2D 2D   
00004FB0  2D2D 2D2D 8223          dc.b      45,45,45,45,0
00004FB4  00        
                    8224   @m68kde~1_71:
00004FB6  0D0A 4E6F 8225          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004FBA  2042 7265 
00004FBE  616B 506F 
00004FC2  69        
00004FC3  6E74 7320 8226          dc.b      110,116,115,32,83,101,116,0
00004FC7  5365 7400 
                    8227   @m68kde~1_72:
00004FCC  0D0A 2533 8228          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004FD0  6420 2020 
00004FD4  2020 2425 
00004FD8  3038 78   
00004FDB  00        8229          dc.b      0
                    8230   @m68kde~1_73:
00004FDC  0D0A 4E75 8231          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004FE0  6D20 2020 
00004FE4  2020 4164 
00004FE8  6472      
00004FEA  6573 7300 8232          dc.b      101,115,115,0
                    8233   @m68kde~1_74:
00004FEE  0D0A 2D2D 8234          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004FF2  2D20 2020 
00004FF6  2020 2D2D 
00004FFA  2D2D 2D   
00004FFD  2D2D 2D2D 8235          dc.b      45,45,45,45,0
00005001  00        
                    8236   @m68kde~1_75:
00005002  0D0A 4E6F 8237          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00005006  2057 6174 
0000500A  6368 506F 
0000500E  69        
0000500F  6E74 7320 8238          dc.b      110,116,115,32,83,101,116,0
00005013  5365 7400 
                    8239   @m68kde~1_76:
00005018  0D0A 456E 8240          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000501C  7465 7220 
00005020  4272 6561 
00005024  6B        
00005025  2050 6F69 8241          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00005029  6E74 204E 
0000502D  756D 6265 
00005031  72        
00005032  3A20 00   8242          dc.b      58,32,0
                    8243   @m68kde~1_77:
00005036  0D0A 496C 8244          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
0000503A  6C65 6761 
0000503E  6C20 5261 
00005042  6E        
00005043  6765 203A 8245          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00005047  2055 7365 
0000504B  2030 202D 
0000504F  2037      
00005051  00        8246          dc.b      0
                    8247   @m68kde~1_78:
00005052  0D0A 4272 8248          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005056  6561 6B20 
0000505A  506F 696E 
0000505E  74        
0000505F  2043 6C65 8249          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00005063  6172 6564 
00005067  2E2E 2E2E 
0000506B  2E        
0000506C  0D0A 00   8250          dc.b      13,10,0
                    8251   @m68kde~1_79:
00005070  0D0A 4272 8252          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005074  6561 6B20 
00005078  506F 696E 
0000507C  74        
0000507D  2077 6173 8253          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00005081  6E27 7420 
00005085  5365 742E 
00005089  2E        
0000508A  2E2E 2E00 8254          dc.b      46,46,46,0
                    8255   @m68kde~1_80:
0000508E  0D0A 456E 8256          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00005092  7465 7220 
00005096  5761 7463 
0000509A  68        
0000509B  2050 6F69 8257          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000509F  6E74 204E 
000050A3  756D 6265 
000050A7  72        
000050A8  3A20 00   8258          dc.b      58,32,0
                    8259   @m68kde~1_81:
000050AC  0D0A 5761 8260          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000050B0  7463 6820 
000050B4  506F 696E 
000050B8  74        
000050B9  2043 6C65 8261          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000050BD  6172 6564 
000050C1  2E2E 2E2E 
000050C5  2E        
000050C6  0D0A 00   8262          dc.b      13,10,0
                    8263   @m68kde~1_82:
000050CA  0D0A 5761 8264          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000050CE  7463 6820 
000050D2  506F 696E 
000050D6  74        
000050D7  2057 6173 8265          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000050DB  206E 6F74 
000050DF  2053 6574 
000050E3  2E        
000050E4  2E2E 2E2E 8266          dc.b      46,46,46,46,0
000050E8  00        
                    8267   @m68kde~1_83:
000050EA  0D0A 4E6F 8268          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000050EE  2046 5245 
000050F2  4520 4272 
000050F6  6561      
000050F8  6B20 506F 8269          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000050FC  696E 7473 
00005100  2E2E 2E2E 
00005104  2E        
00005105  00        8270          dc.b      0
                    8271   @m68kde~1_84:
00005106  0D0A 4272 8272          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000510A  6561 6B20 
0000510E  506F 696E 
00005112  74        
00005113  2041 6464 8273          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005117  7265 7373 
0000511B  3A20 00   
                    8274   @m68kde~1_85:
0000511E  0D0A 4572 8275          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00005122  726F 7220 
00005126  3A20 4272 
0000512A  65        
0000512B  616B 2050 8276          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000512F  6F69 6E74 
00005133  7320 4341 
00005137  4E        
00005138  4E4F 5420 8277          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000513C  6265 2073 
00005140  6574 2061 
00005144  74        
00005145  204F 4444 8278          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00005149  2061 6464 
0000514D  7265 7373 
00005151  65        
00005152  7300      8279          dc.b      115,0
                    8280   @m68kde~1_86:
00005154  0D0A 4572 8281          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00005158  726F 7220 
0000515C  3A20 4272 
00005160  65        
00005161  616B 2050 8282          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00005165  6F69 6E74 
00005169  7320 4341 
0000516D  4E        
0000516E  4E4F 5420 8283          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00005172  6265 2073 
00005176  6574 2066 
0000517A  6F        
0000517B  7220 524F 8284          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
0000517F  4D20 696E 
00005183  2052 616E 
00005187  67        
00005188  6520 3A20 8285          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
0000518C  5B24 302D 
00005190  2430 3030 
00005194  3037 46   
00005197  4646 5D00 8286          dc.b      70,70,93,0
                    8287   @m68kde~1_87:
0000519C  0D0A 4572 8288          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000051A0  726F 723A 
000051A4  2042 7265 
000051A8  61        
000051A9  6B20 506F 8289          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000051AD  696E 7420 
000051B1  416C 7265 
000051B5  6164 7920 8290          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000051B9  4578 6973 
000051BD  7473 2061 
000051C1  74        
000051C2  2041 6464 8291          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000051C6  7265 7373 
000051CA  203A 2025 
000051CE  30        
000051CF  3878 0D0A 8292          dc.b      56,120,13,10,0
000051D3  00        
                    8293   @m68kde~1_88:
000051D4  0D0A 4272 8294          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000051D8  6561 6B20 
000051DC  506F 696E 
000051E0  74        
000051E1  2053 6574 8295          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000051E5  2061 7420 
000051E9  4164 6472 
000051ED  65        
000051EE  7373 3A20 8296          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000051F2  5B24 2530 
000051F6  3878 5D00 
                    8297   @m68kde~1_89:
000051FA  0D0A 4E6F 8298          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000051FE  2046 5245 
00005202  4520 5761 
00005206  7463      
00005208  6820 506F 8299          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
0000520C  696E 7473 
00005210  2E2E 2E2E 
00005214  2E        
00005215  00        8300          dc.b      0
                    8301   @m68kde~1_90:
00005216  0D0A 5761 8302          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000521A  7463 6820 
0000521E  506F 696E 
00005222  74        
00005223  2041 6464 8303          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005227  7265 7373 
0000522B  3A20 00   
                    8304   @m68kde~1_91:
0000522E  0D0A 4572 8305          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00005232  726F 723A 
00005236  2057 6174 
0000523A  63        
0000523B  6820 506F 8306          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
0000523F  696E 7420 
00005243  416C 7265 
00005247  6164 7920 8307          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
0000524B  5365 7420 
0000524F  6174 2041 
00005253  64        
00005254  6472 6573 8308          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00005258  7320 3A20 
0000525C  2530 3878 
00005260  0D        
00005261  0A00      8309          dc.b      10,0
                    8310   @m68kde~1_92:
00005264  0D0A 5761 8311          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005268  7463 6820 
0000526C  506F 696E 
00005270  74        
00005271  2053 6574 8312          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005275  2061 7420 
00005279  4164 6472 
0000527D  65        
0000527E  7373 3A20 8313          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005282  5B24 2530 
00005286  3878 5D00 
                    8314   @m68kde~1_93:
0000528A  0D0A 0D0A 8315          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
0000528E  0D0A 0D0A 
00005292  4042 5245 
00005296  414B 50   
00005299  4F49 4E54 8316          dc.b      79,73,78,84,0
0000529D  00        
                    8317   @m68kde~1_94:
0000529E  0D0A 5369 8318          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000052A2  6E67 6C65 
000052A6  2053 7465 
000052AA  70        
000052AB  203A 205B 8319          dc.b      32,58,32,91,79,78,93,0
000052AF  4F4E 5D00 
                    8320   @m68kde~1_95:
000052B4  0D0A 4272 8321          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000052B8  6561 6B50 
000052BC  6F69 6E74 
000052C0  73        
000052C1  203A 205B 8322          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000052C5  456E 6162 
000052C9  6C65 645D 
000052CD  00        
                    8323   @m68kde~1_96:
000052CE  0D0A 5072 8324          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000052D2  6573 7320 
000052D6  3C45 5343 
000052DA  3E20      
000052DC  746F 2052 8325          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000052E0  6573 756D 
000052E4  6520 5573 
000052E8  6572 2050 8326          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
000052EC  726F 6772 
000052F0  616D 0D0A 
000052F4  00        
                    8327   @m68kde~1_97:
000052F6  0D0A 556E 8328          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000052FA  6B6E 6F77 
000052FE  6E20 436F 
00005302  6D        
00005303  6D61 6E64 8329          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00005307  2E2E 2E2E 
0000530B  2E0D 0A00 
                    8330   @m68kde~1_98:
00005310  0D0A 5072 8331          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00005314  6F67 7261 
00005318  6D20 456E 
0000531C  64        
0000531D  6564 2028 8332          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00005321  5452 4150 
00005325  2023 3135 
00005329  292E      
0000532B  2E2E 2E00 8333          dc.b      46,46,46,0
                    8334   @m68kde~1_99:
00005330  0D0A 4B69 8335          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00005334  6C6C 2041 
00005338  6C6C 2042 
0000533C  72        
0000533D  6561 6B20 8336          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00005341  506F 696E 
00005345  7473 2E2E 
00005349  2E        
0000534A  2879 2F6E 8337          dc.b      40,121,47,110,41,63,0
0000534E  293F 00   
                    8338   @m68kde~1_100:
00005352  0D0A 4B69 8339          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00005356  6C6C 2041 
0000535A  6C6C 2057 
0000535E  61        
0000535F  7463 6820 8340          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00005363  506F 696E 
00005367  7473 2E2E 
0000536B  2E        
0000536C  2879 2F6E 8341          dc.b      40,121,47,110,41,63,0
00005370  293F 00   
                    8342   @m68kde~1_101:
00005374  0D0A 2D2D 8343          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00005378  2D2D 2D2D 
0000537C  2D2D 2D2D 
00005380  2D2D 2D   
00005383  2D2D 2D2D 8344          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005387  2D2D 2D2D 
0000538B  2D2D 2D2D 
0000538F  2D2D 2D   
00005392  2D2D 2D2D 8345          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005396  2D2D 2D2D 
0000539A  2D2D 2D2D 
0000539E  2D2D 2D   
000053A1  2D2D 2D2D 8346          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000053A5  2D2D 2D2D 
000053A9  2D2D 2D2D 
000053AD  2D2D 2D   
000053B0  2D2D 2D2D 8347          dc.b      45,45,45,45,45,45,0
000053B4  2D2D 00   
                    8348   @m68kde~1_102:
000053B8  0D0A 2020 8349          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000053BC  4465 6275 
000053C0  6767 6572 
000053C4  20        
000053C5  436F 6D6D 8350          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
000053C9  616E 6420 
000053CD  5375 6D6D 
000053D1  6172 7900 8351          dc.b      97,114,121,0
                    8352   @m68kde~1_103:
000053D6  0D0A 2020 8353          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
000053DA  2E28 7265 
000053DE  6729 2020 
000053E2  2020      
000053E4  2020 202D 8354          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
000053E8  2043 6861 
000053EC  6E67 6520 
000053F0  5265      
000053F2  6769 7374 8355          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
000053F6  6572 733A 
000053FA  2065 2E67 
000053FE  2041 302D 8356          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00005402  4137 2C44 
00005406  302D 4437 
0000540A  2C50 43   
0000540D  2C53 5350 8357          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00005411  2C55 5350 
00005415  2C53 5200 
                    8358   @m68kde~1_104:
0000541A  0D0A 2020 8359          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
0000541E  4244 2F42 
00005422  532F 4243 
00005426  2F42 4B   
00005429  2020 2D20 8360          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
0000542D  4272 6561 
00005431  6B20 506F 
00005435  69        
00005436  6E74 3A20 8361          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
0000543A  4469 7370 
0000543E  6C61 792F 
00005442  53        
00005443  6574 2F43 8362          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00005447  6C65 6172 
0000544B  2F4B 696C 
0000544F  6C        
00005450  00        8363          dc.b      0
                    8364   @m68kde~1_105:
00005452  0D0A 2020 8365          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00005456  4320 2020 
0000545A  2020 2020 
0000545E  2020 20   
00005461  2020 2D20 8366          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00005465  436F 7079 
00005469  2050 726F 
0000546D  67        
0000546E  7261 6D20 8367          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00005472  6672 6F6D 
00005476  2046 6C61 
0000547A  73        
0000547B  6820 746F 8368          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
0000547F  204D 6169 
00005483  6E20 4D65 
00005487  6D        
00005488  6F72 7900 8369          dc.b      111,114,121,0
                    8370   @m68kde~1_106:
0000548C  0D0A 2020 8371          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00005490  4420 2020 
00005494  2020 2020 
00005498  2020 20   
0000549B  2020 2D20 8372          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
0000549F  4475 6D70 
000054A3  204D 656D 
000054A7  6F        
000054A8  7279 2043 8373          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000054AC  6F6E 7465 
000054B0  6E74 7320 
000054B4  746F 2053 8374          dc.b      116,111,32,83,99,114,101,101,110,0
000054B8  6372 6565 
000054BC  6E00      
                    8375   @m68kde~1_107:
000054BE  0D0A 2020 8376          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
000054C2  4520 2020 
000054C6  2020 2020 
000054CA  2020 20   
000054CD  2020 2D20 8377          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
000054D1  456E 7465 
000054D5  7220 5374 
000054D9  72        
000054DA  696E 6720 8378          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
000054DE  696E 746F 
000054E2  204D 656D 
000054E6  6F72 7900 8379          dc.b      111,114,121,0
                    8380   @m68kde~1_108:
000054EA  0D0A 2020 8381          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
000054EE  4620 2020 
000054F2  2020 2020 
000054F6  2020 20   
000054F9  2020 2D20 8382          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
000054FD  4669 6C6C 
00005501  204D 656D 
00005505  6F        
00005506  7279 2077 8383          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
0000550A  6974 6820 
0000550E  4461 7461 
00005512  00        
                    8384   @m68kde~1_109:
00005514  0D0A 2020 8385          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00005518  4720 2020 
0000551C  2020 2020 
00005520  2020 20   
00005523  2020 2D20 8386          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00005527  476F 2050 
0000552B  726F 6772 
0000552F  61        
00005530  6D20 5374 8387          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00005534  6172 7469 
00005538  6E67 2061 
0000553C  74        
0000553D  2041 6464 8388          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00005541  7265 7373 
00005545  3A20 2425 
00005549  30        
0000554A  3858 00   8389          dc.b      56,88,0
                    8390   @m68kde~1_110:
0000554E  0D0A 2020 8391          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00005552  4C20 2020 
00005556  2020 2020 
0000555A  2020 20   
0000555D  2020 2D20 8392          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00005561  4C6F 6164 
00005565  2050 726F 
00005569  67        
0000556A  7261 6D20 8393          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
0000556E  282E 4845 
00005572  5820 6669 
00005576  6C        
00005577  6529 2066 8394          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
0000557B  726F 6D20 
0000557F  4C61 7074 
00005583  6F        
00005584  7000      8395          dc.b      112,0
                    8396   @m68kde~1_111:
00005586  0D0A 2020 8397          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
0000558A  4D20 2020 
0000558E  2020 2020 
00005592  2020 20   
00005595  2020 2D20 8398          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00005599  4D65 6D6F 
0000559D  7279 2045 
000055A1  78        
000055A2  616D 696E 8399          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
000055A6  6520 616E 
000055AA  6420 4368 
000055AE  61        
000055AF  6E67 6500 8400          dc.b      110,103,101,0
                    8401   @m68kde~1_112:
000055B4  0D0A 2020 8402          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
000055B8  5020 2020 
000055BC  2020 2020 
000055C0  2020 20   
000055C3  2020 2D20 8403          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
000055C7  5072 6F67 
000055CB  7261 6D20 
000055CF  46        
000055D0  6C61 7368 8404          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
000055D4  204D 656D 
000055D8  6F72 7920 
000055DC  7769 7468 8405          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
000055E0  2055 7365 
000055E4  7220 5072 
000055E8  6F67 7261 8406          dc.b      111,103,114,97,109,0
000055EC  6D00      
                    8407   @m68kde~1_113:
000055EE  0D0A 2020 8408          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
000055F2  5220 2020 
000055F6  2020 2020 
000055FA  2020 20   
000055FD  2020 2D20 8409          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00005601  4469 7370 
00005605  6C61 7920 
00005609  36        
0000560A  3830 3030 8410          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
0000560E  2052 6567 
00005612  6973 7465 
00005616  72        
00005617  7300      8411          dc.b      115,0
                    8412   @m68kde~1_114:
0000561A  0D0A 2020 8413          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
0000561E  5320 2020 
00005622  2020 2020 
00005626  2020 20   
00005629  2020 2D20 8414          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
0000562D  546F 6767 
00005631  6C65 204F 
00005635  4E        
00005636  2F4F 4646 8415          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
0000563A  2053 696E 
0000563E  676C 6520 
00005642  53        
00005643  7465 7020 8416          dc.b      116,101,112,32,77,111,100,101,0
00005647  4D6F 6465 
0000564B  00        
                    8417   @m68kde~1_115:
0000564C  0D0A 2020 8418          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00005650  544D 2020 
00005654  2020 2020 
00005658  2020 20   
0000565B  2020 2D20 8419          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
0000565F  5465 7374 
00005663  204D 656D 
00005667  6F        
00005668  7279 00   8420          dc.b      114,121,0
                    8421   @m68kde~1_116:
0000566C  0D0A 2020 8422          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00005670  5453 2020 
00005674  2020 2020 
00005678  2020 20   
0000567B  2020 2D20 8423          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
0000567F  5465 7374 
00005683  2053 7769 
00005687  74        
00005688  6368 6573 8424          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
0000568C  3A20 5357 
00005690  372D 3000 
                    8425   @m68kde~1_117:
00005694  0D0A 2020 8426          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00005698  5444 2020 
0000569C  2020 2020 
000056A0  2020 20   
000056A3  2020 2D20 8427          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
000056A7  5465 7374 
000056AB  2044 6973 
000056AF  70        
000056B0  6C61 7973 8428          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
000056B4  3A20 4C45 
000056B8  4473 2061 
000056BC  6E        
000056BD  6420 372D 8429          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
000056C1  5365 676D 
000056C5  656E 7400 
                    8430   @m68kde~1_118:
000056CA  0D0A 2020 8431          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
000056CE  5744 2F57 
000056D2  532F 5743 
000056D6  2F57 4B   
000056D9  2020 2D20 8432          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
000056DD  5761 7463 
000056E1  6820 506F 
000056E5  696E      
000056E7  743A 2044 8433          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
000056EB  6973 706C 
000056EF  6179 2F53 
000056F3  65        
000056F4  742F 436C 8434          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
000056F8  6561 722F 
000056FC  4B69 6C6C 
00005700  00        
                    8435   @m68kde~1_119:
00005702  0D0A 2300 8436          dc.b      13,10,35,0
                    8437   @m68kde~1_120:
00005706  0D0A 5072 8438          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
0000570A  6F67 7261 
0000570E  6D20 5275 
00005712  6E        
00005713  6E69 6E67 8439          dc.b      110,105,110,103,46,46,46,46,46,0
00005717  2E2E 2E2E 
0000571B  2E00      
                    8440   @m68kde~1_121:
0000571E  0D0A 5072 8441          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00005722  6573 7320 
00005726  3C52 4553 
0000572A  4554      
0000572C  3E20 6275 8442          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00005730  7474 6F6E 
00005734  203C 4B65 
00005738  79        
00005739  303E 206F 8443          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
0000573D  6E20 4445 
00005741  3120 746F 
00005745  2073      
00005747  746F 7000 8444          dc.b      116,111,112,0
                    8445   @m68kde~1_122:
0000574C  0D0A 4572 8446          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00005750  726F 723A 
00005754  2050 7265 
00005758  73        
00005759  7320 2747 8447          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
0000575D  2720 6669 
00005761  7273 7420 
00005765  74        
00005766  6F20 7374 8448          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
0000576A  6172 7420 
0000576E  7072 6F67 
00005772  7261 6D00 8449          dc.b      114,97,109,0
                    8450   @m68kde~1_123:
00005776  0D0A 5369 8451          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000577A  6E67 6C65 
0000577E  2053 7465 
00005782  70        
00005783  2020 3A5B 8452          dc.b      32,32,58,91,79,78,93,0
00005787  4F4E 5D00 
                    8453   @m68kde~1_124:
0000578C  0D0A 5072 8454          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00005790  6573 7320 
00005794  2747 2720 
00005798  74        
00005799  6F20 5472 8455          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
0000579D  6163 6520 
000057A1  5072 6F67 
000057A5  72        
000057A6  616D 2066 8456          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
000057AA  726F 6D20 
000057AE  6164 6472 
000057B2  6573 7320 8457          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000057B6  2425 582E 
000057BA  2E2E 2E2E 
000057BE  00        
                    8458   @m68kde~1_125:
000057C0  0D0A 5075 8459          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
000057C4  7368 203C 
000057C8  5245 5345 
000057CC  5420      
000057CE  4275 7474 8460          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
000057D2  6F6E 3E20 
000057D6  746F 2053 
000057DA  74        
000057DB  6F70 2E2E 8461          dc.b      111,112,46,46,46,46,46,0
000057DF  2E2E 2E00 
                    8462   @m68kde~1_126:
000057E4  0D0A 5369 8463          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000057E8  6E67 6C65 
000057EC  2053 7465 
000057F0  70        
000057F1  203A 205B 8464          dc.b      32,58,32,91,79,70,70,93,0
000057F5  4F46 465D 
000057F9  00        
                    8465   @m68kde~1_127:
000057FA  0D0A 4272 8466          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000057FE  6561 6B20 
00005802  506F 696E 
00005806  74        
00005807  7320 3A5B 8467          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
0000580B  456E 6162 
0000580F  6C65 645D 
00005813  00        
                    8468   @m68kde~1_128:
00005814  0D0A 5072 8469          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005818  6573 7320 
0000581C  3C45 5343 
00005820  3E20      
00005822  746F 2052 8470          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005826  6573 756D 
0000582A  6520 5573 
0000582E  6572 2050 8471          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00005832  726F 6772 
00005836  616D 2E2E 
0000583A  2E        
0000583B  2E2E 00   8472          dc.b      46,46,0
                    8473   @m68kde~1_129:
0000583E  0D0A 5369 8474          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005842  6E67 6C65 
00005846  2053 7465 
0000584A  70        
0000584B  2020 3A5B 8475          dc.b      32,32,58,91,79,70,70,93,0
0000584F  4F46 465D 
00005853  00        
                    8476   @m68kde~1_130:
00005854  0D0A 0D0A 8477          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005858  5072 6F67 
0000585C  7261 6D20 
00005860  41        
00005861  424F 5254 8478          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00005865  2021 2121 
00005869  2121 210D 
0000586D  0A00      
                    8479   @m68kde~1_131:
00005870  2573 0D0A 8480          dc.b      37,115,13,10,0
00005874  00        
                    8481   @m68kde~1_132:
00005876  0D0A 0D0A 8482          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000587A  5072 6F67 
0000587E  7261 6D20 
00005882  41        
00005883  424F 5254 8483          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005887  2021 2121 
0000588B  2121 00   
                    8484   @m68kde~1_133:
0000588E  0D0A 556E 8485          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005892  6861 6E64 
00005896  6C65 6420 
0000589A  49        
0000589B  6E74 6572 8486          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
0000589F  7275 7074 
000058A3  3A20 4952 
000058A7  5125 6420 8487          dc.b      81,37,100,32,33,33,33,33,33,0
000058AB  2121 2121 
000058AF  2100      
                    8488   @m68kde~1_134:
000058B2  4144 4452 8489          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000058B6  4553 5320 
000058BA  4552 524F 
000058BE  523A 20   
000058C1  3136 206F 8490          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000058C5  7220 3332 
000058C9  2042 6974 
000058CD  2054      
000058CF  7261 6E73 8491          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
000058D3  6665 7220 
000058D7  746F 2F66 
000058DB  726F 6D20 8492          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000058DF  616E 204F 
000058E3  4444 2041 
000058E7  64        
000058E8  6472 6573 8493          dc.b      100,114,101,115,115,46,46,46,46,0
000058EC  732E 2E2E 
000058F0  2E00      
                    8494   @m68kde~1_135:
000058F2  556E 6861 8495          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000058F6  6E64 6C65 
000058FA  6420 5472 
000058FE  6170 2021 8496          dc.b      97,112,32,33,33,33,33,33,0
00005902  2121 2121 
00005906  00        
                    8497   @m68kde~1_136:
00005908  4255 5320 8498          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000590C  4572 726F 
00005910  7221 00   
                    8499   @m68kde~1_137:
00005914  4144 4452 8500          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00005918  4553 5320 
0000591C  4572 726F 
00005920  7221      
00005922  00        8501          dc.b      0
                    8502   @m68kde~1_138:
00005924  494C 4C45 8503          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00005928  4741 4C20 
0000592C  494E 5354 
00005930  5255 43   
00005933  5449 4F4E 8504          dc.b      84,73,79,78,0
00005937  00        
                    8505   @m68kde~1_139:
00005938  4449 5649 8506          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
0000593C  4445 2042 
00005940  5920 5A45 
00005944  524F 00   
                    8507   @m68kde~1_140:
00005948  2743 484B 8508          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
0000594C  2720 494E 
00005950  5354 5255 
00005954  4354 49   
00005957  4F4E 00   8509          dc.b      79,78,0
                    8510   @m68kde~1_141:
0000595A  5452 4150 8511          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
0000595E  5620 494E 
00005962  5354 5255 
00005966  4354 49   
00005969  4F4E 00   8512          dc.b      79,78,0
                    8513   @m68kde~1_142:
0000596C  5052 4956 8514          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00005970  494C 4547 
00005974  4520 5649 
00005978  4F4C 41   
0000597B  5449 4F4E 8515          dc.b      84,73,79,78,0
0000597F  00        
                    8516   @m68kde~1_143:
00005980  554E 494E 8517          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005984  4954 4941 
00005988  4C49 5345 
0000598C  4420 49   
0000598F  5251 00   8518          dc.b      82,81,0
                    8519   @m68kde~1_144:
00005992  5350 5552 8520          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005996  494F 5553 
0000599A  2049 5251 
0000599E  00        
                    8521   @m68kde~1_145:
000059A0  0D0A 5374 8522          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000059A4  6172 7420 
000059A8  4164 6472 
000059AC  65        
000059AD  7373 2069 8523          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000059B1  6E20 4D65 
000059B5  6D6F 7279 
000059B9  3A20 00   8524          dc.b      58,32,0
                    8525   @m68kde~1_146:
000059BC  0D0A 456E 8526          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000059C0  7465 7220 
000059C4  5374 7269 
000059C8  6E        
000059C9  6720 2845 8527          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000059CD  5343 2074 
000059D1  6F20 656E 
000059D5  64        
000059D6  2920 3A00 8528          dc.b      41,32,58,0
                    8529   @m68kde~1_147:
000059DA  0A45 6E74 8530          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
000059DE  6572 2077 
000059E2  6861 7420 
000059E6  73        
000059E7  697A 6520 8531          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
000059EB  6F66 206D 
000059EF  656D 6F72 
000059F3  7920 796F 8532          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
000059F7  7520 7761 
000059FB  6E74 2074 
000059FF  6F20 7265 8533          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00005A03  6164 2F77 
00005A07  7269 7465 
00005A0B  0A20 4279 8534          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
00005A0F  7465 203D 
00005A13  2030 0A20 
00005A17  576F      
00005A19  7264 203D 8535          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
00005A1D  2031 0A20 
00005A21  4C6F 6E67 
00005A25  20        
00005A26  576F 7264 8536          dc.b      87,111,114,100,32,61,32,50,10,0
00005A2A  203D 2032 
00005A2E  0A00      
                    8537   @m68kde~1_148:
00005A30  0A45 6E74 8538          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005A34  6572 2077 
00005A38  6869 6368 
00005A3C  2064 6174 8539          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005A40  6120 7061 
00005A44  7474 6572 
00005A48  6E        
00005A49  2079 6F75 8540          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005A4D  2077 616E 
00005A51  7420 746F 
00005A55  2077 7269 8541          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005A59  7465 2069 
00005A5D  6E74 6F20 
00005A61  6D65 6D6F 8542          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
00005A65  7279 0A20 
00005A69  3078 3030 
00005A6D  20        
00005A6E  3D20 300A 8543          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
00005A72  2030 7842 
00005A76  3220 3D20 
00005A7A  310A 20   
00005A7D  3078 4333 8544          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
00005A81  203D 2032 
00005A85  0A20 3078 
00005A89  4434      
00005A8B  203D 2033 8545          dc.b      32,61,32,51,10,0
00005A8F  0A00      
                    8546   @m68kde~1_149:
00005A92  0A45 6E74 8547          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005A96  6572 2077 
00005A9A  6869 6368 
00005A9E  2064 6174 8548          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005AA2  6120 7061 
00005AA6  7474 6572 
00005AAA  6E        
00005AAB  2079 6F75 8549          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005AAF  2077 616E 
00005AB3  7420 746F 
00005AB7  2077 7269 8550          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005ABB  7465 2069 
00005ABF  6E74 6F20 
00005AC3  6D65 6D6F 8551          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005AC7  7279 0A20 
00005ACB  3078 3030 
00005ACF  30        
00005AD0  3020 3D20 8552          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
00005AD4  300A 2030 
00005AD8  7831 3233 
00005ADC  3420 3D   
00005ADF  2031 0A20 8553          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
00005AE3  3078 4131 
00005AE7  4232 203D 
00005AEB  2032 0A   
00005AEE  2030 7843 8554          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
00005AF2  3344 3420 
00005AF6  3D20 330A 
00005AFA  00        
                    8555   @m68kde~1_150:
00005AFC  0A45 6E74 8556          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005B00  6572 2077 
00005B04  6869 6368 
00005B08  2064 6174 8557          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005B0C  6120 7061 
00005B10  7474 6572 
00005B14  6E        
00005B15  2079 6F75 8558          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005B19  2077 616E 
00005B1D  7420 746F 
00005B21  2077 7269 8559          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005B25  7465 2069 
00005B29  6E74 6F20 
00005B2D  6D65 6D6F 8560          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005B31  7279 0A20 
00005B35  3078 3030 
00005B39  30        
00005B3A  305F 3030 8561          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
00005B3E  3030 203D 
00005B42  2030 0A20 
00005B46  3078 41   
00005B49  4142 425F 8562          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
00005B4D  4343 4444 
00005B51  203D 2031 
00005B55  0A20 30   
00005B58  7831 3132 8563          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
00005B5C  325F 3333 
00005B60  3434 203D 
00005B64  2032 0A   
00005B67  2030 7837 8564          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
00005B6B  3635 345F 
00005B6F  3332 3130 
00005B73  203D 20   
00005B76  330A 00   8565          dc.b      51,10,0
                    8566   @m68kde~1_151:
00005B7A  0A50 726F 8567          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
00005B7E  7669 6465 
00005B82  2053 7461 
00005B86  72        
00005B87  7420 4164 8568          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
00005B8B  6472 6573 
00005B8F  7320 696E 
00005B93  2068 6578 8569          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
00005B97  2028 646F 
00005B9B  206E 6F74 
00005B9F  2075 7365 8570          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
00005BA3  2030 7820 
00005BA7  7072 6566 
00005BAB  6978 290A 8571          dc.b      105,120,41,10,48,120,0
00005BAF  3078 00   
                    8572   @m68kde~1_152:
00005BB2  0A50 726F 8573          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
00005BB6  7669 6465 
00005BBA  2045 6E64 
00005BBE  2041 6464 8574          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
00005BC2  7265 7373 
00005BC6  2069 6E20 
00005BCA  6865 7820 8575          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
00005BCE  2864 6F20 
00005BD2  6E6F 7420 
00005BD6  7573 6520 8576          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
00005BDA  3078 2070 
00005BDE  7265 6669 
00005BE2  7829 0A30 8577          dc.b      120,41,10,48,120,0
00005BE6  7800      
                    8578   @m68kde~1_153:
00005BE8  0A53 7461 8579          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
00005BEC  7274 2041 
00005BF0  6464 7265 
00005BF4  73        
00005BF5  7320 3078 8580          dc.b      115,32,48,120,37,48,56,120,10,0
00005BF9  2530 3878 
00005BFD  0A00      
                    8581   @m68kde~1_154:
00005C00  0A45 6E64 8582          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
00005C04  2041 6464 
00005C08  7265 7373 
00005C0C  3A20 3078 8583          dc.b      58,32,48,120,37,48,56,120,10,0
00005C10  2530 3878 
00005C14  0A00      
                    8584   @m68kde~1_155:
00005C16  4552 524F 8585          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
00005C1A  522E 2E2E 
00005C1E  2041 6464 
00005C22  7265      
00005C24  7373 2030 8586          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
00005C28  7825 7820 
00005C2C  6973 2062 
00005C30  65        
00005C31  796F 6E64 8587          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005C35  2074 6865 
00005C39  206D 656D 
00005C3D  6F72 7920 8588          dc.b      111,114,121,32,114,97,110,103,101,10,0
00005C41  7261 6E67 
00005C45  650A 00   
                    8589   @m68kde~1_156:
00005C48  4552 524F 8590          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
00005C4C  522E 2E2E 
00005C50  2056 616C 
00005C54  7565      
00005C56  2077 7269 8591          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
00005C5A  7474 656E 
00005C5E  2074 6F20 
00005C62  6164 6472 8592          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00005C66  6573 7320 
00005C6A  3078 2578 
00005C6E  203D 3D20 8593          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00005C72  3078 2578 
00005C76  2E20 5661 
00005C7A  6C75      
00005C7C  6520 4578 8594          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
00005C80  7065 6374 
00005C84  6564 3A20 
00005C88  30        
00005C89  7825 780A 8595          dc.b      120,37,120,10,0
00005C8D  00        
                    8596   @m68kde~1_157:
00005C8E  4164 6472 8597          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005C92  6573 733A 
00005C96  2030 7825 
00005C9A  78        
00005C9B  2056 616C 8598          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
00005C9F  7565 3A20 
00005CA3  3078 2530 
00005CA7  3258      
00005CA9  0A00      8599          dc.b      10,0
                    8600   @m68kde~1_158:
00005CAC  4164 6472 8601          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005CB0  6573 733A 
00005CB4  2030 7825 
00005CB8  78        
00005CB9  2056 616C 8602          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
00005CBD  7565 3A20 
00005CC1  3078 2530 
00005CC5  3458      
00005CC7  0A00      8603          dc.b      10,0
                    8604   @m68kde~1_159:
00005CCA  4164 6472 8605          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005CCE  6573 733A 
00005CD2  2030 7825 
00005CD6  78        
00005CD7  2056 616C 8606          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
00005CDB  7565 3A20 
00005CDF  3078 2530 
00005CE3  3858      
00005CE5  0A00      8607          dc.b      10,0
                    8608   @m68kde~1_160:
00005CE8  4445 312D 8609          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00005CEC  3638 6B20 
00005CF0  4275 6720 
00005CF4  5631      
00005CF6  2E37 3700 8610          dc.b      46,55,55,0
                    8611   @m68kde~1_161:
00005CFA  436F 7079 8612          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00005CFE  7269 6768 
00005D02  7420 2843 
00005D06  2920 504A 8613          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00005D0A  2044 6176 
00005D0E  6965 7320 
00005D12  3230      
00005D14  3136 00   8614          dc.b      49,54,0
                    8615   @m68kde~1_162:
00005D18  0D0A 5275 8616          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00005D1C  6E6E 696E 
00005D20  672E 2E2E 
00005D24  2E        
00005D25  2E00      8617          dc.b      46,0
                    8618   @m68kde~1_163:
00005D28  5275 6E6E 8619          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005D2C  696E 672E 
00005D30  2E2E 2E2E 
00005D34  00        
                    8620   @m68kde~1_164:
00005D36  4279 3A20 8621          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005D3A  504A 2044 
00005D3E  6176 6965 
00005D42  73        
00005D43  00        8622          dc.b      0
                    8623   @m68kde~1_165:
00005D44  0D0A 2573 8624          dc.b      13,10,37,115,0
00005D48  00        
                    8625   @m68kde~1_166:
00005D4A  0A20 5374 8626          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
00005D4E  7564 656E 
00005D52  7420 4E61 
00005D56  6D        
00005D57  6573 3A0A 8627          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
00005D5B  205A 6163 
00005D5F  6861 7269 
00005D63  61        
00005D64  6820 4A6F 8628          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
00005D68  7365 7068 
00005D6C  3A20 3435 
00005D70  35        
00005D71  3030 3035 8629          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00005D75  3520 0A20 
00005D79  556D 6169 
00005D7D  7220      
00005D7F  4D61 7A68 8630          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
00005D83  6172 3A20 
00005D87  3230 3333 
00005D8B  3333      
00005D8D  3038 0A00 8631          dc.b      48,56,10,0
                    8632   @m68kde~1_167:
00005D92  496E 6974 8633          dc.b      73,110,105,116,105,97,108,105,122,105,110,103
00005D96  6961 6C69 
00005D9A  7A69 6E67 
00005D9E  2069 3263 8634          dc.b      32,105,50,99,32,116,101,115,116,46,46,46,10
00005DA2  2074 6573 
00005DA6  742E 2E2E 
00005DAA  0A        
00005DAB  00        8635          dc.b      0
                    8636   I2CTest_IICData:
00005DAC  0000 000A 8637          dc.l      10,11,12,13,14
00005DB0  0000 000B 
00005DB4  0000 000C 
00005DB8  0000 000D 
00005DBC  0000 000E 
                    8638          section   data
00005DC0            8639                   align
          0000 5DC0 8640   DataStart       equ       *
                    8641   
                    8642   *********************************************************************************************************
                    8643   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8644   * to ram as part of the CStart routine in this file
                    8645   *********************************************************************************************************
                    8646   
                    8647   @vsscanf_bufx:
00005DC0  0B00 0546 8648          dc.l      @vsscanf_buf
                    8649   @vsscanf_1:
00005DC4  0A00      8650          dc.b      10,0
                    8651   __ctype:
00005DC6  0040 4040 8652          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005DCA  4040 4040 
00005DCE  4040 5050 
00005DD2  5050 50   
00005DD5  4040 4040 8653          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00005DD9  4040 4040 
00005DDD  4040 4040 
00005DE1  4040 40   
00005DE4  4040 40D0 8654          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005DE8  A0A0 A0A0 
00005DEC  A0A0 A0A0 
00005DF0  A0A0 A0A0 8655          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005DF4  A0A0 A08C 
00005DF8  8C8C 8C   
00005DFB  8C8C 8C8C 8656          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005DFF  8C8C A0A0 
00005E03  A0A0 A0   
00005E06  A0A0 8A8A 8657          dc.b      160,160,138,138,138,138,138,138,130,130,130
00005E0A  8A8A 8A8A 
00005E0E  8282 82   
00005E11  8282 8282 8658          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005E15  8282 8282 
00005E19  8282 82   
00005E1C  8282 8282 8659          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005E20  8282 A0A0 
00005E24  A0A0 A0   
00005E27  A089 8989 8660          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005E2B  8989 8981 
00005E2F  8181 81   
00005E32  8181 8181 8661          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005E36  8181 8181 
00005E3A  8181 81   
00005E3D  8181 8181 8662          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005E41  81A0 A0A0 
00005E45  A040 0000 
00005E49  00        
00005E4A  0000 0000 8663          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005E4E  0000 0000 
00005E52  0000 0000 
00005E56  0000 0000 
00005E5A  0000 0000 
00005E5E  0000      
00005E60  0000 0000 8664          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005E64  0000 0000 
00005E68  0000 0000 
00005E6C  0000 0000 
00005E70  0000 0000 
00005E74  0000      
00005E76  0000 0000 8665          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005E7A  0000 0000 
00005E7E  0000 0000 
00005E82  0000 0000 
00005E86  0000 0000 
00005E8A  0000      
00005E8C  0000 0000 8666          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005E90  0000 0000 
00005E94  0000 0000 
00005E98  0000 0000 
00005E9C  0000 0000 
00005EA0  0000      
00005EA2  0000 0000 8667          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005EA6  0000 0000 
00005EAA  0000 0000 
00005EAE  0000 0000 
00005EB2  0000 0000 
00005EB6  0000      
00005EB8  0000 0000 8668          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005EBC  0000 0000 
00005EC0  0000 0000 
00005EC4  0000 00   
                    8669   @itoa_1:
00005EC8  2D32 3134 8670          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005ECC  3734 3833 
00005ED0  3634 3800 
                    8671          section   bss
00005ED4            8672                   align
          0000 5ED4 8673   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8674   
                    8675   *********************************************************************************************************
                    8676   * Section for Uninitialised Data held in ROM as constants
                    8677   *********************************************************************************************************
                    8678   
0B000000            8679                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 8680   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8681   
                    8682   
0B000000            8683   bss             org       bss
                    8684   
                    8685   *********************************************************************************************************
                    8686   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8687   * install the exception handler using the C function InstallExceptionHandler()
                    8688   *********************************************************************************************************
                    8689   
                    8690   
                    8691   
0B000000            8692   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            8693   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            8694   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            8695   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            8696   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            8697   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            8698   VCheck           ds.l    1      ditto
0B00001C            8699   VTrapV           ds.l    1      ditto
0B000020            8700   VPrivilege       ds.l    1      ditto
0B000024            8701   VTrace           ds.l    1
0B000028            8702   VLine1010emul    ds.l    1
0B00002C            8703   VLine1111emul    ds.l    1
0B000030            8704   VUnassigned1     ds.l    1
0B000034            8705   VUnassigned2     ds.l    1
0B000038            8706   VUnassigned3     ds.l    1
0B00003C            8707   VUninit_IRQ      ds.l    1
0B000040            8708   VUnassigned4     ds.l    1
0B000044            8709   VUnassigned5     ds.l    1
0B000048            8710   VUnassigned6     ds.l    1
0B00004C            8711   VUnassigned7     ds.l    1
0B000050            8712   VUnassigned8     ds.l    1
0B000054            8713   VUnassigned9     ds.l    1
0B000058            8714   VUnassigned10    ds.l    1
0B00005C            8715   VUnassigned11    ds.l    1
0B000060            8716   VSpuriousIRQ     ds.l    1
                    8717   
                    8718   * Interrupt handlers Vector 25-31
0B000064            8719   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            8720   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            8721   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            8722   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            8723   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            8724   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            8725   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8726   
                    8727   * Trap Handler vectors 32-47
0B000080            8728   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            8729   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            8730   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            8731   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            8732   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            8733   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            8734   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            8735   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            8736   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            8737   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            8738   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            8739   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            8740   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            8741   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            8742   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            8743   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8744   
                    8745   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8746   
                    8747   ***********************************************************************************************************
                    8748   * Other Variables
                    8749   ***********************************************************************************************************
                    8750   *__DebugA5       ds.l    1
                    8751   *__UserA5        ds.l    1
                    8752   
                    8753   ***********************************************************************************************************
0B0000C0            8754   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            8755   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            8756   __heap:         ds.l    0       ; pointers for malloc functions
                    8757   
                    8758   *__himem:       ds.l    himem            ; highest memory location + 1
                    8759   *__stklen:      ds.l    stklen           ; default stack size
                    8760   
                    8761   *********************************************************************************************************
                    8762   * Section for Heap
                    8763   *********************************************************************************************************
                    8764   
                    8765   _i:
0B0000C4            8766          ds.b      4
                    8767   _x:
0B0000C8            8768          ds.b      4
                    8769   _y:
0B0000CC            8770          ds.b      4
                    8771   _z:
0B0000D0            8772          ds.b      4
                    8773   _PortA_Count:
0B0000D4            8774          ds.b      4
                    8775   _Trace:
0B0000D8            8776          ds.b      4
                    8777   _GoFlag:
0B0000DC            8778          ds.b      4
                    8779   _Echo:
0B0000E0            8780          ds.b      4
                    8781   _d0:
0B0000E4            8782          ds.b      4
                    8783   _d1:
0B0000E8            8784          ds.b      4
                    8785   _d2:
0B0000EC            8786          ds.b      4
                    8787   _d3:
0B0000F0            8788          ds.b      4
                    8789   _d4:
0B0000F4            8790          ds.b      4
                    8791   _d5:
0B0000F8            8792          ds.b      4
                    8793   _d6:
0B0000FC            8794          ds.b      4
                    8795   _d7:
0B000100            8796          ds.b      4
                    8797   _a0:
0B000104            8798          ds.b      4
                    8799   _a1:
0B000108            8800          ds.b      4
                    8801   _a2:
0B00010C            8802          ds.b      4
                    8803   _a3:
0B000110            8804          ds.b      4
                    8805   _a4:
0B000114            8806          ds.b      4
                    8807   _a5:
0B000118            8808          ds.b      4
                    8809   _a6:
0B00011C            8810          ds.b      4
                    8811   _PC:
0B000120            8812          ds.b      4
                    8813   _SSP:
0B000124            8814          ds.b      4
                    8815   _USP:
0B000128            8816          ds.b      4
                    8817   _SR:
0B00012C            8818          ds.b      2
                    8819   _BreakPointAddress:
0B00012E            8820          ds.b      32
                    8821   _BreakPointInstruction:
0B00014E            8822          ds.b      16
                    8823   _BreakPointSetOrCleared:
0B00015E            8824          ds.b      32
                    8825   _InstructionSize:
0B00017E            8826          ds.b      4
                    8827   _WatchPointAddress:
0B000182            8828          ds.b      32
                    8829   _WatchPointSetOrCleared:
0B0001A2            8830          ds.b      32
                    8831   _WatchPointString:
0B0001C2            8832          ds.b      800
                    8833   _TempString:
0B0004E2            8834          ds.b      100
                    8835   @vsscanf_buf:
0B000546            8836          ds.b      80
                    8837          section   heap
0B000596            8838                   align
          0B00 0596 8839   bssEnd          equ *                   end of storage space for unitialised variables
                    8840   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 8841   heap   equ       *
0B000596            8842                    align
          0000 0000

Assembly errors: 0
