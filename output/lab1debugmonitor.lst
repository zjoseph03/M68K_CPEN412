680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 27 Mar 2025      Time: 20:59:52          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  32EA      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  299A      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  4062      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  4A38      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  4A3C      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4A52      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  4A54      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  4062      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  36A6      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  4A56      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4A90      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  4AA8      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  4AB0      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  4AB6      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  4A38      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  4062      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  4ABA      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  4A90      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  4ACE      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  4AE4      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  4AF8      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  4062      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  4B28      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  37A0      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  35DA      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  36A6      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  4B58      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4B7E      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  4062      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4BA0      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  4BBC      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  4C02      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  4C14      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  3712      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  4C26      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; // TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011 // This might need to be 0x53
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while (TestForSPITransmitDataComplete() == 0);
                    1614   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1615          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1616          tst.l     D0
00001122  6602      1617          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1621          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1622          rts
                    1623   ; }
                    1624   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1625   ; void ClearSPIReadFIFO(void) {
                    1626   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1627          link      A6,#-4
                    1628   ; volatile unsigned char dummy;
                    1629   ; while((SPI_Status & 0x01) == 0) {
                    1630   ClearSPIReadFIFO_1:
00001134  1039 0040 1631          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1632          and.b     #1,D0
0000113E  660A      1633          bne.s     ClearSPIReadFIFO_3
                    1634   ; dummy = SPI_Data;
00001140  1D79 0040 1635          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1636          bra       ClearSPIReadFIFO_1
                    1637   ClearSPIReadFIFO_3:
0000114A  4E5E      1638          unlk      A6
0000114C  4E75      1639          rts
                    1640   ; }
                    1641   ; }
                    1642   ; void SPIFlashPollStatusWLE(void) {
                    1643   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char status;
                    1646   ; unsigned char dummy;
                    1647   ; do {
                    1648   SPIFlashPollStatusWLE_1:
                    1649   ; // Start a new read status register command each time
                    1650   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1651          move.b    #254,4227112
00001156  0040 8028 
                    1652   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1653          pea       5
0000115E  4EB8 10C4 1654          jsr       _SPISafeWrite
00001162  584F      1655          addq.w    #4,A7
                    1656   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1657          pea       255
00001168  4EB8 10C4 1658          jsr       _SPISafeWrite
0000116C  584F      1659          addq.w    #4,A7
0000116E  1D40 FFFE 1660          move.b    D0,-2(A6)
                    1661   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1662          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1663          move.b    -2(A6),D0
0000117E  C03C 0002 1664          and.b     #2,D0
00001182  67CE      1665          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1666          unlk      A6
00001186  4E75      1667          rts
                    1668   ; // printf("\r\n WLE Status: %02x \n", status);
                    1669   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1670   ; }
                    1671   ; void SPIFlashPollStatusBusy(void) {
                    1672   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1673          link      A6,#-4
                    1674   ; unsigned char status;
                    1675   ; unsigned char dummy;
                    1676   ; do {
                    1677   SPIFlashPollStatusBusy_1:
                    1678   ; // Start a new read status register command each time
                    1679   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1680          move.b    #254,4227112
00001190  0040 8028 
                    1681   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1682          pea       5
00001198  4EB8 10C4 1683          jsr       _SPISafeWrite
0000119C  584F      1684          addq.w    #4,A7
                    1685   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1686          pea       255
000011A2  4EB8 10C4 1687          jsr       _SPISafeWrite
000011A6  584F      1688          addq.w    #4,A7
000011A8  1D40 FFFE 1689          move.b    D0,-2(A6)
                    1690   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1691          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1692          move.b    -2(A6),D0
000011B8  C03C 0001 1693          and.b     #1,D0
000011BC  66CE      1694          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1695          unlk      A6
000011C0  4E75      1696          rts
                    1697   ; // printf("\r\n Busy Status: %02x \n", status);
                    1698   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011C2  4E56 0000 1707          link      A6,#0
                    1708   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1709          move.l    8(A6),D1
000011CA  C2BC 0000 1710          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1711          move.l    D1,-(A7)
000011D2  4EB8 10C4 1712          jsr       _SPISafeWrite
000011D6  584F      1713          addq.w    #4,A7
                    1714   ; return SPI_Data;
000011D8  1039 0040 1715          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1716          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1717          unlk      A6
000011E6  4E75      1718          rts
                    1719   ; }
                    1720   ; void SPIFlashWriteEnable() {
                    1721   _SPIFlashWriteEnable:
                    1722   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1723          move.b    #254,4227112
000011EC  0040 8028 
                    1724   ; SPISafeWrite(0x06);
000011F0  4878 0006 1725          pea       6
000011F4  4EB8 10C4 1726          jsr       _SPISafeWrite
000011F8  584F      1727          addq.w    #4,A7
                    1728   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1729          move.b    #255,4227112
000011FE  0040 8028 
                    1730   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1731   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1732          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1733          rts
                    1734   ; }
                    1735   ; void SPISendAddress(int c) {
                    1736   _SPISendAddress:
00001208  4E56 0000 1737          link      A6,#0
0000120C  48E7 2020 1738          movem.l   D2/A2,-(A7)
00001210  242E 0008 1739          move.l    8(A6),D2
00001214  45F8 10C4 1740          lea       _SPISafeWrite.L,A2
                    1741   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1742          move.l    D2,D1
0000121A  E081      1743          asr.l     #8,D1
0000121C  E081      1744          asr.l     #8,D1
0000121E  C2BC 0000 1745          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1746          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1747          move.l    D1,-(A7)
0000122C  4E92      1748          jsr       (A2)
0000122E  584F      1749          addq.w    #4,A7
                    1750   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1751          move.l    D2,D1
00001232  E081      1752          asr.l     #8,D1
00001234  C2BC 0000 1753          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1754          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1755          move.l    D1,-(A7)
00001242  4E92      1756          jsr       (A2)
00001244  584F      1757          addq.w    #4,A7
                    1758   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1759          move.l    D2,D1
00001248  C2BC 0000 1760          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1761          and.l     #255,D1
00001252  00FF      
00001254  2F01      1762          move.l    D1,-(A7)
00001256  4E92      1763          jsr       (A2)
00001258  584F      1764          addq.w    #4,A7
0000125A  4CDF 0404 1765          movem.l   (A7)+,D2/A2
0000125E  4E5E      1766          unlk      A6
00001260  4E75      1767          rts
                    1768   ; }
                    1769   ; void SPIFlashPageProgram(int addr) {
                    1770   _SPIFlashPageProgram:
00001262  4E56 FFF8 1771          link      A6,#-8
00001266  2F02      1772          move.l    D2,-(A7)
                    1773   ; unsigned char *sramMemoryPtr;
                    1774   ; int flashAddr = addr - 0x08000000;
00001268  202E 0008 1775          move.l    8(A6),D0
0000126C  0480 0800 1776          sub.l     #134217728,D0
00001270  0000      
00001272  2D40 FFFC 1777          move.l    D0,-4(A6)
                    1778   ; int i;
                    1779   ; SPI_CS = 0xFE;
00001276  13FC 00FE 1780          move.b    #254,4227112
0000127A  0040 8028 
                    1781   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000127E  4878 0002 1782          pea       2
00001282  4EB8 10C4 1783          jsr       _SPISafeWrite
00001286  584F      1784          addq.w    #4,A7
                    1785   ; SPISendAddress(flashAddr);
00001288  2F2E FFFC 1786          move.l    -4(A6),-(A7)
0000128C  4EB8 1208 1787          jsr       _SPISendAddress
00001290  584F      1788          addq.w    #4,A7
                    1789   ; for (i = 0; i < 256; i++) {
00001292  4282      1790          clr.l     D2
                    1791   SPIFlashPageProgram_1:
00001294  0C82 0000 1792          cmp.l     #256,D2
00001298  0100      
0000129A  6C22      1793          bge.s     SPIFlashPageProgram_3
                    1794   ; sramMemoryPtr = (unsigned char*) (addr + i);
0000129C  202E 0008 1795          move.l    8(A6),D0
000012A0  D082      1796          add.l     D2,D0
000012A2  2D40 FFF8 1797          move.l    D0,-8(A6)
                    1798   ; WriteSPIChar(*sramMemoryPtr); // Random value for testing purposes
000012A6  206E FFF8 1799          move.l    -8(A6),A0
000012AA  1210      1800          move.b    (A0),D1
000012AC  C2BC 0000 1801          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1802          move.l    D1,-(A7)
000012B4  4EB8 11C2 1803          jsr       _WriteSPIChar
000012B8  584F      1804          addq.w    #4,A7
000012BA  5282      1805          addq.l    #1,D2
000012BC  60D6      1806          bra       SPIFlashPageProgram_1
                    1807   SPIFlashPageProgram_3:
                    1808   ; // printf("%02x ", *sramMemoryPtr);
                    1809   ; }
                    1810   ; SPI_CS = 0xFF;
000012BE  13FC 00FF 1811          move.b    #255,4227112
000012C2  0040 8028 
                    1812   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1813   ; SPIFlashPollStatusBusy();
000012C6  4EB8 1188 1814          jsr       _SPIFlashPollStatusBusy
000012CA  241F      1815          move.l    (A7)+,D2
000012CC  4E5E      1816          unlk      A6
000012CE  4E75      1817          rts
                    1818   ; }
                    1819   ; void SPIFlashErase(void) {
                    1820   _SPIFlashErase:
                    1821   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1822   ; printf("\nErasing...\n");
000012D0  4879 0000 1823          pea       @m68kde~1_22.L
000012D4  4C5A      
000012D6  4EB9 0000 1824          jsr       _printf
000012DA  4062      
000012DC  584F      1825          addq.w    #4,A7
                    1826   ; SPI_CS = 0xFE;
000012DE  13FC 00FE 1827          move.b    #254,4227112
000012E2  0040 8028 
                    1828   ; SPISafeWrite(0xC7);
000012E6  4878 00C7 1829          pea       199
000012EA  4EB8 10C4 1830          jsr       _SPISafeWrite
000012EE  584F      1831          addq.w    #4,A7
                    1832   ; SPI_CS = 0xFF;
000012F0  13FC 00FF 1833          move.b    #255,4227112
000012F4  0040 8028 
                    1834   ; SPIFlashPollStatusBusy();
000012F8  4EB8 1188 1835          jsr       _SPIFlashPollStatusBusy
000012FC  4E75      1836          rts
                    1837   ; }
                    1838   ; int SPIFlashRead() {
                    1839   _SPIFlashRead:
000012FE  4E56 FFFC 1840          link      A6,#-4
00001302  48E7 3000 1841          movem.l   D2/D3,-(A7)
                    1842   ; unsigned char readData;
                    1843   ; unsigned char *sramMemoryPtr;
                    1844   ; int addr;
                    1845   ; ClearSPIReadFIFO();
00001306  4EB8 1130 1846          jsr       _ClearSPIReadFIFO
                    1847   ; SPI_CS = 0xFE;
0000130A  13FC 00FE 1848          move.b    #254,4227112
0000130E  0040 8028 
                    1849   ; SPISafeWrite(0x03);
00001312  4878 0003 1850          pea       3
00001316  4EB8 10C4 1851          jsr       _SPISafeWrite
0000131A  584F      1852          addq.w    #4,A7
                    1853   ; SPISendAddress(0x0);
0000131C  42A7      1854          clr.l     -(A7)
0000131E  4EB8 1208 1855          jsr       _SPISendAddress
00001322  584F      1856          addq.w    #4,A7
                    1857   ; for (addr = 0x08000000; addr < (0x08040000); addr ++) {
00001324  243C 0800 1858          move.l    #134217728,D2
00001328  0000      
                    1859   SPIFlashRead_1:
0000132A  0C82 0804 1860          cmp.l     #134479872,D2
0000132E  0000      
00001330  6C1A      1861          bge.s     SPIFlashRead_3
                    1862   ; sramMemoryPtr = (unsigned char*) addr;
00001332  2D42 FFFC 1863          move.l    D2,-4(A6)
                    1864   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001336  4878 00FF 1865          pea       255
0000133A  4EB8 10C4 1866          jsr       _SPISafeWrite
0000133E  584F      1867          addq.w    #4,A7
00001340  1600      1868          move.b    D0,D3
                    1869   ; *sramMemoryPtr = readData;
00001342  206E FFFC 1870          move.l    -4(A6),A0
00001346  1083      1871          move.b    D3,(A0)
00001348  5282      1872          addq.l    #1,D2
0000134A  60DE      1873          bra       SPIFlashRead_1
                    1874   SPIFlashRead_3:
                    1875   ; }
                    1876   ; SPI_CS = 0xFF;
0000134C  13FC 00FF 1877          move.b    #255,4227112
00001350  0040 8028 
                    1878   ; SPIFlashPollStatusBusy();
00001354  4EB8 1188 1879          jsr       _SPIFlashPollStatusBusy
                    1880   ; return readData;
00001358  C6BC 0000 1881          and.l     #255,D3
0000135C  00FF      
0000135E  2003      1882          move.l    D3,D0
00001360  4CDF 000C 1883          movem.l   (A7)+,D2/D3
00001364  4E5E      1884          unlk      A6
00001366  4E75      1885          rts
                    1886   ; }
                    1887   ; /*******************************************************************
                    1888   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1889   ; ********************************************************************/
                    1890   ; void ProgramFlashChip(void)
                    1891   ; {
                    1892   _ProgramFlashChip:
00001368  4E56 FFFC 1893          link      A6,#-4
                    1894   ; int addr;
                    1895   ; SPIFlashPollStatusBusy();
0000136C  4EB8 1188 1896          jsr       _SPIFlashPollStatusBusy
                    1897   ; SPIFlashWriteEnable();
00001370  4EB8 11E8 1898          jsr       _SPIFlashWriteEnable
                    1899   ; SPIFlashErase();
00001374  4EB8 12D0 1900          jsr       _SPIFlashErase
                    1901   ; // 256KB = 262144 bytes (0x40000)
                    1902   ; // We need to write one page at a time (256 bytes at a time)
                    1903   ; // This code writes the user program from DRAM to FLASH
                    1904   ; // printf("\r\n Starting Programming...");
                    1905   ; // for (addr = 0x08000000; addr < (0x08040000); addr += 256) {
                    1906   ; //     SPIFlashWriteEnable(); 
                    1907   ; //     // printf("\r\n Addr: %08x \n", addr);
                    1908   ; //     SPIFlashPageProgram(addr);
                    1909   ; // }
                    1910   ; printf("\r\n Programming Complete!");
00001378  4879 0000 1911          pea       @m68kde~1_23.L
0000137C  4C68      
0000137E  4EB9 0000 1912          jsr       _printf
00001382  4062      
00001384  584F      1913          addq.w    #4,A7
00001386  4E5E      1914          unlk      A6
00001388  4E75      1915          rts
                    1916   ; }
                    1917   ; /*************************************************************************
                    1918   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1919   ; **************************************************************************/
                    1920   ; void LoadFromFlashChip(void)
                    1921   ; {
                    1922   _LoadFromFlashChip:
0000138A  4E56 FFFC 1923          link      A6,#-4
                    1924   ; int readData;
                    1925   ; printf("\r\n Loading Program From SPI Flash....") ;
0000138E  4879 0000 1926          pea       @m68kde~1_24.L
00001392  4C82      
00001394  4EB9 0000 1927          jsr       _printf
00001398  4062      
0000139A  584F      1928          addq.w    #4,A7
                    1929   ; SPIFlashPollStatusBusy();
0000139C  4EB8 1188 1930          jsr       _SPIFlashPollStatusBusy
                    1931   ; readData = SPIFlashRead();
000013A0  4EB8 12FE 1932          jsr       _SPIFlashRead
000013A4  2D40 FFFC 1933          move.l    D0,-4(A6)
                    1934   ; printf("\r\n Read Data: %08x \n", readData);
000013A8  2F2E FFFC 1935          move.l    -4(A6),-(A7)
000013AC  4879 0000 1936          pea       @m68kde~1_25.L
000013B0  4CA8      
000013B2  4EB9 0000 1937          jsr       _printf
000013B6  4062      
000013B8  504F      1938          addq.w    #8,A7
000013BA  4E5E      1939          unlk      A6
000013BC  4E75      1940          rts
                    1941   ; }
                    1942   ; void printBinary(unsigned char value) {
                    1943   _printBinary:
000013BE  4E56 0000 1944          link      A6,#0
000013C2  48E7 2020 1945          movem.l   D2/A2,-(A7)
000013C6  45F9 0000 1946          lea       _printf.L,A2
000013CA  4062      
                    1947   ; int i;
                    1948   ; printf("IIC_CRSR Transmit (Binary): ");
000013CC  4879 0000 1949          pea       @m68kde~1_26.L
000013D0  4CBE      
000013D2  4E92      1950          jsr       (A2)
000013D4  584F      1951          addq.w    #4,A7
                    1952   ; for (i = 7; i >= 0; i--) { // Loop through each bit (from MSB to LSB)
000013D6  7407      1953          moveq     #7,D2
                    1954   printBinary_1:
000013D8  0C82 0000 1955          cmp.l     #0,D2
000013DC  0000      
000013DE  6D22      1956          blt.s     printBinary_3
                    1957   ; printf("%d", (value >> i) & 1); // Shift and mask to extract each bit
000013E0  122E 000B 1958          move.b    11(A6),D1
000013E4  C2BC 0000 1959          and.l     #255,D1
000013E8  00FF      
000013EA  E4A1      1960          asr.l     D2,D1
000013EC  C2BC 0000 1961          and.l     #1,D1
000013F0  0001      
000013F2  2F01      1962          move.l    D1,-(A7)
000013F4  4879 0000 1963          pea       @m68kde~1_27.L
000013F8  4CDC      
000013FA  4E92      1964          jsr       (A2)
000013FC  504F      1965          addq.w    #8,A7
000013FE  5382      1966          subq.l    #1,D2
00001400  60D6      1967          bra       printBinary_1
                    1968   printBinary_3:
                    1969   ; }
                    1970   ; printf("\n");
00001402  4879 0000 1971          pea       @m68kde~1_28.L
00001406  4CE0      
00001408  4E92      1972          jsr       (A2)
0000140A  584F      1973          addq.w    #4,A7
0000140C  4CDF 0404 1974          movem.l   (A7)+,D2/A2
00001410  4E5E      1975          unlk      A6
00001412  4E75      1976          rts
                    1977   ; }
                    1978   ; void IICCoreEnable() {
                    1979   _IICCoreEnable:
                    1980   ; IIC_CTR |= 0x80;     // Enable I2C core in control register (1000_0000)
00001414  0039 0080 1981          or.b      #128,4227076
00001418  0040 8004 
0000141C  4E75      1982          rts
                    1983   ; }
                    1984   ; void IICCoreDisable() {
                    1985   _IICCoreDisable:
                    1986   ; IIC_CTR &= 0x7F;    // Disable I2C core in control register (0011_1111)
0000141E  0239 007F 1987          and.b     #127,4227076
00001422  0040 8004 
00001426  4E75      1988          rts
                    1989   ; }
                    1990   ; // I2C Driver Functions
                    1991   ; void IIC_Init(void) {
                    1992   _IIC_Init:
                    1993   ; IIC_PRER_LO = 0x59;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001428  13FC 0059 1994          move.b    #89,4227072
0000142C  0040 8000 
                    1995   ; IIC_PRER_HI = 0x00;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001430  4239 0040 1996          clr.b     4227074
00001434  8002      
                    1997   ; IIC_CTR &= 0xBF;     // Disable interrupt in control register (1011_1111)
00001436  0239 00BF 1998          and.b     #191,4227076
0000143A  0040 8004 
                    1999   ; IICCoreEnable();
0000143E  4EB8 1414 2000          jsr       _IICCoreEnable
00001442  4E75      2001          rts
                    2002   ; }
                    2003   ; void wait5ms(void) {
                    2004   _wait5ms:
00001444  2F02      2005          move.l    D2,-(A7)
                    2006   ; int i;
                    2007   ; for (i = 0; i < 10000; i++); // Wait for 5 ms
00001446  4282      2008          clr.l     D2
                    2009   wait5ms_1:
00001448  0C82 0000 2010          cmp.l     #10000,D2
0000144C  2710      
0000144E  6C04      2011          bge.s     wait5ms_3
00001450  5282      2012          addq.l    #1,D2
00001452  60F4      2013          bra       wait5ms_1
                    2014   wait5ms_3:
00001454  241F      2015          move.l    (A7)+,D2
00001456  4E75      2016          rts
                    2017   ; }
                    2018   ; void checkTIP() {
                    2019   _checkTIP:
                    2020   ; while (IIC_CRSR & TIP);
                    2021   checkTIP_1:
00001458  1039 0040 2022          move.b    4227080,D0
0000145C  8008      
0000145E  C03C 0002 2023          and.b     #2,D0
00001462  6702      2024          beq.s     checkTIP_3
00001464  60F2      2025          bra       checkTIP_1
                    2026   checkTIP_3:
00001466  4E75      2027          rts
                    2028   ; }
                    2029   ; void checkAck() {
                    2030   _checkAck:
                    2031   ; while ((IIC_CRSR & RXACK) == 1);
                    2032   checkAck_1:
00001468  1039 0040 2033          move.b    4227080,D0
0000146C  8008      
0000146E  C07C 00FF 2034          and.w     #255,D0
00001472  C07C 0080 2035          and.w     #128,D0
00001476  0C40 0001 2036          cmp.w     #1,D0
0000147A  6602      2037          bne.s     checkAck_3
0000147C  60EA      2038          bra       checkAck_1
                    2039   checkAck_3:
0000147E  4E75      2040          rts
                    2041   ; }
                    2042   ; void IICStopCondition() {
                    2043   _IICStopCondition:
                    2044   ; IIC_CRSR |= STOP | READ | IACK; // STOP + READ + IACK
00001480  0039 0061 2045          or.b      #97,4227080
00001484  0040 8008 
                    2046   ; checkTIP();
00001488  4EB8 1458 2047          jsr       _checkTIP
0000148C  4E75      2048          rts
                    2049   ; }
                    2050   ; void IICStartCondition(int rwBit) {
                    2051   _IICStartCondition:
0000148E  4E56 0000 2052          link      A6,#0
                    2053   ; if (rwBit == 0) {
00001492  202E 0008 2054          move.l    8(A6),D0
00001496  660A      2055          bne.s     IICStartCondition_1
                    2056   ; IIC_CRSR |= START | WRITE | IACK; // START + WRITE + IACK
00001498  0039 0091 2057          or.b      #145,4227080
0000149C  0040 8008 
000014A0  6008      2058          bra.s     IICStartCondition_2
                    2059   IICStartCondition_1:
                    2060   ; } else {
                    2061   ; IIC_CRSR |= START | READ | IACK; // Start condition with read bit set
000014A2  0039 00A1 2062          or.b      #161,4227080
000014A6  0040 8008 
                    2063   IICStartCondition_2:
                    2064   ; }
                    2065   ; checkTIP();
000014AA  4EB8 1458 2066          jsr       _checkTIP
                    2067   ; checkAck();
000014AE  4EB8 1468 2068          jsr       _checkAck
000014B2  4E5E      2069          unlk      A6
000014B4  4E75      2070          rts
                    2071   ; }
                    2072   ; // EEPROM Address: 101000{B0} 
                    2073   ; // EEPROM Specific Functions
                    2074   ; void EEPROMByteWrite(unsigned int data, unsigned int deviceAddr, unsigned int memoryAddr) {
                    2075   _EEPROMByteWrite:
000014B6  4E56 0000 2076          link      A6,#0
000014BA  48E7 0030 2077          movem.l   A2/A3,-(A7)
000014BE  45F8 1458 2078          lea       _checkTIP.L,A2
000014C2  47F8 1468 2079          lea       _checkAck.L,A3
                    2080   ; // Check if there is a transmission in progress
                    2081   ; // IICCoreEnable();
                    2082   ; checkTIP();
000014C6  4E92      2083          jsr       (A2)
                    2084   ; // Set the start condition
                    2085   ; // IICStartCondition(0);
                    2086   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2087   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2088   ; // Control code, chip select, and block select (ie: Slave Address) and the R/W bit (== 0) are sent
                    2089   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000014C8  202E 000C 2090          move.l    12(A6),D0
000014CC  E388      2091          lsl.l     #1,D0
000014CE  C0BC 0000 2092          and.l     #254,D0
000014D2  00FE      
000014D4  13C0 0040 2093          move.b    D0,4227078
000014D8  8006      
                    2094   ; IIC_CRSR = START | WRITE | IACK;
000014DA  13FC 0091 2095          move.b    #145,4227080
000014DE  0040 8008 
                    2096   ; // printf("Sent Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2097   ; checkTIP();
000014E2  4E92      2098          jsr       (A2)
                    2099   ; checkAck();
000014E4  4E93      2100          jsr       (A3)
                    2101   ; // printf("Status Register 2: %x\n", IIC_CRSR);
                    2102   ; // Check for ACK
                    2103   ; // printf("\r\n Slave Address Ack Status: : %d\n", checkAck()); //TIP is checked in checkAck function
                    2104   ; // Send the high-order byte of the address
                    2105   ; IIC_TXRX = (memoryAddr >> 8) & 0xFF;
000014E6  202E 0010 2106          move.l    16(A6),D0
000014EA  E088      2107          lsr.l     #8,D0
000014EC  C0BC 0000 2108          and.l     #255,D0
000014F0  00FF      
000014F2  13C0 0040 2109          move.b    D0,4227078
000014F6  8006      
                    2110   ; IIC_CRSR = WRITE | IACK;
000014F8  13FC 0011 2111          move.b    #17,4227080
000014FC  0040 8008 
                    2112   ; checkTIP();
00001500  4E92      2113          jsr       (A2)
                    2114   ; checkAck();
00001502  4E93      2115          jsr       (A3)
                    2116   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2117   ; // Send the lower-order byte of the address
                    2118   ; IIC_TXRX = (memoryAddr & 0xFF);
00001504  202E 0010 2119          move.l    16(A6),D0
00001508  C0BC 0000 2120          and.l     #255,D0
0000150C  00FF      
0000150E  13C0 0040 2121          move.b    D0,4227078
00001512  8006      
                    2122   ; IIC_CRSR = WRITE | IACK;
00001514  13FC 0011 2123          move.b    #17,4227080
00001518  0040 8008 
                    2124   ; checkTIP();
0000151C  4E92      2125          jsr       (A2)
                    2126   ; checkAck();
0000151E  4E93      2127          jsr       (A3)
                    2128   ; //printf("Sent Lower Memory Byte: %02x\n", memoryAddr & 0xFF);
                    2129   ; // printf("Status Register 4: %x\n", IIC_CRSR);
                    2130   ; // Transmit byte to be written
                    2131   ; IIC_TXRX = 0xAA; //data;
00001520  13FC 00AA 2132          move.b    #170,4227078
00001524  0040 8006 
                    2133   ; IIC_CRSR = STOP | WRITE | IACK;
00001528  13FC 0051 2134          move.b    #81,4227080
0000152C  0040 8008 
                    2135   ; checkTIP();
00001530  4E92      2136          jsr       (A2)
                    2137   ; checkAck();
00001532  4E93      2138          jsr       (A3)
                    2139   ; wait5ms();
00001534  4EB8 1444 2140          jsr       _wait5ms
00001538  4CDF 0C00 2141          movem.l   (A7)+,A2/A3
0000153C  4E5E      2142          unlk      A6
0000153E  4E75      2143          rts
                    2144   ; // printf("Sent Data: %02x\n", data);
                    2145   ; // printf("Sent Stop Condition");
                    2146   ; // printf("Status Register 6: %x\n", IIC_CRSR);
                    2147   ; // IICCoreDisable();
                    2148   ; //printf("\r\nI2C Byte Write Complete\n");
                    2149   ; }
                    2150   ; void EEPROMFlashPageWrite(int* data, unsigned int startingGlobalAddress, unsigned int numBytes) {
                    2151   _EEPROMFlashPageWrite:
00001540  4E56 FFFC 2152          link      A6,#-4
00001544  48E7 3F38 2153          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4,-(A7)
00001548  282E 000C 2154          move.l    12(A6),D4
0000154C  45F8 1458 2155          lea       _checkTIP.L,A2
00001550  47F8 1468 2156          lea       _checkAck.L,A3
00001554  286E 0010 2157          move.l    16(A6),A4
                    2158   ; unsigned int currentAddress = startingGlobalAddress; 
00001558  2404      2159          move.l    D4,D2
                    2160   ; unsigned int endAddress = startingGlobalAddress + numBytes;
0000155A  2004      2161          move.l    D4,D0
0000155C  D08C      2162          add.l     A4,D0
0000155E  2C00      2163          move.l    D0,D6
                    2164   ; unsigned int blockAddress;
                    2165   ; unsigned int deviceAddress;
                    2166   ; unsigned int pageFlag;
                    2167   ; unsigned int currIndex = 0;
00001560  42AE FFFC 2168          clr.l     -4(A6)
                    2169   ; startingGlobalAddress = startingGlobalAddress & 0xFFFF; // Mask to 16 bits
00001564  C8BC 0000 2170          and.l     #65535,D4
00001568  FFFF      
                    2171   ; currentAddress = startingGlobalAddress; 
0000156A  2404      2172          move.l    D4,D2
                    2173   ; endAddress = startingGlobalAddress + numBytes;
0000156C  2004      2174          move.l    D4,D0
0000156E  D08C      2175          add.l     A4,D0
00001570  2C00      2176          move.l    D0,D6
                    2177   ; printf("EEPROM Flash Page Write: Start Address: 0x%x, numbytes: %d\n", startingGlobalAddress, numBytes);
00001572  2F0C      2178          move.l    A4,-(A7)
00001574  2F04      2179          move.l    D4,-(A7)
00001576  4879 0000 2180          pea       @m68kde~1_29.L
0000157A  4CE2      
0000157C  4EB9 0000 2181          jsr       _printf
00001580  4062      
00001582  DEFC 000C 2182          add.w     #12,A7
                    2183   ; if (currentAddress < 0x10000) {
00001586  0C82 0001 2184          cmp.l     #65536,D2
0000158A  0000      
0000158C  6406      2185          bhs.s     EEPROMFlashPageWrite_1
                    2186   ; blockAddress = startingGlobalAddress; // Lower 64KB block
0000158E  2604      2187          move.l    D4,D3
                    2188   ; deviceAddress = EEPROM0;
00001590  7A50      2189          moveq     #80,D5
00001592  600C      2190          bra.s     EEPROMFlashPageWrite_2
                    2191   EEPROMFlashPageWrite_1:
                    2192   ; } else {
                    2193   ; blockAddress = startingGlobalAddress - 0x10000; // Upper 64KB block
00001594  2004      2194          move.l    D4,D0
00001596  0480 0001 2195          sub.l     #65536,D0
0000159A  0000      
0000159C  2600      2196          move.l    D0,D3
                    2197   ; deviceAddress = EEPROM1;
0000159E  7A51      2198          moveq     #81,D5
                    2199   EEPROMFlashPageWrite_2:
                    2200   ; }
                    2201   ; checkTIP();
000015A0  4E92      2202          jsr       (A2)
                    2203   ; while (currentAddress < endAddress) {
                    2204   EEPROMFlashPageWrite_3:
000015A2  B486      2205          cmp.l     D6,D2
000015A4  6400 00E8 2206          bhs       EEPROMFlashPageWrite_5
                    2207   ; // printf("Entered New Page, Current Address: %d, End Address: %d\n", currentAddress, endAddress);
                    2208   ; if (currentAddress == 0x10000) {
000015A8  0C82 0001 2209          cmp.l     #65536,D2
000015AC  0000      
000015AE  6604      2210          bne.s     EEPROMFlashPageWrite_6
                    2211   ; blockAddress = 0; // Reset to beginning of Block 1
000015B0  4283      2212          clr.l     D3
000015B2  6016      2213          bra.s     EEPROMFlashPageWrite_7
                    2214   EEPROMFlashPageWrite_6:
                    2215   ; } 
                    2216   ; else {
                    2217   ; blockAddress = (currentAddress < 0x10000) ? currentAddress : (currentAddress - 0x10000);
000015B4  0C82 0001 2218          cmp.l     #65536,D2
000015B8  0000      
000015BA  6404      2219          bhs.s     EEPROMFlashPageWrite_8
000015BC  2002      2220          move.l    D2,D0
000015BE  6008      2221          bra.s     EEPROMFlashPageWrite_9
                    2222   EEPROMFlashPageWrite_8:
000015C0  2002      2223          move.l    D2,D0
000015C2  0480 0001 2224          sub.l     #65536,D0
000015C6  0000      
                    2225   EEPROMFlashPageWrite_9:
000015C8  2600      2226          move.l    D0,D3
                    2227   EEPROMFlashPageWrite_7:
                    2228   ; }    
                    2229   ; pageFlag = 1;
000015CA  7E01      2230          moveq     #1,D7
                    2231   ; // START condition
                    2232   ; IIC_TXRX = (deviceAddress << 1) & 0xFE;    // Upper 64KB block
000015CC  2005      2233          move.l    D5,D0
000015CE  E388      2234          lsl.l     #1,D0
000015D0  C0BC 0000 2235          and.l     #254,D0
000015D4  00FE      
000015D6  13C0 0040 2236          move.b    D0,4227078
000015DA  8006      
                    2237   ; IIC_CRSR = START | WRITE | IACK;
000015DC  13FC 0091 2238          move.b    #145,4227080
000015E0  0040 8008 
                    2239   ; checkTIP();
000015E4  4E92      2240          jsr       (A2)
                    2241   ; checkAck();
000015E6  4E93      2242          jsr       (A3)
                    2243   ; // Send the two address bytes
                    2244   ; // Send the high-order byte of the address
                    2245   ; IIC_TXRX = (blockAddress >> 8) & 0xFF;
000015E8  2003      2246          move.l    D3,D0
000015EA  E088      2247          lsr.l     #8,D0
000015EC  C0BC 0000 2248          and.l     #255,D0
000015F0  00FF      
000015F2  13C0 0040 2249          move.b    D0,4227078
000015F6  8006      
                    2250   ; IIC_CRSR = WRITE | IACK;
000015F8  13FC 0011 2251          move.b    #17,4227080
000015FC  0040 8008 
                    2252   ; checkTIP();
00001600  4E92      2253          jsr       (A2)
                    2254   ; checkAck();
00001602  4E93      2255          jsr       (A3)
                    2256   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2257   ; // Send the lower-order byte of the address
                    2258   ; IIC_TXRX = (blockAddress & 0xFF);
00001604  2003      2259          move.l    D3,D0
00001606  C0BC 0000 2260          and.l     #255,D0
0000160A  00FF      
0000160C  13C0 0040 2261          move.b    D0,4227078
00001610  8006      
                    2262   ; IIC_CRSR = WRITE | IACK;
00001612  13FC 0011 2263          move.b    #17,4227080
00001616  0040 8008 
                    2264   ; checkTIP();
0000161A  4E92      2265          jsr       (A2)
                    2266   ; checkAck();
0000161C  4E93      2267          jsr       (A3)
                    2268   ; while (pageFlag) {        
                    2269   EEPROMFlashPageWrite_10:
0000161E  4A87      2270          tst.l     D7
00001620  6700 0068 2271          beq       EEPROMFlashPageWrite_12
                    2272   ; IIC_TXRX = 0xAD; //data[currIndex];
00001624  13FC 00AD 2273          move.b    #173,4227078
00001628  0040 8006 
                    2274   ; if (currentAddress == 0xFFFF) {
0000162C  0C82 0000 2275          cmp.l     #65535,D2
00001630  FFFF      
00001632  6602      2276          bne.s     EEPROMFlashPageWrite_13
                    2277   ; deviceAddress = EEPROM1;  // Switch to next device for next byte
00001634  7A51      2278          moveq     #81,D5
                    2279   EEPROMFlashPageWrite_13:
                    2280   ; }
                    2281   ; if (blockAddress % 128 == 127 || currentAddress == endAddress - 1 || currentAddress == 0xFFFF) {
00001636  2F03      2282          move.l    D3,-(A7)
00001638  4878 0080 2283          pea       128
0000163C  4EB9 0000 2284          jsr       ULDIV
00001640  35C8      
00001642  202F 0004 2285          move.l    4(A7),D0
00001646  504F      2286          addq.w    #8,A7
00001648  0C80 0000 2287          cmp.l     #127,D0
0000164C  007F      
0000164E  6710      2288          beq.s     EEPROMFlashPageWrite_17
00001650  2006      2289          move.l    D6,D0
00001652  5380      2290          subq.l    #1,D0
00001654  B480      2291          cmp.l     D0,D2
00001656  6708      2292          beq.s     EEPROMFlashPageWrite_17
00001658  0C82 0000 2293          cmp.l     #65535,D2
0000165C  FFFF      
0000165E  6614      2294          bne.s     EEPROMFlashPageWrite_15
                    2295   EEPROMFlashPageWrite_17:
                    2296   ; IIC_CRSR = STOP | WRITE | IACK;
00001660  13FC 0051 2297          move.b    #81,4227080
00001664  0040 8008 
                    2298   ; pageFlag = 0;
00001668  7E00      2299          moveq     #0,D7
                    2300   ; checkTIP();
0000166A  4E92      2301          jsr       (A2)
                    2302   ; checkAck();
0000166C  4E93      2303          jsr       (A3)
                    2304   ; wait5ms();
0000166E  4EB8 1444 2305          jsr       _wait5ms
00001672  600C      2306          bra.s     EEPROMFlashPageWrite_16
                    2307   EEPROMFlashPageWrite_15:
                    2308   ; } else {
                    2309   ; IIC_CRSR = WRITE | IACK;
00001674  13FC 0011 2310          move.b    #17,4227080
00001678  0040 8008 
                    2311   ; checkTIP();
0000167C  4E92      2312          jsr       (A2)
                    2313   ; checkAck();
0000167E  4E93      2314          jsr       (A3)
                    2315   EEPROMFlashPageWrite_16:
                    2316   ; }
                    2317   ; // ("Current Address: %d, End Address: %d, Block Address: %d\n", currentAddress, endAddress, blockAddress);
                    2318   ; currIndex++;
00001680  52AE FFFC 2319          addq.l    #1,-4(A6)
                    2320   ; currentAddress++;
00001684  5282      2321          addq.l    #1,D2
                    2322   ; blockAddress++;  // Increment blockAddress WITH currentAddress
00001686  5283      2323          addq.l    #1,D3
00001688  6094      2324          bra       EEPROMFlashPageWrite_10
                    2325   EEPROMFlashPageWrite_12:
0000168A  6000 FF16 2326          bra       EEPROMFlashPageWrite_3
                    2327   EEPROMFlashPageWrite_5:
0000168E  4CDF 1CFC 2328          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4
00001692  4E5E      2329          unlk      A6
00001694  4E75      2330          rts
                    2331   ; }
                    2332   ; }
                    2333   ; }
                    2334   ; int EEPROMRandomRead(unsigned int deviceAddr, unsigned readAddr) {
                    2335   _EEPROMRandomRead:
00001696  4E56 FFFC 2336          link      A6,#-4
0000169A  48E7 0030 2337          movem.l   A2/A3,-(A7)
0000169E  45F8 1458 2338          lea       _checkTIP.L,A2
000016A2  47F8 1468 2339          lea       _checkAck.L,A3
                    2340   ; unsigned int readData;
                    2341   ; // Wait for bus to be idle
                    2342   ; // IICCoreEnable(); 
                    2343   ; checkTIP(); 
000016A6  4E92      2344          jsr       (A2)
                    2345   ; // Print TXRX register
                    2346   ; // Send start condition for a write
                    2347   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000016A8  202E 0008 2348          move.l    8(A6),D0
000016AC  E388      2349          lsl.l     #1,D0
000016AE  C0BC 0000 2350          and.l     #254,D0
000016B2  00FE      
000016B4  13C0 0040 2351          move.b    D0,4227078
000016B8  8006      
                    2352   ; IIC_CRSR = START | WRITE | IACK;
000016BA  13FC 0091 2353          move.b    #145,4227080
000016BE  0040 8008 
                    2354   ; checkTIP();
000016C2  4E92      2355          jsr       (A2)
                    2356   ; checkAck();
000016C4  4E93      2357          jsr       (A3)
                    2358   ; //printf("Sending Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2359   ; // Send the high-order byte of the address
                    2360   ; IIC_TXRX = (readAddr >> 8) & 0xFF;
000016C6  202E 000C 2361          move.l    12(A6),D0
000016CA  E088      2362          lsr.l     #8,D0
000016CC  C0BC 0000 2363          and.l     #255,D0
000016D0  00FF      
000016D2  13C0 0040 2364          move.b    D0,4227078
000016D6  8006      
                    2365   ; IIC_CRSR = WRITE | IACK;
000016D8  13FC 0011 2366          move.b    #17,4227080
000016DC  0040 8008 
                    2367   ; //printf("Sent Upper Memory Byte: %02x\n", readAddr >> 8);
                    2368   ; checkTIP();
000016E0  4E92      2369          jsr       (A2)
                    2370   ; checkAck();
000016E2  4E93      2371          jsr       (A3)
                    2372   ; // Send the low-order byte of the address
                    2373   ; IIC_TXRX = (readAddr & 0xFF);
000016E4  202E 000C 2374          move.l    12(A6),D0
000016E8  C0BC 0000 2375          and.l     #255,D0
000016EC  00FF      
000016EE  13C0 0040 2376          move.b    D0,4227078
000016F2  8006      
                    2377   ; IIC_CRSR = WRITE | IACK;
000016F4  13FC 0011 2378          move.b    #17,4227080
000016F8  0040 8008 
                    2379   ; //printf("Sent Lower Memory Byte: %02x\n", readAddr & 0xFF);
                    2380   ; checkTIP();
000016FC  4E92      2381          jsr       (A2)
                    2382   ; checkAck();
000016FE  4E93      2383          jsr       (A3)
                    2384   ; // send START condition again followed by slave address with R/W set to 1
                    2385   ; IIC_TXRX = ((deviceAddr << 1) | 0x01);
00001700  202E 0008 2386          move.l    8(A6),D0
00001704  E388      2387          lsl.l     #1,D0
00001706  80BC 0000 2388          or.l      #1,D0
0000170A  0001      
0000170C  13C0 0040 2389          move.b    D0,4227078
00001710  8006      
                    2390   ; IIC_CRSR = START | WRITE | IACK;
00001712  13FC 0091 2391          move.b    #145,4227080
00001716  0040 8008 
                    2392   ; checkTIP();
0000171A  4E92      2393          jsr       (A2)
                    2394   ; checkAck();
0000171C  4E93      2395          jsr       (A3)
                    2396   ; // IICStopCondition();
                    2397   ; IIC_CRSR = STOP | READ | IACK | NACK; // STOP + READ + IACK + NACK
0000171E  13FC 0069 2398          move.b    #105,4227080
00001722  0040 8008 
                    2399   ; checkTIP();
00001726  4E92      2400          jsr       (A2)
                    2401   ; // Check if IF flag is sent, and if so read the data
                    2402   ; while (!(IIC_CRSR & 0x1));
                    2403   EEPROMRandomRead_1:
00001728  1039 0040 2404          move.b    4227080,D0
0000172C  8008      
0000172E  C03C 0001 2405          and.b     #1,D0
00001732  6602      2406          bne.s     EEPROMRandomRead_3
00001734  60F2      2407          bra       EEPROMRandomRead_1
                    2408   EEPROMRandomRead_3:
                    2409   ; IIC_CRSR = 0;
00001736  4239 0040 2410          clr.b     4227080
0000173A  8008      
                    2411   ; readData = IIC_TXRX;
0000173C  1039 0040 2412          move.b    4227078,D0
00001740  8006      
00001742  C0BC 0000 2413          and.l     #255,D0
00001746  00FF      
00001748  2D40 FFFC 2414          move.l    D0,-4(A6)
                    2415   ; return readData;    
0000174C  202E FFFC 2416          move.l    -4(A6),D0
00001750  4CDF 0C00 2417          movem.l   (A7)+,A2/A3
00001754  4E5E      2418          unlk      A6
00001756  4E75      2419          rts
                    2420   ; }
                    2421   ; void EEPROMReadBlock0(unsigned int startAddr, int* readLen) {
                    2422   _EEPROMReadBlock0:
00001758  4E56 FFFC 2423          link      A6,#-4
0000175C  48E7 3C30 2424          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00001760  45F8 1458 2425          lea       _checkTIP.L,A2
00001764  47F8 1468 2426          lea       _checkAck.L,A3
00001768  262E 0008 2427          move.l    8(A6),D3
                    2428   ; unsigned int currAddr;
                    2429   ; unsigned int endAddr;
                    2430   ; unsigned int readData;
                    2431   ; int exitFlag = 0;
0000176C  4285      2432          clr.l     D5
                    2433   ; startAddr = startAddr & 0xFFFF; // Mask to 16 bits
0000176E  C6BC 0000 2434          and.l     #65535,D3
00001772  FFFF      
                    2435   ; currAddr = startAddr;
00001774  2403      2436          move.l    D3,D2
                    2437   ; endAddr = startAddr + *readLen;
00001776  2003      2438          move.l    D3,D0
00001778  206E 000C 2439          move.l    12(A6),A0
0000177C  D090      2440          add.l     (A0),D0
0000177E  2800      2441          move.l    D0,D4
                    2442   ; //printf("Start Addr: %d\n Curr Addr: %d, Read Len: %d\n", startAddr, currAddr, *readLen);
                    2443   ; checkTIP();
00001780  4E92      2444          jsr       (A2)
                    2445   ; IIC_TXRX = ((EEPROM0 << 1) & 0xFE); // Send EEPROM address with write bit
00001782  13FC 00A0 2446          move.b    #160,4227078
00001786  0040 8006 
                    2447   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
0000178A  13FC 0091 2448          move.b    #145,4227080
0000178E  0040 8008 
                    2449   ; checkTIP();
00001792  4E92      2450          jsr       (A2)
                    2451   ; checkAck(); 
00001794  4E93      2452          jsr       (A3)
                    2453   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
00001796  2002      2454          move.l    D2,D0
00001798  E088      2455          lsr.l     #8,D0
0000179A  C0BC 0000 2456          and.l     #255,D0
0000179E  00FF      
000017A0  13C0 0040 2457          move.b    D0,4227078
000017A4  8006      
                    2458   ; IIC_CRSR = WRITE | IACK; // Write command
000017A6  13FC 0011 2459          move.b    #17,4227080
000017AA  0040 8008 
                    2460   ; checkTIP();
000017AE  4E92      2461          jsr       (A2)
                    2462   ; checkAck();
000017B0  4E93      2463          jsr       (A3)
                    2464   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
000017B2  2002      2465          move.l    D2,D0
000017B4  C0BC 0000 2466          and.l     #255,D0
000017B8  00FF      
000017BA  13C0 0040 2467          move.b    D0,4227078
000017BE  8006      
                    2468   ; IIC_CRSR = WRITE | IACK; // Write command
000017C0  13FC 0011 2469          move.b    #17,4227080
000017C4  0040 8008 
                    2470   ; checkTIP();
000017C8  4E92      2471          jsr       (A2)
                    2472   ; checkAck();
000017CA  4E93      2473          jsr       (A3)
                    2474   ; // Repeated start condition here:
                    2475   ; IIC_TXRX = ((EEPROM0 << 1) | 0x01); // (A3) Send EEPROM address with read bit
000017CC  13FC 00A1 2476          move.b    #161,4227078
000017D0  0040 8006 
                    2477   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
000017D4  13FC 0091 2478          move.b    #145,4227080
000017D8  0040 8008 
                    2479   ; checkTIP();
000017DC  4E92      2480          jsr       (A2)
                    2481   ; checkAck();
000017DE  4E93      2482          jsr       (A3)
                    2483   ; // Evaluate data here
                    2484   ; for (currAddr = startAddr; currAddr < endAddr; currAddr++) {
000017E0  2403      2485          move.l    D3,D2
                    2486   EEPROMReadBlock0_1:
000017E2  B484      2487          cmp.l     D4,D2
000017E4  6400 009A 2488          bhs       EEPROMReadBlock0_3
                    2489   ; if (currAddr == 0xFFFF || currAddr == endAddr - 1) {
000017E8  0C82 0000 2490          cmp.l     #65535,D2
000017EC  FFFF      
000017EE  6708      2491          beq.s     EEPROMReadBlock0_6
000017F0  2004      2492          move.l    D4,D0
000017F2  5380      2493          subq.l    #1,D0
000017F4  B480      2494          cmp.l     D0,D2
000017F6  660C      2495          bne.s     EEPROMReadBlock0_4
                    2496   EEPROMReadBlock0_6:
                    2497   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
000017F8  13FC 0069 2498          move.b    #105,4227080
000017FC  0040 8008 
                    2499   ; exitFlag = 1;
00001800  7A01      2500          moveq     #1,D5
00001802  6008      2501          bra.s     EEPROMReadBlock0_5
                    2502   EEPROMReadBlock0_4:
                    2503   ; } else {
                    2504   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
00001804  13FC 0021 2505          move.b    #33,4227080
00001808  0040 8008 
                    2506   EEPROMReadBlock0_5:
                    2507   ; }
                    2508   ; (*readLen)--;
0000180C  206E 000C 2509          move.l    12(A6),A0
00001810  5390      2510          subq.l    #1,(A0)
                    2511   ; checkTIP();
00001812  4E92      2512          jsr       (A2)
                    2513   ; checkAck(); // Check for ACK
00001814  4E93      2514          jsr       (A3)
                    2515   ; // Read data from EEPROM
                    2516   ; while (!(IIC_CRSR & 0x1)); // Wait for IF flag to be set
                    2517   EEPROMReadBlock0_7:
00001816  1039 0040 2518          move.b    4227080,D0
0000181A  8008      
0000181C  C03C 0001 2519          and.b     #1,D0
00001820  6602      2520          bne.s     EEPROMReadBlock0_9
00001822  60F2      2521          bra       EEPROMReadBlock0_7
                    2522   EEPROMReadBlock0_9:
                    2523   ; IIC_CRSR = 0; // Clear IF flag
00001824  4239 0040 2524          clr.b     4227080
00001828  8008      
                    2525   ; readData = IIC_TXRX; // Read data from EEPROM
0000182A  1039 0040 2526          move.b    4227078,D0
0000182E  8006      
00001830  C0BC 0000 2527          and.l     #255,D0
00001834  00FF      
00001836  2D40 FFFC 2528          move.l    D0,-4(A6)
                    2529   ; if ((currAddr % 1000) == 0) {
0000183A  2F02      2530          move.l    D2,-(A7)
0000183C  4878 03E8 2531          pea       1000
00001840  4EB9 0000 2532          jsr       ULDIV
00001844  35C8      
00001846  202F 0004 2533          move.l    4(A7),D0
0000184A  504F      2534          addq.w    #8,A7
0000184C  4A80      2535          tst.l     D0
0000184E  6616      2536          bne.s     EEPROMReadBlock0_10
                    2537   ; printf("\r\n Block 0 Address: 0x%04X: %d\n", currAddr, readData);
00001850  2F2E FFFC 2538          move.l    -4(A6),-(A7)
00001854  2F02      2539          move.l    D2,-(A7)
00001856  4879 0000 2540          pea       @m68kde~1_30.L
0000185A  4D1E      
0000185C  4EB9 0000 2541          jsr       _printf
00001860  4062      
00001862  DEFC 000C 2542          add.w     #12,A7
                    2543   EEPROMReadBlock0_10:
                    2544   ; }
                    2545   ; if (exitFlag) {
00001866  4A85      2546          tst.l     D5
00001868  6710      2547          beq.s     EEPROMReadBlock0_12
                    2548   ; printf("\r\n Exiting EEPROM Read Block 0\n");
0000186A  4879 0000 2549          pea       @m68kde~1_31.L
0000186E  4D3E      
00001870  4EB9 0000 2550          jsr       _printf
00001874  4062      
00001876  584F      2551          addq.w    #4,A7
                    2552   ; break;
00001878  6006      2553          bra.s     EEPROMReadBlock0_3
                    2554   EEPROMReadBlock0_12:
0000187A  5282      2555          addq.l    #1,D2
0000187C  6000 FF64 2556          bra       EEPROMReadBlock0_1
                    2557   EEPROMReadBlock0_3:
00001880  4CDF 0C3C 2558          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00001884  4E5E      2559          unlk      A6
00001886  4E75      2560          rts
                    2561   ; }
                    2562   ; }
                    2563   ; }
                    2564   ; // STILL NEED TO TEST BLOCK 1 MORE AND CROSSING THE BLOCK BOUNDARY
                    2565   ; void EEPROMReadBlock1(int startAddr, int* readLen) {
                    2566   _EEPROMReadBlock1:
00001888  4E56 FFF8 2567          link      A6,#-8
0000188C  48E7 3030 2568          movem.l   D2/D3/A2/A3,-(A7)
00001890  45F8 1458 2569          lea       _checkTIP.L,A2
00001894  47F8 1468 2570          lea       _checkAck.L,A3
                    2571   ; unsigned int currAddr = startAddr & 0xFFFF; // Mask to 16 bits
00001898  202E 0008 2572          move.l    8(A6),D0
0000189C  C0BC 0000 2573          and.l     #65535,D0
000018A0  FFFF      
000018A2  2400      2574          move.l    D0,D2
                    2575   ; unsigned int endAddr = currAddr + *readLen;
000018A4  2002      2576          move.l    D2,D0
000018A6  206E 000C 2577          move.l    12(A6),A0
000018AA  D090      2578          add.l     (A0),D0
000018AC  2D40 FFF8 2579          move.l    D0,-8(A6)
                    2580   ; unsigned int readData;
                    2581   ; int exitFlag = 0;
000018B0  4283      2582          clr.l     D3
                    2583   ; checkTIP();
000018B2  4E92      2584          jsr       (A2)
                    2585   ; IIC_TXRX = ((EEPROM1 << 1) & 0xFE); // Send EEPROM address with write bit
000018B4  13FC 00A2 2586          move.b    #162,4227078
000018B8  0040 8006 
                    2587   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
000018BC  13FC 0091 2588          move.b    #145,4227080
000018C0  0040 8008 
                    2589   ; checkTIP();
000018C4  4E92      2590          jsr       (A2)
                    2591   ; checkAck(); 
000018C6  4E93      2592          jsr       (A3)
                    2593   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
000018C8  2002      2594          move.l    D2,D0
000018CA  E088      2595          lsr.l     #8,D0
000018CC  C0BC 0000 2596          and.l     #255,D0
000018D0  00FF      
000018D2  13C0 0040 2597          move.b    D0,4227078
000018D6  8006      
                    2598   ; IIC_CRSR = WRITE | IACK; // Write command
000018D8  13FC 0011 2599          move.b    #17,4227080
000018DC  0040 8008 
                    2600   ; checkTIP();
000018E0  4E92      2601          jsr       (A2)
                    2602   ; checkAck();
000018E2  4E93      2603          jsr       (A3)
                    2604   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
000018E4  2002      2605          move.l    D2,D0
000018E6  C0BC 0000 2606          and.l     #255,D0
000018EA  00FF      
000018EC  13C0 0040 2607          move.b    D0,4227078
000018F0  8006      
                    2608   ; IIC_CRSR = WRITE | IACK; // Write command
000018F2  13FC 0011 2609          move.b    #17,4227080
000018F6  0040 8008 
                    2610   ; checkTIP();
000018FA  4E92      2611          jsr       (A2)
                    2612   ; checkAck();
000018FC  4E93      2613          jsr       (A3)
                    2614   ; // Repeated start condition here:
                    2615   ; IIC_TXRX = ((EEPROM1 << 1) | 0x01); // (A3) Send EEPROM address with read bit
000018FE  13FC 00A3 2616          move.b    #163,4227078
00001902  0040 8006 
                    2617   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
00001906  13FC 0091 2618          move.b    #145,4227080
0000190A  0040 8008 
                    2619   ; checkTIP();
0000190E  4E92      2620          jsr       (A2)
                    2621   ; checkAck();
00001910  4E93      2622          jsr       (A3)
                    2623   ; // Evaluate data here
                    2624   ; for (currAddr = startAddr & 0xFFFF; currAddr < endAddr; currAddr++) {
00001912  202E 0008 2625          move.l    8(A6),D0
00001916  C0BC 0000 2626          and.l     #65535,D0
0000191A  FFFF      
0000191C  2400      2627          move.l    D0,D2
                    2628   EEPROMReadBlock1_1:
0000191E  B4AE FFF8 2629          cmp.l     -8(A6),D2
00001922  6400 009A 2630          bhs       EEPROMReadBlock1_3
                    2631   ; if (currAddr == 0xFFFF) {
00001926  0C82 0000 2632          cmp.l     #65535,D2
0000192A  FFFF      
0000192C  660C      2633          bne.s     EEPROMReadBlock1_4
                    2634   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
0000192E  13FC 0069 2635          move.b    #105,4227080
00001932  0040 8008 
                    2636   ; exitFlag = 1;
00001936  7601      2637          moveq     #1,D3
00001938  6008      2638          bra.s     EEPROMReadBlock1_5
                    2639   EEPROMReadBlock1_4:
                    2640   ; } else {
                    2641   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
0000193A  13FC 0021 2642          move.b    #33,4227080
0000193E  0040 8008 
                    2643   EEPROMReadBlock1_5:
                    2644   ; }
                    2645   ; (*readLen)--;
00001942  206E 000C 2646          move.l    12(A6),A0
00001946  5390      2647          subq.l    #1,(A0)
                    2648   ; checkTIP();
00001948  4E92      2649          jsr       (A2)
                    2650   ; checkAck(); // Check for ACK
0000194A  4E93      2651          jsr       (A3)
                    2652   ; // Read data from EEPROM
                    2653   ; while (!IIC_CRSR & 0x1); // Wait for IF flag to be set
                    2654   EEPROMReadBlock1_6:
0000194C  4A39 0040 2655          tst.b     4227080
00001950  8008      
00001952  6604      2656          bne.s     EEPROMReadBlock1_9
00001954  7001      2657          moveq     #1,D0
00001956  6002      2658          bra.s     EEPROMReadBlock1_10
                    2659   EEPROMReadBlock1_9:
00001958  4280      2660          clr.l     D0
                    2661   EEPROMReadBlock1_10:
0000195A  C03C 0001 2662          and.b     #1,D0
0000195E  6702      2663          beq.s     EEPROMReadBlock1_8
00001960  60EA      2664          bra       EEPROMReadBlock1_6
                    2665   EEPROMReadBlock1_8:
                    2666   ; IIC_CRSR = 0; // Clear IF flag
00001962  4239 0040 2667          clr.b     4227080
00001966  8008      
                    2668   ; readData = IIC_TXRX; // Read data from EEPROM
00001968  1039 0040 2669          move.b    4227078,D0
0000196C  8006      
0000196E  C0BC 0000 2670          and.l     #255,D0
00001972  00FF      
00001974  2D40 FFFC 2671          move.l    D0,-4(A6)
                    2672   ; if ((currAddr % 1000) == 0) {
00001978  2F02      2673          move.l    D2,-(A7)
0000197A  4878 03E8 2674          pea       1000
0000197E  4EB9 0000 2675          jsr       ULDIV
00001982  35C8      
00001984  202F 0004 2676          move.l    4(A7),D0
00001988  504F      2677          addq.w    #8,A7
0000198A  4A80      2678          tst.l     D0
0000198C  6616      2679          bne.s     EEPROMReadBlock1_11
                    2680   ; printf("\r\n Block 1 Address: 0x%04X: %d\n", currAddr, readData);
0000198E  2F2E FFFC 2681          move.l    -4(A6),-(A7)
00001992  2F02      2682          move.l    D2,-(A7)
00001994  4879 0000 2683          pea       @m68kde~1_32.L
00001998  4D5E      
0000199A  4EB9 0000 2684          jsr       _printf
0000199E  4062      
000019A0  DEFC 000C 2685          add.w     #12,A7
                    2686   EEPROMReadBlock1_11:
                    2687   ; }
                    2688   ; if (exitFlag) {
000019A4  4A83      2689          tst.l     D3
000019A6  6710      2690          beq.s     EEPROMReadBlock1_13
                    2691   ; printf("\r\n Exiting EEPROM Read Block 1\n");
000019A8  4879 0000 2692          pea       @m68kde~1_33.L
000019AC  4D7E      
000019AE  4EB9 0000 2693          jsr       _printf
000019B2  4062      
000019B4  584F      2694          addq.w    #4,A7
                    2695   ; break;
000019B6  6006      2696          bra.s     EEPROMReadBlock1_3
                    2697   EEPROMReadBlock1_13:
000019B8  5282      2698          addq.l    #1,D2
000019BA  6000 FF62 2699          bra       EEPROMReadBlock1_1
                    2700   EEPROMReadBlock1_3:
000019BE  4CDF 0C0C 2701          movem.l   (A7)+,D2/D3/A2/A3
000019C2  4E5E      2702          unlk      A6
000019C4  4E75      2703          rts
                    2704   ; }
                    2705   ; }
                    2706   ; }
                    2707   ; int EEPROMSequentialRead(unsigned int startGlobalAddr, int readLen) {
                    2708   _EEPROMSequentialRead:
000019C6  4E56 0000 2709          link      A6,#0
000019CA  48E7 2020 2710          movem.l   D2/A2,-(A7)
000019CE  45EE 000C 2711          lea       12(A6),A2
000019D2  242E 0008 2712          move.l    8(A6),D2
                    2713   ; // REMOVE THIS: startGlobalAddr = startGlobalAddr & 0xFFFF;
                    2714   ; if (startGlobalAddr <= 0xFFFF) {
000019D6  0C82 0000 2715          cmp.l     #65535,D2
000019DA  FFFF      
000019DC  6220      2716          bhi.s     EEPROMSequentialRead_1
                    2717   ; EEPROMReadBlock0(startGlobalAddr, &readLen);
000019DE  2F0A      2718          move.l    A2,-(A7)
000019E0  2F02      2719          move.l    D2,-(A7)
000019E2  4EB8 1758 2720          jsr       _EEPROMReadBlock0
000019E6  504F      2721          addq.w    #8,A7
                    2722   ; if (readLen > 0) {
000019E8  2012      2723          move.l    (A2),D0
000019EA  0C80 0000 2724          cmp.l     #0,D0
000019EE  0000      
000019F0  6F0A      2725          ble.s     EEPROMSequentialRead_3
                    2726   ; EEPROMReadBlock1(0, &readLen);
000019F2  2F0A      2727          move.l    A2,-(A7)
000019F4  42A7      2728          clr.l     -(A7)
000019F6  4EB8 1888 2729          jsr       _EEPROMReadBlock1
000019FA  504F      2730          addq.w    #8,A7
                    2731   EEPROMSequentialRead_3:
000019FC  6012      2732          bra.s     EEPROMSequentialRead_2
                    2733   EEPROMSequentialRead_1:
                    2734   ; }
                    2735   ; } else {
                    2736   ; EEPROMReadBlock1(startGlobalAddr - 0x10000, &readLen);
000019FE  2F0A      2737          move.l    A2,-(A7)
00001A00  2202      2738          move.l    D2,D1
00001A02  0481 0001 2739          sub.l     #65536,D1
00001A06  0000      
00001A08  2F01      2740          move.l    D1,-(A7)
00001A0A  4EB8 1888 2741          jsr       _EEPROMReadBlock1
00001A0E  504F      2742          addq.w    #8,A7
                    2743   EEPROMSequentialRead_2:
00001A10  4CDF 0404 2744          movem.l   (A7)+,D2/A2
00001A14  4E5E      2745          unlk      A6
00001A16  4E75      2746          rts
                    2747   ; }
                    2748   ; }
                    2749   ; I2CTest() {
                    2750   _I2CTest:
00001A18  4E56 F7F0 2751          link      A6,#-2064
00001A1C  48E7 2038 2752          movem.l   D2/A2/A3/A4,-(A7)
00001A20  45F8 19C6 2753          lea       _EEPROMSequentialRead.L,A2
00001A24  47F9 0000 2754          lea       _printf.L,A3
00001A28  4062      
00001A2A  49EE F7F4 2755          lea       -2060(A6),A4
                    2756   ; unsigned int arraySize = 512;
00001A2E  2D7C 0000 2757          move.l    #512,-2064(A6)
00001A32  0200 F7F0 
                    2758   ; unsigned int IICData[512];
                    2759   ; unsigned int i;
                    2760   ; unsigned int writeData = 0xAB;
00001A36  2D7C 0000 2761          move.l    #171,-12(A6)
00001A3A  00AB FFF4 
                    2762   ; unsigned int readData;
                    2763   ; unsigned int totalBytes = 0x20000;
00001A3E  2D7C 0002 2764          move.l    #131072,-4(A6)
00001A42  0000 FFFC 
                    2765   ; for (i = 0; i < arraySize; i++) {
00001A46  4282      2766          clr.l     D2
                    2767   I2CTest_1:
00001A48  B4AE F7F0 2768          cmp.l     -2064(A6),D2
00001A4C  642C      2769          bhs.s     I2CTest_3
                    2770   ; IICData[i] = (i % 50) + 1;
00001A4E  2F02      2771          move.l    D2,-(A7)
00001A50  4878 0032 2772          pea       50
00001A54  4EB9 0000 2773          jsr       ULDIV
00001A58  35C8      
00001A5A  202F 0004 2774          move.l    4(A7),D0
00001A5E  504F      2775          addq.w    #8,A7
00001A60  5280      2776          addq.l    #1,D0
00001A62  2202      2777          move.l    D2,D1
00001A64  E589      2778          lsl.l     #2,D1
00001A66  2980 1800 2779          move.l    D0,0(A4,D1.L)
                    2780   ; IICData[i] = 0xAA;
00001A6A  2002      2781          move.l    D2,D0
00001A6C  E588      2782          lsl.l     #2,D0
00001A6E  29BC 0000 2783          move.l    #170,0(A4,D0.L)
00001A72  00AA 0800 
00001A76  5282      2784          addq.l    #1,D2
00001A78  60CE      2785          bra       I2CTest_1
                    2786   I2CTest_3:
                    2787   ; } 
                    2788   ; printf("\r\n I2C Test\n");
00001A7A  4879 0000 2789          pea       @m68kde~1_34.L
00001A7E  4D9E      
00001A80  4E93      2790          jsr       (A3)
00001A82  584F      2791          addq.w    #4,A7
                    2792   ; IIC_Init();  
00001A84  4EB8 1428 2793          jsr       _IIC_Init
                    2794   ; printf("Page Write\n");
00001A88  4879 0000 2795          pea       @m68kde~1_35.L
00001A8C  4DAC      
00001A8E  4E93      2796          jsr       (A3)
00001A90  584F      2797          addq.w    #4,A7
                    2798   ; EEPROMFlashPageWrite(IICData, 0x0, totalBytes); // Write data to EEPROM
00001A92  2F2E FFFC 2799          move.l    -4(A6),-(A7)
00001A96  42A7      2800          clr.l     -(A7)
00001A98  2F0C      2801          move.l    A4,-(A7)
00001A9A  4EB8 1540 2802          jsr       _EEPROMFlashPageWrite
00001A9E  DEFC 000C 2803          add.w     #12,A7
                    2804   ; printf("Sequential Read\n");
00001AA2  4879 0000 2805          pea       @m68kde~1_36.L
00001AA6  4DB8      
00001AA8  4E93      2806          jsr       (A3)
00001AAA  584F      2807          addq.w    #4,A7
                    2808   ; EEPROMSequentialRead(0x0000, 32768);  // First 32KB
00001AAC  4878 8000 2809          pea       32768
00001AB0  42A7      2810          clr.l     -(A7)
00001AB2  4E92      2811          jsr       (A2)
00001AB4  504F      2812          addq.w    #8,A7
                    2813   ; EEPROMSequentialRead(0x8000, 32768);  // Second 32KB
00001AB6  4878 8000 2814          pea       32768
00001ABA  4878 8000 2815          pea       32768
00001ABE  4E92      2816          jsr       (A2)
00001AC0  504F      2817          addq.w    #8,A7
                    2818   ; EEPROMSequentialRead(0x10000, 32768); // Third 32KB
00001AC2  4878 8000 2819          pea       32768
00001AC6  4879 0001 2820          pea       65536
00001ACA  0000      
00001ACC  4E92      2821          jsr       (A2)
00001ACE  504F      2822          addq.w    #8,A7
                    2823   ; EEPROMSequentialRead(0x18000, 32768); // Fourth 32KB
00001AD0  4878 8000 2824          pea       32768
00001AD4  4879 0001 2825          pea       98304
00001AD8  8000      
00001ADA  4E92      2826          jsr       (A2)
00001ADC  504F      2827          addq.w    #8,A7
                    2828   ; // printf("\r\n Starting EEPROM Write: Writing 0x%.2x to address 0x00\n", writeData); // Debug: Indicate the start of EEPROM write
                    2829   ; // for (i = 0x0; i < 0x5; i++) {
                    2830   ; //   printf("\r\n Writing %d to address %d\n", i * 5, i);
                    2831   ; //   EEPROMByteWrite(i * 5, EEPROM1, i); // Write data to EEPROM
                    2832   ; // }
                    2833   ; // printf("\r\nFinished write, Starting EEPROM Read\n");
                    2834   ; // for (i = 0; i < 5; i++) {
                    2835   ; //   readData = EEPROMRandomRead(EEPROM1, i); // Read data from EEPROM
                    2836   ; //   printf("\r\n Address: %d: %d\n", i, readData); // Debug: Indicate the address being read and the data read
                    2837   ; // }
                    2838   ; // readData = EEPROMRandomRead(EEPROM0, 0x0);
                    2839   ; IICCoreDisable();
00001ADE  4EB8 141E 2840          jsr       _IICCoreDisable
00001AE2  4CDF 1C04 2841          movem.l   (A7)+,D2/A2/A3/A4
00001AE6  4E5E      2842          unlk      A6
00001AE8  4E75      2843          rts
                    2844   ; }
                    2845   ; // Initialize and enable I2C controller
                    2846   ; // No interrupts and set clock frequency to 100Khz
                    2847   ; // Connect controller to 25 or 45 Mhz CPU clock
                    2848   ; // Check if device is ready before writing anything over I2C bus ie) TX register has written previous command.
                    2849   ; // Check the status register TIP bit to see when transmission has finished
                    2850   ; // Wait for ACK from slave after each write
                    2851   ; // Transmit a byte to the I2C bus
                    2852   ; // write the data to be transmitted into TX register and then write something to the command register that indiciates that you want to write
                    2853   ; // If you want to generate a start or stop condition, set the STA or STO bits in command register when you write to it,
                    2854   ; // Clear the ACK bit if you want to generate an ACK when reading data back from the slave
                    2855   ; // EEPROM Functions
                    2856   ; // Write a byte to the EEPROM
                    2857   ; // Start write by writing a slave address and sett bit 0 of the data to be transmitted to 0, to indicate that you are writing an address to the slave
                    2858   ; // Generate start condition, and set the bit select and chip select bits, and set bits [7:4] to 1010
                    2859   ; // Write 2 bytes which correspond to the the 2 byte internal 64k address inside the chip, and then write the data to be stored at that address
                    2860   ; // Read a byte from the EEPROM
                    2861   ; // Write a slave address along with a start condition
                    2862   ; // Write 2 bytes which correspond to the 2 internal address bytes of the EEPROM
                    2863   ; // Send repeated start condition and set RD bit and ACK bit in command register
                    2864   ; // Set stop bit, and don't forget to set IACK bit to clear any pending interrupt flag
                    2865   ; // When data is recieved from slave, you can find it in the I2C Rx register
                    2866   ; // Poll I2C controller to determine when the data has been read from the slave which can be done by checking the IF flag in status register
                    2867   ; // when IF flag == 1, the data has been received.
                    2868   ; // Clear the IF flag with each byte read 
                    2869   ; // If slave does not recieve ACK from I2C controller, it will not send any more data
                    2870   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2871   ; // IMPORTANT
                    2872   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2873   ; // has to be done with an interrupt (IRQ Level 6)
                    2874   ; //
                    2875   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2876   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2877   ; //
                    2878   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2879   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2880   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2881   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2882   ; // program area
                    2883   ; //
                    2884   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2885   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2886   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2887   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2888   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2889   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2890   ; void DumpRegisters()
                    2891   ; {
                    2892   _DumpRegisters:
00001AEA  48E7 3F3C 2893          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001AEE  45F9 0000 2894          lea       _putch.L,A2
00001AF2  36A6      
00001AF4  47F9 0000 2895          lea       _printf.L,A3
00001AF8  4062      
00001AFA  49F9 0B00 2896          lea       _SR.L,A4
00001AFE  012C      
00001B00  4BF9 0B00 2897          lea       _WatchPointString.L,A5
00001B04  01C2      
                    2898   ; short i, x, j, k ;
                    2899   ; unsigned char c, *BytePointer;
                    2900   ; // buld up strings for displaying watchpoints
                    2901   ; for(x = 0; x < (short)(8); x++)
00001B06  4242      2902          clr.w     D2
                    2903   DumpRegisters_1:
00001B08  0C42 0008 2904          cmp.w     #8,D2
00001B0C  6C00 01C6 2905          bge       DumpRegisters_3
                    2906   ; {
                    2907   ; if(WatchPointSetOrCleared[x] == 1)
00001B10  48C2      2908          ext.l     D2
00001B12  2002      2909          move.l    D2,D0
00001B14  E588      2910          lsl.l     #2,D0
00001B16  41F9 0B00 2911          lea       _WatchPointSetOrCleared.L,A0
00001B1A  01A2      
00001B1C  2030 0800 2912          move.l    0(A0,D0.L),D0
00001B20  0C80 0000 2913          cmp.l     #1,D0
00001B24  0001      
00001B26  6600 0186 2914          bne       DumpRegisters_4
                    2915   ; {
                    2916   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001B2A  48C2      2917          ext.l     D2
00001B2C  2202      2918          move.l    D2,D1
00001B2E  E589      2919          lsl.l     #2,D1
00001B30  41F9 0B00 2920          lea       _WatchPointAddress.L,A0
00001B34  0182      
00001B36  2F30 1800 2921          move.l    0(A0,D1.L),-(A7)
00001B3A  4879 0000 2922          pea       @m68kde~1_37.L
00001B3E  4DCA      
00001B40  220D      2923          move.l    A5,D1
00001B42  48C2      2924          ext.l     D2
00001B44  2F00      2925          move.l    D0,-(A7)
00001B46  2002      2926          move.l    D2,D0
00001B48  C1FC 0064 2927          muls      #100,D0
00001B4C  D280      2928          add.l     D0,D1
00001B4E  201F      2929          move.l    (A7)+,D0
00001B50  2F01      2930          move.l    D1,-(A7)
00001B52  4EB9 0000 2931          jsr       _sprintf
00001B56  373E      
00001B58  DEFC 000C 2932          add.w     #12,A7
                    2933   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001B5C  48C2      2934          ext.l     D2
00001B5E  2002      2935          move.l    D2,D0
00001B60  E588      2936          lsl.l     #2,D0
00001B62  41F9 0B00 2937          lea       _WatchPointAddress.L,A0
00001B66  0182      
00001B68  2A30 0800 2938          move.l    0(A0,D0.L),D5
                    2939   ; for(j = 0; j < (short)(16); j+=2)
00001B6C  4243      2940          clr.w     D3
                    2941   DumpRegisters_6:
00001B6E  0C43 0010 2942          cmp.w     #16,D3
00001B72  6C00 0082 2943          bge       DumpRegisters_8
                    2944   ; {
                    2945   ; for(k = 0; k < (short)(2); k++)
00001B76  4246      2946          clr.w     D6
                    2947   DumpRegisters_9:
00001B78  0C46 0002 2948          cmp.w     #2,D6
00001B7C  6C00 0052 2949          bge       DumpRegisters_11
                    2950   ; {
                    2951   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001B80  2045      2952          move.l    D5,A0
00001B82  48C3      2953          ext.l     D3
00001B84  2203      2954          move.l    D3,D1
00001B86  48C6      2955          ext.l     D6
00001B88  D286      2956          add.l     D6,D1
00001B8A  1230 1800 2957          move.b    0(A0,D1.L),D1
00001B8E  C2BC 0000 2958          and.l     #255,D1
00001B92  00FF      
00001B94  2F01      2959          move.l    D1,-(A7)
00001B96  4879 0000 2960          pea       @m68kde~1_8.L
00001B9A  4AB0      
00001B9C  4879 0B00 2961          pea       _TempString.L
00001BA0  04E2      
00001BA2  4EB9 0000 2962          jsr       _sprintf
00001BA6  373E      
00001BA8  DEFC 000C 2963          add.w     #12,A7
                    2964   ; strcat(WatchPointString[x], TempString) ;
00001BAC  4879 0B00 2965          pea       _TempString.L
00001BB0  04E2      
00001BB2  220D      2966          move.l    A5,D1
00001BB4  48C2      2967          ext.l     D2
00001BB6  2F00      2968          move.l    D0,-(A7)
00001BB8  2002      2969          move.l    D2,D0
00001BBA  C1FC 0064 2970          muls      #100,D0
00001BBE  D280      2971          add.l     D0,D1
00001BC0  201F      2972          move.l    (A7)+,D0
00001BC2  2F01      2973          move.l    D1,-(A7)
00001BC4  4EB9 0000 2974          jsr       _strcat
00001BC8  378A      
00001BCA  504F      2975          addq.w    #8,A7
00001BCC  5246      2976          addq.w    #1,D6
00001BCE  60A8      2977          bra       DumpRegisters_9
                    2978   DumpRegisters_11:
                    2979   ; }
                    2980   ; strcat(WatchPointString[x]," ") ;
00001BD0  4879 0000 2981          pea       @m68kde~1_38.L
00001BD4  4DD2      
00001BD6  220D      2982          move.l    A5,D1
00001BD8  48C2      2983          ext.l     D2
00001BDA  2F00      2984          move.l    D0,-(A7)
00001BDC  2002      2985          move.l    D2,D0
00001BDE  C1FC 0064 2986          muls      #100,D0
00001BE2  D280      2987          add.l     D0,D1
00001BE4  201F      2988          move.l    (A7)+,D0
00001BE6  2F01      2989          move.l    D1,-(A7)
00001BE8  4EB9 0000 2990          jsr       _strcat
00001BEC  378A      
00001BEE  504F      2991          addq.w    #8,A7
00001BF0  5443      2992          addq.w    #2,D3
00001BF2  6000 FF7A 2993          bra       DumpRegisters_6
                    2994   DumpRegisters_8:
                    2995   ; }
                    2996   ; strcat(WatchPointString[x], "  ") ;
00001BF6  4879 0000 2997          pea       @m68kde~1_9.L
00001BFA  4AB6      
00001BFC  220D      2998          move.l    A5,D1
00001BFE  48C2      2999          ext.l     D2
00001C00  2F00      3000          move.l    D0,-(A7)
00001C02  2002      3001          move.l    D2,D0
00001C04  C1FC 0064 3002          muls      #100,D0
00001C08  D280      3003          add.l     D0,D1
00001C0A  201F      3004          move.l    (A7)+,D0
00001C0C  2F01      3005          move.l    D1,-(A7)
00001C0E  4EB9 0000 3006          jsr       _strcat
00001C12  378A      
00001C14  504F      3007          addq.w    #8,A7
                    3008   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001C16  48C2      3009          ext.l     D2
00001C18  2002      3010          move.l    D2,D0
00001C1A  E588      3011          lsl.l     #2,D0
00001C1C  41F9 0B00 3012          lea       _WatchPointAddress.L,A0
00001C20  0182      
00001C22  2A30 0800 3013          move.l    0(A0,D0.L),D5
                    3014   ; for(j = 0; j < (short)(16); j++)
00001C26  4243      3015          clr.w     D3
                    3016   DumpRegisters_12:
00001C28  0C43 0010 3017          cmp.w     #16,D3
00001C2C  6C00 007E 3018          bge       DumpRegisters_14
                    3019   ; {
                    3020   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001C30  2045      3021          move.l    D5,A0
00001C32  48C3      3022          ext.l     D3
00001C34  1030 3800 3023          move.b    0(A0,D3.L),D0
00001C38  C03C 007F 3024          and.b     #127,D0
00001C3C  1E00      3025          move.b    D0,D7
                    3026   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001C3E  0C07 007F 3027          cmp.b     #127,D7
00001C42  6206      3028          bhi.s     DumpRegisters_17
00001C44  0C07 0020 3029          cmp.b     #32,D7
00001C48  6416      3030          bhs.s     DumpRegisters_15
                    3031   DumpRegisters_17:
                    3032   ; sprintf(TempString, ".") ;
00001C4A  4879 0000 3033          pea       @m68kde~1_39.L
00001C4E  4DD4      
00001C50  4879 0B00 3034          pea       _TempString.L
00001C54  04E2      
00001C56  4EB9 0000 3035          jsr       _sprintf
00001C5A  373E      
00001C5C  504F      3036          addq.w    #8,A7
00001C5E  6026      3037          bra.s     DumpRegisters_16
                    3038   DumpRegisters_15:
                    3039   ; else
                    3040   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001C60  2045      3041          move.l    D5,A0
00001C62  48C3      3042          ext.l     D3
00001C64  1230 3800 3043          move.b    0(A0,D3.L),D1
00001C68  C2BC 0000 3044          and.l     #255,D1
00001C6C  00FF      
00001C6E  2F01      3045          move.l    D1,-(A7)
00001C70  4879 0000 3046          pea       @m68kde~1_40.L
00001C74  4DD6      
00001C76  4879 0B00 3047          pea       _TempString.L
00001C7A  04E2      
00001C7C  4EB9 0000 3048          jsr       _sprintf
00001C80  373E      
00001C82  DEFC 000C 3049          add.w     #12,A7
                    3050   DumpRegisters_16:
                    3051   ; strcat(WatchPointString[x], TempString) ;
00001C86  4879 0B00 3052          pea       _TempString.L
00001C8A  04E2      
00001C8C  220D      3053          move.l    A5,D1
00001C8E  48C2      3054          ext.l     D2
00001C90  2F00      3055          move.l    D0,-(A7)
00001C92  2002      3056          move.l    D2,D0
00001C94  C1FC 0064 3057          muls      #100,D0
00001C98  D280      3058          add.l     D0,D1
00001C9A  201F      3059          move.l    (A7)+,D0
00001C9C  2F01      3060          move.l    D1,-(A7)
00001C9E  4EB9 0000 3061          jsr       _strcat
00001CA2  378A      
00001CA4  504F      3062          addq.w    #8,A7
00001CA6  5243      3063          addq.w    #1,D3
00001CA8  6000 FF7E 3064          bra       DumpRegisters_12
                    3065   DumpRegisters_14:
00001CAC  6020      3066          bra.s     DumpRegisters_5
                    3067   DumpRegisters_4:
                    3068   ; }
                    3069   ; }
                    3070   ; else
                    3071   ; strcpy(WatchPointString[x], "") ;
00001CAE  4879 0000 3072          pea       @m68kde~1_41.L
00001CB2  4DDA      
00001CB4  220D      3073          move.l    A5,D1
00001CB6  48C2      3074          ext.l     D2
00001CB8  2F00      3075          move.l    D0,-(A7)
00001CBA  2002      3076          move.l    D2,D0
00001CBC  C1FC 0064 3077          muls      #100,D0
00001CC0  D280      3078          add.l     D0,D1
00001CC2  201F      3079          move.l    (A7)+,D0
00001CC4  2F01      3080          move.l    D1,-(A7)
00001CC6  4EB9 0000 3081          jsr       _strcpy
00001CCA  35B8      
00001CCC  504F      3082          addq.w    #8,A7
                    3083   DumpRegisters_5:
00001CCE  5242      3084          addq.w    #1,D2
00001CD0  6000 FE36 3085          bra       DumpRegisters_1
                    3086   DumpRegisters_3:
                    3087   ; }
                    3088   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001CD4  2F39 0B00 3089          move.l    _a0.L,-(A7)
00001CD8  0104      
00001CDA  2F39 0B00 3090          move.l    _d0.L,-(A7)
00001CDE  00E4      
00001CE0  4879 0000 3091          pea       @m68kde~1_42.L
00001CE4  4DDC      
00001CE6  4E93      3092          jsr       (A3)
00001CE8  DEFC 000C 3093          add.w     #12,A7
                    3094   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001CEC  2F39 0B00 3095          move.l    _a1.L,-(A7)
00001CF0  0108      
00001CF2  2F39 0B00 3096          move.l    _d1.L,-(A7)
00001CF6  00E8      
00001CF8  4879 0000 3097          pea       @m68kde~1_43.L
00001CFC  4DF8      
00001CFE  4E93      3098          jsr       (A3)
00001D00  DEFC 000C 3099          add.w     #12,A7
                    3100   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001D04  2F39 0B00 3101          move.l    _a2.L,-(A7)
00001D08  010C      
00001D0A  2F39 0B00 3102          move.l    _d2.L,-(A7)
00001D0E  00EC      
00001D10  4879 0000 3103          pea       @m68kde~1_44.L
00001D14  4E12      
00001D16  4E93      3104          jsr       (A3)
00001D18  DEFC 000C 3105          add.w     #12,A7
                    3106   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001D1C  2F39 0B00 3107          move.l    _a3.L,-(A7)
00001D20  0110      
00001D22  2F39 0B00 3108          move.l    _d3.L,-(A7)
00001D26  00F0      
00001D28  4879 0000 3109          pea       @m68kde~1_45.L
00001D2C  4E2C      
00001D2E  4E93      3110          jsr       (A3)
00001D30  DEFC 000C 3111          add.w     #12,A7
                    3112   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001D34  2F39 0B00 3113          move.l    _a4.L,-(A7)
00001D38  0114      
00001D3A  2F39 0B00 3114          move.l    _d4.L,-(A7)
00001D3E  00F4      
00001D40  4879 0000 3115          pea       @m68kde~1_46.L
00001D44  4E46      
00001D46  4E93      3116          jsr       (A3)
00001D48  DEFC 000C 3117          add.w     #12,A7
                    3118   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001D4C  2F39 0B00 3119          move.l    _a5.L,-(A7)
00001D50  0118      
00001D52  2F39 0B00 3120          move.l    _d5.L,-(A7)
00001D56  00F8      
00001D58  4879 0000 3121          pea       @m68kde~1_47.L
00001D5C  4E60      
00001D5E  4E93      3122          jsr       (A3)
00001D60  DEFC 000C 3123          add.w     #12,A7
                    3124   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001D64  2F39 0B00 3125          move.l    _a6.L,-(A7)
00001D68  011C      
00001D6A  2F39 0B00 3126          move.l    _d6.L,-(A7)
00001D6E  00FC      
00001D70  4879 0000 3127          pea       @m68kde~1_48.L
00001D74  4E7A      
00001D76  4E93      3128          jsr       (A3)
00001D78  DEFC 000C 3129          add.w     #12,A7
                    3130   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001D7C  3214      3131          move.w    (A4),D1
00001D7E  C27C 2000 3132          and.w     #8192,D1
00001D82  0C41 2000 3133          cmp.w     #8192,D1
00001D86  6608      3134          bne.s     DumpRegisters_18
00001D88  2239 0B00 3135          move.l    _SSP.L,D1
00001D8C  0124      
00001D8E  6006      3136          bra.s     DumpRegisters_19
                    3137   DumpRegisters_18:
00001D90  2239 0B00 3138          move.l    _USP.L,D1
00001D94  0128      
                    3139   DumpRegisters_19:
00001D96  2F01      3140          move.l    D1,-(A7)
00001D98  2F39 0B00 3141          move.l    _d7.L,-(A7)
00001D9C  0100      
00001D9E  4879 0000 3142          pea       @m68kde~1_49.L
00001DA2  4E94      
00001DA4  4E93      3143          jsr       (A3)
00001DA6  DEFC 000C 3144          add.w     #12,A7
                    3145   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001DAA  2F39 0B00 3146          move.l    _USP.L,-(A7)
00001DAE  0128      
00001DB0  4879 0000 3147          pea       @m68kde~1_50.L
00001DB4  4EAE      
00001DB6  4E93      3148          jsr       (A3)
00001DB8  504F      3149          addq.w    #8,A7
                    3150   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001DBA  2F39 0B00 3151          move.l    _SSP.L,-(A7)
00001DBE  0124      
00001DC0  4879 0000 3152          pea       @m68kde~1_51.L
00001DC4  4ECC      
00001DC6  4E93      3153          jsr       (A3)
00001DC8  504F      3154          addq.w    #8,A7
                    3155   ; printf("\r\n SR = $%04X   ",SR) ;
00001DCA  3214      3156          move.w    (A4),D1
00001DCC  C2BC 0000 3157          and.l     #65535,D1
00001DD0  FFFF      
00001DD2  2F01      3158          move.l    D1,-(A7)
00001DD4  4879 0000 3159          pea       @m68kde~1_52.L
00001DD8  4EEE      
00001DDA  4E93      3160          jsr       (A3)
00001DDC  504F      3161          addq.w    #8,A7
                    3162   ; // display the status word in characters etc.
                    3163   ; printf("   [") ;
00001DDE  4879 0000 3164          pea       @m68kde~1_53.L
00001DE2  4F00      
00001DE4  4E93      3165          jsr       (A3)
00001DE6  584F      3166          addq.w    #4,A7
                    3167   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001DE8  3014      3168          move.w    (A4),D0
00001DEA  C07C 8000 3169          and.w     #32768,D0
00001DEE  0C40 8000 3170          cmp.w     #32768,D0
00001DF2  660A      3171          bne.s     DumpRegisters_20
00001DF4  4878 0054 3172          pea       84
00001DF8  4E92      3173          jsr       (A2)
00001DFA  584F      3174          addq.w    #4,A7
00001DFC  6008      3175          bra.s     DumpRegisters_21
                    3176   DumpRegisters_20:
00001DFE  4878 002D 3177          pea       45
00001E02  4E92      3178          jsr       (A2)
00001E04  584F      3179          addq.w    #4,A7
                    3180   DumpRegisters_21:
                    3181   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001E06  3014      3182          move.w    (A4),D0
00001E08  C07C 2000 3183          and.w     #8192,D0
00001E0C  0C40 2000 3184          cmp.w     #8192,D0
00001E10  660A      3185          bne.s     DumpRegisters_22
00001E12  4878 0053 3186          pea       83
00001E16  4E92      3187          jsr       (A2)
00001E18  584F      3188          addq.w    #4,A7
00001E1A  6008      3189          bra.s     DumpRegisters_23
                    3190   DumpRegisters_22:
00001E1C  4878 0055 3191          pea       85
00001E20  4E92      3192          jsr       (A2)
00001E22  584F      3193          addq.w    #4,A7
                    3194   DumpRegisters_23:
                    3195   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001E24  3014      3196          move.w    (A4),D0
00001E26  C07C 0400 3197          and.w     #1024,D0
00001E2A  0C40 0400 3198          cmp.w     #1024,D0
00001E2E  660A      3199          bne.s     DumpRegisters_24
00001E30  4878 0031 3200          pea       49
00001E34  4E92      3201          jsr       (A2)
00001E36  584F      3202          addq.w    #4,A7
00001E38  6008      3203          bra.s     DumpRegisters_25
                    3204   DumpRegisters_24:
00001E3A  4878 0030 3205          pea       48
00001E3E  4E92      3206          jsr       (A2)
00001E40  584F      3207          addq.w    #4,A7
                    3208   DumpRegisters_25:
                    3209   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001E42  3014      3210          move.w    (A4),D0
00001E44  C07C 0200 3211          and.w     #512,D0
00001E48  0C40 0200 3212          cmp.w     #512,D0
00001E4C  660A      3213          bne.s     DumpRegisters_26
00001E4E  4878 0031 3214          pea       49
00001E52  4E92      3215          jsr       (A2)
00001E54  584F      3216          addq.w    #4,A7
00001E56  6008      3217          bra.s     DumpRegisters_27
                    3218   DumpRegisters_26:
00001E58  4878 0030 3219          pea       48
00001E5C  4E92      3220          jsr       (A2)
00001E5E  584F      3221          addq.w    #4,A7
                    3222   DumpRegisters_27:
                    3223   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001E60  3014      3224          move.w    (A4),D0
00001E62  C07C 0100 3225          and.w     #256,D0
00001E66  0C40 0100 3226          cmp.w     #256,D0
00001E6A  660A      3227          bne.s     DumpRegisters_28
00001E6C  4878 0031 3228          pea       49
00001E70  4E92      3229          jsr       (A2)
00001E72  584F      3230          addq.w    #4,A7
00001E74  6008      3231          bra.s     DumpRegisters_29
                    3232   DumpRegisters_28:
00001E76  4878 0030 3233          pea       48
00001E7A  4E92      3234          jsr       (A2)
00001E7C  584F      3235          addq.w    #4,A7
                    3236   DumpRegisters_29:
                    3237   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001E7E  3014      3238          move.w    (A4),D0
00001E80  C07C 0010 3239          and.w     #16,D0
00001E84  0C40 0010 3240          cmp.w     #16,D0
00001E88  660A      3241          bne.s     DumpRegisters_30
00001E8A  4878 0058 3242          pea       88
00001E8E  4E92      3243          jsr       (A2)
00001E90  584F      3244          addq.w    #4,A7
00001E92  6008      3245          bra.s     DumpRegisters_31
                    3246   DumpRegisters_30:
00001E94  4878 002D 3247          pea       45
00001E98  4E92      3248          jsr       (A2)
00001E9A  584F      3249          addq.w    #4,A7
                    3250   DumpRegisters_31:
                    3251   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001E9C  3014      3252          move.w    (A4),D0
00001E9E  C07C 0008 3253          and.w     #8,D0
00001EA2  0C40 0008 3254          cmp.w     #8,D0
00001EA6  660A      3255          bne.s     DumpRegisters_32
00001EA8  4878 004E 3256          pea       78
00001EAC  4E92      3257          jsr       (A2)
00001EAE  584F      3258          addq.w    #4,A7
00001EB0  6008      3259          bra.s     DumpRegisters_33
                    3260   DumpRegisters_32:
00001EB2  4878 002D 3261          pea       45
00001EB6  4E92      3262          jsr       (A2)
00001EB8  584F      3263          addq.w    #4,A7
                    3264   DumpRegisters_33:
                    3265   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001EBA  3014      3266          move.w    (A4),D0
00001EBC  C07C 0004 3267          and.w     #4,D0
00001EC0  0C40 0004 3268          cmp.w     #4,D0
00001EC4  660A      3269          bne.s     DumpRegisters_34
00001EC6  4878 005A 3270          pea       90
00001ECA  4E92      3271          jsr       (A2)
00001ECC  584F      3272          addq.w    #4,A7
00001ECE  6008      3273          bra.s     DumpRegisters_35
                    3274   DumpRegisters_34:
00001ED0  4878 002D 3275          pea       45
00001ED4  4E92      3276          jsr       (A2)
00001ED6  584F      3277          addq.w    #4,A7
                    3278   DumpRegisters_35:
                    3279   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001ED8  3014      3280          move.w    (A4),D0
00001EDA  C07C 0002 3281          and.w     #2,D0
00001EDE  0C40 0002 3282          cmp.w     #2,D0
00001EE2  660A      3283          bne.s     DumpRegisters_36
00001EE4  4878 0056 3284          pea       86
00001EE8  4E92      3285          jsr       (A2)
00001EEA  584F      3286          addq.w    #4,A7
00001EEC  6008      3287          bra.s     DumpRegisters_37
                    3288   DumpRegisters_36:
00001EEE  4878 002D 3289          pea       45
00001EF2  4E92      3290          jsr       (A2)
00001EF4  584F      3291          addq.w    #4,A7
                    3292   DumpRegisters_37:
                    3293   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001EF6  3014      3294          move.w    (A4),D0
00001EF8  C07C 0001 3295          and.w     #1,D0
00001EFC  0C40 0001 3296          cmp.w     #1,D0
00001F00  660A      3297          bne.s     DumpRegisters_38
00001F02  4878 0043 3298          pea       67
00001F06  4E92      3299          jsr       (A2)
00001F08  584F      3300          addq.w    #4,A7
00001F0A  6008      3301          bra.s     DumpRegisters_39
                    3302   DumpRegisters_38:
00001F0C  4878 002D 3303          pea       45
00001F10  4E92      3304          jsr       (A2)
00001F12  584F      3305          addq.w    #4,A7
                    3306   DumpRegisters_39:
                    3307   ; putchar(']') ;
00001F14  4878 005D 3308          pea       93
00001F18  4E92      3309          jsr       (A2)
00001F1A  584F      3310          addq.w    #4,A7
                    3311   ; printf("\r\n PC = $%08X  ", PC) ;
00001F1C  2F39 0B00 3312          move.l    _PC.L,-(A7)
00001F20  0120      
00001F22  4879 0000 3313          pea       @m68kde~1_54.L
00001F26  4F06      
00001F28  4E93      3314          jsr       (A3)
00001F2A  504F      3315          addq.w    #8,A7
                    3316   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001F2C  2039 0B00 3317          move.l    _PC.L,D0
00001F30  0120      
00001F32  2040      3318          move.l    D0,A0
00001F34  3010      3319          move.w    (A0),D0
00001F36  0C40 4E4E 3320          cmp.w     #20046,D0
00001F3A  660A      3321          bne.s     DumpRegisters_40
                    3322   ; printf("[@ BREAKPOINT]") ;
00001F3C  4879 0000 3323          pea       @m68kde~1_55.L
00001F40  4F16      
00001F42  4E93      3324          jsr       (A3)
00001F44  584F      3325          addq.w    #4,A7
                    3326   DumpRegisters_40:
                    3327   ; printf("\r\n") ;
00001F46  4879 0000 3328          pea       @m68kde~1_1.L
00001F4A  4A38      
00001F4C  4E93      3329          jsr       (A3)
00001F4E  584F      3330          addq.w    #4,A7
                    3331   ; for(i=0; i < 8; i++)    {
00001F50  4244      3332          clr.w     D4
                    3333   DumpRegisters_42:
00001F52  0C44 0008 3334          cmp.w     #8,D4
00001F56  6C00 0040 3335          bge       DumpRegisters_44
                    3336   ; if(WatchPointSetOrCleared[i] == 1)
00001F5A  48C4      3337          ext.l     D4
00001F5C  2004      3338          move.l    D4,D0
00001F5E  E588      3339          lsl.l     #2,D0
00001F60  41F9 0B00 3340          lea       _WatchPointSetOrCleared.L,A0
00001F64  01A2      
00001F66  2030 0800 3341          move.l    0(A0,D0.L),D0
00001F6A  0C80 0000 3342          cmp.l     #1,D0
00001F6E  0001      
00001F70  6622      3343          bne.s     DumpRegisters_45
                    3344   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001F72  220D      3345          move.l    A5,D1
00001F74  48C4      3346          ext.l     D4
00001F76  2F00      3347          move.l    D0,-(A7)
00001F78  2004      3348          move.l    D4,D0
00001F7A  C1FC 0064 3349          muls      #100,D0
00001F7E  D280      3350          add.l     D0,D1
00001F80  201F      3351          move.l    (A7)+,D0
00001F82  2F01      3352          move.l    D1,-(A7)
00001F84  48C4      3353          ext.l     D4
00001F86  2F04      3354          move.l    D4,-(A7)
00001F88  4879 0000 3355          pea       @m68kde~1_56.L
00001F8C  4F26      
00001F8E  4E93      3356          jsr       (A3)
00001F90  DEFC 000C 3357          add.w     #12,A7
                    3358   DumpRegisters_45:
00001F94  5244      3359          addq.w    #1,D4
00001F96  60BA      3360          bra       DumpRegisters_42
                    3361   DumpRegisters_44:
00001F98  4CDF 3CFC 3362          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001F9C  4E75      3363          rts
                    3364   ; }
                    3365   ; }
                    3366   ; // Trace Exception Handler
                    3367   ; void DumpRegistersandPause(void)
                    3368   ; {
                    3369   _DumpRegistersandPause:
00001F9E  2F0A      3370          move.l    A2,-(A7)
00001FA0  45F9 0000 3371          lea       _printf.L,A2
00001FA4  4062      
                    3372   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001FA6  4879 0000 3373          pea       @m68kde~1_57.L
00001FAA  4F32      
00001FAC  4E92      3374          jsr       (A2)
00001FAE  584F      3375          addq.w    #4,A7
                    3376   ; printf("\r\nBreak Points :[Disabled]") ;
00001FB0  4879 0000 3377          pea       @m68kde~1_58.L
00001FB4  4F52      
00001FB6  4E92      3378          jsr       (A2)
00001FB8  584F      3379          addq.w    #4,A7
                    3380   ; DumpRegisters() ;
00001FBA  4EB8 1AEA 3381          jsr       _DumpRegisters
                    3382   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001FBE  4879 0000 3383          pea       @m68kde~1_59.L
00001FC2  4F6E      
00001FC4  4E92      3384          jsr       (A2)
00001FC6  584F      3385          addq.w    #4,A7
                    3386   ; printf("\r\nPress <ESC> to Resume Program") ;
00001FC8  4879 0000 3387          pea       @m68kde~1_60.L
00001FCC  4F9A      
00001FCE  4E92      3388          jsr       (A2)
00001FD0  584F      3389          addq.w    #4,A7
                    3390   ; menu() ;
00001FD2  4EB9 0000 3391          jsr       _menu
00001FD6  2B82      
00001FD8  245F      3392          move.l    (A7)+,A2
00001FDA  4E75      3393          rts
                    3394   ; }
                    3395   ; void ChangeRegisters(void)
                    3396   ; {
                    3397   _ChangeRegisters:
00001FDC  4E56 FFFC 3398          link      A6,#-4
00001FE0  48E7 303C 3399          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001FE4  45F9 0000 3400          lea       _printf.L,A2
00001FE8  4062      
00001FEA  47EE FFFC 3401          lea       -4(A6),A3
00001FEE  49F8 0CA4 3402          lea       _Get8HexDigits.L,A4
00001FF2  4BF8 0B68 3403          lea       __getch.L,A5
                    3404   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    3405   ; int reg_val ;
                    3406   ; char c, reg[3] ;
                    3407   ; reg[0] = tolower(_getch()) ;
00001FF6  2F00      3408          move.l    D0,-(A7)
00001FF8  4E95      3409          jsr       (A5)
00001FFA  2200      3410          move.l    D0,D1
00001FFC  201F      3411          move.l    (A7)+,D0
00001FFE  2F01      3412          move.l    D1,-(A7)
00002000  4EB9 0000 3413          jsr       _tolower
00002004  3712      
00002006  584F      3414          addq.w    #4,A7
00002008  1680      3415          move.b    D0,(A3)
                    3416   ; reg[1] = c = tolower(_getch()) ;
0000200A  2F00      3417          move.l    D0,-(A7)
0000200C  4E95      3418          jsr       (A5)
0000200E  2200      3419          move.l    D0,D1
00002010  201F      3420          move.l    (A7)+,D0
00002012  2F01      3421          move.l    D1,-(A7)
00002014  4EB9 0000 3422          jsr       _tolower
00002018  3712      
0000201A  584F      3423          addq.w    #4,A7
0000201C  1400      3424          move.b    D0,D2
0000201E  1740 0001 3425          move.b    D0,1(A3)
                    3426   ; if(reg[0] == (char)('d'))  {    // change data register
00002022  1013      3427          move.b    (A3),D0
00002024  0C00 0064 3428          cmp.b     #100,D0
00002028  6600 00AE 3429          bne       ChangeRegisters_1
                    3430   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
0000202C  102B 0001 3431          move.b    1(A3),D0
00002030  0C00 0037 3432          cmp.b     #55,D0
00002034  6E0A      3433          bgt.s     ChangeRegisters_5
00002036  102B 0001 3434          move.b    1(A3),D0
0000203A  0C00 0030 3435          cmp.b     #48,D0
0000203E  6C0E      3436          bge.s     ChangeRegisters_3
                    3437   ChangeRegisters_5:
                    3438   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00002040  4879 0000 3439          pea       @m68kde~1_61.L
00002044  4FBA      
00002046  4E92      3440          jsr       (A2)
00002048  584F      3441          addq.w    #4,A7
                    3442   ; return ;
0000204A  6000 0244 3443          bra       ChangeRegisters_6
                    3444   ChangeRegisters_3:
                    3445   ; }
                    3446   ; else {
                    3447   ; printf("\r\nD%c = ", c) ;
0000204E  4882      3448          ext.w     D2
00002050  48C2      3449          ext.l     D2
00002052  2F02      3450          move.l    D2,-(A7)
00002054  4879 0000 3451          pea       @m68kde~1_62.L
00002058  4FE6      
0000205A  4E92      3452          jsr       (A2)
0000205C  504F      3453          addq.w    #8,A7
                    3454   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000205E  42A7      3455          clr.l     -(A7)
00002060  4E94      3456          jsr       (A4)
00002062  584F      3457          addq.w    #4,A7
00002064  2600      3458          move.l    D0,D3
                    3459   ; }
                    3460   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    3461   ; if(c == (char)('0'))
00002066  0C02 0030 3462          cmp.b     #48,D2
0000206A  660A      3463          bne.s     ChangeRegisters_7
                    3464   ; d0 = reg_val ;
0000206C  23C3 0B00 3465          move.l    D3,_d0.L
00002070  00E4      
00002072  6000 0060 3466          bra       ChangeRegisters_20
                    3467   ChangeRegisters_7:
                    3468   ; else if(c == (char)('1'))
00002076  0C02 0031 3469          cmp.b     #49,D2
0000207A  660A      3470          bne.s     ChangeRegisters_9
                    3471   ; d1 = reg_val ;
0000207C  23C3 0B00 3472          move.l    D3,_d1.L
00002080  00E8      
00002082  6000 0050 3473          bra       ChangeRegisters_20
                    3474   ChangeRegisters_9:
                    3475   ; else if(c == (char)('2'))
00002086  0C02 0032 3476          cmp.b     #50,D2
0000208A  660A      3477          bne.s     ChangeRegisters_11
                    3478   ; d2 = reg_val ;
0000208C  23C3 0B00 3479          move.l    D3,_d2.L
00002090  00EC      
00002092  6000 0040 3480          bra       ChangeRegisters_20
                    3481   ChangeRegisters_11:
                    3482   ; else if(c == (char)('3'))
00002096  0C02 0033 3483          cmp.b     #51,D2
0000209A  6608      3484          bne.s     ChangeRegisters_13
                    3485   ; d3 = reg_val ;
0000209C  23C3 0B00 3486          move.l    D3,_d3.L
000020A0  00F0      
000020A2  6030      3487          bra.s     ChangeRegisters_20
                    3488   ChangeRegisters_13:
                    3489   ; else if(c == (char)('4'))
000020A4  0C02 0034 3490          cmp.b     #52,D2
000020A8  6608      3491          bne.s     ChangeRegisters_15
                    3492   ; d4 = reg_val ;
000020AA  23C3 0B00 3493          move.l    D3,_d4.L
000020AE  00F4      
000020B0  6022      3494          bra.s     ChangeRegisters_20
                    3495   ChangeRegisters_15:
                    3496   ; else if(c == (char)('5'))
000020B2  0C02 0035 3497          cmp.b     #53,D2
000020B6  6608      3498          bne.s     ChangeRegisters_17
                    3499   ; d5 = reg_val ;
000020B8  23C3 0B00 3500          move.l    D3,_d5.L
000020BC  00F8      
000020BE  6014      3501          bra.s     ChangeRegisters_20
                    3502   ChangeRegisters_17:
                    3503   ; else if(c == (char)('6'))
000020C0  0C02 0036 3504          cmp.b     #54,D2
000020C4  6608      3505          bne.s     ChangeRegisters_19
                    3506   ; d6 = reg_val ;
000020C6  23C3 0B00 3507          move.l    D3,_d6.L
000020CA  00FC      
000020CC  6006      3508          bra.s     ChangeRegisters_20
                    3509   ChangeRegisters_19:
                    3510   ; else
                    3511   ; d7 = reg_val ;
000020CE  23C3 0B00 3512          move.l    D3,_d7.L
000020D2  0100      
                    3513   ChangeRegisters_20:
000020D4  6000 01B6 3514          bra       ChangeRegisters_51
                    3515   ChangeRegisters_1:
                    3516   ; }
                    3517   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000020D8  1013      3518          move.b    (A3),D0
000020DA  0C00 0061 3519          cmp.b     #97,D0
000020DE  6600 00A6 3520          bne       ChangeRegisters_21
                    3521   ; if((c > (char)('7')) || (c < (char)('0'))) {
000020E2  0C02 0037 3522          cmp.b     #55,D2
000020E6  6E06      3523          bgt.s     ChangeRegisters_25
000020E8  0C02 0030 3524          cmp.b     #48,D2
000020EC  6C0E      3525          bge.s     ChangeRegisters_23
                    3526   ChangeRegisters_25:
                    3527   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000020EE  4879 0000 3528          pea       @m68kde~1_63.L
000020F2  4FF0      
000020F4  4E92      3529          jsr       (A2)
000020F6  584F      3530          addq.w    #4,A7
                    3531   ; return ;
000020F8  6000 0196 3532          bra       ChangeRegisters_6
                    3533   ChangeRegisters_23:
                    3534   ; }
                    3535   ; else {
                    3536   ; printf("\r\nA%c = ", c) ;
000020FC  4882      3537          ext.w     D2
000020FE  48C2      3538          ext.l     D2
00002100  2F02      3539          move.l    D2,-(A7)
00002102  4879 0000 3540          pea       @m68kde~1_64.L
00002106  501E      
00002108  4E92      3541          jsr       (A2)
0000210A  504F      3542          addq.w    #8,A7
                    3543   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000210C  42A7      3544          clr.l     -(A7)
0000210E  4E94      3545          jsr       (A4)
00002110  584F      3546          addq.w    #4,A7
00002112  2600      3547          move.l    D0,D3
                    3548   ; }
                    3549   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    3550   ; if(c == (char)('0'))
00002114  0C02 0030 3551          cmp.b     #48,D2
00002118  660A      3552          bne.s     ChangeRegisters_26
                    3553   ; a0 = reg_val ;
0000211A  23C3 0B00 3554          move.l    D3,_a0.L
0000211E  0104      
00002120  6000 0060 3555          bra       ChangeRegisters_39
                    3556   ChangeRegisters_26:
                    3557   ; else if(c == (char)('1'))
00002124  0C02 0031 3558          cmp.b     #49,D2
00002128  660A      3559          bne.s     ChangeRegisters_28
                    3560   ; a1 = reg_val ;
0000212A  23C3 0B00 3561          move.l    D3,_a1.L
0000212E  0108      
00002130  6000 0050 3562          bra       ChangeRegisters_39
                    3563   ChangeRegisters_28:
                    3564   ; else if(c == (char)('2'))
00002134  0C02 0032 3565          cmp.b     #50,D2
00002138  660A      3566          bne.s     ChangeRegisters_30
                    3567   ; a2 = reg_val ;
0000213A  23C3 0B00 3568          move.l    D3,_a2.L
0000213E  010C      
00002140  6000 0040 3569          bra       ChangeRegisters_39
                    3570   ChangeRegisters_30:
                    3571   ; else if(c == (char)('3'))
00002144  0C02 0033 3572          cmp.b     #51,D2
00002148  6608      3573          bne.s     ChangeRegisters_32
                    3574   ; a3 = reg_val ;
0000214A  23C3 0B00 3575          move.l    D3,_a3.L
0000214E  0110      
00002150  6030      3576          bra.s     ChangeRegisters_39
                    3577   ChangeRegisters_32:
                    3578   ; else if(c == (char)('4'))
00002152  0C02 0034 3579          cmp.b     #52,D2
00002156  6608      3580          bne.s     ChangeRegisters_34
                    3581   ; a4 = reg_val ;
00002158  23C3 0B00 3582          move.l    D3,_a4.L
0000215C  0114      
0000215E  6022      3583          bra.s     ChangeRegisters_39
                    3584   ChangeRegisters_34:
                    3585   ; else if(c == (char)('5'))
00002160  0C02 0035 3586          cmp.b     #53,D2
00002164  6608      3587          bne.s     ChangeRegisters_36
                    3588   ; a5 = reg_val ;
00002166  23C3 0B00 3589          move.l    D3,_a5.L
0000216A  0118      
0000216C  6014      3590          bra.s     ChangeRegisters_39
                    3591   ChangeRegisters_36:
                    3592   ; else if(c == (char)('6'))
0000216E  0C02 0036 3593          cmp.b     #54,D2
00002172  6608      3594          bne.s     ChangeRegisters_38
                    3595   ; a6 = reg_val ;
00002174  23C3 0B00 3596          move.l    D3,_a6.L
00002178  011C      
0000217A  6006      3597          bra.s     ChangeRegisters_39
                    3598   ChangeRegisters_38:
                    3599   ; else
                    3600   ; USP = reg_val ;
0000217C  23C3 0B00 3601          move.l    D3,_USP.L
00002180  0128      
                    3602   ChangeRegisters_39:
00002182  6000 0108 3603          bra       ChangeRegisters_51
                    3604   ChangeRegisters_21:
                    3605   ; }
                    3606   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00002186  1013      3607          move.b    (A3),D0
00002188  0C00 0075 3608          cmp.b     #117,D0
0000218C  6600 004E 3609          bne       ChangeRegisters_40
00002190  0C02 0073 3610          cmp.b     #115,D2
00002194  6600 0046 3611          bne       ChangeRegisters_40
                    3612   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00002198  2F00      3613          move.l    D0,-(A7)
0000219A  4E95      3614          jsr       (A5)
0000219C  2200      3615          move.l    D0,D1
0000219E  201F      3616          move.l    (A7)+,D0
000021A0  2F01      3617          move.l    D1,-(A7)
000021A2  4EB9 0000 3618          jsr       _tolower
000021A6  3712      
000021A8  584F      3619          addq.w    #4,A7
000021AA  0C80 0000 3620          cmp.l     #112,D0
000021AE  0070      
000021B0  6618      3621          bne.s     ChangeRegisters_42
                    3622   ; printf("\r\nUser SP = ") ;
000021B2  4879 0000 3623          pea       @m68kde~1_65.L
000021B6  5028      
000021B8  4E92      3624          jsr       (A2)
000021BA  584F      3625          addq.w    #4,A7
                    3626   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000021BC  42A7      3627          clr.l     -(A7)
000021BE  4E94      3628          jsr       (A4)
000021C0  584F      3629          addq.w    #4,A7
000021C2  23C0 0B00 3630          move.l    D0,_USP.L
000021C6  0128      
000021C8  600E      3631          bra.s     ChangeRegisters_43
                    3632   ChangeRegisters_42:
                    3633   ; }
                    3634   ; else {
                    3635   ; printf("\r\nIllegal Register....") ;
000021CA  4879 0000 3636          pea       @m68kde~1_66.L
000021CE  5036      
000021D0  4E92      3637          jsr       (A2)
000021D2  584F      3638          addq.w    #4,A7
                    3639   ; return ;
000021D4  6000 00BA 3640          bra       ChangeRegisters_6
                    3641   ChangeRegisters_43:
000021D8  6000 00B2 3642          bra       ChangeRegisters_51
                    3643   ChangeRegisters_40:
                    3644   ; }
                    3645   ; }
                    3646   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000021DC  1013      3647          move.b    (A3),D0
000021DE  0C00 0073 3648          cmp.b     #115,D0
000021E2  6600 004E 3649          bne       ChangeRegisters_44
000021E6  0C02 0073 3650          cmp.b     #115,D2
000021EA  6600 0046 3651          bne       ChangeRegisters_44
                    3652   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000021EE  2F00      3653          move.l    D0,-(A7)
000021F0  4E95      3654          jsr       (A5)
000021F2  2200      3655          move.l    D0,D1
000021F4  201F      3656          move.l    (A7)+,D0
000021F6  2F01      3657          move.l    D1,-(A7)
000021F8  4EB9 0000 3658          jsr       _tolower
000021FC  3712      
000021FE  584F      3659          addq.w    #4,A7
00002200  0C80 0000 3660          cmp.l     #112,D0
00002204  0070      
00002206  6618      3661          bne.s     ChangeRegisters_46
                    3662   ; printf("\r\nSystem SP = ") ;
00002208  4879 0000 3663          pea       @m68kde~1_67.L
0000220C  504E      
0000220E  4E92      3664          jsr       (A2)
00002210  584F      3665          addq.w    #4,A7
                    3666   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00002212  42A7      3667          clr.l     -(A7)
00002214  4E94      3668          jsr       (A4)
00002216  584F      3669          addq.w    #4,A7
00002218  23C0 0B00 3670          move.l    D0,_SSP.L
0000221C  0124      
0000221E  600E      3671          bra.s     ChangeRegisters_47
                    3672   ChangeRegisters_46:
                    3673   ; }
                    3674   ; else {
                    3675   ; printf("\r\nIllegal Register....") ;
00002220  4879 0000 3676          pea       @m68kde~1_66.L
00002224  5036      
00002226  4E92      3677          jsr       (A2)
00002228  584F      3678          addq.w    #4,A7
                    3679   ; return ;
0000222A  6000 0064 3680          bra       ChangeRegisters_6
                    3681   ChangeRegisters_47:
0000222E  6000 005C 3682          bra       ChangeRegisters_51
                    3683   ChangeRegisters_44:
                    3684   ; }
                    3685   ; }
                    3686   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00002232  1013      3687          move.b    (A3),D0
00002234  0C00 0070 3688          cmp.b     #112,D0
00002238  6620      3689          bne.s     ChangeRegisters_48
0000223A  0C02 0063 3690          cmp.b     #99,D2
0000223E  661A      3691          bne.s     ChangeRegisters_48
                    3692   ; printf("\r\nPC = ") ;
00002240  4879 0000 3693          pea       @m68kde~1_68.L
00002244  505E      
00002246  4E92      3694          jsr       (A2)
00002248  584F      3695          addq.w    #4,A7
                    3696   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000224A  42A7      3697          clr.l     -(A7)
0000224C  4E94      3698          jsr       (A4)
0000224E  584F      3699          addq.w    #4,A7
00002250  23C0 0B00 3700          move.l    D0,_PC.L
00002254  0120      
00002256  6000 0034 3701          bra       ChangeRegisters_51
                    3702   ChangeRegisters_48:
                    3703   ; }
                    3704   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
0000225A  1013      3705          move.b    (A3),D0
0000225C  0C00 0073 3706          cmp.b     #115,D0
00002260  6620      3707          bne.s     ChangeRegisters_50
00002262  0C02 0072 3708          cmp.b     #114,D2
00002266  661A      3709          bne.s     ChangeRegisters_50
                    3710   ; printf("\r\nSR = ") ;
00002268  4879 0000 3711          pea       @m68kde~1_69.L
0000226C  5066      
0000226E  4E92      3712          jsr       (A2)
00002270  584F      3713          addq.w    #4,A7
                    3714   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00002272  42A7      3715          clr.l     -(A7)
00002274  4EB8 0C58 3716          jsr       _Get4HexDigits
00002278  584F      3717          addq.w    #4,A7
0000227A  33C0 0B00 3718          move.w    D0,_SR.L
0000227E  012C      
00002280  600A      3719          bra.s     ChangeRegisters_51
                    3720   ChangeRegisters_50:
                    3721   ; }
                    3722   ; else
                    3723   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00002282  4879 0000 3724          pea       @m68kde~1_70.L
00002286  506E      
00002288  4E92      3725          jsr       (A2)
0000228A  584F      3726          addq.w    #4,A7
                    3727   ChangeRegisters_51:
                    3728   ; DumpRegisters() ;
0000228C  4EB8 1AEA 3729          jsr       _DumpRegisters
                    3730   ChangeRegisters_6:
00002290  4CDF 3C0C 3731          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002294  4E5E      3732          unlk      A6
00002296  4E75      3733          rts
                    3734   ; }
                    3735   ; void BreakPointDisplay(void)
                    3736   ; {
                    3737   _BreakPointDisplay:
00002298  48E7 3030 3738          movem.l   D2/D3/A2/A3,-(A7)
0000229C  45F9 0000 3739          lea       _printf.L,A2
000022A0  4062      
000022A2  47F9 0B00 3740          lea       _BreakPointAddress.L,A3
000022A6  012E      
                    3741   ; int i, BreakPointsSet = 0 ;
000022A8  4283      3742          clr.l     D3
                    3743   ; // any break points  set
                    3744   ; for(i = 0; i < 8; i++)  {
000022AA  4282      3745          clr.l     D2
                    3746   BreakPointDisplay_1:
000022AC  0C82 0000 3747          cmp.l     #8,D2
000022B0  0008      
000022B2  6C1C      3748          bge.s     BreakPointDisplay_3
                    3749   ; if(BreakPointSetOrCleared[i] == 1)
000022B4  2002      3750          move.l    D2,D0
000022B6  E588      3751          lsl.l     #2,D0
000022B8  41F9 0B00 3752          lea       _BreakPointSetOrCleared.L,A0
000022BC  015E      
000022BE  2030 0800 3753          move.l    0(A0,D0.L),D0
000022C2  0C80 0000 3754          cmp.l     #1,D0
000022C6  0001      
000022C8  6602      3755          bne.s     BreakPointDisplay_4
                    3756   ; BreakPointsSet = 1;
000022CA  7601      3757          moveq     #1,D3
                    3758   BreakPointDisplay_4:
000022CC  5282      3759          addq.l    #1,D2
000022CE  60DC      3760          bra       BreakPointDisplay_1
                    3761   BreakPointDisplay_3:
                    3762   ; }
                    3763   ; if(BreakPointsSet == 1) {
000022D0  0C83 0000 3764          cmp.l     #1,D3
000022D4  0001      
000022D6  6616      3765          bne.s     BreakPointDisplay_6
                    3766   ; printf("\r\n\r\nNum     Address      Instruction") ;
000022D8  4879 0000 3767          pea       @m68kde~1_71.L
000022DC  50AA      
000022DE  4E92      3768          jsr       (A2)
000022E0  584F      3769          addq.w    #4,A7
                    3770   ; printf("\r\n---     ---------    -----------") ;
000022E2  4879 0000 3771          pea       @m68kde~1_72.L
000022E6  50D0      
000022E8  4E92      3772          jsr       (A2)
000022EA  584F      3773          addq.w    #4,A7
000022EC  600A      3774          bra.s     BreakPointDisplay_7
                    3775   BreakPointDisplay_6:
                    3776   ; }
                    3777   ; else
                    3778   ; printf("\r\nNo BreakPoints Set") ;
000022EE  4879 0000 3779          pea       @m68kde~1_73.L
000022F2  50F4      
000022F4  4E92      3780          jsr       (A2)
000022F6  584F      3781          addq.w    #4,A7
                    3782   BreakPointDisplay_7:
                    3783   ; for(i = 0; i < 8; i++)  {
000022F8  4282      3784          clr.l     D2
                    3785   BreakPointDisplay_8:
000022FA  0C82 0000 3786          cmp.l     #8,D2
000022FE  0008      
00002300  6C00 005A 3787          bge       BreakPointDisplay_10
                    3788   ; // put opcode back, then put break point back
                    3789   ; if(BreakPointSetOrCleared[i] == 1)  {
00002304  2002      3790          move.l    D2,D0
00002306  E588      3791          lsl.l     #2,D0
00002308  41F9 0B00 3792          lea       _BreakPointSetOrCleared.L,A0
0000230C  015E      
0000230E  2030 0800 3793          move.l    0(A0,D0.L),D0
00002312  0C80 0000 3794          cmp.l     #1,D0
00002316  0001      
00002318  6600 003E 3795          bne       BreakPointDisplay_11
                    3796   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
0000231C  2002      3797          move.l    D2,D0
0000231E  E388      3798          lsl.l     #1,D0
00002320  41F9 0B00 3799          lea       _BreakPointInstruction.L,A0
00002324  014E      
00002326  2202      3800          move.l    D2,D1
00002328  E589      3801          lsl.l     #2,D1
0000232A  2233 1800 3802          move.l    0(A3,D1.L),D1
0000232E  2241      3803          move.l    D1,A1
00002330  32B0 0800 3804          move.w    0(A0,D0.L),(A1)
                    3805   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00002334  2002      3806          move.l    D2,D0
00002336  E588      3807          lsl.l     #2,D0
00002338  2033 0800 3808          move.l    0(A3,D0.L),D0
0000233C  2040      3809          move.l    D0,A0
0000233E  30BC 4E4E 3810          move.w    #20046,(A0)
                    3811   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00002342  2202      3812          move.l    D2,D1
00002344  E589      3813          lsl.l     #2,D1
00002346  2F33 1800 3814          move.l    0(A3,D1.L),-(A7)
0000234A  2F02      3815          move.l    D2,-(A7)
0000234C  4879 0000 3816          pea       @m68kde~1_74.L
00002350  510A      
00002352  4E92      3817          jsr       (A2)
00002354  DEFC 000C 3818          add.w     #12,A7
                    3819   BreakPointDisplay_11:
00002358  5282      3820          addq.l    #1,D2
0000235A  609E      3821          bra       BreakPointDisplay_8
                    3822   BreakPointDisplay_10:
                    3823   ; }
                    3824   ; }
                    3825   ; printf("\r\n") ;
0000235C  4879 0000 3826          pea       @m68kde~1_1.L
00002360  4A38      
00002362  4E92      3827          jsr       (A2)
00002364  584F      3828          addq.w    #4,A7
00002366  4CDF 0C0C 3829          movem.l   (A7)+,D2/D3/A2/A3
0000236A  4E75      3830          rts
                    3831   ; }
                    3832   ; void WatchPointDisplay(void)
                    3833   ; {
                    3834   _WatchPointDisplay:
0000236C  48E7 3020 3835          movem.l   D2/D3/A2,-(A7)
00002370  45F9 0000 3836          lea       _printf.L,A2
00002374  4062      
                    3837   ; int i ;
                    3838   ; int WatchPointsSet = 0 ;
00002376  4283      3839          clr.l     D3
                    3840   ; // any watchpoints set
                    3841   ; for(i = 0; i < 8; i++)  {
00002378  4282      3842          clr.l     D2
                    3843   WatchPointDisplay_1:
0000237A  0C82 0000 3844          cmp.l     #8,D2
0000237E  0008      
00002380  6C1C      3845          bge.s     WatchPointDisplay_3
                    3846   ; if(WatchPointSetOrCleared[i] == 1)
00002382  2002      3847          move.l    D2,D0
00002384  E588      3848          lsl.l     #2,D0
00002386  41F9 0B00 3849          lea       _WatchPointSetOrCleared.L,A0
0000238A  01A2      
0000238C  2030 0800 3850          move.l    0(A0,D0.L),D0
00002390  0C80 0000 3851          cmp.l     #1,D0
00002394  0001      
00002396  6602      3852          bne.s     WatchPointDisplay_4
                    3853   ; WatchPointsSet = 1;
00002398  7601      3854          moveq     #1,D3
                    3855   WatchPointDisplay_4:
0000239A  5282      3856          addq.l    #1,D2
0000239C  60DC      3857          bra       WatchPointDisplay_1
                    3858   WatchPointDisplay_3:
                    3859   ; }
                    3860   ; if(WatchPointsSet == 1) {
0000239E  0C83 0000 3861          cmp.l     #1,D3
000023A2  0001      
000023A4  6616      3862          bne.s     WatchPointDisplay_6
                    3863   ; printf("\r\nNum     Address") ;
000023A6  4879 0000 3864          pea       @m68kde~1_75.L
000023AA  511A      
000023AC  4E92      3865          jsr       (A2)
000023AE  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\n---     ---------") ;
000023B0  4879 0000 3868          pea       @m68kde~1_76.L
000023B4  512C      
000023B6  4E92      3869          jsr       (A2)
000023B8  584F      3870          addq.w    #4,A7
000023BA  600A      3871          bra.s     WatchPointDisplay_7
                    3872   WatchPointDisplay_6:
                    3873   ; }
                    3874   ; else
                    3875   ; printf("\r\nNo WatchPoints Set") ;
000023BC  4879 0000 3876          pea       @m68kde~1_77.L
000023C0  5140      
000023C2  4E92      3877          jsr       (A2)
000023C4  584F      3878          addq.w    #4,A7
                    3879   WatchPointDisplay_7:
                    3880   ; for(i = 0; i < 8; i++)  {
000023C6  4282      3881          clr.l     D2
                    3882   WatchPointDisplay_8:
000023C8  0C82 0000 3883          cmp.l     #8,D2
000023CC  0008      
000023CE  6C00 0038 3884          bge       WatchPointDisplay_10
                    3885   ; if(WatchPointSetOrCleared[i] == 1)
000023D2  2002      3886          move.l    D2,D0
000023D4  E588      3887          lsl.l     #2,D0
000023D6  41F9 0B00 3888          lea       _WatchPointSetOrCleared.L,A0
000023DA  01A2      
000023DC  2030 0800 3889          move.l    0(A0,D0.L),D0
000023E0  0C80 0000 3890          cmp.l     #1,D0
000023E4  0001      
000023E6  661C      3891          bne.s     WatchPointDisplay_11
                    3892   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000023E8  2202      3893          move.l    D2,D1
000023EA  E589      3894          lsl.l     #2,D1
000023EC  41F9 0B00 3895          lea       _WatchPointAddress.L,A0
000023F0  0182      
000023F2  2F30 1800 3896          move.l    0(A0,D1.L),-(A7)
000023F6  2F02      3897          move.l    D2,-(A7)
000023F8  4879 0000 3898          pea       @m68kde~1_74.L
000023FC  510A      
000023FE  4E92      3899          jsr       (A2)
00002400  DEFC 000C 3900          add.w     #12,A7
                    3901   WatchPointDisplay_11:
00002404  5282      3902          addq.l    #1,D2
00002406  60C0      3903          bra       WatchPointDisplay_8
                    3904   WatchPointDisplay_10:
                    3905   ; }
                    3906   ; printf("\r\n") ;
00002408  4879 0000 3907          pea       @m68kde~1_1.L
0000240C  4A38      
0000240E  4E92      3908          jsr       (A2)
00002410  584F      3909          addq.w    #4,A7
00002412  4CDF 040C 3910          movem.l   (A7)+,D2/D3/A2
00002416  4E75      3911          rts
                    3912   ; }
                    3913   ; void BreakPointClear(void)
                    3914   ; {
                    3915   _BreakPointClear:
00002418  4E56 FFFC 3916          link      A6,#-4
0000241C  48E7 2020 3917          movem.l   D2/A2,-(A7)
00002420  45F9 0000 3918          lea       _printf.L,A2
00002424  4062      
                    3919   ; unsigned int i ;
                    3920   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3921   ; BreakPointDisplay() ;
00002426  4EB8 2298 3922          jsr       _BreakPointDisplay
                    3923   ; printf("\r\nEnter Break Point Number: ") ;
0000242A  4879 0000 3924          pea       @m68kde~1_78.L
0000242E  5156      
00002430  4E92      3925          jsr       (A2)
00002432  584F      3926          addq.w    #4,A7
                    3927   ; i = xtod(_getch()) ;           // get break pointer number
00002434  2F00      3928          move.l    D0,-(A7)
00002436  4EB8 0B68 3929          jsr       __getch
0000243A  2200      3930          move.l    D0,D1
0000243C  201F      3931          move.l    (A7)+,D0
0000243E  2F01      3932          move.l    D1,-(A7)
00002440  4EB8 0BD2 3933          jsr       _xtod
00002444  584F      3934          addq.w    #4,A7
00002446  C0BC 0000 3935          and.l     #255,D0
0000244A  00FF      
0000244C  2400      3936          move.l    D0,D2
                    3937   ; if((i < 0) || (i > 7))   {
0000244E  0C82 0000 3938          cmp.l     #0,D2
00002452  0000      
00002454  6508      3939          blo.s     BreakPointClear_3
00002456  0C82 0000 3940          cmp.l     #7,D2
0000245A  0007      
0000245C  630E      3941          bls.s     BreakPointClear_1
                    3942   BreakPointClear_3:
                    3943   ; printf("\r\nIllegal Range : Use 0 - 7") ;
0000245E  4879 0000 3944          pea       @m68kde~1_79.L
00002462  5174      
00002464  4E92      3945          jsr       (A2)
00002466  584F      3946          addq.w    #4,A7
                    3947   ; return ;
00002468  6000 0080 3948          bra       BreakPointClear_4
                    3949   BreakPointClear_1:
                    3950   ; }
                    3951   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
0000246C  2002      3952          move.l    D2,D0
0000246E  E588      3953          lsl.l     #2,D0
00002470  41F9 0B00 3954          lea       _BreakPointSetOrCleared.L,A0
00002474  015E      
00002476  2030 0800 3955          move.l    0(A0,D0.L),D0
0000247A  0C80 0000 3956          cmp.l     #1,D0
0000247E  0001      
00002480  6600 005A 3957          bne       BreakPointClear_5
                    3958   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00002484  2002      3959          move.l    D2,D0
00002486  E588      3960          lsl.l     #2,D0
00002488  41F9 0B00 3961          lea       _BreakPointAddress.L,A0
0000248C  012E      
0000248E  2D70 0800 3962          move.l    0(A0,D0.L),-4(A6)
00002492  FFFC      
                    3963   ; BreakPointAddress[i] = 0 ;
00002494  2002      3964          move.l    D2,D0
00002496  E588      3965          lsl.l     #2,D0
00002498  41F9 0B00 3966          lea       _BreakPointAddress.L,A0
0000249C  012E      
0000249E  42B0 0800 3967          clr.l     0(A0,D0.L)
                    3968   ; BreakPointSetOrCleared[i] = 0 ;
000024A2  2002      3969          move.l    D2,D0
000024A4  E588      3970          lsl.l     #2,D0
000024A6  41F9 0B00 3971          lea       _BreakPointSetOrCleared.L,A0
000024AA  015E      
000024AC  42B0 0800 3972          clr.l     0(A0,D0.L)
                    3973   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000024B0  2002      3974          move.l    D2,D0
000024B2  E388      3975          lsl.l     #1,D0
000024B4  41F9 0B00 3976          lea       _BreakPointInstruction.L,A0
000024B8  014E      
000024BA  226E FFFC 3977          move.l    -4(A6),A1
000024BE  32B0 0800 3978          move.w    0(A0,D0.L),(A1)
                    3979   ; BreakPointInstruction[i] = 0 ;
000024C2  2002      3980          move.l    D2,D0
000024C4  E388      3981          lsl.l     #1,D0
000024C6  41F9 0B00 3982          lea       _BreakPointInstruction.L,A0
000024CA  014E      
000024CC  4270 0800 3983          clr.w     0(A0,D0.L)
                    3984   ; printf("\r\nBreak Point Cleared.....\r\n") ;
000024D0  4879 0000 3985          pea       @m68kde~1_80.L
000024D4  5190      
000024D6  4E92      3986          jsr       (A2)
000024D8  584F      3987          addq.w    #4,A7
000024DA  600A      3988          bra.s     BreakPointClear_6
                    3989   BreakPointClear_5:
                    3990   ; }
                    3991   ; else
                    3992   ; printf("\r\nBreak Point wasn't Set.....") ;
000024DC  4879 0000 3993          pea       @m68kde~1_81.L
000024E0  51AE      
000024E2  4E92      3994          jsr       (A2)
000024E4  584F      3995          addq.w    #4,A7
                    3996   BreakPointClear_6:
                    3997   ; BreakPointDisplay() ;
000024E6  4EB8 2298 3998          jsr       _BreakPointDisplay
                    3999   ; return ;
                    4000   BreakPointClear_4:
000024EA  4CDF 0404 4001          movem.l   (A7)+,D2/A2
000024EE  4E5E      4002          unlk      A6
000024F0  4E75      4003          rts
                    4004   ; }
                    4005   ; void WatchPointClear(void)
                    4006   ; {
                    4007   _WatchPointClear:
000024F2  48E7 2020 4008          movem.l   D2/A2,-(A7)
000024F6  45F9 0000 4009          lea       _printf.L,A2
000024FA  4062      
                    4010   ; unsigned int i ;
                    4011   ; WatchPointDisplay() ;
000024FC  4EB8 236C 4012          jsr       _WatchPointDisplay
                    4013   ; printf("\r\nEnter Watch Point Number: ") ;
00002500  4879 0000 4014          pea       @m68kde~1_82.L
00002504  51CC      
00002506  4E92      4015          jsr       (A2)
00002508  584F      4016          addq.w    #4,A7
                    4017   ; i = xtod(_getch()) ;           // get watch pointer number
0000250A  2F00      4018          move.l    D0,-(A7)
0000250C  4EB8 0B68 4019          jsr       __getch
00002510  2200      4020          move.l    D0,D1
00002512  201F      4021          move.l    (A7)+,D0
00002514  2F01      4022          move.l    D1,-(A7)
00002516  4EB8 0BD2 4023          jsr       _xtod
0000251A  584F      4024          addq.w    #4,A7
0000251C  C0BC 0000 4025          and.l     #255,D0
00002520  00FF      
00002522  2400      4026          move.l    D0,D2
                    4027   ; if((i < 0) || (i > 7))   {
00002524  0C82 0000 4028          cmp.l     #0,D2
00002528  0000      
0000252A  6508      4029          blo.s     WatchPointClear_3
0000252C  0C82 0000 4030          cmp.l     #7,D2
00002530  0007      
00002532  630E      4031          bls.s     WatchPointClear_1
                    4032   WatchPointClear_3:
                    4033   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00002534  4879 0000 4034          pea       @m68kde~1_79.L
00002538  5174      
0000253A  4E92      4035          jsr       (A2)
0000253C  584F      4036          addq.w    #4,A7
                    4037   ; return ;
0000253E  6000 004E 4038          bra       WatchPointClear_4
                    4039   WatchPointClear_1:
                    4040   ; }
                    4041   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00002542  2002      4042          move.l    D2,D0
00002544  E588      4043          lsl.l     #2,D0
00002546  41F9 0B00 4044          lea       _WatchPointSetOrCleared.L,A0
0000254A  01A2      
0000254C  2030 0800 4045          move.l    0(A0,D0.L),D0
00002550  0C80 0000 4046          cmp.l     #1,D0
00002554  0001      
00002556  6628      4047          bne.s     WatchPointClear_5
                    4048   ; WatchPointAddress[i] = 0 ;
00002558  2002      4049          move.l    D2,D0
0000255A  E588      4050          lsl.l     #2,D0
0000255C  41F9 0B00 4051          lea       _WatchPointAddress.L,A0
00002560  0182      
00002562  42B0 0800 4052          clr.l     0(A0,D0.L)
                    4053   ; WatchPointSetOrCleared[i] = 0 ;
00002566  2002      4054          move.l    D2,D0
00002568  E588      4055          lsl.l     #2,D0
0000256A  41F9 0B00 4056          lea       _WatchPointSetOrCleared.L,A0
0000256E  01A2      
00002570  42B0 0800 4057          clr.l     0(A0,D0.L)
                    4058   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00002574  4879 0000 4059          pea       @m68kde~1_83.L
00002578  51EA      
0000257A  4E92      4060          jsr       (A2)
0000257C  584F      4061          addq.w    #4,A7
0000257E  600A      4062          bra.s     WatchPointClear_6
                    4063   WatchPointClear_5:
                    4064   ; }
                    4065   ; else
                    4066   ; printf("\r\nWatch Point Was not Set.....") ;
00002580  4879 0000 4067          pea       @m68kde~1_84.L
00002584  5208      
00002586  4E92      4068          jsr       (A2)
00002588  584F      4069          addq.w    #4,A7
                    4070   WatchPointClear_6:
                    4071   ; WatchPointDisplay() ;
0000258A  4EB8 236C 4072          jsr       _WatchPointDisplay
                    4073   ; return ;
                    4074   WatchPointClear_4:
0000258E  4CDF 0404 4075          movem.l   (A7)+,D2/A2
00002592  4E75      4076          rts
                    4077   ; }
                    4078   ; void DisableBreakPoints(void)
                    4079   ; {
                    4080   _DisableBreakPoints:
00002594  4E56 FFFC 4081          link      A6,#-4
00002598  2F02      4082          move.l    D2,-(A7)
                    4083   ; int i ;
                    4084   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4085   ; for(i = 0; i < 8; i++)  {
0000259A  4282      4086          clr.l     D2
                    4087   DisableBreakPoints_1:
0000259C  0C82 0000 4088          cmp.l     #8,D2
000025A0  0008      
000025A2  6C00 003E 4089          bge       DisableBreakPoints_3
                    4090   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
000025A6  2002      4091          move.l    D2,D0
000025A8  E588      4092          lsl.l     #2,D0
000025AA  41F9 0B00 4093          lea       _BreakPointSetOrCleared.L,A0
000025AE  015E      
000025B0  2030 0800 4094          move.l    0(A0,D0.L),D0
000025B4  0C80 0000 4095          cmp.l     #1,D0
000025B8  0001      
000025BA  6622      4096          bne.s     DisableBreakPoints_4
                    4097   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000025BC  2002      4098          move.l    D2,D0
000025BE  E588      4099          lsl.l     #2,D0
000025C0  41F9 0B00 4100          lea       _BreakPointAddress.L,A0
000025C4  012E      
000025C6  2D70 0800 4101          move.l    0(A0,D0.L),-4(A6)
000025CA  FFFC      
                    4102   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
000025CC  2002      4103          move.l    D2,D0
000025CE  E388      4104          lsl.l     #1,D0
000025D0  41F9 0B00 4105          lea       _BreakPointInstruction.L,A0
000025D4  014E      
000025D6  226E FFFC 4106          move.l    -4(A6),A1
000025DA  32B0 0800 4107          move.w    0(A0,D0.L),(A1)
                    4108   DisableBreakPoints_4:
000025DE  5282      4109          addq.l    #1,D2
000025E0  60BA      4110          bra       DisableBreakPoints_1
                    4111   DisableBreakPoints_3:
000025E2  241F      4112          move.l    (A7)+,D2
000025E4  4E5E      4113          unlk      A6
000025E6  4E75      4114          rts
                    4115   ; }
                    4116   ; }
                    4117   ; }
                    4118   ; void EnableBreakPoints(void)
                    4119   ; {
                    4120   _EnableBreakPoints:
000025E8  4E56 FFFC 4121          link      A6,#-4
000025EC  2F02      4122          move.l    D2,-(A7)
                    4123   ; int i ;
                    4124   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4125   ; for(i = 0; i < 8; i++)  {
000025EE  4282      4126          clr.l     D2
                    4127   EnableBreakPoints_1:
000025F0  0C82 0000 4128          cmp.l     #8,D2
000025F4  0008      
000025F6  6C32      4129          bge.s     EnableBreakPoints_3
                    4130   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
000025F8  2002      4131          move.l    D2,D0
000025FA  E588      4132          lsl.l     #2,D0
000025FC  41F9 0B00 4133          lea       _BreakPointSetOrCleared.L,A0
00002600  015E      
00002602  2030 0800 4134          move.l    0(A0,D0.L),D0
00002606  0C80 0000 4135          cmp.l     #1,D0
0000260A  0001      
0000260C  6618      4136          bne.s     EnableBreakPoints_4
                    4137   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
0000260E  2002      4138          move.l    D2,D0
00002610  E588      4139          lsl.l     #2,D0
00002612  41F9 0B00 4140          lea       _BreakPointAddress.L,A0
00002616  012E      
00002618  2D70 0800 4141          move.l    0(A0,D0.L),-4(A6)
0000261C  FFFC      
                    4142   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
0000261E  206E FFFC 4143          move.l    -4(A6),A0
00002622  30BC 4E4E 4144          move.w    #20046,(A0)
                    4145   EnableBreakPoints_4:
00002626  5282      4146          addq.l    #1,D2
00002628  60C6      4147          bra       EnableBreakPoints_1
                    4148   EnableBreakPoints_3:
0000262A  241F      4149          move.l    (A7)+,D2
0000262C  4E5E      4150          unlk      A6
0000262E  4E75      4151          rts
                    4152   ; }
                    4153   ; }
                    4154   ; }
                    4155   ; void KillAllBreakPoints(void)
                    4156   ; {
                    4157   _KillAllBreakPoints:
00002630  4E56 FFFC 4158          link      A6,#-4
00002634  2F02      4159          move.l    D2,-(A7)
                    4160   ; int i ;
                    4161   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4162   ; for(i = 0; i < 8; i++)  {
00002636  4282      4163          clr.l     D2
                    4164   KillAllBreakPoints_1:
00002638  0C82 0000 4165          cmp.l     #8,D2
0000263C  0008      
0000263E  6C00 0052 4166          bge       KillAllBreakPoints_3
                    4167   ; // clear BP
                    4168   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002642  2002      4169          move.l    D2,D0
00002644  E588      4170          lsl.l     #2,D0
00002646  41F9 0B00 4171          lea       _BreakPointAddress.L,A0
0000264A  012E      
0000264C  2D70 0800 4172          move.l    0(A0,D0.L),-4(A6)
00002650  FFFC      
                    4173   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002652  2002      4174          move.l    D2,D0
00002654  E388      4175          lsl.l     #1,D0
00002656  41F9 0B00 4176          lea       _BreakPointInstruction.L,A0
0000265A  014E      
0000265C  226E FFFC 4177          move.l    -4(A6),A1
00002660  32B0 0800 4178          move.w    0(A0,D0.L),(A1)
                    4179   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002664  2002      4180          move.l    D2,D0
00002666  E588      4181          lsl.l     #2,D0
00002668  41F9 0B00 4182          lea       _BreakPointAddress.L,A0
0000266C  012E      
0000266E  42B0 0800 4183          clr.l     0(A0,D0.L)
                    4184   ; BreakPointInstruction[i] = 0 ;
00002672  2002      4185          move.l    D2,D0
00002674  E388      4186          lsl.l     #1,D0
00002676  41F9 0B00 4187          lea       _BreakPointInstruction.L,A0
0000267A  014E      
0000267C  4270 0800 4188          clr.w     0(A0,D0.L)
                    4189   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002680  2002      4190          move.l    D2,D0
00002682  E588      4191          lsl.l     #2,D0
00002684  41F9 0B00 4192          lea       _BreakPointSetOrCleared.L,A0
00002688  015E      
0000268A  42B0 0800 4193          clr.l     0(A0,D0.L)
0000268E  5282      4194          addq.l    #1,D2
00002690  60A6      4195          bra       KillAllBreakPoints_1
                    4196   KillAllBreakPoints_3:
00002692  241F      4197          move.l    (A7)+,D2
00002694  4E5E      4198          unlk      A6
00002696  4E75      4199          rts
                    4200   ; }
                    4201   ; //BreakPointDisplay() ;       // display the break points
                    4202   ; }
                    4203   ; void KillAllWatchPoints(void)
                    4204   ; {
                    4205   _KillAllWatchPoints:
00002698  2F02      4206          move.l    D2,-(A7)
                    4207   ; int i ;
                    4208   ; for(i = 0; i < 8; i++)  {
0000269A  4282      4209          clr.l     D2
                    4210   KillAllWatchPoints_1:
0000269C  0C82 0000 4211          cmp.l     #8,D2
000026A0  0008      
000026A2  6C20      4212          bge.s     KillAllWatchPoints_3
                    4213   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
000026A4  2002      4214          move.l    D2,D0
000026A6  E588      4215          lsl.l     #2,D0
000026A8  41F9 0B00 4216          lea       _WatchPointAddress.L,A0
000026AC  0182      
000026AE  42B0 0800 4217          clr.l     0(A0,D0.L)
                    4218   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
000026B2  2002      4219          move.l    D2,D0
000026B4  E588      4220          lsl.l     #2,D0
000026B6  41F9 0B00 4221          lea       _WatchPointSetOrCleared.L,A0
000026BA  01A2      
000026BC  42B0 0800 4222          clr.l     0(A0,D0.L)
000026C0  5282      4223          addq.l    #1,D2
000026C2  60D8      4224          bra       KillAllWatchPoints_1
                    4225   KillAllWatchPoints_3:
000026C4  241F      4226          move.l    (A7)+,D2
000026C6  4E75      4227          rts
                    4228   ; }
                    4229   ; //WatchPointDisplay() ;       // display the break points
                    4230   ; }
                    4231   ; void SetBreakPoint(void)
                    4232   ; {
                    4233   _SetBreakPoint:
000026C8  4E56 FFFC 4234          link      A6,#-4
000026CC  48E7 3830 4235          movem.l   D2/D3/D4/A2/A3,-(A7)
000026D0  45F9 0000 4236          lea       _printf.L,A2
000026D4  4062      
000026D6  47F9 0B00 4237          lea       _BreakPointSetOrCleared.L,A3
000026DA  015E      
                    4238   ; int i ;
                    4239   ; int BPNumber;
                    4240   ; int BPAddress;
                    4241   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4242   ; // see if any free break points
                    4243   ; for(i = 0; i < 8; i ++) {
000026DC  4282      4244          clr.l     D2
                    4245   SetBreakPoint_1:
000026DE  0C82 0000 4246          cmp.l     #8,D2
000026E2  0008      
000026E4  6C10      4247          bge.s     SetBreakPoint_3
                    4248   ; if( BreakPointSetOrCleared[i] == 0)
000026E6  2002      4249          move.l    D2,D0
000026E8  E588      4250          lsl.l     #2,D0
000026EA  2033 0800 4251          move.l    0(A3,D0.L),D0
000026EE  6602      4252          bne.s     SetBreakPoint_4
                    4253   ; break ;         // if spare BP found allow user to set it
000026F0  6004      4254          bra.s     SetBreakPoint_3
                    4255   SetBreakPoint_4:
000026F2  5282      4256          addq.l    #1,D2
000026F4  60E8      4257          bra       SetBreakPoint_1
                    4258   SetBreakPoint_3:
                    4259   ; }
                    4260   ; if(i == 8) {
000026F6  0C82 0000 4261          cmp.l     #8,D2
000026FA  0008      
000026FC  660E      4262          bne.s     SetBreakPoint_6
                    4263   ; printf("\r\nNo FREE Break Points.....") ;
000026FE  4879 0000 4264          pea       @m68kde~1_85.L
00002702  5228      
00002704  4E92      4265          jsr       (A2)
00002706  584F      4266          addq.w    #4,A7
                    4267   ; return ;
00002708  6000 00D6 4268          bra       SetBreakPoint_15
                    4269   SetBreakPoint_6:
                    4270   ; }
                    4271   ; printf("\r\nBreak Point Address: ") ;
0000270C  4879 0000 4272          pea       @m68kde~1_86.L
00002710  5244      
00002712  4E92      4273          jsr       (A2)
00002714  584F      4274          addq.w    #4,A7
                    4275   ; BPAddress = Get8HexDigits(0) ;
00002716  42A7      4276          clr.l     -(A7)
00002718  4EB8 0CA4 4277          jsr       _Get8HexDigits
0000271C  584F      4278          addq.w    #4,A7
0000271E  2600      4279          move.l    D0,D3
                    4280   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00002720  2803      4281          move.l    D3,D4
                    4282   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00002722  2003      4283          move.l    D3,D0
00002724  C0BC 0000 4284          and.l     #1,D0
00002728  0001      
0000272A  0C80 0000 4285          cmp.l     #1,D0
0000272E  0001      
00002730  660E      4286          bne.s     SetBreakPoint_9
                    4287   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002732  4879 0000 4288          pea       @m68kde~1_87.L
00002736  525C      
00002738  4E92      4289          jsr       (A2)
0000273A  584F      4290          addq.w    #4,A7
                    4291   ; return ;
0000273C  6000 00A2 4292          bra       SetBreakPoint_15
                    4293   SetBreakPoint_9:
                    4294   ; }
                    4295   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002740  0C83 0000 4296          cmp.l     #32768,D3
00002744  8000      
00002746  640E      4297          bhs.s     SetBreakPoint_11
                    4298   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002748  4879 0000 4299          pea       @m68kde~1_88.L
0000274C  5292      
0000274E  4E92      4300          jsr       (A2)
00002750  584F      4301          addq.w    #4,A7
                    4302   ; return ;
00002752  6000 008C 4303          bra       SetBreakPoint_15
                    4304   SetBreakPoint_11:
                    4305   ; }
                    4306   ; // search for first free bp or existing same BP
                    4307   ; for(i = 0; i < 8; i++)  {
00002756  4282      4308          clr.l     D2
                    4309   SetBreakPoint_13:
00002758  0C82 0000 4310          cmp.l     #8,D2
0000275C  0008      
0000275E  6C00 0080 4311          bge       SetBreakPoint_15
                    4312   ; if(BreakPointAddress[i] == BPAddress)   {
00002762  2002      4313          move.l    D2,D0
00002764  E588      4314          lsl.l     #2,D0
00002766  41F9 0B00 4315          lea       _BreakPointAddress.L,A0
0000276A  012E      
0000276C  B6B0 0800 4316          cmp.l     0(A0,D0.L),D3
00002770  6610      4317          bne.s     SetBreakPoint_16
                    4318   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002772  2F03      4319          move.l    D3,-(A7)
00002774  4879 0000 4320          pea       @m68kde~1_89.L
00002778  52DA      
0000277A  4E92      4321          jsr       (A2)
0000277C  504F      4322          addq.w    #8,A7
                    4323   ; return ;
0000277E  6000 0060 4324          bra       SetBreakPoint_15
                    4325   SetBreakPoint_16:
                    4326   ; }
                    4327   ; if(BreakPointSetOrCleared[i] == 0) {
00002782  2002      4328          move.l    D2,D0
00002784  E588      4329          lsl.l     #2,D0
00002786  2033 0800 4330          move.l    0(A3,D0.L),D0
0000278A  6600 004E 4331          bne       SetBreakPoint_18
                    4332   ; // set BP here
                    4333   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000278E  2002      4334          move.l    D2,D0
00002790  E588      4335          lsl.l     #2,D0
00002792  27BC 0000 4336          move.l    #1,0(A3,D0.L)
00002796  0001 0800 
                    4337   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
0000279A  2044      4338          move.l    D4,A0
0000279C  2002      4339          move.l    D2,D0
0000279E  E388      4340          lsl.l     #1,D0
000027A0  43F9 0B00 4341          lea       _BreakPointInstruction.L,A1
000027A4  014E      
000027A6  3390 0800 4342          move.w    (A0),0(A1,D0.L)
                    4343   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
000027AA  2F04      4344          move.l    D4,-(A7)
000027AC  4879 0000 4345          pea       @m68kde~1_90.L
000027B0  5312      
000027B2  4E92      4346          jsr       (A2)
000027B4  504F      4347          addq.w    #8,A7
                    4348   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
000027B6  2044      4349          move.l    D4,A0
000027B8  30BC 4E4E 4350          move.w    #20046,(A0)
                    4351   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000027BC  2002      4352          move.l    D2,D0
000027BE  E588      4353          lsl.l     #2,D0
000027C0  41F9 0B00 4354          lea       _BreakPointAddress.L,A0
000027C4  012E      
000027C6  2183 0800 4355          move.l    D3,0(A0,D0.L)
                    4356   ; printf("\r\n") ;
000027CA  4879 0000 4357          pea       @m68kde~1_1.L
000027CE  4A38      
000027D0  4E92      4358          jsr       (A2)
000027D2  584F      4359          addq.w    #4,A7
                    4360   ; BreakPointDisplay() ;       // display the break points
000027D4  4EB8 2298 4361          jsr       _BreakPointDisplay
                    4362   ; return ;
000027D8  6006      4363          bra.s     SetBreakPoint_15
                    4364   SetBreakPoint_18:
000027DA  5282      4365          addq.l    #1,D2
000027DC  6000 FF7A 4366          bra       SetBreakPoint_13
                    4367   SetBreakPoint_15:
000027E0  4CDF 0C1C 4368          movem.l   (A7)+,D2/D3/D4/A2/A3
000027E4  4E5E      4369          unlk      A6
000027E6  4E75      4370          rts
                    4371   ; }
                    4372   ; }
                    4373   ; }
                    4374   ; void SetWatchPoint(void)
                    4375   ; {
                    4376   _SetWatchPoint:
000027E8  4E56 FFF8 4377          link      A6,#-8
000027EC  48E7 3030 4378          movem.l   D2/D3/A2/A3,-(A7)
000027F0  45F9 0000 4379          lea       _printf.L,A2
000027F4  4062      
000027F6  47F9 0B00 4380          lea       _WatchPointSetOrCleared.L,A3
000027FA  01A2      
                    4381   ; int i ;
                    4382   ; int WPNumber;
                    4383   ; int WPAddress;
                    4384   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    4385   ; // see if any free break points
                    4386   ; for(i = 0; i < 8; i ++) {
000027FC  4282      4387          clr.l     D2
                    4388   SetWatchPoint_1:
000027FE  0C82 0000 4389          cmp.l     #8,D2
00002802  0008      
00002804  6C10      4390          bge.s     SetWatchPoint_3
                    4391   ; if( WatchPointSetOrCleared[i] == 0)
00002806  2002      4392          move.l    D2,D0
00002808  E588      4393          lsl.l     #2,D0
0000280A  2033 0800 4394          move.l    0(A3,D0.L),D0
0000280E  6602      4395          bne.s     SetWatchPoint_4
                    4396   ; break ;         // if spare WP found allow user to set it
00002810  6004      4397          bra.s     SetWatchPoint_3
                    4398   SetWatchPoint_4:
00002812  5282      4399          addq.l    #1,D2
00002814  60E8      4400          bra       SetWatchPoint_1
                    4401   SetWatchPoint_3:
                    4402   ; }
                    4403   ; if(i == 8) {
00002816  0C82 0000 4404          cmp.l     #8,D2
0000281A  0008      
0000281C  660E      4405          bne.s     SetWatchPoint_6
                    4406   ; printf("\r\nNo FREE Watch Points.....") ;
0000281E  4879 0000 4407          pea       @m68kde~1_91.L
00002822  5338      
00002824  4E92      4408          jsr       (A2)
00002826  584F      4409          addq.w    #4,A7
                    4410   ; return ;
00002828  6000 008C 4411          bra       SetWatchPoint_11
                    4412   SetWatchPoint_6:
                    4413   ; }
                    4414   ; printf("\r\nWatch Point Address: ") ;
0000282C  4879 0000 4415          pea       @m68kde~1_92.L
00002830  5354      
00002832  4E92      4416          jsr       (A2)
00002834  584F      4417          addq.w    #4,A7
                    4418   ; WPAddress = Get8HexDigits(0) ;
00002836  42A7      4419          clr.l     -(A7)
00002838  4EB8 0CA4 4420          jsr       _Get8HexDigits
0000283C  584F      4421          addq.w    #4,A7
0000283E  2600      4422          move.l    D0,D3
                    4423   ; // search for first free wp or existing same wp
                    4424   ; for(i = 0; i < 8; i++)  {
00002840  4282      4425          clr.l     D2
                    4426   SetWatchPoint_9:
00002842  0C82 0000 4427          cmp.l     #8,D2
00002846  0008      
00002848  6C00 006C 4428          bge       SetWatchPoint_11
                    4429   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
0000284C  2002      4430          move.l    D2,D0
0000284E  E588      4431          lsl.l     #2,D0
00002850  41F9 0B00 4432          lea       _WatchPointAddress.L,A0
00002854  0182      
00002856  B6B0 0800 4433          cmp.l     0(A0,D0.L),D3
0000285A  6614      4434          bne.s     SetWatchPoint_12
0000285C  4A83      4435          tst.l     D3
0000285E  6710      4436          beq.s     SetWatchPoint_12
                    4437   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002860  2F03      4438          move.l    D3,-(A7)
00002862  4879 0000 4439          pea       @m68kde~1_93.L
00002866  536C      
00002868  4E92      4440          jsr       (A2)
0000286A  504F      4441          addq.w    #8,A7
                    4442   ; return ;
0000286C  6000 0048 4443          bra       SetWatchPoint_11
                    4444   SetWatchPoint_12:
                    4445   ; }
                    4446   ; if(WatchPointSetOrCleared[i] == 0) {
00002870  2002      4447          move.l    D2,D0
00002872  E588      4448          lsl.l     #2,D0
00002874  2033 0800 4449          move.l    0(A3,D0.L),D0
00002878  6600 0038 4450          bne       SetWatchPoint_14
                    4451   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
0000287C  2002      4452          move.l    D2,D0
0000287E  E588      4453          lsl.l     #2,D0
00002880  27BC 0000 4454          move.l    #1,0(A3,D0.L)
00002884  0001 0800 
                    4455   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002888  2F03      4456          move.l    D3,-(A7)
0000288A  4879 0000 4457          pea       @m68kde~1_94.L
0000288E  53A2      
00002890  4E92      4458          jsr       (A2)
00002892  504F      4459          addq.w    #8,A7
                    4460   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002894  2002      4461          move.l    D2,D0
00002896  E588      4462          lsl.l     #2,D0
00002898  41F9 0B00 4463          lea       _WatchPointAddress.L,A0
0000289C  0182      
0000289E  2183 0800 4464          move.l    D3,0(A0,D0.L)
                    4465   ; printf("\r\n") ;
000028A2  4879 0000 4466          pea       @m68kde~1_1.L
000028A6  4A38      
000028A8  4E92      4467          jsr       (A2)
000028AA  584F      4468          addq.w    #4,A7
                    4469   ; WatchPointDisplay() ;       // display the break points
000028AC  4EB8 236C 4470          jsr       _WatchPointDisplay
                    4471   ; return ;
000028B0  6004      4472          bra.s     SetWatchPoint_11
                    4473   SetWatchPoint_14:
000028B2  5282      4474          addq.l    #1,D2
000028B4  608C      4475          bra       SetWatchPoint_9
                    4476   SetWatchPoint_11:
000028B6  4CDF 0C0C 4477          movem.l   (A7)+,D2/D3/A2/A3
000028BA  4E5E      4478          unlk      A6
000028BC  4E75      4479          rts
                    4480   ; }
                    4481   ; }
                    4482   ; }
                    4483   ; void HandleBreakPoint(void)
                    4484   ; {
                    4485   _HandleBreakPoint:
000028BE  4E56 FFFC 4486          link      A6,#-4
000028C2  48E7 0038 4487          movem.l   A2/A3/A4,-(A7)
000028C6  45F9 0B00 4488          lea       _i.L,A2
000028CA  00C4      
000028CC  47F9 0000 4489          lea       _printf.L,A3
000028D0  4062      
000028D2  49F9 0B00 4490          lea       _PC.L,A4
000028D6  0120      
                    4491   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4492   ; // now we have to put the break point back to run the instruction
                    4493   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    4494   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000028D8  5594      4495          subq.l    #2,(A4)
                    4496   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000028DA  4879 0000 4497          pea       @m68kde~1_95.L
000028DE  53C8      
000028E0  4E93      4498          jsr       (A3)
000028E2  584F      4499          addq.w    #4,A7
                    4500   ; printf("\r\nSingle Step : [ON]") ;
000028E4  4879 0000 4501          pea       @m68kde~1_96.L
000028E8  53DC      
000028EA  4E93      4502          jsr       (A3)
000028EC  584F      4503          addq.w    #4,A7
                    4504   ; printf("\r\nBreakPoints : [Enabled]") ;
000028EE  4879 0000 4505          pea       @m68kde~1_97.L
000028F2  53F2      
000028F4  4E93      4506          jsr       (A3)
000028F6  584F      4507          addq.w    #4,A7
                    4508   ; // now clear the break point (put original instruction back)
                    4509   ; ProgramBreakPointAddress = PC ;
000028F8  2D54 FFFC 4510          move.l    (A4),-4(A6)
                    4511   ; for(i = 0; i < 8; i ++) {
000028FC  4292      4512          clr.l     (A2)
                    4513   HandleBreakPoint_1:
000028FE  2012      4514          move.l    (A2),D0
00002900  0C80 0000 4515          cmp.l     #8,D0
00002904  0008      
00002906  6400 0056 4516          bhs       HandleBreakPoint_3
                    4517   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
0000290A  2012      4518          move.l    (A2),D0
0000290C  E588      4519          lsl.l     #2,D0
0000290E  41F9 0B00 4520          lea       _BreakPointAddress.L,A0
00002912  012E      
00002914  2230 0800 4521          move.l    0(A0,D0.L),D1
00002918  B294      4522          cmp.l     (A4),D1
0000291A  6600 003E 4523          bne       HandleBreakPoint_4
                    4524   ; BreakPointAddress[i] = 0 ;
0000291E  2012      4525          move.l    (A2),D0
00002920  E588      4526          lsl.l     #2,D0
00002922  41F9 0B00 4527          lea       _BreakPointAddress.L,A0
00002926  012E      
00002928  42B0 0800 4528          clr.l     0(A0,D0.L)
                    4529   ; BreakPointSetOrCleared[i] = 0 ;
0000292C  2012      4530          move.l    (A2),D0
0000292E  E588      4531          lsl.l     #2,D0
00002930  41F9 0B00 4532          lea       _BreakPointSetOrCleared.L,A0
00002934  015E      
00002936  42B0 0800 4533          clr.l     0(A0,D0.L)
                    4534   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000293A  2012      4535          move.l    (A2),D0
0000293C  E388      4536          lsl.l     #1,D0
0000293E  41F9 0B00 4537          lea       _BreakPointInstruction.L,A0
00002942  014E      
00002944  226E FFFC 4538          move.l    -4(A6),A1
00002948  32B0 0800 4539          move.w    0(A0,D0.L),(A1)
                    4540   ; BreakPointInstruction[i] = 0 ;
0000294C  2012      4541          move.l    (A2),D0
0000294E  E388      4542          lsl.l     #1,D0
00002950  41F9 0B00 4543          lea       _BreakPointInstruction.L,A0
00002954  014E      
00002956  4270 0800 4544          clr.w     0(A0,D0.L)
                    4545   HandleBreakPoint_4:
0000295A  5292      4546          addq.l    #1,(A2)
0000295C  60A0      4547          bra       HandleBreakPoint_1
                    4548   HandleBreakPoint_3:
                    4549   ; }
                    4550   ; }
                    4551   ; DumpRegisters() ;
0000295E  4EB8 1AEA 4552          jsr       _DumpRegisters
                    4553   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002962  4879 0000 4554          pea       @m68kde~1_59.L
00002966  4F6E      
00002968  4E93      4555          jsr       (A3)
0000296A  584F      4556          addq.w    #4,A7
                    4557   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
0000296C  4879 0000 4558          pea       @m68kde~1_98.L
00002970  540C      
00002972  4E93      4559          jsr       (A3)
00002974  584F      4560          addq.w    #4,A7
                    4561   ; menu() ;
00002976  4EB9 0000 4562          jsr       _menu
0000297A  2B82      
0000297C  4CDF 1C00 4563          movem.l   (A7)+,A2/A3/A4
00002980  4E5E      4564          unlk      A6
00002982  4E75      4565          rts
                    4566   ; }
                    4567   ; void UnknownCommand()
                    4568   ; {
                    4569   _UnknownCommand:
                    4570   ; printf("\r\nUnknown Command.....\r\n") ;
00002984  4879 0000 4571          pea       @m68kde~1_99.L
00002988  5434      
0000298A  4EB9 0000 4572          jsr       _printf
0000298E  4062      
00002990  584F      4573          addq.w    #4,A7
                    4574   ; Help() ;
00002992  4EB9 0000 4575          jsr       _Help
00002996  2AA8      
00002998  4E75      4576          rts
                    4577   ; }
                    4578   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    4579   ; void CallDebugMonitor(void)
                    4580   ; {
                    4581   _CallDebugMonitor:
                    4582   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000299A  4879 0000 4583          pea       @m68kde~1_100.L
0000299E  544E      
000029A0  4EB9 0000 4584          jsr       _printf
000029A4  4062      
000029A6  584F      4585          addq.w    #4,A7
                    4586   ; menu();
000029A8  4EB9 0000 4587          jsr       _menu
000029AC  2B82      
000029AE  4E75      4588          rts
                    4589   ; }
                    4590   ; void Breakpoint(void)
                    4591   ; {
                    4592   _Breakpoint:
000029B0  2F02      4593          move.l    D2,-(A7)
                    4594   ; char c;
                    4595   ; c = toupper(_getch());
000029B2  2F00      4596          move.l    D0,-(A7)
000029B4  4EB8 0B68 4597          jsr       __getch
000029B8  2200      4598          move.l    D0,D1
000029BA  201F      4599          move.l    (A7)+,D0
000029BC  2F01      4600          move.l    D1,-(A7)
000029BE  4EB9 0000 4601          jsr       _toupper
000029C2  37A0      
000029C4  584F      4602          addq.w    #4,A7
000029C6  1400      4603          move.b    D0,D2
                    4604   ; if( c == (char)('D'))                                      // BreakPoint Display
000029C8  0C02 0044 4605          cmp.b     #68,D2
000029CC  6608      4606          bne.s     Breakpoint_1
                    4607   ; BreakPointDisplay() ;
000029CE  4EB8 2298 4608          jsr       _BreakPointDisplay
000029D2  6000 0054 4609          bra       Breakpoint_10
                    4610   Breakpoint_1:
                    4611   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000029D6  0C02 004B 4612          cmp.b     #75,D2
000029DA  6630      4613          bne.s     Breakpoint_3
                    4614   ; printf("\r\nKill All Break Points...(y/n)?") ;
000029DC  4879 0000 4615          pea       @m68kde~1_101.L
000029E0  546E      
000029E2  4EB9 0000 4616          jsr       _printf
000029E6  4062      
000029E8  584F      4617          addq.w    #4,A7
                    4618   ; c = toupper(_getch());
000029EA  2F00      4619          move.l    D0,-(A7)
000029EC  4EB8 0B68 4620          jsr       __getch
000029F0  2200      4621          move.l    D0,D1
000029F2  201F      4622          move.l    (A7)+,D0
000029F4  2F01      4623          move.l    D1,-(A7)
000029F6  4EB9 0000 4624          jsr       _toupper
000029FA  37A0      
000029FC  584F      4625          addq.w    #4,A7
000029FE  1400      4626          move.b    D0,D2
                    4627   ; if(c == (char)('Y'))
00002A00  0C02 0059 4628          cmp.b     #89,D2
00002A04  6604      4629          bne.s     Breakpoint_5
                    4630   ; KillAllBreakPoints() ;
00002A06  4EB8 2630 4631          jsr       _KillAllBreakPoints
                    4632   Breakpoint_5:
00002A0A  601C      4633          bra.s     Breakpoint_10
                    4634   Breakpoint_3:
                    4635   ; }
                    4636   ; else if(c == (char)('S')) {
00002A0C  0C02 0053 4637          cmp.b     #83,D2
00002A10  6606      4638          bne.s     Breakpoint_7
                    4639   ; SetBreakPoint() ;
00002A12  4EB8 26C8 4640          jsr       _SetBreakPoint
00002A16  6010      4641          bra.s     Breakpoint_10
                    4642   Breakpoint_7:
                    4643   ; }
                    4644   ; else if(c == (char)('C')) {
00002A18  0C02 0043 4645          cmp.b     #67,D2
00002A1C  6606      4646          bne.s     Breakpoint_9
                    4647   ; BreakPointClear() ;
00002A1E  4EB8 2418 4648          jsr       _BreakPointClear
00002A22  6004      4649          bra.s     Breakpoint_10
                    4650   Breakpoint_9:
                    4651   ; }
                    4652   ; else
                    4653   ; UnknownCommand() ;
00002A24  4EB8 2984 4654          jsr       _UnknownCommand
                    4655   Breakpoint_10:
00002A28  241F      4656          move.l    (A7)+,D2
00002A2A  4E75      4657          rts
                    4658   ; }
                    4659   ; void Watchpoint(void)
                    4660   ; {
                    4661   _Watchpoint:
00002A2C  2F02      4662          move.l    D2,-(A7)
                    4663   ; char c;
                    4664   ; c = toupper(_getch());
00002A2E  2F00      4665          move.l    D0,-(A7)
00002A30  4EB8 0B68 4666          jsr       __getch
00002A34  2200      4667          move.l    D0,D1
00002A36  201F      4668          move.l    (A7)+,D0
00002A38  2F01      4669          move.l    D1,-(A7)
00002A3A  4EB9 0000 4670          jsr       _toupper
00002A3E  37A0      
00002A40  584F      4671          addq.w    #4,A7
00002A42  1400      4672          move.b    D0,D2
                    4673   ; if( c == (char)('D'))                                      // WatchPoint Display
00002A44  0C02 0044 4674          cmp.b     #68,D2
00002A48  6608      4675          bne.s     Watchpoint_1
                    4676   ; WatchPointDisplay() ;
00002A4A  4EB8 236C 4677          jsr       _WatchPointDisplay
00002A4E  6000 0054 4678          bra       Watchpoint_10
                    4679   Watchpoint_1:
                    4680   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002A52  0C02 004B 4681          cmp.b     #75,D2
00002A56  6630      4682          bne.s     Watchpoint_3
                    4683   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002A58  4879 0000 4684          pea       @m68kde~1_102.L
00002A5C  5490      
00002A5E  4EB9 0000 4685          jsr       _printf
00002A62  4062      
00002A64  584F      4686          addq.w    #4,A7
                    4687   ; c = toupper(_getch());
00002A66  2F00      4688          move.l    D0,-(A7)
00002A68  4EB8 0B68 4689          jsr       __getch
00002A6C  2200      4690          move.l    D0,D1
00002A6E  201F      4691          move.l    (A7)+,D0
00002A70  2F01      4692          move.l    D1,-(A7)
00002A72  4EB9 0000 4693          jsr       _toupper
00002A76  37A0      
00002A78  584F      4694          addq.w    #4,A7
00002A7A  1400      4695          move.b    D0,D2
                    4696   ; if(c == (char)('Y'))
00002A7C  0C02 0059 4697          cmp.b     #89,D2
00002A80  6604      4698          bne.s     Watchpoint_5
                    4699   ; KillAllWatchPoints() ;
00002A82  4EB8 2698 4700          jsr       _KillAllWatchPoints
                    4701   Watchpoint_5:
00002A86  601C      4702          bra.s     Watchpoint_10
                    4703   Watchpoint_3:
                    4704   ; }
                    4705   ; else if(c == (char)('S')) {
00002A88  0C02 0053 4706          cmp.b     #83,D2
00002A8C  6606      4707          bne.s     Watchpoint_7
                    4708   ; SetWatchPoint() ;
00002A8E  4EB8 27E8 4709          jsr       _SetWatchPoint
00002A92  6010      4710          bra.s     Watchpoint_10
                    4711   Watchpoint_7:
                    4712   ; }
                    4713   ; else if(c == (char)('C')) {
00002A94  0C02 0043 4714          cmp.b     #67,D2
00002A98  6606      4715          bne.s     Watchpoint_9
                    4716   ; WatchPointClear() ;
00002A9A  4EB8 24F2 4717          jsr       _WatchPointClear
00002A9E  6004      4718          bra.s     Watchpoint_10
                    4719   Watchpoint_9:
                    4720   ; }
                    4721   ; else
                    4722   ; UnknownCommand() ;
00002AA0  4EB8 2984 4723          jsr       _UnknownCommand
                    4724   Watchpoint_10:
00002AA4  241F      4725          move.l    (A7)+,D2
00002AA6  4E75      4726          rts
                    4727   ; }
                    4728   ; void Help(void)
                    4729   ; {
                    4730   _Help:
00002AA8  48E7 2020 4731          movem.l   D2/A2,-(A7)
00002AAC  45F9 0000 4732          lea       _printf.L,A2
00002AB0  4062      
                    4733   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002AB2  41F9 0000 4734          lea       @m68kde~1_103.L,A0
00002AB6  54B2      
00002AB8  2408      4735          move.l    A0,D2
                    4736   ; printf(banner) ;
00002ABA  2F02      4737          move.l    D2,-(A7)
00002ABC  4E92      4738          jsr       (A2)
00002ABE  584F      4739          addq.w    #4,A7
                    4740   ; printf("\r\n  Debugger Command Summary") ;
00002AC0  4879 0000 4741          pea       @m68kde~1_104.L
00002AC4  54F6      
00002AC6  4E92      4742          jsr       (A2)
00002AC8  584F      4743          addq.w    #4,A7
                    4744   ; printf(banner) ;
00002ACA  2F02      4745          move.l    D2,-(A7)
00002ACC  4E92      4746          jsr       (A2)
00002ACE  584F      4747          addq.w    #4,A7
                    4748   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
00002AD0  4879 0000 4749          pea       @m68kde~1_105.L
00002AD4  5514      
00002AD6  4E92      4750          jsr       (A2)
00002AD8  584F      4751          addq.w    #4,A7
                    4752   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
00002ADA  4879 0000 4753          pea       @m68kde~1_106.L
00002ADE  5558      
00002AE0  4E92      4754          jsr       (A2)
00002AE2  584F      4755          addq.w    #4,A7
                    4756   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002AE4  4879 0000 4757          pea       @m68kde~1_107.L
00002AE8  5590      
00002AEA  4E92      4758          jsr       (A2)
00002AEC  584F      4759          addq.w    #4,A7
                    4760   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
00002AEE  4879 0000 4761          pea       @m68kde~1_108.L
00002AF2  55CA      
00002AF4  4E92      4762          jsr       (A2)
00002AF6  584F      4763          addq.w    #4,A7
                    4764   ; printf("\r\n  E            - Enter String into Memory") ;
00002AF8  4879 0000 4765          pea       @m68kde~1_109.L
00002AFC  55FC      
00002AFE  4E92      4766          jsr       (A2)
00002B00  584F      4767          addq.w    #4,A7
                    4768   ; printf("\r\n  F            - Fill Memory with Data") ;
00002B02  4879 0000 4769          pea       @m68kde~1_110.L
00002B06  5628      
00002B08  4E92      4770          jsr       (A2)
00002B0A  584F      4771          addq.w    #4,A7
                    4772   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002B0C  2F39 0B00 4773          move.l    _PC.L,-(A7)
00002B10  0120      
00002B12  4879 0000 4774          pea       @m68kde~1_111.L
00002B16  5652      
00002B18  4E92      4775          jsr       (A2)
00002B1A  504F      4776          addq.w    #8,A7
                    4777   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002B1C  4879 0000 4778          pea       @m68kde~1_112.L
00002B20  568C      
00002B22  4E92      4779          jsr       (A2)
00002B24  584F      4780          addq.w    #4,A7
                    4781   ; printf("\r\n  M            - Memory Examine and Change");
00002B26  4879 0000 4782          pea       @m68kde~1_113.L
00002B2A  56C4      
00002B2C  4E92      4783          jsr       (A2)
00002B2E  584F      4784          addq.w    #4,A7
                    4785   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002B30  4879 0000 4786          pea       @m68kde~1_114.L
00002B34  56F2      
00002B36  4E92      4787          jsr       (A2)
00002B38  584F      4788          addq.w    #4,A7
                    4789   ; printf("\r\n  R            - Display 68000 Registers") ;
00002B3A  4879 0000 4790          pea       @m68kde~1_115.L
00002B3E  572C      
00002B40  4E92      4791          jsr       (A2)
00002B42  584F      4792          addq.w    #4,A7
                    4793   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002B44  4879 0000 4794          pea       @m68kde~1_116.L
00002B48  5758      
00002B4A  4E92      4795          jsr       (A2)
00002B4C  584F      4796          addq.w    #4,A7
                    4797   ; printf("\r\n  TM           - Test Memory") ;
00002B4E  4879 0000 4798          pea       @m68kde~1_117.L
00002B52  578A      
00002B54  4E92      4799          jsr       (A2)
00002B56  584F      4800          addq.w    #4,A7
                    4801   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002B58  4879 0000 4802          pea       @m68kde~1_118.L
00002B5C  57AA      
00002B5E  4E92      4803          jsr       (A2)
00002B60  584F      4804          addq.w    #4,A7
                    4805   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002B62  4879 0000 4806          pea       @m68kde~1_119.L
00002B66  57D2      
00002B68  4E92      4807          jsr       (A2)
00002B6A  584F      4808          addq.w    #4,A7
                    4809   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002B6C  4879 0000 4810          pea       @m68kde~1_120.L
00002B70  5808      
00002B72  4E92      4811          jsr       (A2)
00002B74  584F      4812          addq.w    #4,A7
                    4813   ; printf(banner) ;
00002B76  2F02      4814          move.l    D2,-(A7)
00002B78  4E92      4815          jsr       (A2)
00002B7A  584F      4816          addq.w    #4,A7
00002B7C  4CDF 0404 4817          movem.l   (A7)+,D2/A2
00002B80  4E75      4818          rts
                    4819   ; }
                    4820   ; void menu(void)
                    4821   ; {
                    4822   _menu:
00002B82  48E7 303C 4823          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002B86  45F9 0000 4824          lea       _printf.L,A2
00002B8A  4062      
00002B8C  47F9 0B00 4825          lea       _Trace.L,A3
00002B90  00D8      
00002B92  49F9 0B00 4826          lea       _x.L,A4
00002B96  00C8      
00002B98  4BF9 0B00 4827          lea       _SR.L,A5
00002B9C  012C      
                    4828   ; char c,c1 ;
                    4829   ; while(1)    {
                    4830   menu_1:
                    4831   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002B9E  4EB8 0BA6 4832          jsr       _FlushKeyboard
                    4833   ; printf("\r\n#") ;
00002BA2  4879 0000 4834          pea       @m68kde~1_121.L
00002BA6  5840      
00002BA8  4E92      4835          jsr       (A2)
00002BAA  584F      4836          addq.w    #4,A7
                    4837   ; c = toupper(_getch());
00002BAC  2F00      4838          move.l    D0,-(A7)
00002BAE  4EB8 0B68 4839          jsr       __getch
00002BB2  2200      4840          move.l    D0,D1
00002BB4  201F      4841          move.l    (A7)+,D0
00002BB6  2F01      4842          move.l    D1,-(A7)
00002BB8  4EB9 0000 4843          jsr       _toupper
00002BBC  37A0      
00002BBE  584F      4844          addq.w    #4,A7
00002BC0  1400      4845          move.b    D0,D2
                    4846   ; if( c == (char)('L'))                  // load s record file
00002BC2  0C02 004C 4847          cmp.b     #76,D2
00002BC6  6608      4848          bne.s     menu_4
                    4849   ; Load_SRecordFile() ;
00002BC8  4EB8 0E36 4850          jsr       _Load_SRecordFile
00002BCC  6000 021E 4851          bra       menu_46
                    4852   menu_4:
                    4853   ; else if( c == (char)('D'))             // dump memory
00002BD0  0C02 0044 4854          cmp.b     #68,D2
00002BD4  6608      4855          bne.s     menu_6
                    4856   ; DumpMemory() ;
00002BD6  4EB8 0CCC 4857          jsr       _DumpMemory
00002BDA  6000 0210 4858          bra       menu_46
                    4859   menu_6:
                    4860   ; else if( c == (char)('E'))             // Enter String into memory
00002BDE  0C02 0045 4861          cmp.b     #69,D2
00002BE2  660A      4862          bne.s     menu_8
                    4863   ; EnterString() ;
00002BE4  4EB9 0000 4864          jsr       _EnterString
00002BE8  2F34      
00002BEA  6000 0200 4865          bra       menu_46
                    4866   menu_8:
                    4867   ; else if( c == (char)('F'))             // fill memory
00002BEE  0C02 0046 4868          cmp.b     #70,D2
00002BF2  6608      4869          bne.s     menu_10
                    4870   ; FillMemory() ;
00002BF4  4EB8 0DBC 4871          jsr       _FillMemory
00002BF8  6000 01F2 4872          bra       menu_46
                    4873   menu_10:
                    4874   ; else if( c == (char)('G'))  {           // go user program
00002BFC  0C02 0047 4875          cmp.b     #71,D2
00002C00  6626      4876          bne.s     menu_12
                    4877   ; printf("\r\nProgram Running.....") ;
00002C02  4879 0000 4878          pea       @m68kde~1_122.L
00002C06  5844      
00002C08  4E92      4879          jsr       (A2)
00002C0A  584F      4880          addq.w    #4,A7
                    4881   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002C0C  4879 0000 4882          pea       @m68kde~1_123.L
00002C10  585C      
00002C12  4E92      4883          jsr       (A2)
00002C14  584F      4884          addq.w    #4,A7
                    4885   ; GoFlag = 1 ;
00002C16  23FC 0000 4886          move.l    #1,_GoFlag.L
00002C1A  0001 0B00 
00002C1E  00DC      
                    4887   ; go() ;
00002C20  4EB8 08B8 4888          jsr       _go
00002C24  6000 01C6 4889          bra       menu_46
                    4890   menu_12:
                    4891   ; }
                    4892   ; else if( c == (char)('M'))           // memory examine and modify
00002C28  0C02 004D 4893          cmp.b     #77,D2
00002C2C  6608      4894          bne.s     menu_14
                    4895   ; MemoryChange() ;
00002C2E  4EB8 0FC4 4896          jsr       _MemoryChange
00002C32  6000 01B8 4897          bra       menu_46
                    4898   menu_14:
                    4899   ; else if( c == (char)('P'))            // Program Flash Chip
00002C36  0C02 0050 4900          cmp.b     #80,D2
00002C3A  6608      4901          bne.s     menu_16
                    4902   ; ProgramFlashChip() ;
00002C3C  4EB8 1368 4903          jsr       _ProgramFlashChip
00002C40  6000 01AA 4904          bra       menu_46
                    4905   menu_16:
                    4906   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002C44  0C02 0043 4907          cmp.b     #67,D2
00002C48  6608      4908          bne.s     menu_18
                    4909   ; LoadFromFlashChip();
00002C4A  4EB8 138A 4910          jsr       _LoadFromFlashChip
00002C4E  6000 019C 4911          bra       menu_46
                    4912   menu_18:
                    4913   ; else if( c == (char)('R'))             // dump registers
00002C52  0C02 0052 4914          cmp.b     #82,D2
00002C56  6608      4915          bne.s     menu_20
                    4916   ; DumpRegisters() ;
00002C58  4EB8 1AEA 4917          jsr       _DumpRegisters
00002C5C  6000 018E 4918          bra       menu_46
                    4919   menu_20:
                    4920   ; else if( c == (char)('.'))           // change registers
00002C60  0C02 002E 4921          cmp.b     #46,D2
00002C64  6608      4922          bne.s     menu_22
                    4923   ; ChangeRegisters() ;
00002C66  4EB8 1FDC 4924          jsr       _ChangeRegisters
00002C6A  6000 0180 4925          bra       menu_46
                    4926   menu_22:
                    4927   ; else if( c == (char)('B'))              // breakpoint command
00002C6E  0C02 0042 4928          cmp.b     #66,D2
00002C72  6608      4929          bne.s     menu_24
                    4930   ; Breakpoint() ;
00002C74  4EB8 29B0 4931          jsr       _Breakpoint
00002C78  6000 0172 4932          bra       menu_46
                    4933   menu_24:
                    4934   ; else if( c == (char)('T'))  {          // Test command
00002C7C  0C02 0054 4935          cmp.b     #84,D2
00002C80  6600 0046 4936          bne       menu_26
                    4937   ; c1 = toupper(_getch()) ;
00002C84  2F00      4938          move.l    D0,-(A7)
00002C86  4EB8 0B68 4939          jsr       __getch
00002C8A  2200      4940          move.l    D0,D1
00002C8C  201F      4941          move.l    (A7)+,D0
00002C8E  2F01      4942          move.l    D1,-(A7)
00002C90  4EB9 0000 4943          jsr       _toupper
00002C94  37A0      
00002C96  584F      4944          addq.w    #4,A7
00002C98  1600      4945          move.b    D0,D3
                    4946   ; if(c1 == (char)('M'))                    // memory test
00002C9A  0C03 004D 4947          cmp.b     #77,D3
00002C9E  6608      4948          bne.s     menu_28
                    4949   ; MemoryTest() ;
00002CA0  4EB9 0000 4950          jsr       _MemoryTest
00002CA4  2FAC      
00002CA6  601C      4951          bra.s     menu_33
                    4952   menu_28:
                    4953   ; else if( c1 == (char)('S'))              // Switch Test command
00002CA8  0C03 0053 4954          cmp.b     #83,D3
00002CAC  6606      4955          bne.s     menu_30
                    4956   ; SwitchTest() ;
00002CAE  4EB8 0AA4 4957          jsr       _SwitchTest
00002CB2  6010      4958          bra.s     menu_33
                    4959   menu_30:
                    4960   ; else if( c1 == (char)('D'))              // display Test command
00002CB4  0C03 0044 4961          cmp.b     #68,D3
00002CB8  6606      4962          bne.s     menu_32
                    4963   ; TestLEDS() ;
00002CBA  4EB8 0A50 4964          jsr       _TestLEDS
00002CBE  6004      4965          bra.s     menu_33
                    4966   menu_32:
                    4967   ; else
                    4968   ; UnknownCommand() ;
00002CC0  4EB8 2984 4969          jsr       _UnknownCommand
                    4970   menu_33:
00002CC4  6000 0126 4971          bra       menu_46
                    4972   menu_26:
                    4973   ; }
                    4974   ; else if( c == (char)(' ')) {             // Next instruction command
00002CC8  0C02 0020 4975          cmp.b     #32,D2
00002CCC  6636      4976          bne.s     menu_34
                    4977   ; DisableBreakPoints() ;
00002CCE  4EB8 2594 4978          jsr       _DisableBreakPoints
                    4979   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002CD2  2013      4980          move.l    (A3),D0
00002CD4  0C80 0000 4981          cmp.l     #1,D0
00002CD8  0001      
00002CDA  661A      4982          bne.s     menu_36
00002CDC  2039 0B00 4983          move.l    _GoFlag.L,D0
00002CE0  00DC      
00002CE2  0C80 0000 4984          cmp.l     #1,D0
00002CE6  0001      
00002CE8  660C      4985          bne.s     menu_36
                    4986   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002CEA  13FC 0001 4987          move.b    #1,4194314
00002CEE  0040 000A 
                    4988   ; return ;
00002CF2  6000 00FC 4989          bra       menu_38
                    4990   menu_36:
                    4991   ; }
                    4992   ; else
                    4993   ; printf("\r\nError: Press 'G' first to start program") ;
00002CF6  4879 0000 4994          pea       @m68kde~1_124.L
00002CFA  588A      
00002CFC  4E92      4995          jsr       (A2)
00002CFE  584F      4996          addq.w    #4,A7
00002D00  6000 00EA 4997          bra       menu_46
                    4998   menu_34:
                    4999   ; }
                    5000   ; else if( c == (char)('S')) {             // single step
00002D04  0C02 0053 5001          cmp.b     #83,D2
00002D08  6600 008C 5002          bne       menu_39
                    5003   ; if(Trace == 0) {
00002D0C  2013      5004          move.l    (A3),D0
00002D0E  6600 0050 5005          bne       menu_41
                    5006   ; DisableBreakPoints() ;
00002D12  4EB8 2594 5007          jsr       _DisableBreakPoints
                    5008   ; printf("\r\nSingle Step  :[ON]") ;
00002D16  4879 0000 5009          pea       @m68kde~1_125.L
00002D1A  58B4      
00002D1C  4E92      5010          jsr       (A2)
00002D1E  584F      5011          addq.w    #4,A7
                    5012   ; printf("\r\nBreak Points :[Disabled]") ;
00002D20  4879 0000 5013          pea       @m68kde~1_58.L
00002D24  4F52      
00002D26  4E92      5014          jsr       (A2)
00002D28  584F      5015          addq.w    #4,A7
                    5016   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002D2A  0055 8000 5017          or.w      #32768,(A5)
                    5018   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002D2E  2F39 0B00 5019          move.l    _PC.L,-(A7)
00002D32  0120      
00002D34  4879 0000 5020          pea       @m68kde~1_126.L
00002D38  58CA      
00002D3A  4E92      5021          jsr       (A2)
00002D3C  504F      5022          addq.w    #8,A7
                    5023   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002D3E  4879 0000 5024          pea       @m68kde~1_127.L
00002D42  58FE      
00002D44  4E92      5025          jsr       (A2)
00002D46  584F      5026          addq.w    #4,A7
                    5027   ; DumpRegisters() ;
00002D48  4EB8 1AEA 5028          jsr       _DumpRegisters
                    5029   ; Trace = 1;
00002D4C  26BC 0000 5030          move.l    #1,(A3)
00002D50  0001      
                    5031   ; TraceException = 1;
00002D52  13FC 0001 5032          move.b    #1,4194314
00002D56  0040 000A 
                    5033   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002D5A  28B8 0074 5034          move.l    116,(A4)
00002D5E  6032      5035          bra.s     menu_42
                    5036   menu_41:
                    5037   ; }
                    5038   ; else {
                    5039   ; Trace = 0 ;
00002D60  4293      5040          clr.l     (A3)
                    5041   ; TraceException = 0 ;
00002D62  4239 0040 5042          clr.b     4194314
00002D66  000A      
                    5043   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002D68  28B8 0074 5044          move.l    116,(A4)
                    5045   ; EnableBreakPoints() ;
00002D6C  4EB8 25E8 5046          jsr       _EnableBreakPoints
                    5047   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002D70  0255 7FFF 5048          and.w     #32767,(A5)
                    5049   ; printf("\r\nSingle Step : [OFF]") ;
00002D74  4879 0000 5050          pea       @m68kde~1_128.L
00002D78  5922      
00002D7A  4E92      5051          jsr       (A2)
00002D7C  584F      5052          addq.w    #4,A7
                    5053   ; printf("\r\nBreak Points :[Enabled]") ;
00002D7E  4879 0000 5054          pea       @m68kde~1_129.L
00002D82  5938      
00002D84  4E92      5055          jsr       (A2)
00002D86  584F      5056          addq.w    #4,A7
                    5057   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002D88  4879 0000 5058          pea       @m68kde~1_130.L
00002D8C  5952      
00002D8E  4E92      5059          jsr       (A2)
00002D90  584F      5060          addq.w    #4,A7
                    5061   menu_42:
00002D92  6000 0058 5062          bra       menu_46
                    5063   menu_39:
                    5064   ; }
                    5065   ; }
                    5066   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002D96  0C02 001B 5067          cmp.b     #27,D2
00002D9A  6600 0040 5068          bne       menu_43
                    5069   ; Trace = 0;
00002D9E  4293      5070          clr.l     (A3)
                    5071   ; TraceException = 0;
00002DA0  4239 0040 5072          clr.b     4194314
00002DA4  000A      
                    5073   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002DA6  28B8 0074 5074          move.l    116,(A4)
                    5075   ; EnableBreakPoints() ;
00002DAA  4EB8 25E8 5076          jsr       _EnableBreakPoints
                    5077   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002DAE  0255 7FFF 5078          and.w     #32767,(A5)
                    5079   ; printf("\r\nSingle Step  :[OFF]") ;
00002DB2  4879 0000 5080          pea       @m68kde~1_131.L
00002DB6  597C      
00002DB8  4E92      5081          jsr       (A2)
00002DBA  584F      5082          addq.w    #4,A7
                    5083   ; printf("\r\nBreak Points :[Enabled]");
00002DBC  4879 0000 5084          pea       @m68kde~1_129.L
00002DC0  5938      
00002DC2  4E92      5085          jsr       (A2)
00002DC4  584F      5086          addq.w    #4,A7
                    5087   ; printf("\r\nProgram Running.....") ;
00002DC6  4879 0000 5088          pea       @m68kde~1_122.L
00002DCA  5844      
00002DCC  4E92      5089          jsr       (A2)
00002DCE  584F      5090          addq.w    #4,A7
                    5091   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002DD0  4879 0000 5092          pea       @m68kde~1_123.L
00002DD4  585C      
00002DD6  4E92      5093          jsr       (A2)
00002DD8  584F      5094          addq.w    #4,A7
                    5095   ; return ;
00002DDA  6014      5096          bra.s     menu_38
                    5097   menu_43:
                    5098   ; }
                    5099   ; else if( c == (char)('W'))              // Watchpoint command
00002DDC  0C02 0057 5100          cmp.b     #87,D2
00002DE0  6606      5101          bne.s     menu_45
                    5102   ; Watchpoint() ;
00002DE2  4EB8 2A2C 5103          jsr       _Watchpoint
00002DE6  6004      5104          bra.s     menu_46
                    5105   menu_45:
                    5106   ; else
                    5107   ; UnknownCommand() ;
00002DE8  4EB8 2984 5108          jsr       _UnknownCommand
                    5109   menu_46:
00002DEC  6000 FDB0 5110          bra       menu_1
                    5111   menu_38:
00002DF0  4CDF 3C0C 5112          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002DF4  4E75      5113          rts
                    5114   ; }
                    5115   ; }
                    5116   ; void PrintErrorMessageandAbort(char *string) {
                    5117   _PrintErrorMessageandAbort:
00002DF6  4E56 0000 5118          link      A6,#0
                    5119   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002DFA  4879 0000 5120          pea       @m68kde~1_132.L
00002DFE  5992      
00002E00  4EB9 0000 5121          jsr       _printf
00002E04  4062      
00002E06  584F      5122          addq.w    #4,A7
                    5123   ; printf("%s\r\n", string) ;
00002E08  2F2E 0008 5124          move.l    8(A6),-(A7)
00002E0C  4879 0000 5125          pea       @m68kde~1_133.L
00002E10  59AE      
00002E12  4EB9 0000 5126          jsr       _printf
00002E16  4062      
00002E18  504F      5127          addq.w    #8,A7
                    5128   ; menu() ;
00002E1A  4EB8 2B82 5129          jsr       _menu
00002E1E  4E5E      5130          unlk      A6
00002E20  4E75      5131          rts
                    5132   ; }
                    5133   ; void IRQMessage(int level) {
                    5134   _IRQMessage:
00002E22  4E56 0000 5135          link      A6,#0
                    5136   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002E26  4879 0000 5137          pea       @m68kde~1_134.L
00002E2A  59B4      
00002E2C  4EB9 0000 5138          jsr       _printf
00002E30  4062      
00002E32  584F      5139          addq.w    #4,A7
                    5140   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002E34  2F2E 0008 5141          move.l    8(A6),-(A7)
00002E38  4879 0000 5142          pea       @m68kde~1_135.L
00002E3C  59CC      
00002E3E  4EB9 0000 5143          jsr       _printf
00002E42  4062      
00002E44  504F      5144          addq.w    #8,A7
                    5145   ; menu() ;
00002E46  4EB8 2B82 5146          jsr       _menu
00002E4A  4E5E      5147          unlk      A6
00002E4C  4E75      5148          rts
                    5149   ; }
                    5150   ; void UnhandledIRQ1(void) {
                    5151   _UnhandledIRQ1:
                    5152   ; IRQMessage(1);
00002E4E  4878 0001 5153          pea       1
00002E52  4EB8 2E22 5154          jsr       _IRQMessage
00002E56  584F      5155          addq.w    #4,A7
00002E58  4E75      5156          rts
                    5157   ; }
                    5158   ; void UnhandledIRQ2(void) {
                    5159   _UnhandledIRQ2:
                    5160   ; IRQMessage(2);
00002E5A  4878 0002 5161          pea       2
00002E5E  4EB8 2E22 5162          jsr       _IRQMessage
00002E62  584F      5163          addq.w    #4,A7
00002E64  4E75      5164          rts
                    5165   ; }
                    5166   ; void UnhandledIRQ3(void){
                    5167   _UnhandledIRQ3:
                    5168   ; IRQMessage(3);
00002E66  4878 0003 5169          pea       3
00002E6A  4EB8 2E22 5170          jsr       _IRQMessage
00002E6E  584F      5171          addq.w    #4,A7
00002E70  4E75      5172          rts
                    5173   ; }
                    5174   ; void UnhandledIRQ4(void) {
                    5175   _UnhandledIRQ4:
                    5176   ; IRQMessage(4);
00002E72  4878 0004 5177          pea       4
00002E76  4EB8 2E22 5178          jsr       _IRQMessage
00002E7A  584F      5179          addq.w    #4,A7
00002E7C  4E75      5180          rts
                    5181   ; }
                    5182   ; void UnhandledIRQ5(void) {
                    5183   _UnhandledIRQ5:
                    5184   ; IRQMessage(5);
00002E7E  4878 0005 5185          pea       5
00002E82  4EB8 2E22 5186          jsr       _IRQMessage
00002E86  584F      5187          addq.w    #4,A7
00002E88  4E75      5188          rts
                    5189   ; }
                    5190   ; void UnhandledIRQ6(void) {
                    5191   _UnhandledIRQ6:
                    5192   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002E8A  4879 0000 5193          pea       @m68kde~1_136.L
00002E8E  59F0      
00002E90  4EB8 2DF6 5194          jsr       _PrintErrorMessageandAbort
00002E94  584F      5195          addq.w    #4,A7
                    5196   ; menu() ;
00002E96  4EB8 2B82 5197          jsr       _menu
00002E9A  4E75      5198          rts
                    5199   ; }
                    5200   ; void UnhandledIRQ7(void) {
                    5201   _UnhandledIRQ7:
                    5202   ; IRQMessage(7);
00002E9C  4878 0007 5203          pea       7
00002EA0  4EB8 2E22 5204          jsr       _IRQMessage
00002EA4  584F      5205          addq.w    #4,A7
00002EA6  4E75      5206          rts
                    5207   ; }
                    5208   ; void UnhandledTrap(void) {
                    5209   _UnhandledTrap:
                    5210   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002EA8  4879 0000 5211          pea       @m68kde~1_137.L
00002EAC  5A30      
00002EAE  4EB8 2DF6 5212          jsr       _PrintErrorMessageandAbort
00002EB2  584F      5213          addq.w    #4,A7
00002EB4  4E75      5214          rts
                    5215   ; }
                    5216   ; void BusError() {
                    5217   _BusError:
                    5218   ; PrintErrorMessageandAbort("BUS Error!") ;
00002EB6  4879 0000 5219          pea       @m68kde~1_138.L
00002EBA  5A46      
00002EBC  4EB8 2DF6 5220          jsr       _PrintErrorMessageandAbort
00002EC0  584F      5221          addq.w    #4,A7
00002EC2  4E75      5222          rts
                    5223   ; }
                    5224   ; void AddressError() {
                    5225   _AddressError:
                    5226   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002EC4  4879 0000 5227          pea       @m68kde~1_139.L
00002EC8  5A52      
00002ECA  4EB8 2DF6 5228          jsr       _PrintErrorMessageandAbort
00002ECE  584F      5229          addq.w    #4,A7
00002ED0  4E75      5230          rts
                    5231   ; }
                    5232   ; void IllegalInstruction() {
                    5233   _IllegalInstruction:
                    5234   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002ED2  4879 0000 5235          pea       @m68kde~1_140.L
00002ED6  5A62      
00002ED8  4EB8 2DF6 5236          jsr       _PrintErrorMessageandAbort
00002EDC  584F      5237          addq.w    #4,A7
00002EDE  4E75      5238          rts
                    5239   ; }
                    5240   ; void Dividebyzero() {
                    5241   _Dividebyzero:
                    5242   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002EE0  4879 0000 5243          pea       @m68kde~1_141.L
00002EE4  5A76      
00002EE6  4EB8 2DF6 5244          jsr       _PrintErrorMessageandAbort
00002EEA  584F      5245          addq.w    #4,A7
00002EEC  4E75      5246          rts
                    5247   ; }
                    5248   ; void Check() {
                    5249   _Check:
                    5250   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002EEE  4879 0000 5251          pea       @m68kde~1_142.L
00002EF2  5A86      
00002EF4  4EB8 2DF6 5252          jsr       _PrintErrorMessageandAbort
00002EF8  584F      5253          addq.w    #4,A7
00002EFA  4E75      5254          rts
                    5255   ; }
                    5256   ; void Trapv() {
                    5257   _Trapv:
                    5258   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002EFC  4879 0000 5259          pea       @m68kde~1_143.L
00002F00  5A98      
00002F02  4EB8 2DF6 5260          jsr       _PrintErrorMessageandAbort
00002F06  584F      5261          addq.w    #4,A7
00002F08  4E75      5262          rts
                    5263   ; }
                    5264   ; void PrivError() {
                    5265   _PrivError:
                    5266   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002F0A  4879 0000 5267          pea       @m68kde~1_144.L
00002F0E  5AAA      
00002F10  4EB8 2DF6 5268          jsr       _PrintErrorMessageandAbort
00002F14  584F      5269          addq.w    #4,A7
00002F16  4E75      5270          rts
                    5271   ; }
                    5272   ; void UnitIRQ() {
                    5273   _UnitIRQ:
                    5274   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002F18  4879 0000 5275          pea       @m68kde~1_145.L
00002F1C  5ABE      
00002F1E  4EB8 2DF6 5276          jsr       _PrintErrorMessageandAbort
00002F22  584F      5277          addq.w    #4,A7
00002F24  4E75      5278          rts
                    5279   ; }
                    5280   ; void Spurious() {
                    5281   _Spurious:
                    5282   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002F26  4879 0000 5283          pea       @m68kde~1_146.L
00002F2A  5AD0      
00002F2C  4EB8 2DF6 5284          jsr       _PrintErrorMessageandAbort
00002F30  584F      5285          addq.w    #4,A7
00002F32  4E75      5286          rts
                    5287   ; }
                    5288   ; void EnterString(void)
                    5289   ; {
                    5290   _EnterString:
00002F34  4E56 FFFC 5291          link      A6,#-4
00002F38  2F02      5292          move.l    D2,-(A7)
                    5293   ; unsigned char *Start;
                    5294   ; unsigned char c;
                    5295   ; printf("\r\nStart Address in Memory: ") ;
00002F3A  4879 0000 5296          pea       @m68kde~1_147.L
00002F3E  5ADE      
00002F40  4EB9 0000 5297          jsr       _printf
00002F44  4062      
00002F46  584F      5298          addq.w    #4,A7
                    5299   ; Start = Get8HexDigits(0) ;
00002F48  42A7      5300          clr.l     -(A7)
00002F4A  4EB8 0CA4 5301          jsr       _Get8HexDigits
00002F4E  584F      5302          addq.w    #4,A7
00002F50  2400      5303          move.l    D0,D2
                    5304   ; printf("\r\nEnter String (ESC to end) :") ;
00002F52  4879 0000 5305          pea       @m68kde~1_148.L
00002F56  5AFA      
00002F58  4EB9 0000 5306          jsr       _printf
00002F5C  4062      
00002F5E  584F      5307          addq.w    #4,A7
                    5308   ; while((c = getchar()) != 0x1b)
                    5309   EnterString_1:
00002F60  4EB9 0000 5310          jsr       _getch
00002F64  36D6      
00002F66  1D40 FFFF 5311          move.b    D0,-1(A6)
00002F6A  0C00 001B 5312          cmp.b     #27,D0
00002F6E  670A      5313          beq.s     EnterString_3
                    5314   ; *Start++ = c ;
00002F70  2042      5315          move.l    D2,A0
00002F72  5282      5316          addq.l    #1,D2
00002F74  10AE FFFF 5317          move.b    -1(A6),(A0)
00002F78  60E6      5318          bra       EnterString_1
                    5319   EnterString_3:
                    5320   ; *Start = 0x00;  // terminate with a null
00002F7A  2042      5321          move.l    D2,A0
00002F7C  4210      5322          clr.b     (A0)
00002F7E  241F      5323          move.l    (A7)+,D2
00002F80  4E5E      5324          unlk      A6
00002F82  4E75      5325          rts
                    5326   ; }
                    5327   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    5328   ; void clearInputBuffer() {
                    5329   _clearInputBuffer:
00002F84  4E56 FFFC 5330          link      A6,#-4
                    5331   ; int c;
                    5332   ; while ((c = getchar()) != '\n' && c != EOF);
                    5333   clearInputBuffer_1:
00002F88  4EB9 0000 5334          jsr       _getch
00002F8C  36D6      
00002F8E  2D40 FFFC 5335          move.l    D0,-4(A6)
00002F92  0C80 0000 5336          cmp.l     #10,D0
00002F96  000A      
00002F98  670E      5337          beq.s     clearInputBuffer_3
00002F9A  202E FFFC 5338          move.l    -4(A6),D0
00002F9E  0C80 FFFF 5339          cmp.l     #-1,D0
00002FA2  FFFF      
00002FA4  6702      5340          beq.s     clearInputBuffer_3
00002FA6  60E0      5341          bra       clearInputBuffer_1
                    5342   clearInputBuffer_3:
00002FA8  4E5E      5343          unlk      A6
00002FAA  4E75      5344          rts
                    5345   ; }
                    5346   ; void MemoryTest(void)
                    5347   ; {
                    5348   _MemoryTest:
00002FAC  4E56 FF40 5349          link      A6,#-192
00002FB0  48E7 3F3C 5350          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002FB4  45F9 0000 5351          lea       _printf.L,A2
00002FB8  4062      
00002FBA  4BF8 0B68 5352          lea       __getch.L,A5
                    5353   ; unsigned int *RamPtr, counter1=1 ;
00002FBE  2D7C 0000 5354          move.l    #1,-188(A6)
00002FC2  0001 FF44 
                    5355   ; register unsigned int i ;
                    5356   ; unsigned int Start, End ;
                    5357   ; char c, text[150];
                    5358   ; unsigned int* addressPointer;
                    5359   ; unsigned int startAddress = NULL;
00002FC6  42AE FFF0 5360          clr.l     -16(A6)
                    5361   ; unsigned int endAddress = NULL;
00002FCA  42AE FFF4 5362          clr.l     -12(A6)
                    5363   ; unsigned int byteLength;
                    5364   ; unsigned int dataSize = 0;
00002FCE  4285      5365          clr.l     D5
                    5366   ; unsigned int dataPattern = 0;
00002FD0  4283      5367          clr.l     D3
                    5368   ; unsigned int currAddress;
                    5369   ; unsigned int addrCount;
                    5370   ; unsigned int intBuffer = NULL;
00002FD2  7E00      5371          moveq     #0,D7
                    5372   ; unsigned char *startAddressPtr = NULL;
00002FD4  4282      5373          clr.l     D2
                    5374   ; unsigned char *endAddressPtr = NULL;
00002FD6  4286      5375          clr.l     D6
                    5376   ; unsigned short int *wordAddressPtr = NULL;
00002FD8  387C 0000 5377          move.w    #0,A4
                    5378   ; unsigned int *longAddressPtr = NULL;
00002FDC  367C 0000 5379          move.w    #0,A3
                    5380   ; // IMPROVEMENTS TO BE MADE:
                    5381   ; // Suppossed to be able to write an odd address as a byte
                    5382   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    5383   ; // printf("\r\nStart Address: ") ;
                    5384   ; // Start = Get8HexDigits(0) ;
                    5385   ; // printf("\r\nEnd Address: ") ;
                    5386   ; // End = Get8HexDigits(0) ;
                    5387   ; // TODO
                    5388   ; scanflush();
00002FE0  4EB9 0000 5389          jsr       _scanflush
00002FE4  3A58      
                    5390   ; memset(text, 0, sizeof(text));  // fills with zeros
00002FE6  4878 0096 5391          pea       150
00002FEA  42A7      5392          clr.l     -(A7)
00002FEC  486E FF56 5393          pea       -170(A6)
00002FF0  4EB9 0000 5394          jsr       _memset
00002FF4  3772      
00002FF6  DEFC 000C 5395          add.w     #12,A7
                    5396   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
00002FFA  4879 0000 5397          pea       @m68kde~1_149.L
00002FFE  5B18      
00003000  4E92      5398          jsr       (A2)
00003002  584F      5399          addq.w    #4,A7
                    5400   ; dataSize = _getch() - 48;
00003004  4E95      5401          jsr       (A5)
00003006  0480 0000 5402          sub.l     #48,D0
0000300A  0030      
0000300C  2A00      5403          move.l    D0,D5
                    5404   ; printf("\n");
0000300E  4879 0000 5405          pea       @m68kde~1_28.L
00003012  4CE0      
00003014  4E92      5406          jsr       (A2)
00003016  584F      5407          addq.w    #4,A7
                    5408   ; if (dataSize == 0) {
00003018  4A85      5409          tst.l     D5
0000301A  6600 0058 5410          bne       MemoryTest_1
                    5411   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
0000301E  4879 0000 5412          pea       @m68kde~1_150.L
00003022  5B6E      
00003024  4E92      5413          jsr       (A2)
00003026  584F      5414          addq.w    #4,A7
                    5415   ; intBuffer = _getch() - 48;
00003028  4E95      5416          jsr       (A5)
0000302A  0480 0000 5417          sub.l     #48,D0
0000302E  0030      
00003030  2E00      5418          move.l    D0,D7
                    5419   ; // scanf("%d", &intBuffer);
                    5420   ; switch (intBuffer) {
00003032  2007      5421          move.l    D7,D0
00003034  0C80 0000 5422          cmp.l     #4,D0
00003038  0004      
0000303A  642C      5423          bhs.s     MemoryTest_4
0000303C  E380      5424          asl.l     #1,D0
0000303E  303B 0806 5425          move.w    MemoryTest_5(PC,D0.L),D0
00003042  4EFB 0002 5426          jmp       MemoryTest_5(PC,D0.W)
                    5427   MemoryTest_5:
00003046  0008      5428          dc.w      MemoryTest_6-MemoryTest_5
00003048  000C      5429          dc.w      MemoryTest_7-MemoryTest_5
0000304A  0014      5430          dc.w      MemoryTest_8-MemoryTest_5
0000304C  001C      5431          dc.w      MemoryTest_9-MemoryTest_5
                    5432   MemoryTest_6:
                    5433   ; case(0):
                    5434   ; dataPattern = 0x00; break;
0000304E  4283      5435          clr.l     D3
00003050  6016      5436          bra.s     MemoryTest_4
                    5437   MemoryTest_7:
                    5438   ; case(1):
                    5439   ; dataPattern = 0xB2; break;
00003052  263C 0000 5440          move.l    #178,D3
00003056  00B2      
00003058  600E      5441          bra.s     MemoryTest_4
                    5442   MemoryTest_8:
                    5443   ; case(2):
                    5444   ; dataPattern = 0xC3; break;
0000305A  263C 0000 5445          move.l    #195,D3
0000305E  00C3      
00003060  6006      5446          bra.s     MemoryTest_4
                    5447   MemoryTest_9:
                    5448   ; case(3):
                    5449   ; dataPattern = 0xD4; break;
00003062  263C 0000 5450          move.l    #212,D3
00003066  00D4      
                    5451   MemoryTest_4:
                    5452   ; }
                    5453   ; dataPattern &= 0xFF;
00003068  C6BC 0000 5454          and.l     #255,D3
0000306C  00FF      
                    5455   ; byteLength = 1;
0000306E  7801      5456          moveq     #1,D4
00003070  6000 00AE 5457          bra       MemoryTest_11
                    5458   MemoryTest_1:
                    5459   ; } else if (dataSize == 1) {
00003074  0C85 0000 5460          cmp.l     #1,D5
00003078  0001      
0000307A  6600 0058 5461          bne       MemoryTest_10
                    5462   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
0000307E  4879 0000 5463          pea       @m68kde~1_151.L
00003082  5BD0      
00003084  4E92      5464          jsr       (A2)
00003086  584F      5465          addq.w    #4,A7
                    5466   ; intBuffer = _getch() - 48;
00003088  4E95      5467          jsr       (A5)
0000308A  0480 0000 5468          sub.l     #48,D0
0000308E  0030      
00003090  2E00      5469          move.l    D0,D7
                    5470   ; switch (intBuffer) {
00003092  2007      5471          move.l    D7,D0
00003094  0C80 0000 5472          cmp.l     #4,D0
00003098  0004      
0000309A  642C      5473          bhs.s     MemoryTest_13
0000309C  E380      5474          asl.l     #1,D0
0000309E  303B 0806 5475          move.w    MemoryTest_14(PC,D0.L),D0
000030A2  4EFB 0002 5476          jmp       MemoryTest_14(PC,D0.W)
                    5477   MemoryTest_14:
000030A6  0008      5478          dc.w      MemoryTest_15-MemoryTest_14
000030A8  000C      5479          dc.w      MemoryTest_16-MemoryTest_14
000030AA  0014      5480          dc.w      MemoryTest_17-MemoryTest_14
000030AC  001C      5481          dc.w      MemoryTest_18-MemoryTest_14
                    5482   MemoryTest_15:
                    5483   ; case(0):
                    5484   ; dataPattern = 0x0000; break;
000030AE  4283      5485          clr.l     D3
000030B0  6016      5486          bra.s     MemoryTest_13
                    5487   MemoryTest_16:
                    5488   ; case(1):
                    5489   ; dataPattern = 0x1234; break;
000030B2  263C 0000 5490          move.l    #4660,D3
000030B6  1234      
000030B8  600E      5491          bra.s     MemoryTest_13
                    5492   MemoryTest_17:
                    5493   ; case(2):
                    5494   ; dataPattern = 0xA1B2; break;
000030BA  263C 0000 5495          move.l    #41394,D3
000030BE  A1B2      
000030C0  6006      5496          bra.s     MemoryTest_13
                    5497   MemoryTest_18:
                    5498   ; case(3):
                    5499   ; dataPattern = 0xC3D4; break;
000030C2  263C 0000 5500          move.l    #50132,D3
000030C6  C3D4      
                    5501   MemoryTest_13:
                    5502   ; }
                    5503   ; dataPattern &= 0xFFFF;
000030C8  C6BC 0000 5504          and.l     #65535,D3
000030CC  FFFF      
                    5505   ; byteLength = 2;
000030CE  7802      5506          moveq     #2,D4
000030D0  6000 004E 5507          bra       MemoryTest_11
                    5508   MemoryTest_10:
                    5509   ; } else {
                    5510   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
000030D4  4879 0000 5511          pea       @m68kde~1_152.L
000030D8  5C3A      
000030DA  4E92      5512          jsr       (A2)
000030DC  584F      5513          addq.w    #4,A7
                    5514   ; intBuffer = _getch() - 48;
000030DE  4E95      5515          jsr       (A5)
000030E0  0480 0000 5516          sub.l     #48,D0
000030E4  0030      
000030E6  2E00      5517          move.l    D0,D7
                    5518   ; switch (intBuffer) {
000030E8  2007      5519          move.l    D7,D0
000030EA  0C80 0000 5520          cmp.l     #4,D0
000030EE  0004      
000030F0  642C      5521          bhs.s     MemoryTest_20
000030F2  E380      5522          asl.l     #1,D0
000030F4  303B 0806 5523          move.w    MemoryTest_21(PC,D0.L),D0
000030F8  4EFB 0002 5524          jmp       MemoryTest_21(PC,D0.W)
                    5525   MemoryTest_21:
000030FC  0008      5526          dc.w      MemoryTest_22-MemoryTest_21
000030FE  000C      5527          dc.w      MemoryTest_23-MemoryTest_21
00003100  0014      5528          dc.w      MemoryTest_24-MemoryTest_21
00003102  001C      5529          dc.w      MemoryTest_25-MemoryTest_21
                    5530   MemoryTest_22:
                    5531   ; case(0):
                    5532   ; dataPattern = 0x00000000; break;
00003104  4283      5533          clr.l     D3
00003106  6016      5534          bra.s     MemoryTest_20
                    5535   MemoryTest_23:
                    5536   ; case(1):
                    5537   ; dataPattern = 0xAABBCCDD; break;
00003108  263C AABB 5538          move.l    #-1430532899,D3
0000310C  CCDD      
0000310E  600E      5539          bra.s     MemoryTest_20
                    5540   MemoryTest_24:
                    5541   ; case(2):
                    5542   ; dataPattern = 0x11223344; break;
00003110  263C 1122 5543          move.l    #287454020,D3
00003114  3344      
00003116  6006      5544          bra.s     MemoryTest_20
                    5545   MemoryTest_25:
                    5546   ; case(3):
                    5547   ; dataPattern = 0x76543210; break;
00003118  263C 7654 5548          move.l    #1985229328,D3
0000311C  3210      
                    5549   MemoryTest_20:
                    5550   ; }
                    5551   ; byteLength = 4;
0000311E  7804      5552          moveq     #4,D4
                    5553   MemoryTest_11:
                    5554   ; }
                    5555   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    5556   ; while (startAddressPtr == NULL || 
                    5557   MemoryTest_26:
00003120  4A82      5558          tst.l     D2
00003122  6732      5559          beq.s     MemoryTest_29
00003124  0C84 0000 5560          cmp.l     #1,D4
00003128  0001      
0000312A  6316      5561          bls.s     MemoryTest_30
0000312C  2F02      5562          move.l    D2,-(A7)
0000312E  4878 0002 5563          pea       2
00003132  4EB9 0000 5564          jsr       ULDIV
00003136  35C8      
00003138  202F 0004 5565          move.l    4(A7),D0
0000313C  504F      5566          addq.w    #8,A7
0000313E  4A80      5567          tst.l     D0
00003140  6614      5568          bne.s     MemoryTest_29
                    5569   MemoryTest_30:
00003142  0C82 0802 5570          cmp.l     #134348800,D2
00003146  0000      
00003148  650C      5571          blo.s     MemoryTest_29
0000314A  203C 0B00 5572          move.l    #184549376,D0
0000314E  0000      
00003150  9084      5573          sub.l     D4,D0
00003152  B480      5574          cmp.l     D0,D2
00003154  6316      5575          bls.s     MemoryTest_28
                    5576   MemoryTest_29:
                    5577   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    5578   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    5579   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    5580   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
00003156  4879 0000 5581          pea       @m68kde~1_153.L
0000315A  5CB8      
0000315C  4E92      5582          jsr       (A2)
0000315E  584F      5583          addq.w    #4,A7
                    5584   ; startAddressPtr =  Get8HexDigits(0);
00003160  42A7      5585          clr.l     -(A7)
00003162  4EB8 0CA4 5586          jsr       _Get8HexDigits
00003166  584F      5587          addq.w    #4,A7
00003168  2400      5588          move.l    D0,D2
0000316A  60B4      5589          bra       MemoryTest_26
                    5590   MemoryTest_28:
                    5591   ; }
                    5592   ; while (endAddressPtr == NULL || 
                    5593   MemoryTest_31:
0000316C  4A86      5594          tst.l     D6
0000316E  670A      5595          beq.s     MemoryTest_34
00003170  202E FFF0 5596          move.l    -16(A6),D0
00003174  D084      5597          add.l     D4,D0
00003176  BC80      5598          cmp.l     D0,D6
00003178  6416      5599          bhs.s     MemoryTest_33
                    5600   MemoryTest_34:
                    5601   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    5602   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
0000317A  4879 0000 5603          pea       @m68kde~1_154.L
0000317E  5CF0      
00003180  4E92      5604          jsr       (A2)
00003182  584F      5605          addq.w    #4,A7
                    5606   ; endAddressPtr =  Get8HexDigits(0);
00003184  42A7      5607          clr.l     -(A7)
00003186  4EB8 0CA4 5608          jsr       _Get8HexDigits
0000318A  584F      5609          addq.w    #4,A7
0000318C  2C00      5610          move.l    D0,D6
0000318E  60DC      5611          bra       MemoryTest_31
                    5612   MemoryTest_33:
                    5613   ; }
                    5614   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00003190  2F02      5615          move.l    D2,-(A7)
00003192  4879 0000 5616          pea       @m68kde~1_155.L
00003196  5D26      
00003198  4E92      5617          jsr       (A2)
0000319A  504F      5618          addq.w    #8,A7
                    5619   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
0000319C  2F06      5620          move.l    D6,-(A7)
0000319E  4879 0000 5621          pea       @m68kde~1_156.L
000031A2  5D3E      
000031A4  4E92      5622          jsr       (A2)
000031A6  504F      5623          addq.w    #8,A7
                    5624   ; addrCount = 0;
000031A8  42AE FFFC 5625          clr.l     -4(A6)
                    5626   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    5627   MemoryTest_35:
000031AC  B486      5628          cmp.l     D6,D2
000031AE  6400 0132 5629          bhs       MemoryTest_37
000031B2  2006      5630          move.l    D6,D0
000031B4  9082      5631          sub.l     D2,D0
000031B6  5280      5632          addq.l    #1,D0
000031B8  B084      5633          cmp.l     D4,D0
000031BA  6500 0126 5634          blo       MemoryTest_37
                    5635   ; // If address goes beyond 0x0B00_0000 then break
                    5636   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
000031BE  203C 0B00 5637          move.l    #184549376,D0
000031C2  0000      
000031C4  9084      5638          sub.l     D4,D0
000031C6  B480      5639          cmp.l     D0,D2
000031C8  6310      5640          bls.s     MemoryTest_38
                    5641   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
000031CA  2F02      5642          move.l    D2,-(A7)
000031CC  4879 0000 5643          pea       @m68kde~1_157.L
000031D0  5D54      
000031D2  4E92      5644          jsr       (A2)
000031D4  504F      5645          addq.w    #8,A7
                    5646   ; break;
000031D6  6000 010A 5647          bra       MemoryTest_37
                    5648   MemoryTest_38:
                    5649   ; }
                    5650   ; longAddressPtr = startAddressPtr;
000031DA  2642      5651          move.l    D2,A3
                    5652   ; wordAddressPtr = startAddressPtr;
000031DC  2842      5653          move.l    D2,A4
                    5654   ; if (dataSize == 0) {
000031DE  4A85      5655          tst.l     D5
000031E0  6600 0034 5656          bne       MemoryTest_40
                    5657   ; *startAddressPtr = dataPattern;
000031E4  2042      5658          move.l    D2,A0
000031E6  1083      5659          move.b    D3,(A0)
                    5660   ; if ((*startAddressPtr) != dataPattern) {
000031E8  2042      5661          move.l    D2,A0
000031EA  1010      5662          move.b    (A0),D0
000031EC  C0BC 0000 5663          and.l     #255,D0
000031F0  00FF      
000031F2  B083      5664          cmp.l     D3,D0
000031F4  671C      5665          beq.s     MemoryTest_42
                    5666   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
000031F6  2F03      5667          move.l    D3,-(A7)
000031F8  2042      5668          move.l    D2,A0
000031FA  1210      5669          move.b    (A0),D1
000031FC  C2BC 0000 5670          and.l     #255,D1
00003200  00FF      
00003202  2F01      5671          move.l    D1,-(A7)
00003204  2F02      5672          move.l    D2,-(A7)
00003206  4879 0000 5673          pea       @m68kde~1_158.L
0000320A  5D86      
0000320C  4E92      5674          jsr       (A2)
0000320E  DEFC 0010 5675          add.w     #16,A7
                    5676   MemoryTest_42:
00003212  6000 0058 5677          bra       MemoryTest_48
                    5678   MemoryTest_40:
                    5679   ; }
                    5680   ; } else if (dataSize == 1) {
00003216  0C85 0000 5681          cmp.l     #1,D5
0000321A  0001      
0000321C  662C      5682          bne.s     MemoryTest_44
                    5683   ; *wordAddressPtr = dataPattern;
0000321E  3883      5684          move.w    D3,(A4)
                    5685   ; if ((*wordAddressPtr) != dataPattern) {
00003220  3014      5686          move.w    (A4),D0
00003222  C0BC 0000 5687          and.l     #65535,D0
00003226  FFFF      
00003228  B083      5688          cmp.l     D3,D0
0000322A  671C      5689          beq.s     MemoryTest_46
                    5690   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
0000322C  2F03      5691          move.l    D3,-(A7)
0000322E  2042      5692          move.l    D2,A0
00003230  1210      5693          move.b    (A0),D1
00003232  C2BC 0000 5694          and.l     #255,D1
00003236  00FF      
00003238  2F01      5695          move.l    D1,-(A7)
0000323A  2F02      5696          move.l    D2,-(A7)
0000323C  4879 0000 5697          pea       @m68kde~1_158.L
00003240  5D86      
00003242  4E92      5698          jsr       (A2)
00003244  DEFC 0010 5699          add.w     #16,A7
                    5700   MemoryTest_46:
00003248  6022      5701          bra.s     MemoryTest_48
                    5702   MemoryTest_44:
                    5703   ; }
                    5704   ; } else {
                    5705   ; *longAddressPtr = dataPattern;
0000324A  2683      5706          move.l    D3,(A3)
                    5707   ; if ((*longAddressPtr) != dataPattern) {
0000324C  B693      5708          cmp.l     (A3),D3
0000324E  671C      5709          beq.s     MemoryTest_48
                    5710   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00003250  2F03      5711          move.l    D3,-(A7)
00003252  2042      5712          move.l    D2,A0
00003254  1210      5713          move.b    (A0),D1
00003256  C2BC 0000 5714          and.l     #255,D1
0000325A  00FF      
0000325C  2F01      5715          move.l    D1,-(A7)
0000325E  2F02      5716          move.l    D2,-(A7)
00003260  4879 0000 5717          pea       @m68kde~1_158.L
00003264  5D86      
00003266  4E92      5718          jsr       (A2)
00003268  DEFC 0010 5719          add.w     #16,A7
                    5720   MemoryTest_48:
                    5721   ; }
                    5722   ; }
                    5723   ; // if ((*startAddressPtr) != dataPattern) {
                    5724   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    5725   ; // }
                    5726   ; addrCount++;
0000326C  52AE FFFC 5727          addq.l    #1,-4(A6)
                    5728   ; if (addrCount % 128 == 0) {
00003270  2F2E FFFC 5729          move.l    -4(A6),-(A7)
00003274  4878 0080 5730          pea       128
00003278  4EB9 0000 5731          jsr       ULDIV
0000327C  35C8      
0000327E  202F 0004 5732          move.l    4(A7),D0
00003282  504F      5733          addq.w    #8,A7
00003284  4A80      5734          tst.l     D0
00003286  6600 0054 5735          bne       MemoryTest_55
                    5736   ; if (dataSize == 0) {
0000328A  4A85      5737          tst.l     D5
0000328C  661C      5738          bne.s     MemoryTest_52
                    5739   ; printf("Address: 0x%x Value: 0x%02X\n",
0000328E  2042      5740          move.l    D2,A0
00003290  1210      5741          move.b    (A0),D1
00003292  C2BC 0000 5742          and.l     #255,D1
00003296  00FF      
00003298  2F01      5743          move.l    D1,-(A7)
0000329A  2F02      5744          move.l    D2,-(A7)
0000329C  4879 0000 5745          pea       @m68kde~1_159.L
000032A0  5DCC      
000032A2  4E92      5746          jsr       (A2)
000032A4  DEFC 000C 5747          add.w     #12,A7
000032A8  6032      5748          bra.s     MemoryTest_55
                    5749   MemoryTest_52:
                    5750   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    5751   ; }
                    5752   ; else if (dataSize == 1) {
000032AA  0C85 0000 5753          cmp.l     #1,D5
000032AE  0001      
000032B0  661A      5754          bne.s     MemoryTest_54
                    5755   ; printf("Address: 0x%x Value: 0x%04X\n",
000032B2  3214      5756          move.w    (A4),D1
000032B4  C2BC 0000 5757          and.l     #65535,D1
000032B8  FFFF      
000032BA  2F01      5758          move.l    D1,-(A7)
000032BC  2F0C      5759          move.l    A4,-(A7)
000032BE  4879 0000 5760          pea       @m68kde~1_160.L
000032C2  5DEA      
000032C4  4E92      5761          jsr       (A2)
000032C6  DEFC 000C 5762          add.w     #12,A7
000032CA  6010      5763          bra.s     MemoryTest_55
                    5764   MemoryTest_54:
                    5765   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    5766   ; }
                    5767   ; else {
                    5768   ; printf("Address: 0x%x Value: 0x%08X\n",
000032CC  2F13      5769          move.l    (A3),-(A7)
000032CE  2F0B      5770          move.l    A3,-(A7)
000032D0  4879 0000 5771          pea       @m68kde~1_161.L
000032D4  5E08      
000032D6  4E92      5772          jsr       (A2)
000032D8  DEFC 000C 5773          add.w     #12,A7
                    5774   MemoryTest_55:
                    5775   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    5776   ; }
                    5777   ; }
                    5778   ; startAddressPtr += byteLength;
000032DC  D484      5779          add.l     D4,D2
000032DE  6000 FECC 5780          bra       MemoryTest_35
                    5781   MemoryTest_37:
000032E2  4CDF 3CFC 5782          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000032E6  4E5E      5783          unlk      A6
000032E8  4E75      5784          rts
                    5785   ; }
                    5786   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    5787   ; }
                    5788   ; void main(void)
                    5789   ; {
                    5790   _main:
000032EA  4E56 FFF4 5791          link      A6,#-12
000032EE  48E7 3030 5792          movem.l   D2/D3/A2/A3,-(A7)
000032F2  45F8 0A30 5793          lea       _InstallExceptionHandler.L,A2
000032F6  47F9 0000 5794          lea       _printf.L,A3
000032FA  4062      
                    5795   ; char c ;
                    5796   ; int i, j ;
                    5797   ; char *BugMessage = "DE1-68k Bug V1.77";
000032FC  41F9 0000 5798          lea       @m68kde~1_162.L,A0
00003300  5E26      
00003302  2608      5799          move.l    A0,D3
                    5800   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00003304  41F9 0000 5801          lea       @m68kde~1_163.L,A0
00003308  5E38      
0000330A  2D48 FFFC 5802          move.l    A0,-4(A6)
                    5803   ; KillAllBreakPoints() ;
0000330E  4EB8 2630 5804          jsr       _KillAllBreakPoints
                    5805   ; i = x = y = z = PortA_Count = 0;
00003312  42B9 0B00 5806          clr.l     _PortA_Count.L
00003316  00D4      
00003318  42B9 0B00 5807          clr.l     _z.L
0000331C  00D0      
0000331E  42B9 0B00 5808          clr.l     _y.L
00003322  00CC      
00003324  42B9 0B00 5809          clr.l     _x.L
00003328  00C8      
0000332A  4282      5810          clr.l     D2
                    5811   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
0000332C  42B9 0B00 5812          clr.l     _GoFlag.L
00003330  00DC      
00003332  42B9 0B00 5813          clr.l     _Trace.L
00003336  00D8      
                    5814   ; Echo = 1 ;
00003338  23FC 0000 5815          move.l    #1,_Echo.L
0000333C  0001 0B00 
00003340  00E0      
                    5816   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00003342  42B9 0B00 5817          clr.l     _d7.L
00003346  0100      
00003348  42B9 0B00 5818          clr.l     _d6.L
0000334C  00FC      
0000334E  42B9 0B00 5819          clr.l     _d5.L
00003352  00F8      
00003354  42B9 0B00 5820          clr.l     _d4.L
00003358  00F4      
0000335A  42B9 0B00 5821          clr.l     _d3.L
0000335E  00F0      
00003360  42B9 0B00 5822          clr.l     _d2.L
00003364  00EC      
00003366  42B9 0B00 5823          clr.l     _d1.L
0000336A  00E8      
0000336C  42B9 0B00 5824          clr.l     _d0.L
00003370  00E4      
                    5825   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00003372  42B9 0B00 5826          clr.l     _a6.L
00003376  011C      
00003378  42B9 0B00 5827          clr.l     _a5.L
0000337C  0118      
0000337E  42B9 0B00 5828          clr.l     _a4.L
00003382  0114      
00003384  42B9 0B00 5829          clr.l     _a3.L
00003388  0110      
0000338A  42B9 0B00 5830          clr.l     _a2.L
0000338E  010C      
00003390  42B9 0B00 5831          clr.l     _a1.L
00003394  0108      
00003396  42B9 0B00 5832          clr.l     _a0.L
0000339A  0104      
                    5833   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
0000339C  23FC 0800 5834          move.l    #134217728,_PC.L
000033A0  0000 0B00 
000033A4  0120      
000033A6  23FC 0C00 5835          move.l    #201326592,_SSP.L
000033AA  0000 0B00 
000033AE  0124      
000033B0  23FC 0C00 5836          move.l    #201326592,_USP.L
000033B4  0000 0B00 
000033B8  0128      
                    5837   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
000033BA  33FC 2000 5838          move.w    #8192,_SR.L
000033BE  0B00 012C 
                    5839   ; // Initialise Breakpoint variables
                    5840   ; for(i = 0; i < 8; i++)  {
000033C2  4282      5841          clr.l     D2
                    5842   main_1:
000033C4  0C82 0000 5843          cmp.l     #8,D2
000033C8  0008      
000033CA  6C00 004C 5844          bge       main_3
                    5845   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000033CE  2002      5846          move.l    D2,D0
000033D0  E588      5847          lsl.l     #2,D0
000033D2  41F9 0B00 5848          lea       _BreakPointAddress.L,A0
000033D6  012E      
000033D8  42B0 0800 5849          clr.l     0(A0,D0.L)
                    5850   ; WatchPointAddress[i] = 0 ;
000033DC  2002      5851          move.l    D2,D0
000033DE  E588      5852          lsl.l     #2,D0
000033E0  41F9 0B00 5853          lea       _WatchPointAddress.L,A0
000033E4  0182      
000033E6  42B0 0800 5854          clr.l     0(A0,D0.L)
                    5855   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
000033EA  2002      5856          move.l    D2,D0
000033EC  E388      5857          lsl.l     #1,D0
000033EE  41F9 0B00 5858          lea       _BreakPointInstruction.L,A0
000033F2  014E      
000033F4  4270 0800 5859          clr.w     0(A0,D0.L)
                    5860   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
000033F8  2002      5861          move.l    D2,D0
000033FA  E588      5862          lsl.l     #2,D0
000033FC  41F9 0B00 5863          lea       _BreakPointSetOrCleared.L,A0
00003400  015E      
00003402  42B0 0800 5864          clr.l     0(A0,D0.L)
                    5865   ; WatchPointSetOrCleared[i] = 0;
00003406  2002      5866          move.l    D2,D0
00003408  E588      5867          lsl.l     #2,D0
0000340A  41F9 0B00 5868          lea       _WatchPointSetOrCleared.L,A0
0000340E  01A2      
00003410  42B0 0800 5869          clr.l     0(A0,D0.L)
00003414  5282      5870          addq.l    #1,D2
00003416  60AC      5871          bra       main_1
                    5872   main_3:
                    5873   ; }
                    5874   ; Init_RS232() ;     // initialise the RS232 port
00003418  4EB8 0B12 5875          jsr       _Init_RS232
                    5876   ; Init_LCD() ;
0000341C  4EB8 095E 5877          jsr       _Init_LCD
                    5878   ; SPI_Init();
00003420  4EB8 10FC 5879          jsr       _SPI_Init
                    5880   ; IIC_Init();
00003424  4EB8 1428 5881          jsr       _IIC_Init
                    5882   ; for( i = 32; i < 48; i++)
00003428  7420      5883          moveq     #32,D2
                    5884   main_4:
0000342A  0C82 0000 5885          cmp.l     #48,D2
0000342E  0030      
00003430  6C0E      5886          bge.s     main_6
                    5887   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00003432  2F02      5888          move.l    D2,-(A7)
00003434  4878 2EA8 5889          pea       _UnhandledTrap.L
00003438  4E92      5890          jsr       (A2)
0000343A  504F      5891          addq.w    #8,A7
0000343C  5282      5892          addq.l    #1,D2
0000343E  60EA      5893          bra       main_4
                    5894   main_6:
                    5895   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00003440  4878 002F 5896          pea       47
00003444  4878 2B82 5897          pea       _menu.L
00003448  4E92      5898          jsr       (A2)
0000344A  504F      5899          addq.w    #8,A7
                    5900   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
0000344C  4878 0019 5901          pea       25
00003450  4878 2E4E 5902          pea       _UnhandledIRQ1.L
00003454  4E92      5903          jsr       (A2)
00003456  504F      5904          addq.w    #8,A7
                    5905   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00003458  4878 001A 5906          pea       26
0000345C  4878 2E5A 5907          pea       _UnhandledIRQ2.L
00003460  4E92      5908          jsr       (A2)
00003462  504F      5909          addq.w    #8,A7
                    5910   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00003464  4878 001B 5911          pea       27
00003468  4878 2E66 5912          pea       _UnhandledIRQ3.L
0000346C  4E92      5913          jsr       (A2)
0000346E  504F      5914          addq.w    #8,A7
                    5915   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00003470  4878 001C 5916          pea       28
00003474  4878 2E72 5917          pea       _UnhandledIRQ4.L
00003478  4E92      5918          jsr       (A2)
0000347A  504F      5919          addq.w    #8,A7
                    5920   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
0000347C  4878 001D 5921          pea       29
00003480  4878 2E7E 5922          pea       _UnhandledIRQ5.L
00003484  4E92      5923          jsr       (A2)
00003486  504F      5924          addq.w    #8,A7
                    5925   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00003488  4878 001E 5926          pea       30
0000348C  4878 2E8A 5927          pea       _UnhandledIRQ6.L
00003490  4E92      5928          jsr       (A2)
00003492  504F      5929          addq.w    #8,A7
                    5930   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00003494  4878 001F 5931          pea       31
00003498  4878 2E9C 5932          pea       _UnhandledIRQ7.L
0000349C  4E92      5933          jsr       (A2)
0000349E  504F      5934          addq.w    #8,A7
                    5935   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
000034A0  4878 002E 5936          pea       46
000034A4  4878 28BE 5937          pea       _HandleBreakPoint.L
000034A8  4E92      5938          jsr       (A2)
000034AA  504F      5939          addq.w    #8,A7
                    5940   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
000034AC  4878 001D 5941          pea       29
000034B0  4878 1F9E 5942          pea       _DumpRegistersandPause.L
000034B4  4E92      5943          jsr       (A2)
000034B6  504F      5944          addq.w    #8,A7
                    5945   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
000034B8  4878 0002 5946          pea       2
000034BC  4878 2EB6 5947          pea       _BusError.L
000034C0  4E92      5948          jsr       (A2)
000034C2  504F      5949          addq.w    #8,A7
                    5950   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
000034C4  4878 0003 5951          pea       3
000034C8  4878 2EC4 5952          pea       _AddressError.L
000034CC  4E92      5953          jsr       (A2)
000034CE  504F      5954          addq.w    #8,A7
                    5955   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
000034D0  4878 0004 5956          pea       4
000034D4  4878 2ED2 5957          pea       _IllegalInstruction.L
000034D8  4E92      5958          jsr       (A2)
000034DA  504F      5959          addq.w    #8,A7
                    5960   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
000034DC  4878 0005 5961          pea       5
000034E0  4878 2EE0 5962          pea       _Dividebyzero.L
000034E4  4E92      5963          jsr       (A2)
000034E6  504F      5964          addq.w    #8,A7
                    5965   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
000034E8  4878 0006 5966          pea       6
000034EC  4878 2EEE 5967          pea       _Check.L
000034F0  4E92      5968          jsr       (A2)
000034F2  504F      5969          addq.w    #8,A7
                    5970   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
000034F4  4878 0007 5971          pea       7
000034F8  4878 2EFC 5972          pea       _Trapv.L
000034FC  4E92      5973          jsr       (A2)
000034FE  504F      5974          addq.w    #8,A7
                    5975   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00003500  4878 0008 5976          pea       8
00003504  4878 2F0A 5977          pea       _PrivError.L
00003508  4E92      5978          jsr       (A2)
0000350A  504F      5979          addq.w    #8,A7
                    5980   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
0000350C  4878 000F 5981          pea       15
00003510  4878 2F18 5982          pea       _UnitIRQ.L
00003514  4E92      5983          jsr       (A2)
00003516  504F      5984          addq.w    #8,A7
                    5985   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00003518  4878 0018 5986          pea       24
0000351C  4878 2EEE 5987          pea       _Check.L
00003520  4E92      5988          jsr       (A2)
00003522  504F      5989          addq.w    #8,A7
                    5990   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00003524  4EB8 0BA6 5991          jsr       _FlushKeyboard
                    5992   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00003528  4239 0040 5993          clr.b     4194314
0000352C  000A      
                    5994   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5995   ; if (((char)(PortB & 0x02)) == (char)(0x02))    {
0000352E  1039 0040 5996          move.b    4194306,D0
00003532  0002      
00003534  C03C 0002 5997          and.b     #2,D0
00003538  0C00 0002 5998          cmp.b     #2,D0
0000353C  6628      5999          bne.s     main_7
                    6000   ; LoadFromFlashChip();
0000353E  4EB8 138A 6001          jsr       _LoadFromFlashChip
                    6002   ; printf("\r\nRunning.....") ;
00003542  4879 0000 6003          pea       @m68kde~1_164.L
00003546  5E56      
00003548  4E93      6004          jsr       (A3)
0000354A  584F      6005          addq.w    #4,A7
                    6006   ; Oline1("Running.....") ;
0000354C  4879 0000 6007          pea       @m68kde~1_165.L
00003550  5E66      
00003552  4EB8 0A02 6008          jsr       _Oline1
00003556  584F      6009          addq.w    #4,A7
                    6010   ; GoFlag = 1;
00003558  23FC 0000 6011          move.l    #1,_GoFlag.L
0000355C  0001 0B00 
00003560  00DC      
                    6012   ; go() ;
00003562  4EB8 08B8 6013          jsr       _go
                    6014   main_7:
                    6015   ; }
                    6016   ; // otherwise start the debug monitor
                    6017   ; Oline0(BugMessage) ;
00003566  2F03      6018          move.l    D3,-(A7)
00003568  4EB8 09D4 6019          jsr       _Oline0
0000356C  584F      6020          addq.w    #4,A7
                    6021   ; Oline1("By: PJ Davies") ;
0000356E  4879 0000 6022          pea       @m68kde~1_166.L
00003572  5E74      
00003574  4EB8 0A02 6023          jsr       _Oline1
00003578  584F      6024          addq.w    #4,A7
                    6025   ; printf("\r\n%s", BugMessage) ;
0000357A  2F03      6026          move.l    D3,-(A7)
0000357C  4879 0000 6027          pea       @m68kde~1_167.L
00003580  5E82      
00003582  4E93      6028          jsr       (A3)
00003584  504F      6029          addq.w    #8,A7
                    6030   ; printf("\r\n%s", CopyrightMessage) ;
00003586  2F2E FFFC 6031          move.l    -4(A6),-(A7)
0000358A  4879 0000 6032          pea       @m68kde~1_167.L
0000358E  5E82      
00003590  4E93      6033          jsr       (A3)
00003592  504F      6034          addq.w    #8,A7
                    6035   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00003594  4879 0000 6036          pea       @m68kde~1_168.L
00003598  5E88      
0000359A  4E93      6037          jsr       (A3)
0000359C  584F      6038          addq.w    #4,A7
                    6039   ; printf("Initializing i2c test...\n");
0000359E  4879 0000 6040          pea       @m68kde~1_169.L
000035A2  5ED0      
000035A4  4E93      6041          jsr       (A3)
000035A6  584F      6042          addq.w    #4,A7
                    6043   ; I2CTest();
000035A8  4EB8 1A18 6044          jsr       _I2CTest
                    6045   ; menu();
000035AC  4EB8 2B82 6046          jsr       _menu
000035B0  4CDF 0C0C 6047          movem.l   (A7)+,D2/D3/A2/A3
000035B4  4E5E      6048          unlk      A6
000035B6  4E75      6049          rts
                    6050   ; }
                    6051   _strcpy:
000035B8  206F 0004 6052          move.l    (4,A7),A0
000035BC  226F 0008 6053          move.l    (8,A7),A1
000035C0  2008      6054          move.l    A0,D0
                    6055   strcpy_1:
000035C2  10D9      6056          move.b    (A1)+,(A0)+
000035C4  66FC      6057          bne       strcpy_1
000035C6  4E75      6058          rts
                    6059   ULDIV:
000035C8  4E56 0000 6060          link    A6,#0
000035CC  48E7 C000 6061          movem.l D0/D1,-(A7)
000035D0  222E 0008 6062          move.l  8(A6),D1
000035D4  202E 000C 6063          move.l  12(A6),D0
000035D8  6036      6064          bra.s   ldiv_3
                    6065   LDIV:
000035DA  4E56 0000 6066          link    A6,#0
000035DE  48E7 C000 6067          movem.l D0/D1,-(A7)
000035E2  222E 0008 6068          move.l  8(A6),D1
000035E6  202E 000C 6069          move.l  12(A6),D0
000035EA  4A80      6070          tst.l   D0
000035EC  6A0E      6071          bpl.s   ldiv_1
000035EE  4480      6072          neg.l   D0
000035F0  4A81      6073          tst.l   D1
000035F2  6A14      6074          bpl.s   ldiv_2
000035F4  4481      6075          neg.l   D1
000035F6  612A      6076          bsr.s   dodiv
000035F8  4481      6077          neg.l   D1
000035FA  6016      6078          bra.s   ldiv_4
                    6079   ldiv_1:
000035FC  4A81      6080          tst.l   D1
000035FE  6A10      6081          bpl.s   ldiv_3
00003600  4481      6082          neg.l   D1
00003602  611E      6083          bsr.s   dodiv
00003604  4480      6084          neg.l   D0
00003606  600A      6085          bra.s   ldiv_4
                    6086   ldiv_2:
00003608  6118      6087          bsr.s   dodiv
0000360A  4480      6088          neg.l   D0
0000360C  4481      6089          neg.l   D1
0000360E  6002      6090          bra.s   ldiv_4
                    6091   ldiv_3:
00003610  6110      6092          bsr.s   dodiv
                    6093   ldiv_4:
00003612  2D40 0008 6094          move.l  D0,8(A6)
00003616  2D41 000C 6095          move.l  D1,12(A6)
0000361A  4CDF 0003 6096          movem.l (A7)+,D0/D1
0000361E  4E5E      6097          unlk    A6
00003620  4E75      6098          rts
                    6099   dodiv:
00003622  0C81 0000 6100          cmpi.l  #$FFFF,D1
00003626  FFFF      
00003628  6236      6101          bhi.s   dodiv_2
0000362A  0C80 0000 6102          cmpi.l  #$FFFF,D0
0000362E  FFFF      
00003630  6210      6103          bhi.s   dodiv_1
00003632  80C1      6104          divu    D1,D0
00003634  2200      6105          move.l  D0,D1
00003636  4241      6106          clr.w   D1
00003638  4841      6107          swap    D1
0000363A  0280 0000 6108          andi.l  #$FFFF,D0
0000363E  FFFF      
00003640  4E75      6109          rts
                    6110   dodiv_1:
00003642  48A7 A000 6111          movem.w D0/D2,-(A7)
00003646  4240      6112          clr.w   D0
00003648  4840      6113          swap    D0
0000364A  80C1      6114          divu    D1,D0
0000364C  3400      6115          move.w  D0,D2
0000364E  301F      6116          move.w  (A7)+,D0
00003650  80C1      6117          divu    D1,D0
00003652  4840      6118          swap    D0
00003654  4281      6119          clr.l   D1
00003656  3200      6120          move.w  D0,D1
00003658  3002      6121          move.w  D2,D0
0000365A  4840      6122          swap    D0
0000365C  341F      6123          move.w  (A7)+,D2
0000365E  4E75      6124          rts
                    6125   dodiv_2:
00003660  48E7 3800 6126          movem.l D2/D3/D4,-(A7)
00003664  2401      6127          move.l  D1,D2
00003666  4242      6128          clr.w   D2
00003668  4842      6129          swap    D2
0000366A  5282      6130          addq.l  #1,D2
0000366C  2600      6131          move.l  D0,D3
0000366E  2801      6132          move.l  D1,D4
00003670  2202      6133          move.l  D2,D1
00003672  61CE      6134          bsr.s   dodiv_1
00003674  2204      6135          move.l  D4,D1
00003676  82C2      6136          divu    D2,D1
00003678  80C1      6137          divu    D1,D0
0000367A  0280 0000 6138          andi.l  #$FFFF,D0
0000367E  FFFF      
                    6139   dodiv_3:
00003680  2204      6140          move.l  D4,D1
00003682  2404      6141          move.l  D4,D2
00003684  4842      6142          swap    D2
00003686  C2C0      6143          mulu    D0,D1
00003688  C4C0      6144          mulu    D0,D2
0000368A  4842      6145          swap    D2
0000368C  D282      6146          add.l   D2,D1
0000368E  9283      6147          sub.l   D3,D1
00003690  620A      6148          bhi.s   dodiv_4
00003692  4481      6149          neg.l   D1
00003694  B881      6150          cmp.l   D1,D4
00003696  6208      6151          bhi.s   dodiv_5
00003698  5280      6152          addq.l  #1,D0
0000369A  60E4      6153          bra.s   dodiv_3
                    6154   dodiv_4:
0000369C  5380      6155          subq.l  #1,D0
0000369E  60E0      6156          bra.s   dodiv_3
                    6157   dodiv_5:
000036A0  4CDF 001C 6158          movem.l (A7)+,D2/D3/D4
000036A4  4E75      6159          rts
                    6160   _putch:
000036A6  4E56 0000 6161          link      A6,#0
000036AA  48E7 2000 6162          movem.l   D2,-(A7)
000036AE  242E 0008 6163          move.l    8(A6),D2
000036B2  0C82 0000 6164          cmp.l     #10,D2
000036B6  000A      
000036B8  660A      6165          bne.s     putch_1
000036BA  4878 000D 6166          pea       13
000036BE  6100 D47C 6167          bsr       __putch
000036C2  584F      6168          addq.w    #4,A7
                    6169   putch_1:
000036C4  2F02      6170          move.l    D2,-(A7)
000036C6  6100 D474 6171          bsr       __putch
000036CA  584F      6172          addq.w    #4,A7
000036CC  2002      6173          move.l    D2,D0
000036CE  4CDF 0004 6174          movem.l   (A7)+,D2
000036D2  4E5E      6175          unlk      A6
000036D4  4E75      6176          rts
                    6177   _getch:
000036D6  48E7 2000 6178          movem.l   D2,-(A7)
000036DA  2439 0B00 6179          move.l    __ungetbuf,D2
000036DE  00C0      
000036E0  2039 0B00 6180          move.l    __ungetbuf,D0
000036E4  00C0      
000036E6  0C80 FFFF 6181          cmp.l     #-1,D0
000036EA  FFFF      
000036EC  670C      6182          beq.s     getch_1
000036EE  23FC FFFF 6183          move.l    #-1,__ungetbuf
000036F2  FFFF 0B00 
000036F6  00C0      
000036F8  6010      6184          bra.s     getch_3
                    6185   getch_1:
000036FA  6100 D46C 6186          bsr       __getch
000036FE  2400      6187          move.l    D0,D2
00003700  0C80 0000 6188          cmp.l     #13,D0
00003704  000D      
00003706  6602      6189          bne.s     getch_3
00003708  740A      6190          moveq     #10,D2
                    6191   getch_3:
0000370A  2002      6192          move.l    D2,D0
0000370C  4CDF 0004 6193          movem.l   (A7)+,D2
00003710  4E75      6194          rts
                    6195   _tolower:
00003712  4E56 0000 6196          link      A6,#0
00003716  48E7 2000 6197          movem.l   D2,-(A7)
0000371A  242E 0008 6198          move.l    8(A6),D2
0000371E  0C82 0000 6199          cmp.l     #65,D2
00003722  0041      
00003724  6D0E      6200          blt.s     tolower_1
00003726  0C82 0000 6201          cmp.l     #90,D2
0000372A  005A      
0000372C  6E06      6202          bgt.s     tolower_1
0000372E  84BC 0000 6203          or.l      #32,D2
00003732  0020      
                    6204   tolower_1:
00003734  2002      6205          move.l    D2,D0
00003736  4CDF 0004 6206          movem.l   (A7)+,D2
0000373A  4E5E      6207          unlk      A6
0000373C  4E75      6208          rts
                    6209   _sprintf:
0000373E  4E56 FFFC 6210          link      A6,#-4
00003742  48E7 2000 6211          movem.l   D2,-(A7)
00003746  41EE 000C 6212          lea       12(A6),A0
0000374A  5848      6213          addq.w    #4,A0
0000374C  2408      6214          move.l    A0,D2
0000374E  2F02      6215          move.l    D2,-(A7)
00003750  2F2E 000C 6216          move.l    12(A6),-(A7)
00003754  2F2E 0008 6217          move.l    8(A6),-(A7)
00003758  6100 09EC 6218          bsr       _vsprintf
0000375C  DEFC 000C 6219          add.w     #12,A7
00003760  2D40 FFFC 6220          move.l    D0,-4(A6)
00003764  4282      6221          clr.l     D2
00003766  202E FFFC 6222          move.l    -4(A6),D0
0000376A  4CDF 0004 6223          movem.l   (A7)+,D2
0000376E  4E5E      6224          unlk      A6
00003770  4E75      6225          rts
                    6226   _memset:
00003772  206F 0004 6227          move.l    (4,A7),A0
00003776  202F 0008 6228          move.l    (8,A7),D0
0000377A  222F 000C 6229          move.l    (12,A7),D1
0000377E  2248      6230          move.l    A0,A1	
                    6231   memset_1:
00003780  12C0      6232          move.b    D0,(A1)+
00003782  5341      6233          subq      #1,D1
00003784  66FA      6234          bne       memset_1
00003786  2008      6235          move.l    A0,D0
00003788  4E75      6236          rts
                    6237   _strcat:
0000378A  206F 0004 6238          move.l    (4,A7),A0	
0000378E  226F 0008 6239          move.l    (8,A7),A1	
00003792  2008      6240          move.l    A0,D0		
                    6241   strcat_0:
00003794  4A18      6242          tst.b     (A0)+
00003796  66FC      6243          bne       strcat_0
00003798  5348      6244          subq      #1,A0
                    6245   strcat_1:
0000379A  10D9      6246          move.b    (A1)+,(A0)+
0000379C  66FC      6247          bne       strcat_1
0000379E  4E75      6248          rts
                    6249   _toupper:
000037A0  4E56 0000 6250          link      A6,#0
000037A4  48E7 2000 6251          movem.l   D2,-(A7)
000037A8  242E 0008 6252          move.l    8(A6),D2
000037AC  0C82 0000 6253          cmp.l     #97,D2
000037B0  0061      
000037B2  6D0E      6254          blt.s     toupper_1
000037B4  0C82 0000 6255          cmp.l     #122,D2
000037B8  007A      
000037BA  6E06      6256          bgt.s     toupper_1
000037BC  C4BC 0000 6257          and.l     #95,D2
000037C0  005F      
                    6258   toupper_1:
000037C2  2002      6259          move.l    D2,D0
000037C4  4CDF 0004 6260          movem.l   (A7)+,D2
000037C8  4E5E      6261          unlk      A6
000037CA  4E75      6262          rts
                    6263   @vsscanf_scanread:
000037CC  4E56 FFFC 6264          link      A6,#-4
000037D0  48E7 0020 6265          movem.l   A2,-(A7)
000037D4  45F9 0000 6266          lea       @vsscanf_bufx,A2
000037D8  5EEA      
000037DA  4AAE 0008 6267          tst.l     8(A6)
000037DE  6722      6268          beq.s     @vsscanf_scanread_1
000037E0  206E 0008 6269          move.l    8(A6),A0
000037E4  58AE 0008 6270          addq.l    #4,8(A6)
000037E8  2050      6271          move.l    (A0),A0
000037EA  1010      6272          move.b    (A0),D0
000037EC  4880      6273          ext.w     D0
000037EE  48C0      6274          ext.l     D0
000037F0  2D40 FFFC 6275          move.l    D0,-4(A6)
000037F4  6706      6276          beq.s     @vsscanf_scanread_3
000037F6  202E FFFC 6277          move.l    -4(A6),D0
000037FA  6002      6278          bra.s     @vsscanf_scanread_4
                    6279   @vsscanf_scanread_3:
000037FC  70FF      6280          moveq     #-1,D0
                    6281   @vsscanf_scanread_4:
000037FE  6000 0032 6282          bra       @vsscanf_scanread_5
                    6283   @vsscanf_scanread_1:
00003802  2052      6284          move.l    (A2),A0
00003804  1010      6285          move.b    (A0),D0
00003806  6620      6286          bne.s     @vsscanf_scanread_6
00003808  4879 0B00 6287          pea       @vsscanf_buf
0000380C  0546      
0000380E  6100 1038 6288          bsr       _gets
00003812  584F      6289          addq.w    #4,A7
00003814  2480      6290          move.l    D0,(A2)
00003816  4879 0000 6291          pea       @vsscanf_1
0000381A  5EEE      
0000381C  4879 0B00 6292          pea       @vsscanf_buf
00003820  0546      
00003822  6100 FF66 6293          bsr       _strcat
00003826  504F      6294          addq.w    #8,A7
                    6295   @vsscanf_scanread_6:
00003828  2052      6296          move.l    (A2),A0
0000382A  5292      6297          addq.l    #1,(A2)
0000382C  1010      6298          move.b    (A0),D0
0000382E  4880      6299          ext.w     D0
00003830  48C0      6300          ext.l     D0
                    6301   @vsscanf_scanread_5:
00003832  4CDF 0400 6302          movem.l   (A7)+,A2
00003836  4E5E      6303          unlk      A6
00003838  4E75      6304          rts
                    6305   @vsscanf_scanputback:
0000383A  4E56 0000 6306          link      A6,#0
0000383E  48E7 3000 6307          movem.l   D2/D3,-(A7)
00003842  242E 000C 6308          move.l    12(A6),D2
00003846  262E 0008 6309          move.l    8(A6),D3
0000384A  6718      6310          beq.s     @vsscanf_scanputback_1
0000384C  0C82 FFFF 6311          cmp.l     #-1,D2
00003850  FFFF      
00003852  670A      6312          beq.s     @vsscanf_scanputback_3
00003854  5983      6313          subq.l    #4,D3
00003856  2043      6314          move.l    D3,A0
00003858  2050      6315          move.l    (A0),A0
0000385A  1082      6316          move.b    D2,(A0)
0000385C  6004      6317          bra.s     @vsscanf_scanputback_4
                    6318   @vsscanf_scanputback_3:
0000385E  2043      6319          move.l    D3,A0
00003860  5390      6320          subq.l    #1,(A0)
                    6321   @vsscanf_scanputback_4:
00003862  602E      6322          bra.s     @vsscanf_scanputback_6
                    6323   @vsscanf_scanputback_1:
00003864  41F9 0B00 6324          lea       @vsscanf_buf,A0
00003868  0546      
0000386A  2008      6325          move.l    A0,D0
0000386C  B0B9 0000 6326          cmp.l     @vsscanf_bufx,D0
00003870  5EEA      
00003872  6610      6327          bne.s     @vsscanf_scanputback_5
00003874  4239 0B00 6328          clr.b     @vsscanf_buf
00003878  0546      
0000387A  2F02      6329          move.l    D2,-(A7)
0000387C  6100 103C 6330          bsr       _ungetch
00003880  584F      6331          addq.w    #4,A7
00003882  600E      6332          bra.s     @vsscanf_scanputback_6
                    6333   @vsscanf_scanputback_5:
00003884  53B9 0000 6334          subq.l    #1,@vsscanf_bufx
00003888  5EEA      
0000388A  2079 0000 6335          move.l    @vsscanf_bufx,A0
0000388E  5EEA      
00003890  1082      6336          move.b    D2,(A0)
                    6337   @vsscanf_scanputback_6:
00003892  2002      6338          move.l    D2,D0
00003894  4CDF 000C 6339          movem.l   (A7)+,D2/D3
00003898  4E5E      6340          unlk      A6
0000389A  4E75      6341          rts
                    6342   @vsscanf_scanspace:
0000389C  4E56 0000 6343          link      A6,#0
000038A0  48E7 2000 6344          movem.l   D2,-(A7)
                    6345   @vsscanf_scanspace_1:
000038A4  2F2E 0008 6346          move.l    8(A6),-(A7)
000038A8  6100 FF22 6347          bsr       @vsscanf_scanread
000038AC  584F      6348          addq.w    #4,A7
000038AE  2400      6349          move.l    D0,D2
000038B0  206E 000C 6350          move.l    12(A6),A0
000038B4  5290      6351          addq.l    #1,(A0)
000038B6  2042      6352          move.l    D2,A0
000038B8  43F9 0000 6353          lea       __ctype,A1
000038BC  5EF0      
000038BE  1030 9801 6354          move.b    1(A0,A1.L),D0
000038C2  C03C 0010 6355          and.b     #16,D0
000038C6  66DC      6356          bne       @vsscanf_scanspace_1
000038C8  2002      6357          move.l    D2,D0
000038CA  4CDF 0004 6358          movem.l   (A7)+,D2
000038CE  4E5E      6359          unlk      A6
000038D0  4E75      6360          rts
                    6361   @vsscanf_scanselect:
000038D2  4E56 0000 6362          link      A6,#0
000038D6  48E7 3F20 6363          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
000038DA  262E 000C 6364          move.l    12(A6),D3
000038DE  2C2E 0018 6365          move.l    24(A6),D6
000038E2  2E2E 0014 6366          move.l    20(A6),D7
000038E6  2043      6367          move.l    D3,A0
000038E8  1010      6368          move.b    (A0),D0
000038EA  4880      6369          ext.w     D0
000038EC  48C0      6370          ext.l     D0
000038EE  0C80 0000 6371          cmp.l     #94,D0
000038F2  005E      
000038F4  6608      6372          bne.s     @vsscanf_scanselect_1
000038F6  347C 0001 6373          move.w    #1,A2
000038FA  5283      6374          addq.l    #1,D3
000038FC  6004      6375          bra.s     @vsscanf_scanselect_2
                    6376   @vsscanf_scanselect_1:
000038FE  347C 0000 6377          move.w    #0,A2
                    6378   @vsscanf_scanselect_2:
00003902  202E 0010 6379          move.l    16(A6),D0
00003906  53AE 0010 6380          subq.l    #1,16(A6)
0000390A  4A80      6381          tst.l     D0
0000390C  6700 0108 6382          beq       @vsscanf_scanselect_5
00003910  2F2E 0008 6383          move.l    8(A6),-(A7)
00003914  6100 FEB6 6384          bsr       @vsscanf_scanread
00003918  584F      6385          addq.w    #4,A7
0000391A  2800      6386          move.l    D0,D4
0000391C  0C84 FFFF 6387          cmp.l     #-1,D4
00003920  FFFF      
00003922  6604      6388          bne.s     @vsscanf_scanselect_6
00003924  6000 00F0 6389          bra       @vsscanf_scanselect_5
                    6390   @vsscanf_scanselect_6:
00003928  206E 001C 6391          move.l    28(A6),A0
0000392C  5290      6392          addq.l    #1,(A0)
0000392E  4285      6393          clr.l     D5
00003930  4282      6394          clr.l     D2
                    6395   @vsscanf_scanselect_8:
00003932  2043      6396          move.l    D3,A0
00003934  1030 2800 6397          move.b    0(A0,D2.L),D0
00003938  4880      6398          ext.w     D0
0000393A  48C0      6399          ext.l     D0
0000393C  0C80 0000 6400          cmp.l     #93,D0
00003940  005D      
00003942  6700 008E 6401          beq       @vsscanf_scanselect_10
00003946  4A82      6402          tst.l     D2
00003948  6716      6403          beq.s     @vsscanf_scanselect_11
0000394A  2043      6404          move.l    D3,A0
0000394C  1030 2800 6405          move.b    0(A0,D2.L),D0
00003950  4880      6406          ext.w     D0
00003952  48C0      6407          ext.l     D0
00003954  0C80 0000 6408          cmp.l     #93,D0
00003958  005D      
0000395A  6604      6409          bne.s     @vsscanf_scanselect_11
0000395C  6000 0074 6410          bra       @vsscanf_scanselect_10
                    6411   @vsscanf_scanselect_11:
00003960  4A82      6412          tst.l     D2
00003962  6700 0058 6413          beq       @vsscanf_scanselect_15
00003966  2043      6414          move.l    D3,A0
00003968  1030 2800 6415          move.b    0(A0,D2.L),D0
0000396C  4880      6416          ext.w     D0
0000396E  48C0      6417          ext.l     D0
00003970  0C80 0000 6418          cmp.l     #45,D0
00003974  002D      
00003976  6600 0044 6419          bne       @vsscanf_scanselect_15
0000397A  2043      6420          move.l    D3,A0
0000397C  2002      6421          move.l    D2,D0
0000397E  5380      6422          subq.l    #1,D0
00003980  2243      6423          move.l    D3,A1
00003982  2F08      6424          move.l    A0,-(A7)
00003984  2042      6425          move.l    D2,A0
00003986  1230 0800 6426          move.b    0(A0,D0.L),D1
0000398A  B230 9801 6427          cmp.b     1(A0,A1.L),D1
0000398E  6C00 002C 6428          bge       @vsscanf_scanselect_15
00003992  205F      6429          move.l    (A7)+,A0
00003994  2043      6430          move.l    D3,A0
00003996  2002      6431          move.l    D2,D0
00003998  5380      6432          subq.l    #1,D0
0000399A  1030 0800 6433          move.b    0(A0,D0.L),D0
0000399E  4880      6434          ext.w     D0
000039A0  48C0      6435          ext.l     D0
000039A2  B880      6436          cmp.l     D0,D4
000039A4  6D12      6437          blt.s     @vsscanf_scanselect_17
000039A6  2043      6438          move.l    D3,A0
000039A8  2242      6439          move.l    D2,A1
000039AA  1031 8801 6440          move.b    1(A1,A0.L),D0
000039AE  4880      6441          ext.w     D0
000039B0  48C0      6442          ext.l     D0
000039B2  B880      6443          cmp.l     D0,D4
000039B4  6E02      6444          bgt.s     @vsscanf_scanselect_17
000039B6  601A      6445          bra.s     @vsscanf_scanselect_10
                    6446   @vsscanf_scanselect_17:
000039B8  5282      6447          addq.l    #1,D2
000039BA  6010      6448          bra.s     @vsscanf_scanselect_19
                    6449   @vsscanf_scanselect_15:
000039BC  2043      6450          move.l    D3,A0
000039BE  1030 2800 6451          move.b    0(A0,D2.L),D0
000039C2  4880      6452          ext.w     D0
000039C4  48C0      6453          ext.l     D0
000039C6  B880      6454          cmp.l     D0,D4
000039C8  6602      6455          bne.s     @vsscanf_scanselect_19
000039CA  6006      6456          bra.s     @vsscanf_scanselect_10
                    6457   @vsscanf_scanselect_19:
000039CC  5282      6458          addq.l    #1,D2
000039CE  6000 FF62 6459          bra       @vsscanf_scanselect_8
                    6460   @vsscanf_scanselect_10:
000039D2  4A82      6461          tst.l     D2
000039D4  6712      6462          beq.s     @vsscanf_scanselect_23
000039D6  2043      6463          move.l    D3,A0
000039D8  1030 2800 6464          move.b    0(A0,D2.L),D0
000039DC  4880      6465          ext.w     D0
000039DE  48C0      6466          ext.l     D0
000039E0  0C80 0000 6467          cmp.l     #93,D0
000039E4  005D      
000039E6  6702      6468          beq.s     @vsscanf_scanselect_21
                    6469   @vsscanf_scanselect_23:
000039E8  7A01      6470          moveq     #1,D5
                    6471   @vsscanf_scanselect_21:
000039EA  200A      6472          move.l    A2,D0
000039EC  6712      6473          beq.s     @vsscanf_scanselect_24
000039EE  4A85      6474          tst.l     D5
000039F0  660C      6475          bne.s     @vsscanf_scanselect_26
000039F2  4A87      6476          tst.l     D7
000039F4  6606      6477          bne.s     @vsscanf_scanselect_28
000039F6  2046      6478          move.l    D6,A0
000039F8  5286      6479          addq.l    #1,D6
000039FA  1084      6480          move.b    D4,(A0)
                    6481   @vsscanf_scanselect_28:
000039FC  6014      6482          bra.s     @vsscanf_scanselect_4
                    6483   @vsscanf_scanselect_26:
000039FE  6016      6484          bra.s     @vsscanf_scanselect_5
                    6485   @vsscanf_scanselect_24:
00003A00  4A85      6486          tst.l     D5
00003A02  670C      6487          beq.s     @vsscanf_scanselect_30
00003A04  4A87      6488          tst.l     D7
00003A06  6606      6489          bne.s     @vsscanf_scanselect_32
00003A08  2046      6490          move.l    D6,A0
00003A0A  5286      6491          addq.l    #1,D6
00003A0C  1084      6492          move.b    D4,(A0)
                    6493   @vsscanf_scanselect_32:
00003A0E  6002      6494          bra.s     @vsscanf_scanselect_4
                    6495   @vsscanf_scanselect_30:
00003A10  6004      6496          bra.s     @vsscanf_scanselect_5
                    6497   @vsscanf_scanselect_4:
00003A12  6000 FEEE 6498          bra       @vsscanf_scanselect_2
                    6499   @vsscanf_scanselect_5:
00003A16  0C84 FFFF 6500          cmp.l     #-1,D4
00003A1A  FFFF      
00003A1C  6712      6501          beq.s     @vsscanf_scanselect_34
00003A1E  2F04      6502          move.l    D4,-(A7)
00003A20  2F2E 0008 6503          move.l    8(A6),-(A7)
00003A24  6100 FE14 6504          bsr       @vsscanf_scanputback
00003A28  504F      6505          addq.w    #8,A7
00003A2A  206E 001C 6506          move.l    28(A6),A0
00003A2E  5390      6507          subq.l    #1,(A0)
                    6508   @vsscanf_scanselect_34:
00003A30  4A87      6509          tst.l     D7
00003A32  6604      6510          bne.s     @vsscanf_scanselect_36
00003A34  2046      6511          move.l    D6,A0
00003A36  4210      6512          clr.b     (A0)
                    6513   @vsscanf_scanselect_36:
00003A38  5283      6514          addq.l    #1,D3
00003A3A  2043      6515          move.l    D3,A0
00003A3C  1010      6516          move.b    (A0),D0
00003A3E  4880      6517          ext.w     D0
00003A40  48C0      6518          ext.l     D0
00003A42  0C80 0000 6519          cmp.l     #93,D0
00003A46  005D      
00003A48  6702      6520          beq.s     @vsscanf_scanselect_40
00003A4A  60EC      6521          bra       @vsscanf_scanselect_36
                    6522   @vsscanf_scanselect_40:
00003A4C  5283      6523          addq.l    #1,D3
00003A4E  2003      6524          move.l    D3,D0
00003A50  4CDF 04FC 6525          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003A54  4E5E      6526          unlk      A6
00003A56  4E75      6527          rts
                    6528   _scanflush:
00003A58  41F9 0B00 6529          lea       @vsscanf_buf,A0
00003A5C  0546      
00003A5E  23C8 0000 6530          move.l    A0,@vsscanf_bufx
00003A62  5EEA      
00003A64  4239 0B00 6531          clr.b     @vsscanf_buf
00003A68  0546      
00003A6A  4878 FFFF 6532          pea       -1
00003A6E  6100 0E4A 6533          bsr       _ungetch
00003A72  584F      6534          addq.w    #4,A7
00003A74  4E75      6535          rts
                    6536   _vsscanf:
00003A76  4E56 FF88 6537          link      A6,#-120
00003A7A  48E7 3F3C 6538          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003A7E  47F8 37CC 6539          lea       @vsscanf_scanread,A3
00003A82  4AAE 0008 6540          tst.l     8(A6)
00003A86  6706      6541          beq.s     vsscanf_1
00003A88  41EE 0008 6542          lea       8(A6),A0
00003A8C  6004      6543          bra.s     vsscanf_2
                    6544   vsscanf_1:
00003A8E  4280      6545          clr.l     D0
00003A90  2040      6546          move.l    D0,A0
                    6547   vsscanf_2:
00003A92  2A08      6548          move.l    A0,D5
00003A94  42AE FFE4 6549          clr.l     -28(A6)
00003A98  4284      6550          clr.l     D4
                    6551   vsscanf_3:
00003A9A  206E 000C 6552          move.l    12(A6),A0
00003A9E  52AE 000C 6553          addq.l    #1,12(A6)
00003AA2  1010      6554          move.b    (A0),D0
00003AA4  4880      6555          ext.w     D0
00003AA6  48C0      6556          ext.l     D0
00003AA8  2600      6557          move.l    D0,D3
00003AAA  6700 05AC 6558          beq       vsscanf_5
00003AAE  4286      6559          clr.l     D6
00003AB0  387C 0000 6560          move.w    #0,A4
00003AB4  0C83 0000 6561          cmp.l     #32,D3
00003AB8  0020      
00003ABA  6712      6562          beq.s     vsscanf_8
00003ABC  0C83 0000 6563          cmp.l     #9,D3
00003AC0  0009      
00003AC2  670A      6564          beq.s     vsscanf_8
00003AC4  0C83 0000 6565          cmp.l     #10,D3
00003AC8  000A      
00003ACA  6600 0048 6566          bne       vsscanf_6
                    6567   vsscanf_8:
00003ACE  2F05      6568          move.l    D5,-(A7)
00003AD0  4E93      6569          jsr       (A3)
00003AD2  584F      6570          addq.w    #4,A7
00003AD4  2400      6571          move.l    D0,D2
00003AD6  52AE FFE4 6572          addq.l    #1,-28(A6)
00003ADA  0C82 FFFF 6573          cmp.l     #-1,D2
00003ADE  FFFF      
00003AE0  660E      6574          bne.s     vsscanf_11
00003AE2  4A84      6575          tst.l     D4
00003AE4  6704      6576          beq.s     vsscanf_13
00003AE6  2004      6577          move.l    D4,D0
00003AE8  6002      6578          bra.s     vsscanf_14
                    6579   vsscanf_13:
00003AEA  70FF      6580          moveq     #-1,D0
                    6581   vsscanf_14:
00003AEC  6000 056C 6582          bra       vsscanf_15
                    6583   vsscanf_11:
00003AF0  2042      6584          move.l    D2,A0
00003AF2  43F9 0000 6585          lea       __ctype,A1
00003AF6  5EF0      
00003AF8  1030 9801 6586          move.b    1(A0,A1.L),D0
00003AFC  C03C 0010 6587          and.b     #16,D0
00003B00  66CC      6588          bne       vsscanf_8
00003B02  53AE FFE4 6589          subq.l    #1,-28(A6)
00003B06  2F02      6590          move.l    D2,-(A7)
00003B08  2F05      6591          move.l    D5,-(A7)
00003B0A  6100 FD2E 6592          bsr       @vsscanf_scanputback
00003B0E  504F      6593          addq.w    #8,A7
00003B10  6000 0542 6594          bra       vsscanf_139
                    6595   vsscanf_6:
00003B14  0C83 0000 6596          cmp.l     #37,D3
00003B18  0025      
00003B1A  6600 0502 6597          bne       vsscanf_127
00003B1E  206E 000C 6598          move.l    12(A6),A0
00003B22  52AE 000C 6599          addq.l    #1,12(A6)
00003B26  1010      6600          move.b    (A0),D0
00003B28  4880      6601          ext.w     D0
00003B2A  48C0      6602          ext.l     D0
00003B2C  2600      6603          move.l    D0,D3
00003B2E  42AE FFEC 6604          clr.l     -20(A6)
00003B32  4286      6605          clr.l     D6
00003B34  42AE FFE8 6606          clr.l     -24(A6)
00003B38  347C 7FFF 6607          move.w    #32767,A2
00003B3C  0C83 0000 6608          cmp.l     #42,D3
00003B40  002A      
00003B42  6612      6609          bne.s     vsscanf_18
00003B44  7C01      6610          moveq     #1,D6
00003B46  206E 000C 6611          move.l    12(A6),A0
00003B4A  52AE 000C 6612          addq.l    #1,12(A6)
00003B4E  1010      6613          move.b    (A0),D0
00003B50  4880      6614          ext.w     D0
00003B52  48C0      6615          ext.l     D0
00003B54  2600      6616          move.l    D0,D3
                    6617   vsscanf_18:
00003B56  2043      6618          move.l    D3,A0
00003B58  43F9 0000 6619          lea       __ctype,A1
00003B5C  5EF0      
00003B5E  1030 9801 6620          move.b    1(A0,A1.L),D0
00003B62  C03C 0004 6621          and.b     #4,D0
00003B66  6700 004E 6622          beq       vsscanf_24
00003B6A  2003      6623          move.l    D3,D0
00003B6C  0480 0000 6624          sub.l     #48,D0
00003B70  0030      
00003B72  2440      6625          move.l    D0,A2
                    6626   vsscanf_22:
00003B74  206E 000C 6627          move.l    12(A6),A0
00003B78  52AE 000C 6628          addq.l    #1,12(A6)
00003B7C  1010      6629          move.b    (A0),D0
00003B7E  4880      6630          ext.w     D0
00003B80  48C0      6631          ext.l     D0
00003B82  2600      6632          move.l    D0,D3
00003B84  2040      6633          move.l    D0,A0
00003B86  43F9 0000 6634          lea       __ctype,A1
00003B8A  5EF0      
00003B8C  1030 9801 6635          move.b    1(A0,A1.L),D0
00003B90  C0BC 0000 6636          and.l     #255,D0
00003B94  00FF      
00003B96  C0BC 0000 6637          and.l     #4,D0
00003B9A  0004      
00003B9C  6718      6638          beq.s     vsscanf_24
00003B9E  70D0      6639          moveq     #-48,D0
00003BA0  2F0A      6640          move.l    A2,-(A7)
00003BA2  4878 000A 6641          pea       10
00003BA6  6100 0C12 6642          bsr       LMUL
00003BAA  2217      6643          move.l    (A7),D1
00003BAC  504F      6644          addq.w    #8,A7
00003BAE  D283      6645          add.l     D3,D1
00003BB0  D081      6646          add.l     D1,D0
00003BB2  2440      6647          move.l    D0,A2
00003BB4  60BE      6648          bra       vsscanf_22
                    6649   vsscanf_24:
00003BB6  0C83 0000 6650          cmp.l     #108,D3
00003BBA  006C      
00003BBC  6708      6651          beq.s     vsscanf_27
00003BBE  0C83 0000 6652          cmp.l     #76,D3
00003BC2  004C      
00003BC4  661A      6653          bne.s     vsscanf_25
                    6654   vsscanf_27:
00003BC6  2D7C 0000 6655          move.l    #1,-24(A6)
00003BCA  0001 FFE8 
00003BCE  206E 000C 6656          move.l    12(A6),A0
00003BD2  52AE 000C 6657          addq.l    #1,12(A6)
00003BD6  1010      6658          move.b    (A0),D0
00003BD8  4880      6659          ext.w     D0
00003BDA  48C0      6660          ext.l     D0
00003BDC  2600      6661          move.l    D0,D3
00003BDE  6020      6662          bra.s     vsscanf_28
                    6663   vsscanf_25:
00003BE0  0C83 0000 6664          cmp.l     #104,D3
00003BE4  0068      
00003BE6  6618      6665          bne.s     vsscanf_28
00003BE8  2D7C 0000 6666          move.l    #1,-20(A6)
00003BEC  0001 FFEC 
00003BF0  206E 000C 6667          move.l    12(A6),A0
00003BF4  52AE 000C 6668          addq.l    #1,12(A6)
00003BF8  1010      6669          move.b    (A0),D0
00003BFA  4880      6670          ext.w     D0
00003BFC  48C0      6671          ext.l     D0
00003BFE  2600      6672          move.l    D0,D3
                    6673   vsscanf_28:
00003C00  0C83 0000 6674          cmp.l     #91,D3
00003C04  005B      
00003C06  6600 0036 6675          bne       vsscanf_30
00003C0A  4A86      6676          tst.l     D6
00003C0C  660A      6677          bne.s     vsscanf_32
00003C0E  206E 0010 6678          move.l    16(A6),A0
00003C12  58AE 0010 6679          addq.l    #4,16(A6)
00003C16  2E10      6680          move.l    (A0),D7
                    6681   vsscanf_32:
00003C18  486E FFE4 6682          pea       -28(A6)
00003C1C  2F07      6683          move.l    D7,-(A7)
00003C1E  2F06      6684          move.l    D6,-(A7)
00003C20  2F0A      6685          move.l    A2,-(A7)
00003C22  2F2E 000C 6686          move.l    12(A6),-(A7)
00003C26  2F05      6687          move.l    D5,-(A7)
00003C28  6100 FCA8 6688          bsr       @vsscanf_scanselect
00003C2C  DEFC 0018 6689          add.w     #24,A7
00003C30  2D40 000C 6690          move.l    D0,12(A6)
00003C34  4A86      6691          tst.l     D6
00003C36  6602      6692          bne.s     vsscanf_34
00003C38  5284      6693          addq.l    #1,D4
                    6694   vsscanf_34:
00003C3A  6000 0418 6695          bra       vsscanf_139
                    6696   vsscanf_30:
00003C3E  0C83 0000 6697          cmp.l     #110,D3
00003C42  006E      
00003C44  661A      6698          bne.s     vsscanf_36
00003C46  4A86      6699          tst.l     D6
00003C48  6612      6700          bne.s     vsscanf_38
00003C4A  206E 0010 6701          move.l    16(A6),A0
00003C4E  58AE 0010 6702          addq.l    #4,16(A6)
00003C52  2E10      6703          move.l    (A0),D7
00003C54  2047      6704          move.l    D7,A0
00003C56  20AE FFE4 6705          move.l    -28(A6),(A0)
00003C5A  5284      6706          addq.l    #1,D4
                    6707   vsscanf_38:
00003C5C  6000 03F6 6708          bra       vsscanf_139
                    6709   vsscanf_36:
00003C60  0C83 0000 6710          cmp.l     #115,D3
00003C64  0073      
00003C66  6600 00AC 6711          bne       vsscanf_40
00003C6A  486E FFE4 6712          pea       -28(A6)
00003C6E  2F05      6713          move.l    D5,-(A7)
00003C70  6100 FC2A 6714          bsr       @vsscanf_scanspace
00003C74  504F      6715          addq.w    #8,A7
00003C76  2400      6716          move.l    D0,D2
00003C78  4A86      6717          tst.l     D6
00003C7A  660A      6718          bne.s     vsscanf_42
00003C7C  206E 0010 6719          move.l    16(A6),A0
00003C80  58AE 0010 6720          addq.l    #4,16(A6)
00003C84  2E10      6721          move.l    (A0),D7
                    6722   vsscanf_42:
00003C86  52AE FFE4 6723          addq.l    #1,-28(A6)
                    6724   vsscanf_44:
00003C8A  200A      6725          move.l    A2,D0
00003C8C  534A      6726          subq.w    #1,A2
00003C8E  4A80      6727          tst.l     D0
00003C90  6700 0038 6728          beq       vsscanf_46
00003C94  2042      6729          move.l    D2,A0
00003C96  43F9 0000 6730          lea       __ctype,A1
00003C9A  5EF0      
00003C9C  1030 9801 6731          move.b    1(A0,A1.L),D0
00003CA0  C03C 0010 6732          and.b     #16,D0
00003CA4  6624      6733          bne.s     vsscanf_46
00003CA6  0C82 FFFF 6734          cmp.l     #-1,D2
00003CAA  FFFF      
00003CAC  671C      6735          beq.s     vsscanf_46
00003CAE  387C 0001 6736          move.w    #1,A4
00003CB2  4A86      6737          tst.l     D6
00003CB4  6606      6738          bne.s     vsscanf_47
00003CB6  2047      6739          move.l    D7,A0
00003CB8  5287      6740          addq.l    #1,D7
00003CBA  1082      6741          move.b    D2,(A0)
                    6742   vsscanf_47:
00003CBC  2F05      6743          move.l    D5,-(A7)
00003CBE  4E93      6744          jsr       (A3)
00003CC0  584F      6745          addq.w    #4,A7
00003CC2  2400      6746          move.l    D0,D2
00003CC4  52AE FFE4 6747          addq.l    #1,-28(A6)
00003CC8  60C0      6748          bra       vsscanf_44
                    6749   vsscanf_46:
00003CCA  4A86      6750          tst.l     D6
00003CCC  660A      6751          bne.s     vsscanf_51
00003CCE  2047      6752          move.l    D7,A0
00003CD0  4210      6753          clr.b     (A0)
00003CD2  200C      6754          move.l    A4,D0
00003CD4  6702      6755          beq.s     vsscanf_51
00003CD6  5284      6756          addq.l    #1,D4
                    6757   vsscanf_51:
00003CD8  0C82 FFFF 6758          cmp.l     #-1,D2
00003CDC  FFFF      
00003CDE  6708      6759          beq.s     vsscanf_55
00003CE0  4A86      6760          tst.l     D6
00003CE2  661E      6761          bne.s     vsscanf_53
00003CE4  200C      6762          move.l    A4,D0
00003CE6  661A      6763          bne.s     vsscanf_53
                    6764   vsscanf_55:
00003CE8  4A84      6765          tst.l     D4
00003CEA  6704      6766          beq.s     vsscanf_56
00003CEC  2004      6767          move.l    D4,D0
00003CEE  600E      6768          bra.s     vsscanf_59
                    6769   vsscanf_56:
00003CF0  0C82 FFFF 6770          cmp.l     #-1,D2
00003CF4  FFFF      
00003CF6  6604      6771          bne.s     vsscanf_58
00003CF8  70FF      6772          moveq     #-1,D0
00003CFA  6002      6773          bra.s     vsscanf_59
                    6774   vsscanf_58:
00003CFC  2004      6775          move.l    D4,D0
                    6776   vsscanf_59:
00003CFE  6000 035A 6777          bra       vsscanf_15
                    6778   vsscanf_53:
00003D02  53AE FFE4 6779          subq.l    #1,-28(A6)
00003D06  2F02      6780          move.l    D2,-(A7)
00003D08  2F05      6781          move.l    D5,-(A7)
00003D0A  6100 FB2E 6782          bsr       @vsscanf_scanputback
00003D0E  504F      6783          addq.w    #8,A7
00003D10  6000 0342 6784          bra       vsscanf_139
                    6785   vsscanf_40:
00003D14  0C83 0000 6786          cmp.l     #99,D3
00003D18  0063      
00003D1A  6600 008E 6787          bne       vsscanf_60
00003D1E  4A86      6788          tst.l     D6
00003D20  660A      6789          bne.s     vsscanf_62
00003D22  206E 0010 6790          move.l    16(A6),A0
00003D26  58AE 0010 6791          addq.l    #4,16(A6)
00003D2A  2E10      6792          move.l    (A0),D7
                    6793   vsscanf_62:
00003D2C  2F05      6794          move.l    D5,-(A7)
00003D2E  4E93      6795          jsr       (A3)
00003D30  584F      6796          addq.w    #4,A7
00003D32  2400      6797          move.l    D0,D2
00003D34  52AE FFE4 6798          addq.l    #1,-28(A6)
00003D38  200A      6799          move.l    A2,D0
00003D3A  0C80 0000 6800          cmp.l     #32767,D0
00003D3E  7FFF      
00003D40  6604      6801          bne.s     vsscanf_64
00003D42  347C 0001 6802          move.w    #1,A2
                    6803   vsscanf_64:
00003D46  0C82 FFFF 6804          cmp.l     #-1,D2
00003D4A  FFFF      
00003D4C  6606      6805          bne.s     vsscanf_66
00003D4E  4A86      6806          tst.l     D6
00003D50  6602      6807          bne.s     vsscanf_66
00003D52  5384      6808          subq.l    #1,D4
                    6809   vsscanf_66:
00003D54  200A      6810          move.l    A2,D0
00003D56  534A      6811          subq.w    #1,A2
00003D58  4A80      6812          tst.l     D0
00003D5A  6720      6813          beq.s     vsscanf_70
00003D5C  0C82 FFFF 6814          cmp.l     #-1,D2
00003D60  FFFF      
00003D62  6718      6815          beq.s     vsscanf_70
00003D64  4A86      6816          tst.l     D6
00003D66  6606      6817          bne.s     vsscanf_71
00003D68  2047      6818          move.l    D7,A0
00003D6A  5287      6819          addq.l    #1,D7
00003D6C  1082      6820          move.b    D2,(A0)
                    6821   vsscanf_71:
00003D6E  2F05      6822          move.l    D5,-(A7)
00003D70  4E93      6823          jsr       (A3)
00003D72  584F      6824          addq.w    #4,A7
00003D74  2400      6825          move.l    D0,D2
00003D76  52AE FFE4 6826          addq.l    #1,-28(A6)
00003D7A  60D8      6827          bra       vsscanf_66
                    6828   vsscanf_70:
00003D7C  0C82 FFFF 6829          cmp.l     #-1,D2
00003D80  FFFF      
00003D82  660E      6830          bne.s     vsscanf_73
00003D84  4A84      6831          tst.l     D4
00003D86  6704      6832          beq.s     vsscanf_75
00003D88  2004      6833          move.l    D4,D0
00003D8A  6002      6834          bra.s     vsscanf_76
                    6835   vsscanf_75:
00003D8C  70FF      6836          moveq     #-1,D0
                    6837   vsscanf_76:
00003D8E  6000 02CA 6838          bra       vsscanf_15
                    6839   vsscanf_73:
00003D92  4A86      6840          tst.l     D6
00003D94  6602      6841          bne.s     vsscanf_77
00003D96  5284      6842          addq.l    #1,D4
                    6843   vsscanf_77:
00003D98  53AE FFE4 6844          subq.l    #1,-28(A6)
00003D9C  2F02      6845          move.l    D2,-(A7)
00003D9E  2F05      6846          move.l    D5,-(A7)
00003DA0  6100 FA98 6847          bsr       @vsscanf_scanputback
00003DA4  504F      6848          addq.w    #8,A7
00003DA6  6000 02AC 6849          bra       vsscanf_139
                    6850   vsscanf_60:
00003DAA  0C83 0000 6851          cmp.l     #105,D3
00003DAE  0069      
00003DB0  6600 0060 6852          bne       vsscanf_82
00003DB4  486E FFE4 6853          pea       -28(A6)
00003DB8  2F05      6854          move.l    D5,-(A7)
00003DBA  6100 FAE0 6855          bsr       @vsscanf_scanspace
00003DBE  504F      6856          addq.w    #8,A7
00003DC0  2400      6857          move.l    D0,D2
00003DC2  0C82 0000 6858          cmp.l     #48,D2
00003DC6  0030      
00003DC8  6600 0038 6859          bne       vsscanf_81
00003DCC  387C 0001 6860          move.w    #1,A4
00003DD0  2F05      6861          move.l    D5,-(A7)
00003DD2  4E93      6862          jsr       (A3)
00003DD4  584F      6863          addq.w    #4,A7
00003DD6  2400      6864          move.l    D0,D2
00003DD8  2F02      6865          move.l    D2,-(A7)
00003DDA  6100 F936 6866          bsr       _tolower
00003DDE  584F      6867          addq.w    #4,A7
00003DE0  0C80 0000 6868          cmp.l     #120,D0
00003DE4  0078      
00003DE6  6604      6869          bne.s     vsscanf_83
00003DE8  7678      6870          moveq     #120,D3
00003DEA  6010      6871          bra.s     vsscanf_84
                    6872   vsscanf_83:
00003DEC  53AE FFE4 6873          subq.l    #1,-28(A6)
00003DF0  2F02      6874          move.l    D2,-(A7)
00003DF2  2F05      6875          move.l    D5,-(A7)
00003DF4  6100 FA44 6876          bsr       @vsscanf_scanputback
00003DF8  504F      6877          addq.w    #8,A7
00003DFA  766F      6878          moveq     #111,D3
                    6879   vsscanf_84:
00003DFC  52AE FFE4 6880          addq.l    #1,-28(A6)
00003E00  6010      6881          bra.s     vsscanf_82
                    6882   vsscanf_81:
00003E02  53AE FFE4 6883          subq.l    #1,-28(A6)
00003E06  2F02      6884          move.l    D2,-(A7)
00003E08  2F05      6885          move.l    D5,-(A7)
00003E0A  6100 FA2E 6886          bsr       @vsscanf_scanputback
00003E0E  504F      6887          addq.w    #8,A7
00003E10  7664      6888          moveq     #100,D3
                    6889   vsscanf_82:
00003E12  0C83 0000 6890          cmp.l     #100,D3
00003E16  0064      
00003E18  671A      6891          beq.s     vsscanf_87
00003E1A  0C83 0000 6892          cmp.l     #117,D3
00003E1E  0075      
00003E20  6712      6893          beq.s     vsscanf_87
00003E22  0C83 0000 6894          cmp.l     #120,D3
00003E26  0078      
00003E28  670A      6895          beq.s     vsscanf_87
00003E2A  0C83 0000 6896          cmp.l     #111,D3
00003E2E  006F      
00003E30  6600 01A4 6897          bne       vsscanf_85
                    6898   vsscanf_87:
00003E34  486E FFE4 6899          pea       -28(A6)
00003E38  2F05      6900          move.l    D5,-(A7)
00003E3A  6100 FA60 6901          bsr       @vsscanf_scanspace
00003E3E  504F      6902          addq.w    #8,A7
00003E40  2400      6903          move.l    D0,D2
00003E42  2D7C 0000 6904          move.l    #10,-4(A6)
00003E46  000A FFFC 
00003E4A  0C83 0000 6905          cmp.l     #120,D3
00003E4E  0078      
00003E50  6608      6906          bne.s     vsscanf_88
00003E52  2D7C 0000 6907          move.l    #16,-4(A6)
00003E56  0010 FFFC 
                    6908   vsscanf_88:
00003E5A  0C83 0000 6909          cmp.l     #111,D3
00003E5E  006F      
00003E60  6608      6910          bne.s     vsscanf_90
00003E62  2D7C 0000 6911          move.l    #8,-4(A6)
00003E66  0008 FFFC 
                    6912   vsscanf_90:
00003E6A  4A86      6913          tst.l     D6
00003E6C  660A      6914          bne.s     vsscanf_92
00003E6E  206E 0010 6915          move.l    16(A6),A0
00003E72  58AE 0010 6916          addq.l    #4,16(A6)
00003E76  2E10      6917          move.l    (A0),D7
                    6918   vsscanf_92:
00003E78  42AE FFE0 6919          clr.l     -32(A6)
00003E7C  52AE FFE4 6920          addq.l    #1,-28(A6)
00003E80  0C83 0000 6921          cmp.l     #117,D3
00003E84  0075      
00003E86  6720      6922          beq.s     vsscanf_94
00003E88  0C82 0000 6923          cmp.l     #45,D2
00003E8C  002D      
00003E8E  6618      6924          bne.s     vsscanf_94
00003E90  2F05      6925          move.l    D5,-(A7)
00003E92  4E93      6926          jsr       (A3)
00003E94  584F      6927          addq.w    #4,A7
00003E96  2400      6928          move.l    D0,D2
00003E98  52AE FFE4 6929          addq.l    #1,-28(A6)
00003E9C  2D7C 0000 6930          move.l    #1,-32(A6)
00003EA0  0001 FFE0 
00003EA4  387C 0001 6931          move.w    #1,A4
                    6932   vsscanf_94:
00003EA8  3A7C 0000 6933          move.w    #0,A5
00003EAC  0C82 FFFF 6934          cmp.l     #-1,D2
00003EB0  FFFF      
00003EB2  660E      6935          bne.s     vsscanf_96
00003EB4  4A84      6936          tst.l     D4
00003EB6  6704      6937          beq.s     vsscanf_98
00003EB8  2004      6938          move.l    D4,D0
00003EBA  6002      6939          bra.s     vsscanf_99
                    6940   vsscanf_98:
00003EBC  70FF      6941          moveq     #-1,D0
                    6942   vsscanf_99:
00003EBE  6000 019A 6943          bra       vsscanf_15
                    6944   vsscanf_96:
00003EC2  200A      6945          move.l    A2,D0
00003EC4  534A      6946          subq.w    #1,A2
00003EC6  4A80      6947          tst.l     D0
00003EC8  6700 0090 6948          beq       vsscanf_102
00003ECC  0C83 0000 6949          cmp.l     #120,D3
00003ED0  0078      
00003ED2  6620      6950          bne.s     vsscanf_104
00003ED4  2F02      6951          move.l    D2,-(A7)
00003ED6  6100 F8C8 6952          bsr       _toupper
00003EDA  584F      6953          addq.w    #4,A7
00003EDC  0C80 0000 6954          cmp.l     #65,D0
00003EE0  0041      
00003EE2  6D10      6955          blt.s     vsscanf_104
00003EE4  2F02      6956          move.l    D2,-(A7)
00003EE6  6100 F8B8 6957          bsr       _toupper
00003EEA  584F      6958          addq.w    #4,A7
00003EEC  0C80 0000 6959          cmp.l     #70,D0
00003EF0  0046      
00003EF2  6F14      6960          ble.s     vsscanf_103
                    6961   vsscanf_104:
00003EF4  2042      6962          move.l    D2,A0
00003EF6  43F9 0000 6963          lea       __ctype,A1
00003EFA  5EF0      
00003EFC  1030 9801 6964          move.b    1(A0,A1.L),D0
00003F00  C03C 0004 6965          and.b     #4,D0
00003F04  6700 0054 6966          beq       vsscanf_102
                    6967   vsscanf_103:
00003F08  2042      6968          move.l    D2,A0
00003F0A  43F9 0000 6969          lea       __ctype,A1
00003F0E  5EF0      
00003F10  1030 9801 6970          move.b    1(A0,A1.L),D0
00003F14  C03C 0004 6971          and.b     #4,D0
00003F18  6614      6972          bne.s     vsscanf_105
00003F1A  70F9      6973          moveq     #-7,D0
00003F1C  2F00      6974          move.l    D0,-(A7)
00003F1E  2F02      6975          move.l    D2,-(A7)
00003F20  6100 F87E 6976          bsr       _toupper
00003F24  584F      6977          addq.w    #4,A7
00003F26  2200      6978          move.l    D0,D1
00003F28  201F      6979          move.l    (A7)+,D0
00003F2A  D081      6980          add.l     D1,D0
00003F2C  2400      6981          move.l    D0,D2
                    6982   vsscanf_105:
00003F2E  2F0D      6983          move.l    A5,-(A7)
00003F30  2F2E FFFC 6984          move.l    -4(A6),-(A7)
00003F34  6100 0884 6985          bsr       LMUL
00003F38  2017      6986          move.l    (A7),D0
00003F3A  504F      6987          addq.w    #8,A7
00003F3C  D082      6988          add.l     D2,D0
00003F3E  0480 0000 6989          sub.l     #48,D0
00003F42  0030      
00003F44  2A40      6990          move.l    D0,A5
00003F46  2F05      6991          move.l    D5,-(A7)
00003F48  4E93      6992          jsr       (A3)
00003F4A  584F      6993          addq.w    #4,A7
00003F4C  2400      6994          move.l    D0,D2
00003F4E  52AE FFE4 6995          addq.l    #1,-28(A6)
00003F52  387C 0001 6996          move.w    #1,A4
00003F56  6000 FF6A 6997          bra       vsscanf_96
                    6998   vsscanf_102:
00003F5A  0C82 FFFF 6999          cmp.l     #-1,D2
00003F5E  FFFF      
00003F60  671A      7000          beq.s     vsscanf_107
00003F62  2F02      7001          move.l    D2,-(A7)
00003F64  2F05      7002          move.l    D5,-(A7)
00003F66  6100 F8D2 7003          bsr       @vsscanf_scanputback
00003F6A  504F      7004          addq.w    #8,A7
00003F6C  53AE FFE4 7005          subq.l    #1,-28(A6)
00003F70  200C      7006          move.l    A4,D0
00003F72  6606      7007          bne.s     vsscanf_109
00003F74  2004      7008          move.l    D4,D0
00003F76  6000 00E2 7009          bra       vsscanf_15
                    7010   vsscanf_109:
00003F7A  6012      7011          bra.s     vsscanf_111
                    7012   vsscanf_107:
00003F7C  200C      7013          move.l    A4,D0
00003F7E  660E      7014          bne.s     vsscanf_111
00003F80  4A84      7015          tst.l     D4
00003F82  6704      7016          beq.s     vsscanf_113
00003F84  2004      7017          move.l    D4,D0
00003F86  6002      7018          bra.s     vsscanf_114
                    7019   vsscanf_113:
00003F88  70FF      7020          moveq     #-1,D0
                    7021   vsscanf_114:
00003F8A  6000 00CE 7022          bra       vsscanf_15
                    7023   vsscanf_111:
00003F8E  4AAE FFE0 7024          tst.l     -32(A6)
00003F92  6706      7025          beq.s     vsscanf_115
00003F94  200D      7026          move.l    A5,D0
00003F96  4480      7027          neg.l     D0
00003F98  2A40      7028          move.l    D0,A5
                    7029   vsscanf_115:
00003F9A  4A86      7030          tst.l     D6
00003F9C  661E      7031          bne.s     vsscanf_117
00003F9E  4AAE FFE8 7032          tst.l     -24(A6)
00003FA2  6706      7033          beq.s     vsscanf_119
00003FA4  2047      7034          move.l    D7,A0
00003FA6  208D      7035          move.l    A5,(A0)
00003FA8  6010      7036          bra.s     vsscanf_122
                    7037   vsscanf_119:
00003FAA  4AAE FFEC 7038          tst.l     -20(A6)
00003FAE  6706      7039          beq.s     vsscanf_121
00003FB0  2047      7040          move.l    D7,A0
00003FB2  308D      7041          move.w    A5,(A0)
00003FB4  6004      7042          bra.s     vsscanf_122
                    7043   vsscanf_121:
00003FB6  2047      7044          move.l    D7,A0
00003FB8  208D      7045          move.l    A5,(A0)
                    7046   vsscanf_122:
00003FBA  5284      7047          addq.l    #1,D4
                    7048   vsscanf_117:
00003FBC  0C82 FFFF 7049          cmp.l     #-1,D2
00003FC0  FFFF      
00003FC2  660E      7050          bne.s     vsscanf_123
00003FC4  4A84      7051          tst.l     D4
00003FC6  6704      7052          beq.s     vsscanf_125
00003FC8  2004      7053          move.l    D4,D0
00003FCA  6002      7054          bra.s     vsscanf_126
                    7055   vsscanf_125:
00003FCC  70FF      7056          moveq     #-1,D0
                    7057   vsscanf_126:
00003FCE  6000 008A 7058          bra       vsscanf_15
                    7059   vsscanf_123:
00003FD2  6000 0080 7060          bra       vsscanf_139
                    7061   vsscanf_85:
00003FD6  0C83 0000 7062          cmp.l     #37,D3
00003FDA  0025      
00003FDC  6600 0040 7063          bne       vsscanf_127
00003FE0  2F05      7064          move.l    D5,-(A7)
00003FE2  4E93      7065          jsr       (A3)
00003FE4  584F      7066          addq.w    #4,A7
00003FE6  2400      7067          move.l    D0,D2
00003FE8  0C82 FFFF 7068          cmp.l     #-1,D2
00003FEC  FFFF      
00003FEE  660E      7069          bne.s     vsscanf_129
00003FF0  4A84      7070          tst.l     D4
00003FF2  6704      7071          beq.s     vsscanf_131
00003FF4  2004      7072          move.l    D4,D0
00003FF6  6002      7073          bra.s     vsscanf_132
                    7074   vsscanf_131:
00003FF8  70FF      7075          moveq     #-1,D0
                    7076   vsscanf_132:
00003FFA  6000 005E 7077          bra       vsscanf_15
                    7078   vsscanf_129:
00003FFE  52AE FFE4 7079          addq.l    #1,-28(A6)
00004002  B483      7080          cmp.l     D3,D2
00004004  6714      7081          beq.s     vsscanf_133
00004006  2F02      7082          move.l    D2,-(A7)
00004008  2F05      7083          move.l    D5,-(A7)
0000400A  6100 F82E 7084          bsr       @vsscanf_scanputback
0000400E  504F      7085          addq.w    #8,A7
00004010  53AE FFE4 7086          subq.l    #1,-28(A6)
00004014  2004      7087          move.l    D4,D0
00004016  6000 0042 7088          bra       vsscanf_15
                    7089   vsscanf_133:
0000401A  6000 0038 7090          bra       vsscanf_139
                    7091   vsscanf_127:
0000401E  2F05      7092          move.l    D5,-(A7)
00004020  4E93      7093          jsr       (A3)
00004022  584F      7094          addq.w    #4,A7
00004024  2400      7095          move.l    D0,D2
00004026  52AE FFE4 7096          addq.l    #1,-28(A6)
0000402A  0C82 FFFF 7097          cmp.l     #-1,D2
0000402E  FFFF      
00004030  660C      7098          bne.s     vsscanf_135
00004032  4A84      7099          tst.l     D4
00004034  6704      7100          beq.s     vsscanf_137
00004036  2004      7101          move.l    D4,D0
00004038  6002      7102          bra.s     vsscanf_138
                    7103   vsscanf_137:
0000403A  70FF      7104          moveq     #-1,D0
                    7105   vsscanf_138:
0000403C  601C      7106          bra.s     vsscanf_15
                    7107   vsscanf_135:
0000403E  B483      7108          cmp.l     D3,D2
00004040  6712      7109          beq.s     vsscanf_139
00004042  2F02      7110          move.l    D2,-(A7)
00004044  2F05      7111          move.l    D5,-(A7)
00004046  6100 F7F2 7112          bsr       @vsscanf_scanputback
0000404A  504F      7113          addq.w    #8,A7
0000404C  53AE FFE4 7114          subq.l    #1,-28(A6)
00004050  2004      7115          move.l    D4,D0
00004052  6006      7116          bra.s     vsscanf_15
                    7117   vsscanf_139:
00004054  6000 FA44 7118          bra       vsscanf_3
                    7119   vsscanf_5:
00004058  2004      7120          move.l    D4,D0
                    7121   vsscanf_15:
0000405A  4CDF 3CFC 7122          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000405E  4E5E      7123          unlk      A6
00004060  4E75      7124          rts
                    7125   _printf:
00004062  4E56 FFFC 7126          link      A6,#-4
00004066  48E7 2000 7127          movem.l   D2,-(A7)
0000406A  41EE 0008 7128          lea       8(A6),A0
0000406E  5848      7129          addq.w    #4,A0
00004070  2408      7130          move.l    A0,D2
00004072  2F02      7131          move.l    D2,-(A7)
00004074  2F2E 0008 7132          move.l    8(A6),-(A7)
00004078  42A7      7133          clr.l     -(A7)
0000407A  6100 00CA 7134          bsr       _vsprintf
0000407E  DEFC 000C 7135          add.w     #12,A7
00004082  2D40 FFFC 7136          move.l    D0,-4(A6)
00004086  4282      7137          clr.l     D2
00004088  202E FFFC 7138          move.l    -4(A6),D0
0000408C  4CDF 0004 7139          movem.l   (A7)+,D2
00004090  4E5E      7140          unlk      A6
00004092  4E75      7141          rts
                    7142   @vsprintf_copy:
00004094  4E56 0000 7143          link      A6,#0
00004098  206E 0008 7144          move.l    8(A6),A0
0000409C  4A90      7145          tst.l     (A0)
0000409E  6710      7146          beq.s     @vsprintf_copy_1
000040A0  202E 000C 7147          move.l    12(A6),D0
000040A4  206E 0008 7148          move.l    8(A6),A0
000040A8  2250      7149          move.l    (A0),A1
000040AA  5290      7150          addq.l    #1,(A0)
000040AC  1280      7151          move.b    D0,(A1)
000040AE  600A      7152          bra.s     @vsprintf_copy_2
                    7153   @vsprintf_copy_1:
000040B0  2F2E 000C 7154          move.l    12(A6),-(A7)
000040B4  6100 F5F0 7155          bsr       _putch
000040B8  584F      7156          addq.w    #4,A7
                    7157   @vsprintf_copy_2:
000040BA  4E5E      7158          unlk      A6
000040BC  4E75      7159          rts
                    7160   @vsprintf_getval:
000040BE  4E56 0000 7161          link      A6,#0
000040C2  48E7 3000 7162          movem.l   D2/D3,-(A7)
000040C6  242E 0008 7163          move.l    8(A6),D2
000040CA  4283      7164          clr.l     D3
000040CC  2042      7165          move.l    D2,A0
000040CE  2050      7166          move.l    (A0),A0
000040D0  1010      7167          move.b    (A0),D0
000040D2  4880      7168          ext.w     D0
000040D4  48C0      7169          ext.l     D0
000040D6  0C80 0000 7170          cmp.l     #42,D0
000040DA  002A      
000040DC  6612      7171          bne.s     @vsprintf_getval_1
000040DE  206E 000C 7172          move.l    12(A6),A0
000040E2  2250      7173          move.l    (A0),A1
000040E4  5890      7174          addq.l    #4,(A0)
000040E6  2611      7175          move.l    (A1),D3
000040E8  2042      7176          move.l    D2,A0
000040EA  5290      7177          addq.l    #1,(A0)
000040EC  6000 004E 7178          bra       @vsprintf_getval_5
                    7179   @vsprintf_getval_1:
000040F0  2042      7180          move.l    D2,A0
000040F2  2050      7181          move.l    (A0),A0
000040F4  1010      7182          move.b    (A0),D0
000040F6  4880      7183          ext.w     D0
000040F8  48C0      7184          ext.l     D0
000040FA  0C80 0000 7185          cmp.l     #48,D0
000040FE  0030      
00004100  6D00 003A 7186          blt       @vsprintf_getval_5
00004104  2042      7187          move.l    D2,A0
00004106  2050      7188          move.l    (A0),A0
00004108  1010      7189          move.b    (A0),D0
0000410A  4880      7190          ext.w     D0
0000410C  48C0      7191          ext.l     D0
0000410E  0C80 0000 7192          cmp.l     #57,D0
00004112  0039      
00004114  6E26      7193          bgt.s     @vsprintf_getval_5
00004116  2F03      7194          move.l    D3,-(A7)
00004118  4878 000A 7195          pea       10
0000411C  6100 069C 7196          bsr       LMUL
00004120  2017      7197          move.l    (A7),D0
00004122  504F      7198          addq.w    #8,A7
00004124  2042      7199          move.l    D2,A0
00004126  2250      7200          move.l    (A0),A1
00004128  5290      7201          addq.l    #1,(A0)
0000412A  1211      7202          move.b    (A1),D1
0000412C  4881      7203          ext.w     D1
0000412E  48C1      7204          ext.l     D1
00004130  D081      7205          add.l     D1,D0
00004132  0480 0000 7206          sub.l     #48,D0
00004136  0030      
00004138  2600      7207          move.l    D0,D3
0000413A  60B4      7208          bra       @vsprintf_getval_1
                    7209   @vsprintf_getval_5:
0000413C  2003      7210          move.l    D3,D0
0000413E  4CDF 000C 7211          movem.l   (A7)+,D2/D3
00004142  4E5E      7212          unlk      A6
00004144  4E75      7213          rts
                    7214   _vsprintf:
00004146  4E56 FFCC 7215          link      A6,#-52
0000414A  48E7 3F3C 7216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000414E  45EE 0008 7217          lea       8(A6),A2
00004152  47F8 4094 7218          lea       @vsprintf_copy,A3
00004156  49F9 0000 7219          lea       _ultoa,A4
0000415A  49C4      
0000415C  4286      7220          clr.l     D6
                    7221   vsprintf_1:
0000415E  206E 000C 7222          move.l    12(A6),A0
00004162  4A10      7223          tst.b     (A0)
00004164  6700 0624 7224          beq       vsprintf_3
00004168  206E 000C 7225          move.l    12(A6),A0
0000416C  1010      7226          move.b    (A0),D0
0000416E  4880      7227          ext.w     D0
00004170  48C0      7228          ext.l     D0
00004172  0C80 0000 7229          cmp.l     #37,D0
00004176  0025      
00004178  671C      7230          beq.s     vsprintf_4
0000417A  206E 000C 7231          move.l    12(A6),A0
0000417E  52AE 000C 7232          addq.l    #1,12(A6)
00004182  1210      7233          move.b    (A0),D1
00004184  4881      7234          ext.w     D1
00004186  48C1      7235          ext.l     D1
00004188  2F01      7236          move.l    D1,-(A7)
0000418A  2F0A      7237          move.l    A2,-(A7)
0000418C  4E93      7238          jsr       (A3)
0000418E  504F      7239          addq.w    #8,A7
00004190  5286      7240          addq.l    #1,D6
00004192  6000 05F2 7241          bra       vsprintf_2
                    7242   vsprintf_4:
00004196  52AE 000C 7243          addq.l    #1,12(A6)
0000419A  422E FFD3 7244          clr.b     -45(A6)
0000419E  422E FFD2 7245          clr.b     -46(A6)
000041A2  422E FFD0 7246          clr.b     -48(A6)
000041A6  422E FFCF 7247          clr.b     -49(A6)
000041AA  422E FFCE 7248          clr.b     -50(A6)
000041AE  422E FFCD 7249          clr.b     -51(A6)
000041B2  42AE FFFC 7250          clr.l     -4(A6)
000041B6  7AFF      7251          moveq     #-1,D5
000041B8  41EE FFDC 7252          lea       -36(A6),A0
000041BC  2608      7253          move.l    A0,D3
000041BE  2408      7254          move.l    A0,D2
                    7255   vsprintf_6:
000041C0  206E 000C 7256          move.l    12(A6),A0
000041C4  1010      7257          move.b    (A0),D0
000041C6  4880      7258          ext.w     D0
000041C8  48C0      7259          ext.l     D0
000041CA  0C80 0000 7260          cmp.l     #43,D0
000041CE  002B      
000041D0  6730      7261          beq.s     vsprintf_12
000041D2  6E18      7262          bgt.s     vsprintf_15
000041D4  0C80 0000 7263          cmp.l     #35,D0
000041D8  0023      
000041DA  6700 003E 7264          beq       vsprintf_14
000041DE  6E00 0046 7265          bgt       vsprintf_9
000041E2  0C80 0000 7266          cmp.l     #32,D0
000041E6  0020      
000041E8  6724      7267          beq.s     vsprintf_13
000041EA  603A      7268          bra.s     vsprintf_9
                    7269   vsprintf_15:
000041EC  0C80 0000 7270          cmp.l     #45,D0
000041F0  002D      
000041F2  6702      7271          beq.s     vsprintf_11
000041F4  6030      7272          bra.s     vsprintf_9
                    7273   vsprintf_11:
000041F6  1D7C 0001 7274          move.b    #1,-51(A6)
000041FA  FFCD      
000041FC  52AE 000C 7275          addq.l    #1,12(A6)
00004200  6026      7276          bra.s     vsprintf_7
                    7277   vsprintf_12:
00004202  1D7C 0001 7278          move.b    #1,-50(A6)
00004206  FFCE      
00004208  52AE 000C 7279          addq.l    #1,12(A6)
0000420C  601A      7280          bra.s     vsprintf_7
                    7281   vsprintf_13:
0000420E  1D7C 0001 7282          move.b    #1,-49(A6)
00004212  FFCF      
00004214  52AE 000C 7283          addq.l    #1,12(A6)
00004218  600E      7284          bra.s     vsprintf_7
                    7285   vsprintf_14:
0000421A  1D7C 0001 7286          move.b    #1,-48(A6)
0000421E  FFD0      
00004220  52AE 000C 7287          addq.l    #1,12(A6)
00004224  6002      7288          bra.s     vsprintf_7
                    7289   vsprintf_9:
00004226  6002      7290          bra.s     vsprintf_8
                    7291   vsprintf_7:
00004228  6096      7292          bra       vsprintf_6
                    7293   vsprintf_8:
0000422A  206E 000C 7294          move.l    12(A6),A0
0000422E  1010      7295          move.b    (A0),D0
00004230  4880      7296          ext.w     D0
00004232  48C0      7297          ext.l     D0
00004234  0C80 0000 7298          cmp.l     #48,D0
00004238  0030      
0000423A  660A      7299          bne.s     vsprintf_16
0000423C  52AE 000C 7300          addq.l    #1,12(A6)
00004240  1D7C 0001 7301          move.b    #1,-46(A6)
00004244  FFD2      
                    7302   vsprintf_16:
00004246  486E 0010 7303          pea       16(A6)
0000424A  486E 000C 7304          pea       12(A6)
0000424E  6100 FE6E 7305          bsr       @vsprintf_getval
00004252  504F      7306          addq.w    #8,A7
00004254  2A40      7307          move.l    D0,A5
00004256  206E 000C 7308          move.l    12(A6),A0
0000425A  1010      7309          move.b    (A0),D0
0000425C  4880      7310          ext.w     D0
0000425E  48C0      7311          ext.l     D0
00004260  0C80 0000 7312          cmp.l     #46,D0
00004264  002E      
00004266  6614      7313          bne.s     vsprintf_18
00004268  52AE 000C 7314          addq.l    #1,12(A6)
0000426C  486E 0010 7315          pea       16(A6)
00004270  486E 000C 7316          pea       12(A6)
00004274  6100 FE48 7317          bsr       @vsprintf_getval
00004278  504F      7318          addq.w    #8,A7
0000427A  2A00      7319          move.l    D0,D5
                    7320   vsprintf_18:
0000427C  206E 000C 7321          move.l    12(A6),A0
00004280  1010      7322          move.b    (A0),D0
00004282  4880      7323          ext.w     D0
00004284  48C0      7324          ext.l     D0
00004286  0C80 0000 7325          cmp.l     #108,D0
0000428A  006C      
0000428C  660A      7326          bne.s     vsprintf_20
0000428E  52AE 000C 7327          addq.l    #1,12(A6)
00004292  1D7C 0001 7328          move.b    #1,-45(A6)
00004296  FFD3      
                    7329   vsprintf_20:
00004298  206E 000C 7330          move.l    12(A6),A0
0000429C  1010      7331          move.b    (A0),D0
0000429E  4880      7332          ext.w     D0
000042A0  48C0      7333          ext.l     D0
000042A2  0C80 0000 7334          cmp.l     #111,D0
000042A6  006F      
000042A8  6700 00D4 7335          beq       vsprintf_27
000042AC  6E34      7336          bgt.s     vsprintf_33
000042AE  0C80 0000 7337          cmp.l     #100,D0
000042B2  0064      
000042B4  6700 0054 7338          beq       vsprintf_24
000042B8  6E1C      7339          bgt.s     vsprintf_34
000042BA  0C80 0000 7340          cmp.l     #99,D0
000042BE  0063      
000042C0  6700 012C 7341          beq       vsprintf_30
000042C4  6E00 016A 7342          bgt       vsprintf_22
000042C8  0C80 0000 7343          cmp.l     #88,D0
000042CC  0058      
000042CE  6700 00E6 7344          beq       vsprintf_28
000042D2  6000 015C 7345          bra       vsprintf_22
                    7346   vsprintf_34:
000042D6  0C80 0000 7347          cmp.l     #105,D0
000042DA  0069      
000042DC  672C      7348          beq.s     vsprintf_24
000042DE  6000 0150 7349          bra       vsprintf_22
                    7350   vsprintf_33:
000042E2  0C80 0000 7351          cmp.l     #117,D0
000042E6  0075      
000042E8  6700 005C 7352          beq       vsprintf_26
000042EC  6E0E      7353          bgt.s     vsprintf_35
000042EE  0C80 0000 7354          cmp.l     #115,D0
000042F2  0073      
000042F4  6700 011C 7355          beq       vsprintf_31
000042F8  6000 0136 7356          bra       vsprintf_22
                    7357   vsprintf_35:
000042FC  0C80 0000 7358          cmp.l     #120,D0
00004300  0078      
00004302  6700 00B2 7359          beq       vsprintf_28
00004306  6000 0128 7360          bra       vsprintf_22
                    7361   vsprintf_24:
0000430A  4A2E FFD3 7362          tst.b     -45(A6)
0000430E  671A      7363          beq.s     vsprintf_36
00004310  4878 000A 7364          pea       10
00004314  2F03      7365          move.l    D3,-(A7)
00004316  206E 0010 7366          move.l    16(A6),A0
0000431A  58AE 0010 7367          addq.l    #4,16(A6)
0000431E  2F10      7368          move.l    (A0),-(A7)
00004320  6100 061E 7369          bsr       _ltoa
00004324  DEFC 000C 7370          add.w     #12,A7
00004328  6018      7371          bra.s     vsprintf_37
                    7372   vsprintf_36:
0000432A  4878 000A 7373          pea       10
0000432E  2F03      7374          move.l    D3,-(A7)
00004330  206E 0010 7375          move.l    16(A6),A0
00004334  58AE 0010 7376          addq.l    #4,16(A6)
00004338  2F10      7377          move.l    (A0),-(A7)
0000433A  6100 0604 7378          bsr       _ltoa
0000433E  DEFC 000C 7379          add.w     #12,A7
                    7380   vsprintf_37:
00004342  6000 00FA 7381          bra       vsprintf_23
                    7382   vsprintf_26:
00004346  4A2E FFD3 7383          tst.b     -45(A6)
0000434A  6718      7384          beq.s     vsprintf_38
0000434C  4878 000A 7385          pea       10
00004350  2F03      7386          move.l    D3,-(A7)
00004352  206E 0010 7387          move.l    16(A6),A0
00004356  58AE 0010 7388          addq.l    #4,16(A6)
0000435A  2F10      7389          move.l    (A0),-(A7)
0000435C  4E94      7390          jsr       (A4)
0000435E  DEFC 000C 7391          add.w     #12,A7
00004362  6016      7392          bra.s     vsprintf_39
                    7393   vsprintf_38:
00004364  4878 000A 7394          pea       10
00004368  2F03      7395          move.l    D3,-(A7)
0000436A  206E 0010 7396          move.l    16(A6),A0
0000436E  58AE 0010 7397          addq.l    #4,16(A6)
00004372  2F10      7398          move.l    (A0),-(A7)
00004374  4E94      7399          jsr       (A4)
00004376  DEFC 000C 7400          add.w     #12,A7
                    7401   vsprintf_39:
0000437A  6000 00C2 7402          bra       vsprintf_23
                    7403   vsprintf_27:
0000437E  4A2E FFD3 7404          tst.b     -45(A6)
00004382  6718      7405          beq.s     vsprintf_40
00004384  4878 0008 7406          pea       8
00004388  2F03      7407          move.l    D3,-(A7)
0000438A  206E 0010 7408          move.l    16(A6),A0
0000438E  58AE 0010 7409          addq.l    #4,16(A6)
00004392  2F10      7410          move.l    (A0),-(A7)
00004394  4E94      7411          jsr       (A4)
00004396  DEFC 000C 7412          add.w     #12,A7
0000439A  6016      7413          bra.s     vsprintf_41
                    7414   vsprintf_40:
0000439C  4878 0008 7415          pea       8
000043A0  2F03      7416          move.l    D3,-(A7)
000043A2  206E 0010 7417          move.l    16(A6),A0
000043A6  58AE 0010 7418          addq.l    #4,16(A6)
000043AA  2F10      7419          move.l    (A0),-(A7)
000043AC  4E94      7420          jsr       (A4)
000043AE  DEFC 000C 7421          add.w     #12,A7
                    7422   vsprintf_41:
000043B2  6000 008A 7423          bra       vsprintf_23
                    7424   vsprintf_28:
000043B6  4A2E FFD3 7425          tst.b     -45(A6)
000043BA  6718      7426          beq.s     vsprintf_42
000043BC  4878 0010 7427          pea       16
000043C0  2F03      7428          move.l    D3,-(A7)
000043C2  206E 0010 7429          move.l    16(A6),A0
000043C6  58AE 0010 7430          addq.l    #4,16(A6)
000043CA  2F10      7431          move.l    (A0),-(A7)
000043CC  4E94      7432          jsr       (A4)
000043CE  DEFC 000C 7433          add.w     #12,A7
000043D2  6016      7434          bra.s     vsprintf_43
                    7435   vsprintf_42:
000043D4  4878 0010 7436          pea       16
000043D8  2F03      7437          move.l    D3,-(A7)
000043DA  206E 0010 7438          move.l    16(A6),A0
000043DE  58AE 0010 7439          addq.l    #4,16(A6)
000043E2  2F10      7440          move.l    (A0),-(A7)
000043E4  4E94      7441          jsr       (A4)
000043E6  DEFC 000C 7442          add.w     #12,A7
                    7443   vsprintf_43:
000043EA  6000 0052 7444          bra       vsprintf_23
                    7445   vsprintf_30:
000043EE  206E 0010 7446          move.l    16(A6),A0
000043F2  58AE 0010 7447          addq.l    #4,16(A6)
000043F6  2010      7448          move.l    (A0),D0
000043F8  2042      7449          move.l    D2,A0
000043FA  5282      7450          addq.l    #1,D2
000043FC  1080      7451          move.b    D0,(A0)
000043FE  2042      7452          move.l    D2,A0
00004400  4210      7453          clr.b     (A0)
00004402  200D      7454          move.l    A5,D0
00004404  6704      7455          beq.s     vsprintf_44
00004406  200D      7456          move.l    A5,D0
00004408  6002      7457          bra.s     vsprintf_45
                    7458   vsprintf_44:
0000440A  7001      7459          moveq     #1,D0
                    7460   vsprintf_45:
0000440C  2A00      7461          move.l    D0,D5
0000440E  6000 002E 7462          bra       vsprintf_23
                    7463   vsprintf_31:
00004412  206E 0010 7464          move.l    16(A6),A0
00004416  58AE 0010 7465          addq.l    #4,16(A6)
0000441A  2610      7466          move.l    (A0),D3
0000441C  0C85 FFFF 7467          cmp.l     #-1,D5
00004420  FFFF      
00004422  660A      7468          bne.s     vsprintf_46
00004424  2F03      7469          move.l    D3,-(A7)
00004426  6100 05FE 7470          bsr       _strlen
0000442A  584F      7471          addq.w    #4,A7
0000442C  2A00      7472          move.l    D0,D5
                    7473   vsprintf_46:
0000442E  600E      7474          bra.s     vsprintf_23
                    7475   vsprintf_22:
00004430  206E 000C 7476          move.l    12(A6),A0
00004434  2242      7477          move.l    D2,A1
00004436  5282      7478          addq.l    #1,D2
00004438  1290      7479          move.b    (A0),(A1)
0000443A  2042      7480          move.l    D2,A0
0000443C  4210      7481          clr.b     (A0)
                    7482   vsprintf_23:
0000443E  2F03      7483          move.l    D3,-(A7)
00004440  6100 05E4 7484          bsr       _strlen
00004444  584F      7485          addq.w    #4,A7
00004446  1800      7486          move.b    D0,D4
00004448  206E 000C 7487          move.l    12(A6),A0
0000444C  1010      7488          move.b    (A0),D0
0000444E  4880      7489          ext.w     D0
00004450  48C0      7490          ext.l     D0
00004452  0C80 0000 7491          cmp.l     #115,D0
00004456  0073      
00004458  6618      7492          bne.s     vsprintf_48
0000445A  0C85 0000 7493          cmp.l     #0,D5
0000445E  0000      
00004460  6D10      7494          blt.s     vsprintf_48
00004462  4884      7495          ext.w     D4
00004464  48C4      7496          ext.l     D4
00004466  B885      7497          cmp.l     D5,D4
00004468  6F04      7498          ble.s     vsprintf_50
0000446A  1005      7499          move.b    D5,D0
0000446C  6002      7500          bra.s     vsprintf_51
                    7501   vsprintf_50:
0000446E  1004      7502          move.b    D4,D0
                    7503   vsprintf_51:
00004470  1800      7504          move.b    D0,D4
                    7505   vsprintf_48:
00004472  206E 000C 7506          move.l    12(A6),A0
00004476  1010      7507          move.b    (A0),D0
00004478  4880      7508          ext.w     D0
0000447A  48C0      7509          ext.l     D0
0000447C  0C80 0000 7510          cmp.l     #88,D0
00004480  0058      
00004482  6600 0026 7511          bne       vsprintf_56
00004486  41EE FFDC 7512          lea       -36(A6),A0
0000448A  2408      7513          move.l    A0,D2
                    7514   vsprintf_54:
0000448C  2042      7515          move.l    D2,A0
0000448E  4A10      7516          tst.b     (A0)
00004490  6718      7517          beq.s     vsprintf_56
00004492  2042      7518          move.l    D2,A0
00004494  1210      7519          move.b    (A0),D1
00004496  4881      7520          ext.w     D1
00004498  48C1      7521          ext.l     D1
0000449A  2F01      7522          move.l    D1,-(A7)
0000449C  6100 F302 7523          bsr       _toupper
000044A0  584F      7524          addq.w    #4,A7
000044A2  2042      7525          move.l    D2,A0
000044A4  1080      7526          move.b    D0,(A0)
000044A6  5282      7527          addq.l    #1,D2
000044A8  60E2      7528          bra       vsprintf_54
                    7529   vsprintf_56:
000044AA  7E00      7530          moveq     #0,D7
000044AC  41EE FFD4 7531          lea       -44(A6),A0
000044B0  2408      7532          move.l    A0,D2
000044B2  206E 000C 7533          move.l    12(A6),A0
000044B6  1010      7534          move.b    (A0),D0
000044B8  4880      7535          ext.w     D0
000044BA  48C0      7536          ext.l     D0
000044BC  0C80 0000 7537          cmp.l     #100,D0
000044C0  0064      
000044C2  6714      7538          beq.s     vsprintf_59
000044C4  206E 000C 7539          move.l    12(A6),A0
000044C8  1010      7540          move.b    (A0),D0
000044CA  4880      7541          ext.w     D0
000044CC  48C0      7542          ext.l     D0
000044CE  0C80 0000 7543          cmp.l     #105,D0
000044D2  0069      
000044D4  6600 0076 7544          bne       vsprintf_65
                    7545   vsprintf_59:
000044D8  4A2E FFCE 7546          tst.b     -50(A6)
000044DC  6612      7547          bne.s     vsprintf_62
000044DE  2043      7548          move.l    D3,A0
000044E0  1010      7549          move.b    (A0),D0
000044E2  4880      7550          ext.w     D0
000044E4  48C0      7551          ext.l     D0
000044E6  0C80 0000 7552          cmp.l     #45,D0
000044EA  002D      
000044EC  6600 002E 7553          bne       vsprintf_60
                    7554   vsprintf_62:
000044F0  2043      7555          move.l    D3,A0
000044F2  1010      7556          move.b    (A0),D0
000044F4  4880      7557          ext.w     D0
000044F6  48C0      7558          ext.l     D0
000044F8  0C80 0000 7559          cmp.l     #45,D0
000044FC  002D      
000044FE  660E      7560          bne.s     vsprintf_63
00004500  2043      7561          move.l    D3,A0
00004502  5283      7562          addq.l    #1,D3
00004504  2242      7563          move.l    D2,A1
00004506  5282      7564          addq.l    #1,D2
00004508  1290      7565          move.b    (A0),(A1)
0000450A  5304      7566          subq.b    #1,D4
0000450C  6008      7567          bra.s     vsprintf_64
                    7568   vsprintf_63:
0000450E  2042      7569          move.l    D2,A0
00004510  5282      7570          addq.l    #1,D2
00004512  10BC 002B 7571          move.b    #43,(A0)
                    7572   vsprintf_64:
00004516  5287      7573          addq.l    #1,D7
00004518  6000 0032 7574          bra       vsprintf_65
                    7575   vsprintf_60:
0000451C  4A2E FFCF 7576          tst.b     -49(A6)
00004520  6700 002A 7577          beq       vsprintf_65
00004524  2043      7578          move.l    D3,A0
00004526  1010      7579          move.b    (A0),D0
00004528  4880      7580          ext.w     D0
0000452A  48C0      7581          ext.l     D0
0000452C  0C80 0000 7582          cmp.l     #45,D0
00004530  002D      
00004532  660E      7583          bne.s     vsprintf_67
00004534  2043      7584          move.l    D3,A0
00004536  5283      7585          addq.l    #1,D3
00004538  2242      7586          move.l    D2,A1
0000453A  5282      7587          addq.l    #1,D2
0000453C  1290      7588          move.b    (A0),(A1)
0000453E  5304      7589          subq.b    #1,D4
00004540  6008      7590          bra.s     vsprintf_68
                    7591   vsprintf_67:
00004542  2042      7592          move.l    D2,A0
00004544  5282      7593          addq.l    #1,D2
00004546  10BC 0020 7594          move.b    #32,(A0)
                    7595   vsprintf_68:
0000454A  5287      7596          addq.l    #1,D7
                    7597   vsprintf_65:
0000454C  4A2E FFD0 7598          tst.b     -48(A6)
00004550  6700 0066 7599          beq       vsprintf_77
00004554  206E 000C 7600          move.l    12(A6),A0
00004558  1010      7601          move.b    (A0),D0
0000455A  4880      7602          ext.w     D0
0000455C  48C0      7603          ext.l     D0
0000455E  0C80 0000 7604          cmp.l     #111,D0
00004562  006F      
00004564  671A      7605          beq.s     vsprintf_73
00004566  6E0C      7606          bgt.s     vsprintf_76
00004568  0C80 0000 7607          cmp.l     #88,D0
0000456C  0058      
0000456E  6710      7608          beq.s     vsprintf_73
00004570  6000 0046 7609          bra       vsprintf_77
                    7610   vsprintf_76:
00004574  0C80 0000 7611          cmp.l     #120,D0
00004578  0078      
0000457A  6704      7612          beq.s     vsprintf_73
0000457C  6000 003A 7613          bra       vsprintf_77
                    7614   vsprintf_73:
00004580  2042      7615          move.l    D2,A0
00004582  5282      7616          addq.l    #1,D2
00004584  10BC 0030 7617          move.b    #48,(A0)
00004588  5287      7618          addq.l    #1,D7
0000458A  206E 000C 7619          move.l    12(A6),A0
0000458E  1010      7620          move.b    (A0),D0
00004590  4880      7621          ext.w     D0
00004592  48C0      7622          ext.l     D0
00004594  0C80 0000 7623          cmp.l     #120,D0
00004598  0078      
0000459A  6712      7624          beq.s     vsprintf_79
0000459C  206E 000C 7625          move.l    12(A6),A0
000045A0  1010      7626          move.b    (A0),D0
000045A2  4880      7627          ext.w     D0
000045A4  48C0      7628          ext.l     D0
000045A6  0C80 0000 7629          cmp.l     #88,D0
000045AA  0058      
000045AC  660A      7630          bne.s     vsprintf_77
                    7631   vsprintf_79:
000045AE  2042      7632          move.l    D2,A0
000045B0  5282      7633          addq.l    #1,D2
000045B2  10BC 0078 7634          move.b    #120,(A0)
000045B6  5287      7635          addq.l    #1,D7
                    7636   vsprintf_77:
000045B8  2042      7637          move.l    D2,A0
000045BA  4210      7638          clr.b     (A0)
000045BC  206E 000C 7639          move.l    12(A6),A0
000045C0  1010      7640          move.b    (A0),D0
000045C2  4880      7641          ext.w     D0
000045C4  48C0      7642          ext.l     D0
000045C6  0C80 0000 7643          cmp.l     #105,D0
000045CA  0069      
000045CC  6700 0076 7644          beq       vsprintf_82
000045D0  6E42      7645          bgt.s     vsprintf_93
000045D2  0C80 0000 7646          cmp.l     #99,D0
000045D6  0063      
000045D8  6700 0084 7647          beq       vsprintf_96
000045DC  6E1C      7648          bgt.s     vsprintf_94
000045DE  0C80 0000 7649          cmp.l     #88,D0
000045E2  0058      
000045E4  6700 005E 7650          beq       vsprintf_82
000045E8  6E00 0184 7651          bgt       vsprintf_80
000045EC  0C80 0000 7652          cmp.l     #69,D0
000045F0  0045      
000045F2  6700 0050 7653          beq       vsprintf_82
000045F6  6000 0176 7654          bra       vsprintf_80
                    7655   vsprintf_94:
000045FA  0C80 0000 7656          cmp.l     #101,D0
000045FE  0065      
00004600  6700 0042 7657          beq       vsprintf_82
00004604  6E00 0168 7658          bgt       vsprintf_80
00004608  0C80 0000 7659          cmp.l     #100,D0
0000460C  0064      
0000460E  6734      7660          beq.s     vsprintf_82
00004610  6000 015C 7661          bra       vsprintf_80
                    7662   vsprintf_93:
00004614  0C80 0000 7663          cmp.l     #117,D0
00004618  0075      
0000461A  6728      7664          beq.s     vsprintf_82
0000461C  6E1A      7665          bgt.s     vsprintf_95
0000461E  0C80 0000 7666          cmp.l     #115,D0
00004622  0073      
00004624  6700 0038 7667          beq       vsprintf_96
00004628  6E00 0144 7668          bgt       vsprintf_80
0000462C  0C80 0000 7669          cmp.l     #111,D0
00004630  006F      
00004632  6710      7670          beq.s     vsprintf_82
00004634  6000 0138 7671          bra       vsprintf_80
                    7672   vsprintf_95:
00004638  0C80 0000 7673          cmp.l     #120,D0
0000463C  0078      
0000463E  6704      7674          beq.s     vsprintf_82
00004640  6000 012C 7675          bra       vsprintf_80
                    7676   vsprintf_82:
00004644  4A2E FFD2 7677          tst.b     -46(A6)
00004648  6714      7678          beq.s     vsprintf_96
0000464A  4A2E FFCD 7679          tst.b     -51(A6)
0000464E  660E      7680          bne.s     vsprintf_96
00004650  200D      7681          move.l    A5,D0
00004652  9087      7682          sub.l     D7,D0
00004654  4884      7683          ext.w     D4
00004656  48C4      7684          ext.l     D4
00004658  9084      7685          sub.l     D4,D0
0000465A  2D40 FFFC 7686          move.l    D0,-4(A6)
                    7687   vsprintf_96:
0000465E  202E FFFC 7688          move.l    -4(A6),D0
00004662  0C80 0000 7689          cmp.l     #0,D0
00004666  0000      
00004668  6C04      7690          bge.s     vsprintf_98
0000466A  42AE FFFC 7691          clr.l     -4(A6)
                    7692   vsprintf_98:
0000466E  4A2E FFCD 7693          tst.b     -51(A6)
00004672  6600 0030 7694          bne       vsprintf_104
00004676  4884      7695          ext.w     D4
00004678  48C4      7696          ext.l     D4
0000467A  2004      7697          move.l    D4,D0
0000467C  D0AE FFFC 7698          add.l     -4(A6),D0
00004680  D087      7699          add.l     D7,D0
00004682  1D40 FFD1 7700          move.b    D0,-47(A6)
                    7701   vsprintf_102:
00004686  102E FFD1 7702          move.b    -47(A6),D0
0000468A  4880      7703          ext.w     D0
0000468C  48C0      7704          ext.l     D0
0000468E  220D      7705          move.l    A5,D1
00004690  534D      7706          subq.w    #1,A5
00004692  B081      7707          cmp.l     D1,D0
00004694  6C0E      7708          bge.s     vsprintf_104
00004696  4878 0020 7709          pea       32
0000469A  2F0A      7710          move.l    A2,-(A7)
0000469C  4E93      7711          jsr       (A3)
0000469E  504F      7712          addq.w    #8,A7
000046A0  5286      7713          addq.l    #1,D6
000046A2  60E2      7714          bra       vsprintf_102
                    7715   vsprintf_104:
000046A4  41EE FFD4 7716          lea       -44(A6),A0
000046A8  2408      7717          move.l    A0,D2
                    7718   vsprintf_105:
000046AA  2042      7719          move.l    D2,A0
000046AC  4A10      7720          tst.b     (A0)
000046AE  6716      7721          beq.s     vsprintf_107
000046B0  2042      7722          move.l    D2,A0
000046B2  5282      7723          addq.l    #1,D2
000046B4  1210      7724          move.b    (A0),D1
000046B6  4881      7725          ext.w     D1
000046B8  48C1      7726          ext.l     D1
000046BA  2F01      7727          move.l    D1,-(A7)
000046BC  2F0A      7728          move.l    A2,-(A7)
000046BE  4E93      7729          jsr       (A3)
000046C0  504F      7730          addq.w    #8,A7
000046C2  5286      7731          addq.l    #1,D6
000046C4  60E4      7732          bra       vsprintf_105
                    7733   vsprintf_107:
000046C6  202E FFFC 7734          move.l    -4(A6),D0
000046CA  1D40 FFD1 7735          move.b    D0,-47(A6)
                    7736   vsprintf_108:
000046CE  102E FFD1 7737          move.b    -47(A6),D0
000046D2  532E FFD1 7738          subq.b    #1,-47(A6)
000046D6  4A00      7739          tst.b     D0
000046D8  670E      7740          beq.s     vsprintf_110
000046DA  4878 0030 7741          pea       48
000046DE  2F0A      7742          move.l    A2,-(A7)
000046E0  4E93      7743          jsr       (A3)
000046E2  504F      7744          addq.w    #8,A7
000046E4  5286      7745          addq.l    #1,D6
000046E6  60E6      7746          bra       vsprintf_108
                    7747   vsprintf_110:
000046E8  2043      7748          move.l    D3,A0
000046EA  4A10      7749          tst.b     (A0)
000046EC  6700 0048 7750          beq       vsprintf_113
000046F0  206E 000C 7751          move.l    12(A6),A0
000046F4  1010      7752          move.b    (A0),D0
000046F6  4880      7753          ext.w     D0
000046F8  48C0      7754          ext.l     D0
000046FA  0C80 0000 7755          cmp.l     #115,D0
000046FE  0073      
00004700  670C      7756          beq.s     vsprintf_116
00004702  6E18      7757          bgt.s     vsprintf_119
00004704  0C80 0000 7758          cmp.l     #99,D0
00004708  0063      
0000470A  6702      7759          beq.s     vsprintf_116
0000470C  600E      7760          bra.s     vsprintf_119
                    7761   vsprintf_116:
0000470E  2005      7762          move.l    D5,D0
00004710  5385      7763          subq.l    #1,D5
00004712  0C80 0000 7764          cmp.l     #0,D0
00004716  0000      
00004718  6E02      7765          bgt.s     vsprintf_119
0000471A  6016      7766          bra.s     vsprintf_115
                    7767   vsprintf_119:
0000471C  2043      7768          move.l    D3,A0
0000471E  5283      7769          addq.l    #1,D3
00004720  1210      7770          move.b    (A0),D1
00004722  4881      7771          ext.w     D1
00004724  48C1      7772          ext.l     D1
00004726  2F01      7773          move.l    D1,-(A7)
00004728  2F0A      7774          move.l    A2,-(A7)
0000472A  4E93      7775          jsr       (A3)
0000472C  504F      7776          addq.w    #8,A7
0000472E  5286      7777          addq.l    #1,D6
00004730  6002      7778          bra.s     vsprintf_112
                    7779   vsprintf_115:
00004732  6002      7780          bra.s     vsprintf_113
                    7781   vsprintf_112:
00004734  60B2      7782          bra       vsprintf_110
                    7783   vsprintf_113:
00004736  4A2E FFCD 7784          tst.b     -51(A6)
0000473A  6700 0030 7785          beq       vsprintf_125
0000473E  4884      7786          ext.w     D4
00004740  48C4      7787          ext.l     D4
00004742  2004      7788          move.l    D4,D0
00004744  D0AE FFFC 7789          add.l     -4(A6),D0
00004748  D087      7790          add.l     D7,D0
0000474A  1D40 FFD1 7791          move.b    D0,-47(A6)
                    7792   vsprintf_123:
0000474E  102E FFD1 7793          move.b    -47(A6),D0
00004752  4880      7794          ext.w     D0
00004754  48C0      7795          ext.l     D0
00004756  220D      7796          move.l    A5,D1
00004758  534D      7797          subq.w    #1,A5
0000475A  B081      7798          cmp.l     D1,D0
0000475C  6C0E      7799          bge.s     vsprintf_125
0000475E  4878 0020 7800          pea       32
00004762  2F0A      7801          move.l    A2,-(A7)
00004764  4E93      7802          jsr       (A3)
00004766  504F      7803          addq.w    #8,A7
00004768  5386      7804          subq.l    #1,D6
0000476A  60E2      7805          bra       vsprintf_123
                    7806   vsprintf_125:
0000476C  6014      7807          bra.s     vsprintf_81
                    7808   vsprintf_80:
0000476E  206E 000C 7809          move.l    12(A6),A0
00004772  1210      7810          move.b    (A0),D1
00004774  4881      7811          ext.w     D1
00004776  48C1      7812          ext.l     D1
00004778  2F01      7813          move.l    D1,-(A7)
0000477A  2F0A      7814          move.l    A2,-(A7)
0000477C  4E93      7815          jsr       (A3)
0000477E  504F      7816          addq.w    #8,A7
00004780  5286      7817          addq.l    #1,D6
                    7818   vsprintf_81:
00004782  52AE 000C 7819          addq.l    #1,12(A6)
                    7820   vsprintf_2:
00004786  6000 F9D6 7821          bra       vsprintf_1
                    7822   vsprintf_3:
0000478A  4A92      7823          tst.l     (A2)
0000478C  6710      7824          beq.s     vsprintf_126
0000478E  4201      7825          clr.b     D1
00004790  C2BC 0000 7826          and.l     #255,D1
00004794  00FF      
00004796  2F01      7827          move.l    D1,-(A7)
00004798  2F0A      7828          move.l    A2,-(A7)
0000479A  4E93      7829          jsr       (A3)
0000479C  504F      7830          addq.w    #8,A7
                    7831   vsprintf_126:
0000479E  2006      7832          move.l    D6,D0
000047A0  4CDF 3CFC 7833          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000047A4  4E5E      7834          unlk      A6
000047A6  4E75      7835          rts
                    7836   ULMUL:
000047A8  4E56 0000 7837          link    A6,#0
000047AC  48E7 C000 7838          movem.l D0/D1,-(A7)
000047B0  222E 0008 7839          move.l  8(A6),D1
000047B4  202E 000C 7840          move.l  12(A6),D0
000047B8  602C      7841          bra.s   lmul_3
                    7842   LMUL:
000047BA  4E56 0000 7843          link    A6,#0
000047BE  48E7 C000 7844          movem.l D0/D1,-(A7)
000047C2  222E 0008 7845          move.l  8(A6),D1
000047C6  202E 000C 7846          move.l  12(A6),D0
000047CA  4A80      7847          tst.l   D0
000047CC  6A0A      7848          bpl.s   lmul_1
000047CE  4480      7849          neg.l   D0
000047D0  4A81      7850          tst.l   D1
000047D2  6A0A      7851          bpl.s   lmul_2
000047D4  4481      7852          neg.l   D1
000047D6  600E      7853          bra.s   lmul_3
                    7854   lmul_1:
000047D8  4A81      7855          tst.l   D1
000047DA  6A0A      7856          bpl.s   lmul_3
000047DC  4481      7857          neg.l   D1
                    7858   lmul_2:
000047DE  6114      7859          bsr.s   domul
000047E0  4481      7860          neg.l   D1
000047E2  4080      7861          negx.l  D0
000047E4  6002      7862          bra.s   lmul_4
                    7863   lmul_3:
000047E6  610C      7864          bsr.s   domul
                    7865   lmul_4:
000047E8  2D41 0008 7866          move.l  D1,8(A6)
000047EC  4CDF 0003 7867          movem.l (A7)+,D0/D1
000047F0  4E5E      7868          unlk    A6
000047F2  4E75      7869          rts
                    7870   domul:
000047F4  0C81 0000 7871          cmpi.l  #$FFFF,D1
000047F8  FFFF      
000047FA  620C      7872          bhi.s   domul_1
000047FC  0C80 0000 7873          cmpi.l  #$FFFF,D0
00004800  FFFF      
00004802  620E      7874          bhi.s   domul_2
00004804  C2C0      7875          mulu    D0,D1
00004806  4E75      7876          rts
                    7877   domul_1:
00004808  0C80 0000 7878          cmpi.l  #$FFFF,D0
0000480C  FFFF      
0000480E  6218      7879          bhi.s   domul_4
00004810  6002      7880          bra.s   domul_3
                    7881   domul_2
00004812  C141      7882          exg     D0,D1
                    7883   domul_3:
00004814  2F02      7884          move.l  D2,-(A7)
00004816  2401      7885          move.l  D1,D2
00004818  4842      7886          swap    D2
0000481A  C2C0      7887          mulu    D0,D1
0000481C  C4C0      7888          mulu    D0,D2
0000481E  4842      7889          swap    D2
00004820  4242      7890          clr.w   D2
00004822  D282      7891          add.l   D2,D1
00004824  241F      7892          move.l  (A7)+,D2
00004826  4E75      7893          rts
                    7894   domul_4:
00004828  48E7 3000 7895          movem.l D2/D3,-(A7)
0000482C  2401      7896          move.l  D1,D2
0000482E  2601      7897          move.l  D1,D3
00004830  C2C0      7898          mulu    D0,D1
00004832  4842      7899          swap    D2
00004834  C4C0      7900          mulu    D0,D2
00004836  4840      7901          swap    D0
00004838  C6C0      7902          mulu    D0,D3
0000483A  D483      7903          add.l   D3,D2
0000483C  4842      7904          swap    D2
0000483E  4242      7905          clr.w   D2
00004840  D282      7906          add.l   D2,D1
00004842  4CDF 000C 7907          movem.l (A7)+,D2/D3
00004846  4E75      7908          rts
                    7909   _gets:
00004848  4E56 0000 7910          link      A6,#0
0000484C  48E7 3820 7911          movem.l   D2/D3/D4/A2,-(A7)
00004850  45F8 36A6 7912          lea       _putch,A2
00004854  282E 0008 7913          move.l    8(A6),D4
00004858  2404      7914          move.l    D4,D2
                    7915   gets_1:
0000485A  6100 EE7A 7916          bsr       _getch
0000485E  2600      7917          move.l    D0,D3
00004860  0C80 0000 7918          cmp.l     #10,D0
00004864  000A      
00004866  6700 003C 7919          beq       gets_3
0000486A  0C83 0000 7920          cmp.l     #8,D3
0000486E  0008      
00004870  6712      7921          beq.s     gets_4
00004872  2042      7922          move.l    D2,A0
00004874  5282      7923          addq.l    #1,D2
00004876  1083      7924          move.b    D3,(A0)
00004878  4883      7925          ext.w     D3
0000487A  48C3      7926          ext.l     D3
0000487C  2F03      7927          move.l    D3,-(A7)
0000487E  4E92      7928          jsr       (A2)
00004880  584F      7929          addq.w    #4,A7
00004882  601E      7930          bra.s     gets_6
                    7931   gets_4:
00004884  B484      7932          cmp.l     D4,D2
00004886  631A      7933          bls.s     gets_6
00004888  4878 0008 7934          pea       8
0000488C  4E92      7935          jsr       (A2)
0000488E  584F      7936          addq.w    #4,A7
00004890  4878 0020 7937          pea       32
00004894  4E92      7938          jsr       (A2)
00004896  584F      7939          addq.w    #4,A7
00004898  4878 0008 7940          pea       8
0000489C  4E92      7941          jsr       (A2)
0000489E  584F      7942          addq.w    #4,A7
000048A0  5382      7943          subq.l    #1,D2
                    7944   gets_6:
000048A2  60B6      7945          bra       gets_1
                    7946   gets_3:
000048A4  4878 000A 7947          pea       10
000048A8  4E92      7948          jsr       (A2)
000048AA  584F      7949          addq.w    #4,A7
000048AC  2042      7950          move.l    D2,A0
000048AE  4210      7951          clr.b     (A0)
000048B0  2004      7952          move.l    D4,D0
000048B2  4CDF 041C 7953          movem.l   (A7)+,D2/D3/D4/A2
000048B6  4E5E      7954          unlk      A6
000048B8  4E75      7955          rts
                    7956   _ungetch:
000048BA  4E56 0000 7957          link      A6,#0
000048BE  23EE 0008 7958          move.l    8(A6),__ungetbuf
000048C2  0B00 00C0 
000048C6  202E 0008 7959          move.l    8(A6),D0
000048CA  4E5E      7960          unlk      A6
000048CC  4E75      7961          rts
                    7962   @itoa_convert:
000048CE  4E56 0000 7963          link      A6,#0
000048D2  48E7 3C00 7964          movem.l   D2/D3/D4/D5,-(A7)
000048D6  242E 0008 7965          move.l    8(A6),D2
000048DA  262E 0010 7966          move.l    16(A6),D3
000048DE  2A2E 000C 7967          move.l    12(A6),D5
000048E2  2F05      7968          move.l    D5,-(A7)
000048E4  2F03      7969          move.l    D3,-(A7)
000048E6  6100 ECE0 7970          bsr       ULDIV
000048EA  202F 0004 7971          move.l    4(A7),D0
000048EE  504F      7972          addq.w    #8,A7
000048F0  2800      7973          move.l    D0,D4
000048F2  BA83      7974          cmp.l     D3,D5
000048F4  651A      7975          blo.s     @itoa_convert_1
000048F6  2F03      7976          move.l    D3,-(A7)
000048F8  2F05      7977          move.l    D5,-(A7)
000048FA  2F03      7978          move.l    D3,-(A7)
000048FC  6100 ECCA 7979          bsr       ULDIV
00004900  2217      7980          move.l    (A7),D1
00004902  504F      7981          addq.w    #8,A7
00004904  2F01      7982          move.l    D1,-(A7)
00004906  2F02      7983          move.l    D2,-(A7)
00004908  61C4      7984          bsr       @itoa_convert
0000490A  DEFC 000C 7985          add.w     #12,A7
0000490E  2400      7986          move.l    D0,D2
                    7987   @itoa_convert_1:
00004910  0C84 0000 7988          cmp.l     #9,D4
00004914  0009      
00004916  6E0A      7989          bgt.s     @itoa_convert_3
00004918  2004      7990          move.l    D4,D0
0000491A  0680 0000 7991          add.l     #48,D0
0000491E  0030      
00004920  600E      7992          bra.s     @itoa_convert_4
                    7993   @itoa_convert_3:
00004922  2004      7994          move.l    D4,D0
00004924  0680 0000 7995          add.l     #97,D0
00004928  0061      
0000492A  0480 0000 7996          sub.l     #10,D0
0000492E  000A      
                    7997   @itoa_convert_4:
00004930  2042      7998          move.l    D2,A0
00004932  1080      7999          move.b    D0,(A0)
00004934  2002      8000          move.l    D2,D0
00004936  5280      8001          addq.l    #1,D0
00004938  4CDF 003C 8002          movem.l   (A7)+,D2/D3/D4/D5
0000493C  4E5E      8003          unlk      A6
0000493E  4E75      8004          rts
                    8005   _ltoa:
00004940  4E56 0000 8006          link      A6,#0
00004944  48E7 3C00 8007          movem.l   D2/D3/D4/D5,-(A7)
00004948  242E 0008 8008          move.l    8(A6),D2
0000494C  262E 000C 8009          move.l    12(A6),D3
00004950  2A2E 0010 8010          move.l    16(A6),D5
00004954  2803      8011          move.l    D3,D4
00004956  0C85 0000 8012          cmp.l     #2,D5
0000495A  0002      
0000495C  6D08      8013          blt.s     ltoa_3
0000495E  0C85 0000 8014          cmp.l     #36,D5
00004962  0024      
00004964  6F06      8015          ble.s     ltoa_1
                    8016   ltoa_3:
00004966  2003      8017          move.l    D3,D0
00004968  6000 0052 8018          bra       ltoa_4
                    8019   ltoa_1:
0000496C  0C85 0000 8020          cmp.l     #10,D5
00004970  000A      
00004972  6600 0032 8021          bne       ltoa_5
00004976  0C82 0000 8022          cmp.l     #0,D2
0000497A  0000      
0000497C  6C28      8023          bge.s     ltoa_5
0000497E  2002      8024          move.l    D2,D0
00004980  4480      8025          neg.l     D0
00004982  2400      8026          move.l    D0,D2
00004984  0C82 0000 8027          cmp.l     #0,D2
00004988  0000      
0000498A  6C12      8028          bge.s     ltoa_7
0000498C  4879 0000 8029          pea       @itoa_1
00004990  5FF2      
00004992  2F03      8030          move.l    D3,-(A7)
00004994  6100 EC22 8031          bsr       _strcpy
00004998  504F      8032          addq.w    #8,A7
0000499A  2003      8033          move.l    D3,D0
0000499C  601E      8034          bra.s     ltoa_4
                    8035   ltoa_7:
0000499E  2044      8036          move.l    D4,A0
000049A0  5284      8037          addq.l    #1,D4
000049A2  10BC 002D 8038          move.b    #45,(A0)
                    8039   ltoa_5:
000049A6  2F05      8040          move.l    D5,-(A7)
000049A8  2F02      8041          move.l    D2,-(A7)
000049AA  2F04      8042          move.l    D4,-(A7)
000049AC  6100 FF20 8043          bsr       @itoa_convert
000049B0  DEFC 000C 8044          add.w     #12,A7
000049B4  2800      8045          move.l    D0,D4
000049B6  2044      8046          move.l    D4,A0
000049B8  4210      8047          clr.b     (A0)
000049BA  2003      8048          move.l    D3,D0
                    8049   ltoa_4:
000049BC  4CDF 003C 8050          movem.l   (A7)+,D2/D3/D4/D5
000049C0  4E5E      8051          unlk      A6
000049C2  4E75      8052          rts
                    8053   _ultoa:
000049C4  4E56 0000 8054          link      A6,#0
000049C8  48E7 3800 8055          movem.l   D2/D3/D4,-(A7)
000049CC  262E 0010 8056          move.l    16(A6),D3
000049D0  282E 000C 8057          move.l    12(A6),D4
000049D4  2404      8058          move.l    D4,D2
000049D6  0C83 0000 8059          cmp.l     #2,D3
000049DA  0002      
000049DC  6D08      8060          blt.s     ultoa_3
000049DE  0C83 0000 8061          cmp.l     #36,D3
000049E2  0024      
000049E4  6F04      8062          ble.s     ultoa_1
                    8063   ultoa_3:
000049E6  2004      8064          move.l    D4,D0
000049E8  6018      8065          bra.s     ultoa_4
                    8066   ultoa_1:
000049EA  2F03      8067          move.l    D3,-(A7)
000049EC  2F2E 0008 8068          move.l    8(A6),-(A7)
000049F0  2F02      8069          move.l    D2,-(A7)
000049F2  6100 FEDA 8070          bsr       @itoa_convert
000049F6  DEFC 000C 8071          add.w     #12,A7
000049FA  2400      8072          move.l    D0,D2
000049FC  2042      8073          move.l    D2,A0
000049FE  4210      8074          clr.b     (A0)
00004A00  2004      8075          move.l    D4,D0
                    8076   ultoa_4:
00004A02  4CDF 001C 8077          movem.l   (A7)+,D2/D3/D4
00004A06  4E5E      8078          unlk      A6
00004A08  4E75      8079          rts
                    8080   _itoa:
00004A0A  4E56 0000 8081          link      A6,#0
00004A0E  2F2E 0010 8082          move.l    16(A6),-(A7)
00004A12  2F2E 000C 8083          move.l    12(A6),-(A7)
00004A16  2F2E 0008 8084          move.l    8(A6),-(A7)
00004A1A  6100 FF24 8085          bsr       _ltoa
00004A1E  DEFC 000C 8086          add.w     #12,A7
00004A22  4E5E      8087          unlk      A6
00004A24  4E75      8088          rts
                    8089   _strlen:
00004A26  206F 0004 8090          move.l    (4,A7),A0
00004A2A  2248      8091          move.l    A0,A1
                    8092   strlen_1:
00004A2C  4A19      8093          tst.b     (A1)+
00004A2E  66FC      8094          bne       strlen_1
00004A30  2009      8095          move.l    A1,D0
00004A32  9088      8096          sub.l     A0,D0
00004A34  5380      8097          subq.l    #1,D0
00004A36  4E75      8098          rts
                    8099          section   const
                    8100   
                    8101   @m68kde~1_1:
00004A38  0D0A 00   8102          dc.b      13,10,0
                    8103   @m68kde~1_2:
00004A3C  0D53 7769 8104          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004A40  7463 6865 
00004A44  7320 5357 
00004A48  5B        
00004A49  372D 305D 8105          dc.b      55,45,48,93,32,61,32,0
00004A4D  203D 2000 
                    8106   @m68kde~1_3:
00004A52  3000      8107          dc.b      48,0
                    8108   @m68kde~1_4:
00004A54  3100      8109          dc.b      49,0
                    8110   @m68kde~1_5:
00004A56  0D0A 4475 8111          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004A5A  6D70 204D 
00004A5E  656D 6F72 
00004A62  79        
00004A63  2042 6C6F 8112          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004A67  636B 3A20 
00004A6B  3C45 5343 
00004A6F  3E20      
00004A71  746F 2041 8113          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004A75  626F 7274 
00004A79  2C20 3C53 
00004A7D  50        
00004A7E  4143 453E 8114          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004A82  2074 6F20 
00004A86  436F 6E74 
00004A8A  69        
00004A8B  6E75 6500 8115          dc.b      110,117,101,0
                    8116   @m68kde~1_6:
00004A90  0D0A 456E 8117          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004A94  7465 7220 
00004A98  5374 6172 
00004A9C  74        
00004A9D  2041 6464 8118          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004AA1  7265 7373 
00004AA5  3A20 00   
                    8119   @m68kde~1_7:
00004AA8  0D0A 2530 8120          dc.b      13,10,37,48,56,120,32,0
00004AAC  3878 2000 
                    8121   @m68kde~1_8:
00004AB0  2530 3258 8122          dc.b      37,48,50,88,0
00004AB4  00        
                    8123   @m68kde~1_9:
00004AB6  2020 00   8124          dc.b      32,32,0
                    8125   @m68kde~1_10:
00004ABA  0D0A 4669 8126          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004ABE  6C6C 204D 
00004AC2  656D 6F72 
00004AC6  79        
00004AC7  2042 6C6F 8127          dc.b      32,66,108,111,99,107,0
00004ACB  636B 00   
                    8128   @m68kde~1_11:
00004ACE  0D0A 456E 8129          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004AD2  7465 7220 
00004AD6  456E 6420 
00004ADA  41        
00004ADB  6464 7265 8130          dc.b      100,100,114,101,115,115,58,32,0
00004ADF  7373 3A20 
00004AE3  00        
                    8131   @m68kde~1_12:
00004AE4  0D0A 456E 8132          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004AE8  7465 7220 
00004AEC  4669 6C6C 
00004AF0  20        
00004AF1  4461 7461 8133          dc.b      68,97,116,97,58,32,0
00004AF5  3A20 00   
                    8134   @m68kde~1_13:
00004AF8  0D0A 4669 8135          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00004AFC  6C6C 696E 
00004B00  6720 4164 
00004B04  64        
00004B05  7265 7373 8136          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00004B09  6573 205B 
00004B0D  2425 3038 
00004B11  58        
00004B12  202D 2024 8137          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00004B16  2530 3858 
00004B1A  5D20 7769 
00004B1E  7468      
00004B20  2024 2530 8138          dc.b      32,36,37,48,50,88,0
00004B24  3258 00   
                    8139   @m68kde~1_14:
00004B28  0D0A 5573 8140          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00004B2C  6520 4879 
00004B30  7065 7254 
00004B34  65        
00004B35  726D 696E 8141          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00004B39  616C 2074 
00004B3D  6F20 5365 
00004B41  6E64 2054 8142          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004B45  6578 7420 
00004B49  4669 6C65 
00004B4D  2028 2E68 8143          dc.b      32,40,46,104,101,120,41,13,10,0
00004B51  6578 290D 
00004B55  0A00      
                    8144   @m68kde~1_15:
00004B58  0D0A 4C6F 8145          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004B5C  6164 2046 
00004B60  6169 6C65 
00004B64  64        
00004B65  2061 7420 8146          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00004B69  4164 6472 
00004B6D  6573 7320 
00004B71  3D        
00004B72  205B 2425 8147          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004B76  3038 585D 
00004B7A  0D0A 00   
                    8148   @m68kde~1_16:
00004B7E  0D0A 5375 8149          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004B82  6363 6573 
00004B86  733A 2044 
00004B8A  6F        
00004B8B  776E 6C6F 8150          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004B8F  6164 6564 
00004B93  2025 6420 
00004B97  6279 7465 8151          dc.b      98,121,116,101,115,13,10,0
00004B9B  730D 0A00 
                    8152   @m68kde~1_17:
00004BA0  0D0A 4578 8153          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004BA4  616D 696E 
00004BA8  6520 616E 
00004BAC  64        
00004BAD  2043 6861 8154          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004BB1  6E67 6520 
00004BB5  4D65 6D6F 
00004BB9  72        
00004BBA  7900      8155          dc.b      121,0
                    8156   @m68kde~1_18:
00004BBC  0D0A 3C45 8157          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004BC0  5343 3E20 
00004BC4  746F 2053 
00004BC8  746F      
00004BCA  702C 203C 8158          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004BCE  5350 4143 
00004BD2  453E 2074 
00004BD6  6F20      
00004BD8  4164 7661 8159          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00004BDC  6E63 652C 
00004BE0  2027 2D27 
00004BE4  2074      
00004BE6  6F20 476F 8160          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004BEA  2042 6163 
00004BEE  6B2C 203C 
00004BF2  4441      
00004BF4  5441 3E20 8161          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004BF8  746F 2063 
00004BFC  6861 6E67 
00004C00  65        
00004C01  00        8162          dc.b      0
                    8163   @m68kde~1_19:
00004C02  0D0A 456E 8164          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004C06  7465 7220 
00004C0A  4164 6472 
00004C0E  65        
00004C0F  7373 3A20 8165          dc.b      115,115,58,32,0
00004C13  00        
                    8166   @m68kde~1_20:
00004C14  0D0A 5B25 8167          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00004C18  3038 785D 
00004C1C  203A 2025 
00004C20  3032 78   
00004C23  2020 00   8168          dc.b      32,32,0
                    8169   @m68kde~1_21:
00004C26  0D0A 5761 8170          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00004C2A  726E 696E 
00004C2E  6720 4368 
00004C32  61        
00004C33  6E67 6520 8171          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004C37  4661 696C 
00004C3B  6564 3A20 
00004C3F  57        
00004C40  726F 7465 8172          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004C44  205B 2530 
00004C48  3278 5D2C 
00004C4C  20        
00004C4D  5265 6164 8173          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004C51  205B 2530 
00004C55  3278 5D00 
                    8174   @m68kde~1_22:
00004C5A  0A45 7261 8175          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
00004C5E  7369 6E67 
00004C62  2E2E 2E0A 
00004C66  00        
                    8176   @m68kde~1_23:
00004C68  0D0A 2050 8177          dc.b      13,10,32,80,114,111,103,114,97,109,109,105,110
00004C6C  726F 6772 
00004C70  616D 6D69 
00004C74  6E        
00004C75  6720 436F 8178          dc.b      103,32,67,111,109,112,108,101,116,101,33,0
00004C79  6D70 6C65 
00004C7D  7465 2100 
                    8179   @m68kde~1_24:
00004C82  0D0A 204C 8180          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
00004C86  6F61 6469 
00004C8A  6E67 2050 
00004C8E  72        
00004C8F  6F67 7261 8181          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
00004C93  6D20 4672 
00004C97  6F6D 2053 
00004C9B  50        
00004C9C  4920 466C 8182          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
00004CA0  6173 682E 
00004CA4  2E2E 2E00 
                    8183   @m68kde~1_25:
00004CA8  0D0A 2052 8184          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
00004CAC  6561 6420 
00004CB0  4461 7461 
00004CB4  3A20      
00004CB6  2530 3878 8185          dc.b      37,48,56,120,32,10,0
00004CBA  200A 00   
                    8186   @m68kde~1_26:
00004CBE  4949 435F 8187          dc.b      73,73,67,95,67,82,83,82,32,84,114,97,110,115
00004CC2  4352 5352 
00004CC6  2054 7261 
00004CCA  6E73      
00004CCC  6D69 7420 8188          dc.b      109,105,116,32,40,66,105,110,97,114,121,41,58
00004CD0  2842 696E 
00004CD4  6172 7929 
00004CD8  3A        
00004CD9  2000      8189          dc.b      32,0
                    8190   @m68kde~1_27:
00004CDC  2564 00   8191          dc.b      37,100,0
                    8192   @m68kde~1_28:
00004CE0  0A00      8193          dc.b      10,0
                    8194   @m68kde~1_29:
00004CE2  4545 5052 8195          dc.b      69,69,80,82,79,77,32,70,108,97,115,104,32,80
00004CE6  4F4D 2046 
00004CEA  6C61 7368 
00004CEE  2050      
00004CF0  6167 6520 8196          dc.b      97,103,101,32,87,114,105,116,101,58,32,83,116
00004CF4  5772 6974 
00004CF8  653A 2053 
00004CFC  74        
00004CFD  6172 7420 8197          dc.b      97,114,116,32,65,100,100,114,101,115,115,58
00004D01  4164 6472 
00004D05  6573 733A 
00004D09  2030 7825 8198          dc.b      32,48,120,37,120,44,32,110,117,109,98,121,116
00004D0D  782C 206E 
00004D11  756D 6279 
00004D15  74        
00004D16  6573 3A20 8199          dc.b      101,115,58,32,37,100,10,0
00004D1A  2564 0A00 
                    8200   @m68kde~1_30:
00004D1E  0D0A 2042 8201          dc.b      13,10,32,66,108,111,99,107,32,48,32,65,100,100
00004D22  6C6F 636B 
00004D26  2030 2041 
00004D2A  6464      
00004D2C  7265 7373 8202          dc.b      114,101,115,115,58,32,48,120,37,48,52,88,58
00004D30  3A20 3078 
00004D34  2530 3458 
00004D38  3A        
00004D39  2025 640A 8203          dc.b      32,37,100,10,0
00004D3D  00        
                    8204   @m68kde~1_31:
00004D3E  0D0A 2045 8205          dc.b      13,10,32,69,120,105,116,105,110,103,32,69,69
00004D42  7869 7469 
00004D46  6E67 2045 
00004D4A  45        
00004D4B  5052 4F4D 8206          dc.b      80,82,79,77,32,82,101,97,100,32,66,108,111,99
00004D4F  2052 6561 
00004D53  6420 426C 
00004D57  6F63      
00004D59  6B20 300A 8207          dc.b      107,32,48,10,0
00004D5D  00        
                    8208   @m68kde~1_32:
00004D5E  0D0A 2042 8209          dc.b      13,10,32,66,108,111,99,107,32,49,32,65,100,100
00004D62  6C6F 636B 
00004D66  2031 2041 
00004D6A  6464      
00004D6C  7265 7373 8210          dc.b      114,101,115,115,58,32,48,120,37,48,52,88,58
00004D70  3A20 3078 
00004D74  2530 3458 
00004D78  3A        
00004D79  2025 640A 8211          dc.b      32,37,100,10,0
00004D7D  00        
                    8212   @m68kde~1_33:
00004D7E  0D0A 2045 8213          dc.b      13,10,32,69,120,105,116,105,110,103,32,69,69
00004D82  7869 7469 
00004D86  6E67 2045 
00004D8A  45        
00004D8B  5052 4F4D 8214          dc.b      80,82,79,77,32,82,101,97,100,32,66,108,111,99
00004D8F  2052 6561 
00004D93  6420 426C 
00004D97  6F63      
00004D99  6B20 310A 8215          dc.b      107,32,49,10,0
00004D9D  00        
                    8216   @m68kde~1_34:
00004D9E  0D0A 2049 8217          dc.b      13,10,32,73,50,67,32,84,101,115,116,10,0
00004DA2  3243 2054 
00004DA6  6573 740A 
00004DAA  00        
                    8218   @m68kde~1_35:
00004DAC  5061 6765 8219          dc.b      80,97,103,101,32,87,114,105,116,101,10,0
00004DB0  2057 7269 
00004DB4  7465 0A00 
                    8220   @m68kde~1_36:
00004DB8  5365 7175 8221          dc.b      83,101,113,117,101,110,116,105,97,108,32,82
00004DBC  656E 7469 
00004DC0  616C 2052 
00004DC4  6561 640A 8222          dc.b      101,97,100,10,0
00004DC8  00        
                    8223   @m68kde~1_37:
00004DCA  2425 3038 8224          dc.b      36,37,48,56,88,32,32,0
00004DCE  5820 2000 
                    8225   @m68kde~1_38:
00004DD2  2000      8226          dc.b      32,0
                    8227   @m68kde~1_39:
00004DD4  2E00      8228          dc.b      46,0
                    8229   @m68kde~1_40:
00004DD6  2563 00   8230          dc.b      37,99,0
                    8231   @m68kde~1_41:
00004DDA  00        8232          dc.b      0
                    8233   @m68kde~1_42:
00004DDC  0D0A 0D0A 8234          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004DE0  2044 3020 
00004DE4  3D20 2425 
00004DE8  3038 58   
00004DEB  2020 4130 8235          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004DEF  203D 2024 
00004DF3  2530 3858 
00004DF7  00        
                    8236   @m68kde~1_43:
00004DF8  0D0A 2044 8237          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004DFC  3120 3D20 
00004E00  2425 3038 
00004E04  5820 20   
00004E07  4131 203D 8238          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004E0B  2024 2530 
00004E0F  3858 00   
                    8239   @m68kde~1_44:
00004E12  0D0A 2044 8240          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004E16  3220 3D20 
00004E1A  2425 3038 
00004E1E  5820 20   
00004E21  4132 203D 8241          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004E25  2024 2530 
00004E29  3858 00   
                    8242   @m68kde~1_45:
00004E2C  0D0A 2044 8243          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004E30  3320 3D20 
00004E34  2425 3038 
00004E38  5820 20   
00004E3B  4133 203D 8244          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004E3F  2024 2530 
00004E43  3858 00   
                    8245   @m68kde~1_46:
00004E46  0D0A 2044 8246          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004E4A  3420 3D20 
00004E4E  2425 3038 
00004E52  5820 20   
00004E55  4134 203D 8247          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004E59  2024 2530 
00004E5D  3858 00   
                    8248   @m68kde~1_47:
00004E60  0D0A 2044 8249          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004E64  3520 3D20 
00004E68  2425 3038 
00004E6C  5820 20   
00004E6F  4135 203D 8250          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004E73  2024 2530 
00004E77  3858 00   
                    8251   @m68kde~1_48:
00004E7A  0D0A 2044 8252          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004E7E  3620 3D20 
00004E82  2425 3038 
00004E86  5820 20   
00004E89  4136 203D 8253          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004E8D  2024 2530 
00004E91  3858 00   
                    8254   @m68kde~1_49:
00004E94  0D0A 2044 8255          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004E98  3720 3D20 
00004E9C  2425 3038 
00004EA0  5820 20   
00004EA3  4137 203D 8256          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004EA7  2024 2530 
00004EAB  3858 00   
                    8257   @m68kde~1_50:
00004EAE  0D0A 0D0A 8258          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004EB2  5553 5020 
00004EB6  3D20 2425 
00004EBA  3038 58   
00004EBD  2020 2841 8259          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004EC1  3729 2055 
00004EC5  7365 7220 
00004EC9  5350      
00004ECB  00        8260          dc.b      0
                    8261   @m68kde~1_51:
00004ECC  0D0A 5353 8262          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004ED0  5020 3D20 
00004ED4  2425 3038 
00004ED8  5820 20   
00004EDB  2841 3729 8263          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004EDF  2053 7570 
00004EE3  6572 7669 
00004EE7  73        
00004EE8  6F72 2053 8264          dc.b      111,114,32,83,80,0
00004EEC  5000      
                    8265   @m68kde~1_52:
00004EEE  0D0A 2053 8266          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004EF2  5220 3D20 
00004EF6  2425 3034 
00004EFA  5820 20   
00004EFD  2000      8267          dc.b      32,0
                    8268   @m68kde~1_53:
00004F00  2020 205B 8269          dc.b      32,32,32,91,0
00004F04  00        
                    8270   @m68kde~1_54:
00004F06  0D0A 2050 8271          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004F0A  4320 3D20 
00004F0E  2425 3038 
00004F12  5820 20   
00004F15  00        8272          dc.b      0
                    8273   @m68kde~1_55:
00004F16  5B40 2042 8274          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004F1A  5245 414B 
00004F1E  504F 494E 
00004F22  545D 00   
                    8275   @m68kde~1_56:
00004F26  0D0A 5750 8276          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004F2A  2564 203D 
00004F2E  2025 7300 
                    8277   @m68kde~1_57:
00004F32  0D0A 0D0A 8278          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004F36  0D0A 0D0A 
00004F3A  0D0A 0D0A 
00004F3E  5369 6E   
00004F41  676C 6520 8279          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004F45  5374 6570 
00004F49  2020 3A5B 
00004F4D  4F        
00004F4E  4E5D 00   8280          dc.b      78,93,0
                    8281   @m68kde~1_58:
00004F52  0D0A 4272 8282          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004F56  6561 6B20 
00004F5A  506F 696E 
00004F5E  74        
00004F5F  7320 3A5B 8283          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004F63  4469 7361 
00004F67  626C 6564 
00004F6B  5D        
00004F6C  00        8284          dc.b      0
                    8285   @m68kde~1_59:
00004F6E  0D0A 5072 8286          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004F72  6573 7320 
00004F76  3C53 5041 
00004F7A  4345      
00004F7C  3E20 746F 8287          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004F80  2045 7865 
00004F84  6375 7465 
00004F88  20        
00004F89  4E65 7874 8288          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004F8D  2049 6E73 
00004F91  7472 7563 
00004F95  7469 6F6E 8289          dc.b      116,105,111,110,0
00004F99  00        
                    8290   @m68kde~1_60:
00004F9A  0D0A 5072 8291          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004F9E  6573 7320 
00004FA2  3C45 5343 
00004FA6  3E20      
00004FA8  746F 2052 8292          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004FAC  6573 756D 
00004FB0  6520 5072 
00004FB4  6F67 7261 8293          dc.b      111,103,114,97,109,0
00004FB8  6D00      
                    8294   @m68kde~1_61:
00004FBA  0D0A 496C 8295          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004FBE  6C65 6761 
00004FC2  6C20 4461 
00004FC6  74        
00004FC7  6120 5265 8296          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004FCB  6769 7374 
00004FCF  6572 203A 
00004FD3  20        
00004FD4  5573 6520 8297          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004FD8  4430 2D44 
00004FDC  372E 2E2E 
00004FE0  2E2E      
00004FE2  0D0A 00   8298          dc.b      13,10,0
                    8299   @m68kde~1_62:
00004FE6  0D0A 4425 8300          dc.b      13,10,68,37,99,32,61,32,0
00004FEA  6320 3D20 
00004FEE  00        
                    8301   @m68kde~1_63:
00004FF0  0D0A 496C 8302          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004FF4  6C65 6761 
00004FF8  6C20 4164 
00004FFC  64        
00004FFD  7265 7373 8303          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00005001  2052 6567 
00005005  6973 7465 
00005009  7220 3A20 8304          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
0000500D  5573 6520 
00005011  4130 2D41 
00005015  372E      
00005017  2E2E 2E2E 8305          dc.b      46,46,46,46,13,10,0
0000501B  0D0A 00   
                    8306   @m68kde~1_64:
0000501E  0D0A 4125 8307          dc.b      13,10,65,37,99,32,61,32,0
00005022  6320 3D20 
00005026  00        
                    8308   @m68kde~1_65:
00005028  0D0A 5573 8309          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
0000502C  6572 2053 
00005030  5020 3D20 
00005034  00        
                    8310   @m68kde~1_66:
00005036  0D0A 496C 8311          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000503A  6C65 6761 
0000503E  6C20 5265 
00005042  67        
00005043  6973 7465 8312          dc.b      105,115,116,101,114,46,46,46,46,0
00005047  722E 2E2E 
0000504B  2E00      
                    8313   @m68kde~1_67:
0000504E  0D0A 5379 8314          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00005052  7374 656D 
00005056  2053 5020 
0000505A  3D        
0000505B  2000      8315          dc.b      32,0
                    8316   @m68kde~1_68:
0000505E  0D0A 5043 8317          dc.b      13,10,80,67,32,61,32,0
00005062  203D 2000 
                    8318   @m68kde~1_69:
00005066  0D0A 5352 8319          dc.b      13,10,83,82,32,61,32,0
0000506A  203D 2000 
                    8320   @m68kde~1_70:
0000506E  0D0A 496C 8321          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00005072  6C65 6761 
00005076  6C20 5265 
0000507A  67        
0000507B  6973 7465 8322          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
0000507F  723A 2055 
00005083  7365 2041 
00005087  30        
00005088  2D41 372C 8323          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000508C  2044 302D 
00005090  4437 2C20 
00005094  5353 50   
00005097  2C20 5553 8324          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000509B  502C 2050 
0000509F  4320 6F72 
000050A3  2053      
000050A5  520D 0A00 8325          dc.b      82,13,10,0
                    8326   @m68kde~1_71:
000050AA  0D0A 0D0A 8327          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000050AE  4E75 6D20 
000050B2  2020 2020 
000050B6  4164      
000050B8  6472 6573 8328          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000050BC  7320 2020 
000050C0  2020 2049 
000050C4  6E        
000050C5  7374 7275 8329          dc.b      115,116,114,117,99,116,105,111,110,0
000050C9  6374 696F 
000050CD  6E00      
                    8330   @m68kde~1_72:
000050D0  0D0A 2D2D 8331          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000050D4  2D20 2020 
000050D8  2020 2D2D 
000050DC  2D2D 2D   
000050DF  2D2D 2D2D 8332          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000050E3  2020 2020 
000050E7  2D2D 2D2D 
000050EB  2D2D 2D   
000050EE  2D2D 2D2D 8333          dc.b      45,45,45,45,0
000050F2  00        
                    8334   @m68kde~1_73:
000050F4  0D0A 4E6F 8335          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000050F8  2042 7265 
000050FC  616B 506F 
00005100  69        
00005101  6E74 7320 8336          dc.b      110,116,115,32,83,101,116,0
00005105  5365 7400 
                    8337   @m68kde~1_74:
0000510A  0D0A 2533 8338          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
0000510E  6420 2020 
00005112  2020 2425 
00005116  3038 78   
00005119  00        8339          dc.b      0
                    8340   @m68kde~1_75:
0000511A  0D0A 4E75 8341          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
0000511E  6D20 2020 
00005122  2020 4164 
00005126  6472      
00005128  6573 7300 8342          dc.b      101,115,115,0
                    8343   @m68kde~1_76:
0000512C  0D0A 2D2D 8344          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00005130  2D20 2020 
00005134  2020 2D2D 
00005138  2D2D 2D   
0000513B  2D2D 2D2D 8345          dc.b      45,45,45,45,0
0000513F  00        
                    8346   @m68kde~1_77:
00005140  0D0A 4E6F 8347          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00005144  2057 6174 
00005148  6368 506F 
0000514C  69        
0000514D  6E74 7320 8348          dc.b      110,116,115,32,83,101,116,0
00005151  5365 7400 
                    8349   @m68kde~1_78:
00005156  0D0A 456E 8350          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000515A  7465 7220 
0000515E  4272 6561 
00005162  6B        
00005163  2050 6F69 8351          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00005167  6E74 204E 
0000516B  756D 6265 
0000516F  72        
00005170  3A20 00   8352          dc.b      58,32,0
                    8353   @m68kde~1_79:
00005174  0D0A 496C 8354          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00005178  6C65 6761 
0000517C  6C20 5261 
00005180  6E        
00005181  6765 203A 8355          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00005185  2055 7365 
00005189  2030 202D 
0000518D  2037      
0000518F  00        8356          dc.b      0
                    8357   @m68kde~1_80:
00005190  0D0A 4272 8358          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005194  6561 6B20 
00005198  506F 696E 
0000519C  74        
0000519D  2043 6C65 8359          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000051A1  6172 6564 
000051A5  2E2E 2E2E 
000051A9  2E        
000051AA  0D0A 00   8360          dc.b      13,10,0
                    8361   @m68kde~1_81:
000051AE  0D0A 4272 8362          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000051B2  6561 6B20 
000051B6  506F 696E 
000051BA  74        
000051BB  2077 6173 8363          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000051BF  6E27 7420 
000051C3  5365 742E 
000051C7  2E        
000051C8  2E2E 2E00 8364          dc.b      46,46,46,0
                    8365   @m68kde~1_82:
000051CC  0D0A 456E 8366          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000051D0  7465 7220 
000051D4  5761 7463 
000051D8  68        
000051D9  2050 6F69 8367          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000051DD  6E74 204E 
000051E1  756D 6265 
000051E5  72        
000051E6  3A20 00   8368          dc.b      58,32,0
                    8369   @m68kde~1_83:
000051EA  0D0A 5761 8370          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000051EE  7463 6820 
000051F2  506F 696E 
000051F6  74        
000051F7  2043 6C65 8371          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000051FB  6172 6564 
000051FF  2E2E 2E2E 
00005203  2E        
00005204  0D0A 00   8372          dc.b      13,10,0
                    8373   @m68kde~1_84:
00005208  0D0A 5761 8374          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000520C  7463 6820 
00005210  506F 696E 
00005214  74        
00005215  2057 6173 8375          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00005219  206E 6F74 
0000521D  2053 6574 
00005221  2E        
00005222  2E2E 2E2E 8376          dc.b      46,46,46,46,0
00005226  00        
                    8377   @m68kde~1_85:
00005228  0D0A 4E6F 8378          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
0000522C  2046 5245 
00005230  4520 4272 
00005234  6561      
00005236  6B20 506F 8379          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
0000523A  696E 7473 
0000523E  2E2E 2E2E 
00005242  2E        
00005243  00        8380          dc.b      0
                    8381   @m68kde~1_86:
00005244  0D0A 4272 8382          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005248  6561 6B20 
0000524C  506F 696E 
00005250  74        
00005251  2041 6464 8383          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005255  7265 7373 
00005259  3A20 00   
                    8384   @m68kde~1_87:
0000525C  0D0A 4572 8385          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00005260  726F 7220 
00005264  3A20 4272 
00005268  65        
00005269  616B 2050 8386          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000526D  6F69 6E74 
00005271  7320 4341 
00005275  4E        
00005276  4E4F 5420 8387          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000527A  6265 2073 
0000527E  6574 2061 
00005282  74        
00005283  204F 4444 8388          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00005287  2061 6464 
0000528B  7265 7373 
0000528F  65        
00005290  7300      8389          dc.b      115,0
                    8390   @m68kde~1_88:
00005292  0D0A 4572 8391          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00005296  726F 7220 
0000529A  3A20 4272 
0000529E  65        
0000529F  616B 2050 8392          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000052A3  6F69 6E74 
000052A7  7320 4341 
000052AB  4E        
000052AC  4E4F 5420 8393          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000052B0  6265 2073 
000052B4  6574 2066 
000052B8  6F        
000052B9  7220 524F 8394          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
000052BD  4D20 696E 
000052C1  2052 616E 
000052C5  67        
000052C6  6520 3A20 8395          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000052CA  5B24 302D 
000052CE  2430 3030 
000052D2  3037 46   
000052D5  4646 5D00 8396          dc.b      70,70,93,0
                    8397   @m68kde~1_89:
000052DA  0D0A 4572 8398          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000052DE  726F 723A 
000052E2  2042 7265 
000052E6  61        
000052E7  6B20 506F 8399          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000052EB  696E 7420 
000052EF  416C 7265 
000052F3  6164 7920 8400          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000052F7  4578 6973 
000052FB  7473 2061 
000052FF  74        
00005300  2041 6464 8401          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00005304  7265 7373 
00005308  203A 2025 
0000530C  30        
0000530D  3878 0D0A 8402          dc.b      56,120,13,10,0
00005311  00        
                    8403   @m68kde~1_90:
00005312  0D0A 4272 8404          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005316  6561 6B20 
0000531A  506F 696E 
0000531E  74        
0000531F  2053 6574 8405          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005323  2061 7420 
00005327  4164 6472 
0000532B  65        
0000532C  7373 3A20 8406          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005330  5B24 2530 
00005334  3878 5D00 
                    8407   @m68kde~1_91:
00005338  0D0A 4E6F 8408          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
0000533C  2046 5245 
00005340  4520 5761 
00005344  7463      
00005346  6820 506F 8409          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
0000534A  696E 7473 
0000534E  2E2E 2E2E 
00005352  2E        
00005353  00        8410          dc.b      0
                    8411   @m68kde~1_92:
00005354  0D0A 5761 8412          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005358  7463 6820 
0000535C  506F 696E 
00005360  74        
00005361  2041 6464 8413          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005365  7265 7373 
00005369  3A20 00   
                    8414   @m68kde~1_93:
0000536C  0D0A 4572 8415          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00005370  726F 723A 
00005374  2057 6174 
00005378  63        
00005379  6820 506F 8416          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
0000537D  696E 7420 
00005381  416C 7265 
00005385  6164 7920 8417          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00005389  5365 7420 
0000538D  6174 2041 
00005391  64        
00005392  6472 6573 8418          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00005396  7320 3A20 
0000539A  2530 3878 
0000539E  0D        
0000539F  0A00      8419          dc.b      10,0
                    8420   @m68kde~1_94:
000053A2  0D0A 5761 8421          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000053A6  7463 6820 
000053AA  506F 696E 
000053AE  74        
000053AF  2053 6574 8422          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000053B3  2061 7420 
000053B7  4164 6472 
000053BB  65        
000053BC  7373 3A20 8423          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000053C0  5B24 2530 
000053C4  3878 5D00 
                    8424   @m68kde~1_95:
000053C8  0D0A 0D0A 8425          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
000053CC  0D0A 0D0A 
000053D0  4042 5245 
000053D4  414B 50   
000053D7  4F49 4E54 8426          dc.b      79,73,78,84,0
000053DB  00        
                    8427   @m68kde~1_96:
000053DC  0D0A 5369 8428          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000053E0  6E67 6C65 
000053E4  2053 7465 
000053E8  70        
000053E9  203A 205B 8429          dc.b      32,58,32,91,79,78,93,0
000053ED  4F4E 5D00 
                    8430   @m68kde~1_97:
000053F2  0D0A 4272 8431          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000053F6  6561 6B50 
000053FA  6F69 6E74 
000053FE  73        
000053FF  203A 205B 8432          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00005403  456E 6162 
00005407  6C65 645D 
0000540B  00        
                    8433   @m68kde~1_98:
0000540C  0D0A 5072 8434          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005410  6573 7320 
00005414  3C45 5343 
00005418  3E20      
0000541A  746F 2052 8435          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000541E  6573 756D 
00005422  6520 5573 
00005426  6572 2050 8436          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
0000542A  726F 6772 
0000542E  616D 0D0A 
00005432  00        
                    8437   @m68kde~1_99:
00005434  0D0A 556E 8438          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00005438  6B6E 6F77 
0000543C  6E20 436F 
00005440  6D        
00005441  6D61 6E64 8439          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00005445  2E2E 2E2E 
00005449  2E0D 0A00 
                    8440   @m68kde~1_100:
0000544E  0D0A 5072 8441          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00005452  6F67 7261 
00005456  6D20 456E 
0000545A  64        
0000545B  6564 2028 8442          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
0000545F  5452 4150 
00005463  2023 3135 
00005467  292E      
00005469  2E2E 2E00 8443          dc.b      46,46,46,0
                    8444   @m68kde~1_101:
0000546E  0D0A 4B69 8445          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00005472  6C6C 2041 
00005476  6C6C 2042 
0000547A  72        
0000547B  6561 6B20 8446          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
0000547F  506F 696E 
00005483  7473 2E2E 
00005487  2E        
00005488  2879 2F6E 8447          dc.b      40,121,47,110,41,63,0
0000548C  293F 00   
                    8448   @m68kde~1_102:
00005490  0D0A 4B69 8449          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00005494  6C6C 2041 
00005498  6C6C 2057 
0000549C  61        
0000549D  7463 6820 8450          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
000054A1  506F 696E 
000054A5  7473 2E2E 
000054A9  2E        
000054AA  2879 2F6E 8451          dc.b      40,121,47,110,41,63,0
000054AE  293F 00   
                    8452   @m68kde~1_103:
000054B2  0D0A 2D2D 8453          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000054B6  2D2D 2D2D 
000054BA  2D2D 2D2D 
000054BE  2D2D 2D   
000054C1  2D2D 2D2D 8454          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000054C5  2D2D 2D2D 
000054C9  2D2D 2D2D 
000054CD  2D2D 2D   
000054D0  2D2D 2D2D 8455          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000054D4  2D2D 2D2D 
000054D8  2D2D 2D2D 
000054DC  2D2D 2D   
000054DF  2D2D 2D2D 8456          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000054E3  2D2D 2D2D 
000054E7  2D2D 2D2D 
000054EB  2D2D 2D   
000054EE  2D2D 2D2D 8457          dc.b      45,45,45,45,45,45,0
000054F2  2D2D 00   
                    8458   @m68kde~1_104:
000054F6  0D0A 2020 8459          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000054FA  4465 6275 
000054FE  6767 6572 
00005502  20        
00005503  436F 6D6D 8460          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00005507  616E 6420 
0000550B  5375 6D6D 
0000550F  6172 7900 8461          dc.b      97,114,121,0
                    8462   @m68kde~1_105:
00005514  0D0A 2020 8463          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00005518  2E28 7265 
0000551C  6729 2020 
00005520  2020      
00005522  2020 202D 8464          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00005526  2043 6861 
0000552A  6E67 6520 
0000552E  5265      
00005530  6769 7374 8465          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00005534  6572 733A 
00005538  2065 2E67 
0000553C  2041 302D 8466          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00005540  4137 2C44 
00005544  302D 4437 
00005548  2C50 43   
0000554B  2C53 5350 8467          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
0000554F  2C55 5350 
00005553  2C53 5200 
                    8468   @m68kde~1_106:
00005558  0D0A 2020 8469          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
0000555C  4244 2F42 
00005560  532F 4243 
00005564  2F42 4B   
00005567  2020 2D20 8470          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
0000556B  4272 6561 
0000556F  6B20 506F 
00005573  69        
00005574  6E74 3A20 8471          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00005578  4469 7370 
0000557C  6C61 792F 
00005580  53        
00005581  6574 2F43 8472          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00005585  6C65 6172 
00005589  2F4B 696C 
0000558D  6C        
0000558E  00        8473          dc.b      0
                    8474   @m68kde~1_107:
00005590  0D0A 2020 8475          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00005594  4320 2020 
00005598  2020 2020 
0000559C  2020 20   
0000559F  2020 2D20 8476          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000055A3  436F 7079 
000055A7  2050 726F 
000055AB  67        
000055AC  7261 6D20 8477          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
000055B0  6672 6F6D 
000055B4  2046 6C61 
000055B8  73        
000055B9  6820 746F 8478          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
000055BD  204D 6169 
000055C1  6E20 4D65 
000055C5  6D        
000055C6  6F72 7900 8479          dc.b      111,114,121,0
                    8480   @m68kde~1_108:
000055CA  0D0A 2020 8481          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
000055CE  4420 2020 
000055D2  2020 2020 
000055D6  2020 20   
000055D9  2020 2D20 8482          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
000055DD  4475 6D70 
000055E1  204D 656D 
000055E5  6F        
000055E6  7279 2043 8483          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000055EA  6F6E 7465 
000055EE  6E74 7320 
000055F2  746F 2053 8484          dc.b      116,111,32,83,99,114,101,101,110,0
000055F6  6372 6565 
000055FA  6E00      
                    8485   @m68kde~1_109:
000055FC  0D0A 2020 8486          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00005600  4520 2020 
00005604  2020 2020 
00005608  2020 20   
0000560B  2020 2D20 8487          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
0000560F  456E 7465 
00005613  7220 5374 
00005617  72        
00005618  696E 6720 8488          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
0000561C  696E 746F 
00005620  204D 656D 
00005624  6F72 7900 8489          dc.b      111,114,121,0
                    8490   @m68kde~1_110:
00005628  0D0A 2020 8491          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
0000562C  4620 2020 
00005630  2020 2020 
00005634  2020 20   
00005637  2020 2D20 8492          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
0000563B  4669 6C6C 
0000563F  204D 656D 
00005643  6F        
00005644  7279 2077 8493          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00005648  6974 6820 
0000564C  4461 7461 
00005650  00        
                    8494   @m68kde~1_111:
00005652  0D0A 2020 8495          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00005656  4720 2020 
0000565A  2020 2020 
0000565E  2020 20   
00005661  2020 2D20 8496          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00005665  476F 2050 
00005669  726F 6772 
0000566D  61        
0000566E  6D20 5374 8497          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00005672  6172 7469 
00005676  6E67 2061 
0000567A  74        
0000567B  2041 6464 8498          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
0000567F  7265 7373 
00005683  3A20 2425 
00005687  30        
00005688  3858 00   8499          dc.b      56,88,0
                    8500   @m68kde~1_112:
0000568C  0D0A 2020 8501          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00005690  4C20 2020 
00005694  2020 2020 
00005698  2020 20   
0000569B  2020 2D20 8502          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
0000569F  4C6F 6164 
000056A3  2050 726F 
000056A7  67        
000056A8  7261 6D20 8503          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000056AC  282E 4845 
000056B0  5820 6669 
000056B4  6C        
000056B5  6529 2066 8504          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
000056B9  726F 6D20 
000056BD  4C61 7074 
000056C1  6F        
000056C2  7000      8505          dc.b      112,0
                    8506   @m68kde~1_113:
000056C4  0D0A 2020 8507          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
000056C8  4D20 2020 
000056CC  2020 2020 
000056D0  2020 20   
000056D3  2020 2D20 8508          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
000056D7  4D65 6D6F 
000056DB  7279 2045 
000056DF  78        
000056E0  616D 696E 8509          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
000056E4  6520 616E 
000056E8  6420 4368 
000056EC  61        
000056ED  6E67 6500 8510          dc.b      110,103,101,0
                    8511   @m68kde~1_114:
000056F2  0D0A 2020 8512          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
000056F6  5020 2020 
000056FA  2020 2020 
000056FE  2020 20   
00005701  2020 2D20 8513          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00005705  5072 6F67 
00005709  7261 6D20 
0000570D  46        
0000570E  6C61 7368 8514          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00005712  204D 656D 
00005716  6F72 7920 
0000571A  7769 7468 8515          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
0000571E  2055 7365 
00005722  7220 5072 
00005726  6F67 7261 8516          dc.b      111,103,114,97,109,0
0000572A  6D00      
                    8517   @m68kde~1_115:
0000572C  0D0A 2020 8518          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00005730  5220 2020 
00005734  2020 2020 
00005738  2020 20   
0000573B  2020 2D20 8519          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
0000573F  4469 7370 
00005743  6C61 7920 
00005747  36        
00005748  3830 3030 8520          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
0000574C  2052 6567 
00005750  6973 7465 
00005754  72        
00005755  7300      8521          dc.b      115,0
                    8522   @m68kde~1_116:
00005758  0D0A 2020 8523          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
0000575C  5320 2020 
00005760  2020 2020 
00005764  2020 20   
00005767  2020 2D20 8524          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
0000576B  546F 6767 
0000576F  6C65 204F 
00005773  4E        
00005774  2F4F 4646 8525          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00005778  2053 696E 
0000577C  676C 6520 
00005780  53        
00005781  7465 7020 8526          dc.b      116,101,112,32,77,111,100,101,0
00005785  4D6F 6465 
00005789  00        
                    8527   @m68kde~1_117:
0000578A  0D0A 2020 8528          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
0000578E  544D 2020 
00005792  2020 2020 
00005796  2020 20   
00005799  2020 2D20 8529          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
0000579D  5465 7374 
000057A1  204D 656D 
000057A5  6F        
000057A6  7279 00   8530          dc.b      114,121,0
                    8531   @m68kde~1_118:
000057AA  0D0A 2020 8532          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000057AE  5453 2020 
000057B2  2020 2020 
000057B6  2020 20   
000057B9  2020 2D20 8533          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
000057BD  5465 7374 
000057C1  2053 7769 
000057C5  74        
000057C6  6368 6573 8534          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
000057CA  3A20 5357 
000057CE  372D 3000 
                    8535   @m68kde~1_119:
000057D2  0D0A 2020 8536          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
000057D6  5444 2020 
000057DA  2020 2020 
000057DE  2020 20   
000057E1  2020 2D20 8537          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
000057E5  5465 7374 
000057E9  2044 6973 
000057ED  70        
000057EE  6C61 7973 8538          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
000057F2  3A20 4C45 
000057F6  4473 2061 
000057FA  6E        
000057FB  6420 372D 8539          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
000057FF  5365 676D 
00005803  656E 7400 
                    8540   @m68kde~1_120:
00005808  0D0A 2020 8541          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
0000580C  5744 2F57 
00005810  532F 5743 
00005814  2F57 4B   
00005817  2020 2D20 8542          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
0000581B  5761 7463 
0000581F  6820 506F 
00005823  696E      
00005825  743A 2044 8543          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00005829  6973 706C 
0000582D  6179 2F53 
00005831  65        
00005832  742F 436C 8544          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00005836  6561 722F 
0000583A  4B69 6C6C 
0000583E  00        
                    8545   @m68kde~1_121:
00005840  0D0A 2300 8546          dc.b      13,10,35,0
                    8547   @m68kde~1_122:
00005844  0D0A 5072 8548          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00005848  6F67 7261 
0000584C  6D20 5275 
00005850  6E        
00005851  6E69 6E67 8549          dc.b      110,105,110,103,46,46,46,46,46,0
00005855  2E2E 2E2E 
00005859  2E00      
                    8550   @m68kde~1_123:
0000585C  0D0A 5072 8551          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00005860  6573 7320 
00005864  3C52 4553 
00005868  4554      
0000586A  3E20 6275 8552          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
0000586E  7474 6F6E 
00005872  203C 4B65 
00005876  79        
00005877  303E 206F 8553          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
0000587B  6E20 4445 
0000587F  3120 746F 
00005883  2073      
00005885  746F 7000 8554          dc.b      116,111,112,0
                    8555   @m68kde~1_124:
0000588A  0D0A 4572 8556          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
0000588E  726F 723A 
00005892  2050 7265 
00005896  73        
00005897  7320 2747 8557          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
0000589B  2720 6669 
0000589F  7273 7420 
000058A3  74        
000058A4  6F20 7374 8558          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000058A8  6172 7420 
000058AC  7072 6F67 
000058B0  7261 6D00 8559          dc.b      114,97,109,0
                    8560   @m68kde~1_125:
000058B4  0D0A 5369 8561          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000058B8  6E67 6C65 
000058BC  2053 7465 
000058C0  70        
000058C1  2020 3A5B 8562          dc.b      32,32,58,91,79,78,93,0
000058C5  4F4E 5D00 
                    8563   @m68kde~1_126:
000058CA  0D0A 5072 8564          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
000058CE  6573 7320 
000058D2  2747 2720 
000058D6  74        
000058D7  6F20 5472 8565          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
000058DB  6163 6520 
000058DF  5072 6F67 
000058E3  72        
000058E4  616D 2066 8566          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
000058E8  726F 6D20 
000058EC  6164 6472 
000058F0  6573 7320 8567          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000058F4  2425 582E 
000058F8  2E2E 2E2E 
000058FC  00        
                    8568   @m68kde~1_127:
000058FE  0D0A 5075 8569          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00005902  7368 203C 
00005906  5245 5345 
0000590A  5420      
0000590C  4275 7474 8570          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00005910  6F6E 3E20 
00005914  746F 2053 
00005918  74        
00005919  6F70 2E2E 8571          dc.b      111,112,46,46,46,46,46,0
0000591D  2E2E 2E00 
                    8572   @m68kde~1_128:
00005922  0D0A 5369 8573          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005926  6E67 6C65 
0000592A  2053 7465 
0000592E  70        
0000592F  203A 205B 8574          dc.b      32,58,32,91,79,70,70,93,0
00005933  4F46 465D 
00005937  00        
                    8575   @m68kde~1_129:
00005938  0D0A 4272 8576          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000593C  6561 6B20 
00005940  506F 696E 
00005944  74        
00005945  7320 3A5B 8577          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00005949  456E 6162 
0000594D  6C65 645D 
00005951  00        
                    8578   @m68kde~1_130:
00005952  0D0A 5072 8579          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005956  6573 7320 
0000595A  3C45 5343 
0000595E  3E20      
00005960  746F 2052 8580          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005964  6573 756D 
00005968  6520 5573 
0000596C  6572 2050 8581          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00005970  726F 6772 
00005974  616D 2E2E 
00005978  2E        
00005979  2E2E 00   8582          dc.b      46,46,0
                    8583   @m68kde~1_131:
0000597C  0D0A 5369 8584          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005980  6E67 6C65 
00005984  2053 7465 
00005988  70        
00005989  2020 3A5B 8585          dc.b      32,32,58,91,79,70,70,93,0
0000598D  4F46 465D 
00005991  00        
                    8586   @m68kde~1_132:
00005992  0D0A 0D0A 8587          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005996  5072 6F67 
0000599A  7261 6D20 
0000599E  41        
0000599F  424F 5254 8588          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000059A3  2021 2121 
000059A7  2121 210D 
000059AB  0A00      
                    8589   @m68kde~1_133:
000059AE  2573 0D0A 8590          dc.b      37,115,13,10,0
000059B2  00        
                    8591   @m68kde~1_134:
000059B4  0D0A 0D0A 8592          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000059B8  5072 6F67 
000059BC  7261 6D20 
000059C0  41        
000059C1  424F 5254 8593          dc.b      66,79,82,84,32,33,33,33,33,33,0
000059C5  2021 2121 
000059C9  2121 00   
                    8594   @m68kde~1_135:
000059CC  0D0A 556E 8595          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
000059D0  6861 6E64 
000059D4  6C65 6420 
000059D8  49        
000059D9  6E74 6572 8596          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
000059DD  7275 7074 
000059E1  3A20 4952 
000059E5  5125 6420 8597          dc.b      81,37,100,32,33,33,33,33,33,0
000059E9  2121 2121 
000059ED  2100      
                    8598   @m68kde~1_136:
000059F0  4144 4452 8599          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000059F4  4553 5320 
000059F8  4552 524F 
000059FC  523A 20   
000059FF  3136 206F 8600          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005A03  7220 3332 
00005A07  2042 6974 
00005A0B  2054      
00005A0D  7261 6E73 8601          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00005A11  6665 7220 
00005A15  746F 2F66 
00005A19  726F 6D20 8602          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00005A1D  616E 204F 
00005A21  4444 2041 
00005A25  64        
00005A26  6472 6573 8603          dc.b      100,114,101,115,115,46,46,46,46,0
00005A2A  732E 2E2E 
00005A2E  2E00      
                    8604   @m68kde~1_137:
00005A30  556E 6861 8605          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00005A34  6E64 6C65 
00005A38  6420 5472 
00005A3C  6170 2021 8606          dc.b      97,112,32,33,33,33,33,33,0
00005A40  2121 2121 
00005A44  00        
                    8607   @m68kde~1_138:
00005A46  4255 5320 8608          dc.b      66,85,83,32,69,114,114,111,114,33,0
00005A4A  4572 726F 
00005A4E  7221 00   
                    8609   @m68kde~1_139:
00005A52  4144 4452 8610          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00005A56  4553 5320 
00005A5A  4572 726F 
00005A5E  7221      
00005A60  00        8611          dc.b      0
                    8612   @m68kde~1_140:
00005A62  494C 4C45 8613          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00005A66  4741 4C20 
00005A6A  494E 5354 
00005A6E  5255 43   
00005A71  5449 4F4E 8614          dc.b      84,73,79,78,0
00005A75  00        
                    8615   @m68kde~1_141:
00005A76  4449 5649 8616          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00005A7A  4445 2042 
00005A7E  5920 5A45 
00005A82  524F 00   
                    8617   @m68kde~1_142:
00005A86  2743 484B 8618          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00005A8A  2720 494E 
00005A8E  5354 5255 
00005A92  4354 49   
00005A95  4F4E 00   8619          dc.b      79,78,0
                    8620   @m68kde~1_143:
00005A98  5452 4150 8621          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00005A9C  5620 494E 
00005AA0  5354 5255 
00005AA4  4354 49   
00005AA7  4F4E 00   8622          dc.b      79,78,0
                    8623   @m68kde~1_144:
00005AAA  5052 4956 8624          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00005AAE  494C 4547 
00005AB2  4520 5649 
00005AB6  4F4C 41   
00005AB9  5449 4F4E 8625          dc.b      84,73,79,78,0
00005ABD  00        
                    8626   @m68kde~1_145:
00005ABE  554E 494E 8627          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005AC2  4954 4941 
00005AC6  4C49 5345 
00005ACA  4420 49   
00005ACD  5251 00   8628          dc.b      82,81,0
                    8629   @m68kde~1_146:
00005AD0  5350 5552 8630          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005AD4  494F 5553 
00005AD8  2049 5251 
00005ADC  00        
                    8631   @m68kde~1_147:
00005ADE  0D0A 5374 8632          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005AE2  6172 7420 
00005AE6  4164 6472 
00005AEA  65        
00005AEB  7373 2069 8633          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00005AEF  6E20 4D65 
00005AF3  6D6F 7279 
00005AF7  3A20 00   8634          dc.b      58,32,0
                    8635   @m68kde~1_148:
00005AFA  0D0A 456E 8636          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00005AFE  7465 7220 
00005B02  5374 7269 
00005B06  6E        
00005B07  6720 2845 8637          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00005B0B  5343 2074 
00005B0F  6F20 656E 
00005B13  64        
00005B14  2920 3A00 8638          dc.b      41,32,58,0
                    8639   @m68kde~1_149:
00005B18  0A45 6E74 8640          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
00005B1C  6572 2077 
00005B20  6861 7420 
00005B24  73        
00005B25  697A 6520 8641          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
00005B29  6F66 206D 
00005B2D  656D 6F72 
00005B31  7920 796F 8642          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
00005B35  7520 7761 
00005B39  6E74 2074 
00005B3D  6F20 7265 8643          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00005B41  6164 2F77 
00005B45  7269 7465 
00005B49  0A20 4279 8644          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
00005B4D  7465 203D 
00005B51  2030 0A20 
00005B55  576F      
00005B57  7264 203D 8645          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
00005B5B  2031 0A20 
00005B5F  4C6F 6E67 
00005B63  20        
00005B64  576F 7264 8646          dc.b      87,111,114,100,32,61,32,50,10,0
00005B68  203D 2032 
00005B6C  0A00      
                    8647   @m68kde~1_150:
00005B6E  0A45 6E74 8648          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005B72  6572 2077 
00005B76  6869 6368 
00005B7A  2064 6174 8649          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005B7E  6120 7061 
00005B82  7474 6572 
00005B86  6E        
00005B87  2079 6F75 8650          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005B8B  2077 616E 
00005B8F  7420 746F 
00005B93  2077 7269 8651          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005B97  7465 2069 
00005B9B  6E74 6F20 
00005B9F  6D65 6D6F 8652          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
00005BA3  7279 0A20 
00005BA7  3078 3030 
00005BAB  20        
00005BAC  3D20 300A 8653          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
00005BB0  2030 7842 
00005BB4  3220 3D20 
00005BB8  310A 20   
00005BBB  3078 4333 8654          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
00005BBF  203D 2032 
00005BC3  0A20 3078 
00005BC7  4434      
00005BC9  203D 2033 8655          dc.b      32,61,32,51,10,0
00005BCD  0A00      
                    8656   @m68kde~1_151:
00005BD0  0A45 6E74 8657          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005BD4  6572 2077 
00005BD8  6869 6368 
00005BDC  2064 6174 8658          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005BE0  6120 7061 
00005BE4  7474 6572 
00005BE8  6E        
00005BE9  2079 6F75 8659          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005BED  2077 616E 
00005BF1  7420 746F 
00005BF5  2077 7269 8660          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005BF9  7465 2069 
00005BFD  6E74 6F20 
00005C01  6D65 6D6F 8661          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005C05  7279 0A20 
00005C09  3078 3030 
00005C0D  30        
00005C0E  3020 3D20 8662          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
00005C12  300A 2030 
00005C16  7831 3233 
00005C1A  3420 3D   
00005C1D  2031 0A20 8663          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
00005C21  3078 4131 
00005C25  4232 203D 
00005C29  2032 0A   
00005C2C  2030 7843 8664          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
00005C30  3344 3420 
00005C34  3D20 330A 
00005C38  00        
                    8665   @m68kde~1_152:
00005C3A  0A45 6E74 8666          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005C3E  6572 2077 
00005C42  6869 6368 
00005C46  2064 6174 8667          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005C4A  6120 7061 
00005C4E  7474 6572 
00005C52  6E        
00005C53  2079 6F75 8668          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005C57  2077 616E 
00005C5B  7420 746F 
00005C5F  2077 7269 8669          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005C63  7465 2069 
00005C67  6E74 6F20 
00005C6B  6D65 6D6F 8670          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005C6F  7279 0A20 
00005C73  3078 3030 
00005C77  30        
00005C78  305F 3030 8671          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
00005C7C  3030 203D 
00005C80  2030 0A20 
00005C84  3078 41   
00005C87  4142 425F 8672          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
00005C8B  4343 4444 
00005C8F  203D 2031 
00005C93  0A20 30   
00005C96  7831 3132 8673          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
00005C9A  325F 3333 
00005C9E  3434 203D 
00005CA2  2032 0A   
00005CA5  2030 7837 8674          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
00005CA9  3635 345F 
00005CAD  3332 3130 
00005CB1  203D 20   
00005CB4  330A 00   8675          dc.b      51,10,0
                    8676   @m68kde~1_153:
00005CB8  0A50 726F 8677          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
00005CBC  7669 6465 
00005CC0  2053 7461 
00005CC4  72        
00005CC5  7420 4164 8678          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
00005CC9  6472 6573 
00005CCD  7320 696E 
00005CD1  2068 6578 8679          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
00005CD5  2028 646F 
00005CD9  206E 6F74 
00005CDD  2075 7365 8680          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
00005CE1  2030 7820 
00005CE5  7072 6566 
00005CE9  6978 290A 8681          dc.b      105,120,41,10,48,120,0
00005CED  3078 00   
                    8682   @m68kde~1_154:
00005CF0  0A50 726F 8683          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
00005CF4  7669 6465 
00005CF8  2045 6E64 
00005CFC  2041 6464 8684          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
00005D00  7265 7373 
00005D04  2069 6E20 
00005D08  6865 7820 8685          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
00005D0C  2864 6F20 
00005D10  6E6F 7420 
00005D14  7573 6520 8686          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
00005D18  3078 2070 
00005D1C  7265 6669 
00005D20  7829 0A30 8687          dc.b      120,41,10,48,120,0
00005D24  7800      
                    8688   @m68kde~1_155:
00005D26  0A53 7461 8689          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
00005D2A  7274 2041 
00005D2E  6464 7265 
00005D32  73        
00005D33  7320 3078 8690          dc.b      115,32,48,120,37,48,56,120,10,0
00005D37  2530 3878 
00005D3B  0A00      
                    8691   @m68kde~1_156:
00005D3E  0A45 6E64 8692          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
00005D42  2041 6464 
00005D46  7265 7373 
00005D4A  3A20 3078 8693          dc.b      58,32,48,120,37,48,56,120,10,0
00005D4E  2530 3878 
00005D52  0A00      
                    8694   @m68kde~1_157:
00005D54  4552 524F 8695          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
00005D58  522E 2E2E 
00005D5C  2041 6464 
00005D60  7265      
00005D62  7373 2030 8696          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
00005D66  7825 7820 
00005D6A  6973 2062 
00005D6E  65        
00005D6F  796F 6E64 8697          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005D73  2074 6865 
00005D77  206D 656D 
00005D7B  6F72 7920 8698          dc.b      111,114,121,32,114,97,110,103,101,10,0
00005D7F  7261 6E67 
00005D83  650A 00   
                    8699   @m68kde~1_158:
00005D86  4552 524F 8700          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
00005D8A  522E 2E2E 
00005D8E  2056 616C 
00005D92  7565      
00005D94  2077 7269 8701          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
00005D98  7474 656E 
00005D9C  2074 6F20 
00005DA0  6164 6472 8702          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00005DA4  6573 7320 
00005DA8  3078 2578 
00005DAC  203D 3D20 8703          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00005DB0  3078 2578 
00005DB4  2E20 5661 
00005DB8  6C75      
00005DBA  6520 4578 8704          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
00005DBE  7065 6374 
00005DC2  6564 3A20 
00005DC6  30        
00005DC7  7825 780A 8705          dc.b      120,37,120,10,0
00005DCB  00        
                    8706   @m68kde~1_159:
00005DCC  4164 6472 8707          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005DD0  6573 733A 
00005DD4  2030 7825 
00005DD8  78        
00005DD9  2056 616C 8708          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
00005DDD  7565 3A20 
00005DE1  3078 2530 
00005DE5  3258      
00005DE7  0A00      8709          dc.b      10,0
                    8710   @m68kde~1_160:
00005DEA  4164 6472 8711          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005DEE  6573 733A 
00005DF2  2030 7825 
00005DF6  78        
00005DF7  2056 616C 8712          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
00005DFB  7565 3A20 
00005DFF  3078 2530 
00005E03  3458      
00005E05  0A00      8713          dc.b      10,0
                    8714   @m68kde~1_161:
00005E08  4164 6472 8715          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005E0C  6573 733A 
00005E10  2030 7825 
00005E14  78        
00005E15  2056 616C 8716          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
00005E19  7565 3A20 
00005E1D  3078 2530 
00005E21  3858      
00005E23  0A00      8717          dc.b      10,0
                    8718   @m68kde~1_162:
00005E26  4445 312D 8719          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00005E2A  3638 6B20 
00005E2E  4275 6720 
00005E32  5631      
00005E34  2E37 3700 8720          dc.b      46,55,55,0
                    8721   @m68kde~1_163:
00005E38  436F 7079 8722          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00005E3C  7269 6768 
00005E40  7420 2843 
00005E44  2920 504A 8723          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00005E48  2044 6176 
00005E4C  6965 7320 
00005E50  3230      
00005E52  3136 00   8724          dc.b      49,54,0
                    8725   @m68kde~1_164:
00005E56  0D0A 5275 8726          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00005E5A  6E6E 696E 
00005E5E  672E 2E2E 
00005E62  2E        
00005E63  2E00      8727          dc.b      46,0
                    8728   @m68kde~1_165:
00005E66  5275 6E6E 8729          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005E6A  696E 672E 
00005E6E  2E2E 2E2E 
00005E72  00        
                    8730   @m68kde~1_166:
00005E74  4279 3A20 8731          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005E78  504A 2044 
00005E7C  6176 6965 
00005E80  73        
00005E81  00        8732          dc.b      0
                    8733   @m68kde~1_167:
00005E82  0D0A 2573 8734          dc.b      13,10,37,115,0
00005E86  00        
                    8735   @m68kde~1_168:
00005E88  0A20 5374 8736          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
00005E8C  7564 656E 
00005E90  7420 4E61 
00005E94  6D        
00005E95  6573 3A0A 8737          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
00005E99  205A 6163 
00005E9D  6861 7269 
00005EA1  61        
00005EA2  6820 4A6F 8738          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
00005EA6  7365 7068 
00005EAA  3A20 3435 
00005EAE  35        
00005EAF  3030 3035 8739          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00005EB3  3520 0A20 
00005EB7  556D 6169 
00005EBB  7220      
00005EBD  4D61 7A68 8740          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
00005EC1  6172 3A20 
00005EC5  3230 3333 
00005EC9  3333      
00005ECB  3038 0A00 8741          dc.b      48,56,10,0
                    8742   @m68kde~1_169:
00005ED0  496E 6974 8743          dc.b      73,110,105,116,105,97,108,105,122,105,110,103
00005ED4  6961 6C69 
00005ED8  7A69 6E67 
00005EDC  2069 3263 8744          dc.b      32,105,50,99,32,116,101,115,116,46,46,46,10
00005EE0  2074 6573 
00005EE4  742E 2E2E 
00005EE8  0A        
00005EE9  00        8745          dc.b      0
                    8746          section   data
00005EEA            8747                   align
          0000 5EEA 8748   DataStart       equ       *
                    8749   
                    8750   *********************************************************************************************************
                    8751   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8752   * to ram as part of the CStart routine in this file
                    8753   *********************************************************************************************************
                    8754   
                    8755   @vsscanf_bufx:
00005EEA  0B00 0546 8756          dc.l      @vsscanf_buf
                    8757   @vsscanf_1:
00005EEE  0A00      8758          dc.b      10,0
                    8759   __ctype:
00005EF0  0040 4040 8760          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005EF4  4040 4040 
00005EF8  4040 5050 
00005EFC  5050 50   
00005EFF  4040 4040 8761          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00005F03  4040 4040 
00005F07  4040 4040 
00005F0B  4040 40   
00005F0E  4040 40D0 8762          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005F12  A0A0 A0A0 
00005F16  A0A0 A0A0 
00005F1A  A0A0 A0A0 8763          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005F1E  A0A0 A08C 
00005F22  8C8C 8C   
00005F25  8C8C 8C8C 8764          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005F29  8C8C A0A0 
00005F2D  A0A0 A0   
00005F30  A0A0 8A8A 8765          dc.b      160,160,138,138,138,138,138,138,130,130,130
00005F34  8A8A 8A8A 
00005F38  8282 82   
00005F3B  8282 8282 8766          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005F3F  8282 8282 
00005F43  8282 82   
00005F46  8282 8282 8767          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005F4A  8282 A0A0 
00005F4E  A0A0 A0   
00005F51  A089 8989 8768          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005F55  8989 8981 
00005F59  8181 81   
00005F5C  8181 8181 8769          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005F60  8181 8181 
00005F64  8181 81   
00005F67  8181 8181 8770          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005F6B  81A0 A0A0 
00005F6F  A040 0000 
00005F73  00        
00005F74  0000 0000 8771          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005F78  0000 0000 
00005F7C  0000 0000 
00005F80  0000 0000 
00005F84  0000 0000 
00005F88  0000      
00005F8A  0000 0000 8772          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005F8E  0000 0000 
00005F92  0000 0000 
00005F96  0000 0000 
00005F9A  0000 0000 
00005F9E  0000      
00005FA0  0000 0000 8773          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005FA4  0000 0000 
00005FA8  0000 0000 
00005FAC  0000 0000 
00005FB0  0000 0000 
00005FB4  0000      
00005FB6  0000 0000 8774          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005FBA  0000 0000 
00005FBE  0000 0000 
00005FC2  0000 0000 
00005FC6  0000 0000 
00005FCA  0000      
00005FCC  0000 0000 8775          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005FD0  0000 0000 
00005FD4  0000 0000 
00005FD8  0000 0000 
00005FDC  0000 0000 
00005FE0  0000      
00005FE2  0000 0000 8776          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005FE6  0000 0000 
00005FEA  0000 0000 
00005FEE  0000 00   
                    8777   @itoa_1:
00005FF2  2D32 3134 8778          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005FF6  3734 3833 
00005FFA  3634 3800 
                    8779          section   bss
00005FFE            8780                   align
          0000 5FFE 8781   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8782   
                    8783   *********************************************************************************************************
                    8784   * Section for Uninitialised Data held in ROM as constants
                    8785   *********************************************************************************************************
                    8786   
0B000000            8787                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 8788   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8789   
                    8790   
0B000000            8791   bss             org       bss
                    8792   
                    8793   *********************************************************************************************************
                    8794   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8795   * install the exception handler using the C function InstallExceptionHandler()
                    8796   *********************************************************************************************************
                    8797   
                    8798   
                    8799   
0B000000            8800   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            8801   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            8802   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            8803   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            8804   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            8805   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            8806   VCheck           ds.l    1      ditto
0B00001C            8807   VTrapV           ds.l    1      ditto
0B000020            8808   VPrivilege       ds.l    1      ditto
0B000024            8809   VTrace           ds.l    1
0B000028            8810   VLine1010emul    ds.l    1
0B00002C            8811   VLine1111emul    ds.l    1
0B000030            8812   VUnassigned1     ds.l    1
0B000034            8813   VUnassigned2     ds.l    1
0B000038            8814   VUnassigned3     ds.l    1
0B00003C            8815   VUninit_IRQ      ds.l    1
0B000040            8816   VUnassigned4     ds.l    1
0B000044            8817   VUnassigned5     ds.l    1
0B000048            8818   VUnassigned6     ds.l    1
0B00004C            8819   VUnassigned7     ds.l    1
0B000050            8820   VUnassigned8     ds.l    1
0B000054            8821   VUnassigned9     ds.l    1
0B000058            8822   VUnassigned10    ds.l    1
0B00005C            8823   VUnassigned11    ds.l    1
0B000060            8824   VSpuriousIRQ     ds.l    1
                    8825   
                    8826   * Interrupt handlers Vector 25-31
0B000064            8827   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            8828   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            8829   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            8830   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            8831   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            8832   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            8833   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8834   
                    8835   * Trap Handler vectors 32-47
0B000080            8836   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            8837   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            8838   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            8839   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            8840   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            8841   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            8842   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            8843   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            8844   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            8845   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            8846   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            8847   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            8848   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            8849   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            8850   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            8851   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8852   
                    8853   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8854   
                    8855   ***********************************************************************************************************
                    8856   * Other Variables
                    8857   ***********************************************************************************************************
                    8858   *__DebugA5       ds.l    1
                    8859   *__UserA5        ds.l    1
                    8860   
                    8861   ***********************************************************************************************************
0B0000C0            8862   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            8863   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            8864   __heap:         ds.l    0       ; pointers for malloc functions
                    8865   
                    8866   *__himem:       ds.l    himem            ; highest memory location + 1
                    8867   *__stklen:      ds.l    stklen           ; default stack size
                    8868   
                    8869   *********************************************************************************************************
                    8870   * Section for Heap
                    8871   *********************************************************************************************************
                    8872   
                    8873   _i:
0B0000C4            8874          ds.b      4
                    8875   _x:
0B0000C8            8876          ds.b      4
                    8877   _y:
0B0000CC            8878          ds.b      4
                    8879   _z:
0B0000D0            8880          ds.b      4
                    8881   _PortA_Count:
0B0000D4            8882          ds.b      4
                    8883   _Trace:
0B0000D8            8884          ds.b      4
                    8885   _GoFlag:
0B0000DC            8886          ds.b      4
                    8887   _Echo:
0B0000E0            8888          ds.b      4
                    8889   _d0:
0B0000E4            8890          ds.b      4
                    8891   _d1:
0B0000E8            8892          ds.b      4
                    8893   _d2:
0B0000EC            8894          ds.b      4
                    8895   _d3:
0B0000F0            8896          ds.b      4
                    8897   _d4:
0B0000F4            8898          ds.b      4
                    8899   _d5:
0B0000F8            8900          ds.b      4
                    8901   _d6:
0B0000FC            8902          ds.b      4
                    8903   _d7:
0B000100            8904          ds.b      4
                    8905   _a0:
0B000104            8906          ds.b      4
                    8907   _a1:
0B000108            8908          ds.b      4
                    8909   _a2:
0B00010C            8910          ds.b      4
                    8911   _a3:
0B000110            8912          ds.b      4
                    8913   _a4:
0B000114            8914          ds.b      4
                    8915   _a5:
0B000118            8916          ds.b      4
                    8917   _a6:
0B00011C            8918          ds.b      4
                    8919   _PC:
0B000120            8920          ds.b      4
                    8921   _SSP:
0B000124            8922          ds.b      4
                    8923   _USP:
0B000128            8924          ds.b      4
                    8925   _SR:
0B00012C            8926          ds.b      2
                    8927   _BreakPointAddress:
0B00012E            8928          ds.b      32
                    8929   _BreakPointInstruction:
0B00014E            8930          ds.b      16
                    8931   _BreakPointSetOrCleared:
0B00015E            8932          ds.b      32
                    8933   _InstructionSize:
0B00017E            8934          ds.b      4
                    8935   _WatchPointAddress:
0B000182            8936          ds.b      32
                    8937   _WatchPointSetOrCleared:
0B0001A2            8938          ds.b      32
                    8939   _WatchPointString:
0B0001C2            8940          ds.b      800
                    8941   _TempString:
0B0004E2            8942          ds.b      100
                    8943   @vsscanf_buf:
0B000546            8944          ds.b      80
                    8945          section   heap
0B000596            8946                   align
          0B00 0596 8947   bssEnd          equ *                   end of storage space for unitialised variables
                    8948   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 8949   heap   equ       *
0B000596            8950                    align
          0000 0000

Assembly errors: 0
