680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 26 Feb 2025      Time: 00:43:58          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2B98      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2248      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3900      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  42D6      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  42DA      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  42F0      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  42F2      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3900      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2F44      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  42F4      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  432E      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  4346      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  434E      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  4354      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  42D6      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3900      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  4358      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  432E      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  436C      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  4382      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  4396      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3900      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  43C6      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  303E      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2E78      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2F44      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  43F6      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  441C      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3900      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  443E      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  445A      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  44A0      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  44B2      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  2FB0      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  44C4      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; // TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while (TestForSPITransmitDataComplete() == 0);
                    1614   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1615          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1616          tst.l     D0
00001122  6602      1617          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1621          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1622          rts
                    1623   ; }
                    1624   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1625   ; void ClearSPIReadFIFO(void) {
                    1626   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1627          link      A6,#-4
                    1628   ; volatile unsigned char dummy;
                    1629   ; while((SPI_Status & 0x01) == 0) {
                    1630   ClearSPIReadFIFO_1:
00001134  1039 0040 1631          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1632          and.b     #1,D0
0000113E  660A      1633          bne.s     ClearSPIReadFIFO_3
                    1634   ; dummy = SPI_Data;
00001140  1D79 0040 1635          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1636          bra       ClearSPIReadFIFO_1
                    1637   ClearSPIReadFIFO_3:
0000114A  4E5E      1638          unlk      A6
0000114C  4E75      1639          rts
                    1640   ; }
                    1641   ; }
                    1642   ; void SPIFlashPollStatusWLE(void) {
                    1643   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char status;
                    1646   ; unsigned char dummy;
                    1647   ; do {
                    1648   SPIFlashPollStatusWLE_1:
                    1649   ; // Start a new read status register command each time
                    1650   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1651          move.b    #254,4227112
00001156  0040 8028 
                    1652   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1653          pea       5
0000115E  4EB8 10C4 1654          jsr       _SPISafeWrite
00001162  584F      1655          addq.w    #4,A7
                    1656   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1657          pea       255
00001168  4EB8 10C4 1658          jsr       _SPISafeWrite
0000116C  584F      1659          addq.w    #4,A7
0000116E  1D40 FFFE 1660          move.b    D0,-2(A6)
                    1661   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1662          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1663          move.b    -2(A6),D0
0000117E  C03C 0002 1664          and.b     #2,D0
00001182  67CE      1665          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1666          unlk      A6
00001186  4E75      1667          rts
                    1668   ; // printf("\r\n WLE Status: %02x \n", status);
                    1669   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1670   ; }
                    1671   ; void SPIFlashPollStatusBusy(void) {
                    1672   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1673          link      A6,#-4
                    1674   ; unsigned char status;
                    1675   ; unsigned char dummy;
                    1676   ; do {
                    1677   SPIFlashPollStatusBusy_1:
                    1678   ; // Start a new read status register command each time
                    1679   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1680          move.b    #254,4227112
00001190  0040 8028 
                    1681   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1682          pea       5
00001198  4EB8 10C4 1683          jsr       _SPISafeWrite
0000119C  584F      1684          addq.w    #4,A7
                    1685   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1686          pea       255
000011A2  4EB8 10C4 1687          jsr       _SPISafeWrite
000011A6  584F      1688          addq.w    #4,A7
000011A8  1D40 FFFE 1689          move.b    D0,-2(A6)
                    1690   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1691          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1692          move.b    -2(A6),D0
000011B8  C03C 0001 1693          and.b     #1,D0
000011BC  66CE      1694          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1695          unlk      A6
000011C0  4E75      1696          rts
                    1697   ; // printf("\r\n Busy Status: %02x \n", status);
                    1698   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011C2  4E56 0000 1707          link      A6,#0
                    1708   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1709   ; // wait for completion of transmission
                    1710   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1711   ; // by reading fom the SPI controller Data Register.
                    1712   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1713   ; //
                    1714   ; // modify '0' below to return back read byte from data register
                    1715   ; //
                    1716   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1717          move.l    8(A6),D1
000011CA  C2BC 0000 1718          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1719          move.l    D1,-(A7)
000011D2  4EB8 10C4 1720          jsr       _SPISafeWrite
000011D6  584F      1721          addq.w    #4,A7
                    1722   ; return SPI_Data;
000011D8  1039 0040 1723          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1724          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1725          unlk      A6
000011E6  4E75      1726          rts
                    1727   ; }
                    1728   ; void SPIFlashWriteEnable() {
                    1729   _SPIFlashWriteEnable:
                    1730   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1731          move.b    #254,4227112
000011EC  0040 8028 
                    1732   ; SPISafeWrite(0x06);
000011F0  4878 0006 1733          pea       6
000011F4  4EB8 10C4 1734          jsr       _SPISafeWrite
000011F8  584F      1735          addq.w    #4,A7
                    1736   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1737          move.b    #255,4227112
000011FE  0040 8028 
                    1738   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1739   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1740          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1741          rts
                    1742   ; }
                    1743   ; void SPISendAddress(int c) {
                    1744   _SPISendAddress:
00001208  4E56 0000 1745          link      A6,#0
0000120C  48E7 2020 1746          movem.l   D2/A2,-(A7)
00001210  242E 0008 1747          move.l    8(A6),D2
00001214  45F8 10C4 1748          lea       _SPISafeWrite.L,A2
                    1749   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1750          move.l    D2,D1
0000121A  E081      1751          asr.l     #8,D1
0000121C  E081      1752          asr.l     #8,D1
0000121E  C2BC 0000 1753          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1754          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1755          move.l    D1,-(A7)
0000122C  4E92      1756          jsr       (A2)
0000122E  584F      1757          addq.w    #4,A7
                    1758   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1759          move.l    D2,D1
00001232  E081      1760          asr.l     #8,D1
00001234  C2BC 0000 1761          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1762          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1763          move.l    D1,-(A7)
00001242  4E92      1764          jsr       (A2)
00001244  584F      1765          addq.w    #4,A7
                    1766   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1767          move.l    D2,D1
00001248  C2BC 0000 1768          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1769          and.l     #255,D1
00001252  00FF      
00001254  2F01      1770          move.l    D1,-(A7)
00001256  4E92      1771          jsr       (A2)
00001258  584F      1772          addq.w    #4,A7
0000125A  4CDF 0404 1773          movem.l   (A7)+,D2/A2
0000125E  4E5E      1774          unlk      A6
00001260  4E75      1775          rts
                    1776   ; }
                    1777   ; void SPIFlashPageProgram(void) {
                    1778   _SPIFlashPageProgram:
00001262  2F02      1779          move.l    D2,-(A7)
                    1780   ; int i;
                    1781   ; SPI_CS = 0xFE;
00001264  13FC 00FE 1782          move.b    #254,4227112
00001268  0040 8028 
                    1783   ; // NOTE: We should make the below 1 function called SPIFlashWriteCommand() or smthn like that
                    1784   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000126C  4878 0002 1785          pea       2
00001270  4EB8 10C4 1786          jsr       _SPISafeWrite
00001274  584F      1787          addq.w    #4,A7
                    1788   ; SPISendAddress(0x0);
00001276  42A7      1789          clr.l     -(A7)
00001278  4EB8 1208 1790          jsr       _SPISendAddress
0000127C  584F      1791          addq.w    #4,A7
                    1792   ; for (i = 0; i < 256; i++) {
0000127E  4282      1793          clr.l     D2
                    1794   SPIFlashPageProgram_1:
00001280  0C82 0000 1795          cmp.l     #256,D2
00001284  0100      
00001286  6C1C      1796          bge.s     SPIFlashPageProgram_3
                    1797   ; WriteSPIChar(i); // Random value for testing purposes
00001288  2F02      1798          move.l    D2,-(A7)
0000128A  4EB8 11C2 1799          jsr       _WriteSPIChar
0000128E  584F      1800          addq.w    #4,A7
                    1801   ; printf("\r\nWrote Val: %08x", i);
00001290  2F02      1802          move.l    D2,-(A7)
00001292  4879 0000 1803          pea       @m68kde~1_22.L
00001296  44F8      
00001298  4EB9 0000 1804          jsr       _printf
0000129C  3900      
0000129E  504F      1805          addq.w    #8,A7
000012A0  5282      1806          addq.l    #1,D2
000012A2  60DC      1807          bra       SPIFlashPageProgram_1
                    1808   SPIFlashPageProgram_3:
                    1809   ; }
                    1810   ; // WriteSPIChar(0xAB); // Random value for testing purposes
                    1811   ; SPI_CS = 0xFF;
000012A4  13FC 00FF 1812          move.b    #255,4227112
000012A8  0040 8028 
                    1813   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1814   ; SPIFlashPollStatusBusy();
000012AC  4EB8 1188 1815          jsr       _SPIFlashPollStatusBusy
000012B0  241F      1816          move.l    (A7)+,D2
000012B2  4E75      1817          rts
                    1818   ; }
                    1819   ; void SPIFlashErase(void) {
                    1820   _SPIFlashErase:
                    1821   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1822   ; printf("\nErasing...\n");
000012B4  4879 0000 1823          pea       @m68kde~1_23.L
000012B8  450A      
000012BA  4EB9 0000 1824          jsr       _printf
000012BE  3900      
000012C0  584F      1825          addq.w    #4,A7
                    1826   ; SPI_CS = 0xFE;
000012C2  13FC 00FE 1827          move.b    #254,4227112
000012C6  0040 8028 
                    1828   ; SPISafeWrite(0xC7);
000012CA  4878 00C7 1829          pea       199
000012CE  4EB8 10C4 1830          jsr       _SPISafeWrite
000012D2  584F      1831          addq.w    #4,A7
                    1832   ; SPI_CS = 0xFF;
000012D4  13FC 00FF 1833          move.b    #255,4227112
000012D8  0040 8028 
                    1834   ; SPIFlashPollStatusBusy();
000012DC  4EB8 1188 1835          jsr       _SPIFlashPollStatusBusy
000012E0  4E75      1836          rts
                    1837   ; }
                    1838   ; int SPIFlashRead() {
                    1839   _SPIFlashRead:
000012E2  48E7 3000 1840          movem.l   D2/D3,-(A7)
                    1841   ; unsigned char readData;
                    1842   ; int i;
                    1843   ; ClearSPIReadFIFO();
000012E6  4EB8 1130 1844          jsr       _ClearSPIReadFIFO
                    1845   ; SPI_CS = 0xFE;
000012EA  13FC 00FE 1846          move.b    #254,4227112
000012EE  0040 8028 
                    1847   ; SPISafeWrite(0x03);
000012F2  4878 0003 1848          pea       3
000012F6  4EB8 10C4 1849          jsr       _SPISafeWrite
000012FA  584F      1850          addq.w    #4,A7
                    1851   ; SPISendAddress(0x0);
000012FC  42A7      1852          clr.l     -(A7)
000012FE  4EB8 1208 1853          jsr       _SPISendAddress
00001302  584F      1854          addq.w    #4,A7
                    1855   ; for (i = 0; i < 256; i++) {
00001304  4283      1856          clr.l     D3
                    1857   SPIFlashRead_1:
00001306  0C83 0000 1858          cmp.l     #256,D3
0000130A  0100      
0000130C  6C26      1859          bge.s     SPIFlashRead_3
                    1860   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
0000130E  4878 00FF 1861          pea       255
00001312  4EB8 10C4 1862          jsr       _SPISafeWrite
00001316  584F      1863          addq.w    #4,A7
00001318  1400      1864          move.b    D0,D2
                    1865   ; printf("\r\nRead Data: %08x", readData);
0000131A  C4BC 0000 1866          and.l     #255,D2
0000131E  00FF      
00001320  2F02      1867          move.l    D2,-(A7)
00001322  4879 0000 1868          pea       @m68kde~1_24.L
00001326  4518      
00001328  4EB9 0000 1869          jsr       _printf
0000132C  3900      
0000132E  504F      1870          addq.w    #8,A7
00001330  5283      1871          addq.l    #1,D3
00001332  60D2      1872          bra       SPIFlashRead_1
                    1873   SPIFlashRead_3:
                    1874   ; }
                    1875   ; SPI_CS = 0xFF;
00001334  13FC 00FF 1876          move.b    #255,4227112
00001338  0040 8028 
                    1877   ; SPIFlashPollStatusBusy();
0000133C  4EB8 1188 1878          jsr       _SPIFlashPollStatusBusy
                    1879   ; return readData;
00001340  C4BC 0000 1880          and.l     #255,D2
00001344  00FF      
00001346  2002      1881          move.l    D2,D0
00001348  4CDF 000C 1882          movem.l   (A7)+,D2/D3
0000134C  4E75      1883          rts
                    1884   ; }
                    1885   ; /*******************************************************************
                    1886   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1887   ; ********************************************************************/
                    1888   ; void ProgramFlashChip(void)
                    1889   ; {
                    1890   _ProgramFlashChip:
                    1891   ; //
                    1892   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1893   ; // TODO : then verify by reading it back and comparing to memory
                    1894   ; //
                    1895   ; SPIFlashPollStatusBusy();
0000134E  4EB8 1188 1896          jsr       _SPIFlashPollStatusBusy
                    1897   ; SPIFlashWriteEnable();
00001352  4EB8 11E8 1898          jsr       _SPIFlashWriteEnable
                    1899   ; SPIFlashErase();
00001356  4EB8 12B4 1900          jsr       _SPIFlashErase
                    1901   ; SPIFlashWriteEnable(); // NOTE: This is not asserting the WEL
0000135A  4EB8 11E8 1902          jsr       _SPIFlashWriteEnable
                    1903   ; SPIFlashPageProgram(); // we can modify the parameter later
0000135E  4EB8 1262 1904          jsr       _SPIFlashPageProgram
00001362  4E75      1905          rts
                    1906   ; // For now well test writing a byte of data
                    1907   ; // Then send h'02 as instruction into data register
                    1908   ; // Then send 24 bit flash address
                    1909   ; // Then atleast 1 data byte
                    1910   ; // If were sending multiple bytes / an entire page then the last (least significant) byte should be set to 0
                    1911   ; // We should poll for the flash chips status register to indicate when the write has been completed in the flash memory after we set CS back to high
                    1912   ; // Using read status register command
                    1913   ; }
                    1914   ; /*************************************************************************
                    1915   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1916   ; **************************************************************************/
                    1917   ; void LoadFromFlashChip(void)
                    1918   ; {
                    1919   _LoadFromFlashChip:
00001364  4E56 FFFC 1920          link      A6,#-4
                    1921   ; int readData;
                    1922   ; printf("\r\n Loading Program From SPI Flash....") ;
00001368  4879 0000 1923          pea       @m68kde~1_25.L
0000136C  452A      
0000136E  4EB9 0000 1924          jsr       _printf
00001372  3900      
00001374  584F      1925          addq.w    #4,A7
                    1926   ; SPIFlashPollStatusBusy();
00001376  4EB8 1188 1927          jsr       _SPIFlashPollStatusBusy
                    1928   ; readData = SPIFlashRead();
0000137A  4EB8 12E2 1929          jsr       _SPIFlashRead
0000137E  2D40 FFFC 1930          move.l    D0,-4(A6)
                    1931   ; printf("\r\n Read Data: %08x \n", readData);
00001382  2F2E FFFC 1932          move.l    -4(A6),-(A7)
00001386  4879 0000 1933          pea       @m68kde~1_26.L
0000138A  4550      
0000138C  4EB9 0000 1934          jsr       _printf
00001390  3900      
00001392  504F      1935          addq.w    #8,A7
00001394  4E5E      1936          unlk      A6
00001396  4E75      1937          rts
                    1938   ; // Reading single byte works
                    1939   ; // TODO: Read multi-byte and then read the entire program that we copied over to flash
                    1940   ; //
                    1941   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1942   ; //
                    1943   ; }
                    1944   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1945   ; // IMPORTANT
                    1946   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1947   ; // has to be done with an interrupt (IRQ Level 6)
                    1948   ; //
                    1949   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1950   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1951   ; //
                    1952   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1953   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1954   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1955   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1956   ; // program area
                    1957   ; //
                    1958   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1959   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1960   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1961   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1962   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1963   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1964   ; void DumpRegisters()
                    1965   ; {
                    1966   _DumpRegisters:
00001398  48E7 3F3C 1967          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000139C  45F9 0000 1968          lea       _putch.L,A2
000013A0  2F44      
000013A2  47F9 0000 1969          lea       _printf.L,A3
000013A6  3900      
000013A8  49F9 0B00 1970          lea       _SR.L,A4
000013AC  012C      
000013AE  4BF9 0B00 1971          lea       _WatchPointString.L,A5
000013B2  01C2      
                    1972   ; short i, x, j, k ;
                    1973   ; unsigned char c, *BytePointer;
                    1974   ; // buld up strings for displaying watchpoints
                    1975   ; for(x = 0; x < (short)(8); x++)
000013B4  4242      1976          clr.w     D2
                    1977   DumpRegisters_1:
000013B6  0C42 0008 1978          cmp.w     #8,D2
000013BA  6C00 01C6 1979          bge       DumpRegisters_3
                    1980   ; {
                    1981   ; if(WatchPointSetOrCleared[x] == 1)
000013BE  48C2      1982          ext.l     D2
000013C0  2002      1983          move.l    D2,D0
000013C2  E588      1984          lsl.l     #2,D0
000013C4  41F9 0B00 1985          lea       _WatchPointSetOrCleared.L,A0
000013C8  01A2      
000013CA  2030 0800 1986          move.l    0(A0,D0.L),D0
000013CE  0C80 0000 1987          cmp.l     #1,D0
000013D2  0001      
000013D4  6600 0186 1988          bne       DumpRegisters_4
                    1989   ; {
                    1990   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
000013D8  48C2      1991          ext.l     D2
000013DA  2202      1992          move.l    D2,D1
000013DC  E589      1993          lsl.l     #2,D1
000013DE  41F9 0B00 1994          lea       _WatchPointAddress.L,A0
000013E2  0182      
000013E4  2F30 1800 1995          move.l    0(A0,D1.L),-(A7)
000013E8  4879 0000 1996          pea       @m68kde~1_27.L
000013EC  4566      
000013EE  220D      1997          move.l    A5,D1
000013F0  48C2      1998          ext.l     D2
000013F2  2F00      1999          move.l    D0,-(A7)
000013F4  2002      2000          move.l    D2,D0
000013F6  C1FC 0064 2001          muls      #100,D0
000013FA  D280      2002          add.l     D0,D1
000013FC  201F      2003          move.l    (A7)+,D0
000013FE  2F01      2004          move.l    D1,-(A7)
00001400  4EB9 0000 2005          jsr       _sprintf
00001404  2FDC      
00001406  DEFC 000C 2006          add.w     #12,A7
                    2007   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000140A  48C2      2008          ext.l     D2
0000140C  2002      2009          move.l    D2,D0
0000140E  E588      2010          lsl.l     #2,D0
00001410  41F9 0B00 2011          lea       _WatchPointAddress.L,A0
00001414  0182      
00001416  2A30 0800 2012          move.l    0(A0,D0.L),D5
                    2013   ; for(j = 0; j < (short)(16); j+=2)
0000141A  4243      2014          clr.w     D3
                    2015   DumpRegisters_6:
0000141C  0C43 0010 2016          cmp.w     #16,D3
00001420  6C00 0082 2017          bge       DumpRegisters_8
                    2018   ; {
                    2019   ; for(k = 0; k < (short)(2); k++)
00001424  4246      2020          clr.w     D6
                    2021   DumpRegisters_9:
00001426  0C46 0002 2022          cmp.w     #2,D6
0000142A  6C00 0052 2023          bge       DumpRegisters_11
                    2024   ; {
                    2025   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000142E  2045      2026          move.l    D5,A0
00001430  48C3      2027          ext.l     D3
00001432  2203      2028          move.l    D3,D1
00001434  48C6      2029          ext.l     D6
00001436  D286      2030          add.l     D6,D1
00001438  1230 1800 2031          move.b    0(A0,D1.L),D1
0000143C  C2BC 0000 2032          and.l     #255,D1
00001440  00FF      
00001442  2F01      2033          move.l    D1,-(A7)
00001444  4879 0000 2034          pea       @m68kde~1_8.L
00001448  434E      
0000144A  4879 0B00 2035          pea       _TempString.L
0000144E  04E2      
00001450  4EB9 0000 2036          jsr       _sprintf
00001454  2FDC      
00001456  DEFC 000C 2037          add.w     #12,A7
                    2038   ; strcat(WatchPointString[x], TempString) ;
0000145A  4879 0B00 2039          pea       _TempString.L
0000145E  04E2      
00001460  220D      2040          move.l    A5,D1
00001462  48C2      2041          ext.l     D2
00001464  2F00      2042          move.l    D0,-(A7)
00001466  2002      2043          move.l    D2,D0
00001468  C1FC 0064 2044          muls      #100,D0
0000146C  D280      2045          add.l     D0,D1
0000146E  201F      2046          move.l    (A7)+,D0
00001470  2F01      2047          move.l    D1,-(A7)
00001472  4EB9 0000 2048          jsr       _strcat
00001476  3028      
00001478  504F      2049          addq.w    #8,A7
0000147A  5246      2050          addq.w    #1,D6
0000147C  60A8      2051          bra       DumpRegisters_9
                    2052   DumpRegisters_11:
                    2053   ; }
                    2054   ; strcat(WatchPointString[x]," ") ;
0000147E  4879 0000 2055          pea       @m68kde~1_28.L
00001482  456E      
00001484  220D      2056          move.l    A5,D1
00001486  48C2      2057          ext.l     D2
00001488  2F00      2058          move.l    D0,-(A7)
0000148A  2002      2059          move.l    D2,D0
0000148C  C1FC 0064 2060          muls      #100,D0
00001490  D280      2061          add.l     D0,D1
00001492  201F      2062          move.l    (A7)+,D0
00001494  2F01      2063          move.l    D1,-(A7)
00001496  4EB9 0000 2064          jsr       _strcat
0000149A  3028      
0000149C  504F      2065          addq.w    #8,A7
0000149E  5443      2066          addq.w    #2,D3
000014A0  6000 FF7A 2067          bra       DumpRegisters_6
                    2068   DumpRegisters_8:
                    2069   ; }
                    2070   ; strcat(WatchPointString[x], "  ") ;
000014A4  4879 0000 2071          pea       @m68kde~1_9.L
000014A8  4354      
000014AA  220D      2072          move.l    A5,D1
000014AC  48C2      2073          ext.l     D2
000014AE  2F00      2074          move.l    D0,-(A7)
000014B0  2002      2075          move.l    D2,D0
000014B2  C1FC 0064 2076          muls      #100,D0
000014B6  D280      2077          add.l     D0,D1
000014B8  201F      2078          move.l    (A7)+,D0
000014BA  2F01      2079          move.l    D1,-(A7)
000014BC  4EB9 0000 2080          jsr       _strcat
000014C0  3028      
000014C2  504F      2081          addq.w    #8,A7
                    2082   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000014C4  48C2      2083          ext.l     D2
000014C6  2002      2084          move.l    D2,D0
000014C8  E588      2085          lsl.l     #2,D0
000014CA  41F9 0B00 2086          lea       _WatchPointAddress.L,A0
000014CE  0182      
000014D0  2A30 0800 2087          move.l    0(A0,D0.L),D5
                    2088   ; for(j = 0; j < (short)(16); j++)
000014D4  4243      2089          clr.w     D3
                    2090   DumpRegisters_12:
000014D6  0C43 0010 2091          cmp.w     #16,D3
000014DA  6C00 007E 2092          bge       DumpRegisters_14
                    2093   ; {
                    2094   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014DE  2045      2095          move.l    D5,A0
000014E0  48C3      2096          ext.l     D3
000014E2  1030 3800 2097          move.b    0(A0,D3.L),D0
000014E6  C03C 007F 2098          and.b     #127,D0
000014EA  1E00      2099          move.b    D0,D7
                    2100   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014EC  0C07 007F 2101          cmp.b     #127,D7
000014F0  6206      2102          bhi.s     DumpRegisters_17
000014F2  0C07 0020 2103          cmp.b     #32,D7
000014F6  6416      2104          bhs.s     DumpRegisters_15
                    2105   DumpRegisters_17:
                    2106   ; sprintf(TempString, ".") ;
000014F8  4879 0000 2107          pea       @m68kde~1_29.L
000014FC  4570      
000014FE  4879 0B00 2108          pea       _TempString.L
00001502  04E2      
00001504  4EB9 0000 2109          jsr       _sprintf
00001508  2FDC      
0000150A  504F      2110          addq.w    #8,A7
0000150C  6026      2111          bra.s     DumpRegisters_16
                    2112   DumpRegisters_15:
                    2113   ; else
                    2114   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000150E  2045      2115          move.l    D5,A0
00001510  48C3      2116          ext.l     D3
00001512  1230 3800 2117          move.b    0(A0,D3.L),D1
00001516  C2BC 0000 2118          and.l     #255,D1
0000151A  00FF      
0000151C  2F01      2119          move.l    D1,-(A7)
0000151E  4879 0000 2120          pea       @m68kde~1_30.L
00001522  4572      
00001524  4879 0B00 2121          pea       _TempString.L
00001528  04E2      
0000152A  4EB9 0000 2122          jsr       _sprintf
0000152E  2FDC      
00001530  DEFC 000C 2123          add.w     #12,A7
                    2124   DumpRegisters_16:
                    2125   ; strcat(WatchPointString[x], TempString) ;
00001534  4879 0B00 2126          pea       _TempString.L
00001538  04E2      
0000153A  220D      2127          move.l    A5,D1
0000153C  48C2      2128          ext.l     D2
0000153E  2F00      2129          move.l    D0,-(A7)
00001540  2002      2130          move.l    D2,D0
00001542  C1FC 0064 2131          muls      #100,D0
00001546  D280      2132          add.l     D0,D1
00001548  201F      2133          move.l    (A7)+,D0
0000154A  2F01      2134          move.l    D1,-(A7)
0000154C  4EB9 0000 2135          jsr       _strcat
00001550  3028      
00001552  504F      2136          addq.w    #8,A7
00001554  5243      2137          addq.w    #1,D3
00001556  6000 FF7E 2138          bra       DumpRegisters_12
                    2139   DumpRegisters_14:
0000155A  6020      2140          bra.s     DumpRegisters_5
                    2141   DumpRegisters_4:
                    2142   ; }
                    2143   ; }
                    2144   ; else
                    2145   ; strcpy(WatchPointString[x], "") ;
0000155C  4879 0000 2146          pea       @m68kde~1_31.L
00001560  4576      
00001562  220D      2147          move.l    A5,D1
00001564  48C2      2148          ext.l     D2
00001566  2F00      2149          move.l    D0,-(A7)
00001568  2002      2150          move.l    D2,D0
0000156A  C1FC 0064 2151          muls      #100,D0
0000156E  D280      2152          add.l     D0,D1
00001570  201F      2153          move.l    (A7)+,D0
00001572  2F01      2154          move.l    D1,-(A7)
00001574  4EB9 0000 2155          jsr       _strcpy
00001578  2E56      
0000157A  504F      2156          addq.w    #8,A7
                    2157   DumpRegisters_5:
0000157C  5242      2158          addq.w    #1,D2
0000157E  6000 FE36 2159          bra       DumpRegisters_1
                    2160   DumpRegisters_3:
                    2161   ; }
                    2162   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001582  2F39 0B00 2163          move.l    _a0.L,-(A7)
00001586  0104      
00001588  2F39 0B00 2164          move.l    _d0.L,-(A7)
0000158C  00E4      
0000158E  4879 0000 2165          pea       @m68kde~1_32.L
00001592  4578      
00001594  4E93      2166          jsr       (A3)
00001596  DEFC 000C 2167          add.w     #12,A7
                    2168   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
0000159A  2F39 0B00 2169          move.l    _a1.L,-(A7)
0000159E  0108      
000015A0  2F39 0B00 2170          move.l    _d1.L,-(A7)
000015A4  00E8      
000015A6  4879 0000 2171          pea       @m68kde~1_33.L
000015AA  4594      
000015AC  4E93      2172          jsr       (A3)
000015AE  DEFC 000C 2173          add.w     #12,A7
                    2174   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000015B2  2F39 0B00 2175          move.l    _a2.L,-(A7)
000015B6  010C      
000015B8  2F39 0B00 2176          move.l    _d2.L,-(A7)
000015BC  00EC      
000015BE  4879 0000 2177          pea       @m68kde~1_34.L
000015C2  45AE      
000015C4  4E93      2178          jsr       (A3)
000015C6  DEFC 000C 2179          add.w     #12,A7
                    2180   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000015CA  2F39 0B00 2181          move.l    _a3.L,-(A7)
000015CE  0110      
000015D0  2F39 0B00 2182          move.l    _d3.L,-(A7)
000015D4  00F0      
000015D6  4879 0000 2183          pea       @m68kde~1_35.L
000015DA  45C8      
000015DC  4E93      2184          jsr       (A3)
000015DE  DEFC 000C 2185          add.w     #12,A7
                    2186   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015E2  2F39 0B00 2187          move.l    _a4.L,-(A7)
000015E6  0114      
000015E8  2F39 0B00 2188          move.l    _d4.L,-(A7)
000015EC  00F4      
000015EE  4879 0000 2189          pea       @m68kde~1_36.L
000015F2  45E2      
000015F4  4E93      2190          jsr       (A3)
000015F6  DEFC 000C 2191          add.w     #12,A7
                    2192   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015FA  2F39 0B00 2193          move.l    _a5.L,-(A7)
000015FE  0118      
00001600  2F39 0B00 2194          move.l    _d5.L,-(A7)
00001604  00F8      
00001606  4879 0000 2195          pea       @m68kde~1_37.L
0000160A  45FC      
0000160C  4E93      2196          jsr       (A3)
0000160E  DEFC 000C 2197          add.w     #12,A7
                    2198   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001612  2F39 0B00 2199          move.l    _a6.L,-(A7)
00001616  011C      
00001618  2F39 0B00 2200          move.l    _d6.L,-(A7)
0000161C  00FC      
0000161E  4879 0000 2201          pea       @m68kde~1_38.L
00001622  4616      
00001624  4E93      2202          jsr       (A3)
00001626  DEFC 000C 2203          add.w     #12,A7
                    2204   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
0000162A  3214      2205          move.w    (A4),D1
0000162C  C27C 2000 2206          and.w     #8192,D1
00001630  0C41 2000 2207          cmp.w     #8192,D1
00001634  6608      2208          bne.s     DumpRegisters_18
00001636  2239 0B00 2209          move.l    _SSP.L,D1
0000163A  0124      
0000163C  6006      2210          bra.s     DumpRegisters_19
                    2211   DumpRegisters_18:
0000163E  2239 0B00 2212          move.l    _USP.L,D1
00001642  0128      
                    2213   DumpRegisters_19:
00001644  2F01      2214          move.l    D1,-(A7)
00001646  2F39 0B00 2215          move.l    _d7.L,-(A7)
0000164A  0100      
0000164C  4879 0000 2216          pea       @m68kde~1_39.L
00001650  4630      
00001652  4E93      2217          jsr       (A3)
00001654  DEFC 000C 2218          add.w     #12,A7
                    2219   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001658  2F39 0B00 2220          move.l    _USP.L,-(A7)
0000165C  0128      
0000165E  4879 0000 2221          pea       @m68kde~1_40.L
00001662  464A      
00001664  4E93      2222          jsr       (A3)
00001666  504F      2223          addq.w    #8,A7
                    2224   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001668  2F39 0B00 2225          move.l    _SSP.L,-(A7)
0000166C  0124      
0000166E  4879 0000 2226          pea       @m68kde~1_41.L
00001672  4668      
00001674  4E93      2227          jsr       (A3)
00001676  504F      2228          addq.w    #8,A7
                    2229   ; printf("\r\n SR = $%04X   ",SR) ;
00001678  3214      2230          move.w    (A4),D1
0000167A  C2BC 0000 2231          and.l     #65535,D1
0000167E  FFFF      
00001680  2F01      2232          move.l    D1,-(A7)
00001682  4879 0000 2233          pea       @m68kde~1_42.L
00001686  468A      
00001688  4E93      2234          jsr       (A3)
0000168A  504F      2235          addq.w    #8,A7
                    2236   ; // display the status word in characters etc.
                    2237   ; printf("   [") ;
0000168C  4879 0000 2238          pea       @m68kde~1_43.L
00001690  469C      
00001692  4E93      2239          jsr       (A3)
00001694  584F      2240          addq.w    #4,A7
                    2241   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001696  3014      2242          move.w    (A4),D0
00001698  C07C 8000 2243          and.w     #32768,D0
0000169C  0C40 8000 2244          cmp.w     #32768,D0
000016A0  660A      2245          bne.s     DumpRegisters_20
000016A2  4878 0054 2246          pea       84
000016A6  4E92      2247          jsr       (A2)
000016A8  584F      2248          addq.w    #4,A7
000016AA  6008      2249          bra.s     DumpRegisters_21
                    2250   DumpRegisters_20:
000016AC  4878 002D 2251          pea       45
000016B0  4E92      2252          jsr       (A2)
000016B2  584F      2253          addq.w    #4,A7
                    2254   DumpRegisters_21:
                    2255   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000016B4  3014      2256          move.w    (A4),D0
000016B6  C07C 2000 2257          and.w     #8192,D0
000016BA  0C40 2000 2258          cmp.w     #8192,D0
000016BE  660A      2259          bne.s     DumpRegisters_22
000016C0  4878 0053 2260          pea       83
000016C4  4E92      2261          jsr       (A2)
000016C6  584F      2262          addq.w    #4,A7
000016C8  6008      2263          bra.s     DumpRegisters_23
                    2264   DumpRegisters_22:
000016CA  4878 0055 2265          pea       85
000016CE  4E92      2266          jsr       (A2)
000016D0  584F      2267          addq.w    #4,A7
                    2268   DumpRegisters_23:
                    2269   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000016D2  3014      2270          move.w    (A4),D0
000016D4  C07C 0400 2271          and.w     #1024,D0
000016D8  0C40 0400 2272          cmp.w     #1024,D0
000016DC  660A      2273          bne.s     DumpRegisters_24
000016DE  4878 0031 2274          pea       49
000016E2  4E92      2275          jsr       (A2)
000016E4  584F      2276          addq.w    #4,A7
000016E6  6008      2277          bra.s     DumpRegisters_25
                    2278   DumpRegisters_24:
000016E8  4878 0030 2279          pea       48
000016EC  4E92      2280          jsr       (A2)
000016EE  584F      2281          addq.w    #4,A7
                    2282   DumpRegisters_25:
                    2283   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016F0  3014      2284          move.w    (A4),D0
000016F2  C07C 0200 2285          and.w     #512,D0
000016F6  0C40 0200 2286          cmp.w     #512,D0
000016FA  660A      2287          bne.s     DumpRegisters_26
000016FC  4878 0031 2288          pea       49
00001700  4E92      2289          jsr       (A2)
00001702  584F      2290          addq.w    #4,A7
00001704  6008      2291          bra.s     DumpRegisters_27
                    2292   DumpRegisters_26:
00001706  4878 0030 2293          pea       48
0000170A  4E92      2294          jsr       (A2)
0000170C  584F      2295          addq.w    #4,A7
                    2296   DumpRegisters_27:
                    2297   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000170E  3014      2298          move.w    (A4),D0
00001710  C07C 0100 2299          and.w     #256,D0
00001714  0C40 0100 2300          cmp.w     #256,D0
00001718  660A      2301          bne.s     DumpRegisters_28
0000171A  4878 0031 2302          pea       49
0000171E  4E92      2303          jsr       (A2)
00001720  584F      2304          addq.w    #4,A7
00001722  6008      2305          bra.s     DumpRegisters_29
                    2306   DumpRegisters_28:
00001724  4878 0030 2307          pea       48
00001728  4E92      2308          jsr       (A2)
0000172A  584F      2309          addq.w    #4,A7
                    2310   DumpRegisters_29:
                    2311   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000172C  3014      2312          move.w    (A4),D0
0000172E  C07C 0010 2313          and.w     #16,D0
00001732  0C40 0010 2314          cmp.w     #16,D0
00001736  660A      2315          bne.s     DumpRegisters_30
00001738  4878 0058 2316          pea       88
0000173C  4E92      2317          jsr       (A2)
0000173E  584F      2318          addq.w    #4,A7
00001740  6008      2319          bra.s     DumpRegisters_31
                    2320   DumpRegisters_30:
00001742  4878 002D 2321          pea       45
00001746  4E92      2322          jsr       (A2)
00001748  584F      2323          addq.w    #4,A7
                    2324   DumpRegisters_31:
                    2325   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
0000174A  3014      2326          move.w    (A4),D0
0000174C  C07C 0008 2327          and.w     #8,D0
00001750  0C40 0008 2328          cmp.w     #8,D0
00001754  660A      2329          bne.s     DumpRegisters_32
00001756  4878 004E 2330          pea       78
0000175A  4E92      2331          jsr       (A2)
0000175C  584F      2332          addq.w    #4,A7
0000175E  6008      2333          bra.s     DumpRegisters_33
                    2334   DumpRegisters_32:
00001760  4878 002D 2335          pea       45
00001764  4E92      2336          jsr       (A2)
00001766  584F      2337          addq.w    #4,A7
                    2338   DumpRegisters_33:
                    2339   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001768  3014      2340          move.w    (A4),D0
0000176A  C07C 0004 2341          and.w     #4,D0
0000176E  0C40 0004 2342          cmp.w     #4,D0
00001772  660A      2343          bne.s     DumpRegisters_34
00001774  4878 005A 2344          pea       90
00001778  4E92      2345          jsr       (A2)
0000177A  584F      2346          addq.w    #4,A7
0000177C  6008      2347          bra.s     DumpRegisters_35
                    2348   DumpRegisters_34:
0000177E  4878 002D 2349          pea       45
00001782  4E92      2350          jsr       (A2)
00001784  584F      2351          addq.w    #4,A7
                    2352   DumpRegisters_35:
                    2353   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001786  3014      2354          move.w    (A4),D0
00001788  C07C 0002 2355          and.w     #2,D0
0000178C  0C40 0002 2356          cmp.w     #2,D0
00001790  660A      2357          bne.s     DumpRegisters_36
00001792  4878 0056 2358          pea       86
00001796  4E92      2359          jsr       (A2)
00001798  584F      2360          addq.w    #4,A7
0000179A  6008      2361          bra.s     DumpRegisters_37
                    2362   DumpRegisters_36:
0000179C  4878 002D 2363          pea       45
000017A0  4E92      2364          jsr       (A2)
000017A2  584F      2365          addq.w    #4,A7
                    2366   DumpRegisters_37:
                    2367   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000017A4  3014      2368          move.w    (A4),D0
000017A6  C07C 0001 2369          and.w     #1,D0
000017AA  0C40 0001 2370          cmp.w     #1,D0
000017AE  660A      2371          bne.s     DumpRegisters_38
000017B0  4878 0043 2372          pea       67
000017B4  4E92      2373          jsr       (A2)
000017B6  584F      2374          addq.w    #4,A7
000017B8  6008      2375          bra.s     DumpRegisters_39
                    2376   DumpRegisters_38:
000017BA  4878 002D 2377          pea       45
000017BE  4E92      2378          jsr       (A2)
000017C0  584F      2379          addq.w    #4,A7
                    2380   DumpRegisters_39:
                    2381   ; putchar(']') ;
000017C2  4878 005D 2382          pea       93
000017C6  4E92      2383          jsr       (A2)
000017C8  584F      2384          addq.w    #4,A7
                    2385   ; printf("\r\n PC = $%08X  ", PC) ;
000017CA  2F39 0B00 2386          move.l    _PC.L,-(A7)
000017CE  0120      
000017D0  4879 0000 2387          pea       @m68kde~1_44.L
000017D4  46A2      
000017D6  4E93      2388          jsr       (A3)
000017D8  504F      2389          addq.w    #8,A7
                    2390   ; if(*(unsigned short int *)(PC) == 0x4e4e)
000017DA  2039 0B00 2391          move.l    _PC.L,D0
000017DE  0120      
000017E0  2040      2392          move.l    D0,A0
000017E2  3010      2393          move.w    (A0),D0
000017E4  0C40 4E4E 2394          cmp.w     #20046,D0
000017E8  660A      2395          bne.s     DumpRegisters_40
                    2396   ; printf("[@ BREAKPOINT]") ;
000017EA  4879 0000 2397          pea       @m68kde~1_45.L
000017EE  46B2      
000017F0  4E93      2398          jsr       (A3)
000017F2  584F      2399          addq.w    #4,A7
                    2400   DumpRegisters_40:
                    2401   ; printf("\r\n") ;
000017F4  4879 0000 2402          pea       @m68kde~1_1.L
000017F8  42D6      
000017FA  4E93      2403          jsr       (A3)
000017FC  584F      2404          addq.w    #4,A7
                    2405   ; for(i=0; i < 8; i++)    {
000017FE  4244      2406          clr.w     D4
                    2407   DumpRegisters_42:
00001800  0C44 0008 2408          cmp.w     #8,D4
00001804  6C00 0040 2409          bge       DumpRegisters_44
                    2410   ; if(WatchPointSetOrCleared[i] == 1)
00001808  48C4      2411          ext.l     D4
0000180A  2004      2412          move.l    D4,D0
0000180C  E588      2413          lsl.l     #2,D0
0000180E  41F9 0B00 2414          lea       _WatchPointSetOrCleared.L,A0
00001812  01A2      
00001814  2030 0800 2415          move.l    0(A0,D0.L),D0
00001818  0C80 0000 2416          cmp.l     #1,D0
0000181C  0001      
0000181E  6622      2417          bne.s     DumpRegisters_45
                    2418   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001820  220D      2419          move.l    A5,D1
00001822  48C4      2420          ext.l     D4
00001824  2F00      2421          move.l    D0,-(A7)
00001826  2004      2422          move.l    D4,D0
00001828  C1FC 0064 2423          muls      #100,D0
0000182C  D280      2424          add.l     D0,D1
0000182E  201F      2425          move.l    (A7)+,D0
00001830  2F01      2426          move.l    D1,-(A7)
00001832  48C4      2427          ext.l     D4
00001834  2F04      2428          move.l    D4,-(A7)
00001836  4879 0000 2429          pea       @m68kde~1_46.L
0000183A  46C2      
0000183C  4E93      2430          jsr       (A3)
0000183E  DEFC 000C 2431          add.w     #12,A7
                    2432   DumpRegisters_45:
00001842  5244      2433          addq.w    #1,D4
00001844  60BA      2434          bra       DumpRegisters_42
                    2435   DumpRegisters_44:
00001846  4CDF 3CFC 2436          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000184A  4E75      2437          rts
                    2438   ; }
                    2439   ; }
                    2440   ; // Trace Exception Handler
                    2441   ; void DumpRegistersandPause(void)
                    2442   ; {
                    2443   _DumpRegistersandPause:
0000184C  2F0A      2444          move.l    A2,-(A7)
0000184E  45F9 0000 2445          lea       _printf.L,A2
00001852  3900      
                    2446   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001854  4879 0000 2447          pea       @m68kde~1_47.L
00001858  46CE      
0000185A  4E92      2448          jsr       (A2)
0000185C  584F      2449          addq.w    #4,A7
                    2450   ; printf("\r\nBreak Points :[Disabled]") ;
0000185E  4879 0000 2451          pea       @m68kde~1_48.L
00001862  46EE      
00001864  4E92      2452          jsr       (A2)
00001866  584F      2453          addq.w    #4,A7
                    2454   ; DumpRegisters() ;
00001868  4EB8 1398 2455          jsr       _DumpRegisters
                    2456   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000186C  4879 0000 2457          pea       @m68kde~1_49.L
00001870  470A      
00001872  4E92      2458          jsr       (A2)
00001874  584F      2459          addq.w    #4,A7
                    2460   ; printf("\r\nPress <ESC> to Resume Program") ;
00001876  4879 0000 2461          pea       @m68kde~1_50.L
0000187A  4736      
0000187C  4E92      2462          jsr       (A2)
0000187E  584F      2463          addq.w    #4,A7
                    2464   ; menu() ;
00001880  4EB9 0000 2465          jsr       _menu
00001884  2430      
00001886  245F      2466          move.l    (A7)+,A2
00001888  4E75      2467          rts
                    2468   ; }
                    2469   ; void ChangeRegisters(void)
                    2470   ; {
                    2471   _ChangeRegisters:
0000188A  4E56 FFFC 2472          link      A6,#-4
0000188E  48E7 303C 2473          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001892  45F9 0000 2474          lea       _printf.L,A2
00001896  3900      
00001898  47EE FFFC 2475          lea       -4(A6),A3
0000189C  49F8 0CA4 2476          lea       _Get8HexDigits.L,A4
000018A0  4BF8 0B68 2477          lea       __getch.L,A5
                    2478   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2479   ; int reg_val ;
                    2480   ; char c, reg[3] ;
                    2481   ; reg[0] = tolower(_getch()) ;
000018A4  2F00      2482          move.l    D0,-(A7)
000018A6  4E95      2483          jsr       (A5)
000018A8  2200      2484          move.l    D0,D1
000018AA  201F      2485          move.l    (A7)+,D0
000018AC  2F01      2486          move.l    D1,-(A7)
000018AE  4EB9 0000 2487          jsr       _tolower
000018B2  2FB0      
000018B4  584F      2488          addq.w    #4,A7
000018B6  1680      2489          move.b    D0,(A3)
                    2490   ; reg[1] = c = tolower(_getch()) ;
000018B8  2F00      2491          move.l    D0,-(A7)
000018BA  4E95      2492          jsr       (A5)
000018BC  2200      2493          move.l    D0,D1
000018BE  201F      2494          move.l    (A7)+,D0
000018C0  2F01      2495          move.l    D1,-(A7)
000018C2  4EB9 0000 2496          jsr       _tolower
000018C6  2FB0      
000018C8  584F      2497          addq.w    #4,A7
000018CA  1400      2498          move.b    D0,D2
000018CC  1740 0001 2499          move.b    D0,1(A3)
                    2500   ; if(reg[0] == (char)('d'))  {    // change data register
000018D0  1013      2501          move.b    (A3),D0
000018D2  0C00 0064 2502          cmp.b     #100,D0
000018D6  6600 00AE 2503          bne       ChangeRegisters_1
                    2504   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018DA  102B 0001 2505          move.b    1(A3),D0
000018DE  0C00 0037 2506          cmp.b     #55,D0
000018E2  6E0A      2507          bgt.s     ChangeRegisters_5
000018E4  102B 0001 2508          move.b    1(A3),D0
000018E8  0C00 0030 2509          cmp.b     #48,D0
000018EC  6C0E      2510          bge.s     ChangeRegisters_3
                    2511   ChangeRegisters_5:
                    2512   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018EE  4879 0000 2513          pea       @m68kde~1_51.L
000018F2  4756      
000018F4  4E92      2514          jsr       (A2)
000018F6  584F      2515          addq.w    #4,A7
                    2516   ; return ;
000018F8  6000 0244 2517          bra       ChangeRegisters_6
                    2518   ChangeRegisters_3:
                    2519   ; }
                    2520   ; else {
                    2521   ; printf("\r\nD%c = ", c) ;
000018FC  4882      2522          ext.w     D2
000018FE  48C2      2523          ext.l     D2
00001900  2F02      2524          move.l    D2,-(A7)
00001902  4879 0000 2525          pea       @m68kde~1_52.L
00001906  4782      
00001908  4E92      2526          jsr       (A2)
0000190A  504F      2527          addq.w    #8,A7
                    2528   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000190C  42A7      2529          clr.l     -(A7)
0000190E  4E94      2530          jsr       (A4)
00001910  584F      2531          addq.w    #4,A7
00001912  2600      2532          move.l    D0,D3
                    2533   ; }
                    2534   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2535   ; if(c == (char)('0'))
00001914  0C02 0030 2536          cmp.b     #48,D2
00001918  660A      2537          bne.s     ChangeRegisters_7
                    2538   ; d0 = reg_val ;
0000191A  23C3 0B00 2539          move.l    D3,_d0.L
0000191E  00E4      
00001920  6000 0060 2540          bra       ChangeRegisters_20
                    2541   ChangeRegisters_7:
                    2542   ; else if(c == (char)('1'))
00001924  0C02 0031 2543          cmp.b     #49,D2
00001928  660A      2544          bne.s     ChangeRegisters_9
                    2545   ; d1 = reg_val ;
0000192A  23C3 0B00 2546          move.l    D3,_d1.L
0000192E  00E8      
00001930  6000 0050 2547          bra       ChangeRegisters_20
                    2548   ChangeRegisters_9:
                    2549   ; else if(c == (char)('2'))
00001934  0C02 0032 2550          cmp.b     #50,D2
00001938  660A      2551          bne.s     ChangeRegisters_11
                    2552   ; d2 = reg_val ;
0000193A  23C3 0B00 2553          move.l    D3,_d2.L
0000193E  00EC      
00001940  6000 0040 2554          bra       ChangeRegisters_20
                    2555   ChangeRegisters_11:
                    2556   ; else if(c == (char)('3'))
00001944  0C02 0033 2557          cmp.b     #51,D2
00001948  6608      2558          bne.s     ChangeRegisters_13
                    2559   ; d3 = reg_val ;
0000194A  23C3 0B00 2560          move.l    D3,_d3.L
0000194E  00F0      
00001950  6030      2561          bra.s     ChangeRegisters_20
                    2562   ChangeRegisters_13:
                    2563   ; else if(c == (char)('4'))
00001952  0C02 0034 2564          cmp.b     #52,D2
00001956  6608      2565          bne.s     ChangeRegisters_15
                    2566   ; d4 = reg_val ;
00001958  23C3 0B00 2567          move.l    D3,_d4.L
0000195C  00F4      
0000195E  6022      2568          bra.s     ChangeRegisters_20
                    2569   ChangeRegisters_15:
                    2570   ; else if(c == (char)('5'))
00001960  0C02 0035 2571          cmp.b     #53,D2
00001964  6608      2572          bne.s     ChangeRegisters_17
                    2573   ; d5 = reg_val ;
00001966  23C3 0B00 2574          move.l    D3,_d5.L
0000196A  00F8      
0000196C  6014      2575          bra.s     ChangeRegisters_20
                    2576   ChangeRegisters_17:
                    2577   ; else if(c == (char)('6'))
0000196E  0C02 0036 2578          cmp.b     #54,D2
00001972  6608      2579          bne.s     ChangeRegisters_19
                    2580   ; d6 = reg_val ;
00001974  23C3 0B00 2581          move.l    D3,_d6.L
00001978  00FC      
0000197A  6006      2582          bra.s     ChangeRegisters_20
                    2583   ChangeRegisters_19:
                    2584   ; else
                    2585   ; d7 = reg_val ;
0000197C  23C3 0B00 2586          move.l    D3,_d7.L
00001980  0100      
                    2587   ChangeRegisters_20:
00001982  6000 01B6 2588          bra       ChangeRegisters_51
                    2589   ChangeRegisters_1:
                    2590   ; }
                    2591   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001986  1013      2592          move.b    (A3),D0
00001988  0C00 0061 2593          cmp.b     #97,D0
0000198C  6600 00A6 2594          bne       ChangeRegisters_21
                    2595   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001990  0C02 0037 2596          cmp.b     #55,D2
00001994  6E06      2597          bgt.s     ChangeRegisters_25
00001996  0C02 0030 2598          cmp.b     #48,D2
0000199A  6C0E      2599          bge.s     ChangeRegisters_23
                    2600   ChangeRegisters_25:
                    2601   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
0000199C  4879 0000 2602          pea       @m68kde~1_53.L
000019A0  478C      
000019A2  4E92      2603          jsr       (A2)
000019A4  584F      2604          addq.w    #4,A7
                    2605   ; return ;
000019A6  6000 0196 2606          bra       ChangeRegisters_6
                    2607   ChangeRegisters_23:
                    2608   ; }
                    2609   ; else {
                    2610   ; printf("\r\nA%c = ", c) ;
000019AA  4882      2611          ext.w     D2
000019AC  48C2      2612          ext.l     D2
000019AE  2F02      2613          move.l    D2,-(A7)
000019B0  4879 0000 2614          pea       @m68kde~1_54.L
000019B4  47BA      
000019B6  4E92      2615          jsr       (A2)
000019B8  504F      2616          addq.w    #8,A7
                    2617   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019BA  42A7      2618          clr.l     -(A7)
000019BC  4E94      2619          jsr       (A4)
000019BE  584F      2620          addq.w    #4,A7
000019C0  2600      2621          move.l    D0,D3
                    2622   ; }
                    2623   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2624   ; if(c == (char)('0'))
000019C2  0C02 0030 2625          cmp.b     #48,D2
000019C6  660A      2626          bne.s     ChangeRegisters_26
                    2627   ; a0 = reg_val ;
000019C8  23C3 0B00 2628          move.l    D3,_a0.L
000019CC  0104      
000019CE  6000 0060 2629          bra       ChangeRegisters_39
                    2630   ChangeRegisters_26:
                    2631   ; else if(c == (char)('1'))
000019D2  0C02 0031 2632          cmp.b     #49,D2
000019D6  660A      2633          bne.s     ChangeRegisters_28
                    2634   ; a1 = reg_val ;
000019D8  23C3 0B00 2635          move.l    D3,_a1.L
000019DC  0108      
000019DE  6000 0050 2636          bra       ChangeRegisters_39
                    2637   ChangeRegisters_28:
                    2638   ; else if(c == (char)('2'))
000019E2  0C02 0032 2639          cmp.b     #50,D2
000019E6  660A      2640          bne.s     ChangeRegisters_30
                    2641   ; a2 = reg_val ;
000019E8  23C3 0B00 2642          move.l    D3,_a2.L
000019EC  010C      
000019EE  6000 0040 2643          bra       ChangeRegisters_39
                    2644   ChangeRegisters_30:
                    2645   ; else if(c == (char)('3'))
000019F2  0C02 0033 2646          cmp.b     #51,D2
000019F6  6608      2647          bne.s     ChangeRegisters_32
                    2648   ; a3 = reg_val ;
000019F8  23C3 0B00 2649          move.l    D3,_a3.L
000019FC  0110      
000019FE  6030      2650          bra.s     ChangeRegisters_39
                    2651   ChangeRegisters_32:
                    2652   ; else if(c == (char)('4'))
00001A00  0C02 0034 2653          cmp.b     #52,D2
00001A04  6608      2654          bne.s     ChangeRegisters_34
                    2655   ; a4 = reg_val ;
00001A06  23C3 0B00 2656          move.l    D3,_a4.L
00001A0A  0114      
00001A0C  6022      2657          bra.s     ChangeRegisters_39
                    2658   ChangeRegisters_34:
                    2659   ; else if(c == (char)('5'))
00001A0E  0C02 0035 2660          cmp.b     #53,D2
00001A12  6608      2661          bne.s     ChangeRegisters_36
                    2662   ; a5 = reg_val ;
00001A14  23C3 0B00 2663          move.l    D3,_a5.L
00001A18  0118      
00001A1A  6014      2664          bra.s     ChangeRegisters_39
                    2665   ChangeRegisters_36:
                    2666   ; else if(c == (char)('6'))
00001A1C  0C02 0036 2667          cmp.b     #54,D2
00001A20  6608      2668          bne.s     ChangeRegisters_38
                    2669   ; a6 = reg_val ;
00001A22  23C3 0B00 2670          move.l    D3,_a6.L
00001A26  011C      
00001A28  6006      2671          bra.s     ChangeRegisters_39
                    2672   ChangeRegisters_38:
                    2673   ; else
                    2674   ; USP = reg_val ;
00001A2A  23C3 0B00 2675          move.l    D3,_USP.L
00001A2E  0128      
                    2676   ChangeRegisters_39:
00001A30  6000 0108 2677          bra       ChangeRegisters_51
                    2678   ChangeRegisters_21:
                    2679   ; }
                    2680   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A34  1013      2681          move.b    (A3),D0
00001A36  0C00 0075 2682          cmp.b     #117,D0
00001A3A  6600 004E 2683          bne       ChangeRegisters_40
00001A3E  0C02 0073 2684          cmp.b     #115,D2
00001A42  6600 0046 2685          bne       ChangeRegisters_40
                    2686   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A46  2F00      2687          move.l    D0,-(A7)
00001A48  4E95      2688          jsr       (A5)
00001A4A  2200      2689          move.l    D0,D1
00001A4C  201F      2690          move.l    (A7)+,D0
00001A4E  2F01      2691          move.l    D1,-(A7)
00001A50  4EB9 0000 2692          jsr       _tolower
00001A54  2FB0      
00001A56  584F      2693          addq.w    #4,A7
00001A58  0C80 0000 2694          cmp.l     #112,D0
00001A5C  0070      
00001A5E  6618      2695          bne.s     ChangeRegisters_42
                    2696   ; printf("\r\nUser SP = ") ;
00001A60  4879 0000 2697          pea       @m68kde~1_55.L
00001A64  47C4      
00001A66  4E92      2698          jsr       (A2)
00001A68  584F      2699          addq.w    #4,A7
                    2700   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A6A  42A7      2701          clr.l     -(A7)
00001A6C  4E94      2702          jsr       (A4)
00001A6E  584F      2703          addq.w    #4,A7
00001A70  23C0 0B00 2704          move.l    D0,_USP.L
00001A74  0128      
00001A76  600E      2705          bra.s     ChangeRegisters_43
                    2706   ChangeRegisters_42:
                    2707   ; }
                    2708   ; else {
                    2709   ; printf("\r\nIllegal Register....") ;
00001A78  4879 0000 2710          pea       @m68kde~1_56.L
00001A7C  47D2      
00001A7E  4E92      2711          jsr       (A2)
00001A80  584F      2712          addq.w    #4,A7
                    2713   ; return ;
00001A82  6000 00BA 2714          bra       ChangeRegisters_6
                    2715   ChangeRegisters_43:
00001A86  6000 00B2 2716          bra       ChangeRegisters_51
                    2717   ChangeRegisters_40:
                    2718   ; }
                    2719   ; }
                    2720   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A8A  1013      2721          move.b    (A3),D0
00001A8C  0C00 0073 2722          cmp.b     #115,D0
00001A90  6600 004E 2723          bne       ChangeRegisters_44
00001A94  0C02 0073 2724          cmp.b     #115,D2
00001A98  6600 0046 2725          bne       ChangeRegisters_44
                    2726   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A9C  2F00      2727          move.l    D0,-(A7)
00001A9E  4E95      2728          jsr       (A5)
00001AA0  2200      2729          move.l    D0,D1
00001AA2  201F      2730          move.l    (A7)+,D0
00001AA4  2F01      2731          move.l    D1,-(A7)
00001AA6  4EB9 0000 2732          jsr       _tolower
00001AAA  2FB0      
00001AAC  584F      2733          addq.w    #4,A7
00001AAE  0C80 0000 2734          cmp.l     #112,D0
00001AB2  0070      
00001AB4  6618      2735          bne.s     ChangeRegisters_46
                    2736   ; printf("\r\nSystem SP = ") ;
00001AB6  4879 0000 2737          pea       @m68kde~1_57.L
00001ABA  47EA      
00001ABC  4E92      2738          jsr       (A2)
00001ABE  584F      2739          addq.w    #4,A7
                    2740   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AC0  42A7      2741          clr.l     -(A7)
00001AC2  4E94      2742          jsr       (A4)
00001AC4  584F      2743          addq.w    #4,A7
00001AC6  23C0 0B00 2744          move.l    D0,_SSP.L
00001ACA  0124      
00001ACC  600E      2745          bra.s     ChangeRegisters_47
                    2746   ChangeRegisters_46:
                    2747   ; }
                    2748   ; else {
                    2749   ; printf("\r\nIllegal Register....") ;
00001ACE  4879 0000 2750          pea       @m68kde~1_56.L
00001AD2  47D2      
00001AD4  4E92      2751          jsr       (A2)
00001AD6  584F      2752          addq.w    #4,A7
                    2753   ; return ;
00001AD8  6000 0064 2754          bra       ChangeRegisters_6
                    2755   ChangeRegisters_47:
00001ADC  6000 005C 2756          bra       ChangeRegisters_51
                    2757   ChangeRegisters_44:
                    2758   ; }
                    2759   ; }
                    2760   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001AE0  1013      2761          move.b    (A3),D0
00001AE2  0C00 0070 2762          cmp.b     #112,D0
00001AE6  6620      2763          bne.s     ChangeRegisters_48
00001AE8  0C02 0063 2764          cmp.b     #99,D2
00001AEC  661A      2765          bne.s     ChangeRegisters_48
                    2766   ; printf("\r\nPC = ") ;
00001AEE  4879 0000 2767          pea       @m68kde~1_58.L
00001AF2  47FA      
00001AF4  4E92      2768          jsr       (A2)
00001AF6  584F      2769          addq.w    #4,A7
                    2770   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AF8  42A7      2771          clr.l     -(A7)
00001AFA  4E94      2772          jsr       (A4)
00001AFC  584F      2773          addq.w    #4,A7
00001AFE  23C0 0B00 2774          move.l    D0,_PC.L
00001B02  0120      
00001B04  6000 0034 2775          bra       ChangeRegisters_51
                    2776   ChangeRegisters_48:
                    2777   ; }
                    2778   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001B08  1013      2779          move.b    (A3),D0
00001B0A  0C00 0073 2780          cmp.b     #115,D0
00001B0E  6620      2781          bne.s     ChangeRegisters_50
00001B10  0C02 0072 2782          cmp.b     #114,D2
00001B14  661A      2783          bne.s     ChangeRegisters_50
                    2784   ; printf("\r\nSR = ") ;
00001B16  4879 0000 2785          pea       @m68kde~1_59.L
00001B1A  4802      
00001B1C  4E92      2786          jsr       (A2)
00001B1E  584F      2787          addq.w    #4,A7
                    2788   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B20  42A7      2789          clr.l     -(A7)
00001B22  4EB8 0C58 2790          jsr       _Get4HexDigits
00001B26  584F      2791          addq.w    #4,A7
00001B28  33C0 0B00 2792          move.w    D0,_SR.L
00001B2C  012C      
00001B2E  600A      2793          bra.s     ChangeRegisters_51
                    2794   ChangeRegisters_50:
                    2795   ; }
                    2796   ; else
                    2797   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B30  4879 0000 2798          pea       @m68kde~1_60.L
00001B34  480A      
00001B36  4E92      2799          jsr       (A2)
00001B38  584F      2800          addq.w    #4,A7
                    2801   ChangeRegisters_51:
                    2802   ; DumpRegisters() ;
00001B3A  4EB8 1398 2803          jsr       _DumpRegisters
                    2804   ChangeRegisters_6:
00001B3E  4CDF 3C0C 2805          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B42  4E5E      2806          unlk      A6
00001B44  4E75      2807          rts
                    2808   ; }
                    2809   ; void BreakPointDisplay(void)
                    2810   ; {
                    2811   _BreakPointDisplay:
00001B46  48E7 3030 2812          movem.l   D2/D3/A2/A3,-(A7)
00001B4A  45F9 0000 2813          lea       _printf.L,A2
00001B4E  3900      
00001B50  47F9 0B00 2814          lea       _BreakPointAddress.L,A3
00001B54  012E      
                    2815   ; int i, BreakPointsSet = 0 ;
00001B56  4283      2816          clr.l     D3
                    2817   ; // any break points  set
                    2818   ; for(i = 0; i < 8; i++)  {
00001B58  4282      2819          clr.l     D2
                    2820   BreakPointDisplay_1:
00001B5A  0C82 0000 2821          cmp.l     #8,D2
00001B5E  0008      
00001B60  6C1C      2822          bge.s     BreakPointDisplay_3
                    2823   ; if(BreakPointSetOrCleared[i] == 1)
00001B62  2002      2824          move.l    D2,D0
00001B64  E588      2825          lsl.l     #2,D0
00001B66  41F9 0B00 2826          lea       _BreakPointSetOrCleared.L,A0
00001B6A  015E      
00001B6C  2030 0800 2827          move.l    0(A0,D0.L),D0
00001B70  0C80 0000 2828          cmp.l     #1,D0
00001B74  0001      
00001B76  6602      2829          bne.s     BreakPointDisplay_4
                    2830   ; BreakPointsSet = 1;
00001B78  7601      2831          moveq     #1,D3
                    2832   BreakPointDisplay_4:
00001B7A  5282      2833          addq.l    #1,D2
00001B7C  60DC      2834          bra       BreakPointDisplay_1
                    2835   BreakPointDisplay_3:
                    2836   ; }
                    2837   ; if(BreakPointsSet == 1) {
00001B7E  0C83 0000 2838          cmp.l     #1,D3
00001B82  0001      
00001B84  6616      2839          bne.s     BreakPointDisplay_6
                    2840   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B86  4879 0000 2841          pea       @m68kde~1_61.L
00001B8A  4846      
00001B8C  4E92      2842          jsr       (A2)
00001B8E  584F      2843          addq.w    #4,A7
                    2844   ; printf("\r\n---     ---------    -----------") ;
00001B90  4879 0000 2845          pea       @m68kde~1_62.L
00001B94  486C      
00001B96  4E92      2846          jsr       (A2)
00001B98  584F      2847          addq.w    #4,A7
00001B9A  600A      2848          bra.s     BreakPointDisplay_7
                    2849   BreakPointDisplay_6:
                    2850   ; }
                    2851   ; else
                    2852   ; printf("\r\nNo BreakPoints Set") ;
00001B9C  4879 0000 2853          pea       @m68kde~1_63.L
00001BA0  4890      
00001BA2  4E92      2854          jsr       (A2)
00001BA4  584F      2855          addq.w    #4,A7
                    2856   BreakPointDisplay_7:
                    2857   ; for(i = 0; i < 8; i++)  {
00001BA6  4282      2858          clr.l     D2
                    2859   BreakPointDisplay_8:
00001BA8  0C82 0000 2860          cmp.l     #8,D2
00001BAC  0008      
00001BAE  6C00 005A 2861          bge       BreakPointDisplay_10
                    2862   ; // put opcode back, then put break point back
                    2863   ; if(BreakPointSetOrCleared[i] == 1)  {
00001BB2  2002      2864          move.l    D2,D0
00001BB4  E588      2865          lsl.l     #2,D0
00001BB6  41F9 0B00 2866          lea       _BreakPointSetOrCleared.L,A0
00001BBA  015E      
00001BBC  2030 0800 2867          move.l    0(A0,D0.L),D0
00001BC0  0C80 0000 2868          cmp.l     #1,D0
00001BC4  0001      
00001BC6  6600 003E 2869          bne       BreakPointDisplay_11
                    2870   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BCA  2002      2871          move.l    D2,D0
00001BCC  E388      2872          lsl.l     #1,D0
00001BCE  41F9 0B00 2873          lea       _BreakPointInstruction.L,A0
00001BD2  014E      
00001BD4  2202      2874          move.l    D2,D1
00001BD6  E589      2875          lsl.l     #2,D1
00001BD8  2233 1800 2876          move.l    0(A3,D1.L),D1
00001BDC  2241      2877          move.l    D1,A1
00001BDE  32B0 0800 2878          move.w    0(A0,D0.L),(A1)
                    2879   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BE2  2002      2880          move.l    D2,D0
00001BE4  E588      2881          lsl.l     #2,D0
00001BE6  2033 0800 2882          move.l    0(A3,D0.L),D0
00001BEA  2040      2883          move.l    D0,A0
00001BEC  30BC 4E4E 2884          move.w    #20046,(A0)
                    2885   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001BF0  2202      2886          move.l    D2,D1
00001BF2  E589      2887          lsl.l     #2,D1
00001BF4  2F33 1800 2888          move.l    0(A3,D1.L),-(A7)
00001BF8  2F02      2889          move.l    D2,-(A7)
00001BFA  4879 0000 2890          pea       @m68kde~1_64.L
00001BFE  48A6      
00001C00  4E92      2891          jsr       (A2)
00001C02  DEFC 000C 2892          add.w     #12,A7
                    2893   BreakPointDisplay_11:
00001C06  5282      2894          addq.l    #1,D2
00001C08  609E      2895          bra       BreakPointDisplay_8
                    2896   BreakPointDisplay_10:
                    2897   ; }
                    2898   ; }
                    2899   ; printf("\r\n") ;
00001C0A  4879 0000 2900          pea       @m68kde~1_1.L
00001C0E  42D6      
00001C10  4E92      2901          jsr       (A2)
00001C12  584F      2902          addq.w    #4,A7
00001C14  4CDF 0C0C 2903          movem.l   (A7)+,D2/D3/A2/A3
00001C18  4E75      2904          rts
                    2905   ; }
                    2906   ; void WatchPointDisplay(void)
                    2907   ; {
                    2908   _WatchPointDisplay:
00001C1A  48E7 3020 2909          movem.l   D2/D3/A2,-(A7)
00001C1E  45F9 0000 2910          lea       _printf.L,A2
00001C22  3900      
                    2911   ; int i ;
                    2912   ; int WatchPointsSet = 0 ;
00001C24  4283      2913          clr.l     D3
                    2914   ; // any watchpoints set
                    2915   ; for(i = 0; i < 8; i++)  {
00001C26  4282      2916          clr.l     D2
                    2917   WatchPointDisplay_1:
00001C28  0C82 0000 2918          cmp.l     #8,D2
00001C2C  0008      
00001C2E  6C1C      2919          bge.s     WatchPointDisplay_3
                    2920   ; if(WatchPointSetOrCleared[i] == 1)
00001C30  2002      2921          move.l    D2,D0
00001C32  E588      2922          lsl.l     #2,D0
00001C34  41F9 0B00 2923          lea       _WatchPointSetOrCleared.L,A0
00001C38  01A2      
00001C3A  2030 0800 2924          move.l    0(A0,D0.L),D0
00001C3E  0C80 0000 2925          cmp.l     #1,D0
00001C42  0001      
00001C44  6602      2926          bne.s     WatchPointDisplay_4
                    2927   ; WatchPointsSet = 1;
00001C46  7601      2928          moveq     #1,D3
                    2929   WatchPointDisplay_4:
00001C48  5282      2930          addq.l    #1,D2
00001C4A  60DC      2931          bra       WatchPointDisplay_1
                    2932   WatchPointDisplay_3:
                    2933   ; }
                    2934   ; if(WatchPointsSet == 1) {
00001C4C  0C83 0000 2935          cmp.l     #1,D3
00001C50  0001      
00001C52  6616      2936          bne.s     WatchPointDisplay_6
                    2937   ; printf("\r\nNum     Address") ;
00001C54  4879 0000 2938          pea       @m68kde~1_65.L
00001C58  48B6      
00001C5A  4E92      2939          jsr       (A2)
00001C5C  584F      2940          addq.w    #4,A7
                    2941   ; printf("\r\n---     ---------") ;
00001C5E  4879 0000 2942          pea       @m68kde~1_66.L
00001C62  48C8      
00001C64  4E92      2943          jsr       (A2)
00001C66  584F      2944          addq.w    #4,A7
00001C68  600A      2945          bra.s     WatchPointDisplay_7
                    2946   WatchPointDisplay_6:
                    2947   ; }
                    2948   ; else
                    2949   ; printf("\r\nNo WatchPoints Set") ;
00001C6A  4879 0000 2950          pea       @m68kde~1_67.L
00001C6E  48DC      
00001C70  4E92      2951          jsr       (A2)
00001C72  584F      2952          addq.w    #4,A7
                    2953   WatchPointDisplay_7:
                    2954   ; for(i = 0; i < 8; i++)  {
00001C74  4282      2955          clr.l     D2
                    2956   WatchPointDisplay_8:
00001C76  0C82 0000 2957          cmp.l     #8,D2
00001C7A  0008      
00001C7C  6C00 0038 2958          bge       WatchPointDisplay_10
                    2959   ; if(WatchPointSetOrCleared[i] == 1)
00001C80  2002      2960          move.l    D2,D0
00001C82  E588      2961          lsl.l     #2,D0
00001C84  41F9 0B00 2962          lea       _WatchPointSetOrCleared.L,A0
00001C88  01A2      
00001C8A  2030 0800 2963          move.l    0(A0,D0.L),D0
00001C8E  0C80 0000 2964          cmp.l     #1,D0
00001C92  0001      
00001C94  661C      2965          bne.s     WatchPointDisplay_11
                    2966   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001C96  2202      2967          move.l    D2,D1
00001C98  E589      2968          lsl.l     #2,D1
00001C9A  41F9 0B00 2969          lea       _WatchPointAddress.L,A0
00001C9E  0182      
00001CA0  2F30 1800 2970          move.l    0(A0,D1.L),-(A7)
00001CA4  2F02      2971          move.l    D2,-(A7)
00001CA6  4879 0000 2972          pea       @m68kde~1_64.L
00001CAA  48A6      
00001CAC  4E92      2973          jsr       (A2)
00001CAE  DEFC 000C 2974          add.w     #12,A7
                    2975   WatchPointDisplay_11:
00001CB2  5282      2976          addq.l    #1,D2
00001CB4  60C0      2977          bra       WatchPointDisplay_8
                    2978   WatchPointDisplay_10:
                    2979   ; }
                    2980   ; printf("\r\n") ;
00001CB6  4879 0000 2981          pea       @m68kde~1_1.L
00001CBA  42D6      
00001CBC  4E92      2982          jsr       (A2)
00001CBE  584F      2983          addq.w    #4,A7
00001CC0  4CDF 040C 2984          movem.l   (A7)+,D2/D3/A2
00001CC4  4E75      2985          rts
                    2986   ; }
                    2987   ; void BreakPointClear(void)
                    2988   ; {
                    2989   _BreakPointClear:
00001CC6  4E56 FFFC 2990          link      A6,#-4
00001CCA  48E7 2020 2991          movem.l   D2/A2,-(A7)
00001CCE  45F9 0000 2992          lea       _printf.L,A2
00001CD2  3900      
                    2993   ; unsigned int i ;
                    2994   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2995   ; BreakPointDisplay() ;
00001CD4  4EB8 1B46 2996          jsr       _BreakPointDisplay
                    2997   ; printf("\r\nEnter Break Point Number: ") ;
00001CD8  4879 0000 2998          pea       @m68kde~1_68.L
00001CDC  48F2      
00001CDE  4E92      2999          jsr       (A2)
00001CE0  584F      3000          addq.w    #4,A7
                    3001   ; i = xtod(_getch()) ;           // get break pointer number
00001CE2  2F00      3002          move.l    D0,-(A7)
00001CE4  4EB8 0B68 3003          jsr       __getch
00001CE8  2200      3004          move.l    D0,D1
00001CEA  201F      3005          move.l    (A7)+,D0
00001CEC  2F01      3006          move.l    D1,-(A7)
00001CEE  4EB8 0BD2 3007          jsr       _xtod
00001CF2  584F      3008          addq.w    #4,A7
00001CF4  C0BC 0000 3009          and.l     #255,D0
00001CF8  00FF      
00001CFA  2400      3010          move.l    D0,D2
                    3011   ; if((i < 0) || (i > 7))   {
00001CFC  0C82 0000 3012          cmp.l     #0,D2
00001D00  0000      
00001D02  6508      3013          blo.s     BreakPointClear_3
00001D04  0C82 0000 3014          cmp.l     #7,D2
00001D08  0007      
00001D0A  630E      3015          bls.s     BreakPointClear_1
                    3016   BreakPointClear_3:
                    3017   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D0C  4879 0000 3018          pea       @m68kde~1_69.L
00001D10  4910      
00001D12  4E92      3019          jsr       (A2)
00001D14  584F      3020          addq.w    #4,A7
                    3021   ; return ;
00001D16  6000 0080 3022          bra       BreakPointClear_4
                    3023   BreakPointClear_1:
                    3024   ; }
                    3025   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D1A  2002      3026          move.l    D2,D0
00001D1C  E588      3027          lsl.l     #2,D0
00001D1E  41F9 0B00 3028          lea       _BreakPointSetOrCleared.L,A0
00001D22  015E      
00001D24  2030 0800 3029          move.l    0(A0,D0.L),D0
00001D28  0C80 0000 3030          cmp.l     #1,D0
00001D2C  0001      
00001D2E  6600 005A 3031          bne       BreakPointClear_5
                    3032   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D32  2002      3033          move.l    D2,D0
00001D34  E588      3034          lsl.l     #2,D0
00001D36  41F9 0B00 3035          lea       _BreakPointAddress.L,A0
00001D3A  012E      
00001D3C  2D70 0800 3036          move.l    0(A0,D0.L),-4(A6)
00001D40  FFFC      
                    3037   ; BreakPointAddress[i] = 0 ;
00001D42  2002      3038          move.l    D2,D0
00001D44  E588      3039          lsl.l     #2,D0
00001D46  41F9 0B00 3040          lea       _BreakPointAddress.L,A0
00001D4A  012E      
00001D4C  42B0 0800 3041          clr.l     0(A0,D0.L)
                    3042   ; BreakPointSetOrCleared[i] = 0 ;
00001D50  2002      3043          move.l    D2,D0
00001D52  E588      3044          lsl.l     #2,D0
00001D54  41F9 0B00 3045          lea       _BreakPointSetOrCleared.L,A0
00001D58  015E      
00001D5A  42B0 0800 3046          clr.l     0(A0,D0.L)
                    3047   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D5E  2002      3048          move.l    D2,D0
00001D60  E388      3049          lsl.l     #1,D0
00001D62  41F9 0B00 3050          lea       _BreakPointInstruction.L,A0
00001D66  014E      
00001D68  226E FFFC 3051          move.l    -4(A6),A1
00001D6C  32B0 0800 3052          move.w    0(A0,D0.L),(A1)
                    3053   ; BreakPointInstruction[i] = 0 ;
00001D70  2002      3054          move.l    D2,D0
00001D72  E388      3055          lsl.l     #1,D0
00001D74  41F9 0B00 3056          lea       _BreakPointInstruction.L,A0
00001D78  014E      
00001D7A  4270 0800 3057          clr.w     0(A0,D0.L)
                    3058   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001D7E  4879 0000 3059          pea       @m68kde~1_70.L
00001D82  492C      
00001D84  4E92      3060          jsr       (A2)
00001D86  584F      3061          addq.w    #4,A7
00001D88  600A      3062          bra.s     BreakPointClear_6
                    3063   BreakPointClear_5:
                    3064   ; }
                    3065   ; else
                    3066   ; printf("\r\nBreak Point wasn't Set.....") ;
00001D8A  4879 0000 3067          pea       @m68kde~1_71.L
00001D8E  494A      
00001D90  4E92      3068          jsr       (A2)
00001D92  584F      3069          addq.w    #4,A7
                    3070   BreakPointClear_6:
                    3071   ; BreakPointDisplay() ;
00001D94  4EB8 1B46 3072          jsr       _BreakPointDisplay
                    3073   ; return ;
                    3074   BreakPointClear_4:
00001D98  4CDF 0404 3075          movem.l   (A7)+,D2/A2
00001D9C  4E5E      3076          unlk      A6
00001D9E  4E75      3077          rts
                    3078   ; }
                    3079   ; void WatchPointClear(void)
                    3080   ; {
                    3081   _WatchPointClear:
00001DA0  48E7 2020 3082          movem.l   D2/A2,-(A7)
00001DA4  45F9 0000 3083          lea       _printf.L,A2
00001DA8  3900      
                    3084   ; unsigned int i ;
                    3085   ; WatchPointDisplay() ;
00001DAA  4EB8 1C1A 3086          jsr       _WatchPointDisplay
                    3087   ; printf("\r\nEnter Watch Point Number: ") ;
00001DAE  4879 0000 3088          pea       @m68kde~1_72.L
00001DB2  4968      
00001DB4  4E92      3089          jsr       (A2)
00001DB6  584F      3090          addq.w    #4,A7
                    3091   ; i = xtod(_getch()) ;           // get watch pointer number
00001DB8  2F00      3092          move.l    D0,-(A7)
00001DBA  4EB8 0B68 3093          jsr       __getch
00001DBE  2200      3094          move.l    D0,D1
00001DC0  201F      3095          move.l    (A7)+,D0
00001DC2  2F01      3096          move.l    D1,-(A7)
00001DC4  4EB8 0BD2 3097          jsr       _xtod
00001DC8  584F      3098          addq.w    #4,A7
00001DCA  C0BC 0000 3099          and.l     #255,D0
00001DCE  00FF      
00001DD0  2400      3100          move.l    D0,D2
                    3101   ; if((i < 0) || (i > 7))   {
00001DD2  0C82 0000 3102          cmp.l     #0,D2
00001DD6  0000      
00001DD8  6508      3103          blo.s     WatchPointClear_3
00001DDA  0C82 0000 3104          cmp.l     #7,D2
00001DDE  0007      
00001DE0  630E      3105          bls.s     WatchPointClear_1
                    3106   WatchPointClear_3:
                    3107   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001DE2  4879 0000 3108          pea       @m68kde~1_69.L
00001DE6  4910      
00001DE8  4E92      3109          jsr       (A2)
00001DEA  584F      3110          addq.w    #4,A7
                    3111   ; return ;
00001DEC  6000 004E 3112          bra       WatchPointClear_4
                    3113   WatchPointClear_1:
                    3114   ; }
                    3115   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001DF0  2002      3116          move.l    D2,D0
00001DF2  E588      3117          lsl.l     #2,D0
00001DF4  41F9 0B00 3118          lea       _WatchPointSetOrCleared.L,A0
00001DF8  01A2      
00001DFA  2030 0800 3119          move.l    0(A0,D0.L),D0
00001DFE  0C80 0000 3120          cmp.l     #1,D0
00001E02  0001      
00001E04  6628      3121          bne.s     WatchPointClear_5
                    3122   ; WatchPointAddress[i] = 0 ;
00001E06  2002      3123          move.l    D2,D0
00001E08  E588      3124          lsl.l     #2,D0
00001E0A  41F9 0B00 3125          lea       _WatchPointAddress.L,A0
00001E0E  0182      
00001E10  42B0 0800 3126          clr.l     0(A0,D0.L)
                    3127   ; WatchPointSetOrCleared[i] = 0 ;
00001E14  2002      3128          move.l    D2,D0
00001E16  E588      3129          lsl.l     #2,D0
00001E18  41F9 0B00 3130          lea       _WatchPointSetOrCleared.L,A0
00001E1C  01A2      
00001E1E  42B0 0800 3131          clr.l     0(A0,D0.L)
                    3132   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E22  4879 0000 3133          pea       @m68kde~1_73.L
00001E26  4986      
00001E28  4E92      3134          jsr       (A2)
00001E2A  584F      3135          addq.w    #4,A7
00001E2C  600A      3136          bra.s     WatchPointClear_6
                    3137   WatchPointClear_5:
                    3138   ; }
                    3139   ; else
                    3140   ; printf("\r\nWatch Point Was not Set.....") ;
00001E2E  4879 0000 3141          pea       @m68kde~1_74.L
00001E32  49A4      
00001E34  4E92      3142          jsr       (A2)
00001E36  584F      3143          addq.w    #4,A7
                    3144   WatchPointClear_6:
                    3145   ; WatchPointDisplay() ;
00001E38  4EB8 1C1A 3146          jsr       _WatchPointDisplay
                    3147   ; return ;
                    3148   WatchPointClear_4:
00001E3C  4CDF 0404 3149          movem.l   (A7)+,D2/A2
00001E40  4E75      3150          rts
                    3151   ; }
                    3152   ; void DisableBreakPoints(void)
                    3153   ; {
                    3154   _DisableBreakPoints:
00001E42  4E56 FFFC 3155          link      A6,#-4
00001E46  2F02      3156          move.l    D2,-(A7)
                    3157   ; int i ;
                    3158   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3159   ; for(i = 0; i < 8; i++)  {
00001E48  4282      3160          clr.l     D2
                    3161   DisableBreakPoints_1:
00001E4A  0C82 0000 3162          cmp.l     #8,D2
00001E4E  0008      
00001E50  6C00 003E 3163          bge       DisableBreakPoints_3
                    3164   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E54  2002      3165          move.l    D2,D0
00001E56  E588      3166          lsl.l     #2,D0
00001E58  41F9 0B00 3167          lea       _BreakPointSetOrCleared.L,A0
00001E5C  015E      
00001E5E  2030 0800 3168          move.l    0(A0,D0.L),D0
00001E62  0C80 0000 3169          cmp.l     #1,D0
00001E66  0001      
00001E68  6622      3170          bne.s     DisableBreakPoints_4
                    3171   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E6A  2002      3172          move.l    D2,D0
00001E6C  E588      3173          lsl.l     #2,D0
00001E6E  41F9 0B00 3174          lea       _BreakPointAddress.L,A0
00001E72  012E      
00001E74  2D70 0800 3175          move.l    0(A0,D0.L),-4(A6)
00001E78  FFFC      
                    3176   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E7A  2002      3177          move.l    D2,D0
00001E7C  E388      3178          lsl.l     #1,D0
00001E7E  41F9 0B00 3179          lea       _BreakPointInstruction.L,A0
00001E82  014E      
00001E84  226E FFFC 3180          move.l    -4(A6),A1
00001E88  32B0 0800 3181          move.w    0(A0,D0.L),(A1)
                    3182   DisableBreakPoints_4:
00001E8C  5282      3183          addq.l    #1,D2
00001E8E  60BA      3184          bra       DisableBreakPoints_1
                    3185   DisableBreakPoints_3:
00001E90  241F      3186          move.l    (A7)+,D2
00001E92  4E5E      3187          unlk      A6
00001E94  4E75      3188          rts
                    3189   ; }
                    3190   ; }
                    3191   ; }
                    3192   ; void EnableBreakPoints(void)
                    3193   ; {
                    3194   _EnableBreakPoints:
00001E96  4E56 FFFC 3195          link      A6,#-4
00001E9A  2F02      3196          move.l    D2,-(A7)
                    3197   ; int i ;
                    3198   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3199   ; for(i = 0; i < 8; i++)  {
00001E9C  4282      3200          clr.l     D2
                    3201   EnableBreakPoints_1:
00001E9E  0C82 0000 3202          cmp.l     #8,D2
00001EA2  0008      
00001EA4  6C32      3203          bge.s     EnableBreakPoints_3
                    3204   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001EA6  2002      3205          move.l    D2,D0
00001EA8  E588      3206          lsl.l     #2,D0
00001EAA  41F9 0B00 3207          lea       _BreakPointSetOrCleared.L,A0
00001EAE  015E      
00001EB0  2030 0800 3208          move.l    0(A0,D0.L),D0
00001EB4  0C80 0000 3209          cmp.l     #1,D0
00001EB8  0001      
00001EBA  6618      3210          bne.s     EnableBreakPoints_4
                    3211   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001EBC  2002      3212          move.l    D2,D0
00001EBE  E588      3213          lsl.l     #2,D0
00001EC0  41F9 0B00 3214          lea       _BreakPointAddress.L,A0
00001EC4  012E      
00001EC6  2D70 0800 3215          move.l    0(A0,D0.L),-4(A6)
00001ECA  FFFC      
                    3216   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001ECC  206E FFFC 3217          move.l    -4(A6),A0
00001ED0  30BC 4E4E 3218          move.w    #20046,(A0)
                    3219   EnableBreakPoints_4:
00001ED4  5282      3220          addq.l    #1,D2
00001ED6  60C6      3221          bra       EnableBreakPoints_1
                    3222   EnableBreakPoints_3:
00001ED8  241F      3223          move.l    (A7)+,D2
00001EDA  4E5E      3224          unlk      A6
00001EDC  4E75      3225          rts
                    3226   ; }
                    3227   ; }
                    3228   ; }
                    3229   ; void KillAllBreakPoints(void)
                    3230   ; {
                    3231   _KillAllBreakPoints:
00001EDE  4E56 FFFC 3232          link      A6,#-4
00001EE2  2F02      3233          move.l    D2,-(A7)
                    3234   ; int i ;
                    3235   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3236   ; for(i = 0; i < 8; i++)  {
00001EE4  4282      3237          clr.l     D2
                    3238   KillAllBreakPoints_1:
00001EE6  0C82 0000 3239          cmp.l     #8,D2
00001EEA  0008      
00001EEC  6C00 0052 3240          bge       KillAllBreakPoints_3
                    3241   ; // clear BP
                    3242   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001EF0  2002      3243          move.l    D2,D0
00001EF2  E588      3244          lsl.l     #2,D0
00001EF4  41F9 0B00 3245          lea       _BreakPointAddress.L,A0
00001EF8  012E      
00001EFA  2D70 0800 3246          move.l    0(A0,D0.L),-4(A6)
00001EFE  FFFC      
                    3247   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F00  2002      3248          move.l    D2,D0
00001F02  E388      3249          lsl.l     #1,D0
00001F04  41F9 0B00 3250          lea       _BreakPointInstruction.L,A0
00001F08  014E      
00001F0A  226E FFFC 3251          move.l    -4(A6),A1
00001F0E  32B0 0800 3252          move.w    0(A0,D0.L),(A1)
                    3253   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F12  2002      3254          move.l    D2,D0
00001F14  E588      3255          lsl.l     #2,D0
00001F16  41F9 0B00 3256          lea       _BreakPointAddress.L,A0
00001F1A  012E      
00001F1C  42B0 0800 3257          clr.l     0(A0,D0.L)
                    3258   ; BreakPointInstruction[i] = 0 ;
00001F20  2002      3259          move.l    D2,D0
00001F22  E388      3260          lsl.l     #1,D0
00001F24  41F9 0B00 3261          lea       _BreakPointInstruction.L,A0
00001F28  014E      
00001F2A  4270 0800 3262          clr.w     0(A0,D0.L)
                    3263   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F2E  2002      3264          move.l    D2,D0
00001F30  E588      3265          lsl.l     #2,D0
00001F32  41F9 0B00 3266          lea       _BreakPointSetOrCleared.L,A0
00001F36  015E      
00001F38  42B0 0800 3267          clr.l     0(A0,D0.L)
00001F3C  5282      3268          addq.l    #1,D2
00001F3E  60A6      3269          bra       KillAllBreakPoints_1
                    3270   KillAllBreakPoints_3:
00001F40  241F      3271          move.l    (A7)+,D2
00001F42  4E5E      3272          unlk      A6
00001F44  4E75      3273          rts
                    3274   ; }
                    3275   ; //BreakPointDisplay() ;       // display the break points
                    3276   ; }
                    3277   ; void KillAllWatchPoints(void)
                    3278   ; {
                    3279   _KillAllWatchPoints:
00001F46  2F02      3280          move.l    D2,-(A7)
                    3281   ; int i ;
                    3282   ; for(i = 0; i < 8; i++)  {
00001F48  4282      3283          clr.l     D2
                    3284   KillAllWatchPoints_1:
00001F4A  0C82 0000 3285          cmp.l     #8,D2
00001F4E  0008      
00001F50  6C20      3286          bge.s     KillAllWatchPoints_3
                    3287   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F52  2002      3288          move.l    D2,D0
00001F54  E588      3289          lsl.l     #2,D0
00001F56  41F9 0B00 3290          lea       _WatchPointAddress.L,A0
00001F5A  0182      
00001F5C  42B0 0800 3291          clr.l     0(A0,D0.L)
                    3292   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F60  2002      3293          move.l    D2,D0
00001F62  E588      3294          lsl.l     #2,D0
00001F64  41F9 0B00 3295          lea       _WatchPointSetOrCleared.L,A0
00001F68  01A2      
00001F6A  42B0 0800 3296          clr.l     0(A0,D0.L)
00001F6E  5282      3297          addq.l    #1,D2
00001F70  60D8      3298          bra       KillAllWatchPoints_1
                    3299   KillAllWatchPoints_3:
00001F72  241F      3300          move.l    (A7)+,D2
00001F74  4E75      3301          rts
                    3302   ; }
                    3303   ; //WatchPointDisplay() ;       // display the break points
                    3304   ; }
                    3305   ; void SetBreakPoint(void)
                    3306   ; {
                    3307   _SetBreakPoint:
00001F76  4E56 FFFC 3308          link      A6,#-4
00001F7A  48E7 3830 3309          movem.l   D2/D3/D4/A2/A3,-(A7)
00001F7E  45F9 0000 3310          lea       _printf.L,A2
00001F82  3900      
00001F84  47F9 0B00 3311          lea       _BreakPointSetOrCleared.L,A3
00001F88  015E      
                    3312   ; int i ;
                    3313   ; int BPNumber;
                    3314   ; int BPAddress;
                    3315   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3316   ; // see if any free break points
                    3317   ; for(i = 0; i < 8; i ++) {
00001F8A  4282      3318          clr.l     D2
                    3319   SetBreakPoint_1:
00001F8C  0C82 0000 3320          cmp.l     #8,D2
00001F90  0008      
00001F92  6C10      3321          bge.s     SetBreakPoint_3
                    3322   ; if( BreakPointSetOrCleared[i] == 0)
00001F94  2002      3323          move.l    D2,D0
00001F96  E588      3324          lsl.l     #2,D0
00001F98  2033 0800 3325          move.l    0(A3,D0.L),D0
00001F9C  6602      3326          bne.s     SetBreakPoint_4
                    3327   ; break ;         // if spare BP found allow user to set it
00001F9E  6004      3328          bra.s     SetBreakPoint_3
                    3329   SetBreakPoint_4:
00001FA0  5282      3330          addq.l    #1,D2
00001FA2  60E8      3331          bra       SetBreakPoint_1
                    3332   SetBreakPoint_3:
                    3333   ; }
                    3334   ; if(i == 8) {
00001FA4  0C82 0000 3335          cmp.l     #8,D2
00001FA8  0008      
00001FAA  660E      3336          bne.s     SetBreakPoint_6
                    3337   ; printf("\r\nNo FREE Break Points.....") ;
00001FAC  4879 0000 3338          pea       @m68kde~1_75.L
00001FB0  49C4      
00001FB2  4E92      3339          jsr       (A2)
00001FB4  584F      3340          addq.w    #4,A7
                    3341   ; return ;
00001FB6  6000 00D6 3342          bra       SetBreakPoint_15
                    3343   SetBreakPoint_6:
                    3344   ; }
                    3345   ; printf("\r\nBreak Point Address: ") ;
00001FBA  4879 0000 3346          pea       @m68kde~1_76.L
00001FBE  49E0      
00001FC0  4E92      3347          jsr       (A2)
00001FC2  584F      3348          addq.w    #4,A7
                    3349   ; BPAddress = Get8HexDigits(0) ;
00001FC4  42A7      3350          clr.l     -(A7)
00001FC6  4EB8 0CA4 3351          jsr       _Get8HexDigits
00001FCA  584F      3352          addq.w    #4,A7
00001FCC  2600      3353          move.l    D0,D3
                    3354   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FCE  2803      3355          move.l    D3,D4
                    3356   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FD0  2003      3357          move.l    D3,D0
00001FD2  C0BC 0000 3358          and.l     #1,D0
00001FD6  0001      
00001FD8  0C80 0000 3359          cmp.l     #1,D0
00001FDC  0001      
00001FDE  660E      3360          bne.s     SetBreakPoint_9
                    3361   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001FE0  4879 0000 3362          pea       @m68kde~1_77.L
00001FE4  49F8      
00001FE6  4E92      3363          jsr       (A2)
00001FE8  584F      3364          addq.w    #4,A7
                    3365   ; return ;
00001FEA  6000 00A2 3366          bra       SetBreakPoint_15
                    3367   SetBreakPoint_9:
                    3368   ; }
                    3369   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001FEE  0C83 0000 3370          cmp.l     #32768,D3
00001FF2  8000      
00001FF4  640E      3371          bhs.s     SetBreakPoint_11
                    3372   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001FF6  4879 0000 3373          pea       @m68kde~1_78.L
00001FFA  4A2E      
00001FFC  4E92      3374          jsr       (A2)
00001FFE  584F      3375          addq.w    #4,A7
                    3376   ; return ;
00002000  6000 008C 3377          bra       SetBreakPoint_15
                    3378   SetBreakPoint_11:
                    3379   ; }
                    3380   ; // search for first free bp or existing same BP
                    3381   ; for(i = 0; i < 8; i++)  {
00002004  4282      3382          clr.l     D2
                    3383   SetBreakPoint_13:
00002006  0C82 0000 3384          cmp.l     #8,D2
0000200A  0008      
0000200C  6C00 0080 3385          bge       SetBreakPoint_15
                    3386   ; if(BreakPointAddress[i] == BPAddress)   {
00002010  2002      3387          move.l    D2,D0
00002012  E588      3388          lsl.l     #2,D0
00002014  41F9 0B00 3389          lea       _BreakPointAddress.L,A0
00002018  012E      
0000201A  B6B0 0800 3390          cmp.l     0(A0,D0.L),D3
0000201E  6610      3391          bne.s     SetBreakPoint_16
                    3392   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002020  2F03      3393          move.l    D3,-(A7)
00002022  4879 0000 3394          pea       @m68kde~1_79.L
00002026  4A76      
00002028  4E92      3395          jsr       (A2)
0000202A  504F      3396          addq.w    #8,A7
                    3397   ; return ;
0000202C  6000 0060 3398          bra       SetBreakPoint_15
                    3399   SetBreakPoint_16:
                    3400   ; }
                    3401   ; if(BreakPointSetOrCleared[i] == 0) {
00002030  2002      3402          move.l    D2,D0
00002032  E588      3403          lsl.l     #2,D0
00002034  2033 0800 3404          move.l    0(A3,D0.L),D0
00002038  6600 004E 3405          bne       SetBreakPoint_18
                    3406   ; // set BP here
                    3407   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000203C  2002      3408          move.l    D2,D0
0000203E  E588      3409          lsl.l     #2,D0
00002040  27BC 0000 3410          move.l    #1,0(A3,D0.L)
00002044  0001 0800 
                    3411   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002048  2044      3412          move.l    D4,A0
0000204A  2002      3413          move.l    D2,D0
0000204C  E388      3414          lsl.l     #1,D0
0000204E  43F9 0B00 3415          lea       _BreakPointInstruction.L,A1
00002052  014E      
00002054  3390 0800 3416          move.w    (A0),0(A1,D0.L)
                    3417   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00002058  2F04      3418          move.l    D4,-(A7)
0000205A  4879 0000 3419          pea       @m68kde~1_80.L
0000205E  4AAE      
00002060  4E92      3420          jsr       (A2)
00002062  504F      3421          addq.w    #8,A7
                    3422   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00002064  2044      3423          move.l    D4,A0
00002066  30BC 4E4E 3424          move.w    #20046,(A0)
                    3425   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
0000206A  2002      3426          move.l    D2,D0
0000206C  E588      3427          lsl.l     #2,D0
0000206E  41F9 0B00 3428          lea       _BreakPointAddress.L,A0
00002072  012E      
00002074  2183 0800 3429          move.l    D3,0(A0,D0.L)
                    3430   ; printf("\r\n") ;
00002078  4879 0000 3431          pea       @m68kde~1_1.L
0000207C  42D6      
0000207E  4E92      3432          jsr       (A2)
00002080  584F      3433          addq.w    #4,A7
                    3434   ; BreakPointDisplay() ;       // display the break points
00002082  4EB8 1B46 3435          jsr       _BreakPointDisplay
                    3436   ; return ;
00002086  6006      3437          bra.s     SetBreakPoint_15
                    3438   SetBreakPoint_18:
00002088  5282      3439          addq.l    #1,D2
0000208A  6000 FF7A 3440          bra       SetBreakPoint_13
                    3441   SetBreakPoint_15:
0000208E  4CDF 0C1C 3442          movem.l   (A7)+,D2/D3/D4/A2/A3
00002092  4E5E      3443          unlk      A6
00002094  4E75      3444          rts
                    3445   ; }
                    3446   ; }
                    3447   ; }
                    3448   ; void SetWatchPoint(void)
                    3449   ; {
                    3450   _SetWatchPoint:
00002096  4E56 FFF8 3451          link      A6,#-8
0000209A  48E7 3030 3452          movem.l   D2/D3/A2/A3,-(A7)
0000209E  45F9 0000 3453          lea       _printf.L,A2
000020A2  3900      
000020A4  47F9 0B00 3454          lea       _WatchPointSetOrCleared.L,A3
000020A8  01A2      
                    3455   ; int i ;
                    3456   ; int WPNumber;
                    3457   ; int WPAddress;
                    3458   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3459   ; // see if any free break points
                    3460   ; for(i = 0; i < 8; i ++) {
000020AA  4282      3461          clr.l     D2
                    3462   SetWatchPoint_1:
000020AC  0C82 0000 3463          cmp.l     #8,D2
000020B0  0008      
000020B2  6C10      3464          bge.s     SetWatchPoint_3
                    3465   ; if( WatchPointSetOrCleared[i] == 0)
000020B4  2002      3466          move.l    D2,D0
000020B6  E588      3467          lsl.l     #2,D0
000020B8  2033 0800 3468          move.l    0(A3,D0.L),D0
000020BC  6602      3469          bne.s     SetWatchPoint_4
                    3470   ; break ;         // if spare WP found allow user to set it
000020BE  6004      3471          bra.s     SetWatchPoint_3
                    3472   SetWatchPoint_4:
000020C0  5282      3473          addq.l    #1,D2
000020C2  60E8      3474          bra       SetWatchPoint_1
                    3475   SetWatchPoint_3:
                    3476   ; }
                    3477   ; if(i == 8) {
000020C4  0C82 0000 3478          cmp.l     #8,D2
000020C8  0008      
000020CA  660E      3479          bne.s     SetWatchPoint_6
                    3480   ; printf("\r\nNo FREE Watch Points.....") ;
000020CC  4879 0000 3481          pea       @m68kde~1_81.L
000020D0  4AD4      
000020D2  4E92      3482          jsr       (A2)
000020D4  584F      3483          addq.w    #4,A7
                    3484   ; return ;
000020D6  6000 008C 3485          bra       SetWatchPoint_11
                    3486   SetWatchPoint_6:
                    3487   ; }
                    3488   ; printf("\r\nWatch Point Address: ") ;
000020DA  4879 0000 3489          pea       @m68kde~1_82.L
000020DE  4AF0      
000020E0  4E92      3490          jsr       (A2)
000020E2  584F      3491          addq.w    #4,A7
                    3492   ; WPAddress = Get8HexDigits(0) ;
000020E4  42A7      3493          clr.l     -(A7)
000020E6  4EB8 0CA4 3494          jsr       _Get8HexDigits
000020EA  584F      3495          addq.w    #4,A7
000020EC  2600      3496          move.l    D0,D3
                    3497   ; // search for first free wp or existing same wp
                    3498   ; for(i = 0; i < 8; i++)  {
000020EE  4282      3499          clr.l     D2
                    3500   SetWatchPoint_9:
000020F0  0C82 0000 3501          cmp.l     #8,D2
000020F4  0008      
000020F6  6C00 006C 3502          bge       SetWatchPoint_11
                    3503   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
000020FA  2002      3504          move.l    D2,D0
000020FC  E588      3505          lsl.l     #2,D0
000020FE  41F9 0B00 3506          lea       _WatchPointAddress.L,A0
00002102  0182      
00002104  B6B0 0800 3507          cmp.l     0(A0,D0.L),D3
00002108  6614      3508          bne.s     SetWatchPoint_12
0000210A  4A83      3509          tst.l     D3
0000210C  6710      3510          beq.s     SetWatchPoint_12
                    3511   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
0000210E  2F03      3512          move.l    D3,-(A7)
00002110  4879 0000 3513          pea       @m68kde~1_83.L
00002114  4B08      
00002116  4E92      3514          jsr       (A2)
00002118  504F      3515          addq.w    #8,A7
                    3516   ; return ;
0000211A  6000 0048 3517          bra       SetWatchPoint_11
                    3518   SetWatchPoint_12:
                    3519   ; }
                    3520   ; if(WatchPointSetOrCleared[i] == 0) {
0000211E  2002      3521          move.l    D2,D0
00002120  E588      3522          lsl.l     #2,D0
00002122  2033 0800 3523          move.l    0(A3,D0.L),D0
00002126  6600 0038 3524          bne       SetWatchPoint_14
                    3525   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
0000212A  2002      3526          move.l    D2,D0
0000212C  E588      3527          lsl.l     #2,D0
0000212E  27BC 0000 3528          move.l    #1,0(A3,D0.L)
00002132  0001 0800 
                    3529   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002136  2F03      3530          move.l    D3,-(A7)
00002138  4879 0000 3531          pea       @m68kde~1_84.L
0000213C  4B3E      
0000213E  4E92      3532          jsr       (A2)
00002140  504F      3533          addq.w    #8,A7
                    3534   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002142  2002      3535          move.l    D2,D0
00002144  E588      3536          lsl.l     #2,D0
00002146  41F9 0B00 3537          lea       _WatchPointAddress.L,A0
0000214A  0182      
0000214C  2183 0800 3538          move.l    D3,0(A0,D0.L)
                    3539   ; printf("\r\n") ;
00002150  4879 0000 3540          pea       @m68kde~1_1.L
00002154  42D6      
00002156  4E92      3541          jsr       (A2)
00002158  584F      3542          addq.w    #4,A7
                    3543   ; WatchPointDisplay() ;       // display the break points
0000215A  4EB8 1C1A 3544          jsr       _WatchPointDisplay
                    3545   ; return ;
0000215E  6004      3546          bra.s     SetWatchPoint_11
                    3547   SetWatchPoint_14:
00002160  5282      3548          addq.l    #1,D2
00002162  608C      3549          bra       SetWatchPoint_9
                    3550   SetWatchPoint_11:
00002164  4CDF 0C0C 3551          movem.l   (A7)+,D2/D3/A2/A3
00002168  4E5E      3552          unlk      A6
0000216A  4E75      3553          rts
                    3554   ; }
                    3555   ; }
                    3556   ; }
                    3557   ; void HandleBreakPoint(void)
                    3558   ; {
                    3559   _HandleBreakPoint:
0000216C  4E56 FFFC 3560          link      A6,#-4
00002170  48E7 0038 3561          movem.l   A2/A3/A4,-(A7)
00002174  45F9 0B00 3562          lea       _i.L,A2
00002178  00C4      
0000217A  47F9 0000 3563          lea       _printf.L,A3
0000217E  3900      
00002180  49F9 0B00 3564          lea       _PC.L,A4
00002184  0120      
                    3565   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3566   ; // now we have to put the break point back to run the instruction
                    3567   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3568   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00002186  5594      3569          subq.l    #2,(A4)
                    3570   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00002188  4879 0000 3571          pea       @m68kde~1_85.L
0000218C  4B64      
0000218E  4E93      3572          jsr       (A3)
00002190  584F      3573          addq.w    #4,A7
                    3574   ; printf("\r\nSingle Step : [ON]") ;
00002192  4879 0000 3575          pea       @m68kde~1_86.L
00002196  4B78      
00002198  4E93      3576          jsr       (A3)
0000219A  584F      3577          addq.w    #4,A7
                    3578   ; printf("\r\nBreakPoints : [Enabled]") ;
0000219C  4879 0000 3579          pea       @m68kde~1_87.L
000021A0  4B8E      
000021A2  4E93      3580          jsr       (A3)
000021A4  584F      3581          addq.w    #4,A7
                    3582   ; // now clear the break point (put original instruction back)
                    3583   ; ProgramBreakPointAddress = PC ;
000021A6  2D54 FFFC 3584          move.l    (A4),-4(A6)
                    3585   ; for(i = 0; i < 8; i ++) {
000021AA  4292      3586          clr.l     (A2)
                    3587   HandleBreakPoint_1:
000021AC  2012      3588          move.l    (A2),D0
000021AE  0C80 0000 3589          cmp.l     #8,D0
000021B2  0008      
000021B4  6400 0056 3590          bhs       HandleBreakPoint_3
                    3591   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021B8  2012      3592          move.l    (A2),D0
000021BA  E588      3593          lsl.l     #2,D0
000021BC  41F9 0B00 3594          lea       _BreakPointAddress.L,A0
000021C0  012E      
000021C2  2230 0800 3595          move.l    0(A0,D0.L),D1
000021C6  B294      3596          cmp.l     (A4),D1
000021C8  6600 003E 3597          bne       HandleBreakPoint_4
                    3598   ; BreakPointAddress[i] = 0 ;
000021CC  2012      3599          move.l    (A2),D0
000021CE  E588      3600          lsl.l     #2,D0
000021D0  41F9 0B00 3601          lea       _BreakPointAddress.L,A0
000021D4  012E      
000021D6  42B0 0800 3602          clr.l     0(A0,D0.L)
                    3603   ; BreakPointSetOrCleared[i] = 0 ;
000021DA  2012      3604          move.l    (A2),D0
000021DC  E588      3605          lsl.l     #2,D0
000021DE  41F9 0B00 3606          lea       _BreakPointSetOrCleared.L,A0
000021E2  015E      
000021E4  42B0 0800 3607          clr.l     0(A0,D0.L)
                    3608   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000021E8  2012      3609          move.l    (A2),D0
000021EA  E388      3610          lsl.l     #1,D0
000021EC  41F9 0B00 3611          lea       _BreakPointInstruction.L,A0
000021F0  014E      
000021F2  226E FFFC 3612          move.l    -4(A6),A1
000021F6  32B0 0800 3613          move.w    0(A0,D0.L),(A1)
                    3614   ; BreakPointInstruction[i] = 0 ;
000021FA  2012      3615          move.l    (A2),D0
000021FC  E388      3616          lsl.l     #1,D0
000021FE  41F9 0B00 3617          lea       _BreakPointInstruction.L,A0
00002202  014E      
00002204  4270 0800 3618          clr.w     0(A0,D0.L)
                    3619   HandleBreakPoint_4:
00002208  5292      3620          addq.l    #1,(A2)
0000220A  60A0      3621          bra       HandleBreakPoint_1
                    3622   HandleBreakPoint_3:
                    3623   ; }
                    3624   ; }
                    3625   ; DumpRegisters() ;
0000220C  4EB8 1398 3626          jsr       _DumpRegisters
                    3627   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002210  4879 0000 3628          pea       @m68kde~1_49.L
00002214  470A      
00002216  4E93      3629          jsr       (A3)
00002218  584F      3630          addq.w    #4,A7
                    3631   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
0000221A  4879 0000 3632          pea       @m68kde~1_88.L
0000221E  4BA8      
00002220  4E93      3633          jsr       (A3)
00002222  584F      3634          addq.w    #4,A7
                    3635   ; menu() ;
00002224  4EB9 0000 3636          jsr       _menu
00002228  2430      
0000222A  4CDF 1C00 3637          movem.l   (A7)+,A2/A3/A4
0000222E  4E5E      3638          unlk      A6
00002230  4E75      3639          rts
                    3640   ; }
                    3641   ; void UnknownCommand()
                    3642   ; {
                    3643   _UnknownCommand:
                    3644   ; printf("\r\nUnknown Command.....\r\n") ;
00002232  4879 0000 3645          pea       @m68kde~1_89.L
00002236  4BD0      
00002238  4EB9 0000 3646          jsr       _printf
0000223C  3900      
0000223E  584F      3647          addq.w    #4,A7
                    3648   ; Help() ;
00002240  4EB9 0000 3649          jsr       _Help
00002244  2356      
00002246  4E75      3650          rts
                    3651   ; }
                    3652   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3653   ; void CallDebugMonitor(void)
                    3654   ; {
                    3655   _CallDebugMonitor:
                    3656   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002248  4879 0000 3657          pea       @m68kde~1_90.L
0000224C  4BEA      
0000224E  4EB9 0000 3658          jsr       _printf
00002252  3900      
00002254  584F      3659          addq.w    #4,A7
                    3660   ; menu();
00002256  4EB9 0000 3661          jsr       _menu
0000225A  2430      
0000225C  4E75      3662          rts
                    3663   ; }
                    3664   ; void Breakpoint(void)
                    3665   ; {
                    3666   _Breakpoint:
0000225E  2F02      3667          move.l    D2,-(A7)
                    3668   ; char c;
                    3669   ; c = toupper(_getch());
00002260  2F00      3670          move.l    D0,-(A7)
00002262  4EB8 0B68 3671          jsr       __getch
00002266  2200      3672          move.l    D0,D1
00002268  201F      3673          move.l    (A7)+,D0
0000226A  2F01      3674          move.l    D1,-(A7)
0000226C  4EB9 0000 3675          jsr       _toupper
00002270  303E      
00002272  584F      3676          addq.w    #4,A7
00002274  1400      3677          move.b    D0,D2
                    3678   ; if( c == (char)('D'))                                      // BreakPoint Display
00002276  0C02 0044 3679          cmp.b     #68,D2
0000227A  6608      3680          bne.s     Breakpoint_1
                    3681   ; BreakPointDisplay() ;
0000227C  4EB8 1B46 3682          jsr       _BreakPointDisplay
00002280  6000 0054 3683          bra       Breakpoint_10
                    3684   Breakpoint_1:
                    3685   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00002284  0C02 004B 3686          cmp.b     #75,D2
00002288  6630      3687          bne.s     Breakpoint_3
                    3688   ; printf("\r\nKill All Break Points...(y/n)?") ;
0000228A  4879 0000 3689          pea       @m68kde~1_91.L
0000228E  4C0A      
00002290  4EB9 0000 3690          jsr       _printf
00002294  3900      
00002296  584F      3691          addq.w    #4,A7
                    3692   ; c = toupper(_getch());
00002298  2F00      3693          move.l    D0,-(A7)
0000229A  4EB8 0B68 3694          jsr       __getch
0000229E  2200      3695          move.l    D0,D1
000022A0  201F      3696          move.l    (A7)+,D0
000022A2  2F01      3697          move.l    D1,-(A7)
000022A4  4EB9 0000 3698          jsr       _toupper
000022A8  303E      
000022AA  584F      3699          addq.w    #4,A7
000022AC  1400      3700          move.b    D0,D2
                    3701   ; if(c == (char)('Y'))
000022AE  0C02 0059 3702          cmp.b     #89,D2
000022B2  6604      3703          bne.s     Breakpoint_5
                    3704   ; KillAllBreakPoints() ;
000022B4  4EB8 1EDE 3705          jsr       _KillAllBreakPoints
                    3706   Breakpoint_5:
000022B8  601C      3707          bra.s     Breakpoint_10
                    3708   Breakpoint_3:
                    3709   ; }
                    3710   ; else if(c == (char)('S')) {
000022BA  0C02 0053 3711          cmp.b     #83,D2
000022BE  6606      3712          bne.s     Breakpoint_7
                    3713   ; SetBreakPoint() ;
000022C0  4EB8 1F76 3714          jsr       _SetBreakPoint
000022C4  6010      3715          bra.s     Breakpoint_10
                    3716   Breakpoint_7:
                    3717   ; }
                    3718   ; else if(c == (char)('C')) {
000022C6  0C02 0043 3719          cmp.b     #67,D2
000022CA  6606      3720          bne.s     Breakpoint_9
                    3721   ; BreakPointClear() ;
000022CC  4EB8 1CC6 3722          jsr       _BreakPointClear
000022D0  6004      3723          bra.s     Breakpoint_10
                    3724   Breakpoint_9:
                    3725   ; }
                    3726   ; else
                    3727   ; UnknownCommand() ;
000022D2  4EB8 2232 3728          jsr       _UnknownCommand
                    3729   Breakpoint_10:
000022D6  241F      3730          move.l    (A7)+,D2
000022D8  4E75      3731          rts
                    3732   ; }
                    3733   ; void Watchpoint(void)
                    3734   ; {
                    3735   _Watchpoint:
000022DA  2F02      3736          move.l    D2,-(A7)
                    3737   ; char c;
                    3738   ; c = toupper(_getch());
000022DC  2F00      3739          move.l    D0,-(A7)
000022DE  4EB8 0B68 3740          jsr       __getch
000022E2  2200      3741          move.l    D0,D1
000022E4  201F      3742          move.l    (A7)+,D0
000022E6  2F01      3743          move.l    D1,-(A7)
000022E8  4EB9 0000 3744          jsr       _toupper
000022EC  303E      
000022EE  584F      3745          addq.w    #4,A7
000022F0  1400      3746          move.b    D0,D2
                    3747   ; if( c == (char)('D'))                                      // WatchPoint Display
000022F2  0C02 0044 3748          cmp.b     #68,D2
000022F6  6608      3749          bne.s     Watchpoint_1
                    3750   ; WatchPointDisplay() ;
000022F8  4EB8 1C1A 3751          jsr       _WatchPointDisplay
000022FC  6000 0054 3752          bra       Watchpoint_10
                    3753   Watchpoint_1:
                    3754   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002300  0C02 004B 3755          cmp.b     #75,D2
00002304  6630      3756          bne.s     Watchpoint_3
                    3757   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002306  4879 0000 3758          pea       @m68kde~1_92.L
0000230A  4C2C      
0000230C  4EB9 0000 3759          jsr       _printf
00002310  3900      
00002312  584F      3760          addq.w    #4,A7
                    3761   ; c = toupper(_getch());
00002314  2F00      3762          move.l    D0,-(A7)
00002316  4EB8 0B68 3763          jsr       __getch
0000231A  2200      3764          move.l    D0,D1
0000231C  201F      3765          move.l    (A7)+,D0
0000231E  2F01      3766          move.l    D1,-(A7)
00002320  4EB9 0000 3767          jsr       _toupper
00002324  303E      
00002326  584F      3768          addq.w    #4,A7
00002328  1400      3769          move.b    D0,D2
                    3770   ; if(c == (char)('Y'))
0000232A  0C02 0059 3771          cmp.b     #89,D2
0000232E  6604      3772          bne.s     Watchpoint_5
                    3773   ; KillAllWatchPoints() ;
00002330  4EB8 1F46 3774          jsr       _KillAllWatchPoints
                    3775   Watchpoint_5:
00002334  601C      3776          bra.s     Watchpoint_10
                    3777   Watchpoint_3:
                    3778   ; }
                    3779   ; else if(c == (char)('S')) {
00002336  0C02 0053 3780          cmp.b     #83,D2
0000233A  6606      3781          bne.s     Watchpoint_7
                    3782   ; SetWatchPoint() ;
0000233C  4EB8 2096 3783          jsr       _SetWatchPoint
00002340  6010      3784          bra.s     Watchpoint_10
                    3785   Watchpoint_7:
                    3786   ; }
                    3787   ; else if(c == (char)('C')) {
00002342  0C02 0043 3788          cmp.b     #67,D2
00002346  6606      3789          bne.s     Watchpoint_9
                    3790   ; WatchPointClear() ;
00002348  4EB8 1DA0 3791          jsr       _WatchPointClear
0000234C  6004      3792          bra.s     Watchpoint_10
                    3793   Watchpoint_9:
                    3794   ; }
                    3795   ; else
                    3796   ; UnknownCommand() ;
0000234E  4EB8 2232 3797          jsr       _UnknownCommand
                    3798   Watchpoint_10:
00002352  241F      3799          move.l    (A7)+,D2
00002354  4E75      3800          rts
                    3801   ; }
                    3802   ; void Help(void)
                    3803   ; {
                    3804   _Help:
00002356  48E7 2020 3805          movem.l   D2/A2,-(A7)
0000235A  45F9 0000 3806          lea       _printf.L,A2
0000235E  3900      
                    3807   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002360  41F9 0000 3808          lea       @m68kde~1_93.L,A0
00002364  4C4E      
00002366  2408      3809          move.l    A0,D2
                    3810   ; printf(banner) ;
00002368  2F02      3811          move.l    D2,-(A7)
0000236A  4E92      3812          jsr       (A2)
0000236C  584F      3813          addq.w    #4,A7
                    3814   ; printf("\r\n  Debugger Command Summary") ;
0000236E  4879 0000 3815          pea       @m68kde~1_94.L
00002372  4C92      
00002374  4E92      3816          jsr       (A2)
00002376  584F      3817          addq.w    #4,A7
                    3818   ; printf(banner) ;
00002378  2F02      3819          move.l    D2,-(A7)
0000237A  4E92      3820          jsr       (A2)
0000237C  584F      3821          addq.w    #4,A7
                    3822   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
0000237E  4879 0000 3823          pea       @m68kde~1_95.L
00002382  4CB0      
00002384  4E92      3824          jsr       (A2)
00002386  584F      3825          addq.w    #4,A7
                    3826   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
00002388  4879 0000 3827          pea       @m68kde~1_96.L
0000238C  4CF4      
0000238E  4E92      3828          jsr       (A2)
00002390  584F      3829          addq.w    #4,A7
                    3830   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002392  4879 0000 3831          pea       @m68kde~1_97.L
00002396  4D2C      
00002398  4E92      3832          jsr       (A2)
0000239A  584F      3833          addq.w    #4,A7
                    3834   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
0000239C  4879 0000 3835          pea       @m68kde~1_98.L
000023A0  4D66      
000023A2  4E92      3836          jsr       (A2)
000023A4  584F      3837          addq.w    #4,A7
                    3838   ; printf("\r\n  E            - Enter String into Memory") ;
000023A6  4879 0000 3839          pea       @m68kde~1_99.L
000023AA  4D98      
000023AC  4E92      3840          jsr       (A2)
000023AE  584F      3841          addq.w    #4,A7
                    3842   ; printf("\r\n  F            - Fill Memory with Data") ;
000023B0  4879 0000 3843          pea       @m68kde~1_100.L
000023B4  4DC4      
000023B6  4E92      3844          jsr       (A2)
000023B8  584F      3845          addq.w    #4,A7
                    3846   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000023BA  2F39 0B00 3847          move.l    _PC.L,-(A7)
000023BE  0120      
000023C0  4879 0000 3848          pea       @m68kde~1_101.L
000023C4  4DEE      
000023C6  4E92      3849          jsr       (A2)
000023C8  504F      3850          addq.w    #8,A7
                    3851   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
000023CA  4879 0000 3852          pea       @m68kde~1_102.L
000023CE  4E28      
000023D0  4E92      3853          jsr       (A2)
000023D2  584F      3854          addq.w    #4,A7
                    3855   ; printf("\r\n  M            - Memory Examine and Change");
000023D4  4879 0000 3856          pea       @m68kde~1_103.L
000023D8  4E60      
000023DA  4E92      3857          jsr       (A2)
000023DC  584F      3858          addq.w    #4,A7
                    3859   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
000023DE  4879 0000 3860          pea       @m68kde~1_104.L
000023E2  4E8E      
000023E4  4E92      3861          jsr       (A2)
000023E6  584F      3862          addq.w    #4,A7
                    3863   ; printf("\r\n  R            - Display 68000 Registers") ;
000023E8  4879 0000 3864          pea       @m68kde~1_105.L
000023EC  4EC8      
000023EE  4E92      3865          jsr       (A2)
000023F0  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
000023F2  4879 0000 3868          pea       @m68kde~1_106.L
000023F6  4EF4      
000023F8  4E92      3869          jsr       (A2)
000023FA  584F      3870          addq.w    #4,A7
                    3871   ; printf("\r\n  TM           - Test Memory") ;
000023FC  4879 0000 3872          pea       @m68kde~1_107.L
00002400  4F26      
00002402  4E92      3873          jsr       (A2)
00002404  584F      3874          addq.w    #4,A7
                    3875   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002406  4879 0000 3876          pea       @m68kde~1_108.L
0000240A  4F46      
0000240C  4E92      3877          jsr       (A2)
0000240E  584F      3878          addq.w    #4,A7
                    3879   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002410  4879 0000 3880          pea       @m68kde~1_109.L
00002414  4F6E      
00002416  4E92      3881          jsr       (A2)
00002418  584F      3882          addq.w    #4,A7
                    3883   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000241A  4879 0000 3884          pea       @m68kde~1_110.L
0000241E  4FA4      
00002420  4E92      3885          jsr       (A2)
00002422  584F      3886          addq.w    #4,A7
                    3887   ; printf(banner) ;
00002424  2F02      3888          move.l    D2,-(A7)
00002426  4E92      3889          jsr       (A2)
00002428  584F      3890          addq.w    #4,A7
0000242A  4CDF 0404 3891          movem.l   (A7)+,D2/A2
0000242E  4E75      3892          rts
                    3893   ; }
                    3894   ; void menu(void)
                    3895   ; {
                    3896   _menu:
00002430  48E7 303C 3897          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002434  45F9 0000 3898          lea       _printf.L,A2
00002438  3900      
0000243A  47F9 0B00 3899          lea       _Trace.L,A3
0000243E  00D8      
00002440  49F9 0B00 3900          lea       _x.L,A4
00002444  00C8      
00002446  4BF9 0B00 3901          lea       _SR.L,A5
0000244A  012C      
                    3902   ; char c,c1 ;
                    3903   ; while(1)    {
                    3904   menu_1:
                    3905   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000244C  4EB8 0BA6 3906          jsr       _FlushKeyboard
                    3907   ; printf("\r\n#") ;
00002450  4879 0000 3908          pea       @m68kde~1_111.L
00002454  4FDC      
00002456  4E92      3909          jsr       (A2)
00002458  584F      3910          addq.w    #4,A7
                    3911   ; c = toupper(_getch());
0000245A  2F00      3912          move.l    D0,-(A7)
0000245C  4EB8 0B68 3913          jsr       __getch
00002460  2200      3914          move.l    D0,D1
00002462  201F      3915          move.l    (A7)+,D0
00002464  2F01      3916          move.l    D1,-(A7)
00002466  4EB9 0000 3917          jsr       _toupper
0000246A  303E      
0000246C  584F      3918          addq.w    #4,A7
0000246E  1400      3919          move.b    D0,D2
                    3920   ; if( c == (char)('L'))                  // load s record file
00002470  0C02 004C 3921          cmp.b     #76,D2
00002474  6608      3922          bne.s     menu_4
                    3923   ; Load_SRecordFile() ;
00002476  4EB8 0E36 3924          jsr       _Load_SRecordFile
0000247A  6000 021E 3925          bra       menu_46
                    3926   menu_4:
                    3927   ; else if( c == (char)('D'))             // dump memory
0000247E  0C02 0044 3928          cmp.b     #68,D2
00002482  6608      3929          bne.s     menu_6
                    3930   ; DumpMemory() ;
00002484  4EB8 0CCC 3931          jsr       _DumpMemory
00002488  6000 0210 3932          bra       menu_46
                    3933   menu_6:
                    3934   ; else if( c == (char)('E'))             // Enter String into memory
0000248C  0C02 0045 3935          cmp.b     #69,D2
00002490  660A      3936          bne.s     menu_8
                    3937   ; EnterString() ;
00002492  4EB9 0000 3938          jsr       _EnterString
00002496  27E2      
00002498  6000 0200 3939          bra       menu_46
                    3940   menu_8:
                    3941   ; else if( c == (char)('F'))             // fill memory
0000249C  0C02 0046 3942          cmp.b     #70,D2
000024A0  6608      3943          bne.s     menu_10
                    3944   ; FillMemory() ;
000024A2  4EB8 0DBC 3945          jsr       _FillMemory
000024A6  6000 01F2 3946          bra       menu_46
                    3947   menu_10:
                    3948   ; else if( c == (char)('G'))  {           // go user program
000024AA  0C02 0047 3949          cmp.b     #71,D2
000024AE  6626      3950          bne.s     menu_12
                    3951   ; printf("\r\nProgram Running.....") ;
000024B0  4879 0000 3952          pea       @m68kde~1_112.L
000024B4  4FE0      
000024B6  4E92      3953          jsr       (A2)
000024B8  584F      3954          addq.w    #4,A7
                    3955   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000024BA  4879 0000 3956          pea       @m68kde~1_113.L
000024BE  4FF8      
000024C0  4E92      3957          jsr       (A2)
000024C2  584F      3958          addq.w    #4,A7
                    3959   ; GoFlag = 1 ;
000024C4  23FC 0000 3960          move.l    #1,_GoFlag.L
000024C8  0001 0B00 
000024CC  00DC      
                    3961   ; go() ;
000024CE  4EB8 08B8 3962          jsr       _go
000024D2  6000 01C6 3963          bra       menu_46
                    3964   menu_12:
                    3965   ; }
                    3966   ; else if( c == (char)('M'))           // memory examine and modify
000024D6  0C02 004D 3967          cmp.b     #77,D2
000024DA  6608      3968          bne.s     menu_14
                    3969   ; MemoryChange() ;
000024DC  4EB8 0FC4 3970          jsr       _MemoryChange
000024E0  6000 01B8 3971          bra       menu_46
                    3972   menu_14:
                    3973   ; else if( c == (char)('P'))            // Program Flash Chip
000024E4  0C02 0050 3974          cmp.b     #80,D2
000024E8  6608      3975          bne.s     menu_16
                    3976   ; ProgramFlashChip() ;
000024EA  4EB8 134E 3977          jsr       _ProgramFlashChip
000024EE  6000 01AA 3978          bra       menu_46
                    3979   menu_16:
                    3980   ; else if( c == (char)('C'))             // copy flash chip to ram and go
000024F2  0C02 0043 3981          cmp.b     #67,D2
000024F6  6608      3982          bne.s     menu_18
                    3983   ; LoadFromFlashChip();
000024F8  4EB8 1364 3984          jsr       _LoadFromFlashChip
000024FC  6000 019C 3985          bra       menu_46
                    3986   menu_18:
                    3987   ; else if( c == (char)('R'))             // dump registers
00002500  0C02 0052 3988          cmp.b     #82,D2
00002504  6608      3989          bne.s     menu_20
                    3990   ; DumpRegisters() ;
00002506  4EB8 1398 3991          jsr       _DumpRegisters
0000250A  6000 018E 3992          bra       menu_46
                    3993   menu_20:
                    3994   ; else if( c == (char)('.'))           // change registers
0000250E  0C02 002E 3995          cmp.b     #46,D2
00002512  6608      3996          bne.s     menu_22
                    3997   ; ChangeRegisters() ;
00002514  4EB8 188A 3998          jsr       _ChangeRegisters
00002518  6000 0180 3999          bra       menu_46
                    4000   menu_22:
                    4001   ; else if( c == (char)('B'))              // breakpoint command
0000251C  0C02 0042 4002          cmp.b     #66,D2
00002520  6608      4003          bne.s     menu_24
                    4004   ; Breakpoint() ;
00002522  4EB8 225E 4005          jsr       _Breakpoint
00002526  6000 0172 4006          bra       menu_46
                    4007   menu_24:
                    4008   ; else if( c == (char)('T'))  {          // Test command
0000252A  0C02 0054 4009          cmp.b     #84,D2
0000252E  6600 0046 4010          bne       menu_26
                    4011   ; c1 = toupper(_getch()) ;
00002532  2F00      4012          move.l    D0,-(A7)
00002534  4EB8 0B68 4013          jsr       __getch
00002538  2200      4014          move.l    D0,D1
0000253A  201F      4015          move.l    (A7)+,D0
0000253C  2F01      4016          move.l    D1,-(A7)
0000253E  4EB9 0000 4017          jsr       _toupper
00002542  303E      
00002544  584F      4018          addq.w    #4,A7
00002546  1600      4019          move.b    D0,D3
                    4020   ; if(c1 == (char)('M'))                    // memory test
00002548  0C03 004D 4021          cmp.b     #77,D3
0000254C  6608      4022          bne.s     menu_28
                    4023   ; MemoryTest() ;
0000254E  4EB9 0000 4024          jsr       _MemoryTest
00002552  285A      
00002554  601C      4025          bra.s     menu_33
                    4026   menu_28:
                    4027   ; else if( c1 == (char)('S'))              // Switch Test command
00002556  0C03 0053 4028          cmp.b     #83,D3
0000255A  6606      4029          bne.s     menu_30
                    4030   ; SwitchTest() ;
0000255C  4EB8 0AA4 4031          jsr       _SwitchTest
00002560  6010      4032          bra.s     menu_33
                    4033   menu_30:
                    4034   ; else if( c1 == (char)('D'))              // display Test command
00002562  0C03 0044 4035          cmp.b     #68,D3
00002566  6606      4036          bne.s     menu_32
                    4037   ; TestLEDS() ;
00002568  4EB8 0A50 4038          jsr       _TestLEDS
0000256C  6004      4039          bra.s     menu_33
                    4040   menu_32:
                    4041   ; else
                    4042   ; UnknownCommand() ;
0000256E  4EB8 2232 4043          jsr       _UnknownCommand
                    4044   menu_33:
00002572  6000 0126 4045          bra       menu_46
                    4046   menu_26:
                    4047   ; }
                    4048   ; else if( c == (char)(' ')) {             // Next instruction command
00002576  0C02 0020 4049          cmp.b     #32,D2
0000257A  6636      4050          bne.s     menu_34
                    4051   ; DisableBreakPoints() ;
0000257C  4EB8 1E42 4052          jsr       _DisableBreakPoints
                    4053   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002580  2013      4054          move.l    (A3),D0
00002582  0C80 0000 4055          cmp.l     #1,D0
00002586  0001      
00002588  661A      4056          bne.s     menu_36
0000258A  2039 0B00 4057          move.l    _GoFlag.L,D0
0000258E  00DC      
00002590  0C80 0000 4058          cmp.l     #1,D0
00002594  0001      
00002596  660C      4059          bne.s     menu_36
                    4060   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002598  13FC 0001 4061          move.b    #1,4194314
0000259C  0040 000A 
                    4062   ; return ;
000025A0  6000 00FC 4063          bra       menu_38
                    4064   menu_36:
                    4065   ; }
                    4066   ; else
                    4067   ; printf("\r\nError: Press 'G' first to start program") ;
000025A4  4879 0000 4068          pea       @m68kde~1_114.L
000025A8  5026      
000025AA  4E92      4069          jsr       (A2)
000025AC  584F      4070          addq.w    #4,A7
000025AE  6000 00EA 4071          bra       menu_46
                    4072   menu_34:
                    4073   ; }
                    4074   ; else if( c == (char)('S')) {             // single step
000025B2  0C02 0053 4075          cmp.b     #83,D2
000025B6  6600 008C 4076          bne       menu_39
                    4077   ; if(Trace == 0) {
000025BA  2013      4078          move.l    (A3),D0
000025BC  6600 0050 4079          bne       menu_41
                    4080   ; DisableBreakPoints() ;
000025C0  4EB8 1E42 4081          jsr       _DisableBreakPoints
                    4082   ; printf("\r\nSingle Step  :[ON]") ;
000025C4  4879 0000 4083          pea       @m68kde~1_115.L
000025C8  5050      
000025CA  4E92      4084          jsr       (A2)
000025CC  584F      4085          addq.w    #4,A7
                    4086   ; printf("\r\nBreak Points :[Disabled]") ;
000025CE  4879 0000 4087          pea       @m68kde~1_48.L
000025D2  46EE      
000025D4  4E92      4088          jsr       (A2)
000025D6  584F      4089          addq.w    #4,A7
                    4090   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
000025D8  0055 8000 4091          or.w      #32768,(A5)
                    4092   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
000025DC  2F39 0B00 4093          move.l    _PC.L,-(A7)
000025E0  0120      
000025E2  4879 0000 4094          pea       @m68kde~1_116.L
000025E6  5066      
000025E8  4E92      4095          jsr       (A2)
000025EA  504F      4096          addq.w    #8,A7
                    4097   ; printf("\r\nPush <RESET Button> to Stop.....") ;
000025EC  4879 0000 4098          pea       @m68kde~1_117.L
000025F0  509A      
000025F2  4E92      4099          jsr       (A2)
000025F4  584F      4100          addq.w    #4,A7
                    4101   ; DumpRegisters() ;
000025F6  4EB8 1398 4102          jsr       _DumpRegisters
                    4103   ; Trace = 1;
000025FA  26BC 0000 4104          move.l    #1,(A3)
000025FE  0001      
                    4105   ; TraceException = 1;
00002600  13FC 0001 4106          move.b    #1,4194314
00002604  0040 000A 
                    4107   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002608  28B8 0074 4108          move.l    116,(A4)
0000260C  6032      4109          bra.s     menu_42
                    4110   menu_41:
                    4111   ; }
                    4112   ; else {
                    4113   ; Trace = 0 ;
0000260E  4293      4114          clr.l     (A3)
                    4115   ; TraceException = 0 ;
00002610  4239 0040 4116          clr.b     4194314
00002614  000A      
                    4117   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002616  28B8 0074 4118          move.l    116,(A4)
                    4119   ; EnableBreakPoints() ;
0000261A  4EB8 1E96 4120          jsr       _EnableBreakPoints
                    4121   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000261E  0255 7FFF 4122          and.w     #32767,(A5)
                    4123   ; printf("\r\nSingle Step : [OFF]") ;
00002622  4879 0000 4124          pea       @m68kde~1_118.L
00002626  50BE      
00002628  4E92      4125          jsr       (A2)
0000262A  584F      4126          addq.w    #4,A7
                    4127   ; printf("\r\nBreak Points :[Enabled]") ;
0000262C  4879 0000 4128          pea       @m68kde~1_119.L
00002630  50D4      
00002632  4E92      4129          jsr       (A2)
00002634  584F      4130          addq.w    #4,A7
                    4131   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002636  4879 0000 4132          pea       @m68kde~1_120.L
0000263A  50EE      
0000263C  4E92      4133          jsr       (A2)
0000263E  584F      4134          addq.w    #4,A7
                    4135   menu_42:
00002640  6000 0058 4136          bra       menu_46
                    4137   menu_39:
                    4138   ; }
                    4139   ; }
                    4140   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002644  0C02 001B 4141          cmp.b     #27,D2
00002648  6600 0040 4142          bne       menu_43
                    4143   ; Trace = 0;
0000264C  4293      4144          clr.l     (A3)
                    4145   ; TraceException = 0;
0000264E  4239 0040 4146          clr.b     4194314
00002652  000A      
                    4147   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002654  28B8 0074 4148          move.l    116,(A4)
                    4149   ; EnableBreakPoints() ;
00002658  4EB8 1E96 4150          jsr       _EnableBreakPoints
                    4151   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000265C  0255 7FFF 4152          and.w     #32767,(A5)
                    4153   ; printf("\r\nSingle Step  :[OFF]") ;
00002660  4879 0000 4154          pea       @m68kde~1_121.L
00002664  5118      
00002666  4E92      4155          jsr       (A2)
00002668  584F      4156          addq.w    #4,A7
                    4157   ; printf("\r\nBreak Points :[Enabled]");
0000266A  4879 0000 4158          pea       @m68kde~1_119.L
0000266E  50D4      
00002670  4E92      4159          jsr       (A2)
00002672  584F      4160          addq.w    #4,A7
                    4161   ; printf("\r\nProgram Running.....") ;
00002674  4879 0000 4162          pea       @m68kde~1_112.L
00002678  4FE0      
0000267A  4E92      4163          jsr       (A2)
0000267C  584F      4164          addq.w    #4,A7
                    4165   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000267E  4879 0000 4166          pea       @m68kde~1_113.L
00002682  4FF8      
00002684  4E92      4167          jsr       (A2)
00002686  584F      4168          addq.w    #4,A7
                    4169   ; return ;
00002688  6014      4170          bra.s     menu_38
                    4171   menu_43:
                    4172   ; }
                    4173   ; else if( c == (char)('W'))              // Watchpoint command
0000268A  0C02 0057 4174          cmp.b     #87,D2
0000268E  6606      4175          bne.s     menu_45
                    4176   ; Watchpoint() ;
00002690  4EB8 22DA 4177          jsr       _Watchpoint
00002694  6004      4178          bra.s     menu_46
                    4179   menu_45:
                    4180   ; else
                    4181   ; UnknownCommand() ;
00002696  4EB8 2232 4182          jsr       _UnknownCommand
                    4183   menu_46:
0000269A  6000 FDB0 4184          bra       menu_1
                    4185   menu_38:
0000269E  4CDF 3C0C 4186          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000026A2  4E75      4187          rts
                    4188   ; }
                    4189   ; }
                    4190   ; void PrintErrorMessageandAbort(char *string) {
                    4191   _PrintErrorMessageandAbort:
000026A4  4E56 0000 4192          link      A6,#0
                    4193   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000026A8  4879 0000 4194          pea       @m68kde~1_122.L
000026AC  512E      
000026AE  4EB9 0000 4195          jsr       _printf
000026B2  3900      
000026B4  584F      4196          addq.w    #4,A7
                    4197   ; printf("%s\r\n", string) ;
000026B6  2F2E 0008 4198          move.l    8(A6),-(A7)
000026BA  4879 0000 4199          pea       @m68kde~1_123.L
000026BE  514A      
000026C0  4EB9 0000 4200          jsr       _printf
000026C4  3900      
000026C6  504F      4201          addq.w    #8,A7
                    4202   ; menu() ;
000026C8  4EB8 2430 4203          jsr       _menu
000026CC  4E5E      4204          unlk      A6
000026CE  4E75      4205          rts
                    4206   ; }
                    4207   ; void IRQMessage(int level) {
                    4208   _IRQMessage:
000026D0  4E56 0000 4209          link      A6,#0
                    4210   ; printf("\r\n\r\nProgram ABORT !!!!!");
000026D4  4879 0000 4211          pea       @m68kde~1_124.L
000026D8  5150      
000026DA  4EB9 0000 4212          jsr       _printf
000026DE  3900      
000026E0  584F      4213          addq.w    #4,A7
                    4214   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
000026E2  2F2E 0008 4215          move.l    8(A6),-(A7)
000026E6  4879 0000 4216          pea       @m68kde~1_125.L
000026EA  5168      
000026EC  4EB9 0000 4217          jsr       _printf
000026F0  3900      
000026F2  504F      4218          addq.w    #8,A7
                    4219   ; menu() ;
000026F4  4EB8 2430 4220          jsr       _menu
000026F8  4E5E      4221          unlk      A6
000026FA  4E75      4222          rts
                    4223   ; }
                    4224   ; void UnhandledIRQ1(void) {
                    4225   _UnhandledIRQ1:
                    4226   ; IRQMessage(1);
000026FC  4878 0001 4227          pea       1
00002700  4EB8 26D0 4228          jsr       _IRQMessage
00002704  584F      4229          addq.w    #4,A7
00002706  4E75      4230          rts
                    4231   ; }
                    4232   ; void UnhandledIRQ2(void) {
                    4233   _UnhandledIRQ2:
                    4234   ; IRQMessage(2);
00002708  4878 0002 4235          pea       2
0000270C  4EB8 26D0 4236          jsr       _IRQMessage
00002710  584F      4237          addq.w    #4,A7
00002712  4E75      4238          rts
                    4239   ; }
                    4240   ; void UnhandledIRQ3(void){
                    4241   _UnhandledIRQ3:
                    4242   ; IRQMessage(3);
00002714  4878 0003 4243          pea       3
00002718  4EB8 26D0 4244          jsr       _IRQMessage
0000271C  584F      4245          addq.w    #4,A7
0000271E  4E75      4246          rts
                    4247   ; }
                    4248   ; void UnhandledIRQ4(void) {
                    4249   _UnhandledIRQ4:
                    4250   ; IRQMessage(4);
00002720  4878 0004 4251          pea       4
00002724  4EB8 26D0 4252          jsr       _IRQMessage
00002728  584F      4253          addq.w    #4,A7
0000272A  4E75      4254          rts
                    4255   ; }
                    4256   ; void UnhandledIRQ5(void) {
                    4257   _UnhandledIRQ5:
                    4258   ; IRQMessage(5);
0000272C  4878 0005 4259          pea       5
00002730  4EB8 26D0 4260          jsr       _IRQMessage
00002734  584F      4261          addq.w    #4,A7
00002736  4E75      4262          rts
                    4263   ; }
                    4264   ; void UnhandledIRQ6(void) {
                    4265   _UnhandledIRQ6:
                    4266   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002738  4879 0000 4267          pea       @m68kde~1_126.L
0000273C  518C      
0000273E  4EB8 26A4 4268          jsr       _PrintErrorMessageandAbort
00002742  584F      4269          addq.w    #4,A7
                    4270   ; menu() ;
00002744  4EB8 2430 4271          jsr       _menu
00002748  4E75      4272          rts
                    4273   ; }
                    4274   ; void UnhandledIRQ7(void) {
                    4275   _UnhandledIRQ7:
                    4276   ; IRQMessage(7);
0000274A  4878 0007 4277          pea       7
0000274E  4EB8 26D0 4278          jsr       _IRQMessage
00002752  584F      4279          addq.w    #4,A7
00002754  4E75      4280          rts
                    4281   ; }
                    4282   ; void UnhandledTrap(void) {
                    4283   _UnhandledTrap:
                    4284   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002756  4879 0000 4285          pea       @m68kde~1_127.L
0000275A  51CC      
0000275C  4EB8 26A4 4286          jsr       _PrintErrorMessageandAbort
00002760  584F      4287          addq.w    #4,A7
00002762  4E75      4288          rts
                    4289   ; }
                    4290   ; void BusError() {
                    4291   _BusError:
                    4292   ; PrintErrorMessageandAbort("BUS Error!") ;
00002764  4879 0000 4293          pea       @m68kde~1_128.L
00002768  51E2      
0000276A  4EB8 26A4 4294          jsr       _PrintErrorMessageandAbort
0000276E  584F      4295          addq.w    #4,A7
00002770  4E75      4296          rts
                    4297   ; }
                    4298   ; void AddressError() {
                    4299   _AddressError:
                    4300   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002772  4879 0000 4301          pea       @m68kde~1_129.L
00002776  51EE      
00002778  4EB8 26A4 4302          jsr       _PrintErrorMessageandAbort
0000277C  584F      4303          addq.w    #4,A7
0000277E  4E75      4304          rts
                    4305   ; }
                    4306   ; void IllegalInstruction() {
                    4307   _IllegalInstruction:
                    4308   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002780  4879 0000 4309          pea       @m68kde~1_130.L
00002784  51FE      
00002786  4EB8 26A4 4310          jsr       _PrintErrorMessageandAbort
0000278A  584F      4311          addq.w    #4,A7
0000278C  4E75      4312          rts
                    4313   ; }
                    4314   ; void Dividebyzero() {
                    4315   _Dividebyzero:
                    4316   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
0000278E  4879 0000 4317          pea       @m68kde~1_131.L
00002792  5212      
00002794  4EB8 26A4 4318          jsr       _PrintErrorMessageandAbort
00002798  584F      4319          addq.w    #4,A7
0000279A  4E75      4320          rts
                    4321   ; }
                    4322   ; void Check() {
                    4323   _Check:
                    4324   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000279C  4879 0000 4325          pea       @m68kde~1_132.L
000027A0  5222      
000027A2  4EB8 26A4 4326          jsr       _PrintErrorMessageandAbort
000027A6  584F      4327          addq.w    #4,A7
000027A8  4E75      4328          rts
                    4329   ; }
                    4330   ; void Trapv() {
                    4331   _Trapv:
                    4332   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000027AA  4879 0000 4333          pea       @m68kde~1_133.L
000027AE  5234      
000027B0  4EB8 26A4 4334          jsr       _PrintErrorMessageandAbort
000027B4  584F      4335          addq.w    #4,A7
000027B6  4E75      4336          rts
                    4337   ; }
                    4338   ; void PrivError() {
                    4339   _PrivError:
                    4340   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000027B8  4879 0000 4341          pea       @m68kde~1_134.L
000027BC  5246      
000027BE  4EB8 26A4 4342          jsr       _PrintErrorMessageandAbort
000027C2  584F      4343          addq.w    #4,A7
000027C4  4E75      4344          rts
                    4345   ; }
                    4346   ; void UnitIRQ() {
                    4347   _UnitIRQ:
                    4348   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
000027C6  4879 0000 4349          pea       @m68kde~1_135.L
000027CA  525A      
000027CC  4EB8 26A4 4350          jsr       _PrintErrorMessageandAbort
000027D0  584F      4351          addq.w    #4,A7
000027D2  4E75      4352          rts
                    4353   ; }
                    4354   ; void Spurious() {
                    4355   _Spurious:
                    4356   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
000027D4  4879 0000 4357          pea       @m68kde~1_136.L
000027D8  526C      
000027DA  4EB8 26A4 4358          jsr       _PrintErrorMessageandAbort
000027DE  584F      4359          addq.w    #4,A7
000027E0  4E75      4360          rts
                    4361   ; }
                    4362   ; void EnterString(void)
                    4363   ; {
                    4364   _EnterString:
000027E2  4E56 FFFC 4365          link      A6,#-4
000027E6  2F02      4366          move.l    D2,-(A7)
                    4367   ; unsigned char *Start;
                    4368   ; unsigned char c;
                    4369   ; printf("\r\nStart Address in Memory: ") ;
000027E8  4879 0000 4370          pea       @m68kde~1_137.L
000027EC  527A      
000027EE  4EB9 0000 4371          jsr       _printf
000027F2  3900      
000027F4  584F      4372          addq.w    #4,A7
                    4373   ; Start = Get8HexDigits(0) ;
000027F6  42A7      4374          clr.l     -(A7)
000027F8  4EB8 0CA4 4375          jsr       _Get8HexDigits
000027FC  584F      4376          addq.w    #4,A7
000027FE  2400      4377          move.l    D0,D2
                    4378   ; printf("\r\nEnter String (ESC to end) :") ;
00002800  4879 0000 4379          pea       @m68kde~1_138.L
00002804  5296      
00002806  4EB9 0000 4380          jsr       _printf
0000280A  3900      
0000280C  584F      4381          addq.w    #4,A7
                    4382   ; while((c = getchar()) != 0x1b)
                    4383   EnterString_1:
0000280E  4EB9 0000 4384          jsr       _getch
00002812  2F74      
00002814  1D40 FFFF 4385          move.b    D0,-1(A6)
00002818  0C00 001B 4386          cmp.b     #27,D0
0000281C  670A      4387          beq.s     EnterString_3
                    4388   ; *Start++ = c ;
0000281E  2042      4389          move.l    D2,A0
00002820  5282      4390          addq.l    #1,D2
00002822  10AE FFFF 4391          move.b    -1(A6),(A0)
00002826  60E6      4392          bra       EnterString_1
                    4393   EnterString_3:
                    4394   ; *Start = 0x00;  // terminate with a null
00002828  2042      4395          move.l    D2,A0
0000282A  4210      4396          clr.b     (A0)
0000282C  241F      4397          move.l    (A7)+,D2
0000282E  4E5E      4398          unlk      A6
00002830  4E75      4399          rts
                    4400   ; }
                    4401   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4402   ; void clearInputBuffer() {
                    4403   _clearInputBuffer:
00002832  4E56 FFFC 4404          link      A6,#-4
                    4405   ; int c;
                    4406   ; while ((c = getchar()) != '\n' && c != EOF);
                    4407   clearInputBuffer_1:
00002836  4EB9 0000 4408          jsr       _getch
0000283A  2F74      
0000283C  2D40 FFFC 4409          move.l    D0,-4(A6)
00002840  0C80 0000 4410          cmp.l     #10,D0
00002844  000A      
00002846  670E      4411          beq.s     clearInputBuffer_3
00002848  202E FFFC 4412          move.l    -4(A6),D0
0000284C  0C80 FFFF 4413          cmp.l     #-1,D0
00002850  FFFF      
00002852  6702      4414          beq.s     clearInputBuffer_3
00002854  60E0      4415          bra       clearInputBuffer_1
                    4416   clearInputBuffer_3:
00002856  4E5E      4417          unlk      A6
00002858  4E75      4418          rts
                    4419   ; }
                    4420   ; void MemoryTest(void)
                    4421   ; {
                    4422   _MemoryTest:
0000285A  4E56 FF40 4423          link      A6,#-192
0000285E  48E7 3F3C 4424          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002862  45F9 0000 4425          lea       _printf.L,A2
00002866  3900      
00002868  4BF8 0B68 4426          lea       __getch.L,A5
                    4427   ; unsigned int *RamPtr, counter1=1 ;
0000286C  2D7C 0000 4428          move.l    #1,-188(A6)
00002870  0001 FF44 
                    4429   ; register unsigned int i ;
                    4430   ; unsigned int Start, End ;
                    4431   ; char c, text[150];
                    4432   ; unsigned int* addressPointer;
                    4433   ; unsigned int startAddress = NULL;
00002874  42AE FFF0 4434          clr.l     -16(A6)
                    4435   ; unsigned int endAddress = NULL;
00002878  42AE FFF4 4436          clr.l     -12(A6)
                    4437   ; unsigned int byteLength;
                    4438   ; unsigned int dataSize = 0;
0000287C  4285      4439          clr.l     D5
                    4440   ; unsigned int dataPattern = 0;
0000287E  4283      4441          clr.l     D3
                    4442   ; unsigned int currAddress;
                    4443   ; unsigned int addrCount;
                    4444   ; unsigned int intBuffer = NULL;
00002880  7E00      4445          moveq     #0,D7
                    4446   ; unsigned char *startAddressPtr = NULL;
00002882  4282      4447          clr.l     D2
                    4448   ; unsigned char *endAddressPtr = NULL;
00002884  4286      4449          clr.l     D6
                    4450   ; unsigned short int *wordAddressPtr = NULL;
00002886  387C 0000 4451          move.w    #0,A4
                    4452   ; unsigned int *longAddressPtr = NULL;
0000288A  367C 0000 4453          move.w    #0,A3
                    4454   ; // IMPROVEMENTS TO BE MADE:
                    4455   ; // Suppossed to be able to write an odd address as a byte
                    4456   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    4457   ; // printf("\r\nStart Address: ") ;
                    4458   ; // Start = Get8HexDigits(0) ;
                    4459   ; // printf("\r\nEnd Address: ") ;
                    4460   ; // End = Get8HexDigits(0) ;
                    4461   ; // TODO
                    4462   ; scanflush();
0000288E  4EB9 0000 4463          jsr       _scanflush
00002892  32F6      
                    4464   ; memset(text, 0, sizeof(text));  // fills with zeros
00002894  4878 0096 4465          pea       150
00002898  42A7      4466          clr.l     -(A7)
0000289A  486E FF56 4467          pea       -170(A6)
0000289E  4EB9 0000 4468          jsr       _memset
000028A2  3010      
000028A4  DEFC 000C 4469          add.w     #12,A7
                    4470   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
000028A8  4879 0000 4471          pea       @m68kde~1_139.L
000028AC  52B4      
000028AE  4E92      4472          jsr       (A2)
000028B0  584F      4473          addq.w    #4,A7
                    4474   ; dataSize = _getch() - 48;
000028B2  4E95      4475          jsr       (A5)
000028B4  0480 0000 4476          sub.l     #48,D0
000028B8  0030      
000028BA  2A00      4477          move.l    D0,D5
                    4478   ; printf("\n");
000028BC  4879 0000 4479          pea       @m68kde~1_140.L
000028C0  530A      
000028C2  4E92      4480          jsr       (A2)
000028C4  584F      4481          addq.w    #4,A7
                    4482   ; if (dataSize == 0) {
000028C6  4A85      4483          tst.l     D5
000028C8  6600 0058 4484          bne       MemoryTest_1
                    4485   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
000028CC  4879 0000 4486          pea       @m68kde~1_141.L
000028D0  530C      
000028D2  4E92      4487          jsr       (A2)
000028D4  584F      4488          addq.w    #4,A7
                    4489   ; intBuffer = _getch() - 48;
000028D6  4E95      4490          jsr       (A5)
000028D8  0480 0000 4491          sub.l     #48,D0
000028DC  0030      
000028DE  2E00      4492          move.l    D0,D7
                    4493   ; // scanf("%d", &intBuffer);
                    4494   ; switch (intBuffer) {
000028E0  2007      4495          move.l    D7,D0
000028E2  0C80 0000 4496          cmp.l     #4,D0
000028E6  0004      
000028E8  642C      4497          bhs.s     MemoryTest_4
000028EA  E380      4498          asl.l     #1,D0
000028EC  303B 0806 4499          move.w    MemoryTest_5(PC,D0.L),D0
000028F0  4EFB 0002 4500          jmp       MemoryTest_5(PC,D0.W)
                    4501   MemoryTest_5:
000028F4  0008      4502          dc.w      MemoryTest_6-MemoryTest_5
000028F6  000C      4503          dc.w      MemoryTest_7-MemoryTest_5
000028F8  0014      4504          dc.w      MemoryTest_8-MemoryTest_5
000028FA  001C      4505          dc.w      MemoryTest_9-MemoryTest_5
                    4506   MemoryTest_6:
                    4507   ; case(0):
                    4508   ; dataPattern = 0x00; break;
000028FC  4283      4509          clr.l     D3
000028FE  6016      4510          bra.s     MemoryTest_4
                    4511   MemoryTest_7:
                    4512   ; case(1):
                    4513   ; dataPattern = 0xB2; break;
00002900  263C 0000 4514          move.l    #178,D3
00002904  00B2      
00002906  600E      4515          bra.s     MemoryTest_4
                    4516   MemoryTest_8:
                    4517   ; case(2):
                    4518   ; dataPattern = 0xC3; break;
00002908  263C 0000 4519          move.l    #195,D3
0000290C  00C3      
0000290E  6006      4520          bra.s     MemoryTest_4
                    4521   MemoryTest_9:
                    4522   ; case(3):
                    4523   ; dataPattern = 0xD4; break;
00002910  263C 0000 4524          move.l    #212,D3
00002914  00D4      
                    4525   MemoryTest_4:
                    4526   ; }
                    4527   ; dataPattern &= 0xFF;
00002916  C6BC 0000 4528          and.l     #255,D3
0000291A  00FF      
                    4529   ; byteLength = 1;
0000291C  7801      4530          moveq     #1,D4
0000291E  6000 00AE 4531          bra       MemoryTest_11
                    4532   MemoryTest_1:
                    4533   ; } else if (dataSize == 1) {
00002922  0C85 0000 4534          cmp.l     #1,D5
00002926  0001      
00002928  6600 0058 4535          bne       MemoryTest_10
                    4536   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
0000292C  4879 0000 4537          pea       @m68kde~1_142.L
00002930  536E      
00002932  4E92      4538          jsr       (A2)
00002934  584F      4539          addq.w    #4,A7
                    4540   ; intBuffer = _getch() - 48;
00002936  4E95      4541          jsr       (A5)
00002938  0480 0000 4542          sub.l     #48,D0
0000293C  0030      
0000293E  2E00      4543          move.l    D0,D7
                    4544   ; switch (intBuffer) {
00002940  2007      4545          move.l    D7,D0
00002942  0C80 0000 4546          cmp.l     #4,D0
00002946  0004      
00002948  642C      4547          bhs.s     MemoryTest_13
0000294A  E380      4548          asl.l     #1,D0
0000294C  303B 0806 4549          move.w    MemoryTest_14(PC,D0.L),D0
00002950  4EFB 0002 4550          jmp       MemoryTest_14(PC,D0.W)
                    4551   MemoryTest_14:
00002954  0008      4552          dc.w      MemoryTest_15-MemoryTest_14
00002956  000C      4553          dc.w      MemoryTest_16-MemoryTest_14
00002958  0014      4554          dc.w      MemoryTest_17-MemoryTest_14
0000295A  001C      4555          dc.w      MemoryTest_18-MemoryTest_14
                    4556   MemoryTest_15:
                    4557   ; case(0):
                    4558   ; dataPattern = 0x0000; break;
0000295C  4283      4559          clr.l     D3
0000295E  6016      4560          bra.s     MemoryTest_13
                    4561   MemoryTest_16:
                    4562   ; case(1):
                    4563   ; dataPattern = 0x1234; break;
00002960  263C 0000 4564          move.l    #4660,D3
00002964  1234      
00002966  600E      4565          bra.s     MemoryTest_13
                    4566   MemoryTest_17:
                    4567   ; case(2):
                    4568   ; dataPattern = 0xA1B2; break;
00002968  263C 0000 4569          move.l    #41394,D3
0000296C  A1B2      
0000296E  6006      4570          bra.s     MemoryTest_13
                    4571   MemoryTest_18:
                    4572   ; case(3):
                    4573   ; dataPattern = 0xC3D4; break;
00002970  263C 0000 4574          move.l    #50132,D3
00002974  C3D4      
                    4575   MemoryTest_13:
                    4576   ; }
                    4577   ; dataPattern &= 0xFFFF;
00002976  C6BC 0000 4578          and.l     #65535,D3
0000297A  FFFF      
                    4579   ; byteLength = 2;
0000297C  7802      4580          moveq     #2,D4
0000297E  6000 004E 4581          bra       MemoryTest_11
                    4582   MemoryTest_10:
                    4583   ; } else {
                    4584   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
00002982  4879 0000 4585          pea       @m68kde~1_143.L
00002986  53D8      
00002988  4E92      4586          jsr       (A2)
0000298A  584F      4587          addq.w    #4,A7
                    4588   ; intBuffer = _getch() - 48;
0000298C  4E95      4589          jsr       (A5)
0000298E  0480 0000 4590          sub.l     #48,D0
00002992  0030      
00002994  2E00      4591          move.l    D0,D7
                    4592   ; switch (intBuffer) {
00002996  2007      4593          move.l    D7,D0
00002998  0C80 0000 4594          cmp.l     #4,D0
0000299C  0004      
0000299E  642C      4595          bhs.s     MemoryTest_20
000029A0  E380      4596          asl.l     #1,D0
000029A2  303B 0806 4597          move.w    MemoryTest_21(PC,D0.L),D0
000029A6  4EFB 0002 4598          jmp       MemoryTest_21(PC,D0.W)
                    4599   MemoryTest_21:
000029AA  0008      4600          dc.w      MemoryTest_22-MemoryTest_21
000029AC  000C      4601          dc.w      MemoryTest_23-MemoryTest_21
000029AE  0014      4602          dc.w      MemoryTest_24-MemoryTest_21
000029B0  001C      4603          dc.w      MemoryTest_25-MemoryTest_21
                    4604   MemoryTest_22:
                    4605   ; case(0):
                    4606   ; dataPattern = 0x00000000; break;
000029B2  4283      4607          clr.l     D3
000029B4  6016      4608          bra.s     MemoryTest_20
                    4609   MemoryTest_23:
                    4610   ; case(1):
                    4611   ; dataPattern = 0xAABBCCDD; break;
000029B6  263C AABB 4612          move.l    #-1430532899,D3
000029BA  CCDD      
000029BC  600E      4613          bra.s     MemoryTest_20
                    4614   MemoryTest_24:
                    4615   ; case(2):
                    4616   ; dataPattern = 0x11223344; break;
000029BE  263C 1122 4617          move.l    #287454020,D3
000029C2  3344      
000029C4  6006      4618          bra.s     MemoryTest_20
                    4619   MemoryTest_25:
                    4620   ; case(3):
                    4621   ; dataPattern = 0x76543210; break;
000029C6  263C 7654 4622          move.l    #1985229328,D3
000029CA  3210      
                    4623   MemoryTest_20:
                    4624   ; }
                    4625   ; byteLength = 4;
000029CC  7804      4626          moveq     #4,D4
                    4627   MemoryTest_11:
                    4628   ; }
                    4629   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    4630   ; while (startAddressPtr == NULL || 
                    4631   MemoryTest_26:
000029CE  4A82      4632          tst.l     D2
000029D0  6732      4633          beq.s     MemoryTest_29
000029D2  0C84 0000 4634          cmp.l     #1,D4
000029D6  0001      
000029D8  6316      4635          bls.s     MemoryTest_30
000029DA  2F02      4636          move.l    D2,-(A7)
000029DC  4878 0002 4637          pea       2
000029E0  4EB9 0000 4638          jsr       ULDIV
000029E4  2E66      
000029E6  202F 0004 4639          move.l    4(A7),D0
000029EA  504F      4640          addq.w    #8,A7
000029EC  4A80      4641          tst.l     D0
000029EE  6614      4642          bne.s     MemoryTest_29
                    4643   MemoryTest_30:
000029F0  0C82 0802 4644          cmp.l     #134348800,D2
000029F4  0000      
000029F6  650C      4645          blo.s     MemoryTest_29
000029F8  203C 0B00 4646          move.l    #184549376,D0
000029FC  0000      
000029FE  9084      4647          sub.l     D4,D0
00002A00  B480      4648          cmp.l     D0,D2
00002A02  6316      4649          bls.s     MemoryTest_28
                    4650   MemoryTest_29:
                    4651   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    4652   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    4653   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    4654   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
00002A04  4879 0000 4655          pea       @m68kde~1_144.L
00002A08  5456      
00002A0A  4E92      4656          jsr       (A2)
00002A0C  584F      4657          addq.w    #4,A7
                    4658   ; startAddressPtr =  Get8HexDigits(0);
00002A0E  42A7      4659          clr.l     -(A7)
00002A10  4EB8 0CA4 4660          jsr       _Get8HexDigits
00002A14  584F      4661          addq.w    #4,A7
00002A16  2400      4662          move.l    D0,D2
00002A18  60B4      4663          bra       MemoryTest_26
                    4664   MemoryTest_28:
                    4665   ; }
                    4666   ; while (endAddressPtr == NULL || 
                    4667   MemoryTest_31:
00002A1A  4A86      4668          tst.l     D6
00002A1C  670A      4669          beq.s     MemoryTest_34
00002A1E  202E FFF0 4670          move.l    -16(A6),D0
00002A22  D084      4671          add.l     D4,D0
00002A24  BC80      4672          cmp.l     D0,D6
00002A26  6416      4673          bhs.s     MemoryTest_33
                    4674   MemoryTest_34:
                    4675   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    4676   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00002A28  4879 0000 4677          pea       @m68kde~1_145.L
00002A2C  548E      
00002A2E  4E92      4678          jsr       (A2)
00002A30  584F      4679          addq.w    #4,A7
                    4680   ; endAddressPtr =  Get8HexDigits(0);
00002A32  42A7      4681          clr.l     -(A7)
00002A34  4EB8 0CA4 4682          jsr       _Get8HexDigits
00002A38  584F      4683          addq.w    #4,A7
00002A3A  2C00      4684          move.l    D0,D6
00002A3C  60DC      4685          bra       MemoryTest_31
                    4686   MemoryTest_33:
                    4687   ; }
                    4688   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00002A3E  2F02      4689          move.l    D2,-(A7)
00002A40  4879 0000 4690          pea       @m68kde~1_146.L
00002A44  54C4      
00002A46  4E92      4691          jsr       (A2)
00002A48  504F      4692          addq.w    #8,A7
                    4693   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
00002A4A  2F06      4694          move.l    D6,-(A7)
00002A4C  4879 0000 4695          pea       @m68kde~1_147.L
00002A50  54DC      
00002A52  4E92      4696          jsr       (A2)
00002A54  504F      4697          addq.w    #8,A7
                    4698   ; addrCount = 0;
00002A56  42AE FFFC 4699          clr.l     -4(A6)
                    4700   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    4701   MemoryTest_35:
00002A5A  B486      4702          cmp.l     D6,D2
00002A5C  6400 0132 4703          bhs       MemoryTest_37
00002A60  2006      4704          move.l    D6,D0
00002A62  9082      4705          sub.l     D2,D0
00002A64  5280      4706          addq.l    #1,D0
00002A66  B084      4707          cmp.l     D4,D0
00002A68  6500 0126 4708          blo       MemoryTest_37
                    4709   ; // If address goes beyond 0x0B00_0000 then break
                    4710   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
00002A6C  203C 0B00 4711          move.l    #184549376,D0
00002A70  0000      
00002A72  9084      4712          sub.l     D4,D0
00002A74  B480      4713          cmp.l     D0,D2
00002A76  6310      4714          bls.s     MemoryTest_38
                    4715   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
00002A78  2F02      4716          move.l    D2,-(A7)
00002A7A  4879 0000 4717          pea       @m68kde~1_148.L
00002A7E  54F2      
00002A80  4E92      4718          jsr       (A2)
00002A82  504F      4719          addq.w    #8,A7
                    4720   ; break;
00002A84  6000 010A 4721          bra       MemoryTest_37
                    4722   MemoryTest_38:
                    4723   ; }
                    4724   ; longAddressPtr = startAddressPtr;
00002A88  2642      4725          move.l    D2,A3
                    4726   ; wordAddressPtr = startAddressPtr;
00002A8A  2842      4727          move.l    D2,A4
                    4728   ; if (dataSize == 0) {
00002A8C  4A85      4729          tst.l     D5
00002A8E  6600 0034 4730          bne       MemoryTest_40
                    4731   ; *startAddressPtr = dataPattern;
00002A92  2042      4732          move.l    D2,A0
00002A94  1083      4733          move.b    D3,(A0)
                    4734   ; if ((*startAddressPtr) != dataPattern) {
00002A96  2042      4735          move.l    D2,A0
00002A98  1010      4736          move.b    (A0),D0
00002A9A  C0BC 0000 4737          and.l     #255,D0
00002A9E  00FF      
00002AA0  B083      4738          cmp.l     D3,D0
00002AA2  671C      4739          beq.s     MemoryTest_42
                    4740   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002AA4  2F03      4741          move.l    D3,-(A7)
00002AA6  2042      4742          move.l    D2,A0
00002AA8  1210      4743          move.b    (A0),D1
00002AAA  C2BC 0000 4744          and.l     #255,D1
00002AAE  00FF      
00002AB0  2F01      4745          move.l    D1,-(A7)
00002AB2  2F02      4746          move.l    D2,-(A7)
00002AB4  4879 0000 4747          pea       @m68kde~1_149.L
00002AB8  5524      
00002ABA  4E92      4748          jsr       (A2)
00002ABC  DEFC 0010 4749          add.w     #16,A7
                    4750   MemoryTest_42:
00002AC0  6000 0058 4751          bra       MemoryTest_48
                    4752   MemoryTest_40:
                    4753   ; }
                    4754   ; } else if (dataSize == 1) {
00002AC4  0C85 0000 4755          cmp.l     #1,D5
00002AC8  0001      
00002ACA  662C      4756          bne.s     MemoryTest_44
                    4757   ; *wordAddressPtr = dataPattern;
00002ACC  3883      4758          move.w    D3,(A4)
                    4759   ; if ((*wordAddressPtr) != dataPattern) {
00002ACE  3014      4760          move.w    (A4),D0
00002AD0  C0BC 0000 4761          and.l     #65535,D0
00002AD4  FFFF      
00002AD6  B083      4762          cmp.l     D3,D0
00002AD8  671C      4763          beq.s     MemoryTest_46
                    4764   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002ADA  2F03      4765          move.l    D3,-(A7)
00002ADC  2042      4766          move.l    D2,A0
00002ADE  1210      4767          move.b    (A0),D1
00002AE0  C2BC 0000 4768          and.l     #255,D1
00002AE4  00FF      
00002AE6  2F01      4769          move.l    D1,-(A7)
00002AE8  2F02      4770          move.l    D2,-(A7)
00002AEA  4879 0000 4771          pea       @m68kde~1_149.L
00002AEE  5524      
00002AF0  4E92      4772          jsr       (A2)
00002AF2  DEFC 0010 4773          add.w     #16,A7
                    4774   MemoryTest_46:
00002AF6  6022      4775          bra.s     MemoryTest_48
                    4776   MemoryTest_44:
                    4777   ; }
                    4778   ; } else {
                    4779   ; *longAddressPtr = dataPattern;
00002AF8  2683      4780          move.l    D3,(A3)
                    4781   ; if ((*longAddressPtr) != dataPattern) {
00002AFA  B693      4782          cmp.l     (A3),D3
00002AFC  671C      4783          beq.s     MemoryTest_48
                    4784   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002AFE  2F03      4785          move.l    D3,-(A7)
00002B00  2042      4786          move.l    D2,A0
00002B02  1210      4787          move.b    (A0),D1
00002B04  C2BC 0000 4788          and.l     #255,D1
00002B08  00FF      
00002B0A  2F01      4789          move.l    D1,-(A7)
00002B0C  2F02      4790          move.l    D2,-(A7)
00002B0E  4879 0000 4791          pea       @m68kde~1_149.L
00002B12  5524      
00002B14  4E92      4792          jsr       (A2)
00002B16  DEFC 0010 4793          add.w     #16,A7
                    4794   MemoryTest_48:
                    4795   ; }
                    4796   ; }
                    4797   ; // if ((*startAddressPtr) != dataPattern) {
                    4798   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    4799   ; // }
                    4800   ; addrCount++;
00002B1A  52AE FFFC 4801          addq.l    #1,-4(A6)
                    4802   ; if (addrCount % 128 == 0) {
00002B1E  2F2E FFFC 4803          move.l    -4(A6),-(A7)
00002B22  4878 0080 4804          pea       128
00002B26  4EB9 0000 4805          jsr       ULDIV
00002B2A  2E66      
00002B2C  202F 0004 4806          move.l    4(A7),D0
00002B30  504F      4807          addq.w    #8,A7
00002B32  4A80      4808          tst.l     D0
00002B34  6600 0054 4809          bne       MemoryTest_55
                    4810   ; if (dataSize == 0) {
00002B38  4A85      4811          tst.l     D5
00002B3A  661C      4812          bne.s     MemoryTest_52
                    4813   ; printf("Address: 0x%x Value: 0x%02X\n",
00002B3C  2042      4814          move.l    D2,A0
00002B3E  1210      4815          move.b    (A0),D1
00002B40  C2BC 0000 4816          and.l     #255,D1
00002B44  00FF      
00002B46  2F01      4817          move.l    D1,-(A7)
00002B48  2F02      4818          move.l    D2,-(A7)
00002B4A  4879 0000 4819          pea       @m68kde~1_150.L
00002B4E  556A      
00002B50  4E92      4820          jsr       (A2)
00002B52  DEFC 000C 4821          add.w     #12,A7
00002B56  6032      4822          bra.s     MemoryTest_55
                    4823   MemoryTest_52:
                    4824   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    4825   ; }
                    4826   ; else if (dataSize == 1) {
00002B58  0C85 0000 4827          cmp.l     #1,D5
00002B5C  0001      
00002B5E  661A      4828          bne.s     MemoryTest_54
                    4829   ; printf("Address: 0x%x Value: 0x%04X\n",
00002B60  3214      4830          move.w    (A4),D1
00002B62  C2BC 0000 4831          and.l     #65535,D1
00002B66  FFFF      
00002B68  2F01      4832          move.l    D1,-(A7)
00002B6A  2F0C      4833          move.l    A4,-(A7)
00002B6C  4879 0000 4834          pea       @m68kde~1_151.L
00002B70  5588      
00002B72  4E92      4835          jsr       (A2)
00002B74  DEFC 000C 4836          add.w     #12,A7
00002B78  6010      4837          bra.s     MemoryTest_55
                    4838   MemoryTest_54:
                    4839   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    4840   ; }
                    4841   ; else {
                    4842   ; printf("Address: 0x%x Value: 0x%08X\n",
00002B7A  2F13      4843          move.l    (A3),-(A7)
00002B7C  2F0B      4844          move.l    A3,-(A7)
00002B7E  4879 0000 4845          pea       @m68kde~1_152.L
00002B82  55A6      
00002B84  4E92      4846          jsr       (A2)
00002B86  DEFC 000C 4847          add.w     #12,A7
                    4848   MemoryTest_55:
                    4849   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    4850   ; }
                    4851   ; }
                    4852   ; startAddressPtr += byteLength;
00002B8A  D484      4853          add.l     D4,D2
00002B8C  6000 FECC 4854          bra       MemoryTest_35
                    4855   MemoryTest_37:
00002B90  4CDF 3CFC 4856          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002B94  4E5E      4857          unlk      A6
00002B96  4E75      4858          rts
                    4859   ; }
                    4860   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4861   ; }
                    4862   ; void main(void)
                    4863   ; {
                    4864   _main:
00002B98  4E56 FFF4 4865          link      A6,#-12
00002B9C  48E7 3030 4866          movem.l   D2/D3/A2/A3,-(A7)
00002BA0  45F8 0A30 4867          lea       _InstallExceptionHandler.L,A2
00002BA4  47F9 0000 4868          lea       _printf.L,A3
00002BA8  3900      
                    4869   ; char c ;
                    4870   ; int i, j ;
                    4871   ; char *BugMessage = "DE1-68k Bug V1.77";
00002BAA  41F9 0000 4872          lea       @m68kde~1_153.L,A0
00002BAE  55C4      
00002BB0  2608      4873          move.l    A0,D3
                    4874   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002BB2  41F9 0000 4875          lea       @m68kde~1_154.L,A0
00002BB6  55D6      
00002BB8  2D48 FFFC 4876          move.l    A0,-4(A6)
                    4877   ; KillAllBreakPoints() ;
00002BBC  4EB8 1EDE 4878          jsr       _KillAllBreakPoints
                    4879   ; i = x = y = z = PortA_Count = 0;
00002BC0  42B9 0B00 4880          clr.l     _PortA_Count.L
00002BC4  00D4      
00002BC6  42B9 0B00 4881          clr.l     _z.L
00002BCA  00D0      
00002BCC  42B9 0B00 4882          clr.l     _y.L
00002BD0  00CC      
00002BD2  42B9 0B00 4883          clr.l     _x.L
00002BD6  00C8      
00002BD8  4282      4884          clr.l     D2
                    4885   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002BDA  42B9 0B00 4886          clr.l     _GoFlag.L
00002BDE  00DC      
00002BE0  42B9 0B00 4887          clr.l     _Trace.L
00002BE4  00D8      
                    4888   ; Echo = 1 ;
00002BE6  23FC 0000 4889          move.l    #1,_Echo.L
00002BEA  0001 0B00 
00002BEE  00E0      
                    4890   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002BF0  42B9 0B00 4891          clr.l     _d7.L
00002BF4  0100      
00002BF6  42B9 0B00 4892          clr.l     _d6.L
00002BFA  00FC      
00002BFC  42B9 0B00 4893          clr.l     _d5.L
00002C00  00F8      
00002C02  42B9 0B00 4894          clr.l     _d4.L
00002C06  00F4      
00002C08  42B9 0B00 4895          clr.l     _d3.L
00002C0C  00F0      
00002C0E  42B9 0B00 4896          clr.l     _d2.L
00002C12  00EC      
00002C14  42B9 0B00 4897          clr.l     _d1.L
00002C18  00E8      
00002C1A  42B9 0B00 4898          clr.l     _d0.L
00002C1E  00E4      
                    4899   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002C20  42B9 0B00 4900          clr.l     _a6.L
00002C24  011C      
00002C26  42B9 0B00 4901          clr.l     _a5.L
00002C2A  0118      
00002C2C  42B9 0B00 4902          clr.l     _a4.L
00002C30  0114      
00002C32  42B9 0B00 4903          clr.l     _a3.L
00002C36  0110      
00002C38  42B9 0B00 4904          clr.l     _a2.L
00002C3C  010C      
00002C3E  42B9 0B00 4905          clr.l     _a1.L
00002C42  0108      
00002C44  42B9 0B00 4906          clr.l     _a0.L
00002C48  0104      
                    4907   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002C4A  23FC 0800 4908          move.l    #134217728,_PC.L
00002C4E  0000 0B00 
00002C52  0120      
00002C54  23FC 0C00 4909          move.l    #201326592,_SSP.L
00002C58  0000 0B00 
00002C5C  0124      
00002C5E  23FC 0C00 4910          move.l    #201326592,_USP.L
00002C62  0000 0B00 
00002C66  0128      
                    4911   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002C68  33FC 2000 4912          move.w    #8192,_SR.L
00002C6C  0B00 012C 
                    4913   ; // Initialise Breakpoint variables
                    4914   ; for(i = 0; i < 8; i++)  {
00002C70  4282      4915          clr.l     D2
                    4916   main_1:
00002C72  0C82 0000 4917          cmp.l     #8,D2
00002C76  0008      
00002C78  6C00 004C 4918          bge       main_3
                    4919   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002C7C  2002      4920          move.l    D2,D0
00002C7E  E588      4921          lsl.l     #2,D0
00002C80  41F9 0B00 4922          lea       _BreakPointAddress.L,A0
00002C84  012E      
00002C86  42B0 0800 4923          clr.l     0(A0,D0.L)
                    4924   ; WatchPointAddress[i] = 0 ;
00002C8A  2002      4925          move.l    D2,D0
00002C8C  E588      4926          lsl.l     #2,D0
00002C8E  41F9 0B00 4927          lea       _WatchPointAddress.L,A0
00002C92  0182      
00002C94  42B0 0800 4928          clr.l     0(A0,D0.L)
                    4929   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002C98  2002      4930          move.l    D2,D0
00002C9A  E388      4931          lsl.l     #1,D0
00002C9C  41F9 0B00 4932          lea       _BreakPointInstruction.L,A0
00002CA0  014E      
00002CA2  4270 0800 4933          clr.w     0(A0,D0.L)
                    4934   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002CA6  2002      4935          move.l    D2,D0
00002CA8  E588      4936          lsl.l     #2,D0
00002CAA  41F9 0B00 4937          lea       _BreakPointSetOrCleared.L,A0
00002CAE  015E      
00002CB0  42B0 0800 4938          clr.l     0(A0,D0.L)
                    4939   ; WatchPointSetOrCleared[i] = 0;
00002CB4  2002      4940          move.l    D2,D0
00002CB6  E588      4941          lsl.l     #2,D0
00002CB8  41F9 0B00 4942          lea       _WatchPointSetOrCleared.L,A0
00002CBC  01A2      
00002CBE  42B0 0800 4943          clr.l     0(A0,D0.L)
00002CC2  5282      4944          addq.l    #1,D2
00002CC4  60AC      4945          bra       main_1
                    4946   main_3:
                    4947   ; }
                    4948   ; Init_RS232() ;     // initialise the RS232 port
00002CC6  4EB8 0B12 4949          jsr       _Init_RS232
                    4950   ; Init_LCD() ;
00002CCA  4EB8 095E 4951          jsr       _Init_LCD
                    4952   ; SPI_Init();
00002CCE  4EB8 10FC 4953          jsr       _SPI_Init
                    4954   ; for( i = 32; i < 48; i++)
00002CD2  7420      4955          moveq     #32,D2
                    4956   main_4:
00002CD4  0C82 0000 4957          cmp.l     #48,D2
00002CD8  0030      
00002CDA  6C0E      4958          bge.s     main_6
                    4959   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002CDC  2F02      4960          move.l    D2,-(A7)
00002CDE  4878 2756 4961          pea       _UnhandledTrap.L
00002CE2  4E92      4962          jsr       (A2)
00002CE4  504F      4963          addq.w    #8,A7
00002CE6  5282      4964          addq.l    #1,D2
00002CE8  60EA      4965          bra       main_4
                    4966   main_6:
                    4967   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002CEA  4878 002F 4968          pea       47
00002CEE  4878 2430 4969          pea       _menu.L
00002CF2  4E92      4970          jsr       (A2)
00002CF4  504F      4971          addq.w    #8,A7
                    4972   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002CF6  4878 0019 4973          pea       25
00002CFA  4878 26FC 4974          pea       _UnhandledIRQ1.L
00002CFE  4E92      4975          jsr       (A2)
00002D00  504F      4976          addq.w    #8,A7
                    4977   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002D02  4878 001A 4978          pea       26
00002D06  4878 2708 4979          pea       _UnhandledIRQ2.L
00002D0A  4E92      4980          jsr       (A2)
00002D0C  504F      4981          addq.w    #8,A7
                    4982   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002D0E  4878 001B 4983          pea       27
00002D12  4878 2714 4984          pea       _UnhandledIRQ3.L
00002D16  4E92      4985          jsr       (A2)
00002D18  504F      4986          addq.w    #8,A7
                    4987   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002D1A  4878 001C 4988          pea       28
00002D1E  4878 2720 4989          pea       _UnhandledIRQ4.L
00002D22  4E92      4990          jsr       (A2)
00002D24  504F      4991          addq.w    #8,A7
                    4992   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002D26  4878 001D 4993          pea       29
00002D2A  4878 272C 4994          pea       _UnhandledIRQ5.L
00002D2E  4E92      4995          jsr       (A2)
00002D30  504F      4996          addq.w    #8,A7
                    4997   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002D32  4878 001E 4998          pea       30
00002D36  4878 2738 4999          pea       _UnhandledIRQ6.L
00002D3A  4E92      5000          jsr       (A2)
00002D3C  504F      5001          addq.w    #8,A7
                    5002   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002D3E  4878 001F 5003          pea       31
00002D42  4878 274A 5004          pea       _UnhandledIRQ7.L
00002D46  4E92      5005          jsr       (A2)
00002D48  504F      5006          addq.w    #8,A7
                    5007   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002D4A  4878 002E 5008          pea       46
00002D4E  4878 216C 5009          pea       _HandleBreakPoint.L
00002D52  4E92      5010          jsr       (A2)
00002D54  504F      5011          addq.w    #8,A7
                    5012   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002D56  4878 001D 5013          pea       29
00002D5A  4878 184C 5014          pea       _DumpRegistersandPause.L
00002D5E  4E92      5015          jsr       (A2)
00002D60  504F      5016          addq.w    #8,A7
                    5017   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002D62  4878 0002 5018          pea       2
00002D66  4878 2764 5019          pea       _BusError.L
00002D6A  4E92      5020          jsr       (A2)
00002D6C  504F      5021          addq.w    #8,A7
                    5022   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002D6E  4878 0003 5023          pea       3
00002D72  4878 2772 5024          pea       _AddressError.L
00002D76  4E92      5025          jsr       (A2)
00002D78  504F      5026          addq.w    #8,A7
                    5027   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002D7A  4878 0004 5028          pea       4
00002D7E  4878 2780 5029          pea       _IllegalInstruction.L
00002D82  4E92      5030          jsr       (A2)
00002D84  504F      5031          addq.w    #8,A7
                    5032   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002D86  4878 0005 5033          pea       5
00002D8A  4878 278E 5034          pea       _Dividebyzero.L
00002D8E  4E92      5035          jsr       (A2)
00002D90  504F      5036          addq.w    #8,A7
                    5037   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002D92  4878 0006 5038          pea       6
00002D96  4878 279C 5039          pea       _Check.L
00002D9A  4E92      5040          jsr       (A2)
00002D9C  504F      5041          addq.w    #8,A7
                    5042   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002D9E  4878 0007 5043          pea       7
00002DA2  4878 27AA 5044          pea       _Trapv.L
00002DA6  4E92      5045          jsr       (A2)
00002DA8  504F      5046          addq.w    #8,A7
                    5047   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002DAA  4878 0008 5048          pea       8
00002DAE  4878 27B8 5049          pea       _PrivError.L
00002DB2  4E92      5050          jsr       (A2)
00002DB4  504F      5051          addq.w    #8,A7
                    5052   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002DB6  4878 000F 5053          pea       15
00002DBA  4878 27C6 5054          pea       _UnitIRQ.L
00002DBE  4E92      5055          jsr       (A2)
00002DC0  504F      5056          addq.w    #8,A7
                    5057   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002DC2  4878 0018 5058          pea       24
00002DC6  4878 279C 5059          pea       _Check.L
00002DCA  4E92      5060          jsr       (A2)
00002DCC  504F      5061          addq.w    #8,A7
                    5062   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002DCE  4EB8 0BA6 5063          jsr       _FlushKeyboard
                    5064   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002DD2  4239 0040 5065          clr.b     4194314
00002DD6  000A      
                    5066   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5067   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5068   main_7:
00002DD8  1039 0040 5069          move.b    4194306,D0
00002DDC  0002      
00002DDE  C03C 0002 5070          and.b     #2,D0
00002DE2  0C00 0002 5071          cmp.b     #2,D0
00002DE6  662A      5072          bne.s     main_9
                    5073   ; LoadFromFlashChip();
00002DE8  4EB8 1364 5074          jsr       _LoadFromFlashChip
                    5075   ; printf("\r\nRunning.....") ;
00002DEC  4879 0000 5076          pea       @m68kde~1_155.L
00002DF0  55F4      
00002DF2  4E93      5077          jsr       (A3)
00002DF4  584F      5078          addq.w    #4,A7
                    5079   ; Oline1("Running.....") ;
00002DF6  4879 0000 5080          pea       @m68kde~1_156.L
00002DFA  5604      
00002DFC  4EB8 0A02 5081          jsr       _Oline1
00002E00  584F      5082          addq.w    #4,A7
                    5083   ; GoFlag = 1;
00002E02  23FC 0000 5084          move.l    #1,_GoFlag.L
00002E06  0001 0B00 
00002E0A  00DC      
                    5085   ; go() ;
00002E0C  4EB8 08B8 5086          jsr       _go
00002E10  60C6      5087          bra       main_7
                    5088   main_9:
                    5089   ; }
                    5090   ; // otherwise start the debug monitor
                    5091   ; Oline0(BugMessage) ;
00002E12  2F03      5092          move.l    D3,-(A7)
00002E14  4EB8 09D4 5093          jsr       _Oline0
00002E18  584F      5094          addq.w    #4,A7
                    5095   ; Oline1("By: PJ Davies") ;
00002E1A  4879 0000 5096          pea       @m68kde~1_157.L
00002E1E  5612      
00002E20  4EB8 0A02 5097          jsr       _Oline1
00002E24  584F      5098          addq.w    #4,A7
                    5099   ; printf("\r\n%s", BugMessage) ;
00002E26  2F03      5100          move.l    D3,-(A7)
00002E28  4879 0000 5101          pea       @m68kde~1_158.L
00002E2C  5620      
00002E2E  4E93      5102          jsr       (A3)
00002E30  504F      5103          addq.w    #8,A7
                    5104   ; printf("\r\n%s", CopyrightMessage) ;
00002E32  2F2E FFFC 5105          move.l    -4(A6),-(A7)
00002E36  4879 0000 5106          pea       @m68kde~1_158.L
00002E3A  5620      
00002E3C  4E93      5107          jsr       (A3)
00002E3E  504F      5108          addq.w    #8,A7
                    5109   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00002E40  4879 0000 5110          pea       @m68kde~1_159.L
00002E44  5626      
00002E46  4E93      5111          jsr       (A3)
00002E48  584F      5112          addq.w    #4,A7
                    5113   ; menu();
00002E4A  4EB8 2430 5114          jsr       _menu
00002E4E  4CDF 0C0C 5115          movem.l   (A7)+,D2/D3/A2/A3
00002E52  4E5E      5116          unlk      A6
00002E54  4E75      5117          rts
                    5118   ; }
                    5119   _strcpy:
00002E56  206F 0004 5120          move.l    (4,A7),A0
00002E5A  226F 0008 5121          move.l    (8,A7),A1
00002E5E  2008      5122          move.l    A0,D0
                    5123   strcpy_1:
00002E60  10D9      5124          move.b    (A1)+,(A0)+
00002E62  66FC      5125          bne       strcpy_1
00002E64  4E75      5126          rts
                    5127   ULDIV:
00002E66  4E56 0000 5128          link    A6,#0
00002E6A  48E7 C000 5129          movem.l D0/D1,-(A7)
00002E6E  222E 0008 5130          move.l  8(A6),D1
00002E72  202E 000C 5131          move.l  12(A6),D0
00002E76  6036      5132          bra.s   ldiv_3
                    5133   LDIV:
00002E78  4E56 0000 5134          link    A6,#0
00002E7C  48E7 C000 5135          movem.l D0/D1,-(A7)
00002E80  222E 0008 5136          move.l  8(A6),D1
00002E84  202E 000C 5137          move.l  12(A6),D0
00002E88  4A80      5138          tst.l   D0
00002E8A  6A0E      5139          bpl.s   ldiv_1
00002E8C  4480      5140          neg.l   D0
00002E8E  4A81      5141          tst.l   D1
00002E90  6A14      5142          bpl.s   ldiv_2
00002E92  4481      5143          neg.l   D1
00002E94  612A      5144          bsr.s   dodiv
00002E96  4481      5145          neg.l   D1
00002E98  6016      5146          bra.s   ldiv_4
                    5147   ldiv_1:
00002E9A  4A81      5148          tst.l   D1
00002E9C  6A10      5149          bpl.s   ldiv_3
00002E9E  4481      5150          neg.l   D1
00002EA0  611E      5151          bsr.s   dodiv
00002EA2  4480      5152          neg.l   D0
00002EA4  600A      5153          bra.s   ldiv_4
                    5154   ldiv_2:
00002EA6  6118      5155          bsr.s   dodiv
00002EA8  4480      5156          neg.l   D0
00002EAA  4481      5157          neg.l   D1
00002EAC  6002      5158          bra.s   ldiv_4
                    5159   ldiv_3:
00002EAE  6110      5160          bsr.s   dodiv
                    5161   ldiv_4:
00002EB0  2D40 0008 5162          move.l  D0,8(A6)
00002EB4  2D41 000C 5163          move.l  D1,12(A6)
00002EB8  4CDF 0003 5164          movem.l (A7)+,D0/D1
00002EBC  4E5E      5165          unlk    A6
00002EBE  4E75      5166          rts
                    5167   dodiv:
00002EC0  0C81 0000 5168          cmpi.l  #$FFFF,D1
00002EC4  FFFF      
00002EC6  6236      5169          bhi.s   dodiv_2
00002EC8  0C80 0000 5170          cmpi.l  #$FFFF,D0
00002ECC  FFFF      
00002ECE  6210      5171          bhi.s   dodiv_1
00002ED0  80C1      5172          divu    D1,D0
00002ED2  2200      5173          move.l  D0,D1
00002ED4  4241      5174          clr.w   D1
00002ED6  4841      5175          swap    D1
00002ED8  0280 0000 5176          andi.l  #$FFFF,D0
00002EDC  FFFF      
00002EDE  4E75      5177          rts
                    5178   dodiv_1:
00002EE0  48A7 A000 5179          movem.w D0/D2,-(A7)
00002EE4  4240      5180          clr.w   D0
00002EE6  4840      5181          swap    D0
00002EE8  80C1      5182          divu    D1,D0
00002EEA  3400      5183          move.w  D0,D2
00002EEC  301F      5184          move.w  (A7)+,D0
00002EEE  80C1      5185          divu    D1,D0
00002EF0  4840      5186          swap    D0
00002EF2  4281      5187          clr.l   D1
00002EF4  3200      5188          move.w  D0,D1
00002EF6  3002      5189          move.w  D2,D0
00002EF8  4840      5190          swap    D0
00002EFA  341F      5191          move.w  (A7)+,D2
00002EFC  4E75      5192          rts
                    5193   dodiv_2:
00002EFE  48E7 3800 5194          movem.l D2/D3/D4,-(A7)
00002F02  2401      5195          move.l  D1,D2
00002F04  4242      5196          clr.w   D2
00002F06  4842      5197          swap    D2
00002F08  5282      5198          addq.l  #1,D2
00002F0A  2600      5199          move.l  D0,D3
00002F0C  2801      5200          move.l  D1,D4
00002F0E  2202      5201          move.l  D2,D1
00002F10  61CE      5202          bsr.s   dodiv_1
00002F12  2204      5203          move.l  D4,D1
00002F14  82C2      5204          divu    D2,D1
00002F16  80C1      5205          divu    D1,D0
00002F18  0280 0000 5206          andi.l  #$FFFF,D0
00002F1C  FFFF      
                    5207   dodiv_3:
00002F1E  2204      5208          move.l  D4,D1
00002F20  2404      5209          move.l  D4,D2
00002F22  4842      5210          swap    D2
00002F24  C2C0      5211          mulu    D0,D1
00002F26  C4C0      5212          mulu    D0,D2
00002F28  4842      5213          swap    D2
00002F2A  D282      5214          add.l   D2,D1
00002F2C  9283      5215          sub.l   D3,D1
00002F2E  620A      5216          bhi.s   dodiv_4
00002F30  4481      5217          neg.l   D1
00002F32  B881      5218          cmp.l   D1,D4
00002F34  6208      5219          bhi.s   dodiv_5
00002F36  5280      5220          addq.l  #1,D0
00002F38  60E4      5221          bra.s   dodiv_3
                    5222   dodiv_4:
00002F3A  5380      5223          subq.l  #1,D0
00002F3C  60E0      5224          bra.s   dodiv_3
                    5225   dodiv_5:
00002F3E  4CDF 001C 5226          movem.l (A7)+,D2/D3/D4
00002F42  4E75      5227          rts
                    5228   _putch:
00002F44  4E56 0000 5229          link      A6,#0
00002F48  48E7 2000 5230          movem.l   D2,-(A7)
00002F4C  242E 0008 5231          move.l    8(A6),D2
00002F50  0C82 0000 5232          cmp.l     #10,D2
00002F54  000A      
00002F56  660A      5233          bne.s     putch_1
00002F58  4878 000D 5234          pea       13
00002F5C  6100 DBDE 5235          bsr       __putch
00002F60  584F      5236          addq.w    #4,A7
                    5237   putch_1:
00002F62  2F02      5238          move.l    D2,-(A7)
00002F64  6100 DBD6 5239          bsr       __putch
00002F68  584F      5240          addq.w    #4,A7
00002F6A  2002      5241          move.l    D2,D0
00002F6C  4CDF 0004 5242          movem.l   (A7)+,D2
00002F70  4E5E      5243          unlk      A6
00002F72  4E75      5244          rts
                    5245   _getch:
00002F74  48E7 2000 5246          movem.l   D2,-(A7)
00002F78  2439 0B00 5247          move.l    __ungetbuf,D2
00002F7C  00C0      
00002F7E  2039 0B00 5248          move.l    __ungetbuf,D0
00002F82  00C0      
00002F84  0C80 FFFF 5249          cmp.l     #-1,D0
00002F88  FFFF      
00002F8A  670C      5250          beq.s     getch_1
00002F8C  23FC FFFF 5251          move.l    #-1,__ungetbuf
00002F90  FFFF 0B00 
00002F94  00C0      
00002F96  6010      5252          bra.s     getch_3
                    5253   getch_1:
00002F98  6100 DBCE 5254          bsr       __getch
00002F9C  2400      5255          move.l    D0,D2
00002F9E  0C80 0000 5256          cmp.l     #13,D0
00002FA2  000D      
00002FA4  6602      5257          bne.s     getch_3
00002FA6  740A      5258          moveq     #10,D2
                    5259   getch_3:
00002FA8  2002      5260          move.l    D2,D0
00002FAA  4CDF 0004 5261          movem.l   (A7)+,D2
00002FAE  4E75      5262          rts
                    5263   _tolower:
00002FB0  4E56 0000 5264          link      A6,#0
00002FB4  48E7 2000 5265          movem.l   D2,-(A7)
00002FB8  242E 0008 5266          move.l    8(A6),D2
00002FBC  0C82 0000 5267          cmp.l     #65,D2
00002FC0  0041      
00002FC2  6D0E      5268          blt.s     tolower_1
00002FC4  0C82 0000 5269          cmp.l     #90,D2
00002FC8  005A      
00002FCA  6E06      5270          bgt.s     tolower_1
00002FCC  84BC 0000 5271          or.l      #32,D2
00002FD0  0020      
                    5272   tolower_1:
00002FD2  2002      5273          move.l    D2,D0
00002FD4  4CDF 0004 5274          movem.l   (A7)+,D2
00002FD8  4E5E      5275          unlk      A6
00002FDA  4E75      5276          rts
                    5277   _sprintf:
00002FDC  4E56 FFFC 5278          link      A6,#-4
00002FE0  48E7 2000 5279          movem.l   D2,-(A7)
00002FE4  41EE 000C 5280          lea       12(A6),A0
00002FE8  5848      5281          addq.w    #4,A0
00002FEA  2408      5282          move.l    A0,D2
00002FEC  2F02      5283          move.l    D2,-(A7)
00002FEE  2F2E 000C 5284          move.l    12(A6),-(A7)
00002FF2  2F2E 0008 5285          move.l    8(A6),-(A7)
00002FF6  6100 09EC 5286          bsr       _vsprintf
00002FFA  DEFC 000C 5287          add.w     #12,A7
00002FFE  2D40 FFFC 5288          move.l    D0,-4(A6)
00003002  4282      5289          clr.l     D2
00003004  202E FFFC 5290          move.l    -4(A6),D0
00003008  4CDF 0004 5291          movem.l   (A7)+,D2
0000300C  4E5E      5292          unlk      A6
0000300E  4E75      5293          rts
                    5294   _memset:
00003010  206F 0004 5295          move.l    (4,A7),A0
00003014  202F 0008 5296          move.l    (8,A7),D0
00003018  222F 000C 5297          move.l    (12,A7),D1
0000301C  2248      5298          move.l    A0,A1	
                    5299   memset_1:
0000301E  12C0      5300          move.b    D0,(A1)+
00003020  5341      5301          subq      #1,D1
00003022  66FA      5302          bne       memset_1
00003024  2008      5303          move.l    A0,D0
00003026  4E75      5304          rts
                    5305   _strcat:
00003028  206F 0004 5306          move.l    (4,A7),A0	
0000302C  226F 0008 5307          move.l    (8,A7),A1	
00003030  2008      5308          move.l    A0,D0		
                    5309   strcat_0:
00003032  4A18      5310          tst.b     (A0)+
00003034  66FC      5311          bne       strcat_0
00003036  5348      5312          subq      #1,A0
                    5313   strcat_1:
00003038  10D9      5314          move.b    (A1)+,(A0)+
0000303A  66FC      5315          bne       strcat_1
0000303C  4E75      5316          rts
                    5317   _toupper:
0000303E  4E56 0000 5318          link      A6,#0
00003042  48E7 2000 5319          movem.l   D2,-(A7)
00003046  242E 0008 5320          move.l    8(A6),D2
0000304A  0C82 0000 5321          cmp.l     #97,D2
0000304E  0061      
00003050  6D0E      5322          blt.s     toupper_1
00003052  0C82 0000 5323          cmp.l     #122,D2
00003056  007A      
00003058  6E06      5324          bgt.s     toupper_1
0000305A  C4BC 0000 5325          and.l     #95,D2
0000305E  005F      
                    5326   toupper_1:
00003060  2002      5327          move.l    D2,D0
00003062  4CDF 0004 5328          movem.l   (A7)+,D2
00003066  4E5E      5329          unlk      A6
00003068  4E75      5330          rts
                    5331   @vsscanf_scanread:
0000306A  4E56 FFFC 5332          link      A6,#-4
0000306E  48E7 0020 5333          movem.l   A2,-(A7)
00003072  45F9 0000 5334          lea       @vsscanf_bufx,A2
00003076  566E      
00003078  4AAE 0008 5335          tst.l     8(A6)
0000307C  6722      5336          beq.s     @vsscanf_scanread_1
0000307E  206E 0008 5337          move.l    8(A6),A0
00003082  58AE 0008 5338          addq.l    #4,8(A6)
00003086  2050      5339          move.l    (A0),A0
00003088  1010      5340          move.b    (A0),D0
0000308A  4880      5341          ext.w     D0
0000308C  48C0      5342          ext.l     D0
0000308E  2D40 FFFC 5343          move.l    D0,-4(A6)
00003092  6706      5344          beq.s     @vsscanf_scanread_3
00003094  202E FFFC 5345          move.l    -4(A6),D0
00003098  6002      5346          bra.s     @vsscanf_scanread_4
                    5347   @vsscanf_scanread_3:
0000309A  70FF      5348          moveq     #-1,D0
                    5349   @vsscanf_scanread_4:
0000309C  6000 0032 5350          bra       @vsscanf_scanread_5
                    5351   @vsscanf_scanread_1:
000030A0  2052      5352          move.l    (A2),A0
000030A2  1010      5353          move.b    (A0),D0
000030A4  6620      5354          bne.s     @vsscanf_scanread_6
000030A6  4879 0B00 5355          pea       @vsscanf_buf
000030AA  0546      
000030AC  6100 1038 5356          bsr       _gets
000030B0  584F      5357          addq.w    #4,A7
000030B2  2480      5358          move.l    D0,(A2)
000030B4  4879 0000 5359          pea       @vsscanf_1
000030B8  5672      
000030BA  4879 0B00 5360          pea       @vsscanf_buf
000030BE  0546      
000030C0  6100 FF66 5361          bsr       _strcat
000030C4  504F      5362          addq.w    #8,A7
                    5363   @vsscanf_scanread_6:
000030C6  2052      5364          move.l    (A2),A0
000030C8  5292      5365          addq.l    #1,(A2)
000030CA  1010      5366          move.b    (A0),D0
000030CC  4880      5367          ext.w     D0
000030CE  48C0      5368          ext.l     D0
                    5369   @vsscanf_scanread_5:
000030D0  4CDF 0400 5370          movem.l   (A7)+,A2
000030D4  4E5E      5371          unlk      A6
000030D6  4E75      5372          rts
                    5373   @vsscanf_scanputback:
000030D8  4E56 0000 5374          link      A6,#0
000030DC  48E7 3000 5375          movem.l   D2/D3,-(A7)
000030E0  242E 000C 5376          move.l    12(A6),D2
000030E4  262E 0008 5377          move.l    8(A6),D3
000030E8  6718      5378          beq.s     @vsscanf_scanputback_1
000030EA  0C82 FFFF 5379          cmp.l     #-1,D2
000030EE  FFFF      
000030F0  670A      5380          beq.s     @vsscanf_scanputback_3
000030F2  5983      5381          subq.l    #4,D3
000030F4  2043      5382          move.l    D3,A0
000030F6  2050      5383          move.l    (A0),A0
000030F8  1082      5384          move.b    D2,(A0)
000030FA  6004      5385          bra.s     @vsscanf_scanputback_4
                    5386   @vsscanf_scanputback_3:
000030FC  2043      5387          move.l    D3,A0
000030FE  5390      5388          subq.l    #1,(A0)
                    5389   @vsscanf_scanputback_4:
00003100  602E      5390          bra.s     @vsscanf_scanputback_6
                    5391   @vsscanf_scanputback_1:
00003102  41F9 0B00 5392          lea       @vsscanf_buf,A0
00003106  0546      
00003108  2008      5393          move.l    A0,D0
0000310A  B0B9 0000 5394          cmp.l     @vsscanf_bufx,D0
0000310E  566E      
00003110  6610      5395          bne.s     @vsscanf_scanputback_5
00003112  4239 0B00 5396          clr.b     @vsscanf_buf
00003116  0546      
00003118  2F02      5397          move.l    D2,-(A7)
0000311A  6100 103C 5398          bsr       _ungetch
0000311E  584F      5399          addq.w    #4,A7
00003120  600E      5400          bra.s     @vsscanf_scanputback_6
                    5401   @vsscanf_scanputback_5:
00003122  53B9 0000 5402          subq.l    #1,@vsscanf_bufx
00003126  566E      
00003128  2079 0000 5403          move.l    @vsscanf_bufx,A0
0000312C  566E      
0000312E  1082      5404          move.b    D2,(A0)
                    5405   @vsscanf_scanputback_6:
00003130  2002      5406          move.l    D2,D0
00003132  4CDF 000C 5407          movem.l   (A7)+,D2/D3
00003136  4E5E      5408          unlk      A6
00003138  4E75      5409          rts
                    5410   @vsscanf_scanspace:
0000313A  4E56 0000 5411          link      A6,#0
0000313E  48E7 2000 5412          movem.l   D2,-(A7)
                    5413   @vsscanf_scanspace_1:
00003142  2F2E 0008 5414          move.l    8(A6),-(A7)
00003146  6100 FF22 5415          bsr       @vsscanf_scanread
0000314A  584F      5416          addq.w    #4,A7
0000314C  2400      5417          move.l    D0,D2
0000314E  206E 000C 5418          move.l    12(A6),A0
00003152  5290      5419          addq.l    #1,(A0)
00003154  2042      5420          move.l    D2,A0
00003156  43F9 0000 5421          lea       __ctype,A1
0000315A  5674      
0000315C  1030 9801 5422          move.b    1(A0,A1.L),D0
00003160  C03C 0010 5423          and.b     #16,D0
00003164  66DC      5424          bne       @vsscanf_scanspace_1
00003166  2002      5425          move.l    D2,D0
00003168  4CDF 0004 5426          movem.l   (A7)+,D2
0000316C  4E5E      5427          unlk      A6
0000316E  4E75      5428          rts
                    5429   @vsscanf_scanselect:
00003170  4E56 0000 5430          link      A6,#0
00003174  48E7 3F20 5431          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00003178  262E 000C 5432          move.l    12(A6),D3
0000317C  2C2E 0018 5433          move.l    24(A6),D6
00003180  2E2E 0014 5434          move.l    20(A6),D7
00003184  2043      5435          move.l    D3,A0
00003186  1010      5436          move.b    (A0),D0
00003188  4880      5437          ext.w     D0
0000318A  48C0      5438          ext.l     D0
0000318C  0C80 0000 5439          cmp.l     #94,D0
00003190  005E      
00003192  6608      5440          bne.s     @vsscanf_scanselect_1
00003194  347C 0001 5441          move.w    #1,A2
00003198  5283      5442          addq.l    #1,D3
0000319A  6004      5443          bra.s     @vsscanf_scanselect_2
                    5444   @vsscanf_scanselect_1:
0000319C  347C 0000 5445          move.w    #0,A2
                    5446   @vsscanf_scanselect_2:
000031A0  202E 0010 5447          move.l    16(A6),D0
000031A4  53AE 0010 5448          subq.l    #1,16(A6)
000031A8  4A80      5449          tst.l     D0
000031AA  6700 0108 5450          beq       @vsscanf_scanselect_5
000031AE  2F2E 0008 5451          move.l    8(A6),-(A7)
000031B2  6100 FEB6 5452          bsr       @vsscanf_scanread
000031B6  584F      5453          addq.w    #4,A7
000031B8  2800      5454          move.l    D0,D4
000031BA  0C84 FFFF 5455          cmp.l     #-1,D4
000031BE  FFFF      
000031C0  6604      5456          bne.s     @vsscanf_scanselect_6
000031C2  6000 00F0 5457          bra       @vsscanf_scanselect_5
                    5458   @vsscanf_scanselect_6:
000031C6  206E 001C 5459          move.l    28(A6),A0
000031CA  5290      5460          addq.l    #1,(A0)
000031CC  4285      5461          clr.l     D5
000031CE  4282      5462          clr.l     D2
                    5463   @vsscanf_scanselect_8:
000031D0  2043      5464          move.l    D3,A0
000031D2  1030 2800 5465          move.b    0(A0,D2.L),D0
000031D6  4880      5466          ext.w     D0
000031D8  48C0      5467          ext.l     D0
000031DA  0C80 0000 5468          cmp.l     #93,D0
000031DE  005D      
000031E0  6700 008E 5469          beq       @vsscanf_scanselect_10
000031E4  4A82      5470          tst.l     D2
000031E6  6716      5471          beq.s     @vsscanf_scanselect_11
000031E8  2043      5472          move.l    D3,A0
000031EA  1030 2800 5473          move.b    0(A0,D2.L),D0
000031EE  4880      5474          ext.w     D0
000031F0  48C0      5475          ext.l     D0
000031F2  0C80 0000 5476          cmp.l     #93,D0
000031F6  005D      
000031F8  6604      5477          bne.s     @vsscanf_scanselect_11
000031FA  6000 0074 5478          bra       @vsscanf_scanselect_10
                    5479   @vsscanf_scanselect_11:
000031FE  4A82      5480          tst.l     D2
00003200  6700 0058 5481          beq       @vsscanf_scanselect_15
00003204  2043      5482          move.l    D3,A0
00003206  1030 2800 5483          move.b    0(A0,D2.L),D0
0000320A  4880      5484          ext.w     D0
0000320C  48C0      5485          ext.l     D0
0000320E  0C80 0000 5486          cmp.l     #45,D0
00003212  002D      
00003214  6600 0044 5487          bne       @vsscanf_scanselect_15
00003218  2043      5488          move.l    D3,A0
0000321A  2002      5489          move.l    D2,D0
0000321C  5380      5490          subq.l    #1,D0
0000321E  2243      5491          move.l    D3,A1
00003220  2F08      5492          move.l    A0,-(A7)
00003222  2042      5493          move.l    D2,A0
00003224  1230 0800 5494          move.b    0(A0,D0.L),D1
00003228  B230 9801 5495          cmp.b     1(A0,A1.L),D1
0000322C  6C00 002C 5496          bge       @vsscanf_scanselect_15
00003230  205F      5497          move.l    (A7)+,A0
00003232  2043      5498          move.l    D3,A0
00003234  2002      5499          move.l    D2,D0
00003236  5380      5500          subq.l    #1,D0
00003238  1030 0800 5501          move.b    0(A0,D0.L),D0
0000323C  4880      5502          ext.w     D0
0000323E  48C0      5503          ext.l     D0
00003240  B880      5504          cmp.l     D0,D4
00003242  6D12      5505          blt.s     @vsscanf_scanselect_17
00003244  2043      5506          move.l    D3,A0
00003246  2242      5507          move.l    D2,A1
00003248  1031 8801 5508          move.b    1(A1,A0.L),D0
0000324C  4880      5509          ext.w     D0
0000324E  48C0      5510          ext.l     D0
00003250  B880      5511          cmp.l     D0,D4
00003252  6E02      5512          bgt.s     @vsscanf_scanselect_17
00003254  601A      5513          bra.s     @vsscanf_scanselect_10
                    5514   @vsscanf_scanselect_17:
00003256  5282      5515          addq.l    #1,D2
00003258  6010      5516          bra.s     @vsscanf_scanselect_19
                    5517   @vsscanf_scanselect_15:
0000325A  2043      5518          move.l    D3,A0
0000325C  1030 2800 5519          move.b    0(A0,D2.L),D0
00003260  4880      5520          ext.w     D0
00003262  48C0      5521          ext.l     D0
00003264  B880      5522          cmp.l     D0,D4
00003266  6602      5523          bne.s     @vsscanf_scanselect_19
00003268  6006      5524          bra.s     @vsscanf_scanselect_10
                    5525   @vsscanf_scanselect_19:
0000326A  5282      5526          addq.l    #1,D2
0000326C  6000 FF62 5527          bra       @vsscanf_scanselect_8
                    5528   @vsscanf_scanselect_10:
00003270  4A82      5529          tst.l     D2
00003272  6712      5530          beq.s     @vsscanf_scanselect_23
00003274  2043      5531          move.l    D3,A0
00003276  1030 2800 5532          move.b    0(A0,D2.L),D0
0000327A  4880      5533          ext.w     D0
0000327C  48C0      5534          ext.l     D0
0000327E  0C80 0000 5535          cmp.l     #93,D0
00003282  005D      
00003284  6702      5536          beq.s     @vsscanf_scanselect_21
                    5537   @vsscanf_scanselect_23:
00003286  7A01      5538          moveq     #1,D5
                    5539   @vsscanf_scanselect_21:
00003288  200A      5540          move.l    A2,D0
0000328A  6712      5541          beq.s     @vsscanf_scanselect_24
0000328C  4A85      5542          tst.l     D5
0000328E  660C      5543          bne.s     @vsscanf_scanselect_26
00003290  4A87      5544          tst.l     D7
00003292  6606      5545          bne.s     @vsscanf_scanselect_28
00003294  2046      5546          move.l    D6,A0
00003296  5286      5547          addq.l    #1,D6
00003298  1084      5548          move.b    D4,(A0)
                    5549   @vsscanf_scanselect_28:
0000329A  6014      5550          bra.s     @vsscanf_scanselect_4
                    5551   @vsscanf_scanselect_26:
0000329C  6016      5552          bra.s     @vsscanf_scanselect_5
                    5553   @vsscanf_scanselect_24:
0000329E  4A85      5554          tst.l     D5
000032A0  670C      5555          beq.s     @vsscanf_scanselect_30
000032A2  4A87      5556          tst.l     D7
000032A4  6606      5557          bne.s     @vsscanf_scanselect_32
000032A6  2046      5558          move.l    D6,A0
000032A8  5286      5559          addq.l    #1,D6
000032AA  1084      5560          move.b    D4,(A0)
                    5561   @vsscanf_scanselect_32:
000032AC  6002      5562          bra.s     @vsscanf_scanselect_4
                    5563   @vsscanf_scanselect_30:
000032AE  6004      5564          bra.s     @vsscanf_scanselect_5
                    5565   @vsscanf_scanselect_4:
000032B0  6000 FEEE 5566          bra       @vsscanf_scanselect_2
                    5567   @vsscanf_scanselect_5:
000032B4  0C84 FFFF 5568          cmp.l     #-1,D4
000032B8  FFFF      
000032BA  6712      5569          beq.s     @vsscanf_scanselect_34
000032BC  2F04      5570          move.l    D4,-(A7)
000032BE  2F2E 0008 5571          move.l    8(A6),-(A7)
000032C2  6100 FE14 5572          bsr       @vsscanf_scanputback
000032C6  504F      5573          addq.w    #8,A7
000032C8  206E 001C 5574          move.l    28(A6),A0
000032CC  5390      5575          subq.l    #1,(A0)
                    5576   @vsscanf_scanselect_34:
000032CE  4A87      5577          tst.l     D7
000032D0  6604      5578          bne.s     @vsscanf_scanselect_36
000032D2  2046      5579          move.l    D6,A0
000032D4  4210      5580          clr.b     (A0)
                    5581   @vsscanf_scanselect_36:
000032D6  5283      5582          addq.l    #1,D3
000032D8  2043      5583          move.l    D3,A0
000032DA  1010      5584          move.b    (A0),D0
000032DC  4880      5585          ext.w     D0
000032DE  48C0      5586          ext.l     D0
000032E0  0C80 0000 5587          cmp.l     #93,D0
000032E4  005D      
000032E6  6702      5588          beq.s     @vsscanf_scanselect_40
000032E8  60EC      5589          bra       @vsscanf_scanselect_36
                    5590   @vsscanf_scanselect_40:
000032EA  5283      5591          addq.l    #1,D3
000032EC  2003      5592          move.l    D3,D0
000032EE  4CDF 04FC 5593          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
000032F2  4E5E      5594          unlk      A6
000032F4  4E75      5595          rts
                    5596   _scanflush:
000032F6  41F9 0B00 5597          lea       @vsscanf_buf,A0
000032FA  0546      
000032FC  23C8 0000 5598          move.l    A0,@vsscanf_bufx
00003300  566E      
00003302  4239 0B00 5599          clr.b     @vsscanf_buf
00003306  0546      
00003308  4878 FFFF 5600          pea       -1
0000330C  6100 0E4A 5601          bsr       _ungetch
00003310  584F      5602          addq.w    #4,A7
00003312  4E75      5603          rts
                    5604   _vsscanf:
00003314  4E56 FF88 5605          link      A6,#-120
00003318  48E7 3F3C 5606          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000331C  47F8 306A 5607          lea       @vsscanf_scanread,A3
00003320  4AAE 0008 5608          tst.l     8(A6)
00003324  6706      5609          beq.s     vsscanf_1
00003326  41EE 0008 5610          lea       8(A6),A0
0000332A  6004      5611          bra.s     vsscanf_2
                    5612   vsscanf_1:
0000332C  4280      5613          clr.l     D0
0000332E  2040      5614          move.l    D0,A0
                    5615   vsscanf_2:
00003330  2A08      5616          move.l    A0,D5
00003332  42AE FFE4 5617          clr.l     -28(A6)
00003336  4284      5618          clr.l     D4
                    5619   vsscanf_3:
00003338  206E 000C 5620          move.l    12(A6),A0
0000333C  52AE 000C 5621          addq.l    #1,12(A6)
00003340  1010      5622          move.b    (A0),D0
00003342  4880      5623          ext.w     D0
00003344  48C0      5624          ext.l     D0
00003346  2600      5625          move.l    D0,D3
00003348  6700 05AC 5626          beq       vsscanf_5
0000334C  4286      5627          clr.l     D6
0000334E  387C 0000 5628          move.w    #0,A4
00003352  0C83 0000 5629          cmp.l     #32,D3
00003356  0020      
00003358  6712      5630          beq.s     vsscanf_8
0000335A  0C83 0000 5631          cmp.l     #9,D3
0000335E  0009      
00003360  670A      5632          beq.s     vsscanf_8
00003362  0C83 0000 5633          cmp.l     #10,D3
00003366  000A      
00003368  6600 0048 5634          bne       vsscanf_6
                    5635   vsscanf_8:
0000336C  2F05      5636          move.l    D5,-(A7)
0000336E  4E93      5637          jsr       (A3)
00003370  584F      5638          addq.w    #4,A7
00003372  2400      5639          move.l    D0,D2
00003374  52AE FFE4 5640          addq.l    #1,-28(A6)
00003378  0C82 FFFF 5641          cmp.l     #-1,D2
0000337C  FFFF      
0000337E  660E      5642          bne.s     vsscanf_11
00003380  4A84      5643          tst.l     D4
00003382  6704      5644          beq.s     vsscanf_13
00003384  2004      5645          move.l    D4,D0
00003386  6002      5646          bra.s     vsscanf_14
                    5647   vsscanf_13:
00003388  70FF      5648          moveq     #-1,D0
                    5649   vsscanf_14:
0000338A  6000 056C 5650          bra       vsscanf_15
                    5651   vsscanf_11:
0000338E  2042      5652          move.l    D2,A0
00003390  43F9 0000 5653          lea       __ctype,A1
00003394  5674      
00003396  1030 9801 5654          move.b    1(A0,A1.L),D0
0000339A  C03C 0010 5655          and.b     #16,D0
0000339E  66CC      5656          bne       vsscanf_8
000033A0  53AE FFE4 5657          subq.l    #1,-28(A6)
000033A4  2F02      5658          move.l    D2,-(A7)
000033A6  2F05      5659          move.l    D5,-(A7)
000033A8  6100 FD2E 5660          bsr       @vsscanf_scanputback
000033AC  504F      5661          addq.w    #8,A7
000033AE  6000 0542 5662          bra       vsscanf_139
                    5663   vsscanf_6:
000033B2  0C83 0000 5664          cmp.l     #37,D3
000033B6  0025      
000033B8  6600 0502 5665          bne       vsscanf_127
000033BC  206E 000C 5666          move.l    12(A6),A0
000033C0  52AE 000C 5667          addq.l    #1,12(A6)
000033C4  1010      5668          move.b    (A0),D0
000033C6  4880      5669          ext.w     D0
000033C8  48C0      5670          ext.l     D0
000033CA  2600      5671          move.l    D0,D3
000033CC  42AE FFEC 5672          clr.l     -20(A6)
000033D0  4286      5673          clr.l     D6
000033D2  42AE FFE8 5674          clr.l     -24(A6)
000033D6  347C 7FFF 5675          move.w    #32767,A2
000033DA  0C83 0000 5676          cmp.l     #42,D3
000033DE  002A      
000033E0  6612      5677          bne.s     vsscanf_18
000033E2  7C01      5678          moveq     #1,D6
000033E4  206E 000C 5679          move.l    12(A6),A0
000033E8  52AE 000C 5680          addq.l    #1,12(A6)
000033EC  1010      5681          move.b    (A0),D0
000033EE  4880      5682          ext.w     D0
000033F0  48C0      5683          ext.l     D0
000033F2  2600      5684          move.l    D0,D3
                    5685   vsscanf_18:
000033F4  2043      5686          move.l    D3,A0
000033F6  43F9 0000 5687          lea       __ctype,A1
000033FA  5674      
000033FC  1030 9801 5688          move.b    1(A0,A1.L),D0
00003400  C03C 0004 5689          and.b     #4,D0
00003404  6700 004E 5690          beq       vsscanf_24
00003408  2003      5691          move.l    D3,D0
0000340A  0480 0000 5692          sub.l     #48,D0
0000340E  0030      
00003410  2440      5693          move.l    D0,A2
                    5694   vsscanf_22:
00003412  206E 000C 5695          move.l    12(A6),A0
00003416  52AE 000C 5696          addq.l    #1,12(A6)
0000341A  1010      5697          move.b    (A0),D0
0000341C  4880      5698          ext.w     D0
0000341E  48C0      5699          ext.l     D0
00003420  2600      5700          move.l    D0,D3
00003422  2040      5701          move.l    D0,A0
00003424  43F9 0000 5702          lea       __ctype,A1
00003428  5674      
0000342A  1030 9801 5703          move.b    1(A0,A1.L),D0
0000342E  C0BC 0000 5704          and.l     #255,D0
00003432  00FF      
00003434  C0BC 0000 5705          and.l     #4,D0
00003438  0004      
0000343A  6718      5706          beq.s     vsscanf_24
0000343C  70D0      5707          moveq     #-48,D0
0000343E  2F0A      5708          move.l    A2,-(A7)
00003440  4878 000A 5709          pea       10
00003444  6100 0C12 5710          bsr       LMUL
00003448  2217      5711          move.l    (A7),D1
0000344A  504F      5712          addq.w    #8,A7
0000344C  D283      5713          add.l     D3,D1
0000344E  D081      5714          add.l     D1,D0
00003450  2440      5715          move.l    D0,A2
00003452  60BE      5716          bra       vsscanf_22
                    5717   vsscanf_24:
00003454  0C83 0000 5718          cmp.l     #108,D3
00003458  006C      
0000345A  6708      5719          beq.s     vsscanf_27
0000345C  0C83 0000 5720          cmp.l     #76,D3
00003460  004C      
00003462  661A      5721          bne.s     vsscanf_25
                    5722   vsscanf_27:
00003464  2D7C 0000 5723          move.l    #1,-24(A6)
00003468  0001 FFE8 
0000346C  206E 000C 5724          move.l    12(A6),A0
00003470  52AE 000C 5725          addq.l    #1,12(A6)
00003474  1010      5726          move.b    (A0),D0
00003476  4880      5727          ext.w     D0
00003478  48C0      5728          ext.l     D0
0000347A  2600      5729          move.l    D0,D3
0000347C  6020      5730          bra.s     vsscanf_28
                    5731   vsscanf_25:
0000347E  0C83 0000 5732          cmp.l     #104,D3
00003482  0068      
00003484  6618      5733          bne.s     vsscanf_28
00003486  2D7C 0000 5734          move.l    #1,-20(A6)
0000348A  0001 FFEC 
0000348E  206E 000C 5735          move.l    12(A6),A0
00003492  52AE 000C 5736          addq.l    #1,12(A6)
00003496  1010      5737          move.b    (A0),D0
00003498  4880      5738          ext.w     D0
0000349A  48C0      5739          ext.l     D0
0000349C  2600      5740          move.l    D0,D3
                    5741   vsscanf_28:
0000349E  0C83 0000 5742          cmp.l     #91,D3
000034A2  005B      
000034A4  6600 0036 5743          bne       vsscanf_30
000034A8  4A86      5744          tst.l     D6
000034AA  660A      5745          bne.s     vsscanf_32
000034AC  206E 0010 5746          move.l    16(A6),A0
000034B0  58AE 0010 5747          addq.l    #4,16(A6)
000034B4  2E10      5748          move.l    (A0),D7
                    5749   vsscanf_32:
000034B6  486E FFE4 5750          pea       -28(A6)
000034BA  2F07      5751          move.l    D7,-(A7)
000034BC  2F06      5752          move.l    D6,-(A7)
000034BE  2F0A      5753          move.l    A2,-(A7)
000034C0  2F2E 000C 5754          move.l    12(A6),-(A7)
000034C4  2F05      5755          move.l    D5,-(A7)
000034C6  6100 FCA8 5756          bsr       @vsscanf_scanselect
000034CA  DEFC 0018 5757          add.w     #24,A7
000034CE  2D40 000C 5758          move.l    D0,12(A6)
000034D2  4A86      5759          tst.l     D6
000034D4  6602      5760          bne.s     vsscanf_34
000034D6  5284      5761          addq.l    #1,D4
                    5762   vsscanf_34:
000034D8  6000 0418 5763          bra       vsscanf_139
                    5764   vsscanf_30:
000034DC  0C83 0000 5765          cmp.l     #110,D3
000034E0  006E      
000034E2  661A      5766          bne.s     vsscanf_36
000034E4  4A86      5767          tst.l     D6
000034E6  6612      5768          bne.s     vsscanf_38
000034E8  206E 0010 5769          move.l    16(A6),A0
000034EC  58AE 0010 5770          addq.l    #4,16(A6)
000034F0  2E10      5771          move.l    (A0),D7
000034F2  2047      5772          move.l    D7,A0
000034F4  20AE FFE4 5773          move.l    -28(A6),(A0)
000034F8  5284      5774          addq.l    #1,D4
                    5775   vsscanf_38:
000034FA  6000 03F6 5776          bra       vsscanf_139
                    5777   vsscanf_36:
000034FE  0C83 0000 5778          cmp.l     #115,D3
00003502  0073      
00003504  6600 00AC 5779          bne       vsscanf_40
00003508  486E FFE4 5780          pea       -28(A6)
0000350C  2F05      5781          move.l    D5,-(A7)
0000350E  6100 FC2A 5782          bsr       @vsscanf_scanspace
00003512  504F      5783          addq.w    #8,A7
00003514  2400      5784          move.l    D0,D2
00003516  4A86      5785          tst.l     D6
00003518  660A      5786          bne.s     vsscanf_42
0000351A  206E 0010 5787          move.l    16(A6),A0
0000351E  58AE 0010 5788          addq.l    #4,16(A6)
00003522  2E10      5789          move.l    (A0),D7
                    5790   vsscanf_42:
00003524  52AE FFE4 5791          addq.l    #1,-28(A6)
                    5792   vsscanf_44:
00003528  200A      5793          move.l    A2,D0
0000352A  534A      5794          subq.w    #1,A2
0000352C  4A80      5795          tst.l     D0
0000352E  6700 0038 5796          beq       vsscanf_46
00003532  2042      5797          move.l    D2,A0
00003534  43F9 0000 5798          lea       __ctype,A1
00003538  5674      
0000353A  1030 9801 5799          move.b    1(A0,A1.L),D0
0000353E  C03C 0010 5800          and.b     #16,D0
00003542  6624      5801          bne.s     vsscanf_46
00003544  0C82 FFFF 5802          cmp.l     #-1,D2
00003548  FFFF      
0000354A  671C      5803          beq.s     vsscanf_46
0000354C  387C 0001 5804          move.w    #1,A4
00003550  4A86      5805          tst.l     D6
00003552  6606      5806          bne.s     vsscanf_47
00003554  2047      5807          move.l    D7,A0
00003556  5287      5808          addq.l    #1,D7
00003558  1082      5809          move.b    D2,(A0)
                    5810   vsscanf_47:
0000355A  2F05      5811          move.l    D5,-(A7)
0000355C  4E93      5812          jsr       (A3)
0000355E  584F      5813          addq.w    #4,A7
00003560  2400      5814          move.l    D0,D2
00003562  52AE FFE4 5815          addq.l    #1,-28(A6)
00003566  60C0      5816          bra       vsscanf_44
                    5817   vsscanf_46:
00003568  4A86      5818          tst.l     D6
0000356A  660A      5819          bne.s     vsscanf_51
0000356C  2047      5820          move.l    D7,A0
0000356E  4210      5821          clr.b     (A0)
00003570  200C      5822          move.l    A4,D0
00003572  6702      5823          beq.s     vsscanf_51
00003574  5284      5824          addq.l    #1,D4
                    5825   vsscanf_51:
00003576  0C82 FFFF 5826          cmp.l     #-1,D2
0000357A  FFFF      
0000357C  6708      5827          beq.s     vsscanf_55
0000357E  4A86      5828          tst.l     D6
00003580  661E      5829          bne.s     vsscanf_53
00003582  200C      5830          move.l    A4,D0
00003584  661A      5831          bne.s     vsscanf_53
                    5832   vsscanf_55:
00003586  4A84      5833          tst.l     D4
00003588  6704      5834          beq.s     vsscanf_56
0000358A  2004      5835          move.l    D4,D0
0000358C  600E      5836          bra.s     vsscanf_59
                    5837   vsscanf_56:
0000358E  0C82 FFFF 5838          cmp.l     #-1,D2
00003592  FFFF      
00003594  6604      5839          bne.s     vsscanf_58
00003596  70FF      5840          moveq     #-1,D0
00003598  6002      5841          bra.s     vsscanf_59
                    5842   vsscanf_58:
0000359A  2004      5843          move.l    D4,D0
                    5844   vsscanf_59:
0000359C  6000 035A 5845          bra       vsscanf_15
                    5846   vsscanf_53:
000035A0  53AE FFE4 5847          subq.l    #1,-28(A6)
000035A4  2F02      5848          move.l    D2,-(A7)
000035A6  2F05      5849          move.l    D5,-(A7)
000035A8  6100 FB2E 5850          bsr       @vsscanf_scanputback
000035AC  504F      5851          addq.w    #8,A7
000035AE  6000 0342 5852          bra       vsscanf_139
                    5853   vsscanf_40:
000035B2  0C83 0000 5854          cmp.l     #99,D3
000035B6  0063      
000035B8  6600 008E 5855          bne       vsscanf_60
000035BC  4A86      5856          tst.l     D6
000035BE  660A      5857          bne.s     vsscanf_62
000035C0  206E 0010 5858          move.l    16(A6),A0
000035C4  58AE 0010 5859          addq.l    #4,16(A6)
000035C8  2E10      5860          move.l    (A0),D7
                    5861   vsscanf_62:
000035CA  2F05      5862          move.l    D5,-(A7)
000035CC  4E93      5863          jsr       (A3)
000035CE  584F      5864          addq.w    #4,A7
000035D0  2400      5865          move.l    D0,D2
000035D2  52AE FFE4 5866          addq.l    #1,-28(A6)
000035D6  200A      5867          move.l    A2,D0
000035D8  0C80 0000 5868          cmp.l     #32767,D0
000035DC  7FFF      
000035DE  6604      5869          bne.s     vsscanf_64
000035E0  347C 0001 5870          move.w    #1,A2
                    5871   vsscanf_64:
000035E4  0C82 FFFF 5872          cmp.l     #-1,D2
000035E8  FFFF      
000035EA  6606      5873          bne.s     vsscanf_66
000035EC  4A86      5874          tst.l     D6
000035EE  6602      5875          bne.s     vsscanf_66
000035F0  5384      5876          subq.l    #1,D4
                    5877   vsscanf_66:
000035F2  200A      5878          move.l    A2,D0
000035F4  534A      5879          subq.w    #1,A2
000035F6  4A80      5880          tst.l     D0
000035F8  6720      5881          beq.s     vsscanf_70
000035FA  0C82 FFFF 5882          cmp.l     #-1,D2
000035FE  FFFF      
00003600  6718      5883          beq.s     vsscanf_70
00003602  4A86      5884          tst.l     D6
00003604  6606      5885          bne.s     vsscanf_71
00003606  2047      5886          move.l    D7,A0
00003608  5287      5887          addq.l    #1,D7
0000360A  1082      5888          move.b    D2,(A0)
                    5889   vsscanf_71:
0000360C  2F05      5890          move.l    D5,-(A7)
0000360E  4E93      5891          jsr       (A3)
00003610  584F      5892          addq.w    #4,A7
00003612  2400      5893          move.l    D0,D2
00003614  52AE FFE4 5894          addq.l    #1,-28(A6)
00003618  60D8      5895          bra       vsscanf_66
                    5896   vsscanf_70:
0000361A  0C82 FFFF 5897          cmp.l     #-1,D2
0000361E  FFFF      
00003620  660E      5898          bne.s     vsscanf_73
00003622  4A84      5899          tst.l     D4
00003624  6704      5900          beq.s     vsscanf_75
00003626  2004      5901          move.l    D4,D0
00003628  6002      5902          bra.s     vsscanf_76
                    5903   vsscanf_75:
0000362A  70FF      5904          moveq     #-1,D0
                    5905   vsscanf_76:
0000362C  6000 02CA 5906          bra       vsscanf_15
                    5907   vsscanf_73:
00003630  4A86      5908          tst.l     D6
00003632  6602      5909          bne.s     vsscanf_77
00003634  5284      5910          addq.l    #1,D4
                    5911   vsscanf_77:
00003636  53AE FFE4 5912          subq.l    #1,-28(A6)
0000363A  2F02      5913          move.l    D2,-(A7)
0000363C  2F05      5914          move.l    D5,-(A7)
0000363E  6100 FA98 5915          bsr       @vsscanf_scanputback
00003642  504F      5916          addq.w    #8,A7
00003644  6000 02AC 5917          bra       vsscanf_139
                    5918   vsscanf_60:
00003648  0C83 0000 5919          cmp.l     #105,D3
0000364C  0069      
0000364E  6600 0060 5920          bne       vsscanf_82
00003652  486E FFE4 5921          pea       -28(A6)
00003656  2F05      5922          move.l    D5,-(A7)
00003658  6100 FAE0 5923          bsr       @vsscanf_scanspace
0000365C  504F      5924          addq.w    #8,A7
0000365E  2400      5925          move.l    D0,D2
00003660  0C82 0000 5926          cmp.l     #48,D2
00003664  0030      
00003666  6600 0038 5927          bne       vsscanf_81
0000366A  387C 0001 5928          move.w    #1,A4
0000366E  2F05      5929          move.l    D5,-(A7)
00003670  4E93      5930          jsr       (A3)
00003672  584F      5931          addq.w    #4,A7
00003674  2400      5932          move.l    D0,D2
00003676  2F02      5933          move.l    D2,-(A7)
00003678  6100 F936 5934          bsr       _tolower
0000367C  584F      5935          addq.w    #4,A7
0000367E  0C80 0000 5936          cmp.l     #120,D0
00003682  0078      
00003684  6604      5937          bne.s     vsscanf_83
00003686  7678      5938          moveq     #120,D3
00003688  6010      5939          bra.s     vsscanf_84
                    5940   vsscanf_83:
0000368A  53AE FFE4 5941          subq.l    #1,-28(A6)
0000368E  2F02      5942          move.l    D2,-(A7)
00003690  2F05      5943          move.l    D5,-(A7)
00003692  6100 FA44 5944          bsr       @vsscanf_scanputback
00003696  504F      5945          addq.w    #8,A7
00003698  766F      5946          moveq     #111,D3
                    5947   vsscanf_84:
0000369A  52AE FFE4 5948          addq.l    #1,-28(A6)
0000369E  6010      5949          bra.s     vsscanf_82
                    5950   vsscanf_81:
000036A0  53AE FFE4 5951          subq.l    #1,-28(A6)
000036A4  2F02      5952          move.l    D2,-(A7)
000036A6  2F05      5953          move.l    D5,-(A7)
000036A8  6100 FA2E 5954          bsr       @vsscanf_scanputback
000036AC  504F      5955          addq.w    #8,A7
000036AE  7664      5956          moveq     #100,D3
                    5957   vsscanf_82:
000036B0  0C83 0000 5958          cmp.l     #100,D3
000036B4  0064      
000036B6  671A      5959          beq.s     vsscanf_87
000036B8  0C83 0000 5960          cmp.l     #117,D3
000036BC  0075      
000036BE  6712      5961          beq.s     vsscanf_87
000036C0  0C83 0000 5962          cmp.l     #120,D3
000036C4  0078      
000036C6  670A      5963          beq.s     vsscanf_87
000036C8  0C83 0000 5964          cmp.l     #111,D3
000036CC  006F      
000036CE  6600 01A4 5965          bne       vsscanf_85
                    5966   vsscanf_87:
000036D2  486E FFE4 5967          pea       -28(A6)
000036D6  2F05      5968          move.l    D5,-(A7)
000036D8  6100 FA60 5969          bsr       @vsscanf_scanspace
000036DC  504F      5970          addq.w    #8,A7
000036DE  2400      5971          move.l    D0,D2
000036E0  2D7C 0000 5972          move.l    #10,-4(A6)
000036E4  000A FFFC 
000036E8  0C83 0000 5973          cmp.l     #120,D3
000036EC  0078      
000036EE  6608      5974          bne.s     vsscanf_88
000036F0  2D7C 0000 5975          move.l    #16,-4(A6)
000036F4  0010 FFFC 
                    5976   vsscanf_88:
000036F8  0C83 0000 5977          cmp.l     #111,D3
000036FC  006F      
000036FE  6608      5978          bne.s     vsscanf_90
00003700  2D7C 0000 5979          move.l    #8,-4(A6)
00003704  0008 FFFC 
                    5980   vsscanf_90:
00003708  4A86      5981          tst.l     D6
0000370A  660A      5982          bne.s     vsscanf_92
0000370C  206E 0010 5983          move.l    16(A6),A0
00003710  58AE 0010 5984          addq.l    #4,16(A6)
00003714  2E10      5985          move.l    (A0),D7
                    5986   vsscanf_92:
00003716  42AE FFE0 5987          clr.l     -32(A6)
0000371A  52AE FFE4 5988          addq.l    #1,-28(A6)
0000371E  0C83 0000 5989          cmp.l     #117,D3
00003722  0075      
00003724  6720      5990          beq.s     vsscanf_94
00003726  0C82 0000 5991          cmp.l     #45,D2
0000372A  002D      
0000372C  6618      5992          bne.s     vsscanf_94
0000372E  2F05      5993          move.l    D5,-(A7)
00003730  4E93      5994          jsr       (A3)
00003732  584F      5995          addq.w    #4,A7
00003734  2400      5996          move.l    D0,D2
00003736  52AE FFE4 5997          addq.l    #1,-28(A6)
0000373A  2D7C 0000 5998          move.l    #1,-32(A6)
0000373E  0001 FFE0 
00003742  387C 0001 5999          move.w    #1,A4
                    6000   vsscanf_94:
00003746  3A7C 0000 6001          move.w    #0,A5
0000374A  0C82 FFFF 6002          cmp.l     #-1,D2
0000374E  FFFF      
00003750  660E      6003          bne.s     vsscanf_96
00003752  4A84      6004          tst.l     D4
00003754  6704      6005          beq.s     vsscanf_98
00003756  2004      6006          move.l    D4,D0
00003758  6002      6007          bra.s     vsscanf_99
                    6008   vsscanf_98:
0000375A  70FF      6009          moveq     #-1,D0
                    6010   vsscanf_99:
0000375C  6000 019A 6011          bra       vsscanf_15
                    6012   vsscanf_96:
00003760  200A      6013          move.l    A2,D0
00003762  534A      6014          subq.w    #1,A2
00003764  4A80      6015          tst.l     D0
00003766  6700 0090 6016          beq       vsscanf_102
0000376A  0C83 0000 6017          cmp.l     #120,D3
0000376E  0078      
00003770  6620      6018          bne.s     vsscanf_104
00003772  2F02      6019          move.l    D2,-(A7)
00003774  6100 F8C8 6020          bsr       _toupper
00003778  584F      6021          addq.w    #4,A7
0000377A  0C80 0000 6022          cmp.l     #65,D0
0000377E  0041      
00003780  6D10      6023          blt.s     vsscanf_104
00003782  2F02      6024          move.l    D2,-(A7)
00003784  6100 F8B8 6025          bsr       _toupper
00003788  584F      6026          addq.w    #4,A7
0000378A  0C80 0000 6027          cmp.l     #70,D0
0000378E  0046      
00003790  6F14      6028          ble.s     vsscanf_103
                    6029   vsscanf_104:
00003792  2042      6030          move.l    D2,A0
00003794  43F9 0000 6031          lea       __ctype,A1
00003798  5674      
0000379A  1030 9801 6032          move.b    1(A0,A1.L),D0
0000379E  C03C 0004 6033          and.b     #4,D0
000037A2  6700 0054 6034          beq       vsscanf_102
                    6035   vsscanf_103:
000037A6  2042      6036          move.l    D2,A0
000037A8  43F9 0000 6037          lea       __ctype,A1
000037AC  5674      
000037AE  1030 9801 6038          move.b    1(A0,A1.L),D0
000037B2  C03C 0004 6039          and.b     #4,D0
000037B6  6614      6040          bne.s     vsscanf_105
000037B8  70F9      6041          moveq     #-7,D0
000037BA  2F00      6042          move.l    D0,-(A7)
000037BC  2F02      6043          move.l    D2,-(A7)
000037BE  6100 F87E 6044          bsr       _toupper
000037C2  584F      6045          addq.w    #4,A7
000037C4  2200      6046          move.l    D0,D1
000037C6  201F      6047          move.l    (A7)+,D0
000037C8  D081      6048          add.l     D1,D0
000037CA  2400      6049          move.l    D0,D2
                    6050   vsscanf_105:
000037CC  2F0D      6051          move.l    A5,-(A7)
000037CE  2F2E FFFC 6052          move.l    -4(A6),-(A7)
000037D2  6100 0884 6053          bsr       LMUL
000037D6  2017      6054          move.l    (A7),D0
000037D8  504F      6055          addq.w    #8,A7
000037DA  D082      6056          add.l     D2,D0
000037DC  0480 0000 6057          sub.l     #48,D0
000037E0  0030      
000037E2  2A40      6058          move.l    D0,A5
000037E4  2F05      6059          move.l    D5,-(A7)
000037E6  4E93      6060          jsr       (A3)
000037E8  584F      6061          addq.w    #4,A7
000037EA  2400      6062          move.l    D0,D2
000037EC  52AE FFE4 6063          addq.l    #1,-28(A6)
000037F0  387C 0001 6064          move.w    #1,A4
000037F4  6000 FF6A 6065          bra       vsscanf_96
                    6066   vsscanf_102:
000037F8  0C82 FFFF 6067          cmp.l     #-1,D2
000037FC  FFFF      
000037FE  671A      6068          beq.s     vsscanf_107
00003800  2F02      6069          move.l    D2,-(A7)
00003802  2F05      6070          move.l    D5,-(A7)
00003804  6100 F8D2 6071          bsr       @vsscanf_scanputback
00003808  504F      6072          addq.w    #8,A7
0000380A  53AE FFE4 6073          subq.l    #1,-28(A6)
0000380E  200C      6074          move.l    A4,D0
00003810  6606      6075          bne.s     vsscanf_109
00003812  2004      6076          move.l    D4,D0
00003814  6000 00E2 6077          bra       vsscanf_15
                    6078   vsscanf_109:
00003818  6012      6079          bra.s     vsscanf_111
                    6080   vsscanf_107:
0000381A  200C      6081          move.l    A4,D0
0000381C  660E      6082          bne.s     vsscanf_111
0000381E  4A84      6083          tst.l     D4
00003820  6704      6084          beq.s     vsscanf_113
00003822  2004      6085          move.l    D4,D0
00003824  6002      6086          bra.s     vsscanf_114
                    6087   vsscanf_113:
00003826  70FF      6088          moveq     #-1,D0
                    6089   vsscanf_114:
00003828  6000 00CE 6090          bra       vsscanf_15
                    6091   vsscanf_111:
0000382C  4AAE FFE0 6092          tst.l     -32(A6)
00003830  6706      6093          beq.s     vsscanf_115
00003832  200D      6094          move.l    A5,D0
00003834  4480      6095          neg.l     D0
00003836  2A40      6096          move.l    D0,A5
                    6097   vsscanf_115:
00003838  4A86      6098          tst.l     D6
0000383A  661E      6099          bne.s     vsscanf_117
0000383C  4AAE FFE8 6100          tst.l     -24(A6)
00003840  6706      6101          beq.s     vsscanf_119
00003842  2047      6102          move.l    D7,A0
00003844  208D      6103          move.l    A5,(A0)
00003846  6010      6104          bra.s     vsscanf_122
                    6105   vsscanf_119:
00003848  4AAE FFEC 6106          tst.l     -20(A6)
0000384C  6706      6107          beq.s     vsscanf_121
0000384E  2047      6108          move.l    D7,A0
00003850  308D      6109          move.w    A5,(A0)
00003852  6004      6110          bra.s     vsscanf_122
                    6111   vsscanf_121:
00003854  2047      6112          move.l    D7,A0
00003856  208D      6113          move.l    A5,(A0)
                    6114   vsscanf_122:
00003858  5284      6115          addq.l    #1,D4
                    6116   vsscanf_117:
0000385A  0C82 FFFF 6117          cmp.l     #-1,D2
0000385E  FFFF      
00003860  660E      6118          bne.s     vsscanf_123
00003862  4A84      6119          tst.l     D4
00003864  6704      6120          beq.s     vsscanf_125
00003866  2004      6121          move.l    D4,D0
00003868  6002      6122          bra.s     vsscanf_126
                    6123   vsscanf_125:
0000386A  70FF      6124          moveq     #-1,D0
                    6125   vsscanf_126:
0000386C  6000 008A 6126          bra       vsscanf_15
                    6127   vsscanf_123:
00003870  6000 0080 6128          bra       vsscanf_139
                    6129   vsscanf_85:
00003874  0C83 0000 6130          cmp.l     #37,D3
00003878  0025      
0000387A  6600 0040 6131          bne       vsscanf_127
0000387E  2F05      6132          move.l    D5,-(A7)
00003880  4E93      6133          jsr       (A3)
00003882  584F      6134          addq.w    #4,A7
00003884  2400      6135          move.l    D0,D2
00003886  0C82 FFFF 6136          cmp.l     #-1,D2
0000388A  FFFF      
0000388C  660E      6137          bne.s     vsscanf_129
0000388E  4A84      6138          tst.l     D4
00003890  6704      6139          beq.s     vsscanf_131
00003892  2004      6140          move.l    D4,D0
00003894  6002      6141          bra.s     vsscanf_132
                    6142   vsscanf_131:
00003896  70FF      6143          moveq     #-1,D0
                    6144   vsscanf_132:
00003898  6000 005E 6145          bra       vsscanf_15
                    6146   vsscanf_129:
0000389C  52AE FFE4 6147          addq.l    #1,-28(A6)
000038A0  B483      6148          cmp.l     D3,D2
000038A2  6714      6149          beq.s     vsscanf_133
000038A4  2F02      6150          move.l    D2,-(A7)
000038A6  2F05      6151          move.l    D5,-(A7)
000038A8  6100 F82E 6152          bsr       @vsscanf_scanputback
000038AC  504F      6153          addq.w    #8,A7
000038AE  53AE FFE4 6154          subq.l    #1,-28(A6)
000038B2  2004      6155          move.l    D4,D0
000038B4  6000 0042 6156          bra       vsscanf_15
                    6157   vsscanf_133:
000038B8  6000 0038 6158          bra       vsscanf_139
                    6159   vsscanf_127:
000038BC  2F05      6160          move.l    D5,-(A7)
000038BE  4E93      6161          jsr       (A3)
000038C0  584F      6162          addq.w    #4,A7
000038C2  2400      6163          move.l    D0,D2
000038C4  52AE FFE4 6164          addq.l    #1,-28(A6)
000038C8  0C82 FFFF 6165          cmp.l     #-1,D2
000038CC  FFFF      
000038CE  660C      6166          bne.s     vsscanf_135
000038D0  4A84      6167          tst.l     D4
000038D2  6704      6168          beq.s     vsscanf_137
000038D4  2004      6169          move.l    D4,D0
000038D6  6002      6170          bra.s     vsscanf_138
                    6171   vsscanf_137:
000038D8  70FF      6172          moveq     #-1,D0
                    6173   vsscanf_138:
000038DA  601C      6174          bra.s     vsscanf_15
                    6175   vsscanf_135:
000038DC  B483      6176          cmp.l     D3,D2
000038DE  6712      6177          beq.s     vsscanf_139
000038E0  2F02      6178          move.l    D2,-(A7)
000038E2  2F05      6179          move.l    D5,-(A7)
000038E4  6100 F7F2 6180          bsr       @vsscanf_scanputback
000038E8  504F      6181          addq.w    #8,A7
000038EA  53AE FFE4 6182          subq.l    #1,-28(A6)
000038EE  2004      6183          move.l    D4,D0
000038F0  6006      6184          bra.s     vsscanf_15
                    6185   vsscanf_139:
000038F2  6000 FA44 6186          bra       vsscanf_3
                    6187   vsscanf_5:
000038F6  2004      6188          move.l    D4,D0
                    6189   vsscanf_15:
000038F8  4CDF 3CFC 6190          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000038FC  4E5E      6191          unlk      A6
000038FE  4E75      6192          rts
                    6193   _printf:
00003900  4E56 FFFC 6194          link      A6,#-4
00003904  48E7 2000 6195          movem.l   D2,-(A7)
00003908  41EE 0008 6196          lea       8(A6),A0
0000390C  5848      6197          addq.w    #4,A0
0000390E  2408      6198          move.l    A0,D2
00003910  2F02      6199          move.l    D2,-(A7)
00003912  2F2E 0008 6200          move.l    8(A6),-(A7)
00003916  42A7      6201          clr.l     -(A7)
00003918  6100 00CA 6202          bsr       _vsprintf
0000391C  DEFC 000C 6203          add.w     #12,A7
00003920  2D40 FFFC 6204          move.l    D0,-4(A6)
00003924  4282      6205          clr.l     D2
00003926  202E FFFC 6206          move.l    -4(A6),D0
0000392A  4CDF 0004 6207          movem.l   (A7)+,D2
0000392E  4E5E      6208          unlk      A6
00003930  4E75      6209          rts
                    6210   @vsprintf_copy:
00003932  4E56 0000 6211          link      A6,#0
00003936  206E 0008 6212          move.l    8(A6),A0
0000393A  4A90      6213          tst.l     (A0)
0000393C  6710      6214          beq.s     @vsprintf_copy_1
0000393E  202E 000C 6215          move.l    12(A6),D0
00003942  206E 0008 6216          move.l    8(A6),A0
00003946  2250      6217          move.l    (A0),A1
00003948  5290      6218          addq.l    #1,(A0)
0000394A  1280      6219          move.b    D0,(A1)
0000394C  600A      6220          bra.s     @vsprintf_copy_2
                    6221   @vsprintf_copy_1:
0000394E  2F2E 000C 6222          move.l    12(A6),-(A7)
00003952  6100 F5F0 6223          bsr       _putch
00003956  584F      6224          addq.w    #4,A7
                    6225   @vsprintf_copy_2:
00003958  4E5E      6226          unlk      A6
0000395A  4E75      6227          rts
                    6228   @vsprintf_getval:
0000395C  4E56 0000 6229          link      A6,#0
00003960  48E7 3000 6230          movem.l   D2/D3,-(A7)
00003964  242E 0008 6231          move.l    8(A6),D2
00003968  4283      6232          clr.l     D3
0000396A  2042      6233          move.l    D2,A0
0000396C  2050      6234          move.l    (A0),A0
0000396E  1010      6235          move.b    (A0),D0
00003970  4880      6236          ext.w     D0
00003972  48C0      6237          ext.l     D0
00003974  0C80 0000 6238          cmp.l     #42,D0
00003978  002A      
0000397A  6612      6239          bne.s     @vsprintf_getval_1
0000397C  206E 000C 6240          move.l    12(A6),A0
00003980  2250      6241          move.l    (A0),A1
00003982  5890      6242          addq.l    #4,(A0)
00003984  2611      6243          move.l    (A1),D3
00003986  2042      6244          move.l    D2,A0
00003988  5290      6245          addq.l    #1,(A0)
0000398A  6000 004E 6246          bra       @vsprintf_getval_5
                    6247   @vsprintf_getval_1:
0000398E  2042      6248          move.l    D2,A0
00003990  2050      6249          move.l    (A0),A0
00003992  1010      6250          move.b    (A0),D0
00003994  4880      6251          ext.w     D0
00003996  48C0      6252          ext.l     D0
00003998  0C80 0000 6253          cmp.l     #48,D0
0000399C  0030      
0000399E  6D00 003A 6254          blt       @vsprintf_getval_5
000039A2  2042      6255          move.l    D2,A0
000039A4  2050      6256          move.l    (A0),A0
000039A6  1010      6257          move.b    (A0),D0
000039A8  4880      6258          ext.w     D0
000039AA  48C0      6259          ext.l     D0
000039AC  0C80 0000 6260          cmp.l     #57,D0
000039B0  0039      
000039B2  6E26      6261          bgt.s     @vsprintf_getval_5
000039B4  2F03      6262          move.l    D3,-(A7)
000039B6  4878 000A 6263          pea       10
000039BA  6100 069C 6264          bsr       LMUL
000039BE  2017      6265          move.l    (A7),D0
000039C0  504F      6266          addq.w    #8,A7
000039C2  2042      6267          move.l    D2,A0
000039C4  2250      6268          move.l    (A0),A1
000039C6  5290      6269          addq.l    #1,(A0)
000039C8  1211      6270          move.b    (A1),D1
000039CA  4881      6271          ext.w     D1
000039CC  48C1      6272          ext.l     D1
000039CE  D081      6273          add.l     D1,D0
000039D0  0480 0000 6274          sub.l     #48,D0
000039D4  0030      
000039D6  2600      6275          move.l    D0,D3
000039D8  60B4      6276          bra       @vsprintf_getval_1
                    6277   @vsprintf_getval_5:
000039DA  2003      6278          move.l    D3,D0
000039DC  4CDF 000C 6279          movem.l   (A7)+,D2/D3
000039E0  4E5E      6280          unlk      A6
000039E2  4E75      6281          rts
                    6282   _vsprintf:
000039E4  4E56 FFCC 6283          link      A6,#-52
000039E8  48E7 3F3C 6284          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000039EC  45EE 0008 6285          lea       8(A6),A2
000039F0  47F8 3932 6286          lea       @vsprintf_copy,A3
000039F4  49F9 0000 6287          lea       _ultoa,A4
000039F8  4262      
000039FA  4286      6288          clr.l     D6
                    6289   vsprintf_1:
000039FC  206E 000C 6290          move.l    12(A6),A0
00003A00  4A10      6291          tst.b     (A0)
00003A02  6700 0624 6292          beq       vsprintf_3
00003A06  206E 000C 6293          move.l    12(A6),A0
00003A0A  1010      6294          move.b    (A0),D0
00003A0C  4880      6295          ext.w     D0
00003A0E  48C0      6296          ext.l     D0
00003A10  0C80 0000 6297          cmp.l     #37,D0
00003A14  0025      
00003A16  671C      6298          beq.s     vsprintf_4
00003A18  206E 000C 6299          move.l    12(A6),A0
00003A1C  52AE 000C 6300          addq.l    #1,12(A6)
00003A20  1210      6301          move.b    (A0),D1
00003A22  4881      6302          ext.w     D1
00003A24  48C1      6303          ext.l     D1
00003A26  2F01      6304          move.l    D1,-(A7)
00003A28  2F0A      6305          move.l    A2,-(A7)
00003A2A  4E93      6306          jsr       (A3)
00003A2C  504F      6307          addq.w    #8,A7
00003A2E  5286      6308          addq.l    #1,D6
00003A30  6000 05F2 6309          bra       vsprintf_2
                    6310   vsprintf_4:
00003A34  52AE 000C 6311          addq.l    #1,12(A6)
00003A38  422E FFD3 6312          clr.b     -45(A6)
00003A3C  422E FFD2 6313          clr.b     -46(A6)
00003A40  422E FFD0 6314          clr.b     -48(A6)
00003A44  422E FFCF 6315          clr.b     -49(A6)
00003A48  422E FFCE 6316          clr.b     -50(A6)
00003A4C  422E FFCD 6317          clr.b     -51(A6)
00003A50  42AE FFFC 6318          clr.l     -4(A6)
00003A54  7AFF      6319          moveq     #-1,D5
00003A56  41EE FFDC 6320          lea       -36(A6),A0
00003A5A  2608      6321          move.l    A0,D3
00003A5C  2408      6322          move.l    A0,D2
                    6323   vsprintf_6:
00003A5E  206E 000C 6324          move.l    12(A6),A0
00003A62  1010      6325          move.b    (A0),D0
00003A64  4880      6326          ext.w     D0
00003A66  48C0      6327          ext.l     D0
00003A68  0C80 0000 6328          cmp.l     #43,D0
00003A6C  002B      
00003A6E  6730      6329          beq.s     vsprintf_12
00003A70  6E18      6330          bgt.s     vsprintf_15
00003A72  0C80 0000 6331          cmp.l     #35,D0
00003A76  0023      
00003A78  6700 003E 6332          beq       vsprintf_14
00003A7C  6E00 0046 6333          bgt       vsprintf_9
00003A80  0C80 0000 6334          cmp.l     #32,D0
00003A84  0020      
00003A86  6724      6335          beq.s     vsprintf_13
00003A88  603A      6336          bra.s     vsprintf_9
                    6337   vsprintf_15:
00003A8A  0C80 0000 6338          cmp.l     #45,D0
00003A8E  002D      
00003A90  6702      6339          beq.s     vsprintf_11
00003A92  6030      6340          bra.s     vsprintf_9
                    6341   vsprintf_11:
00003A94  1D7C 0001 6342          move.b    #1,-51(A6)
00003A98  FFCD      
00003A9A  52AE 000C 6343          addq.l    #1,12(A6)
00003A9E  6026      6344          bra.s     vsprintf_7
                    6345   vsprintf_12:
00003AA0  1D7C 0001 6346          move.b    #1,-50(A6)
00003AA4  FFCE      
00003AA6  52AE 000C 6347          addq.l    #1,12(A6)
00003AAA  601A      6348          bra.s     vsprintf_7
                    6349   vsprintf_13:
00003AAC  1D7C 0001 6350          move.b    #1,-49(A6)
00003AB0  FFCF      
00003AB2  52AE 000C 6351          addq.l    #1,12(A6)
00003AB6  600E      6352          bra.s     vsprintf_7
                    6353   vsprintf_14:
00003AB8  1D7C 0001 6354          move.b    #1,-48(A6)
00003ABC  FFD0      
00003ABE  52AE 000C 6355          addq.l    #1,12(A6)
00003AC2  6002      6356          bra.s     vsprintf_7
                    6357   vsprintf_9:
00003AC4  6002      6358          bra.s     vsprintf_8
                    6359   vsprintf_7:
00003AC6  6096      6360          bra       vsprintf_6
                    6361   vsprintf_8:
00003AC8  206E 000C 6362          move.l    12(A6),A0
00003ACC  1010      6363          move.b    (A0),D0
00003ACE  4880      6364          ext.w     D0
00003AD0  48C0      6365          ext.l     D0
00003AD2  0C80 0000 6366          cmp.l     #48,D0
00003AD6  0030      
00003AD8  660A      6367          bne.s     vsprintf_16
00003ADA  52AE 000C 6368          addq.l    #1,12(A6)
00003ADE  1D7C 0001 6369          move.b    #1,-46(A6)
00003AE2  FFD2      
                    6370   vsprintf_16:
00003AE4  486E 0010 6371          pea       16(A6)
00003AE8  486E 000C 6372          pea       12(A6)
00003AEC  6100 FE6E 6373          bsr       @vsprintf_getval
00003AF0  504F      6374          addq.w    #8,A7
00003AF2  2A40      6375          move.l    D0,A5
00003AF4  206E 000C 6376          move.l    12(A6),A0
00003AF8  1010      6377          move.b    (A0),D0
00003AFA  4880      6378          ext.w     D0
00003AFC  48C0      6379          ext.l     D0
00003AFE  0C80 0000 6380          cmp.l     #46,D0
00003B02  002E      
00003B04  6614      6381          bne.s     vsprintf_18
00003B06  52AE 000C 6382          addq.l    #1,12(A6)
00003B0A  486E 0010 6383          pea       16(A6)
00003B0E  486E 000C 6384          pea       12(A6)
00003B12  6100 FE48 6385          bsr       @vsprintf_getval
00003B16  504F      6386          addq.w    #8,A7
00003B18  2A00      6387          move.l    D0,D5
                    6388   vsprintf_18:
00003B1A  206E 000C 6389          move.l    12(A6),A0
00003B1E  1010      6390          move.b    (A0),D0
00003B20  4880      6391          ext.w     D0
00003B22  48C0      6392          ext.l     D0
00003B24  0C80 0000 6393          cmp.l     #108,D0
00003B28  006C      
00003B2A  660A      6394          bne.s     vsprintf_20
00003B2C  52AE 000C 6395          addq.l    #1,12(A6)
00003B30  1D7C 0001 6396          move.b    #1,-45(A6)
00003B34  FFD3      
                    6397   vsprintf_20:
00003B36  206E 000C 6398          move.l    12(A6),A0
00003B3A  1010      6399          move.b    (A0),D0
00003B3C  4880      6400          ext.w     D0
00003B3E  48C0      6401          ext.l     D0
00003B40  0C80 0000 6402          cmp.l     #111,D0
00003B44  006F      
00003B46  6700 00D4 6403          beq       vsprintf_27
00003B4A  6E34      6404          bgt.s     vsprintf_33
00003B4C  0C80 0000 6405          cmp.l     #100,D0
00003B50  0064      
00003B52  6700 0054 6406          beq       vsprintf_24
00003B56  6E1C      6407          bgt.s     vsprintf_34
00003B58  0C80 0000 6408          cmp.l     #99,D0
00003B5C  0063      
00003B5E  6700 012C 6409          beq       vsprintf_30
00003B62  6E00 016A 6410          bgt       vsprintf_22
00003B66  0C80 0000 6411          cmp.l     #88,D0
00003B6A  0058      
00003B6C  6700 00E6 6412          beq       vsprintf_28
00003B70  6000 015C 6413          bra       vsprintf_22
                    6414   vsprintf_34:
00003B74  0C80 0000 6415          cmp.l     #105,D0
00003B78  0069      
00003B7A  672C      6416          beq.s     vsprintf_24
00003B7C  6000 0150 6417          bra       vsprintf_22
                    6418   vsprintf_33:
00003B80  0C80 0000 6419          cmp.l     #117,D0
00003B84  0075      
00003B86  6700 005C 6420          beq       vsprintf_26
00003B8A  6E0E      6421          bgt.s     vsprintf_35
00003B8C  0C80 0000 6422          cmp.l     #115,D0
00003B90  0073      
00003B92  6700 011C 6423          beq       vsprintf_31
00003B96  6000 0136 6424          bra       vsprintf_22
                    6425   vsprintf_35:
00003B9A  0C80 0000 6426          cmp.l     #120,D0
00003B9E  0078      
00003BA0  6700 00B2 6427          beq       vsprintf_28
00003BA4  6000 0128 6428          bra       vsprintf_22
                    6429   vsprintf_24:
00003BA8  4A2E FFD3 6430          tst.b     -45(A6)
00003BAC  671A      6431          beq.s     vsprintf_36
00003BAE  4878 000A 6432          pea       10
00003BB2  2F03      6433          move.l    D3,-(A7)
00003BB4  206E 0010 6434          move.l    16(A6),A0
00003BB8  58AE 0010 6435          addq.l    #4,16(A6)
00003BBC  2F10      6436          move.l    (A0),-(A7)
00003BBE  6100 061E 6437          bsr       _ltoa
00003BC2  DEFC 000C 6438          add.w     #12,A7
00003BC6  6018      6439          bra.s     vsprintf_37
                    6440   vsprintf_36:
00003BC8  4878 000A 6441          pea       10
00003BCC  2F03      6442          move.l    D3,-(A7)
00003BCE  206E 0010 6443          move.l    16(A6),A0
00003BD2  58AE 0010 6444          addq.l    #4,16(A6)
00003BD6  2F10      6445          move.l    (A0),-(A7)
00003BD8  6100 0604 6446          bsr       _ltoa
00003BDC  DEFC 000C 6447          add.w     #12,A7
                    6448   vsprintf_37:
00003BE0  6000 00FA 6449          bra       vsprintf_23
                    6450   vsprintf_26:
00003BE4  4A2E FFD3 6451          tst.b     -45(A6)
00003BE8  6718      6452          beq.s     vsprintf_38
00003BEA  4878 000A 6453          pea       10
00003BEE  2F03      6454          move.l    D3,-(A7)
00003BF0  206E 0010 6455          move.l    16(A6),A0
00003BF4  58AE 0010 6456          addq.l    #4,16(A6)
00003BF8  2F10      6457          move.l    (A0),-(A7)
00003BFA  4E94      6458          jsr       (A4)
00003BFC  DEFC 000C 6459          add.w     #12,A7
00003C00  6016      6460          bra.s     vsprintf_39
                    6461   vsprintf_38:
00003C02  4878 000A 6462          pea       10
00003C06  2F03      6463          move.l    D3,-(A7)
00003C08  206E 0010 6464          move.l    16(A6),A0
00003C0C  58AE 0010 6465          addq.l    #4,16(A6)
00003C10  2F10      6466          move.l    (A0),-(A7)
00003C12  4E94      6467          jsr       (A4)
00003C14  DEFC 000C 6468          add.w     #12,A7
                    6469   vsprintf_39:
00003C18  6000 00C2 6470          bra       vsprintf_23
                    6471   vsprintf_27:
00003C1C  4A2E FFD3 6472          tst.b     -45(A6)
00003C20  6718      6473          beq.s     vsprintf_40
00003C22  4878 0008 6474          pea       8
00003C26  2F03      6475          move.l    D3,-(A7)
00003C28  206E 0010 6476          move.l    16(A6),A0
00003C2C  58AE 0010 6477          addq.l    #4,16(A6)
00003C30  2F10      6478          move.l    (A0),-(A7)
00003C32  4E94      6479          jsr       (A4)
00003C34  DEFC 000C 6480          add.w     #12,A7
00003C38  6016      6481          bra.s     vsprintf_41
                    6482   vsprintf_40:
00003C3A  4878 0008 6483          pea       8
00003C3E  2F03      6484          move.l    D3,-(A7)
00003C40  206E 0010 6485          move.l    16(A6),A0
00003C44  58AE 0010 6486          addq.l    #4,16(A6)
00003C48  2F10      6487          move.l    (A0),-(A7)
00003C4A  4E94      6488          jsr       (A4)
00003C4C  DEFC 000C 6489          add.w     #12,A7
                    6490   vsprintf_41:
00003C50  6000 008A 6491          bra       vsprintf_23
                    6492   vsprintf_28:
00003C54  4A2E FFD3 6493          tst.b     -45(A6)
00003C58  6718      6494          beq.s     vsprintf_42
00003C5A  4878 0010 6495          pea       16
00003C5E  2F03      6496          move.l    D3,-(A7)
00003C60  206E 0010 6497          move.l    16(A6),A0
00003C64  58AE 0010 6498          addq.l    #4,16(A6)
00003C68  2F10      6499          move.l    (A0),-(A7)
00003C6A  4E94      6500          jsr       (A4)
00003C6C  DEFC 000C 6501          add.w     #12,A7
00003C70  6016      6502          bra.s     vsprintf_43
                    6503   vsprintf_42:
00003C72  4878 0010 6504          pea       16
00003C76  2F03      6505          move.l    D3,-(A7)
00003C78  206E 0010 6506          move.l    16(A6),A0
00003C7C  58AE 0010 6507          addq.l    #4,16(A6)
00003C80  2F10      6508          move.l    (A0),-(A7)
00003C82  4E94      6509          jsr       (A4)
00003C84  DEFC 000C 6510          add.w     #12,A7
                    6511   vsprintf_43:
00003C88  6000 0052 6512          bra       vsprintf_23
                    6513   vsprintf_30:
00003C8C  206E 0010 6514          move.l    16(A6),A0
00003C90  58AE 0010 6515          addq.l    #4,16(A6)
00003C94  2010      6516          move.l    (A0),D0
00003C96  2042      6517          move.l    D2,A0
00003C98  5282      6518          addq.l    #1,D2
00003C9A  1080      6519          move.b    D0,(A0)
00003C9C  2042      6520          move.l    D2,A0
00003C9E  4210      6521          clr.b     (A0)
00003CA0  200D      6522          move.l    A5,D0
00003CA2  6704      6523          beq.s     vsprintf_44
00003CA4  200D      6524          move.l    A5,D0
00003CA6  6002      6525          bra.s     vsprintf_45
                    6526   vsprintf_44:
00003CA8  7001      6527          moveq     #1,D0
                    6528   vsprintf_45:
00003CAA  2A00      6529          move.l    D0,D5
00003CAC  6000 002E 6530          bra       vsprintf_23
                    6531   vsprintf_31:
00003CB0  206E 0010 6532          move.l    16(A6),A0
00003CB4  58AE 0010 6533          addq.l    #4,16(A6)
00003CB8  2610      6534          move.l    (A0),D3
00003CBA  0C85 FFFF 6535          cmp.l     #-1,D5
00003CBE  FFFF      
00003CC0  660A      6536          bne.s     vsprintf_46
00003CC2  2F03      6537          move.l    D3,-(A7)
00003CC4  6100 05FE 6538          bsr       _strlen
00003CC8  584F      6539          addq.w    #4,A7
00003CCA  2A00      6540          move.l    D0,D5
                    6541   vsprintf_46:
00003CCC  600E      6542          bra.s     vsprintf_23
                    6543   vsprintf_22:
00003CCE  206E 000C 6544          move.l    12(A6),A0
00003CD2  2242      6545          move.l    D2,A1
00003CD4  5282      6546          addq.l    #1,D2
00003CD6  1290      6547          move.b    (A0),(A1)
00003CD8  2042      6548          move.l    D2,A0
00003CDA  4210      6549          clr.b     (A0)
                    6550   vsprintf_23:
00003CDC  2F03      6551          move.l    D3,-(A7)
00003CDE  6100 05E4 6552          bsr       _strlen
00003CE2  584F      6553          addq.w    #4,A7
00003CE4  1800      6554          move.b    D0,D4
00003CE6  206E 000C 6555          move.l    12(A6),A0
00003CEA  1010      6556          move.b    (A0),D0
00003CEC  4880      6557          ext.w     D0
00003CEE  48C0      6558          ext.l     D0
00003CF0  0C80 0000 6559          cmp.l     #115,D0
00003CF4  0073      
00003CF6  6618      6560          bne.s     vsprintf_48
00003CF8  0C85 0000 6561          cmp.l     #0,D5
00003CFC  0000      
00003CFE  6D10      6562          blt.s     vsprintf_48
00003D00  4884      6563          ext.w     D4
00003D02  48C4      6564          ext.l     D4
00003D04  B885      6565          cmp.l     D5,D4
00003D06  6F04      6566          ble.s     vsprintf_50
00003D08  1005      6567          move.b    D5,D0
00003D0A  6002      6568          bra.s     vsprintf_51
                    6569   vsprintf_50:
00003D0C  1004      6570          move.b    D4,D0
                    6571   vsprintf_51:
00003D0E  1800      6572          move.b    D0,D4
                    6573   vsprintf_48:
00003D10  206E 000C 6574          move.l    12(A6),A0
00003D14  1010      6575          move.b    (A0),D0
00003D16  4880      6576          ext.w     D0
00003D18  48C0      6577          ext.l     D0
00003D1A  0C80 0000 6578          cmp.l     #88,D0
00003D1E  0058      
00003D20  6600 0026 6579          bne       vsprintf_56
00003D24  41EE FFDC 6580          lea       -36(A6),A0
00003D28  2408      6581          move.l    A0,D2
                    6582   vsprintf_54:
00003D2A  2042      6583          move.l    D2,A0
00003D2C  4A10      6584          tst.b     (A0)
00003D2E  6718      6585          beq.s     vsprintf_56
00003D30  2042      6586          move.l    D2,A0
00003D32  1210      6587          move.b    (A0),D1
00003D34  4881      6588          ext.w     D1
00003D36  48C1      6589          ext.l     D1
00003D38  2F01      6590          move.l    D1,-(A7)
00003D3A  6100 F302 6591          bsr       _toupper
00003D3E  584F      6592          addq.w    #4,A7
00003D40  2042      6593          move.l    D2,A0
00003D42  1080      6594          move.b    D0,(A0)
00003D44  5282      6595          addq.l    #1,D2
00003D46  60E2      6596          bra       vsprintf_54
                    6597   vsprintf_56:
00003D48  7E00      6598          moveq     #0,D7
00003D4A  41EE FFD4 6599          lea       -44(A6),A0
00003D4E  2408      6600          move.l    A0,D2
00003D50  206E 000C 6601          move.l    12(A6),A0
00003D54  1010      6602          move.b    (A0),D0
00003D56  4880      6603          ext.w     D0
00003D58  48C0      6604          ext.l     D0
00003D5A  0C80 0000 6605          cmp.l     #100,D0
00003D5E  0064      
00003D60  6714      6606          beq.s     vsprintf_59
00003D62  206E 000C 6607          move.l    12(A6),A0
00003D66  1010      6608          move.b    (A0),D0
00003D68  4880      6609          ext.w     D0
00003D6A  48C0      6610          ext.l     D0
00003D6C  0C80 0000 6611          cmp.l     #105,D0
00003D70  0069      
00003D72  6600 0076 6612          bne       vsprintf_65
                    6613   vsprintf_59:
00003D76  4A2E FFCE 6614          tst.b     -50(A6)
00003D7A  6612      6615          bne.s     vsprintf_62
00003D7C  2043      6616          move.l    D3,A0
00003D7E  1010      6617          move.b    (A0),D0
00003D80  4880      6618          ext.w     D0
00003D82  48C0      6619          ext.l     D0
00003D84  0C80 0000 6620          cmp.l     #45,D0
00003D88  002D      
00003D8A  6600 002E 6621          bne       vsprintf_60
                    6622   vsprintf_62:
00003D8E  2043      6623          move.l    D3,A0
00003D90  1010      6624          move.b    (A0),D0
00003D92  4880      6625          ext.w     D0
00003D94  48C0      6626          ext.l     D0
00003D96  0C80 0000 6627          cmp.l     #45,D0
00003D9A  002D      
00003D9C  660E      6628          bne.s     vsprintf_63
00003D9E  2043      6629          move.l    D3,A0
00003DA0  5283      6630          addq.l    #1,D3
00003DA2  2242      6631          move.l    D2,A1
00003DA4  5282      6632          addq.l    #1,D2
00003DA6  1290      6633          move.b    (A0),(A1)
00003DA8  5304      6634          subq.b    #1,D4
00003DAA  6008      6635          bra.s     vsprintf_64
                    6636   vsprintf_63:
00003DAC  2042      6637          move.l    D2,A0
00003DAE  5282      6638          addq.l    #1,D2
00003DB0  10BC 002B 6639          move.b    #43,(A0)
                    6640   vsprintf_64:
00003DB4  5287      6641          addq.l    #1,D7
00003DB6  6000 0032 6642          bra       vsprintf_65
                    6643   vsprintf_60:
00003DBA  4A2E FFCF 6644          tst.b     -49(A6)
00003DBE  6700 002A 6645          beq       vsprintf_65
00003DC2  2043      6646          move.l    D3,A0
00003DC4  1010      6647          move.b    (A0),D0
00003DC6  4880      6648          ext.w     D0
00003DC8  48C0      6649          ext.l     D0
00003DCA  0C80 0000 6650          cmp.l     #45,D0
00003DCE  002D      
00003DD0  660E      6651          bne.s     vsprintf_67
00003DD2  2043      6652          move.l    D3,A0
00003DD4  5283      6653          addq.l    #1,D3
00003DD6  2242      6654          move.l    D2,A1
00003DD8  5282      6655          addq.l    #1,D2
00003DDA  1290      6656          move.b    (A0),(A1)
00003DDC  5304      6657          subq.b    #1,D4
00003DDE  6008      6658          bra.s     vsprintf_68
                    6659   vsprintf_67:
00003DE0  2042      6660          move.l    D2,A0
00003DE2  5282      6661          addq.l    #1,D2
00003DE4  10BC 0020 6662          move.b    #32,(A0)
                    6663   vsprintf_68:
00003DE8  5287      6664          addq.l    #1,D7
                    6665   vsprintf_65:
00003DEA  4A2E FFD0 6666          tst.b     -48(A6)
00003DEE  6700 0066 6667          beq       vsprintf_77
00003DF2  206E 000C 6668          move.l    12(A6),A0
00003DF6  1010      6669          move.b    (A0),D0
00003DF8  4880      6670          ext.w     D0
00003DFA  48C0      6671          ext.l     D0
00003DFC  0C80 0000 6672          cmp.l     #111,D0
00003E00  006F      
00003E02  671A      6673          beq.s     vsprintf_73
00003E04  6E0C      6674          bgt.s     vsprintf_76
00003E06  0C80 0000 6675          cmp.l     #88,D0
00003E0A  0058      
00003E0C  6710      6676          beq.s     vsprintf_73
00003E0E  6000 0046 6677          bra       vsprintf_77
                    6678   vsprintf_76:
00003E12  0C80 0000 6679          cmp.l     #120,D0
00003E16  0078      
00003E18  6704      6680          beq.s     vsprintf_73
00003E1A  6000 003A 6681          bra       vsprintf_77
                    6682   vsprintf_73:
00003E1E  2042      6683          move.l    D2,A0
00003E20  5282      6684          addq.l    #1,D2
00003E22  10BC 0030 6685          move.b    #48,(A0)
00003E26  5287      6686          addq.l    #1,D7
00003E28  206E 000C 6687          move.l    12(A6),A0
00003E2C  1010      6688          move.b    (A0),D0
00003E2E  4880      6689          ext.w     D0
00003E30  48C0      6690          ext.l     D0
00003E32  0C80 0000 6691          cmp.l     #120,D0
00003E36  0078      
00003E38  6712      6692          beq.s     vsprintf_79
00003E3A  206E 000C 6693          move.l    12(A6),A0
00003E3E  1010      6694          move.b    (A0),D0
00003E40  4880      6695          ext.w     D0
00003E42  48C0      6696          ext.l     D0
00003E44  0C80 0000 6697          cmp.l     #88,D0
00003E48  0058      
00003E4A  660A      6698          bne.s     vsprintf_77
                    6699   vsprintf_79:
00003E4C  2042      6700          move.l    D2,A0
00003E4E  5282      6701          addq.l    #1,D2
00003E50  10BC 0078 6702          move.b    #120,(A0)
00003E54  5287      6703          addq.l    #1,D7
                    6704   vsprintf_77:
00003E56  2042      6705          move.l    D2,A0
00003E58  4210      6706          clr.b     (A0)
00003E5A  206E 000C 6707          move.l    12(A6),A0
00003E5E  1010      6708          move.b    (A0),D0
00003E60  4880      6709          ext.w     D0
00003E62  48C0      6710          ext.l     D0
00003E64  0C80 0000 6711          cmp.l     #105,D0
00003E68  0069      
00003E6A  6700 0076 6712          beq       vsprintf_82
00003E6E  6E42      6713          bgt.s     vsprintf_93
00003E70  0C80 0000 6714          cmp.l     #99,D0
00003E74  0063      
00003E76  6700 0084 6715          beq       vsprintf_96
00003E7A  6E1C      6716          bgt.s     vsprintf_94
00003E7C  0C80 0000 6717          cmp.l     #88,D0
00003E80  0058      
00003E82  6700 005E 6718          beq       vsprintf_82
00003E86  6E00 0184 6719          bgt       vsprintf_80
00003E8A  0C80 0000 6720          cmp.l     #69,D0
00003E8E  0045      
00003E90  6700 0050 6721          beq       vsprintf_82
00003E94  6000 0176 6722          bra       vsprintf_80
                    6723   vsprintf_94:
00003E98  0C80 0000 6724          cmp.l     #101,D0
00003E9C  0065      
00003E9E  6700 0042 6725          beq       vsprintf_82
00003EA2  6E00 0168 6726          bgt       vsprintf_80
00003EA6  0C80 0000 6727          cmp.l     #100,D0
00003EAA  0064      
00003EAC  6734      6728          beq.s     vsprintf_82
00003EAE  6000 015C 6729          bra       vsprintf_80
                    6730   vsprintf_93:
00003EB2  0C80 0000 6731          cmp.l     #117,D0
00003EB6  0075      
00003EB8  6728      6732          beq.s     vsprintf_82
00003EBA  6E1A      6733          bgt.s     vsprintf_95
00003EBC  0C80 0000 6734          cmp.l     #115,D0
00003EC0  0073      
00003EC2  6700 0038 6735          beq       vsprintf_96
00003EC6  6E00 0144 6736          bgt       vsprintf_80
00003ECA  0C80 0000 6737          cmp.l     #111,D0
00003ECE  006F      
00003ED0  6710      6738          beq.s     vsprintf_82
00003ED2  6000 0138 6739          bra       vsprintf_80
                    6740   vsprintf_95:
00003ED6  0C80 0000 6741          cmp.l     #120,D0
00003EDA  0078      
00003EDC  6704      6742          beq.s     vsprintf_82
00003EDE  6000 012C 6743          bra       vsprintf_80
                    6744   vsprintf_82:
00003EE2  4A2E FFD2 6745          tst.b     -46(A6)
00003EE6  6714      6746          beq.s     vsprintf_96
00003EE8  4A2E FFCD 6747          tst.b     -51(A6)
00003EEC  660E      6748          bne.s     vsprintf_96
00003EEE  200D      6749          move.l    A5,D0
00003EF0  9087      6750          sub.l     D7,D0
00003EF2  4884      6751          ext.w     D4
00003EF4  48C4      6752          ext.l     D4
00003EF6  9084      6753          sub.l     D4,D0
00003EF8  2D40 FFFC 6754          move.l    D0,-4(A6)
                    6755   vsprintf_96:
00003EFC  202E FFFC 6756          move.l    -4(A6),D0
00003F00  0C80 0000 6757          cmp.l     #0,D0
00003F04  0000      
00003F06  6C04      6758          bge.s     vsprintf_98
00003F08  42AE FFFC 6759          clr.l     -4(A6)
                    6760   vsprintf_98:
00003F0C  4A2E FFCD 6761          tst.b     -51(A6)
00003F10  6600 0030 6762          bne       vsprintf_104
00003F14  4884      6763          ext.w     D4
00003F16  48C4      6764          ext.l     D4
00003F18  2004      6765          move.l    D4,D0
00003F1A  D0AE FFFC 6766          add.l     -4(A6),D0
00003F1E  D087      6767          add.l     D7,D0
00003F20  1D40 FFD1 6768          move.b    D0,-47(A6)
                    6769   vsprintf_102:
00003F24  102E FFD1 6770          move.b    -47(A6),D0
00003F28  4880      6771          ext.w     D0
00003F2A  48C0      6772          ext.l     D0
00003F2C  220D      6773          move.l    A5,D1
00003F2E  534D      6774          subq.w    #1,A5
00003F30  B081      6775          cmp.l     D1,D0
00003F32  6C0E      6776          bge.s     vsprintf_104
00003F34  4878 0020 6777          pea       32
00003F38  2F0A      6778          move.l    A2,-(A7)
00003F3A  4E93      6779          jsr       (A3)
00003F3C  504F      6780          addq.w    #8,A7
00003F3E  5286      6781          addq.l    #1,D6
00003F40  60E2      6782          bra       vsprintf_102
                    6783   vsprintf_104:
00003F42  41EE FFD4 6784          lea       -44(A6),A0
00003F46  2408      6785          move.l    A0,D2
                    6786   vsprintf_105:
00003F48  2042      6787          move.l    D2,A0
00003F4A  4A10      6788          tst.b     (A0)
00003F4C  6716      6789          beq.s     vsprintf_107
00003F4E  2042      6790          move.l    D2,A0
00003F50  5282      6791          addq.l    #1,D2
00003F52  1210      6792          move.b    (A0),D1
00003F54  4881      6793          ext.w     D1
00003F56  48C1      6794          ext.l     D1
00003F58  2F01      6795          move.l    D1,-(A7)
00003F5A  2F0A      6796          move.l    A2,-(A7)
00003F5C  4E93      6797          jsr       (A3)
00003F5E  504F      6798          addq.w    #8,A7
00003F60  5286      6799          addq.l    #1,D6
00003F62  60E4      6800          bra       vsprintf_105
                    6801   vsprintf_107:
00003F64  202E FFFC 6802          move.l    -4(A6),D0
00003F68  1D40 FFD1 6803          move.b    D0,-47(A6)
                    6804   vsprintf_108:
00003F6C  102E FFD1 6805          move.b    -47(A6),D0
00003F70  532E FFD1 6806          subq.b    #1,-47(A6)
00003F74  4A00      6807          tst.b     D0
00003F76  670E      6808          beq.s     vsprintf_110
00003F78  4878 0030 6809          pea       48
00003F7C  2F0A      6810          move.l    A2,-(A7)
00003F7E  4E93      6811          jsr       (A3)
00003F80  504F      6812          addq.w    #8,A7
00003F82  5286      6813          addq.l    #1,D6
00003F84  60E6      6814          bra       vsprintf_108
                    6815   vsprintf_110:
00003F86  2043      6816          move.l    D3,A0
00003F88  4A10      6817          tst.b     (A0)
00003F8A  6700 0048 6818          beq       vsprintf_113
00003F8E  206E 000C 6819          move.l    12(A6),A0
00003F92  1010      6820          move.b    (A0),D0
00003F94  4880      6821          ext.w     D0
00003F96  48C0      6822          ext.l     D0
00003F98  0C80 0000 6823          cmp.l     #115,D0
00003F9C  0073      
00003F9E  670C      6824          beq.s     vsprintf_116
00003FA0  6E18      6825          bgt.s     vsprintf_119
00003FA2  0C80 0000 6826          cmp.l     #99,D0
00003FA6  0063      
00003FA8  6702      6827          beq.s     vsprintf_116
00003FAA  600E      6828          bra.s     vsprintf_119
                    6829   vsprintf_116:
00003FAC  2005      6830          move.l    D5,D0
00003FAE  5385      6831          subq.l    #1,D5
00003FB0  0C80 0000 6832          cmp.l     #0,D0
00003FB4  0000      
00003FB6  6E02      6833          bgt.s     vsprintf_119
00003FB8  6016      6834          bra.s     vsprintf_115
                    6835   vsprintf_119:
00003FBA  2043      6836          move.l    D3,A0
00003FBC  5283      6837          addq.l    #1,D3
00003FBE  1210      6838          move.b    (A0),D1
00003FC0  4881      6839          ext.w     D1
00003FC2  48C1      6840          ext.l     D1
00003FC4  2F01      6841          move.l    D1,-(A7)
00003FC6  2F0A      6842          move.l    A2,-(A7)
00003FC8  4E93      6843          jsr       (A3)
00003FCA  504F      6844          addq.w    #8,A7
00003FCC  5286      6845          addq.l    #1,D6
00003FCE  6002      6846          bra.s     vsprintf_112
                    6847   vsprintf_115:
00003FD0  6002      6848          bra.s     vsprintf_113
                    6849   vsprintf_112:
00003FD2  60B2      6850          bra       vsprintf_110
                    6851   vsprintf_113:
00003FD4  4A2E FFCD 6852          tst.b     -51(A6)
00003FD8  6700 0030 6853          beq       vsprintf_125
00003FDC  4884      6854          ext.w     D4
00003FDE  48C4      6855          ext.l     D4
00003FE0  2004      6856          move.l    D4,D0
00003FE2  D0AE FFFC 6857          add.l     -4(A6),D0
00003FE6  D087      6858          add.l     D7,D0
00003FE8  1D40 FFD1 6859          move.b    D0,-47(A6)
                    6860   vsprintf_123:
00003FEC  102E FFD1 6861          move.b    -47(A6),D0
00003FF0  4880      6862          ext.w     D0
00003FF2  48C0      6863          ext.l     D0
00003FF4  220D      6864          move.l    A5,D1
00003FF6  534D      6865          subq.w    #1,A5
00003FF8  B081      6866          cmp.l     D1,D0
00003FFA  6C0E      6867          bge.s     vsprintf_125
00003FFC  4878 0020 6868          pea       32
00004000  2F0A      6869          move.l    A2,-(A7)
00004002  4E93      6870          jsr       (A3)
00004004  504F      6871          addq.w    #8,A7
00004006  5386      6872          subq.l    #1,D6
00004008  60E2      6873          bra       vsprintf_123
                    6874   vsprintf_125:
0000400A  6014      6875          bra.s     vsprintf_81
                    6876   vsprintf_80:
0000400C  206E 000C 6877          move.l    12(A6),A0
00004010  1210      6878          move.b    (A0),D1
00004012  4881      6879          ext.w     D1
00004014  48C1      6880          ext.l     D1
00004016  2F01      6881          move.l    D1,-(A7)
00004018  2F0A      6882          move.l    A2,-(A7)
0000401A  4E93      6883          jsr       (A3)
0000401C  504F      6884          addq.w    #8,A7
0000401E  5286      6885          addq.l    #1,D6
                    6886   vsprintf_81:
00004020  52AE 000C 6887          addq.l    #1,12(A6)
                    6888   vsprintf_2:
00004024  6000 F9D6 6889          bra       vsprintf_1
                    6890   vsprintf_3:
00004028  4A92      6891          tst.l     (A2)
0000402A  6710      6892          beq.s     vsprintf_126
0000402C  4201      6893          clr.b     D1
0000402E  C2BC 0000 6894          and.l     #255,D1
00004032  00FF      
00004034  2F01      6895          move.l    D1,-(A7)
00004036  2F0A      6896          move.l    A2,-(A7)
00004038  4E93      6897          jsr       (A3)
0000403A  504F      6898          addq.w    #8,A7
                    6899   vsprintf_126:
0000403C  2006      6900          move.l    D6,D0
0000403E  4CDF 3CFC 6901          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004042  4E5E      6902          unlk      A6
00004044  4E75      6903          rts
                    6904   ULMUL:
00004046  4E56 0000 6905          link    A6,#0
0000404A  48E7 C000 6906          movem.l D0/D1,-(A7)
0000404E  222E 0008 6907          move.l  8(A6),D1
00004052  202E 000C 6908          move.l  12(A6),D0
00004056  602C      6909          bra.s   lmul_3
                    6910   LMUL:
00004058  4E56 0000 6911          link    A6,#0
0000405C  48E7 C000 6912          movem.l D0/D1,-(A7)
00004060  222E 0008 6913          move.l  8(A6),D1
00004064  202E 000C 6914          move.l  12(A6),D0
00004068  4A80      6915          tst.l   D0
0000406A  6A0A      6916          bpl.s   lmul_1
0000406C  4480      6917          neg.l   D0
0000406E  4A81      6918          tst.l   D1
00004070  6A0A      6919          bpl.s   lmul_2
00004072  4481      6920          neg.l   D1
00004074  600E      6921          bra.s   lmul_3
                    6922   lmul_1:
00004076  4A81      6923          tst.l   D1
00004078  6A0A      6924          bpl.s   lmul_3
0000407A  4481      6925          neg.l   D1
                    6926   lmul_2:
0000407C  6114      6927          bsr.s   domul
0000407E  4481      6928          neg.l   D1
00004080  4080      6929          negx.l  D0
00004082  6002      6930          bra.s   lmul_4
                    6931   lmul_3:
00004084  610C      6932          bsr.s   domul
                    6933   lmul_4:
00004086  2D41 0008 6934          move.l  D1,8(A6)
0000408A  4CDF 0003 6935          movem.l (A7)+,D0/D1
0000408E  4E5E      6936          unlk    A6
00004090  4E75      6937          rts
                    6938   domul:
00004092  0C81 0000 6939          cmpi.l  #$FFFF,D1
00004096  FFFF      
00004098  620C      6940          bhi.s   domul_1
0000409A  0C80 0000 6941          cmpi.l  #$FFFF,D0
0000409E  FFFF      
000040A0  620E      6942          bhi.s   domul_2
000040A2  C2C0      6943          mulu    D0,D1
000040A4  4E75      6944          rts
                    6945   domul_1:
000040A6  0C80 0000 6946          cmpi.l  #$FFFF,D0
000040AA  FFFF      
000040AC  6218      6947          bhi.s   domul_4
000040AE  6002      6948          bra.s   domul_3
                    6949   domul_2
000040B0  C141      6950          exg     D0,D1
                    6951   domul_3:
000040B2  2F02      6952          move.l  D2,-(A7)
000040B4  2401      6953          move.l  D1,D2
000040B6  4842      6954          swap    D2
000040B8  C2C0      6955          mulu    D0,D1
000040BA  C4C0      6956          mulu    D0,D2
000040BC  4842      6957          swap    D2
000040BE  4242      6958          clr.w   D2
000040C0  D282      6959          add.l   D2,D1
000040C2  241F      6960          move.l  (A7)+,D2
000040C4  4E75      6961          rts
                    6962   domul_4:
000040C6  48E7 3000 6963          movem.l D2/D3,-(A7)
000040CA  2401      6964          move.l  D1,D2
000040CC  2601      6965          move.l  D1,D3
000040CE  C2C0      6966          mulu    D0,D1
000040D0  4842      6967          swap    D2
000040D2  C4C0      6968          mulu    D0,D2
000040D4  4840      6969          swap    D0
000040D6  C6C0      6970          mulu    D0,D3
000040D8  D483      6971          add.l   D3,D2
000040DA  4842      6972          swap    D2
000040DC  4242      6973          clr.w   D2
000040DE  D282      6974          add.l   D2,D1
000040E0  4CDF 000C 6975          movem.l (A7)+,D2/D3
000040E4  4E75      6976          rts
                    6977   _gets:
000040E6  4E56 0000 6978          link      A6,#0
000040EA  48E7 3820 6979          movem.l   D2/D3/D4/A2,-(A7)
000040EE  45F8 2F44 6980          lea       _putch,A2
000040F2  282E 0008 6981          move.l    8(A6),D4
000040F6  2404      6982          move.l    D4,D2
                    6983   gets_1:
000040F8  6100 EE7A 6984          bsr       _getch
000040FC  2600      6985          move.l    D0,D3
000040FE  0C80 0000 6986          cmp.l     #10,D0
00004102  000A      
00004104  6700 003C 6987          beq       gets_3
00004108  0C83 0000 6988          cmp.l     #8,D3
0000410C  0008      
0000410E  6712      6989          beq.s     gets_4
00004110  2042      6990          move.l    D2,A0
00004112  5282      6991          addq.l    #1,D2
00004114  1083      6992          move.b    D3,(A0)
00004116  4883      6993          ext.w     D3
00004118  48C3      6994          ext.l     D3
0000411A  2F03      6995          move.l    D3,-(A7)
0000411C  4E92      6996          jsr       (A2)
0000411E  584F      6997          addq.w    #4,A7
00004120  601E      6998          bra.s     gets_6
                    6999   gets_4:
00004122  B484      7000          cmp.l     D4,D2
00004124  631A      7001          bls.s     gets_6
00004126  4878 0008 7002          pea       8
0000412A  4E92      7003          jsr       (A2)
0000412C  584F      7004          addq.w    #4,A7
0000412E  4878 0020 7005          pea       32
00004132  4E92      7006          jsr       (A2)
00004134  584F      7007          addq.w    #4,A7
00004136  4878 0008 7008          pea       8
0000413A  4E92      7009          jsr       (A2)
0000413C  584F      7010          addq.w    #4,A7
0000413E  5382      7011          subq.l    #1,D2
                    7012   gets_6:
00004140  60B6      7013          bra       gets_1
                    7014   gets_3:
00004142  4878 000A 7015          pea       10
00004146  4E92      7016          jsr       (A2)
00004148  584F      7017          addq.w    #4,A7
0000414A  2042      7018          move.l    D2,A0
0000414C  4210      7019          clr.b     (A0)
0000414E  2004      7020          move.l    D4,D0
00004150  4CDF 041C 7021          movem.l   (A7)+,D2/D3/D4/A2
00004154  4E5E      7022          unlk      A6
00004156  4E75      7023          rts
                    7024   _ungetch:
00004158  4E56 0000 7025          link      A6,#0
0000415C  23EE 0008 7026          move.l    8(A6),__ungetbuf
00004160  0B00 00C0 
00004164  202E 0008 7027          move.l    8(A6),D0
00004168  4E5E      7028          unlk      A6
0000416A  4E75      7029          rts
                    7030   @itoa_convert:
0000416C  4E56 0000 7031          link      A6,#0
00004170  48E7 3C00 7032          movem.l   D2/D3/D4/D5,-(A7)
00004174  242E 0008 7033          move.l    8(A6),D2
00004178  262E 0010 7034          move.l    16(A6),D3
0000417C  2A2E 000C 7035          move.l    12(A6),D5
00004180  2F05      7036          move.l    D5,-(A7)
00004182  2F03      7037          move.l    D3,-(A7)
00004184  6100 ECE0 7038          bsr       ULDIV
00004188  202F 0004 7039          move.l    4(A7),D0
0000418C  504F      7040          addq.w    #8,A7
0000418E  2800      7041          move.l    D0,D4
00004190  BA83      7042          cmp.l     D3,D5
00004192  651A      7043          blo.s     @itoa_convert_1
00004194  2F03      7044          move.l    D3,-(A7)
00004196  2F05      7045          move.l    D5,-(A7)
00004198  2F03      7046          move.l    D3,-(A7)
0000419A  6100 ECCA 7047          bsr       ULDIV
0000419E  2217      7048          move.l    (A7),D1
000041A0  504F      7049          addq.w    #8,A7
000041A2  2F01      7050          move.l    D1,-(A7)
000041A4  2F02      7051          move.l    D2,-(A7)
000041A6  61C4      7052          bsr       @itoa_convert
000041A8  DEFC 000C 7053          add.w     #12,A7
000041AC  2400      7054          move.l    D0,D2
                    7055   @itoa_convert_1:
000041AE  0C84 0000 7056          cmp.l     #9,D4
000041B2  0009      
000041B4  6E0A      7057          bgt.s     @itoa_convert_3
000041B6  2004      7058          move.l    D4,D0
000041B8  0680 0000 7059          add.l     #48,D0
000041BC  0030      
000041BE  600E      7060          bra.s     @itoa_convert_4
                    7061   @itoa_convert_3:
000041C0  2004      7062          move.l    D4,D0
000041C2  0680 0000 7063          add.l     #97,D0
000041C6  0061      
000041C8  0480 0000 7064          sub.l     #10,D0
000041CC  000A      
                    7065   @itoa_convert_4:
000041CE  2042      7066          move.l    D2,A0
000041D0  1080      7067          move.b    D0,(A0)
000041D2  2002      7068          move.l    D2,D0
000041D4  5280      7069          addq.l    #1,D0
000041D6  4CDF 003C 7070          movem.l   (A7)+,D2/D3/D4/D5
000041DA  4E5E      7071          unlk      A6
000041DC  4E75      7072          rts
                    7073   _ltoa:
000041DE  4E56 0000 7074          link      A6,#0
000041E2  48E7 3C00 7075          movem.l   D2/D3/D4/D5,-(A7)
000041E6  242E 0008 7076          move.l    8(A6),D2
000041EA  262E 000C 7077          move.l    12(A6),D3
000041EE  2A2E 0010 7078          move.l    16(A6),D5
000041F2  2803      7079          move.l    D3,D4
000041F4  0C85 0000 7080          cmp.l     #2,D5
000041F8  0002      
000041FA  6D08      7081          blt.s     ltoa_3
000041FC  0C85 0000 7082          cmp.l     #36,D5
00004200  0024      
00004202  6F06      7083          ble.s     ltoa_1
                    7084   ltoa_3:
00004204  2003      7085          move.l    D3,D0
00004206  6000 0052 7086          bra       ltoa_4
                    7087   ltoa_1:
0000420A  0C85 0000 7088          cmp.l     #10,D5
0000420E  000A      
00004210  6600 0032 7089          bne       ltoa_5
00004214  0C82 0000 7090          cmp.l     #0,D2
00004218  0000      
0000421A  6C28      7091          bge.s     ltoa_5
0000421C  2002      7092          move.l    D2,D0
0000421E  4480      7093          neg.l     D0
00004220  2400      7094          move.l    D0,D2
00004222  0C82 0000 7095          cmp.l     #0,D2
00004226  0000      
00004228  6C12      7096          bge.s     ltoa_7
0000422A  4879 0000 7097          pea       @itoa_1
0000422E  5776      
00004230  2F03      7098          move.l    D3,-(A7)
00004232  6100 EC22 7099          bsr       _strcpy
00004236  504F      7100          addq.w    #8,A7
00004238  2003      7101          move.l    D3,D0
0000423A  601E      7102          bra.s     ltoa_4
                    7103   ltoa_7:
0000423C  2044      7104          move.l    D4,A0
0000423E  5284      7105          addq.l    #1,D4
00004240  10BC 002D 7106          move.b    #45,(A0)
                    7107   ltoa_5:
00004244  2F05      7108          move.l    D5,-(A7)
00004246  2F02      7109          move.l    D2,-(A7)
00004248  2F04      7110          move.l    D4,-(A7)
0000424A  6100 FF20 7111          bsr       @itoa_convert
0000424E  DEFC 000C 7112          add.w     #12,A7
00004252  2800      7113          move.l    D0,D4
00004254  2044      7114          move.l    D4,A0
00004256  4210      7115          clr.b     (A0)
00004258  2003      7116          move.l    D3,D0
                    7117   ltoa_4:
0000425A  4CDF 003C 7118          movem.l   (A7)+,D2/D3/D4/D5
0000425E  4E5E      7119          unlk      A6
00004260  4E75      7120          rts
                    7121   _ultoa:
00004262  4E56 0000 7122          link      A6,#0
00004266  48E7 3800 7123          movem.l   D2/D3/D4,-(A7)
0000426A  262E 0010 7124          move.l    16(A6),D3
0000426E  282E 000C 7125          move.l    12(A6),D4
00004272  2404      7126          move.l    D4,D2
00004274  0C83 0000 7127          cmp.l     #2,D3
00004278  0002      
0000427A  6D08      7128          blt.s     ultoa_3
0000427C  0C83 0000 7129          cmp.l     #36,D3
00004280  0024      
00004282  6F04      7130          ble.s     ultoa_1
                    7131   ultoa_3:
00004284  2004      7132          move.l    D4,D0
00004286  6018      7133          bra.s     ultoa_4
                    7134   ultoa_1:
00004288  2F03      7135          move.l    D3,-(A7)
0000428A  2F2E 0008 7136          move.l    8(A6),-(A7)
0000428E  2F02      7137          move.l    D2,-(A7)
00004290  6100 FEDA 7138          bsr       @itoa_convert
00004294  DEFC 000C 7139          add.w     #12,A7
00004298  2400      7140          move.l    D0,D2
0000429A  2042      7141          move.l    D2,A0
0000429C  4210      7142          clr.b     (A0)
0000429E  2004      7143          move.l    D4,D0
                    7144   ultoa_4:
000042A0  4CDF 001C 7145          movem.l   (A7)+,D2/D3/D4
000042A4  4E5E      7146          unlk      A6
000042A6  4E75      7147          rts
                    7148   _itoa:
000042A8  4E56 0000 7149          link      A6,#0
000042AC  2F2E 0010 7150          move.l    16(A6),-(A7)
000042B0  2F2E 000C 7151          move.l    12(A6),-(A7)
000042B4  2F2E 0008 7152          move.l    8(A6),-(A7)
000042B8  6100 FF24 7153          bsr       _ltoa
000042BC  DEFC 000C 7154          add.w     #12,A7
000042C0  4E5E      7155          unlk      A6
000042C2  4E75      7156          rts
                    7157   _strlen:
000042C4  206F 0004 7158          move.l    (4,A7),A0
000042C8  2248      7159          move.l    A0,A1
                    7160   strlen_1:
000042CA  4A19      7161          tst.b     (A1)+
000042CC  66FC      7162          bne       strlen_1
000042CE  2009      7163          move.l    A1,D0
000042D0  9088      7164          sub.l     A0,D0
000042D2  5380      7165          subq.l    #1,D0
000042D4  4E75      7166          rts
                    7167          section   const
                    7168   
                    7169   @m68kde~1_1:
000042D6  0D0A 00   7170          dc.b      13,10,0
                    7171   @m68kde~1_2:
000042DA  0D53 7769 7172          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000042DE  7463 6865 
000042E2  7320 5357 
000042E6  5B        
000042E7  372D 305D 7173          dc.b      55,45,48,93,32,61,32,0
000042EB  203D 2000 
                    7174   @m68kde~1_3:
000042F0  3000      7175          dc.b      48,0
                    7176   @m68kde~1_4:
000042F2  3100      7177          dc.b      49,0
                    7178   @m68kde~1_5:
000042F4  0D0A 4475 7179          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000042F8  6D70 204D 
000042FC  656D 6F72 
00004300  79        
00004301  2042 6C6F 7180          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004305  636B 3A20 
00004309  3C45 5343 
0000430D  3E20      
0000430F  746F 2041 7181          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004313  626F 7274 
00004317  2C20 3C53 
0000431B  50        
0000431C  4143 453E 7182          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004320  2074 6F20 
00004324  436F 6E74 
00004328  69        
00004329  6E75 6500 7183          dc.b      110,117,101,0
                    7184   @m68kde~1_6:
0000432E  0D0A 456E 7185          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004332  7465 7220 
00004336  5374 6172 
0000433A  74        
0000433B  2041 6464 7186          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000433F  7265 7373 
00004343  3A20 00   
                    7187   @m68kde~1_7:
00004346  0D0A 2530 7188          dc.b      13,10,37,48,56,120,32,0
0000434A  3878 2000 
                    7189   @m68kde~1_8:
0000434E  2530 3258 7190          dc.b      37,48,50,88,0
00004352  00        
                    7191   @m68kde~1_9:
00004354  2020 00   7192          dc.b      32,32,0
                    7193   @m68kde~1_10:
00004358  0D0A 4669 7194          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0000435C  6C6C 204D 
00004360  656D 6F72 
00004364  79        
00004365  2042 6C6F 7195          dc.b      32,66,108,111,99,107,0
00004369  636B 00   
                    7196   @m68kde~1_11:
0000436C  0D0A 456E 7197          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004370  7465 7220 
00004374  456E 6420 
00004378  41        
00004379  6464 7265 7198          dc.b      100,100,114,101,115,115,58,32,0
0000437D  7373 3A20 
00004381  00        
                    7199   @m68kde~1_12:
00004382  0D0A 456E 7200          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004386  7465 7220 
0000438A  4669 6C6C 
0000438E  20        
0000438F  4461 7461 7201          dc.b      68,97,116,97,58,32,0
00004393  3A20 00   
                    7202   @m68kde~1_13:
00004396  0D0A 4669 7203          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
0000439A  6C6C 696E 
0000439E  6720 4164 
000043A2  64        
000043A3  7265 7373 7204          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000043A7  6573 205B 
000043AB  2425 3038 
000043AF  58        
000043B0  202D 2024 7205          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000043B4  2530 3858 
000043B8  5D20 7769 
000043BC  7468      
000043BE  2024 2530 7206          dc.b      32,36,37,48,50,88,0
000043C2  3258 00   
                    7207   @m68kde~1_14:
000043C6  0D0A 5573 7208          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000043CA  6520 4879 
000043CE  7065 7254 
000043D2  65        
000043D3  726D 696E 7209          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000043D7  616C 2074 
000043DB  6F20 5365 
000043DF  6E64 2054 7210          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000043E3  6578 7420 
000043E7  4669 6C65 
000043EB  2028 2E68 7211          dc.b      32,40,46,104,101,120,41,13,10,0
000043EF  6578 290D 
000043F3  0A00      
                    7212   @m68kde~1_15:
000043F6  0D0A 4C6F 7213          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000043FA  6164 2046 
000043FE  6169 6C65 
00004402  64        
00004403  2061 7420 7214          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00004407  4164 6472 
0000440B  6573 7320 
0000440F  3D        
00004410  205B 2425 7215          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004414  3038 585D 
00004418  0D0A 00   
                    7216   @m68kde~1_16:
0000441C  0D0A 5375 7217          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004420  6363 6573 
00004424  733A 2044 
00004428  6F        
00004429  776E 6C6F 7218          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
0000442D  6164 6564 
00004431  2025 6420 
00004435  6279 7465 7219          dc.b      98,121,116,101,115,13,10,0
00004439  730D 0A00 
                    7220   @m68kde~1_17:
0000443E  0D0A 4578 7221          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004442  616D 696E 
00004446  6520 616E 
0000444A  64        
0000444B  2043 6861 7222          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
0000444F  6E67 6520 
00004453  4D65 6D6F 
00004457  72        
00004458  7900      7223          dc.b      121,0
                    7224   @m68kde~1_18:
0000445A  0D0A 3C45 7225          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
0000445E  5343 3E20 
00004462  746F 2053 
00004466  746F      
00004468  702C 203C 7226          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000446C  5350 4143 
00004470  453E 2074 
00004474  6F20      
00004476  4164 7661 7227          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000447A  6E63 652C 
0000447E  2027 2D27 
00004482  2074      
00004484  6F20 476F 7228          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004488  2042 6163 
0000448C  6B2C 203C 
00004490  4441      
00004492  5441 3E20 7229          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004496  746F 2063 
0000449A  6861 6E67 
0000449E  65        
0000449F  00        7230          dc.b      0
                    7231   @m68kde~1_19:
000044A0  0D0A 456E 7232          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000044A4  7465 7220 
000044A8  4164 6472 
000044AC  65        
000044AD  7373 3A20 7233          dc.b      115,115,58,32,0
000044B1  00        
                    7234   @m68kde~1_20:
000044B2  0D0A 5B25 7235          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000044B6  3038 785D 
000044BA  203A 2025 
000044BE  3032 78   
000044C1  2020 00   7236          dc.b      32,32,0
                    7237   @m68kde~1_21:
000044C4  0D0A 5761 7238          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000044C8  726E 696E 
000044CC  6720 4368 
000044D0  61        
000044D1  6E67 6520 7239          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000044D5  4661 696C 
000044D9  6564 3A20 
000044DD  57        
000044DE  726F 7465 7240          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000044E2  205B 2530 
000044E6  3278 5D2C 
000044EA  20        
000044EB  5265 6164 7241          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000044EF  205B 2530 
000044F3  3278 5D00 
                    7242   @m68kde~1_22:
000044F8  0D0A 5772 7243          dc.b      13,10,87,114,111,116,101,32,86,97,108,58,32
000044FC  6F74 6520 
00004500  5661 6C3A 
00004504  20        
00004505  2530 3878 7244          dc.b      37,48,56,120,0
00004509  00        
                    7245   @m68kde~1_23:
0000450A  0A45 7261 7246          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
0000450E  7369 6E67 
00004512  2E2E 2E0A 
00004516  00        
                    7247   @m68kde~1_24:
00004518  0D0A 5265 7248          dc.b      13,10,82,101,97,100,32,68,97,116,97,58,32,37
0000451C  6164 2044 
00004520  6174 613A 
00004524  2025      
00004526  3038 7800 7249          dc.b      48,56,120,0
                    7250   @m68kde~1_25:
0000452A  0D0A 204C 7251          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
0000452E  6F61 6469 
00004532  6E67 2050 
00004536  72        
00004537  6F67 7261 7252          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
0000453B  6D20 4672 
0000453F  6F6D 2053 
00004543  50        
00004544  4920 466C 7253          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
00004548  6173 682E 
0000454C  2E2E 2E00 
                    7254   @m68kde~1_26:
00004550  0D0A 2052 7255          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
00004554  6561 6420 
00004558  4461 7461 
0000455C  3A20      
0000455E  2530 3878 7256          dc.b      37,48,56,120,32,10,0
00004562  200A 00   
                    7257   @m68kde~1_27:
00004566  2425 3038 7258          dc.b      36,37,48,56,88,32,32,0
0000456A  5820 2000 
                    7259   @m68kde~1_28:
0000456E  2000      7260          dc.b      32,0
                    7261   @m68kde~1_29:
00004570  2E00      7262          dc.b      46,0
                    7263   @m68kde~1_30:
00004572  2563 00   7264          dc.b      37,99,0
                    7265   @m68kde~1_31:
00004576  00        7266          dc.b      0
                    7267   @m68kde~1_32:
00004578  0D0A 0D0A 7268          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
0000457C  2044 3020 
00004580  3D20 2425 
00004584  3038 58   
00004587  2020 4130 7269          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
0000458B  203D 2024 
0000458F  2530 3858 
00004593  00        
                    7270   @m68kde~1_33:
00004594  0D0A 2044 7271          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004598  3120 3D20 
0000459C  2425 3038 
000045A0  5820 20   
000045A3  4131 203D 7272          dc.b      65,49,32,61,32,36,37,48,56,88,0
000045A7  2024 2530 
000045AB  3858 00   
                    7273   @m68kde~1_34:
000045AE  0D0A 2044 7274          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000045B2  3220 3D20 
000045B6  2425 3038 
000045BA  5820 20   
000045BD  4132 203D 7275          dc.b      65,50,32,61,32,36,37,48,56,88,0
000045C1  2024 2530 
000045C5  3858 00   
                    7276   @m68kde~1_35:
000045C8  0D0A 2044 7277          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
000045CC  3320 3D20 
000045D0  2425 3038 
000045D4  5820 20   
000045D7  4133 203D 7278          dc.b      65,51,32,61,32,36,37,48,56,88,0
000045DB  2024 2530 
000045DF  3858 00   
                    7279   @m68kde~1_36:
000045E2  0D0A 2044 7280          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000045E6  3420 3D20 
000045EA  2425 3038 
000045EE  5820 20   
000045F1  4134 203D 7281          dc.b      65,52,32,61,32,36,37,48,56,88,0
000045F5  2024 2530 
000045F9  3858 00   
                    7282   @m68kde~1_37:
000045FC  0D0A 2044 7283          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004600  3520 3D20 
00004604  2425 3038 
00004608  5820 20   
0000460B  4135 203D 7284          dc.b      65,53,32,61,32,36,37,48,56,88,0
0000460F  2024 2530 
00004613  3858 00   
                    7285   @m68kde~1_38:
00004616  0D0A 2044 7286          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
0000461A  3620 3D20 
0000461E  2425 3038 
00004622  5820 20   
00004625  4136 203D 7287          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004629  2024 2530 
0000462D  3858 00   
                    7288   @m68kde~1_39:
00004630  0D0A 2044 7289          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004634  3720 3D20 
00004638  2425 3038 
0000463C  5820 20   
0000463F  4137 203D 7290          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004643  2024 2530 
00004647  3858 00   
                    7291   @m68kde~1_40:
0000464A  0D0A 0D0A 7292          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
0000464E  5553 5020 
00004652  3D20 2425 
00004656  3038 58   
00004659  2020 2841 7293          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
0000465D  3729 2055 
00004661  7365 7220 
00004665  5350      
00004667  00        7294          dc.b      0
                    7295   @m68kde~1_41:
00004668  0D0A 5353 7296          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
0000466C  5020 3D20 
00004670  2425 3038 
00004674  5820 20   
00004677  2841 3729 7297          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
0000467B  2053 7570 
0000467F  6572 7669 
00004683  73        
00004684  6F72 2053 7298          dc.b      111,114,32,83,80,0
00004688  5000      
                    7299   @m68kde~1_42:
0000468A  0D0A 2053 7300          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
0000468E  5220 3D20 
00004692  2425 3034 
00004696  5820 20   
00004699  2000      7301          dc.b      32,0
                    7302   @m68kde~1_43:
0000469C  2020 205B 7303          dc.b      32,32,32,91,0
000046A0  00        
                    7304   @m68kde~1_44:
000046A2  0D0A 2050 7305          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000046A6  4320 3D20 
000046AA  2425 3038 
000046AE  5820 20   
000046B1  00        7306          dc.b      0
                    7307   @m68kde~1_45:
000046B2  5B40 2042 7308          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
000046B6  5245 414B 
000046BA  504F 494E 
000046BE  545D 00   
                    7309   @m68kde~1_46:
000046C2  0D0A 5750 7310          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000046C6  2564 203D 
000046CA  2025 7300 
                    7311   @m68kde~1_47:
000046CE  0D0A 0D0A 7312          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000046D2  0D0A 0D0A 
000046D6  0D0A 0D0A 
000046DA  5369 6E   
000046DD  676C 6520 7313          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000046E1  5374 6570 
000046E5  2020 3A5B 
000046E9  4F        
000046EA  4E5D 00   7314          dc.b      78,93,0
                    7315   @m68kde~1_48:
000046EE  0D0A 4272 7316          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000046F2  6561 6B20 
000046F6  506F 696E 
000046FA  74        
000046FB  7320 3A5B 7317          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000046FF  4469 7361 
00004703  626C 6564 
00004707  5D        
00004708  00        7318          dc.b      0
                    7319   @m68kde~1_49:
0000470A  0D0A 5072 7320          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
0000470E  6573 7320 
00004712  3C53 5041 
00004716  4345      
00004718  3E20 746F 7321          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
0000471C  2045 7865 
00004720  6375 7465 
00004724  20        
00004725  4E65 7874 7322          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004729  2049 6E73 
0000472D  7472 7563 
00004731  7469 6F6E 7323          dc.b      116,105,111,110,0
00004735  00        
                    7324   @m68kde~1_50:
00004736  0D0A 5072 7325          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000473A  6573 7320 
0000473E  3C45 5343 
00004742  3E20      
00004744  746F 2052 7326          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004748  6573 756D 
0000474C  6520 5072 
00004750  6F67 7261 7327          dc.b      111,103,114,97,109,0
00004754  6D00      
                    7328   @m68kde~1_51:
00004756  0D0A 496C 7329          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
0000475A  6C65 6761 
0000475E  6C20 4461 
00004762  74        
00004763  6120 5265 7330          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004767  6769 7374 
0000476B  6572 203A 
0000476F  20        
00004770  5573 6520 7331          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004774  4430 2D44 
00004778  372E 2E2E 
0000477C  2E2E      
0000477E  0D0A 00   7332          dc.b      13,10,0
                    7333   @m68kde~1_52:
00004782  0D0A 4425 7334          dc.b      13,10,68,37,99,32,61,32,0
00004786  6320 3D20 
0000478A  00        
                    7335   @m68kde~1_53:
0000478C  0D0A 496C 7336          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004790  6C65 6761 
00004794  6C20 4164 
00004798  64        
00004799  7265 7373 7337          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
0000479D  2052 6567 
000047A1  6973 7465 
000047A5  7220 3A20 7338          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000047A9  5573 6520 
000047AD  4130 2D41 
000047B1  372E      
000047B3  2E2E 2E2E 7339          dc.b      46,46,46,46,13,10,0
000047B7  0D0A 00   
                    7340   @m68kde~1_54:
000047BA  0D0A 4125 7341          dc.b      13,10,65,37,99,32,61,32,0
000047BE  6320 3D20 
000047C2  00        
                    7342   @m68kde~1_55:
000047C4  0D0A 5573 7343          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000047C8  6572 2053 
000047CC  5020 3D20 
000047D0  00        
                    7344   @m68kde~1_56:
000047D2  0D0A 496C 7345          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000047D6  6C65 6761 
000047DA  6C20 5265 
000047DE  67        
000047DF  6973 7465 7346          dc.b      105,115,116,101,114,46,46,46,46,0
000047E3  722E 2E2E 
000047E7  2E00      
                    7347   @m68kde~1_57:
000047EA  0D0A 5379 7348          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000047EE  7374 656D 
000047F2  2053 5020 
000047F6  3D        
000047F7  2000      7349          dc.b      32,0
                    7350   @m68kde~1_58:
000047FA  0D0A 5043 7351          dc.b      13,10,80,67,32,61,32,0
000047FE  203D 2000 
                    7352   @m68kde~1_59:
00004802  0D0A 5352 7353          dc.b      13,10,83,82,32,61,32,0
00004806  203D 2000 
                    7354   @m68kde~1_60:
0000480A  0D0A 496C 7355          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000480E  6C65 6761 
00004812  6C20 5265 
00004816  67        
00004817  6973 7465 7356          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
0000481B  723A 2055 
0000481F  7365 2041 
00004823  30        
00004824  2D41 372C 7357          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004828  2044 302D 
0000482C  4437 2C20 
00004830  5353 50   
00004833  2C20 5553 7358          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004837  502C 2050 
0000483B  4320 6F72 
0000483F  2053      
00004841  520D 0A00 7359          dc.b      82,13,10,0
                    7360   @m68kde~1_61:
00004846  0D0A 0D0A 7361          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
0000484A  4E75 6D20 
0000484E  2020 2020 
00004852  4164      
00004854  6472 6573 7362          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004858  7320 2020 
0000485C  2020 2049 
00004860  6E        
00004861  7374 7275 7363          dc.b      115,116,114,117,99,116,105,111,110,0
00004865  6374 696F 
00004869  6E00      
                    7364   @m68kde~1_62:
0000486C  0D0A 2D2D 7365          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004870  2D20 2020 
00004874  2020 2D2D 
00004878  2D2D 2D   
0000487B  2D2D 2D2D 7366          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
0000487F  2020 2020 
00004883  2D2D 2D2D 
00004887  2D2D 2D   
0000488A  2D2D 2D2D 7367          dc.b      45,45,45,45,0
0000488E  00        
                    7368   @m68kde~1_63:
00004890  0D0A 4E6F 7369          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004894  2042 7265 
00004898  616B 506F 
0000489C  69        
0000489D  6E74 7320 7370          dc.b      110,116,115,32,83,101,116,0
000048A1  5365 7400 
                    7371   @m68kde~1_64:
000048A6  0D0A 2533 7372          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000048AA  6420 2020 
000048AE  2020 2425 
000048B2  3038 78   
000048B5  00        7373          dc.b      0
                    7374   @m68kde~1_65:
000048B6  0D0A 4E75 7375          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000048BA  6D20 2020 
000048BE  2020 4164 
000048C2  6472      
000048C4  6573 7300 7376          dc.b      101,115,115,0
                    7377   @m68kde~1_66:
000048C8  0D0A 2D2D 7378          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000048CC  2D20 2020 
000048D0  2020 2D2D 
000048D4  2D2D 2D   
000048D7  2D2D 2D2D 7379          dc.b      45,45,45,45,0
000048DB  00        
                    7380   @m68kde~1_67:
000048DC  0D0A 4E6F 7381          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000048E0  2057 6174 
000048E4  6368 506F 
000048E8  69        
000048E9  6E74 7320 7382          dc.b      110,116,115,32,83,101,116,0
000048ED  5365 7400 
                    7383   @m68kde~1_68:
000048F2  0D0A 456E 7384          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000048F6  7465 7220 
000048FA  4272 6561 
000048FE  6B        
000048FF  2050 6F69 7385          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004903  6E74 204E 
00004907  756D 6265 
0000490B  72        
0000490C  3A20 00   7386          dc.b      58,32,0
                    7387   @m68kde~1_69:
00004910  0D0A 496C 7388          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004914  6C65 6761 
00004918  6C20 5261 
0000491C  6E        
0000491D  6765 203A 7389          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004921  2055 7365 
00004925  2030 202D 
00004929  2037      
0000492B  00        7390          dc.b      0
                    7391   @m68kde~1_70:
0000492C  0D0A 4272 7392          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004930  6561 6B20 
00004934  506F 696E 
00004938  74        
00004939  2043 6C65 7393          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000493D  6172 6564 
00004941  2E2E 2E2E 
00004945  2E        
00004946  0D0A 00   7394          dc.b      13,10,0
                    7395   @m68kde~1_71:
0000494A  0D0A 4272 7396          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000494E  6561 6B20 
00004952  506F 696E 
00004956  74        
00004957  2077 6173 7397          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
0000495B  6E27 7420 
0000495F  5365 742E 
00004963  2E        
00004964  2E2E 2E00 7398          dc.b      46,46,46,0
                    7399   @m68kde~1_72:
00004968  0D0A 456E 7400          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
0000496C  7465 7220 
00004970  5761 7463 
00004974  68        
00004975  2050 6F69 7401          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004979  6E74 204E 
0000497D  756D 6265 
00004981  72        
00004982  3A20 00   7402          dc.b      58,32,0
                    7403   @m68kde~1_73:
00004986  0D0A 5761 7404          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000498A  7463 6820 
0000498E  506F 696E 
00004992  74        
00004993  2043 6C65 7405          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004997  6172 6564 
0000499B  2E2E 2E2E 
0000499F  2E        
000049A0  0D0A 00   7406          dc.b      13,10,0
                    7407   @m68kde~1_74:
000049A4  0D0A 5761 7408          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000049A8  7463 6820 
000049AC  506F 696E 
000049B0  74        
000049B1  2057 6173 7409          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000049B5  206E 6F74 
000049B9  2053 6574 
000049BD  2E        
000049BE  2E2E 2E2E 7410          dc.b      46,46,46,46,0
000049C2  00        
                    7411   @m68kde~1_75:
000049C4  0D0A 4E6F 7412          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000049C8  2046 5245 
000049CC  4520 4272 
000049D0  6561      
000049D2  6B20 506F 7413          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000049D6  696E 7473 
000049DA  2E2E 2E2E 
000049DE  2E        
000049DF  00        7414          dc.b      0
                    7415   @m68kde~1_76:
000049E0  0D0A 4272 7416          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000049E4  6561 6B20 
000049E8  506F 696E 
000049EC  74        
000049ED  2041 6464 7417          dc.b      32,65,100,100,114,101,115,115,58,32,0
000049F1  7265 7373 
000049F5  3A20 00   
                    7418   @m68kde~1_77:
000049F8  0D0A 4572 7419          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000049FC  726F 7220 
00004A00  3A20 4272 
00004A04  65        
00004A05  616B 2050 7420          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004A09  6F69 6E74 
00004A0D  7320 4341 
00004A11  4E        
00004A12  4E4F 5420 7421          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004A16  6265 2073 
00004A1A  6574 2061 
00004A1E  74        
00004A1F  204F 4444 7422          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004A23  2061 6464 
00004A27  7265 7373 
00004A2B  65        
00004A2C  7300      7423          dc.b      115,0
                    7424   @m68kde~1_78:
00004A2E  0D0A 4572 7425          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004A32  726F 7220 
00004A36  3A20 4272 
00004A3A  65        
00004A3B  616B 2050 7426          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004A3F  6F69 6E74 
00004A43  7320 4341 
00004A47  4E        
00004A48  4E4F 5420 7427          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004A4C  6265 2073 
00004A50  6574 2066 
00004A54  6F        
00004A55  7220 524F 7428          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004A59  4D20 696E 
00004A5D  2052 616E 
00004A61  67        
00004A62  6520 3A20 7429          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004A66  5B24 302D 
00004A6A  2430 3030 
00004A6E  3037 46   
00004A71  4646 5D00 7430          dc.b      70,70,93,0
                    7431   @m68kde~1_79:
00004A76  0D0A 4572 7432          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004A7A  726F 723A 
00004A7E  2042 7265 
00004A82  61        
00004A83  6B20 506F 7433          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004A87  696E 7420 
00004A8B  416C 7265 
00004A8F  6164 7920 7434          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004A93  4578 6973 
00004A97  7473 2061 
00004A9B  74        
00004A9C  2041 6464 7435          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004AA0  7265 7373 
00004AA4  203A 2025 
00004AA8  30        
00004AA9  3878 0D0A 7436          dc.b      56,120,13,10,0
00004AAD  00        
                    7437   @m68kde~1_80:
00004AAE  0D0A 4272 7438          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004AB2  6561 6B20 
00004AB6  506F 696E 
00004ABA  74        
00004ABB  2053 6574 7439          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004ABF  2061 7420 
00004AC3  4164 6472 
00004AC7  65        
00004AC8  7373 3A20 7440          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004ACC  5B24 2530 
00004AD0  3878 5D00 
                    7441   @m68kde~1_81:
00004AD4  0D0A 4E6F 7442          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004AD8  2046 5245 
00004ADC  4520 5761 
00004AE0  7463      
00004AE2  6820 506F 7443          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004AE6  696E 7473 
00004AEA  2E2E 2E2E 
00004AEE  2E        
00004AEF  00        7444          dc.b      0
                    7445   @m68kde~1_82:
00004AF0  0D0A 5761 7446          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004AF4  7463 6820 
00004AF8  506F 696E 
00004AFC  74        
00004AFD  2041 6464 7447          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004B01  7265 7373 
00004B05  3A20 00   
                    7448   @m68kde~1_83:
00004B08  0D0A 4572 7449          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004B0C  726F 723A 
00004B10  2057 6174 
00004B14  63        
00004B15  6820 506F 7450          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004B19  696E 7420 
00004B1D  416C 7265 
00004B21  6164 7920 7451          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004B25  5365 7420 
00004B29  6174 2041 
00004B2D  64        
00004B2E  6472 6573 7452          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004B32  7320 3A20 
00004B36  2530 3878 
00004B3A  0D        
00004B3B  0A00      7453          dc.b      10,0
                    7454   @m68kde~1_84:
00004B3E  0D0A 5761 7455          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004B42  7463 6820 
00004B46  506F 696E 
00004B4A  74        
00004B4B  2053 6574 7456          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004B4F  2061 7420 
00004B53  4164 6472 
00004B57  65        
00004B58  7373 3A20 7457          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004B5C  5B24 2530 
00004B60  3878 5D00 
                    7458   @m68kde~1_85:
00004B64  0D0A 0D0A 7459          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004B68  0D0A 0D0A 
00004B6C  4042 5245 
00004B70  414B 50   
00004B73  4F49 4E54 7460          dc.b      79,73,78,84,0
00004B77  00        
                    7461   @m68kde~1_86:
00004B78  0D0A 5369 7462          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004B7C  6E67 6C65 
00004B80  2053 7465 
00004B84  70        
00004B85  203A 205B 7463          dc.b      32,58,32,91,79,78,93,0
00004B89  4F4E 5D00 
                    7464   @m68kde~1_87:
00004B8E  0D0A 4272 7465          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004B92  6561 6B50 
00004B96  6F69 6E74 
00004B9A  73        
00004B9B  203A 205B 7466          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004B9F  456E 6162 
00004BA3  6C65 645D 
00004BA7  00        
                    7467   @m68kde~1_88:
00004BA8  0D0A 5072 7468          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004BAC  6573 7320 
00004BB0  3C45 5343 
00004BB4  3E20      
00004BB6  746F 2052 7469          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004BBA  6573 756D 
00004BBE  6520 5573 
00004BC2  6572 2050 7470          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004BC6  726F 6772 
00004BCA  616D 0D0A 
00004BCE  00        
                    7471   @m68kde~1_89:
00004BD0  0D0A 556E 7472          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004BD4  6B6E 6F77 
00004BD8  6E20 436F 
00004BDC  6D        
00004BDD  6D61 6E64 7473          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004BE1  2E2E 2E2E 
00004BE5  2E0D 0A00 
                    7474   @m68kde~1_90:
00004BEA  0D0A 5072 7475          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004BEE  6F67 7261 
00004BF2  6D20 456E 
00004BF6  64        
00004BF7  6564 2028 7476          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004BFB  5452 4150 
00004BFF  2023 3135 
00004C03  292E      
00004C05  2E2E 2E00 7477          dc.b      46,46,46,0
                    7478   @m68kde~1_91:
00004C0A  0D0A 4B69 7479          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004C0E  6C6C 2041 
00004C12  6C6C 2042 
00004C16  72        
00004C17  6561 6B20 7480          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004C1B  506F 696E 
00004C1F  7473 2E2E 
00004C23  2E        
00004C24  2879 2F6E 7481          dc.b      40,121,47,110,41,63,0
00004C28  293F 00   
                    7482   @m68kde~1_92:
00004C2C  0D0A 4B69 7483          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004C30  6C6C 2041 
00004C34  6C6C 2057 
00004C38  61        
00004C39  7463 6820 7484          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004C3D  506F 696E 
00004C41  7473 2E2E 
00004C45  2E        
00004C46  2879 2F6E 7485          dc.b      40,121,47,110,41,63,0
00004C4A  293F 00   
                    7486   @m68kde~1_93:
00004C4E  0D0A 2D2D 7487          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C52  2D2D 2D2D 
00004C56  2D2D 2D2D 
00004C5A  2D2D 2D   
00004C5D  2D2D 2D2D 7488          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C61  2D2D 2D2D 
00004C65  2D2D 2D2D 
00004C69  2D2D 2D   
00004C6C  2D2D 2D2D 7489          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C70  2D2D 2D2D 
00004C74  2D2D 2D2D 
00004C78  2D2D 2D   
00004C7B  2D2D 2D2D 7490          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C7F  2D2D 2D2D 
00004C83  2D2D 2D2D 
00004C87  2D2D 2D   
00004C8A  2D2D 2D2D 7491          dc.b      45,45,45,45,45,45,0
00004C8E  2D2D 00   
                    7492   @m68kde~1_94:
00004C92  0D0A 2020 7493          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004C96  4465 6275 
00004C9A  6767 6572 
00004C9E  20        
00004C9F  436F 6D6D 7494          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004CA3  616E 6420 
00004CA7  5375 6D6D 
00004CAB  6172 7900 7495          dc.b      97,114,121,0
                    7496   @m68kde~1_95:
00004CB0  0D0A 2020 7497          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004CB4  2E28 7265 
00004CB8  6729 2020 
00004CBC  2020      
00004CBE  2020 202D 7498          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004CC2  2043 6861 
00004CC6  6E67 6520 
00004CCA  5265      
00004CCC  6769 7374 7499          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004CD0  6572 733A 
00004CD4  2065 2E67 
00004CD8  2041 302D 7500          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004CDC  4137 2C44 
00004CE0  302D 4437 
00004CE4  2C50 43   
00004CE7  2C53 5350 7501          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004CEB  2C55 5350 
00004CEF  2C53 5200 
                    7502   @m68kde~1_96:
00004CF4  0D0A 2020 7503          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004CF8  4244 2F42 
00004CFC  532F 4243 
00004D00  2F42 4B   
00004D03  2020 2D20 7504          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004D07  4272 6561 
00004D0B  6B20 506F 
00004D0F  69        
00004D10  6E74 3A20 7505          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004D14  4469 7370 
00004D18  6C61 792F 
00004D1C  53        
00004D1D  6574 2F43 7506          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004D21  6C65 6172 
00004D25  2F4B 696C 
00004D29  6C        
00004D2A  00        7507          dc.b      0
                    7508   @m68kde~1_97:
00004D2C  0D0A 2020 7509          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004D30  4320 2020 
00004D34  2020 2020 
00004D38  2020 20   
00004D3B  2020 2D20 7510          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004D3F  436F 7079 
00004D43  2050 726F 
00004D47  67        
00004D48  7261 6D20 7511          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004D4C  6672 6F6D 
00004D50  2046 6C61 
00004D54  73        
00004D55  6820 746F 7512          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004D59  204D 6169 
00004D5D  6E20 4D65 
00004D61  6D        
00004D62  6F72 7900 7513          dc.b      111,114,121,0
                    7514   @m68kde~1_98:
00004D66  0D0A 2020 7515          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004D6A  4420 2020 
00004D6E  2020 2020 
00004D72  2020 20   
00004D75  2020 2D20 7516          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004D79  4475 6D70 
00004D7D  204D 656D 
00004D81  6F        
00004D82  7279 2043 7517          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004D86  6F6E 7465 
00004D8A  6E74 7320 
00004D8E  746F 2053 7518          dc.b      116,111,32,83,99,114,101,101,110,0
00004D92  6372 6565 
00004D96  6E00      
                    7519   @m68kde~1_99:
00004D98  0D0A 2020 7520          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004D9C  4520 2020 
00004DA0  2020 2020 
00004DA4  2020 20   
00004DA7  2020 2D20 7521          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004DAB  456E 7465 
00004DAF  7220 5374 
00004DB3  72        
00004DB4  696E 6720 7522          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004DB8  696E 746F 
00004DBC  204D 656D 
00004DC0  6F72 7900 7523          dc.b      111,114,121,0
                    7524   @m68kde~1_100:
00004DC4  0D0A 2020 7525          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004DC8  4620 2020 
00004DCC  2020 2020 
00004DD0  2020 20   
00004DD3  2020 2D20 7526          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004DD7  4669 6C6C 
00004DDB  204D 656D 
00004DDF  6F        
00004DE0  7279 2077 7527          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004DE4  6974 6820 
00004DE8  4461 7461 
00004DEC  00        
                    7528   @m68kde~1_101:
00004DEE  0D0A 2020 7529          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004DF2  4720 2020 
00004DF6  2020 2020 
00004DFA  2020 20   
00004DFD  2020 2D20 7530          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004E01  476F 2050 
00004E05  726F 6772 
00004E09  61        
00004E0A  6D20 5374 7531          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004E0E  6172 7469 
00004E12  6E67 2061 
00004E16  74        
00004E17  2041 6464 7532          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004E1B  7265 7373 
00004E1F  3A20 2425 
00004E23  30        
00004E24  3858 00   7533          dc.b      56,88,0
                    7534   @m68kde~1_102:
00004E28  0D0A 2020 7535          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004E2C  4C20 2020 
00004E30  2020 2020 
00004E34  2020 20   
00004E37  2020 2D20 7536          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004E3B  4C6F 6164 
00004E3F  2050 726F 
00004E43  67        
00004E44  7261 6D20 7537          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004E48  282E 4845 
00004E4C  5820 6669 
00004E50  6C        
00004E51  6529 2066 7538          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004E55  726F 6D20 
00004E59  4C61 7074 
00004E5D  6F        
00004E5E  7000      7539          dc.b      112,0
                    7540   @m68kde~1_103:
00004E60  0D0A 2020 7541          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004E64  4D20 2020 
00004E68  2020 2020 
00004E6C  2020 20   
00004E6F  2020 2D20 7542          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004E73  4D65 6D6F 
00004E77  7279 2045 
00004E7B  78        
00004E7C  616D 696E 7543          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004E80  6520 616E 
00004E84  6420 4368 
00004E88  61        
00004E89  6E67 6500 7544          dc.b      110,103,101,0
                    7545   @m68kde~1_104:
00004E8E  0D0A 2020 7546          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004E92  5020 2020 
00004E96  2020 2020 
00004E9A  2020 20   
00004E9D  2020 2D20 7547          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004EA1  5072 6F67 
00004EA5  7261 6D20 
00004EA9  46        
00004EAA  6C61 7368 7548          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004EAE  204D 656D 
00004EB2  6F72 7920 
00004EB6  7769 7468 7549          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004EBA  2055 7365 
00004EBE  7220 5072 
00004EC2  6F67 7261 7550          dc.b      111,103,114,97,109,0
00004EC6  6D00      
                    7551   @m68kde~1_105:
00004EC8  0D0A 2020 7552          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004ECC  5220 2020 
00004ED0  2020 2020 
00004ED4  2020 20   
00004ED7  2020 2D20 7553          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004EDB  4469 7370 
00004EDF  6C61 7920 
00004EE3  36        
00004EE4  3830 3030 7554          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004EE8  2052 6567 
00004EEC  6973 7465 
00004EF0  72        
00004EF1  7300      7555          dc.b      115,0
                    7556   @m68kde~1_106:
00004EF4  0D0A 2020 7557          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004EF8  5320 2020 
00004EFC  2020 2020 
00004F00  2020 20   
00004F03  2020 2D20 7558          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004F07  546F 6767 
00004F0B  6C65 204F 
00004F0F  4E        
00004F10  2F4F 4646 7559          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004F14  2053 696E 
00004F18  676C 6520 
00004F1C  53        
00004F1D  7465 7020 7560          dc.b      116,101,112,32,77,111,100,101,0
00004F21  4D6F 6465 
00004F25  00        
                    7561   @m68kde~1_107:
00004F26  0D0A 2020 7562          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004F2A  544D 2020 
00004F2E  2020 2020 
00004F32  2020 20   
00004F35  2020 2D20 7563          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004F39  5465 7374 
00004F3D  204D 656D 
00004F41  6F        
00004F42  7279 00   7564          dc.b      114,121,0
                    7565   @m68kde~1_108:
00004F46  0D0A 2020 7566          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004F4A  5453 2020 
00004F4E  2020 2020 
00004F52  2020 20   
00004F55  2020 2D20 7567          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004F59  5465 7374 
00004F5D  2053 7769 
00004F61  74        
00004F62  6368 6573 7568          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004F66  3A20 5357 
00004F6A  372D 3000 
                    7569   @m68kde~1_109:
00004F6E  0D0A 2020 7570          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004F72  5444 2020 
00004F76  2020 2020 
00004F7A  2020 20   
00004F7D  2020 2D20 7571          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004F81  5465 7374 
00004F85  2044 6973 
00004F89  70        
00004F8A  6C61 7973 7572          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004F8E  3A20 4C45 
00004F92  4473 2061 
00004F96  6E        
00004F97  6420 372D 7573          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004F9B  5365 676D 
00004F9F  656E 7400 
                    7574   @m68kde~1_110:
00004FA4  0D0A 2020 7575          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004FA8  5744 2F57 
00004FAC  532F 5743 
00004FB0  2F57 4B   
00004FB3  2020 2D20 7576          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004FB7  5761 7463 
00004FBB  6820 506F 
00004FBF  696E      
00004FC1  743A 2044 7577          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004FC5  6973 706C 
00004FC9  6179 2F53 
00004FCD  65        
00004FCE  742F 436C 7578          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004FD2  6561 722F 
00004FD6  4B69 6C6C 
00004FDA  00        
                    7579   @m68kde~1_111:
00004FDC  0D0A 2300 7580          dc.b      13,10,35,0
                    7581   @m68kde~1_112:
00004FE0  0D0A 5072 7582          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004FE4  6F67 7261 
00004FE8  6D20 5275 
00004FEC  6E        
00004FED  6E69 6E67 7583          dc.b      110,105,110,103,46,46,46,46,46,0
00004FF1  2E2E 2E2E 
00004FF5  2E00      
                    7584   @m68kde~1_113:
00004FF8  0D0A 5072 7585          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004FFC  6573 7320 
00005000  3C52 4553 
00005004  4554      
00005006  3E20 6275 7586          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
0000500A  7474 6F6E 
0000500E  203C 4B65 
00005012  79        
00005013  303E 206F 7587          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00005017  6E20 4445 
0000501B  3120 746F 
0000501F  2073      
00005021  746F 7000 7588          dc.b      116,111,112,0
                    7589   @m68kde~1_114:
00005026  0D0A 4572 7590          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
0000502A  726F 723A 
0000502E  2050 7265 
00005032  73        
00005033  7320 2747 7591          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00005037  2720 6669 
0000503B  7273 7420 
0000503F  74        
00005040  6F20 7374 7592          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00005044  6172 7420 
00005048  7072 6F67 
0000504C  7261 6D00 7593          dc.b      114,97,109,0
                    7594   @m68kde~1_115:
00005050  0D0A 5369 7595          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005054  6E67 6C65 
00005058  2053 7465 
0000505C  70        
0000505D  2020 3A5B 7596          dc.b      32,32,58,91,79,78,93,0
00005061  4F4E 5D00 
                    7597   @m68kde~1_116:
00005066  0D0A 5072 7598          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
0000506A  6573 7320 
0000506E  2747 2720 
00005072  74        
00005073  6F20 5472 7599          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00005077  6163 6520 
0000507B  5072 6F67 
0000507F  72        
00005080  616D 2066 7600          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00005084  726F 6D20 
00005088  6164 6472 
0000508C  6573 7320 7601          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00005090  2425 582E 
00005094  2E2E 2E2E 
00005098  00        
                    7602   @m68kde~1_117:
0000509A  0D0A 5075 7603          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
0000509E  7368 203C 
000050A2  5245 5345 
000050A6  5420      
000050A8  4275 7474 7604          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
000050AC  6F6E 3E20 
000050B0  746F 2053 
000050B4  74        
000050B5  6F70 2E2E 7605          dc.b      111,112,46,46,46,46,46,0
000050B9  2E2E 2E00 
                    7606   @m68kde~1_118:
000050BE  0D0A 5369 7607          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000050C2  6E67 6C65 
000050C6  2053 7465 
000050CA  70        
000050CB  203A 205B 7608          dc.b      32,58,32,91,79,70,70,93,0
000050CF  4F46 465D 
000050D3  00        
                    7609   @m68kde~1_119:
000050D4  0D0A 4272 7610          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000050D8  6561 6B20 
000050DC  506F 696E 
000050E0  74        
000050E1  7320 3A5B 7611          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
000050E5  456E 6162 
000050E9  6C65 645D 
000050ED  00        
                    7612   @m68kde~1_120:
000050EE  0D0A 5072 7613          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000050F2  6573 7320 
000050F6  3C45 5343 
000050FA  3E20      
000050FC  746F 2052 7614          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005100  6573 756D 
00005104  6520 5573 
00005108  6572 2050 7615          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
0000510C  726F 6772 
00005110  616D 2E2E 
00005114  2E        
00005115  2E2E 00   7616          dc.b      46,46,0
                    7617   @m68kde~1_121:
00005118  0D0A 5369 7618          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000511C  6E67 6C65 
00005120  2053 7465 
00005124  70        
00005125  2020 3A5B 7619          dc.b      32,32,58,91,79,70,70,93,0
00005129  4F46 465D 
0000512D  00        
                    7620   @m68kde~1_122:
0000512E  0D0A 0D0A 7621          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005132  5072 6F67 
00005136  7261 6D20 
0000513A  41        
0000513B  424F 5254 7622          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
0000513F  2021 2121 
00005143  2121 210D 
00005147  0A00      
                    7623   @m68kde~1_123:
0000514A  2573 0D0A 7624          dc.b      37,115,13,10,0
0000514E  00        
                    7625   @m68kde~1_124:
00005150  0D0A 0D0A 7626          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005154  5072 6F67 
00005158  7261 6D20 
0000515C  41        
0000515D  424F 5254 7627          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005161  2021 2121 
00005165  2121 00   
                    7628   @m68kde~1_125:
00005168  0D0A 556E 7629          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
0000516C  6861 6E64 
00005170  6C65 6420 
00005174  49        
00005175  6E74 6572 7630          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00005179  7275 7074 
0000517D  3A20 4952 
00005181  5125 6420 7631          dc.b      81,37,100,32,33,33,33,33,33,0
00005185  2121 2121 
00005189  2100      
                    7632   @m68kde~1_126:
0000518C  4144 4452 7633          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00005190  4553 5320 
00005194  4552 524F 
00005198  523A 20   
0000519B  3136 206F 7634          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
0000519F  7220 3332 
000051A3  2042 6974 
000051A7  2054      
000051A9  7261 6E73 7635          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
000051AD  6665 7220 
000051B1  746F 2F66 
000051B5  726F 6D20 7636          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000051B9  616E 204F 
000051BD  4444 2041 
000051C1  64        
000051C2  6472 6573 7637          dc.b      100,114,101,115,115,46,46,46,46,0
000051C6  732E 2E2E 
000051CA  2E00      
                    7638   @m68kde~1_127:
000051CC  556E 6861 7639          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000051D0  6E64 6C65 
000051D4  6420 5472 
000051D8  6170 2021 7640          dc.b      97,112,32,33,33,33,33,33,0
000051DC  2121 2121 
000051E0  00        
                    7641   @m68kde~1_128:
000051E2  4255 5320 7642          dc.b      66,85,83,32,69,114,114,111,114,33,0
000051E6  4572 726F 
000051EA  7221 00   
                    7643   @m68kde~1_129:
000051EE  4144 4452 7644          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
000051F2  4553 5320 
000051F6  4572 726F 
000051FA  7221      
000051FC  00        7645          dc.b      0
                    7646   @m68kde~1_130:
000051FE  494C 4C45 7647          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00005202  4741 4C20 
00005206  494E 5354 
0000520A  5255 43   
0000520D  5449 4F4E 7648          dc.b      84,73,79,78,0
00005211  00        
                    7649   @m68kde~1_131:
00005212  4449 5649 7650          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00005216  4445 2042 
0000521A  5920 5A45 
0000521E  524F 00   
                    7651   @m68kde~1_132:
00005222  2743 484B 7652          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00005226  2720 494E 
0000522A  5354 5255 
0000522E  4354 49   
00005231  4F4E 00   7653          dc.b      79,78,0
                    7654   @m68kde~1_133:
00005234  5452 4150 7655          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00005238  5620 494E 
0000523C  5354 5255 
00005240  4354 49   
00005243  4F4E 00   7656          dc.b      79,78,0
                    7657   @m68kde~1_134:
00005246  5052 4956 7658          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
0000524A  494C 4547 
0000524E  4520 5649 
00005252  4F4C 41   
00005255  5449 4F4E 7659          dc.b      84,73,79,78,0
00005259  00        
                    7660   @m68kde~1_135:
0000525A  554E 494E 7661          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
0000525E  4954 4941 
00005262  4C49 5345 
00005266  4420 49   
00005269  5251 00   7662          dc.b      82,81,0
                    7663   @m68kde~1_136:
0000526C  5350 5552 7664          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005270  494F 5553 
00005274  2049 5251 
00005278  00        
                    7665   @m68kde~1_137:
0000527A  0D0A 5374 7666          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
0000527E  6172 7420 
00005282  4164 6472 
00005286  65        
00005287  7373 2069 7667          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
0000528B  6E20 4D65 
0000528F  6D6F 7279 
00005293  3A20 00   7668          dc.b      58,32,0
                    7669   @m68kde~1_138:
00005296  0D0A 456E 7670          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
0000529A  7465 7220 
0000529E  5374 7269 
000052A2  6E        
000052A3  6720 2845 7671          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000052A7  5343 2074 
000052AB  6F20 656E 
000052AF  64        
000052B0  2920 3A00 7672          dc.b      41,32,58,0
                    7673   @m68kde~1_139:
000052B4  0A45 6E74 7674          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
000052B8  6572 2077 
000052BC  6861 7420 
000052C0  73        
000052C1  697A 6520 7675          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
000052C5  6F66 206D 
000052C9  656D 6F72 
000052CD  7920 796F 7676          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
000052D1  7520 7761 
000052D5  6E74 2074 
000052D9  6F20 7265 7677          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
000052DD  6164 2F77 
000052E1  7269 7465 
000052E5  0A20 4279 7678          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
000052E9  7465 203D 
000052ED  2030 0A20 
000052F1  576F      
000052F3  7264 203D 7679          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
000052F7  2031 0A20 
000052FB  4C6F 6E67 
000052FF  20        
00005300  576F 7264 7680          dc.b      87,111,114,100,32,61,32,50,10,0
00005304  203D 2032 
00005308  0A00      
                    7681   @m68kde~1_140:
0000530A  0A00      7682          dc.b      10,0
                    7683   @m68kde~1_141:
0000530C  0A45 6E74 7684          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005310  6572 2077 
00005314  6869 6368 
00005318  2064 6174 7685          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
0000531C  6120 7061 
00005320  7474 6572 
00005324  6E        
00005325  2079 6F75 7686          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005329  2077 616E 
0000532D  7420 746F 
00005331  2077 7269 7687          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005335  7465 2069 
00005339  6E74 6F20 
0000533D  6D65 6D6F 7688          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
00005341  7279 0A20 
00005345  3078 3030 
00005349  20        
0000534A  3D20 300A 7689          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
0000534E  2030 7842 
00005352  3220 3D20 
00005356  310A 20   
00005359  3078 4333 7690          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
0000535D  203D 2032 
00005361  0A20 3078 
00005365  4434      
00005367  203D 2033 7691          dc.b      32,61,32,51,10,0
0000536B  0A00      
                    7692   @m68kde~1_142:
0000536E  0A45 6E74 7693          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005372  6572 2077 
00005376  6869 6368 
0000537A  2064 6174 7694          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
0000537E  6120 7061 
00005382  7474 6572 
00005386  6E        
00005387  2079 6F75 7695          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000538B  2077 616E 
0000538F  7420 746F 
00005393  2077 7269 7696          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005397  7465 2069 
0000539B  6E74 6F20 
0000539F  6D65 6D6F 7697          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000053A3  7279 0A20 
000053A7  3078 3030 
000053AB  30        
000053AC  3020 3D20 7698          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
000053B0  300A 2030 
000053B4  7831 3233 
000053B8  3420 3D   
000053BB  2031 0A20 7699          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
000053BF  3078 4131 
000053C3  4232 203D 
000053C7  2032 0A   
000053CA  2030 7843 7700          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
000053CE  3344 3420 
000053D2  3D20 330A 
000053D6  00        
                    7701   @m68kde~1_143:
000053D8  0A45 6E74 7702          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000053DC  6572 2077 
000053E0  6869 6368 
000053E4  2064 6174 7703          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000053E8  6120 7061 
000053EC  7474 6572 
000053F0  6E        
000053F1  2079 6F75 7704          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000053F5  2077 616E 
000053F9  7420 746F 
000053FD  2077 7269 7705          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005401  7465 2069 
00005405  6E74 6F20 
00005409  6D65 6D6F 7706          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
0000540D  7279 0A20 
00005411  3078 3030 
00005415  30        
00005416  305F 3030 7707          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
0000541A  3030 203D 
0000541E  2030 0A20 
00005422  3078 41   
00005425  4142 425F 7708          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
00005429  4343 4444 
0000542D  203D 2031 
00005431  0A20 30   
00005434  7831 3132 7709          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
00005438  325F 3333 
0000543C  3434 203D 
00005440  2032 0A   
00005443  2030 7837 7710          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
00005447  3635 345F 
0000544B  3332 3130 
0000544F  203D 20   
00005452  330A 00   7711          dc.b      51,10,0
                    7712   @m68kde~1_144:
00005456  0A50 726F 7713          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
0000545A  7669 6465 
0000545E  2053 7461 
00005462  72        
00005463  7420 4164 7714          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
00005467  6472 6573 
0000546B  7320 696E 
0000546F  2068 6578 7715          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
00005473  2028 646F 
00005477  206E 6F74 
0000547B  2075 7365 7716          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
0000547F  2030 7820 
00005483  7072 6566 
00005487  6978 290A 7717          dc.b      105,120,41,10,48,120,0
0000548B  3078 00   
                    7718   @m68kde~1_145:
0000548E  0A50 726F 7719          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
00005492  7669 6465 
00005496  2045 6E64 
0000549A  2041 6464 7720          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
0000549E  7265 7373 
000054A2  2069 6E20 
000054A6  6865 7820 7721          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
000054AA  2864 6F20 
000054AE  6E6F 7420 
000054B2  7573 6520 7722          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
000054B6  3078 2070 
000054BA  7265 6669 
000054BE  7829 0A30 7723          dc.b      120,41,10,48,120,0
000054C2  7800      
                    7724   @m68kde~1_146:
000054C4  0A53 7461 7725          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
000054C8  7274 2041 
000054CC  6464 7265 
000054D0  73        
000054D1  7320 3078 7726          dc.b      115,32,48,120,37,48,56,120,10,0
000054D5  2530 3878 
000054D9  0A00      
                    7727   @m68kde~1_147:
000054DC  0A45 6E64 7728          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
000054E0  2041 6464 
000054E4  7265 7373 
000054E8  3A20 3078 7729          dc.b      58,32,48,120,37,48,56,120,10,0
000054EC  2530 3878 
000054F0  0A00      
                    7730   @m68kde~1_148:
000054F2  4552 524F 7731          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
000054F6  522E 2E2E 
000054FA  2041 6464 
000054FE  7265      
00005500  7373 2030 7732          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
00005504  7825 7820 
00005508  6973 2062 
0000550C  65        
0000550D  796F 6E64 7733          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005511  2074 6865 
00005515  206D 656D 
00005519  6F72 7920 7734          dc.b      111,114,121,32,114,97,110,103,101,10,0
0000551D  7261 6E67 
00005521  650A 00   
                    7735   @m68kde~1_149:
00005524  4552 524F 7736          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
00005528  522E 2E2E 
0000552C  2056 616C 
00005530  7565      
00005532  2077 7269 7737          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
00005536  7474 656E 
0000553A  2074 6F20 
0000553E  6164 6472 7738          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00005542  6573 7320 
00005546  3078 2578 
0000554A  203D 3D20 7739          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
0000554E  3078 2578 
00005552  2E20 5661 
00005556  6C75      
00005558  6520 4578 7740          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
0000555C  7065 6374 
00005560  6564 3A20 
00005564  30        
00005565  7825 780A 7741          dc.b      120,37,120,10,0
00005569  00        
                    7742   @m68kde~1_150:
0000556A  4164 6472 7743          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
0000556E  6573 733A 
00005572  2030 7825 
00005576  78        
00005577  2056 616C 7744          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
0000557B  7565 3A20 
0000557F  3078 2530 
00005583  3258      
00005585  0A00      7745          dc.b      10,0
                    7746   @m68kde~1_151:
00005588  4164 6472 7747          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
0000558C  6573 733A 
00005590  2030 7825 
00005594  78        
00005595  2056 616C 7748          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
00005599  7565 3A20 
0000559D  3078 2530 
000055A1  3458      
000055A3  0A00      7749          dc.b      10,0
                    7750   @m68kde~1_152:
000055A6  4164 6472 7751          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000055AA  6573 733A 
000055AE  2030 7825 
000055B2  78        
000055B3  2056 616C 7752          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
000055B7  7565 3A20 
000055BB  3078 2530 
000055BF  3858      
000055C1  0A00      7753          dc.b      10,0
                    7754   @m68kde~1_153:
000055C4  4445 312D 7755          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000055C8  3638 6B20 
000055CC  4275 6720 
000055D0  5631      
000055D2  2E37 3700 7756          dc.b      46,55,55,0
                    7757   @m68kde~1_154:
000055D6  436F 7079 7758          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000055DA  7269 6768 
000055DE  7420 2843 
000055E2  2920 504A 7759          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000055E6  2044 6176 
000055EA  6965 7320 
000055EE  3230      
000055F0  3136 00   7760          dc.b      49,54,0
                    7761   @m68kde~1_155:
000055F4  0D0A 5275 7762          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000055F8  6E6E 696E 
000055FC  672E 2E2E 
00005600  2E        
00005601  2E00      7763          dc.b      46,0
                    7764   @m68kde~1_156:
00005604  5275 6E6E 7765          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005608  696E 672E 
0000560C  2E2E 2E2E 
00005610  00        
                    7766   @m68kde~1_157:
00005612  4279 3A20 7767          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005616  504A 2044 
0000561A  6176 6965 
0000561E  73        
0000561F  00        7768          dc.b      0
                    7769   @m68kde~1_158:
00005620  0D0A 2573 7770          dc.b      13,10,37,115,0
00005624  00        
                    7771   @m68kde~1_159:
00005626  0A20 5374 7772          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
0000562A  7564 656E 
0000562E  7420 4E61 
00005632  6D        
00005633  6573 3A0A 7773          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
00005637  205A 6163 
0000563B  6861 7269 
0000563F  61        
00005640  6820 4A6F 7774          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
00005644  7365 7068 
00005648  3A20 3435 
0000564C  35        
0000564D  3030 3035 7775          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00005651  3520 0A20 
00005655  556D 6169 
00005659  7220      
0000565B  4D61 7A68 7776          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
0000565F  6172 3A20 
00005663  3230 3333 
00005667  3333      
00005669  3038 0A00 7777          dc.b      48,56,10,0
                    7778          section   data
0000566E            7779                   align
          0000 566E 7780   DataStart       equ       *
                    7781   
                    7782   *********************************************************************************************************
                    7783   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7784   * to ram as part of the CStart routine in this file
                    7785   *********************************************************************************************************
                    7786   
                    7787   @vsscanf_bufx:
0000566E  0B00 0546 7788          dc.l      @vsscanf_buf
                    7789   @vsscanf_1:
00005672  0A00      7790          dc.b      10,0
                    7791   __ctype:
00005674  0040 4040 7792          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005678  4040 4040 
0000567C  4040 5050 
00005680  5050 50   
00005683  4040 4040 7793          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00005687  4040 4040 
0000568B  4040 4040 
0000568F  4040 40   
00005692  4040 40D0 7794          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005696  A0A0 A0A0 
0000569A  A0A0 A0A0 
0000569E  A0A0 A0A0 7795          dc.b      160,160,160,160,160,160,160,140,140,140,140
000056A2  A0A0 A08C 
000056A6  8C8C 8C   
000056A9  8C8C 8C8C 7796          dc.b      140,140,140,140,140,140,160,160,160,160,160
000056AD  8C8C A0A0 
000056B1  A0A0 A0   
000056B4  A0A0 8A8A 7797          dc.b      160,160,138,138,138,138,138,138,130,130,130
000056B8  8A8A 8A8A 
000056BC  8282 82   
000056BF  8282 8282 7798          dc.b      130,130,130,130,130,130,130,130,130,130,130
000056C3  8282 8282 
000056C7  8282 82   
000056CA  8282 8282 7799          dc.b      130,130,130,130,130,130,160,160,160,160,160
000056CE  8282 A0A0 
000056D2  A0A0 A0   
000056D5  A089 8989 7800          dc.b      160,137,137,137,137,137,137,129,129,129,129
000056D9  8989 8981 
000056DD  8181 81   
000056E0  8181 8181 7801          dc.b      129,129,129,129,129,129,129,129,129,129,129
000056E4  8181 8181 
000056E8  8181 81   
000056EB  8181 8181 7802          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
000056EF  81A0 A0A0 
000056F3  A040 0000 
000056F7  00        
000056F8  0000 0000 7803          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000056FC  0000 0000 
00005700  0000 0000 
00005704  0000 0000 
00005708  0000 0000 
0000570C  0000      
0000570E  0000 0000 7804          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005712  0000 0000 
00005716  0000 0000 
0000571A  0000 0000 
0000571E  0000 0000 
00005722  0000      
00005724  0000 0000 7805          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005728  0000 0000 
0000572C  0000 0000 
00005730  0000 0000 
00005734  0000 0000 
00005738  0000      
0000573A  0000 0000 7806          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000573E  0000 0000 
00005742  0000 0000 
00005746  0000 0000 
0000574A  0000 0000 
0000574E  0000      
00005750  0000 0000 7807          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005754  0000 0000 
00005758  0000 0000 
0000575C  0000 0000 
00005760  0000 0000 
00005764  0000      
00005766  0000 0000 7808          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000576A  0000 0000 
0000576E  0000 0000 
00005772  0000 00   
                    7809   @itoa_1:
00005776  2D32 3134 7810          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0000577A  3734 3833 
0000577E  3634 3800 
                    7811          section   bss
00005782            7812                   align
          0000 5782 7813   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7814   
                    7815   *********************************************************************************************************
                    7816   * Section for Uninitialised Data held in ROM as constants
                    7817   *********************************************************************************************************
                    7818   
0B000000            7819                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 7820   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7821   
                    7822   
0B000000            7823   bss             org       bss
                    7824   
                    7825   *********************************************************************************************************
                    7826   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7827   * install the exception handler using the C function InstallExceptionHandler()
                    7828   *********************************************************************************************************
                    7829   
                    7830   
                    7831   
0B000000            7832   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7833   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7834   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7835   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7836   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7837   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7838   VCheck           ds.l    1      ditto
0B00001C            7839   VTrapV           ds.l    1      ditto
0B000020            7840   VPrivilege       ds.l    1      ditto
0B000024            7841   VTrace           ds.l    1
0B000028            7842   VLine1010emul    ds.l    1
0B00002C            7843   VLine1111emul    ds.l    1
0B000030            7844   VUnassigned1     ds.l    1
0B000034            7845   VUnassigned2     ds.l    1
0B000038            7846   VUnassigned3     ds.l    1
0B00003C            7847   VUninit_IRQ      ds.l    1
0B000040            7848   VUnassigned4     ds.l    1
0B000044            7849   VUnassigned5     ds.l    1
0B000048            7850   VUnassigned6     ds.l    1
0B00004C            7851   VUnassigned7     ds.l    1
0B000050            7852   VUnassigned8     ds.l    1
0B000054            7853   VUnassigned9     ds.l    1
0B000058            7854   VUnassigned10    ds.l    1
0B00005C            7855   VUnassigned11    ds.l    1
0B000060            7856   VSpuriousIRQ     ds.l    1
                    7857   
                    7858   * Interrupt handlers Vector 25-31
0B000064            7859   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7860   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7861   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7862   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7863   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7864   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7865   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7866   
                    7867   * Trap Handler vectors 32-47
0B000080            7868   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7869   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7870   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7871   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7872   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7873   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7874   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7875   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7876   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7877   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7878   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7879   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7880   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7881   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7882   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7883   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7884   
                    7885   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7886   
                    7887   ***********************************************************************************************************
                    7888   * Other Variables
                    7889   ***********************************************************************************************************
                    7890   *__DebugA5       ds.l    1
                    7891   *__UserA5        ds.l    1
                    7892   
                    7893   ***********************************************************************************************************
0B0000C0            7894   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7895   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7896   __heap:         ds.l    0       ; pointers for malloc functions
                    7897   
                    7898   *__himem:       ds.l    himem            ; highest memory location + 1
                    7899   *__stklen:      ds.l    stklen           ; default stack size
                    7900   
                    7901   *********************************************************************************************************
                    7902   * Section for Heap
                    7903   *********************************************************************************************************
                    7904   
                    7905   _i:
0B0000C4            7906          ds.b      4
                    7907   _x:
0B0000C8            7908          ds.b      4
                    7909   _y:
0B0000CC            7910          ds.b      4
                    7911   _z:
0B0000D0            7912          ds.b      4
                    7913   _PortA_Count:
0B0000D4            7914          ds.b      4
                    7915   _Trace:
0B0000D8            7916          ds.b      4
                    7917   _GoFlag:
0B0000DC            7918          ds.b      4
                    7919   _Echo:
0B0000E0            7920          ds.b      4
                    7921   _d0:
0B0000E4            7922          ds.b      4
                    7923   _d1:
0B0000E8            7924          ds.b      4
                    7925   _d2:
0B0000EC            7926          ds.b      4
                    7927   _d3:
0B0000F0            7928          ds.b      4
                    7929   _d4:
0B0000F4            7930          ds.b      4
                    7931   _d5:
0B0000F8            7932          ds.b      4
                    7933   _d6:
0B0000FC            7934          ds.b      4
                    7935   _d7:
0B000100            7936          ds.b      4
                    7937   _a0:
0B000104            7938          ds.b      4
                    7939   _a1:
0B000108            7940          ds.b      4
                    7941   _a2:
0B00010C            7942          ds.b      4
                    7943   _a3:
0B000110            7944          ds.b      4
                    7945   _a4:
0B000114            7946          ds.b      4
                    7947   _a5:
0B000118            7948          ds.b      4
                    7949   _a6:
0B00011C            7950          ds.b      4
                    7951   _PC:
0B000120            7952          ds.b      4
                    7953   _SSP:
0B000124            7954          ds.b      4
                    7955   _USP:
0B000128            7956          ds.b      4
                    7957   _SR:
0B00012C            7958          ds.b      2
                    7959   _BreakPointAddress:
0B00012E            7960          ds.b      32
                    7961   _BreakPointInstruction:
0B00014E            7962          ds.b      16
                    7963   _BreakPointSetOrCleared:
0B00015E            7964          ds.b      32
                    7965   _InstructionSize:
0B00017E            7966          ds.b      4
                    7967   _WatchPointAddress:
0B000182            7968          ds.b      32
                    7969   _WatchPointSetOrCleared:
0B0001A2            7970          ds.b      32
                    7971   _WatchPointString:
0B0001C2            7972          ds.b      800
                    7973   _TempString:
0B0004E2            7974          ds.b      100
                    7975   @vsscanf_buf:
0B000546            7976          ds.b      80
                    7977          section   heap
0B000596            7978                   align
          0B00 0596 7979   bssEnd          equ *                   end of storage space for unitialised variables
                    7980   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 7981   heap   equ       *
0B000596            7982                    align
          0000 0000

Assembly errors: 0
