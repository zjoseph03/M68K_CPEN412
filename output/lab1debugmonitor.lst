680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 25 Feb 2025      Time: 00:27:27          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2ACE      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  217E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3836      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  420C      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  4210      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4226      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  4228      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3836      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2E7A      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  422A      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4264      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  427C      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  4284      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  428A      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  420C      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3836      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  428E      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  4264      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  42A2      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  42B8      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  42CC      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3836      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  42FC      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  2F74      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2DAE      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2E7A      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  432C      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4352      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3836      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4374      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  4390      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  43D6      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  43E8      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  2EE6      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  43FA      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; void SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; while((SPI_Status & 0x08) == 0x08);
                    1555   SPISafeWrite_1:
000010C8  1039 0040 1556          move.b    4227106,D0
000010CC  8022      
000010CE  C03C 0008 1557          and.b     #8,D0
000010D2  0C00 0008 1558          cmp.b     #8,D0
000010D6  6602      1559          bne.s     SPISafeWrite_3
000010D8  60EE      1560          bra       SPISafeWrite_1
                    1561   SPISafeWrite_3:
                    1562   ; SPI_Data = data;
000010DA  13EE 000B 1563          move.b    11(A6),4227108
000010DE  0040 8024 
                    1564   ; // SPIPollReadFifo();
                    1565   ; returnVal = SPI_Data;
000010E2  1D79 0040 1566          move.b    4227108,-1(A6)
000010E6  8024 FFFF 
000010EA  4E5E      1567          unlk      A6
000010EC  4E75      1568          rts
                    1569   ; }
                    1570   ; void SPIPollReadFifo(void) {
                    1571   _SPIPollReadFifo:
                    1572   ; // RFEMPTY is bit 0
                    1573   ; while((SPI_Status & 0x01) == 0x01);  // Wait while Read FIFO Empty
                    1574   SPIPollReadFifo_1:
000010EE  1039 0040 1575          move.b    4227106,D0
000010F2  8022      
000010F4  C03C 0001 1576          and.b     #1,D0
000010F8  0C00 0001 1577          cmp.b     #1,D0
000010FC  6602      1578          bne.s     SPIPollReadFifo_3
000010FE  60EE      1579          bra       SPIPollReadFifo_1
                    1580   SPIPollReadFifo_3:
00001100  4E75      1581          rts
                    1582   ; }
                    1583   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1584   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1585   ; int TestForSPITransmitDataComplete(void) {
                    1586   _TestForSPITransmitDataComplete:
                    1587   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1588   ; return (SPI_Status >> 7);
00001102  1039 0040 1589          move.b    4227106,D0
00001106  8022      
00001108  C0BC 0000 1590          and.l     #255,D0
0000110C  00FF      
0000110E  EE88      1591          lsr.l     #7,D0
00001110  4E75      1592          rts
                    1593   ; }
                    1594   ; /************************************************************************************
                    1595   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1596   ; ************************************************************************************/
                    1597   ; void SPI_Init(void)
                    1598   ; {
                    1599   _SPI_Init:
                    1600   ; //TODO
                    1601   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1602   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1603   ; //
                    1604   ; // Here are some settings we want to create
                    1605   ; //
                    1606   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1607   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1608   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1609   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1610   ; SPI_Control = 0x50; // 0101_0011
00001112  13FC 0050 1611          move.b    #80,4227104
00001116  0040 8020 
                    1612   ; SPI_Ext     = 0x0;  // 00_0000_00
0000111A  4239 0040 1613          clr.b     4227110
0000111E  8026      
                    1614   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
00001120  13FC 00FF 1615          move.b    #255,4227112
00001124  0040 8028 
                    1616   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001128  13FC 00C0 1617          move.b    #192,4227106
0000112C  0040 8022 
00001130  4E75      1618          rts
                    1619   ; }
                    1620   ; /************************************************************************************
                    1621   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1622   ; ************************************************************************************/
                    1623   ; void WaitForSPITransmitComplete(void)
                    1624   ; {
                    1625   _WaitForSPITransmitComplete:
                    1626   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1627   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1628   ; // just in case they were set
                    1629   ; while (TestForSPITransmitDataComplete() == 0);
                    1630   WaitForSPITransmitComplete_1:
00001132  4EB8 1102 1631          jsr       _TestForSPITransmitDataComplete
00001136  4A80      1632          tst.l     D0
00001138  6602      1633          bne.s     WaitForSPITransmitComplete_3
0000113A  60F6      1634          bra       WaitForSPITransmitComplete_1
                    1635   WaitForSPITransmitComplete_3:
                    1636   ; SPI_Status |= 0xC0;
0000113C  0039 00C0 1637          or.b      #192,4227106
00001140  0040 8022 
00001144  4E75      1638          rts
                    1639   ; }
                    1640   ; void SPIFlashPollStatusWLE(void) {
                    1641   _SPIFlashPollStatusWLE:
                    1642   ; SPI_CS = 0xFE;
00001146  13FC 00FE 1643          move.b    #254,4227112
0000114A  0040 8028 
                    1644   ; SPISafeWrite(0x05); // Send a Read Status Register - 1 command, bit S1 will contain the WEL
0000114E  4878 0005 1645          pea       5
00001152  4EB8 10C4 1646          jsr       _SPISafeWrite
00001156  584F      1647          addq.w    #4,A7
                    1648   ; // NOTE: Weird behaviour on logic analyzer here
                    1649   ; SPIPollReadFifo();
00001158  4EB8 10EE 1650          jsr       _SPIPollReadFifo
                    1651   ; while (((SPI_Data >> 1) & 0x1) == 0); // Wait here if bit S1 does not indicate the write enable latch got set // MAY NOT NEED TO PUT IN WHILE LOOP SINCE WE ARE POLLING THE READ FIFO
                    1652   SPIFlashPollStatusWLE_1:
0000115C  1039 0040 1653          move.b    4227108,D0
00001160  8024      
00001162  E208      1654          lsr.b     #1,D0
00001164  C03C 0001 1655          and.b     #1,D0
00001168  6602      1656          bne.s     SPIFlashPollStatusWLE_3
0000116A  60F0      1657          bra       SPIFlashPollStatusWLE_1
                    1658   SPIFlashPollStatusWLE_3:
                    1659   ; SPI_CS = 0xFF;
0000116C  13FC 00FF 1660          move.b    #255,4227112
00001170  0040 8028 
00001174  4E75      1661          rts
                    1662   ; }
                    1663   ; void SPIFlashPollStatusBusy(void) {
                    1664   _SPIFlashPollStatusBusy:
                    1665   ; SPI_CS = 0xFE;
00001176  13FC 00FE 1666          move.b    #254,4227112
0000117A  0040 8028 
                    1667   ; SPISafeWrite(0x05); // Send a Read Status Register - 1 command, bit S1 will contain the WEL
0000117E  4878 0005 1668          pea       5
00001182  4EB8 10C4 1669          jsr       _SPISafeWrite
00001186  584F      1670          addq.w    #4,A7
                    1671   ; SPIPollReadFifo();
00001188  4EB8 10EE 1672          jsr       _SPIPollReadFifo
                    1673   ; // NOTE: For some reason, SPI_Data is capturing 0xFF here indicating that the flash is busy and never asserting the CS back because of that. Logic analyzer proves that the the MISO line shows 0x0 though. Probably an issue with the FIFO?
                    1674   ; // while (((SPI_Data) & 0x1) == 1); // Wait here if bit S1 does not indicate the write enable latch got set // MAY NOT NEED TO PUT IN WHILE LOOP SINCE WE ARE POLLING THE READ FIFO
                    1675   ; if ((((SPI_Data) & 0x1) == 1)) {
0000118C  1039 0040 1676          move.b    4227108,D0
00001190  8024      
00001192  C03C 0001 1677          and.b     #1,D0
00001196  0C00 0001 1678          cmp.b     #1,D0
0000119A  661E      1679          bne.s     SPIFlashPollStatusBusy_1
                    1680   ; printf("\r\n SPI_DATA REG: %08x  \n", SPI_Data);
0000119C  1239 0040 1681          move.b    4227108,D1
000011A0  8024      
000011A2  C2BC 0000 1682          and.l     #255,D1
000011A6  00FF      
000011A8  2F01      1683          move.l    D1,-(A7)
000011AA  4879 0000 1684          pea       @m68kde~1_22.L
000011AE  442E      
000011B0  4EB9 0000 1685          jsr       _printf
000011B4  3836      
000011B6  504F      1686          addq.w    #8,A7
000011B8  6016      1687          bra.s     SPIFlashPollStatusBusy_2
                    1688   SPIFlashPollStatusBusy_1:
                    1689   ; } else {
                    1690   ; printf("Succesfull\n");
000011BA  4879 0000 1691          pea       @m68kde~1_23.L
000011BE  4448      
000011C0  4EB9 0000 1692          jsr       _printf
000011C4  3836      
000011C6  584F      1693          addq.w    #4,A7
                    1694   ; SPI_CS = 0xFF;
000011C8  13FC 00FF 1695          move.b    #255,4227112
000011CC  0040 8028 
                    1696   SPIFlashPollStatusBusy_2:
000011D0  4E75      1697          rts
                    1698   ; }
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011D2  4E56 0000 1707          link      A6,#0
                    1708   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1709   ; // wait for completion of transmission
                    1710   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1711   ; // by reading fom the SPI controller Data Register.
                    1712   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1713   ; //
                    1714   ; // modify '0' below to return back read byte from data register
                    1715   ; //
                    1716   ; SPISafeWrite((unsigned char)c);
000011D6  222E 0008 1717          move.l    8(A6),D1
000011DA  C2BC 0000 1718          and.l     #255,D1
000011DE  00FF      
000011E0  2F01      1719          move.l    D1,-(A7)
000011E2  4EB8 10C4 1720          jsr       _SPISafeWrite
000011E6  584F      1721          addq.w    #4,A7
                    1722   ; WaitForSPITransmitComplete();
000011E8  4EB8 1132 1723          jsr       _WaitForSPITransmitComplete
                    1724   ; SPIPollReadFifo();
000011EC  4EB8 10EE 1725          jsr       _SPIPollReadFifo
                    1726   ; return SPI_Data;
000011F0  1039 0040 1727          move.b    4227108,D0
000011F4  8024      
000011F6  C0BC 0000 1728          and.l     #255,D0
000011FA  00FF      
000011FC  4E5E      1729          unlk      A6
000011FE  4E75      1730          rts
                    1731   ; }
                    1732   ; void SPIFlashWriteEnable() {
                    1733   _SPIFlashWriteEnable:
                    1734   ; SPI_CS = 0xFE;
00001200  13FC 00FE 1735          move.b    #254,4227112
00001204  0040 8028 
                    1736   ; SPISafeWrite(0x06);
00001208  4878 0006 1737          pea       6
0000120C  4EB8 10C4 1738          jsr       _SPISafeWrite
00001210  584F      1739          addq.w    #4,A7
                    1740   ; SPI_CS = 0xFF;
00001212  13FC 00FF 1741          move.b    #255,4227112
00001216  0040 8028 
                    1742   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1743   ; SPIFlashPollStatusWLE();
0000121A  4EB8 1146 1744          jsr       _SPIFlashPollStatusWLE
0000121E  4E75      1745          rts
                    1746   ; }
                    1747   ; void SPIWriteSendAddress(int c) {
                    1748   _SPIWriteSendAddress:
00001220  4E56 0000 1749          link      A6,#0
00001224  48E7 2020 1750          movem.l   D2/A2,-(A7)
00001228  242E 0008 1751          move.l    8(A6),D2
0000122C  45F8 10C4 1752          lea       _SPISafeWrite.L,A2
                    1753   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001230  2202      1754          move.l    D2,D1
00001232  E081      1755          asr.l     #8,D1
00001234  E081      1756          asr.l     #8,D1
00001236  C2BC 0000 1757          and.l     #255,D1
0000123A  00FF      
0000123C  C2BC 0000 1758          and.l     #255,D1
00001240  00FF      
00001242  2F01      1759          move.l    D1,-(A7)
00001244  4E92      1760          jsr       (A2)
00001246  584F      1761          addq.w    #4,A7
                    1762   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001248  2202      1763          move.l    D2,D1
0000124A  E081      1764          asr.l     #8,D1
0000124C  C2BC 0000 1765          and.l     #255,D1
00001250  00FF      
00001252  C2BC 0000 1766          and.l     #255,D1
00001256  00FF      
00001258  2F01      1767          move.l    D1,-(A7)
0000125A  4E92      1768          jsr       (A2)
0000125C  584F      1769          addq.w    #4,A7
                    1770   ; SPISafeWrite(c & 0xFF);             // third byte
0000125E  2202      1771          move.l    D2,D1
00001260  C2BC 0000 1772          and.l     #255,D1
00001264  00FF      
00001266  C2BC 0000 1773          and.l     #255,D1
0000126A  00FF      
0000126C  2F01      1774          move.l    D1,-(A7)
0000126E  4E92      1775          jsr       (A2)
00001270  584F      1776          addq.w    #4,A7
00001272  4CDF 0404 1777          movem.l   (A7)+,D2/A2
00001276  4E5E      1778          unlk      A6
00001278  4E75      1779          rts
                    1780   ; }
                    1781   ; void SPIFlashPageProgram(void) {
                    1782   _SPIFlashPageProgram:
                    1783   ; SPI_CS = 0xFE;
0000127A  13FC 00FE 1784          move.b    #254,4227112
0000127E  0040 8028 
                    1785   ; // NOTE: We should make the below 1 function called SPIFlashWriteCommand() or smthn like that
                    1786   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
00001282  4878 0002 1787          pea       2
00001286  4EB8 10C4 1788          jsr       _SPISafeWrite
0000128A  584F      1789          addq.w    #4,A7
                    1790   ; SPIWriteSendAddress(0x0);
0000128C  42A7      1791          clr.l     -(A7)
0000128E  4EB8 1220 1792          jsr       _SPIWriteSendAddress
00001292  584F      1793          addq.w    #4,A7
                    1794   ; WriteSPIChar(0xAB); // Random value for testing purposes
00001294  4878 00AB 1795          pea       171
00001298  4EB8 11D2 1796          jsr       _WriteSPIChar
0000129C  584F      1797          addq.w    #4,A7
                    1798   ; SPI_CS = 0xFF;
0000129E  13FC 00FF 1799          move.b    #255,4227112
000012A2  0040 8028 
                    1800   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1801   ; SPIFlashPollStatusBusy();
000012A6  4EB8 1176 1802          jsr       _SPIFlashPollStatusBusy
000012AA  4E75      1803          rts
                    1804   ; }
                    1805   ; /*******************************************************************
                    1806   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1807   ; ********************************************************************/
                    1808   ; void ProgramFlashChip(void)
                    1809   ; {
                    1810   _ProgramFlashChip:
                    1811   ; //
                    1812   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1813   ; // TODO : then verify by reading it back and comparing to memory
                    1814   ; //
                    1815   ; SPIFlashWriteEnable();
000012AC  4EB8 1200 1816          jsr       _SPIFlashWriteEnable
                    1817   ; SPIFlashPageProgram(); // we can modify the parameter later
000012B0  4EB8 127A 1818          jsr       _SPIFlashPageProgram
                    1819   ; // For now well test writing a byte of data
                    1820   ; // Then send h'02 as instruction into data register
                    1821   ; // Then send 24 bit flash address
                    1822   ; // Then atleast 1 data byte
                    1823   ; // If were sending multiple bytes / an entire page then the last (least significant) byte should be set to 0
                    1824   ; SPI_CS = 0xFF;
000012B4  13FC 00FF 1825          move.b    #255,4227112
000012B8  0040 8028 
000012BC  4E75      1826          rts
                    1827   ; // We should poll for the flash chips status register to indicate when the write has been completed in the flash memory after we set CS back to high
                    1828   ; // Using read status register command
                    1829   ; }
                    1830   ; /*************************************************************************
                    1831   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1832   ; **************************************************************************/
                    1833   ; void LoadFromFlashChip(void)
                    1834   ; {
                    1835   _LoadFromFlashChip:
                    1836   ; printf("\r\nLoading Program From SPI Flash....") ;
000012BE  4879 0000 1837          pea       @m68kde~1_24.L
000012C2  4454      
000012C4  4EB9 0000 1838          jsr       _printf
000012C8  3836      
000012CA  584F      1839          addq.w    #4,A7
000012CC  4E75      1840          rts
                    1841   ; //
                    1842   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1843   ; //
                    1844   ; }
                    1845   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1846   ; // IMPORTANT
                    1847   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1848   ; // has to be done with an interrupt (IRQ Level 6)
                    1849   ; //
                    1850   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1851   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1852   ; //
                    1853   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1854   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1855   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1856   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1857   ; // program area
                    1858   ; //
                    1859   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1860   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1861   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1862   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1863   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1864   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1865   ; void DumpRegisters()
                    1866   ; {
                    1867   _DumpRegisters:
000012CE  48E7 3F3C 1868          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000012D2  45F9 0000 1869          lea       _putch.L,A2
000012D6  2E7A      
000012D8  47F9 0000 1870          lea       _printf.L,A3
000012DC  3836      
000012DE  49F9 0B00 1871          lea       _SR.L,A4
000012E2  012C      
000012E4  4BF9 0B00 1872          lea       _WatchPointString.L,A5
000012E8  01C2      
                    1873   ; short i, x, j, k ;
                    1874   ; unsigned char c, *BytePointer;
                    1875   ; // buld up strings for displaying watchpoints
                    1876   ; for(x = 0; x < (short)(8); x++)
000012EA  4242      1877          clr.w     D2
                    1878   DumpRegisters_1:
000012EC  0C42 0008 1879          cmp.w     #8,D2
000012F0  6C00 01C6 1880          bge       DumpRegisters_3
                    1881   ; {
                    1882   ; if(WatchPointSetOrCleared[x] == 1)
000012F4  48C2      1883          ext.l     D2
000012F6  2002      1884          move.l    D2,D0
000012F8  E588      1885          lsl.l     #2,D0
000012FA  41F9 0B00 1886          lea       _WatchPointSetOrCleared.L,A0
000012FE  01A2      
00001300  2030 0800 1887          move.l    0(A0,D0.L),D0
00001304  0C80 0000 1888          cmp.l     #1,D0
00001308  0001      
0000130A  6600 0186 1889          bne       DumpRegisters_4
                    1890   ; {
                    1891   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000130E  48C2      1892          ext.l     D2
00001310  2202      1893          move.l    D2,D1
00001312  E589      1894          lsl.l     #2,D1
00001314  41F9 0B00 1895          lea       _WatchPointAddress.L,A0
00001318  0182      
0000131A  2F30 1800 1896          move.l    0(A0,D1.L),-(A7)
0000131E  4879 0000 1897          pea       @m68kde~1_25.L
00001322  447A      
00001324  220D      1898          move.l    A5,D1
00001326  48C2      1899          ext.l     D2
00001328  2F00      1900          move.l    D0,-(A7)
0000132A  2002      1901          move.l    D2,D0
0000132C  C1FC 0064 1902          muls      #100,D0
00001330  D280      1903          add.l     D0,D1
00001332  201F      1904          move.l    (A7)+,D0
00001334  2F01      1905          move.l    D1,-(A7)
00001336  4EB9 0000 1906          jsr       _sprintf
0000133A  2F12      
0000133C  DEFC 000C 1907          add.w     #12,A7
                    1908   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001340  48C2      1909          ext.l     D2
00001342  2002      1910          move.l    D2,D0
00001344  E588      1911          lsl.l     #2,D0
00001346  41F9 0B00 1912          lea       _WatchPointAddress.L,A0
0000134A  0182      
0000134C  2A30 0800 1913          move.l    0(A0,D0.L),D5
                    1914   ; for(j = 0; j < (short)(16); j+=2)
00001350  4243      1915          clr.w     D3
                    1916   DumpRegisters_6:
00001352  0C43 0010 1917          cmp.w     #16,D3
00001356  6C00 0082 1918          bge       DumpRegisters_8
                    1919   ; {
                    1920   ; for(k = 0; k < (short)(2); k++)
0000135A  4246      1921          clr.w     D6
                    1922   DumpRegisters_9:
0000135C  0C46 0002 1923          cmp.w     #2,D6
00001360  6C00 0052 1924          bge       DumpRegisters_11
                    1925   ; {
                    1926   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001364  2045      1927          move.l    D5,A0
00001366  48C3      1928          ext.l     D3
00001368  2203      1929          move.l    D3,D1
0000136A  48C6      1930          ext.l     D6
0000136C  D286      1931          add.l     D6,D1
0000136E  1230 1800 1932          move.b    0(A0,D1.L),D1
00001372  C2BC 0000 1933          and.l     #255,D1
00001376  00FF      
00001378  2F01      1934          move.l    D1,-(A7)
0000137A  4879 0000 1935          pea       @m68kde~1_8.L
0000137E  4284      
00001380  4879 0B00 1936          pea       _TempString.L
00001384  04E2      
00001386  4EB9 0000 1937          jsr       _sprintf
0000138A  2F12      
0000138C  DEFC 000C 1938          add.w     #12,A7
                    1939   ; strcat(WatchPointString[x], TempString) ;
00001390  4879 0B00 1940          pea       _TempString.L
00001394  04E2      
00001396  220D      1941          move.l    A5,D1
00001398  48C2      1942          ext.l     D2
0000139A  2F00      1943          move.l    D0,-(A7)
0000139C  2002      1944          move.l    D2,D0
0000139E  C1FC 0064 1945          muls      #100,D0
000013A2  D280      1946          add.l     D0,D1
000013A4  201F      1947          move.l    (A7)+,D0
000013A6  2F01      1948          move.l    D1,-(A7)
000013A8  4EB9 0000 1949          jsr       _strcat
000013AC  2F5E      
000013AE  504F      1950          addq.w    #8,A7
000013B0  5246      1951          addq.w    #1,D6
000013B2  60A8      1952          bra       DumpRegisters_9
                    1953   DumpRegisters_11:
                    1954   ; }
                    1955   ; strcat(WatchPointString[x]," ") ;
000013B4  4879 0000 1956          pea       @m68kde~1_26.L
000013B8  4482      
000013BA  220D      1957          move.l    A5,D1
000013BC  48C2      1958          ext.l     D2
000013BE  2F00      1959          move.l    D0,-(A7)
000013C0  2002      1960          move.l    D2,D0
000013C2  C1FC 0064 1961          muls      #100,D0
000013C6  D280      1962          add.l     D0,D1
000013C8  201F      1963          move.l    (A7)+,D0
000013CA  2F01      1964          move.l    D1,-(A7)
000013CC  4EB9 0000 1965          jsr       _strcat
000013D0  2F5E      
000013D2  504F      1966          addq.w    #8,A7
000013D4  5443      1967          addq.w    #2,D3
000013D6  6000 FF7A 1968          bra       DumpRegisters_6
                    1969   DumpRegisters_8:
                    1970   ; }
                    1971   ; strcat(WatchPointString[x], "  ") ;
000013DA  4879 0000 1972          pea       @m68kde~1_9.L
000013DE  428A      
000013E0  220D      1973          move.l    A5,D1
000013E2  48C2      1974          ext.l     D2
000013E4  2F00      1975          move.l    D0,-(A7)
000013E6  2002      1976          move.l    D2,D0
000013E8  C1FC 0064 1977          muls      #100,D0
000013EC  D280      1978          add.l     D0,D1
000013EE  201F      1979          move.l    (A7)+,D0
000013F0  2F01      1980          move.l    D1,-(A7)
000013F2  4EB9 0000 1981          jsr       _strcat
000013F6  2F5E      
000013F8  504F      1982          addq.w    #8,A7
                    1983   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013FA  48C2      1984          ext.l     D2
000013FC  2002      1985          move.l    D2,D0
000013FE  E588      1986          lsl.l     #2,D0
00001400  41F9 0B00 1987          lea       _WatchPointAddress.L,A0
00001404  0182      
00001406  2A30 0800 1988          move.l    0(A0,D0.L),D5
                    1989   ; for(j = 0; j < (short)(16); j++)
0000140A  4243      1990          clr.w     D3
                    1991   DumpRegisters_12:
0000140C  0C43 0010 1992          cmp.w     #16,D3
00001410  6C00 007E 1993          bge       DumpRegisters_14
                    1994   ; {
                    1995   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001414  2045      1996          move.l    D5,A0
00001416  48C3      1997          ext.l     D3
00001418  1030 3800 1998          move.b    0(A0,D3.L),D0
0000141C  C03C 007F 1999          and.b     #127,D0
00001420  1E00      2000          move.b    D0,D7
                    2001   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001422  0C07 007F 2002          cmp.b     #127,D7
00001426  6206      2003          bhi.s     DumpRegisters_17
00001428  0C07 0020 2004          cmp.b     #32,D7
0000142C  6416      2005          bhs.s     DumpRegisters_15
                    2006   DumpRegisters_17:
                    2007   ; sprintf(TempString, ".") ;
0000142E  4879 0000 2008          pea       @m68kde~1_27.L
00001432  4484      
00001434  4879 0B00 2009          pea       _TempString.L
00001438  04E2      
0000143A  4EB9 0000 2010          jsr       _sprintf
0000143E  2F12      
00001440  504F      2011          addq.w    #8,A7
00001442  6026      2012          bra.s     DumpRegisters_16
                    2013   DumpRegisters_15:
                    2014   ; else
                    2015   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001444  2045      2016          move.l    D5,A0
00001446  48C3      2017          ext.l     D3
00001448  1230 3800 2018          move.b    0(A0,D3.L),D1
0000144C  C2BC 0000 2019          and.l     #255,D1
00001450  00FF      
00001452  2F01      2020          move.l    D1,-(A7)
00001454  4879 0000 2021          pea       @m68kde~1_28.L
00001458  4486      
0000145A  4879 0B00 2022          pea       _TempString.L
0000145E  04E2      
00001460  4EB9 0000 2023          jsr       _sprintf
00001464  2F12      
00001466  DEFC 000C 2024          add.w     #12,A7
                    2025   DumpRegisters_16:
                    2026   ; strcat(WatchPointString[x], TempString) ;
0000146A  4879 0B00 2027          pea       _TempString.L
0000146E  04E2      
00001470  220D      2028          move.l    A5,D1
00001472  48C2      2029          ext.l     D2
00001474  2F00      2030          move.l    D0,-(A7)
00001476  2002      2031          move.l    D2,D0
00001478  C1FC 0064 2032          muls      #100,D0
0000147C  D280      2033          add.l     D0,D1
0000147E  201F      2034          move.l    (A7)+,D0
00001480  2F01      2035          move.l    D1,-(A7)
00001482  4EB9 0000 2036          jsr       _strcat
00001486  2F5E      
00001488  504F      2037          addq.w    #8,A7
0000148A  5243      2038          addq.w    #1,D3
0000148C  6000 FF7E 2039          bra       DumpRegisters_12
                    2040   DumpRegisters_14:
00001490  6020      2041          bra.s     DumpRegisters_5
                    2042   DumpRegisters_4:
                    2043   ; }
                    2044   ; }
                    2045   ; else
                    2046   ; strcpy(WatchPointString[x], "") ;
00001492  4879 0000 2047          pea       @m68kde~1_29.L
00001496  448A      
00001498  220D      2048          move.l    A5,D1
0000149A  48C2      2049          ext.l     D2
0000149C  2F00      2050          move.l    D0,-(A7)
0000149E  2002      2051          move.l    D2,D0
000014A0  C1FC 0064 2052          muls      #100,D0
000014A4  D280      2053          add.l     D0,D1
000014A6  201F      2054          move.l    (A7)+,D0
000014A8  2F01      2055          move.l    D1,-(A7)
000014AA  4EB9 0000 2056          jsr       _strcpy
000014AE  2D8C      
000014B0  504F      2057          addq.w    #8,A7
                    2058   DumpRegisters_5:
000014B2  5242      2059          addq.w    #1,D2
000014B4  6000 FE36 2060          bra       DumpRegisters_1
                    2061   DumpRegisters_3:
                    2062   ; }
                    2063   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000014B8  2F39 0B00 2064          move.l    _a0.L,-(A7)
000014BC  0104      
000014BE  2F39 0B00 2065          move.l    _d0.L,-(A7)
000014C2  00E4      
000014C4  4879 0000 2066          pea       @m68kde~1_30.L
000014C8  448C      
000014CA  4E93      2067          jsr       (A3)
000014CC  DEFC 000C 2068          add.w     #12,A7
                    2069   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000014D0  2F39 0B00 2070          move.l    _a1.L,-(A7)
000014D4  0108      
000014D6  2F39 0B00 2071          move.l    _d1.L,-(A7)
000014DA  00E8      
000014DC  4879 0000 2072          pea       @m68kde~1_31.L
000014E0  44A8      
000014E2  4E93      2073          jsr       (A3)
000014E4  DEFC 000C 2074          add.w     #12,A7
                    2075   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000014E8  2F39 0B00 2076          move.l    _a2.L,-(A7)
000014EC  010C      
000014EE  2F39 0B00 2077          move.l    _d2.L,-(A7)
000014F2  00EC      
000014F4  4879 0000 2078          pea       @m68kde~1_32.L
000014F8  44C2      
000014FA  4E93      2079          jsr       (A3)
000014FC  DEFC 000C 2080          add.w     #12,A7
                    2081   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001500  2F39 0B00 2082          move.l    _a3.L,-(A7)
00001504  0110      
00001506  2F39 0B00 2083          move.l    _d3.L,-(A7)
0000150A  00F0      
0000150C  4879 0000 2084          pea       @m68kde~1_33.L
00001510  44DC      
00001512  4E93      2085          jsr       (A3)
00001514  DEFC 000C 2086          add.w     #12,A7
                    2087   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001518  2F39 0B00 2088          move.l    _a4.L,-(A7)
0000151C  0114      
0000151E  2F39 0B00 2089          move.l    _d4.L,-(A7)
00001522  00F4      
00001524  4879 0000 2090          pea       @m68kde~1_34.L
00001528  44F6      
0000152A  4E93      2091          jsr       (A3)
0000152C  DEFC 000C 2092          add.w     #12,A7
                    2093   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001530  2F39 0B00 2094          move.l    _a5.L,-(A7)
00001534  0118      
00001536  2F39 0B00 2095          move.l    _d5.L,-(A7)
0000153A  00F8      
0000153C  4879 0000 2096          pea       @m68kde~1_35.L
00001540  4510      
00001542  4E93      2097          jsr       (A3)
00001544  DEFC 000C 2098          add.w     #12,A7
                    2099   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001548  2F39 0B00 2100          move.l    _a6.L,-(A7)
0000154C  011C      
0000154E  2F39 0B00 2101          move.l    _d6.L,-(A7)
00001552  00FC      
00001554  4879 0000 2102          pea       @m68kde~1_36.L
00001558  452A      
0000155A  4E93      2103          jsr       (A3)
0000155C  DEFC 000C 2104          add.w     #12,A7
                    2105   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001560  3214      2106          move.w    (A4),D1
00001562  C27C 2000 2107          and.w     #8192,D1
00001566  0C41 2000 2108          cmp.w     #8192,D1
0000156A  6608      2109          bne.s     DumpRegisters_18
0000156C  2239 0B00 2110          move.l    _SSP.L,D1
00001570  0124      
00001572  6006      2111          bra.s     DumpRegisters_19
                    2112   DumpRegisters_18:
00001574  2239 0B00 2113          move.l    _USP.L,D1
00001578  0128      
                    2114   DumpRegisters_19:
0000157A  2F01      2115          move.l    D1,-(A7)
0000157C  2F39 0B00 2116          move.l    _d7.L,-(A7)
00001580  0100      
00001582  4879 0000 2117          pea       @m68kde~1_37.L
00001586  4544      
00001588  4E93      2118          jsr       (A3)
0000158A  DEFC 000C 2119          add.w     #12,A7
                    2120   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000158E  2F39 0B00 2121          move.l    _USP.L,-(A7)
00001592  0128      
00001594  4879 0000 2122          pea       @m68kde~1_38.L
00001598  455E      
0000159A  4E93      2123          jsr       (A3)
0000159C  504F      2124          addq.w    #8,A7
                    2125   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000159E  2F39 0B00 2126          move.l    _SSP.L,-(A7)
000015A2  0124      
000015A4  4879 0000 2127          pea       @m68kde~1_39.L
000015A8  457C      
000015AA  4E93      2128          jsr       (A3)
000015AC  504F      2129          addq.w    #8,A7
                    2130   ; printf("\r\n SR = $%04X   ",SR) ;
000015AE  3214      2131          move.w    (A4),D1
000015B0  C2BC 0000 2132          and.l     #65535,D1
000015B4  FFFF      
000015B6  2F01      2133          move.l    D1,-(A7)
000015B8  4879 0000 2134          pea       @m68kde~1_40.L
000015BC  459E      
000015BE  4E93      2135          jsr       (A3)
000015C0  504F      2136          addq.w    #8,A7
                    2137   ; // display the status word in characters etc.
                    2138   ; printf("   [") ;
000015C2  4879 0000 2139          pea       @m68kde~1_41.L
000015C6  45B0      
000015C8  4E93      2140          jsr       (A3)
000015CA  584F      2141          addq.w    #4,A7
                    2142   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000015CC  3014      2143          move.w    (A4),D0
000015CE  C07C 8000 2144          and.w     #32768,D0
000015D2  0C40 8000 2145          cmp.w     #32768,D0
000015D6  660A      2146          bne.s     DumpRegisters_20
000015D8  4878 0054 2147          pea       84
000015DC  4E92      2148          jsr       (A2)
000015DE  584F      2149          addq.w    #4,A7
000015E0  6008      2150          bra.s     DumpRegisters_21
                    2151   DumpRegisters_20:
000015E2  4878 002D 2152          pea       45
000015E6  4E92      2153          jsr       (A2)
000015E8  584F      2154          addq.w    #4,A7
                    2155   DumpRegisters_21:
                    2156   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000015EA  3014      2157          move.w    (A4),D0
000015EC  C07C 2000 2158          and.w     #8192,D0
000015F0  0C40 2000 2159          cmp.w     #8192,D0
000015F4  660A      2160          bne.s     DumpRegisters_22
000015F6  4878 0053 2161          pea       83
000015FA  4E92      2162          jsr       (A2)
000015FC  584F      2163          addq.w    #4,A7
000015FE  6008      2164          bra.s     DumpRegisters_23
                    2165   DumpRegisters_22:
00001600  4878 0055 2166          pea       85
00001604  4E92      2167          jsr       (A2)
00001606  584F      2168          addq.w    #4,A7
                    2169   DumpRegisters_23:
                    2170   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001608  3014      2171          move.w    (A4),D0
0000160A  C07C 0400 2172          and.w     #1024,D0
0000160E  0C40 0400 2173          cmp.w     #1024,D0
00001612  660A      2174          bne.s     DumpRegisters_24
00001614  4878 0031 2175          pea       49
00001618  4E92      2176          jsr       (A2)
0000161A  584F      2177          addq.w    #4,A7
0000161C  6008      2178          bra.s     DumpRegisters_25
                    2179   DumpRegisters_24:
0000161E  4878 0030 2180          pea       48
00001622  4E92      2181          jsr       (A2)
00001624  584F      2182          addq.w    #4,A7
                    2183   DumpRegisters_25:
                    2184   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001626  3014      2185          move.w    (A4),D0
00001628  C07C 0200 2186          and.w     #512,D0
0000162C  0C40 0200 2187          cmp.w     #512,D0
00001630  660A      2188          bne.s     DumpRegisters_26
00001632  4878 0031 2189          pea       49
00001636  4E92      2190          jsr       (A2)
00001638  584F      2191          addq.w    #4,A7
0000163A  6008      2192          bra.s     DumpRegisters_27
                    2193   DumpRegisters_26:
0000163C  4878 0030 2194          pea       48
00001640  4E92      2195          jsr       (A2)
00001642  584F      2196          addq.w    #4,A7
                    2197   DumpRegisters_27:
                    2198   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001644  3014      2199          move.w    (A4),D0
00001646  C07C 0100 2200          and.w     #256,D0
0000164A  0C40 0100 2201          cmp.w     #256,D0
0000164E  660A      2202          bne.s     DumpRegisters_28
00001650  4878 0031 2203          pea       49
00001654  4E92      2204          jsr       (A2)
00001656  584F      2205          addq.w    #4,A7
00001658  6008      2206          bra.s     DumpRegisters_29
                    2207   DumpRegisters_28:
0000165A  4878 0030 2208          pea       48
0000165E  4E92      2209          jsr       (A2)
00001660  584F      2210          addq.w    #4,A7
                    2211   DumpRegisters_29:
                    2212   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001662  3014      2213          move.w    (A4),D0
00001664  C07C 0010 2214          and.w     #16,D0
00001668  0C40 0010 2215          cmp.w     #16,D0
0000166C  660A      2216          bne.s     DumpRegisters_30
0000166E  4878 0058 2217          pea       88
00001672  4E92      2218          jsr       (A2)
00001674  584F      2219          addq.w    #4,A7
00001676  6008      2220          bra.s     DumpRegisters_31
                    2221   DumpRegisters_30:
00001678  4878 002D 2222          pea       45
0000167C  4E92      2223          jsr       (A2)
0000167E  584F      2224          addq.w    #4,A7
                    2225   DumpRegisters_31:
                    2226   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001680  3014      2227          move.w    (A4),D0
00001682  C07C 0008 2228          and.w     #8,D0
00001686  0C40 0008 2229          cmp.w     #8,D0
0000168A  660A      2230          bne.s     DumpRegisters_32
0000168C  4878 004E 2231          pea       78
00001690  4E92      2232          jsr       (A2)
00001692  584F      2233          addq.w    #4,A7
00001694  6008      2234          bra.s     DumpRegisters_33
                    2235   DumpRegisters_32:
00001696  4878 002D 2236          pea       45
0000169A  4E92      2237          jsr       (A2)
0000169C  584F      2238          addq.w    #4,A7
                    2239   DumpRegisters_33:
                    2240   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000169E  3014      2241          move.w    (A4),D0
000016A0  C07C 0004 2242          and.w     #4,D0
000016A4  0C40 0004 2243          cmp.w     #4,D0
000016A8  660A      2244          bne.s     DumpRegisters_34
000016AA  4878 005A 2245          pea       90
000016AE  4E92      2246          jsr       (A2)
000016B0  584F      2247          addq.w    #4,A7
000016B2  6008      2248          bra.s     DumpRegisters_35
                    2249   DumpRegisters_34:
000016B4  4878 002D 2250          pea       45
000016B8  4E92      2251          jsr       (A2)
000016BA  584F      2252          addq.w    #4,A7
                    2253   DumpRegisters_35:
                    2254   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000016BC  3014      2255          move.w    (A4),D0
000016BE  C07C 0002 2256          and.w     #2,D0
000016C2  0C40 0002 2257          cmp.w     #2,D0
000016C6  660A      2258          bne.s     DumpRegisters_36
000016C8  4878 0056 2259          pea       86
000016CC  4E92      2260          jsr       (A2)
000016CE  584F      2261          addq.w    #4,A7
000016D0  6008      2262          bra.s     DumpRegisters_37
                    2263   DumpRegisters_36:
000016D2  4878 002D 2264          pea       45
000016D6  4E92      2265          jsr       (A2)
000016D8  584F      2266          addq.w    #4,A7
                    2267   DumpRegisters_37:
                    2268   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000016DA  3014      2269          move.w    (A4),D0
000016DC  C07C 0001 2270          and.w     #1,D0
000016E0  0C40 0001 2271          cmp.w     #1,D0
000016E4  660A      2272          bne.s     DumpRegisters_38
000016E6  4878 0043 2273          pea       67
000016EA  4E92      2274          jsr       (A2)
000016EC  584F      2275          addq.w    #4,A7
000016EE  6008      2276          bra.s     DumpRegisters_39
                    2277   DumpRegisters_38:
000016F0  4878 002D 2278          pea       45
000016F4  4E92      2279          jsr       (A2)
000016F6  584F      2280          addq.w    #4,A7
                    2281   DumpRegisters_39:
                    2282   ; putchar(']') ;
000016F8  4878 005D 2283          pea       93
000016FC  4E92      2284          jsr       (A2)
000016FE  584F      2285          addq.w    #4,A7
                    2286   ; printf("\r\n PC = $%08X  ", PC) ;
00001700  2F39 0B00 2287          move.l    _PC.L,-(A7)
00001704  0120      
00001706  4879 0000 2288          pea       @m68kde~1_42.L
0000170A  45B6      
0000170C  4E93      2289          jsr       (A3)
0000170E  504F      2290          addq.w    #8,A7
                    2291   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001710  2039 0B00 2292          move.l    _PC.L,D0
00001714  0120      
00001716  2040      2293          move.l    D0,A0
00001718  3010      2294          move.w    (A0),D0
0000171A  0C40 4E4E 2295          cmp.w     #20046,D0
0000171E  660A      2296          bne.s     DumpRegisters_40
                    2297   ; printf("[@ BREAKPOINT]") ;
00001720  4879 0000 2298          pea       @m68kde~1_43.L
00001724  45C6      
00001726  4E93      2299          jsr       (A3)
00001728  584F      2300          addq.w    #4,A7
                    2301   DumpRegisters_40:
                    2302   ; printf("\r\n") ;
0000172A  4879 0000 2303          pea       @m68kde~1_1.L
0000172E  420C      
00001730  4E93      2304          jsr       (A3)
00001732  584F      2305          addq.w    #4,A7
                    2306   ; for(i=0; i < 8; i++)    {
00001734  4244      2307          clr.w     D4
                    2308   DumpRegisters_42:
00001736  0C44 0008 2309          cmp.w     #8,D4
0000173A  6C00 0040 2310          bge       DumpRegisters_44
                    2311   ; if(WatchPointSetOrCleared[i] == 1)
0000173E  48C4      2312          ext.l     D4
00001740  2004      2313          move.l    D4,D0
00001742  E588      2314          lsl.l     #2,D0
00001744  41F9 0B00 2315          lea       _WatchPointSetOrCleared.L,A0
00001748  01A2      
0000174A  2030 0800 2316          move.l    0(A0,D0.L),D0
0000174E  0C80 0000 2317          cmp.l     #1,D0
00001752  0001      
00001754  6622      2318          bne.s     DumpRegisters_45
                    2319   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001756  220D      2320          move.l    A5,D1
00001758  48C4      2321          ext.l     D4
0000175A  2F00      2322          move.l    D0,-(A7)
0000175C  2004      2323          move.l    D4,D0
0000175E  C1FC 0064 2324          muls      #100,D0
00001762  D280      2325          add.l     D0,D1
00001764  201F      2326          move.l    (A7)+,D0
00001766  2F01      2327          move.l    D1,-(A7)
00001768  48C4      2328          ext.l     D4
0000176A  2F04      2329          move.l    D4,-(A7)
0000176C  4879 0000 2330          pea       @m68kde~1_44.L
00001770  45D6      
00001772  4E93      2331          jsr       (A3)
00001774  DEFC 000C 2332          add.w     #12,A7
                    2333   DumpRegisters_45:
00001778  5244      2334          addq.w    #1,D4
0000177A  60BA      2335          bra       DumpRegisters_42
                    2336   DumpRegisters_44:
0000177C  4CDF 3CFC 2337          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001780  4E75      2338          rts
                    2339   ; }
                    2340   ; }
                    2341   ; // Trace Exception Handler
                    2342   ; void DumpRegistersandPause(void)
                    2343   ; {
                    2344   _DumpRegistersandPause:
00001782  2F0A      2345          move.l    A2,-(A7)
00001784  45F9 0000 2346          lea       _printf.L,A2
00001788  3836      
                    2347   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000178A  4879 0000 2348          pea       @m68kde~1_45.L
0000178E  45E2      
00001790  4E92      2349          jsr       (A2)
00001792  584F      2350          addq.w    #4,A7
                    2351   ; printf("\r\nBreak Points :[Disabled]") ;
00001794  4879 0000 2352          pea       @m68kde~1_46.L
00001798  4602      
0000179A  4E92      2353          jsr       (A2)
0000179C  584F      2354          addq.w    #4,A7
                    2355   ; DumpRegisters() ;
0000179E  4EB8 12CE 2356          jsr       _DumpRegisters
                    2357   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000017A2  4879 0000 2358          pea       @m68kde~1_47.L
000017A6  461E      
000017A8  4E92      2359          jsr       (A2)
000017AA  584F      2360          addq.w    #4,A7
                    2361   ; printf("\r\nPress <ESC> to Resume Program") ;
000017AC  4879 0000 2362          pea       @m68kde~1_48.L
000017B0  464A      
000017B2  4E92      2363          jsr       (A2)
000017B4  584F      2364          addq.w    #4,A7
                    2365   ; menu() ;
000017B6  4EB9 0000 2366          jsr       _menu
000017BA  2366      
000017BC  245F      2367          move.l    (A7)+,A2
000017BE  4E75      2368          rts
                    2369   ; }
                    2370   ; void ChangeRegisters(void)
                    2371   ; {
                    2372   _ChangeRegisters:
000017C0  4E56 FFFC 2373          link      A6,#-4
000017C4  48E7 303C 2374          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000017C8  45F9 0000 2375          lea       _printf.L,A2
000017CC  3836      
000017CE  47EE FFFC 2376          lea       -4(A6),A3
000017D2  49F8 0CA4 2377          lea       _Get8HexDigits.L,A4
000017D6  4BF8 0B68 2378          lea       __getch.L,A5
                    2379   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2380   ; int reg_val ;
                    2381   ; char c, reg[3] ;
                    2382   ; reg[0] = tolower(_getch()) ;
000017DA  2F00      2383          move.l    D0,-(A7)
000017DC  4E95      2384          jsr       (A5)
000017DE  2200      2385          move.l    D0,D1
000017E0  201F      2386          move.l    (A7)+,D0
000017E2  2F01      2387          move.l    D1,-(A7)
000017E4  4EB9 0000 2388          jsr       _tolower
000017E8  2EE6      
000017EA  584F      2389          addq.w    #4,A7
000017EC  1680      2390          move.b    D0,(A3)
                    2391   ; reg[1] = c = tolower(_getch()) ;
000017EE  2F00      2392          move.l    D0,-(A7)
000017F0  4E95      2393          jsr       (A5)
000017F2  2200      2394          move.l    D0,D1
000017F4  201F      2395          move.l    (A7)+,D0
000017F6  2F01      2396          move.l    D1,-(A7)
000017F8  4EB9 0000 2397          jsr       _tolower
000017FC  2EE6      
000017FE  584F      2398          addq.w    #4,A7
00001800  1400      2399          move.b    D0,D2
00001802  1740 0001 2400          move.b    D0,1(A3)
                    2401   ; if(reg[0] == (char)('d'))  {    // change data register
00001806  1013      2402          move.b    (A3),D0
00001808  0C00 0064 2403          cmp.b     #100,D0
0000180C  6600 00AE 2404          bne       ChangeRegisters_1
                    2405   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001810  102B 0001 2406          move.b    1(A3),D0
00001814  0C00 0037 2407          cmp.b     #55,D0
00001818  6E0A      2408          bgt.s     ChangeRegisters_5
0000181A  102B 0001 2409          move.b    1(A3),D0
0000181E  0C00 0030 2410          cmp.b     #48,D0
00001822  6C0E      2411          bge.s     ChangeRegisters_3
                    2412   ChangeRegisters_5:
                    2413   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001824  4879 0000 2414          pea       @m68kde~1_49.L
00001828  466A      
0000182A  4E92      2415          jsr       (A2)
0000182C  584F      2416          addq.w    #4,A7
                    2417   ; return ;
0000182E  6000 0244 2418          bra       ChangeRegisters_6
                    2419   ChangeRegisters_3:
                    2420   ; }
                    2421   ; else {
                    2422   ; printf("\r\nD%c = ", c) ;
00001832  4882      2423          ext.w     D2
00001834  48C2      2424          ext.l     D2
00001836  2F02      2425          move.l    D2,-(A7)
00001838  4879 0000 2426          pea       @m68kde~1_50.L
0000183C  4696      
0000183E  4E92      2427          jsr       (A2)
00001840  504F      2428          addq.w    #8,A7
                    2429   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001842  42A7      2430          clr.l     -(A7)
00001844  4E94      2431          jsr       (A4)
00001846  584F      2432          addq.w    #4,A7
00001848  2600      2433          move.l    D0,D3
                    2434   ; }
                    2435   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2436   ; if(c == (char)('0'))
0000184A  0C02 0030 2437          cmp.b     #48,D2
0000184E  660A      2438          bne.s     ChangeRegisters_7
                    2439   ; d0 = reg_val ;
00001850  23C3 0B00 2440          move.l    D3,_d0.L
00001854  00E4      
00001856  6000 0060 2441          bra       ChangeRegisters_20
                    2442   ChangeRegisters_7:
                    2443   ; else if(c == (char)('1'))
0000185A  0C02 0031 2444          cmp.b     #49,D2
0000185E  660A      2445          bne.s     ChangeRegisters_9
                    2446   ; d1 = reg_val ;
00001860  23C3 0B00 2447          move.l    D3,_d1.L
00001864  00E8      
00001866  6000 0050 2448          bra       ChangeRegisters_20
                    2449   ChangeRegisters_9:
                    2450   ; else if(c == (char)('2'))
0000186A  0C02 0032 2451          cmp.b     #50,D2
0000186E  660A      2452          bne.s     ChangeRegisters_11
                    2453   ; d2 = reg_val ;
00001870  23C3 0B00 2454          move.l    D3,_d2.L
00001874  00EC      
00001876  6000 0040 2455          bra       ChangeRegisters_20
                    2456   ChangeRegisters_11:
                    2457   ; else if(c == (char)('3'))
0000187A  0C02 0033 2458          cmp.b     #51,D2
0000187E  6608      2459          bne.s     ChangeRegisters_13
                    2460   ; d3 = reg_val ;
00001880  23C3 0B00 2461          move.l    D3,_d3.L
00001884  00F0      
00001886  6030      2462          bra.s     ChangeRegisters_20
                    2463   ChangeRegisters_13:
                    2464   ; else if(c == (char)('4'))
00001888  0C02 0034 2465          cmp.b     #52,D2
0000188C  6608      2466          bne.s     ChangeRegisters_15
                    2467   ; d4 = reg_val ;
0000188E  23C3 0B00 2468          move.l    D3,_d4.L
00001892  00F4      
00001894  6022      2469          bra.s     ChangeRegisters_20
                    2470   ChangeRegisters_15:
                    2471   ; else if(c == (char)('5'))
00001896  0C02 0035 2472          cmp.b     #53,D2
0000189A  6608      2473          bne.s     ChangeRegisters_17
                    2474   ; d5 = reg_val ;
0000189C  23C3 0B00 2475          move.l    D3,_d5.L
000018A0  00F8      
000018A2  6014      2476          bra.s     ChangeRegisters_20
                    2477   ChangeRegisters_17:
                    2478   ; else if(c == (char)('6'))
000018A4  0C02 0036 2479          cmp.b     #54,D2
000018A8  6608      2480          bne.s     ChangeRegisters_19
                    2481   ; d6 = reg_val ;
000018AA  23C3 0B00 2482          move.l    D3,_d6.L
000018AE  00FC      
000018B0  6006      2483          bra.s     ChangeRegisters_20
                    2484   ChangeRegisters_19:
                    2485   ; else
                    2486   ; d7 = reg_val ;
000018B2  23C3 0B00 2487          move.l    D3,_d7.L
000018B6  0100      
                    2488   ChangeRegisters_20:
000018B8  6000 01B6 2489          bra       ChangeRegisters_51
                    2490   ChangeRegisters_1:
                    2491   ; }
                    2492   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000018BC  1013      2493          move.b    (A3),D0
000018BE  0C00 0061 2494          cmp.b     #97,D0
000018C2  6600 00A6 2495          bne       ChangeRegisters_21
                    2496   ; if((c > (char)('7')) || (c < (char)('0'))) {
000018C6  0C02 0037 2497          cmp.b     #55,D2
000018CA  6E06      2498          bgt.s     ChangeRegisters_25
000018CC  0C02 0030 2499          cmp.b     #48,D2
000018D0  6C0E      2500          bge.s     ChangeRegisters_23
                    2501   ChangeRegisters_25:
                    2502   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000018D2  4879 0000 2503          pea       @m68kde~1_51.L
000018D6  46A0      
000018D8  4E92      2504          jsr       (A2)
000018DA  584F      2505          addq.w    #4,A7
                    2506   ; return ;
000018DC  6000 0196 2507          bra       ChangeRegisters_6
                    2508   ChangeRegisters_23:
                    2509   ; }
                    2510   ; else {
                    2511   ; printf("\r\nA%c = ", c) ;
000018E0  4882      2512          ext.w     D2
000018E2  48C2      2513          ext.l     D2
000018E4  2F02      2514          move.l    D2,-(A7)
000018E6  4879 0000 2515          pea       @m68kde~1_52.L
000018EA  46CE      
000018EC  4E92      2516          jsr       (A2)
000018EE  504F      2517          addq.w    #8,A7
                    2518   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018F0  42A7      2519          clr.l     -(A7)
000018F2  4E94      2520          jsr       (A4)
000018F4  584F      2521          addq.w    #4,A7
000018F6  2600      2522          move.l    D0,D3
                    2523   ; }
                    2524   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2525   ; if(c == (char)('0'))
000018F8  0C02 0030 2526          cmp.b     #48,D2
000018FC  660A      2527          bne.s     ChangeRegisters_26
                    2528   ; a0 = reg_val ;
000018FE  23C3 0B00 2529          move.l    D3,_a0.L
00001902  0104      
00001904  6000 0060 2530          bra       ChangeRegisters_39
                    2531   ChangeRegisters_26:
                    2532   ; else if(c == (char)('1'))
00001908  0C02 0031 2533          cmp.b     #49,D2
0000190C  660A      2534          bne.s     ChangeRegisters_28
                    2535   ; a1 = reg_val ;
0000190E  23C3 0B00 2536          move.l    D3,_a1.L
00001912  0108      
00001914  6000 0050 2537          bra       ChangeRegisters_39
                    2538   ChangeRegisters_28:
                    2539   ; else if(c == (char)('2'))
00001918  0C02 0032 2540          cmp.b     #50,D2
0000191C  660A      2541          bne.s     ChangeRegisters_30
                    2542   ; a2 = reg_val ;
0000191E  23C3 0B00 2543          move.l    D3,_a2.L
00001922  010C      
00001924  6000 0040 2544          bra       ChangeRegisters_39
                    2545   ChangeRegisters_30:
                    2546   ; else if(c == (char)('3'))
00001928  0C02 0033 2547          cmp.b     #51,D2
0000192C  6608      2548          bne.s     ChangeRegisters_32
                    2549   ; a3 = reg_val ;
0000192E  23C3 0B00 2550          move.l    D3,_a3.L
00001932  0110      
00001934  6030      2551          bra.s     ChangeRegisters_39
                    2552   ChangeRegisters_32:
                    2553   ; else if(c == (char)('4'))
00001936  0C02 0034 2554          cmp.b     #52,D2
0000193A  6608      2555          bne.s     ChangeRegisters_34
                    2556   ; a4 = reg_val ;
0000193C  23C3 0B00 2557          move.l    D3,_a4.L
00001940  0114      
00001942  6022      2558          bra.s     ChangeRegisters_39
                    2559   ChangeRegisters_34:
                    2560   ; else if(c == (char)('5'))
00001944  0C02 0035 2561          cmp.b     #53,D2
00001948  6608      2562          bne.s     ChangeRegisters_36
                    2563   ; a5 = reg_val ;
0000194A  23C3 0B00 2564          move.l    D3,_a5.L
0000194E  0118      
00001950  6014      2565          bra.s     ChangeRegisters_39
                    2566   ChangeRegisters_36:
                    2567   ; else if(c == (char)('6'))
00001952  0C02 0036 2568          cmp.b     #54,D2
00001956  6608      2569          bne.s     ChangeRegisters_38
                    2570   ; a6 = reg_val ;
00001958  23C3 0B00 2571          move.l    D3,_a6.L
0000195C  011C      
0000195E  6006      2572          bra.s     ChangeRegisters_39
                    2573   ChangeRegisters_38:
                    2574   ; else
                    2575   ; USP = reg_val ;
00001960  23C3 0B00 2576          move.l    D3,_USP.L
00001964  0128      
                    2577   ChangeRegisters_39:
00001966  6000 0108 2578          bra       ChangeRegisters_51
                    2579   ChangeRegisters_21:
                    2580   ; }
                    2581   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
0000196A  1013      2582          move.b    (A3),D0
0000196C  0C00 0075 2583          cmp.b     #117,D0
00001970  6600 004E 2584          bne       ChangeRegisters_40
00001974  0C02 0073 2585          cmp.b     #115,D2
00001978  6600 0046 2586          bne       ChangeRegisters_40
                    2587   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
0000197C  2F00      2588          move.l    D0,-(A7)
0000197E  4E95      2589          jsr       (A5)
00001980  2200      2590          move.l    D0,D1
00001982  201F      2591          move.l    (A7)+,D0
00001984  2F01      2592          move.l    D1,-(A7)
00001986  4EB9 0000 2593          jsr       _tolower
0000198A  2EE6      
0000198C  584F      2594          addq.w    #4,A7
0000198E  0C80 0000 2595          cmp.l     #112,D0
00001992  0070      
00001994  6618      2596          bne.s     ChangeRegisters_42
                    2597   ; printf("\r\nUser SP = ") ;
00001996  4879 0000 2598          pea       @m68kde~1_53.L
0000199A  46D8      
0000199C  4E92      2599          jsr       (A2)
0000199E  584F      2600          addq.w    #4,A7
                    2601   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019A0  42A7      2602          clr.l     -(A7)
000019A2  4E94      2603          jsr       (A4)
000019A4  584F      2604          addq.w    #4,A7
000019A6  23C0 0B00 2605          move.l    D0,_USP.L
000019AA  0128      
000019AC  600E      2606          bra.s     ChangeRegisters_43
                    2607   ChangeRegisters_42:
                    2608   ; }
                    2609   ; else {
                    2610   ; printf("\r\nIllegal Register....") ;
000019AE  4879 0000 2611          pea       @m68kde~1_54.L
000019B2  46E6      
000019B4  4E92      2612          jsr       (A2)
000019B6  584F      2613          addq.w    #4,A7
                    2614   ; return ;
000019B8  6000 00BA 2615          bra       ChangeRegisters_6
                    2616   ChangeRegisters_43:
000019BC  6000 00B2 2617          bra       ChangeRegisters_51
                    2618   ChangeRegisters_40:
                    2619   ; }
                    2620   ; }
                    2621   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000019C0  1013      2622          move.b    (A3),D0
000019C2  0C00 0073 2623          cmp.b     #115,D0
000019C6  6600 004E 2624          bne       ChangeRegisters_44
000019CA  0C02 0073 2625          cmp.b     #115,D2
000019CE  6600 0046 2626          bne       ChangeRegisters_44
                    2627   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000019D2  2F00      2628          move.l    D0,-(A7)
000019D4  4E95      2629          jsr       (A5)
000019D6  2200      2630          move.l    D0,D1
000019D8  201F      2631          move.l    (A7)+,D0
000019DA  2F01      2632          move.l    D1,-(A7)
000019DC  4EB9 0000 2633          jsr       _tolower
000019E0  2EE6      
000019E2  584F      2634          addq.w    #4,A7
000019E4  0C80 0000 2635          cmp.l     #112,D0
000019E8  0070      
000019EA  6618      2636          bne.s     ChangeRegisters_46
                    2637   ; printf("\r\nSystem SP = ") ;
000019EC  4879 0000 2638          pea       @m68kde~1_55.L
000019F0  46FE      
000019F2  4E92      2639          jsr       (A2)
000019F4  584F      2640          addq.w    #4,A7
                    2641   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019F6  42A7      2642          clr.l     -(A7)
000019F8  4E94      2643          jsr       (A4)
000019FA  584F      2644          addq.w    #4,A7
000019FC  23C0 0B00 2645          move.l    D0,_SSP.L
00001A00  0124      
00001A02  600E      2646          bra.s     ChangeRegisters_47
                    2647   ChangeRegisters_46:
                    2648   ; }
                    2649   ; else {
                    2650   ; printf("\r\nIllegal Register....") ;
00001A04  4879 0000 2651          pea       @m68kde~1_54.L
00001A08  46E6      
00001A0A  4E92      2652          jsr       (A2)
00001A0C  584F      2653          addq.w    #4,A7
                    2654   ; return ;
00001A0E  6000 0064 2655          bra       ChangeRegisters_6
                    2656   ChangeRegisters_47:
00001A12  6000 005C 2657          bra       ChangeRegisters_51
                    2658   ChangeRegisters_44:
                    2659   ; }
                    2660   ; }
                    2661   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001A16  1013      2662          move.b    (A3),D0
00001A18  0C00 0070 2663          cmp.b     #112,D0
00001A1C  6620      2664          bne.s     ChangeRegisters_48
00001A1E  0C02 0063 2665          cmp.b     #99,D2
00001A22  661A      2666          bne.s     ChangeRegisters_48
                    2667   ; printf("\r\nPC = ") ;
00001A24  4879 0000 2668          pea       @m68kde~1_56.L
00001A28  470E      
00001A2A  4E92      2669          jsr       (A2)
00001A2C  584F      2670          addq.w    #4,A7
                    2671   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A2E  42A7      2672          clr.l     -(A7)
00001A30  4E94      2673          jsr       (A4)
00001A32  584F      2674          addq.w    #4,A7
00001A34  23C0 0B00 2675          move.l    D0,_PC.L
00001A38  0120      
00001A3A  6000 0034 2676          bra       ChangeRegisters_51
                    2677   ChangeRegisters_48:
                    2678   ; }
                    2679   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001A3E  1013      2680          move.b    (A3),D0
00001A40  0C00 0073 2681          cmp.b     #115,D0
00001A44  6620      2682          bne.s     ChangeRegisters_50
00001A46  0C02 0072 2683          cmp.b     #114,D2
00001A4A  661A      2684          bne.s     ChangeRegisters_50
                    2685   ; printf("\r\nSR = ") ;
00001A4C  4879 0000 2686          pea       @m68kde~1_57.L
00001A50  4716      
00001A52  4E92      2687          jsr       (A2)
00001A54  584F      2688          addq.w    #4,A7
                    2689   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001A56  42A7      2690          clr.l     -(A7)
00001A58  4EB8 0C58 2691          jsr       _Get4HexDigits
00001A5C  584F      2692          addq.w    #4,A7
00001A5E  33C0 0B00 2693          move.w    D0,_SR.L
00001A62  012C      
00001A64  600A      2694          bra.s     ChangeRegisters_51
                    2695   ChangeRegisters_50:
                    2696   ; }
                    2697   ; else
                    2698   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001A66  4879 0000 2699          pea       @m68kde~1_58.L
00001A6A  471E      
00001A6C  4E92      2700          jsr       (A2)
00001A6E  584F      2701          addq.w    #4,A7
                    2702   ChangeRegisters_51:
                    2703   ; DumpRegisters() ;
00001A70  4EB8 12CE 2704          jsr       _DumpRegisters
                    2705   ChangeRegisters_6:
00001A74  4CDF 3C0C 2706          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001A78  4E5E      2707          unlk      A6
00001A7A  4E75      2708          rts
                    2709   ; }
                    2710   ; void BreakPointDisplay(void)
                    2711   ; {
                    2712   _BreakPointDisplay:
00001A7C  48E7 3030 2713          movem.l   D2/D3/A2/A3,-(A7)
00001A80  45F9 0000 2714          lea       _printf.L,A2
00001A84  3836      
00001A86  47F9 0B00 2715          lea       _BreakPointAddress.L,A3
00001A8A  012E      
                    2716   ; int i, BreakPointsSet = 0 ;
00001A8C  4283      2717          clr.l     D3
                    2718   ; // any break points  set
                    2719   ; for(i = 0; i < 8; i++)  {
00001A8E  4282      2720          clr.l     D2
                    2721   BreakPointDisplay_1:
00001A90  0C82 0000 2722          cmp.l     #8,D2
00001A94  0008      
00001A96  6C1C      2723          bge.s     BreakPointDisplay_3
                    2724   ; if(BreakPointSetOrCleared[i] == 1)
00001A98  2002      2725          move.l    D2,D0
00001A9A  E588      2726          lsl.l     #2,D0
00001A9C  41F9 0B00 2727          lea       _BreakPointSetOrCleared.L,A0
00001AA0  015E      
00001AA2  2030 0800 2728          move.l    0(A0,D0.L),D0
00001AA6  0C80 0000 2729          cmp.l     #1,D0
00001AAA  0001      
00001AAC  6602      2730          bne.s     BreakPointDisplay_4
                    2731   ; BreakPointsSet = 1;
00001AAE  7601      2732          moveq     #1,D3
                    2733   BreakPointDisplay_4:
00001AB0  5282      2734          addq.l    #1,D2
00001AB2  60DC      2735          bra       BreakPointDisplay_1
                    2736   BreakPointDisplay_3:
                    2737   ; }
                    2738   ; if(BreakPointsSet == 1) {
00001AB4  0C83 0000 2739          cmp.l     #1,D3
00001AB8  0001      
00001ABA  6616      2740          bne.s     BreakPointDisplay_6
                    2741   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001ABC  4879 0000 2742          pea       @m68kde~1_59.L
00001AC0  475A      
00001AC2  4E92      2743          jsr       (A2)
00001AC4  584F      2744          addq.w    #4,A7
                    2745   ; printf("\r\n---     ---------    -----------") ;
00001AC6  4879 0000 2746          pea       @m68kde~1_60.L
00001ACA  4780      
00001ACC  4E92      2747          jsr       (A2)
00001ACE  584F      2748          addq.w    #4,A7
00001AD0  600A      2749          bra.s     BreakPointDisplay_7
                    2750   BreakPointDisplay_6:
                    2751   ; }
                    2752   ; else
                    2753   ; printf("\r\nNo BreakPoints Set") ;
00001AD2  4879 0000 2754          pea       @m68kde~1_61.L
00001AD6  47A4      
00001AD8  4E92      2755          jsr       (A2)
00001ADA  584F      2756          addq.w    #4,A7
                    2757   BreakPointDisplay_7:
                    2758   ; for(i = 0; i < 8; i++)  {
00001ADC  4282      2759          clr.l     D2
                    2760   BreakPointDisplay_8:
00001ADE  0C82 0000 2761          cmp.l     #8,D2
00001AE2  0008      
00001AE4  6C00 005A 2762          bge       BreakPointDisplay_10
                    2763   ; // put opcode back, then put break point back
                    2764   ; if(BreakPointSetOrCleared[i] == 1)  {
00001AE8  2002      2765          move.l    D2,D0
00001AEA  E588      2766          lsl.l     #2,D0
00001AEC  41F9 0B00 2767          lea       _BreakPointSetOrCleared.L,A0
00001AF0  015E      
00001AF2  2030 0800 2768          move.l    0(A0,D0.L),D0
00001AF6  0C80 0000 2769          cmp.l     #1,D0
00001AFA  0001      
00001AFC  6600 003E 2770          bne       BreakPointDisplay_11
                    2771   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001B00  2002      2772          move.l    D2,D0
00001B02  E388      2773          lsl.l     #1,D0
00001B04  41F9 0B00 2774          lea       _BreakPointInstruction.L,A0
00001B08  014E      
00001B0A  2202      2775          move.l    D2,D1
00001B0C  E589      2776          lsl.l     #2,D1
00001B0E  2233 1800 2777          move.l    0(A3,D1.L),D1
00001B12  2241      2778          move.l    D1,A1
00001B14  32B0 0800 2779          move.w    0(A0,D0.L),(A1)
                    2780   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001B18  2002      2781          move.l    D2,D0
00001B1A  E588      2782          lsl.l     #2,D0
00001B1C  2033 0800 2783          move.l    0(A3,D0.L),D0
00001B20  2040      2784          move.l    D0,A0
00001B22  30BC 4E4E 2785          move.w    #20046,(A0)
                    2786   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001B26  2202      2787          move.l    D2,D1
00001B28  E589      2788          lsl.l     #2,D1
00001B2A  2F33 1800 2789          move.l    0(A3,D1.L),-(A7)
00001B2E  2F02      2790          move.l    D2,-(A7)
00001B30  4879 0000 2791          pea       @m68kde~1_62.L
00001B34  47BA      
00001B36  4E92      2792          jsr       (A2)
00001B38  DEFC 000C 2793          add.w     #12,A7
                    2794   BreakPointDisplay_11:
00001B3C  5282      2795          addq.l    #1,D2
00001B3E  609E      2796          bra       BreakPointDisplay_8
                    2797   BreakPointDisplay_10:
                    2798   ; }
                    2799   ; }
                    2800   ; printf("\r\n") ;
00001B40  4879 0000 2801          pea       @m68kde~1_1.L
00001B44  420C      
00001B46  4E92      2802          jsr       (A2)
00001B48  584F      2803          addq.w    #4,A7
00001B4A  4CDF 0C0C 2804          movem.l   (A7)+,D2/D3/A2/A3
00001B4E  4E75      2805          rts
                    2806   ; }
                    2807   ; void WatchPointDisplay(void)
                    2808   ; {
                    2809   _WatchPointDisplay:
00001B50  48E7 3020 2810          movem.l   D2/D3/A2,-(A7)
00001B54  45F9 0000 2811          lea       _printf.L,A2
00001B58  3836      
                    2812   ; int i ;
                    2813   ; int WatchPointsSet = 0 ;
00001B5A  4283      2814          clr.l     D3
                    2815   ; // any watchpoints set
                    2816   ; for(i = 0; i < 8; i++)  {
00001B5C  4282      2817          clr.l     D2
                    2818   WatchPointDisplay_1:
00001B5E  0C82 0000 2819          cmp.l     #8,D2
00001B62  0008      
00001B64  6C1C      2820          bge.s     WatchPointDisplay_3
                    2821   ; if(WatchPointSetOrCleared[i] == 1)
00001B66  2002      2822          move.l    D2,D0
00001B68  E588      2823          lsl.l     #2,D0
00001B6A  41F9 0B00 2824          lea       _WatchPointSetOrCleared.L,A0
00001B6E  01A2      
00001B70  2030 0800 2825          move.l    0(A0,D0.L),D0
00001B74  0C80 0000 2826          cmp.l     #1,D0
00001B78  0001      
00001B7A  6602      2827          bne.s     WatchPointDisplay_4
                    2828   ; WatchPointsSet = 1;
00001B7C  7601      2829          moveq     #1,D3
                    2830   WatchPointDisplay_4:
00001B7E  5282      2831          addq.l    #1,D2
00001B80  60DC      2832          bra       WatchPointDisplay_1
                    2833   WatchPointDisplay_3:
                    2834   ; }
                    2835   ; if(WatchPointsSet == 1) {
00001B82  0C83 0000 2836          cmp.l     #1,D3
00001B86  0001      
00001B88  6616      2837          bne.s     WatchPointDisplay_6
                    2838   ; printf("\r\nNum     Address") ;
00001B8A  4879 0000 2839          pea       @m68kde~1_63.L
00001B8E  47CA      
00001B90  4E92      2840          jsr       (A2)
00001B92  584F      2841          addq.w    #4,A7
                    2842   ; printf("\r\n---     ---------") ;
00001B94  4879 0000 2843          pea       @m68kde~1_64.L
00001B98  47DC      
00001B9A  4E92      2844          jsr       (A2)
00001B9C  584F      2845          addq.w    #4,A7
00001B9E  600A      2846          bra.s     WatchPointDisplay_7
                    2847   WatchPointDisplay_6:
                    2848   ; }
                    2849   ; else
                    2850   ; printf("\r\nNo WatchPoints Set") ;
00001BA0  4879 0000 2851          pea       @m68kde~1_65.L
00001BA4  47F0      
00001BA6  4E92      2852          jsr       (A2)
00001BA8  584F      2853          addq.w    #4,A7
                    2854   WatchPointDisplay_7:
                    2855   ; for(i = 0; i < 8; i++)  {
00001BAA  4282      2856          clr.l     D2
                    2857   WatchPointDisplay_8:
00001BAC  0C82 0000 2858          cmp.l     #8,D2
00001BB0  0008      
00001BB2  6C00 0038 2859          bge       WatchPointDisplay_10
                    2860   ; if(WatchPointSetOrCleared[i] == 1)
00001BB6  2002      2861          move.l    D2,D0
00001BB8  E588      2862          lsl.l     #2,D0
00001BBA  41F9 0B00 2863          lea       _WatchPointSetOrCleared.L,A0
00001BBE  01A2      
00001BC0  2030 0800 2864          move.l    0(A0,D0.L),D0
00001BC4  0C80 0000 2865          cmp.l     #1,D0
00001BC8  0001      
00001BCA  661C      2866          bne.s     WatchPointDisplay_11
                    2867   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001BCC  2202      2868          move.l    D2,D1
00001BCE  E589      2869          lsl.l     #2,D1
00001BD0  41F9 0B00 2870          lea       _WatchPointAddress.L,A0
00001BD4  0182      
00001BD6  2F30 1800 2871          move.l    0(A0,D1.L),-(A7)
00001BDA  2F02      2872          move.l    D2,-(A7)
00001BDC  4879 0000 2873          pea       @m68kde~1_62.L
00001BE0  47BA      
00001BE2  4E92      2874          jsr       (A2)
00001BE4  DEFC 000C 2875          add.w     #12,A7
                    2876   WatchPointDisplay_11:
00001BE8  5282      2877          addq.l    #1,D2
00001BEA  60C0      2878          bra       WatchPointDisplay_8
                    2879   WatchPointDisplay_10:
                    2880   ; }
                    2881   ; printf("\r\n") ;
00001BEC  4879 0000 2882          pea       @m68kde~1_1.L
00001BF0  420C      
00001BF2  4E92      2883          jsr       (A2)
00001BF4  584F      2884          addq.w    #4,A7
00001BF6  4CDF 040C 2885          movem.l   (A7)+,D2/D3/A2
00001BFA  4E75      2886          rts
                    2887   ; }
                    2888   ; void BreakPointClear(void)
                    2889   ; {
                    2890   _BreakPointClear:
00001BFC  4E56 FFFC 2891          link      A6,#-4
00001C00  48E7 2020 2892          movem.l   D2/A2,-(A7)
00001C04  45F9 0000 2893          lea       _printf.L,A2
00001C08  3836      
                    2894   ; unsigned int i ;
                    2895   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2896   ; BreakPointDisplay() ;
00001C0A  4EB8 1A7C 2897          jsr       _BreakPointDisplay
                    2898   ; printf("\r\nEnter Break Point Number: ") ;
00001C0E  4879 0000 2899          pea       @m68kde~1_66.L
00001C12  4806      
00001C14  4E92      2900          jsr       (A2)
00001C16  584F      2901          addq.w    #4,A7
                    2902   ; i = xtod(_getch()) ;           // get break pointer number
00001C18  2F00      2903          move.l    D0,-(A7)
00001C1A  4EB8 0B68 2904          jsr       __getch
00001C1E  2200      2905          move.l    D0,D1
00001C20  201F      2906          move.l    (A7)+,D0
00001C22  2F01      2907          move.l    D1,-(A7)
00001C24  4EB8 0BD2 2908          jsr       _xtod
00001C28  584F      2909          addq.w    #4,A7
00001C2A  C0BC 0000 2910          and.l     #255,D0
00001C2E  00FF      
00001C30  2400      2911          move.l    D0,D2
                    2912   ; if((i < 0) || (i > 7))   {
00001C32  0C82 0000 2913          cmp.l     #0,D2
00001C36  0000      
00001C38  6508      2914          blo.s     BreakPointClear_3
00001C3A  0C82 0000 2915          cmp.l     #7,D2
00001C3E  0007      
00001C40  630E      2916          bls.s     BreakPointClear_1
                    2917   BreakPointClear_3:
                    2918   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001C42  4879 0000 2919          pea       @m68kde~1_67.L
00001C46  4824      
00001C48  4E92      2920          jsr       (A2)
00001C4A  584F      2921          addq.w    #4,A7
                    2922   ; return ;
00001C4C  6000 0080 2923          bra       BreakPointClear_4
                    2924   BreakPointClear_1:
                    2925   ; }
                    2926   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001C50  2002      2927          move.l    D2,D0
00001C52  E588      2928          lsl.l     #2,D0
00001C54  41F9 0B00 2929          lea       _BreakPointSetOrCleared.L,A0
00001C58  015E      
00001C5A  2030 0800 2930          move.l    0(A0,D0.L),D0
00001C5E  0C80 0000 2931          cmp.l     #1,D0
00001C62  0001      
00001C64  6600 005A 2932          bne       BreakPointClear_5
                    2933   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001C68  2002      2934          move.l    D2,D0
00001C6A  E588      2935          lsl.l     #2,D0
00001C6C  41F9 0B00 2936          lea       _BreakPointAddress.L,A0
00001C70  012E      
00001C72  2D70 0800 2937          move.l    0(A0,D0.L),-4(A6)
00001C76  FFFC      
                    2938   ; BreakPointAddress[i] = 0 ;
00001C78  2002      2939          move.l    D2,D0
00001C7A  E588      2940          lsl.l     #2,D0
00001C7C  41F9 0B00 2941          lea       _BreakPointAddress.L,A0
00001C80  012E      
00001C82  42B0 0800 2942          clr.l     0(A0,D0.L)
                    2943   ; BreakPointSetOrCleared[i] = 0 ;
00001C86  2002      2944          move.l    D2,D0
00001C88  E588      2945          lsl.l     #2,D0
00001C8A  41F9 0B00 2946          lea       _BreakPointSetOrCleared.L,A0
00001C8E  015E      
00001C90  42B0 0800 2947          clr.l     0(A0,D0.L)
                    2948   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001C94  2002      2949          move.l    D2,D0
00001C96  E388      2950          lsl.l     #1,D0
00001C98  41F9 0B00 2951          lea       _BreakPointInstruction.L,A0
00001C9C  014E      
00001C9E  226E FFFC 2952          move.l    -4(A6),A1
00001CA2  32B0 0800 2953          move.w    0(A0,D0.L),(A1)
                    2954   ; BreakPointInstruction[i] = 0 ;
00001CA6  2002      2955          move.l    D2,D0
00001CA8  E388      2956          lsl.l     #1,D0
00001CAA  41F9 0B00 2957          lea       _BreakPointInstruction.L,A0
00001CAE  014E      
00001CB0  4270 0800 2958          clr.w     0(A0,D0.L)
                    2959   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001CB4  4879 0000 2960          pea       @m68kde~1_68.L
00001CB8  4840      
00001CBA  4E92      2961          jsr       (A2)
00001CBC  584F      2962          addq.w    #4,A7
00001CBE  600A      2963          bra.s     BreakPointClear_6
                    2964   BreakPointClear_5:
                    2965   ; }
                    2966   ; else
                    2967   ; printf("\r\nBreak Point wasn't Set.....") ;
00001CC0  4879 0000 2968          pea       @m68kde~1_69.L
00001CC4  485E      
00001CC6  4E92      2969          jsr       (A2)
00001CC8  584F      2970          addq.w    #4,A7
                    2971   BreakPointClear_6:
                    2972   ; BreakPointDisplay() ;
00001CCA  4EB8 1A7C 2973          jsr       _BreakPointDisplay
                    2974   ; return ;
                    2975   BreakPointClear_4:
00001CCE  4CDF 0404 2976          movem.l   (A7)+,D2/A2
00001CD2  4E5E      2977          unlk      A6
00001CD4  4E75      2978          rts
                    2979   ; }
                    2980   ; void WatchPointClear(void)
                    2981   ; {
                    2982   _WatchPointClear:
00001CD6  48E7 2020 2983          movem.l   D2/A2,-(A7)
00001CDA  45F9 0000 2984          lea       _printf.L,A2
00001CDE  3836      
                    2985   ; unsigned int i ;
                    2986   ; WatchPointDisplay() ;
00001CE0  4EB8 1B50 2987          jsr       _WatchPointDisplay
                    2988   ; printf("\r\nEnter Watch Point Number: ") ;
00001CE4  4879 0000 2989          pea       @m68kde~1_70.L
00001CE8  487C      
00001CEA  4E92      2990          jsr       (A2)
00001CEC  584F      2991          addq.w    #4,A7
                    2992   ; i = xtod(_getch()) ;           // get watch pointer number
00001CEE  2F00      2993          move.l    D0,-(A7)
00001CF0  4EB8 0B68 2994          jsr       __getch
00001CF4  2200      2995          move.l    D0,D1
00001CF6  201F      2996          move.l    (A7)+,D0
00001CF8  2F01      2997          move.l    D1,-(A7)
00001CFA  4EB8 0BD2 2998          jsr       _xtod
00001CFE  584F      2999          addq.w    #4,A7
00001D00  C0BC 0000 3000          and.l     #255,D0
00001D04  00FF      
00001D06  2400      3001          move.l    D0,D2
                    3002   ; if((i < 0) || (i > 7))   {
00001D08  0C82 0000 3003          cmp.l     #0,D2
00001D0C  0000      
00001D0E  6508      3004          blo.s     WatchPointClear_3
00001D10  0C82 0000 3005          cmp.l     #7,D2
00001D14  0007      
00001D16  630E      3006          bls.s     WatchPointClear_1
                    3007   WatchPointClear_3:
                    3008   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D18  4879 0000 3009          pea       @m68kde~1_67.L
00001D1C  4824      
00001D1E  4E92      3010          jsr       (A2)
00001D20  584F      3011          addq.w    #4,A7
                    3012   ; return ;
00001D22  6000 004E 3013          bra       WatchPointClear_4
                    3014   WatchPointClear_1:
                    3015   ; }
                    3016   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001D26  2002      3017          move.l    D2,D0
00001D28  E588      3018          lsl.l     #2,D0
00001D2A  41F9 0B00 3019          lea       _WatchPointSetOrCleared.L,A0
00001D2E  01A2      
00001D30  2030 0800 3020          move.l    0(A0,D0.L),D0
00001D34  0C80 0000 3021          cmp.l     #1,D0
00001D38  0001      
00001D3A  6628      3022          bne.s     WatchPointClear_5
                    3023   ; WatchPointAddress[i] = 0 ;
00001D3C  2002      3024          move.l    D2,D0
00001D3E  E588      3025          lsl.l     #2,D0
00001D40  41F9 0B00 3026          lea       _WatchPointAddress.L,A0
00001D44  0182      
00001D46  42B0 0800 3027          clr.l     0(A0,D0.L)
                    3028   ; WatchPointSetOrCleared[i] = 0 ;
00001D4A  2002      3029          move.l    D2,D0
00001D4C  E588      3030          lsl.l     #2,D0
00001D4E  41F9 0B00 3031          lea       _WatchPointSetOrCleared.L,A0
00001D52  01A2      
00001D54  42B0 0800 3032          clr.l     0(A0,D0.L)
                    3033   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001D58  4879 0000 3034          pea       @m68kde~1_71.L
00001D5C  489A      
00001D5E  4E92      3035          jsr       (A2)
00001D60  584F      3036          addq.w    #4,A7
00001D62  600A      3037          bra.s     WatchPointClear_6
                    3038   WatchPointClear_5:
                    3039   ; }
                    3040   ; else
                    3041   ; printf("\r\nWatch Point Was not Set.....") ;
00001D64  4879 0000 3042          pea       @m68kde~1_72.L
00001D68  48B8      
00001D6A  4E92      3043          jsr       (A2)
00001D6C  584F      3044          addq.w    #4,A7
                    3045   WatchPointClear_6:
                    3046   ; WatchPointDisplay() ;
00001D6E  4EB8 1B50 3047          jsr       _WatchPointDisplay
                    3048   ; return ;
                    3049   WatchPointClear_4:
00001D72  4CDF 0404 3050          movem.l   (A7)+,D2/A2
00001D76  4E75      3051          rts
                    3052   ; }
                    3053   ; void DisableBreakPoints(void)
                    3054   ; {
                    3055   _DisableBreakPoints:
00001D78  4E56 FFFC 3056          link      A6,#-4
00001D7C  2F02      3057          move.l    D2,-(A7)
                    3058   ; int i ;
                    3059   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3060   ; for(i = 0; i < 8; i++)  {
00001D7E  4282      3061          clr.l     D2
                    3062   DisableBreakPoints_1:
00001D80  0C82 0000 3063          cmp.l     #8,D2
00001D84  0008      
00001D86  6C00 003E 3064          bge       DisableBreakPoints_3
                    3065   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001D8A  2002      3066          move.l    D2,D0
00001D8C  E588      3067          lsl.l     #2,D0
00001D8E  41F9 0B00 3068          lea       _BreakPointSetOrCleared.L,A0
00001D92  015E      
00001D94  2030 0800 3069          move.l    0(A0,D0.L),D0
00001D98  0C80 0000 3070          cmp.l     #1,D0
00001D9C  0001      
00001D9E  6622      3071          bne.s     DisableBreakPoints_4
                    3072   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001DA0  2002      3073          move.l    D2,D0
00001DA2  E588      3074          lsl.l     #2,D0
00001DA4  41F9 0B00 3075          lea       _BreakPointAddress.L,A0
00001DA8  012E      
00001DAA  2D70 0800 3076          move.l    0(A0,D0.L),-4(A6)
00001DAE  FFFC      
                    3077   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001DB0  2002      3078          move.l    D2,D0
00001DB2  E388      3079          lsl.l     #1,D0
00001DB4  41F9 0B00 3080          lea       _BreakPointInstruction.L,A0
00001DB8  014E      
00001DBA  226E FFFC 3081          move.l    -4(A6),A1
00001DBE  32B0 0800 3082          move.w    0(A0,D0.L),(A1)
                    3083   DisableBreakPoints_4:
00001DC2  5282      3084          addq.l    #1,D2
00001DC4  60BA      3085          bra       DisableBreakPoints_1
                    3086   DisableBreakPoints_3:
00001DC6  241F      3087          move.l    (A7)+,D2
00001DC8  4E5E      3088          unlk      A6
00001DCA  4E75      3089          rts
                    3090   ; }
                    3091   ; }
                    3092   ; }
                    3093   ; void EnableBreakPoints(void)
                    3094   ; {
                    3095   _EnableBreakPoints:
00001DCC  4E56 FFFC 3096          link      A6,#-4
00001DD0  2F02      3097          move.l    D2,-(A7)
                    3098   ; int i ;
                    3099   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3100   ; for(i = 0; i < 8; i++)  {
00001DD2  4282      3101          clr.l     D2
                    3102   EnableBreakPoints_1:
00001DD4  0C82 0000 3103          cmp.l     #8,D2
00001DD8  0008      
00001DDA  6C32      3104          bge.s     EnableBreakPoints_3
                    3105   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001DDC  2002      3106          move.l    D2,D0
00001DDE  E588      3107          lsl.l     #2,D0
00001DE0  41F9 0B00 3108          lea       _BreakPointSetOrCleared.L,A0
00001DE4  015E      
00001DE6  2030 0800 3109          move.l    0(A0,D0.L),D0
00001DEA  0C80 0000 3110          cmp.l     #1,D0
00001DEE  0001      
00001DF0  6618      3111          bne.s     EnableBreakPoints_4
                    3112   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001DF2  2002      3113          move.l    D2,D0
00001DF4  E588      3114          lsl.l     #2,D0
00001DF6  41F9 0B00 3115          lea       _BreakPointAddress.L,A0
00001DFA  012E      
00001DFC  2D70 0800 3116          move.l    0(A0,D0.L),-4(A6)
00001E00  FFFC      
                    3117   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001E02  206E FFFC 3118          move.l    -4(A6),A0
00001E06  30BC 4E4E 3119          move.w    #20046,(A0)
                    3120   EnableBreakPoints_4:
00001E0A  5282      3121          addq.l    #1,D2
00001E0C  60C6      3122          bra       EnableBreakPoints_1
                    3123   EnableBreakPoints_3:
00001E0E  241F      3124          move.l    (A7)+,D2
00001E10  4E5E      3125          unlk      A6
00001E12  4E75      3126          rts
                    3127   ; }
                    3128   ; }
                    3129   ; }
                    3130   ; void KillAllBreakPoints(void)
                    3131   ; {
                    3132   _KillAllBreakPoints:
00001E14  4E56 FFFC 3133          link      A6,#-4
00001E18  2F02      3134          move.l    D2,-(A7)
                    3135   ; int i ;
                    3136   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3137   ; for(i = 0; i < 8; i++)  {
00001E1A  4282      3138          clr.l     D2
                    3139   KillAllBreakPoints_1:
00001E1C  0C82 0000 3140          cmp.l     #8,D2
00001E20  0008      
00001E22  6C00 0052 3141          bge       KillAllBreakPoints_3
                    3142   ; // clear BP
                    3143   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E26  2002      3144          move.l    D2,D0
00001E28  E588      3145          lsl.l     #2,D0
00001E2A  41F9 0B00 3146          lea       _BreakPointAddress.L,A0
00001E2E  012E      
00001E30  2D70 0800 3147          move.l    0(A0,D0.L),-4(A6)
00001E34  FFFC      
                    3148   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001E36  2002      3149          move.l    D2,D0
00001E38  E388      3150          lsl.l     #1,D0
00001E3A  41F9 0B00 3151          lea       _BreakPointInstruction.L,A0
00001E3E  014E      
00001E40  226E FFFC 3152          move.l    -4(A6),A1
00001E44  32B0 0800 3153          move.w    0(A0,D0.L),(A1)
                    3154   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001E48  2002      3155          move.l    D2,D0
00001E4A  E588      3156          lsl.l     #2,D0
00001E4C  41F9 0B00 3157          lea       _BreakPointAddress.L,A0
00001E50  012E      
00001E52  42B0 0800 3158          clr.l     0(A0,D0.L)
                    3159   ; BreakPointInstruction[i] = 0 ;
00001E56  2002      3160          move.l    D2,D0
00001E58  E388      3161          lsl.l     #1,D0
00001E5A  41F9 0B00 3162          lea       _BreakPointInstruction.L,A0
00001E5E  014E      
00001E60  4270 0800 3163          clr.w     0(A0,D0.L)
                    3164   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001E64  2002      3165          move.l    D2,D0
00001E66  E588      3166          lsl.l     #2,D0
00001E68  41F9 0B00 3167          lea       _BreakPointSetOrCleared.L,A0
00001E6C  015E      
00001E6E  42B0 0800 3168          clr.l     0(A0,D0.L)
00001E72  5282      3169          addq.l    #1,D2
00001E74  60A6      3170          bra       KillAllBreakPoints_1
                    3171   KillAllBreakPoints_3:
00001E76  241F      3172          move.l    (A7)+,D2
00001E78  4E5E      3173          unlk      A6
00001E7A  4E75      3174          rts
                    3175   ; }
                    3176   ; //BreakPointDisplay() ;       // display the break points
                    3177   ; }
                    3178   ; void KillAllWatchPoints(void)
                    3179   ; {
                    3180   _KillAllWatchPoints:
00001E7C  2F02      3181          move.l    D2,-(A7)
                    3182   ; int i ;
                    3183   ; for(i = 0; i < 8; i++)  {
00001E7E  4282      3184          clr.l     D2
                    3185   KillAllWatchPoints_1:
00001E80  0C82 0000 3186          cmp.l     #8,D2
00001E84  0008      
00001E86  6C20      3187          bge.s     KillAllWatchPoints_3
                    3188   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001E88  2002      3189          move.l    D2,D0
00001E8A  E588      3190          lsl.l     #2,D0
00001E8C  41F9 0B00 3191          lea       _WatchPointAddress.L,A0
00001E90  0182      
00001E92  42B0 0800 3192          clr.l     0(A0,D0.L)
                    3193   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001E96  2002      3194          move.l    D2,D0
00001E98  E588      3195          lsl.l     #2,D0
00001E9A  41F9 0B00 3196          lea       _WatchPointSetOrCleared.L,A0
00001E9E  01A2      
00001EA0  42B0 0800 3197          clr.l     0(A0,D0.L)
00001EA4  5282      3198          addq.l    #1,D2
00001EA6  60D8      3199          bra       KillAllWatchPoints_1
                    3200   KillAllWatchPoints_3:
00001EA8  241F      3201          move.l    (A7)+,D2
00001EAA  4E75      3202          rts
                    3203   ; }
                    3204   ; //WatchPointDisplay() ;       // display the break points
                    3205   ; }
                    3206   ; void SetBreakPoint(void)
                    3207   ; {
                    3208   _SetBreakPoint:
00001EAC  4E56 FFFC 3209          link      A6,#-4
00001EB0  48E7 3830 3210          movem.l   D2/D3/D4/A2/A3,-(A7)
00001EB4  45F9 0000 3211          lea       _printf.L,A2
00001EB8  3836      
00001EBA  47F9 0B00 3212          lea       _BreakPointSetOrCleared.L,A3
00001EBE  015E      
                    3213   ; int i ;
                    3214   ; int BPNumber;
                    3215   ; int BPAddress;
                    3216   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3217   ; // see if any free break points
                    3218   ; for(i = 0; i < 8; i ++) {
00001EC0  4282      3219          clr.l     D2
                    3220   SetBreakPoint_1:
00001EC2  0C82 0000 3221          cmp.l     #8,D2
00001EC6  0008      
00001EC8  6C10      3222          bge.s     SetBreakPoint_3
                    3223   ; if( BreakPointSetOrCleared[i] == 0)
00001ECA  2002      3224          move.l    D2,D0
00001ECC  E588      3225          lsl.l     #2,D0
00001ECE  2033 0800 3226          move.l    0(A3,D0.L),D0
00001ED2  6602      3227          bne.s     SetBreakPoint_4
                    3228   ; break ;         // if spare BP found allow user to set it
00001ED4  6004      3229          bra.s     SetBreakPoint_3
                    3230   SetBreakPoint_4:
00001ED6  5282      3231          addq.l    #1,D2
00001ED8  60E8      3232          bra       SetBreakPoint_1
                    3233   SetBreakPoint_3:
                    3234   ; }
                    3235   ; if(i == 8) {
00001EDA  0C82 0000 3236          cmp.l     #8,D2
00001EDE  0008      
00001EE0  660E      3237          bne.s     SetBreakPoint_6
                    3238   ; printf("\r\nNo FREE Break Points.....") ;
00001EE2  4879 0000 3239          pea       @m68kde~1_73.L
00001EE6  48D8      
00001EE8  4E92      3240          jsr       (A2)
00001EEA  584F      3241          addq.w    #4,A7
                    3242   ; return ;
00001EEC  6000 00D6 3243          bra       SetBreakPoint_15
                    3244   SetBreakPoint_6:
                    3245   ; }
                    3246   ; printf("\r\nBreak Point Address: ") ;
00001EF0  4879 0000 3247          pea       @m68kde~1_74.L
00001EF4  48F4      
00001EF6  4E92      3248          jsr       (A2)
00001EF8  584F      3249          addq.w    #4,A7
                    3250   ; BPAddress = Get8HexDigits(0) ;
00001EFA  42A7      3251          clr.l     -(A7)
00001EFC  4EB8 0CA4 3252          jsr       _Get8HexDigits
00001F00  584F      3253          addq.w    #4,A7
00001F02  2600      3254          move.l    D0,D3
                    3255   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001F04  2803      3256          move.l    D3,D4
                    3257   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001F06  2003      3258          move.l    D3,D0
00001F08  C0BC 0000 3259          and.l     #1,D0
00001F0C  0001      
00001F0E  0C80 0000 3260          cmp.l     #1,D0
00001F12  0001      
00001F14  660E      3261          bne.s     SetBreakPoint_9
                    3262   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001F16  4879 0000 3263          pea       @m68kde~1_75.L
00001F1A  490C      
00001F1C  4E92      3264          jsr       (A2)
00001F1E  584F      3265          addq.w    #4,A7
                    3266   ; return ;
00001F20  6000 00A2 3267          bra       SetBreakPoint_15
                    3268   SetBreakPoint_9:
                    3269   ; }
                    3270   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001F24  0C83 0000 3271          cmp.l     #32768,D3
00001F28  8000      
00001F2A  640E      3272          bhs.s     SetBreakPoint_11
                    3273   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001F2C  4879 0000 3274          pea       @m68kde~1_76.L
00001F30  4942      
00001F32  4E92      3275          jsr       (A2)
00001F34  584F      3276          addq.w    #4,A7
                    3277   ; return ;
00001F36  6000 008C 3278          bra       SetBreakPoint_15
                    3279   SetBreakPoint_11:
                    3280   ; }
                    3281   ; // search for first free bp or existing same BP
                    3282   ; for(i = 0; i < 8; i++)  {
00001F3A  4282      3283          clr.l     D2
                    3284   SetBreakPoint_13:
00001F3C  0C82 0000 3285          cmp.l     #8,D2
00001F40  0008      
00001F42  6C00 0080 3286          bge       SetBreakPoint_15
                    3287   ; if(BreakPointAddress[i] == BPAddress)   {
00001F46  2002      3288          move.l    D2,D0
00001F48  E588      3289          lsl.l     #2,D0
00001F4A  41F9 0B00 3290          lea       _BreakPointAddress.L,A0
00001F4E  012E      
00001F50  B6B0 0800 3291          cmp.l     0(A0,D0.L),D3
00001F54  6610      3292          bne.s     SetBreakPoint_16
                    3293   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001F56  2F03      3294          move.l    D3,-(A7)
00001F58  4879 0000 3295          pea       @m68kde~1_77.L
00001F5C  498A      
00001F5E  4E92      3296          jsr       (A2)
00001F60  504F      3297          addq.w    #8,A7
                    3298   ; return ;
00001F62  6000 0060 3299          bra       SetBreakPoint_15
                    3300   SetBreakPoint_16:
                    3301   ; }
                    3302   ; if(BreakPointSetOrCleared[i] == 0) {
00001F66  2002      3303          move.l    D2,D0
00001F68  E588      3304          lsl.l     #2,D0
00001F6A  2033 0800 3305          move.l    0(A3,D0.L),D0
00001F6E  6600 004E 3306          bne       SetBreakPoint_18
                    3307   ; // set BP here
                    3308   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001F72  2002      3309          move.l    D2,D0
00001F74  E588      3310          lsl.l     #2,D0
00001F76  27BC 0000 3311          move.l    #1,0(A3,D0.L)
00001F7A  0001 0800 
                    3312   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001F7E  2044      3313          move.l    D4,A0
00001F80  2002      3314          move.l    D2,D0
00001F82  E388      3315          lsl.l     #1,D0
00001F84  43F9 0B00 3316          lea       _BreakPointInstruction.L,A1
00001F88  014E      
00001F8A  3390 0800 3317          move.w    (A0),0(A1,D0.L)
                    3318   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001F8E  2F04      3319          move.l    D4,-(A7)
00001F90  4879 0000 3320          pea       @m68kde~1_78.L
00001F94  49C2      
00001F96  4E92      3321          jsr       (A2)
00001F98  504F      3322          addq.w    #8,A7
                    3323   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001F9A  2044      3324          move.l    D4,A0
00001F9C  30BC 4E4E 3325          move.w    #20046,(A0)
                    3326   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001FA0  2002      3327          move.l    D2,D0
00001FA2  E588      3328          lsl.l     #2,D0
00001FA4  41F9 0B00 3329          lea       _BreakPointAddress.L,A0
00001FA8  012E      
00001FAA  2183 0800 3330          move.l    D3,0(A0,D0.L)
                    3331   ; printf("\r\n") ;
00001FAE  4879 0000 3332          pea       @m68kde~1_1.L
00001FB2  420C      
00001FB4  4E92      3333          jsr       (A2)
00001FB6  584F      3334          addq.w    #4,A7
                    3335   ; BreakPointDisplay() ;       // display the break points
00001FB8  4EB8 1A7C 3336          jsr       _BreakPointDisplay
                    3337   ; return ;
00001FBC  6006      3338          bra.s     SetBreakPoint_15
                    3339   SetBreakPoint_18:
00001FBE  5282      3340          addq.l    #1,D2
00001FC0  6000 FF7A 3341          bra       SetBreakPoint_13
                    3342   SetBreakPoint_15:
00001FC4  4CDF 0C1C 3343          movem.l   (A7)+,D2/D3/D4/A2/A3
00001FC8  4E5E      3344          unlk      A6
00001FCA  4E75      3345          rts
                    3346   ; }
                    3347   ; }
                    3348   ; }
                    3349   ; void SetWatchPoint(void)
                    3350   ; {
                    3351   _SetWatchPoint:
00001FCC  4E56 FFF8 3352          link      A6,#-8
00001FD0  48E7 3030 3353          movem.l   D2/D3/A2/A3,-(A7)
00001FD4  45F9 0000 3354          lea       _printf.L,A2
00001FD8  3836      
00001FDA  47F9 0B00 3355          lea       _WatchPointSetOrCleared.L,A3
00001FDE  01A2      
                    3356   ; int i ;
                    3357   ; int WPNumber;
                    3358   ; int WPAddress;
                    3359   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3360   ; // see if any free break points
                    3361   ; for(i = 0; i < 8; i ++) {
00001FE0  4282      3362          clr.l     D2
                    3363   SetWatchPoint_1:
00001FE2  0C82 0000 3364          cmp.l     #8,D2
00001FE6  0008      
00001FE8  6C10      3365          bge.s     SetWatchPoint_3
                    3366   ; if( WatchPointSetOrCleared[i] == 0)
00001FEA  2002      3367          move.l    D2,D0
00001FEC  E588      3368          lsl.l     #2,D0
00001FEE  2033 0800 3369          move.l    0(A3,D0.L),D0
00001FF2  6602      3370          bne.s     SetWatchPoint_4
                    3371   ; break ;         // if spare WP found allow user to set it
00001FF4  6004      3372          bra.s     SetWatchPoint_3
                    3373   SetWatchPoint_4:
00001FF6  5282      3374          addq.l    #1,D2
00001FF8  60E8      3375          bra       SetWatchPoint_1
                    3376   SetWatchPoint_3:
                    3377   ; }
                    3378   ; if(i == 8) {
00001FFA  0C82 0000 3379          cmp.l     #8,D2
00001FFE  0008      
00002000  660E      3380          bne.s     SetWatchPoint_6
                    3381   ; printf("\r\nNo FREE Watch Points.....") ;
00002002  4879 0000 3382          pea       @m68kde~1_79.L
00002006  49E8      
00002008  4E92      3383          jsr       (A2)
0000200A  584F      3384          addq.w    #4,A7
                    3385   ; return ;
0000200C  6000 008C 3386          bra       SetWatchPoint_11
                    3387   SetWatchPoint_6:
                    3388   ; }
                    3389   ; printf("\r\nWatch Point Address: ") ;
00002010  4879 0000 3390          pea       @m68kde~1_80.L
00002014  4A04      
00002016  4E92      3391          jsr       (A2)
00002018  584F      3392          addq.w    #4,A7
                    3393   ; WPAddress = Get8HexDigits(0) ;
0000201A  42A7      3394          clr.l     -(A7)
0000201C  4EB8 0CA4 3395          jsr       _Get8HexDigits
00002020  584F      3396          addq.w    #4,A7
00002022  2600      3397          move.l    D0,D3
                    3398   ; // search for first free wp or existing same wp
                    3399   ; for(i = 0; i < 8; i++)  {
00002024  4282      3400          clr.l     D2
                    3401   SetWatchPoint_9:
00002026  0C82 0000 3402          cmp.l     #8,D2
0000202A  0008      
0000202C  6C00 006C 3403          bge       SetWatchPoint_11
                    3404   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002030  2002      3405          move.l    D2,D0
00002032  E588      3406          lsl.l     #2,D0
00002034  41F9 0B00 3407          lea       _WatchPointAddress.L,A0
00002038  0182      
0000203A  B6B0 0800 3408          cmp.l     0(A0,D0.L),D3
0000203E  6614      3409          bne.s     SetWatchPoint_12
00002040  4A83      3410          tst.l     D3
00002042  6710      3411          beq.s     SetWatchPoint_12
                    3412   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002044  2F03      3413          move.l    D3,-(A7)
00002046  4879 0000 3414          pea       @m68kde~1_81.L
0000204A  4A1C      
0000204C  4E92      3415          jsr       (A2)
0000204E  504F      3416          addq.w    #8,A7
                    3417   ; return ;
00002050  6000 0048 3418          bra       SetWatchPoint_11
                    3419   SetWatchPoint_12:
                    3420   ; }
                    3421   ; if(WatchPointSetOrCleared[i] == 0) {
00002054  2002      3422          move.l    D2,D0
00002056  E588      3423          lsl.l     #2,D0
00002058  2033 0800 3424          move.l    0(A3,D0.L),D0
0000205C  6600 0038 3425          bne       SetWatchPoint_14
                    3426   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002060  2002      3427          move.l    D2,D0
00002062  E588      3428          lsl.l     #2,D0
00002064  27BC 0000 3429          move.l    #1,0(A3,D0.L)
00002068  0001 0800 
                    3430   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000206C  2F03      3431          move.l    D3,-(A7)
0000206E  4879 0000 3432          pea       @m68kde~1_82.L
00002072  4A52      
00002074  4E92      3433          jsr       (A2)
00002076  504F      3434          addq.w    #8,A7
                    3435   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002078  2002      3436          move.l    D2,D0
0000207A  E588      3437          lsl.l     #2,D0
0000207C  41F9 0B00 3438          lea       _WatchPointAddress.L,A0
00002080  0182      
00002082  2183 0800 3439          move.l    D3,0(A0,D0.L)
                    3440   ; printf("\r\n") ;
00002086  4879 0000 3441          pea       @m68kde~1_1.L
0000208A  420C      
0000208C  4E92      3442          jsr       (A2)
0000208E  584F      3443          addq.w    #4,A7
                    3444   ; WatchPointDisplay() ;       // display the break points
00002090  4EB8 1B50 3445          jsr       _WatchPointDisplay
                    3446   ; return ;
00002094  6004      3447          bra.s     SetWatchPoint_11
                    3448   SetWatchPoint_14:
00002096  5282      3449          addq.l    #1,D2
00002098  608C      3450          bra       SetWatchPoint_9
                    3451   SetWatchPoint_11:
0000209A  4CDF 0C0C 3452          movem.l   (A7)+,D2/D3/A2/A3
0000209E  4E5E      3453          unlk      A6
000020A0  4E75      3454          rts
                    3455   ; }
                    3456   ; }
                    3457   ; }
                    3458   ; void HandleBreakPoint(void)
                    3459   ; {
                    3460   _HandleBreakPoint:
000020A2  4E56 FFFC 3461          link      A6,#-4
000020A6  48E7 0038 3462          movem.l   A2/A3/A4,-(A7)
000020AA  45F9 0B00 3463          lea       _i.L,A2
000020AE  00C4      
000020B0  47F9 0000 3464          lea       _printf.L,A3
000020B4  3836      
000020B6  49F9 0B00 3465          lea       _PC.L,A4
000020BA  0120      
                    3466   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3467   ; // now we have to put the break point back to run the instruction
                    3468   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3469   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000020BC  5594      3470          subq.l    #2,(A4)
                    3471   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000020BE  4879 0000 3472          pea       @m68kde~1_83.L
000020C2  4A78      
000020C4  4E93      3473          jsr       (A3)
000020C6  584F      3474          addq.w    #4,A7
                    3475   ; printf("\r\nSingle Step : [ON]") ;
000020C8  4879 0000 3476          pea       @m68kde~1_84.L
000020CC  4A8C      
000020CE  4E93      3477          jsr       (A3)
000020D0  584F      3478          addq.w    #4,A7
                    3479   ; printf("\r\nBreakPoints : [Enabled]") ;
000020D2  4879 0000 3480          pea       @m68kde~1_85.L
000020D6  4AA2      
000020D8  4E93      3481          jsr       (A3)
000020DA  584F      3482          addq.w    #4,A7
                    3483   ; // now clear the break point (put original instruction back)
                    3484   ; ProgramBreakPointAddress = PC ;
000020DC  2D54 FFFC 3485          move.l    (A4),-4(A6)
                    3486   ; for(i = 0; i < 8; i ++) {
000020E0  4292      3487          clr.l     (A2)
                    3488   HandleBreakPoint_1:
000020E2  2012      3489          move.l    (A2),D0
000020E4  0C80 0000 3490          cmp.l     #8,D0
000020E8  0008      
000020EA  6400 0056 3491          bhs       HandleBreakPoint_3
                    3492   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000020EE  2012      3493          move.l    (A2),D0
000020F0  E588      3494          lsl.l     #2,D0
000020F2  41F9 0B00 3495          lea       _BreakPointAddress.L,A0
000020F6  012E      
000020F8  2230 0800 3496          move.l    0(A0,D0.L),D1
000020FC  B294      3497          cmp.l     (A4),D1
000020FE  6600 003E 3498          bne       HandleBreakPoint_4
                    3499   ; BreakPointAddress[i] = 0 ;
00002102  2012      3500          move.l    (A2),D0
00002104  E588      3501          lsl.l     #2,D0
00002106  41F9 0B00 3502          lea       _BreakPointAddress.L,A0
0000210A  012E      
0000210C  42B0 0800 3503          clr.l     0(A0,D0.L)
                    3504   ; BreakPointSetOrCleared[i] = 0 ;
00002110  2012      3505          move.l    (A2),D0
00002112  E588      3506          lsl.l     #2,D0
00002114  41F9 0B00 3507          lea       _BreakPointSetOrCleared.L,A0
00002118  015E      
0000211A  42B0 0800 3508          clr.l     0(A0,D0.L)
                    3509   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000211E  2012      3510          move.l    (A2),D0
00002120  E388      3511          lsl.l     #1,D0
00002122  41F9 0B00 3512          lea       _BreakPointInstruction.L,A0
00002126  014E      
00002128  226E FFFC 3513          move.l    -4(A6),A1
0000212C  32B0 0800 3514          move.w    0(A0,D0.L),(A1)
                    3515   ; BreakPointInstruction[i] = 0 ;
00002130  2012      3516          move.l    (A2),D0
00002132  E388      3517          lsl.l     #1,D0
00002134  41F9 0B00 3518          lea       _BreakPointInstruction.L,A0
00002138  014E      
0000213A  4270 0800 3519          clr.w     0(A0,D0.L)
                    3520   HandleBreakPoint_4:
0000213E  5292      3521          addq.l    #1,(A2)
00002140  60A0      3522          bra       HandleBreakPoint_1
                    3523   HandleBreakPoint_3:
                    3524   ; }
                    3525   ; }
                    3526   ; DumpRegisters() ;
00002142  4EB8 12CE 3527          jsr       _DumpRegisters
                    3528   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002146  4879 0000 3529          pea       @m68kde~1_47.L
0000214A  461E      
0000214C  4E93      3530          jsr       (A3)
0000214E  584F      3531          addq.w    #4,A7
                    3532   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002150  4879 0000 3533          pea       @m68kde~1_86.L
00002154  4ABC      
00002156  4E93      3534          jsr       (A3)
00002158  584F      3535          addq.w    #4,A7
                    3536   ; menu() ;
0000215A  4EB9 0000 3537          jsr       _menu
0000215E  2366      
00002160  4CDF 1C00 3538          movem.l   (A7)+,A2/A3/A4
00002164  4E5E      3539          unlk      A6
00002166  4E75      3540          rts
                    3541   ; }
                    3542   ; void UnknownCommand()
                    3543   ; {
                    3544   _UnknownCommand:
                    3545   ; printf("\r\nUnknown Command.....\r\n") ;
00002168  4879 0000 3546          pea       @m68kde~1_87.L
0000216C  4AE4      
0000216E  4EB9 0000 3547          jsr       _printf
00002172  3836      
00002174  584F      3548          addq.w    #4,A7
                    3549   ; Help() ;
00002176  4EB9 0000 3550          jsr       _Help
0000217A  228C      
0000217C  4E75      3551          rts
                    3552   ; }
                    3553   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3554   ; void CallDebugMonitor(void)
                    3555   ; {
                    3556   _CallDebugMonitor:
                    3557   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000217E  4879 0000 3558          pea       @m68kde~1_88.L
00002182  4AFE      
00002184  4EB9 0000 3559          jsr       _printf
00002188  3836      
0000218A  584F      3560          addq.w    #4,A7
                    3561   ; menu();
0000218C  4EB9 0000 3562          jsr       _menu
00002190  2366      
00002192  4E75      3563          rts
                    3564   ; }
                    3565   ; void Breakpoint(void)
                    3566   ; {
                    3567   _Breakpoint:
00002194  2F02      3568          move.l    D2,-(A7)
                    3569   ; char c;
                    3570   ; c = toupper(_getch());
00002196  2F00      3571          move.l    D0,-(A7)
00002198  4EB8 0B68 3572          jsr       __getch
0000219C  2200      3573          move.l    D0,D1
0000219E  201F      3574          move.l    (A7)+,D0
000021A0  2F01      3575          move.l    D1,-(A7)
000021A2  4EB9 0000 3576          jsr       _toupper
000021A6  2F74      
000021A8  584F      3577          addq.w    #4,A7
000021AA  1400      3578          move.b    D0,D2
                    3579   ; if( c == (char)('D'))                                      // BreakPoint Display
000021AC  0C02 0044 3580          cmp.b     #68,D2
000021B0  6608      3581          bne.s     Breakpoint_1
                    3582   ; BreakPointDisplay() ;
000021B2  4EB8 1A7C 3583          jsr       _BreakPointDisplay
000021B6  6000 0054 3584          bra       Breakpoint_10
                    3585   Breakpoint_1:
                    3586   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000021BA  0C02 004B 3587          cmp.b     #75,D2
000021BE  6630      3588          bne.s     Breakpoint_3
                    3589   ; printf("\r\nKill All Break Points...(y/n)?") ;
000021C0  4879 0000 3590          pea       @m68kde~1_89.L
000021C4  4B1E      
000021C6  4EB9 0000 3591          jsr       _printf
000021CA  3836      
000021CC  584F      3592          addq.w    #4,A7
                    3593   ; c = toupper(_getch());
000021CE  2F00      3594          move.l    D0,-(A7)
000021D0  4EB8 0B68 3595          jsr       __getch
000021D4  2200      3596          move.l    D0,D1
000021D6  201F      3597          move.l    (A7)+,D0
000021D8  2F01      3598          move.l    D1,-(A7)
000021DA  4EB9 0000 3599          jsr       _toupper
000021DE  2F74      
000021E0  584F      3600          addq.w    #4,A7
000021E2  1400      3601          move.b    D0,D2
                    3602   ; if(c == (char)('Y'))
000021E4  0C02 0059 3603          cmp.b     #89,D2
000021E8  6604      3604          bne.s     Breakpoint_5
                    3605   ; KillAllBreakPoints() ;
000021EA  4EB8 1E14 3606          jsr       _KillAllBreakPoints
                    3607   Breakpoint_5:
000021EE  601C      3608          bra.s     Breakpoint_10
                    3609   Breakpoint_3:
                    3610   ; }
                    3611   ; else if(c == (char)('S')) {
000021F0  0C02 0053 3612          cmp.b     #83,D2
000021F4  6606      3613          bne.s     Breakpoint_7
                    3614   ; SetBreakPoint() ;
000021F6  4EB8 1EAC 3615          jsr       _SetBreakPoint
000021FA  6010      3616          bra.s     Breakpoint_10
                    3617   Breakpoint_7:
                    3618   ; }
                    3619   ; else if(c == (char)('C')) {
000021FC  0C02 0043 3620          cmp.b     #67,D2
00002200  6606      3621          bne.s     Breakpoint_9
                    3622   ; BreakPointClear() ;
00002202  4EB8 1BFC 3623          jsr       _BreakPointClear
00002206  6004      3624          bra.s     Breakpoint_10
                    3625   Breakpoint_9:
                    3626   ; }
                    3627   ; else
                    3628   ; UnknownCommand() ;
00002208  4EB8 2168 3629          jsr       _UnknownCommand
                    3630   Breakpoint_10:
0000220C  241F      3631          move.l    (A7)+,D2
0000220E  4E75      3632          rts
                    3633   ; }
                    3634   ; void Watchpoint(void)
                    3635   ; {
                    3636   _Watchpoint:
00002210  2F02      3637          move.l    D2,-(A7)
                    3638   ; char c;
                    3639   ; c = toupper(_getch());
00002212  2F00      3640          move.l    D0,-(A7)
00002214  4EB8 0B68 3641          jsr       __getch
00002218  2200      3642          move.l    D0,D1
0000221A  201F      3643          move.l    (A7)+,D0
0000221C  2F01      3644          move.l    D1,-(A7)
0000221E  4EB9 0000 3645          jsr       _toupper
00002222  2F74      
00002224  584F      3646          addq.w    #4,A7
00002226  1400      3647          move.b    D0,D2
                    3648   ; if( c == (char)('D'))                                      // WatchPoint Display
00002228  0C02 0044 3649          cmp.b     #68,D2
0000222C  6608      3650          bne.s     Watchpoint_1
                    3651   ; WatchPointDisplay() ;
0000222E  4EB8 1B50 3652          jsr       _WatchPointDisplay
00002232  6000 0054 3653          bra       Watchpoint_10
                    3654   Watchpoint_1:
                    3655   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002236  0C02 004B 3656          cmp.b     #75,D2
0000223A  6630      3657          bne.s     Watchpoint_3
                    3658   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000223C  4879 0000 3659          pea       @m68kde~1_90.L
00002240  4B40      
00002242  4EB9 0000 3660          jsr       _printf
00002246  3836      
00002248  584F      3661          addq.w    #4,A7
                    3662   ; c = toupper(_getch());
0000224A  2F00      3663          move.l    D0,-(A7)
0000224C  4EB8 0B68 3664          jsr       __getch
00002250  2200      3665          move.l    D0,D1
00002252  201F      3666          move.l    (A7)+,D0
00002254  2F01      3667          move.l    D1,-(A7)
00002256  4EB9 0000 3668          jsr       _toupper
0000225A  2F74      
0000225C  584F      3669          addq.w    #4,A7
0000225E  1400      3670          move.b    D0,D2
                    3671   ; if(c == (char)('Y'))
00002260  0C02 0059 3672          cmp.b     #89,D2
00002264  6604      3673          bne.s     Watchpoint_5
                    3674   ; KillAllWatchPoints() ;
00002266  4EB8 1E7C 3675          jsr       _KillAllWatchPoints
                    3676   Watchpoint_5:
0000226A  601C      3677          bra.s     Watchpoint_10
                    3678   Watchpoint_3:
                    3679   ; }
                    3680   ; else if(c == (char)('S')) {
0000226C  0C02 0053 3681          cmp.b     #83,D2
00002270  6606      3682          bne.s     Watchpoint_7
                    3683   ; SetWatchPoint() ;
00002272  4EB8 1FCC 3684          jsr       _SetWatchPoint
00002276  6010      3685          bra.s     Watchpoint_10
                    3686   Watchpoint_7:
                    3687   ; }
                    3688   ; else if(c == (char)('C')) {
00002278  0C02 0043 3689          cmp.b     #67,D2
0000227C  6606      3690          bne.s     Watchpoint_9
                    3691   ; WatchPointClear() ;
0000227E  4EB8 1CD6 3692          jsr       _WatchPointClear
00002282  6004      3693          bra.s     Watchpoint_10
                    3694   Watchpoint_9:
                    3695   ; }
                    3696   ; else
                    3697   ; UnknownCommand() ;
00002284  4EB8 2168 3698          jsr       _UnknownCommand
                    3699   Watchpoint_10:
00002288  241F      3700          move.l    (A7)+,D2
0000228A  4E75      3701          rts
                    3702   ; }
                    3703   ; void Help(void)
                    3704   ; {
                    3705   _Help:
0000228C  48E7 2020 3706          movem.l   D2/A2,-(A7)
00002290  45F9 0000 3707          lea       _printf.L,A2
00002294  3836      
                    3708   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002296  41F9 0000 3709          lea       @m68kde~1_91.L,A0
0000229A  4B62      
0000229C  2408      3710          move.l    A0,D2
                    3711   ; printf(banner) ;
0000229E  2F02      3712          move.l    D2,-(A7)
000022A0  4E92      3713          jsr       (A2)
000022A2  584F      3714          addq.w    #4,A7
                    3715   ; printf("\r\n  Debugger Command Summary") ;
000022A4  4879 0000 3716          pea       @m68kde~1_92.L
000022A8  4BA6      
000022AA  4E92      3717          jsr       (A2)
000022AC  584F      3718          addq.w    #4,A7
                    3719   ; printf(banner) ;
000022AE  2F02      3720          move.l    D2,-(A7)
000022B0  4E92      3721          jsr       (A2)
000022B2  584F      3722          addq.w    #4,A7
                    3723   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000022B4  4879 0000 3724          pea       @m68kde~1_93.L
000022B8  4BC4      
000022BA  4E92      3725          jsr       (A2)
000022BC  584F      3726          addq.w    #4,A7
                    3727   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000022BE  4879 0000 3728          pea       @m68kde~1_94.L
000022C2  4C08      
000022C4  4E92      3729          jsr       (A2)
000022C6  584F      3730          addq.w    #4,A7
                    3731   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000022C8  4879 0000 3732          pea       @m68kde~1_95.L
000022CC  4C40      
000022CE  4E92      3733          jsr       (A2)
000022D0  584F      3734          addq.w    #4,A7
                    3735   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000022D2  4879 0000 3736          pea       @m68kde~1_96.L
000022D6  4C7A      
000022D8  4E92      3737          jsr       (A2)
000022DA  584F      3738          addq.w    #4,A7
                    3739   ; printf("\r\n  E            - Enter String into Memory") ;
000022DC  4879 0000 3740          pea       @m68kde~1_97.L
000022E0  4CAC      
000022E2  4E92      3741          jsr       (A2)
000022E4  584F      3742          addq.w    #4,A7
                    3743   ; printf("\r\n  F            - Fill Memory with Data") ;
000022E6  4879 0000 3744          pea       @m68kde~1_98.L
000022EA  4CD8      
000022EC  4E92      3745          jsr       (A2)
000022EE  584F      3746          addq.w    #4,A7
                    3747   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000022F0  2F39 0B00 3748          move.l    _PC.L,-(A7)
000022F4  0120      
000022F6  4879 0000 3749          pea       @m68kde~1_99.L
000022FA  4D02      
000022FC  4E92      3750          jsr       (A2)
000022FE  504F      3751          addq.w    #8,A7
                    3752   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002300  4879 0000 3753          pea       @m68kde~1_100.L
00002304  4D3C      
00002306  4E92      3754          jsr       (A2)
00002308  584F      3755          addq.w    #4,A7
                    3756   ; printf("\r\n  M            - Memory Examine and Change");
0000230A  4879 0000 3757          pea       @m68kde~1_101.L
0000230E  4D74      
00002310  4E92      3758          jsr       (A2)
00002312  584F      3759          addq.w    #4,A7
                    3760   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002314  4879 0000 3761          pea       @m68kde~1_102.L
00002318  4DA2      
0000231A  4E92      3762          jsr       (A2)
0000231C  584F      3763          addq.w    #4,A7
                    3764   ; printf("\r\n  R            - Display 68000 Registers") ;
0000231E  4879 0000 3765          pea       @m68kde~1_103.L
00002322  4DDC      
00002324  4E92      3766          jsr       (A2)
00002326  584F      3767          addq.w    #4,A7
                    3768   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002328  4879 0000 3769          pea       @m68kde~1_104.L
0000232C  4E08      
0000232E  4E92      3770          jsr       (A2)
00002330  584F      3771          addq.w    #4,A7
                    3772   ; printf("\r\n  TM           - Test Memory") ;
00002332  4879 0000 3773          pea       @m68kde~1_105.L
00002336  4E3A      
00002338  4E92      3774          jsr       (A2)
0000233A  584F      3775          addq.w    #4,A7
                    3776   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000233C  4879 0000 3777          pea       @m68kde~1_106.L
00002340  4E5A      
00002342  4E92      3778          jsr       (A2)
00002344  584F      3779          addq.w    #4,A7
                    3780   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002346  4879 0000 3781          pea       @m68kde~1_107.L
0000234A  4E82      
0000234C  4E92      3782          jsr       (A2)
0000234E  584F      3783          addq.w    #4,A7
                    3784   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002350  4879 0000 3785          pea       @m68kde~1_108.L
00002354  4EB8      
00002356  4E92      3786          jsr       (A2)
00002358  584F      3787          addq.w    #4,A7
                    3788   ; printf(banner) ;
0000235A  2F02      3789          move.l    D2,-(A7)
0000235C  4E92      3790          jsr       (A2)
0000235E  584F      3791          addq.w    #4,A7
00002360  4CDF 0404 3792          movem.l   (A7)+,D2/A2
00002364  4E75      3793          rts
                    3794   ; }
                    3795   ; void menu(void)
                    3796   ; {
                    3797   _menu:
00002366  48E7 303C 3798          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000236A  45F9 0000 3799          lea       _printf.L,A2
0000236E  3836      
00002370  47F9 0B00 3800          lea       _Trace.L,A3
00002374  00D8      
00002376  49F9 0B00 3801          lea       _x.L,A4
0000237A  00C8      
0000237C  4BF9 0B00 3802          lea       _SR.L,A5
00002380  012C      
                    3803   ; char c,c1 ;
                    3804   ; while(1)    {
                    3805   menu_1:
                    3806   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002382  4EB8 0BA6 3807          jsr       _FlushKeyboard
                    3808   ; printf("\r\n#") ;
00002386  4879 0000 3809          pea       @m68kde~1_109.L
0000238A  4EF0      
0000238C  4E92      3810          jsr       (A2)
0000238E  584F      3811          addq.w    #4,A7
                    3812   ; c = toupper(_getch());
00002390  2F00      3813          move.l    D0,-(A7)
00002392  4EB8 0B68 3814          jsr       __getch
00002396  2200      3815          move.l    D0,D1
00002398  201F      3816          move.l    (A7)+,D0
0000239A  2F01      3817          move.l    D1,-(A7)
0000239C  4EB9 0000 3818          jsr       _toupper
000023A0  2F74      
000023A2  584F      3819          addq.w    #4,A7
000023A4  1400      3820          move.b    D0,D2
                    3821   ; if( c == (char)('L'))                  // load s record file
000023A6  0C02 004C 3822          cmp.b     #76,D2
000023AA  6608      3823          bne.s     menu_4
                    3824   ; Load_SRecordFile() ;
000023AC  4EB8 0E36 3825          jsr       _Load_SRecordFile
000023B0  6000 021E 3826          bra       menu_46
                    3827   menu_4:
                    3828   ; else if( c == (char)('D'))             // dump memory
000023B4  0C02 0044 3829          cmp.b     #68,D2
000023B8  6608      3830          bne.s     menu_6
                    3831   ; DumpMemory() ;
000023BA  4EB8 0CCC 3832          jsr       _DumpMemory
000023BE  6000 0210 3833          bra       menu_46
                    3834   menu_6:
                    3835   ; else if( c == (char)('E'))             // Enter String into memory
000023C2  0C02 0045 3836          cmp.b     #69,D2
000023C6  660A      3837          bne.s     menu_8
                    3838   ; EnterString() ;
000023C8  4EB9 0000 3839          jsr       _EnterString
000023CC  2718      
000023CE  6000 0200 3840          bra       menu_46
                    3841   menu_8:
                    3842   ; else if( c == (char)('F'))             // fill memory
000023D2  0C02 0046 3843          cmp.b     #70,D2
000023D6  6608      3844          bne.s     menu_10
                    3845   ; FillMemory() ;
000023D8  4EB8 0DBC 3846          jsr       _FillMemory
000023DC  6000 01F2 3847          bra       menu_46
                    3848   menu_10:
                    3849   ; else if( c == (char)('G'))  {           // go user program
000023E0  0C02 0047 3850          cmp.b     #71,D2
000023E4  6626      3851          bne.s     menu_12
                    3852   ; printf("\r\nProgram Running.....") ;
000023E6  4879 0000 3853          pea       @m68kde~1_110.L
000023EA  4EF4      
000023EC  4E92      3854          jsr       (A2)
000023EE  584F      3855          addq.w    #4,A7
                    3856   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023F0  4879 0000 3857          pea       @m68kde~1_111.L
000023F4  4F0C      
000023F6  4E92      3858          jsr       (A2)
000023F8  584F      3859          addq.w    #4,A7
                    3860   ; GoFlag = 1 ;
000023FA  23FC 0000 3861          move.l    #1,_GoFlag.L
000023FE  0001 0B00 
00002402  00DC      
                    3862   ; go() ;
00002404  4EB8 08B8 3863          jsr       _go
00002408  6000 01C6 3864          bra       menu_46
                    3865   menu_12:
                    3866   ; }
                    3867   ; else if( c == (char)('M'))           // memory examine and modify
0000240C  0C02 004D 3868          cmp.b     #77,D2
00002410  6608      3869          bne.s     menu_14
                    3870   ; MemoryChange() ;
00002412  4EB8 0FC4 3871          jsr       _MemoryChange
00002416  6000 01B8 3872          bra       menu_46
                    3873   menu_14:
                    3874   ; else if( c == (char)('P'))            // Program Flash Chip
0000241A  0C02 0050 3875          cmp.b     #80,D2
0000241E  6608      3876          bne.s     menu_16
                    3877   ; ProgramFlashChip() ;
00002420  4EB8 12AC 3878          jsr       _ProgramFlashChip
00002424  6000 01AA 3879          bra       menu_46
                    3880   menu_16:
                    3881   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002428  0C02 0043 3882          cmp.b     #67,D2
0000242C  6608      3883          bne.s     menu_18
                    3884   ; LoadFromFlashChip();
0000242E  4EB8 12BE 3885          jsr       _LoadFromFlashChip
00002432  6000 019C 3886          bra       menu_46
                    3887   menu_18:
                    3888   ; else if( c == (char)('R'))             // dump registers
00002436  0C02 0052 3889          cmp.b     #82,D2
0000243A  6608      3890          bne.s     menu_20
                    3891   ; DumpRegisters() ;
0000243C  4EB8 12CE 3892          jsr       _DumpRegisters
00002440  6000 018E 3893          bra       menu_46
                    3894   menu_20:
                    3895   ; else if( c == (char)('.'))           // change registers
00002444  0C02 002E 3896          cmp.b     #46,D2
00002448  6608      3897          bne.s     menu_22
                    3898   ; ChangeRegisters() ;
0000244A  4EB8 17C0 3899          jsr       _ChangeRegisters
0000244E  6000 0180 3900          bra       menu_46
                    3901   menu_22:
                    3902   ; else if( c == (char)('B'))              // breakpoint command
00002452  0C02 0042 3903          cmp.b     #66,D2
00002456  6608      3904          bne.s     menu_24
                    3905   ; Breakpoint() ;
00002458  4EB8 2194 3906          jsr       _Breakpoint
0000245C  6000 0172 3907          bra       menu_46
                    3908   menu_24:
                    3909   ; else if( c == (char)('T'))  {          // Test command
00002460  0C02 0054 3910          cmp.b     #84,D2
00002464  6600 0046 3911          bne       menu_26
                    3912   ; c1 = toupper(_getch()) ;
00002468  2F00      3913          move.l    D0,-(A7)
0000246A  4EB8 0B68 3914          jsr       __getch
0000246E  2200      3915          move.l    D0,D1
00002470  201F      3916          move.l    (A7)+,D0
00002472  2F01      3917          move.l    D1,-(A7)
00002474  4EB9 0000 3918          jsr       _toupper
00002478  2F74      
0000247A  584F      3919          addq.w    #4,A7
0000247C  1600      3920          move.b    D0,D3
                    3921   ; if(c1 == (char)('M'))                    // memory test
0000247E  0C03 004D 3922          cmp.b     #77,D3
00002482  6608      3923          bne.s     menu_28
                    3924   ; MemoryTest() ;
00002484  4EB9 0000 3925          jsr       _MemoryTest
00002488  2790      
0000248A  601C      3926          bra.s     menu_33
                    3927   menu_28:
                    3928   ; else if( c1 == (char)('S'))              // Switch Test command
0000248C  0C03 0053 3929          cmp.b     #83,D3
00002490  6606      3930          bne.s     menu_30
                    3931   ; SwitchTest() ;
00002492  4EB8 0AA4 3932          jsr       _SwitchTest
00002496  6010      3933          bra.s     menu_33
                    3934   menu_30:
                    3935   ; else if( c1 == (char)('D'))              // display Test command
00002498  0C03 0044 3936          cmp.b     #68,D3
0000249C  6606      3937          bne.s     menu_32
                    3938   ; TestLEDS() ;
0000249E  4EB8 0A50 3939          jsr       _TestLEDS
000024A2  6004      3940          bra.s     menu_33
                    3941   menu_32:
                    3942   ; else
                    3943   ; UnknownCommand() ;
000024A4  4EB8 2168 3944          jsr       _UnknownCommand
                    3945   menu_33:
000024A8  6000 0126 3946          bra       menu_46
                    3947   menu_26:
                    3948   ; }
                    3949   ; else if( c == (char)(' ')) {             // Next instruction command
000024AC  0C02 0020 3950          cmp.b     #32,D2
000024B0  6636      3951          bne.s     menu_34
                    3952   ; DisableBreakPoints() ;
000024B2  4EB8 1D78 3953          jsr       _DisableBreakPoints
                    3954   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000024B6  2013      3955          move.l    (A3),D0
000024B8  0C80 0000 3956          cmp.l     #1,D0
000024BC  0001      
000024BE  661A      3957          bne.s     menu_36
000024C0  2039 0B00 3958          move.l    _GoFlag.L,D0
000024C4  00DC      
000024C6  0C80 0000 3959          cmp.l     #1,D0
000024CA  0001      
000024CC  660C      3960          bne.s     menu_36
                    3961   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000024CE  13FC 0001 3962          move.b    #1,4194314
000024D2  0040 000A 
                    3963   ; return ;
000024D6  6000 00FC 3964          bra       menu_38
                    3965   menu_36:
                    3966   ; }
                    3967   ; else
                    3968   ; printf("\r\nError: Press 'G' first to start program") ;
000024DA  4879 0000 3969          pea       @m68kde~1_112.L
000024DE  4F3A      
000024E0  4E92      3970          jsr       (A2)
000024E2  584F      3971          addq.w    #4,A7
000024E4  6000 00EA 3972          bra       menu_46
                    3973   menu_34:
                    3974   ; }
                    3975   ; else if( c == (char)('S')) {             // single step
000024E8  0C02 0053 3976          cmp.b     #83,D2
000024EC  6600 008C 3977          bne       menu_39
                    3978   ; if(Trace == 0) {
000024F0  2013      3979          move.l    (A3),D0
000024F2  6600 0050 3980          bne       menu_41
                    3981   ; DisableBreakPoints() ;
000024F6  4EB8 1D78 3982          jsr       _DisableBreakPoints
                    3983   ; printf("\r\nSingle Step  :[ON]") ;
000024FA  4879 0000 3984          pea       @m68kde~1_113.L
000024FE  4F64      
00002500  4E92      3985          jsr       (A2)
00002502  584F      3986          addq.w    #4,A7
                    3987   ; printf("\r\nBreak Points :[Disabled]") ;
00002504  4879 0000 3988          pea       @m68kde~1_46.L
00002508  4602      
0000250A  4E92      3989          jsr       (A2)
0000250C  584F      3990          addq.w    #4,A7
                    3991   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
0000250E  0055 8000 3992          or.w      #32768,(A5)
                    3993   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002512  2F39 0B00 3994          move.l    _PC.L,-(A7)
00002516  0120      
00002518  4879 0000 3995          pea       @m68kde~1_114.L
0000251C  4F7A      
0000251E  4E92      3996          jsr       (A2)
00002520  504F      3997          addq.w    #8,A7
                    3998   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002522  4879 0000 3999          pea       @m68kde~1_115.L
00002526  4FAE      
00002528  4E92      4000          jsr       (A2)
0000252A  584F      4001          addq.w    #4,A7
                    4002   ; DumpRegisters() ;
0000252C  4EB8 12CE 4003          jsr       _DumpRegisters
                    4004   ; Trace = 1;
00002530  26BC 0000 4005          move.l    #1,(A3)
00002534  0001      
                    4006   ; TraceException = 1;
00002536  13FC 0001 4007          move.b    #1,4194314
0000253A  0040 000A 
                    4008   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000253E  28B8 0074 4009          move.l    116,(A4)
00002542  6032      4010          bra.s     menu_42
                    4011   menu_41:
                    4012   ; }
                    4013   ; else {
                    4014   ; Trace = 0 ;
00002544  4293      4015          clr.l     (A3)
                    4016   ; TraceException = 0 ;
00002546  4239 0040 4017          clr.b     4194314
0000254A  000A      
                    4018   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000254C  28B8 0074 4019          move.l    116,(A4)
                    4020   ; EnableBreakPoints() ;
00002550  4EB8 1DCC 4021          jsr       _EnableBreakPoints
                    4022   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002554  0255 7FFF 4023          and.w     #32767,(A5)
                    4024   ; printf("\r\nSingle Step : [OFF]") ;
00002558  4879 0000 4025          pea       @m68kde~1_116.L
0000255C  4FD2      
0000255E  4E92      4026          jsr       (A2)
00002560  584F      4027          addq.w    #4,A7
                    4028   ; printf("\r\nBreak Points :[Enabled]") ;
00002562  4879 0000 4029          pea       @m68kde~1_117.L
00002566  4FE8      
00002568  4E92      4030          jsr       (A2)
0000256A  584F      4031          addq.w    #4,A7
                    4032   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
0000256C  4879 0000 4033          pea       @m68kde~1_118.L
00002570  5002      
00002572  4E92      4034          jsr       (A2)
00002574  584F      4035          addq.w    #4,A7
                    4036   menu_42:
00002576  6000 0058 4037          bra       menu_46
                    4038   menu_39:
                    4039   ; }
                    4040   ; }
                    4041   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
0000257A  0C02 001B 4042          cmp.b     #27,D2
0000257E  6600 0040 4043          bne       menu_43
                    4044   ; Trace = 0;
00002582  4293      4045          clr.l     (A3)
                    4046   ; TraceException = 0;
00002584  4239 0040 4047          clr.b     4194314
00002588  000A      
                    4048   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
0000258A  28B8 0074 4049          move.l    116,(A4)
                    4050   ; EnableBreakPoints() ;
0000258E  4EB8 1DCC 4051          jsr       _EnableBreakPoints
                    4052   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002592  0255 7FFF 4053          and.w     #32767,(A5)
                    4054   ; printf("\r\nSingle Step  :[OFF]") ;
00002596  4879 0000 4055          pea       @m68kde~1_119.L
0000259A  502C      
0000259C  4E92      4056          jsr       (A2)
0000259E  584F      4057          addq.w    #4,A7
                    4058   ; printf("\r\nBreak Points :[Enabled]");
000025A0  4879 0000 4059          pea       @m68kde~1_117.L
000025A4  4FE8      
000025A6  4E92      4060          jsr       (A2)
000025A8  584F      4061          addq.w    #4,A7
                    4062   ; printf("\r\nProgram Running.....") ;
000025AA  4879 0000 4063          pea       @m68kde~1_110.L
000025AE  4EF4      
000025B0  4E92      4064          jsr       (A2)
000025B2  584F      4065          addq.w    #4,A7
                    4066   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000025B4  4879 0000 4067          pea       @m68kde~1_111.L
000025B8  4F0C      
000025BA  4E92      4068          jsr       (A2)
000025BC  584F      4069          addq.w    #4,A7
                    4070   ; return ;
000025BE  6014      4071          bra.s     menu_38
                    4072   menu_43:
                    4073   ; }
                    4074   ; else if( c == (char)('W'))              // Watchpoint command
000025C0  0C02 0057 4075          cmp.b     #87,D2
000025C4  6606      4076          bne.s     menu_45
                    4077   ; Watchpoint() ;
000025C6  4EB8 2210 4078          jsr       _Watchpoint
000025CA  6004      4079          bra.s     menu_46
                    4080   menu_45:
                    4081   ; else
                    4082   ; UnknownCommand() ;
000025CC  4EB8 2168 4083          jsr       _UnknownCommand
                    4084   menu_46:
000025D0  6000 FDB0 4085          bra       menu_1
                    4086   menu_38:
000025D4  4CDF 3C0C 4087          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000025D8  4E75      4088          rts
                    4089   ; }
                    4090   ; }
                    4091   ; void PrintErrorMessageandAbort(char *string) {
                    4092   _PrintErrorMessageandAbort:
000025DA  4E56 0000 4093          link      A6,#0
                    4094   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000025DE  4879 0000 4095          pea       @m68kde~1_120.L
000025E2  5042      
000025E4  4EB9 0000 4096          jsr       _printf
000025E8  3836      
000025EA  584F      4097          addq.w    #4,A7
                    4098   ; printf("%s\r\n", string) ;
000025EC  2F2E 0008 4099          move.l    8(A6),-(A7)
000025F0  4879 0000 4100          pea       @m68kde~1_121.L
000025F4  505E      
000025F6  4EB9 0000 4101          jsr       _printf
000025FA  3836      
000025FC  504F      4102          addq.w    #8,A7
                    4103   ; menu() ;
000025FE  4EB8 2366 4104          jsr       _menu
00002602  4E5E      4105          unlk      A6
00002604  4E75      4106          rts
                    4107   ; }
                    4108   ; void IRQMessage(int level) {
                    4109   _IRQMessage:
00002606  4E56 0000 4110          link      A6,#0
                    4111   ; printf("\r\n\r\nProgram ABORT !!!!!");
0000260A  4879 0000 4112          pea       @m68kde~1_122.L
0000260E  5064      
00002610  4EB9 0000 4113          jsr       _printf
00002614  3836      
00002616  584F      4114          addq.w    #4,A7
                    4115   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002618  2F2E 0008 4116          move.l    8(A6),-(A7)
0000261C  4879 0000 4117          pea       @m68kde~1_123.L
00002620  507C      
00002622  4EB9 0000 4118          jsr       _printf
00002626  3836      
00002628  504F      4119          addq.w    #8,A7
                    4120   ; menu() ;
0000262A  4EB8 2366 4121          jsr       _menu
0000262E  4E5E      4122          unlk      A6
00002630  4E75      4123          rts
                    4124   ; }
                    4125   ; void UnhandledIRQ1(void) {
                    4126   _UnhandledIRQ1:
                    4127   ; IRQMessage(1);
00002632  4878 0001 4128          pea       1
00002636  4EB8 2606 4129          jsr       _IRQMessage
0000263A  584F      4130          addq.w    #4,A7
0000263C  4E75      4131          rts
                    4132   ; }
                    4133   ; void UnhandledIRQ2(void) {
                    4134   _UnhandledIRQ2:
                    4135   ; IRQMessage(2);
0000263E  4878 0002 4136          pea       2
00002642  4EB8 2606 4137          jsr       _IRQMessage
00002646  584F      4138          addq.w    #4,A7
00002648  4E75      4139          rts
                    4140   ; }
                    4141   ; void UnhandledIRQ3(void){
                    4142   _UnhandledIRQ3:
                    4143   ; IRQMessage(3);
0000264A  4878 0003 4144          pea       3
0000264E  4EB8 2606 4145          jsr       _IRQMessage
00002652  584F      4146          addq.w    #4,A7
00002654  4E75      4147          rts
                    4148   ; }
                    4149   ; void UnhandledIRQ4(void) {
                    4150   _UnhandledIRQ4:
                    4151   ; IRQMessage(4);
00002656  4878 0004 4152          pea       4
0000265A  4EB8 2606 4153          jsr       _IRQMessage
0000265E  584F      4154          addq.w    #4,A7
00002660  4E75      4155          rts
                    4156   ; }
                    4157   ; void UnhandledIRQ5(void) {
                    4158   _UnhandledIRQ5:
                    4159   ; IRQMessage(5);
00002662  4878 0005 4160          pea       5
00002666  4EB8 2606 4161          jsr       _IRQMessage
0000266A  584F      4162          addq.w    #4,A7
0000266C  4E75      4163          rts
                    4164   ; }
                    4165   ; void UnhandledIRQ6(void) {
                    4166   _UnhandledIRQ6:
                    4167   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
0000266E  4879 0000 4168          pea       @m68kde~1_124.L
00002672  50A0      
00002674  4EB8 25DA 4169          jsr       _PrintErrorMessageandAbort
00002678  584F      4170          addq.w    #4,A7
                    4171   ; menu() ;
0000267A  4EB8 2366 4172          jsr       _menu
0000267E  4E75      4173          rts
                    4174   ; }
                    4175   ; void UnhandledIRQ7(void) {
                    4176   _UnhandledIRQ7:
                    4177   ; IRQMessage(7);
00002680  4878 0007 4178          pea       7
00002684  4EB8 2606 4179          jsr       _IRQMessage
00002688  584F      4180          addq.w    #4,A7
0000268A  4E75      4181          rts
                    4182   ; }
                    4183   ; void UnhandledTrap(void) {
                    4184   _UnhandledTrap:
                    4185   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
0000268C  4879 0000 4186          pea       @m68kde~1_125.L
00002690  50E0      
00002692  4EB8 25DA 4187          jsr       _PrintErrorMessageandAbort
00002696  584F      4188          addq.w    #4,A7
00002698  4E75      4189          rts
                    4190   ; }
                    4191   ; void BusError() {
                    4192   _BusError:
                    4193   ; PrintErrorMessageandAbort("BUS Error!") ;
0000269A  4879 0000 4194          pea       @m68kde~1_126.L
0000269E  50F6      
000026A0  4EB8 25DA 4195          jsr       _PrintErrorMessageandAbort
000026A4  584F      4196          addq.w    #4,A7
000026A6  4E75      4197          rts
                    4198   ; }
                    4199   ; void AddressError() {
                    4200   _AddressError:
                    4201   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000026A8  4879 0000 4202          pea       @m68kde~1_127.L
000026AC  5102      
000026AE  4EB8 25DA 4203          jsr       _PrintErrorMessageandAbort
000026B2  584F      4204          addq.w    #4,A7
000026B4  4E75      4205          rts
                    4206   ; }
                    4207   ; void IllegalInstruction() {
                    4208   _IllegalInstruction:
                    4209   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000026B6  4879 0000 4210          pea       @m68kde~1_128.L
000026BA  5112      
000026BC  4EB8 25DA 4211          jsr       _PrintErrorMessageandAbort
000026C0  584F      4212          addq.w    #4,A7
000026C2  4E75      4213          rts
                    4214   ; }
                    4215   ; void Dividebyzero() {
                    4216   _Dividebyzero:
                    4217   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000026C4  4879 0000 4218          pea       @m68kde~1_129.L
000026C8  5126      
000026CA  4EB8 25DA 4219          jsr       _PrintErrorMessageandAbort
000026CE  584F      4220          addq.w    #4,A7
000026D0  4E75      4221          rts
                    4222   ; }
                    4223   ; void Check() {
                    4224   _Check:
                    4225   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000026D2  4879 0000 4226          pea       @m68kde~1_130.L
000026D6  5136      
000026D8  4EB8 25DA 4227          jsr       _PrintErrorMessageandAbort
000026DC  584F      4228          addq.w    #4,A7
000026DE  4E75      4229          rts
                    4230   ; }
                    4231   ; void Trapv() {
                    4232   _Trapv:
                    4233   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000026E0  4879 0000 4234          pea       @m68kde~1_131.L
000026E4  5148      
000026E6  4EB8 25DA 4235          jsr       _PrintErrorMessageandAbort
000026EA  584F      4236          addq.w    #4,A7
000026EC  4E75      4237          rts
                    4238   ; }
                    4239   ; void PrivError() {
                    4240   _PrivError:
                    4241   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000026EE  4879 0000 4242          pea       @m68kde~1_132.L
000026F2  515A      
000026F4  4EB8 25DA 4243          jsr       _PrintErrorMessageandAbort
000026F8  584F      4244          addq.w    #4,A7
000026FA  4E75      4245          rts
                    4246   ; }
                    4247   ; void UnitIRQ() {
                    4248   _UnitIRQ:
                    4249   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
000026FC  4879 0000 4250          pea       @m68kde~1_133.L
00002700  516E      
00002702  4EB8 25DA 4251          jsr       _PrintErrorMessageandAbort
00002706  584F      4252          addq.w    #4,A7
00002708  4E75      4253          rts
                    4254   ; }
                    4255   ; void Spurious() {
                    4256   _Spurious:
                    4257   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
0000270A  4879 0000 4258          pea       @m68kde~1_134.L
0000270E  5180      
00002710  4EB8 25DA 4259          jsr       _PrintErrorMessageandAbort
00002714  584F      4260          addq.w    #4,A7
00002716  4E75      4261          rts
                    4262   ; }
                    4263   ; void EnterString(void)
                    4264   ; {
                    4265   _EnterString:
00002718  4E56 FFFC 4266          link      A6,#-4
0000271C  2F02      4267          move.l    D2,-(A7)
                    4268   ; unsigned char *Start;
                    4269   ; unsigned char c;
                    4270   ; printf("\r\nStart Address in Memory: ") ;
0000271E  4879 0000 4271          pea       @m68kde~1_135.L
00002722  518E      
00002724  4EB9 0000 4272          jsr       _printf
00002728  3836      
0000272A  584F      4273          addq.w    #4,A7
                    4274   ; Start = Get8HexDigits(0) ;
0000272C  42A7      4275          clr.l     -(A7)
0000272E  4EB8 0CA4 4276          jsr       _Get8HexDigits
00002732  584F      4277          addq.w    #4,A7
00002734  2400      4278          move.l    D0,D2
                    4279   ; printf("\r\nEnter String (ESC to end) :") ;
00002736  4879 0000 4280          pea       @m68kde~1_136.L
0000273A  51AA      
0000273C  4EB9 0000 4281          jsr       _printf
00002740  3836      
00002742  584F      4282          addq.w    #4,A7
                    4283   ; while((c = getchar()) != 0x1b)
                    4284   EnterString_1:
00002744  4EB9 0000 4285          jsr       _getch
00002748  2EAA      
0000274A  1D40 FFFF 4286          move.b    D0,-1(A6)
0000274E  0C00 001B 4287          cmp.b     #27,D0
00002752  670A      4288          beq.s     EnterString_3
                    4289   ; *Start++ = c ;
00002754  2042      4290          move.l    D2,A0
00002756  5282      4291          addq.l    #1,D2
00002758  10AE FFFF 4292          move.b    -1(A6),(A0)
0000275C  60E6      4293          bra       EnterString_1
                    4294   EnterString_3:
                    4295   ; *Start = 0x00;  // terminate with a null
0000275E  2042      4296          move.l    D2,A0
00002760  4210      4297          clr.b     (A0)
00002762  241F      4298          move.l    (A7)+,D2
00002764  4E5E      4299          unlk      A6
00002766  4E75      4300          rts
                    4301   ; }
                    4302   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4303   ; void clearInputBuffer() {
                    4304   _clearInputBuffer:
00002768  4E56 FFFC 4305          link      A6,#-4
                    4306   ; int c;
                    4307   ; while ((c = getchar()) != '\n' && c != EOF);
                    4308   clearInputBuffer_1:
0000276C  4EB9 0000 4309          jsr       _getch
00002770  2EAA      
00002772  2D40 FFFC 4310          move.l    D0,-4(A6)
00002776  0C80 0000 4311          cmp.l     #10,D0
0000277A  000A      
0000277C  670E      4312          beq.s     clearInputBuffer_3
0000277E  202E FFFC 4313          move.l    -4(A6),D0
00002782  0C80 FFFF 4314          cmp.l     #-1,D0
00002786  FFFF      
00002788  6702      4315          beq.s     clearInputBuffer_3
0000278A  60E0      4316          bra       clearInputBuffer_1
                    4317   clearInputBuffer_3:
0000278C  4E5E      4318          unlk      A6
0000278E  4E75      4319          rts
                    4320   ; }
                    4321   ; void MemoryTest(void)
                    4322   ; {
                    4323   _MemoryTest:
00002790  4E56 FF40 4324          link      A6,#-192
00002794  48E7 3F3C 4325          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002798  45F9 0000 4326          lea       _printf.L,A2
0000279C  3836      
0000279E  4BF8 0B68 4327          lea       __getch.L,A5
                    4328   ; unsigned int *RamPtr, counter1=1 ;
000027A2  2D7C 0000 4329          move.l    #1,-188(A6)
000027A6  0001 FF44 
                    4330   ; register unsigned int i ;
                    4331   ; unsigned int Start, End ;
                    4332   ; char c, text[150];
                    4333   ; unsigned int* addressPointer;
                    4334   ; unsigned int startAddress = NULL;
000027AA  42AE FFF0 4335          clr.l     -16(A6)
                    4336   ; unsigned int endAddress = NULL;
000027AE  42AE FFF4 4337          clr.l     -12(A6)
                    4338   ; unsigned int byteLength;
                    4339   ; unsigned int dataSize = 0;
000027B2  4285      4340          clr.l     D5
                    4341   ; unsigned int dataPattern = 0;
000027B4  4283      4342          clr.l     D3
                    4343   ; unsigned int currAddress;
                    4344   ; unsigned int addrCount;
                    4345   ; unsigned int intBuffer = NULL;
000027B6  7E00      4346          moveq     #0,D7
                    4347   ; unsigned char *startAddressPtr = NULL;
000027B8  4282      4348          clr.l     D2
                    4349   ; unsigned char *endAddressPtr = NULL;
000027BA  4286      4350          clr.l     D6
                    4351   ; unsigned short int *wordAddressPtr = NULL;
000027BC  387C 0000 4352          move.w    #0,A4
                    4353   ; unsigned int *longAddressPtr = NULL;
000027C0  367C 0000 4354          move.w    #0,A3
                    4355   ; // IMPROVEMENTS TO BE MADE:
                    4356   ; // Suppossed to be able to write an odd address as a byte
                    4357   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    4358   ; // printf("\r\nStart Address: ") ;
                    4359   ; // Start = Get8HexDigits(0) ;
                    4360   ; // printf("\r\nEnd Address: ") ;
                    4361   ; // End = Get8HexDigits(0) ;
                    4362   ; // TODO
                    4363   ; scanflush();
000027C4  4EB9 0000 4364          jsr       _scanflush
000027C8  322C      
                    4365   ; memset(text, 0, sizeof(text));  // fills with zeros
000027CA  4878 0096 4366          pea       150
000027CE  42A7      4367          clr.l     -(A7)
000027D0  486E FF56 4368          pea       -170(A6)
000027D4  4EB9 0000 4369          jsr       _memset
000027D8  2F46      
000027DA  DEFC 000C 4370          add.w     #12,A7
                    4371   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
000027DE  4879 0000 4372          pea       @m68kde~1_137.L
000027E2  51C8      
000027E4  4E92      4373          jsr       (A2)
000027E6  584F      4374          addq.w    #4,A7
                    4375   ; dataSize = _getch() - 48;
000027E8  4E95      4376          jsr       (A5)
000027EA  0480 0000 4377          sub.l     #48,D0
000027EE  0030      
000027F0  2A00      4378          move.l    D0,D5
                    4379   ; printf("\n");
000027F2  4879 0000 4380          pea       @m68kde~1_138.L
000027F6  521E      
000027F8  4E92      4381          jsr       (A2)
000027FA  584F      4382          addq.w    #4,A7
                    4383   ; if (dataSize == 0) {
000027FC  4A85      4384          tst.l     D5
000027FE  6600 0058 4385          bne       MemoryTest_1
                    4386   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
00002802  4879 0000 4387          pea       @m68kde~1_139.L
00002806  5220      
00002808  4E92      4388          jsr       (A2)
0000280A  584F      4389          addq.w    #4,A7
                    4390   ; intBuffer = _getch() - 48;
0000280C  4E95      4391          jsr       (A5)
0000280E  0480 0000 4392          sub.l     #48,D0
00002812  0030      
00002814  2E00      4393          move.l    D0,D7
                    4394   ; // scanf("%d", &intBuffer);
                    4395   ; switch (intBuffer) {
00002816  2007      4396          move.l    D7,D0
00002818  0C80 0000 4397          cmp.l     #4,D0
0000281C  0004      
0000281E  642C      4398          bhs.s     MemoryTest_4
00002820  E380      4399          asl.l     #1,D0
00002822  303B 0806 4400          move.w    MemoryTest_5(PC,D0.L),D0
00002826  4EFB 0002 4401          jmp       MemoryTest_5(PC,D0.W)
                    4402   MemoryTest_5:
0000282A  0008      4403          dc.w      MemoryTest_6-MemoryTest_5
0000282C  000C      4404          dc.w      MemoryTest_7-MemoryTest_5
0000282E  0014      4405          dc.w      MemoryTest_8-MemoryTest_5
00002830  001C      4406          dc.w      MemoryTest_9-MemoryTest_5
                    4407   MemoryTest_6:
                    4408   ; case(0):
                    4409   ; dataPattern = 0x00; break;
00002832  4283      4410          clr.l     D3
00002834  6016      4411          bra.s     MemoryTest_4
                    4412   MemoryTest_7:
                    4413   ; case(1):
                    4414   ; dataPattern = 0xB2; break;
00002836  263C 0000 4415          move.l    #178,D3
0000283A  00B2      
0000283C  600E      4416          bra.s     MemoryTest_4
                    4417   MemoryTest_8:
                    4418   ; case(2):
                    4419   ; dataPattern = 0xC3; break;
0000283E  263C 0000 4420          move.l    #195,D3
00002842  00C3      
00002844  6006      4421          bra.s     MemoryTest_4
                    4422   MemoryTest_9:
                    4423   ; case(3):
                    4424   ; dataPattern = 0xD4; break;
00002846  263C 0000 4425          move.l    #212,D3
0000284A  00D4      
                    4426   MemoryTest_4:
                    4427   ; }
                    4428   ; dataPattern &= 0xFF;
0000284C  C6BC 0000 4429          and.l     #255,D3
00002850  00FF      
                    4430   ; byteLength = 1;
00002852  7801      4431          moveq     #1,D4
00002854  6000 00AE 4432          bra       MemoryTest_11
                    4433   MemoryTest_1:
                    4434   ; } else if (dataSize == 1) {
00002858  0C85 0000 4435          cmp.l     #1,D5
0000285C  0001      
0000285E  6600 0058 4436          bne       MemoryTest_10
                    4437   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
00002862  4879 0000 4438          pea       @m68kde~1_140.L
00002866  5282      
00002868  4E92      4439          jsr       (A2)
0000286A  584F      4440          addq.w    #4,A7
                    4441   ; intBuffer = _getch() - 48;
0000286C  4E95      4442          jsr       (A5)
0000286E  0480 0000 4443          sub.l     #48,D0
00002872  0030      
00002874  2E00      4444          move.l    D0,D7
                    4445   ; switch (intBuffer) {
00002876  2007      4446          move.l    D7,D0
00002878  0C80 0000 4447          cmp.l     #4,D0
0000287C  0004      
0000287E  642C      4448          bhs.s     MemoryTest_13
00002880  E380      4449          asl.l     #1,D0
00002882  303B 0806 4450          move.w    MemoryTest_14(PC,D0.L),D0
00002886  4EFB 0002 4451          jmp       MemoryTest_14(PC,D0.W)
                    4452   MemoryTest_14:
0000288A  0008      4453          dc.w      MemoryTest_15-MemoryTest_14
0000288C  000C      4454          dc.w      MemoryTest_16-MemoryTest_14
0000288E  0014      4455          dc.w      MemoryTest_17-MemoryTest_14
00002890  001C      4456          dc.w      MemoryTest_18-MemoryTest_14
                    4457   MemoryTest_15:
                    4458   ; case(0):
                    4459   ; dataPattern = 0x0000; break;
00002892  4283      4460          clr.l     D3
00002894  6016      4461          bra.s     MemoryTest_13
                    4462   MemoryTest_16:
                    4463   ; case(1):
                    4464   ; dataPattern = 0x1234; break;
00002896  263C 0000 4465          move.l    #4660,D3
0000289A  1234      
0000289C  600E      4466          bra.s     MemoryTest_13
                    4467   MemoryTest_17:
                    4468   ; case(2):
                    4469   ; dataPattern = 0xA1B2; break;
0000289E  263C 0000 4470          move.l    #41394,D3
000028A2  A1B2      
000028A4  6006      4471          bra.s     MemoryTest_13
                    4472   MemoryTest_18:
                    4473   ; case(3):
                    4474   ; dataPattern = 0xC3D4; break;
000028A6  263C 0000 4475          move.l    #50132,D3
000028AA  C3D4      
                    4476   MemoryTest_13:
                    4477   ; }
                    4478   ; dataPattern &= 0xFFFF;
000028AC  C6BC 0000 4479          and.l     #65535,D3
000028B0  FFFF      
                    4480   ; byteLength = 2;
000028B2  7802      4481          moveq     #2,D4
000028B4  6000 004E 4482          bra       MemoryTest_11
                    4483   MemoryTest_10:
                    4484   ; } else {
                    4485   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
000028B8  4879 0000 4486          pea       @m68kde~1_141.L
000028BC  52EC      
000028BE  4E92      4487          jsr       (A2)
000028C0  584F      4488          addq.w    #4,A7
                    4489   ; intBuffer = _getch() - 48;
000028C2  4E95      4490          jsr       (A5)
000028C4  0480 0000 4491          sub.l     #48,D0
000028C8  0030      
000028CA  2E00      4492          move.l    D0,D7
                    4493   ; switch (intBuffer) {
000028CC  2007      4494          move.l    D7,D0
000028CE  0C80 0000 4495          cmp.l     #4,D0
000028D2  0004      
000028D4  642C      4496          bhs.s     MemoryTest_20
000028D6  E380      4497          asl.l     #1,D0
000028D8  303B 0806 4498          move.w    MemoryTest_21(PC,D0.L),D0
000028DC  4EFB 0002 4499          jmp       MemoryTest_21(PC,D0.W)
                    4500   MemoryTest_21:
000028E0  0008      4501          dc.w      MemoryTest_22-MemoryTest_21
000028E2  000C      4502          dc.w      MemoryTest_23-MemoryTest_21
000028E4  0014      4503          dc.w      MemoryTest_24-MemoryTest_21
000028E6  001C      4504          dc.w      MemoryTest_25-MemoryTest_21
                    4505   MemoryTest_22:
                    4506   ; case(0):
                    4507   ; dataPattern = 0x00000000; break;
000028E8  4283      4508          clr.l     D3
000028EA  6016      4509          bra.s     MemoryTest_20
                    4510   MemoryTest_23:
                    4511   ; case(1):
                    4512   ; dataPattern = 0xAABBCCDD; break;
000028EC  263C AABB 4513          move.l    #-1430532899,D3
000028F0  CCDD      
000028F2  600E      4514          bra.s     MemoryTest_20
                    4515   MemoryTest_24:
                    4516   ; case(2):
                    4517   ; dataPattern = 0x11223344; break;
000028F4  263C 1122 4518          move.l    #287454020,D3
000028F8  3344      
000028FA  6006      4519          bra.s     MemoryTest_20
                    4520   MemoryTest_25:
                    4521   ; case(3):
                    4522   ; dataPattern = 0x76543210; break;
000028FC  263C 7654 4523          move.l    #1985229328,D3
00002900  3210      
                    4524   MemoryTest_20:
                    4525   ; }
                    4526   ; byteLength = 4;
00002902  7804      4527          moveq     #4,D4
                    4528   MemoryTest_11:
                    4529   ; }
                    4530   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    4531   ; while (startAddressPtr == NULL || 
                    4532   MemoryTest_26:
00002904  4A82      4533          tst.l     D2
00002906  6732      4534          beq.s     MemoryTest_29
00002908  0C84 0000 4535          cmp.l     #1,D4
0000290C  0001      
0000290E  6316      4536          bls.s     MemoryTest_30
00002910  2F02      4537          move.l    D2,-(A7)
00002912  4878 0002 4538          pea       2
00002916  4EB9 0000 4539          jsr       ULDIV
0000291A  2D9C      
0000291C  202F 0004 4540          move.l    4(A7),D0
00002920  504F      4541          addq.w    #8,A7
00002922  4A80      4542          tst.l     D0
00002924  6614      4543          bne.s     MemoryTest_29
                    4544   MemoryTest_30:
00002926  0C82 0802 4545          cmp.l     #134348800,D2
0000292A  0000      
0000292C  650C      4546          blo.s     MemoryTest_29
0000292E  203C 0B00 4547          move.l    #184549376,D0
00002932  0000      
00002934  9084      4548          sub.l     D4,D0
00002936  B480      4549          cmp.l     D0,D2
00002938  6316      4550          bls.s     MemoryTest_28
                    4551   MemoryTest_29:
                    4552   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    4553   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    4554   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    4555   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
0000293A  4879 0000 4556          pea       @m68kde~1_142.L
0000293E  536A      
00002940  4E92      4557          jsr       (A2)
00002942  584F      4558          addq.w    #4,A7
                    4559   ; startAddressPtr =  Get8HexDigits(0);
00002944  42A7      4560          clr.l     -(A7)
00002946  4EB8 0CA4 4561          jsr       _Get8HexDigits
0000294A  584F      4562          addq.w    #4,A7
0000294C  2400      4563          move.l    D0,D2
0000294E  60B4      4564          bra       MemoryTest_26
                    4565   MemoryTest_28:
                    4566   ; }
                    4567   ; while (endAddressPtr == NULL || 
                    4568   MemoryTest_31:
00002950  4A86      4569          tst.l     D6
00002952  670A      4570          beq.s     MemoryTest_34
00002954  202E FFF0 4571          move.l    -16(A6),D0
00002958  D084      4572          add.l     D4,D0
0000295A  BC80      4573          cmp.l     D0,D6
0000295C  6416      4574          bhs.s     MemoryTest_33
                    4575   MemoryTest_34:
                    4576   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    4577   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
0000295E  4879 0000 4578          pea       @m68kde~1_143.L
00002962  53A2      
00002964  4E92      4579          jsr       (A2)
00002966  584F      4580          addq.w    #4,A7
                    4581   ; endAddressPtr =  Get8HexDigits(0);
00002968  42A7      4582          clr.l     -(A7)
0000296A  4EB8 0CA4 4583          jsr       _Get8HexDigits
0000296E  584F      4584          addq.w    #4,A7
00002970  2C00      4585          move.l    D0,D6
00002972  60DC      4586          bra       MemoryTest_31
                    4587   MemoryTest_33:
                    4588   ; }
                    4589   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00002974  2F02      4590          move.l    D2,-(A7)
00002976  4879 0000 4591          pea       @m68kde~1_144.L
0000297A  53D8      
0000297C  4E92      4592          jsr       (A2)
0000297E  504F      4593          addq.w    #8,A7
                    4594   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
00002980  2F06      4595          move.l    D6,-(A7)
00002982  4879 0000 4596          pea       @m68kde~1_145.L
00002986  53F0      
00002988  4E92      4597          jsr       (A2)
0000298A  504F      4598          addq.w    #8,A7
                    4599   ; addrCount = 0;
0000298C  42AE FFFC 4600          clr.l     -4(A6)
                    4601   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    4602   MemoryTest_35:
00002990  B486      4603          cmp.l     D6,D2
00002992  6400 0132 4604          bhs       MemoryTest_37
00002996  2006      4605          move.l    D6,D0
00002998  9082      4606          sub.l     D2,D0
0000299A  5280      4607          addq.l    #1,D0
0000299C  B084      4608          cmp.l     D4,D0
0000299E  6500 0126 4609          blo       MemoryTest_37
                    4610   ; // If address goes beyond 0x0B00_0000 then break
                    4611   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
000029A2  203C 0B00 4612          move.l    #184549376,D0
000029A6  0000      
000029A8  9084      4613          sub.l     D4,D0
000029AA  B480      4614          cmp.l     D0,D2
000029AC  6310      4615          bls.s     MemoryTest_38
                    4616   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
000029AE  2F02      4617          move.l    D2,-(A7)
000029B0  4879 0000 4618          pea       @m68kde~1_146.L
000029B4  5406      
000029B6  4E92      4619          jsr       (A2)
000029B8  504F      4620          addq.w    #8,A7
                    4621   ; break;
000029BA  6000 010A 4622          bra       MemoryTest_37
                    4623   MemoryTest_38:
                    4624   ; }
                    4625   ; longAddressPtr = startAddressPtr;
000029BE  2642      4626          move.l    D2,A3
                    4627   ; wordAddressPtr = startAddressPtr;
000029C0  2842      4628          move.l    D2,A4
                    4629   ; if (dataSize == 0) {
000029C2  4A85      4630          tst.l     D5
000029C4  6600 0034 4631          bne       MemoryTest_40
                    4632   ; *startAddressPtr = dataPattern;
000029C8  2042      4633          move.l    D2,A0
000029CA  1083      4634          move.b    D3,(A0)
                    4635   ; if ((*startAddressPtr) != dataPattern) {
000029CC  2042      4636          move.l    D2,A0
000029CE  1010      4637          move.b    (A0),D0
000029D0  C0BC 0000 4638          and.l     #255,D0
000029D4  00FF      
000029D6  B083      4639          cmp.l     D3,D0
000029D8  671C      4640          beq.s     MemoryTest_42
                    4641   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
000029DA  2F03      4642          move.l    D3,-(A7)
000029DC  2042      4643          move.l    D2,A0
000029DE  1210      4644          move.b    (A0),D1
000029E0  C2BC 0000 4645          and.l     #255,D1
000029E4  00FF      
000029E6  2F01      4646          move.l    D1,-(A7)
000029E8  2F02      4647          move.l    D2,-(A7)
000029EA  4879 0000 4648          pea       @m68kde~1_147.L
000029EE  5438      
000029F0  4E92      4649          jsr       (A2)
000029F2  DEFC 0010 4650          add.w     #16,A7
                    4651   MemoryTest_42:
000029F6  6000 0058 4652          bra       MemoryTest_48
                    4653   MemoryTest_40:
                    4654   ; }
                    4655   ; } else if (dataSize == 1) {
000029FA  0C85 0000 4656          cmp.l     #1,D5
000029FE  0001      
00002A00  662C      4657          bne.s     MemoryTest_44
                    4658   ; *wordAddressPtr = dataPattern;
00002A02  3883      4659          move.w    D3,(A4)
                    4660   ; if ((*wordAddressPtr) != dataPattern) {
00002A04  3014      4661          move.w    (A4),D0
00002A06  C0BC 0000 4662          and.l     #65535,D0
00002A0A  FFFF      
00002A0C  B083      4663          cmp.l     D3,D0
00002A0E  671C      4664          beq.s     MemoryTest_46
                    4665   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002A10  2F03      4666          move.l    D3,-(A7)
00002A12  2042      4667          move.l    D2,A0
00002A14  1210      4668          move.b    (A0),D1
00002A16  C2BC 0000 4669          and.l     #255,D1
00002A1A  00FF      
00002A1C  2F01      4670          move.l    D1,-(A7)
00002A1E  2F02      4671          move.l    D2,-(A7)
00002A20  4879 0000 4672          pea       @m68kde~1_147.L
00002A24  5438      
00002A26  4E92      4673          jsr       (A2)
00002A28  DEFC 0010 4674          add.w     #16,A7
                    4675   MemoryTest_46:
00002A2C  6022      4676          bra.s     MemoryTest_48
                    4677   MemoryTest_44:
                    4678   ; }
                    4679   ; } else {
                    4680   ; *longAddressPtr = dataPattern;
00002A2E  2683      4681          move.l    D3,(A3)
                    4682   ; if ((*longAddressPtr) != dataPattern) {
00002A30  B693      4683          cmp.l     (A3),D3
00002A32  671C      4684          beq.s     MemoryTest_48
                    4685   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002A34  2F03      4686          move.l    D3,-(A7)
00002A36  2042      4687          move.l    D2,A0
00002A38  1210      4688          move.b    (A0),D1
00002A3A  C2BC 0000 4689          and.l     #255,D1
00002A3E  00FF      
00002A40  2F01      4690          move.l    D1,-(A7)
00002A42  2F02      4691          move.l    D2,-(A7)
00002A44  4879 0000 4692          pea       @m68kde~1_147.L
00002A48  5438      
00002A4A  4E92      4693          jsr       (A2)
00002A4C  DEFC 0010 4694          add.w     #16,A7
                    4695   MemoryTest_48:
                    4696   ; }
                    4697   ; }
                    4698   ; // if ((*startAddressPtr) != dataPattern) {
                    4699   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    4700   ; // }
                    4701   ; addrCount++;
00002A50  52AE FFFC 4702          addq.l    #1,-4(A6)
                    4703   ; if (addrCount % 128 == 0) {
00002A54  2F2E FFFC 4704          move.l    -4(A6),-(A7)
00002A58  4878 0080 4705          pea       128
00002A5C  4EB9 0000 4706          jsr       ULDIV
00002A60  2D9C      
00002A62  202F 0004 4707          move.l    4(A7),D0
00002A66  504F      4708          addq.w    #8,A7
00002A68  4A80      4709          tst.l     D0
00002A6A  6600 0054 4710          bne       MemoryTest_55
                    4711   ; if (dataSize == 0) {
00002A6E  4A85      4712          tst.l     D5
00002A70  661C      4713          bne.s     MemoryTest_52
                    4714   ; printf("Address: 0x%x Value: 0x%02X\n",
00002A72  2042      4715          move.l    D2,A0
00002A74  1210      4716          move.b    (A0),D1
00002A76  C2BC 0000 4717          and.l     #255,D1
00002A7A  00FF      
00002A7C  2F01      4718          move.l    D1,-(A7)
00002A7E  2F02      4719          move.l    D2,-(A7)
00002A80  4879 0000 4720          pea       @m68kde~1_148.L
00002A84  547E      
00002A86  4E92      4721          jsr       (A2)
00002A88  DEFC 000C 4722          add.w     #12,A7
00002A8C  6032      4723          bra.s     MemoryTest_55
                    4724   MemoryTest_52:
                    4725   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    4726   ; }
                    4727   ; else if (dataSize == 1) {
00002A8E  0C85 0000 4728          cmp.l     #1,D5
00002A92  0001      
00002A94  661A      4729          bne.s     MemoryTest_54
                    4730   ; printf("Address: 0x%x Value: 0x%04X\n",
00002A96  3214      4731          move.w    (A4),D1
00002A98  C2BC 0000 4732          and.l     #65535,D1
00002A9C  FFFF      
00002A9E  2F01      4733          move.l    D1,-(A7)
00002AA0  2F0C      4734          move.l    A4,-(A7)
00002AA2  4879 0000 4735          pea       @m68kde~1_149.L
00002AA6  549C      
00002AA8  4E92      4736          jsr       (A2)
00002AAA  DEFC 000C 4737          add.w     #12,A7
00002AAE  6010      4738          bra.s     MemoryTest_55
                    4739   MemoryTest_54:
                    4740   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    4741   ; }
                    4742   ; else {
                    4743   ; printf("Address: 0x%x Value: 0x%08X\n",
00002AB0  2F13      4744          move.l    (A3),-(A7)
00002AB2  2F0B      4745          move.l    A3,-(A7)
00002AB4  4879 0000 4746          pea       @m68kde~1_150.L
00002AB8  54BA      
00002ABA  4E92      4747          jsr       (A2)
00002ABC  DEFC 000C 4748          add.w     #12,A7
                    4749   MemoryTest_55:
                    4750   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    4751   ; }
                    4752   ; }
                    4753   ; startAddressPtr += byteLength;
00002AC0  D484      4754          add.l     D4,D2
00002AC2  6000 FECC 4755          bra       MemoryTest_35
                    4756   MemoryTest_37:
00002AC6  4CDF 3CFC 4757          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002ACA  4E5E      4758          unlk      A6
00002ACC  4E75      4759          rts
                    4760   ; }
                    4761   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4762   ; }
                    4763   ; void main(void)
                    4764   ; {
                    4765   _main:
00002ACE  4E56 FFF4 4766          link      A6,#-12
00002AD2  48E7 3030 4767          movem.l   D2/D3/A2/A3,-(A7)
00002AD6  45F8 0A30 4768          lea       _InstallExceptionHandler.L,A2
00002ADA  47F9 0000 4769          lea       _printf.L,A3
00002ADE  3836      
                    4770   ; char c ;
                    4771   ; int i, j ;
                    4772   ; char *BugMessage = "DE1-68k Bug V1.77";
00002AE0  41F9 0000 4773          lea       @m68kde~1_151.L,A0
00002AE4  54D8      
00002AE6  2608      4774          move.l    A0,D3
                    4775   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002AE8  41F9 0000 4776          lea       @m68kde~1_152.L,A0
00002AEC  54EA      
00002AEE  2D48 FFFC 4777          move.l    A0,-4(A6)
                    4778   ; KillAllBreakPoints() ;
00002AF2  4EB8 1E14 4779          jsr       _KillAllBreakPoints
                    4780   ; i = x = y = z = PortA_Count = 0;
00002AF6  42B9 0B00 4781          clr.l     _PortA_Count.L
00002AFA  00D4      
00002AFC  42B9 0B00 4782          clr.l     _z.L
00002B00  00D0      
00002B02  42B9 0B00 4783          clr.l     _y.L
00002B06  00CC      
00002B08  42B9 0B00 4784          clr.l     _x.L
00002B0C  00C8      
00002B0E  4282      4785          clr.l     D2
                    4786   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002B10  42B9 0B00 4787          clr.l     _GoFlag.L
00002B14  00DC      
00002B16  42B9 0B00 4788          clr.l     _Trace.L
00002B1A  00D8      
                    4789   ; Echo = 1 ;
00002B1C  23FC 0000 4790          move.l    #1,_Echo.L
00002B20  0001 0B00 
00002B24  00E0      
                    4791   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002B26  42B9 0B00 4792          clr.l     _d7.L
00002B2A  0100      
00002B2C  42B9 0B00 4793          clr.l     _d6.L
00002B30  00FC      
00002B32  42B9 0B00 4794          clr.l     _d5.L
00002B36  00F8      
00002B38  42B9 0B00 4795          clr.l     _d4.L
00002B3C  00F4      
00002B3E  42B9 0B00 4796          clr.l     _d3.L
00002B42  00F0      
00002B44  42B9 0B00 4797          clr.l     _d2.L
00002B48  00EC      
00002B4A  42B9 0B00 4798          clr.l     _d1.L
00002B4E  00E8      
00002B50  42B9 0B00 4799          clr.l     _d0.L
00002B54  00E4      
                    4800   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002B56  42B9 0B00 4801          clr.l     _a6.L
00002B5A  011C      
00002B5C  42B9 0B00 4802          clr.l     _a5.L
00002B60  0118      
00002B62  42B9 0B00 4803          clr.l     _a4.L
00002B66  0114      
00002B68  42B9 0B00 4804          clr.l     _a3.L
00002B6C  0110      
00002B6E  42B9 0B00 4805          clr.l     _a2.L
00002B72  010C      
00002B74  42B9 0B00 4806          clr.l     _a1.L
00002B78  0108      
00002B7A  42B9 0B00 4807          clr.l     _a0.L
00002B7E  0104      
                    4808   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002B80  23FC 0800 4809          move.l    #134217728,_PC.L
00002B84  0000 0B00 
00002B88  0120      
00002B8A  23FC 0C00 4810          move.l    #201326592,_SSP.L
00002B8E  0000 0B00 
00002B92  0124      
00002B94  23FC 0C00 4811          move.l    #201326592,_USP.L
00002B98  0000 0B00 
00002B9C  0128      
                    4812   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002B9E  33FC 2000 4813          move.w    #8192,_SR.L
00002BA2  0B00 012C 
                    4814   ; // Initialise Breakpoint variables
                    4815   ; for(i = 0; i < 8; i++)  {
00002BA6  4282      4816          clr.l     D2
                    4817   main_1:
00002BA8  0C82 0000 4818          cmp.l     #8,D2
00002BAC  0008      
00002BAE  6C00 004C 4819          bge       main_3
                    4820   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002BB2  2002      4821          move.l    D2,D0
00002BB4  E588      4822          lsl.l     #2,D0
00002BB6  41F9 0B00 4823          lea       _BreakPointAddress.L,A0
00002BBA  012E      
00002BBC  42B0 0800 4824          clr.l     0(A0,D0.L)
                    4825   ; WatchPointAddress[i] = 0 ;
00002BC0  2002      4826          move.l    D2,D0
00002BC2  E588      4827          lsl.l     #2,D0
00002BC4  41F9 0B00 4828          lea       _WatchPointAddress.L,A0
00002BC8  0182      
00002BCA  42B0 0800 4829          clr.l     0(A0,D0.L)
                    4830   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002BCE  2002      4831          move.l    D2,D0
00002BD0  E388      4832          lsl.l     #1,D0
00002BD2  41F9 0B00 4833          lea       _BreakPointInstruction.L,A0
00002BD6  014E      
00002BD8  4270 0800 4834          clr.w     0(A0,D0.L)
                    4835   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002BDC  2002      4836          move.l    D2,D0
00002BDE  E588      4837          lsl.l     #2,D0
00002BE0  41F9 0B00 4838          lea       _BreakPointSetOrCleared.L,A0
00002BE4  015E      
00002BE6  42B0 0800 4839          clr.l     0(A0,D0.L)
                    4840   ; WatchPointSetOrCleared[i] = 0;
00002BEA  2002      4841          move.l    D2,D0
00002BEC  E588      4842          lsl.l     #2,D0
00002BEE  41F9 0B00 4843          lea       _WatchPointSetOrCleared.L,A0
00002BF2  01A2      
00002BF4  42B0 0800 4844          clr.l     0(A0,D0.L)
00002BF8  5282      4845          addq.l    #1,D2
00002BFA  60AC      4846          bra       main_1
                    4847   main_3:
                    4848   ; }
                    4849   ; Init_RS232() ;     // initialise the RS232 port
00002BFC  4EB8 0B12 4850          jsr       _Init_RS232
                    4851   ; Init_LCD() ;
00002C00  4EB8 095E 4852          jsr       _Init_LCD
                    4853   ; SPI_Init();
00002C04  4EB8 1112 4854          jsr       _SPI_Init
                    4855   ; for( i = 32; i < 48; i++)
00002C08  7420      4856          moveq     #32,D2
                    4857   main_4:
00002C0A  0C82 0000 4858          cmp.l     #48,D2
00002C0E  0030      
00002C10  6C0E      4859          bge.s     main_6
                    4860   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002C12  2F02      4861          move.l    D2,-(A7)
00002C14  4878 268C 4862          pea       _UnhandledTrap.L
00002C18  4E92      4863          jsr       (A2)
00002C1A  504F      4864          addq.w    #8,A7
00002C1C  5282      4865          addq.l    #1,D2
00002C1E  60EA      4866          bra       main_4
                    4867   main_6:
                    4868   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002C20  4878 002F 4869          pea       47
00002C24  4878 2366 4870          pea       _menu.L
00002C28  4E92      4871          jsr       (A2)
00002C2A  504F      4872          addq.w    #8,A7
                    4873   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002C2C  4878 0019 4874          pea       25
00002C30  4878 2632 4875          pea       _UnhandledIRQ1.L
00002C34  4E92      4876          jsr       (A2)
00002C36  504F      4877          addq.w    #8,A7
                    4878   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002C38  4878 001A 4879          pea       26
00002C3C  4878 263E 4880          pea       _UnhandledIRQ2.L
00002C40  4E92      4881          jsr       (A2)
00002C42  504F      4882          addq.w    #8,A7
                    4883   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002C44  4878 001B 4884          pea       27
00002C48  4878 264A 4885          pea       _UnhandledIRQ3.L
00002C4C  4E92      4886          jsr       (A2)
00002C4E  504F      4887          addq.w    #8,A7
                    4888   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002C50  4878 001C 4889          pea       28
00002C54  4878 2656 4890          pea       _UnhandledIRQ4.L
00002C58  4E92      4891          jsr       (A2)
00002C5A  504F      4892          addq.w    #8,A7
                    4893   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002C5C  4878 001D 4894          pea       29
00002C60  4878 2662 4895          pea       _UnhandledIRQ5.L
00002C64  4E92      4896          jsr       (A2)
00002C66  504F      4897          addq.w    #8,A7
                    4898   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002C68  4878 001E 4899          pea       30
00002C6C  4878 266E 4900          pea       _UnhandledIRQ6.L
00002C70  4E92      4901          jsr       (A2)
00002C72  504F      4902          addq.w    #8,A7
                    4903   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002C74  4878 001F 4904          pea       31
00002C78  4878 2680 4905          pea       _UnhandledIRQ7.L
00002C7C  4E92      4906          jsr       (A2)
00002C7E  504F      4907          addq.w    #8,A7
                    4908   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002C80  4878 002E 4909          pea       46
00002C84  4878 20A2 4910          pea       _HandleBreakPoint.L
00002C88  4E92      4911          jsr       (A2)
00002C8A  504F      4912          addq.w    #8,A7
                    4913   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002C8C  4878 001D 4914          pea       29
00002C90  4878 1782 4915          pea       _DumpRegistersandPause.L
00002C94  4E92      4916          jsr       (A2)
00002C96  504F      4917          addq.w    #8,A7
                    4918   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002C98  4878 0002 4919          pea       2
00002C9C  4878 269A 4920          pea       _BusError.L
00002CA0  4E92      4921          jsr       (A2)
00002CA2  504F      4922          addq.w    #8,A7
                    4923   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002CA4  4878 0003 4924          pea       3
00002CA8  4878 26A8 4925          pea       _AddressError.L
00002CAC  4E92      4926          jsr       (A2)
00002CAE  504F      4927          addq.w    #8,A7
                    4928   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002CB0  4878 0004 4929          pea       4
00002CB4  4878 26B6 4930          pea       _IllegalInstruction.L
00002CB8  4E92      4931          jsr       (A2)
00002CBA  504F      4932          addq.w    #8,A7
                    4933   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002CBC  4878 0005 4934          pea       5
00002CC0  4878 26C4 4935          pea       _Dividebyzero.L
00002CC4  4E92      4936          jsr       (A2)
00002CC6  504F      4937          addq.w    #8,A7
                    4938   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002CC8  4878 0006 4939          pea       6
00002CCC  4878 26D2 4940          pea       _Check.L
00002CD0  4E92      4941          jsr       (A2)
00002CD2  504F      4942          addq.w    #8,A7
                    4943   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002CD4  4878 0007 4944          pea       7
00002CD8  4878 26E0 4945          pea       _Trapv.L
00002CDC  4E92      4946          jsr       (A2)
00002CDE  504F      4947          addq.w    #8,A7
                    4948   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002CE0  4878 0008 4949          pea       8
00002CE4  4878 26EE 4950          pea       _PrivError.L
00002CE8  4E92      4951          jsr       (A2)
00002CEA  504F      4952          addq.w    #8,A7
                    4953   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002CEC  4878 000F 4954          pea       15
00002CF0  4878 26FC 4955          pea       _UnitIRQ.L
00002CF4  4E92      4956          jsr       (A2)
00002CF6  504F      4957          addq.w    #8,A7
                    4958   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002CF8  4878 0018 4959          pea       24
00002CFC  4878 26D2 4960          pea       _Check.L
00002D00  4E92      4961          jsr       (A2)
00002D02  504F      4962          addq.w    #8,A7
                    4963   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002D04  4EB8 0BA6 4964          jsr       _FlushKeyboard
                    4965   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002D08  4239 0040 4966          clr.b     4194314
00002D0C  000A      
                    4967   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4968   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4969   main_7:
00002D0E  1039 0040 4970          move.b    4194306,D0
00002D12  0002      
00002D14  C03C 0002 4971          and.b     #2,D0
00002D18  0C00 0002 4972          cmp.b     #2,D0
00002D1C  662A      4973          bne.s     main_9
                    4974   ; LoadFromFlashChip();
00002D1E  4EB8 12BE 4975          jsr       _LoadFromFlashChip
                    4976   ; printf("\r\nRunning.....") ;
00002D22  4879 0000 4977          pea       @m68kde~1_153.L
00002D26  5508      
00002D28  4E93      4978          jsr       (A3)
00002D2A  584F      4979          addq.w    #4,A7
                    4980   ; Oline1("Running.....") ;
00002D2C  4879 0000 4981          pea       @m68kde~1_154.L
00002D30  5518      
00002D32  4EB8 0A02 4982          jsr       _Oline1
00002D36  584F      4983          addq.w    #4,A7
                    4984   ; GoFlag = 1;
00002D38  23FC 0000 4985          move.l    #1,_GoFlag.L
00002D3C  0001 0B00 
00002D40  00DC      
                    4986   ; go() ;
00002D42  4EB8 08B8 4987          jsr       _go
00002D46  60C6      4988          bra       main_7
                    4989   main_9:
                    4990   ; }
                    4991   ; // otherwise start the debug monitor
                    4992   ; Oline0(BugMessage) ;
00002D48  2F03      4993          move.l    D3,-(A7)
00002D4A  4EB8 09D4 4994          jsr       _Oline0
00002D4E  584F      4995          addq.w    #4,A7
                    4996   ; Oline1("By: PJ Davies") ;
00002D50  4879 0000 4997          pea       @m68kde~1_155.L
00002D54  5526      
00002D56  4EB8 0A02 4998          jsr       _Oline1
00002D5A  584F      4999          addq.w    #4,A7
                    5000   ; printf("\r\n%s", BugMessage) ;
00002D5C  2F03      5001          move.l    D3,-(A7)
00002D5E  4879 0000 5002          pea       @m68kde~1_156.L
00002D62  5534      
00002D64  4E93      5003          jsr       (A3)
00002D66  504F      5004          addq.w    #8,A7
                    5005   ; printf("\r\n%s", CopyrightMessage) ;
00002D68  2F2E FFFC 5006          move.l    -4(A6),-(A7)
00002D6C  4879 0000 5007          pea       @m68kde~1_156.L
00002D70  5534      
00002D72  4E93      5008          jsr       (A3)
00002D74  504F      5009          addq.w    #8,A7
                    5010   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00002D76  4879 0000 5011          pea       @m68kde~1_157.L
00002D7A  553A      
00002D7C  4E93      5012          jsr       (A3)
00002D7E  584F      5013          addq.w    #4,A7
                    5014   ; menu();
00002D80  4EB8 2366 5015          jsr       _menu
00002D84  4CDF 0C0C 5016          movem.l   (A7)+,D2/D3/A2/A3
00002D88  4E5E      5017          unlk      A6
00002D8A  4E75      5018          rts
                    5019   ; }
                    5020   _strcpy:
00002D8C  206F 0004 5021          move.l    (4,A7),A0
00002D90  226F 0008 5022          move.l    (8,A7),A1
00002D94  2008      5023          move.l    A0,D0
                    5024   strcpy_1:
00002D96  10D9      5025          move.b    (A1)+,(A0)+
00002D98  66FC      5026          bne       strcpy_1
00002D9A  4E75      5027          rts
                    5028   ULDIV:
00002D9C  4E56 0000 5029          link    A6,#0
00002DA0  48E7 C000 5030          movem.l D0/D1,-(A7)
00002DA4  222E 0008 5031          move.l  8(A6),D1
00002DA8  202E 000C 5032          move.l  12(A6),D0
00002DAC  6036      5033          bra.s   ldiv_3
                    5034   LDIV:
00002DAE  4E56 0000 5035          link    A6,#0
00002DB2  48E7 C000 5036          movem.l D0/D1,-(A7)
00002DB6  222E 0008 5037          move.l  8(A6),D1
00002DBA  202E 000C 5038          move.l  12(A6),D0
00002DBE  4A80      5039          tst.l   D0
00002DC0  6A0E      5040          bpl.s   ldiv_1
00002DC2  4480      5041          neg.l   D0
00002DC4  4A81      5042          tst.l   D1
00002DC6  6A14      5043          bpl.s   ldiv_2
00002DC8  4481      5044          neg.l   D1
00002DCA  612A      5045          bsr.s   dodiv
00002DCC  4481      5046          neg.l   D1
00002DCE  6016      5047          bra.s   ldiv_4
                    5048   ldiv_1:
00002DD0  4A81      5049          tst.l   D1
00002DD2  6A10      5050          bpl.s   ldiv_3
00002DD4  4481      5051          neg.l   D1
00002DD6  611E      5052          bsr.s   dodiv
00002DD8  4480      5053          neg.l   D0
00002DDA  600A      5054          bra.s   ldiv_4
                    5055   ldiv_2:
00002DDC  6118      5056          bsr.s   dodiv
00002DDE  4480      5057          neg.l   D0
00002DE0  4481      5058          neg.l   D1
00002DE2  6002      5059          bra.s   ldiv_4
                    5060   ldiv_3:
00002DE4  6110      5061          bsr.s   dodiv
                    5062   ldiv_4:
00002DE6  2D40 0008 5063          move.l  D0,8(A6)
00002DEA  2D41 000C 5064          move.l  D1,12(A6)
00002DEE  4CDF 0003 5065          movem.l (A7)+,D0/D1
00002DF2  4E5E      5066          unlk    A6
00002DF4  4E75      5067          rts
                    5068   dodiv:
00002DF6  0C81 0000 5069          cmpi.l  #$FFFF,D1
00002DFA  FFFF      
00002DFC  6236      5070          bhi.s   dodiv_2
00002DFE  0C80 0000 5071          cmpi.l  #$FFFF,D0
00002E02  FFFF      
00002E04  6210      5072          bhi.s   dodiv_1
00002E06  80C1      5073          divu    D1,D0
00002E08  2200      5074          move.l  D0,D1
00002E0A  4241      5075          clr.w   D1
00002E0C  4841      5076          swap    D1
00002E0E  0280 0000 5077          andi.l  #$FFFF,D0
00002E12  FFFF      
00002E14  4E75      5078          rts
                    5079   dodiv_1:
00002E16  48A7 A000 5080          movem.w D0/D2,-(A7)
00002E1A  4240      5081          clr.w   D0
00002E1C  4840      5082          swap    D0
00002E1E  80C1      5083          divu    D1,D0
00002E20  3400      5084          move.w  D0,D2
00002E22  301F      5085          move.w  (A7)+,D0
00002E24  80C1      5086          divu    D1,D0
00002E26  4840      5087          swap    D0
00002E28  4281      5088          clr.l   D1
00002E2A  3200      5089          move.w  D0,D1
00002E2C  3002      5090          move.w  D2,D0
00002E2E  4840      5091          swap    D0
00002E30  341F      5092          move.w  (A7)+,D2
00002E32  4E75      5093          rts
                    5094   dodiv_2:
00002E34  48E7 3800 5095          movem.l D2/D3/D4,-(A7)
00002E38  2401      5096          move.l  D1,D2
00002E3A  4242      5097          clr.w   D2
00002E3C  4842      5098          swap    D2
00002E3E  5282      5099          addq.l  #1,D2
00002E40  2600      5100          move.l  D0,D3
00002E42  2801      5101          move.l  D1,D4
00002E44  2202      5102          move.l  D2,D1
00002E46  61CE      5103          bsr.s   dodiv_1
00002E48  2204      5104          move.l  D4,D1
00002E4A  82C2      5105          divu    D2,D1
00002E4C  80C1      5106          divu    D1,D0
00002E4E  0280 0000 5107          andi.l  #$FFFF,D0
00002E52  FFFF      
                    5108   dodiv_3:
00002E54  2204      5109          move.l  D4,D1
00002E56  2404      5110          move.l  D4,D2
00002E58  4842      5111          swap    D2
00002E5A  C2C0      5112          mulu    D0,D1
00002E5C  C4C0      5113          mulu    D0,D2
00002E5E  4842      5114          swap    D2
00002E60  D282      5115          add.l   D2,D1
00002E62  9283      5116          sub.l   D3,D1
00002E64  620A      5117          bhi.s   dodiv_4
00002E66  4481      5118          neg.l   D1
00002E68  B881      5119          cmp.l   D1,D4
00002E6A  6208      5120          bhi.s   dodiv_5
00002E6C  5280      5121          addq.l  #1,D0
00002E6E  60E4      5122          bra.s   dodiv_3
                    5123   dodiv_4:
00002E70  5380      5124          subq.l  #1,D0
00002E72  60E0      5125          bra.s   dodiv_3
                    5126   dodiv_5:
00002E74  4CDF 001C 5127          movem.l (A7)+,D2/D3/D4
00002E78  4E75      5128          rts
                    5129   _putch:
00002E7A  4E56 0000 5130          link      A6,#0
00002E7E  48E7 2000 5131          movem.l   D2,-(A7)
00002E82  242E 0008 5132          move.l    8(A6),D2
00002E86  0C82 0000 5133          cmp.l     #10,D2
00002E8A  000A      
00002E8C  660A      5134          bne.s     putch_1
00002E8E  4878 000D 5135          pea       13
00002E92  6100 DCA8 5136          bsr       __putch
00002E96  584F      5137          addq.w    #4,A7
                    5138   putch_1:
00002E98  2F02      5139          move.l    D2,-(A7)
00002E9A  6100 DCA0 5140          bsr       __putch
00002E9E  584F      5141          addq.w    #4,A7
00002EA0  2002      5142          move.l    D2,D0
00002EA2  4CDF 0004 5143          movem.l   (A7)+,D2
00002EA6  4E5E      5144          unlk      A6
00002EA8  4E75      5145          rts
                    5146   _getch:
00002EAA  48E7 2000 5147          movem.l   D2,-(A7)
00002EAE  2439 0B00 5148          move.l    __ungetbuf,D2
00002EB2  00C0      
00002EB4  2039 0B00 5149          move.l    __ungetbuf,D0
00002EB8  00C0      
00002EBA  0C80 FFFF 5150          cmp.l     #-1,D0
00002EBE  FFFF      
00002EC0  670C      5151          beq.s     getch_1
00002EC2  23FC FFFF 5152          move.l    #-1,__ungetbuf
00002EC6  FFFF 0B00 
00002ECA  00C0      
00002ECC  6010      5153          bra.s     getch_3
                    5154   getch_1:
00002ECE  6100 DC98 5155          bsr       __getch
00002ED2  2400      5156          move.l    D0,D2
00002ED4  0C80 0000 5157          cmp.l     #13,D0
00002ED8  000D      
00002EDA  6602      5158          bne.s     getch_3
00002EDC  740A      5159          moveq     #10,D2
                    5160   getch_3:
00002EDE  2002      5161          move.l    D2,D0
00002EE0  4CDF 0004 5162          movem.l   (A7)+,D2
00002EE4  4E75      5163          rts
                    5164   _tolower:
00002EE6  4E56 0000 5165          link      A6,#0
00002EEA  48E7 2000 5166          movem.l   D2,-(A7)
00002EEE  242E 0008 5167          move.l    8(A6),D2
00002EF2  0C82 0000 5168          cmp.l     #65,D2
00002EF6  0041      
00002EF8  6D0E      5169          blt.s     tolower_1
00002EFA  0C82 0000 5170          cmp.l     #90,D2
00002EFE  005A      
00002F00  6E06      5171          bgt.s     tolower_1
00002F02  84BC 0000 5172          or.l      #32,D2
00002F06  0020      
                    5173   tolower_1:
00002F08  2002      5174          move.l    D2,D0
00002F0A  4CDF 0004 5175          movem.l   (A7)+,D2
00002F0E  4E5E      5176          unlk      A6
00002F10  4E75      5177          rts
                    5178   _sprintf:
00002F12  4E56 FFFC 5179          link      A6,#-4
00002F16  48E7 2000 5180          movem.l   D2,-(A7)
00002F1A  41EE 000C 5181          lea       12(A6),A0
00002F1E  5848      5182          addq.w    #4,A0
00002F20  2408      5183          move.l    A0,D2
00002F22  2F02      5184          move.l    D2,-(A7)
00002F24  2F2E 000C 5185          move.l    12(A6),-(A7)
00002F28  2F2E 0008 5186          move.l    8(A6),-(A7)
00002F2C  6100 09EC 5187          bsr       _vsprintf
00002F30  DEFC 000C 5188          add.w     #12,A7
00002F34  2D40 FFFC 5189          move.l    D0,-4(A6)
00002F38  4282      5190          clr.l     D2
00002F3A  202E FFFC 5191          move.l    -4(A6),D0
00002F3E  4CDF 0004 5192          movem.l   (A7)+,D2
00002F42  4E5E      5193          unlk      A6
00002F44  4E75      5194          rts
                    5195   _memset:
00002F46  206F 0004 5196          move.l    (4,A7),A0
00002F4A  202F 0008 5197          move.l    (8,A7),D0
00002F4E  222F 000C 5198          move.l    (12,A7),D1
00002F52  2248      5199          move.l    A0,A1	
                    5200   memset_1:
00002F54  12C0      5201          move.b    D0,(A1)+
00002F56  5341      5202          subq      #1,D1
00002F58  66FA      5203          bne       memset_1
00002F5A  2008      5204          move.l    A0,D0
00002F5C  4E75      5205          rts
                    5206   _strcat:
00002F5E  206F 0004 5207          move.l    (4,A7),A0	
00002F62  226F 0008 5208          move.l    (8,A7),A1	
00002F66  2008      5209          move.l    A0,D0		
                    5210   strcat_0:
00002F68  4A18      5211          tst.b     (A0)+
00002F6A  66FC      5212          bne       strcat_0
00002F6C  5348      5213          subq      #1,A0
                    5214   strcat_1:
00002F6E  10D9      5215          move.b    (A1)+,(A0)+
00002F70  66FC      5216          bne       strcat_1
00002F72  4E75      5217          rts
                    5218   _toupper:
00002F74  4E56 0000 5219          link      A6,#0
00002F78  48E7 2000 5220          movem.l   D2,-(A7)
00002F7C  242E 0008 5221          move.l    8(A6),D2
00002F80  0C82 0000 5222          cmp.l     #97,D2
00002F84  0061      
00002F86  6D0E      5223          blt.s     toupper_1
00002F88  0C82 0000 5224          cmp.l     #122,D2
00002F8C  007A      
00002F8E  6E06      5225          bgt.s     toupper_1
00002F90  C4BC 0000 5226          and.l     #95,D2
00002F94  005F      
                    5227   toupper_1:
00002F96  2002      5228          move.l    D2,D0
00002F98  4CDF 0004 5229          movem.l   (A7)+,D2
00002F9C  4E5E      5230          unlk      A6
00002F9E  4E75      5231          rts
                    5232   @vsscanf_scanread:
00002FA0  4E56 FFFC 5233          link      A6,#-4
00002FA4  48E7 0020 5234          movem.l   A2,-(A7)
00002FA8  45F9 0000 5235          lea       @vsscanf_bufx,A2
00002FAC  5582      
00002FAE  4AAE 0008 5236          tst.l     8(A6)
00002FB2  6722      5237          beq.s     @vsscanf_scanread_1
00002FB4  206E 0008 5238          move.l    8(A6),A0
00002FB8  58AE 0008 5239          addq.l    #4,8(A6)
00002FBC  2050      5240          move.l    (A0),A0
00002FBE  1010      5241          move.b    (A0),D0
00002FC0  4880      5242          ext.w     D0
00002FC2  48C0      5243          ext.l     D0
00002FC4  2D40 FFFC 5244          move.l    D0,-4(A6)
00002FC8  6706      5245          beq.s     @vsscanf_scanread_3
00002FCA  202E FFFC 5246          move.l    -4(A6),D0
00002FCE  6002      5247          bra.s     @vsscanf_scanread_4
                    5248   @vsscanf_scanread_3:
00002FD0  70FF      5249          moveq     #-1,D0
                    5250   @vsscanf_scanread_4:
00002FD2  6000 0032 5251          bra       @vsscanf_scanread_5
                    5252   @vsscanf_scanread_1:
00002FD6  2052      5253          move.l    (A2),A0
00002FD8  1010      5254          move.b    (A0),D0
00002FDA  6620      5255          bne.s     @vsscanf_scanread_6
00002FDC  4879 0B00 5256          pea       @vsscanf_buf
00002FE0  0546      
00002FE2  6100 1038 5257          bsr       _gets
00002FE6  584F      5258          addq.w    #4,A7
00002FE8  2480      5259          move.l    D0,(A2)
00002FEA  4879 0000 5260          pea       @vsscanf_1
00002FEE  5586      
00002FF0  4879 0B00 5261          pea       @vsscanf_buf
00002FF4  0546      
00002FF6  6100 FF66 5262          bsr       _strcat
00002FFA  504F      5263          addq.w    #8,A7
                    5264   @vsscanf_scanread_6:
00002FFC  2052      5265          move.l    (A2),A0
00002FFE  5292      5266          addq.l    #1,(A2)
00003000  1010      5267          move.b    (A0),D0
00003002  4880      5268          ext.w     D0
00003004  48C0      5269          ext.l     D0
                    5270   @vsscanf_scanread_5:
00003006  4CDF 0400 5271          movem.l   (A7)+,A2
0000300A  4E5E      5272          unlk      A6
0000300C  4E75      5273          rts
                    5274   @vsscanf_scanputback:
0000300E  4E56 0000 5275          link      A6,#0
00003012  48E7 3000 5276          movem.l   D2/D3,-(A7)
00003016  242E 000C 5277          move.l    12(A6),D2
0000301A  262E 0008 5278          move.l    8(A6),D3
0000301E  6718      5279          beq.s     @vsscanf_scanputback_1
00003020  0C82 FFFF 5280          cmp.l     #-1,D2
00003024  FFFF      
00003026  670A      5281          beq.s     @vsscanf_scanputback_3
00003028  5983      5282          subq.l    #4,D3
0000302A  2043      5283          move.l    D3,A0
0000302C  2050      5284          move.l    (A0),A0
0000302E  1082      5285          move.b    D2,(A0)
00003030  6004      5286          bra.s     @vsscanf_scanputback_4
                    5287   @vsscanf_scanputback_3:
00003032  2043      5288          move.l    D3,A0
00003034  5390      5289          subq.l    #1,(A0)
                    5290   @vsscanf_scanputback_4:
00003036  602E      5291          bra.s     @vsscanf_scanputback_6
                    5292   @vsscanf_scanputback_1:
00003038  41F9 0B00 5293          lea       @vsscanf_buf,A0
0000303C  0546      
0000303E  2008      5294          move.l    A0,D0
00003040  B0B9 0000 5295          cmp.l     @vsscanf_bufx,D0
00003044  5582      
00003046  6610      5296          bne.s     @vsscanf_scanputback_5
00003048  4239 0B00 5297          clr.b     @vsscanf_buf
0000304C  0546      
0000304E  2F02      5298          move.l    D2,-(A7)
00003050  6100 103C 5299          bsr       _ungetch
00003054  584F      5300          addq.w    #4,A7
00003056  600E      5301          bra.s     @vsscanf_scanputback_6
                    5302   @vsscanf_scanputback_5:
00003058  53B9 0000 5303          subq.l    #1,@vsscanf_bufx
0000305C  5582      
0000305E  2079 0000 5304          move.l    @vsscanf_bufx,A0
00003062  5582      
00003064  1082      5305          move.b    D2,(A0)
                    5306   @vsscanf_scanputback_6:
00003066  2002      5307          move.l    D2,D0
00003068  4CDF 000C 5308          movem.l   (A7)+,D2/D3
0000306C  4E5E      5309          unlk      A6
0000306E  4E75      5310          rts
                    5311   @vsscanf_scanspace:
00003070  4E56 0000 5312          link      A6,#0
00003074  48E7 2000 5313          movem.l   D2,-(A7)
                    5314   @vsscanf_scanspace_1:
00003078  2F2E 0008 5315          move.l    8(A6),-(A7)
0000307C  6100 FF22 5316          bsr       @vsscanf_scanread
00003080  584F      5317          addq.w    #4,A7
00003082  2400      5318          move.l    D0,D2
00003084  206E 000C 5319          move.l    12(A6),A0
00003088  5290      5320          addq.l    #1,(A0)
0000308A  2042      5321          move.l    D2,A0
0000308C  43F9 0000 5322          lea       __ctype,A1
00003090  5588      
00003092  1030 9801 5323          move.b    1(A0,A1.L),D0
00003096  C03C 0010 5324          and.b     #16,D0
0000309A  66DC      5325          bne       @vsscanf_scanspace_1
0000309C  2002      5326          move.l    D2,D0
0000309E  4CDF 0004 5327          movem.l   (A7)+,D2
000030A2  4E5E      5328          unlk      A6
000030A4  4E75      5329          rts
                    5330   @vsscanf_scanselect:
000030A6  4E56 0000 5331          link      A6,#0
000030AA  48E7 3F20 5332          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
000030AE  262E 000C 5333          move.l    12(A6),D3
000030B2  2C2E 0018 5334          move.l    24(A6),D6
000030B6  2E2E 0014 5335          move.l    20(A6),D7
000030BA  2043      5336          move.l    D3,A0
000030BC  1010      5337          move.b    (A0),D0
000030BE  4880      5338          ext.w     D0
000030C0  48C0      5339          ext.l     D0
000030C2  0C80 0000 5340          cmp.l     #94,D0
000030C6  005E      
000030C8  6608      5341          bne.s     @vsscanf_scanselect_1
000030CA  347C 0001 5342          move.w    #1,A2
000030CE  5283      5343          addq.l    #1,D3
000030D0  6004      5344          bra.s     @vsscanf_scanselect_2
                    5345   @vsscanf_scanselect_1:
000030D2  347C 0000 5346          move.w    #0,A2
                    5347   @vsscanf_scanselect_2:
000030D6  202E 0010 5348          move.l    16(A6),D0
000030DA  53AE 0010 5349          subq.l    #1,16(A6)
000030DE  4A80      5350          tst.l     D0
000030E0  6700 0108 5351          beq       @vsscanf_scanselect_5
000030E4  2F2E 0008 5352          move.l    8(A6),-(A7)
000030E8  6100 FEB6 5353          bsr       @vsscanf_scanread
000030EC  584F      5354          addq.w    #4,A7
000030EE  2800      5355          move.l    D0,D4
000030F0  0C84 FFFF 5356          cmp.l     #-1,D4
000030F4  FFFF      
000030F6  6604      5357          bne.s     @vsscanf_scanselect_6
000030F8  6000 00F0 5358          bra       @vsscanf_scanselect_5
                    5359   @vsscanf_scanselect_6:
000030FC  206E 001C 5360          move.l    28(A6),A0
00003100  5290      5361          addq.l    #1,(A0)
00003102  4285      5362          clr.l     D5
00003104  4282      5363          clr.l     D2
                    5364   @vsscanf_scanselect_8:
00003106  2043      5365          move.l    D3,A0
00003108  1030 2800 5366          move.b    0(A0,D2.L),D0
0000310C  4880      5367          ext.w     D0
0000310E  48C0      5368          ext.l     D0
00003110  0C80 0000 5369          cmp.l     #93,D0
00003114  005D      
00003116  6700 008E 5370          beq       @vsscanf_scanselect_10
0000311A  4A82      5371          tst.l     D2
0000311C  6716      5372          beq.s     @vsscanf_scanselect_11
0000311E  2043      5373          move.l    D3,A0
00003120  1030 2800 5374          move.b    0(A0,D2.L),D0
00003124  4880      5375          ext.w     D0
00003126  48C0      5376          ext.l     D0
00003128  0C80 0000 5377          cmp.l     #93,D0
0000312C  005D      
0000312E  6604      5378          bne.s     @vsscanf_scanselect_11
00003130  6000 0074 5379          bra       @vsscanf_scanselect_10
                    5380   @vsscanf_scanselect_11:
00003134  4A82      5381          tst.l     D2
00003136  6700 0058 5382          beq       @vsscanf_scanselect_15
0000313A  2043      5383          move.l    D3,A0
0000313C  1030 2800 5384          move.b    0(A0,D2.L),D0
00003140  4880      5385          ext.w     D0
00003142  48C0      5386          ext.l     D0
00003144  0C80 0000 5387          cmp.l     #45,D0
00003148  002D      
0000314A  6600 0044 5388          bne       @vsscanf_scanselect_15
0000314E  2043      5389          move.l    D3,A0
00003150  2002      5390          move.l    D2,D0
00003152  5380      5391          subq.l    #1,D0
00003154  2243      5392          move.l    D3,A1
00003156  2F08      5393          move.l    A0,-(A7)
00003158  2042      5394          move.l    D2,A0
0000315A  1230 0800 5395          move.b    0(A0,D0.L),D1
0000315E  B230 9801 5396          cmp.b     1(A0,A1.L),D1
00003162  6C00 002C 5397          bge       @vsscanf_scanselect_15
00003166  205F      5398          move.l    (A7)+,A0
00003168  2043      5399          move.l    D3,A0
0000316A  2002      5400          move.l    D2,D0
0000316C  5380      5401          subq.l    #1,D0
0000316E  1030 0800 5402          move.b    0(A0,D0.L),D0
00003172  4880      5403          ext.w     D0
00003174  48C0      5404          ext.l     D0
00003176  B880      5405          cmp.l     D0,D4
00003178  6D12      5406          blt.s     @vsscanf_scanselect_17
0000317A  2043      5407          move.l    D3,A0
0000317C  2242      5408          move.l    D2,A1
0000317E  1031 8801 5409          move.b    1(A1,A0.L),D0
00003182  4880      5410          ext.w     D0
00003184  48C0      5411          ext.l     D0
00003186  B880      5412          cmp.l     D0,D4
00003188  6E02      5413          bgt.s     @vsscanf_scanselect_17
0000318A  601A      5414          bra.s     @vsscanf_scanselect_10
                    5415   @vsscanf_scanselect_17:
0000318C  5282      5416          addq.l    #1,D2
0000318E  6010      5417          bra.s     @vsscanf_scanselect_19
                    5418   @vsscanf_scanselect_15:
00003190  2043      5419          move.l    D3,A0
00003192  1030 2800 5420          move.b    0(A0,D2.L),D0
00003196  4880      5421          ext.w     D0
00003198  48C0      5422          ext.l     D0
0000319A  B880      5423          cmp.l     D0,D4
0000319C  6602      5424          bne.s     @vsscanf_scanselect_19
0000319E  6006      5425          bra.s     @vsscanf_scanselect_10
                    5426   @vsscanf_scanselect_19:
000031A0  5282      5427          addq.l    #1,D2
000031A2  6000 FF62 5428          bra       @vsscanf_scanselect_8
                    5429   @vsscanf_scanselect_10:
000031A6  4A82      5430          tst.l     D2
000031A8  6712      5431          beq.s     @vsscanf_scanselect_23
000031AA  2043      5432          move.l    D3,A0
000031AC  1030 2800 5433          move.b    0(A0,D2.L),D0
000031B0  4880      5434          ext.w     D0
000031B2  48C0      5435          ext.l     D0
000031B4  0C80 0000 5436          cmp.l     #93,D0
000031B8  005D      
000031BA  6702      5437          beq.s     @vsscanf_scanselect_21
                    5438   @vsscanf_scanselect_23:
000031BC  7A01      5439          moveq     #1,D5
                    5440   @vsscanf_scanselect_21:
000031BE  200A      5441          move.l    A2,D0
000031C0  6712      5442          beq.s     @vsscanf_scanselect_24
000031C2  4A85      5443          tst.l     D5
000031C4  660C      5444          bne.s     @vsscanf_scanselect_26
000031C6  4A87      5445          tst.l     D7
000031C8  6606      5446          bne.s     @vsscanf_scanselect_28
000031CA  2046      5447          move.l    D6,A0
000031CC  5286      5448          addq.l    #1,D6
000031CE  1084      5449          move.b    D4,(A0)
                    5450   @vsscanf_scanselect_28:
000031D0  6014      5451          bra.s     @vsscanf_scanselect_4
                    5452   @vsscanf_scanselect_26:
000031D2  6016      5453          bra.s     @vsscanf_scanselect_5
                    5454   @vsscanf_scanselect_24:
000031D4  4A85      5455          tst.l     D5
000031D6  670C      5456          beq.s     @vsscanf_scanselect_30
000031D8  4A87      5457          tst.l     D7
000031DA  6606      5458          bne.s     @vsscanf_scanselect_32
000031DC  2046      5459          move.l    D6,A0
000031DE  5286      5460          addq.l    #1,D6
000031E0  1084      5461          move.b    D4,(A0)
                    5462   @vsscanf_scanselect_32:
000031E2  6002      5463          bra.s     @vsscanf_scanselect_4
                    5464   @vsscanf_scanselect_30:
000031E4  6004      5465          bra.s     @vsscanf_scanselect_5
                    5466   @vsscanf_scanselect_4:
000031E6  6000 FEEE 5467          bra       @vsscanf_scanselect_2
                    5468   @vsscanf_scanselect_5:
000031EA  0C84 FFFF 5469          cmp.l     #-1,D4
000031EE  FFFF      
000031F0  6712      5470          beq.s     @vsscanf_scanselect_34
000031F2  2F04      5471          move.l    D4,-(A7)
000031F4  2F2E 0008 5472          move.l    8(A6),-(A7)
000031F8  6100 FE14 5473          bsr       @vsscanf_scanputback
000031FC  504F      5474          addq.w    #8,A7
000031FE  206E 001C 5475          move.l    28(A6),A0
00003202  5390      5476          subq.l    #1,(A0)
                    5477   @vsscanf_scanselect_34:
00003204  4A87      5478          tst.l     D7
00003206  6604      5479          bne.s     @vsscanf_scanselect_36
00003208  2046      5480          move.l    D6,A0
0000320A  4210      5481          clr.b     (A0)
                    5482   @vsscanf_scanselect_36:
0000320C  5283      5483          addq.l    #1,D3
0000320E  2043      5484          move.l    D3,A0
00003210  1010      5485          move.b    (A0),D0
00003212  4880      5486          ext.w     D0
00003214  48C0      5487          ext.l     D0
00003216  0C80 0000 5488          cmp.l     #93,D0
0000321A  005D      
0000321C  6702      5489          beq.s     @vsscanf_scanselect_40
0000321E  60EC      5490          bra       @vsscanf_scanselect_36
                    5491   @vsscanf_scanselect_40:
00003220  5283      5492          addq.l    #1,D3
00003222  2003      5493          move.l    D3,D0
00003224  4CDF 04FC 5494          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003228  4E5E      5495          unlk      A6
0000322A  4E75      5496          rts
                    5497   _scanflush:
0000322C  41F9 0B00 5498          lea       @vsscanf_buf,A0
00003230  0546      
00003232  23C8 0000 5499          move.l    A0,@vsscanf_bufx
00003236  5582      
00003238  4239 0B00 5500          clr.b     @vsscanf_buf
0000323C  0546      
0000323E  4878 FFFF 5501          pea       -1
00003242  6100 0E4A 5502          bsr       _ungetch
00003246  584F      5503          addq.w    #4,A7
00003248  4E75      5504          rts
                    5505   _vsscanf:
0000324A  4E56 FF88 5506          link      A6,#-120
0000324E  48E7 3F3C 5507          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003252  47F8 2FA0 5508          lea       @vsscanf_scanread,A3
00003256  4AAE 0008 5509          tst.l     8(A6)
0000325A  6706      5510          beq.s     vsscanf_1
0000325C  41EE 0008 5511          lea       8(A6),A0
00003260  6004      5512          bra.s     vsscanf_2
                    5513   vsscanf_1:
00003262  4280      5514          clr.l     D0
00003264  2040      5515          move.l    D0,A0
                    5516   vsscanf_2:
00003266  2A08      5517          move.l    A0,D5
00003268  42AE FFE4 5518          clr.l     -28(A6)
0000326C  4284      5519          clr.l     D4
                    5520   vsscanf_3:
0000326E  206E 000C 5521          move.l    12(A6),A0
00003272  52AE 000C 5522          addq.l    #1,12(A6)
00003276  1010      5523          move.b    (A0),D0
00003278  4880      5524          ext.w     D0
0000327A  48C0      5525          ext.l     D0
0000327C  2600      5526          move.l    D0,D3
0000327E  6700 05AC 5527          beq       vsscanf_5
00003282  4286      5528          clr.l     D6
00003284  387C 0000 5529          move.w    #0,A4
00003288  0C83 0000 5530          cmp.l     #32,D3
0000328C  0020      
0000328E  6712      5531          beq.s     vsscanf_8
00003290  0C83 0000 5532          cmp.l     #9,D3
00003294  0009      
00003296  670A      5533          beq.s     vsscanf_8
00003298  0C83 0000 5534          cmp.l     #10,D3
0000329C  000A      
0000329E  6600 0048 5535          bne       vsscanf_6
                    5536   vsscanf_8:
000032A2  2F05      5537          move.l    D5,-(A7)
000032A4  4E93      5538          jsr       (A3)
000032A6  584F      5539          addq.w    #4,A7
000032A8  2400      5540          move.l    D0,D2
000032AA  52AE FFE4 5541          addq.l    #1,-28(A6)
000032AE  0C82 FFFF 5542          cmp.l     #-1,D2
000032B2  FFFF      
000032B4  660E      5543          bne.s     vsscanf_11
000032B6  4A84      5544          tst.l     D4
000032B8  6704      5545          beq.s     vsscanf_13
000032BA  2004      5546          move.l    D4,D0
000032BC  6002      5547          bra.s     vsscanf_14
                    5548   vsscanf_13:
000032BE  70FF      5549          moveq     #-1,D0
                    5550   vsscanf_14:
000032C0  6000 056C 5551          bra       vsscanf_15
                    5552   vsscanf_11:
000032C4  2042      5553          move.l    D2,A0
000032C6  43F9 0000 5554          lea       __ctype,A1
000032CA  5588      
000032CC  1030 9801 5555          move.b    1(A0,A1.L),D0
000032D0  C03C 0010 5556          and.b     #16,D0
000032D4  66CC      5557          bne       vsscanf_8
000032D6  53AE FFE4 5558          subq.l    #1,-28(A6)
000032DA  2F02      5559          move.l    D2,-(A7)
000032DC  2F05      5560          move.l    D5,-(A7)
000032DE  6100 FD2E 5561          bsr       @vsscanf_scanputback
000032E2  504F      5562          addq.w    #8,A7
000032E4  6000 0542 5563          bra       vsscanf_139
                    5564   vsscanf_6:
000032E8  0C83 0000 5565          cmp.l     #37,D3
000032EC  0025      
000032EE  6600 0502 5566          bne       vsscanf_127
000032F2  206E 000C 5567          move.l    12(A6),A0
000032F6  52AE 000C 5568          addq.l    #1,12(A6)
000032FA  1010      5569          move.b    (A0),D0
000032FC  4880      5570          ext.w     D0
000032FE  48C0      5571          ext.l     D0
00003300  2600      5572          move.l    D0,D3
00003302  42AE FFEC 5573          clr.l     -20(A6)
00003306  4286      5574          clr.l     D6
00003308  42AE FFE8 5575          clr.l     -24(A6)
0000330C  347C 7FFF 5576          move.w    #32767,A2
00003310  0C83 0000 5577          cmp.l     #42,D3
00003314  002A      
00003316  6612      5578          bne.s     vsscanf_18
00003318  7C01      5579          moveq     #1,D6
0000331A  206E 000C 5580          move.l    12(A6),A0
0000331E  52AE 000C 5581          addq.l    #1,12(A6)
00003322  1010      5582          move.b    (A0),D0
00003324  4880      5583          ext.w     D0
00003326  48C0      5584          ext.l     D0
00003328  2600      5585          move.l    D0,D3
                    5586   vsscanf_18:
0000332A  2043      5587          move.l    D3,A0
0000332C  43F9 0000 5588          lea       __ctype,A1
00003330  5588      
00003332  1030 9801 5589          move.b    1(A0,A1.L),D0
00003336  C03C 0004 5590          and.b     #4,D0
0000333A  6700 004E 5591          beq       vsscanf_24
0000333E  2003      5592          move.l    D3,D0
00003340  0480 0000 5593          sub.l     #48,D0
00003344  0030      
00003346  2440      5594          move.l    D0,A2
                    5595   vsscanf_22:
00003348  206E 000C 5596          move.l    12(A6),A0
0000334C  52AE 000C 5597          addq.l    #1,12(A6)
00003350  1010      5598          move.b    (A0),D0
00003352  4880      5599          ext.w     D0
00003354  48C0      5600          ext.l     D0
00003356  2600      5601          move.l    D0,D3
00003358  2040      5602          move.l    D0,A0
0000335A  43F9 0000 5603          lea       __ctype,A1
0000335E  5588      
00003360  1030 9801 5604          move.b    1(A0,A1.L),D0
00003364  C0BC 0000 5605          and.l     #255,D0
00003368  00FF      
0000336A  C0BC 0000 5606          and.l     #4,D0
0000336E  0004      
00003370  6718      5607          beq.s     vsscanf_24
00003372  70D0      5608          moveq     #-48,D0
00003374  2F0A      5609          move.l    A2,-(A7)
00003376  4878 000A 5610          pea       10
0000337A  6100 0C12 5611          bsr       LMUL
0000337E  2217      5612          move.l    (A7),D1
00003380  504F      5613          addq.w    #8,A7
00003382  D283      5614          add.l     D3,D1
00003384  D081      5615          add.l     D1,D0
00003386  2440      5616          move.l    D0,A2
00003388  60BE      5617          bra       vsscanf_22
                    5618   vsscanf_24:
0000338A  0C83 0000 5619          cmp.l     #108,D3
0000338E  006C      
00003390  6708      5620          beq.s     vsscanf_27
00003392  0C83 0000 5621          cmp.l     #76,D3
00003396  004C      
00003398  661A      5622          bne.s     vsscanf_25
                    5623   vsscanf_27:
0000339A  2D7C 0000 5624          move.l    #1,-24(A6)
0000339E  0001 FFE8 
000033A2  206E 000C 5625          move.l    12(A6),A0
000033A6  52AE 000C 5626          addq.l    #1,12(A6)
000033AA  1010      5627          move.b    (A0),D0
000033AC  4880      5628          ext.w     D0
000033AE  48C0      5629          ext.l     D0
000033B0  2600      5630          move.l    D0,D3
000033B2  6020      5631          bra.s     vsscanf_28
                    5632   vsscanf_25:
000033B4  0C83 0000 5633          cmp.l     #104,D3
000033B8  0068      
000033BA  6618      5634          bne.s     vsscanf_28
000033BC  2D7C 0000 5635          move.l    #1,-20(A6)
000033C0  0001 FFEC 
000033C4  206E 000C 5636          move.l    12(A6),A0
000033C8  52AE 000C 5637          addq.l    #1,12(A6)
000033CC  1010      5638          move.b    (A0),D0
000033CE  4880      5639          ext.w     D0
000033D0  48C0      5640          ext.l     D0
000033D2  2600      5641          move.l    D0,D3
                    5642   vsscanf_28:
000033D4  0C83 0000 5643          cmp.l     #91,D3
000033D8  005B      
000033DA  6600 0036 5644          bne       vsscanf_30
000033DE  4A86      5645          tst.l     D6
000033E0  660A      5646          bne.s     vsscanf_32
000033E2  206E 0010 5647          move.l    16(A6),A0
000033E6  58AE 0010 5648          addq.l    #4,16(A6)
000033EA  2E10      5649          move.l    (A0),D7
                    5650   vsscanf_32:
000033EC  486E FFE4 5651          pea       -28(A6)
000033F0  2F07      5652          move.l    D7,-(A7)
000033F2  2F06      5653          move.l    D6,-(A7)
000033F4  2F0A      5654          move.l    A2,-(A7)
000033F6  2F2E 000C 5655          move.l    12(A6),-(A7)
000033FA  2F05      5656          move.l    D5,-(A7)
000033FC  6100 FCA8 5657          bsr       @vsscanf_scanselect
00003400  DEFC 0018 5658          add.w     #24,A7
00003404  2D40 000C 5659          move.l    D0,12(A6)
00003408  4A86      5660          tst.l     D6
0000340A  6602      5661          bne.s     vsscanf_34
0000340C  5284      5662          addq.l    #1,D4
                    5663   vsscanf_34:
0000340E  6000 0418 5664          bra       vsscanf_139
                    5665   vsscanf_30:
00003412  0C83 0000 5666          cmp.l     #110,D3
00003416  006E      
00003418  661A      5667          bne.s     vsscanf_36
0000341A  4A86      5668          tst.l     D6
0000341C  6612      5669          bne.s     vsscanf_38
0000341E  206E 0010 5670          move.l    16(A6),A0
00003422  58AE 0010 5671          addq.l    #4,16(A6)
00003426  2E10      5672          move.l    (A0),D7
00003428  2047      5673          move.l    D7,A0
0000342A  20AE FFE4 5674          move.l    -28(A6),(A0)
0000342E  5284      5675          addq.l    #1,D4
                    5676   vsscanf_38:
00003430  6000 03F6 5677          bra       vsscanf_139
                    5678   vsscanf_36:
00003434  0C83 0000 5679          cmp.l     #115,D3
00003438  0073      
0000343A  6600 00AC 5680          bne       vsscanf_40
0000343E  486E FFE4 5681          pea       -28(A6)
00003442  2F05      5682          move.l    D5,-(A7)
00003444  6100 FC2A 5683          bsr       @vsscanf_scanspace
00003448  504F      5684          addq.w    #8,A7
0000344A  2400      5685          move.l    D0,D2
0000344C  4A86      5686          tst.l     D6
0000344E  660A      5687          bne.s     vsscanf_42
00003450  206E 0010 5688          move.l    16(A6),A0
00003454  58AE 0010 5689          addq.l    #4,16(A6)
00003458  2E10      5690          move.l    (A0),D7
                    5691   vsscanf_42:
0000345A  52AE FFE4 5692          addq.l    #1,-28(A6)
                    5693   vsscanf_44:
0000345E  200A      5694          move.l    A2,D0
00003460  534A      5695          subq.w    #1,A2
00003462  4A80      5696          tst.l     D0
00003464  6700 0038 5697          beq       vsscanf_46
00003468  2042      5698          move.l    D2,A0
0000346A  43F9 0000 5699          lea       __ctype,A1
0000346E  5588      
00003470  1030 9801 5700          move.b    1(A0,A1.L),D0
00003474  C03C 0010 5701          and.b     #16,D0
00003478  6624      5702          bne.s     vsscanf_46
0000347A  0C82 FFFF 5703          cmp.l     #-1,D2
0000347E  FFFF      
00003480  671C      5704          beq.s     vsscanf_46
00003482  387C 0001 5705          move.w    #1,A4
00003486  4A86      5706          tst.l     D6
00003488  6606      5707          bne.s     vsscanf_47
0000348A  2047      5708          move.l    D7,A0
0000348C  5287      5709          addq.l    #1,D7
0000348E  1082      5710          move.b    D2,(A0)
                    5711   vsscanf_47:
00003490  2F05      5712          move.l    D5,-(A7)
00003492  4E93      5713          jsr       (A3)
00003494  584F      5714          addq.w    #4,A7
00003496  2400      5715          move.l    D0,D2
00003498  52AE FFE4 5716          addq.l    #1,-28(A6)
0000349C  60C0      5717          bra       vsscanf_44
                    5718   vsscanf_46:
0000349E  4A86      5719          tst.l     D6
000034A0  660A      5720          bne.s     vsscanf_51
000034A2  2047      5721          move.l    D7,A0
000034A4  4210      5722          clr.b     (A0)
000034A6  200C      5723          move.l    A4,D0
000034A8  6702      5724          beq.s     vsscanf_51
000034AA  5284      5725          addq.l    #1,D4
                    5726   vsscanf_51:
000034AC  0C82 FFFF 5727          cmp.l     #-1,D2
000034B0  FFFF      
000034B2  6708      5728          beq.s     vsscanf_55
000034B4  4A86      5729          tst.l     D6
000034B6  661E      5730          bne.s     vsscanf_53
000034B8  200C      5731          move.l    A4,D0
000034BA  661A      5732          bne.s     vsscanf_53
                    5733   vsscanf_55:
000034BC  4A84      5734          tst.l     D4
000034BE  6704      5735          beq.s     vsscanf_56
000034C0  2004      5736          move.l    D4,D0
000034C2  600E      5737          bra.s     vsscanf_59
                    5738   vsscanf_56:
000034C4  0C82 FFFF 5739          cmp.l     #-1,D2
000034C8  FFFF      
000034CA  6604      5740          bne.s     vsscanf_58
000034CC  70FF      5741          moveq     #-1,D0
000034CE  6002      5742          bra.s     vsscanf_59
                    5743   vsscanf_58:
000034D0  2004      5744          move.l    D4,D0
                    5745   vsscanf_59:
000034D2  6000 035A 5746          bra       vsscanf_15
                    5747   vsscanf_53:
000034D6  53AE FFE4 5748          subq.l    #1,-28(A6)
000034DA  2F02      5749          move.l    D2,-(A7)
000034DC  2F05      5750          move.l    D5,-(A7)
000034DE  6100 FB2E 5751          bsr       @vsscanf_scanputback
000034E2  504F      5752          addq.w    #8,A7
000034E4  6000 0342 5753          bra       vsscanf_139
                    5754   vsscanf_40:
000034E8  0C83 0000 5755          cmp.l     #99,D3
000034EC  0063      
000034EE  6600 008E 5756          bne       vsscanf_60
000034F2  4A86      5757          tst.l     D6
000034F4  660A      5758          bne.s     vsscanf_62
000034F6  206E 0010 5759          move.l    16(A6),A0
000034FA  58AE 0010 5760          addq.l    #4,16(A6)
000034FE  2E10      5761          move.l    (A0),D7
                    5762   vsscanf_62:
00003500  2F05      5763          move.l    D5,-(A7)
00003502  4E93      5764          jsr       (A3)
00003504  584F      5765          addq.w    #4,A7
00003506  2400      5766          move.l    D0,D2
00003508  52AE FFE4 5767          addq.l    #1,-28(A6)
0000350C  200A      5768          move.l    A2,D0
0000350E  0C80 0000 5769          cmp.l     #32767,D0
00003512  7FFF      
00003514  6604      5770          bne.s     vsscanf_64
00003516  347C 0001 5771          move.w    #1,A2
                    5772   vsscanf_64:
0000351A  0C82 FFFF 5773          cmp.l     #-1,D2
0000351E  FFFF      
00003520  6606      5774          bne.s     vsscanf_66
00003522  4A86      5775          tst.l     D6
00003524  6602      5776          bne.s     vsscanf_66
00003526  5384      5777          subq.l    #1,D4
                    5778   vsscanf_66:
00003528  200A      5779          move.l    A2,D0
0000352A  534A      5780          subq.w    #1,A2
0000352C  4A80      5781          tst.l     D0
0000352E  6720      5782          beq.s     vsscanf_70
00003530  0C82 FFFF 5783          cmp.l     #-1,D2
00003534  FFFF      
00003536  6718      5784          beq.s     vsscanf_70
00003538  4A86      5785          tst.l     D6
0000353A  6606      5786          bne.s     vsscanf_71
0000353C  2047      5787          move.l    D7,A0
0000353E  5287      5788          addq.l    #1,D7
00003540  1082      5789          move.b    D2,(A0)
                    5790   vsscanf_71:
00003542  2F05      5791          move.l    D5,-(A7)
00003544  4E93      5792          jsr       (A3)
00003546  584F      5793          addq.w    #4,A7
00003548  2400      5794          move.l    D0,D2
0000354A  52AE FFE4 5795          addq.l    #1,-28(A6)
0000354E  60D8      5796          bra       vsscanf_66
                    5797   vsscanf_70:
00003550  0C82 FFFF 5798          cmp.l     #-1,D2
00003554  FFFF      
00003556  660E      5799          bne.s     vsscanf_73
00003558  4A84      5800          tst.l     D4
0000355A  6704      5801          beq.s     vsscanf_75
0000355C  2004      5802          move.l    D4,D0
0000355E  6002      5803          bra.s     vsscanf_76
                    5804   vsscanf_75:
00003560  70FF      5805          moveq     #-1,D0
                    5806   vsscanf_76:
00003562  6000 02CA 5807          bra       vsscanf_15
                    5808   vsscanf_73:
00003566  4A86      5809          tst.l     D6
00003568  6602      5810          bne.s     vsscanf_77
0000356A  5284      5811          addq.l    #1,D4
                    5812   vsscanf_77:
0000356C  53AE FFE4 5813          subq.l    #1,-28(A6)
00003570  2F02      5814          move.l    D2,-(A7)
00003572  2F05      5815          move.l    D5,-(A7)
00003574  6100 FA98 5816          bsr       @vsscanf_scanputback
00003578  504F      5817          addq.w    #8,A7
0000357A  6000 02AC 5818          bra       vsscanf_139
                    5819   vsscanf_60:
0000357E  0C83 0000 5820          cmp.l     #105,D3
00003582  0069      
00003584  6600 0060 5821          bne       vsscanf_82
00003588  486E FFE4 5822          pea       -28(A6)
0000358C  2F05      5823          move.l    D5,-(A7)
0000358E  6100 FAE0 5824          bsr       @vsscanf_scanspace
00003592  504F      5825          addq.w    #8,A7
00003594  2400      5826          move.l    D0,D2
00003596  0C82 0000 5827          cmp.l     #48,D2
0000359A  0030      
0000359C  6600 0038 5828          bne       vsscanf_81
000035A0  387C 0001 5829          move.w    #1,A4
000035A4  2F05      5830          move.l    D5,-(A7)
000035A6  4E93      5831          jsr       (A3)
000035A8  584F      5832          addq.w    #4,A7
000035AA  2400      5833          move.l    D0,D2
000035AC  2F02      5834          move.l    D2,-(A7)
000035AE  6100 F936 5835          bsr       _tolower
000035B2  584F      5836          addq.w    #4,A7
000035B4  0C80 0000 5837          cmp.l     #120,D0
000035B8  0078      
000035BA  6604      5838          bne.s     vsscanf_83
000035BC  7678      5839          moveq     #120,D3
000035BE  6010      5840          bra.s     vsscanf_84
                    5841   vsscanf_83:
000035C0  53AE FFE4 5842          subq.l    #1,-28(A6)
000035C4  2F02      5843          move.l    D2,-(A7)
000035C6  2F05      5844          move.l    D5,-(A7)
000035C8  6100 FA44 5845          bsr       @vsscanf_scanputback
000035CC  504F      5846          addq.w    #8,A7
000035CE  766F      5847          moveq     #111,D3
                    5848   vsscanf_84:
000035D0  52AE FFE4 5849          addq.l    #1,-28(A6)
000035D4  6010      5850          bra.s     vsscanf_82
                    5851   vsscanf_81:
000035D6  53AE FFE4 5852          subq.l    #1,-28(A6)
000035DA  2F02      5853          move.l    D2,-(A7)
000035DC  2F05      5854          move.l    D5,-(A7)
000035DE  6100 FA2E 5855          bsr       @vsscanf_scanputback
000035E2  504F      5856          addq.w    #8,A7
000035E4  7664      5857          moveq     #100,D3
                    5858   vsscanf_82:
000035E6  0C83 0000 5859          cmp.l     #100,D3
000035EA  0064      
000035EC  671A      5860          beq.s     vsscanf_87
000035EE  0C83 0000 5861          cmp.l     #117,D3
000035F2  0075      
000035F4  6712      5862          beq.s     vsscanf_87
000035F6  0C83 0000 5863          cmp.l     #120,D3
000035FA  0078      
000035FC  670A      5864          beq.s     vsscanf_87
000035FE  0C83 0000 5865          cmp.l     #111,D3
00003602  006F      
00003604  6600 01A4 5866          bne       vsscanf_85
                    5867   vsscanf_87:
00003608  486E FFE4 5868          pea       -28(A6)
0000360C  2F05      5869          move.l    D5,-(A7)
0000360E  6100 FA60 5870          bsr       @vsscanf_scanspace
00003612  504F      5871          addq.w    #8,A7
00003614  2400      5872          move.l    D0,D2
00003616  2D7C 0000 5873          move.l    #10,-4(A6)
0000361A  000A FFFC 
0000361E  0C83 0000 5874          cmp.l     #120,D3
00003622  0078      
00003624  6608      5875          bne.s     vsscanf_88
00003626  2D7C 0000 5876          move.l    #16,-4(A6)
0000362A  0010 FFFC 
                    5877   vsscanf_88:
0000362E  0C83 0000 5878          cmp.l     #111,D3
00003632  006F      
00003634  6608      5879          bne.s     vsscanf_90
00003636  2D7C 0000 5880          move.l    #8,-4(A6)
0000363A  0008 FFFC 
                    5881   vsscanf_90:
0000363E  4A86      5882          tst.l     D6
00003640  660A      5883          bne.s     vsscanf_92
00003642  206E 0010 5884          move.l    16(A6),A0
00003646  58AE 0010 5885          addq.l    #4,16(A6)
0000364A  2E10      5886          move.l    (A0),D7
                    5887   vsscanf_92:
0000364C  42AE FFE0 5888          clr.l     -32(A6)
00003650  52AE FFE4 5889          addq.l    #1,-28(A6)
00003654  0C83 0000 5890          cmp.l     #117,D3
00003658  0075      
0000365A  6720      5891          beq.s     vsscanf_94
0000365C  0C82 0000 5892          cmp.l     #45,D2
00003660  002D      
00003662  6618      5893          bne.s     vsscanf_94
00003664  2F05      5894          move.l    D5,-(A7)
00003666  4E93      5895          jsr       (A3)
00003668  584F      5896          addq.w    #4,A7
0000366A  2400      5897          move.l    D0,D2
0000366C  52AE FFE4 5898          addq.l    #1,-28(A6)
00003670  2D7C 0000 5899          move.l    #1,-32(A6)
00003674  0001 FFE0 
00003678  387C 0001 5900          move.w    #1,A4
                    5901   vsscanf_94:
0000367C  3A7C 0000 5902          move.w    #0,A5
00003680  0C82 FFFF 5903          cmp.l     #-1,D2
00003684  FFFF      
00003686  660E      5904          bne.s     vsscanf_96
00003688  4A84      5905          tst.l     D4
0000368A  6704      5906          beq.s     vsscanf_98
0000368C  2004      5907          move.l    D4,D0
0000368E  6002      5908          bra.s     vsscanf_99
                    5909   vsscanf_98:
00003690  70FF      5910          moveq     #-1,D0
                    5911   vsscanf_99:
00003692  6000 019A 5912          bra       vsscanf_15
                    5913   vsscanf_96:
00003696  200A      5914          move.l    A2,D0
00003698  534A      5915          subq.w    #1,A2
0000369A  4A80      5916          tst.l     D0
0000369C  6700 0090 5917          beq       vsscanf_102
000036A0  0C83 0000 5918          cmp.l     #120,D3
000036A4  0078      
000036A6  6620      5919          bne.s     vsscanf_104
000036A8  2F02      5920          move.l    D2,-(A7)
000036AA  6100 F8C8 5921          bsr       _toupper
000036AE  584F      5922          addq.w    #4,A7
000036B0  0C80 0000 5923          cmp.l     #65,D0
000036B4  0041      
000036B6  6D10      5924          blt.s     vsscanf_104
000036B8  2F02      5925          move.l    D2,-(A7)
000036BA  6100 F8B8 5926          bsr       _toupper
000036BE  584F      5927          addq.w    #4,A7
000036C0  0C80 0000 5928          cmp.l     #70,D0
000036C4  0046      
000036C6  6F14      5929          ble.s     vsscanf_103
                    5930   vsscanf_104:
000036C8  2042      5931          move.l    D2,A0
000036CA  43F9 0000 5932          lea       __ctype,A1
000036CE  5588      
000036D0  1030 9801 5933          move.b    1(A0,A1.L),D0
000036D4  C03C 0004 5934          and.b     #4,D0
000036D8  6700 0054 5935          beq       vsscanf_102
                    5936   vsscanf_103:
000036DC  2042      5937          move.l    D2,A0
000036DE  43F9 0000 5938          lea       __ctype,A1
000036E2  5588      
000036E4  1030 9801 5939          move.b    1(A0,A1.L),D0
000036E8  C03C 0004 5940          and.b     #4,D0
000036EC  6614      5941          bne.s     vsscanf_105
000036EE  70F9      5942          moveq     #-7,D0
000036F0  2F00      5943          move.l    D0,-(A7)
000036F2  2F02      5944          move.l    D2,-(A7)
000036F4  6100 F87E 5945          bsr       _toupper
000036F8  584F      5946          addq.w    #4,A7
000036FA  2200      5947          move.l    D0,D1
000036FC  201F      5948          move.l    (A7)+,D0
000036FE  D081      5949          add.l     D1,D0
00003700  2400      5950          move.l    D0,D2
                    5951   vsscanf_105:
00003702  2F0D      5952          move.l    A5,-(A7)
00003704  2F2E FFFC 5953          move.l    -4(A6),-(A7)
00003708  6100 0884 5954          bsr       LMUL
0000370C  2017      5955          move.l    (A7),D0
0000370E  504F      5956          addq.w    #8,A7
00003710  D082      5957          add.l     D2,D0
00003712  0480 0000 5958          sub.l     #48,D0
00003716  0030      
00003718  2A40      5959          move.l    D0,A5
0000371A  2F05      5960          move.l    D5,-(A7)
0000371C  4E93      5961          jsr       (A3)
0000371E  584F      5962          addq.w    #4,A7
00003720  2400      5963          move.l    D0,D2
00003722  52AE FFE4 5964          addq.l    #1,-28(A6)
00003726  387C 0001 5965          move.w    #1,A4
0000372A  6000 FF6A 5966          bra       vsscanf_96
                    5967   vsscanf_102:
0000372E  0C82 FFFF 5968          cmp.l     #-1,D2
00003732  FFFF      
00003734  671A      5969          beq.s     vsscanf_107
00003736  2F02      5970          move.l    D2,-(A7)
00003738  2F05      5971          move.l    D5,-(A7)
0000373A  6100 F8D2 5972          bsr       @vsscanf_scanputback
0000373E  504F      5973          addq.w    #8,A7
00003740  53AE FFE4 5974          subq.l    #1,-28(A6)
00003744  200C      5975          move.l    A4,D0
00003746  6606      5976          bne.s     vsscanf_109
00003748  2004      5977          move.l    D4,D0
0000374A  6000 00E2 5978          bra       vsscanf_15
                    5979   vsscanf_109:
0000374E  6012      5980          bra.s     vsscanf_111
                    5981   vsscanf_107:
00003750  200C      5982          move.l    A4,D0
00003752  660E      5983          bne.s     vsscanf_111
00003754  4A84      5984          tst.l     D4
00003756  6704      5985          beq.s     vsscanf_113
00003758  2004      5986          move.l    D4,D0
0000375A  6002      5987          bra.s     vsscanf_114
                    5988   vsscanf_113:
0000375C  70FF      5989          moveq     #-1,D0
                    5990   vsscanf_114:
0000375E  6000 00CE 5991          bra       vsscanf_15
                    5992   vsscanf_111:
00003762  4AAE FFE0 5993          tst.l     -32(A6)
00003766  6706      5994          beq.s     vsscanf_115
00003768  200D      5995          move.l    A5,D0
0000376A  4480      5996          neg.l     D0
0000376C  2A40      5997          move.l    D0,A5
                    5998   vsscanf_115:
0000376E  4A86      5999          tst.l     D6
00003770  661E      6000          bne.s     vsscanf_117
00003772  4AAE FFE8 6001          tst.l     -24(A6)
00003776  6706      6002          beq.s     vsscanf_119
00003778  2047      6003          move.l    D7,A0
0000377A  208D      6004          move.l    A5,(A0)
0000377C  6010      6005          bra.s     vsscanf_122
                    6006   vsscanf_119:
0000377E  4AAE FFEC 6007          tst.l     -20(A6)
00003782  6706      6008          beq.s     vsscanf_121
00003784  2047      6009          move.l    D7,A0
00003786  308D      6010          move.w    A5,(A0)
00003788  6004      6011          bra.s     vsscanf_122
                    6012   vsscanf_121:
0000378A  2047      6013          move.l    D7,A0
0000378C  208D      6014          move.l    A5,(A0)
                    6015   vsscanf_122:
0000378E  5284      6016          addq.l    #1,D4
                    6017   vsscanf_117:
00003790  0C82 FFFF 6018          cmp.l     #-1,D2
00003794  FFFF      
00003796  660E      6019          bne.s     vsscanf_123
00003798  4A84      6020          tst.l     D4
0000379A  6704      6021          beq.s     vsscanf_125
0000379C  2004      6022          move.l    D4,D0
0000379E  6002      6023          bra.s     vsscanf_126
                    6024   vsscanf_125:
000037A0  70FF      6025          moveq     #-1,D0
                    6026   vsscanf_126:
000037A2  6000 008A 6027          bra       vsscanf_15
                    6028   vsscanf_123:
000037A6  6000 0080 6029          bra       vsscanf_139
                    6030   vsscanf_85:
000037AA  0C83 0000 6031          cmp.l     #37,D3
000037AE  0025      
000037B0  6600 0040 6032          bne       vsscanf_127
000037B4  2F05      6033          move.l    D5,-(A7)
000037B6  4E93      6034          jsr       (A3)
000037B8  584F      6035          addq.w    #4,A7
000037BA  2400      6036          move.l    D0,D2
000037BC  0C82 FFFF 6037          cmp.l     #-1,D2
000037C0  FFFF      
000037C2  660E      6038          bne.s     vsscanf_129
000037C4  4A84      6039          tst.l     D4
000037C6  6704      6040          beq.s     vsscanf_131
000037C8  2004      6041          move.l    D4,D0
000037CA  6002      6042          bra.s     vsscanf_132
                    6043   vsscanf_131:
000037CC  70FF      6044          moveq     #-1,D0
                    6045   vsscanf_132:
000037CE  6000 005E 6046          bra       vsscanf_15
                    6047   vsscanf_129:
000037D2  52AE FFE4 6048          addq.l    #1,-28(A6)
000037D6  B483      6049          cmp.l     D3,D2
000037D8  6714      6050          beq.s     vsscanf_133
000037DA  2F02      6051          move.l    D2,-(A7)
000037DC  2F05      6052          move.l    D5,-(A7)
000037DE  6100 F82E 6053          bsr       @vsscanf_scanputback
000037E2  504F      6054          addq.w    #8,A7
000037E4  53AE FFE4 6055          subq.l    #1,-28(A6)
000037E8  2004      6056          move.l    D4,D0
000037EA  6000 0042 6057          bra       vsscanf_15
                    6058   vsscanf_133:
000037EE  6000 0038 6059          bra       vsscanf_139
                    6060   vsscanf_127:
000037F2  2F05      6061          move.l    D5,-(A7)
000037F4  4E93      6062          jsr       (A3)
000037F6  584F      6063          addq.w    #4,A7
000037F8  2400      6064          move.l    D0,D2
000037FA  52AE FFE4 6065          addq.l    #1,-28(A6)
000037FE  0C82 FFFF 6066          cmp.l     #-1,D2
00003802  FFFF      
00003804  660C      6067          bne.s     vsscanf_135
00003806  4A84      6068          tst.l     D4
00003808  6704      6069          beq.s     vsscanf_137
0000380A  2004      6070          move.l    D4,D0
0000380C  6002      6071          bra.s     vsscanf_138
                    6072   vsscanf_137:
0000380E  70FF      6073          moveq     #-1,D0
                    6074   vsscanf_138:
00003810  601C      6075          bra.s     vsscanf_15
                    6076   vsscanf_135:
00003812  B483      6077          cmp.l     D3,D2
00003814  6712      6078          beq.s     vsscanf_139
00003816  2F02      6079          move.l    D2,-(A7)
00003818  2F05      6080          move.l    D5,-(A7)
0000381A  6100 F7F2 6081          bsr       @vsscanf_scanputback
0000381E  504F      6082          addq.w    #8,A7
00003820  53AE FFE4 6083          subq.l    #1,-28(A6)
00003824  2004      6084          move.l    D4,D0
00003826  6006      6085          bra.s     vsscanf_15
                    6086   vsscanf_139:
00003828  6000 FA44 6087          bra       vsscanf_3
                    6088   vsscanf_5:
0000382C  2004      6089          move.l    D4,D0
                    6090   vsscanf_15:
0000382E  4CDF 3CFC 6091          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003832  4E5E      6092          unlk      A6
00003834  4E75      6093          rts
                    6094   _printf:
00003836  4E56 FFFC 6095          link      A6,#-4
0000383A  48E7 2000 6096          movem.l   D2,-(A7)
0000383E  41EE 0008 6097          lea       8(A6),A0
00003842  5848      6098          addq.w    #4,A0
00003844  2408      6099          move.l    A0,D2
00003846  2F02      6100          move.l    D2,-(A7)
00003848  2F2E 0008 6101          move.l    8(A6),-(A7)
0000384C  42A7      6102          clr.l     -(A7)
0000384E  6100 00CA 6103          bsr       _vsprintf
00003852  DEFC 000C 6104          add.w     #12,A7
00003856  2D40 FFFC 6105          move.l    D0,-4(A6)
0000385A  4282      6106          clr.l     D2
0000385C  202E FFFC 6107          move.l    -4(A6),D0
00003860  4CDF 0004 6108          movem.l   (A7)+,D2
00003864  4E5E      6109          unlk      A6
00003866  4E75      6110          rts
                    6111   @vsprintf_copy:
00003868  4E56 0000 6112          link      A6,#0
0000386C  206E 0008 6113          move.l    8(A6),A0
00003870  4A90      6114          tst.l     (A0)
00003872  6710      6115          beq.s     @vsprintf_copy_1
00003874  202E 000C 6116          move.l    12(A6),D0
00003878  206E 0008 6117          move.l    8(A6),A0
0000387C  2250      6118          move.l    (A0),A1
0000387E  5290      6119          addq.l    #1,(A0)
00003880  1280      6120          move.b    D0,(A1)
00003882  600A      6121          bra.s     @vsprintf_copy_2
                    6122   @vsprintf_copy_1:
00003884  2F2E 000C 6123          move.l    12(A6),-(A7)
00003888  6100 F5F0 6124          bsr       _putch
0000388C  584F      6125          addq.w    #4,A7
                    6126   @vsprintf_copy_2:
0000388E  4E5E      6127          unlk      A6
00003890  4E75      6128          rts
                    6129   @vsprintf_getval:
00003892  4E56 0000 6130          link      A6,#0
00003896  48E7 3000 6131          movem.l   D2/D3,-(A7)
0000389A  242E 0008 6132          move.l    8(A6),D2
0000389E  4283      6133          clr.l     D3
000038A0  2042      6134          move.l    D2,A0
000038A2  2050      6135          move.l    (A0),A0
000038A4  1010      6136          move.b    (A0),D0
000038A6  4880      6137          ext.w     D0
000038A8  48C0      6138          ext.l     D0
000038AA  0C80 0000 6139          cmp.l     #42,D0
000038AE  002A      
000038B0  6612      6140          bne.s     @vsprintf_getval_1
000038B2  206E 000C 6141          move.l    12(A6),A0
000038B6  2250      6142          move.l    (A0),A1
000038B8  5890      6143          addq.l    #4,(A0)
000038BA  2611      6144          move.l    (A1),D3
000038BC  2042      6145          move.l    D2,A0
000038BE  5290      6146          addq.l    #1,(A0)
000038C0  6000 004E 6147          bra       @vsprintf_getval_5
                    6148   @vsprintf_getval_1:
000038C4  2042      6149          move.l    D2,A0
000038C6  2050      6150          move.l    (A0),A0
000038C8  1010      6151          move.b    (A0),D0
000038CA  4880      6152          ext.w     D0
000038CC  48C0      6153          ext.l     D0
000038CE  0C80 0000 6154          cmp.l     #48,D0
000038D2  0030      
000038D4  6D00 003A 6155          blt       @vsprintf_getval_5
000038D8  2042      6156          move.l    D2,A0
000038DA  2050      6157          move.l    (A0),A0
000038DC  1010      6158          move.b    (A0),D0
000038DE  4880      6159          ext.w     D0
000038E0  48C0      6160          ext.l     D0
000038E2  0C80 0000 6161          cmp.l     #57,D0
000038E6  0039      
000038E8  6E26      6162          bgt.s     @vsprintf_getval_5
000038EA  2F03      6163          move.l    D3,-(A7)
000038EC  4878 000A 6164          pea       10
000038F0  6100 069C 6165          bsr       LMUL
000038F4  2017      6166          move.l    (A7),D0
000038F6  504F      6167          addq.w    #8,A7
000038F8  2042      6168          move.l    D2,A0
000038FA  2250      6169          move.l    (A0),A1
000038FC  5290      6170          addq.l    #1,(A0)
000038FE  1211      6171          move.b    (A1),D1
00003900  4881      6172          ext.w     D1
00003902  48C1      6173          ext.l     D1
00003904  D081      6174          add.l     D1,D0
00003906  0480 0000 6175          sub.l     #48,D0
0000390A  0030      
0000390C  2600      6176          move.l    D0,D3
0000390E  60B4      6177          bra       @vsprintf_getval_1
                    6178   @vsprintf_getval_5:
00003910  2003      6179          move.l    D3,D0
00003912  4CDF 000C 6180          movem.l   (A7)+,D2/D3
00003916  4E5E      6181          unlk      A6
00003918  4E75      6182          rts
                    6183   _vsprintf:
0000391A  4E56 FFCC 6184          link      A6,#-52
0000391E  48E7 3F3C 6185          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003922  45EE 0008 6186          lea       8(A6),A2
00003926  47F8 3868 6187          lea       @vsprintf_copy,A3
0000392A  49F9 0000 6188          lea       _ultoa,A4
0000392E  4198      
00003930  4286      6189          clr.l     D6
                    6190   vsprintf_1:
00003932  206E 000C 6191          move.l    12(A6),A0
00003936  4A10      6192          tst.b     (A0)
00003938  6700 0624 6193          beq       vsprintf_3
0000393C  206E 000C 6194          move.l    12(A6),A0
00003940  1010      6195          move.b    (A0),D0
00003942  4880      6196          ext.w     D0
00003944  48C0      6197          ext.l     D0
00003946  0C80 0000 6198          cmp.l     #37,D0
0000394A  0025      
0000394C  671C      6199          beq.s     vsprintf_4
0000394E  206E 000C 6200          move.l    12(A6),A0
00003952  52AE 000C 6201          addq.l    #1,12(A6)
00003956  1210      6202          move.b    (A0),D1
00003958  4881      6203          ext.w     D1
0000395A  48C1      6204          ext.l     D1
0000395C  2F01      6205          move.l    D1,-(A7)
0000395E  2F0A      6206          move.l    A2,-(A7)
00003960  4E93      6207          jsr       (A3)
00003962  504F      6208          addq.w    #8,A7
00003964  5286      6209          addq.l    #1,D6
00003966  6000 05F2 6210          bra       vsprintf_2
                    6211   vsprintf_4:
0000396A  52AE 000C 6212          addq.l    #1,12(A6)
0000396E  422E FFD3 6213          clr.b     -45(A6)
00003972  422E FFD2 6214          clr.b     -46(A6)
00003976  422E FFD0 6215          clr.b     -48(A6)
0000397A  422E FFCF 6216          clr.b     -49(A6)
0000397E  422E FFCE 6217          clr.b     -50(A6)
00003982  422E FFCD 6218          clr.b     -51(A6)
00003986  42AE FFFC 6219          clr.l     -4(A6)
0000398A  7AFF      6220          moveq     #-1,D5
0000398C  41EE FFDC 6221          lea       -36(A6),A0
00003990  2608      6222          move.l    A0,D3
00003992  2408      6223          move.l    A0,D2
                    6224   vsprintf_6:
00003994  206E 000C 6225          move.l    12(A6),A0
00003998  1010      6226          move.b    (A0),D0
0000399A  4880      6227          ext.w     D0
0000399C  48C0      6228          ext.l     D0
0000399E  0C80 0000 6229          cmp.l     #43,D0
000039A2  002B      
000039A4  6730      6230          beq.s     vsprintf_12
000039A6  6E18      6231          bgt.s     vsprintf_15
000039A8  0C80 0000 6232          cmp.l     #35,D0
000039AC  0023      
000039AE  6700 003E 6233          beq       vsprintf_14
000039B2  6E00 0046 6234          bgt       vsprintf_9
000039B6  0C80 0000 6235          cmp.l     #32,D0
000039BA  0020      
000039BC  6724      6236          beq.s     vsprintf_13
000039BE  603A      6237          bra.s     vsprintf_9
                    6238   vsprintf_15:
000039C0  0C80 0000 6239          cmp.l     #45,D0
000039C4  002D      
000039C6  6702      6240          beq.s     vsprintf_11
000039C8  6030      6241          bra.s     vsprintf_9
                    6242   vsprintf_11:
000039CA  1D7C 0001 6243          move.b    #1,-51(A6)
000039CE  FFCD      
000039D0  52AE 000C 6244          addq.l    #1,12(A6)
000039D4  6026      6245          bra.s     vsprintf_7
                    6246   vsprintf_12:
000039D6  1D7C 0001 6247          move.b    #1,-50(A6)
000039DA  FFCE      
000039DC  52AE 000C 6248          addq.l    #1,12(A6)
000039E0  601A      6249          bra.s     vsprintf_7
                    6250   vsprintf_13:
000039E2  1D7C 0001 6251          move.b    #1,-49(A6)
000039E6  FFCF      
000039E8  52AE 000C 6252          addq.l    #1,12(A6)
000039EC  600E      6253          bra.s     vsprintf_7
                    6254   vsprintf_14:
000039EE  1D7C 0001 6255          move.b    #1,-48(A6)
000039F2  FFD0      
000039F4  52AE 000C 6256          addq.l    #1,12(A6)
000039F8  6002      6257          bra.s     vsprintf_7
                    6258   vsprintf_9:
000039FA  6002      6259          bra.s     vsprintf_8
                    6260   vsprintf_7:
000039FC  6096      6261          bra       vsprintf_6
                    6262   vsprintf_8:
000039FE  206E 000C 6263          move.l    12(A6),A0
00003A02  1010      6264          move.b    (A0),D0
00003A04  4880      6265          ext.w     D0
00003A06  48C0      6266          ext.l     D0
00003A08  0C80 0000 6267          cmp.l     #48,D0
00003A0C  0030      
00003A0E  660A      6268          bne.s     vsprintf_16
00003A10  52AE 000C 6269          addq.l    #1,12(A6)
00003A14  1D7C 0001 6270          move.b    #1,-46(A6)
00003A18  FFD2      
                    6271   vsprintf_16:
00003A1A  486E 0010 6272          pea       16(A6)
00003A1E  486E 000C 6273          pea       12(A6)
00003A22  6100 FE6E 6274          bsr       @vsprintf_getval
00003A26  504F      6275          addq.w    #8,A7
00003A28  2A40      6276          move.l    D0,A5
00003A2A  206E 000C 6277          move.l    12(A6),A0
00003A2E  1010      6278          move.b    (A0),D0
00003A30  4880      6279          ext.w     D0
00003A32  48C0      6280          ext.l     D0
00003A34  0C80 0000 6281          cmp.l     #46,D0
00003A38  002E      
00003A3A  6614      6282          bne.s     vsprintf_18
00003A3C  52AE 000C 6283          addq.l    #1,12(A6)
00003A40  486E 0010 6284          pea       16(A6)
00003A44  486E 000C 6285          pea       12(A6)
00003A48  6100 FE48 6286          bsr       @vsprintf_getval
00003A4C  504F      6287          addq.w    #8,A7
00003A4E  2A00      6288          move.l    D0,D5
                    6289   vsprintf_18:
00003A50  206E 000C 6290          move.l    12(A6),A0
00003A54  1010      6291          move.b    (A0),D0
00003A56  4880      6292          ext.w     D0
00003A58  48C0      6293          ext.l     D0
00003A5A  0C80 0000 6294          cmp.l     #108,D0
00003A5E  006C      
00003A60  660A      6295          bne.s     vsprintf_20
00003A62  52AE 000C 6296          addq.l    #1,12(A6)
00003A66  1D7C 0001 6297          move.b    #1,-45(A6)
00003A6A  FFD3      
                    6298   vsprintf_20:
00003A6C  206E 000C 6299          move.l    12(A6),A0
00003A70  1010      6300          move.b    (A0),D0
00003A72  4880      6301          ext.w     D0
00003A74  48C0      6302          ext.l     D0
00003A76  0C80 0000 6303          cmp.l     #111,D0
00003A7A  006F      
00003A7C  6700 00D4 6304          beq       vsprintf_27
00003A80  6E34      6305          bgt.s     vsprintf_33
00003A82  0C80 0000 6306          cmp.l     #100,D0
00003A86  0064      
00003A88  6700 0054 6307          beq       vsprintf_24
00003A8C  6E1C      6308          bgt.s     vsprintf_34
00003A8E  0C80 0000 6309          cmp.l     #99,D0
00003A92  0063      
00003A94  6700 012C 6310          beq       vsprintf_30
00003A98  6E00 016A 6311          bgt       vsprintf_22
00003A9C  0C80 0000 6312          cmp.l     #88,D0
00003AA0  0058      
00003AA2  6700 00E6 6313          beq       vsprintf_28
00003AA6  6000 015C 6314          bra       vsprintf_22
                    6315   vsprintf_34:
00003AAA  0C80 0000 6316          cmp.l     #105,D0
00003AAE  0069      
00003AB0  672C      6317          beq.s     vsprintf_24
00003AB2  6000 0150 6318          bra       vsprintf_22
                    6319   vsprintf_33:
00003AB6  0C80 0000 6320          cmp.l     #117,D0
00003ABA  0075      
00003ABC  6700 005C 6321          beq       vsprintf_26
00003AC0  6E0E      6322          bgt.s     vsprintf_35
00003AC2  0C80 0000 6323          cmp.l     #115,D0
00003AC6  0073      
00003AC8  6700 011C 6324          beq       vsprintf_31
00003ACC  6000 0136 6325          bra       vsprintf_22
                    6326   vsprintf_35:
00003AD0  0C80 0000 6327          cmp.l     #120,D0
00003AD4  0078      
00003AD6  6700 00B2 6328          beq       vsprintf_28
00003ADA  6000 0128 6329          bra       vsprintf_22
                    6330   vsprintf_24:
00003ADE  4A2E FFD3 6331          tst.b     -45(A6)
00003AE2  671A      6332          beq.s     vsprintf_36
00003AE4  4878 000A 6333          pea       10
00003AE8  2F03      6334          move.l    D3,-(A7)
00003AEA  206E 0010 6335          move.l    16(A6),A0
00003AEE  58AE 0010 6336          addq.l    #4,16(A6)
00003AF2  2F10      6337          move.l    (A0),-(A7)
00003AF4  6100 061E 6338          bsr       _ltoa
00003AF8  DEFC 000C 6339          add.w     #12,A7
00003AFC  6018      6340          bra.s     vsprintf_37
                    6341   vsprintf_36:
00003AFE  4878 000A 6342          pea       10
00003B02  2F03      6343          move.l    D3,-(A7)
00003B04  206E 0010 6344          move.l    16(A6),A0
00003B08  58AE 0010 6345          addq.l    #4,16(A6)
00003B0C  2F10      6346          move.l    (A0),-(A7)
00003B0E  6100 0604 6347          bsr       _ltoa
00003B12  DEFC 000C 6348          add.w     #12,A7
                    6349   vsprintf_37:
00003B16  6000 00FA 6350          bra       vsprintf_23
                    6351   vsprintf_26:
00003B1A  4A2E FFD3 6352          tst.b     -45(A6)
00003B1E  6718      6353          beq.s     vsprintf_38
00003B20  4878 000A 6354          pea       10
00003B24  2F03      6355          move.l    D3,-(A7)
00003B26  206E 0010 6356          move.l    16(A6),A0
00003B2A  58AE 0010 6357          addq.l    #4,16(A6)
00003B2E  2F10      6358          move.l    (A0),-(A7)
00003B30  4E94      6359          jsr       (A4)
00003B32  DEFC 000C 6360          add.w     #12,A7
00003B36  6016      6361          bra.s     vsprintf_39
                    6362   vsprintf_38:
00003B38  4878 000A 6363          pea       10
00003B3C  2F03      6364          move.l    D3,-(A7)
00003B3E  206E 0010 6365          move.l    16(A6),A0
00003B42  58AE 0010 6366          addq.l    #4,16(A6)
00003B46  2F10      6367          move.l    (A0),-(A7)
00003B48  4E94      6368          jsr       (A4)
00003B4A  DEFC 000C 6369          add.w     #12,A7
                    6370   vsprintf_39:
00003B4E  6000 00C2 6371          bra       vsprintf_23
                    6372   vsprintf_27:
00003B52  4A2E FFD3 6373          tst.b     -45(A6)
00003B56  6718      6374          beq.s     vsprintf_40
00003B58  4878 0008 6375          pea       8
00003B5C  2F03      6376          move.l    D3,-(A7)
00003B5E  206E 0010 6377          move.l    16(A6),A0
00003B62  58AE 0010 6378          addq.l    #4,16(A6)
00003B66  2F10      6379          move.l    (A0),-(A7)
00003B68  4E94      6380          jsr       (A4)
00003B6A  DEFC 000C 6381          add.w     #12,A7
00003B6E  6016      6382          bra.s     vsprintf_41
                    6383   vsprintf_40:
00003B70  4878 0008 6384          pea       8
00003B74  2F03      6385          move.l    D3,-(A7)
00003B76  206E 0010 6386          move.l    16(A6),A0
00003B7A  58AE 0010 6387          addq.l    #4,16(A6)
00003B7E  2F10      6388          move.l    (A0),-(A7)
00003B80  4E94      6389          jsr       (A4)
00003B82  DEFC 000C 6390          add.w     #12,A7
                    6391   vsprintf_41:
00003B86  6000 008A 6392          bra       vsprintf_23
                    6393   vsprintf_28:
00003B8A  4A2E FFD3 6394          tst.b     -45(A6)
00003B8E  6718      6395          beq.s     vsprintf_42
00003B90  4878 0010 6396          pea       16
00003B94  2F03      6397          move.l    D3,-(A7)
00003B96  206E 0010 6398          move.l    16(A6),A0
00003B9A  58AE 0010 6399          addq.l    #4,16(A6)
00003B9E  2F10      6400          move.l    (A0),-(A7)
00003BA0  4E94      6401          jsr       (A4)
00003BA2  DEFC 000C 6402          add.w     #12,A7
00003BA6  6016      6403          bra.s     vsprintf_43
                    6404   vsprintf_42:
00003BA8  4878 0010 6405          pea       16
00003BAC  2F03      6406          move.l    D3,-(A7)
00003BAE  206E 0010 6407          move.l    16(A6),A0
00003BB2  58AE 0010 6408          addq.l    #4,16(A6)
00003BB6  2F10      6409          move.l    (A0),-(A7)
00003BB8  4E94      6410          jsr       (A4)
00003BBA  DEFC 000C 6411          add.w     #12,A7
                    6412   vsprintf_43:
00003BBE  6000 0052 6413          bra       vsprintf_23
                    6414   vsprintf_30:
00003BC2  206E 0010 6415          move.l    16(A6),A0
00003BC6  58AE 0010 6416          addq.l    #4,16(A6)
00003BCA  2010      6417          move.l    (A0),D0
00003BCC  2042      6418          move.l    D2,A0
00003BCE  5282      6419          addq.l    #1,D2
00003BD0  1080      6420          move.b    D0,(A0)
00003BD2  2042      6421          move.l    D2,A0
00003BD4  4210      6422          clr.b     (A0)
00003BD6  200D      6423          move.l    A5,D0
00003BD8  6704      6424          beq.s     vsprintf_44
00003BDA  200D      6425          move.l    A5,D0
00003BDC  6002      6426          bra.s     vsprintf_45
                    6427   vsprintf_44:
00003BDE  7001      6428          moveq     #1,D0
                    6429   vsprintf_45:
00003BE0  2A00      6430          move.l    D0,D5
00003BE2  6000 002E 6431          bra       vsprintf_23
                    6432   vsprintf_31:
00003BE6  206E 0010 6433          move.l    16(A6),A0
00003BEA  58AE 0010 6434          addq.l    #4,16(A6)
00003BEE  2610      6435          move.l    (A0),D3
00003BF0  0C85 FFFF 6436          cmp.l     #-1,D5
00003BF4  FFFF      
00003BF6  660A      6437          bne.s     vsprintf_46
00003BF8  2F03      6438          move.l    D3,-(A7)
00003BFA  6100 05FE 6439          bsr       _strlen
00003BFE  584F      6440          addq.w    #4,A7
00003C00  2A00      6441          move.l    D0,D5
                    6442   vsprintf_46:
00003C02  600E      6443          bra.s     vsprintf_23
                    6444   vsprintf_22:
00003C04  206E 000C 6445          move.l    12(A6),A0
00003C08  2242      6446          move.l    D2,A1
00003C0A  5282      6447          addq.l    #1,D2
00003C0C  1290      6448          move.b    (A0),(A1)
00003C0E  2042      6449          move.l    D2,A0
00003C10  4210      6450          clr.b     (A0)
                    6451   vsprintf_23:
00003C12  2F03      6452          move.l    D3,-(A7)
00003C14  6100 05E4 6453          bsr       _strlen
00003C18  584F      6454          addq.w    #4,A7
00003C1A  1800      6455          move.b    D0,D4
00003C1C  206E 000C 6456          move.l    12(A6),A0
00003C20  1010      6457          move.b    (A0),D0
00003C22  4880      6458          ext.w     D0
00003C24  48C0      6459          ext.l     D0
00003C26  0C80 0000 6460          cmp.l     #115,D0
00003C2A  0073      
00003C2C  6618      6461          bne.s     vsprintf_48
00003C2E  0C85 0000 6462          cmp.l     #0,D5
00003C32  0000      
00003C34  6D10      6463          blt.s     vsprintf_48
00003C36  4884      6464          ext.w     D4
00003C38  48C4      6465          ext.l     D4
00003C3A  B885      6466          cmp.l     D5,D4
00003C3C  6F04      6467          ble.s     vsprintf_50
00003C3E  1005      6468          move.b    D5,D0
00003C40  6002      6469          bra.s     vsprintf_51
                    6470   vsprintf_50:
00003C42  1004      6471          move.b    D4,D0
                    6472   vsprintf_51:
00003C44  1800      6473          move.b    D0,D4
                    6474   vsprintf_48:
00003C46  206E 000C 6475          move.l    12(A6),A0
00003C4A  1010      6476          move.b    (A0),D0
00003C4C  4880      6477          ext.w     D0
00003C4E  48C0      6478          ext.l     D0
00003C50  0C80 0000 6479          cmp.l     #88,D0
00003C54  0058      
00003C56  6600 0026 6480          bne       vsprintf_56
00003C5A  41EE FFDC 6481          lea       -36(A6),A0
00003C5E  2408      6482          move.l    A0,D2
                    6483   vsprintf_54:
00003C60  2042      6484          move.l    D2,A0
00003C62  4A10      6485          tst.b     (A0)
00003C64  6718      6486          beq.s     vsprintf_56
00003C66  2042      6487          move.l    D2,A0
00003C68  1210      6488          move.b    (A0),D1
00003C6A  4881      6489          ext.w     D1
00003C6C  48C1      6490          ext.l     D1
00003C6E  2F01      6491          move.l    D1,-(A7)
00003C70  6100 F302 6492          bsr       _toupper
00003C74  584F      6493          addq.w    #4,A7
00003C76  2042      6494          move.l    D2,A0
00003C78  1080      6495          move.b    D0,(A0)
00003C7A  5282      6496          addq.l    #1,D2
00003C7C  60E2      6497          bra       vsprintf_54
                    6498   vsprintf_56:
00003C7E  7E00      6499          moveq     #0,D7
00003C80  41EE FFD4 6500          lea       -44(A6),A0
00003C84  2408      6501          move.l    A0,D2
00003C86  206E 000C 6502          move.l    12(A6),A0
00003C8A  1010      6503          move.b    (A0),D0
00003C8C  4880      6504          ext.w     D0
00003C8E  48C0      6505          ext.l     D0
00003C90  0C80 0000 6506          cmp.l     #100,D0
00003C94  0064      
00003C96  6714      6507          beq.s     vsprintf_59
00003C98  206E 000C 6508          move.l    12(A6),A0
00003C9C  1010      6509          move.b    (A0),D0
00003C9E  4880      6510          ext.w     D0
00003CA0  48C0      6511          ext.l     D0
00003CA2  0C80 0000 6512          cmp.l     #105,D0
00003CA6  0069      
00003CA8  6600 0076 6513          bne       vsprintf_65
                    6514   vsprintf_59:
00003CAC  4A2E FFCE 6515          tst.b     -50(A6)
00003CB0  6612      6516          bne.s     vsprintf_62
00003CB2  2043      6517          move.l    D3,A0
00003CB4  1010      6518          move.b    (A0),D0
00003CB6  4880      6519          ext.w     D0
00003CB8  48C0      6520          ext.l     D0
00003CBA  0C80 0000 6521          cmp.l     #45,D0
00003CBE  002D      
00003CC0  6600 002E 6522          bne       vsprintf_60
                    6523   vsprintf_62:
00003CC4  2043      6524          move.l    D3,A0
00003CC6  1010      6525          move.b    (A0),D0
00003CC8  4880      6526          ext.w     D0
00003CCA  48C0      6527          ext.l     D0
00003CCC  0C80 0000 6528          cmp.l     #45,D0
00003CD0  002D      
00003CD2  660E      6529          bne.s     vsprintf_63
00003CD4  2043      6530          move.l    D3,A0
00003CD6  5283      6531          addq.l    #1,D3
00003CD8  2242      6532          move.l    D2,A1
00003CDA  5282      6533          addq.l    #1,D2
00003CDC  1290      6534          move.b    (A0),(A1)
00003CDE  5304      6535          subq.b    #1,D4
00003CE0  6008      6536          bra.s     vsprintf_64
                    6537   vsprintf_63:
00003CE2  2042      6538          move.l    D2,A0
00003CE4  5282      6539          addq.l    #1,D2
00003CE6  10BC 002B 6540          move.b    #43,(A0)
                    6541   vsprintf_64:
00003CEA  5287      6542          addq.l    #1,D7
00003CEC  6000 0032 6543          bra       vsprintf_65
                    6544   vsprintf_60:
00003CF0  4A2E FFCF 6545          tst.b     -49(A6)
00003CF4  6700 002A 6546          beq       vsprintf_65
00003CF8  2043      6547          move.l    D3,A0
00003CFA  1010      6548          move.b    (A0),D0
00003CFC  4880      6549          ext.w     D0
00003CFE  48C0      6550          ext.l     D0
00003D00  0C80 0000 6551          cmp.l     #45,D0
00003D04  002D      
00003D06  660E      6552          bne.s     vsprintf_67
00003D08  2043      6553          move.l    D3,A0
00003D0A  5283      6554          addq.l    #1,D3
00003D0C  2242      6555          move.l    D2,A1
00003D0E  5282      6556          addq.l    #1,D2
00003D10  1290      6557          move.b    (A0),(A1)
00003D12  5304      6558          subq.b    #1,D4
00003D14  6008      6559          bra.s     vsprintf_68
                    6560   vsprintf_67:
00003D16  2042      6561          move.l    D2,A0
00003D18  5282      6562          addq.l    #1,D2
00003D1A  10BC 0020 6563          move.b    #32,(A0)
                    6564   vsprintf_68:
00003D1E  5287      6565          addq.l    #1,D7
                    6566   vsprintf_65:
00003D20  4A2E FFD0 6567          tst.b     -48(A6)
00003D24  6700 0066 6568          beq       vsprintf_77
00003D28  206E 000C 6569          move.l    12(A6),A0
00003D2C  1010      6570          move.b    (A0),D0
00003D2E  4880      6571          ext.w     D0
00003D30  48C0      6572          ext.l     D0
00003D32  0C80 0000 6573          cmp.l     #111,D0
00003D36  006F      
00003D38  671A      6574          beq.s     vsprintf_73
00003D3A  6E0C      6575          bgt.s     vsprintf_76
00003D3C  0C80 0000 6576          cmp.l     #88,D0
00003D40  0058      
00003D42  6710      6577          beq.s     vsprintf_73
00003D44  6000 0046 6578          bra       vsprintf_77
                    6579   vsprintf_76:
00003D48  0C80 0000 6580          cmp.l     #120,D0
00003D4C  0078      
00003D4E  6704      6581          beq.s     vsprintf_73
00003D50  6000 003A 6582          bra       vsprintf_77
                    6583   vsprintf_73:
00003D54  2042      6584          move.l    D2,A0
00003D56  5282      6585          addq.l    #1,D2
00003D58  10BC 0030 6586          move.b    #48,(A0)
00003D5C  5287      6587          addq.l    #1,D7
00003D5E  206E 000C 6588          move.l    12(A6),A0
00003D62  1010      6589          move.b    (A0),D0
00003D64  4880      6590          ext.w     D0
00003D66  48C0      6591          ext.l     D0
00003D68  0C80 0000 6592          cmp.l     #120,D0
00003D6C  0078      
00003D6E  6712      6593          beq.s     vsprintf_79
00003D70  206E 000C 6594          move.l    12(A6),A0
00003D74  1010      6595          move.b    (A0),D0
00003D76  4880      6596          ext.w     D0
00003D78  48C0      6597          ext.l     D0
00003D7A  0C80 0000 6598          cmp.l     #88,D0
00003D7E  0058      
00003D80  660A      6599          bne.s     vsprintf_77
                    6600   vsprintf_79:
00003D82  2042      6601          move.l    D2,A0
00003D84  5282      6602          addq.l    #1,D2
00003D86  10BC 0078 6603          move.b    #120,(A0)
00003D8A  5287      6604          addq.l    #1,D7
                    6605   vsprintf_77:
00003D8C  2042      6606          move.l    D2,A0
00003D8E  4210      6607          clr.b     (A0)
00003D90  206E 000C 6608          move.l    12(A6),A0
00003D94  1010      6609          move.b    (A0),D0
00003D96  4880      6610          ext.w     D0
00003D98  48C0      6611          ext.l     D0
00003D9A  0C80 0000 6612          cmp.l     #105,D0
00003D9E  0069      
00003DA0  6700 0076 6613          beq       vsprintf_82
00003DA4  6E42      6614          bgt.s     vsprintf_93
00003DA6  0C80 0000 6615          cmp.l     #99,D0
00003DAA  0063      
00003DAC  6700 0084 6616          beq       vsprintf_96
00003DB0  6E1C      6617          bgt.s     vsprintf_94
00003DB2  0C80 0000 6618          cmp.l     #88,D0
00003DB6  0058      
00003DB8  6700 005E 6619          beq       vsprintf_82
00003DBC  6E00 0184 6620          bgt       vsprintf_80
00003DC0  0C80 0000 6621          cmp.l     #69,D0
00003DC4  0045      
00003DC6  6700 0050 6622          beq       vsprintf_82
00003DCA  6000 0176 6623          bra       vsprintf_80
                    6624   vsprintf_94:
00003DCE  0C80 0000 6625          cmp.l     #101,D0
00003DD2  0065      
00003DD4  6700 0042 6626          beq       vsprintf_82
00003DD8  6E00 0168 6627          bgt       vsprintf_80
00003DDC  0C80 0000 6628          cmp.l     #100,D0
00003DE0  0064      
00003DE2  6734      6629          beq.s     vsprintf_82
00003DE4  6000 015C 6630          bra       vsprintf_80
                    6631   vsprintf_93:
00003DE8  0C80 0000 6632          cmp.l     #117,D0
00003DEC  0075      
00003DEE  6728      6633          beq.s     vsprintf_82
00003DF0  6E1A      6634          bgt.s     vsprintf_95
00003DF2  0C80 0000 6635          cmp.l     #115,D0
00003DF6  0073      
00003DF8  6700 0038 6636          beq       vsprintf_96
00003DFC  6E00 0144 6637          bgt       vsprintf_80
00003E00  0C80 0000 6638          cmp.l     #111,D0
00003E04  006F      
00003E06  6710      6639          beq.s     vsprintf_82
00003E08  6000 0138 6640          bra       vsprintf_80
                    6641   vsprintf_95:
00003E0C  0C80 0000 6642          cmp.l     #120,D0
00003E10  0078      
00003E12  6704      6643          beq.s     vsprintf_82
00003E14  6000 012C 6644          bra       vsprintf_80
                    6645   vsprintf_82:
00003E18  4A2E FFD2 6646          tst.b     -46(A6)
00003E1C  6714      6647          beq.s     vsprintf_96
00003E1E  4A2E FFCD 6648          tst.b     -51(A6)
00003E22  660E      6649          bne.s     vsprintf_96
00003E24  200D      6650          move.l    A5,D0
00003E26  9087      6651          sub.l     D7,D0
00003E28  4884      6652          ext.w     D4
00003E2A  48C4      6653          ext.l     D4
00003E2C  9084      6654          sub.l     D4,D0
00003E2E  2D40 FFFC 6655          move.l    D0,-4(A6)
                    6656   vsprintf_96:
00003E32  202E FFFC 6657          move.l    -4(A6),D0
00003E36  0C80 0000 6658          cmp.l     #0,D0
00003E3A  0000      
00003E3C  6C04      6659          bge.s     vsprintf_98
00003E3E  42AE FFFC 6660          clr.l     -4(A6)
                    6661   vsprintf_98:
00003E42  4A2E FFCD 6662          tst.b     -51(A6)
00003E46  6600 0030 6663          bne       vsprintf_104
00003E4A  4884      6664          ext.w     D4
00003E4C  48C4      6665          ext.l     D4
00003E4E  2004      6666          move.l    D4,D0
00003E50  D0AE FFFC 6667          add.l     -4(A6),D0
00003E54  D087      6668          add.l     D7,D0
00003E56  1D40 FFD1 6669          move.b    D0,-47(A6)
                    6670   vsprintf_102:
00003E5A  102E FFD1 6671          move.b    -47(A6),D0
00003E5E  4880      6672          ext.w     D0
00003E60  48C0      6673          ext.l     D0
00003E62  220D      6674          move.l    A5,D1
00003E64  534D      6675          subq.w    #1,A5
00003E66  B081      6676          cmp.l     D1,D0
00003E68  6C0E      6677          bge.s     vsprintf_104
00003E6A  4878 0020 6678          pea       32
00003E6E  2F0A      6679          move.l    A2,-(A7)
00003E70  4E93      6680          jsr       (A3)
00003E72  504F      6681          addq.w    #8,A7
00003E74  5286      6682          addq.l    #1,D6
00003E76  60E2      6683          bra       vsprintf_102
                    6684   vsprintf_104:
00003E78  41EE FFD4 6685          lea       -44(A6),A0
00003E7C  2408      6686          move.l    A0,D2
                    6687   vsprintf_105:
00003E7E  2042      6688          move.l    D2,A0
00003E80  4A10      6689          tst.b     (A0)
00003E82  6716      6690          beq.s     vsprintf_107
00003E84  2042      6691          move.l    D2,A0
00003E86  5282      6692          addq.l    #1,D2
00003E88  1210      6693          move.b    (A0),D1
00003E8A  4881      6694          ext.w     D1
00003E8C  48C1      6695          ext.l     D1
00003E8E  2F01      6696          move.l    D1,-(A7)
00003E90  2F0A      6697          move.l    A2,-(A7)
00003E92  4E93      6698          jsr       (A3)
00003E94  504F      6699          addq.w    #8,A7
00003E96  5286      6700          addq.l    #1,D6
00003E98  60E4      6701          bra       vsprintf_105
                    6702   vsprintf_107:
00003E9A  202E FFFC 6703          move.l    -4(A6),D0
00003E9E  1D40 FFD1 6704          move.b    D0,-47(A6)
                    6705   vsprintf_108:
00003EA2  102E FFD1 6706          move.b    -47(A6),D0
00003EA6  532E FFD1 6707          subq.b    #1,-47(A6)
00003EAA  4A00      6708          tst.b     D0
00003EAC  670E      6709          beq.s     vsprintf_110
00003EAE  4878 0030 6710          pea       48
00003EB2  2F0A      6711          move.l    A2,-(A7)
00003EB4  4E93      6712          jsr       (A3)
00003EB6  504F      6713          addq.w    #8,A7
00003EB8  5286      6714          addq.l    #1,D6
00003EBA  60E6      6715          bra       vsprintf_108
                    6716   vsprintf_110:
00003EBC  2043      6717          move.l    D3,A0
00003EBE  4A10      6718          tst.b     (A0)
00003EC0  6700 0048 6719          beq       vsprintf_113
00003EC4  206E 000C 6720          move.l    12(A6),A0
00003EC8  1010      6721          move.b    (A0),D0
00003ECA  4880      6722          ext.w     D0
00003ECC  48C0      6723          ext.l     D0
00003ECE  0C80 0000 6724          cmp.l     #115,D0
00003ED2  0073      
00003ED4  670C      6725          beq.s     vsprintf_116
00003ED6  6E18      6726          bgt.s     vsprintf_119
00003ED8  0C80 0000 6727          cmp.l     #99,D0
00003EDC  0063      
00003EDE  6702      6728          beq.s     vsprintf_116
00003EE0  600E      6729          bra.s     vsprintf_119
                    6730   vsprintf_116:
00003EE2  2005      6731          move.l    D5,D0
00003EE4  5385      6732          subq.l    #1,D5
00003EE6  0C80 0000 6733          cmp.l     #0,D0
00003EEA  0000      
00003EEC  6E02      6734          bgt.s     vsprintf_119
00003EEE  6016      6735          bra.s     vsprintf_115
                    6736   vsprintf_119:
00003EF0  2043      6737          move.l    D3,A0
00003EF2  5283      6738          addq.l    #1,D3
00003EF4  1210      6739          move.b    (A0),D1
00003EF6  4881      6740          ext.w     D1
00003EF8  48C1      6741          ext.l     D1
00003EFA  2F01      6742          move.l    D1,-(A7)
00003EFC  2F0A      6743          move.l    A2,-(A7)
00003EFE  4E93      6744          jsr       (A3)
00003F00  504F      6745          addq.w    #8,A7
00003F02  5286      6746          addq.l    #1,D6
00003F04  6002      6747          bra.s     vsprintf_112
                    6748   vsprintf_115:
00003F06  6002      6749          bra.s     vsprintf_113
                    6750   vsprintf_112:
00003F08  60B2      6751          bra       vsprintf_110
                    6752   vsprintf_113:
00003F0A  4A2E FFCD 6753          tst.b     -51(A6)
00003F0E  6700 0030 6754          beq       vsprintf_125
00003F12  4884      6755          ext.w     D4
00003F14  48C4      6756          ext.l     D4
00003F16  2004      6757          move.l    D4,D0
00003F18  D0AE FFFC 6758          add.l     -4(A6),D0
00003F1C  D087      6759          add.l     D7,D0
00003F1E  1D40 FFD1 6760          move.b    D0,-47(A6)
                    6761   vsprintf_123:
00003F22  102E FFD1 6762          move.b    -47(A6),D0
00003F26  4880      6763          ext.w     D0
00003F28  48C0      6764          ext.l     D0
00003F2A  220D      6765          move.l    A5,D1
00003F2C  534D      6766          subq.w    #1,A5
00003F2E  B081      6767          cmp.l     D1,D0
00003F30  6C0E      6768          bge.s     vsprintf_125
00003F32  4878 0020 6769          pea       32
00003F36  2F0A      6770          move.l    A2,-(A7)
00003F38  4E93      6771          jsr       (A3)
00003F3A  504F      6772          addq.w    #8,A7
00003F3C  5386      6773          subq.l    #1,D6
00003F3E  60E2      6774          bra       vsprintf_123
                    6775   vsprintf_125:
00003F40  6014      6776          bra.s     vsprintf_81
                    6777   vsprintf_80:
00003F42  206E 000C 6778          move.l    12(A6),A0
00003F46  1210      6779          move.b    (A0),D1
00003F48  4881      6780          ext.w     D1
00003F4A  48C1      6781          ext.l     D1
00003F4C  2F01      6782          move.l    D1,-(A7)
00003F4E  2F0A      6783          move.l    A2,-(A7)
00003F50  4E93      6784          jsr       (A3)
00003F52  504F      6785          addq.w    #8,A7
00003F54  5286      6786          addq.l    #1,D6
                    6787   vsprintf_81:
00003F56  52AE 000C 6788          addq.l    #1,12(A6)
                    6789   vsprintf_2:
00003F5A  6000 F9D6 6790          bra       vsprintf_1
                    6791   vsprintf_3:
00003F5E  4A92      6792          tst.l     (A2)
00003F60  6710      6793          beq.s     vsprintf_126
00003F62  4201      6794          clr.b     D1
00003F64  C2BC 0000 6795          and.l     #255,D1
00003F68  00FF      
00003F6A  2F01      6796          move.l    D1,-(A7)
00003F6C  2F0A      6797          move.l    A2,-(A7)
00003F6E  4E93      6798          jsr       (A3)
00003F70  504F      6799          addq.w    #8,A7
                    6800   vsprintf_126:
00003F72  2006      6801          move.l    D6,D0
00003F74  4CDF 3CFC 6802          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003F78  4E5E      6803          unlk      A6
00003F7A  4E75      6804          rts
                    6805   ULMUL:
00003F7C  4E56 0000 6806          link    A6,#0
00003F80  48E7 C000 6807          movem.l D0/D1,-(A7)
00003F84  222E 0008 6808          move.l  8(A6),D1
00003F88  202E 000C 6809          move.l  12(A6),D0
00003F8C  602C      6810          bra.s   lmul_3
                    6811   LMUL:
00003F8E  4E56 0000 6812          link    A6,#0
00003F92  48E7 C000 6813          movem.l D0/D1,-(A7)
00003F96  222E 0008 6814          move.l  8(A6),D1
00003F9A  202E 000C 6815          move.l  12(A6),D0
00003F9E  4A80      6816          tst.l   D0
00003FA0  6A0A      6817          bpl.s   lmul_1
00003FA2  4480      6818          neg.l   D0
00003FA4  4A81      6819          tst.l   D1
00003FA6  6A0A      6820          bpl.s   lmul_2
00003FA8  4481      6821          neg.l   D1
00003FAA  600E      6822          bra.s   lmul_3
                    6823   lmul_1:
00003FAC  4A81      6824          tst.l   D1
00003FAE  6A0A      6825          bpl.s   lmul_3
00003FB0  4481      6826          neg.l   D1
                    6827   lmul_2:
00003FB2  6114      6828          bsr.s   domul
00003FB4  4481      6829          neg.l   D1
00003FB6  4080      6830          negx.l  D0
00003FB8  6002      6831          bra.s   lmul_4
                    6832   lmul_3:
00003FBA  610C      6833          bsr.s   domul
                    6834   lmul_4:
00003FBC  2D41 0008 6835          move.l  D1,8(A6)
00003FC0  4CDF 0003 6836          movem.l (A7)+,D0/D1
00003FC4  4E5E      6837          unlk    A6
00003FC6  4E75      6838          rts
                    6839   domul:
00003FC8  0C81 0000 6840          cmpi.l  #$FFFF,D1
00003FCC  FFFF      
00003FCE  620C      6841          bhi.s   domul_1
00003FD0  0C80 0000 6842          cmpi.l  #$FFFF,D0
00003FD4  FFFF      
00003FD6  620E      6843          bhi.s   domul_2
00003FD8  C2C0      6844          mulu    D0,D1
00003FDA  4E75      6845          rts
                    6846   domul_1:
00003FDC  0C80 0000 6847          cmpi.l  #$FFFF,D0
00003FE0  FFFF      
00003FE2  6218      6848          bhi.s   domul_4
00003FE4  6002      6849          bra.s   domul_3
                    6850   domul_2
00003FE6  C141      6851          exg     D0,D1
                    6852   domul_3:
00003FE8  2F02      6853          move.l  D2,-(A7)
00003FEA  2401      6854          move.l  D1,D2
00003FEC  4842      6855          swap    D2
00003FEE  C2C0      6856          mulu    D0,D1
00003FF0  C4C0      6857          mulu    D0,D2
00003FF2  4842      6858          swap    D2
00003FF4  4242      6859          clr.w   D2
00003FF6  D282      6860          add.l   D2,D1
00003FF8  241F      6861          move.l  (A7)+,D2
00003FFA  4E75      6862          rts
                    6863   domul_4:
00003FFC  48E7 3000 6864          movem.l D2/D3,-(A7)
00004000  2401      6865          move.l  D1,D2
00004002  2601      6866          move.l  D1,D3
00004004  C2C0      6867          mulu    D0,D1
00004006  4842      6868          swap    D2
00004008  C4C0      6869          mulu    D0,D2
0000400A  4840      6870          swap    D0
0000400C  C6C0      6871          mulu    D0,D3
0000400E  D483      6872          add.l   D3,D2
00004010  4842      6873          swap    D2
00004012  4242      6874          clr.w   D2
00004014  D282      6875          add.l   D2,D1
00004016  4CDF 000C 6876          movem.l (A7)+,D2/D3
0000401A  4E75      6877          rts
                    6878   _gets:
0000401C  4E56 0000 6879          link      A6,#0
00004020  48E7 3820 6880          movem.l   D2/D3/D4/A2,-(A7)
00004024  45F8 2E7A 6881          lea       _putch,A2
00004028  282E 0008 6882          move.l    8(A6),D4
0000402C  2404      6883          move.l    D4,D2
                    6884   gets_1:
0000402E  6100 EE7A 6885          bsr       _getch
00004032  2600      6886          move.l    D0,D3
00004034  0C80 0000 6887          cmp.l     #10,D0
00004038  000A      
0000403A  6700 003C 6888          beq       gets_3
0000403E  0C83 0000 6889          cmp.l     #8,D3
00004042  0008      
00004044  6712      6890          beq.s     gets_4
00004046  2042      6891          move.l    D2,A0
00004048  5282      6892          addq.l    #1,D2
0000404A  1083      6893          move.b    D3,(A0)
0000404C  4883      6894          ext.w     D3
0000404E  48C3      6895          ext.l     D3
00004050  2F03      6896          move.l    D3,-(A7)
00004052  4E92      6897          jsr       (A2)
00004054  584F      6898          addq.w    #4,A7
00004056  601E      6899          bra.s     gets_6
                    6900   gets_4:
00004058  B484      6901          cmp.l     D4,D2
0000405A  631A      6902          bls.s     gets_6
0000405C  4878 0008 6903          pea       8
00004060  4E92      6904          jsr       (A2)
00004062  584F      6905          addq.w    #4,A7
00004064  4878 0020 6906          pea       32
00004068  4E92      6907          jsr       (A2)
0000406A  584F      6908          addq.w    #4,A7
0000406C  4878 0008 6909          pea       8
00004070  4E92      6910          jsr       (A2)
00004072  584F      6911          addq.w    #4,A7
00004074  5382      6912          subq.l    #1,D2
                    6913   gets_6:
00004076  60B6      6914          bra       gets_1
                    6915   gets_3:
00004078  4878 000A 6916          pea       10
0000407C  4E92      6917          jsr       (A2)
0000407E  584F      6918          addq.w    #4,A7
00004080  2042      6919          move.l    D2,A0
00004082  4210      6920          clr.b     (A0)
00004084  2004      6921          move.l    D4,D0
00004086  4CDF 041C 6922          movem.l   (A7)+,D2/D3/D4/A2
0000408A  4E5E      6923          unlk      A6
0000408C  4E75      6924          rts
                    6925   _ungetch:
0000408E  4E56 0000 6926          link      A6,#0
00004092  23EE 0008 6927          move.l    8(A6),__ungetbuf
00004096  0B00 00C0 
0000409A  202E 0008 6928          move.l    8(A6),D0
0000409E  4E5E      6929          unlk      A6
000040A0  4E75      6930          rts
                    6931   @itoa_convert:
000040A2  4E56 0000 6932          link      A6,#0
000040A6  48E7 3C00 6933          movem.l   D2/D3/D4/D5,-(A7)
000040AA  242E 0008 6934          move.l    8(A6),D2
000040AE  262E 0010 6935          move.l    16(A6),D3
000040B2  2A2E 000C 6936          move.l    12(A6),D5
000040B6  2F05      6937          move.l    D5,-(A7)
000040B8  2F03      6938          move.l    D3,-(A7)
000040BA  6100 ECE0 6939          bsr       ULDIV
000040BE  202F 0004 6940          move.l    4(A7),D0
000040C2  504F      6941          addq.w    #8,A7
000040C4  2800      6942          move.l    D0,D4
000040C6  BA83      6943          cmp.l     D3,D5
000040C8  651A      6944          blo.s     @itoa_convert_1
000040CA  2F03      6945          move.l    D3,-(A7)
000040CC  2F05      6946          move.l    D5,-(A7)
000040CE  2F03      6947          move.l    D3,-(A7)
000040D0  6100 ECCA 6948          bsr       ULDIV
000040D4  2217      6949          move.l    (A7),D1
000040D6  504F      6950          addq.w    #8,A7
000040D8  2F01      6951          move.l    D1,-(A7)
000040DA  2F02      6952          move.l    D2,-(A7)
000040DC  61C4      6953          bsr       @itoa_convert
000040DE  DEFC 000C 6954          add.w     #12,A7
000040E2  2400      6955          move.l    D0,D2
                    6956   @itoa_convert_1:
000040E4  0C84 0000 6957          cmp.l     #9,D4
000040E8  0009      
000040EA  6E0A      6958          bgt.s     @itoa_convert_3
000040EC  2004      6959          move.l    D4,D0
000040EE  0680 0000 6960          add.l     #48,D0
000040F2  0030      
000040F4  600E      6961          bra.s     @itoa_convert_4
                    6962   @itoa_convert_3:
000040F6  2004      6963          move.l    D4,D0
000040F8  0680 0000 6964          add.l     #97,D0
000040FC  0061      
000040FE  0480 0000 6965          sub.l     #10,D0
00004102  000A      
                    6966   @itoa_convert_4:
00004104  2042      6967          move.l    D2,A0
00004106  1080      6968          move.b    D0,(A0)
00004108  2002      6969          move.l    D2,D0
0000410A  5280      6970          addq.l    #1,D0
0000410C  4CDF 003C 6971          movem.l   (A7)+,D2/D3/D4/D5
00004110  4E5E      6972          unlk      A6
00004112  4E75      6973          rts
                    6974   _ltoa:
00004114  4E56 0000 6975          link      A6,#0
00004118  48E7 3C00 6976          movem.l   D2/D3/D4/D5,-(A7)
0000411C  242E 0008 6977          move.l    8(A6),D2
00004120  262E 000C 6978          move.l    12(A6),D3
00004124  2A2E 0010 6979          move.l    16(A6),D5
00004128  2803      6980          move.l    D3,D4
0000412A  0C85 0000 6981          cmp.l     #2,D5
0000412E  0002      
00004130  6D08      6982          blt.s     ltoa_3
00004132  0C85 0000 6983          cmp.l     #36,D5
00004136  0024      
00004138  6F06      6984          ble.s     ltoa_1
                    6985   ltoa_3:
0000413A  2003      6986          move.l    D3,D0
0000413C  6000 0052 6987          bra       ltoa_4
                    6988   ltoa_1:
00004140  0C85 0000 6989          cmp.l     #10,D5
00004144  000A      
00004146  6600 0032 6990          bne       ltoa_5
0000414A  0C82 0000 6991          cmp.l     #0,D2
0000414E  0000      
00004150  6C28      6992          bge.s     ltoa_5
00004152  2002      6993          move.l    D2,D0
00004154  4480      6994          neg.l     D0
00004156  2400      6995          move.l    D0,D2
00004158  0C82 0000 6996          cmp.l     #0,D2
0000415C  0000      
0000415E  6C12      6997          bge.s     ltoa_7
00004160  4879 0000 6998          pea       @itoa_1
00004164  568A      
00004166  2F03      6999          move.l    D3,-(A7)
00004168  6100 EC22 7000          bsr       _strcpy
0000416C  504F      7001          addq.w    #8,A7
0000416E  2003      7002          move.l    D3,D0
00004170  601E      7003          bra.s     ltoa_4
                    7004   ltoa_7:
00004172  2044      7005          move.l    D4,A0
00004174  5284      7006          addq.l    #1,D4
00004176  10BC 002D 7007          move.b    #45,(A0)
                    7008   ltoa_5:
0000417A  2F05      7009          move.l    D5,-(A7)
0000417C  2F02      7010          move.l    D2,-(A7)
0000417E  2F04      7011          move.l    D4,-(A7)
00004180  6100 FF20 7012          bsr       @itoa_convert
00004184  DEFC 000C 7013          add.w     #12,A7
00004188  2800      7014          move.l    D0,D4
0000418A  2044      7015          move.l    D4,A0
0000418C  4210      7016          clr.b     (A0)
0000418E  2003      7017          move.l    D3,D0
                    7018   ltoa_4:
00004190  4CDF 003C 7019          movem.l   (A7)+,D2/D3/D4/D5
00004194  4E5E      7020          unlk      A6
00004196  4E75      7021          rts
                    7022   _ultoa:
00004198  4E56 0000 7023          link      A6,#0
0000419C  48E7 3800 7024          movem.l   D2/D3/D4,-(A7)
000041A0  262E 0010 7025          move.l    16(A6),D3
000041A4  282E 000C 7026          move.l    12(A6),D4
000041A8  2404      7027          move.l    D4,D2
000041AA  0C83 0000 7028          cmp.l     #2,D3
000041AE  0002      
000041B0  6D08      7029          blt.s     ultoa_3
000041B2  0C83 0000 7030          cmp.l     #36,D3
000041B6  0024      
000041B8  6F04      7031          ble.s     ultoa_1
                    7032   ultoa_3:
000041BA  2004      7033          move.l    D4,D0
000041BC  6018      7034          bra.s     ultoa_4
                    7035   ultoa_1:
000041BE  2F03      7036          move.l    D3,-(A7)
000041C0  2F2E 0008 7037          move.l    8(A6),-(A7)
000041C4  2F02      7038          move.l    D2,-(A7)
000041C6  6100 FEDA 7039          bsr       @itoa_convert
000041CA  DEFC 000C 7040          add.w     #12,A7
000041CE  2400      7041          move.l    D0,D2
000041D0  2042      7042          move.l    D2,A0
000041D2  4210      7043          clr.b     (A0)
000041D4  2004      7044          move.l    D4,D0
                    7045   ultoa_4:
000041D6  4CDF 001C 7046          movem.l   (A7)+,D2/D3/D4
000041DA  4E5E      7047          unlk      A6
000041DC  4E75      7048          rts
                    7049   _itoa:
000041DE  4E56 0000 7050          link      A6,#0
000041E2  2F2E 0010 7051          move.l    16(A6),-(A7)
000041E6  2F2E 000C 7052          move.l    12(A6),-(A7)
000041EA  2F2E 0008 7053          move.l    8(A6),-(A7)
000041EE  6100 FF24 7054          bsr       _ltoa
000041F2  DEFC 000C 7055          add.w     #12,A7
000041F6  4E5E      7056          unlk      A6
000041F8  4E75      7057          rts
                    7058   _strlen:
000041FA  206F 0004 7059          move.l    (4,A7),A0
000041FE  2248      7060          move.l    A0,A1
                    7061   strlen_1:
00004200  4A19      7062          tst.b     (A1)+
00004202  66FC      7063          bne       strlen_1
00004204  2009      7064          move.l    A1,D0
00004206  9088      7065          sub.l     A0,D0
00004208  5380      7066          subq.l    #1,D0
0000420A  4E75      7067          rts
                    7068          section   const
                    7069   
                    7070   @m68kde~1_1:
0000420C  0D0A 00   7071          dc.b      13,10,0
                    7072   @m68kde~1_2:
00004210  0D53 7769 7073          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004214  7463 6865 
00004218  7320 5357 
0000421C  5B        
0000421D  372D 305D 7074          dc.b      55,45,48,93,32,61,32,0
00004221  203D 2000 
                    7075   @m68kde~1_3:
00004226  3000      7076          dc.b      48,0
                    7077   @m68kde~1_4:
00004228  3100      7078          dc.b      49,0
                    7079   @m68kde~1_5:
0000422A  0D0A 4475 7080          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
0000422E  6D70 204D 
00004232  656D 6F72 
00004236  79        
00004237  2042 6C6F 7081          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
0000423B  636B 3A20 
0000423F  3C45 5343 
00004243  3E20      
00004245  746F 2041 7082          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004249  626F 7274 
0000424D  2C20 3C53 
00004251  50        
00004252  4143 453E 7083          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004256  2074 6F20 
0000425A  436F 6E74 
0000425E  69        
0000425F  6E75 6500 7084          dc.b      110,117,101,0
                    7085   @m68kde~1_6:
00004264  0D0A 456E 7086          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004268  7465 7220 
0000426C  5374 6172 
00004270  74        
00004271  2041 6464 7087          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004275  7265 7373 
00004279  3A20 00   
                    7088   @m68kde~1_7:
0000427C  0D0A 2530 7089          dc.b      13,10,37,48,56,120,32,0
00004280  3878 2000 
                    7090   @m68kde~1_8:
00004284  2530 3258 7091          dc.b      37,48,50,88,0
00004288  00        
                    7092   @m68kde~1_9:
0000428A  2020 00   7093          dc.b      32,32,0
                    7094   @m68kde~1_10:
0000428E  0D0A 4669 7095          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004292  6C6C 204D 
00004296  656D 6F72 
0000429A  79        
0000429B  2042 6C6F 7096          dc.b      32,66,108,111,99,107,0
0000429F  636B 00   
                    7097   @m68kde~1_11:
000042A2  0D0A 456E 7098          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000042A6  7465 7220 
000042AA  456E 6420 
000042AE  41        
000042AF  6464 7265 7099          dc.b      100,100,114,101,115,115,58,32,0
000042B3  7373 3A20 
000042B7  00        
                    7100   @m68kde~1_12:
000042B8  0D0A 456E 7101          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000042BC  7465 7220 
000042C0  4669 6C6C 
000042C4  20        
000042C5  4461 7461 7102          dc.b      68,97,116,97,58,32,0
000042C9  3A20 00   
                    7103   @m68kde~1_13:
000042CC  0D0A 4669 7104          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000042D0  6C6C 696E 
000042D4  6720 4164 
000042D8  64        
000042D9  7265 7373 7105          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000042DD  6573 205B 
000042E1  2425 3038 
000042E5  58        
000042E6  202D 2024 7106          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000042EA  2530 3858 
000042EE  5D20 7769 
000042F2  7468      
000042F4  2024 2530 7107          dc.b      32,36,37,48,50,88,0
000042F8  3258 00   
                    7108   @m68kde~1_14:
000042FC  0D0A 5573 7109          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00004300  6520 4879 
00004304  7065 7254 
00004308  65        
00004309  726D 696E 7110          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
0000430D  616C 2074 
00004311  6F20 5365 
00004315  6E64 2054 7111          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004319  6578 7420 
0000431D  4669 6C65 
00004321  2028 2E68 7112          dc.b      32,40,46,104,101,120,41,13,10,0
00004325  6578 290D 
00004329  0A00      
                    7113   @m68kde~1_15:
0000432C  0D0A 4C6F 7114          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004330  6164 2046 
00004334  6169 6C65 
00004338  64        
00004339  2061 7420 7115          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000433D  4164 6472 
00004341  6573 7320 
00004345  3D        
00004346  205B 2425 7116          dc.b      32,91,36,37,48,56,88,93,13,10,0
0000434A  3038 585D 
0000434E  0D0A 00   
                    7117   @m68kde~1_16:
00004352  0D0A 5375 7118          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004356  6363 6573 
0000435A  733A 2044 
0000435E  6F        
0000435F  776E 6C6F 7119          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004363  6164 6564 
00004367  2025 6420 
0000436B  6279 7465 7120          dc.b      98,121,116,101,115,13,10,0
0000436F  730D 0A00 
                    7121   @m68kde~1_17:
00004374  0D0A 4578 7122          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004378  616D 696E 
0000437C  6520 616E 
00004380  64        
00004381  2043 6861 7123          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004385  6E67 6520 
00004389  4D65 6D6F 
0000438D  72        
0000438E  7900      7124          dc.b      121,0
                    7125   @m68kde~1_18:
00004390  0D0A 3C45 7126          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004394  5343 3E20 
00004398  746F 2053 
0000439C  746F      
0000439E  702C 203C 7127          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000043A2  5350 4143 
000043A6  453E 2074 
000043AA  6F20      
000043AC  4164 7661 7128          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000043B0  6E63 652C 
000043B4  2027 2D27 
000043B8  2074      
000043BA  6F20 476F 7129          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000043BE  2042 6163 
000043C2  6B2C 203C 
000043C6  4441      
000043C8  5441 3E20 7130          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000043CC  746F 2063 
000043D0  6861 6E67 
000043D4  65        
000043D5  00        7131          dc.b      0
                    7132   @m68kde~1_19:
000043D6  0D0A 456E 7133          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000043DA  7465 7220 
000043DE  4164 6472 
000043E2  65        
000043E3  7373 3A20 7134          dc.b      115,115,58,32,0
000043E7  00        
                    7135   @m68kde~1_20:
000043E8  0D0A 5B25 7136          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000043EC  3038 785D 
000043F0  203A 2025 
000043F4  3032 78   
000043F7  2020 00   7137          dc.b      32,32,0
                    7138   @m68kde~1_21:
000043FA  0D0A 5761 7139          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000043FE  726E 696E 
00004402  6720 4368 
00004406  61        
00004407  6E67 6520 7140          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
0000440B  4661 696C 
0000440F  6564 3A20 
00004413  57        
00004414  726F 7465 7141          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004418  205B 2530 
0000441C  3278 5D2C 
00004420  20        
00004421  5265 6164 7142          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004425  205B 2530 
00004429  3278 5D00 
                    7143   @m68kde~1_22:
0000442E  0D0A 2053 7144          dc.b      13,10,32,83,80,73,95,68,65,84,65,32,82,69,71
00004432  5049 5F44 
00004436  4154 4120 
0000443A  5245 47   
0000443D  3A20 2530 7145          dc.b      58,32,37,48,56,120,32,32,10,0
00004441  3878 2020 
00004445  0A00      
                    7146   @m68kde~1_23:
00004448  5375 6363 7147          dc.b      83,117,99,99,101,115,102,117,108,108,10,0
0000444C  6573 6675 
00004450  6C6C 0A00 
                    7148   @m68kde~1_24:
00004454  0D0A 4C6F 7149          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00004458  6164 696E 
0000445C  6720 5072 
00004460  6F        
00004461  6772 616D 7150          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00004465  2046 726F 
00004469  6D20 5350 
0000446D  49        
0000446E  2046 6C61 7151          dc.b      32,70,108,97,115,104,46,46,46,46,0
00004472  7368 2E2E 
00004476  2E2E 00   
                    7152   @m68kde~1_25:
0000447A  2425 3038 7153          dc.b      36,37,48,56,88,32,32,0
0000447E  5820 2000 
                    7154   @m68kde~1_26:
00004482  2000      7155          dc.b      32,0
                    7156   @m68kde~1_27:
00004484  2E00      7157          dc.b      46,0
                    7158   @m68kde~1_28:
00004486  2563 00   7159          dc.b      37,99,0
                    7160   @m68kde~1_29:
0000448A  00        7161          dc.b      0
                    7162   @m68kde~1_30:
0000448C  0D0A 0D0A 7163          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004490  2044 3020 
00004494  3D20 2425 
00004498  3038 58   
0000449B  2020 4130 7164          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
0000449F  203D 2024 
000044A3  2530 3858 
000044A7  00        
                    7165   @m68kde~1_31:
000044A8  0D0A 2044 7166          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000044AC  3120 3D20 
000044B0  2425 3038 
000044B4  5820 20   
000044B7  4131 203D 7167          dc.b      65,49,32,61,32,36,37,48,56,88,0
000044BB  2024 2530 
000044BF  3858 00   
                    7168   @m68kde~1_32:
000044C2  0D0A 2044 7169          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000044C6  3220 3D20 
000044CA  2425 3038 
000044CE  5820 20   
000044D1  4132 203D 7170          dc.b      65,50,32,61,32,36,37,48,56,88,0
000044D5  2024 2530 
000044D9  3858 00   
                    7171   @m68kde~1_33:
000044DC  0D0A 2044 7172          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
000044E0  3320 3D20 
000044E4  2425 3038 
000044E8  5820 20   
000044EB  4133 203D 7173          dc.b      65,51,32,61,32,36,37,48,56,88,0
000044EF  2024 2530 
000044F3  3858 00   
                    7174   @m68kde~1_34:
000044F6  0D0A 2044 7175          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000044FA  3420 3D20 
000044FE  2425 3038 
00004502  5820 20   
00004505  4134 203D 7176          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004509  2024 2530 
0000450D  3858 00   
                    7177   @m68kde~1_35:
00004510  0D0A 2044 7178          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004514  3520 3D20 
00004518  2425 3038 
0000451C  5820 20   
0000451F  4135 203D 7179          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004523  2024 2530 
00004527  3858 00   
                    7180   @m68kde~1_36:
0000452A  0D0A 2044 7181          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
0000452E  3620 3D20 
00004532  2425 3038 
00004536  5820 20   
00004539  4136 203D 7182          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000453D  2024 2530 
00004541  3858 00   
                    7183   @m68kde~1_37:
00004544  0D0A 2044 7184          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004548  3720 3D20 
0000454C  2425 3038 
00004550  5820 20   
00004553  4137 203D 7185          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004557  2024 2530 
0000455B  3858 00   
                    7186   @m68kde~1_38:
0000455E  0D0A 0D0A 7187          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004562  5553 5020 
00004566  3D20 2425 
0000456A  3038 58   
0000456D  2020 2841 7188          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004571  3729 2055 
00004575  7365 7220 
00004579  5350      
0000457B  00        7189          dc.b      0
                    7190   @m68kde~1_39:
0000457C  0D0A 5353 7191          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004580  5020 3D20 
00004584  2425 3038 
00004588  5820 20   
0000458B  2841 3729 7192          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
0000458F  2053 7570 
00004593  6572 7669 
00004597  73        
00004598  6F72 2053 7193          dc.b      111,114,32,83,80,0
0000459C  5000      
                    7194   @m68kde~1_40:
0000459E  0D0A 2053 7195          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000045A2  5220 3D20 
000045A6  2425 3034 
000045AA  5820 20   
000045AD  2000      7196          dc.b      32,0
                    7197   @m68kde~1_41:
000045B0  2020 205B 7198          dc.b      32,32,32,91,0
000045B4  00        
                    7199   @m68kde~1_42:
000045B6  0D0A 2050 7200          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000045BA  4320 3D20 
000045BE  2425 3038 
000045C2  5820 20   
000045C5  00        7201          dc.b      0
                    7202   @m68kde~1_43:
000045C6  5B40 2042 7203          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
000045CA  5245 414B 
000045CE  504F 494E 
000045D2  545D 00   
                    7204   @m68kde~1_44:
000045D6  0D0A 5750 7205          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000045DA  2564 203D 
000045DE  2025 7300 
                    7206   @m68kde~1_45:
000045E2  0D0A 0D0A 7207          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000045E6  0D0A 0D0A 
000045EA  0D0A 0D0A 
000045EE  5369 6E   
000045F1  676C 6520 7208          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000045F5  5374 6570 
000045F9  2020 3A5B 
000045FD  4F        
000045FE  4E5D 00   7209          dc.b      78,93,0
                    7210   @m68kde~1_46:
00004602  0D0A 4272 7211          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004606  6561 6B20 
0000460A  506F 696E 
0000460E  74        
0000460F  7320 3A5B 7212          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004613  4469 7361 
00004617  626C 6564 
0000461B  5D        
0000461C  00        7213          dc.b      0
                    7214   @m68kde~1_47:
0000461E  0D0A 5072 7215          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004622  6573 7320 
00004626  3C53 5041 
0000462A  4345      
0000462C  3E20 746F 7216          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004630  2045 7865 
00004634  6375 7465 
00004638  20        
00004639  4E65 7874 7217          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000463D  2049 6E73 
00004641  7472 7563 
00004645  7469 6F6E 7218          dc.b      116,105,111,110,0
00004649  00        
                    7219   @m68kde~1_48:
0000464A  0D0A 5072 7220          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000464E  6573 7320 
00004652  3C45 5343 
00004656  3E20      
00004658  746F 2052 7221          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
0000465C  6573 756D 
00004660  6520 5072 
00004664  6F67 7261 7222          dc.b      111,103,114,97,109,0
00004668  6D00      
                    7223   @m68kde~1_49:
0000466A  0D0A 496C 7224          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
0000466E  6C65 6761 
00004672  6C20 4461 
00004676  74        
00004677  6120 5265 7225          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
0000467B  6769 7374 
0000467F  6572 203A 
00004683  20        
00004684  5573 6520 7226          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004688  4430 2D44 
0000468C  372E 2E2E 
00004690  2E2E      
00004692  0D0A 00   7227          dc.b      13,10,0
                    7228   @m68kde~1_50:
00004696  0D0A 4425 7229          dc.b      13,10,68,37,99,32,61,32,0
0000469A  6320 3D20 
0000469E  00        
                    7230   @m68kde~1_51:
000046A0  0D0A 496C 7231          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000046A4  6C65 6761 
000046A8  6C20 4164 
000046AC  64        
000046AD  7265 7373 7232          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000046B1  2052 6567 
000046B5  6973 7465 
000046B9  7220 3A20 7233          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000046BD  5573 6520 
000046C1  4130 2D41 
000046C5  372E      
000046C7  2E2E 2E2E 7234          dc.b      46,46,46,46,13,10,0
000046CB  0D0A 00   
                    7235   @m68kde~1_52:
000046CE  0D0A 4125 7236          dc.b      13,10,65,37,99,32,61,32,0
000046D2  6320 3D20 
000046D6  00        
                    7237   @m68kde~1_53:
000046D8  0D0A 5573 7238          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000046DC  6572 2053 
000046E0  5020 3D20 
000046E4  00        
                    7239   @m68kde~1_54:
000046E6  0D0A 496C 7240          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000046EA  6C65 6761 
000046EE  6C20 5265 
000046F2  67        
000046F3  6973 7465 7241          dc.b      105,115,116,101,114,46,46,46,46,0
000046F7  722E 2E2E 
000046FB  2E00      
                    7242   @m68kde~1_55:
000046FE  0D0A 5379 7243          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004702  7374 656D 
00004706  2053 5020 
0000470A  3D        
0000470B  2000      7244          dc.b      32,0
                    7245   @m68kde~1_56:
0000470E  0D0A 5043 7246          dc.b      13,10,80,67,32,61,32,0
00004712  203D 2000 
                    7247   @m68kde~1_57:
00004716  0D0A 5352 7248          dc.b      13,10,83,82,32,61,32,0
0000471A  203D 2000 
                    7249   @m68kde~1_58:
0000471E  0D0A 496C 7250          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004722  6C65 6761 
00004726  6C20 5265 
0000472A  67        
0000472B  6973 7465 7251          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
0000472F  723A 2055 
00004733  7365 2041 
00004737  30        
00004738  2D41 372C 7252          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000473C  2044 302D 
00004740  4437 2C20 
00004744  5353 50   
00004747  2C20 5553 7253          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000474B  502C 2050 
0000474F  4320 6F72 
00004753  2053      
00004755  520D 0A00 7254          dc.b      82,13,10,0
                    7255   @m68kde~1_59:
0000475A  0D0A 0D0A 7256          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
0000475E  4E75 6D20 
00004762  2020 2020 
00004766  4164      
00004768  6472 6573 7257          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
0000476C  7320 2020 
00004770  2020 2049 
00004774  6E        
00004775  7374 7275 7258          dc.b      115,116,114,117,99,116,105,111,110,0
00004779  6374 696F 
0000477D  6E00      
                    7259   @m68kde~1_60:
00004780  0D0A 2D2D 7260          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004784  2D20 2020 
00004788  2020 2D2D 
0000478C  2D2D 2D   
0000478F  2D2D 2D2D 7261          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004793  2020 2020 
00004797  2D2D 2D2D 
0000479B  2D2D 2D   
0000479E  2D2D 2D2D 7262          dc.b      45,45,45,45,0
000047A2  00        
                    7263   @m68kde~1_61:
000047A4  0D0A 4E6F 7264          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000047A8  2042 7265 
000047AC  616B 506F 
000047B0  69        
000047B1  6E74 7320 7265          dc.b      110,116,115,32,83,101,116,0
000047B5  5365 7400 
                    7266   @m68kde~1_62:
000047BA  0D0A 2533 7267          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000047BE  6420 2020 
000047C2  2020 2425 
000047C6  3038 78   
000047C9  00        7268          dc.b      0
                    7269   @m68kde~1_63:
000047CA  0D0A 4E75 7270          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000047CE  6D20 2020 
000047D2  2020 4164 
000047D6  6472      
000047D8  6573 7300 7271          dc.b      101,115,115,0
                    7272   @m68kde~1_64:
000047DC  0D0A 2D2D 7273          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000047E0  2D20 2020 
000047E4  2020 2D2D 
000047E8  2D2D 2D   
000047EB  2D2D 2D2D 7274          dc.b      45,45,45,45,0
000047EF  00        
                    7275   @m68kde~1_65:
000047F0  0D0A 4E6F 7276          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000047F4  2057 6174 
000047F8  6368 506F 
000047FC  69        
000047FD  6E74 7320 7277          dc.b      110,116,115,32,83,101,116,0
00004801  5365 7400 
                    7278   @m68kde~1_66:
00004806  0D0A 456E 7279          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000480A  7465 7220 
0000480E  4272 6561 
00004812  6B        
00004813  2050 6F69 7280          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004817  6E74 204E 
0000481B  756D 6265 
0000481F  72        
00004820  3A20 00   7281          dc.b      58,32,0
                    7282   @m68kde~1_67:
00004824  0D0A 496C 7283          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004828  6C65 6761 
0000482C  6C20 5261 
00004830  6E        
00004831  6765 203A 7284          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004835  2055 7365 
00004839  2030 202D 
0000483D  2037      
0000483F  00        7285          dc.b      0
                    7286   @m68kde~1_68:
00004840  0D0A 4272 7287          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004844  6561 6B20 
00004848  506F 696E 
0000484C  74        
0000484D  2043 6C65 7288          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004851  6172 6564 
00004855  2E2E 2E2E 
00004859  2E        
0000485A  0D0A 00   7289          dc.b      13,10,0
                    7290   @m68kde~1_69:
0000485E  0D0A 4272 7291          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004862  6561 6B20 
00004866  506F 696E 
0000486A  74        
0000486B  2077 6173 7292          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
0000486F  6E27 7420 
00004873  5365 742E 
00004877  2E        
00004878  2E2E 2E00 7293          dc.b      46,46,46,0
                    7294   @m68kde~1_70:
0000487C  0D0A 456E 7295          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004880  7465 7220 
00004884  5761 7463 
00004888  68        
00004889  2050 6F69 7296          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000488D  6E74 204E 
00004891  756D 6265 
00004895  72        
00004896  3A20 00   7297          dc.b      58,32,0
                    7298   @m68kde~1_71:
0000489A  0D0A 5761 7299          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000489E  7463 6820 
000048A2  506F 696E 
000048A6  74        
000048A7  2043 6C65 7300          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000048AB  6172 6564 
000048AF  2E2E 2E2E 
000048B3  2E        
000048B4  0D0A 00   7301          dc.b      13,10,0
                    7302   @m68kde~1_72:
000048B8  0D0A 5761 7303          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000048BC  7463 6820 
000048C0  506F 696E 
000048C4  74        
000048C5  2057 6173 7304          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000048C9  206E 6F74 
000048CD  2053 6574 
000048D1  2E        
000048D2  2E2E 2E2E 7305          dc.b      46,46,46,46,0
000048D6  00        
                    7306   @m68kde~1_73:
000048D8  0D0A 4E6F 7307          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000048DC  2046 5245 
000048E0  4520 4272 
000048E4  6561      
000048E6  6B20 506F 7308          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000048EA  696E 7473 
000048EE  2E2E 2E2E 
000048F2  2E        
000048F3  00        7309          dc.b      0
                    7310   @m68kde~1_74:
000048F4  0D0A 4272 7311          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000048F8  6561 6B20 
000048FC  506F 696E 
00004900  74        
00004901  2041 6464 7312          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004905  7265 7373 
00004909  3A20 00   
                    7313   @m68kde~1_75:
0000490C  0D0A 4572 7314          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004910  726F 7220 
00004914  3A20 4272 
00004918  65        
00004919  616B 2050 7315          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000491D  6F69 6E74 
00004921  7320 4341 
00004925  4E        
00004926  4E4F 5420 7316          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000492A  6265 2073 
0000492E  6574 2061 
00004932  74        
00004933  204F 4444 7317          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004937  2061 6464 
0000493B  7265 7373 
0000493F  65        
00004940  7300      7318          dc.b      115,0
                    7319   @m68kde~1_76:
00004942  0D0A 4572 7320          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004946  726F 7220 
0000494A  3A20 4272 
0000494E  65        
0000494F  616B 2050 7321          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004953  6F69 6E74 
00004957  7320 4341 
0000495B  4E        
0000495C  4E4F 5420 7322          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004960  6265 2073 
00004964  6574 2066 
00004968  6F        
00004969  7220 524F 7323          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
0000496D  4D20 696E 
00004971  2052 616E 
00004975  67        
00004976  6520 3A20 7324          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
0000497A  5B24 302D 
0000497E  2430 3030 
00004982  3037 46   
00004985  4646 5D00 7325          dc.b      70,70,93,0
                    7326   @m68kde~1_77:
0000498A  0D0A 4572 7327          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
0000498E  726F 723A 
00004992  2042 7265 
00004996  61        
00004997  6B20 506F 7328          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
0000499B  696E 7420 
0000499F  416C 7265 
000049A3  6164 7920 7329          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000049A7  4578 6973 
000049AB  7473 2061 
000049AF  74        
000049B0  2041 6464 7330          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000049B4  7265 7373 
000049B8  203A 2025 
000049BC  30        
000049BD  3878 0D0A 7331          dc.b      56,120,13,10,0
000049C1  00        
                    7332   @m68kde~1_78:
000049C2  0D0A 4272 7333          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000049C6  6561 6B20 
000049CA  506F 696E 
000049CE  74        
000049CF  2053 6574 7334          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000049D3  2061 7420 
000049D7  4164 6472 
000049DB  65        
000049DC  7373 3A20 7335          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000049E0  5B24 2530 
000049E4  3878 5D00 
                    7336   @m68kde~1_79:
000049E8  0D0A 4E6F 7337          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000049EC  2046 5245 
000049F0  4520 5761 
000049F4  7463      
000049F6  6820 506F 7338          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
000049FA  696E 7473 
000049FE  2E2E 2E2E 
00004A02  2E        
00004A03  00        7339          dc.b      0
                    7340   @m68kde~1_80:
00004A04  0D0A 5761 7341          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004A08  7463 6820 
00004A0C  506F 696E 
00004A10  74        
00004A11  2041 6464 7342          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004A15  7265 7373 
00004A19  3A20 00   
                    7343   @m68kde~1_81:
00004A1C  0D0A 4572 7344          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004A20  726F 723A 
00004A24  2057 6174 
00004A28  63        
00004A29  6820 506F 7345          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004A2D  696E 7420 
00004A31  416C 7265 
00004A35  6164 7920 7346          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004A39  5365 7420 
00004A3D  6174 2041 
00004A41  64        
00004A42  6472 6573 7347          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004A46  7320 3A20 
00004A4A  2530 3878 
00004A4E  0D        
00004A4F  0A00      7348          dc.b      10,0
                    7349   @m68kde~1_82:
00004A52  0D0A 5761 7350          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004A56  7463 6820 
00004A5A  506F 696E 
00004A5E  74        
00004A5F  2053 6574 7351          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004A63  2061 7420 
00004A67  4164 6472 
00004A6B  65        
00004A6C  7373 3A20 7352          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004A70  5B24 2530 
00004A74  3878 5D00 
                    7353   @m68kde~1_83:
00004A78  0D0A 0D0A 7354          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004A7C  0D0A 0D0A 
00004A80  4042 5245 
00004A84  414B 50   
00004A87  4F49 4E54 7355          dc.b      79,73,78,84,0
00004A8B  00        
                    7356   @m68kde~1_84:
00004A8C  0D0A 5369 7357          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004A90  6E67 6C65 
00004A94  2053 7465 
00004A98  70        
00004A99  203A 205B 7358          dc.b      32,58,32,91,79,78,93,0
00004A9D  4F4E 5D00 
                    7359   @m68kde~1_85:
00004AA2  0D0A 4272 7360          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004AA6  6561 6B50 
00004AAA  6F69 6E74 
00004AAE  73        
00004AAF  203A 205B 7361          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004AB3  456E 6162 
00004AB7  6C65 645D 
00004ABB  00        
                    7362   @m68kde~1_86:
00004ABC  0D0A 5072 7363          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004AC0  6573 7320 
00004AC4  3C45 5343 
00004AC8  3E20      
00004ACA  746F 2052 7364          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004ACE  6573 756D 
00004AD2  6520 5573 
00004AD6  6572 2050 7365          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004ADA  726F 6772 
00004ADE  616D 0D0A 
00004AE2  00        
                    7366   @m68kde~1_87:
00004AE4  0D0A 556E 7367          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004AE8  6B6E 6F77 
00004AEC  6E20 436F 
00004AF0  6D        
00004AF1  6D61 6E64 7368          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004AF5  2E2E 2E2E 
00004AF9  2E0D 0A00 
                    7369   @m68kde~1_88:
00004AFE  0D0A 5072 7370          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004B02  6F67 7261 
00004B06  6D20 456E 
00004B0A  64        
00004B0B  6564 2028 7371          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004B0F  5452 4150 
00004B13  2023 3135 
00004B17  292E      
00004B19  2E2E 2E00 7372          dc.b      46,46,46,0
                    7373   @m68kde~1_89:
00004B1E  0D0A 4B69 7374          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004B22  6C6C 2041 
00004B26  6C6C 2042 
00004B2A  72        
00004B2B  6561 6B20 7375          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004B2F  506F 696E 
00004B33  7473 2E2E 
00004B37  2E        
00004B38  2879 2F6E 7376          dc.b      40,121,47,110,41,63,0
00004B3C  293F 00   
                    7377   @m68kde~1_90:
00004B40  0D0A 4B69 7378          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004B44  6C6C 2041 
00004B48  6C6C 2057 
00004B4C  61        
00004B4D  7463 6820 7379          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004B51  506F 696E 
00004B55  7473 2E2E 
00004B59  2E        
00004B5A  2879 2F6E 7380          dc.b      40,121,47,110,41,63,0
00004B5E  293F 00   
                    7381   @m68kde~1_91:
00004B62  0D0A 2D2D 7382          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004B66  2D2D 2D2D 
00004B6A  2D2D 2D2D 
00004B6E  2D2D 2D   
00004B71  2D2D 2D2D 7383          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004B75  2D2D 2D2D 
00004B79  2D2D 2D2D 
00004B7D  2D2D 2D   
00004B80  2D2D 2D2D 7384          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004B84  2D2D 2D2D 
00004B88  2D2D 2D2D 
00004B8C  2D2D 2D   
00004B8F  2D2D 2D2D 7385          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004B93  2D2D 2D2D 
00004B97  2D2D 2D2D 
00004B9B  2D2D 2D   
00004B9E  2D2D 2D2D 7386          dc.b      45,45,45,45,45,45,0
00004BA2  2D2D 00   
                    7387   @m68kde~1_92:
00004BA6  0D0A 2020 7388          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004BAA  4465 6275 
00004BAE  6767 6572 
00004BB2  20        
00004BB3  436F 6D6D 7389          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004BB7  616E 6420 
00004BBB  5375 6D6D 
00004BBF  6172 7900 7390          dc.b      97,114,121,0
                    7391   @m68kde~1_93:
00004BC4  0D0A 2020 7392          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004BC8  2E28 7265 
00004BCC  6729 2020 
00004BD0  2020      
00004BD2  2020 202D 7393          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004BD6  2043 6861 
00004BDA  6E67 6520 
00004BDE  5265      
00004BE0  6769 7374 7394          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004BE4  6572 733A 
00004BE8  2065 2E67 
00004BEC  2041 302D 7395          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004BF0  4137 2C44 
00004BF4  302D 4437 
00004BF8  2C50 43   
00004BFB  2C53 5350 7396          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004BFF  2C55 5350 
00004C03  2C53 5200 
                    7397   @m68kde~1_94:
00004C08  0D0A 2020 7398          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004C0C  4244 2F42 
00004C10  532F 4243 
00004C14  2F42 4B   
00004C17  2020 2D20 7399          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004C1B  4272 6561 
00004C1F  6B20 506F 
00004C23  69        
00004C24  6E74 3A20 7400          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004C28  4469 7370 
00004C2C  6C61 792F 
00004C30  53        
00004C31  6574 2F43 7401          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004C35  6C65 6172 
00004C39  2F4B 696C 
00004C3D  6C        
00004C3E  00        7402          dc.b      0
                    7403   @m68kde~1_95:
00004C40  0D0A 2020 7404          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004C44  4320 2020 
00004C48  2020 2020 
00004C4C  2020 20   
00004C4F  2020 2D20 7405          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004C53  436F 7079 
00004C57  2050 726F 
00004C5B  67        
00004C5C  7261 6D20 7406          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004C60  6672 6F6D 
00004C64  2046 6C61 
00004C68  73        
00004C69  6820 746F 7407          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004C6D  204D 6169 
00004C71  6E20 4D65 
00004C75  6D        
00004C76  6F72 7900 7408          dc.b      111,114,121,0
                    7409   @m68kde~1_96:
00004C7A  0D0A 2020 7410          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004C7E  4420 2020 
00004C82  2020 2020 
00004C86  2020 20   
00004C89  2020 2D20 7411          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004C8D  4475 6D70 
00004C91  204D 656D 
00004C95  6F        
00004C96  7279 2043 7412          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004C9A  6F6E 7465 
00004C9E  6E74 7320 
00004CA2  746F 2053 7413          dc.b      116,111,32,83,99,114,101,101,110,0
00004CA6  6372 6565 
00004CAA  6E00      
                    7414   @m68kde~1_97:
00004CAC  0D0A 2020 7415          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004CB0  4520 2020 
00004CB4  2020 2020 
00004CB8  2020 20   
00004CBB  2020 2D20 7416          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004CBF  456E 7465 
00004CC3  7220 5374 
00004CC7  72        
00004CC8  696E 6720 7417          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004CCC  696E 746F 
00004CD0  204D 656D 
00004CD4  6F72 7900 7418          dc.b      111,114,121,0
                    7419   @m68kde~1_98:
00004CD8  0D0A 2020 7420          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004CDC  4620 2020 
00004CE0  2020 2020 
00004CE4  2020 20   
00004CE7  2020 2D20 7421          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004CEB  4669 6C6C 
00004CEF  204D 656D 
00004CF3  6F        
00004CF4  7279 2077 7422          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004CF8  6974 6820 
00004CFC  4461 7461 
00004D00  00        
                    7423   @m68kde~1_99:
00004D02  0D0A 2020 7424          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004D06  4720 2020 
00004D0A  2020 2020 
00004D0E  2020 20   
00004D11  2020 2D20 7425          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004D15  476F 2050 
00004D19  726F 6772 
00004D1D  61        
00004D1E  6D20 5374 7426          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004D22  6172 7469 
00004D26  6E67 2061 
00004D2A  74        
00004D2B  2041 6464 7427          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004D2F  7265 7373 
00004D33  3A20 2425 
00004D37  30        
00004D38  3858 00   7428          dc.b      56,88,0
                    7429   @m68kde~1_100:
00004D3C  0D0A 2020 7430          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004D40  4C20 2020 
00004D44  2020 2020 
00004D48  2020 20   
00004D4B  2020 2D20 7431          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004D4F  4C6F 6164 
00004D53  2050 726F 
00004D57  67        
00004D58  7261 6D20 7432          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004D5C  282E 4845 
00004D60  5820 6669 
00004D64  6C        
00004D65  6529 2066 7433          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004D69  726F 6D20 
00004D6D  4C61 7074 
00004D71  6F        
00004D72  7000      7434          dc.b      112,0
                    7435   @m68kde~1_101:
00004D74  0D0A 2020 7436          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004D78  4D20 2020 
00004D7C  2020 2020 
00004D80  2020 20   
00004D83  2020 2D20 7437          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004D87  4D65 6D6F 
00004D8B  7279 2045 
00004D8F  78        
00004D90  616D 696E 7438          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004D94  6520 616E 
00004D98  6420 4368 
00004D9C  61        
00004D9D  6E67 6500 7439          dc.b      110,103,101,0
                    7440   @m68kde~1_102:
00004DA2  0D0A 2020 7441          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004DA6  5020 2020 
00004DAA  2020 2020 
00004DAE  2020 20   
00004DB1  2020 2D20 7442          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004DB5  5072 6F67 
00004DB9  7261 6D20 
00004DBD  46        
00004DBE  6C61 7368 7443          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004DC2  204D 656D 
00004DC6  6F72 7920 
00004DCA  7769 7468 7444          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004DCE  2055 7365 
00004DD2  7220 5072 
00004DD6  6F67 7261 7445          dc.b      111,103,114,97,109,0
00004DDA  6D00      
                    7446   @m68kde~1_103:
00004DDC  0D0A 2020 7447          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004DE0  5220 2020 
00004DE4  2020 2020 
00004DE8  2020 20   
00004DEB  2020 2D20 7448          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004DEF  4469 7370 
00004DF3  6C61 7920 
00004DF7  36        
00004DF8  3830 3030 7449          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004DFC  2052 6567 
00004E00  6973 7465 
00004E04  72        
00004E05  7300      7450          dc.b      115,0
                    7451   @m68kde~1_104:
00004E08  0D0A 2020 7452          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004E0C  5320 2020 
00004E10  2020 2020 
00004E14  2020 20   
00004E17  2020 2D20 7453          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004E1B  546F 6767 
00004E1F  6C65 204F 
00004E23  4E        
00004E24  2F4F 4646 7454          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004E28  2053 696E 
00004E2C  676C 6520 
00004E30  53        
00004E31  7465 7020 7455          dc.b      116,101,112,32,77,111,100,101,0
00004E35  4D6F 6465 
00004E39  00        
                    7456   @m68kde~1_105:
00004E3A  0D0A 2020 7457          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004E3E  544D 2020 
00004E42  2020 2020 
00004E46  2020 20   
00004E49  2020 2D20 7458          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004E4D  5465 7374 
00004E51  204D 656D 
00004E55  6F        
00004E56  7279 00   7459          dc.b      114,121,0
                    7460   @m68kde~1_106:
00004E5A  0D0A 2020 7461          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004E5E  5453 2020 
00004E62  2020 2020 
00004E66  2020 20   
00004E69  2020 2D20 7462          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004E6D  5465 7374 
00004E71  2053 7769 
00004E75  74        
00004E76  6368 6573 7463          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004E7A  3A20 5357 
00004E7E  372D 3000 
                    7464   @m68kde~1_107:
00004E82  0D0A 2020 7465          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004E86  5444 2020 
00004E8A  2020 2020 
00004E8E  2020 20   
00004E91  2020 2D20 7466          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004E95  5465 7374 
00004E99  2044 6973 
00004E9D  70        
00004E9E  6C61 7973 7467          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004EA2  3A20 4C45 
00004EA6  4473 2061 
00004EAA  6E        
00004EAB  6420 372D 7468          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004EAF  5365 676D 
00004EB3  656E 7400 
                    7469   @m68kde~1_108:
00004EB8  0D0A 2020 7470          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004EBC  5744 2F57 
00004EC0  532F 5743 
00004EC4  2F57 4B   
00004EC7  2020 2D20 7471          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004ECB  5761 7463 
00004ECF  6820 506F 
00004ED3  696E      
00004ED5  743A 2044 7472          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004ED9  6973 706C 
00004EDD  6179 2F53 
00004EE1  65        
00004EE2  742F 436C 7473          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004EE6  6561 722F 
00004EEA  4B69 6C6C 
00004EEE  00        
                    7474   @m68kde~1_109:
00004EF0  0D0A 2300 7475          dc.b      13,10,35,0
                    7476   @m68kde~1_110:
00004EF4  0D0A 5072 7477          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004EF8  6F67 7261 
00004EFC  6D20 5275 
00004F00  6E        
00004F01  6E69 6E67 7478          dc.b      110,105,110,103,46,46,46,46,46,0
00004F05  2E2E 2E2E 
00004F09  2E00      
                    7479   @m68kde~1_111:
00004F0C  0D0A 5072 7480          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004F10  6573 7320 
00004F14  3C52 4553 
00004F18  4554      
00004F1A  3E20 6275 7481          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004F1E  7474 6F6E 
00004F22  203C 4B65 
00004F26  79        
00004F27  303E 206F 7482          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004F2B  6E20 4445 
00004F2F  3120 746F 
00004F33  2073      
00004F35  746F 7000 7483          dc.b      116,111,112,0
                    7484   @m68kde~1_112:
00004F3A  0D0A 4572 7485          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004F3E  726F 723A 
00004F42  2050 7265 
00004F46  73        
00004F47  7320 2747 7486          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004F4B  2720 6669 
00004F4F  7273 7420 
00004F53  74        
00004F54  6F20 7374 7487          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004F58  6172 7420 
00004F5C  7072 6F67 
00004F60  7261 6D00 7488          dc.b      114,97,109,0
                    7489   @m68kde~1_113:
00004F64  0D0A 5369 7490          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004F68  6E67 6C65 
00004F6C  2053 7465 
00004F70  70        
00004F71  2020 3A5B 7491          dc.b      32,32,58,91,79,78,93,0
00004F75  4F4E 5D00 
                    7492   @m68kde~1_114:
00004F7A  0D0A 5072 7493          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004F7E  6573 7320 
00004F82  2747 2720 
00004F86  74        
00004F87  6F20 5472 7494          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004F8B  6163 6520 
00004F8F  5072 6F67 
00004F93  72        
00004F94  616D 2066 7495          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004F98  726F 6D20 
00004F9C  6164 6472 
00004FA0  6573 7320 7496          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004FA4  2425 582E 
00004FA8  2E2E 2E2E 
00004FAC  00        
                    7497   @m68kde~1_115:
00004FAE  0D0A 5075 7498          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004FB2  7368 203C 
00004FB6  5245 5345 
00004FBA  5420      
00004FBC  4275 7474 7499          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00004FC0  6F6E 3E20 
00004FC4  746F 2053 
00004FC8  74        
00004FC9  6F70 2E2E 7500          dc.b      111,112,46,46,46,46,46,0
00004FCD  2E2E 2E00 
                    7501   @m68kde~1_116:
00004FD2  0D0A 5369 7502          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004FD6  6E67 6C65 
00004FDA  2053 7465 
00004FDE  70        
00004FDF  203A 205B 7503          dc.b      32,58,32,91,79,70,70,93,0
00004FE3  4F46 465D 
00004FE7  00        
                    7504   @m68kde~1_117:
00004FE8  0D0A 4272 7505          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004FEC  6561 6B20 
00004FF0  506F 696E 
00004FF4  74        
00004FF5  7320 3A5B 7506          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004FF9  456E 6162 
00004FFD  6C65 645D 
00005001  00        
                    7507   @m68kde~1_118:
00005002  0D0A 5072 7508          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005006  6573 7320 
0000500A  3C45 5343 
0000500E  3E20      
00005010  746F 2052 7509          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005014  6573 756D 
00005018  6520 5573 
0000501C  6572 2050 7510          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00005020  726F 6772 
00005024  616D 2E2E 
00005028  2E        
00005029  2E2E 00   7511          dc.b      46,46,0
                    7512   @m68kde~1_119:
0000502C  0D0A 5369 7513          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005030  6E67 6C65 
00005034  2053 7465 
00005038  70        
00005039  2020 3A5B 7514          dc.b      32,32,58,91,79,70,70,93,0
0000503D  4F46 465D 
00005041  00        
                    7515   @m68kde~1_120:
00005042  0D0A 0D0A 7516          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005046  5072 6F67 
0000504A  7261 6D20 
0000504E  41        
0000504F  424F 5254 7517          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00005053  2021 2121 
00005057  2121 210D 
0000505B  0A00      
                    7518   @m68kde~1_121:
0000505E  2573 0D0A 7519          dc.b      37,115,13,10,0
00005062  00        
                    7520   @m68kde~1_122:
00005064  0D0A 0D0A 7521          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005068  5072 6F67 
0000506C  7261 6D20 
00005070  41        
00005071  424F 5254 7522          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005075  2021 2121 
00005079  2121 00   
                    7523   @m68kde~1_123:
0000507C  0D0A 556E 7524          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005080  6861 6E64 
00005084  6C65 6420 
00005088  49        
00005089  6E74 6572 7525          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
0000508D  7275 7074 
00005091  3A20 4952 
00005095  5125 6420 7526          dc.b      81,37,100,32,33,33,33,33,33,0
00005099  2121 2121 
0000509D  2100      
                    7527   @m68kde~1_124:
000050A0  4144 4452 7528          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000050A4  4553 5320 
000050A8  4552 524F 
000050AC  523A 20   
000050AF  3136 206F 7529          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000050B3  7220 3332 
000050B7  2042 6974 
000050BB  2054      
000050BD  7261 6E73 7530          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
000050C1  6665 7220 
000050C5  746F 2F66 
000050C9  726F 6D20 7531          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000050CD  616E 204F 
000050D1  4444 2041 
000050D5  64        
000050D6  6472 6573 7532          dc.b      100,114,101,115,115,46,46,46,46,0
000050DA  732E 2E2E 
000050DE  2E00      
                    7533   @m68kde~1_125:
000050E0  556E 6861 7534          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000050E4  6E64 6C65 
000050E8  6420 5472 
000050EC  6170 2021 7535          dc.b      97,112,32,33,33,33,33,33,0
000050F0  2121 2121 
000050F4  00        
                    7536   @m68kde~1_126:
000050F6  4255 5320 7537          dc.b      66,85,83,32,69,114,114,111,114,33,0
000050FA  4572 726F 
000050FE  7221 00   
                    7538   @m68kde~1_127:
00005102  4144 4452 7539          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00005106  4553 5320 
0000510A  4572 726F 
0000510E  7221      
00005110  00        7540          dc.b      0
                    7541   @m68kde~1_128:
00005112  494C 4C45 7542          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00005116  4741 4C20 
0000511A  494E 5354 
0000511E  5255 43   
00005121  5449 4F4E 7543          dc.b      84,73,79,78,0
00005125  00        
                    7544   @m68kde~1_129:
00005126  4449 5649 7545          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
0000512A  4445 2042 
0000512E  5920 5A45 
00005132  524F 00   
                    7546   @m68kde~1_130:
00005136  2743 484B 7547          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
0000513A  2720 494E 
0000513E  5354 5255 
00005142  4354 49   
00005145  4F4E 00   7548          dc.b      79,78,0
                    7549   @m68kde~1_131:
00005148  5452 4150 7550          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
0000514C  5620 494E 
00005150  5354 5255 
00005154  4354 49   
00005157  4F4E 00   7551          dc.b      79,78,0
                    7552   @m68kde~1_132:
0000515A  5052 4956 7553          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
0000515E  494C 4547 
00005162  4520 5649 
00005166  4F4C 41   
00005169  5449 4F4E 7554          dc.b      84,73,79,78,0
0000516D  00        
                    7555   @m68kde~1_133:
0000516E  554E 494E 7556          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005172  4954 4941 
00005176  4C49 5345 
0000517A  4420 49   
0000517D  5251 00   7557          dc.b      82,81,0
                    7558   @m68kde~1_134:
00005180  5350 5552 7559          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005184  494F 5553 
00005188  2049 5251 
0000518C  00        
                    7560   @m68kde~1_135:
0000518E  0D0A 5374 7561          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005192  6172 7420 
00005196  4164 6472 
0000519A  65        
0000519B  7373 2069 7562          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
0000519F  6E20 4D65 
000051A3  6D6F 7279 
000051A7  3A20 00   7563          dc.b      58,32,0
                    7564   @m68kde~1_136:
000051AA  0D0A 456E 7565          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000051AE  7465 7220 
000051B2  5374 7269 
000051B6  6E        
000051B7  6720 2845 7566          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000051BB  5343 2074 
000051BF  6F20 656E 
000051C3  64        
000051C4  2920 3A00 7567          dc.b      41,32,58,0
                    7568   @m68kde~1_137:
000051C8  0A45 6E74 7569          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
000051CC  6572 2077 
000051D0  6861 7420 
000051D4  73        
000051D5  697A 6520 7570          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
000051D9  6F66 206D 
000051DD  656D 6F72 
000051E1  7920 796F 7571          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
000051E5  7520 7761 
000051E9  6E74 2074 
000051ED  6F20 7265 7572          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
000051F1  6164 2F77 
000051F5  7269 7465 
000051F9  0A20 4279 7573          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
000051FD  7465 203D 
00005201  2030 0A20 
00005205  576F      
00005207  7264 203D 7574          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
0000520B  2031 0A20 
0000520F  4C6F 6E67 
00005213  20        
00005214  576F 7264 7575          dc.b      87,111,114,100,32,61,32,50,10,0
00005218  203D 2032 
0000521C  0A00      
                    7576   @m68kde~1_138:
0000521E  0A00      7577          dc.b      10,0
                    7578   @m68kde~1_139:
00005220  0A45 6E74 7579          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005224  6572 2077 
00005228  6869 6368 
0000522C  2064 6174 7580          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005230  6120 7061 
00005234  7474 6572 
00005238  6E        
00005239  2079 6F75 7581          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000523D  2077 616E 
00005241  7420 746F 
00005245  2077 7269 7582          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005249  7465 2069 
0000524D  6E74 6F20 
00005251  6D65 6D6F 7583          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
00005255  7279 0A20 
00005259  3078 3030 
0000525D  20        
0000525E  3D20 300A 7584          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
00005262  2030 7842 
00005266  3220 3D20 
0000526A  310A 20   
0000526D  3078 4333 7585          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
00005271  203D 2032 
00005275  0A20 3078 
00005279  4434      
0000527B  203D 2033 7586          dc.b      32,61,32,51,10,0
0000527F  0A00      
                    7587   @m68kde~1_140:
00005282  0A45 6E74 7588          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005286  6572 2077 
0000528A  6869 6368 
0000528E  2064 6174 7589          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005292  6120 7061 
00005296  7474 6572 
0000529A  6E        
0000529B  2079 6F75 7590          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000529F  2077 616E 
000052A3  7420 746F 
000052A7  2077 7269 7591          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000052AB  7465 2069 
000052AF  6E74 6F20 
000052B3  6D65 6D6F 7592          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000052B7  7279 0A20 
000052BB  3078 3030 
000052BF  30        
000052C0  3020 3D20 7593          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
000052C4  300A 2030 
000052C8  7831 3233 
000052CC  3420 3D   
000052CF  2031 0A20 7594          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
000052D3  3078 4131 
000052D7  4232 203D 
000052DB  2032 0A   
000052DE  2030 7843 7595          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
000052E2  3344 3420 
000052E6  3D20 330A 
000052EA  00        
                    7596   @m68kde~1_141:
000052EC  0A45 6E74 7597          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000052F0  6572 2077 
000052F4  6869 6368 
000052F8  2064 6174 7598          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000052FC  6120 7061 
00005300  7474 6572 
00005304  6E        
00005305  2079 6F75 7599          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005309  2077 616E 
0000530D  7420 746F 
00005311  2077 7269 7600          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005315  7465 2069 
00005319  6E74 6F20 
0000531D  6D65 6D6F 7601          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005321  7279 0A20 
00005325  3078 3030 
00005329  30        
0000532A  305F 3030 7602          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
0000532E  3030 203D 
00005332  2030 0A20 
00005336  3078 41   
00005339  4142 425F 7603          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
0000533D  4343 4444 
00005341  203D 2031 
00005345  0A20 30   
00005348  7831 3132 7604          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
0000534C  325F 3333 
00005350  3434 203D 
00005354  2032 0A   
00005357  2030 7837 7605          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
0000535B  3635 345F 
0000535F  3332 3130 
00005363  203D 20   
00005366  330A 00   7606          dc.b      51,10,0
                    7607   @m68kde~1_142:
0000536A  0A50 726F 7608          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
0000536E  7669 6465 
00005372  2053 7461 
00005376  72        
00005377  7420 4164 7609          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
0000537B  6472 6573 
0000537F  7320 696E 
00005383  2068 6578 7610          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
00005387  2028 646F 
0000538B  206E 6F74 
0000538F  2075 7365 7611          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
00005393  2030 7820 
00005397  7072 6566 
0000539B  6978 290A 7612          dc.b      105,120,41,10,48,120,0
0000539F  3078 00   
                    7613   @m68kde~1_143:
000053A2  0A50 726F 7614          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
000053A6  7669 6465 
000053AA  2045 6E64 
000053AE  2041 6464 7615          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
000053B2  7265 7373 
000053B6  2069 6E20 
000053BA  6865 7820 7616          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
000053BE  2864 6F20 
000053C2  6E6F 7420 
000053C6  7573 6520 7617          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
000053CA  3078 2070 
000053CE  7265 6669 
000053D2  7829 0A30 7618          dc.b      120,41,10,48,120,0
000053D6  7800      
                    7619   @m68kde~1_144:
000053D8  0A53 7461 7620          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
000053DC  7274 2041 
000053E0  6464 7265 
000053E4  73        
000053E5  7320 3078 7621          dc.b      115,32,48,120,37,48,56,120,10,0
000053E9  2530 3878 
000053ED  0A00      
                    7622   @m68kde~1_145:
000053F0  0A45 6E64 7623          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
000053F4  2041 6464 
000053F8  7265 7373 
000053FC  3A20 3078 7624          dc.b      58,32,48,120,37,48,56,120,10,0
00005400  2530 3878 
00005404  0A00      
                    7625   @m68kde~1_146:
00005406  4552 524F 7626          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
0000540A  522E 2E2E 
0000540E  2041 6464 
00005412  7265      
00005414  7373 2030 7627          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
00005418  7825 7820 
0000541C  6973 2062 
00005420  65        
00005421  796F 6E64 7628          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005425  2074 6865 
00005429  206D 656D 
0000542D  6F72 7920 7629          dc.b      111,114,121,32,114,97,110,103,101,10,0
00005431  7261 6E67 
00005435  650A 00   
                    7630   @m68kde~1_147:
00005438  4552 524F 7631          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
0000543C  522E 2E2E 
00005440  2056 616C 
00005444  7565      
00005446  2077 7269 7632          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
0000544A  7474 656E 
0000544E  2074 6F20 
00005452  6164 6472 7633          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00005456  6573 7320 
0000545A  3078 2578 
0000545E  203D 3D20 7634          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00005462  3078 2578 
00005466  2E20 5661 
0000546A  6C75      
0000546C  6520 4578 7635          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
00005470  7065 6374 
00005474  6564 3A20 
00005478  30        
00005479  7825 780A 7636          dc.b      120,37,120,10,0
0000547D  00        
                    7637   @m68kde~1_148:
0000547E  4164 6472 7638          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005482  6573 733A 
00005486  2030 7825 
0000548A  78        
0000548B  2056 616C 7639          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
0000548F  7565 3A20 
00005493  3078 2530 
00005497  3258      
00005499  0A00      7640          dc.b      10,0
                    7641   @m68kde~1_149:
0000549C  4164 6472 7642          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000054A0  6573 733A 
000054A4  2030 7825 
000054A8  78        
000054A9  2056 616C 7643          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
000054AD  7565 3A20 
000054B1  3078 2530 
000054B5  3458      
000054B7  0A00      7644          dc.b      10,0
                    7645   @m68kde~1_150:
000054BA  4164 6472 7646          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000054BE  6573 733A 
000054C2  2030 7825 
000054C6  78        
000054C7  2056 616C 7647          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
000054CB  7565 3A20 
000054CF  3078 2530 
000054D3  3858      
000054D5  0A00      7648          dc.b      10,0
                    7649   @m68kde~1_151:
000054D8  4445 312D 7650          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000054DC  3638 6B20 
000054E0  4275 6720 
000054E4  5631      
000054E6  2E37 3700 7651          dc.b      46,55,55,0
                    7652   @m68kde~1_152:
000054EA  436F 7079 7653          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000054EE  7269 6768 
000054F2  7420 2843 
000054F6  2920 504A 7654          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000054FA  2044 6176 
000054FE  6965 7320 
00005502  3230      
00005504  3136 00   7655          dc.b      49,54,0
                    7656   @m68kde~1_153:
00005508  0D0A 5275 7657          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
0000550C  6E6E 696E 
00005510  672E 2E2E 
00005514  2E        
00005515  2E00      7658          dc.b      46,0
                    7659   @m68kde~1_154:
00005518  5275 6E6E 7660          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
0000551C  696E 672E 
00005520  2E2E 2E2E 
00005524  00        
                    7661   @m68kde~1_155:
00005526  4279 3A20 7662          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
0000552A  504A 2044 
0000552E  6176 6965 
00005532  73        
00005533  00        7663          dc.b      0
                    7664   @m68kde~1_156:
00005534  0D0A 2573 7665          dc.b      13,10,37,115,0
00005538  00        
                    7666   @m68kde~1_157:
0000553A  0A20 5374 7667          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
0000553E  7564 656E 
00005542  7420 4E61 
00005546  6D        
00005547  6573 3A0A 7668          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
0000554B  205A 6163 
0000554F  6861 7269 
00005553  61        
00005554  6820 4A6F 7669          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
00005558  7365 7068 
0000555C  3A20 3435 
00005560  35        
00005561  3030 3035 7670          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00005565  3520 0A20 
00005569  556D 6169 
0000556D  7220      
0000556F  4D61 7A68 7671          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
00005573  6172 3A20 
00005577  3230 3333 
0000557B  3333      
0000557D  3038 0A00 7672          dc.b      48,56,10,0
                    7673          section   data
00005582            7674                   align
          0000 5582 7675   DataStart       equ       *
                    7676   
                    7677   *********************************************************************************************************
                    7678   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7679   * to ram as part of the CStart routine in this file
                    7680   *********************************************************************************************************
                    7681   
                    7682   @vsscanf_bufx:
00005582  0B00 0546 7683          dc.l      @vsscanf_buf
                    7684   @vsscanf_1:
00005586  0A00      7685          dc.b      10,0
                    7686   __ctype:
00005588  0040 4040 7687          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
0000558C  4040 4040 
00005590  4040 5050 
00005594  5050 50   
00005597  4040 4040 7688          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
0000559B  4040 4040 
0000559F  4040 4040 
000055A3  4040 40   
000055A6  4040 40D0 7689          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000055AA  A0A0 A0A0 
000055AE  A0A0 A0A0 
000055B2  A0A0 A0A0 7690          dc.b      160,160,160,160,160,160,160,140,140,140,140
000055B6  A0A0 A08C 
000055BA  8C8C 8C   
000055BD  8C8C 8C8C 7691          dc.b      140,140,140,140,140,140,160,160,160,160,160
000055C1  8C8C A0A0 
000055C5  A0A0 A0   
000055C8  A0A0 8A8A 7692          dc.b      160,160,138,138,138,138,138,138,130,130,130
000055CC  8A8A 8A8A 
000055D0  8282 82   
000055D3  8282 8282 7693          dc.b      130,130,130,130,130,130,130,130,130,130,130
000055D7  8282 8282 
000055DB  8282 82   
000055DE  8282 8282 7694          dc.b      130,130,130,130,130,130,160,160,160,160,160
000055E2  8282 A0A0 
000055E6  A0A0 A0   
000055E9  A089 8989 7695          dc.b      160,137,137,137,137,137,137,129,129,129,129
000055ED  8989 8981 
000055F1  8181 81   
000055F4  8181 8181 7696          dc.b      129,129,129,129,129,129,129,129,129,129,129
000055F8  8181 8181 
000055FC  8181 81   
000055FF  8181 8181 7697          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005603  81A0 A0A0 
00005607  A040 0000 
0000560B  00        
0000560C  0000 0000 7698          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005610  0000 0000 
00005614  0000 0000 
00005618  0000 0000 
0000561C  0000 0000 
00005620  0000      
00005622  0000 0000 7699          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005626  0000 0000 
0000562A  0000 0000 
0000562E  0000 0000 
00005632  0000 0000 
00005636  0000      
00005638  0000 0000 7700          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000563C  0000 0000 
00005640  0000 0000 
00005644  0000 0000 
00005648  0000 0000 
0000564C  0000      
0000564E  0000 0000 7701          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005652  0000 0000 
00005656  0000 0000 
0000565A  0000 0000 
0000565E  0000 0000 
00005662  0000      
00005664  0000 0000 7702          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005668  0000 0000 
0000566C  0000 0000 
00005670  0000 0000 
00005674  0000 0000 
00005678  0000      
0000567A  0000 0000 7703          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000567E  0000 0000 
00005682  0000 0000 
00005686  0000 00   
                    7704   @itoa_1:
0000568A  2D32 3134 7705          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0000568E  3734 3833 
00005692  3634 3800 
                    7706          section   bss
00005696            7707                   align
          0000 5696 7708   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7709   
                    7710   *********************************************************************************************************
                    7711   * Section for Uninitialised Data held in ROM as constants
                    7712   *********************************************************************************************************
                    7713   
0B000000            7714                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 7715   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7716   
                    7717   
0B000000            7718   bss             org       bss
                    7719   
                    7720   *********************************************************************************************************
                    7721   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7722   * install the exception handler using the C function InstallExceptionHandler()
                    7723   *********************************************************************************************************
                    7724   
                    7725   
                    7726   
0B000000            7727   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7728   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7729   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7730   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7731   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7732   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7733   VCheck           ds.l    1      ditto
0B00001C            7734   VTrapV           ds.l    1      ditto
0B000020            7735   VPrivilege       ds.l    1      ditto
0B000024            7736   VTrace           ds.l    1
0B000028            7737   VLine1010emul    ds.l    1
0B00002C            7738   VLine1111emul    ds.l    1
0B000030            7739   VUnassigned1     ds.l    1
0B000034            7740   VUnassigned2     ds.l    1
0B000038            7741   VUnassigned3     ds.l    1
0B00003C            7742   VUninit_IRQ      ds.l    1
0B000040            7743   VUnassigned4     ds.l    1
0B000044            7744   VUnassigned5     ds.l    1
0B000048            7745   VUnassigned6     ds.l    1
0B00004C            7746   VUnassigned7     ds.l    1
0B000050            7747   VUnassigned8     ds.l    1
0B000054            7748   VUnassigned9     ds.l    1
0B000058            7749   VUnassigned10    ds.l    1
0B00005C            7750   VUnassigned11    ds.l    1
0B000060            7751   VSpuriousIRQ     ds.l    1
                    7752   
                    7753   * Interrupt handlers Vector 25-31
0B000064            7754   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7755   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7756   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7757   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7758   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7759   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7760   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7761   
                    7762   * Trap Handler vectors 32-47
0B000080            7763   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7764   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7765   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7766   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7767   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7768   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7769   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7770   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7771   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7772   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7773   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7774   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7775   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7776   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7777   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7778   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7779   
                    7780   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7781   
                    7782   ***********************************************************************************************************
                    7783   * Other Variables
                    7784   ***********************************************************************************************************
                    7785   *__DebugA5       ds.l    1
                    7786   *__UserA5        ds.l    1
                    7787   
                    7788   ***********************************************************************************************************
0B0000C0            7789   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7790   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7791   __heap:         ds.l    0       ; pointers for malloc functions
                    7792   
                    7793   *__himem:       ds.l    himem            ; highest memory location + 1
                    7794   *__stklen:      ds.l    stklen           ; default stack size
                    7795   
                    7796   *********************************************************************************************************
                    7797   * Section for Heap
                    7798   *********************************************************************************************************
                    7799   
                    7800   _i:
0B0000C4            7801          ds.b      4
                    7802   _x:
0B0000C8            7803          ds.b      4
                    7804   _y:
0B0000CC            7805          ds.b      4
                    7806   _z:
0B0000D0            7807          ds.b      4
                    7808   _PortA_Count:
0B0000D4            7809          ds.b      4
                    7810   _Trace:
0B0000D8            7811          ds.b      4
                    7812   _GoFlag:
0B0000DC            7813          ds.b      4
                    7814   _Echo:
0B0000E0            7815          ds.b      4
                    7816   _d0:
0B0000E4            7817          ds.b      4
                    7818   _d1:
0B0000E8            7819          ds.b      4
                    7820   _d2:
0B0000EC            7821          ds.b      4
                    7822   _d3:
0B0000F0            7823          ds.b      4
                    7824   _d4:
0B0000F4            7825          ds.b      4
                    7826   _d5:
0B0000F8            7827          ds.b      4
                    7828   _d6:
0B0000FC            7829          ds.b      4
                    7830   _d7:
0B000100            7831          ds.b      4
                    7832   _a0:
0B000104            7833          ds.b      4
                    7834   _a1:
0B000108            7835          ds.b      4
                    7836   _a2:
0B00010C            7837          ds.b      4
                    7838   _a3:
0B000110            7839          ds.b      4
                    7840   _a4:
0B000114            7841          ds.b      4
                    7842   _a5:
0B000118            7843          ds.b      4
                    7844   _a6:
0B00011C            7845          ds.b      4
                    7846   _PC:
0B000120            7847          ds.b      4
                    7848   _SSP:
0B000124            7849          ds.b      4
                    7850   _USP:
0B000128            7851          ds.b      4
                    7852   _SR:
0B00012C            7853          ds.b      2
                    7854   _BreakPointAddress:
0B00012E            7855          ds.b      32
                    7856   _BreakPointInstruction:
0B00014E            7857          ds.b      16
                    7858   _BreakPointSetOrCleared:
0B00015E            7859          ds.b      32
                    7860   _InstructionSize:
0B00017E            7861          ds.b      4
                    7862   _WatchPointAddress:
0B000182            7863          ds.b      32
                    7864   _WatchPointSetOrCleared:
0B0001A2            7865          ds.b      32
                    7866   _WatchPointString:
0B0001C2            7867          ds.b      800
                    7868   _TempString:
0B0004E2            7869          ds.b      100
                    7870   @vsscanf_buf:
0B000546            7871          ds.b      80
                    7872          section   heap
0B000596            7873                   align
          0B00 0596 7874   bssEnd          equ *                   end of storage space for unitialised variables
                    7875   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 7876   heap   equ       *
0B000596            7877                    align
          0000 0000

Assembly errors: 0
