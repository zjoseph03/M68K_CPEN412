680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 27 Mar 2025      Time: 12:22:39          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2EAE      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  255E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3C26      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  45FC      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  4600      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4616      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  4618      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3C26      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  326A      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  461A      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4654      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  466C      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  4674      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  467A      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  45FC      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3C26      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  467E      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  4654      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  4692      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  46A8      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  46BC      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3C26      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  46EC      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  3364      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  319E      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  326A      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  471C      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4742      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3C26      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4764      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  4780      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  47C6      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  47D8      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  32D6      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  47EA      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; // TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011 // This might need to be 0x53
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while (TestForSPITransmitDataComplete() == 0);
                    1614   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1615          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1616          tst.l     D0
00001122  6602      1617          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1621          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1622          rts
                    1623   ; }
                    1624   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1625   ; void ClearSPIReadFIFO(void) {
                    1626   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1627          link      A6,#-4
                    1628   ; volatile unsigned char dummy;
                    1629   ; while((SPI_Status & 0x01) == 0) {
                    1630   ClearSPIReadFIFO_1:
00001134  1039 0040 1631          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1632          and.b     #1,D0
0000113E  660A      1633          bne.s     ClearSPIReadFIFO_3
                    1634   ; dummy = SPI_Data;
00001140  1D79 0040 1635          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1636          bra       ClearSPIReadFIFO_1
                    1637   ClearSPIReadFIFO_3:
0000114A  4E5E      1638          unlk      A6
0000114C  4E75      1639          rts
                    1640   ; }
                    1641   ; }
                    1642   ; void SPIFlashPollStatusWLE(void) {
                    1643   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char status;
                    1646   ; unsigned char dummy;
                    1647   ; do {
                    1648   SPIFlashPollStatusWLE_1:
                    1649   ; // Start a new read status register command each time
                    1650   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1651          move.b    #254,4227112
00001156  0040 8028 
                    1652   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1653          pea       5
0000115E  4EB8 10C4 1654          jsr       _SPISafeWrite
00001162  584F      1655          addq.w    #4,A7
                    1656   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1657          pea       255
00001168  4EB8 10C4 1658          jsr       _SPISafeWrite
0000116C  584F      1659          addq.w    #4,A7
0000116E  1D40 FFFE 1660          move.b    D0,-2(A6)
                    1661   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1662          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1663          move.b    -2(A6),D0
0000117E  C03C 0002 1664          and.b     #2,D0
00001182  67CE      1665          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1666          unlk      A6
00001186  4E75      1667          rts
                    1668   ; // printf("\r\n WLE Status: %02x \n", status);
                    1669   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1670   ; }
                    1671   ; void SPIFlashPollStatusBusy(void) {
                    1672   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1673          link      A6,#-4
                    1674   ; unsigned char status;
                    1675   ; unsigned char dummy;
                    1676   ; do {
                    1677   SPIFlashPollStatusBusy_1:
                    1678   ; // Start a new read status register command each time
                    1679   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1680          move.b    #254,4227112
00001190  0040 8028 
                    1681   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1682          pea       5
00001198  4EB8 10C4 1683          jsr       _SPISafeWrite
0000119C  584F      1684          addq.w    #4,A7
                    1685   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1686          pea       255
000011A2  4EB8 10C4 1687          jsr       _SPISafeWrite
000011A6  584F      1688          addq.w    #4,A7
000011A8  1D40 FFFE 1689          move.b    D0,-2(A6)
                    1690   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1691          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1692          move.b    -2(A6),D0
000011B8  C03C 0001 1693          and.b     #1,D0
000011BC  66CE      1694          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1695          unlk      A6
000011C0  4E75      1696          rts
                    1697   ; // printf("\r\n Busy Status: %02x \n", status);
                    1698   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011C2  4E56 0000 1707          link      A6,#0
                    1708   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1709          move.l    8(A6),D1
000011CA  C2BC 0000 1710          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1711          move.l    D1,-(A7)
000011D2  4EB8 10C4 1712          jsr       _SPISafeWrite
000011D6  584F      1713          addq.w    #4,A7
                    1714   ; return SPI_Data;
000011D8  1039 0040 1715          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1716          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1717          unlk      A6
000011E6  4E75      1718          rts
                    1719   ; }
                    1720   ; void SPIFlashWriteEnable() {
                    1721   _SPIFlashWriteEnable:
                    1722   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1723          move.b    #254,4227112
000011EC  0040 8028 
                    1724   ; SPISafeWrite(0x06);
000011F0  4878 0006 1725          pea       6
000011F4  4EB8 10C4 1726          jsr       _SPISafeWrite
000011F8  584F      1727          addq.w    #4,A7
                    1728   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1729          move.b    #255,4227112
000011FE  0040 8028 
                    1730   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1731   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1732          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1733          rts
                    1734   ; }
                    1735   ; void SPISendAddress(int c) {
                    1736   _SPISendAddress:
00001208  4E56 0000 1737          link      A6,#0
0000120C  48E7 2020 1738          movem.l   D2/A2,-(A7)
00001210  242E 0008 1739          move.l    8(A6),D2
00001214  45F8 10C4 1740          lea       _SPISafeWrite.L,A2
                    1741   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1742          move.l    D2,D1
0000121A  E081      1743          asr.l     #8,D1
0000121C  E081      1744          asr.l     #8,D1
0000121E  C2BC 0000 1745          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1746          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1747          move.l    D1,-(A7)
0000122C  4E92      1748          jsr       (A2)
0000122E  584F      1749          addq.w    #4,A7
                    1750   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1751          move.l    D2,D1
00001232  E081      1752          asr.l     #8,D1
00001234  C2BC 0000 1753          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1754          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1755          move.l    D1,-(A7)
00001242  4E92      1756          jsr       (A2)
00001244  584F      1757          addq.w    #4,A7
                    1758   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1759          move.l    D2,D1
00001248  C2BC 0000 1760          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1761          and.l     #255,D1
00001252  00FF      
00001254  2F01      1762          move.l    D1,-(A7)
00001256  4E92      1763          jsr       (A2)
00001258  584F      1764          addq.w    #4,A7
0000125A  4CDF 0404 1765          movem.l   (A7)+,D2/A2
0000125E  4E5E      1766          unlk      A6
00001260  4E75      1767          rts
                    1768   ; }
                    1769   ; void SPIFlashPageProgram(int addr) {
                    1770   _SPIFlashPageProgram:
00001262  4E56 FFF8 1771          link      A6,#-8
00001266  2F02      1772          move.l    D2,-(A7)
                    1773   ; unsigned char *sramMemoryPtr;
                    1774   ; int flashAddr = addr - 0x08000000;
00001268  202E 0008 1775          move.l    8(A6),D0
0000126C  0480 0800 1776          sub.l     #134217728,D0
00001270  0000      
00001272  2D40 FFFC 1777          move.l    D0,-4(A6)
                    1778   ; int i;
                    1779   ; SPI_CS = 0xFE;
00001276  13FC 00FE 1780          move.b    #254,4227112
0000127A  0040 8028 
                    1781   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000127E  4878 0002 1782          pea       2
00001282  4EB8 10C4 1783          jsr       _SPISafeWrite
00001286  584F      1784          addq.w    #4,A7
                    1785   ; SPISendAddress(flashAddr);
00001288  2F2E FFFC 1786          move.l    -4(A6),-(A7)
0000128C  4EB8 1208 1787          jsr       _SPISendAddress
00001290  584F      1788          addq.w    #4,A7
                    1789   ; for (i = 0; i < 256; i++) {
00001292  4282      1790          clr.l     D2
                    1791   SPIFlashPageProgram_1:
00001294  0C82 0000 1792          cmp.l     #256,D2
00001298  0100      
0000129A  6C22      1793          bge.s     SPIFlashPageProgram_3
                    1794   ; sramMemoryPtr = (unsigned char*) (addr + i);
0000129C  202E 0008 1795          move.l    8(A6),D0
000012A0  D082      1796          add.l     D2,D0
000012A2  2D40 FFF8 1797          move.l    D0,-8(A6)
                    1798   ; WriteSPIChar(*sramMemoryPtr); // Random value for testing purposes
000012A6  206E FFF8 1799          move.l    -8(A6),A0
000012AA  1210      1800          move.b    (A0),D1
000012AC  C2BC 0000 1801          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1802          move.l    D1,-(A7)
000012B4  4EB8 11C2 1803          jsr       _WriteSPIChar
000012B8  584F      1804          addq.w    #4,A7
000012BA  5282      1805          addq.l    #1,D2
000012BC  60D6      1806          bra       SPIFlashPageProgram_1
                    1807   SPIFlashPageProgram_3:
                    1808   ; // printf("%02x ", *sramMemoryPtr);
                    1809   ; }
                    1810   ; SPI_CS = 0xFF;
000012BE  13FC 00FF 1811          move.b    #255,4227112
000012C2  0040 8028 
                    1812   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1813   ; SPIFlashPollStatusBusy();
000012C6  4EB8 1188 1814          jsr       _SPIFlashPollStatusBusy
000012CA  241F      1815          move.l    (A7)+,D2
000012CC  4E5E      1816          unlk      A6
000012CE  4E75      1817          rts
                    1818   ; }
                    1819   ; void SPIFlashErase(void) {
                    1820   _SPIFlashErase:
                    1821   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1822   ; printf("\nErasing...\n");
000012D0  4879 0000 1823          pea       @m68kde~1_22.L
000012D4  481E      
000012D6  4EB9 0000 1824          jsr       _printf
000012DA  3C26      
000012DC  584F      1825          addq.w    #4,A7
                    1826   ; SPI_CS = 0xFE;
000012DE  13FC 00FE 1827          move.b    #254,4227112
000012E2  0040 8028 
                    1828   ; SPISafeWrite(0xC7);
000012E6  4878 00C7 1829          pea       199
000012EA  4EB8 10C4 1830          jsr       _SPISafeWrite
000012EE  584F      1831          addq.w    #4,A7
                    1832   ; SPI_CS = 0xFF;
000012F0  13FC 00FF 1833          move.b    #255,4227112
000012F4  0040 8028 
                    1834   ; SPIFlashPollStatusBusy();
000012F8  4EB8 1188 1835          jsr       _SPIFlashPollStatusBusy
000012FC  4E75      1836          rts
                    1837   ; }
                    1838   ; int SPIFlashRead() {
                    1839   _SPIFlashRead:
000012FE  4E56 FFFC 1840          link      A6,#-4
00001302  48E7 3000 1841          movem.l   D2/D3,-(A7)
                    1842   ; unsigned char readData;
                    1843   ; unsigned char *sramMemoryPtr;
                    1844   ; int addr;
                    1845   ; ClearSPIReadFIFO();
00001306  4EB8 1130 1846          jsr       _ClearSPIReadFIFO
                    1847   ; SPI_CS = 0xFE;
0000130A  13FC 00FE 1848          move.b    #254,4227112
0000130E  0040 8028 
                    1849   ; SPISafeWrite(0x03);
00001312  4878 0003 1850          pea       3
00001316  4EB8 10C4 1851          jsr       _SPISafeWrite
0000131A  584F      1852          addq.w    #4,A7
                    1853   ; SPISendAddress(0x0);
0000131C  42A7      1854          clr.l     -(A7)
0000131E  4EB8 1208 1855          jsr       _SPISendAddress
00001322  584F      1856          addq.w    #4,A7
                    1857   ; for (addr = 0x08000000; addr < (0x08040000); addr ++) {
00001324  243C 0800 1858          move.l    #134217728,D2
00001328  0000      
                    1859   SPIFlashRead_1:
0000132A  0C82 0804 1860          cmp.l     #134479872,D2
0000132E  0000      
00001330  6C1A      1861          bge.s     SPIFlashRead_3
                    1862   ; sramMemoryPtr = (unsigned char*) addr;
00001332  2D42 FFFC 1863          move.l    D2,-4(A6)
                    1864   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001336  4878 00FF 1865          pea       255
0000133A  4EB8 10C4 1866          jsr       _SPISafeWrite
0000133E  584F      1867          addq.w    #4,A7
00001340  1600      1868          move.b    D0,D3
                    1869   ; *sramMemoryPtr = readData;
00001342  206E FFFC 1870          move.l    -4(A6),A0
00001346  1083      1871          move.b    D3,(A0)
00001348  5282      1872          addq.l    #1,D2
0000134A  60DE      1873          bra       SPIFlashRead_1
                    1874   SPIFlashRead_3:
                    1875   ; }
                    1876   ; SPI_CS = 0xFF;
0000134C  13FC 00FF 1877          move.b    #255,4227112
00001350  0040 8028 
                    1878   ; SPIFlashPollStatusBusy();
00001354  4EB8 1188 1879          jsr       _SPIFlashPollStatusBusy
                    1880   ; return readData;
00001358  C6BC 0000 1881          and.l     #255,D3
0000135C  00FF      
0000135E  2003      1882          move.l    D3,D0
00001360  4CDF 000C 1883          movem.l   (A7)+,D2/D3
00001364  4E5E      1884          unlk      A6
00001366  4E75      1885          rts
                    1886   ; }
                    1887   ; /*******************************************************************
                    1888   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1889   ; ********************************************************************/
                    1890   ; void ProgramFlashChip(void)
                    1891   ; {
                    1892   _ProgramFlashChip:
00001368  4E56 FFFC 1893          link      A6,#-4
                    1894   ; int addr;
                    1895   ; SPIFlashPollStatusBusy();
0000136C  4EB8 1188 1896          jsr       _SPIFlashPollStatusBusy
                    1897   ; SPIFlashWriteEnable();
00001370  4EB8 11E8 1898          jsr       _SPIFlashWriteEnable
                    1899   ; SPIFlashErase();
00001374  4EB8 12D0 1900          jsr       _SPIFlashErase
                    1901   ; // 256KB = 262144 bytes (0x40000)
                    1902   ; // We need to write one page at a time (256 bytes at a time)
                    1903   ; // This code writes the user program from DRAM to FLASH
                    1904   ; // printf("\r\n Starting Programming...");
                    1905   ; // for (addr = 0x08000000; addr < (0x08040000); addr += 256) {
                    1906   ; //     SPIFlashWriteEnable(); 
                    1907   ; //     // printf("\r\n Addr: %08x \n", addr);
                    1908   ; //     SPIFlashPageProgram(addr);
                    1909   ; // }
                    1910   ; printf("\r\n Programming Complete!");
00001378  4879 0000 1911          pea       @m68kde~1_23.L
0000137C  482C      
0000137E  4EB9 0000 1912          jsr       _printf
00001382  3C26      
00001384  584F      1913          addq.w    #4,A7
00001386  4E5E      1914          unlk      A6
00001388  4E75      1915          rts
                    1916   ; }
                    1917   ; /*************************************************************************
                    1918   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1919   ; **************************************************************************/
                    1920   ; void LoadFromFlashChip(void)
                    1921   ; {
                    1922   _LoadFromFlashChip:
0000138A  4E56 FFFC 1923          link      A6,#-4
                    1924   ; int readData;
                    1925   ; printf("\r\n Loading Program From SPI Flash....") ;
0000138E  4879 0000 1926          pea       @m68kde~1_24.L
00001392  4846      
00001394  4EB9 0000 1927          jsr       _printf
00001398  3C26      
0000139A  584F      1928          addq.w    #4,A7
                    1929   ; SPIFlashPollStatusBusy();
0000139C  4EB8 1188 1930          jsr       _SPIFlashPollStatusBusy
                    1931   ; readData = SPIFlashRead();
000013A0  4EB8 12FE 1932          jsr       _SPIFlashRead
000013A4  2D40 FFFC 1933          move.l    D0,-4(A6)
                    1934   ; printf("\r\n Read Data: %08x \n", readData);
000013A8  2F2E FFFC 1935          move.l    -4(A6),-(A7)
000013AC  4879 0000 1936          pea       @m68kde~1_25.L
000013B0  486C      
000013B2  4EB9 0000 1937          jsr       _printf
000013B6  3C26      
000013B8  504F      1938          addq.w    #8,A7
000013BA  4E5E      1939          unlk      A6
000013BC  4E75      1940          rts
                    1941   ; }
                    1942   ; void printBinary(unsigned char value) {
                    1943   _printBinary:
000013BE  4E56 0000 1944          link      A6,#0
000013C2  48E7 2020 1945          movem.l   D2/A2,-(A7)
000013C6  45F9 0000 1946          lea       _printf.L,A2
000013CA  3C26      
                    1947   ; int i;
                    1948   ; printf("IIC_CRSR Transmit (Binary): ");
000013CC  4879 0000 1949          pea       @m68kde~1_26.L
000013D0  4882      
000013D2  4E92      1950          jsr       (A2)
000013D4  584F      1951          addq.w    #4,A7
                    1952   ; for (i = 7; i >= 0; i--) { // Loop through each bit (from MSB to LSB)
000013D6  7407      1953          moveq     #7,D2
                    1954   printBinary_1:
000013D8  0C82 0000 1955          cmp.l     #0,D2
000013DC  0000      
000013DE  6D22      1956          blt.s     printBinary_3
                    1957   ; printf("%d", (value >> i) & 1); // Shift and mask to extract each bit
000013E0  122E 000B 1958          move.b    11(A6),D1
000013E4  C2BC 0000 1959          and.l     #255,D1
000013E8  00FF      
000013EA  E4A1      1960          asr.l     D2,D1
000013EC  C2BC 0000 1961          and.l     #1,D1
000013F0  0001      
000013F2  2F01      1962          move.l    D1,-(A7)
000013F4  4879 0000 1963          pea       @m68kde~1_27.L
000013F8  48A0      
000013FA  4E92      1964          jsr       (A2)
000013FC  504F      1965          addq.w    #8,A7
000013FE  5382      1966          subq.l    #1,D2
00001400  60D6      1967          bra       printBinary_1
                    1968   printBinary_3:
                    1969   ; }
                    1970   ; printf("\n");
00001402  4879 0000 1971          pea       @m68kde~1_28.L
00001406  48A4      
00001408  4E92      1972          jsr       (A2)
0000140A  584F      1973          addq.w    #4,A7
0000140C  4CDF 0404 1974          movem.l   (A7)+,D2/A2
00001410  4E5E      1975          unlk      A6
00001412  4E75      1976          rts
                    1977   ; }
                    1978   ; void IICCoreEnable() {
                    1979   _IICCoreEnable:
                    1980   ; IIC_CTR |= 0x80;     // Enable I2C core in control register (1000_0000)
00001414  0039 0080 1981          or.b      #128,4227076
00001418  0040 8004 
0000141C  4E75      1982          rts
                    1983   ; }
                    1984   ; void IICCoreDisable() {
                    1985   _IICCoreDisable:
                    1986   ; IIC_CTR &= 0x7F;    // Disable I2C core in control register (0011_1111)
0000141E  0239 007F 1987          and.b     #127,4227076
00001422  0040 8004 
00001426  4E75      1988          rts
                    1989   ; }
                    1990   ; // I2C Driver Functions
                    1991   ; void IIC_Init(void) {
                    1992   _IIC_Init:
                    1993   ; IIC_PRER_LO = 0x59;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001428  13FC 0059 1994          move.b    #89,4227072
0000142C  0040 8000 
                    1995   ; IIC_PRER_HI = 0x00;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001430  4239 0040 1996          clr.b     4227074
00001434  8002      
                    1997   ; IIC_CTR &= 0xBF;     // Disable interrupt in control register (1011_1111)
00001436  0239 00BF 1998          and.b     #191,4227076
0000143A  0040 8004 
                    1999   ; IICCoreEnable();
0000143E  4EB8 1414 2000          jsr       _IICCoreEnable
00001442  4E75      2001          rts
                    2002   ; }
                    2003   ; void wait5ms(void) {
                    2004   _wait5ms:
00001444  2F02      2005          move.l    D2,-(A7)
                    2006   ; int i;
                    2007   ; for (i = 0; i < 10000; i++); // Wait for 5 ms
00001446  4282      2008          clr.l     D2
                    2009   wait5ms_1:
00001448  0C82 0000 2010          cmp.l     #10000,D2
0000144C  2710      
0000144E  6C04      2011          bge.s     wait5ms_3
00001450  5282      2012          addq.l    #1,D2
00001452  60F4      2013          bra       wait5ms_1
                    2014   wait5ms_3:
00001454  241F      2015          move.l    (A7)+,D2
00001456  4E75      2016          rts
                    2017   ; }
                    2018   ; void checkTIP() {
                    2019   _checkTIP:
                    2020   ; while (IIC_CRSR & TIP);
                    2021   checkTIP_1:
00001458  1039 0040 2022          move.b    4227080,D0
0000145C  8008      
0000145E  C03C 0002 2023          and.b     #2,D0
00001462  6702      2024          beq.s     checkTIP_3
00001464  60F2      2025          bra       checkTIP_1
                    2026   checkTIP_3:
00001466  4E75      2027          rts
                    2028   ; }
                    2029   ; void checkAck() {
                    2030   _checkAck:
                    2031   ; while ((IIC_CRSR & RXACK) == 1);
                    2032   checkAck_1:
00001468  1039 0040 2033          move.b    4227080,D0
0000146C  8008      
0000146E  C07C 00FF 2034          and.w     #255,D0
00001472  C07C 0080 2035          and.w     #128,D0
00001476  0C40 0001 2036          cmp.w     #1,D0
0000147A  6602      2037          bne.s     checkAck_3
0000147C  60EA      2038          bra       checkAck_1
                    2039   checkAck_3:
0000147E  4E75      2040          rts
                    2041   ; }
                    2042   ; void IICStopCondition() {
                    2043   _IICStopCondition:
                    2044   ; IIC_CRSR |= STOP | READ | IACK; // STOP + READ + IACK
00001480  0039 0061 2045          or.b      #97,4227080
00001484  0040 8008 
                    2046   ; checkTIP();
00001488  4EB8 1458 2047          jsr       _checkTIP
0000148C  4E75      2048          rts
                    2049   ; }
                    2050   ; void IICStartCondition(int rwBit) {
                    2051   _IICStartCondition:
0000148E  4E56 0000 2052          link      A6,#0
                    2053   ; if (rwBit == 0) {
00001492  202E 0008 2054          move.l    8(A6),D0
00001496  660A      2055          bne.s     IICStartCondition_1
                    2056   ; IIC_CRSR |= START | WRITE | IACK; // START + WRITE + IACK
00001498  0039 0091 2057          or.b      #145,4227080
0000149C  0040 8008 
000014A0  6008      2058          bra.s     IICStartCondition_2
                    2059   IICStartCondition_1:
                    2060   ; } else {
                    2061   ; IIC_CRSR |= START | READ | IACK; // Start condition with read bit set
000014A2  0039 00A1 2062          or.b      #161,4227080
000014A6  0040 8008 
                    2063   IICStartCondition_2:
                    2064   ; }
                    2065   ; checkTIP();
000014AA  4EB8 1458 2066          jsr       _checkTIP
                    2067   ; checkAck();
000014AE  4EB8 1468 2068          jsr       _checkAck
000014B2  4E5E      2069          unlk      A6
000014B4  4E75      2070          rts
                    2071   ; }
                    2072   ; // EEPROM Address: 101000{B0} 
                    2073   ; // EEPROM Specific Functions
                    2074   ; void EEPROMByteWrite(int data, short int deviceAddr, short int memoryAddr) {
                    2075   _EEPROMByteWrite:
000014B6  4E56 0000 2076          link      A6,#0
000014BA  48E7 0030 2077          movem.l   A2/A3,-(A7)
000014BE  45F8 1458 2078          lea       _checkTIP.L,A2
000014C2  47F8 1468 2079          lea       _checkAck.L,A3
                    2080   ; // Check if there is a transmission in progress
                    2081   ; // IICCoreEnable();
                    2082   ; checkTIP();
000014C6  4E92      2083          jsr       (A2)
                    2084   ; // Set the start condition
                    2085   ; // IICStartCondition(0);
                    2086   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2087   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2088   ; // Control code, chip select, and block select (ie: Slave Address) and the R/W bit (== 0) are sent
                    2089   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000014C8  302E 000E 2090          move.w    14(A6),D0
000014CC  E340      2091          asl.w     #1,D0
000014CE  C07C 00FE 2092          and.w     #254,D0
000014D2  13C0 0040 2093          move.b    D0,4227078
000014D6  8006      
                    2094   ; IIC_CRSR = START | WRITE | IACK;
000014D8  13FC 0091 2095          move.b    #145,4227080
000014DC  0040 8008 
                    2096   ; // printf("Sent Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2097   ; checkTIP();
000014E0  4E92      2098          jsr       (A2)
                    2099   ; checkAck();
000014E2  4E93      2100          jsr       (A3)
                    2101   ; // printf("Status Register 2: %x\n", IIC_CRSR);
                    2102   ; // Check for ACK
                    2103   ; // printf("\r\n Slave Address Ack Status: : %d\n", checkAck()); //TIP is checked in checkAck function
                    2104   ; // Send the high-order byte of the address
                    2105   ; IIC_TXRX = (memoryAddr >> 8) & 0xFF;
000014E4  302E 0012 2106          move.w    18(A6),D0
000014E8  E040      2107          asr.w     #8,D0
000014EA  C07C 00FF 2108          and.w     #255,D0
000014EE  13C0 0040 2109          move.b    D0,4227078
000014F2  8006      
                    2110   ; IIC_CRSR = WRITE | IACK;
000014F4  13FC 0011 2111          move.b    #17,4227080
000014F8  0040 8008 
                    2112   ; checkTIP();
000014FC  4E92      2113          jsr       (A2)
                    2114   ; checkAck();
000014FE  4E93      2115          jsr       (A3)
                    2116   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2117   ; // Send the lower-order byte of the address
                    2118   ; IIC_TXRX = (memoryAddr & 0xFF);
00001500  302E 0012 2119          move.w    18(A6),D0
00001504  C07C 00FF 2120          and.w     #255,D0
00001508  13C0 0040 2121          move.b    D0,4227078
0000150C  8006      
                    2122   ; IIC_CRSR = WRITE | IACK;
0000150E  13FC 0011 2123          move.b    #17,4227080
00001512  0040 8008 
                    2124   ; checkTIP();
00001516  4E92      2125          jsr       (A2)
                    2126   ; checkAck();
00001518  4E93      2127          jsr       (A3)
                    2128   ; //printf("Sent Lower Memory Byte: %02x\n", memoryAddr & 0xFF);
                    2129   ; // printf("Status Register 4: %x\n", IIC_CRSR);
                    2130   ; // Transmit byte to be written
                    2131   ; IIC_TXRX = data;
0000151A  202E 0008 2132          move.l    8(A6),D0
0000151E  13C0 0040 2133          move.b    D0,4227078
00001522  8006      
                    2134   ; IIC_CRSR = STOP | WRITE | IACK;
00001524  13FC 0051 2135          move.b    #81,4227080
00001528  0040 8008 
                    2136   ; checkTIP();
0000152C  4E92      2137          jsr       (A2)
                    2138   ; checkAck();
0000152E  4E93      2139          jsr       (A3)
                    2140   ; wait5ms();
00001530  4EB8 1444 2141          jsr       _wait5ms
00001534  4CDF 0C00 2142          movem.l   (A7)+,A2/A3
00001538  4E5E      2143          unlk      A6
0000153A  4E75      2144          rts
                    2145   ; // printf("Sent Data: %02x\n", data);
                    2146   ; // printf("Sent Stop Condition");
                    2147   ; // printf("Status Register 6: %x\n", IIC_CRSR);
                    2148   ; // IICCoreDisable();
                    2149   ; //printf("\r\nI2C Byte Write Complete\n");
                    2150   ; }
                    2151   ; void EEPROMFlashPageWrite(int* data, int adr, int numBytes) {
                    2152   _EEPROMFlashPageWrite:
0000153C  4E56 0000 2153          link      A6,#0
00001540  4E5E      2154          unlk      A6
00001542  4E75      2155          rts
                    2156   ; }
                    2157   ; int EEPROMRandomRead(int deviceAddr, int readAddr) {
                    2158   _EEPROMRandomRead:
00001544  4E56 FFFC 2159          link      A6,#-4
00001548  48E7 0030 2160          movem.l   A2/A3,-(A7)
0000154C  45F8 1458 2161          lea       _checkTIP.L,A2
00001550  47F8 1468 2162          lea       _checkAck.L,A3
                    2163   ; int readData;
                    2164   ; // Wait for bus to be idle
                    2165   ; // IICCoreEnable(); 
                    2166   ; checkTIP(); 
00001554  4E92      2167          jsr       (A2)
                    2168   ; // Print TXRX register
                    2169   ; // printf("IIC_TXRX read before: %02x", IIC_TXRX);
                    2170   ; // Send start condition for a write
                    2171   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
00001556  202E 0008 2172          move.l    8(A6),D0
0000155A  E380      2173          asl.l     #1,D0
0000155C  C0BC 0000 2174          and.l     #254,D0
00001560  00FE      
00001562  13C0 0040 2175          move.b    D0,4227078
00001566  8006      
                    2176   ; IIC_CRSR = START | WRITE | IACK;
00001568  13FC 0091 2177          move.b    #145,4227080
0000156C  0040 8008 
                    2178   ; checkTIP();
00001570  4E92      2179          jsr       (A2)
                    2180   ; checkAck();
00001572  4E93      2181          jsr       (A3)
                    2182   ; //printf("Sending Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2183   ; // Send the high-order byte of the address
                    2184   ; IIC_TXRX = (readAddr >> 8) & 0xFF;
00001574  202E 000C 2185          move.l    12(A6),D0
00001578  E080      2186          asr.l     #8,D0
0000157A  C0BC 0000 2187          and.l     #255,D0
0000157E  00FF      
00001580  13C0 0040 2188          move.b    D0,4227078
00001584  8006      
                    2189   ; IIC_CRSR = WRITE | IACK;
00001586  13FC 0011 2190          move.b    #17,4227080
0000158A  0040 8008 
                    2191   ; //printf("Sent Upper Memory Byte: %02x\n", readAddr >> 8);
                    2192   ; checkTIP();
0000158E  4E92      2193          jsr       (A2)
                    2194   ; checkAck();
00001590  4E93      2195          jsr       (A3)
                    2196   ; // Send the low-order byte of the address
                    2197   ; IIC_TXRX = (readAddr & 0xFF);
00001592  202E 000C 2198          move.l    12(A6),D0
00001596  C0BC 0000 2199          and.l     #255,D0
0000159A  00FF      
0000159C  13C0 0040 2200          move.b    D0,4227078
000015A0  8006      
                    2201   ; IIC_CRSR = WRITE | IACK;
000015A2  13FC 0011 2202          move.b    #17,4227080
000015A6  0040 8008 
                    2203   ; //printf("Sent Lower Memory Byte: %02x\n", readAddr & 0xFF);
                    2204   ; checkTIP();
000015AA  4E92      2205          jsr       (A2)
                    2206   ; checkAck();
000015AC  4E93      2207          jsr       (A3)
                    2208   ; // send START condition again followed by slave address with R/W set to 1
                    2209   ; IIC_TXRX = 0xA1; //((deviceAddr << 1) | 0x01);
000015AE  13FC 00A1 2210          move.b    #161,4227078
000015B2  0040 8006 
                    2211   ; IIC_CRSR = START | READ | IACK;
000015B6  13FC 00A1 2212          move.b    #161,4227080
000015BA  0040 8008 
                    2213   ; checkTIP();
000015BE  4E92      2214          jsr       (A2)
                    2215   ; checkAck();
000015C0  4E93      2216          jsr       (A3)
                    2217   ; //printf("Sent Start Condition with Read Bit Set\n");
                    2218   ; //printf("Sent Slave Address with Read Bit Set: %02x\n", (deviceAddr << 1) | 0x01);
                    2219   ; // // Print TXRX register
                    2220   ; // printf("IIC_TXRX read: %02x", IIC_TXRX);
                    2221   ; // IICStopCondition();
                    2222   ; IIC_CRSR |= STOP | READ | IACK; // STOP + READ + IACK
000015C2  0039 0061 2223          or.b      #97,4227080
000015C6  0040 8008 
                    2224   ; IIC_CRSR &= NACK; // NACK
000015CA  0239 00F7 2225          and.b     #247,4227080
000015CE  0040 8008 
                    2226   ; checkTIP();
000015D2  4E92      2227          jsr       (A2)
                    2228   ; //printf("Sent Stop Condition\n");
                    2229   ; // Check if IF flag is sent, and if so read the data
                    2230   ; while (!(IIC_CRSR & 0x1));
                    2231   EEPROMRandomRead_1:
000015D4  1039 0040 2232          move.b    4227080,D0
000015D8  8008      
000015DA  C03C 0001 2233          and.b     #1,D0
000015DE  6602      2234          bne.s     EEPROMRandomRead_3
000015E0  60F2      2235          bra       EEPROMRandomRead_1
                    2236   EEPROMRandomRead_3:
                    2237   ; readData = IIC_TXRX;
000015E2  1039 0040 2238          move.b    4227078,D0
000015E6  8006      
000015E8  C0BC 0000 2239          and.l     #255,D0
000015EC  00FF      
000015EE  2D40 FFFC 2240          move.l    D0,-4(A6)
                    2241   ; //printf("\r\n Data Read: %02x", readData);
                    2242   ; // IICCoreDisable();
                    2243   ; // wait5ms();
                    2244   ; return readData;    
000015F2  202E FFFC 2245          move.l    -4(A6),D0
000015F6  4CDF 0C00 2246          movem.l   (A7)+,A2/A3
000015FA  4E5E      2247          unlk      A6
000015FC  4E75      2248          rts
                    2249   ; }   
                    2250   ; I2CTest() {
                    2251   _I2CTest:
000015FE  4E56 FFE4 2252          link      A6,#-28
00001602  48E7 2020 2253          movem.l   D2/A2,-(A7)
00001606  45F9 0000 2254          lea       _printf.L,A2
0000160A  3C26      
                    2255   ; int IICData[5] = {0x01, 0x02, 0x03, 0x04, 0x05};
0000160C  41EE FFE4 2256          lea       -28(A6),A0
00001610  43F9 0000 2257          lea       I2CTest_IICData.L,A1
00001614  5A3E      
00001616  7004      2258          moveq     #4,D0
00001618  20D9      2259          move.l    (A1)+,(A0)+
0000161A  51C8 FFFC 2260          dbra      D0,*-2
                    2261   ; int writeData = 0xAB;
0000161E  2D7C 0000 2262          move.l    #171,-8(A6)
00001622  00AB FFF8 
                    2263   ; int readData;
                    2264   ; int i;
                    2265   ; printf("\r\n I2C Test");
00001626  4879 0000 2266          pea       @m68kde~1_29.L
0000162A  48A6      
0000162C  4E92      2267          jsr       (A2)
0000162E  584F      2268          addq.w    #4,A7
                    2269   ; IIC_Init();
00001630  4EB8 1428 2270          jsr       _IIC_Init
                    2271   ; //IICWriteData(IICData, 0x50, 5);
                    2272   ; printf("\r\n Starting EEPROM Write: Writing 0x%.2x to address 0x00\n", writeData); // Debug: Indicate the start of EEPROM write
00001634  2F2E FFF8 2273          move.l    -8(A6),-(A7)
00001638  4879 0000 2274          pea       @m68kde~1_30.L
0000163C  48B2      
0000163E  4E92      2275          jsr       (A2)
00001640  504F      2276          addq.w    #8,A7
                    2277   ; for (i = 0; i < 50; i++) {
00001642  4282      2278          clr.l     D2
                    2279   I2CTest_1:
00001644  0C82 0000 2280          cmp.l     #50,D2
00001648  0032      
0000164A  6C26      2281          bge.s     I2CTest_3
                    2282   ; printf("\r\n Writing %d to address %d\n", i, i);
0000164C  2F02      2283          move.l    D2,-(A7)
0000164E  2F02      2284          move.l    D2,-(A7)
00001650  4879 0000 2285          pea       @m68kde~1_31.L
00001654  48EC      
00001656  4E92      2286          jsr       (A2)
00001658  DEFC 000C 2287          add.w     #12,A7
                    2288   ; EEPROMByteWrite(i, EEPROM0, i); // Write data to EEPROM
0000165C  48C2      2289          ext.l     D2
0000165E  2F02      2290          move.l    D2,-(A7)
00001660  4878 0050 2291          pea       80
00001664  2F02      2292          move.l    D2,-(A7)
00001666  4EB8 14B6 2293          jsr       _EEPROMByteWrite
0000166A  DEFC 000C 2294          add.w     #12,A7
0000166E  5282      2295          addq.l    #1,D2
00001670  60D2      2296          bra       I2CTest_1
                    2297   I2CTest_3:
                    2298   ; // readData = EEPROMRandomRead(EEPROM0, i);
                    2299   ; // printf("\r\n Address: %d: %d\n", i, readData);
                    2300   ; }
                    2301   ; // EEPROMByteWrite(0xBC, EEPROM0, 0x0);
                    2302   ; // printf("\r\nFinished write, Starting EEPROM Read\n");
                    2303   ; for (i = 0; i < 50; i++) {
00001672  4282      2304          clr.l     D2
                    2305   I2CTest_4:
00001674  0C82 0000 2306          cmp.l     #50,D2
00001678  0032      
0000167A  6C26      2307          bge.s     I2CTest_6
                    2308   ; readData = EEPROMRandomRead(EEPROM0, i); // Read data from EEPROM
0000167C  2F02      2309          move.l    D2,-(A7)
0000167E  4878 0050 2310          pea       80
00001682  4EB8 1544 2311          jsr       _EEPROMRandomRead
00001686  504F      2312          addq.w    #8,A7
00001688  2D40 FFFC 2313          move.l    D0,-4(A6)
                    2314   ; printf("\r\n Address: %d: %d\n", i, readData); // Debug: Indicate the address being read and the data read
0000168C  2F2E FFFC 2315          move.l    -4(A6),-(A7)
00001690  2F02      2316          move.l    D2,-(A7)
00001692  4879 0000 2317          pea       @m68kde~1_32.L
00001696  490A      
00001698  4E92      2318          jsr       (A2)
0000169A  DEFC 000C 2319          add.w     #12,A7
0000169E  5282      2320          addq.l    #1,D2
000016A0  60D2      2321          bra       I2CTest_4
                    2322   I2CTest_6:
                    2323   ; }
                    2324   ; // readData = EEPROMRandomRead(EEPROM0, 0x0);
                    2325   ; IICCoreDisable();
000016A2  4EB8 141E 2326          jsr       _IICCoreDisable
000016A6  4CDF 0404 2327          movem.l   (A7)+,D2/A2
000016AA  4E5E      2328          unlk      A6
000016AC  4E75      2329          rts
                    2330   ; // printf("\r\n Address: %d: %d\n", 0x0, readData);
                    2331   ; }
                    2332   ; // Initialize and enable I2C controller
                    2333   ; // No interrupts and set clock frequency to 100Khz
                    2334   ; // Connect controller to 25 or 45 Mhz CPU clock
                    2335   ; // Check if device is ready before writing anything over I2C bus ie) TX register has written previous command.
                    2336   ; // Check the status register TIP bit to see when transmission has finished
                    2337   ; // Wait for ACK from slave after each write
                    2338   ; // Transmit a byte to the I2C bus
                    2339   ; // write the data to be transmitted into TX register and then write something to the command register that indiciates that you want to write
                    2340   ; // If you want to generate a start or stop condition, set the STA or STO bits in command register when you write to it,
                    2341   ; // Clear the ACK bit if you want to generate an ACK when reading data back from the slave
                    2342   ; // EEPROM Functions
                    2343   ; // Write a byte to the EEPROM
                    2344   ; // Start write by writing a slave address and sett bit 0 of the data to be transmitted to 0, to indicate that you are writing an address to the slave
                    2345   ; // Generate start condition, and set the bit select and chip select bits, and set bits [7:4] to 1010
                    2346   ; // Write 2 bytes which correspond to the the 2 byte internal 64k address inside the chip, and then write the data to be stored at that address
                    2347   ; // Read a byte from the EEPROM
                    2348   ; // Write a slave address along with a start condition
                    2349   ; // Write 2 bytes which correspond to the 2 internal address bytes of the EEPROM
                    2350   ; // Send repeated start condition and set RD bit and ACK bit in command register
                    2351   ; // Set stop bit, and don't forget to set IACK bit to clear any pending interrupt flag
                    2352   ; // When data is recieved from slave, you can find it in the I2C Rx register
                    2353   ; // Poll I2C controller to determine when the data has been read from the slave which can be done by checking the IF flag in status register
                    2354   ; // when IF flag == 1, the data has been received.
                    2355   ; // Clear the IF flag with each byte read 
                    2356   ; // If slave does not recieve ACK from I2C controller, it will not send any more data
                    2357   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2358   ; // IMPORTANT
                    2359   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2360   ; // has to be done with an interrupt (IRQ Level 6)
                    2361   ; //
                    2362   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2363   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2364   ; //
                    2365   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2366   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2367   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2368   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2369   ; // program area
                    2370   ; //
                    2371   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2372   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2373   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2374   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2375   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2376   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2377   ; void DumpRegisters()
                    2378   ; {
                    2379   _DumpRegisters:
000016AE  48E7 3F3C 2380          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000016B2  45F9 0000 2381          lea       _putch.L,A2
000016B6  326A      
000016B8  47F9 0000 2382          lea       _printf.L,A3
000016BC  3C26      
000016BE  49F9 0B00 2383          lea       _SR.L,A4
000016C2  012C      
000016C4  4BF9 0B00 2384          lea       _WatchPointString.L,A5
000016C8  01C2      
                    2385   ; short i, x, j, k ;
                    2386   ; unsigned char c, *BytePointer;
                    2387   ; // buld up strings for displaying watchpoints
                    2388   ; for(x = 0; x < (short)(8); x++)
000016CA  4242      2389          clr.w     D2
                    2390   DumpRegisters_1:
000016CC  0C42 0008 2391          cmp.w     #8,D2
000016D0  6C00 01C6 2392          bge       DumpRegisters_3
                    2393   ; {
                    2394   ; if(WatchPointSetOrCleared[x] == 1)
000016D4  48C2      2395          ext.l     D2
000016D6  2002      2396          move.l    D2,D0
000016D8  E588      2397          lsl.l     #2,D0
000016DA  41F9 0B00 2398          lea       _WatchPointSetOrCleared.L,A0
000016DE  01A2      
000016E0  2030 0800 2399          move.l    0(A0,D0.L),D0
000016E4  0C80 0000 2400          cmp.l     #1,D0
000016E8  0001      
000016EA  6600 0186 2401          bne       DumpRegisters_4
                    2402   ; {
                    2403   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
000016EE  48C2      2404          ext.l     D2
000016F0  2202      2405          move.l    D2,D1
000016F2  E589      2406          lsl.l     #2,D1
000016F4  41F9 0B00 2407          lea       _WatchPointAddress.L,A0
000016F8  0182      
000016FA  2F30 1800 2408          move.l    0(A0,D1.L),-(A7)
000016FE  4879 0000 2409          pea       @m68kde~1_33.L
00001702  491E      
00001704  220D      2410          move.l    A5,D1
00001706  48C2      2411          ext.l     D2
00001708  2F00      2412          move.l    D0,-(A7)
0000170A  2002      2413          move.l    D2,D0
0000170C  C1FC 0064 2414          muls      #100,D0
00001710  D280      2415          add.l     D0,D1
00001712  201F      2416          move.l    (A7)+,D0
00001714  2F01      2417          move.l    D1,-(A7)
00001716  4EB9 0000 2418          jsr       _sprintf
0000171A  3302      
0000171C  DEFC 000C 2419          add.w     #12,A7
                    2420   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001720  48C2      2421          ext.l     D2
00001722  2002      2422          move.l    D2,D0
00001724  E588      2423          lsl.l     #2,D0
00001726  41F9 0B00 2424          lea       _WatchPointAddress.L,A0
0000172A  0182      
0000172C  2A30 0800 2425          move.l    0(A0,D0.L),D5
                    2426   ; for(j = 0; j < (short)(16); j+=2)
00001730  4243      2427          clr.w     D3
                    2428   DumpRegisters_6:
00001732  0C43 0010 2429          cmp.w     #16,D3
00001736  6C00 0082 2430          bge       DumpRegisters_8
                    2431   ; {
                    2432   ; for(k = 0; k < (short)(2); k++)
0000173A  4246      2433          clr.w     D6
                    2434   DumpRegisters_9:
0000173C  0C46 0002 2435          cmp.w     #2,D6
00001740  6C00 0052 2436          bge       DumpRegisters_11
                    2437   ; {
                    2438   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001744  2045      2439          move.l    D5,A0
00001746  48C3      2440          ext.l     D3
00001748  2203      2441          move.l    D3,D1
0000174A  48C6      2442          ext.l     D6
0000174C  D286      2443          add.l     D6,D1
0000174E  1230 1800 2444          move.b    0(A0,D1.L),D1
00001752  C2BC 0000 2445          and.l     #255,D1
00001756  00FF      
00001758  2F01      2446          move.l    D1,-(A7)
0000175A  4879 0000 2447          pea       @m68kde~1_8.L
0000175E  4674      
00001760  4879 0B00 2448          pea       _TempString.L
00001764  04E2      
00001766  4EB9 0000 2449          jsr       _sprintf
0000176A  3302      
0000176C  DEFC 000C 2450          add.w     #12,A7
                    2451   ; strcat(WatchPointString[x], TempString) ;
00001770  4879 0B00 2452          pea       _TempString.L
00001774  04E2      
00001776  220D      2453          move.l    A5,D1
00001778  48C2      2454          ext.l     D2
0000177A  2F00      2455          move.l    D0,-(A7)
0000177C  2002      2456          move.l    D2,D0
0000177E  C1FC 0064 2457          muls      #100,D0
00001782  D280      2458          add.l     D0,D1
00001784  201F      2459          move.l    (A7)+,D0
00001786  2F01      2460          move.l    D1,-(A7)
00001788  4EB9 0000 2461          jsr       _strcat
0000178C  334E      
0000178E  504F      2462          addq.w    #8,A7
00001790  5246      2463          addq.w    #1,D6
00001792  60A8      2464          bra       DumpRegisters_9
                    2465   DumpRegisters_11:
                    2466   ; }
                    2467   ; strcat(WatchPointString[x]," ") ;
00001794  4879 0000 2468          pea       @m68kde~1_34.L
00001798  4926      
0000179A  220D      2469          move.l    A5,D1
0000179C  48C2      2470          ext.l     D2
0000179E  2F00      2471          move.l    D0,-(A7)
000017A0  2002      2472          move.l    D2,D0
000017A2  C1FC 0064 2473          muls      #100,D0
000017A6  D280      2474          add.l     D0,D1
000017A8  201F      2475          move.l    (A7)+,D0
000017AA  2F01      2476          move.l    D1,-(A7)
000017AC  4EB9 0000 2477          jsr       _strcat
000017B0  334E      
000017B2  504F      2478          addq.w    #8,A7
000017B4  5443      2479          addq.w    #2,D3
000017B6  6000 FF7A 2480          bra       DumpRegisters_6
                    2481   DumpRegisters_8:
                    2482   ; }
                    2483   ; strcat(WatchPointString[x], "  ") ;
000017BA  4879 0000 2484          pea       @m68kde~1_9.L
000017BE  467A      
000017C0  220D      2485          move.l    A5,D1
000017C2  48C2      2486          ext.l     D2
000017C4  2F00      2487          move.l    D0,-(A7)
000017C6  2002      2488          move.l    D2,D0
000017C8  C1FC 0064 2489          muls      #100,D0
000017CC  D280      2490          add.l     D0,D1
000017CE  201F      2491          move.l    (A7)+,D0
000017D0  2F01      2492          move.l    D1,-(A7)
000017D2  4EB9 0000 2493          jsr       _strcat
000017D6  334E      
000017D8  504F      2494          addq.w    #8,A7
                    2495   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000017DA  48C2      2496          ext.l     D2
000017DC  2002      2497          move.l    D2,D0
000017DE  E588      2498          lsl.l     #2,D0
000017E0  41F9 0B00 2499          lea       _WatchPointAddress.L,A0
000017E4  0182      
000017E6  2A30 0800 2500          move.l    0(A0,D0.L),D5
                    2501   ; for(j = 0; j < (short)(16); j++)
000017EA  4243      2502          clr.w     D3
                    2503   DumpRegisters_12:
000017EC  0C43 0010 2504          cmp.w     #16,D3
000017F0  6C00 007E 2505          bge       DumpRegisters_14
                    2506   ; {
                    2507   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000017F4  2045      2508          move.l    D5,A0
000017F6  48C3      2509          ext.l     D3
000017F8  1030 3800 2510          move.b    0(A0,D3.L),D0
000017FC  C03C 007F 2511          and.b     #127,D0
00001800  1E00      2512          move.b    D0,D7
                    2513   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001802  0C07 007F 2514          cmp.b     #127,D7
00001806  6206      2515          bhi.s     DumpRegisters_17
00001808  0C07 0020 2516          cmp.b     #32,D7
0000180C  6416      2517          bhs.s     DumpRegisters_15
                    2518   DumpRegisters_17:
                    2519   ; sprintf(TempString, ".") ;
0000180E  4879 0000 2520          pea       @m68kde~1_35.L
00001812  4928      
00001814  4879 0B00 2521          pea       _TempString.L
00001818  04E2      
0000181A  4EB9 0000 2522          jsr       _sprintf
0000181E  3302      
00001820  504F      2523          addq.w    #8,A7
00001822  6026      2524          bra.s     DumpRegisters_16
                    2525   DumpRegisters_15:
                    2526   ; else
                    2527   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001824  2045      2528          move.l    D5,A0
00001826  48C3      2529          ext.l     D3
00001828  1230 3800 2530          move.b    0(A0,D3.L),D1
0000182C  C2BC 0000 2531          and.l     #255,D1
00001830  00FF      
00001832  2F01      2532          move.l    D1,-(A7)
00001834  4879 0000 2533          pea       @m68kde~1_36.L
00001838  492A      
0000183A  4879 0B00 2534          pea       _TempString.L
0000183E  04E2      
00001840  4EB9 0000 2535          jsr       _sprintf
00001844  3302      
00001846  DEFC 000C 2536          add.w     #12,A7
                    2537   DumpRegisters_16:
                    2538   ; strcat(WatchPointString[x], TempString) ;
0000184A  4879 0B00 2539          pea       _TempString.L
0000184E  04E2      
00001850  220D      2540          move.l    A5,D1
00001852  48C2      2541          ext.l     D2
00001854  2F00      2542          move.l    D0,-(A7)
00001856  2002      2543          move.l    D2,D0
00001858  C1FC 0064 2544          muls      #100,D0
0000185C  D280      2545          add.l     D0,D1
0000185E  201F      2546          move.l    (A7)+,D0
00001860  2F01      2547          move.l    D1,-(A7)
00001862  4EB9 0000 2548          jsr       _strcat
00001866  334E      
00001868  504F      2549          addq.w    #8,A7
0000186A  5243      2550          addq.w    #1,D3
0000186C  6000 FF7E 2551          bra       DumpRegisters_12
                    2552   DumpRegisters_14:
00001870  6020      2553          bra.s     DumpRegisters_5
                    2554   DumpRegisters_4:
                    2555   ; }
                    2556   ; }
                    2557   ; else
                    2558   ; strcpy(WatchPointString[x], "") ;
00001872  4879 0000 2559          pea       @m68kde~1_37.L
00001876  492E      
00001878  220D      2560          move.l    A5,D1
0000187A  48C2      2561          ext.l     D2
0000187C  2F00      2562          move.l    D0,-(A7)
0000187E  2002      2563          move.l    D2,D0
00001880  C1FC 0064 2564          muls      #100,D0
00001884  D280      2565          add.l     D0,D1
00001886  201F      2566          move.l    (A7)+,D0
00001888  2F01      2567          move.l    D1,-(A7)
0000188A  4EB9 0000 2568          jsr       _strcpy
0000188E  317C      
00001890  504F      2569          addq.w    #8,A7
                    2570   DumpRegisters_5:
00001892  5242      2571          addq.w    #1,D2
00001894  6000 FE36 2572          bra       DumpRegisters_1
                    2573   DumpRegisters_3:
                    2574   ; }
                    2575   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001898  2F39 0B00 2576          move.l    _a0.L,-(A7)
0000189C  0104      
0000189E  2F39 0B00 2577          move.l    _d0.L,-(A7)
000018A2  00E4      
000018A4  4879 0000 2578          pea       @m68kde~1_38.L
000018A8  4930      
000018AA  4E93      2579          jsr       (A3)
000018AC  DEFC 000C 2580          add.w     #12,A7
                    2581   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000018B0  2F39 0B00 2582          move.l    _a1.L,-(A7)
000018B4  0108      
000018B6  2F39 0B00 2583          move.l    _d1.L,-(A7)
000018BA  00E8      
000018BC  4879 0000 2584          pea       @m68kde~1_39.L
000018C0  494C      
000018C2  4E93      2585          jsr       (A3)
000018C4  DEFC 000C 2586          add.w     #12,A7
                    2587   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000018C8  2F39 0B00 2588          move.l    _a2.L,-(A7)
000018CC  010C      
000018CE  2F39 0B00 2589          move.l    _d2.L,-(A7)
000018D2  00EC      
000018D4  4879 0000 2590          pea       @m68kde~1_40.L
000018D8  4966      
000018DA  4E93      2591          jsr       (A3)
000018DC  DEFC 000C 2592          add.w     #12,A7
                    2593   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000018E0  2F39 0B00 2594          move.l    _a3.L,-(A7)
000018E4  0110      
000018E6  2F39 0B00 2595          move.l    _d3.L,-(A7)
000018EA  00F0      
000018EC  4879 0000 2596          pea       @m68kde~1_41.L
000018F0  4980      
000018F2  4E93      2597          jsr       (A3)
000018F4  DEFC 000C 2598          add.w     #12,A7
                    2599   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000018F8  2F39 0B00 2600          move.l    _a4.L,-(A7)
000018FC  0114      
000018FE  2F39 0B00 2601          move.l    _d4.L,-(A7)
00001902  00F4      
00001904  4879 0000 2602          pea       @m68kde~1_42.L
00001908  499A      
0000190A  4E93      2603          jsr       (A3)
0000190C  DEFC 000C 2604          add.w     #12,A7
                    2605   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001910  2F39 0B00 2606          move.l    _a5.L,-(A7)
00001914  0118      
00001916  2F39 0B00 2607          move.l    _d5.L,-(A7)
0000191A  00F8      
0000191C  4879 0000 2608          pea       @m68kde~1_43.L
00001920  49B4      
00001922  4E93      2609          jsr       (A3)
00001924  DEFC 000C 2610          add.w     #12,A7
                    2611   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001928  2F39 0B00 2612          move.l    _a6.L,-(A7)
0000192C  011C      
0000192E  2F39 0B00 2613          move.l    _d6.L,-(A7)
00001932  00FC      
00001934  4879 0000 2614          pea       @m68kde~1_44.L
00001938  49CE      
0000193A  4E93      2615          jsr       (A3)
0000193C  DEFC 000C 2616          add.w     #12,A7
                    2617   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001940  3214      2618          move.w    (A4),D1
00001942  C27C 2000 2619          and.w     #8192,D1
00001946  0C41 2000 2620          cmp.w     #8192,D1
0000194A  6608      2621          bne.s     DumpRegisters_18
0000194C  2239 0B00 2622          move.l    _SSP.L,D1
00001950  0124      
00001952  6006      2623          bra.s     DumpRegisters_19
                    2624   DumpRegisters_18:
00001954  2239 0B00 2625          move.l    _USP.L,D1
00001958  0128      
                    2626   DumpRegisters_19:
0000195A  2F01      2627          move.l    D1,-(A7)
0000195C  2F39 0B00 2628          move.l    _d7.L,-(A7)
00001960  0100      
00001962  4879 0000 2629          pea       @m68kde~1_45.L
00001966  49E8      
00001968  4E93      2630          jsr       (A3)
0000196A  DEFC 000C 2631          add.w     #12,A7
                    2632   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000196E  2F39 0B00 2633          move.l    _USP.L,-(A7)
00001972  0128      
00001974  4879 0000 2634          pea       @m68kde~1_46.L
00001978  4A02      
0000197A  4E93      2635          jsr       (A3)
0000197C  504F      2636          addq.w    #8,A7
                    2637   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000197E  2F39 0B00 2638          move.l    _SSP.L,-(A7)
00001982  0124      
00001984  4879 0000 2639          pea       @m68kde~1_47.L
00001988  4A20      
0000198A  4E93      2640          jsr       (A3)
0000198C  504F      2641          addq.w    #8,A7
                    2642   ; printf("\r\n SR = $%04X   ",SR) ;
0000198E  3214      2643          move.w    (A4),D1
00001990  C2BC 0000 2644          and.l     #65535,D1
00001994  FFFF      
00001996  2F01      2645          move.l    D1,-(A7)
00001998  4879 0000 2646          pea       @m68kde~1_48.L
0000199C  4A42      
0000199E  4E93      2647          jsr       (A3)
000019A0  504F      2648          addq.w    #8,A7
                    2649   ; // display the status word in characters etc.
                    2650   ; printf("   [") ;
000019A2  4879 0000 2651          pea       @m68kde~1_49.L
000019A6  4A54      
000019A8  4E93      2652          jsr       (A3)
000019AA  584F      2653          addq.w    #4,A7
                    2654   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000019AC  3014      2655          move.w    (A4),D0
000019AE  C07C 8000 2656          and.w     #32768,D0
000019B2  0C40 8000 2657          cmp.w     #32768,D0
000019B6  660A      2658          bne.s     DumpRegisters_20
000019B8  4878 0054 2659          pea       84
000019BC  4E92      2660          jsr       (A2)
000019BE  584F      2661          addq.w    #4,A7
000019C0  6008      2662          bra.s     DumpRegisters_21
                    2663   DumpRegisters_20:
000019C2  4878 002D 2664          pea       45
000019C6  4E92      2665          jsr       (A2)
000019C8  584F      2666          addq.w    #4,A7
                    2667   DumpRegisters_21:
                    2668   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000019CA  3014      2669          move.w    (A4),D0
000019CC  C07C 2000 2670          and.w     #8192,D0
000019D0  0C40 2000 2671          cmp.w     #8192,D0
000019D4  660A      2672          bne.s     DumpRegisters_22
000019D6  4878 0053 2673          pea       83
000019DA  4E92      2674          jsr       (A2)
000019DC  584F      2675          addq.w    #4,A7
000019DE  6008      2676          bra.s     DumpRegisters_23
                    2677   DumpRegisters_22:
000019E0  4878 0055 2678          pea       85
000019E4  4E92      2679          jsr       (A2)
000019E6  584F      2680          addq.w    #4,A7
                    2681   DumpRegisters_23:
                    2682   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000019E8  3014      2683          move.w    (A4),D0
000019EA  C07C 0400 2684          and.w     #1024,D0
000019EE  0C40 0400 2685          cmp.w     #1024,D0
000019F2  660A      2686          bne.s     DumpRegisters_24
000019F4  4878 0031 2687          pea       49
000019F8  4E92      2688          jsr       (A2)
000019FA  584F      2689          addq.w    #4,A7
000019FC  6008      2690          bra.s     DumpRegisters_25
                    2691   DumpRegisters_24:
000019FE  4878 0030 2692          pea       48
00001A02  4E92      2693          jsr       (A2)
00001A04  584F      2694          addq.w    #4,A7
                    2695   DumpRegisters_25:
                    2696   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001A06  3014      2697          move.w    (A4),D0
00001A08  C07C 0200 2698          and.w     #512,D0
00001A0C  0C40 0200 2699          cmp.w     #512,D0
00001A10  660A      2700          bne.s     DumpRegisters_26
00001A12  4878 0031 2701          pea       49
00001A16  4E92      2702          jsr       (A2)
00001A18  584F      2703          addq.w    #4,A7
00001A1A  6008      2704          bra.s     DumpRegisters_27
                    2705   DumpRegisters_26:
00001A1C  4878 0030 2706          pea       48
00001A20  4E92      2707          jsr       (A2)
00001A22  584F      2708          addq.w    #4,A7
                    2709   DumpRegisters_27:
                    2710   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001A24  3014      2711          move.w    (A4),D0
00001A26  C07C 0100 2712          and.w     #256,D0
00001A2A  0C40 0100 2713          cmp.w     #256,D0
00001A2E  660A      2714          bne.s     DumpRegisters_28
00001A30  4878 0031 2715          pea       49
00001A34  4E92      2716          jsr       (A2)
00001A36  584F      2717          addq.w    #4,A7
00001A38  6008      2718          bra.s     DumpRegisters_29
                    2719   DumpRegisters_28:
00001A3A  4878 0030 2720          pea       48
00001A3E  4E92      2721          jsr       (A2)
00001A40  584F      2722          addq.w    #4,A7
                    2723   DumpRegisters_29:
                    2724   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001A42  3014      2725          move.w    (A4),D0
00001A44  C07C 0010 2726          and.w     #16,D0
00001A48  0C40 0010 2727          cmp.w     #16,D0
00001A4C  660A      2728          bne.s     DumpRegisters_30
00001A4E  4878 0058 2729          pea       88
00001A52  4E92      2730          jsr       (A2)
00001A54  584F      2731          addq.w    #4,A7
00001A56  6008      2732          bra.s     DumpRegisters_31
                    2733   DumpRegisters_30:
00001A58  4878 002D 2734          pea       45
00001A5C  4E92      2735          jsr       (A2)
00001A5E  584F      2736          addq.w    #4,A7
                    2737   DumpRegisters_31:
                    2738   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001A60  3014      2739          move.w    (A4),D0
00001A62  C07C 0008 2740          and.w     #8,D0
00001A66  0C40 0008 2741          cmp.w     #8,D0
00001A6A  660A      2742          bne.s     DumpRegisters_32
00001A6C  4878 004E 2743          pea       78
00001A70  4E92      2744          jsr       (A2)
00001A72  584F      2745          addq.w    #4,A7
00001A74  6008      2746          bra.s     DumpRegisters_33
                    2747   DumpRegisters_32:
00001A76  4878 002D 2748          pea       45
00001A7A  4E92      2749          jsr       (A2)
00001A7C  584F      2750          addq.w    #4,A7
                    2751   DumpRegisters_33:
                    2752   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001A7E  3014      2753          move.w    (A4),D0
00001A80  C07C 0004 2754          and.w     #4,D0
00001A84  0C40 0004 2755          cmp.w     #4,D0
00001A88  660A      2756          bne.s     DumpRegisters_34
00001A8A  4878 005A 2757          pea       90
00001A8E  4E92      2758          jsr       (A2)
00001A90  584F      2759          addq.w    #4,A7
00001A92  6008      2760          bra.s     DumpRegisters_35
                    2761   DumpRegisters_34:
00001A94  4878 002D 2762          pea       45
00001A98  4E92      2763          jsr       (A2)
00001A9A  584F      2764          addq.w    #4,A7
                    2765   DumpRegisters_35:
                    2766   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001A9C  3014      2767          move.w    (A4),D0
00001A9E  C07C 0002 2768          and.w     #2,D0
00001AA2  0C40 0002 2769          cmp.w     #2,D0
00001AA6  660A      2770          bne.s     DumpRegisters_36
00001AA8  4878 0056 2771          pea       86
00001AAC  4E92      2772          jsr       (A2)
00001AAE  584F      2773          addq.w    #4,A7
00001AB0  6008      2774          bra.s     DumpRegisters_37
                    2775   DumpRegisters_36:
00001AB2  4878 002D 2776          pea       45
00001AB6  4E92      2777          jsr       (A2)
00001AB8  584F      2778          addq.w    #4,A7
                    2779   DumpRegisters_37:
                    2780   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001ABA  3014      2781          move.w    (A4),D0
00001ABC  C07C 0001 2782          and.w     #1,D0
00001AC0  0C40 0001 2783          cmp.w     #1,D0
00001AC4  660A      2784          bne.s     DumpRegisters_38
00001AC6  4878 0043 2785          pea       67
00001ACA  4E92      2786          jsr       (A2)
00001ACC  584F      2787          addq.w    #4,A7
00001ACE  6008      2788          bra.s     DumpRegisters_39
                    2789   DumpRegisters_38:
00001AD0  4878 002D 2790          pea       45
00001AD4  4E92      2791          jsr       (A2)
00001AD6  584F      2792          addq.w    #4,A7
                    2793   DumpRegisters_39:
                    2794   ; putchar(']') ;
00001AD8  4878 005D 2795          pea       93
00001ADC  4E92      2796          jsr       (A2)
00001ADE  584F      2797          addq.w    #4,A7
                    2798   ; printf("\r\n PC = $%08X  ", PC) ;
00001AE0  2F39 0B00 2799          move.l    _PC.L,-(A7)
00001AE4  0120      
00001AE6  4879 0000 2800          pea       @m68kde~1_50.L
00001AEA  4A5A      
00001AEC  4E93      2801          jsr       (A3)
00001AEE  504F      2802          addq.w    #8,A7
                    2803   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001AF0  2039 0B00 2804          move.l    _PC.L,D0
00001AF4  0120      
00001AF6  2040      2805          move.l    D0,A0
00001AF8  3010      2806          move.w    (A0),D0
00001AFA  0C40 4E4E 2807          cmp.w     #20046,D0
00001AFE  660A      2808          bne.s     DumpRegisters_40
                    2809   ; printf("[@ BREAKPOINT]") ;
00001B00  4879 0000 2810          pea       @m68kde~1_51.L
00001B04  4A6A      
00001B06  4E93      2811          jsr       (A3)
00001B08  584F      2812          addq.w    #4,A7
                    2813   DumpRegisters_40:
                    2814   ; printf("\r\n") ;
00001B0A  4879 0000 2815          pea       @m68kde~1_1.L
00001B0E  45FC      
00001B10  4E93      2816          jsr       (A3)
00001B12  584F      2817          addq.w    #4,A7
                    2818   ; for(i=0; i < 8; i++)    {
00001B14  4244      2819          clr.w     D4
                    2820   DumpRegisters_42:
00001B16  0C44 0008 2821          cmp.w     #8,D4
00001B1A  6C00 0040 2822          bge       DumpRegisters_44
                    2823   ; if(WatchPointSetOrCleared[i] == 1)
00001B1E  48C4      2824          ext.l     D4
00001B20  2004      2825          move.l    D4,D0
00001B22  E588      2826          lsl.l     #2,D0
00001B24  41F9 0B00 2827          lea       _WatchPointSetOrCleared.L,A0
00001B28  01A2      
00001B2A  2030 0800 2828          move.l    0(A0,D0.L),D0
00001B2E  0C80 0000 2829          cmp.l     #1,D0
00001B32  0001      
00001B34  6622      2830          bne.s     DumpRegisters_45
                    2831   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001B36  220D      2832          move.l    A5,D1
00001B38  48C4      2833          ext.l     D4
00001B3A  2F00      2834          move.l    D0,-(A7)
00001B3C  2004      2835          move.l    D4,D0
00001B3E  C1FC 0064 2836          muls      #100,D0
00001B42  D280      2837          add.l     D0,D1
00001B44  201F      2838          move.l    (A7)+,D0
00001B46  2F01      2839          move.l    D1,-(A7)
00001B48  48C4      2840          ext.l     D4
00001B4A  2F04      2841          move.l    D4,-(A7)
00001B4C  4879 0000 2842          pea       @m68kde~1_52.L
00001B50  4A7A      
00001B52  4E93      2843          jsr       (A3)
00001B54  DEFC 000C 2844          add.w     #12,A7
                    2845   DumpRegisters_45:
00001B58  5244      2846          addq.w    #1,D4
00001B5A  60BA      2847          bra       DumpRegisters_42
                    2848   DumpRegisters_44:
00001B5C  4CDF 3CFC 2849          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001B60  4E75      2850          rts
                    2851   ; }
                    2852   ; }
                    2853   ; // Trace Exception Handler
                    2854   ; void DumpRegistersandPause(void)
                    2855   ; {
                    2856   _DumpRegistersandPause:
00001B62  2F0A      2857          move.l    A2,-(A7)
00001B64  45F9 0000 2858          lea       _printf.L,A2
00001B68  3C26      
                    2859   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001B6A  4879 0000 2860          pea       @m68kde~1_53.L
00001B6E  4A86      
00001B70  4E92      2861          jsr       (A2)
00001B72  584F      2862          addq.w    #4,A7
                    2863   ; printf("\r\nBreak Points :[Disabled]") ;
00001B74  4879 0000 2864          pea       @m68kde~1_54.L
00001B78  4AA6      
00001B7A  4E92      2865          jsr       (A2)
00001B7C  584F      2866          addq.w    #4,A7
                    2867   ; DumpRegisters() ;
00001B7E  4EB8 16AE 2868          jsr       _DumpRegisters
                    2869   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001B82  4879 0000 2870          pea       @m68kde~1_55.L
00001B86  4AC2      
00001B88  4E92      2871          jsr       (A2)
00001B8A  584F      2872          addq.w    #4,A7
                    2873   ; printf("\r\nPress <ESC> to Resume Program") ;
00001B8C  4879 0000 2874          pea       @m68kde~1_56.L
00001B90  4AEE      
00001B92  4E92      2875          jsr       (A2)
00001B94  584F      2876          addq.w    #4,A7
                    2877   ; menu() ;
00001B96  4EB9 0000 2878          jsr       _menu
00001B9A  2746      
00001B9C  245F      2879          move.l    (A7)+,A2
00001B9E  4E75      2880          rts
                    2881   ; }
                    2882   ; void ChangeRegisters(void)
                    2883   ; {
                    2884   _ChangeRegisters:
00001BA0  4E56 FFFC 2885          link      A6,#-4
00001BA4  48E7 303C 2886          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001BA8  45F9 0000 2887          lea       _printf.L,A2
00001BAC  3C26      
00001BAE  47EE FFFC 2888          lea       -4(A6),A3
00001BB2  49F8 0CA4 2889          lea       _Get8HexDigits.L,A4
00001BB6  4BF8 0B68 2890          lea       __getch.L,A5
                    2891   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2892   ; int reg_val ;
                    2893   ; char c, reg[3] ;
                    2894   ; reg[0] = tolower(_getch()) ;
00001BBA  2F00      2895          move.l    D0,-(A7)
00001BBC  4E95      2896          jsr       (A5)
00001BBE  2200      2897          move.l    D0,D1
00001BC0  201F      2898          move.l    (A7)+,D0
00001BC2  2F01      2899          move.l    D1,-(A7)
00001BC4  4EB9 0000 2900          jsr       _tolower
00001BC8  32D6      
00001BCA  584F      2901          addq.w    #4,A7
00001BCC  1680      2902          move.b    D0,(A3)
                    2903   ; reg[1] = c = tolower(_getch()) ;
00001BCE  2F00      2904          move.l    D0,-(A7)
00001BD0  4E95      2905          jsr       (A5)
00001BD2  2200      2906          move.l    D0,D1
00001BD4  201F      2907          move.l    (A7)+,D0
00001BD6  2F01      2908          move.l    D1,-(A7)
00001BD8  4EB9 0000 2909          jsr       _tolower
00001BDC  32D6      
00001BDE  584F      2910          addq.w    #4,A7
00001BE0  1400      2911          move.b    D0,D2
00001BE2  1740 0001 2912          move.b    D0,1(A3)
                    2913   ; if(reg[0] == (char)('d'))  {    // change data register
00001BE6  1013      2914          move.b    (A3),D0
00001BE8  0C00 0064 2915          cmp.b     #100,D0
00001BEC  6600 00AE 2916          bne       ChangeRegisters_1
                    2917   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001BF0  102B 0001 2918          move.b    1(A3),D0
00001BF4  0C00 0037 2919          cmp.b     #55,D0
00001BF8  6E0A      2920          bgt.s     ChangeRegisters_5
00001BFA  102B 0001 2921          move.b    1(A3),D0
00001BFE  0C00 0030 2922          cmp.b     #48,D0
00001C02  6C0E      2923          bge.s     ChangeRegisters_3
                    2924   ChangeRegisters_5:
                    2925   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001C04  4879 0000 2926          pea       @m68kde~1_57.L
00001C08  4B0E      
00001C0A  4E92      2927          jsr       (A2)
00001C0C  584F      2928          addq.w    #4,A7
                    2929   ; return ;
00001C0E  6000 0244 2930          bra       ChangeRegisters_6
                    2931   ChangeRegisters_3:
                    2932   ; }
                    2933   ; else {
                    2934   ; printf("\r\nD%c = ", c) ;
00001C12  4882      2935          ext.w     D2
00001C14  48C2      2936          ext.l     D2
00001C16  2F02      2937          move.l    D2,-(A7)
00001C18  4879 0000 2938          pea       @m68kde~1_58.L
00001C1C  4B3A      
00001C1E  4E92      2939          jsr       (A2)
00001C20  504F      2940          addq.w    #8,A7
                    2941   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C22  42A7      2942          clr.l     -(A7)
00001C24  4E94      2943          jsr       (A4)
00001C26  584F      2944          addq.w    #4,A7
00001C28  2600      2945          move.l    D0,D3
                    2946   ; }
                    2947   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2948   ; if(c == (char)('0'))
00001C2A  0C02 0030 2949          cmp.b     #48,D2
00001C2E  660A      2950          bne.s     ChangeRegisters_7
                    2951   ; d0 = reg_val ;
00001C30  23C3 0B00 2952          move.l    D3,_d0.L
00001C34  00E4      
00001C36  6000 0060 2953          bra       ChangeRegisters_20
                    2954   ChangeRegisters_7:
                    2955   ; else if(c == (char)('1'))
00001C3A  0C02 0031 2956          cmp.b     #49,D2
00001C3E  660A      2957          bne.s     ChangeRegisters_9
                    2958   ; d1 = reg_val ;
00001C40  23C3 0B00 2959          move.l    D3,_d1.L
00001C44  00E8      
00001C46  6000 0050 2960          bra       ChangeRegisters_20
                    2961   ChangeRegisters_9:
                    2962   ; else if(c == (char)('2'))
00001C4A  0C02 0032 2963          cmp.b     #50,D2
00001C4E  660A      2964          bne.s     ChangeRegisters_11
                    2965   ; d2 = reg_val ;
00001C50  23C3 0B00 2966          move.l    D3,_d2.L
00001C54  00EC      
00001C56  6000 0040 2967          bra       ChangeRegisters_20
                    2968   ChangeRegisters_11:
                    2969   ; else if(c == (char)('3'))
00001C5A  0C02 0033 2970          cmp.b     #51,D2
00001C5E  6608      2971          bne.s     ChangeRegisters_13
                    2972   ; d3 = reg_val ;
00001C60  23C3 0B00 2973          move.l    D3,_d3.L
00001C64  00F0      
00001C66  6030      2974          bra.s     ChangeRegisters_20
                    2975   ChangeRegisters_13:
                    2976   ; else if(c == (char)('4'))
00001C68  0C02 0034 2977          cmp.b     #52,D2
00001C6C  6608      2978          bne.s     ChangeRegisters_15
                    2979   ; d4 = reg_val ;
00001C6E  23C3 0B00 2980          move.l    D3,_d4.L
00001C72  00F4      
00001C74  6022      2981          bra.s     ChangeRegisters_20
                    2982   ChangeRegisters_15:
                    2983   ; else if(c == (char)('5'))
00001C76  0C02 0035 2984          cmp.b     #53,D2
00001C7A  6608      2985          bne.s     ChangeRegisters_17
                    2986   ; d5 = reg_val ;
00001C7C  23C3 0B00 2987          move.l    D3,_d5.L
00001C80  00F8      
00001C82  6014      2988          bra.s     ChangeRegisters_20
                    2989   ChangeRegisters_17:
                    2990   ; else if(c == (char)('6'))
00001C84  0C02 0036 2991          cmp.b     #54,D2
00001C88  6608      2992          bne.s     ChangeRegisters_19
                    2993   ; d6 = reg_val ;
00001C8A  23C3 0B00 2994          move.l    D3,_d6.L
00001C8E  00FC      
00001C90  6006      2995          bra.s     ChangeRegisters_20
                    2996   ChangeRegisters_19:
                    2997   ; else
                    2998   ; d7 = reg_val ;
00001C92  23C3 0B00 2999          move.l    D3,_d7.L
00001C96  0100      
                    3000   ChangeRegisters_20:
00001C98  6000 01B6 3001          bra       ChangeRegisters_51
                    3002   ChangeRegisters_1:
                    3003   ; }
                    3004   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001C9C  1013      3005          move.b    (A3),D0
00001C9E  0C00 0061 3006          cmp.b     #97,D0
00001CA2  6600 00A6 3007          bne       ChangeRegisters_21
                    3008   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001CA6  0C02 0037 3009          cmp.b     #55,D2
00001CAA  6E06      3010          bgt.s     ChangeRegisters_25
00001CAC  0C02 0030 3011          cmp.b     #48,D2
00001CB0  6C0E      3012          bge.s     ChangeRegisters_23
                    3013   ChangeRegisters_25:
                    3014   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001CB2  4879 0000 3015          pea       @m68kde~1_59.L
00001CB6  4B44      
00001CB8  4E92      3016          jsr       (A2)
00001CBA  584F      3017          addq.w    #4,A7
                    3018   ; return ;
00001CBC  6000 0196 3019          bra       ChangeRegisters_6
                    3020   ChangeRegisters_23:
                    3021   ; }
                    3022   ; else {
                    3023   ; printf("\r\nA%c = ", c) ;
00001CC0  4882      3024          ext.w     D2
00001CC2  48C2      3025          ext.l     D2
00001CC4  2F02      3026          move.l    D2,-(A7)
00001CC6  4879 0000 3027          pea       @m68kde~1_60.L
00001CCA  4B72      
00001CCC  4E92      3028          jsr       (A2)
00001CCE  504F      3029          addq.w    #8,A7
                    3030   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001CD0  42A7      3031          clr.l     -(A7)
00001CD2  4E94      3032          jsr       (A4)
00001CD4  584F      3033          addq.w    #4,A7
00001CD6  2600      3034          move.l    D0,D3
                    3035   ; }
                    3036   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    3037   ; if(c == (char)('0'))
00001CD8  0C02 0030 3038          cmp.b     #48,D2
00001CDC  660A      3039          bne.s     ChangeRegisters_26
                    3040   ; a0 = reg_val ;
00001CDE  23C3 0B00 3041          move.l    D3,_a0.L
00001CE2  0104      
00001CE4  6000 0060 3042          bra       ChangeRegisters_39
                    3043   ChangeRegisters_26:
                    3044   ; else if(c == (char)('1'))
00001CE8  0C02 0031 3045          cmp.b     #49,D2
00001CEC  660A      3046          bne.s     ChangeRegisters_28
                    3047   ; a1 = reg_val ;
00001CEE  23C3 0B00 3048          move.l    D3,_a1.L
00001CF2  0108      
00001CF4  6000 0050 3049          bra       ChangeRegisters_39
                    3050   ChangeRegisters_28:
                    3051   ; else if(c == (char)('2'))
00001CF8  0C02 0032 3052          cmp.b     #50,D2
00001CFC  660A      3053          bne.s     ChangeRegisters_30
                    3054   ; a2 = reg_val ;
00001CFE  23C3 0B00 3055          move.l    D3,_a2.L
00001D02  010C      
00001D04  6000 0040 3056          bra       ChangeRegisters_39
                    3057   ChangeRegisters_30:
                    3058   ; else if(c == (char)('3'))
00001D08  0C02 0033 3059          cmp.b     #51,D2
00001D0C  6608      3060          bne.s     ChangeRegisters_32
                    3061   ; a3 = reg_val ;
00001D0E  23C3 0B00 3062          move.l    D3,_a3.L
00001D12  0110      
00001D14  6030      3063          bra.s     ChangeRegisters_39
                    3064   ChangeRegisters_32:
                    3065   ; else if(c == (char)('4'))
00001D16  0C02 0034 3066          cmp.b     #52,D2
00001D1A  6608      3067          bne.s     ChangeRegisters_34
                    3068   ; a4 = reg_val ;
00001D1C  23C3 0B00 3069          move.l    D3,_a4.L
00001D20  0114      
00001D22  6022      3070          bra.s     ChangeRegisters_39
                    3071   ChangeRegisters_34:
                    3072   ; else if(c == (char)('5'))
00001D24  0C02 0035 3073          cmp.b     #53,D2
00001D28  6608      3074          bne.s     ChangeRegisters_36
                    3075   ; a5 = reg_val ;
00001D2A  23C3 0B00 3076          move.l    D3,_a5.L
00001D2E  0118      
00001D30  6014      3077          bra.s     ChangeRegisters_39
                    3078   ChangeRegisters_36:
                    3079   ; else if(c == (char)('6'))
00001D32  0C02 0036 3080          cmp.b     #54,D2
00001D36  6608      3081          bne.s     ChangeRegisters_38
                    3082   ; a6 = reg_val ;
00001D38  23C3 0B00 3083          move.l    D3,_a6.L
00001D3C  011C      
00001D3E  6006      3084          bra.s     ChangeRegisters_39
                    3085   ChangeRegisters_38:
                    3086   ; else
                    3087   ; USP = reg_val ;
00001D40  23C3 0B00 3088          move.l    D3,_USP.L
00001D44  0128      
                    3089   ChangeRegisters_39:
00001D46  6000 0108 3090          bra       ChangeRegisters_51
                    3091   ChangeRegisters_21:
                    3092   ; }
                    3093   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001D4A  1013      3094          move.b    (A3),D0
00001D4C  0C00 0075 3095          cmp.b     #117,D0
00001D50  6600 004E 3096          bne       ChangeRegisters_40
00001D54  0C02 0073 3097          cmp.b     #115,D2
00001D58  6600 0046 3098          bne       ChangeRegisters_40
                    3099   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001D5C  2F00      3100          move.l    D0,-(A7)
00001D5E  4E95      3101          jsr       (A5)
00001D60  2200      3102          move.l    D0,D1
00001D62  201F      3103          move.l    (A7)+,D0
00001D64  2F01      3104          move.l    D1,-(A7)
00001D66  4EB9 0000 3105          jsr       _tolower
00001D6A  32D6      
00001D6C  584F      3106          addq.w    #4,A7
00001D6E  0C80 0000 3107          cmp.l     #112,D0
00001D72  0070      
00001D74  6618      3108          bne.s     ChangeRegisters_42
                    3109   ; printf("\r\nUser SP = ") ;
00001D76  4879 0000 3110          pea       @m68kde~1_61.L
00001D7A  4B7C      
00001D7C  4E92      3111          jsr       (A2)
00001D7E  584F      3112          addq.w    #4,A7
                    3113   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001D80  42A7      3114          clr.l     -(A7)
00001D82  4E94      3115          jsr       (A4)
00001D84  584F      3116          addq.w    #4,A7
00001D86  23C0 0B00 3117          move.l    D0,_USP.L
00001D8A  0128      
00001D8C  600E      3118          bra.s     ChangeRegisters_43
                    3119   ChangeRegisters_42:
                    3120   ; }
                    3121   ; else {
                    3122   ; printf("\r\nIllegal Register....") ;
00001D8E  4879 0000 3123          pea       @m68kde~1_62.L
00001D92  4B8A      
00001D94  4E92      3124          jsr       (A2)
00001D96  584F      3125          addq.w    #4,A7
                    3126   ; return ;
00001D98  6000 00BA 3127          bra       ChangeRegisters_6
                    3128   ChangeRegisters_43:
00001D9C  6000 00B2 3129          bra       ChangeRegisters_51
                    3130   ChangeRegisters_40:
                    3131   ; }
                    3132   ; }
                    3133   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001DA0  1013      3134          move.b    (A3),D0
00001DA2  0C00 0073 3135          cmp.b     #115,D0
00001DA6  6600 004E 3136          bne       ChangeRegisters_44
00001DAA  0C02 0073 3137          cmp.b     #115,D2
00001DAE  6600 0046 3138          bne       ChangeRegisters_44
                    3139   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001DB2  2F00      3140          move.l    D0,-(A7)
00001DB4  4E95      3141          jsr       (A5)
00001DB6  2200      3142          move.l    D0,D1
00001DB8  201F      3143          move.l    (A7)+,D0
00001DBA  2F01      3144          move.l    D1,-(A7)
00001DBC  4EB9 0000 3145          jsr       _tolower
00001DC0  32D6      
00001DC2  584F      3146          addq.w    #4,A7
00001DC4  0C80 0000 3147          cmp.l     #112,D0
00001DC8  0070      
00001DCA  6618      3148          bne.s     ChangeRegisters_46
                    3149   ; printf("\r\nSystem SP = ") ;
00001DCC  4879 0000 3150          pea       @m68kde~1_63.L
00001DD0  4BA2      
00001DD2  4E92      3151          jsr       (A2)
00001DD4  584F      3152          addq.w    #4,A7
                    3153   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001DD6  42A7      3154          clr.l     -(A7)
00001DD8  4E94      3155          jsr       (A4)
00001DDA  584F      3156          addq.w    #4,A7
00001DDC  23C0 0B00 3157          move.l    D0,_SSP.L
00001DE0  0124      
00001DE2  600E      3158          bra.s     ChangeRegisters_47
                    3159   ChangeRegisters_46:
                    3160   ; }
                    3161   ; else {
                    3162   ; printf("\r\nIllegal Register....") ;
00001DE4  4879 0000 3163          pea       @m68kde~1_62.L
00001DE8  4B8A      
00001DEA  4E92      3164          jsr       (A2)
00001DEC  584F      3165          addq.w    #4,A7
                    3166   ; return ;
00001DEE  6000 0064 3167          bra       ChangeRegisters_6
                    3168   ChangeRegisters_47:
00001DF2  6000 005C 3169          bra       ChangeRegisters_51
                    3170   ChangeRegisters_44:
                    3171   ; }
                    3172   ; }
                    3173   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001DF6  1013      3174          move.b    (A3),D0
00001DF8  0C00 0070 3175          cmp.b     #112,D0
00001DFC  6620      3176          bne.s     ChangeRegisters_48
00001DFE  0C02 0063 3177          cmp.b     #99,D2
00001E02  661A      3178          bne.s     ChangeRegisters_48
                    3179   ; printf("\r\nPC = ") ;
00001E04  4879 0000 3180          pea       @m68kde~1_64.L
00001E08  4BB2      
00001E0A  4E92      3181          jsr       (A2)
00001E0C  584F      3182          addq.w    #4,A7
                    3183   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001E0E  42A7      3184          clr.l     -(A7)
00001E10  4E94      3185          jsr       (A4)
00001E12  584F      3186          addq.w    #4,A7
00001E14  23C0 0B00 3187          move.l    D0,_PC.L
00001E18  0120      
00001E1A  6000 0034 3188          bra       ChangeRegisters_51
                    3189   ChangeRegisters_48:
                    3190   ; }
                    3191   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001E1E  1013      3192          move.b    (A3),D0
00001E20  0C00 0073 3193          cmp.b     #115,D0
00001E24  6620      3194          bne.s     ChangeRegisters_50
00001E26  0C02 0072 3195          cmp.b     #114,D2
00001E2A  661A      3196          bne.s     ChangeRegisters_50
                    3197   ; printf("\r\nSR = ") ;
00001E2C  4879 0000 3198          pea       @m68kde~1_65.L
00001E30  4BBA      
00001E32  4E92      3199          jsr       (A2)
00001E34  584F      3200          addq.w    #4,A7
                    3201   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001E36  42A7      3202          clr.l     -(A7)
00001E38  4EB8 0C58 3203          jsr       _Get4HexDigits
00001E3C  584F      3204          addq.w    #4,A7
00001E3E  33C0 0B00 3205          move.w    D0,_SR.L
00001E42  012C      
00001E44  600A      3206          bra.s     ChangeRegisters_51
                    3207   ChangeRegisters_50:
                    3208   ; }
                    3209   ; else
                    3210   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001E46  4879 0000 3211          pea       @m68kde~1_66.L
00001E4A  4BC2      
00001E4C  4E92      3212          jsr       (A2)
00001E4E  584F      3213          addq.w    #4,A7
                    3214   ChangeRegisters_51:
                    3215   ; DumpRegisters() ;
00001E50  4EB8 16AE 3216          jsr       _DumpRegisters
                    3217   ChangeRegisters_6:
00001E54  4CDF 3C0C 3218          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001E58  4E5E      3219          unlk      A6
00001E5A  4E75      3220          rts
                    3221   ; }
                    3222   ; void BreakPointDisplay(void)
                    3223   ; {
                    3224   _BreakPointDisplay:
00001E5C  48E7 3030 3225          movem.l   D2/D3/A2/A3,-(A7)
00001E60  45F9 0000 3226          lea       _printf.L,A2
00001E64  3C26      
00001E66  47F9 0B00 3227          lea       _BreakPointAddress.L,A3
00001E6A  012E      
                    3228   ; int i, BreakPointsSet = 0 ;
00001E6C  4283      3229          clr.l     D3
                    3230   ; // any break points  set
                    3231   ; for(i = 0; i < 8; i++)  {
00001E6E  4282      3232          clr.l     D2
                    3233   BreakPointDisplay_1:
00001E70  0C82 0000 3234          cmp.l     #8,D2
00001E74  0008      
00001E76  6C1C      3235          bge.s     BreakPointDisplay_3
                    3236   ; if(BreakPointSetOrCleared[i] == 1)
00001E78  2002      3237          move.l    D2,D0
00001E7A  E588      3238          lsl.l     #2,D0
00001E7C  41F9 0B00 3239          lea       _BreakPointSetOrCleared.L,A0
00001E80  015E      
00001E82  2030 0800 3240          move.l    0(A0,D0.L),D0
00001E86  0C80 0000 3241          cmp.l     #1,D0
00001E8A  0001      
00001E8C  6602      3242          bne.s     BreakPointDisplay_4
                    3243   ; BreakPointsSet = 1;
00001E8E  7601      3244          moveq     #1,D3
                    3245   BreakPointDisplay_4:
00001E90  5282      3246          addq.l    #1,D2
00001E92  60DC      3247          bra       BreakPointDisplay_1
                    3248   BreakPointDisplay_3:
                    3249   ; }
                    3250   ; if(BreakPointsSet == 1) {
00001E94  0C83 0000 3251          cmp.l     #1,D3
00001E98  0001      
00001E9A  6616      3252          bne.s     BreakPointDisplay_6
                    3253   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001E9C  4879 0000 3254          pea       @m68kde~1_67.L
00001EA0  4BFE      
00001EA2  4E92      3255          jsr       (A2)
00001EA4  584F      3256          addq.w    #4,A7
                    3257   ; printf("\r\n---     ---------    -----------") ;
00001EA6  4879 0000 3258          pea       @m68kde~1_68.L
00001EAA  4C24      
00001EAC  4E92      3259          jsr       (A2)
00001EAE  584F      3260          addq.w    #4,A7
00001EB0  600A      3261          bra.s     BreakPointDisplay_7
                    3262   BreakPointDisplay_6:
                    3263   ; }
                    3264   ; else
                    3265   ; printf("\r\nNo BreakPoints Set") ;
00001EB2  4879 0000 3266          pea       @m68kde~1_69.L
00001EB6  4C48      
00001EB8  4E92      3267          jsr       (A2)
00001EBA  584F      3268          addq.w    #4,A7
                    3269   BreakPointDisplay_7:
                    3270   ; for(i = 0; i < 8; i++)  {
00001EBC  4282      3271          clr.l     D2
                    3272   BreakPointDisplay_8:
00001EBE  0C82 0000 3273          cmp.l     #8,D2
00001EC2  0008      
00001EC4  6C00 005A 3274          bge       BreakPointDisplay_10
                    3275   ; // put opcode back, then put break point back
                    3276   ; if(BreakPointSetOrCleared[i] == 1)  {
00001EC8  2002      3277          move.l    D2,D0
00001ECA  E588      3278          lsl.l     #2,D0
00001ECC  41F9 0B00 3279          lea       _BreakPointSetOrCleared.L,A0
00001ED0  015E      
00001ED2  2030 0800 3280          move.l    0(A0,D0.L),D0
00001ED6  0C80 0000 3281          cmp.l     #1,D0
00001EDA  0001      
00001EDC  6600 003E 3282          bne       BreakPointDisplay_11
                    3283   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001EE0  2002      3284          move.l    D2,D0
00001EE2  E388      3285          lsl.l     #1,D0
00001EE4  41F9 0B00 3286          lea       _BreakPointInstruction.L,A0
00001EE8  014E      
00001EEA  2202      3287          move.l    D2,D1
00001EEC  E589      3288          lsl.l     #2,D1
00001EEE  2233 1800 3289          move.l    0(A3,D1.L),D1
00001EF2  2241      3290          move.l    D1,A1
00001EF4  32B0 0800 3291          move.w    0(A0,D0.L),(A1)
                    3292   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001EF8  2002      3293          move.l    D2,D0
00001EFA  E588      3294          lsl.l     #2,D0
00001EFC  2033 0800 3295          move.l    0(A3,D0.L),D0
00001F00  2040      3296          move.l    D0,A0
00001F02  30BC 4E4E 3297          move.w    #20046,(A0)
                    3298   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001F06  2202      3299          move.l    D2,D1
00001F08  E589      3300          lsl.l     #2,D1
00001F0A  2F33 1800 3301          move.l    0(A3,D1.L),-(A7)
00001F0E  2F02      3302          move.l    D2,-(A7)
00001F10  4879 0000 3303          pea       @m68kde~1_70.L
00001F14  4C5E      
00001F16  4E92      3304          jsr       (A2)
00001F18  DEFC 000C 3305          add.w     #12,A7
                    3306   BreakPointDisplay_11:
00001F1C  5282      3307          addq.l    #1,D2
00001F1E  609E      3308          bra       BreakPointDisplay_8
                    3309   BreakPointDisplay_10:
                    3310   ; }
                    3311   ; }
                    3312   ; printf("\r\n") ;
00001F20  4879 0000 3313          pea       @m68kde~1_1.L
00001F24  45FC      
00001F26  4E92      3314          jsr       (A2)
00001F28  584F      3315          addq.w    #4,A7
00001F2A  4CDF 0C0C 3316          movem.l   (A7)+,D2/D3/A2/A3
00001F2E  4E75      3317          rts
                    3318   ; }
                    3319   ; void WatchPointDisplay(void)
                    3320   ; {
                    3321   _WatchPointDisplay:
00001F30  48E7 3020 3322          movem.l   D2/D3/A2,-(A7)
00001F34  45F9 0000 3323          lea       _printf.L,A2
00001F38  3C26      
                    3324   ; int i ;
                    3325   ; int WatchPointsSet = 0 ;
00001F3A  4283      3326          clr.l     D3
                    3327   ; // any watchpoints set
                    3328   ; for(i = 0; i < 8; i++)  {
00001F3C  4282      3329          clr.l     D2
                    3330   WatchPointDisplay_1:
00001F3E  0C82 0000 3331          cmp.l     #8,D2
00001F42  0008      
00001F44  6C1C      3332          bge.s     WatchPointDisplay_3
                    3333   ; if(WatchPointSetOrCleared[i] == 1)
00001F46  2002      3334          move.l    D2,D0
00001F48  E588      3335          lsl.l     #2,D0
00001F4A  41F9 0B00 3336          lea       _WatchPointSetOrCleared.L,A0
00001F4E  01A2      
00001F50  2030 0800 3337          move.l    0(A0,D0.L),D0
00001F54  0C80 0000 3338          cmp.l     #1,D0
00001F58  0001      
00001F5A  6602      3339          bne.s     WatchPointDisplay_4
                    3340   ; WatchPointsSet = 1;
00001F5C  7601      3341          moveq     #1,D3
                    3342   WatchPointDisplay_4:
00001F5E  5282      3343          addq.l    #1,D2
00001F60  60DC      3344          bra       WatchPointDisplay_1
                    3345   WatchPointDisplay_3:
                    3346   ; }
                    3347   ; if(WatchPointsSet == 1) {
00001F62  0C83 0000 3348          cmp.l     #1,D3
00001F66  0001      
00001F68  6616      3349          bne.s     WatchPointDisplay_6
                    3350   ; printf("\r\nNum     Address") ;
00001F6A  4879 0000 3351          pea       @m68kde~1_71.L
00001F6E  4C6E      
00001F70  4E92      3352          jsr       (A2)
00001F72  584F      3353          addq.w    #4,A7
                    3354   ; printf("\r\n---     ---------") ;
00001F74  4879 0000 3355          pea       @m68kde~1_72.L
00001F78  4C80      
00001F7A  4E92      3356          jsr       (A2)
00001F7C  584F      3357          addq.w    #4,A7
00001F7E  600A      3358          bra.s     WatchPointDisplay_7
                    3359   WatchPointDisplay_6:
                    3360   ; }
                    3361   ; else
                    3362   ; printf("\r\nNo WatchPoints Set") ;
00001F80  4879 0000 3363          pea       @m68kde~1_73.L
00001F84  4C94      
00001F86  4E92      3364          jsr       (A2)
00001F88  584F      3365          addq.w    #4,A7
                    3366   WatchPointDisplay_7:
                    3367   ; for(i = 0; i < 8; i++)  {
00001F8A  4282      3368          clr.l     D2
                    3369   WatchPointDisplay_8:
00001F8C  0C82 0000 3370          cmp.l     #8,D2
00001F90  0008      
00001F92  6C00 0038 3371          bge       WatchPointDisplay_10
                    3372   ; if(WatchPointSetOrCleared[i] == 1)
00001F96  2002      3373          move.l    D2,D0
00001F98  E588      3374          lsl.l     #2,D0
00001F9A  41F9 0B00 3375          lea       _WatchPointSetOrCleared.L,A0
00001F9E  01A2      
00001FA0  2030 0800 3376          move.l    0(A0,D0.L),D0
00001FA4  0C80 0000 3377          cmp.l     #1,D0
00001FA8  0001      
00001FAA  661C      3378          bne.s     WatchPointDisplay_11
                    3379   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001FAC  2202      3380          move.l    D2,D1
00001FAE  E589      3381          lsl.l     #2,D1
00001FB0  41F9 0B00 3382          lea       _WatchPointAddress.L,A0
00001FB4  0182      
00001FB6  2F30 1800 3383          move.l    0(A0,D1.L),-(A7)
00001FBA  2F02      3384          move.l    D2,-(A7)
00001FBC  4879 0000 3385          pea       @m68kde~1_70.L
00001FC0  4C5E      
00001FC2  4E92      3386          jsr       (A2)
00001FC4  DEFC 000C 3387          add.w     #12,A7
                    3388   WatchPointDisplay_11:
00001FC8  5282      3389          addq.l    #1,D2
00001FCA  60C0      3390          bra       WatchPointDisplay_8
                    3391   WatchPointDisplay_10:
                    3392   ; }
                    3393   ; printf("\r\n") ;
00001FCC  4879 0000 3394          pea       @m68kde~1_1.L
00001FD0  45FC      
00001FD2  4E92      3395          jsr       (A2)
00001FD4  584F      3396          addq.w    #4,A7
00001FD6  4CDF 040C 3397          movem.l   (A7)+,D2/D3/A2
00001FDA  4E75      3398          rts
                    3399   ; }
                    3400   ; void BreakPointClear(void)
                    3401   ; {
                    3402   _BreakPointClear:
00001FDC  4E56 FFFC 3403          link      A6,#-4
00001FE0  48E7 2020 3404          movem.l   D2/A2,-(A7)
00001FE4  45F9 0000 3405          lea       _printf.L,A2
00001FE8  3C26      
                    3406   ; unsigned int i ;
                    3407   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3408   ; BreakPointDisplay() ;
00001FEA  4EB8 1E5C 3409          jsr       _BreakPointDisplay
                    3410   ; printf("\r\nEnter Break Point Number: ") ;
00001FEE  4879 0000 3411          pea       @m68kde~1_74.L
00001FF2  4CAA      
00001FF4  4E92      3412          jsr       (A2)
00001FF6  584F      3413          addq.w    #4,A7
                    3414   ; i = xtod(_getch()) ;           // get break pointer number
00001FF8  2F00      3415          move.l    D0,-(A7)
00001FFA  4EB8 0B68 3416          jsr       __getch
00001FFE  2200      3417          move.l    D0,D1
00002000  201F      3418          move.l    (A7)+,D0
00002002  2F01      3419          move.l    D1,-(A7)
00002004  4EB8 0BD2 3420          jsr       _xtod
00002008  584F      3421          addq.w    #4,A7
0000200A  C0BC 0000 3422          and.l     #255,D0
0000200E  00FF      
00002010  2400      3423          move.l    D0,D2
                    3424   ; if((i < 0) || (i > 7))   {
00002012  0C82 0000 3425          cmp.l     #0,D2
00002016  0000      
00002018  6508      3426          blo.s     BreakPointClear_3
0000201A  0C82 0000 3427          cmp.l     #7,D2
0000201E  0007      
00002020  630E      3428          bls.s     BreakPointClear_1
                    3429   BreakPointClear_3:
                    3430   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00002022  4879 0000 3431          pea       @m68kde~1_75.L
00002026  4CC8      
00002028  4E92      3432          jsr       (A2)
0000202A  584F      3433          addq.w    #4,A7
                    3434   ; return ;
0000202C  6000 0080 3435          bra       BreakPointClear_4
                    3436   BreakPointClear_1:
                    3437   ; }
                    3438   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00002030  2002      3439          move.l    D2,D0
00002032  E588      3440          lsl.l     #2,D0
00002034  41F9 0B00 3441          lea       _BreakPointSetOrCleared.L,A0
00002038  015E      
0000203A  2030 0800 3442          move.l    0(A0,D0.L),D0
0000203E  0C80 0000 3443          cmp.l     #1,D0
00002042  0001      
00002044  6600 005A 3444          bne       BreakPointClear_5
                    3445   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00002048  2002      3446          move.l    D2,D0
0000204A  E588      3447          lsl.l     #2,D0
0000204C  41F9 0B00 3448          lea       _BreakPointAddress.L,A0
00002050  012E      
00002052  2D70 0800 3449          move.l    0(A0,D0.L),-4(A6)
00002056  FFFC      
                    3450   ; BreakPointAddress[i] = 0 ;
00002058  2002      3451          move.l    D2,D0
0000205A  E588      3452          lsl.l     #2,D0
0000205C  41F9 0B00 3453          lea       _BreakPointAddress.L,A0
00002060  012E      
00002062  42B0 0800 3454          clr.l     0(A0,D0.L)
                    3455   ; BreakPointSetOrCleared[i] = 0 ;
00002066  2002      3456          move.l    D2,D0
00002068  E588      3457          lsl.l     #2,D0
0000206A  41F9 0B00 3458          lea       _BreakPointSetOrCleared.L,A0
0000206E  015E      
00002070  42B0 0800 3459          clr.l     0(A0,D0.L)
                    3460   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002074  2002      3461          move.l    D2,D0
00002076  E388      3462          lsl.l     #1,D0
00002078  41F9 0B00 3463          lea       _BreakPointInstruction.L,A0
0000207C  014E      
0000207E  226E FFFC 3464          move.l    -4(A6),A1
00002082  32B0 0800 3465          move.w    0(A0,D0.L),(A1)
                    3466   ; BreakPointInstruction[i] = 0 ;
00002086  2002      3467          move.l    D2,D0
00002088  E388      3468          lsl.l     #1,D0
0000208A  41F9 0B00 3469          lea       _BreakPointInstruction.L,A0
0000208E  014E      
00002090  4270 0800 3470          clr.w     0(A0,D0.L)
                    3471   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00002094  4879 0000 3472          pea       @m68kde~1_76.L
00002098  4CE4      
0000209A  4E92      3473          jsr       (A2)
0000209C  584F      3474          addq.w    #4,A7
0000209E  600A      3475          bra.s     BreakPointClear_6
                    3476   BreakPointClear_5:
                    3477   ; }
                    3478   ; else
                    3479   ; printf("\r\nBreak Point wasn't Set.....") ;
000020A0  4879 0000 3480          pea       @m68kde~1_77.L
000020A4  4D02      
000020A6  4E92      3481          jsr       (A2)
000020A8  584F      3482          addq.w    #4,A7
                    3483   BreakPointClear_6:
                    3484   ; BreakPointDisplay() ;
000020AA  4EB8 1E5C 3485          jsr       _BreakPointDisplay
                    3486   ; return ;
                    3487   BreakPointClear_4:
000020AE  4CDF 0404 3488          movem.l   (A7)+,D2/A2
000020B2  4E5E      3489          unlk      A6
000020B4  4E75      3490          rts
                    3491   ; }
                    3492   ; void WatchPointClear(void)
                    3493   ; {
                    3494   _WatchPointClear:
000020B6  48E7 2020 3495          movem.l   D2/A2,-(A7)
000020BA  45F9 0000 3496          lea       _printf.L,A2
000020BE  3C26      
                    3497   ; unsigned int i ;
                    3498   ; WatchPointDisplay() ;
000020C0  4EB8 1F30 3499          jsr       _WatchPointDisplay
                    3500   ; printf("\r\nEnter Watch Point Number: ") ;
000020C4  4879 0000 3501          pea       @m68kde~1_78.L
000020C8  4D20      
000020CA  4E92      3502          jsr       (A2)
000020CC  584F      3503          addq.w    #4,A7
                    3504   ; i = xtod(_getch()) ;           // get watch pointer number
000020CE  2F00      3505          move.l    D0,-(A7)
000020D0  4EB8 0B68 3506          jsr       __getch
000020D4  2200      3507          move.l    D0,D1
000020D6  201F      3508          move.l    (A7)+,D0
000020D8  2F01      3509          move.l    D1,-(A7)
000020DA  4EB8 0BD2 3510          jsr       _xtod
000020DE  584F      3511          addq.w    #4,A7
000020E0  C0BC 0000 3512          and.l     #255,D0
000020E4  00FF      
000020E6  2400      3513          move.l    D0,D2
                    3514   ; if((i < 0) || (i > 7))   {
000020E8  0C82 0000 3515          cmp.l     #0,D2
000020EC  0000      
000020EE  6508      3516          blo.s     WatchPointClear_3
000020F0  0C82 0000 3517          cmp.l     #7,D2
000020F4  0007      
000020F6  630E      3518          bls.s     WatchPointClear_1
                    3519   WatchPointClear_3:
                    3520   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000020F8  4879 0000 3521          pea       @m68kde~1_75.L
000020FC  4CC8      
000020FE  4E92      3522          jsr       (A2)
00002100  584F      3523          addq.w    #4,A7
                    3524   ; return ;
00002102  6000 004E 3525          bra       WatchPointClear_4
                    3526   WatchPointClear_1:
                    3527   ; }
                    3528   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00002106  2002      3529          move.l    D2,D0
00002108  E588      3530          lsl.l     #2,D0
0000210A  41F9 0B00 3531          lea       _WatchPointSetOrCleared.L,A0
0000210E  01A2      
00002110  2030 0800 3532          move.l    0(A0,D0.L),D0
00002114  0C80 0000 3533          cmp.l     #1,D0
00002118  0001      
0000211A  6628      3534          bne.s     WatchPointClear_5
                    3535   ; WatchPointAddress[i] = 0 ;
0000211C  2002      3536          move.l    D2,D0
0000211E  E588      3537          lsl.l     #2,D0
00002120  41F9 0B00 3538          lea       _WatchPointAddress.L,A0
00002124  0182      
00002126  42B0 0800 3539          clr.l     0(A0,D0.L)
                    3540   ; WatchPointSetOrCleared[i] = 0 ;
0000212A  2002      3541          move.l    D2,D0
0000212C  E588      3542          lsl.l     #2,D0
0000212E  41F9 0B00 3543          lea       _WatchPointSetOrCleared.L,A0
00002132  01A2      
00002134  42B0 0800 3544          clr.l     0(A0,D0.L)
                    3545   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00002138  4879 0000 3546          pea       @m68kde~1_79.L
0000213C  4D3E      
0000213E  4E92      3547          jsr       (A2)
00002140  584F      3548          addq.w    #4,A7
00002142  600A      3549          bra.s     WatchPointClear_6
                    3550   WatchPointClear_5:
                    3551   ; }
                    3552   ; else
                    3553   ; printf("\r\nWatch Point Was not Set.....") ;
00002144  4879 0000 3554          pea       @m68kde~1_80.L
00002148  4D5C      
0000214A  4E92      3555          jsr       (A2)
0000214C  584F      3556          addq.w    #4,A7
                    3557   WatchPointClear_6:
                    3558   ; WatchPointDisplay() ;
0000214E  4EB8 1F30 3559          jsr       _WatchPointDisplay
                    3560   ; return ;
                    3561   WatchPointClear_4:
00002152  4CDF 0404 3562          movem.l   (A7)+,D2/A2
00002156  4E75      3563          rts
                    3564   ; }
                    3565   ; void DisableBreakPoints(void)
                    3566   ; {
                    3567   _DisableBreakPoints:
00002158  4E56 FFFC 3568          link      A6,#-4
0000215C  2F02      3569          move.l    D2,-(A7)
                    3570   ; int i ;
                    3571   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3572   ; for(i = 0; i < 8; i++)  {
0000215E  4282      3573          clr.l     D2
                    3574   DisableBreakPoints_1:
00002160  0C82 0000 3575          cmp.l     #8,D2
00002164  0008      
00002166  6C00 003E 3576          bge       DisableBreakPoints_3
                    3577   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
0000216A  2002      3578          move.l    D2,D0
0000216C  E588      3579          lsl.l     #2,D0
0000216E  41F9 0B00 3580          lea       _BreakPointSetOrCleared.L,A0
00002172  015E      
00002174  2030 0800 3581          move.l    0(A0,D0.L),D0
00002178  0C80 0000 3582          cmp.l     #1,D0
0000217C  0001      
0000217E  6622      3583          bne.s     DisableBreakPoints_4
                    3584   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002180  2002      3585          move.l    D2,D0
00002182  E588      3586          lsl.l     #2,D0
00002184  41F9 0B00 3587          lea       _BreakPointAddress.L,A0
00002188  012E      
0000218A  2D70 0800 3588          move.l    0(A0,D0.L),-4(A6)
0000218E  FFFC      
                    3589   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00002190  2002      3590          move.l    D2,D0
00002192  E388      3591          lsl.l     #1,D0
00002194  41F9 0B00 3592          lea       _BreakPointInstruction.L,A0
00002198  014E      
0000219A  226E FFFC 3593          move.l    -4(A6),A1
0000219E  32B0 0800 3594          move.w    0(A0,D0.L),(A1)
                    3595   DisableBreakPoints_4:
000021A2  5282      3596          addq.l    #1,D2
000021A4  60BA      3597          bra       DisableBreakPoints_1
                    3598   DisableBreakPoints_3:
000021A6  241F      3599          move.l    (A7)+,D2
000021A8  4E5E      3600          unlk      A6
000021AA  4E75      3601          rts
                    3602   ; }
                    3603   ; }
                    3604   ; }
                    3605   ; void EnableBreakPoints(void)
                    3606   ; {
                    3607   _EnableBreakPoints:
000021AC  4E56 FFFC 3608          link      A6,#-4
000021B0  2F02      3609          move.l    D2,-(A7)
                    3610   ; int i ;
                    3611   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3612   ; for(i = 0; i < 8; i++)  {
000021B2  4282      3613          clr.l     D2
                    3614   EnableBreakPoints_1:
000021B4  0C82 0000 3615          cmp.l     #8,D2
000021B8  0008      
000021BA  6C32      3616          bge.s     EnableBreakPoints_3
                    3617   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
000021BC  2002      3618          move.l    D2,D0
000021BE  E588      3619          lsl.l     #2,D0
000021C0  41F9 0B00 3620          lea       _BreakPointSetOrCleared.L,A0
000021C4  015E      
000021C6  2030 0800 3621          move.l    0(A0,D0.L),D0
000021CA  0C80 0000 3622          cmp.l     #1,D0
000021CE  0001      
000021D0  6618      3623          bne.s     EnableBreakPoints_4
                    3624   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000021D2  2002      3625          move.l    D2,D0
000021D4  E588      3626          lsl.l     #2,D0
000021D6  41F9 0B00 3627          lea       _BreakPointAddress.L,A0
000021DA  012E      
000021DC  2D70 0800 3628          move.l    0(A0,D0.L),-4(A6)
000021E0  FFFC      
                    3629   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
000021E2  206E FFFC 3630          move.l    -4(A6),A0
000021E6  30BC 4E4E 3631          move.w    #20046,(A0)
                    3632   EnableBreakPoints_4:
000021EA  5282      3633          addq.l    #1,D2
000021EC  60C6      3634          bra       EnableBreakPoints_1
                    3635   EnableBreakPoints_3:
000021EE  241F      3636          move.l    (A7)+,D2
000021F0  4E5E      3637          unlk      A6
000021F2  4E75      3638          rts
                    3639   ; }
                    3640   ; }
                    3641   ; }
                    3642   ; void KillAllBreakPoints(void)
                    3643   ; {
                    3644   _KillAllBreakPoints:
000021F4  4E56 FFFC 3645          link      A6,#-4
000021F8  2F02      3646          move.l    D2,-(A7)
                    3647   ; int i ;
                    3648   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3649   ; for(i = 0; i < 8; i++)  {
000021FA  4282      3650          clr.l     D2
                    3651   KillAllBreakPoints_1:
000021FC  0C82 0000 3652          cmp.l     #8,D2
00002200  0008      
00002202  6C00 0052 3653          bge       KillAllBreakPoints_3
                    3654   ; // clear BP
                    3655   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002206  2002      3656          move.l    D2,D0
00002208  E588      3657          lsl.l     #2,D0
0000220A  41F9 0B00 3658          lea       _BreakPointAddress.L,A0
0000220E  012E      
00002210  2D70 0800 3659          move.l    0(A0,D0.L),-4(A6)
00002214  FFFC      
                    3660   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002216  2002      3661          move.l    D2,D0
00002218  E388      3662          lsl.l     #1,D0
0000221A  41F9 0B00 3663          lea       _BreakPointInstruction.L,A0
0000221E  014E      
00002220  226E FFFC 3664          move.l    -4(A6),A1
00002224  32B0 0800 3665          move.w    0(A0,D0.L),(A1)
                    3666   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002228  2002      3667          move.l    D2,D0
0000222A  E588      3668          lsl.l     #2,D0
0000222C  41F9 0B00 3669          lea       _BreakPointAddress.L,A0
00002230  012E      
00002232  42B0 0800 3670          clr.l     0(A0,D0.L)
                    3671   ; BreakPointInstruction[i] = 0 ;
00002236  2002      3672          move.l    D2,D0
00002238  E388      3673          lsl.l     #1,D0
0000223A  41F9 0B00 3674          lea       _BreakPointInstruction.L,A0
0000223E  014E      
00002240  4270 0800 3675          clr.w     0(A0,D0.L)
                    3676   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002244  2002      3677          move.l    D2,D0
00002246  E588      3678          lsl.l     #2,D0
00002248  41F9 0B00 3679          lea       _BreakPointSetOrCleared.L,A0
0000224C  015E      
0000224E  42B0 0800 3680          clr.l     0(A0,D0.L)
00002252  5282      3681          addq.l    #1,D2
00002254  60A6      3682          bra       KillAllBreakPoints_1
                    3683   KillAllBreakPoints_3:
00002256  241F      3684          move.l    (A7)+,D2
00002258  4E5E      3685          unlk      A6
0000225A  4E75      3686          rts
                    3687   ; }
                    3688   ; //BreakPointDisplay() ;       // display the break points
                    3689   ; }
                    3690   ; void KillAllWatchPoints(void)
                    3691   ; {
                    3692   _KillAllWatchPoints:
0000225C  2F02      3693          move.l    D2,-(A7)
                    3694   ; int i ;
                    3695   ; for(i = 0; i < 8; i++)  {
0000225E  4282      3696          clr.l     D2
                    3697   KillAllWatchPoints_1:
00002260  0C82 0000 3698          cmp.l     #8,D2
00002264  0008      
00002266  6C20      3699          bge.s     KillAllWatchPoints_3
                    3700   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002268  2002      3701          move.l    D2,D0
0000226A  E588      3702          lsl.l     #2,D0
0000226C  41F9 0B00 3703          lea       _WatchPointAddress.L,A0
00002270  0182      
00002272  42B0 0800 3704          clr.l     0(A0,D0.L)
                    3705   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002276  2002      3706          move.l    D2,D0
00002278  E588      3707          lsl.l     #2,D0
0000227A  41F9 0B00 3708          lea       _WatchPointSetOrCleared.L,A0
0000227E  01A2      
00002280  42B0 0800 3709          clr.l     0(A0,D0.L)
00002284  5282      3710          addq.l    #1,D2
00002286  60D8      3711          bra       KillAllWatchPoints_1
                    3712   KillAllWatchPoints_3:
00002288  241F      3713          move.l    (A7)+,D2
0000228A  4E75      3714          rts
                    3715   ; }
                    3716   ; //WatchPointDisplay() ;       // display the break points
                    3717   ; }
                    3718   ; void SetBreakPoint(void)
                    3719   ; {
                    3720   _SetBreakPoint:
0000228C  4E56 FFFC 3721          link      A6,#-4
00002290  48E7 3830 3722          movem.l   D2/D3/D4/A2/A3,-(A7)
00002294  45F9 0000 3723          lea       _printf.L,A2
00002298  3C26      
0000229A  47F9 0B00 3724          lea       _BreakPointSetOrCleared.L,A3
0000229E  015E      
                    3725   ; int i ;
                    3726   ; int BPNumber;
                    3727   ; int BPAddress;
                    3728   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3729   ; // see if any free break points
                    3730   ; for(i = 0; i < 8; i ++) {
000022A0  4282      3731          clr.l     D2
                    3732   SetBreakPoint_1:
000022A2  0C82 0000 3733          cmp.l     #8,D2
000022A6  0008      
000022A8  6C10      3734          bge.s     SetBreakPoint_3
                    3735   ; if( BreakPointSetOrCleared[i] == 0)
000022AA  2002      3736          move.l    D2,D0
000022AC  E588      3737          lsl.l     #2,D0
000022AE  2033 0800 3738          move.l    0(A3,D0.L),D0
000022B2  6602      3739          bne.s     SetBreakPoint_4
                    3740   ; break ;         // if spare BP found allow user to set it
000022B4  6004      3741          bra.s     SetBreakPoint_3
                    3742   SetBreakPoint_4:
000022B6  5282      3743          addq.l    #1,D2
000022B8  60E8      3744          bra       SetBreakPoint_1
                    3745   SetBreakPoint_3:
                    3746   ; }
                    3747   ; if(i == 8) {
000022BA  0C82 0000 3748          cmp.l     #8,D2
000022BE  0008      
000022C0  660E      3749          bne.s     SetBreakPoint_6
                    3750   ; printf("\r\nNo FREE Break Points.....") ;
000022C2  4879 0000 3751          pea       @m68kde~1_81.L
000022C6  4D7C      
000022C8  4E92      3752          jsr       (A2)
000022CA  584F      3753          addq.w    #4,A7
                    3754   ; return ;
000022CC  6000 00D6 3755          bra       SetBreakPoint_15
                    3756   SetBreakPoint_6:
                    3757   ; }
                    3758   ; printf("\r\nBreak Point Address: ") ;
000022D0  4879 0000 3759          pea       @m68kde~1_82.L
000022D4  4D98      
000022D6  4E92      3760          jsr       (A2)
000022D8  584F      3761          addq.w    #4,A7
                    3762   ; BPAddress = Get8HexDigits(0) ;
000022DA  42A7      3763          clr.l     -(A7)
000022DC  4EB8 0CA4 3764          jsr       _Get8HexDigits
000022E0  584F      3765          addq.w    #4,A7
000022E2  2600      3766          move.l    D0,D3
                    3767   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
000022E4  2803      3768          move.l    D3,D4
                    3769   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
000022E6  2003      3770          move.l    D3,D0
000022E8  C0BC 0000 3771          and.l     #1,D0
000022EC  0001      
000022EE  0C80 0000 3772          cmp.l     #1,D0
000022F2  0001      
000022F4  660E      3773          bne.s     SetBreakPoint_9
                    3774   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
000022F6  4879 0000 3775          pea       @m68kde~1_83.L
000022FA  4DB0      
000022FC  4E92      3776          jsr       (A2)
000022FE  584F      3777          addq.w    #4,A7
                    3778   ; return ;
00002300  6000 00A2 3779          bra       SetBreakPoint_15
                    3780   SetBreakPoint_9:
                    3781   ; }
                    3782   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002304  0C83 0000 3783          cmp.l     #32768,D3
00002308  8000      
0000230A  640E      3784          bhs.s     SetBreakPoint_11
                    3785   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000230C  4879 0000 3786          pea       @m68kde~1_84.L
00002310  4DE6      
00002312  4E92      3787          jsr       (A2)
00002314  584F      3788          addq.w    #4,A7
                    3789   ; return ;
00002316  6000 008C 3790          bra       SetBreakPoint_15
                    3791   SetBreakPoint_11:
                    3792   ; }
                    3793   ; // search for first free bp or existing same BP
                    3794   ; for(i = 0; i < 8; i++)  {
0000231A  4282      3795          clr.l     D2
                    3796   SetBreakPoint_13:
0000231C  0C82 0000 3797          cmp.l     #8,D2
00002320  0008      
00002322  6C00 0080 3798          bge       SetBreakPoint_15
                    3799   ; if(BreakPointAddress[i] == BPAddress)   {
00002326  2002      3800          move.l    D2,D0
00002328  E588      3801          lsl.l     #2,D0
0000232A  41F9 0B00 3802          lea       _BreakPointAddress.L,A0
0000232E  012E      
00002330  B6B0 0800 3803          cmp.l     0(A0,D0.L),D3
00002334  6610      3804          bne.s     SetBreakPoint_16
                    3805   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002336  2F03      3806          move.l    D3,-(A7)
00002338  4879 0000 3807          pea       @m68kde~1_85.L
0000233C  4E2E      
0000233E  4E92      3808          jsr       (A2)
00002340  504F      3809          addq.w    #8,A7
                    3810   ; return ;
00002342  6000 0060 3811          bra       SetBreakPoint_15
                    3812   SetBreakPoint_16:
                    3813   ; }
                    3814   ; if(BreakPointSetOrCleared[i] == 0) {
00002346  2002      3815          move.l    D2,D0
00002348  E588      3816          lsl.l     #2,D0
0000234A  2033 0800 3817          move.l    0(A3,D0.L),D0
0000234E  6600 004E 3818          bne       SetBreakPoint_18
                    3819   ; // set BP here
                    3820   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002352  2002      3821          move.l    D2,D0
00002354  E588      3822          lsl.l     #2,D0
00002356  27BC 0000 3823          move.l    #1,0(A3,D0.L)
0000235A  0001 0800 
                    3824   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
0000235E  2044      3825          move.l    D4,A0
00002360  2002      3826          move.l    D2,D0
00002362  E388      3827          lsl.l     #1,D0
00002364  43F9 0B00 3828          lea       _BreakPointInstruction.L,A1
00002368  014E      
0000236A  3390 0800 3829          move.w    (A0),0(A1,D0.L)
                    3830   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
0000236E  2F04      3831          move.l    D4,-(A7)
00002370  4879 0000 3832          pea       @m68kde~1_86.L
00002374  4E66      
00002376  4E92      3833          jsr       (A2)
00002378  504F      3834          addq.w    #8,A7
                    3835   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000237A  2044      3836          move.l    D4,A0
0000237C  30BC 4E4E 3837          move.w    #20046,(A0)
                    3838   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002380  2002      3839          move.l    D2,D0
00002382  E588      3840          lsl.l     #2,D0
00002384  41F9 0B00 3841          lea       _BreakPointAddress.L,A0
00002388  012E      
0000238A  2183 0800 3842          move.l    D3,0(A0,D0.L)
                    3843   ; printf("\r\n") ;
0000238E  4879 0000 3844          pea       @m68kde~1_1.L
00002392  45FC      
00002394  4E92      3845          jsr       (A2)
00002396  584F      3846          addq.w    #4,A7
                    3847   ; BreakPointDisplay() ;       // display the break points
00002398  4EB8 1E5C 3848          jsr       _BreakPointDisplay
                    3849   ; return ;
0000239C  6006      3850          bra.s     SetBreakPoint_15
                    3851   SetBreakPoint_18:
0000239E  5282      3852          addq.l    #1,D2
000023A0  6000 FF7A 3853          bra       SetBreakPoint_13
                    3854   SetBreakPoint_15:
000023A4  4CDF 0C1C 3855          movem.l   (A7)+,D2/D3/D4/A2/A3
000023A8  4E5E      3856          unlk      A6
000023AA  4E75      3857          rts
                    3858   ; }
                    3859   ; }
                    3860   ; }
                    3861   ; void SetWatchPoint(void)
                    3862   ; {
                    3863   _SetWatchPoint:
000023AC  4E56 FFF8 3864          link      A6,#-8
000023B0  48E7 3030 3865          movem.l   D2/D3/A2/A3,-(A7)
000023B4  45F9 0000 3866          lea       _printf.L,A2
000023B8  3C26      
000023BA  47F9 0B00 3867          lea       _WatchPointSetOrCleared.L,A3
000023BE  01A2      
                    3868   ; int i ;
                    3869   ; int WPNumber;
                    3870   ; int WPAddress;
                    3871   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3872   ; // see if any free break points
                    3873   ; for(i = 0; i < 8; i ++) {
000023C0  4282      3874          clr.l     D2
                    3875   SetWatchPoint_1:
000023C2  0C82 0000 3876          cmp.l     #8,D2
000023C6  0008      
000023C8  6C10      3877          bge.s     SetWatchPoint_3
                    3878   ; if( WatchPointSetOrCleared[i] == 0)
000023CA  2002      3879          move.l    D2,D0
000023CC  E588      3880          lsl.l     #2,D0
000023CE  2033 0800 3881          move.l    0(A3,D0.L),D0
000023D2  6602      3882          bne.s     SetWatchPoint_4
                    3883   ; break ;         // if spare WP found allow user to set it
000023D4  6004      3884          bra.s     SetWatchPoint_3
                    3885   SetWatchPoint_4:
000023D6  5282      3886          addq.l    #1,D2
000023D8  60E8      3887          bra       SetWatchPoint_1
                    3888   SetWatchPoint_3:
                    3889   ; }
                    3890   ; if(i == 8) {
000023DA  0C82 0000 3891          cmp.l     #8,D2
000023DE  0008      
000023E0  660E      3892          bne.s     SetWatchPoint_6
                    3893   ; printf("\r\nNo FREE Watch Points.....") ;
000023E2  4879 0000 3894          pea       @m68kde~1_87.L
000023E6  4E8C      
000023E8  4E92      3895          jsr       (A2)
000023EA  584F      3896          addq.w    #4,A7
                    3897   ; return ;
000023EC  6000 008C 3898          bra       SetWatchPoint_11
                    3899   SetWatchPoint_6:
                    3900   ; }
                    3901   ; printf("\r\nWatch Point Address: ") ;
000023F0  4879 0000 3902          pea       @m68kde~1_88.L
000023F4  4EA8      
000023F6  4E92      3903          jsr       (A2)
000023F8  584F      3904          addq.w    #4,A7
                    3905   ; WPAddress = Get8HexDigits(0) ;
000023FA  42A7      3906          clr.l     -(A7)
000023FC  4EB8 0CA4 3907          jsr       _Get8HexDigits
00002400  584F      3908          addq.w    #4,A7
00002402  2600      3909          move.l    D0,D3
                    3910   ; // search for first free wp or existing same wp
                    3911   ; for(i = 0; i < 8; i++)  {
00002404  4282      3912          clr.l     D2
                    3913   SetWatchPoint_9:
00002406  0C82 0000 3914          cmp.l     #8,D2
0000240A  0008      
0000240C  6C00 006C 3915          bge       SetWatchPoint_11
                    3916   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002410  2002      3917          move.l    D2,D0
00002412  E588      3918          lsl.l     #2,D0
00002414  41F9 0B00 3919          lea       _WatchPointAddress.L,A0
00002418  0182      
0000241A  B6B0 0800 3920          cmp.l     0(A0,D0.L),D3
0000241E  6614      3921          bne.s     SetWatchPoint_12
00002420  4A83      3922          tst.l     D3
00002422  6710      3923          beq.s     SetWatchPoint_12
                    3924   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002424  2F03      3925          move.l    D3,-(A7)
00002426  4879 0000 3926          pea       @m68kde~1_89.L
0000242A  4EC0      
0000242C  4E92      3927          jsr       (A2)
0000242E  504F      3928          addq.w    #8,A7
                    3929   ; return ;
00002430  6000 0048 3930          bra       SetWatchPoint_11
                    3931   SetWatchPoint_12:
                    3932   ; }
                    3933   ; if(WatchPointSetOrCleared[i] == 0) {
00002434  2002      3934          move.l    D2,D0
00002436  E588      3935          lsl.l     #2,D0
00002438  2033 0800 3936          move.l    0(A3,D0.L),D0
0000243C  6600 0038 3937          bne       SetWatchPoint_14
                    3938   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002440  2002      3939          move.l    D2,D0
00002442  E588      3940          lsl.l     #2,D0
00002444  27BC 0000 3941          move.l    #1,0(A3,D0.L)
00002448  0001 0800 
                    3942   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000244C  2F03      3943          move.l    D3,-(A7)
0000244E  4879 0000 3944          pea       @m68kde~1_90.L
00002452  4EF6      
00002454  4E92      3945          jsr       (A2)
00002456  504F      3946          addq.w    #8,A7
                    3947   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002458  2002      3948          move.l    D2,D0
0000245A  E588      3949          lsl.l     #2,D0
0000245C  41F9 0B00 3950          lea       _WatchPointAddress.L,A0
00002460  0182      
00002462  2183 0800 3951          move.l    D3,0(A0,D0.L)
                    3952   ; printf("\r\n") ;
00002466  4879 0000 3953          pea       @m68kde~1_1.L
0000246A  45FC      
0000246C  4E92      3954          jsr       (A2)
0000246E  584F      3955          addq.w    #4,A7
                    3956   ; WatchPointDisplay() ;       // display the break points
00002470  4EB8 1F30 3957          jsr       _WatchPointDisplay
                    3958   ; return ;
00002474  6004      3959          bra.s     SetWatchPoint_11
                    3960   SetWatchPoint_14:
00002476  5282      3961          addq.l    #1,D2
00002478  608C      3962          bra       SetWatchPoint_9
                    3963   SetWatchPoint_11:
0000247A  4CDF 0C0C 3964          movem.l   (A7)+,D2/D3/A2/A3
0000247E  4E5E      3965          unlk      A6
00002480  4E75      3966          rts
                    3967   ; }
                    3968   ; }
                    3969   ; }
                    3970   ; void HandleBreakPoint(void)
                    3971   ; {
                    3972   _HandleBreakPoint:
00002482  4E56 FFFC 3973          link      A6,#-4
00002486  48E7 0038 3974          movem.l   A2/A3/A4,-(A7)
0000248A  45F9 0B00 3975          lea       _i.L,A2
0000248E  00C4      
00002490  47F9 0000 3976          lea       _printf.L,A3
00002494  3C26      
00002496  49F9 0B00 3977          lea       _PC.L,A4
0000249A  0120      
                    3978   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3979   ; // now we have to put the break point back to run the instruction
                    3980   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3981   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
0000249C  5594      3982          subq.l    #2,(A4)
                    3983   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
0000249E  4879 0000 3984          pea       @m68kde~1_91.L
000024A2  4F1C      
000024A4  4E93      3985          jsr       (A3)
000024A6  584F      3986          addq.w    #4,A7
                    3987   ; printf("\r\nSingle Step : [ON]") ;
000024A8  4879 0000 3988          pea       @m68kde~1_92.L
000024AC  4F30      
000024AE  4E93      3989          jsr       (A3)
000024B0  584F      3990          addq.w    #4,A7
                    3991   ; printf("\r\nBreakPoints : [Enabled]") ;
000024B2  4879 0000 3992          pea       @m68kde~1_93.L
000024B6  4F46      
000024B8  4E93      3993          jsr       (A3)
000024BA  584F      3994          addq.w    #4,A7
                    3995   ; // now clear the break point (put original instruction back)
                    3996   ; ProgramBreakPointAddress = PC ;
000024BC  2D54 FFFC 3997          move.l    (A4),-4(A6)
                    3998   ; for(i = 0; i < 8; i ++) {
000024C0  4292      3999          clr.l     (A2)
                    4000   HandleBreakPoint_1:
000024C2  2012      4001          move.l    (A2),D0
000024C4  0C80 0000 4002          cmp.l     #8,D0
000024C8  0008      
000024CA  6400 0056 4003          bhs       HandleBreakPoint_3
                    4004   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000024CE  2012      4005          move.l    (A2),D0
000024D0  E588      4006          lsl.l     #2,D0
000024D2  41F9 0B00 4007          lea       _BreakPointAddress.L,A0
000024D6  012E      
000024D8  2230 0800 4008          move.l    0(A0,D0.L),D1
000024DC  B294      4009          cmp.l     (A4),D1
000024DE  6600 003E 4010          bne       HandleBreakPoint_4
                    4011   ; BreakPointAddress[i] = 0 ;
000024E2  2012      4012          move.l    (A2),D0
000024E4  E588      4013          lsl.l     #2,D0
000024E6  41F9 0B00 4014          lea       _BreakPointAddress.L,A0
000024EA  012E      
000024EC  42B0 0800 4015          clr.l     0(A0,D0.L)
                    4016   ; BreakPointSetOrCleared[i] = 0 ;
000024F0  2012      4017          move.l    (A2),D0
000024F2  E588      4018          lsl.l     #2,D0
000024F4  41F9 0B00 4019          lea       _BreakPointSetOrCleared.L,A0
000024F8  015E      
000024FA  42B0 0800 4020          clr.l     0(A0,D0.L)
                    4021   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000024FE  2012      4022          move.l    (A2),D0
00002500  E388      4023          lsl.l     #1,D0
00002502  41F9 0B00 4024          lea       _BreakPointInstruction.L,A0
00002506  014E      
00002508  226E FFFC 4025          move.l    -4(A6),A1
0000250C  32B0 0800 4026          move.w    0(A0,D0.L),(A1)
                    4027   ; BreakPointInstruction[i] = 0 ;
00002510  2012      4028          move.l    (A2),D0
00002512  E388      4029          lsl.l     #1,D0
00002514  41F9 0B00 4030          lea       _BreakPointInstruction.L,A0
00002518  014E      
0000251A  4270 0800 4031          clr.w     0(A0,D0.L)
                    4032   HandleBreakPoint_4:
0000251E  5292      4033          addq.l    #1,(A2)
00002520  60A0      4034          bra       HandleBreakPoint_1
                    4035   HandleBreakPoint_3:
                    4036   ; }
                    4037   ; }
                    4038   ; DumpRegisters() ;
00002522  4EB8 16AE 4039          jsr       _DumpRegisters
                    4040   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002526  4879 0000 4041          pea       @m68kde~1_55.L
0000252A  4AC2      
0000252C  4E93      4042          jsr       (A3)
0000252E  584F      4043          addq.w    #4,A7
                    4044   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002530  4879 0000 4045          pea       @m68kde~1_94.L
00002534  4F60      
00002536  4E93      4046          jsr       (A3)
00002538  584F      4047          addq.w    #4,A7
                    4048   ; menu() ;
0000253A  4EB9 0000 4049          jsr       _menu
0000253E  2746      
00002540  4CDF 1C00 4050          movem.l   (A7)+,A2/A3/A4
00002544  4E5E      4051          unlk      A6
00002546  4E75      4052          rts
                    4053   ; }
                    4054   ; void UnknownCommand()
                    4055   ; {
                    4056   _UnknownCommand:
                    4057   ; printf("\r\nUnknown Command.....\r\n") ;
00002548  4879 0000 4058          pea       @m68kde~1_95.L
0000254C  4F88      
0000254E  4EB9 0000 4059          jsr       _printf
00002552  3C26      
00002554  584F      4060          addq.w    #4,A7
                    4061   ; Help() ;
00002556  4EB9 0000 4062          jsr       _Help
0000255A  266C      
0000255C  4E75      4063          rts
                    4064   ; }
                    4065   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    4066   ; void CallDebugMonitor(void)
                    4067   ; {
                    4068   _CallDebugMonitor:
                    4069   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000255E  4879 0000 4070          pea       @m68kde~1_96.L
00002562  4FA2      
00002564  4EB9 0000 4071          jsr       _printf
00002568  3C26      
0000256A  584F      4072          addq.w    #4,A7
                    4073   ; menu();
0000256C  4EB9 0000 4074          jsr       _menu
00002570  2746      
00002572  4E75      4075          rts
                    4076   ; }
                    4077   ; void Breakpoint(void)
                    4078   ; {
                    4079   _Breakpoint:
00002574  2F02      4080          move.l    D2,-(A7)
                    4081   ; char c;
                    4082   ; c = toupper(_getch());
00002576  2F00      4083          move.l    D0,-(A7)
00002578  4EB8 0B68 4084          jsr       __getch
0000257C  2200      4085          move.l    D0,D1
0000257E  201F      4086          move.l    (A7)+,D0
00002580  2F01      4087          move.l    D1,-(A7)
00002582  4EB9 0000 4088          jsr       _toupper
00002586  3364      
00002588  584F      4089          addq.w    #4,A7
0000258A  1400      4090          move.b    D0,D2
                    4091   ; if( c == (char)('D'))                                      // BreakPoint Display
0000258C  0C02 0044 4092          cmp.b     #68,D2
00002590  6608      4093          bne.s     Breakpoint_1
                    4094   ; BreakPointDisplay() ;
00002592  4EB8 1E5C 4095          jsr       _BreakPointDisplay
00002596  6000 0054 4096          bra       Breakpoint_10
                    4097   Breakpoint_1:
                    4098   ; else if(c == (char)('K')) {                                 // breakpoint Kill
0000259A  0C02 004B 4099          cmp.b     #75,D2
0000259E  6630      4100          bne.s     Breakpoint_3
                    4101   ; printf("\r\nKill All Break Points...(y/n)?") ;
000025A0  4879 0000 4102          pea       @m68kde~1_97.L
000025A4  4FC2      
000025A6  4EB9 0000 4103          jsr       _printf
000025AA  3C26      
000025AC  584F      4104          addq.w    #4,A7
                    4105   ; c = toupper(_getch());
000025AE  2F00      4106          move.l    D0,-(A7)
000025B0  4EB8 0B68 4107          jsr       __getch
000025B4  2200      4108          move.l    D0,D1
000025B6  201F      4109          move.l    (A7)+,D0
000025B8  2F01      4110          move.l    D1,-(A7)
000025BA  4EB9 0000 4111          jsr       _toupper
000025BE  3364      
000025C0  584F      4112          addq.w    #4,A7
000025C2  1400      4113          move.b    D0,D2
                    4114   ; if(c == (char)('Y'))
000025C4  0C02 0059 4115          cmp.b     #89,D2
000025C8  6604      4116          bne.s     Breakpoint_5
                    4117   ; KillAllBreakPoints() ;
000025CA  4EB8 21F4 4118          jsr       _KillAllBreakPoints
                    4119   Breakpoint_5:
000025CE  601C      4120          bra.s     Breakpoint_10
                    4121   Breakpoint_3:
                    4122   ; }
                    4123   ; else if(c == (char)('S')) {
000025D0  0C02 0053 4124          cmp.b     #83,D2
000025D4  6606      4125          bne.s     Breakpoint_7
                    4126   ; SetBreakPoint() ;
000025D6  4EB8 228C 4127          jsr       _SetBreakPoint
000025DA  6010      4128          bra.s     Breakpoint_10
                    4129   Breakpoint_7:
                    4130   ; }
                    4131   ; else if(c == (char)('C')) {
000025DC  0C02 0043 4132          cmp.b     #67,D2
000025E0  6606      4133          bne.s     Breakpoint_9
                    4134   ; BreakPointClear() ;
000025E2  4EB8 1FDC 4135          jsr       _BreakPointClear
000025E6  6004      4136          bra.s     Breakpoint_10
                    4137   Breakpoint_9:
                    4138   ; }
                    4139   ; else
                    4140   ; UnknownCommand() ;
000025E8  4EB8 2548 4141          jsr       _UnknownCommand
                    4142   Breakpoint_10:
000025EC  241F      4143          move.l    (A7)+,D2
000025EE  4E75      4144          rts
                    4145   ; }
                    4146   ; void Watchpoint(void)
                    4147   ; {
                    4148   _Watchpoint:
000025F0  2F02      4149          move.l    D2,-(A7)
                    4150   ; char c;
                    4151   ; c = toupper(_getch());
000025F2  2F00      4152          move.l    D0,-(A7)
000025F4  4EB8 0B68 4153          jsr       __getch
000025F8  2200      4154          move.l    D0,D1
000025FA  201F      4155          move.l    (A7)+,D0
000025FC  2F01      4156          move.l    D1,-(A7)
000025FE  4EB9 0000 4157          jsr       _toupper
00002602  3364      
00002604  584F      4158          addq.w    #4,A7
00002606  1400      4159          move.b    D0,D2
                    4160   ; if( c == (char)('D'))                                      // WatchPoint Display
00002608  0C02 0044 4161          cmp.b     #68,D2
0000260C  6608      4162          bne.s     Watchpoint_1
                    4163   ; WatchPointDisplay() ;
0000260E  4EB8 1F30 4164          jsr       _WatchPointDisplay
00002612  6000 0054 4165          bra       Watchpoint_10
                    4166   Watchpoint_1:
                    4167   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002616  0C02 004B 4168          cmp.b     #75,D2
0000261A  6630      4169          bne.s     Watchpoint_3
                    4170   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000261C  4879 0000 4171          pea       @m68kde~1_98.L
00002620  4FE4      
00002622  4EB9 0000 4172          jsr       _printf
00002626  3C26      
00002628  584F      4173          addq.w    #4,A7
                    4174   ; c = toupper(_getch());
0000262A  2F00      4175          move.l    D0,-(A7)
0000262C  4EB8 0B68 4176          jsr       __getch
00002630  2200      4177          move.l    D0,D1
00002632  201F      4178          move.l    (A7)+,D0
00002634  2F01      4179          move.l    D1,-(A7)
00002636  4EB9 0000 4180          jsr       _toupper
0000263A  3364      
0000263C  584F      4181          addq.w    #4,A7
0000263E  1400      4182          move.b    D0,D2
                    4183   ; if(c == (char)('Y'))
00002640  0C02 0059 4184          cmp.b     #89,D2
00002644  6604      4185          bne.s     Watchpoint_5
                    4186   ; KillAllWatchPoints() ;
00002646  4EB8 225C 4187          jsr       _KillAllWatchPoints
                    4188   Watchpoint_5:
0000264A  601C      4189          bra.s     Watchpoint_10
                    4190   Watchpoint_3:
                    4191   ; }
                    4192   ; else if(c == (char)('S')) {
0000264C  0C02 0053 4193          cmp.b     #83,D2
00002650  6606      4194          bne.s     Watchpoint_7
                    4195   ; SetWatchPoint() ;
00002652  4EB8 23AC 4196          jsr       _SetWatchPoint
00002656  6010      4197          bra.s     Watchpoint_10
                    4198   Watchpoint_7:
                    4199   ; }
                    4200   ; else if(c == (char)('C')) {
00002658  0C02 0043 4201          cmp.b     #67,D2
0000265C  6606      4202          bne.s     Watchpoint_9
                    4203   ; WatchPointClear() ;
0000265E  4EB8 20B6 4204          jsr       _WatchPointClear
00002662  6004      4205          bra.s     Watchpoint_10
                    4206   Watchpoint_9:
                    4207   ; }
                    4208   ; else
                    4209   ; UnknownCommand() ;
00002664  4EB8 2548 4210          jsr       _UnknownCommand
                    4211   Watchpoint_10:
00002668  241F      4212          move.l    (A7)+,D2
0000266A  4E75      4213          rts
                    4214   ; }
                    4215   ; void Help(void)
                    4216   ; {
                    4217   _Help:
0000266C  48E7 2020 4218          movem.l   D2/A2,-(A7)
00002670  45F9 0000 4219          lea       _printf.L,A2
00002674  3C26      
                    4220   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002676  41F9 0000 4221          lea       @m68kde~1_99.L,A0
0000267A  5006      
0000267C  2408      4222          move.l    A0,D2
                    4223   ; printf(banner) ;
0000267E  2F02      4224          move.l    D2,-(A7)
00002680  4E92      4225          jsr       (A2)
00002682  584F      4226          addq.w    #4,A7
                    4227   ; printf("\r\n  Debugger Command Summary") ;
00002684  4879 0000 4228          pea       @m68kde~1_100.L
00002688  504A      
0000268A  4E92      4229          jsr       (A2)
0000268C  584F      4230          addq.w    #4,A7
                    4231   ; printf(banner) ;
0000268E  2F02      4232          move.l    D2,-(A7)
00002690  4E92      4233          jsr       (A2)
00002692  584F      4234          addq.w    #4,A7
                    4235   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
00002694  4879 0000 4236          pea       @m68kde~1_101.L
00002698  5068      
0000269A  4E92      4237          jsr       (A2)
0000269C  584F      4238          addq.w    #4,A7
                    4239   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
0000269E  4879 0000 4240          pea       @m68kde~1_102.L
000026A2  50AC      
000026A4  4E92      4241          jsr       (A2)
000026A6  584F      4242          addq.w    #4,A7
                    4243   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000026A8  4879 0000 4244          pea       @m68kde~1_103.L
000026AC  50E4      
000026AE  4E92      4245          jsr       (A2)
000026B0  584F      4246          addq.w    #4,A7
                    4247   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000026B2  4879 0000 4248          pea       @m68kde~1_104.L
000026B6  511E      
000026B8  4E92      4249          jsr       (A2)
000026BA  584F      4250          addq.w    #4,A7
                    4251   ; printf("\r\n  E            - Enter String into Memory") ;
000026BC  4879 0000 4252          pea       @m68kde~1_105.L
000026C0  5150      
000026C2  4E92      4253          jsr       (A2)
000026C4  584F      4254          addq.w    #4,A7
                    4255   ; printf("\r\n  F            - Fill Memory with Data") ;
000026C6  4879 0000 4256          pea       @m68kde~1_106.L
000026CA  517C      
000026CC  4E92      4257          jsr       (A2)
000026CE  584F      4258          addq.w    #4,A7
                    4259   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000026D0  2F39 0B00 4260          move.l    _PC.L,-(A7)
000026D4  0120      
000026D6  4879 0000 4261          pea       @m68kde~1_107.L
000026DA  51A6      
000026DC  4E92      4262          jsr       (A2)
000026DE  504F      4263          addq.w    #8,A7
                    4264   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
000026E0  4879 0000 4265          pea       @m68kde~1_108.L
000026E4  51E0      
000026E6  4E92      4266          jsr       (A2)
000026E8  584F      4267          addq.w    #4,A7
                    4268   ; printf("\r\n  M            - Memory Examine and Change");
000026EA  4879 0000 4269          pea       @m68kde~1_109.L
000026EE  5218      
000026F0  4E92      4270          jsr       (A2)
000026F2  584F      4271          addq.w    #4,A7
                    4272   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
000026F4  4879 0000 4273          pea       @m68kde~1_110.L
000026F8  5246      
000026FA  4E92      4274          jsr       (A2)
000026FC  584F      4275          addq.w    #4,A7
                    4276   ; printf("\r\n  R            - Display 68000 Registers") ;
000026FE  4879 0000 4277          pea       @m68kde~1_111.L
00002702  5280      
00002704  4E92      4278          jsr       (A2)
00002706  584F      4279          addq.w    #4,A7
                    4280   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002708  4879 0000 4281          pea       @m68kde~1_112.L
0000270C  52AC      
0000270E  4E92      4282          jsr       (A2)
00002710  584F      4283          addq.w    #4,A7
                    4284   ; printf("\r\n  TM           - Test Memory") ;
00002712  4879 0000 4285          pea       @m68kde~1_113.L
00002716  52DE      
00002718  4E92      4286          jsr       (A2)
0000271A  584F      4287          addq.w    #4,A7
                    4288   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000271C  4879 0000 4289          pea       @m68kde~1_114.L
00002720  52FE      
00002722  4E92      4290          jsr       (A2)
00002724  584F      4291          addq.w    #4,A7
                    4292   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002726  4879 0000 4293          pea       @m68kde~1_115.L
0000272A  5326      
0000272C  4E92      4294          jsr       (A2)
0000272E  584F      4295          addq.w    #4,A7
                    4296   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002730  4879 0000 4297          pea       @m68kde~1_116.L
00002734  535C      
00002736  4E92      4298          jsr       (A2)
00002738  584F      4299          addq.w    #4,A7
                    4300   ; printf(banner) ;
0000273A  2F02      4301          move.l    D2,-(A7)
0000273C  4E92      4302          jsr       (A2)
0000273E  584F      4303          addq.w    #4,A7
00002740  4CDF 0404 4304          movem.l   (A7)+,D2/A2
00002744  4E75      4305          rts
                    4306   ; }
                    4307   ; void menu(void)
                    4308   ; {
                    4309   _menu:
00002746  48E7 303C 4310          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000274A  45F9 0000 4311          lea       _printf.L,A2
0000274E  3C26      
00002750  47F9 0B00 4312          lea       _Trace.L,A3
00002754  00D8      
00002756  49F9 0B00 4313          lea       _x.L,A4
0000275A  00C8      
0000275C  4BF9 0B00 4314          lea       _SR.L,A5
00002760  012C      
                    4315   ; char c,c1 ;
                    4316   ; while(1)    {
                    4317   menu_1:
                    4318   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002762  4EB8 0BA6 4319          jsr       _FlushKeyboard
                    4320   ; printf("\r\n#") ;
00002766  4879 0000 4321          pea       @m68kde~1_117.L
0000276A  5394      
0000276C  4E92      4322          jsr       (A2)
0000276E  584F      4323          addq.w    #4,A7
                    4324   ; c = toupper(_getch());
00002770  2F00      4325          move.l    D0,-(A7)
00002772  4EB8 0B68 4326          jsr       __getch
00002776  2200      4327          move.l    D0,D1
00002778  201F      4328          move.l    (A7)+,D0
0000277A  2F01      4329          move.l    D1,-(A7)
0000277C  4EB9 0000 4330          jsr       _toupper
00002780  3364      
00002782  584F      4331          addq.w    #4,A7
00002784  1400      4332          move.b    D0,D2
                    4333   ; if( c == (char)('L'))                  // load s record file
00002786  0C02 004C 4334          cmp.b     #76,D2
0000278A  6608      4335          bne.s     menu_4
                    4336   ; Load_SRecordFile() ;
0000278C  4EB8 0E36 4337          jsr       _Load_SRecordFile
00002790  6000 021E 4338          bra       menu_46
                    4339   menu_4:
                    4340   ; else if( c == (char)('D'))             // dump memory
00002794  0C02 0044 4341          cmp.b     #68,D2
00002798  6608      4342          bne.s     menu_6
                    4343   ; DumpMemory() ;
0000279A  4EB8 0CCC 4344          jsr       _DumpMemory
0000279E  6000 0210 4345          bra       menu_46
                    4346   menu_6:
                    4347   ; else if( c == (char)('E'))             // Enter String into memory
000027A2  0C02 0045 4348          cmp.b     #69,D2
000027A6  660A      4349          bne.s     menu_8
                    4350   ; EnterString() ;
000027A8  4EB9 0000 4351          jsr       _EnterString
000027AC  2AF8      
000027AE  6000 0200 4352          bra       menu_46
                    4353   menu_8:
                    4354   ; else if( c == (char)('F'))             // fill memory
000027B2  0C02 0046 4355          cmp.b     #70,D2
000027B6  6608      4356          bne.s     menu_10
                    4357   ; FillMemory() ;
000027B8  4EB8 0DBC 4358          jsr       _FillMemory
000027BC  6000 01F2 4359          bra       menu_46
                    4360   menu_10:
                    4361   ; else if( c == (char)('G'))  {           // go user program
000027C0  0C02 0047 4362          cmp.b     #71,D2
000027C4  6626      4363          bne.s     menu_12
                    4364   ; printf("\r\nProgram Running.....") ;
000027C6  4879 0000 4365          pea       @m68kde~1_118.L
000027CA  5398      
000027CC  4E92      4366          jsr       (A2)
000027CE  584F      4367          addq.w    #4,A7
                    4368   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000027D0  4879 0000 4369          pea       @m68kde~1_119.L
000027D4  53B0      
000027D6  4E92      4370          jsr       (A2)
000027D8  584F      4371          addq.w    #4,A7
                    4372   ; GoFlag = 1 ;
000027DA  23FC 0000 4373          move.l    #1,_GoFlag.L
000027DE  0001 0B00 
000027E2  00DC      
                    4374   ; go() ;
000027E4  4EB8 08B8 4375          jsr       _go
000027E8  6000 01C6 4376          bra       menu_46
                    4377   menu_12:
                    4378   ; }
                    4379   ; else if( c == (char)('M'))           // memory examine and modify
000027EC  0C02 004D 4380          cmp.b     #77,D2
000027F0  6608      4381          bne.s     menu_14
                    4382   ; MemoryChange() ;
000027F2  4EB8 0FC4 4383          jsr       _MemoryChange
000027F6  6000 01B8 4384          bra       menu_46
                    4385   menu_14:
                    4386   ; else if( c == (char)('P'))            // Program Flash Chip
000027FA  0C02 0050 4387          cmp.b     #80,D2
000027FE  6608      4388          bne.s     menu_16
                    4389   ; ProgramFlashChip() ;
00002800  4EB8 1368 4390          jsr       _ProgramFlashChip
00002804  6000 01AA 4391          bra       menu_46
                    4392   menu_16:
                    4393   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002808  0C02 0043 4394          cmp.b     #67,D2
0000280C  6608      4395          bne.s     menu_18
                    4396   ; LoadFromFlashChip();
0000280E  4EB8 138A 4397          jsr       _LoadFromFlashChip
00002812  6000 019C 4398          bra       menu_46
                    4399   menu_18:
                    4400   ; else if( c == (char)('R'))             // dump registers
00002816  0C02 0052 4401          cmp.b     #82,D2
0000281A  6608      4402          bne.s     menu_20
                    4403   ; DumpRegisters() ;
0000281C  4EB8 16AE 4404          jsr       _DumpRegisters
00002820  6000 018E 4405          bra       menu_46
                    4406   menu_20:
                    4407   ; else if( c == (char)('.'))           // change registers
00002824  0C02 002E 4408          cmp.b     #46,D2
00002828  6608      4409          bne.s     menu_22
                    4410   ; ChangeRegisters() ;
0000282A  4EB8 1BA0 4411          jsr       _ChangeRegisters
0000282E  6000 0180 4412          bra       menu_46
                    4413   menu_22:
                    4414   ; else if( c == (char)('B'))              // breakpoint command
00002832  0C02 0042 4415          cmp.b     #66,D2
00002836  6608      4416          bne.s     menu_24
                    4417   ; Breakpoint() ;
00002838  4EB8 2574 4418          jsr       _Breakpoint
0000283C  6000 0172 4419          bra       menu_46
                    4420   menu_24:
                    4421   ; else if( c == (char)('T'))  {          // Test command
00002840  0C02 0054 4422          cmp.b     #84,D2
00002844  6600 0046 4423          bne       menu_26
                    4424   ; c1 = toupper(_getch()) ;
00002848  2F00      4425          move.l    D0,-(A7)
0000284A  4EB8 0B68 4426          jsr       __getch
0000284E  2200      4427          move.l    D0,D1
00002850  201F      4428          move.l    (A7)+,D0
00002852  2F01      4429          move.l    D1,-(A7)
00002854  4EB9 0000 4430          jsr       _toupper
00002858  3364      
0000285A  584F      4431          addq.w    #4,A7
0000285C  1600      4432          move.b    D0,D3
                    4433   ; if(c1 == (char)('M'))                    // memory test
0000285E  0C03 004D 4434          cmp.b     #77,D3
00002862  6608      4435          bne.s     menu_28
                    4436   ; MemoryTest() ;
00002864  4EB9 0000 4437          jsr       _MemoryTest
00002868  2B70      
0000286A  601C      4438          bra.s     menu_33
                    4439   menu_28:
                    4440   ; else if( c1 == (char)('S'))              // Switch Test command
0000286C  0C03 0053 4441          cmp.b     #83,D3
00002870  6606      4442          bne.s     menu_30
                    4443   ; SwitchTest() ;
00002872  4EB8 0AA4 4444          jsr       _SwitchTest
00002876  6010      4445          bra.s     menu_33
                    4446   menu_30:
                    4447   ; else if( c1 == (char)('D'))              // display Test command
00002878  0C03 0044 4448          cmp.b     #68,D3
0000287C  6606      4449          bne.s     menu_32
                    4450   ; TestLEDS() ;
0000287E  4EB8 0A50 4451          jsr       _TestLEDS
00002882  6004      4452          bra.s     menu_33
                    4453   menu_32:
                    4454   ; else
                    4455   ; UnknownCommand() ;
00002884  4EB8 2548 4456          jsr       _UnknownCommand
                    4457   menu_33:
00002888  6000 0126 4458          bra       menu_46
                    4459   menu_26:
                    4460   ; }
                    4461   ; else if( c == (char)(' ')) {             // Next instruction command
0000288C  0C02 0020 4462          cmp.b     #32,D2
00002890  6636      4463          bne.s     menu_34
                    4464   ; DisableBreakPoints() ;
00002892  4EB8 2158 4465          jsr       _DisableBreakPoints
                    4466   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002896  2013      4467          move.l    (A3),D0
00002898  0C80 0000 4468          cmp.l     #1,D0
0000289C  0001      
0000289E  661A      4469          bne.s     menu_36
000028A0  2039 0B00 4470          move.l    _GoFlag.L,D0
000028A4  00DC      
000028A6  0C80 0000 4471          cmp.l     #1,D0
000028AA  0001      
000028AC  660C      4472          bne.s     menu_36
                    4473   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000028AE  13FC 0001 4474          move.b    #1,4194314
000028B2  0040 000A 
                    4475   ; return ;
000028B6  6000 00FC 4476          bra       menu_38
                    4477   menu_36:
                    4478   ; }
                    4479   ; else
                    4480   ; printf("\r\nError: Press 'G' first to start program") ;
000028BA  4879 0000 4481          pea       @m68kde~1_120.L
000028BE  53DE      
000028C0  4E92      4482          jsr       (A2)
000028C2  584F      4483          addq.w    #4,A7
000028C4  6000 00EA 4484          bra       menu_46
                    4485   menu_34:
                    4486   ; }
                    4487   ; else if( c == (char)('S')) {             // single step
000028C8  0C02 0053 4488          cmp.b     #83,D2
000028CC  6600 008C 4489          bne       menu_39
                    4490   ; if(Trace == 0) {
000028D0  2013      4491          move.l    (A3),D0
000028D2  6600 0050 4492          bne       menu_41
                    4493   ; DisableBreakPoints() ;
000028D6  4EB8 2158 4494          jsr       _DisableBreakPoints
                    4495   ; printf("\r\nSingle Step  :[ON]") ;
000028DA  4879 0000 4496          pea       @m68kde~1_121.L
000028DE  5408      
000028E0  4E92      4497          jsr       (A2)
000028E2  584F      4498          addq.w    #4,A7
                    4499   ; printf("\r\nBreak Points :[Disabled]") ;
000028E4  4879 0000 4500          pea       @m68kde~1_54.L
000028E8  4AA6      
000028EA  4E92      4501          jsr       (A2)
000028EC  584F      4502          addq.w    #4,A7
                    4503   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
000028EE  0055 8000 4504          or.w      #32768,(A5)
                    4505   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
000028F2  2F39 0B00 4506          move.l    _PC.L,-(A7)
000028F6  0120      
000028F8  4879 0000 4507          pea       @m68kde~1_122.L
000028FC  541E      
000028FE  4E92      4508          jsr       (A2)
00002900  504F      4509          addq.w    #8,A7
                    4510   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002902  4879 0000 4511          pea       @m68kde~1_123.L
00002906  5452      
00002908  4E92      4512          jsr       (A2)
0000290A  584F      4513          addq.w    #4,A7
                    4514   ; DumpRegisters() ;
0000290C  4EB8 16AE 4515          jsr       _DumpRegisters
                    4516   ; Trace = 1;
00002910  26BC 0000 4517          move.l    #1,(A3)
00002914  0001      
                    4518   ; TraceException = 1;
00002916  13FC 0001 4519          move.b    #1,4194314
0000291A  0040 000A 
                    4520   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000291E  28B8 0074 4521          move.l    116,(A4)
00002922  6032      4522          bra.s     menu_42
                    4523   menu_41:
                    4524   ; }
                    4525   ; else {
                    4526   ; Trace = 0 ;
00002924  4293      4527          clr.l     (A3)
                    4528   ; TraceException = 0 ;
00002926  4239 0040 4529          clr.b     4194314
0000292A  000A      
                    4530   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000292C  28B8 0074 4531          move.l    116,(A4)
                    4532   ; EnableBreakPoints() ;
00002930  4EB8 21AC 4533          jsr       _EnableBreakPoints
                    4534   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002934  0255 7FFF 4535          and.w     #32767,(A5)
                    4536   ; printf("\r\nSingle Step : [OFF]") ;
00002938  4879 0000 4537          pea       @m68kde~1_124.L
0000293C  5476      
0000293E  4E92      4538          jsr       (A2)
00002940  584F      4539          addq.w    #4,A7
                    4540   ; printf("\r\nBreak Points :[Enabled]") ;
00002942  4879 0000 4541          pea       @m68kde~1_125.L
00002946  548C      
00002948  4E92      4542          jsr       (A2)
0000294A  584F      4543          addq.w    #4,A7
                    4544   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
0000294C  4879 0000 4545          pea       @m68kde~1_126.L
00002950  54A6      
00002952  4E92      4546          jsr       (A2)
00002954  584F      4547          addq.w    #4,A7
                    4548   menu_42:
00002956  6000 0058 4549          bra       menu_46
                    4550   menu_39:
                    4551   ; }
                    4552   ; }
                    4553   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
0000295A  0C02 001B 4554          cmp.b     #27,D2
0000295E  6600 0040 4555          bne       menu_43
                    4556   ; Trace = 0;
00002962  4293      4557          clr.l     (A3)
                    4558   ; TraceException = 0;
00002964  4239 0040 4559          clr.b     4194314
00002968  000A      
                    4560   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
0000296A  28B8 0074 4561          move.l    116,(A4)
                    4562   ; EnableBreakPoints() ;
0000296E  4EB8 21AC 4563          jsr       _EnableBreakPoints
                    4564   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002972  0255 7FFF 4565          and.w     #32767,(A5)
                    4566   ; printf("\r\nSingle Step  :[OFF]") ;
00002976  4879 0000 4567          pea       @m68kde~1_127.L
0000297A  54D0      
0000297C  4E92      4568          jsr       (A2)
0000297E  584F      4569          addq.w    #4,A7
                    4570   ; printf("\r\nBreak Points :[Enabled]");
00002980  4879 0000 4571          pea       @m68kde~1_125.L
00002984  548C      
00002986  4E92      4572          jsr       (A2)
00002988  584F      4573          addq.w    #4,A7
                    4574   ; printf("\r\nProgram Running.....") ;
0000298A  4879 0000 4575          pea       @m68kde~1_118.L
0000298E  5398      
00002990  4E92      4576          jsr       (A2)
00002992  584F      4577          addq.w    #4,A7
                    4578   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002994  4879 0000 4579          pea       @m68kde~1_119.L
00002998  53B0      
0000299A  4E92      4580          jsr       (A2)
0000299C  584F      4581          addq.w    #4,A7
                    4582   ; return ;
0000299E  6014      4583          bra.s     menu_38
                    4584   menu_43:
                    4585   ; }
                    4586   ; else if( c == (char)('W'))              // Watchpoint command
000029A0  0C02 0057 4587          cmp.b     #87,D2
000029A4  6606      4588          bne.s     menu_45
                    4589   ; Watchpoint() ;
000029A6  4EB8 25F0 4590          jsr       _Watchpoint
000029AA  6004      4591          bra.s     menu_46
                    4592   menu_45:
                    4593   ; else
                    4594   ; UnknownCommand() ;
000029AC  4EB8 2548 4595          jsr       _UnknownCommand
                    4596   menu_46:
000029B0  6000 FDB0 4597          bra       menu_1
                    4598   menu_38:
000029B4  4CDF 3C0C 4599          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000029B8  4E75      4600          rts
                    4601   ; }
                    4602   ; }
                    4603   ; void PrintErrorMessageandAbort(char *string) {
                    4604   _PrintErrorMessageandAbort:
000029BA  4E56 0000 4605          link      A6,#0
                    4606   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000029BE  4879 0000 4607          pea       @m68kde~1_128.L
000029C2  54E6      
000029C4  4EB9 0000 4608          jsr       _printf
000029C8  3C26      
000029CA  584F      4609          addq.w    #4,A7
                    4610   ; printf("%s\r\n", string) ;
000029CC  2F2E 0008 4611          move.l    8(A6),-(A7)
000029D0  4879 0000 4612          pea       @m68kde~1_129.L
000029D4  5502      
000029D6  4EB9 0000 4613          jsr       _printf
000029DA  3C26      
000029DC  504F      4614          addq.w    #8,A7
                    4615   ; menu() ;
000029DE  4EB8 2746 4616          jsr       _menu
000029E2  4E5E      4617          unlk      A6
000029E4  4E75      4618          rts
                    4619   ; }
                    4620   ; void IRQMessage(int level) {
                    4621   _IRQMessage:
000029E6  4E56 0000 4622          link      A6,#0
                    4623   ; printf("\r\n\r\nProgram ABORT !!!!!");
000029EA  4879 0000 4624          pea       @m68kde~1_130.L
000029EE  5508      
000029F0  4EB9 0000 4625          jsr       _printf
000029F4  3C26      
000029F6  584F      4626          addq.w    #4,A7
                    4627   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
000029F8  2F2E 0008 4628          move.l    8(A6),-(A7)
000029FC  4879 0000 4629          pea       @m68kde~1_131.L
00002A00  5520      
00002A02  4EB9 0000 4630          jsr       _printf
00002A06  3C26      
00002A08  504F      4631          addq.w    #8,A7
                    4632   ; menu() ;
00002A0A  4EB8 2746 4633          jsr       _menu
00002A0E  4E5E      4634          unlk      A6
00002A10  4E75      4635          rts
                    4636   ; }
                    4637   ; void UnhandledIRQ1(void) {
                    4638   _UnhandledIRQ1:
                    4639   ; IRQMessage(1);
00002A12  4878 0001 4640          pea       1
00002A16  4EB8 29E6 4641          jsr       _IRQMessage
00002A1A  584F      4642          addq.w    #4,A7
00002A1C  4E75      4643          rts
                    4644   ; }
                    4645   ; void UnhandledIRQ2(void) {
                    4646   _UnhandledIRQ2:
                    4647   ; IRQMessage(2);
00002A1E  4878 0002 4648          pea       2
00002A22  4EB8 29E6 4649          jsr       _IRQMessage
00002A26  584F      4650          addq.w    #4,A7
00002A28  4E75      4651          rts
                    4652   ; }
                    4653   ; void UnhandledIRQ3(void){
                    4654   _UnhandledIRQ3:
                    4655   ; IRQMessage(3);
00002A2A  4878 0003 4656          pea       3
00002A2E  4EB8 29E6 4657          jsr       _IRQMessage
00002A32  584F      4658          addq.w    #4,A7
00002A34  4E75      4659          rts
                    4660   ; }
                    4661   ; void UnhandledIRQ4(void) {
                    4662   _UnhandledIRQ4:
                    4663   ; IRQMessage(4);
00002A36  4878 0004 4664          pea       4
00002A3A  4EB8 29E6 4665          jsr       _IRQMessage
00002A3E  584F      4666          addq.w    #4,A7
00002A40  4E75      4667          rts
                    4668   ; }
                    4669   ; void UnhandledIRQ5(void) {
                    4670   _UnhandledIRQ5:
                    4671   ; IRQMessage(5);
00002A42  4878 0005 4672          pea       5
00002A46  4EB8 29E6 4673          jsr       _IRQMessage
00002A4A  584F      4674          addq.w    #4,A7
00002A4C  4E75      4675          rts
                    4676   ; }
                    4677   ; void UnhandledIRQ6(void) {
                    4678   _UnhandledIRQ6:
                    4679   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002A4E  4879 0000 4680          pea       @m68kde~1_132.L
00002A52  5544      
00002A54  4EB8 29BA 4681          jsr       _PrintErrorMessageandAbort
00002A58  584F      4682          addq.w    #4,A7
                    4683   ; menu() ;
00002A5A  4EB8 2746 4684          jsr       _menu
00002A5E  4E75      4685          rts
                    4686   ; }
                    4687   ; void UnhandledIRQ7(void) {
                    4688   _UnhandledIRQ7:
                    4689   ; IRQMessage(7);
00002A60  4878 0007 4690          pea       7
00002A64  4EB8 29E6 4691          jsr       _IRQMessage
00002A68  584F      4692          addq.w    #4,A7
00002A6A  4E75      4693          rts
                    4694   ; }
                    4695   ; void UnhandledTrap(void) {
                    4696   _UnhandledTrap:
                    4697   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002A6C  4879 0000 4698          pea       @m68kde~1_133.L
00002A70  5584      
00002A72  4EB8 29BA 4699          jsr       _PrintErrorMessageandAbort
00002A76  584F      4700          addq.w    #4,A7
00002A78  4E75      4701          rts
                    4702   ; }
                    4703   ; void BusError() {
                    4704   _BusError:
                    4705   ; PrintErrorMessageandAbort("BUS Error!") ;
00002A7A  4879 0000 4706          pea       @m68kde~1_134.L
00002A7E  559A      
00002A80  4EB8 29BA 4707          jsr       _PrintErrorMessageandAbort
00002A84  584F      4708          addq.w    #4,A7
00002A86  4E75      4709          rts
                    4710   ; }
                    4711   ; void AddressError() {
                    4712   _AddressError:
                    4713   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002A88  4879 0000 4714          pea       @m68kde~1_135.L
00002A8C  55A6      
00002A8E  4EB8 29BA 4715          jsr       _PrintErrorMessageandAbort
00002A92  584F      4716          addq.w    #4,A7
00002A94  4E75      4717          rts
                    4718   ; }
                    4719   ; void IllegalInstruction() {
                    4720   _IllegalInstruction:
                    4721   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002A96  4879 0000 4722          pea       @m68kde~1_136.L
00002A9A  55B6      
00002A9C  4EB8 29BA 4723          jsr       _PrintErrorMessageandAbort
00002AA0  584F      4724          addq.w    #4,A7
00002AA2  4E75      4725          rts
                    4726   ; }
                    4727   ; void Dividebyzero() {
                    4728   _Dividebyzero:
                    4729   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002AA4  4879 0000 4730          pea       @m68kde~1_137.L
00002AA8  55CA      
00002AAA  4EB8 29BA 4731          jsr       _PrintErrorMessageandAbort
00002AAE  584F      4732          addq.w    #4,A7
00002AB0  4E75      4733          rts
                    4734   ; }
                    4735   ; void Check() {
                    4736   _Check:
                    4737   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002AB2  4879 0000 4738          pea       @m68kde~1_138.L
00002AB6  55DA      
00002AB8  4EB8 29BA 4739          jsr       _PrintErrorMessageandAbort
00002ABC  584F      4740          addq.w    #4,A7
00002ABE  4E75      4741          rts
                    4742   ; }
                    4743   ; void Trapv() {
                    4744   _Trapv:
                    4745   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002AC0  4879 0000 4746          pea       @m68kde~1_139.L
00002AC4  55EC      
00002AC6  4EB8 29BA 4747          jsr       _PrintErrorMessageandAbort
00002ACA  584F      4748          addq.w    #4,A7
00002ACC  4E75      4749          rts
                    4750   ; }
                    4751   ; void PrivError() {
                    4752   _PrivError:
                    4753   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002ACE  4879 0000 4754          pea       @m68kde~1_140.L
00002AD2  55FE      
00002AD4  4EB8 29BA 4755          jsr       _PrintErrorMessageandAbort
00002AD8  584F      4756          addq.w    #4,A7
00002ADA  4E75      4757          rts
                    4758   ; }
                    4759   ; void UnitIRQ() {
                    4760   _UnitIRQ:
                    4761   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002ADC  4879 0000 4762          pea       @m68kde~1_141.L
00002AE0  5612      
00002AE2  4EB8 29BA 4763          jsr       _PrintErrorMessageandAbort
00002AE6  584F      4764          addq.w    #4,A7
00002AE8  4E75      4765          rts
                    4766   ; }
                    4767   ; void Spurious() {
                    4768   _Spurious:
                    4769   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002AEA  4879 0000 4770          pea       @m68kde~1_142.L
00002AEE  5624      
00002AF0  4EB8 29BA 4771          jsr       _PrintErrorMessageandAbort
00002AF4  584F      4772          addq.w    #4,A7
00002AF6  4E75      4773          rts
                    4774   ; }
                    4775   ; void EnterString(void)
                    4776   ; {
                    4777   _EnterString:
00002AF8  4E56 FFFC 4778          link      A6,#-4
00002AFC  2F02      4779          move.l    D2,-(A7)
                    4780   ; unsigned char *Start;
                    4781   ; unsigned char c;
                    4782   ; printf("\r\nStart Address in Memory: ") ;
00002AFE  4879 0000 4783          pea       @m68kde~1_143.L
00002B02  5632      
00002B04  4EB9 0000 4784          jsr       _printf
00002B08  3C26      
00002B0A  584F      4785          addq.w    #4,A7
                    4786   ; Start = Get8HexDigits(0) ;
00002B0C  42A7      4787          clr.l     -(A7)
00002B0E  4EB8 0CA4 4788          jsr       _Get8HexDigits
00002B12  584F      4789          addq.w    #4,A7
00002B14  2400      4790          move.l    D0,D2
                    4791   ; printf("\r\nEnter String (ESC to end) :") ;
00002B16  4879 0000 4792          pea       @m68kde~1_144.L
00002B1A  564E      
00002B1C  4EB9 0000 4793          jsr       _printf
00002B20  3C26      
00002B22  584F      4794          addq.w    #4,A7
                    4795   ; while((c = getchar()) != 0x1b)
                    4796   EnterString_1:
00002B24  4EB9 0000 4797          jsr       _getch
00002B28  329A      
00002B2A  1D40 FFFF 4798          move.b    D0,-1(A6)
00002B2E  0C00 001B 4799          cmp.b     #27,D0
00002B32  670A      4800          beq.s     EnterString_3
                    4801   ; *Start++ = c ;
00002B34  2042      4802          move.l    D2,A0
00002B36  5282      4803          addq.l    #1,D2
00002B38  10AE FFFF 4804          move.b    -1(A6),(A0)
00002B3C  60E6      4805          bra       EnterString_1
                    4806   EnterString_3:
                    4807   ; *Start = 0x00;  // terminate with a null
00002B3E  2042      4808          move.l    D2,A0
00002B40  4210      4809          clr.b     (A0)
00002B42  241F      4810          move.l    (A7)+,D2
00002B44  4E5E      4811          unlk      A6
00002B46  4E75      4812          rts
                    4813   ; }
                    4814   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4815   ; void clearInputBuffer() {
                    4816   _clearInputBuffer:
00002B48  4E56 FFFC 4817          link      A6,#-4
                    4818   ; int c;
                    4819   ; while ((c = getchar()) != '\n' && c != EOF);
                    4820   clearInputBuffer_1:
00002B4C  4EB9 0000 4821          jsr       _getch
00002B50  329A      
00002B52  2D40 FFFC 4822          move.l    D0,-4(A6)
00002B56  0C80 0000 4823          cmp.l     #10,D0
00002B5A  000A      
00002B5C  670E      4824          beq.s     clearInputBuffer_3
00002B5E  202E FFFC 4825          move.l    -4(A6),D0
00002B62  0C80 FFFF 4826          cmp.l     #-1,D0
00002B66  FFFF      
00002B68  6702      4827          beq.s     clearInputBuffer_3
00002B6A  60E0      4828          bra       clearInputBuffer_1
                    4829   clearInputBuffer_3:
00002B6C  4E5E      4830          unlk      A6
00002B6E  4E75      4831          rts
                    4832   ; }
                    4833   ; void MemoryTest(void)
                    4834   ; {
                    4835   _MemoryTest:
00002B70  4E56 FF40 4836          link      A6,#-192
00002B74  48E7 3F3C 4837          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002B78  45F9 0000 4838          lea       _printf.L,A2
00002B7C  3C26      
00002B7E  4BF8 0B68 4839          lea       __getch.L,A5
                    4840   ; unsigned int *RamPtr, counter1=1 ;
00002B82  2D7C 0000 4841          move.l    #1,-188(A6)
00002B86  0001 FF44 
                    4842   ; register unsigned int i ;
                    4843   ; unsigned int Start, End ;
                    4844   ; char c, text[150];
                    4845   ; unsigned int* addressPointer;
                    4846   ; unsigned int startAddress = NULL;
00002B8A  42AE FFF0 4847          clr.l     -16(A6)
                    4848   ; unsigned int endAddress = NULL;
00002B8E  42AE FFF4 4849          clr.l     -12(A6)
                    4850   ; unsigned int byteLength;
                    4851   ; unsigned int dataSize = 0;
00002B92  4285      4852          clr.l     D5
                    4853   ; unsigned int dataPattern = 0;
00002B94  4283      4854          clr.l     D3
                    4855   ; unsigned int currAddress;
                    4856   ; unsigned int addrCount;
                    4857   ; unsigned int intBuffer = NULL;
00002B96  7E00      4858          moveq     #0,D7
                    4859   ; unsigned char *startAddressPtr = NULL;
00002B98  4282      4860          clr.l     D2
                    4861   ; unsigned char *endAddressPtr = NULL;
00002B9A  4286      4862          clr.l     D6
                    4863   ; unsigned short int *wordAddressPtr = NULL;
00002B9C  387C 0000 4864          move.w    #0,A4
                    4865   ; unsigned int *longAddressPtr = NULL;
00002BA0  367C 0000 4866          move.w    #0,A3
                    4867   ; // IMPROVEMENTS TO BE MADE:
                    4868   ; // Suppossed to be able to write an odd address as a byte
                    4869   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    4870   ; // printf("\r\nStart Address: ") ;
                    4871   ; // Start = Get8HexDigits(0) ;
                    4872   ; // printf("\r\nEnd Address: ") ;
                    4873   ; // End = Get8HexDigits(0) ;
                    4874   ; // TODO
                    4875   ; scanflush();
00002BA4  4EB9 0000 4876          jsr       _scanflush
00002BA8  361C      
                    4877   ; memset(text, 0, sizeof(text));  // fills with zeros
00002BAA  4878 0096 4878          pea       150
00002BAE  42A7      4879          clr.l     -(A7)
00002BB0  486E FF56 4880          pea       -170(A6)
00002BB4  4EB9 0000 4881          jsr       _memset
00002BB8  3336      
00002BBA  DEFC 000C 4882          add.w     #12,A7
                    4883   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
00002BBE  4879 0000 4884          pea       @m68kde~1_145.L
00002BC2  566C      
00002BC4  4E92      4885          jsr       (A2)
00002BC6  584F      4886          addq.w    #4,A7
                    4887   ; dataSize = _getch() - 48;
00002BC8  4E95      4888          jsr       (A5)
00002BCA  0480 0000 4889          sub.l     #48,D0
00002BCE  0030      
00002BD0  2A00      4890          move.l    D0,D5
                    4891   ; printf("\n");
00002BD2  4879 0000 4892          pea       @m68kde~1_28.L
00002BD6  48A4      
00002BD8  4E92      4893          jsr       (A2)
00002BDA  584F      4894          addq.w    #4,A7
                    4895   ; if (dataSize == 0) {
00002BDC  4A85      4896          tst.l     D5
00002BDE  6600 0058 4897          bne       MemoryTest_1
                    4898   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
00002BE2  4879 0000 4899          pea       @m68kde~1_146.L
00002BE6  56C2      
00002BE8  4E92      4900          jsr       (A2)
00002BEA  584F      4901          addq.w    #4,A7
                    4902   ; intBuffer = _getch() - 48;
00002BEC  4E95      4903          jsr       (A5)
00002BEE  0480 0000 4904          sub.l     #48,D0
00002BF2  0030      
00002BF4  2E00      4905          move.l    D0,D7
                    4906   ; // scanf("%d", &intBuffer);
                    4907   ; switch (intBuffer) {
00002BF6  2007      4908          move.l    D7,D0
00002BF8  0C80 0000 4909          cmp.l     #4,D0
00002BFC  0004      
00002BFE  642C      4910          bhs.s     MemoryTest_4
00002C00  E380      4911          asl.l     #1,D0
00002C02  303B 0806 4912          move.w    MemoryTest_5(PC,D0.L),D0
00002C06  4EFB 0002 4913          jmp       MemoryTest_5(PC,D0.W)
                    4914   MemoryTest_5:
00002C0A  0008      4915          dc.w      MemoryTest_6-MemoryTest_5
00002C0C  000C      4916          dc.w      MemoryTest_7-MemoryTest_5
00002C0E  0014      4917          dc.w      MemoryTest_8-MemoryTest_5
00002C10  001C      4918          dc.w      MemoryTest_9-MemoryTest_5
                    4919   MemoryTest_6:
                    4920   ; case(0):
                    4921   ; dataPattern = 0x00; break;
00002C12  4283      4922          clr.l     D3
00002C14  6016      4923          bra.s     MemoryTest_4
                    4924   MemoryTest_7:
                    4925   ; case(1):
                    4926   ; dataPattern = 0xB2; break;
00002C16  263C 0000 4927          move.l    #178,D3
00002C1A  00B2      
00002C1C  600E      4928          bra.s     MemoryTest_4
                    4929   MemoryTest_8:
                    4930   ; case(2):
                    4931   ; dataPattern = 0xC3; break;
00002C1E  263C 0000 4932          move.l    #195,D3
00002C22  00C3      
00002C24  6006      4933          bra.s     MemoryTest_4
                    4934   MemoryTest_9:
                    4935   ; case(3):
                    4936   ; dataPattern = 0xD4; break;
00002C26  263C 0000 4937          move.l    #212,D3
00002C2A  00D4      
                    4938   MemoryTest_4:
                    4939   ; }
                    4940   ; dataPattern &= 0xFF;
00002C2C  C6BC 0000 4941          and.l     #255,D3
00002C30  00FF      
                    4942   ; byteLength = 1;
00002C32  7801      4943          moveq     #1,D4
00002C34  6000 00AE 4944          bra       MemoryTest_11
                    4945   MemoryTest_1:
                    4946   ; } else if (dataSize == 1) {
00002C38  0C85 0000 4947          cmp.l     #1,D5
00002C3C  0001      
00002C3E  6600 0058 4948          bne       MemoryTest_10
                    4949   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
00002C42  4879 0000 4950          pea       @m68kde~1_147.L
00002C46  5724      
00002C48  4E92      4951          jsr       (A2)
00002C4A  584F      4952          addq.w    #4,A7
                    4953   ; intBuffer = _getch() - 48;
00002C4C  4E95      4954          jsr       (A5)
00002C4E  0480 0000 4955          sub.l     #48,D0
00002C52  0030      
00002C54  2E00      4956          move.l    D0,D7
                    4957   ; switch (intBuffer) {
00002C56  2007      4958          move.l    D7,D0
00002C58  0C80 0000 4959          cmp.l     #4,D0
00002C5C  0004      
00002C5E  642C      4960          bhs.s     MemoryTest_13
00002C60  E380      4961          asl.l     #1,D0
00002C62  303B 0806 4962          move.w    MemoryTest_14(PC,D0.L),D0
00002C66  4EFB 0002 4963          jmp       MemoryTest_14(PC,D0.W)
                    4964   MemoryTest_14:
00002C6A  0008      4965          dc.w      MemoryTest_15-MemoryTest_14
00002C6C  000C      4966          dc.w      MemoryTest_16-MemoryTest_14
00002C6E  0014      4967          dc.w      MemoryTest_17-MemoryTest_14
00002C70  001C      4968          dc.w      MemoryTest_18-MemoryTest_14
                    4969   MemoryTest_15:
                    4970   ; case(0):
                    4971   ; dataPattern = 0x0000; break;
00002C72  4283      4972          clr.l     D3
00002C74  6016      4973          bra.s     MemoryTest_13
                    4974   MemoryTest_16:
                    4975   ; case(1):
                    4976   ; dataPattern = 0x1234; break;
00002C76  263C 0000 4977          move.l    #4660,D3
00002C7A  1234      
00002C7C  600E      4978          bra.s     MemoryTest_13
                    4979   MemoryTest_17:
                    4980   ; case(2):
                    4981   ; dataPattern = 0xA1B2; break;
00002C7E  263C 0000 4982          move.l    #41394,D3
00002C82  A1B2      
00002C84  6006      4983          bra.s     MemoryTest_13
                    4984   MemoryTest_18:
                    4985   ; case(3):
                    4986   ; dataPattern = 0xC3D4; break;
00002C86  263C 0000 4987          move.l    #50132,D3
00002C8A  C3D4      
                    4988   MemoryTest_13:
                    4989   ; }
                    4990   ; dataPattern &= 0xFFFF;
00002C8C  C6BC 0000 4991          and.l     #65535,D3
00002C90  FFFF      
                    4992   ; byteLength = 2;
00002C92  7802      4993          moveq     #2,D4
00002C94  6000 004E 4994          bra       MemoryTest_11
                    4995   MemoryTest_10:
                    4996   ; } else {
                    4997   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
00002C98  4879 0000 4998          pea       @m68kde~1_148.L
00002C9C  578E      
00002C9E  4E92      4999          jsr       (A2)
00002CA0  584F      5000          addq.w    #4,A7
                    5001   ; intBuffer = _getch() - 48;
00002CA2  4E95      5002          jsr       (A5)
00002CA4  0480 0000 5003          sub.l     #48,D0
00002CA8  0030      
00002CAA  2E00      5004          move.l    D0,D7
                    5005   ; switch (intBuffer) {
00002CAC  2007      5006          move.l    D7,D0
00002CAE  0C80 0000 5007          cmp.l     #4,D0
00002CB2  0004      
00002CB4  642C      5008          bhs.s     MemoryTest_20
00002CB6  E380      5009          asl.l     #1,D0
00002CB8  303B 0806 5010          move.w    MemoryTest_21(PC,D0.L),D0
00002CBC  4EFB 0002 5011          jmp       MemoryTest_21(PC,D0.W)
                    5012   MemoryTest_21:
00002CC0  0008      5013          dc.w      MemoryTest_22-MemoryTest_21
00002CC2  000C      5014          dc.w      MemoryTest_23-MemoryTest_21
00002CC4  0014      5015          dc.w      MemoryTest_24-MemoryTest_21
00002CC6  001C      5016          dc.w      MemoryTest_25-MemoryTest_21
                    5017   MemoryTest_22:
                    5018   ; case(0):
                    5019   ; dataPattern = 0x00000000; break;
00002CC8  4283      5020          clr.l     D3
00002CCA  6016      5021          bra.s     MemoryTest_20
                    5022   MemoryTest_23:
                    5023   ; case(1):
                    5024   ; dataPattern = 0xAABBCCDD; break;
00002CCC  263C AABB 5025          move.l    #-1430532899,D3
00002CD0  CCDD      
00002CD2  600E      5026          bra.s     MemoryTest_20
                    5027   MemoryTest_24:
                    5028   ; case(2):
                    5029   ; dataPattern = 0x11223344; break;
00002CD4  263C 1122 5030          move.l    #287454020,D3
00002CD8  3344      
00002CDA  6006      5031          bra.s     MemoryTest_20
                    5032   MemoryTest_25:
                    5033   ; case(3):
                    5034   ; dataPattern = 0x76543210; break;
00002CDC  263C 7654 5035          move.l    #1985229328,D3
00002CE0  3210      
                    5036   MemoryTest_20:
                    5037   ; }
                    5038   ; byteLength = 4;
00002CE2  7804      5039          moveq     #4,D4
                    5040   MemoryTest_11:
                    5041   ; }
                    5042   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    5043   ; while (startAddressPtr == NULL || 
                    5044   MemoryTest_26:
00002CE4  4A82      5045          tst.l     D2
00002CE6  6732      5046          beq.s     MemoryTest_29
00002CE8  0C84 0000 5047          cmp.l     #1,D4
00002CEC  0001      
00002CEE  6316      5048          bls.s     MemoryTest_30
00002CF0  2F02      5049          move.l    D2,-(A7)
00002CF2  4878 0002 5050          pea       2
00002CF6  4EB9 0000 5051          jsr       ULDIV
00002CFA  318C      
00002CFC  202F 0004 5052          move.l    4(A7),D0
00002D00  504F      5053          addq.w    #8,A7
00002D02  4A80      5054          tst.l     D0
00002D04  6614      5055          bne.s     MemoryTest_29
                    5056   MemoryTest_30:
00002D06  0C82 0802 5057          cmp.l     #134348800,D2
00002D0A  0000      
00002D0C  650C      5058          blo.s     MemoryTest_29
00002D0E  203C 0B00 5059          move.l    #184549376,D0
00002D12  0000      
00002D14  9084      5060          sub.l     D4,D0
00002D16  B480      5061          cmp.l     D0,D2
00002D18  6316      5062          bls.s     MemoryTest_28
                    5063   MemoryTest_29:
                    5064   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    5065   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    5066   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    5067   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
00002D1A  4879 0000 5068          pea       @m68kde~1_149.L
00002D1E  580C      
00002D20  4E92      5069          jsr       (A2)
00002D22  584F      5070          addq.w    #4,A7
                    5071   ; startAddressPtr =  Get8HexDigits(0);
00002D24  42A7      5072          clr.l     -(A7)
00002D26  4EB8 0CA4 5073          jsr       _Get8HexDigits
00002D2A  584F      5074          addq.w    #4,A7
00002D2C  2400      5075          move.l    D0,D2
00002D2E  60B4      5076          bra       MemoryTest_26
                    5077   MemoryTest_28:
                    5078   ; }
                    5079   ; while (endAddressPtr == NULL || 
                    5080   MemoryTest_31:
00002D30  4A86      5081          tst.l     D6
00002D32  670A      5082          beq.s     MemoryTest_34
00002D34  202E FFF0 5083          move.l    -16(A6),D0
00002D38  D084      5084          add.l     D4,D0
00002D3A  BC80      5085          cmp.l     D0,D6
00002D3C  6416      5086          bhs.s     MemoryTest_33
                    5087   MemoryTest_34:
                    5088   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    5089   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00002D3E  4879 0000 5090          pea       @m68kde~1_150.L
00002D42  5844      
00002D44  4E92      5091          jsr       (A2)
00002D46  584F      5092          addq.w    #4,A7
                    5093   ; endAddressPtr =  Get8HexDigits(0);
00002D48  42A7      5094          clr.l     -(A7)
00002D4A  4EB8 0CA4 5095          jsr       _Get8HexDigits
00002D4E  584F      5096          addq.w    #4,A7
00002D50  2C00      5097          move.l    D0,D6
00002D52  60DC      5098          bra       MemoryTest_31
                    5099   MemoryTest_33:
                    5100   ; }
                    5101   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00002D54  2F02      5102          move.l    D2,-(A7)
00002D56  4879 0000 5103          pea       @m68kde~1_151.L
00002D5A  587A      
00002D5C  4E92      5104          jsr       (A2)
00002D5E  504F      5105          addq.w    #8,A7
                    5106   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
00002D60  2F06      5107          move.l    D6,-(A7)
00002D62  4879 0000 5108          pea       @m68kde~1_152.L
00002D66  5892      
00002D68  4E92      5109          jsr       (A2)
00002D6A  504F      5110          addq.w    #8,A7
                    5111   ; addrCount = 0;
00002D6C  42AE FFFC 5112          clr.l     -4(A6)
                    5113   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    5114   MemoryTest_35:
00002D70  B486      5115          cmp.l     D6,D2
00002D72  6400 0132 5116          bhs       MemoryTest_37
00002D76  2006      5117          move.l    D6,D0
00002D78  9082      5118          sub.l     D2,D0
00002D7A  5280      5119          addq.l    #1,D0
00002D7C  B084      5120          cmp.l     D4,D0
00002D7E  6500 0126 5121          blo       MemoryTest_37
                    5122   ; // If address goes beyond 0x0B00_0000 then break
                    5123   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
00002D82  203C 0B00 5124          move.l    #184549376,D0
00002D86  0000      
00002D88  9084      5125          sub.l     D4,D0
00002D8A  B480      5126          cmp.l     D0,D2
00002D8C  6310      5127          bls.s     MemoryTest_38
                    5128   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
00002D8E  2F02      5129          move.l    D2,-(A7)
00002D90  4879 0000 5130          pea       @m68kde~1_153.L
00002D94  58A8      
00002D96  4E92      5131          jsr       (A2)
00002D98  504F      5132          addq.w    #8,A7
                    5133   ; break;
00002D9A  6000 010A 5134          bra       MemoryTest_37
                    5135   MemoryTest_38:
                    5136   ; }
                    5137   ; longAddressPtr = startAddressPtr;
00002D9E  2642      5138          move.l    D2,A3
                    5139   ; wordAddressPtr = startAddressPtr;
00002DA0  2842      5140          move.l    D2,A4
                    5141   ; if (dataSize == 0) {
00002DA2  4A85      5142          tst.l     D5
00002DA4  6600 0034 5143          bne       MemoryTest_40
                    5144   ; *startAddressPtr = dataPattern;
00002DA8  2042      5145          move.l    D2,A0
00002DAA  1083      5146          move.b    D3,(A0)
                    5147   ; if ((*startAddressPtr) != dataPattern) {
00002DAC  2042      5148          move.l    D2,A0
00002DAE  1010      5149          move.b    (A0),D0
00002DB0  C0BC 0000 5150          and.l     #255,D0
00002DB4  00FF      
00002DB6  B083      5151          cmp.l     D3,D0
00002DB8  671C      5152          beq.s     MemoryTest_42
                    5153   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002DBA  2F03      5154          move.l    D3,-(A7)
00002DBC  2042      5155          move.l    D2,A0
00002DBE  1210      5156          move.b    (A0),D1
00002DC0  C2BC 0000 5157          and.l     #255,D1
00002DC4  00FF      
00002DC6  2F01      5158          move.l    D1,-(A7)
00002DC8  2F02      5159          move.l    D2,-(A7)
00002DCA  4879 0000 5160          pea       @m68kde~1_154.L
00002DCE  58DA      
00002DD0  4E92      5161          jsr       (A2)
00002DD2  DEFC 0010 5162          add.w     #16,A7
                    5163   MemoryTest_42:
00002DD6  6000 0058 5164          bra       MemoryTest_48
                    5165   MemoryTest_40:
                    5166   ; }
                    5167   ; } else if (dataSize == 1) {
00002DDA  0C85 0000 5168          cmp.l     #1,D5
00002DDE  0001      
00002DE0  662C      5169          bne.s     MemoryTest_44
                    5170   ; *wordAddressPtr = dataPattern;
00002DE2  3883      5171          move.w    D3,(A4)
                    5172   ; if ((*wordAddressPtr) != dataPattern) {
00002DE4  3014      5173          move.w    (A4),D0
00002DE6  C0BC 0000 5174          and.l     #65535,D0
00002DEA  FFFF      
00002DEC  B083      5175          cmp.l     D3,D0
00002DEE  671C      5176          beq.s     MemoryTest_46
                    5177   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002DF0  2F03      5178          move.l    D3,-(A7)
00002DF2  2042      5179          move.l    D2,A0
00002DF4  1210      5180          move.b    (A0),D1
00002DF6  C2BC 0000 5181          and.l     #255,D1
00002DFA  00FF      
00002DFC  2F01      5182          move.l    D1,-(A7)
00002DFE  2F02      5183          move.l    D2,-(A7)
00002E00  4879 0000 5184          pea       @m68kde~1_154.L
00002E04  58DA      
00002E06  4E92      5185          jsr       (A2)
00002E08  DEFC 0010 5186          add.w     #16,A7
                    5187   MemoryTest_46:
00002E0C  6022      5188          bra.s     MemoryTest_48
                    5189   MemoryTest_44:
                    5190   ; }
                    5191   ; } else {
                    5192   ; *longAddressPtr = dataPattern;
00002E0E  2683      5193          move.l    D3,(A3)
                    5194   ; if ((*longAddressPtr) != dataPattern) {
00002E10  B693      5195          cmp.l     (A3),D3
00002E12  671C      5196          beq.s     MemoryTest_48
                    5197   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002E14  2F03      5198          move.l    D3,-(A7)
00002E16  2042      5199          move.l    D2,A0
00002E18  1210      5200          move.b    (A0),D1
00002E1A  C2BC 0000 5201          and.l     #255,D1
00002E1E  00FF      
00002E20  2F01      5202          move.l    D1,-(A7)
00002E22  2F02      5203          move.l    D2,-(A7)
00002E24  4879 0000 5204          pea       @m68kde~1_154.L
00002E28  58DA      
00002E2A  4E92      5205          jsr       (A2)
00002E2C  DEFC 0010 5206          add.w     #16,A7
                    5207   MemoryTest_48:
                    5208   ; }
                    5209   ; }
                    5210   ; // if ((*startAddressPtr) != dataPattern) {
                    5211   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    5212   ; // }
                    5213   ; addrCount++;
00002E30  52AE FFFC 5214          addq.l    #1,-4(A6)
                    5215   ; if (addrCount % 128 == 0) {
00002E34  2F2E FFFC 5216          move.l    -4(A6),-(A7)
00002E38  4878 0080 5217          pea       128
00002E3C  4EB9 0000 5218          jsr       ULDIV
00002E40  318C      
00002E42  202F 0004 5219          move.l    4(A7),D0
00002E46  504F      5220          addq.w    #8,A7
00002E48  4A80      5221          tst.l     D0
00002E4A  6600 0054 5222          bne       MemoryTest_55
                    5223   ; if (dataSize == 0) {
00002E4E  4A85      5224          tst.l     D5
00002E50  661C      5225          bne.s     MemoryTest_52
                    5226   ; printf("Address: 0x%x Value: 0x%02X\n",
00002E52  2042      5227          move.l    D2,A0
00002E54  1210      5228          move.b    (A0),D1
00002E56  C2BC 0000 5229          and.l     #255,D1
00002E5A  00FF      
00002E5C  2F01      5230          move.l    D1,-(A7)
00002E5E  2F02      5231          move.l    D2,-(A7)
00002E60  4879 0000 5232          pea       @m68kde~1_155.L
00002E64  5920      
00002E66  4E92      5233          jsr       (A2)
00002E68  DEFC 000C 5234          add.w     #12,A7
00002E6C  6032      5235          bra.s     MemoryTest_55
                    5236   MemoryTest_52:
                    5237   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    5238   ; }
                    5239   ; else if (dataSize == 1) {
00002E6E  0C85 0000 5240          cmp.l     #1,D5
00002E72  0001      
00002E74  661A      5241          bne.s     MemoryTest_54
                    5242   ; printf("Address: 0x%x Value: 0x%04X\n",
00002E76  3214      5243          move.w    (A4),D1
00002E78  C2BC 0000 5244          and.l     #65535,D1
00002E7C  FFFF      
00002E7E  2F01      5245          move.l    D1,-(A7)
00002E80  2F0C      5246          move.l    A4,-(A7)
00002E82  4879 0000 5247          pea       @m68kde~1_156.L
00002E86  593E      
00002E88  4E92      5248          jsr       (A2)
00002E8A  DEFC 000C 5249          add.w     #12,A7
00002E8E  6010      5250          bra.s     MemoryTest_55
                    5251   MemoryTest_54:
                    5252   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    5253   ; }
                    5254   ; else {
                    5255   ; printf("Address: 0x%x Value: 0x%08X\n",
00002E90  2F13      5256          move.l    (A3),-(A7)
00002E92  2F0B      5257          move.l    A3,-(A7)
00002E94  4879 0000 5258          pea       @m68kde~1_157.L
00002E98  595C      
00002E9A  4E92      5259          jsr       (A2)
00002E9C  DEFC 000C 5260          add.w     #12,A7
                    5261   MemoryTest_55:
                    5262   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    5263   ; }
                    5264   ; }
                    5265   ; startAddressPtr += byteLength;
00002EA0  D484      5266          add.l     D4,D2
00002EA2  6000 FECC 5267          bra       MemoryTest_35
                    5268   MemoryTest_37:
00002EA6  4CDF 3CFC 5269          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002EAA  4E5E      5270          unlk      A6
00002EAC  4E75      5271          rts
                    5272   ; }
                    5273   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    5274   ; }
                    5275   ; void main(void)
                    5276   ; {
                    5277   _main:
00002EAE  4E56 FFF4 5278          link      A6,#-12
00002EB2  48E7 3030 5279          movem.l   D2/D3/A2/A3,-(A7)
00002EB6  45F8 0A30 5280          lea       _InstallExceptionHandler.L,A2
00002EBA  47F9 0000 5281          lea       _printf.L,A3
00002EBE  3C26      
                    5282   ; char c ;
                    5283   ; int i, j ;
                    5284   ; char *BugMessage = "DE1-68k Bug V1.77";
00002EC0  41F9 0000 5285          lea       @m68kde~1_158.L,A0
00002EC4  597A      
00002EC6  2608      5286          move.l    A0,D3
                    5287   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002EC8  41F9 0000 5288          lea       @m68kde~1_159.L,A0
00002ECC  598C      
00002ECE  2D48 FFFC 5289          move.l    A0,-4(A6)
                    5290   ; KillAllBreakPoints() ;
00002ED2  4EB8 21F4 5291          jsr       _KillAllBreakPoints
                    5292   ; i = x = y = z = PortA_Count = 0;
00002ED6  42B9 0B00 5293          clr.l     _PortA_Count.L
00002EDA  00D4      
00002EDC  42B9 0B00 5294          clr.l     _z.L
00002EE0  00D0      
00002EE2  42B9 0B00 5295          clr.l     _y.L
00002EE6  00CC      
00002EE8  42B9 0B00 5296          clr.l     _x.L
00002EEC  00C8      
00002EEE  4282      5297          clr.l     D2
                    5298   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002EF0  42B9 0B00 5299          clr.l     _GoFlag.L
00002EF4  00DC      
00002EF6  42B9 0B00 5300          clr.l     _Trace.L
00002EFA  00D8      
                    5301   ; Echo = 1 ;
00002EFC  23FC 0000 5302          move.l    #1,_Echo.L
00002F00  0001 0B00 
00002F04  00E0      
                    5303   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002F06  42B9 0B00 5304          clr.l     _d7.L
00002F0A  0100      
00002F0C  42B9 0B00 5305          clr.l     _d6.L
00002F10  00FC      
00002F12  42B9 0B00 5306          clr.l     _d5.L
00002F16  00F8      
00002F18  42B9 0B00 5307          clr.l     _d4.L
00002F1C  00F4      
00002F1E  42B9 0B00 5308          clr.l     _d3.L
00002F22  00F0      
00002F24  42B9 0B00 5309          clr.l     _d2.L
00002F28  00EC      
00002F2A  42B9 0B00 5310          clr.l     _d1.L
00002F2E  00E8      
00002F30  42B9 0B00 5311          clr.l     _d0.L
00002F34  00E4      
                    5312   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002F36  42B9 0B00 5313          clr.l     _a6.L
00002F3A  011C      
00002F3C  42B9 0B00 5314          clr.l     _a5.L
00002F40  0118      
00002F42  42B9 0B00 5315          clr.l     _a4.L
00002F46  0114      
00002F48  42B9 0B00 5316          clr.l     _a3.L
00002F4C  0110      
00002F4E  42B9 0B00 5317          clr.l     _a2.L
00002F52  010C      
00002F54  42B9 0B00 5318          clr.l     _a1.L
00002F58  0108      
00002F5A  42B9 0B00 5319          clr.l     _a0.L
00002F5E  0104      
                    5320   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002F60  23FC 0800 5321          move.l    #134217728,_PC.L
00002F64  0000 0B00 
00002F68  0120      
00002F6A  23FC 0C00 5322          move.l    #201326592,_SSP.L
00002F6E  0000 0B00 
00002F72  0124      
00002F74  23FC 0C00 5323          move.l    #201326592,_USP.L
00002F78  0000 0B00 
00002F7C  0128      
                    5324   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002F7E  33FC 2000 5325          move.w    #8192,_SR.L
00002F82  0B00 012C 
                    5326   ; // Initialise Breakpoint variables
                    5327   ; for(i = 0; i < 8; i++)  {
00002F86  4282      5328          clr.l     D2
                    5329   main_1:
00002F88  0C82 0000 5330          cmp.l     #8,D2
00002F8C  0008      
00002F8E  6C00 004C 5331          bge       main_3
                    5332   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002F92  2002      5333          move.l    D2,D0
00002F94  E588      5334          lsl.l     #2,D0
00002F96  41F9 0B00 5335          lea       _BreakPointAddress.L,A0
00002F9A  012E      
00002F9C  42B0 0800 5336          clr.l     0(A0,D0.L)
                    5337   ; WatchPointAddress[i] = 0 ;
00002FA0  2002      5338          move.l    D2,D0
00002FA2  E588      5339          lsl.l     #2,D0
00002FA4  41F9 0B00 5340          lea       _WatchPointAddress.L,A0
00002FA8  0182      
00002FAA  42B0 0800 5341          clr.l     0(A0,D0.L)
                    5342   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002FAE  2002      5343          move.l    D2,D0
00002FB0  E388      5344          lsl.l     #1,D0
00002FB2  41F9 0B00 5345          lea       _BreakPointInstruction.L,A0
00002FB6  014E      
00002FB8  4270 0800 5346          clr.w     0(A0,D0.L)
                    5347   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002FBC  2002      5348          move.l    D2,D0
00002FBE  E588      5349          lsl.l     #2,D0
00002FC0  41F9 0B00 5350          lea       _BreakPointSetOrCleared.L,A0
00002FC4  015E      
00002FC6  42B0 0800 5351          clr.l     0(A0,D0.L)
                    5352   ; WatchPointSetOrCleared[i] = 0;
00002FCA  2002      5353          move.l    D2,D0
00002FCC  E588      5354          lsl.l     #2,D0
00002FCE  41F9 0B00 5355          lea       _WatchPointSetOrCleared.L,A0
00002FD2  01A2      
00002FD4  42B0 0800 5356          clr.l     0(A0,D0.L)
00002FD8  5282      5357          addq.l    #1,D2
00002FDA  60AC      5358          bra       main_1
                    5359   main_3:
                    5360   ; }
                    5361   ; Init_RS232() ;     // initialise the RS232 port
00002FDC  4EB8 0B12 5362          jsr       _Init_RS232
                    5363   ; Init_LCD() ;
00002FE0  4EB8 095E 5364          jsr       _Init_LCD
                    5365   ; SPI_Init();
00002FE4  4EB8 10FC 5366          jsr       _SPI_Init
                    5367   ; IIC_Init();
00002FE8  4EB8 1428 5368          jsr       _IIC_Init
                    5369   ; for( i = 32; i < 48; i++)
00002FEC  7420      5370          moveq     #32,D2
                    5371   main_4:
00002FEE  0C82 0000 5372          cmp.l     #48,D2
00002FF2  0030      
00002FF4  6C0E      5373          bge.s     main_6
                    5374   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002FF6  2F02      5375          move.l    D2,-(A7)
00002FF8  4878 2A6C 5376          pea       _UnhandledTrap.L
00002FFC  4E92      5377          jsr       (A2)
00002FFE  504F      5378          addq.w    #8,A7
00003000  5282      5379          addq.l    #1,D2
00003002  60EA      5380          bra       main_4
                    5381   main_6:
                    5382   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00003004  4878 002F 5383          pea       47
00003008  4878 2746 5384          pea       _menu.L
0000300C  4E92      5385          jsr       (A2)
0000300E  504F      5386          addq.w    #8,A7
                    5387   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00003010  4878 0019 5388          pea       25
00003014  4878 2A12 5389          pea       _UnhandledIRQ1.L
00003018  4E92      5390          jsr       (A2)
0000301A  504F      5391          addq.w    #8,A7
                    5392   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
0000301C  4878 001A 5393          pea       26
00003020  4878 2A1E 5394          pea       _UnhandledIRQ2.L
00003024  4E92      5395          jsr       (A2)
00003026  504F      5396          addq.w    #8,A7
                    5397   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00003028  4878 001B 5398          pea       27
0000302C  4878 2A2A 5399          pea       _UnhandledIRQ3.L
00003030  4E92      5400          jsr       (A2)
00003032  504F      5401          addq.w    #8,A7
                    5402   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00003034  4878 001C 5403          pea       28
00003038  4878 2A36 5404          pea       _UnhandledIRQ4.L
0000303C  4E92      5405          jsr       (A2)
0000303E  504F      5406          addq.w    #8,A7
                    5407   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00003040  4878 001D 5408          pea       29
00003044  4878 2A42 5409          pea       _UnhandledIRQ5.L
00003048  4E92      5410          jsr       (A2)
0000304A  504F      5411          addq.w    #8,A7
                    5412   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
0000304C  4878 001E 5413          pea       30
00003050  4878 2A4E 5414          pea       _UnhandledIRQ6.L
00003054  4E92      5415          jsr       (A2)
00003056  504F      5416          addq.w    #8,A7
                    5417   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00003058  4878 001F 5418          pea       31
0000305C  4878 2A60 5419          pea       _UnhandledIRQ7.L
00003060  4E92      5420          jsr       (A2)
00003062  504F      5421          addq.w    #8,A7
                    5422   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00003064  4878 002E 5423          pea       46
00003068  4878 2482 5424          pea       _HandleBreakPoint.L
0000306C  4E92      5425          jsr       (A2)
0000306E  504F      5426          addq.w    #8,A7
                    5427   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00003070  4878 001D 5428          pea       29
00003074  4878 1B62 5429          pea       _DumpRegistersandPause.L
00003078  4E92      5430          jsr       (A2)
0000307A  504F      5431          addq.w    #8,A7
                    5432   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
0000307C  4878 0002 5433          pea       2
00003080  4878 2A7A 5434          pea       _BusError.L
00003084  4E92      5435          jsr       (A2)
00003086  504F      5436          addq.w    #8,A7
                    5437   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00003088  4878 0003 5438          pea       3
0000308C  4878 2A88 5439          pea       _AddressError.L
00003090  4E92      5440          jsr       (A2)
00003092  504F      5441          addq.w    #8,A7
                    5442   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00003094  4878 0004 5443          pea       4
00003098  4878 2A96 5444          pea       _IllegalInstruction.L
0000309C  4E92      5445          jsr       (A2)
0000309E  504F      5446          addq.w    #8,A7
                    5447   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
000030A0  4878 0005 5448          pea       5
000030A4  4878 2AA4 5449          pea       _Dividebyzero.L
000030A8  4E92      5450          jsr       (A2)
000030AA  504F      5451          addq.w    #8,A7
                    5452   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
000030AC  4878 0006 5453          pea       6
000030B0  4878 2AB2 5454          pea       _Check.L
000030B4  4E92      5455          jsr       (A2)
000030B6  504F      5456          addq.w    #8,A7
                    5457   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
000030B8  4878 0007 5458          pea       7
000030BC  4878 2AC0 5459          pea       _Trapv.L
000030C0  4E92      5460          jsr       (A2)
000030C2  504F      5461          addq.w    #8,A7
                    5462   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
000030C4  4878 0008 5463          pea       8
000030C8  4878 2ACE 5464          pea       _PrivError.L
000030CC  4E92      5465          jsr       (A2)
000030CE  504F      5466          addq.w    #8,A7
                    5467   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
000030D0  4878 000F 5468          pea       15
000030D4  4878 2ADC 5469          pea       _UnitIRQ.L
000030D8  4E92      5470          jsr       (A2)
000030DA  504F      5471          addq.w    #8,A7
                    5472   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
000030DC  4878 0018 5473          pea       24
000030E0  4878 2AB2 5474          pea       _Check.L
000030E4  4E92      5475          jsr       (A2)
000030E6  504F      5476          addq.w    #8,A7
                    5477   ; FlushKeyboard() ;                        // dump unread characters from keyboard
000030E8  4EB8 0BA6 5478          jsr       _FlushKeyboard
                    5479   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
000030EC  4239 0040 5480          clr.b     4194314
000030F0  000A      
                    5481   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5482   ; if (((char)(PortB & 0x02)) == (char)(0x02))    {
000030F2  1039 0040 5483          move.b    4194306,D0
000030F6  0002      
000030F8  C03C 0002 5484          and.b     #2,D0
000030FC  0C00 0002 5485          cmp.b     #2,D0
00003100  6628      5486          bne.s     main_7
                    5487   ; LoadFromFlashChip();
00003102  4EB8 138A 5488          jsr       _LoadFromFlashChip
                    5489   ; printf("\r\nRunning.....") ;
00003106  4879 0000 5490          pea       @m68kde~1_160.L
0000310A  59AA      
0000310C  4E93      5491          jsr       (A3)
0000310E  584F      5492          addq.w    #4,A7
                    5493   ; Oline1("Running.....") ;
00003110  4879 0000 5494          pea       @m68kde~1_161.L
00003114  59BA      
00003116  4EB8 0A02 5495          jsr       _Oline1
0000311A  584F      5496          addq.w    #4,A7
                    5497   ; GoFlag = 1;
0000311C  23FC 0000 5498          move.l    #1,_GoFlag.L
00003120  0001 0B00 
00003124  00DC      
                    5499   ; go() ;
00003126  4EB8 08B8 5500          jsr       _go
                    5501   main_7:
                    5502   ; }
                    5503   ; // otherwise start the debug monitor
                    5504   ; Oline0(BugMessage) ;
0000312A  2F03      5505          move.l    D3,-(A7)
0000312C  4EB8 09D4 5506          jsr       _Oline0
00003130  584F      5507          addq.w    #4,A7
                    5508   ; Oline1("By: PJ Davies") ;
00003132  4879 0000 5509          pea       @m68kde~1_162.L
00003136  59C8      
00003138  4EB8 0A02 5510          jsr       _Oline1
0000313C  584F      5511          addq.w    #4,A7
                    5512   ; printf("\r\n%s", BugMessage) ;
0000313E  2F03      5513          move.l    D3,-(A7)
00003140  4879 0000 5514          pea       @m68kde~1_163.L
00003144  59D6      
00003146  4E93      5515          jsr       (A3)
00003148  504F      5516          addq.w    #8,A7
                    5517   ; printf("\r\n%s", CopyrightMessage) ;
0000314A  2F2E FFFC 5518          move.l    -4(A6),-(A7)
0000314E  4879 0000 5519          pea       @m68kde~1_163.L
00003152  59D6      
00003154  4E93      5520          jsr       (A3)
00003156  504F      5521          addq.w    #8,A7
                    5522   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00003158  4879 0000 5523          pea       @m68kde~1_164.L
0000315C  59DC      
0000315E  4E93      5524          jsr       (A3)
00003160  584F      5525          addq.w    #4,A7
                    5526   ; printf("Initializing i2c test...\n");
00003162  4879 0000 5527          pea       @m68kde~1_165.L
00003166  5A24      
00003168  4E93      5528          jsr       (A3)
0000316A  584F      5529          addq.w    #4,A7
                    5530   ; I2CTest();
0000316C  4EB8 15FE 5531          jsr       _I2CTest
                    5532   ; menu();
00003170  4EB8 2746 5533          jsr       _menu
00003174  4CDF 0C0C 5534          movem.l   (A7)+,D2/D3/A2/A3
00003178  4E5E      5535          unlk      A6
0000317A  4E75      5536          rts
                    5537   ; }
                    5538   _strcpy:
0000317C  206F 0004 5539          move.l    (4,A7),A0
00003180  226F 0008 5540          move.l    (8,A7),A1
00003184  2008      5541          move.l    A0,D0
                    5542   strcpy_1:
00003186  10D9      5543          move.b    (A1)+,(A0)+
00003188  66FC      5544          bne       strcpy_1
0000318A  4E75      5545          rts
                    5546   ULDIV:
0000318C  4E56 0000 5547          link    A6,#0
00003190  48E7 C000 5548          movem.l D0/D1,-(A7)
00003194  222E 0008 5549          move.l  8(A6),D1
00003198  202E 000C 5550          move.l  12(A6),D0
0000319C  6036      5551          bra.s   ldiv_3
                    5552   LDIV:
0000319E  4E56 0000 5553          link    A6,#0
000031A2  48E7 C000 5554          movem.l D0/D1,-(A7)
000031A6  222E 0008 5555          move.l  8(A6),D1
000031AA  202E 000C 5556          move.l  12(A6),D0
000031AE  4A80      5557          tst.l   D0
000031B0  6A0E      5558          bpl.s   ldiv_1
000031B2  4480      5559          neg.l   D0
000031B4  4A81      5560          tst.l   D1
000031B6  6A14      5561          bpl.s   ldiv_2
000031B8  4481      5562          neg.l   D1
000031BA  612A      5563          bsr.s   dodiv
000031BC  4481      5564          neg.l   D1
000031BE  6016      5565          bra.s   ldiv_4
                    5566   ldiv_1:
000031C0  4A81      5567          tst.l   D1
000031C2  6A10      5568          bpl.s   ldiv_3
000031C4  4481      5569          neg.l   D1
000031C6  611E      5570          bsr.s   dodiv
000031C8  4480      5571          neg.l   D0
000031CA  600A      5572          bra.s   ldiv_4
                    5573   ldiv_2:
000031CC  6118      5574          bsr.s   dodiv
000031CE  4480      5575          neg.l   D0
000031D0  4481      5576          neg.l   D1
000031D2  6002      5577          bra.s   ldiv_4
                    5578   ldiv_3:
000031D4  6110      5579          bsr.s   dodiv
                    5580   ldiv_4:
000031D6  2D40 0008 5581          move.l  D0,8(A6)
000031DA  2D41 000C 5582          move.l  D1,12(A6)
000031DE  4CDF 0003 5583          movem.l (A7)+,D0/D1
000031E2  4E5E      5584          unlk    A6
000031E4  4E75      5585          rts
                    5586   dodiv:
000031E6  0C81 0000 5587          cmpi.l  #$FFFF,D1
000031EA  FFFF      
000031EC  6236      5588          bhi.s   dodiv_2
000031EE  0C80 0000 5589          cmpi.l  #$FFFF,D0
000031F2  FFFF      
000031F4  6210      5590          bhi.s   dodiv_1
000031F6  80C1      5591          divu    D1,D0
000031F8  2200      5592          move.l  D0,D1
000031FA  4241      5593          clr.w   D1
000031FC  4841      5594          swap    D1
000031FE  0280 0000 5595          andi.l  #$FFFF,D0
00003202  FFFF      
00003204  4E75      5596          rts
                    5597   dodiv_1:
00003206  48A7 A000 5598          movem.w D0/D2,-(A7)
0000320A  4240      5599          clr.w   D0
0000320C  4840      5600          swap    D0
0000320E  80C1      5601          divu    D1,D0
00003210  3400      5602          move.w  D0,D2
00003212  301F      5603          move.w  (A7)+,D0
00003214  80C1      5604          divu    D1,D0
00003216  4840      5605          swap    D0
00003218  4281      5606          clr.l   D1
0000321A  3200      5607          move.w  D0,D1
0000321C  3002      5608          move.w  D2,D0
0000321E  4840      5609          swap    D0
00003220  341F      5610          move.w  (A7)+,D2
00003222  4E75      5611          rts
                    5612   dodiv_2:
00003224  48E7 3800 5613          movem.l D2/D3/D4,-(A7)
00003228  2401      5614          move.l  D1,D2
0000322A  4242      5615          clr.w   D2
0000322C  4842      5616          swap    D2
0000322E  5282      5617          addq.l  #1,D2
00003230  2600      5618          move.l  D0,D3
00003232  2801      5619          move.l  D1,D4
00003234  2202      5620          move.l  D2,D1
00003236  61CE      5621          bsr.s   dodiv_1
00003238  2204      5622          move.l  D4,D1
0000323A  82C2      5623          divu    D2,D1
0000323C  80C1      5624          divu    D1,D0
0000323E  0280 0000 5625          andi.l  #$FFFF,D0
00003242  FFFF      
                    5626   dodiv_3:
00003244  2204      5627          move.l  D4,D1
00003246  2404      5628          move.l  D4,D2
00003248  4842      5629          swap    D2
0000324A  C2C0      5630          mulu    D0,D1
0000324C  C4C0      5631          mulu    D0,D2
0000324E  4842      5632          swap    D2
00003250  D282      5633          add.l   D2,D1
00003252  9283      5634          sub.l   D3,D1
00003254  620A      5635          bhi.s   dodiv_4
00003256  4481      5636          neg.l   D1
00003258  B881      5637          cmp.l   D1,D4
0000325A  6208      5638          bhi.s   dodiv_5
0000325C  5280      5639          addq.l  #1,D0
0000325E  60E4      5640          bra.s   dodiv_3
                    5641   dodiv_4:
00003260  5380      5642          subq.l  #1,D0
00003262  60E0      5643          bra.s   dodiv_3
                    5644   dodiv_5:
00003264  4CDF 001C 5645          movem.l (A7)+,D2/D3/D4
00003268  4E75      5646          rts
                    5647   _putch:
0000326A  4E56 0000 5648          link      A6,#0
0000326E  48E7 2000 5649          movem.l   D2,-(A7)
00003272  242E 0008 5650          move.l    8(A6),D2
00003276  0C82 0000 5651          cmp.l     #10,D2
0000327A  000A      
0000327C  660A      5652          bne.s     putch_1
0000327E  4878 000D 5653          pea       13
00003282  6100 D8B8 5654          bsr       __putch
00003286  584F      5655          addq.w    #4,A7
                    5656   putch_1:
00003288  2F02      5657          move.l    D2,-(A7)
0000328A  6100 D8B0 5658          bsr       __putch
0000328E  584F      5659          addq.w    #4,A7
00003290  2002      5660          move.l    D2,D0
00003292  4CDF 0004 5661          movem.l   (A7)+,D2
00003296  4E5E      5662          unlk      A6
00003298  4E75      5663          rts
                    5664   _getch:
0000329A  48E7 2000 5665          movem.l   D2,-(A7)
0000329E  2439 0B00 5666          move.l    __ungetbuf,D2
000032A2  00C0      
000032A4  2039 0B00 5667          move.l    __ungetbuf,D0
000032A8  00C0      
000032AA  0C80 FFFF 5668          cmp.l     #-1,D0
000032AE  FFFF      
000032B0  670C      5669          beq.s     getch_1
000032B2  23FC FFFF 5670          move.l    #-1,__ungetbuf
000032B6  FFFF 0B00 
000032BA  00C0      
000032BC  6010      5671          bra.s     getch_3
                    5672   getch_1:
000032BE  6100 D8A8 5673          bsr       __getch
000032C2  2400      5674          move.l    D0,D2
000032C4  0C80 0000 5675          cmp.l     #13,D0
000032C8  000D      
000032CA  6602      5676          bne.s     getch_3
000032CC  740A      5677          moveq     #10,D2
                    5678   getch_3:
000032CE  2002      5679          move.l    D2,D0
000032D0  4CDF 0004 5680          movem.l   (A7)+,D2
000032D4  4E75      5681          rts
                    5682   _tolower:
000032D6  4E56 0000 5683          link      A6,#0
000032DA  48E7 2000 5684          movem.l   D2,-(A7)
000032DE  242E 0008 5685          move.l    8(A6),D2
000032E2  0C82 0000 5686          cmp.l     #65,D2
000032E6  0041      
000032E8  6D0E      5687          blt.s     tolower_1
000032EA  0C82 0000 5688          cmp.l     #90,D2
000032EE  005A      
000032F0  6E06      5689          bgt.s     tolower_1
000032F2  84BC 0000 5690          or.l      #32,D2
000032F6  0020      
                    5691   tolower_1:
000032F8  2002      5692          move.l    D2,D0
000032FA  4CDF 0004 5693          movem.l   (A7)+,D2
000032FE  4E5E      5694          unlk      A6
00003300  4E75      5695          rts
                    5696   _sprintf:
00003302  4E56 FFFC 5697          link      A6,#-4
00003306  48E7 2000 5698          movem.l   D2,-(A7)
0000330A  41EE 000C 5699          lea       12(A6),A0
0000330E  5848      5700          addq.w    #4,A0
00003310  2408      5701          move.l    A0,D2
00003312  2F02      5702          move.l    D2,-(A7)
00003314  2F2E 000C 5703          move.l    12(A6),-(A7)
00003318  2F2E 0008 5704          move.l    8(A6),-(A7)
0000331C  6100 09EC 5705          bsr       _vsprintf
00003320  DEFC 000C 5706          add.w     #12,A7
00003324  2D40 FFFC 5707          move.l    D0,-4(A6)
00003328  4282      5708          clr.l     D2
0000332A  202E FFFC 5709          move.l    -4(A6),D0
0000332E  4CDF 0004 5710          movem.l   (A7)+,D2
00003332  4E5E      5711          unlk      A6
00003334  4E75      5712          rts
                    5713   _memset:
00003336  206F 0004 5714          move.l    (4,A7),A0
0000333A  202F 0008 5715          move.l    (8,A7),D0
0000333E  222F 000C 5716          move.l    (12,A7),D1
00003342  2248      5717          move.l    A0,A1	
                    5718   memset_1:
00003344  12C0      5719          move.b    D0,(A1)+
00003346  5341      5720          subq      #1,D1
00003348  66FA      5721          bne       memset_1
0000334A  2008      5722          move.l    A0,D0
0000334C  4E75      5723          rts
                    5724   _strcat:
0000334E  206F 0004 5725          move.l    (4,A7),A0	
00003352  226F 0008 5726          move.l    (8,A7),A1	
00003356  2008      5727          move.l    A0,D0		
                    5728   strcat_0:
00003358  4A18      5729          tst.b     (A0)+
0000335A  66FC      5730          bne       strcat_0
0000335C  5348      5731          subq      #1,A0
                    5732   strcat_1:
0000335E  10D9      5733          move.b    (A1)+,(A0)+
00003360  66FC      5734          bne       strcat_1
00003362  4E75      5735          rts
                    5736   _toupper:
00003364  4E56 0000 5737          link      A6,#0
00003368  48E7 2000 5738          movem.l   D2,-(A7)
0000336C  242E 0008 5739          move.l    8(A6),D2
00003370  0C82 0000 5740          cmp.l     #97,D2
00003374  0061      
00003376  6D0E      5741          blt.s     toupper_1
00003378  0C82 0000 5742          cmp.l     #122,D2
0000337C  007A      
0000337E  6E06      5743          bgt.s     toupper_1
00003380  C4BC 0000 5744          and.l     #95,D2
00003384  005F      
                    5745   toupper_1:
00003386  2002      5746          move.l    D2,D0
00003388  4CDF 0004 5747          movem.l   (A7)+,D2
0000338C  4E5E      5748          unlk      A6
0000338E  4E75      5749          rts
                    5750   @vsscanf_scanread:
00003390  4E56 FFFC 5751          link      A6,#-4
00003394  48E7 0020 5752          movem.l   A2,-(A7)
00003398  45F9 0000 5753          lea       @vsscanf_bufx,A2
0000339C  5A52      
0000339E  4AAE 0008 5754          tst.l     8(A6)
000033A2  6722      5755          beq.s     @vsscanf_scanread_1
000033A4  206E 0008 5756          move.l    8(A6),A0
000033A8  58AE 0008 5757          addq.l    #4,8(A6)
000033AC  2050      5758          move.l    (A0),A0
000033AE  1010      5759          move.b    (A0),D0
000033B0  4880      5760          ext.w     D0
000033B2  48C0      5761          ext.l     D0
000033B4  2D40 FFFC 5762          move.l    D0,-4(A6)
000033B8  6706      5763          beq.s     @vsscanf_scanread_3
000033BA  202E FFFC 5764          move.l    -4(A6),D0
000033BE  6002      5765          bra.s     @vsscanf_scanread_4
                    5766   @vsscanf_scanread_3:
000033C0  70FF      5767          moveq     #-1,D0
                    5768   @vsscanf_scanread_4:
000033C2  6000 0032 5769          bra       @vsscanf_scanread_5
                    5770   @vsscanf_scanread_1:
000033C6  2052      5771          move.l    (A2),A0
000033C8  1010      5772          move.b    (A0),D0
000033CA  6620      5773          bne.s     @vsscanf_scanread_6
000033CC  4879 0B00 5774          pea       @vsscanf_buf
000033D0  0546      
000033D2  6100 1038 5775          bsr       _gets
000033D6  584F      5776          addq.w    #4,A7
000033D8  2480      5777          move.l    D0,(A2)
000033DA  4879 0000 5778          pea       @vsscanf_1
000033DE  5A56      
000033E0  4879 0B00 5779          pea       @vsscanf_buf
000033E4  0546      
000033E6  6100 FF66 5780          bsr       _strcat
000033EA  504F      5781          addq.w    #8,A7
                    5782   @vsscanf_scanread_6:
000033EC  2052      5783          move.l    (A2),A0
000033EE  5292      5784          addq.l    #1,(A2)
000033F0  1010      5785          move.b    (A0),D0
000033F2  4880      5786          ext.w     D0
000033F4  48C0      5787          ext.l     D0
                    5788   @vsscanf_scanread_5:
000033F6  4CDF 0400 5789          movem.l   (A7)+,A2
000033FA  4E5E      5790          unlk      A6
000033FC  4E75      5791          rts
                    5792   @vsscanf_scanputback:
000033FE  4E56 0000 5793          link      A6,#0
00003402  48E7 3000 5794          movem.l   D2/D3,-(A7)
00003406  242E 000C 5795          move.l    12(A6),D2
0000340A  262E 0008 5796          move.l    8(A6),D3
0000340E  6718      5797          beq.s     @vsscanf_scanputback_1
00003410  0C82 FFFF 5798          cmp.l     #-1,D2
00003414  FFFF      
00003416  670A      5799          beq.s     @vsscanf_scanputback_3
00003418  5983      5800          subq.l    #4,D3
0000341A  2043      5801          move.l    D3,A0
0000341C  2050      5802          move.l    (A0),A0
0000341E  1082      5803          move.b    D2,(A0)
00003420  6004      5804          bra.s     @vsscanf_scanputback_4
                    5805   @vsscanf_scanputback_3:
00003422  2043      5806          move.l    D3,A0
00003424  5390      5807          subq.l    #1,(A0)
                    5808   @vsscanf_scanputback_4:
00003426  602E      5809          bra.s     @vsscanf_scanputback_6
                    5810   @vsscanf_scanputback_1:
00003428  41F9 0B00 5811          lea       @vsscanf_buf,A0
0000342C  0546      
0000342E  2008      5812          move.l    A0,D0
00003430  B0B9 0000 5813          cmp.l     @vsscanf_bufx,D0
00003434  5A52      
00003436  6610      5814          bne.s     @vsscanf_scanputback_5
00003438  4239 0B00 5815          clr.b     @vsscanf_buf
0000343C  0546      
0000343E  2F02      5816          move.l    D2,-(A7)
00003440  6100 103C 5817          bsr       _ungetch
00003444  584F      5818          addq.w    #4,A7
00003446  600E      5819          bra.s     @vsscanf_scanputback_6
                    5820   @vsscanf_scanputback_5:
00003448  53B9 0000 5821          subq.l    #1,@vsscanf_bufx
0000344C  5A52      
0000344E  2079 0000 5822          move.l    @vsscanf_bufx,A0
00003452  5A52      
00003454  1082      5823          move.b    D2,(A0)
                    5824   @vsscanf_scanputback_6:
00003456  2002      5825          move.l    D2,D0
00003458  4CDF 000C 5826          movem.l   (A7)+,D2/D3
0000345C  4E5E      5827          unlk      A6
0000345E  4E75      5828          rts
                    5829   @vsscanf_scanspace:
00003460  4E56 0000 5830          link      A6,#0
00003464  48E7 2000 5831          movem.l   D2,-(A7)
                    5832   @vsscanf_scanspace_1:
00003468  2F2E 0008 5833          move.l    8(A6),-(A7)
0000346C  6100 FF22 5834          bsr       @vsscanf_scanread
00003470  584F      5835          addq.w    #4,A7
00003472  2400      5836          move.l    D0,D2
00003474  206E 000C 5837          move.l    12(A6),A0
00003478  5290      5838          addq.l    #1,(A0)
0000347A  2042      5839          move.l    D2,A0
0000347C  43F9 0000 5840          lea       __ctype,A1
00003480  5A58      
00003482  1030 9801 5841          move.b    1(A0,A1.L),D0
00003486  C03C 0010 5842          and.b     #16,D0
0000348A  66DC      5843          bne       @vsscanf_scanspace_1
0000348C  2002      5844          move.l    D2,D0
0000348E  4CDF 0004 5845          movem.l   (A7)+,D2
00003492  4E5E      5846          unlk      A6
00003494  4E75      5847          rts
                    5848   @vsscanf_scanselect:
00003496  4E56 0000 5849          link      A6,#0
0000349A  48E7 3F20 5850          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
0000349E  262E 000C 5851          move.l    12(A6),D3
000034A2  2C2E 0018 5852          move.l    24(A6),D6
000034A6  2E2E 0014 5853          move.l    20(A6),D7
000034AA  2043      5854          move.l    D3,A0
000034AC  1010      5855          move.b    (A0),D0
000034AE  4880      5856          ext.w     D0
000034B0  48C0      5857          ext.l     D0
000034B2  0C80 0000 5858          cmp.l     #94,D0
000034B6  005E      
000034B8  6608      5859          bne.s     @vsscanf_scanselect_1
000034BA  347C 0001 5860          move.w    #1,A2
000034BE  5283      5861          addq.l    #1,D3
000034C0  6004      5862          bra.s     @vsscanf_scanselect_2
                    5863   @vsscanf_scanselect_1:
000034C2  347C 0000 5864          move.w    #0,A2
                    5865   @vsscanf_scanselect_2:
000034C6  202E 0010 5866          move.l    16(A6),D0
000034CA  53AE 0010 5867          subq.l    #1,16(A6)
000034CE  4A80      5868          tst.l     D0
000034D0  6700 0108 5869          beq       @vsscanf_scanselect_5
000034D4  2F2E 0008 5870          move.l    8(A6),-(A7)
000034D8  6100 FEB6 5871          bsr       @vsscanf_scanread
000034DC  584F      5872          addq.w    #4,A7
000034DE  2800      5873          move.l    D0,D4
000034E0  0C84 FFFF 5874          cmp.l     #-1,D4
000034E4  FFFF      
000034E6  6604      5875          bne.s     @vsscanf_scanselect_6
000034E8  6000 00F0 5876          bra       @vsscanf_scanselect_5
                    5877   @vsscanf_scanselect_6:
000034EC  206E 001C 5878          move.l    28(A6),A0
000034F0  5290      5879          addq.l    #1,(A0)
000034F2  4285      5880          clr.l     D5
000034F4  4282      5881          clr.l     D2
                    5882   @vsscanf_scanselect_8:
000034F6  2043      5883          move.l    D3,A0
000034F8  1030 2800 5884          move.b    0(A0,D2.L),D0
000034FC  4880      5885          ext.w     D0
000034FE  48C0      5886          ext.l     D0
00003500  0C80 0000 5887          cmp.l     #93,D0
00003504  005D      
00003506  6700 008E 5888          beq       @vsscanf_scanselect_10
0000350A  4A82      5889          tst.l     D2
0000350C  6716      5890          beq.s     @vsscanf_scanselect_11
0000350E  2043      5891          move.l    D3,A0
00003510  1030 2800 5892          move.b    0(A0,D2.L),D0
00003514  4880      5893          ext.w     D0
00003516  48C0      5894          ext.l     D0
00003518  0C80 0000 5895          cmp.l     #93,D0
0000351C  005D      
0000351E  6604      5896          bne.s     @vsscanf_scanselect_11
00003520  6000 0074 5897          bra       @vsscanf_scanselect_10
                    5898   @vsscanf_scanselect_11:
00003524  4A82      5899          tst.l     D2
00003526  6700 0058 5900          beq       @vsscanf_scanselect_15
0000352A  2043      5901          move.l    D3,A0
0000352C  1030 2800 5902          move.b    0(A0,D2.L),D0
00003530  4880      5903          ext.w     D0
00003532  48C0      5904          ext.l     D0
00003534  0C80 0000 5905          cmp.l     #45,D0
00003538  002D      
0000353A  6600 0044 5906          bne       @vsscanf_scanselect_15
0000353E  2043      5907          move.l    D3,A0
00003540  2002      5908          move.l    D2,D0
00003542  5380      5909          subq.l    #1,D0
00003544  2243      5910          move.l    D3,A1
00003546  2F08      5911          move.l    A0,-(A7)
00003548  2042      5912          move.l    D2,A0
0000354A  1230 0800 5913          move.b    0(A0,D0.L),D1
0000354E  B230 9801 5914          cmp.b     1(A0,A1.L),D1
00003552  6C00 002C 5915          bge       @vsscanf_scanselect_15
00003556  205F      5916          move.l    (A7)+,A0
00003558  2043      5917          move.l    D3,A0
0000355A  2002      5918          move.l    D2,D0
0000355C  5380      5919          subq.l    #1,D0
0000355E  1030 0800 5920          move.b    0(A0,D0.L),D0
00003562  4880      5921          ext.w     D0
00003564  48C0      5922          ext.l     D0
00003566  B880      5923          cmp.l     D0,D4
00003568  6D12      5924          blt.s     @vsscanf_scanselect_17
0000356A  2043      5925          move.l    D3,A0
0000356C  2242      5926          move.l    D2,A1
0000356E  1031 8801 5927          move.b    1(A1,A0.L),D0
00003572  4880      5928          ext.w     D0
00003574  48C0      5929          ext.l     D0
00003576  B880      5930          cmp.l     D0,D4
00003578  6E02      5931          bgt.s     @vsscanf_scanselect_17
0000357A  601A      5932          bra.s     @vsscanf_scanselect_10
                    5933   @vsscanf_scanselect_17:
0000357C  5282      5934          addq.l    #1,D2
0000357E  6010      5935          bra.s     @vsscanf_scanselect_19
                    5936   @vsscanf_scanselect_15:
00003580  2043      5937          move.l    D3,A0
00003582  1030 2800 5938          move.b    0(A0,D2.L),D0
00003586  4880      5939          ext.w     D0
00003588  48C0      5940          ext.l     D0
0000358A  B880      5941          cmp.l     D0,D4
0000358C  6602      5942          bne.s     @vsscanf_scanselect_19
0000358E  6006      5943          bra.s     @vsscanf_scanselect_10
                    5944   @vsscanf_scanselect_19:
00003590  5282      5945          addq.l    #1,D2
00003592  6000 FF62 5946          bra       @vsscanf_scanselect_8
                    5947   @vsscanf_scanselect_10:
00003596  4A82      5948          tst.l     D2
00003598  6712      5949          beq.s     @vsscanf_scanselect_23
0000359A  2043      5950          move.l    D3,A0
0000359C  1030 2800 5951          move.b    0(A0,D2.L),D0
000035A0  4880      5952          ext.w     D0
000035A2  48C0      5953          ext.l     D0
000035A4  0C80 0000 5954          cmp.l     #93,D0
000035A8  005D      
000035AA  6702      5955          beq.s     @vsscanf_scanselect_21
                    5956   @vsscanf_scanselect_23:
000035AC  7A01      5957          moveq     #1,D5
                    5958   @vsscanf_scanselect_21:
000035AE  200A      5959          move.l    A2,D0
000035B0  6712      5960          beq.s     @vsscanf_scanselect_24
000035B2  4A85      5961          tst.l     D5
000035B4  660C      5962          bne.s     @vsscanf_scanselect_26
000035B6  4A87      5963          tst.l     D7
000035B8  6606      5964          bne.s     @vsscanf_scanselect_28
000035BA  2046      5965          move.l    D6,A0
000035BC  5286      5966          addq.l    #1,D6
000035BE  1084      5967          move.b    D4,(A0)
                    5968   @vsscanf_scanselect_28:
000035C0  6014      5969          bra.s     @vsscanf_scanselect_4
                    5970   @vsscanf_scanselect_26:
000035C2  6016      5971          bra.s     @vsscanf_scanselect_5
                    5972   @vsscanf_scanselect_24:
000035C4  4A85      5973          tst.l     D5
000035C6  670C      5974          beq.s     @vsscanf_scanselect_30
000035C8  4A87      5975          tst.l     D7
000035CA  6606      5976          bne.s     @vsscanf_scanselect_32
000035CC  2046      5977          move.l    D6,A0
000035CE  5286      5978          addq.l    #1,D6
000035D0  1084      5979          move.b    D4,(A0)
                    5980   @vsscanf_scanselect_32:
000035D2  6002      5981          bra.s     @vsscanf_scanselect_4
                    5982   @vsscanf_scanselect_30:
000035D4  6004      5983          bra.s     @vsscanf_scanselect_5
                    5984   @vsscanf_scanselect_4:
000035D6  6000 FEEE 5985          bra       @vsscanf_scanselect_2
                    5986   @vsscanf_scanselect_5:
000035DA  0C84 FFFF 5987          cmp.l     #-1,D4
000035DE  FFFF      
000035E0  6712      5988          beq.s     @vsscanf_scanselect_34
000035E2  2F04      5989          move.l    D4,-(A7)
000035E4  2F2E 0008 5990          move.l    8(A6),-(A7)
000035E8  6100 FE14 5991          bsr       @vsscanf_scanputback
000035EC  504F      5992          addq.w    #8,A7
000035EE  206E 001C 5993          move.l    28(A6),A0
000035F2  5390      5994          subq.l    #1,(A0)
                    5995   @vsscanf_scanselect_34:
000035F4  4A87      5996          tst.l     D7
000035F6  6604      5997          bne.s     @vsscanf_scanselect_36
000035F8  2046      5998          move.l    D6,A0
000035FA  4210      5999          clr.b     (A0)
                    6000   @vsscanf_scanselect_36:
000035FC  5283      6001          addq.l    #1,D3
000035FE  2043      6002          move.l    D3,A0
00003600  1010      6003          move.b    (A0),D0
00003602  4880      6004          ext.w     D0
00003604  48C0      6005          ext.l     D0
00003606  0C80 0000 6006          cmp.l     #93,D0
0000360A  005D      
0000360C  6702      6007          beq.s     @vsscanf_scanselect_40
0000360E  60EC      6008          bra       @vsscanf_scanselect_36
                    6009   @vsscanf_scanselect_40:
00003610  5283      6010          addq.l    #1,D3
00003612  2003      6011          move.l    D3,D0
00003614  4CDF 04FC 6012          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003618  4E5E      6013          unlk      A6
0000361A  4E75      6014          rts
                    6015   _scanflush:
0000361C  41F9 0B00 6016          lea       @vsscanf_buf,A0
00003620  0546      
00003622  23C8 0000 6017          move.l    A0,@vsscanf_bufx
00003626  5A52      
00003628  4239 0B00 6018          clr.b     @vsscanf_buf
0000362C  0546      
0000362E  4878 FFFF 6019          pea       -1
00003632  6100 0E4A 6020          bsr       _ungetch
00003636  584F      6021          addq.w    #4,A7
00003638  4E75      6022          rts
                    6023   _vsscanf:
0000363A  4E56 FF88 6024          link      A6,#-120
0000363E  48E7 3F3C 6025          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003642  47F8 3390 6026          lea       @vsscanf_scanread,A3
00003646  4AAE 0008 6027          tst.l     8(A6)
0000364A  6706      6028          beq.s     vsscanf_1
0000364C  41EE 0008 6029          lea       8(A6),A0
00003650  6004      6030          bra.s     vsscanf_2
                    6031   vsscanf_1:
00003652  4280      6032          clr.l     D0
00003654  2040      6033          move.l    D0,A0
                    6034   vsscanf_2:
00003656  2A08      6035          move.l    A0,D5
00003658  42AE FFE4 6036          clr.l     -28(A6)
0000365C  4284      6037          clr.l     D4
                    6038   vsscanf_3:
0000365E  206E 000C 6039          move.l    12(A6),A0
00003662  52AE 000C 6040          addq.l    #1,12(A6)
00003666  1010      6041          move.b    (A0),D0
00003668  4880      6042          ext.w     D0
0000366A  48C0      6043          ext.l     D0
0000366C  2600      6044          move.l    D0,D3
0000366E  6700 05AC 6045          beq       vsscanf_5
00003672  4286      6046          clr.l     D6
00003674  387C 0000 6047          move.w    #0,A4
00003678  0C83 0000 6048          cmp.l     #32,D3
0000367C  0020      
0000367E  6712      6049          beq.s     vsscanf_8
00003680  0C83 0000 6050          cmp.l     #9,D3
00003684  0009      
00003686  670A      6051          beq.s     vsscanf_8
00003688  0C83 0000 6052          cmp.l     #10,D3
0000368C  000A      
0000368E  6600 0048 6053          bne       vsscanf_6
                    6054   vsscanf_8:
00003692  2F05      6055          move.l    D5,-(A7)
00003694  4E93      6056          jsr       (A3)
00003696  584F      6057          addq.w    #4,A7
00003698  2400      6058          move.l    D0,D2
0000369A  52AE FFE4 6059          addq.l    #1,-28(A6)
0000369E  0C82 FFFF 6060          cmp.l     #-1,D2
000036A2  FFFF      
000036A4  660E      6061          bne.s     vsscanf_11
000036A6  4A84      6062          tst.l     D4
000036A8  6704      6063          beq.s     vsscanf_13
000036AA  2004      6064          move.l    D4,D0
000036AC  6002      6065          bra.s     vsscanf_14
                    6066   vsscanf_13:
000036AE  70FF      6067          moveq     #-1,D0
                    6068   vsscanf_14:
000036B0  6000 056C 6069          bra       vsscanf_15
                    6070   vsscanf_11:
000036B4  2042      6071          move.l    D2,A0
000036B6  43F9 0000 6072          lea       __ctype,A1
000036BA  5A58      
000036BC  1030 9801 6073          move.b    1(A0,A1.L),D0
000036C0  C03C 0010 6074          and.b     #16,D0
000036C4  66CC      6075          bne       vsscanf_8
000036C6  53AE FFE4 6076          subq.l    #1,-28(A6)
000036CA  2F02      6077          move.l    D2,-(A7)
000036CC  2F05      6078          move.l    D5,-(A7)
000036CE  6100 FD2E 6079          bsr       @vsscanf_scanputback
000036D2  504F      6080          addq.w    #8,A7
000036D4  6000 0542 6081          bra       vsscanf_139
                    6082   vsscanf_6:
000036D8  0C83 0000 6083          cmp.l     #37,D3
000036DC  0025      
000036DE  6600 0502 6084          bne       vsscanf_127
000036E2  206E 000C 6085          move.l    12(A6),A0
000036E6  52AE 000C 6086          addq.l    #1,12(A6)
000036EA  1010      6087          move.b    (A0),D0
000036EC  4880      6088          ext.w     D0
000036EE  48C0      6089          ext.l     D0
000036F0  2600      6090          move.l    D0,D3
000036F2  42AE FFEC 6091          clr.l     -20(A6)
000036F6  4286      6092          clr.l     D6
000036F8  42AE FFE8 6093          clr.l     -24(A6)
000036FC  347C 7FFF 6094          move.w    #32767,A2
00003700  0C83 0000 6095          cmp.l     #42,D3
00003704  002A      
00003706  6612      6096          bne.s     vsscanf_18
00003708  7C01      6097          moveq     #1,D6
0000370A  206E 000C 6098          move.l    12(A6),A0
0000370E  52AE 000C 6099          addq.l    #1,12(A6)
00003712  1010      6100          move.b    (A0),D0
00003714  4880      6101          ext.w     D0
00003716  48C0      6102          ext.l     D0
00003718  2600      6103          move.l    D0,D3
                    6104   vsscanf_18:
0000371A  2043      6105          move.l    D3,A0
0000371C  43F9 0000 6106          lea       __ctype,A1
00003720  5A58      
00003722  1030 9801 6107          move.b    1(A0,A1.L),D0
00003726  C03C 0004 6108          and.b     #4,D0
0000372A  6700 004E 6109          beq       vsscanf_24
0000372E  2003      6110          move.l    D3,D0
00003730  0480 0000 6111          sub.l     #48,D0
00003734  0030      
00003736  2440      6112          move.l    D0,A2
                    6113   vsscanf_22:
00003738  206E 000C 6114          move.l    12(A6),A0
0000373C  52AE 000C 6115          addq.l    #1,12(A6)
00003740  1010      6116          move.b    (A0),D0
00003742  4880      6117          ext.w     D0
00003744  48C0      6118          ext.l     D0
00003746  2600      6119          move.l    D0,D3
00003748  2040      6120          move.l    D0,A0
0000374A  43F9 0000 6121          lea       __ctype,A1
0000374E  5A58      
00003750  1030 9801 6122          move.b    1(A0,A1.L),D0
00003754  C0BC 0000 6123          and.l     #255,D0
00003758  00FF      
0000375A  C0BC 0000 6124          and.l     #4,D0
0000375E  0004      
00003760  6718      6125          beq.s     vsscanf_24
00003762  70D0      6126          moveq     #-48,D0
00003764  2F0A      6127          move.l    A2,-(A7)
00003766  4878 000A 6128          pea       10
0000376A  6100 0C12 6129          bsr       LMUL
0000376E  2217      6130          move.l    (A7),D1
00003770  504F      6131          addq.w    #8,A7
00003772  D283      6132          add.l     D3,D1
00003774  D081      6133          add.l     D1,D0
00003776  2440      6134          move.l    D0,A2
00003778  60BE      6135          bra       vsscanf_22
                    6136   vsscanf_24:
0000377A  0C83 0000 6137          cmp.l     #108,D3
0000377E  006C      
00003780  6708      6138          beq.s     vsscanf_27
00003782  0C83 0000 6139          cmp.l     #76,D3
00003786  004C      
00003788  661A      6140          bne.s     vsscanf_25
                    6141   vsscanf_27:
0000378A  2D7C 0000 6142          move.l    #1,-24(A6)
0000378E  0001 FFE8 
00003792  206E 000C 6143          move.l    12(A6),A0
00003796  52AE 000C 6144          addq.l    #1,12(A6)
0000379A  1010      6145          move.b    (A0),D0
0000379C  4880      6146          ext.w     D0
0000379E  48C0      6147          ext.l     D0
000037A0  2600      6148          move.l    D0,D3
000037A2  6020      6149          bra.s     vsscanf_28
                    6150   vsscanf_25:
000037A4  0C83 0000 6151          cmp.l     #104,D3
000037A8  0068      
000037AA  6618      6152          bne.s     vsscanf_28
000037AC  2D7C 0000 6153          move.l    #1,-20(A6)
000037B0  0001 FFEC 
000037B4  206E 000C 6154          move.l    12(A6),A0
000037B8  52AE 000C 6155          addq.l    #1,12(A6)
000037BC  1010      6156          move.b    (A0),D0
000037BE  4880      6157          ext.w     D0
000037C0  48C0      6158          ext.l     D0
000037C2  2600      6159          move.l    D0,D3
                    6160   vsscanf_28:
000037C4  0C83 0000 6161          cmp.l     #91,D3
000037C8  005B      
000037CA  6600 0036 6162          bne       vsscanf_30
000037CE  4A86      6163          tst.l     D6
000037D0  660A      6164          bne.s     vsscanf_32
000037D2  206E 0010 6165          move.l    16(A6),A0
000037D6  58AE 0010 6166          addq.l    #4,16(A6)
000037DA  2E10      6167          move.l    (A0),D7
                    6168   vsscanf_32:
000037DC  486E FFE4 6169          pea       -28(A6)
000037E0  2F07      6170          move.l    D7,-(A7)
000037E2  2F06      6171          move.l    D6,-(A7)
000037E4  2F0A      6172          move.l    A2,-(A7)
000037E6  2F2E 000C 6173          move.l    12(A6),-(A7)
000037EA  2F05      6174          move.l    D5,-(A7)
000037EC  6100 FCA8 6175          bsr       @vsscanf_scanselect
000037F0  DEFC 0018 6176          add.w     #24,A7
000037F4  2D40 000C 6177          move.l    D0,12(A6)
000037F8  4A86      6178          tst.l     D6
000037FA  6602      6179          bne.s     vsscanf_34
000037FC  5284      6180          addq.l    #1,D4
                    6181   vsscanf_34:
000037FE  6000 0418 6182          bra       vsscanf_139
                    6183   vsscanf_30:
00003802  0C83 0000 6184          cmp.l     #110,D3
00003806  006E      
00003808  661A      6185          bne.s     vsscanf_36
0000380A  4A86      6186          tst.l     D6
0000380C  6612      6187          bne.s     vsscanf_38
0000380E  206E 0010 6188          move.l    16(A6),A0
00003812  58AE 0010 6189          addq.l    #4,16(A6)
00003816  2E10      6190          move.l    (A0),D7
00003818  2047      6191          move.l    D7,A0
0000381A  20AE FFE4 6192          move.l    -28(A6),(A0)
0000381E  5284      6193          addq.l    #1,D4
                    6194   vsscanf_38:
00003820  6000 03F6 6195          bra       vsscanf_139
                    6196   vsscanf_36:
00003824  0C83 0000 6197          cmp.l     #115,D3
00003828  0073      
0000382A  6600 00AC 6198          bne       vsscanf_40
0000382E  486E FFE4 6199          pea       -28(A6)
00003832  2F05      6200          move.l    D5,-(A7)
00003834  6100 FC2A 6201          bsr       @vsscanf_scanspace
00003838  504F      6202          addq.w    #8,A7
0000383A  2400      6203          move.l    D0,D2
0000383C  4A86      6204          tst.l     D6
0000383E  660A      6205          bne.s     vsscanf_42
00003840  206E 0010 6206          move.l    16(A6),A0
00003844  58AE 0010 6207          addq.l    #4,16(A6)
00003848  2E10      6208          move.l    (A0),D7
                    6209   vsscanf_42:
0000384A  52AE FFE4 6210          addq.l    #1,-28(A6)
                    6211   vsscanf_44:
0000384E  200A      6212          move.l    A2,D0
00003850  534A      6213          subq.w    #1,A2
00003852  4A80      6214          tst.l     D0
00003854  6700 0038 6215          beq       vsscanf_46
00003858  2042      6216          move.l    D2,A0
0000385A  43F9 0000 6217          lea       __ctype,A1
0000385E  5A58      
00003860  1030 9801 6218          move.b    1(A0,A1.L),D0
00003864  C03C 0010 6219          and.b     #16,D0
00003868  6624      6220          bne.s     vsscanf_46
0000386A  0C82 FFFF 6221          cmp.l     #-1,D2
0000386E  FFFF      
00003870  671C      6222          beq.s     vsscanf_46
00003872  387C 0001 6223          move.w    #1,A4
00003876  4A86      6224          tst.l     D6
00003878  6606      6225          bne.s     vsscanf_47
0000387A  2047      6226          move.l    D7,A0
0000387C  5287      6227          addq.l    #1,D7
0000387E  1082      6228          move.b    D2,(A0)
                    6229   vsscanf_47:
00003880  2F05      6230          move.l    D5,-(A7)
00003882  4E93      6231          jsr       (A3)
00003884  584F      6232          addq.w    #4,A7
00003886  2400      6233          move.l    D0,D2
00003888  52AE FFE4 6234          addq.l    #1,-28(A6)
0000388C  60C0      6235          bra       vsscanf_44
                    6236   vsscanf_46:
0000388E  4A86      6237          tst.l     D6
00003890  660A      6238          bne.s     vsscanf_51
00003892  2047      6239          move.l    D7,A0
00003894  4210      6240          clr.b     (A0)
00003896  200C      6241          move.l    A4,D0
00003898  6702      6242          beq.s     vsscanf_51
0000389A  5284      6243          addq.l    #1,D4
                    6244   vsscanf_51:
0000389C  0C82 FFFF 6245          cmp.l     #-1,D2
000038A0  FFFF      
000038A2  6708      6246          beq.s     vsscanf_55
000038A4  4A86      6247          tst.l     D6
000038A6  661E      6248          bne.s     vsscanf_53
000038A8  200C      6249          move.l    A4,D0
000038AA  661A      6250          bne.s     vsscanf_53
                    6251   vsscanf_55:
000038AC  4A84      6252          tst.l     D4
000038AE  6704      6253          beq.s     vsscanf_56
000038B0  2004      6254          move.l    D4,D0
000038B2  600E      6255          bra.s     vsscanf_59
                    6256   vsscanf_56:
000038B4  0C82 FFFF 6257          cmp.l     #-1,D2
000038B8  FFFF      
000038BA  6604      6258          bne.s     vsscanf_58
000038BC  70FF      6259          moveq     #-1,D0
000038BE  6002      6260          bra.s     vsscanf_59
                    6261   vsscanf_58:
000038C0  2004      6262          move.l    D4,D0
                    6263   vsscanf_59:
000038C2  6000 035A 6264          bra       vsscanf_15
                    6265   vsscanf_53:
000038C6  53AE FFE4 6266          subq.l    #1,-28(A6)
000038CA  2F02      6267          move.l    D2,-(A7)
000038CC  2F05      6268          move.l    D5,-(A7)
000038CE  6100 FB2E 6269          bsr       @vsscanf_scanputback
000038D2  504F      6270          addq.w    #8,A7
000038D4  6000 0342 6271          bra       vsscanf_139
                    6272   vsscanf_40:
000038D8  0C83 0000 6273          cmp.l     #99,D3
000038DC  0063      
000038DE  6600 008E 6274          bne       vsscanf_60
000038E2  4A86      6275          tst.l     D6
000038E4  660A      6276          bne.s     vsscanf_62
000038E6  206E 0010 6277          move.l    16(A6),A0
000038EA  58AE 0010 6278          addq.l    #4,16(A6)
000038EE  2E10      6279          move.l    (A0),D7
                    6280   vsscanf_62:
000038F0  2F05      6281          move.l    D5,-(A7)
000038F2  4E93      6282          jsr       (A3)
000038F4  584F      6283          addq.w    #4,A7
000038F6  2400      6284          move.l    D0,D2
000038F8  52AE FFE4 6285          addq.l    #1,-28(A6)
000038FC  200A      6286          move.l    A2,D0
000038FE  0C80 0000 6287          cmp.l     #32767,D0
00003902  7FFF      
00003904  6604      6288          bne.s     vsscanf_64
00003906  347C 0001 6289          move.w    #1,A2
                    6290   vsscanf_64:
0000390A  0C82 FFFF 6291          cmp.l     #-1,D2
0000390E  FFFF      
00003910  6606      6292          bne.s     vsscanf_66
00003912  4A86      6293          tst.l     D6
00003914  6602      6294          bne.s     vsscanf_66
00003916  5384      6295          subq.l    #1,D4
                    6296   vsscanf_66:
00003918  200A      6297          move.l    A2,D0
0000391A  534A      6298          subq.w    #1,A2
0000391C  4A80      6299          tst.l     D0
0000391E  6720      6300          beq.s     vsscanf_70
00003920  0C82 FFFF 6301          cmp.l     #-1,D2
00003924  FFFF      
00003926  6718      6302          beq.s     vsscanf_70
00003928  4A86      6303          tst.l     D6
0000392A  6606      6304          bne.s     vsscanf_71
0000392C  2047      6305          move.l    D7,A0
0000392E  5287      6306          addq.l    #1,D7
00003930  1082      6307          move.b    D2,(A0)
                    6308   vsscanf_71:
00003932  2F05      6309          move.l    D5,-(A7)
00003934  4E93      6310          jsr       (A3)
00003936  584F      6311          addq.w    #4,A7
00003938  2400      6312          move.l    D0,D2
0000393A  52AE FFE4 6313          addq.l    #1,-28(A6)
0000393E  60D8      6314          bra       vsscanf_66
                    6315   vsscanf_70:
00003940  0C82 FFFF 6316          cmp.l     #-1,D2
00003944  FFFF      
00003946  660E      6317          bne.s     vsscanf_73
00003948  4A84      6318          tst.l     D4
0000394A  6704      6319          beq.s     vsscanf_75
0000394C  2004      6320          move.l    D4,D0
0000394E  6002      6321          bra.s     vsscanf_76
                    6322   vsscanf_75:
00003950  70FF      6323          moveq     #-1,D0
                    6324   vsscanf_76:
00003952  6000 02CA 6325          bra       vsscanf_15
                    6326   vsscanf_73:
00003956  4A86      6327          tst.l     D6
00003958  6602      6328          bne.s     vsscanf_77
0000395A  5284      6329          addq.l    #1,D4
                    6330   vsscanf_77:
0000395C  53AE FFE4 6331          subq.l    #1,-28(A6)
00003960  2F02      6332          move.l    D2,-(A7)
00003962  2F05      6333          move.l    D5,-(A7)
00003964  6100 FA98 6334          bsr       @vsscanf_scanputback
00003968  504F      6335          addq.w    #8,A7
0000396A  6000 02AC 6336          bra       vsscanf_139
                    6337   vsscanf_60:
0000396E  0C83 0000 6338          cmp.l     #105,D3
00003972  0069      
00003974  6600 0060 6339          bne       vsscanf_82
00003978  486E FFE4 6340          pea       -28(A6)
0000397C  2F05      6341          move.l    D5,-(A7)
0000397E  6100 FAE0 6342          bsr       @vsscanf_scanspace
00003982  504F      6343          addq.w    #8,A7
00003984  2400      6344          move.l    D0,D2
00003986  0C82 0000 6345          cmp.l     #48,D2
0000398A  0030      
0000398C  6600 0038 6346          bne       vsscanf_81
00003990  387C 0001 6347          move.w    #1,A4
00003994  2F05      6348          move.l    D5,-(A7)
00003996  4E93      6349          jsr       (A3)
00003998  584F      6350          addq.w    #4,A7
0000399A  2400      6351          move.l    D0,D2
0000399C  2F02      6352          move.l    D2,-(A7)
0000399E  6100 F936 6353          bsr       _tolower
000039A2  584F      6354          addq.w    #4,A7
000039A4  0C80 0000 6355          cmp.l     #120,D0
000039A8  0078      
000039AA  6604      6356          bne.s     vsscanf_83
000039AC  7678      6357          moveq     #120,D3
000039AE  6010      6358          bra.s     vsscanf_84
                    6359   vsscanf_83:
000039B0  53AE FFE4 6360          subq.l    #1,-28(A6)
000039B4  2F02      6361          move.l    D2,-(A7)
000039B6  2F05      6362          move.l    D5,-(A7)
000039B8  6100 FA44 6363          bsr       @vsscanf_scanputback
000039BC  504F      6364          addq.w    #8,A7
000039BE  766F      6365          moveq     #111,D3
                    6366   vsscanf_84:
000039C0  52AE FFE4 6367          addq.l    #1,-28(A6)
000039C4  6010      6368          bra.s     vsscanf_82
                    6369   vsscanf_81:
000039C6  53AE FFE4 6370          subq.l    #1,-28(A6)
000039CA  2F02      6371          move.l    D2,-(A7)
000039CC  2F05      6372          move.l    D5,-(A7)
000039CE  6100 FA2E 6373          bsr       @vsscanf_scanputback
000039D2  504F      6374          addq.w    #8,A7
000039D4  7664      6375          moveq     #100,D3
                    6376   vsscanf_82:
000039D6  0C83 0000 6377          cmp.l     #100,D3
000039DA  0064      
000039DC  671A      6378          beq.s     vsscanf_87
000039DE  0C83 0000 6379          cmp.l     #117,D3
000039E2  0075      
000039E4  6712      6380          beq.s     vsscanf_87
000039E6  0C83 0000 6381          cmp.l     #120,D3
000039EA  0078      
000039EC  670A      6382          beq.s     vsscanf_87
000039EE  0C83 0000 6383          cmp.l     #111,D3
000039F2  006F      
000039F4  6600 01A4 6384          bne       vsscanf_85
                    6385   vsscanf_87:
000039F8  486E FFE4 6386          pea       -28(A6)
000039FC  2F05      6387          move.l    D5,-(A7)
000039FE  6100 FA60 6388          bsr       @vsscanf_scanspace
00003A02  504F      6389          addq.w    #8,A7
00003A04  2400      6390          move.l    D0,D2
00003A06  2D7C 0000 6391          move.l    #10,-4(A6)
00003A0A  000A FFFC 
00003A0E  0C83 0000 6392          cmp.l     #120,D3
00003A12  0078      
00003A14  6608      6393          bne.s     vsscanf_88
00003A16  2D7C 0000 6394          move.l    #16,-4(A6)
00003A1A  0010 FFFC 
                    6395   vsscanf_88:
00003A1E  0C83 0000 6396          cmp.l     #111,D3
00003A22  006F      
00003A24  6608      6397          bne.s     vsscanf_90
00003A26  2D7C 0000 6398          move.l    #8,-4(A6)
00003A2A  0008 FFFC 
                    6399   vsscanf_90:
00003A2E  4A86      6400          tst.l     D6
00003A30  660A      6401          bne.s     vsscanf_92
00003A32  206E 0010 6402          move.l    16(A6),A0
00003A36  58AE 0010 6403          addq.l    #4,16(A6)
00003A3A  2E10      6404          move.l    (A0),D7
                    6405   vsscanf_92:
00003A3C  42AE FFE0 6406          clr.l     -32(A6)
00003A40  52AE FFE4 6407          addq.l    #1,-28(A6)
00003A44  0C83 0000 6408          cmp.l     #117,D3
00003A48  0075      
00003A4A  6720      6409          beq.s     vsscanf_94
00003A4C  0C82 0000 6410          cmp.l     #45,D2
00003A50  002D      
00003A52  6618      6411          bne.s     vsscanf_94
00003A54  2F05      6412          move.l    D5,-(A7)
00003A56  4E93      6413          jsr       (A3)
00003A58  584F      6414          addq.w    #4,A7
00003A5A  2400      6415          move.l    D0,D2
00003A5C  52AE FFE4 6416          addq.l    #1,-28(A6)
00003A60  2D7C 0000 6417          move.l    #1,-32(A6)
00003A64  0001 FFE0 
00003A68  387C 0001 6418          move.w    #1,A4
                    6419   vsscanf_94:
00003A6C  3A7C 0000 6420          move.w    #0,A5
00003A70  0C82 FFFF 6421          cmp.l     #-1,D2
00003A74  FFFF      
00003A76  660E      6422          bne.s     vsscanf_96
00003A78  4A84      6423          tst.l     D4
00003A7A  6704      6424          beq.s     vsscanf_98
00003A7C  2004      6425          move.l    D4,D0
00003A7E  6002      6426          bra.s     vsscanf_99
                    6427   vsscanf_98:
00003A80  70FF      6428          moveq     #-1,D0
                    6429   vsscanf_99:
00003A82  6000 019A 6430          bra       vsscanf_15
                    6431   vsscanf_96:
00003A86  200A      6432          move.l    A2,D0
00003A88  534A      6433          subq.w    #1,A2
00003A8A  4A80      6434          tst.l     D0
00003A8C  6700 0090 6435          beq       vsscanf_102
00003A90  0C83 0000 6436          cmp.l     #120,D3
00003A94  0078      
00003A96  6620      6437          bne.s     vsscanf_104
00003A98  2F02      6438          move.l    D2,-(A7)
00003A9A  6100 F8C8 6439          bsr       _toupper
00003A9E  584F      6440          addq.w    #4,A7
00003AA0  0C80 0000 6441          cmp.l     #65,D0
00003AA4  0041      
00003AA6  6D10      6442          blt.s     vsscanf_104
00003AA8  2F02      6443          move.l    D2,-(A7)
00003AAA  6100 F8B8 6444          bsr       _toupper
00003AAE  584F      6445          addq.w    #4,A7
00003AB0  0C80 0000 6446          cmp.l     #70,D0
00003AB4  0046      
00003AB6  6F14      6447          ble.s     vsscanf_103
                    6448   vsscanf_104:
00003AB8  2042      6449          move.l    D2,A0
00003ABA  43F9 0000 6450          lea       __ctype,A1
00003ABE  5A58      
00003AC0  1030 9801 6451          move.b    1(A0,A1.L),D0
00003AC4  C03C 0004 6452          and.b     #4,D0
00003AC8  6700 0054 6453          beq       vsscanf_102
                    6454   vsscanf_103:
00003ACC  2042      6455          move.l    D2,A0
00003ACE  43F9 0000 6456          lea       __ctype,A1
00003AD2  5A58      
00003AD4  1030 9801 6457          move.b    1(A0,A1.L),D0
00003AD8  C03C 0004 6458          and.b     #4,D0
00003ADC  6614      6459          bne.s     vsscanf_105
00003ADE  70F9      6460          moveq     #-7,D0
00003AE0  2F00      6461          move.l    D0,-(A7)
00003AE2  2F02      6462          move.l    D2,-(A7)
00003AE4  6100 F87E 6463          bsr       _toupper
00003AE8  584F      6464          addq.w    #4,A7
00003AEA  2200      6465          move.l    D0,D1
00003AEC  201F      6466          move.l    (A7)+,D0
00003AEE  D081      6467          add.l     D1,D0
00003AF0  2400      6468          move.l    D0,D2
                    6469   vsscanf_105:
00003AF2  2F0D      6470          move.l    A5,-(A7)
00003AF4  2F2E FFFC 6471          move.l    -4(A6),-(A7)
00003AF8  6100 0884 6472          bsr       LMUL
00003AFC  2017      6473          move.l    (A7),D0
00003AFE  504F      6474          addq.w    #8,A7
00003B00  D082      6475          add.l     D2,D0
00003B02  0480 0000 6476          sub.l     #48,D0
00003B06  0030      
00003B08  2A40      6477          move.l    D0,A5
00003B0A  2F05      6478          move.l    D5,-(A7)
00003B0C  4E93      6479          jsr       (A3)
00003B0E  584F      6480          addq.w    #4,A7
00003B10  2400      6481          move.l    D0,D2
00003B12  52AE FFE4 6482          addq.l    #1,-28(A6)
00003B16  387C 0001 6483          move.w    #1,A4
00003B1A  6000 FF6A 6484          bra       vsscanf_96
                    6485   vsscanf_102:
00003B1E  0C82 FFFF 6486          cmp.l     #-1,D2
00003B22  FFFF      
00003B24  671A      6487          beq.s     vsscanf_107
00003B26  2F02      6488          move.l    D2,-(A7)
00003B28  2F05      6489          move.l    D5,-(A7)
00003B2A  6100 F8D2 6490          bsr       @vsscanf_scanputback
00003B2E  504F      6491          addq.w    #8,A7
00003B30  53AE FFE4 6492          subq.l    #1,-28(A6)
00003B34  200C      6493          move.l    A4,D0
00003B36  6606      6494          bne.s     vsscanf_109
00003B38  2004      6495          move.l    D4,D0
00003B3A  6000 00E2 6496          bra       vsscanf_15
                    6497   vsscanf_109:
00003B3E  6012      6498          bra.s     vsscanf_111
                    6499   vsscanf_107:
00003B40  200C      6500          move.l    A4,D0
00003B42  660E      6501          bne.s     vsscanf_111
00003B44  4A84      6502          tst.l     D4
00003B46  6704      6503          beq.s     vsscanf_113
00003B48  2004      6504          move.l    D4,D0
00003B4A  6002      6505          bra.s     vsscanf_114
                    6506   vsscanf_113:
00003B4C  70FF      6507          moveq     #-1,D0
                    6508   vsscanf_114:
00003B4E  6000 00CE 6509          bra       vsscanf_15
                    6510   vsscanf_111:
00003B52  4AAE FFE0 6511          tst.l     -32(A6)
00003B56  6706      6512          beq.s     vsscanf_115
00003B58  200D      6513          move.l    A5,D0
00003B5A  4480      6514          neg.l     D0
00003B5C  2A40      6515          move.l    D0,A5
                    6516   vsscanf_115:
00003B5E  4A86      6517          tst.l     D6
00003B60  661E      6518          bne.s     vsscanf_117
00003B62  4AAE FFE8 6519          tst.l     -24(A6)
00003B66  6706      6520          beq.s     vsscanf_119
00003B68  2047      6521          move.l    D7,A0
00003B6A  208D      6522          move.l    A5,(A0)
00003B6C  6010      6523          bra.s     vsscanf_122
                    6524   vsscanf_119:
00003B6E  4AAE FFEC 6525          tst.l     -20(A6)
00003B72  6706      6526          beq.s     vsscanf_121
00003B74  2047      6527          move.l    D7,A0
00003B76  308D      6528          move.w    A5,(A0)
00003B78  6004      6529          bra.s     vsscanf_122
                    6530   vsscanf_121:
00003B7A  2047      6531          move.l    D7,A0
00003B7C  208D      6532          move.l    A5,(A0)
                    6533   vsscanf_122:
00003B7E  5284      6534          addq.l    #1,D4
                    6535   vsscanf_117:
00003B80  0C82 FFFF 6536          cmp.l     #-1,D2
00003B84  FFFF      
00003B86  660E      6537          bne.s     vsscanf_123
00003B88  4A84      6538          tst.l     D4
00003B8A  6704      6539          beq.s     vsscanf_125
00003B8C  2004      6540          move.l    D4,D0
00003B8E  6002      6541          bra.s     vsscanf_126
                    6542   vsscanf_125:
00003B90  70FF      6543          moveq     #-1,D0
                    6544   vsscanf_126:
00003B92  6000 008A 6545          bra       vsscanf_15
                    6546   vsscanf_123:
00003B96  6000 0080 6547          bra       vsscanf_139
                    6548   vsscanf_85:
00003B9A  0C83 0000 6549          cmp.l     #37,D3
00003B9E  0025      
00003BA0  6600 0040 6550          bne       vsscanf_127
00003BA4  2F05      6551          move.l    D5,-(A7)
00003BA6  4E93      6552          jsr       (A3)
00003BA8  584F      6553          addq.w    #4,A7
00003BAA  2400      6554          move.l    D0,D2
00003BAC  0C82 FFFF 6555          cmp.l     #-1,D2
00003BB0  FFFF      
00003BB2  660E      6556          bne.s     vsscanf_129
00003BB4  4A84      6557          tst.l     D4
00003BB6  6704      6558          beq.s     vsscanf_131
00003BB8  2004      6559          move.l    D4,D0
00003BBA  6002      6560          bra.s     vsscanf_132
                    6561   vsscanf_131:
00003BBC  70FF      6562          moveq     #-1,D0
                    6563   vsscanf_132:
00003BBE  6000 005E 6564          bra       vsscanf_15
                    6565   vsscanf_129:
00003BC2  52AE FFE4 6566          addq.l    #1,-28(A6)
00003BC6  B483      6567          cmp.l     D3,D2
00003BC8  6714      6568          beq.s     vsscanf_133
00003BCA  2F02      6569          move.l    D2,-(A7)
00003BCC  2F05      6570          move.l    D5,-(A7)
00003BCE  6100 F82E 6571          bsr       @vsscanf_scanputback
00003BD2  504F      6572          addq.w    #8,A7
00003BD4  53AE FFE4 6573          subq.l    #1,-28(A6)
00003BD8  2004      6574          move.l    D4,D0
00003BDA  6000 0042 6575          bra       vsscanf_15
                    6576   vsscanf_133:
00003BDE  6000 0038 6577          bra       vsscanf_139
                    6578   vsscanf_127:
00003BE2  2F05      6579          move.l    D5,-(A7)
00003BE4  4E93      6580          jsr       (A3)
00003BE6  584F      6581          addq.w    #4,A7
00003BE8  2400      6582          move.l    D0,D2
00003BEA  52AE FFE4 6583          addq.l    #1,-28(A6)
00003BEE  0C82 FFFF 6584          cmp.l     #-1,D2
00003BF2  FFFF      
00003BF4  660C      6585          bne.s     vsscanf_135
00003BF6  4A84      6586          tst.l     D4
00003BF8  6704      6587          beq.s     vsscanf_137
00003BFA  2004      6588          move.l    D4,D0
00003BFC  6002      6589          bra.s     vsscanf_138
                    6590   vsscanf_137:
00003BFE  70FF      6591          moveq     #-1,D0
                    6592   vsscanf_138:
00003C00  601C      6593          bra.s     vsscanf_15
                    6594   vsscanf_135:
00003C02  B483      6595          cmp.l     D3,D2
00003C04  6712      6596          beq.s     vsscanf_139
00003C06  2F02      6597          move.l    D2,-(A7)
00003C08  2F05      6598          move.l    D5,-(A7)
00003C0A  6100 F7F2 6599          bsr       @vsscanf_scanputback
00003C0E  504F      6600          addq.w    #8,A7
00003C10  53AE FFE4 6601          subq.l    #1,-28(A6)
00003C14  2004      6602          move.l    D4,D0
00003C16  6006      6603          bra.s     vsscanf_15
                    6604   vsscanf_139:
00003C18  6000 FA44 6605          bra       vsscanf_3
                    6606   vsscanf_5:
00003C1C  2004      6607          move.l    D4,D0
                    6608   vsscanf_15:
00003C1E  4CDF 3CFC 6609          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003C22  4E5E      6610          unlk      A6
00003C24  4E75      6611          rts
                    6612   _printf:
00003C26  4E56 FFFC 6613          link      A6,#-4
00003C2A  48E7 2000 6614          movem.l   D2,-(A7)
00003C2E  41EE 0008 6615          lea       8(A6),A0
00003C32  5848      6616          addq.w    #4,A0
00003C34  2408      6617          move.l    A0,D2
00003C36  2F02      6618          move.l    D2,-(A7)
00003C38  2F2E 0008 6619          move.l    8(A6),-(A7)
00003C3C  42A7      6620          clr.l     -(A7)
00003C3E  6100 00CA 6621          bsr       _vsprintf
00003C42  DEFC 000C 6622          add.w     #12,A7
00003C46  2D40 FFFC 6623          move.l    D0,-4(A6)
00003C4A  4282      6624          clr.l     D2
00003C4C  202E FFFC 6625          move.l    -4(A6),D0
00003C50  4CDF 0004 6626          movem.l   (A7)+,D2
00003C54  4E5E      6627          unlk      A6
00003C56  4E75      6628          rts
                    6629   @vsprintf_copy:
00003C58  4E56 0000 6630          link      A6,#0
00003C5C  206E 0008 6631          move.l    8(A6),A0
00003C60  4A90      6632          tst.l     (A0)
00003C62  6710      6633          beq.s     @vsprintf_copy_1
00003C64  202E 000C 6634          move.l    12(A6),D0
00003C68  206E 0008 6635          move.l    8(A6),A0
00003C6C  2250      6636          move.l    (A0),A1
00003C6E  5290      6637          addq.l    #1,(A0)
00003C70  1280      6638          move.b    D0,(A1)
00003C72  600A      6639          bra.s     @vsprintf_copy_2
                    6640   @vsprintf_copy_1:
00003C74  2F2E 000C 6641          move.l    12(A6),-(A7)
00003C78  6100 F5F0 6642          bsr       _putch
00003C7C  584F      6643          addq.w    #4,A7
                    6644   @vsprintf_copy_2:
00003C7E  4E5E      6645          unlk      A6
00003C80  4E75      6646          rts
                    6647   @vsprintf_getval:
00003C82  4E56 0000 6648          link      A6,#0
00003C86  48E7 3000 6649          movem.l   D2/D3,-(A7)
00003C8A  242E 0008 6650          move.l    8(A6),D2
00003C8E  4283      6651          clr.l     D3
00003C90  2042      6652          move.l    D2,A0
00003C92  2050      6653          move.l    (A0),A0
00003C94  1010      6654          move.b    (A0),D0
00003C96  4880      6655          ext.w     D0
00003C98  48C0      6656          ext.l     D0
00003C9A  0C80 0000 6657          cmp.l     #42,D0
00003C9E  002A      
00003CA0  6612      6658          bne.s     @vsprintf_getval_1
00003CA2  206E 000C 6659          move.l    12(A6),A0
00003CA6  2250      6660          move.l    (A0),A1
00003CA8  5890      6661          addq.l    #4,(A0)
00003CAA  2611      6662          move.l    (A1),D3
00003CAC  2042      6663          move.l    D2,A0
00003CAE  5290      6664          addq.l    #1,(A0)
00003CB0  6000 004E 6665          bra       @vsprintf_getval_5
                    6666   @vsprintf_getval_1:
00003CB4  2042      6667          move.l    D2,A0
00003CB6  2050      6668          move.l    (A0),A0
00003CB8  1010      6669          move.b    (A0),D0
00003CBA  4880      6670          ext.w     D0
00003CBC  48C0      6671          ext.l     D0
00003CBE  0C80 0000 6672          cmp.l     #48,D0
00003CC2  0030      
00003CC4  6D00 003A 6673          blt       @vsprintf_getval_5
00003CC8  2042      6674          move.l    D2,A0
00003CCA  2050      6675          move.l    (A0),A0
00003CCC  1010      6676          move.b    (A0),D0
00003CCE  4880      6677          ext.w     D0
00003CD0  48C0      6678          ext.l     D0
00003CD2  0C80 0000 6679          cmp.l     #57,D0
00003CD6  0039      
00003CD8  6E26      6680          bgt.s     @vsprintf_getval_5
00003CDA  2F03      6681          move.l    D3,-(A7)
00003CDC  4878 000A 6682          pea       10
00003CE0  6100 069C 6683          bsr       LMUL
00003CE4  2017      6684          move.l    (A7),D0
00003CE6  504F      6685          addq.w    #8,A7
00003CE8  2042      6686          move.l    D2,A0
00003CEA  2250      6687          move.l    (A0),A1
00003CEC  5290      6688          addq.l    #1,(A0)
00003CEE  1211      6689          move.b    (A1),D1
00003CF0  4881      6690          ext.w     D1
00003CF2  48C1      6691          ext.l     D1
00003CF4  D081      6692          add.l     D1,D0
00003CF6  0480 0000 6693          sub.l     #48,D0
00003CFA  0030      
00003CFC  2600      6694          move.l    D0,D3
00003CFE  60B4      6695          bra       @vsprintf_getval_1
                    6696   @vsprintf_getval_5:
00003D00  2003      6697          move.l    D3,D0
00003D02  4CDF 000C 6698          movem.l   (A7)+,D2/D3
00003D06  4E5E      6699          unlk      A6
00003D08  4E75      6700          rts
                    6701   _vsprintf:
00003D0A  4E56 FFCC 6702          link      A6,#-52
00003D0E  48E7 3F3C 6703          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003D12  45EE 0008 6704          lea       8(A6),A2
00003D16  47F8 3C58 6705          lea       @vsprintf_copy,A3
00003D1A  49F9 0000 6706          lea       _ultoa,A4
00003D1E  4588      
00003D20  4286      6707          clr.l     D6
                    6708   vsprintf_1:
00003D22  206E 000C 6709          move.l    12(A6),A0
00003D26  4A10      6710          tst.b     (A0)
00003D28  6700 0624 6711          beq       vsprintf_3
00003D2C  206E 000C 6712          move.l    12(A6),A0
00003D30  1010      6713          move.b    (A0),D0
00003D32  4880      6714          ext.w     D0
00003D34  48C0      6715          ext.l     D0
00003D36  0C80 0000 6716          cmp.l     #37,D0
00003D3A  0025      
00003D3C  671C      6717          beq.s     vsprintf_4
00003D3E  206E 000C 6718          move.l    12(A6),A0
00003D42  52AE 000C 6719          addq.l    #1,12(A6)
00003D46  1210      6720          move.b    (A0),D1
00003D48  4881      6721          ext.w     D1
00003D4A  48C1      6722          ext.l     D1
00003D4C  2F01      6723          move.l    D1,-(A7)
00003D4E  2F0A      6724          move.l    A2,-(A7)
00003D50  4E93      6725          jsr       (A3)
00003D52  504F      6726          addq.w    #8,A7
00003D54  5286      6727          addq.l    #1,D6
00003D56  6000 05F2 6728          bra       vsprintf_2
                    6729   vsprintf_4:
00003D5A  52AE 000C 6730          addq.l    #1,12(A6)
00003D5E  422E FFD3 6731          clr.b     -45(A6)
00003D62  422E FFD2 6732          clr.b     -46(A6)
00003D66  422E FFD0 6733          clr.b     -48(A6)
00003D6A  422E FFCF 6734          clr.b     -49(A6)
00003D6E  422E FFCE 6735          clr.b     -50(A6)
00003D72  422E FFCD 6736          clr.b     -51(A6)
00003D76  42AE FFFC 6737          clr.l     -4(A6)
00003D7A  7AFF      6738          moveq     #-1,D5
00003D7C  41EE FFDC 6739          lea       -36(A6),A0
00003D80  2608      6740          move.l    A0,D3
00003D82  2408      6741          move.l    A0,D2
                    6742   vsprintf_6:
00003D84  206E 000C 6743          move.l    12(A6),A0
00003D88  1010      6744          move.b    (A0),D0
00003D8A  4880      6745          ext.w     D0
00003D8C  48C0      6746          ext.l     D0
00003D8E  0C80 0000 6747          cmp.l     #43,D0
00003D92  002B      
00003D94  6730      6748          beq.s     vsprintf_12
00003D96  6E18      6749          bgt.s     vsprintf_15
00003D98  0C80 0000 6750          cmp.l     #35,D0
00003D9C  0023      
00003D9E  6700 003E 6751          beq       vsprintf_14
00003DA2  6E00 0046 6752          bgt       vsprintf_9
00003DA6  0C80 0000 6753          cmp.l     #32,D0
00003DAA  0020      
00003DAC  6724      6754          beq.s     vsprintf_13
00003DAE  603A      6755          bra.s     vsprintf_9
                    6756   vsprintf_15:
00003DB0  0C80 0000 6757          cmp.l     #45,D0
00003DB4  002D      
00003DB6  6702      6758          beq.s     vsprintf_11
00003DB8  6030      6759          bra.s     vsprintf_9
                    6760   vsprintf_11:
00003DBA  1D7C 0001 6761          move.b    #1,-51(A6)
00003DBE  FFCD      
00003DC0  52AE 000C 6762          addq.l    #1,12(A6)
00003DC4  6026      6763          bra.s     vsprintf_7
                    6764   vsprintf_12:
00003DC6  1D7C 0001 6765          move.b    #1,-50(A6)
00003DCA  FFCE      
00003DCC  52AE 000C 6766          addq.l    #1,12(A6)
00003DD0  601A      6767          bra.s     vsprintf_7
                    6768   vsprintf_13:
00003DD2  1D7C 0001 6769          move.b    #1,-49(A6)
00003DD6  FFCF      
00003DD8  52AE 000C 6770          addq.l    #1,12(A6)
00003DDC  600E      6771          bra.s     vsprintf_7
                    6772   vsprintf_14:
00003DDE  1D7C 0001 6773          move.b    #1,-48(A6)
00003DE2  FFD0      
00003DE4  52AE 000C 6774          addq.l    #1,12(A6)
00003DE8  6002      6775          bra.s     vsprintf_7
                    6776   vsprintf_9:
00003DEA  6002      6777          bra.s     vsprintf_8
                    6778   vsprintf_7:
00003DEC  6096      6779          bra       vsprintf_6
                    6780   vsprintf_8:
00003DEE  206E 000C 6781          move.l    12(A6),A0
00003DF2  1010      6782          move.b    (A0),D0
00003DF4  4880      6783          ext.w     D0
00003DF6  48C0      6784          ext.l     D0
00003DF8  0C80 0000 6785          cmp.l     #48,D0
00003DFC  0030      
00003DFE  660A      6786          bne.s     vsprintf_16
00003E00  52AE 000C 6787          addq.l    #1,12(A6)
00003E04  1D7C 0001 6788          move.b    #1,-46(A6)
00003E08  FFD2      
                    6789   vsprintf_16:
00003E0A  486E 0010 6790          pea       16(A6)
00003E0E  486E 000C 6791          pea       12(A6)
00003E12  6100 FE6E 6792          bsr       @vsprintf_getval
00003E16  504F      6793          addq.w    #8,A7
00003E18  2A40      6794          move.l    D0,A5
00003E1A  206E 000C 6795          move.l    12(A6),A0
00003E1E  1010      6796          move.b    (A0),D0
00003E20  4880      6797          ext.w     D0
00003E22  48C0      6798          ext.l     D0
00003E24  0C80 0000 6799          cmp.l     #46,D0
00003E28  002E      
00003E2A  6614      6800          bne.s     vsprintf_18
00003E2C  52AE 000C 6801          addq.l    #1,12(A6)
00003E30  486E 0010 6802          pea       16(A6)
00003E34  486E 000C 6803          pea       12(A6)
00003E38  6100 FE48 6804          bsr       @vsprintf_getval
00003E3C  504F      6805          addq.w    #8,A7
00003E3E  2A00      6806          move.l    D0,D5
                    6807   vsprintf_18:
00003E40  206E 000C 6808          move.l    12(A6),A0
00003E44  1010      6809          move.b    (A0),D0
00003E46  4880      6810          ext.w     D0
00003E48  48C0      6811          ext.l     D0
00003E4A  0C80 0000 6812          cmp.l     #108,D0
00003E4E  006C      
00003E50  660A      6813          bne.s     vsprintf_20
00003E52  52AE 000C 6814          addq.l    #1,12(A6)
00003E56  1D7C 0001 6815          move.b    #1,-45(A6)
00003E5A  FFD3      
                    6816   vsprintf_20:
00003E5C  206E 000C 6817          move.l    12(A6),A0
00003E60  1010      6818          move.b    (A0),D0
00003E62  4880      6819          ext.w     D0
00003E64  48C0      6820          ext.l     D0
00003E66  0C80 0000 6821          cmp.l     #111,D0
00003E6A  006F      
00003E6C  6700 00D4 6822          beq       vsprintf_27
00003E70  6E34      6823          bgt.s     vsprintf_33
00003E72  0C80 0000 6824          cmp.l     #100,D0
00003E76  0064      
00003E78  6700 0054 6825          beq       vsprintf_24
00003E7C  6E1C      6826          bgt.s     vsprintf_34
00003E7E  0C80 0000 6827          cmp.l     #99,D0
00003E82  0063      
00003E84  6700 012C 6828          beq       vsprintf_30
00003E88  6E00 016A 6829          bgt       vsprintf_22
00003E8C  0C80 0000 6830          cmp.l     #88,D0
00003E90  0058      
00003E92  6700 00E6 6831          beq       vsprintf_28
00003E96  6000 015C 6832          bra       vsprintf_22
                    6833   vsprintf_34:
00003E9A  0C80 0000 6834          cmp.l     #105,D0
00003E9E  0069      
00003EA0  672C      6835          beq.s     vsprintf_24
00003EA2  6000 0150 6836          bra       vsprintf_22
                    6837   vsprintf_33:
00003EA6  0C80 0000 6838          cmp.l     #117,D0
00003EAA  0075      
00003EAC  6700 005C 6839          beq       vsprintf_26
00003EB0  6E0E      6840          bgt.s     vsprintf_35
00003EB2  0C80 0000 6841          cmp.l     #115,D0
00003EB6  0073      
00003EB8  6700 011C 6842          beq       vsprintf_31
00003EBC  6000 0136 6843          bra       vsprintf_22
                    6844   vsprintf_35:
00003EC0  0C80 0000 6845          cmp.l     #120,D0
00003EC4  0078      
00003EC6  6700 00B2 6846          beq       vsprintf_28
00003ECA  6000 0128 6847          bra       vsprintf_22
                    6848   vsprintf_24:
00003ECE  4A2E FFD3 6849          tst.b     -45(A6)
00003ED2  671A      6850          beq.s     vsprintf_36
00003ED4  4878 000A 6851          pea       10
00003ED8  2F03      6852          move.l    D3,-(A7)
00003EDA  206E 0010 6853          move.l    16(A6),A0
00003EDE  58AE 0010 6854          addq.l    #4,16(A6)
00003EE2  2F10      6855          move.l    (A0),-(A7)
00003EE4  6100 061E 6856          bsr       _ltoa
00003EE8  DEFC 000C 6857          add.w     #12,A7
00003EEC  6018      6858          bra.s     vsprintf_37
                    6859   vsprintf_36:
00003EEE  4878 000A 6860          pea       10
00003EF2  2F03      6861          move.l    D3,-(A7)
00003EF4  206E 0010 6862          move.l    16(A6),A0
00003EF8  58AE 0010 6863          addq.l    #4,16(A6)
00003EFC  2F10      6864          move.l    (A0),-(A7)
00003EFE  6100 0604 6865          bsr       _ltoa
00003F02  DEFC 000C 6866          add.w     #12,A7
                    6867   vsprintf_37:
00003F06  6000 00FA 6868          bra       vsprintf_23
                    6869   vsprintf_26:
00003F0A  4A2E FFD3 6870          tst.b     -45(A6)
00003F0E  6718      6871          beq.s     vsprintf_38
00003F10  4878 000A 6872          pea       10
00003F14  2F03      6873          move.l    D3,-(A7)
00003F16  206E 0010 6874          move.l    16(A6),A0
00003F1A  58AE 0010 6875          addq.l    #4,16(A6)
00003F1E  2F10      6876          move.l    (A0),-(A7)
00003F20  4E94      6877          jsr       (A4)
00003F22  DEFC 000C 6878          add.w     #12,A7
00003F26  6016      6879          bra.s     vsprintf_39
                    6880   vsprintf_38:
00003F28  4878 000A 6881          pea       10
00003F2C  2F03      6882          move.l    D3,-(A7)
00003F2E  206E 0010 6883          move.l    16(A6),A0
00003F32  58AE 0010 6884          addq.l    #4,16(A6)
00003F36  2F10      6885          move.l    (A0),-(A7)
00003F38  4E94      6886          jsr       (A4)
00003F3A  DEFC 000C 6887          add.w     #12,A7
                    6888   vsprintf_39:
00003F3E  6000 00C2 6889          bra       vsprintf_23
                    6890   vsprintf_27:
00003F42  4A2E FFD3 6891          tst.b     -45(A6)
00003F46  6718      6892          beq.s     vsprintf_40
00003F48  4878 0008 6893          pea       8
00003F4C  2F03      6894          move.l    D3,-(A7)
00003F4E  206E 0010 6895          move.l    16(A6),A0
00003F52  58AE 0010 6896          addq.l    #4,16(A6)
00003F56  2F10      6897          move.l    (A0),-(A7)
00003F58  4E94      6898          jsr       (A4)
00003F5A  DEFC 000C 6899          add.w     #12,A7
00003F5E  6016      6900          bra.s     vsprintf_41
                    6901   vsprintf_40:
00003F60  4878 0008 6902          pea       8
00003F64  2F03      6903          move.l    D3,-(A7)
00003F66  206E 0010 6904          move.l    16(A6),A0
00003F6A  58AE 0010 6905          addq.l    #4,16(A6)
00003F6E  2F10      6906          move.l    (A0),-(A7)
00003F70  4E94      6907          jsr       (A4)
00003F72  DEFC 000C 6908          add.w     #12,A7
                    6909   vsprintf_41:
00003F76  6000 008A 6910          bra       vsprintf_23
                    6911   vsprintf_28:
00003F7A  4A2E FFD3 6912          tst.b     -45(A6)
00003F7E  6718      6913          beq.s     vsprintf_42
00003F80  4878 0010 6914          pea       16
00003F84  2F03      6915          move.l    D3,-(A7)
00003F86  206E 0010 6916          move.l    16(A6),A0
00003F8A  58AE 0010 6917          addq.l    #4,16(A6)
00003F8E  2F10      6918          move.l    (A0),-(A7)
00003F90  4E94      6919          jsr       (A4)
00003F92  DEFC 000C 6920          add.w     #12,A7
00003F96  6016      6921          bra.s     vsprintf_43
                    6922   vsprintf_42:
00003F98  4878 0010 6923          pea       16
00003F9C  2F03      6924          move.l    D3,-(A7)
00003F9E  206E 0010 6925          move.l    16(A6),A0
00003FA2  58AE 0010 6926          addq.l    #4,16(A6)
00003FA6  2F10      6927          move.l    (A0),-(A7)
00003FA8  4E94      6928          jsr       (A4)
00003FAA  DEFC 000C 6929          add.w     #12,A7
                    6930   vsprintf_43:
00003FAE  6000 0052 6931          bra       vsprintf_23
                    6932   vsprintf_30:
00003FB2  206E 0010 6933          move.l    16(A6),A0
00003FB6  58AE 0010 6934          addq.l    #4,16(A6)
00003FBA  2010      6935          move.l    (A0),D0
00003FBC  2042      6936          move.l    D2,A0
00003FBE  5282      6937          addq.l    #1,D2
00003FC0  1080      6938          move.b    D0,(A0)
00003FC2  2042      6939          move.l    D2,A0
00003FC4  4210      6940          clr.b     (A0)
00003FC6  200D      6941          move.l    A5,D0
00003FC8  6704      6942          beq.s     vsprintf_44
00003FCA  200D      6943          move.l    A5,D0
00003FCC  6002      6944          bra.s     vsprintf_45
                    6945   vsprintf_44:
00003FCE  7001      6946          moveq     #1,D0
                    6947   vsprintf_45:
00003FD0  2A00      6948          move.l    D0,D5
00003FD2  6000 002E 6949          bra       vsprintf_23
                    6950   vsprintf_31:
00003FD6  206E 0010 6951          move.l    16(A6),A0
00003FDA  58AE 0010 6952          addq.l    #4,16(A6)
00003FDE  2610      6953          move.l    (A0),D3
00003FE0  0C85 FFFF 6954          cmp.l     #-1,D5
00003FE4  FFFF      
00003FE6  660A      6955          bne.s     vsprintf_46
00003FE8  2F03      6956          move.l    D3,-(A7)
00003FEA  6100 05FE 6957          bsr       _strlen
00003FEE  584F      6958          addq.w    #4,A7
00003FF0  2A00      6959          move.l    D0,D5
                    6960   vsprintf_46:
00003FF2  600E      6961          bra.s     vsprintf_23
                    6962   vsprintf_22:
00003FF4  206E 000C 6963          move.l    12(A6),A0
00003FF8  2242      6964          move.l    D2,A1
00003FFA  5282      6965          addq.l    #1,D2
00003FFC  1290      6966          move.b    (A0),(A1)
00003FFE  2042      6967          move.l    D2,A0
00004000  4210      6968          clr.b     (A0)
                    6969   vsprintf_23:
00004002  2F03      6970          move.l    D3,-(A7)
00004004  6100 05E4 6971          bsr       _strlen
00004008  584F      6972          addq.w    #4,A7
0000400A  1800      6973          move.b    D0,D4
0000400C  206E 000C 6974          move.l    12(A6),A0
00004010  1010      6975          move.b    (A0),D0
00004012  4880      6976          ext.w     D0
00004014  48C0      6977          ext.l     D0
00004016  0C80 0000 6978          cmp.l     #115,D0
0000401A  0073      
0000401C  6618      6979          bne.s     vsprintf_48
0000401E  0C85 0000 6980          cmp.l     #0,D5
00004022  0000      
00004024  6D10      6981          blt.s     vsprintf_48
00004026  4884      6982          ext.w     D4
00004028  48C4      6983          ext.l     D4
0000402A  B885      6984          cmp.l     D5,D4
0000402C  6F04      6985          ble.s     vsprintf_50
0000402E  1005      6986          move.b    D5,D0
00004030  6002      6987          bra.s     vsprintf_51
                    6988   vsprintf_50:
00004032  1004      6989          move.b    D4,D0
                    6990   vsprintf_51:
00004034  1800      6991          move.b    D0,D4
                    6992   vsprintf_48:
00004036  206E 000C 6993          move.l    12(A6),A0
0000403A  1010      6994          move.b    (A0),D0
0000403C  4880      6995          ext.w     D0
0000403E  48C0      6996          ext.l     D0
00004040  0C80 0000 6997          cmp.l     #88,D0
00004044  0058      
00004046  6600 0026 6998          bne       vsprintf_56
0000404A  41EE FFDC 6999          lea       -36(A6),A0
0000404E  2408      7000          move.l    A0,D2
                    7001   vsprintf_54:
00004050  2042      7002          move.l    D2,A0
00004052  4A10      7003          tst.b     (A0)
00004054  6718      7004          beq.s     vsprintf_56
00004056  2042      7005          move.l    D2,A0
00004058  1210      7006          move.b    (A0),D1
0000405A  4881      7007          ext.w     D1
0000405C  48C1      7008          ext.l     D1
0000405E  2F01      7009          move.l    D1,-(A7)
00004060  6100 F302 7010          bsr       _toupper
00004064  584F      7011          addq.w    #4,A7
00004066  2042      7012          move.l    D2,A0
00004068  1080      7013          move.b    D0,(A0)
0000406A  5282      7014          addq.l    #1,D2
0000406C  60E2      7015          bra       vsprintf_54
                    7016   vsprintf_56:
0000406E  7E00      7017          moveq     #0,D7
00004070  41EE FFD4 7018          lea       -44(A6),A0
00004074  2408      7019          move.l    A0,D2
00004076  206E 000C 7020          move.l    12(A6),A0
0000407A  1010      7021          move.b    (A0),D0
0000407C  4880      7022          ext.w     D0
0000407E  48C0      7023          ext.l     D0
00004080  0C80 0000 7024          cmp.l     #100,D0
00004084  0064      
00004086  6714      7025          beq.s     vsprintf_59
00004088  206E 000C 7026          move.l    12(A6),A0
0000408C  1010      7027          move.b    (A0),D0
0000408E  4880      7028          ext.w     D0
00004090  48C0      7029          ext.l     D0
00004092  0C80 0000 7030          cmp.l     #105,D0
00004096  0069      
00004098  6600 0076 7031          bne       vsprintf_65
                    7032   vsprintf_59:
0000409C  4A2E FFCE 7033          tst.b     -50(A6)
000040A0  6612      7034          bne.s     vsprintf_62
000040A2  2043      7035          move.l    D3,A0
000040A4  1010      7036          move.b    (A0),D0
000040A6  4880      7037          ext.w     D0
000040A8  48C0      7038          ext.l     D0
000040AA  0C80 0000 7039          cmp.l     #45,D0
000040AE  002D      
000040B0  6600 002E 7040          bne       vsprintf_60
                    7041   vsprintf_62:
000040B4  2043      7042          move.l    D3,A0
000040B6  1010      7043          move.b    (A0),D0
000040B8  4880      7044          ext.w     D0
000040BA  48C0      7045          ext.l     D0
000040BC  0C80 0000 7046          cmp.l     #45,D0
000040C0  002D      
000040C2  660E      7047          bne.s     vsprintf_63
000040C4  2043      7048          move.l    D3,A0
000040C6  5283      7049          addq.l    #1,D3
000040C8  2242      7050          move.l    D2,A1
000040CA  5282      7051          addq.l    #1,D2
000040CC  1290      7052          move.b    (A0),(A1)
000040CE  5304      7053          subq.b    #1,D4
000040D0  6008      7054          bra.s     vsprintf_64
                    7055   vsprintf_63:
000040D2  2042      7056          move.l    D2,A0
000040D4  5282      7057          addq.l    #1,D2
000040D6  10BC 002B 7058          move.b    #43,(A0)
                    7059   vsprintf_64:
000040DA  5287      7060          addq.l    #1,D7
000040DC  6000 0032 7061          bra       vsprintf_65
                    7062   vsprintf_60:
000040E0  4A2E FFCF 7063          tst.b     -49(A6)
000040E4  6700 002A 7064          beq       vsprintf_65
000040E8  2043      7065          move.l    D3,A0
000040EA  1010      7066          move.b    (A0),D0
000040EC  4880      7067          ext.w     D0
000040EE  48C0      7068          ext.l     D0
000040F0  0C80 0000 7069          cmp.l     #45,D0
000040F4  002D      
000040F6  660E      7070          bne.s     vsprintf_67
000040F8  2043      7071          move.l    D3,A0
000040FA  5283      7072          addq.l    #1,D3
000040FC  2242      7073          move.l    D2,A1
000040FE  5282      7074          addq.l    #1,D2
00004100  1290      7075          move.b    (A0),(A1)
00004102  5304      7076          subq.b    #1,D4
00004104  6008      7077          bra.s     vsprintf_68
                    7078   vsprintf_67:
00004106  2042      7079          move.l    D2,A0
00004108  5282      7080          addq.l    #1,D2
0000410A  10BC 0020 7081          move.b    #32,(A0)
                    7082   vsprintf_68:
0000410E  5287      7083          addq.l    #1,D7
                    7084   vsprintf_65:
00004110  4A2E FFD0 7085          tst.b     -48(A6)
00004114  6700 0066 7086          beq       vsprintf_77
00004118  206E 000C 7087          move.l    12(A6),A0
0000411C  1010      7088          move.b    (A0),D0
0000411E  4880      7089          ext.w     D0
00004120  48C0      7090          ext.l     D0
00004122  0C80 0000 7091          cmp.l     #111,D0
00004126  006F      
00004128  671A      7092          beq.s     vsprintf_73
0000412A  6E0C      7093          bgt.s     vsprintf_76
0000412C  0C80 0000 7094          cmp.l     #88,D0
00004130  0058      
00004132  6710      7095          beq.s     vsprintf_73
00004134  6000 0046 7096          bra       vsprintf_77
                    7097   vsprintf_76:
00004138  0C80 0000 7098          cmp.l     #120,D0
0000413C  0078      
0000413E  6704      7099          beq.s     vsprintf_73
00004140  6000 003A 7100          bra       vsprintf_77
                    7101   vsprintf_73:
00004144  2042      7102          move.l    D2,A0
00004146  5282      7103          addq.l    #1,D2
00004148  10BC 0030 7104          move.b    #48,(A0)
0000414C  5287      7105          addq.l    #1,D7
0000414E  206E 000C 7106          move.l    12(A6),A0
00004152  1010      7107          move.b    (A0),D0
00004154  4880      7108          ext.w     D0
00004156  48C0      7109          ext.l     D0
00004158  0C80 0000 7110          cmp.l     #120,D0
0000415C  0078      
0000415E  6712      7111          beq.s     vsprintf_79
00004160  206E 000C 7112          move.l    12(A6),A0
00004164  1010      7113          move.b    (A0),D0
00004166  4880      7114          ext.w     D0
00004168  48C0      7115          ext.l     D0
0000416A  0C80 0000 7116          cmp.l     #88,D0
0000416E  0058      
00004170  660A      7117          bne.s     vsprintf_77
                    7118   vsprintf_79:
00004172  2042      7119          move.l    D2,A0
00004174  5282      7120          addq.l    #1,D2
00004176  10BC 0078 7121          move.b    #120,(A0)
0000417A  5287      7122          addq.l    #1,D7
                    7123   vsprintf_77:
0000417C  2042      7124          move.l    D2,A0
0000417E  4210      7125          clr.b     (A0)
00004180  206E 000C 7126          move.l    12(A6),A0
00004184  1010      7127          move.b    (A0),D0
00004186  4880      7128          ext.w     D0
00004188  48C0      7129          ext.l     D0
0000418A  0C80 0000 7130          cmp.l     #105,D0
0000418E  0069      
00004190  6700 0076 7131          beq       vsprintf_82
00004194  6E42      7132          bgt.s     vsprintf_93
00004196  0C80 0000 7133          cmp.l     #99,D0
0000419A  0063      
0000419C  6700 0084 7134          beq       vsprintf_96
000041A0  6E1C      7135          bgt.s     vsprintf_94
000041A2  0C80 0000 7136          cmp.l     #88,D0
000041A6  0058      
000041A8  6700 005E 7137          beq       vsprintf_82
000041AC  6E00 0184 7138          bgt       vsprintf_80
000041B0  0C80 0000 7139          cmp.l     #69,D0
000041B4  0045      
000041B6  6700 0050 7140          beq       vsprintf_82
000041BA  6000 0176 7141          bra       vsprintf_80
                    7142   vsprintf_94:
000041BE  0C80 0000 7143          cmp.l     #101,D0
000041C2  0065      
000041C4  6700 0042 7144          beq       vsprintf_82
000041C8  6E00 0168 7145          bgt       vsprintf_80
000041CC  0C80 0000 7146          cmp.l     #100,D0
000041D0  0064      
000041D2  6734      7147          beq.s     vsprintf_82
000041D4  6000 015C 7148          bra       vsprintf_80
                    7149   vsprintf_93:
000041D8  0C80 0000 7150          cmp.l     #117,D0
000041DC  0075      
000041DE  6728      7151          beq.s     vsprintf_82
000041E0  6E1A      7152          bgt.s     vsprintf_95
000041E2  0C80 0000 7153          cmp.l     #115,D0
000041E6  0073      
000041E8  6700 0038 7154          beq       vsprintf_96
000041EC  6E00 0144 7155          bgt       vsprintf_80
000041F0  0C80 0000 7156          cmp.l     #111,D0
000041F4  006F      
000041F6  6710      7157          beq.s     vsprintf_82
000041F8  6000 0138 7158          bra       vsprintf_80
                    7159   vsprintf_95:
000041FC  0C80 0000 7160          cmp.l     #120,D0
00004200  0078      
00004202  6704      7161          beq.s     vsprintf_82
00004204  6000 012C 7162          bra       vsprintf_80
                    7163   vsprintf_82:
00004208  4A2E FFD2 7164          tst.b     -46(A6)
0000420C  6714      7165          beq.s     vsprintf_96
0000420E  4A2E FFCD 7166          tst.b     -51(A6)
00004212  660E      7167          bne.s     vsprintf_96
00004214  200D      7168          move.l    A5,D0
00004216  9087      7169          sub.l     D7,D0
00004218  4884      7170          ext.w     D4
0000421A  48C4      7171          ext.l     D4
0000421C  9084      7172          sub.l     D4,D0
0000421E  2D40 FFFC 7173          move.l    D0,-4(A6)
                    7174   vsprintf_96:
00004222  202E FFFC 7175          move.l    -4(A6),D0
00004226  0C80 0000 7176          cmp.l     #0,D0
0000422A  0000      
0000422C  6C04      7177          bge.s     vsprintf_98
0000422E  42AE FFFC 7178          clr.l     -4(A6)
                    7179   vsprintf_98:
00004232  4A2E FFCD 7180          tst.b     -51(A6)
00004236  6600 0030 7181          bne       vsprintf_104
0000423A  4884      7182          ext.w     D4
0000423C  48C4      7183          ext.l     D4
0000423E  2004      7184          move.l    D4,D0
00004240  D0AE FFFC 7185          add.l     -4(A6),D0
00004244  D087      7186          add.l     D7,D0
00004246  1D40 FFD1 7187          move.b    D0,-47(A6)
                    7188   vsprintf_102:
0000424A  102E FFD1 7189          move.b    -47(A6),D0
0000424E  4880      7190          ext.w     D0
00004250  48C0      7191          ext.l     D0
00004252  220D      7192          move.l    A5,D1
00004254  534D      7193          subq.w    #1,A5
00004256  B081      7194          cmp.l     D1,D0
00004258  6C0E      7195          bge.s     vsprintf_104
0000425A  4878 0020 7196          pea       32
0000425E  2F0A      7197          move.l    A2,-(A7)
00004260  4E93      7198          jsr       (A3)
00004262  504F      7199          addq.w    #8,A7
00004264  5286      7200          addq.l    #1,D6
00004266  60E2      7201          bra       vsprintf_102
                    7202   vsprintf_104:
00004268  41EE FFD4 7203          lea       -44(A6),A0
0000426C  2408      7204          move.l    A0,D2
                    7205   vsprintf_105:
0000426E  2042      7206          move.l    D2,A0
00004270  4A10      7207          tst.b     (A0)
00004272  6716      7208          beq.s     vsprintf_107
00004274  2042      7209          move.l    D2,A0
00004276  5282      7210          addq.l    #1,D2
00004278  1210      7211          move.b    (A0),D1
0000427A  4881      7212          ext.w     D1
0000427C  48C1      7213          ext.l     D1
0000427E  2F01      7214          move.l    D1,-(A7)
00004280  2F0A      7215          move.l    A2,-(A7)
00004282  4E93      7216          jsr       (A3)
00004284  504F      7217          addq.w    #8,A7
00004286  5286      7218          addq.l    #1,D6
00004288  60E4      7219          bra       vsprintf_105
                    7220   vsprintf_107:
0000428A  202E FFFC 7221          move.l    -4(A6),D0
0000428E  1D40 FFD1 7222          move.b    D0,-47(A6)
                    7223   vsprintf_108:
00004292  102E FFD1 7224          move.b    -47(A6),D0
00004296  532E FFD1 7225          subq.b    #1,-47(A6)
0000429A  4A00      7226          tst.b     D0
0000429C  670E      7227          beq.s     vsprintf_110
0000429E  4878 0030 7228          pea       48
000042A2  2F0A      7229          move.l    A2,-(A7)
000042A4  4E93      7230          jsr       (A3)
000042A6  504F      7231          addq.w    #8,A7
000042A8  5286      7232          addq.l    #1,D6
000042AA  60E6      7233          bra       vsprintf_108
                    7234   vsprintf_110:
000042AC  2043      7235          move.l    D3,A0
000042AE  4A10      7236          tst.b     (A0)
000042B0  6700 0048 7237          beq       vsprintf_113
000042B4  206E 000C 7238          move.l    12(A6),A0
000042B8  1010      7239          move.b    (A0),D0
000042BA  4880      7240          ext.w     D0
000042BC  48C0      7241          ext.l     D0
000042BE  0C80 0000 7242          cmp.l     #115,D0
000042C2  0073      
000042C4  670C      7243          beq.s     vsprintf_116
000042C6  6E18      7244          bgt.s     vsprintf_119
000042C8  0C80 0000 7245          cmp.l     #99,D0
000042CC  0063      
000042CE  6702      7246          beq.s     vsprintf_116
000042D0  600E      7247          bra.s     vsprintf_119
                    7248   vsprintf_116:
000042D2  2005      7249          move.l    D5,D0
000042D4  5385      7250          subq.l    #1,D5
000042D6  0C80 0000 7251          cmp.l     #0,D0
000042DA  0000      
000042DC  6E02      7252          bgt.s     vsprintf_119
000042DE  6016      7253          bra.s     vsprintf_115
                    7254   vsprintf_119:
000042E0  2043      7255          move.l    D3,A0
000042E2  5283      7256          addq.l    #1,D3
000042E4  1210      7257          move.b    (A0),D1
000042E6  4881      7258          ext.w     D1
000042E8  48C1      7259          ext.l     D1
000042EA  2F01      7260          move.l    D1,-(A7)
000042EC  2F0A      7261          move.l    A2,-(A7)
000042EE  4E93      7262          jsr       (A3)
000042F0  504F      7263          addq.w    #8,A7
000042F2  5286      7264          addq.l    #1,D6
000042F4  6002      7265          bra.s     vsprintf_112
                    7266   vsprintf_115:
000042F6  6002      7267          bra.s     vsprintf_113
                    7268   vsprintf_112:
000042F8  60B2      7269          bra       vsprintf_110
                    7270   vsprintf_113:
000042FA  4A2E FFCD 7271          tst.b     -51(A6)
000042FE  6700 0030 7272          beq       vsprintf_125
00004302  4884      7273          ext.w     D4
00004304  48C4      7274          ext.l     D4
00004306  2004      7275          move.l    D4,D0
00004308  D0AE FFFC 7276          add.l     -4(A6),D0
0000430C  D087      7277          add.l     D7,D0
0000430E  1D40 FFD1 7278          move.b    D0,-47(A6)
                    7279   vsprintf_123:
00004312  102E FFD1 7280          move.b    -47(A6),D0
00004316  4880      7281          ext.w     D0
00004318  48C0      7282          ext.l     D0
0000431A  220D      7283          move.l    A5,D1
0000431C  534D      7284          subq.w    #1,A5
0000431E  B081      7285          cmp.l     D1,D0
00004320  6C0E      7286          bge.s     vsprintf_125
00004322  4878 0020 7287          pea       32
00004326  2F0A      7288          move.l    A2,-(A7)
00004328  4E93      7289          jsr       (A3)
0000432A  504F      7290          addq.w    #8,A7
0000432C  5386      7291          subq.l    #1,D6
0000432E  60E2      7292          bra       vsprintf_123
                    7293   vsprintf_125:
00004330  6014      7294          bra.s     vsprintf_81
                    7295   vsprintf_80:
00004332  206E 000C 7296          move.l    12(A6),A0
00004336  1210      7297          move.b    (A0),D1
00004338  4881      7298          ext.w     D1
0000433A  48C1      7299          ext.l     D1
0000433C  2F01      7300          move.l    D1,-(A7)
0000433E  2F0A      7301          move.l    A2,-(A7)
00004340  4E93      7302          jsr       (A3)
00004342  504F      7303          addq.w    #8,A7
00004344  5286      7304          addq.l    #1,D6
                    7305   vsprintf_81:
00004346  52AE 000C 7306          addq.l    #1,12(A6)
                    7307   vsprintf_2:
0000434A  6000 F9D6 7308          bra       vsprintf_1
                    7309   vsprintf_3:
0000434E  4A92      7310          tst.l     (A2)
00004350  6710      7311          beq.s     vsprintf_126
00004352  4201      7312          clr.b     D1
00004354  C2BC 0000 7313          and.l     #255,D1
00004358  00FF      
0000435A  2F01      7314          move.l    D1,-(A7)
0000435C  2F0A      7315          move.l    A2,-(A7)
0000435E  4E93      7316          jsr       (A3)
00004360  504F      7317          addq.w    #8,A7
                    7318   vsprintf_126:
00004362  2006      7319          move.l    D6,D0
00004364  4CDF 3CFC 7320          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004368  4E5E      7321          unlk      A6
0000436A  4E75      7322          rts
                    7323   ULMUL:
0000436C  4E56 0000 7324          link    A6,#0
00004370  48E7 C000 7325          movem.l D0/D1,-(A7)
00004374  222E 0008 7326          move.l  8(A6),D1
00004378  202E 000C 7327          move.l  12(A6),D0
0000437C  602C      7328          bra.s   lmul_3
                    7329   LMUL:
0000437E  4E56 0000 7330          link    A6,#0
00004382  48E7 C000 7331          movem.l D0/D1,-(A7)
00004386  222E 0008 7332          move.l  8(A6),D1
0000438A  202E 000C 7333          move.l  12(A6),D0
0000438E  4A80      7334          tst.l   D0
00004390  6A0A      7335          bpl.s   lmul_1
00004392  4480      7336          neg.l   D0
00004394  4A81      7337          tst.l   D1
00004396  6A0A      7338          bpl.s   lmul_2
00004398  4481      7339          neg.l   D1
0000439A  600E      7340          bra.s   lmul_3
                    7341   lmul_1:
0000439C  4A81      7342          tst.l   D1
0000439E  6A0A      7343          bpl.s   lmul_3
000043A0  4481      7344          neg.l   D1
                    7345   lmul_2:
000043A2  6114      7346          bsr.s   domul
000043A4  4481      7347          neg.l   D1
000043A6  4080      7348          negx.l  D0
000043A8  6002      7349          bra.s   lmul_4
                    7350   lmul_3:
000043AA  610C      7351          bsr.s   domul
                    7352   lmul_4:
000043AC  2D41 0008 7353          move.l  D1,8(A6)
000043B0  4CDF 0003 7354          movem.l (A7)+,D0/D1
000043B4  4E5E      7355          unlk    A6
000043B6  4E75      7356          rts
                    7357   domul:
000043B8  0C81 0000 7358          cmpi.l  #$FFFF,D1
000043BC  FFFF      
000043BE  620C      7359          bhi.s   domul_1
000043C0  0C80 0000 7360          cmpi.l  #$FFFF,D0
000043C4  FFFF      
000043C6  620E      7361          bhi.s   domul_2
000043C8  C2C0      7362          mulu    D0,D1
000043CA  4E75      7363          rts
                    7364   domul_1:
000043CC  0C80 0000 7365          cmpi.l  #$FFFF,D0
000043D0  FFFF      
000043D2  6218      7366          bhi.s   domul_4
000043D4  6002      7367          bra.s   domul_3
                    7368   domul_2
000043D6  C141      7369          exg     D0,D1
                    7370   domul_3:
000043D8  2F02      7371          move.l  D2,-(A7)
000043DA  2401      7372          move.l  D1,D2
000043DC  4842      7373          swap    D2
000043DE  C2C0      7374          mulu    D0,D1
000043E0  C4C0      7375          mulu    D0,D2
000043E2  4842      7376          swap    D2
000043E4  4242      7377          clr.w   D2
000043E6  D282      7378          add.l   D2,D1
000043E8  241F      7379          move.l  (A7)+,D2
000043EA  4E75      7380          rts
                    7381   domul_4:
000043EC  48E7 3000 7382          movem.l D2/D3,-(A7)
000043F0  2401      7383          move.l  D1,D2
000043F2  2601      7384          move.l  D1,D3
000043F4  C2C0      7385          mulu    D0,D1
000043F6  4842      7386          swap    D2
000043F8  C4C0      7387          mulu    D0,D2
000043FA  4840      7388          swap    D0
000043FC  C6C0      7389          mulu    D0,D3
000043FE  D483      7390          add.l   D3,D2
00004400  4842      7391          swap    D2
00004402  4242      7392          clr.w   D2
00004404  D282      7393          add.l   D2,D1
00004406  4CDF 000C 7394          movem.l (A7)+,D2/D3
0000440A  4E75      7395          rts
                    7396   _gets:
0000440C  4E56 0000 7397          link      A6,#0
00004410  48E7 3820 7398          movem.l   D2/D3/D4/A2,-(A7)
00004414  45F8 326A 7399          lea       _putch,A2
00004418  282E 0008 7400          move.l    8(A6),D4
0000441C  2404      7401          move.l    D4,D2
                    7402   gets_1:
0000441E  6100 EE7A 7403          bsr       _getch
00004422  2600      7404          move.l    D0,D3
00004424  0C80 0000 7405          cmp.l     #10,D0
00004428  000A      
0000442A  6700 003C 7406          beq       gets_3
0000442E  0C83 0000 7407          cmp.l     #8,D3
00004432  0008      
00004434  6712      7408          beq.s     gets_4
00004436  2042      7409          move.l    D2,A0
00004438  5282      7410          addq.l    #1,D2
0000443A  1083      7411          move.b    D3,(A0)
0000443C  4883      7412          ext.w     D3
0000443E  48C3      7413          ext.l     D3
00004440  2F03      7414          move.l    D3,-(A7)
00004442  4E92      7415          jsr       (A2)
00004444  584F      7416          addq.w    #4,A7
00004446  601E      7417          bra.s     gets_6
                    7418   gets_4:
00004448  B484      7419          cmp.l     D4,D2
0000444A  631A      7420          bls.s     gets_6
0000444C  4878 0008 7421          pea       8
00004450  4E92      7422          jsr       (A2)
00004452  584F      7423          addq.w    #4,A7
00004454  4878 0020 7424          pea       32
00004458  4E92      7425          jsr       (A2)
0000445A  584F      7426          addq.w    #4,A7
0000445C  4878 0008 7427          pea       8
00004460  4E92      7428          jsr       (A2)
00004462  584F      7429          addq.w    #4,A7
00004464  5382      7430          subq.l    #1,D2
                    7431   gets_6:
00004466  60B6      7432          bra       gets_1
                    7433   gets_3:
00004468  4878 000A 7434          pea       10
0000446C  4E92      7435          jsr       (A2)
0000446E  584F      7436          addq.w    #4,A7
00004470  2042      7437          move.l    D2,A0
00004472  4210      7438          clr.b     (A0)
00004474  2004      7439          move.l    D4,D0
00004476  4CDF 041C 7440          movem.l   (A7)+,D2/D3/D4/A2
0000447A  4E5E      7441          unlk      A6
0000447C  4E75      7442          rts
                    7443   _ungetch:
0000447E  4E56 0000 7444          link      A6,#0
00004482  23EE 0008 7445          move.l    8(A6),__ungetbuf
00004486  0B00 00C0 
0000448A  202E 0008 7446          move.l    8(A6),D0
0000448E  4E5E      7447          unlk      A6
00004490  4E75      7448          rts
                    7449   @itoa_convert:
00004492  4E56 0000 7450          link      A6,#0
00004496  48E7 3C00 7451          movem.l   D2/D3/D4/D5,-(A7)
0000449A  242E 0008 7452          move.l    8(A6),D2
0000449E  262E 0010 7453          move.l    16(A6),D3
000044A2  2A2E 000C 7454          move.l    12(A6),D5
000044A6  2F05      7455          move.l    D5,-(A7)
000044A8  2F03      7456          move.l    D3,-(A7)
000044AA  6100 ECE0 7457          bsr       ULDIV
000044AE  202F 0004 7458          move.l    4(A7),D0
000044B2  504F      7459          addq.w    #8,A7
000044B4  2800      7460          move.l    D0,D4
000044B6  BA83      7461          cmp.l     D3,D5
000044B8  651A      7462          blo.s     @itoa_convert_1
000044BA  2F03      7463          move.l    D3,-(A7)
000044BC  2F05      7464          move.l    D5,-(A7)
000044BE  2F03      7465          move.l    D3,-(A7)
000044C0  6100 ECCA 7466          bsr       ULDIV
000044C4  2217      7467          move.l    (A7),D1
000044C6  504F      7468          addq.w    #8,A7
000044C8  2F01      7469          move.l    D1,-(A7)
000044CA  2F02      7470          move.l    D2,-(A7)
000044CC  61C4      7471          bsr       @itoa_convert
000044CE  DEFC 000C 7472          add.w     #12,A7
000044D2  2400      7473          move.l    D0,D2
                    7474   @itoa_convert_1:
000044D4  0C84 0000 7475          cmp.l     #9,D4
000044D8  0009      
000044DA  6E0A      7476          bgt.s     @itoa_convert_3
000044DC  2004      7477          move.l    D4,D0
000044DE  0680 0000 7478          add.l     #48,D0
000044E2  0030      
000044E4  600E      7479          bra.s     @itoa_convert_4
                    7480   @itoa_convert_3:
000044E6  2004      7481          move.l    D4,D0
000044E8  0680 0000 7482          add.l     #97,D0
000044EC  0061      
000044EE  0480 0000 7483          sub.l     #10,D0
000044F2  000A      
                    7484   @itoa_convert_4:
000044F4  2042      7485          move.l    D2,A0
000044F6  1080      7486          move.b    D0,(A0)
000044F8  2002      7487          move.l    D2,D0
000044FA  5280      7488          addq.l    #1,D0
000044FC  4CDF 003C 7489          movem.l   (A7)+,D2/D3/D4/D5
00004500  4E5E      7490          unlk      A6
00004502  4E75      7491          rts
                    7492   _ltoa:
00004504  4E56 0000 7493          link      A6,#0
00004508  48E7 3C00 7494          movem.l   D2/D3/D4/D5,-(A7)
0000450C  242E 0008 7495          move.l    8(A6),D2
00004510  262E 000C 7496          move.l    12(A6),D3
00004514  2A2E 0010 7497          move.l    16(A6),D5
00004518  2803      7498          move.l    D3,D4
0000451A  0C85 0000 7499          cmp.l     #2,D5
0000451E  0002      
00004520  6D08      7500          blt.s     ltoa_3
00004522  0C85 0000 7501          cmp.l     #36,D5
00004526  0024      
00004528  6F06      7502          ble.s     ltoa_1
                    7503   ltoa_3:
0000452A  2003      7504          move.l    D3,D0
0000452C  6000 0052 7505          bra       ltoa_4
                    7506   ltoa_1:
00004530  0C85 0000 7507          cmp.l     #10,D5
00004534  000A      
00004536  6600 0032 7508          bne       ltoa_5
0000453A  0C82 0000 7509          cmp.l     #0,D2
0000453E  0000      
00004540  6C28      7510          bge.s     ltoa_5
00004542  2002      7511          move.l    D2,D0
00004544  4480      7512          neg.l     D0
00004546  2400      7513          move.l    D0,D2
00004548  0C82 0000 7514          cmp.l     #0,D2
0000454C  0000      
0000454E  6C12      7515          bge.s     ltoa_7
00004550  4879 0000 7516          pea       @itoa_1
00004554  5B5A      
00004556  2F03      7517          move.l    D3,-(A7)
00004558  6100 EC22 7518          bsr       _strcpy
0000455C  504F      7519          addq.w    #8,A7
0000455E  2003      7520          move.l    D3,D0
00004560  601E      7521          bra.s     ltoa_4
                    7522   ltoa_7:
00004562  2044      7523          move.l    D4,A0
00004564  5284      7524          addq.l    #1,D4
00004566  10BC 002D 7525          move.b    #45,(A0)
                    7526   ltoa_5:
0000456A  2F05      7527          move.l    D5,-(A7)
0000456C  2F02      7528          move.l    D2,-(A7)
0000456E  2F04      7529          move.l    D4,-(A7)
00004570  6100 FF20 7530          bsr       @itoa_convert
00004574  DEFC 000C 7531          add.w     #12,A7
00004578  2800      7532          move.l    D0,D4
0000457A  2044      7533          move.l    D4,A0
0000457C  4210      7534          clr.b     (A0)
0000457E  2003      7535          move.l    D3,D0
                    7536   ltoa_4:
00004580  4CDF 003C 7537          movem.l   (A7)+,D2/D3/D4/D5
00004584  4E5E      7538          unlk      A6
00004586  4E75      7539          rts
                    7540   _ultoa:
00004588  4E56 0000 7541          link      A6,#0
0000458C  48E7 3800 7542          movem.l   D2/D3/D4,-(A7)
00004590  262E 0010 7543          move.l    16(A6),D3
00004594  282E 000C 7544          move.l    12(A6),D4
00004598  2404      7545          move.l    D4,D2
0000459A  0C83 0000 7546          cmp.l     #2,D3
0000459E  0002      
000045A0  6D08      7547          blt.s     ultoa_3
000045A2  0C83 0000 7548          cmp.l     #36,D3
000045A6  0024      
000045A8  6F04      7549          ble.s     ultoa_1
                    7550   ultoa_3:
000045AA  2004      7551          move.l    D4,D0
000045AC  6018      7552          bra.s     ultoa_4
                    7553   ultoa_1:
000045AE  2F03      7554          move.l    D3,-(A7)
000045B0  2F2E 0008 7555          move.l    8(A6),-(A7)
000045B4  2F02      7556          move.l    D2,-(A7)
000045B6  6100 FEDA 7557          bsr       @itoa_convert
000045BA  DEFC 000C 7558          add.w     #12,A7
000045BE  2400      7559          move.l    D0,D2
000045C0  2042      7560          move.l    D2,A0
000045C2  4210      7561          clr.b     (A0)
000045C4  2004      7562          move.l    D4,D0
                    7563   ultoa_4:
000045C6  4CDF 001C 7564          movem.l   (A7)+,D2/D3/D4
000045CA  4E5E      7565          unlk      A6
000045CC  4E75      7566          rts
                    7567   _itoa:
000045CE  4E56 0000 7568          link      A6,#0
000045D2  2F2E 0010 7569          move.l    16(A6),-(A7)
000045D6  2F2E 000C 7570          move.l    12(A6),-(A7)
000045DA  2F2E 0008 7571          move.l    8(A6),-(A7)
000045DE  6100 FF24 7572          bsr       _ltoa
000045E2  DEFC 000C 7573          add.w     #12,A7
000045E6  4E5E      7574          unlk      A6
000045E8  4E75      7575          rts
                    7576   _strlen:
000045EA  206F 0004 7577          move.l    (4,A7),A0
000045EE  2248      7578          move.l    A0,A1
                    7579   strlen_1:
000045F0  4A19      7580          tst.b     (A1)+
000045F2  66FC      7581          bne       strlen_1
000045F4  2009      7582          move.l    A1,D0
000045F6  9088      7583          sub.l     A0,D0
000045F8  5380      7584          subq.l    #1,D0
000045FA  4E75      7585          rts
                    7586          section   const
                    7587   
                    7588   @m68kde~1_1:
000045FC  0D0A 00   7589          dc.b      13,10,0
                    7590   @m68kde~1_2:
00004600  0D53 7769 7591          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004604  7463 6865 
00004608  7320 5357 
0000460C  5B        
0000460D  372D 305D 7592          dc.b      55,45,48,93,32,61,32,0
00004611  203D 2000 
                    7593   @m68kde~1_3:
00004616  3000      7594          dc.b      48,0
                    7595   @m68kde~1_4:
00004618  3100      7596          dc.b      49,0
                    7597   @m68kde~1_5:
0000461A  0D0A 4475 7598          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
0000461E  6D70 204D 
00004622  656D 6F72 
00004626  79        
00004627  2042 6C6F 7599          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
0000462B  636B 3A20 
0000462F  3C45 5343 
00004633  3E20      
00004635  746F 2041 7600          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004639  626F 7274 
0000463D  2C20 3C53 
00004641  50        
00004642  4143 453E 7601          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004646  2074 6F20 
0000464A  436F 6E74 
0000464E  69        
0000464F  6E75 6500 7602          dc.b      110,117,101,0
                    7603   @m68kde~1_6:
00004654  0D0A 456E 7604          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004658  7465 7220 
0000465C  5374 6172 
00004660  74        
00004661  2041 6464 7605          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004665  7265 7373 
00004669  3A20 00   
                    7606   @m68kde~1_7:
0000466C  0D0A 2530 7607          dc.b      13,10,37,48,56,120,32,0
00004670  3878 2000 
                    7608   @m68kde~1_8:
00004674  2530 3258 7609          dc.b      37,48,50,88,0
00004678  00        
                    7610   @m68kde~1_9:
0000467A  2020 00   7611          dc.b      32,32,0
                    7612   @m68kde~1_10:
0000467E  0D0A 4669 7613          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004682  6C6C 204D 
00004686  656D 6F72 
0000468A  79        
0000468B  2042 6C6F 7614          dc.b      32,66,108,111,99,107,0
0000468F  636B 00   
                    7615   @m68kde~1_11:
00004692  0D0A 456E 7616          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004696  7465 7220 
0000469A  456E 6420 
0000469E  41        
0000469F  6464 7265 7617          dc.b      100,100,114,101,115,115,58,32,0
000046A3  7373 3A20 
000046A7  00        
                    7618   @m68kde~1_12:
000046A8  0D0A 456E 7619          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000046AC  7465 7220 
000046B0  4669 6C6C 
000046B4  20        
000046B5  4461 7461 7620          dc.b      68,97,116,97,58,32,0
000046B9  3A20 00   
                    7621   @m68kde~1_13:
000046BC  0D0A 4669 7622          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000046C0  6C6C 696E 
000046C4  6720 4164 
000046C8  64        
000046C9  7265 7373 7623          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000046CD  6573 205B 
000046D1  2425 3038 
000046D5  58        
000046D6  202D 2024 7624          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000046DA  2530 3858 
000046DE  5D20 7769 
000046E2  7468      
000046E4  2024 2530 7625          dc.b      32,36,37,48,50,88,0
000046E8  3258 00   
                    7626   @m68kde~1_14:
000046EC  0D0A 5573 7627          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000046F0  6520 4879 
000046F4  7065 7254 
000046F8  65        
000046F9  726D 696E 7628          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000046FD  616C 2074 
00004701  6F20 5365 
00004705  6E64 2054 7629          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004709  6578 7420 
0000470D  4669 6C65 
00004711  2028 2E68 7630          dc.b      32,40,46,104,101,120,41,13,10,0
00004715  6578 290D 
00004719  0A00      
                    7631   @m68kde~1_15:
0000471C  0D0A 4C6F 7632          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004720  6164 2046 
00004724  6169 6C65 
00004728  64        
00004729  2061 7420 7633          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000472D  4164 6472 
00004731  6573 7320 
00004735  3D        
00004736  205B 2425 7634          dc.b      32,91,36,37,48,56,88,93,13,10,0
0000473A  3038 585D 
0000473E  0D0A 00   
                    7635   @m68kde~1_16:
00004742  0D0A 5375 7636          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004746  6363 6573 
0000474A  733A 2044 
0000474E  6F        
0000474F  776E 6C6F 7637          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004753  6164 6564 
00004757  2025 6420 
0000475B  6279 7465 7638          dc.b      98,121,116,101,115,13,10,0
0000475F  730D 0A00 
                    7639   @m68kde~1_17:
00004764  0D0A 4578 7640          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004768  616D 696E 
0000476C  6520 616E 
00004770  64        
00004771  2043 6861 7641          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004775  6E67 6520 
00004779  4D65 6D6F 
0000477D  72        
0000477E  7900      7642          dc.b      121,0
                    7643   @m68kde~1_18:
00004780  0D0A 3C45 7644          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004784  5343 3E20 
00004788  746F 2053 
0000478C  746F      
0000478E  702C 203C 7645          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004792  5350 4143 
00004796  453E 2074 
0000479A  6F20      
0000479C  4164 7661 7646          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000047A0  6E63 652C 
000047A4  2027 2D27 
000047A8  2074      
000047AA  6F20 476F 7647          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000047AE  2042 6163 
000047B2  6B2C 203C 
000047B6  4441      
000047B8  5441 3E20 7648          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000047BC  746F 2063 
000047C0  6861 6E67 
000047C4  65        
000047C5  00        7649          dc.b      0
                    7650   @m68kde~1_19:
000047C6  0D0A 456E 7651          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000047CA  7465 7220 
000047CE  4164 6472 
000047D2  65        
000047D3  7373 3A20 7652          dc.b      115,115,58,32,0
000047D7  00        
                    7653   @m68kde~1_20:
000047D8  0D0A 5B25 7654          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000047DC  3038 785D 
000047E0  203A 2025 
000047E4  3032 78   
000047E7  2020 00   7655          dc.b      32,32,0
                    7656   @m68kde~1_21:
000047EA  0D0A 5761 7657          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000047EE  726E 696E 
000047F2  6720 4368 
000047F6  61        
000047F7  6E67 6520 7658          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000047FB  4661 696C 
000047FF  6564 3A20 
00004803  57        
00004804  726F 7465 7659          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004808  205B 2530 
0000480C  3278 5D2C 
00004810  20        
00004811  5265 6164 7660          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004815  205B 2530 
00004819  3278 5D00 
                    7661   @m68kde~1_22:
0000481E  0A45 7261 7662          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
00004822  7369 6E67 
00004826  2E2E 2E0A 
0000482A  00        
                    7663   @m68kde~1_23:
0000482C  0D0A 2050 7664          dc.b      13,10,32,80,114,111,103,114,97,109,109,105,110
00004830  726F 6772 
00004834  616D 6D69 
00004838  6E        
00004839  6720 436F 7665          dc.b      103,32,67,111,109,112,108,101,116,101,33,0
0000483D  6D70 6C65 
00004841  7465 2100 
                    7666   @m68kde~1_24:
00004846  0D0A 204C 7667          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
0000484A  6F61 6469 
0000484E  6E67 2050 
00004852  72        
00004853  6F67 7261 7668          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
00004857  6D20 4672 
0000485B  6F6D 2053 
0000485F  50        
00004860  4920 466C 7669          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
00004864  6173 682E 
00004868  2E2E 2E00 
                    7670   @m68kde~1_25:
0000486C  0D0A 2052 7671          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
00004870  6561 6420 
00004874  4461 7461 
00004878  3A20      
0000487A  2530 3878 7672          dc.b      37,48,56,120,32,10,0
0000487E  200A 00   
                    7673   @m68kde~1_26:
00004882  4949 435F 7674          dc.b      73,73,67,95,67,82,83,82,32,84,114,97,110,115
00004886  4352 5352 
0000488A  2054 7261 
0000488E  6E73      
00004890  6D69 7420 7675          dc.b      109,105,116,32,40,66,105,110,97,114,121,41,58
00004894  2842 696E 
00004898  6172 7929 
0000489C  3A        
0000489D  2000      7676          dc.b      32,0
                    7677   @m68kde~1_27:
000048A0  2564 00   7678          dc.b      37,100,0
                    7679   @m68kde~1_28:
000048A4  0A00      7680          dc.b      10,0
                    7681   @m68kde~1_29:
000048A6  0D0A 2049 7682          dc.b      13,10,32,73,50,67,32,84,101,115,116,0
000048AA  3243 2054 
000048AE  6573 7400 
                    7683   @m68kde~1_30:
000048B2  0D0A 2053 7684          dc.b      13,10,32,83,116,97,114,116,105,110,103,32,69
000048B6  7461 7274 
000048BA  696E 6720 
000048BE  45        
000048BF  4550 524F 7685          dc.b      69,80,82,79,77,32,87,114,105,116,101,58,32,87
000048C3  4D20 5772 
000048C7  6974 653A 
000048CB  2057      
000048CD  7269 7469 7686          dc.b      114,105,116,105,110,103,32,48,120,37,46,50,120
000048D1  6E67 2030 
000048D5  7825 2E32 
000048D9  78        
000048DA  2074 6F20 7687          dc.b      32,116,111,32,97,100,100,114,101,115,115,32
000048DE  6164 6472 
000048E2  6573 7320 
000048E6  3078 3030 7688          dc.b      48,120,48,48,10,0
000048EA  0A00      
                    7689   @m68kde~1_31:
000048EC  0D0A 2057 7690          dc.b      13,10,32,87,114,105,116,105,110,103,32,37,100
000048F0  7269 7469 
000048F4  6E67 2025 
000048F8  64        
000048F9  2074 6F20 7691          dc.b      32,116,111,32,97,100,100,114,101,115,115,32
000048FD  6164 6472 
00004901  6573 7320 
00004905  2564 0A00 7692          dc.b      37,100,10,0
                    7693   @m68kde~1_32:
0000490A  0D0A 2041 7694          dc.b      13,10,32,65,100,100,114,101,115,115,58,32,37
0000490E  6464 7265 
00004912  7373 3A20 
00004916  25        
00004917  643A 2025 7695          dc.b      100,58,32,37,100,10,0
0000491B  640A 00   
                    7696   @m68kde~1_33:
0000491E  2425 3038 7697          dc.b      36,37,48,56,88,32,32,0
00004922  5820 2000 
                    7698   @m68kde~1_34:
00004926  2000      7699          dc.b      32,0
                    7700   @m68kde~1_35:
00004928  2E00      7701          dc.b      46,0
                    7702   @m68kde~1_36:
0000492A  2563 00   7703          dc.b      37,99,0
                    7704   @m68kde~1_37:
0000492E  00        7705          dc.b      0
                    7706   @m68kde~1_38:
00004930  0D0A 0D0A 7707          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004934  2044 3020 
00004938  3D20 2425 
0000493C  3038 58   
0000493F  2020 4130 7708          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004943  203D 2024 
00004947  2530 3858 
0000494B  00        
                    7709   @m68kde~1_39:
0000494C  0D0A 2044 7710          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004950  3120 3D20 
00004954  2425 3038 
00004958  5820 20   
0000495B  4131 203D 7711          dc.b      65,49,32,61,32,36,37,48,56,88,0
0000495F  2024 2530 
00004963  3858 00   
                    7712   @m68kde~1_40:
00004966  0D0A 2044 7713          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
0000496A  3220 3D20 
0000496E  2425 3038 
00004972  5820 20   
00004975  4132 203D 7714          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004979  2024 2530 
0000497D  3858 00   
                    7715   @m68kde~1_41:
00004980  0D0A 2044 7716          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004984  3320 3D20 
00004988  2425 3038 
0000498C  5820 20   
0000498F  4133 203D 7717          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004993  2024 2530 
00004997  3858 00   
                    7718   @m68kde~1_42:
0000499A  0D0A 2044 7719          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000499E  3420 3D20 
000049A2  2425 3038 
000049A6  5820 20   
000049A9  4134 203D 7720          dc.b      65,52,32,61,32,36,37,48,56,88,0
000049AD  2024 2530 
000049B1  3858 00   
                    7721   @m68kde~1_43:
000049B4  0D0A 2044 7722          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000049B8  3520 3D20 
000049BC  2425 3038 
000049C0  5820 20   
000049C3  4135 203D 7723          dc.b      65,53,32,61,32,36,37,48,56,88,0
000049C7  2024 2530 
000049CB  3858 00   
                    7724   @m68kde~1_44:
000049CE  0D0A 2044 7725          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000049D2  3620 3D20 
000049D6  2425 3038 
000049DA  5820 20   
000049DD  4136 203D 7726          dc.b      65,54,32,61,32,36,37,48,56,88,0
000049E1  2024 2530 
000049E5  3858 00   
                    7727   @m68kde~1_45:
000049E8  0D0A 2044 7728          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000049EC  3720 3D20 
000049F0  2425 3038 
000049F4  5820 20   
000049F7  4137 203D 7729          dc.b      65,55,32,61,32,36,37,48,56,88,0
000049FB  2024 2530 
000049FF  3858 00   
                    7730   @m68kde~1_46:
00004A02  0D0A 0D0A 7731          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004A06  5553 5020 
00004A0A  3D20 2425 
00004A0E  3038 58   
00004A11  2020 2841 7732          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004A15  3729 2055 
00004A19  7365 7220 
00004A1D  5350      
00004A1F  00        7733          dc.b      0
                    7734   @m68kde~1_47:
00004A20  0D0A 5353 7735          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004A24  5020 3D20 
00004A28  2425 3038 
00004A2C  5820 20   
00004A2F  2841 3729 7736          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004A33  2053 7570 
00004A37  6572 7669 
00004A3B  73        
00004A3C  6F72 2053 7737          dc.b      111,114,32,83,80,0
00004A40  5000      
                    7738   @m68kde~1_48:
00004A42  0D0A 2053 7739          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004A46  5220 3D20 
00004A4A  2425 3034 
00004A4E  5820 20   
00004A51  2000      7740          dc.b      32,0
                    7741   @m68kde~1_49:
00004A54  2020 205B 7742          dc.b      32,32,32,91,0
00004A58  00        
                    7743   @m68kde~1_50:
00004A5A  0D0A 2050 7744          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004A5E  4320 3D20 
00004A62  2425 3038 
00004A66  5820 20   
00004A69  00        7745          dc.b      0
                    7746   @m68kde~1_51:
00004A6A  5B40 2042 7747          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004A6E  5245 414B 
00004A72  504F 494E 
00004A76  545D 00   
                    7748   @m68kde~1_52:
00004A7A  0D0A 5750 7749          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004A7E  2564 203D 
00004A82  2025 7300 
                    7750   @m68kde~1_53:
00004A86  0D0A 0D0A 7751          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004A8A  0D0A 0D0A 
00004A8E  0D0A 0D0A 
00004A92  5369 6E   
00004A95  676C 6520 7752          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004A99  5374 6570 
00004A9D  2020 3A5B 
00004AA1  4F        
00004AA2  4E5D 00   7753          dc.b      78,93,0
                    7754   @m68kde~1_54:
00004AA6  0D0A 4272 7755          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004AAA  6561 6B20 
00004AAE  506F 696E 
00004AB2  74        
00004AB3  7320 3A5B 7756          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004AB7  4469 7361 
00004ABB  626C 6564 
00004ABF  5D        
00004AC0  00        7757          dc.b      0
                    7758   @m68kde~1_55:
00004AC2  0D0A 5072 7759          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004AC6  6573 7320 
00004ACA  3C53 5041 
00004ACE  4345      
00004AD0  3E20 746F 7760          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004AD4  2045 7865 
00004AD8  6375 7465 
00004ADC  20        
00004ADD  4E65 7874 7761          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004AE1  2049 6E73 
00004AE5  7472 7563 
00004AE9  7469 6F6E 7762          dc.b      116,105,111,110,0
00004AED  00        
                    7763   @m68kde~1_56:
00004AEE  0D0A 5072 7764          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004AF2  6573 7320 
00004AF6  3C45 5343 
00004AFA  3E20      
00004AFC  746F 2052 7765          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004B00  6573 756D 
00004B04  6520 5072 
00004B08  6F67 7261 7766          dc.b      111,103,114,97,109,0
00004B0C  6D00      
                    7767   @m68kde~1_57:
00004B0E  0D0A 496C 7768          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004B12  6C65 6761 
00004B16  6C20 4461 
00004B1A  74        
00004B1B  6120 5265 7769          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004B1F  6769 7374 
00004B23  6572 203A 
00004B27  20        
00004B28  5573 6520 7770          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004B2C  4430 2D44 
00004B30  372E 2E2E 
00004B34  2E2E      
00004B36  0D0A 00   7771          dc.b      13,10,0
                    7772   @m68kde~1_58:
00004B3A  0D0A 4425 7773          dc.b      13,10,68,37,99,32,61,32,0
00004B3E  6320 3D20 
00004B42  00        
                    7774   @m68kde~1_59:
00004B44  0D0A 496C 7775          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004B48  6C65 6761 
00004B4C  6C20 4164 
00004B50  64        
00004B51  7265 7373 7776          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004B55  2052 6567 
00004B59  6973 7465 
00004B5D  7220 3A20 7777          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004B61  5573 6520 
00004B65  4130 2D41 
00004B69  372E      
00004B6B  2E2E 2E2E 7778          dc.b      46,46,46,46,13,10,0
00004B6F  0D0A 00   
                    7779   @m68kde~1_60:
00004B72  0D0A 4125 7780          dc.b      13,10,65,37,99,32,61,32,0
00004B76  6320 3D20 
00004B7A  00        
                    7781   @m68kde~1_61:
00004B7C  0D0A 5573 7782          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004B80  6572 2053 
00004B84  5020 3D20 
00004B88  00        
                    7783   @m68kde~1_62:
00004B8A  0D0A 496C 7784          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004B8E  6C65 6761 
00004B92  6C20 5265 
00004B96  67        
00004B97  6973 7465 7785          dc.b      105,115,116,101,114,46,46,46,46,0
00004B9B  722E 2E2E 
00004B9F  2E00      
                    7786   @m68kde~1_63:
00004BA2  0D0A 5379 7787          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004BA6  7374 656D 
00004BAA  2053 5020 
00004BAE  3D        
00004BAF  2000      7788          dc.b      32,0
                    7789   @m68kde~1_64:
00004BB2  0D0A 5043 7790          dc.b      13,10,80,67,32,61,32,0
00004BB6  203D 2000 
                    7791   @m68kde~1_65:
00004BBA  0D0A 5352 7792          dc.b      13,10,83,82,32,61,32,0
00004BBE  203D 2000 
                    7793   @m68kde~1_66:
00004BC2  0D0A 496C 7794          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004BC6  6C65 6761 
00004BCA  6C20 5265 
00004BCE  67        
00004BCF  6973 7465 7795          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004BD3  723A 2055 
00004BD7  7365 2041 
00004BDB  30        
00004BDC  2D41 372C 7796          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004BE0  2044 302D 
00004BE4  4437 2C20 
00004BE8  5353 50   
00004BEB  2C20 5553 7797          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004BEF  502C 2050 
00004BF3  4320 6F72 
00004BF7  2053      
00004BF9  520D 0A00 7798          dc.b      82,13,10,0
                    7799   @m68kde~1_67:
00004BFE  0D0A 0D0A 7800          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004C02  4E75 6D20 
00004C06  2020 2020 
00004C0A  4164      
00004C0C  6472 6573 7801          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004C10  7320 2020 
00004C14  2020 2049 
00004C18  6E        
00004C19  7374 7275 7802          dc.b      115,116,114,117,99,116,105,111,110,0
00004C1D  6374 696F 
00004C21  6E00      
                    7803   @m68kde~1_68:
00004C24  0D0A 2D2D 7804          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004C28  2D20 2020 
00004C2C  2020 2D2D 
00004C30  2D2D 2D   
00004C33  2D2D 2D2D 7805          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004C37  2020 2020 
00004C3B  2D2D 2D2D 
00004C3F  2D2D 2D   
00004C42  2D2D 2D2D 7806          dc.b      45,45,45,45,0
00004C46  00        
                    7807   @m68kde~1_69:
00004C48  0D0A 4E6F 7808          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004C4C  2042 7265 
00004C50  616B 506F 
00004C54  69        
00004C55  6E74 7320 7809          dc.b      110,116,115,32,83,101,116,0
00004C59  5365 7400 
                    7810   @m68kde~1_70:
00004C5E  0D0A 2533 7811          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004C62  6420 2020 
00004C66  2020 2425 
00004C6A  3038 78   
00004C6D  00        7812          dc.b      0
                    7813   @m68kde~1_71:
00004C6E  0D0A 4E75 7814          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004C72  6D20 2020 
00004C76  2020 4164 
00004C7A  6472      
00004C7C  6573 7300 7815          dc.b      101,115,115,0
                    7816   @m68kde~1_72:
00004C80  0D0A 2D2D 7817          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004C84  2D20 2020 
00004C88  2020 2D2D 
00004C8C  2D2D 2D   
00004C8F  2D2D 2D2D 7818          dc.b      45,45,45,45,0
00004C93  00        
                    7819   @m68kde~1_73:
00004C94  0D0A 4E6F 7820          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004C98  2057 6174 
00004C9C  6368 506F 
00004CA0  69        
00004CA1  6E74 7320 7821          dc.b      110,116,115,32,83,101,116,0
00004CA5  5365 7400 
                    7822   @m68kde~1_74:
00004CAA  0D0A 456E 7823          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004CAE  7465 7220 
00004CB2  4272 6561 
00004CB6  6B        
00004CB7  2050 6F69 7824          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004CBB  6E74 204E 
00004CBF  756D 6265 
00004CC3  72        
00004CC4  3A20 00   7825          dc.b      58,32,0
                    7826   @m68kde~1_75:
00004CC8  0D0A 496C 7827          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004CCC  6C65 6761 
00004CD0  6C20 5261 
00004CD4  6E        
00004CD5  6765 203A 7828          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004CD9  2055 7365 
00004CDD  2030 202D 
00004CE1  2037      
00004CE3  00        7829          dc.b      0
                    7830   @m68kde~1_76:
00004CE4  0D0A 4272 7831          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004CE8  6561 6B20 
00004CEC  506F 696E 
00004CF0  74        
00004CF1  2043 6C65 7832          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004CF5  6172 6564 
00004CF9  2E2E 2E2E 
00004CFD  2E        
00004CFE  0D0A 00   7833          dc.b      13,10,0
                    7834   @m68kde~1_77:
00004D02  0D0A 4272 7835          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D06  6561 6B20 
00004D0A  506F 696E 
00004D0E  74        
00004D0F  2077 6173 7836          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004D13  6E27 7420 
00004D17  5365 742E 
00004D1B  2E        
00004D1C  2E2E 2E00 7837          dc.b      46,46,46,0
                    7838   @m68kde~1_78:
00004D20  0D0A 456E 7839          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004D24  7465 7220 
00004D28  5761 7463 
00004D2C  68        
00004D2D  2050 6F69 7840          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004D31  6E74 204E 
00004D35  756D 6265 
00004D39  72        
00004D3A  3A20 00   7841          dc.b      58,32,0
                    7842   @m68kde~1_79:
00004D3E  0D0A 5761 7843          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004D42  7463 6820 
00004D46  506F 696E 
00004D4A  74        
00004D4B  2043 6C65 7844          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004D4F  6172 6564 
00004D53  2E2E 2E2E 
00004D57  2E        
00004D58  0D0A 00   7845          dc.b      13,10,0
                    7846   @m68kde~1_80:
00004D5C  0D0A 5761 7847          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004D60  7463 6820 
00004D64  506F 696E 
00004D68  74        
00004D69  2057 6173 7848          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004D6D  206E 6F74 
00004D71  2053 6574 
00004D75  2E        
00004D76  2E2E 2E2E 7849          dc.b      46,46,46,46,0
00004D7A  00        
                    7850   @m68kde~1_81:
00004D7C  0D0A 4E6F 7851          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004D80  2046 5245 
00004D84  4520 4272 
00004D88  6561      
00004D8A  6B20 506F 7852          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004D8E  696E 7473 
00004D92  2E2E 2E2E 
00004D96  2E        
00004D97  00        7853          dc.b      0
                    7854   @m68kde~1_82:
00004D98  0D0A 4272 7855          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D9C  6561 6B20 
00004DA0  506F 696E 
00004DA4  74        
00004DA5  2041 6464 7856          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004DA9  7265 7373 
00004DAD  3A20 00   
                    7857   @m68kde~1_83:
00004DB0  0D0A 4572 7858          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004DB4  726F 7220 
00004DB8  3A20 4272 
00004DBC  65        
00004DBD  616B 2050 7859          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004DC1  6F69 6E74 
00004DC5  7320 4341 
00004DC9  4E        
00004DCA  4E4F 5420 7860          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004DCE  6265 2073 
00004DD2  6574 2061 
00004DD6  74        
00004DD7  204F 4444 7861          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004DDB  2061 6464 
00004DDF  7265 7373 
00004DE3  65        
00004DE4  7300      7862          dc.b      115,0
                    7863   @m68kde~1_84:
00004DE6  0D0A 4572 7864          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004DEA  726F 7220 
00004DEE  3A20 4272 
00004DF2  65        
00004DF3  616B 2050 7865          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004DF7  6F69 6E74 
00004DFB  7320 4341 
00004DFF  4E        
00004E00  4E4F 5420 7866          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004E04  6265 2073 
00004E08  6574 2066 
00004E0C  6F        
00004E0D  7220 524F 7867          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004E11  4D20 696E 
00004E15  2052 616E 
00004E19  67        
00004E1A  6520 3A20 7868          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004E1E  5B24 302D 
00004E22  2430 3030 
00004E26  3037 46   
00004E29  4646 5D00 7869          dc.b      70,70,93,0
                    7870   @m68kde~1_85:
00004E2E  0D0A 4572 7871          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004E32  726F 723A 
00004E36  2042 7265 
00004E3A  61        
00004E3B  6B20 506F 7872          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004E3F  696E 7420 
00004E43  416C 7265 
00004E47  6164 7920 7873          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004E4B  4578 6973 
00004E4F  7473 2061 
00004E53  74        
00004E54  2041 6464 7874          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004E58  7265 7373 
00004E5C  203A 2025 
00004E60  30        
00004E61  3878 0D0A 7875          dc.b      56,120,13,10,0
00004E65  00        
                    7876   @m68kde~1_86:
00004E66  0D0A 4272 7877          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004E6A  6561 6B20 
00004E6E  506F 696E 
00004E72  74        
00004E73  2053 6574 7878          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004E77  2061 7420 
00004E7B  4164 6472 
00004E7F  65        
00004E80  7373 3A20 7879          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004E84  5B24 2530 
00004E88  3878 5D00 
                    7880   @m68kde~1_87:
00004E8C  0D0A 4E6F 7881          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004E90  2046 5245 
00004E94  4520 5761 
00004E98  7463      
00004E9A  6820 506F 7882          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004E9E  696E 7473 
00004EA2  2E2E 2E2E 
00004EA6  2E        
00004EA7  00        7883          dc.b      0
                    7884   @m68kde~1_88:
00004EA8  0D0A 5761 7885          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004EAC  7463 6820 
00004EB0  506F 696E 
00004EB4  74        
00004EB5  2041 6464 7886          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004EB9  7265 7373 
00004EBD  3A20 00   
                    7887   @m68kde~1_89:
00004EC0  0D0A 4572 7888          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004EC4  726F 723A 
00004EC8  2057 6174 
00004ECC  63        
00004ECD  6820 506F 7889          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004ED1  696E 7420 
00004ED5  416C 7265 
00004ED9  6164 7920 7890          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004EDD  5365 7420 
00004EE1  6174 2041 
00004EE5  64        
00004EE6  6472 6573 7891          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004EEA  7320 3A20 
00004EEE  2530 3878 
00004EF2  0D        
00004EF3  0A00      7892          dc.b      10,0
                    7893   @m68kde~1_90:
00004EF6  0D0A 5761 7894          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004EFA  7463 6820 
00004EFE  506F 696E 
00004F02  74        
00004F03  2053 6574 7895          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004F07  2061 7420 
00004F0B  4164 6472 
00004F0F  65        
00004F10  7373 3A20 7896          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004F14  5B24 2530 
00004F18  3878 5D00 
                    7897   @m68kde~1_91:
00004F1C  0D0A 0D0A 7898          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004F20  0D0A 0D0A 
00004F24  4042 5245 
00004F28  414B 50   
00004F2B  4F49 4E54 7899          dc.b      79,73,78,84,0
00004F2F  00        
                    7900   @m68kde~1_92:
00004F30  0D0A 5369 7901          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004F34  6E67 6C65 
00004F38  2053 7465 
00004F3C  70        
00004F3D  203A 205B 7902          dc.b      32,58,32,91,79,78,93,0
00004F41  4F4E 5D00 
                    7903   @m68kde~1_93:
00004F46  0D0A 4272 7904          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004F4A  6561 6B50 
00004F4E  6F69 6E74 
00004F52  73        
00004F53  203A 205B 7905          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004F57  456E 6162 
00004F5B  6C65 645D 
00004F5F  00        
                    7906   @m68kde~1_94:
00004F60  0D0A 5072 7907          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004F64  6573 7320 
00004F68  3C45 5343 
00004F6C  3E20      
00004F6E  746F 2052 7908          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004F72  6573 756D 
00004F76  6520 5573 
00004F7A  6572 2050 7909          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004F7E  726F 6772 
00004F82  616D 0D0A 
00004F86  00        
                    7910   @m68kde~1_95:
00004F88  0D0A 556E 7911          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004F8C  6B6E 6F77 
00004F90  6E20 436F 
00004F94  6D        
00004F95  6D61 6E64 7912          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004F99  2E2E 2E2E 
00004F9D  2E0D 0A00 
                    7913   @m68kde~1_96:
00004FA2  0D0A 5072 7914          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004FA6  6F67 7261 
00004FAA  6D20 456E 
00004FAE  64        
00004FAF  6564 2028 7915          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004FB3  5452 4150 
00004FB7  2023 3135 
00004FBB  292E      
00004FBD  2E2E 2E00 7916          dc.b      46,46,46,0
                    7917   @m68kde~1_97:
00004FC2  0D0A 4B69 7918          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004FC6  6C6C 2041 
00004FCA  6C6C 2042 
00004FCE  72        
00004FCF  6561 6B20 7919          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004FD3  506F 696E 
00004FD7  7473 2E2E 
00004FDB  2E        
00004FDC  2879 2F6E 7920          dc.b      40,121,47,110,41,63,0
00004FE0  293F 00   
                    7921   @m68kde~1_98:
00004FE4  0D0A 4B69 7922          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004FE8  6C6C 2041 
00004FEC  6C6C 2057 
00004FF0  61        
00004FF1  7463 6820 7923          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004FF5  506F 696E 
00004FF9  7473 2E2E 
00004FFD  2E        
00004FFE  2879 2F6E 7924          dc.b      40,121,47,110,41,63,0
00005002  293F 00   
                    7925   @m68kde~1_99:
00005006  0D0A 2D2D 7926          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000500A  2D2D 2D2D 
0000500E  2D2D 2D2D 
00005012  2D2D 2D   
00005015  2D2D 2D2D 7927          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005019  2D2D 2D2D 
0000501D  2D2D 2D2D 
00005021  2D2D 2D   
00005024  2D2D 2D2D 7928          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005028  2D2D 2D2D 
0000502C  2D2D 2D2D 
00005030  2D2D 2D   
00005033  2D2D 2D2D 7929          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005037  2D2D 2D2D 
0000503B  2D2D 2D2D 
0000503F  2D2D 2D   
00005042  2D2D 2D2D 7930          dc.b      45,45,45,45,45,45,0
00005046  2D2D 00   
                    7931   @m68kde~1_100:
0000504A  0D0A 2020 7932          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
0000504E  4465 6275 
00005052  6767 6572 
00005056  20        
00005057  436F 6D6D 7933          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
0000505B  616E 6420 
0000505F  5375 6D6D 
00005063  6172 7900 7934          dc.b      97,114,121,0
                    7935   @m68kde~1_101:
00005068  0D0A 2020 7936          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
0000506C  2E28 7265 
00005070  6729 2020 
00005074  2020      
00005076  2020 202D 7937          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
0000507A  2043 6861 
0000507E  6E67 6520 
00005082  5265      
00005084  6769 7374 7938          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00005088  6572 733A 
0000508C  2065 2E67 
00005090  2041 302D 7939          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00005094  4137 2C44 
00005098  302D 4437 
0000509C  2C50 43   
0000509F  2C53 5350 7940          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
000050A3  2C55 5350 
000050A7  2C53 5200 
                    7941   @m68kde~1_102:
000050AC  0D0A 2020 7942          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
000050B0  4244 2F42 
000050B4  532F 4243 
000050B8  2F42 4B   
000050BB  2020 2D20 7943          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000050BF  4272 6561 
000050C3  6B20 506F 
000050C7  69        
000050C8  6E74 3A20 7944          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000050CC  4469 7370 
000050D0  6C61 792F 
000050D4  53        
000050D5  6574 2F43 7945          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000050D9  6C65 6172 
000050DD  2F4B 696C 
000050E1  6C        
000050E2  00        7946          dc.b      0
                    7947   @m68kde~1_103:
000050E4  0D0A 2020 7948          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000050E8  4320 2020 
000050EC  2020 2020 
000050F0  2020 20   
000050F3  2020 2D20 7949          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000050F7  436F 7079 
000050FB  2050 726F 
000050FF  67        
00005100  7261 6D20 7950          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00005104  6672 6F6D 
00005108  2046 6C61 
0000510C  73        
0000510D  6820 746F 7951          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00005111  204D 6169 
00005115  6E20 4D65 
00005119  6D        
0000511A  6F72 7900 7952          dc.b      111,114,121,0
                    7953   @m68kde~1_104:
0000511E  0D0A 2020 7954          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00005122  4420 2020 
00005126  2020 2020 
0000512A  2020 20   
0000512D  2020 2D20 7955          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00005131  4475 6D70 
00005135  204D 656D 
00005139  6F        
0000513A  7279 2043 7956          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
0000513E  6F6E 7465 
00005142  6E74 7320 
00005146  746F 2053 7957          dc.b      116,111,32,83,99,114,101,101,110,0
0000514A  6372 6565 
0000514E  6E00      
                    7958   @m68kde~1_105:
00005150  0D0A 2020 7959          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00005154  4520 2020 
00005158  2020 2020 
0000515C  2020 20   
0000515F  2020 2D20 7960          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00005163  456E 7465 
00005167  7220 5374 
0000516B  72        
0000516C  696E 6720 7961          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00005170  696E 746F 
00005174  204D 656D 
00005178  6F72 7900 7962          dc.b      111,114,121,0
                    7963   @m68kde~1_106:
0000517C  0D0A 2020 7964          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00005180  4620 2020 
00005184  2020 2020 
00005188  2020 20   
0000518B  2020 2D20 7965          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
0000518F  4669 6C6C 
00005193  204D 656D 
00005197  6F        
00005198  7279 2077 7966          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
0000519C  6974 6820 
000051A0  4461 7461 
000051A4  00        
                    7967   @m68kde~1_107:
000051A6  0D0A 2020 7968          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
000051AA  4720 2020 
000051AE  2020 2020 
000051B2  2020 20   
000051B5  2020 2D20 7969          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000051B9  476F 2050 
000051BD  726F 6772 
000051C1  61        
000051C2  6D20 5374 7970          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000051C6  6172 7469 
000051CA  6E67 2061 
000051CE  74        
000051CF  2041 6464 7971          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
000051D3  7265 7373 
000051D7  3A20 2425 
000051DB  30        
000051DC  3858 00   7972          dc.b      56,88,0
                    7973   @m68kde~1_108:
000051E0  0D0A 2020 7974          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000051E4  4C20 2020 
000051E8  2020 2020 
000051EC  2020 20   
000051EF  2020 2D20 7975          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000051F3  4C6F 6164 
000051F7  2050 726F 
000051FB  67        
000051FC  7261 6D20 7976          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00005200  282E 4845 
00005204  5820 6669 
00005208  6C        
00005209  6529 2066 7977          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
0000520D  726F 6D20 
00005211  4C61 7074 
00005215  6F        
00005216  7000      7978          dc.b      112,0
                    7979   @m68kde~1_109:
00005218  0D0A 2020 7980          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
0000521C  4D20 2020 
00005220  2020 2020 
00005224  2020 20   
00005227  2020 2D20 7981          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000522B  4D65 6D6F 
0000522F  7279 2045 
00005233  78        
00005234  616D 696E 7982          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00005238  6520 616E 
0000523C  6420 4368 
00005240  61        
00005241  6E67 6500 7983          dc.b      110,103,101,0
                    7984   @m68kde~1_110:
00005246  0D0A 2020 7985          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
0000524A  5020 2020 
0000524E  2020 2020 
00005252  2020 20   
00005255  2020 2D20 7986          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00005259  5072 6F67 
0000525D  7261 6D20 
00005261  46        
00005262  6C61 7368 7987          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00005266  204D 656D 
0000526A  6F72 7920 
0000526E  7769 7468 7988          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00005272  2055 7365 
00005276  7220 5072 
0000527A  6F67 7261 7989          dc.b      111,103,114,97,109,0
0000527E  6D00      
                    7990   @m68kde~1_111:
00005280  0D0A 2020 7991          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00005284  5220 2020 
00005288  2020 2020 
0000528C  2020 20   
0000528F  2020 2D20 7992          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00005293  4469 7370 
00005297  6C61 7920 
0000529B  36        
0000529C  3830 3030 7993          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
000052A0  2052 6567 
000052A4  6973 7465 
000052A8  72        
000052A9  7300      7994          dc.b      115,0
                    7995   @m68kde~1_112:
000052AC  0D0A 2020 7996          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000052B0  5320 2020 
000052B4  2020 2020 
000052B8  2020 20   
000052BB  2020 2D20 7997          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000052BF  546F 6767 
000052C3  6C65 204F 
000052C7  4E        
000052C8  2F4F 4646 7998          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
000052CC  2053 696E 
000052D0  676C 6520 
000052D4  53        
000052D5  7465 7020 7999          dc.b      116,101,112,32,77,111,100,101,0
000052D9  4D6F 6465 
000052DD  00        
                    8000   @m68kde~1_113:
000052DE  0D0A 2020 8001          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000052E2  544D 2020 
000052E6  2020 2020 
000052EA  2020 20   
000052ED  2020 2D20 8002          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000052F1  5465 7374 
000052F5  204D 656D 
000052F9  6F        
000052FA  7279 00   8003          dc.b      114,121,0
                    8004   @m68kde~1_114:
000052FE  0D0A 2020 8005          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00005302  5453 2020 
00005306  2020 2020 
0000530A  2020 20   
0000530D  2020 2D20 8006          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00005311  5465 7374 
00005315  2053 7769 
00005319  74        
0000531A  6368 6573 8007          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
0000531E  3A20 5357 
00005322  372D 3000 
                    8008   @m68kde~1_115:
00005326  0D0A 2020 8009          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000532A  5444 2020 
0000532E  2020 2020 
00005332  2020 20   
00005335  2020 2D20 8010          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00005339  5465 7374 
0000533D  2044 6973 
00005341  70        
00005342  6C61 7973 8011          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00005346  3A20 4C45 
0000534A  4473 2061 
0000534E  6E        
0000534F  6420 372D 8012          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00005353  5365 676D 
00005357  656E 7400 
                    8013   @m68kde~1_116:
0000535C  0D0A 2020 8014          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00005360  5744 2F57 
00005364  532F 5743 
00005368  2F57 4B   
0000536B  2020 2D20 8015          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
0000536F  5761 7463 
00005373  6820 506F 
00005377  696E      
00005379  743A 2044 8016          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
0000537D  6973 706C 
00005381  6179 2F53 
00005385  65        
00005386  742F 436C 8017          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
0000538A  6561 722F 
0000538E  4B69 6C6C 
00005392  00        
                    8018   @m68kde~1_117:
00005394  0D0A 2300 8019          dc.b      13,10,35,0
                    8020   @m68kde~1_118:
00005398  0D0A 5072 8021          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
0000539C  6F67 7261 
000053A0  6D20 5275 
000053A4  6E        
000053A5  6E69 6E67 8022          dc.b      110,105,110,103,46,46,46,46,46,0
000053A9  2E2E 2E2E 
000053AD  2E00      
                    8023   @m68kde~1_119:
000053B0  0D0A 5072 8024          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000053B4  6573 7320 
000053B8  3C52 4553 
000053BC  4554      
000053BE  3E20 6275 8025          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000053C2  7474 6F6E 
000053C6  203C 4B65 
000053CA  79        
000053CB  303E 206F 8026          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
000053CF  6E20 4445 
000053D3  3120 746F 
000053D7  2073      
000053D9  746F 7000 8027          dc.b      116,111,112,0
                    8028   @m68kde~1_120:
000053DE  0D0A 4572 8029          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000053E2  726F 723A 
000053E6  2050 7265 
000053EA  73        
000053EB  7320 2747 8030          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000053EF  2720 6669 
000053F3  7273 7420 
000053F7  74        
000053F8  6F20 7374 8031          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000053FC  6172 7420 
00005400  7072 6F67 
00005404  7261 6D00 8032          dc.b      114,97,109,0
                    8033   @m68kde~1_121:
00005408  0D0A 5369 8034          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000540C  6E67 6C65 
00005410  2053 7465 
00005414  70        
00005415  2020 3A5B 8035          dc.b      32,32,58,91,79,78,93,0
00005419  4F4E 5D00 
                    8036   @m68kde~1_122:
0000541E  0D0A 5072 8037          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00005422  6573 7320 
00005426  2747 2720 
0000542A  74        
0000542B  6F20 5472 8038          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
0000542F  6163 6520 
00005433  5072 6F67 
00005437  72        
00005438  616D 2066 8039          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
0000543C  726F 6D20 
00005440  6164 6472 
00005444  6573 7320 8040          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00005448  2425 582E 
0000544C  2E2E 2E2E 
00005450  00        
                    8041   @m68kde~1_123:
00005452  0D0A 5075 8042          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00005456  7368 203C 
0000545A  5245 5345 
0000545E  5420      
00005460  4275 7474 8043          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00005464  6F6E 3E20 
00005468  746F 2053 
0000546C  74        
0000546D  6F70 2E2E 8044          dc.b      111,112,46,46,46,46,46,0
00005471  2E2E 2E00 
                    8045   @m68kde~1_124:
00005476  0D0A 5369 8046          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000547A  6E67 6C65 
0000547E  2053 7465 
00005482  70        
00005483  203A 205B 8047          dc.b      32,58,32,91,79,70,70,93,0
00005487  4F46 465D 
0000548B  00        
                    8048   @m68kde~1_125:
0000548C  0D0A 4272 8049          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005490  6561 6B20 
00005494  506F 696E 
00005498  74        
00005499  7320 3A5B 8050          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
0000549D  456E 6162 
000054A1  6C65 645D 
000054A5  00        
                    8051   @m68kde~1_126:
000054A6  0D0A 5072 8052          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000054AA  6573 7320 
000054AE  3C45 5343 
000054B2  3E20      
000054B4  746F 2052 8053          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000054B8  6573 756D 
000054BC  6520 5573 
000054C0  6572 2050 8054          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
000054C4  726F 6772 
000054C8  616D 2E2E 
000054CC  2E        
000054CD  2E2E 00   8055          dc.b      46,46,0
                    8056   @m68kde~1_127:
000054D0  0D0A 5369 8057          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000054D4  6E67 6C65 
000054D8  2053 7465 
000054DC  70        
000054DD  2020 3A5B 8058          dc.b      32,32,58,91,79,70,70,93,0
000054E1  4F46 465D 
000054E5  00        
                    8059   @m68kde~1_128:
000054E6  0D0A 0D0A 8060          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000054EA  5072 6F67 
000054EE  7261 6D20 
000054F2  41        
000054F3  424F 5254 8061          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000054F7  2021 2121 
000054FB  2121 210D 
000054FF  0A00      
                    8062   @m68kde~1_129:
00005502  2573 0D0A 8063          dc.b      37,115,13,10,0
00005506  00        
                    8064   @m68kde~1_130:
00005508  0D0A 0D0A 8065          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000550C  5072 6F67 
00005510  7261 6D20 
00005514  41        
00005515  424F 5254 8066          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005519  2021 2121 
0000551D  2121 00   
                    8067   @m68kde~1_131:
00005520  0D0A 556E 8068          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005524  6861 6E64 
00005528  6C65 6420 
0000552C  49        
0000552D  6E74 6572 8069          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00005531  7275 7074 
00005535  3A20 4952 
00005539  5125 6420 8070          dc.b      81,37,100,32,33,33,33,33,33,0
0000553D  2121 2121 
00005541  2100      
                    8071   @m68kde~1_132:
00005544  4144 4452 8072          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00005548  4553 5320 
0000554C  4552 524F 
00005550  523A 20   
00005553  3136 206F 8073          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005557  7220 3332 
0000555B  2042 6974 
0000555F  2054      
00005561  7261 6E73 8074          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00005565  6665 7220 
00005569  746F 2F66 
0000556D  726F 6D20 8075          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00005571  616E 204F 
00005575  4444 2041 
00005579  64        
0000557A  6472 6573 8076          dc.b      100,114,101,115,115,46,46,46,46,0
0000557E  732E 2E2E 
00005582  2E00      
                    8077   @m68kde~1_133:
00005584  556E 6861 8078          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00005588  6E64 6C65 
0000558C  6420 5472 
00005590  6170 2021 8079          dc.b      97,112,32,33,33,33,33,33,0
00005594  2121 2121 
00005598  00        
                    8080   @m68kde~1_134:
0000559A  4255 5320 8081          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000559E  4572 726F 
000055A2  7221 00   
                    8082   @m68kde~1_135:
000055A6  4144 4452 8083          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
000055AA  4553 5320 
000055AE  4572 726F 
000055B2  7221      
000055B4  00        8084          dc.b      0
                    8085   @m68kde~1_136:
000055B6  494C 4C45 8086          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000055BA  4741 4C20 
000055BE  494E 5354 
000055C2  5255 43   
000055C5  5449 4F4E 8087          dc.b      84,73,79,78,0
000055C9  00        
                    8088   @m68kde~1_137:
000055CA  4449 5649 8089          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000055CE  4445 2042 
000055D2  5920 5A45 
000055D6  524F 00   
                    8090   @m68kde~1_138:
000055DA  2743 484B 8091          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000055DE  2720 494E 
000055E2  5354 5255 
000055E6  4354 49   
000055E9  4F4E 00   8092          dc.b      79,78,0
                    8093   @m68kde~1_139:
000055EC  5452 4150 8094          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000055F0  5620 494E 
000055F4  5354 5255 
000055F8  4354 49   
000055FB  4F4E 00   8095          dc.b      79,78,0
                    8096   @m68kde~1_140:
000055FE  5052 4956 8097          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00005602  494C 4547 
00005606  4520 5649 
0000560A  4F4C 41   
0000560D  5449 4F4E 8098          dc.b      84,73,79,78,0
00005611  00        
                    8099   @m68kde~1_141:
00005612  554E 494E 8100          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005616  4954 4941 
0000561A  4C49 5345 
0000561E  4420 49   
00005621  5251 00   8101          dc.b      82,81,0
                    8102   @m68kde~1_142:
00005624  5350 5552 8103          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005628  494F 5553 
0000562C  2049 5251 
00005630  00        
                    8104   @m68kde~1_143:
00005632  0D0A 5374 8105          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005636  6172 7420 
0000563A  4164 6472 
0000563E  65        
0000563F  7373 2069 8106          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00005643  6E20 4D65 
00005647  6D6F 7279 
0000564B  3A20 00   8107          dc.b      58,32,0
                    8108   @m68kde~1_144:
0000564E  0D0A 456E 8109          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00005652  7465 7220 
00005656  5374 7269 
0000565A  6E        
0000565B  6720 2845 8110          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
0000565F  5343 2074 
00005663  6F20 656E 
00005667  64        
00005668  2920 3A00 8111          dc.b      41,32,58,0
                    8112   @m68kde~1_145:
0000566C  0A45 6E74 8113          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
00005670  6572 2077 
00005674  6861 7420 
00005678  73        
00005679  697A 6520 8114          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
0000567D  6F66 206D 
00005681  656D 6F72 
00005685  7920 796F 8115          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
00005689  7520 7761 
0000568D  6E74 2074 
00005691  6F20 7265 8116          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00005695  6164 2F77 
00005699  7269 7465 
0000569D  0A20 4279 8117          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
000056A1  7465 203D 
000056A5  2030 0A20 
000056A9  576F      
000056AB  7264 203D 8118          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
000056AF  2031 0A20 
000056B3  4C6F 6E67 
000056B7  20        
000056B8  576F 7264 8119          dc.b      87,111,114,100,32,61,32,50,10,0
000056BC  203D 2032 
000056C0  0A00      
                    8120   @m68kde~1_146:
000056C2  0A45 6E74 8121          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000056C6  6572 2077 
000056CA  6869 6368 
000056CE  2064 6174 8122          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000056D2  6120 7061 
000056D6  7474 6572 
000056DA  6E        
000056DB  2079 6F75 8123          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000056DF  2077 616E 
000056E3  7420 746F 
000056E7  2077 7269 8124          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000056EB  7465 2069 
000056EF  6E74 6F20 
000056F3  6D65 6D6F 8125          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
000056F7  7279 0A20 
000056FB  3078 3030 
000056FF  20        
00005700  3D20 300A 8126          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
00005704  2030 7842 
00005708  3220 3D20 
0000570C  310A 20   
0000570F  3078 4333 8127          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
00005713  203D 2032 
00005717  0A20 3078 
0000571B  4434      
0000571D  203D 2033 8128          dc.b      32,61,32,51,10,0
00005721  0A00      
                    8129   @m68kde~1_147:
00005724  0A45 6E74 8130          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005728  6572 2077 
0000572C  6869 6368 
00005730  2064 6174 8131          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005734  6120 7061 
00005738  7474 6572 
0000573C  6E        
0000573D  2079 6F75 8132          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005741  2077 616E 
00005745  7420 746F 
00005749  2077 7269 8133          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000574D  7465 2069 
00005751  6E74 6F20 
00005755  6D65 6D6F 8134          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005759  7279 0A20 
0000575D  3078 3030 
00005761  30        
00005762  3020 3D20 8135          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
00005766  300A 2030 
0000576A  7831 3233 
0000576E  3420 3D   
00005771  2031 0A20 8136          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
00005775  3078 4131 
00005779  4232 203D 
0000577D  2032 0A   
00005780  2030 7843 8137          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
00005784  3344 3420 
00005788  3D20 330A 
0000578C  00        
                    8138   @m68kde~1_148:
0000578E  0A45 6E74 8139          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005792  6572 2077 
00005796  6869 6368 
0000579A  2064 6174 8140          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
0000579E  6120 7061 
000057A2  7474 6572 
000057A6  6E        
000057A7  2079 6F75 8141          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000057AB  2077 616E 
000057AF  7420 746F 
000057B3  2077 7269 8142          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000057B7  7465 2069 
000057BB  6E74 6F20 
000057BF  6D65 6D6F 8143          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000057C3  7279 0A20 
000057C7  3078 3030 
000057CB  30        
000057CC  305F 3030 8144          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
000057D0  3030 203D 
000057D4  2030 0A20 
000057D8  3078 41   
000057DB  4142 425F 8145          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
000057DF  4343 4444 
000057E3  203D 2031 
000057E7  0A20 30   
000057EA  7831 3132 8146          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
000057EE  325F 3333 
000057F2  3434 203D 
000057F6  2032 0A   
000057F9  2030 7837 8147          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
000057FD  3635 345F 
00005801  3332 3130 
00005805  203D 20   
00005808  330A 00   8148          dc.b      51,10,0
                    8149   @m68kde~1_149:
0000580C  0A50 726F 8150          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
00005810  7669 6465 
00005814  2053 7461 
00005818  72        
00005819  7420 4164 8151          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
0000581D  6472 6573 
00005821  7320 696E 
00005825  2068 6578 8152          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
00005829  2028 646F 
0000582D  206E 6F74 
00005831  2075 7365 8153          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
00005835  2030 7820 
00005839  7072 6566 
0000583D  6978 290A 8154          dc.b      105,120,41,10,48,120,0
00005841  3078 00   
                    8155   @m68kde~1_150:
00005844  0A50 726F 8156          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
00005848  7669 6465 
0000584C  2045 6E64 
00005850  2041 6464 8157          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
00005854  7265 7373 
00005858  2069 6E20 
0000585C  6865 7820 8158          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
00005860  2864 6F20 
00005864  6E6F 7420 
00005868  7573 6520 8159          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
0000586C  3078 2070 
00005870  7265 6669 
00005874  7829 0A30 8160          dc.b      120,41,10,48,120,0
00005878  7800      
                    8161   @m68kde~1_151:
0000587A  0A53 7461 8162          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
0000587E  7274 2041 
00005882  6464 7265 
00005886  73        
00005887  7320 3078 8163          dc.b      115,32,48,120,37,48,56,120,10,0
0000588B  2530 3878 
0000588F  0A00      
                    8164   @m68kde~1_152:
00005892  0A45 6E64 8165          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
00005896  2041 6464 
0000589A  7265 7373 
0000589E  3A20 3078 8166          dc.b      58,32,48,120,37,48,56,120,10,0
000058A2  2530 3878 
000058A6  0A00      
                    8167   @m68kde~1_153:
000058A8  4552 524F 8168          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
000058AC  522E 2E2E 
000058B0  2041 6464 
000058B4  7265      
000058B6  7373 2030 8169          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
000058BA  7825 7820 
000058BE  6973 2062 
000058C2  65        
000058C3  796F 6E64 8170          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
000058C7  2074 6865 
000058CB  206D 656D 
000058CF  6F72 7920 8171          dc.b      111,114,121,32,114,97,110,103,101,10,0
000058D3  7261 6E67 
000058D7  650A 00   
                    8172   @m68kde~1_154:
000058DA  4552 524F 8173          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
000058DE  522E 2E2E 
000058E2  2056 616C 
000058E6  7565      
000058E8  2077 7269 8174          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
000058EC  7474 656E 
000058F0  2074 6F20 
000058F4  6164 6472 8175          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
000058F8  6573 7320 
000058FC  3078 2578 
00005900  203D 3D20 8176          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00005904  3078 2578 
00005908  2E20 5661 
0000590C  6C75      
0000590E  6520 4578 8177          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
00005912  7065 6374 
00005916  6564 3A20 
0000591A  30        
0000591B  7825 780A 8178          dc.b      120,37,120,10,0
0000591F  00        
                    8179   @m68kde~1_155:
00005920  4164 6472 8180          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005924  6573 733A 
00005928  2030 7825 
0000592C  78        
0000592D  2056 616C 8181          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
00005931  7565 3A20 
00005935  3078 2530 
00005939  3258      
0000593B  0A00      8182          dc.b      10,0
                    8183   @m68kde~1_156:
0000593E  4164 6472 8184          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005942  6573 733A 
00005946  2030 7825 
0000594A  78        
0000594B  2056 616C 8185          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
0000594F  7565 3A20 
00005953  3078 2530 
00005957  3458      
00005959  0A00      8186          dc.b      10,0
                    8187   @m68kde~1_157:
0000595C  4164 6472 8188          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005960  6573 733A 
00005964  2030 7825 
00005968  78        
00005969  2056 616C 8189          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
0000596D  7565 3A20 
00005971  3078 2530 
00005975  3858      
00005977  0A00      8190          dc.b      10,0
                    8191   @m68kde~1_158:
0000597A  4445 312D 8192          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
0000597E  3638 6B20 
00005982  4275 6720 
00005986  5631      
00005988  2E37 3700 8193          dc.b      46,55,55,0
                    8194   @m68kde~1_159:
0000598C  436F 7079 8195          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00005990  7269 6768 
00005994  7420 2843 
00005998  2920 504A 8196          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
0000599C  2044 6176 
000059A0  6965 7320 
000059A4  3230      
000059A6  3136 00   8197          dc.b      49,54,0
                    8198   @m68kde~1_160:
000059AA  0D0A 5275 8199          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000059AE  6E6E 696E 
000059B2  672E 2E2E 
000059B6  2E        
000059B7  2E00      8200          dc.b      46,0
                    8201   @m68kde~1_161:
000059BA  5275 6E6E 8202          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000059BE  696E 672E 
000059C2  2E2E 2E2E 
000059C6  00        
                    8203   @m68kde~1_162:
000059C8  4279 3A20 8204          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000059CC  504A 2044 
000059D0  6176 6965 
000059D4  73        
000059D5  00        8205          dc.b      0
                    8206   @m68kde~1_163:
000059D6  0D0A 2573 8207          dc.b      13,10,37,115,0
000059DA  00        
                    8208   @m68kde~1_164:
000059DC  0A20 5374 8209          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
000059E0  7564 656E 
000059E4  7420 4E61 
000059E8  6D        
000059E9  6573 3A0A 8210          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
000059ED  205A 6163 
000059F1  6861 7269 
000059F5  61        
000059F6  6820 4A6F 8211          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
000059FA  7365 7068 
000059FE  3A20 3435 
00005A02  35        
00005A03  3030 3035 8212          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00005A07  3520 0A20 
00005A0B  556D 6169 
00005A0F  7220      
00005A11  4D61 7A68 8213          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
00005A15  6172 3A20 
00005A19  3230 3333 
00005A1D  3333      
00005A1F  3038 0A00 8214          dc.b      48,56,10,0
                    8215   @m68kde~1_165:
00005A24  496E 6974 8216          dc.b      73,110,105,116,105,97,108,105,122,105,110,103
00005A28  6961 6C69 
00005A2C  7A69 6E67 
00005A30  2069 3263 8217          dc.b      32,105,50,99,32,116,101,115,116,46,46,46,10
00005A34  2074 6573 
00005A38  742E 2E2E 
00005A3C  0A        
00005A3D  00        8218          dc.b      0
                    8219          section   data
00005A3E            8220                   align
          0000 5A3E 8221   DataStart       equ       *
                    8222   
                    8223   *********************************************************************************************************
                    8224   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8225   * to ram as part of the CStart routine in this file
                    8226   *********************************************************************************************************
                    8227   
                    8228   I2CTest_IICData:
00005A3E  0000 0001 8229          dc.l      1,2,3,4,5
00005A42  0000 0002 
00005A46  0000 0003 
00005A4A  0000 0004 
00005A4E  0000 0005 
                    8230   @vsscanf_bufx:
00005A52  0B00 0546 8231          dc.l      @vsscanf_buf
                    8232   @vsscanf_1:
00005A56  0A00      8233          dc.b      10,0
                    8234   __ctype:
00005A58  0040 4040 8235          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005A5C  4040 4040 
00005A60  4040 5050 
00005A64  5050 50   
00005A67  4040 4040 8236          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00005A6B  4040 4040 
00005A6F  4040 4040 
00005A73  4040 40   
00005A76  4040 40D0 8237          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005A7A  A0A0 A0A0 
00005A7E  A0A0 A0A0 
00005A82  A0A0 A0A0 8238          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005A86  A0A0 A08C 
00005A8A  8C8C 8C   
00005A8D  8C8C 8C8C 8239          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005A91  8C8C A0A0 
00005A95  A0A0 A0   
00005A98  A0A0 8A8A 8240          dc.b      160,160,138,138,138,138,138,138,130,130,130
00005A9C  8A8A 8A8A 
00005AA0  8282 82   
00005AA3  8282 8282 8241          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005AA7  8282 8282 
00005AAB  8282 82   
00005AAE  8282 8282 8242          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005AB2  8282 A0A0 
00005AB6  A0A0 A0   
00005AB9  A089 8989 8243          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005ABD  8989 8981 
00005AC1  8181 81   
00005AC4  8181 8181 8244          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005AC8  8181 8181 
00005ACC  8181 81   
00005ACF  8181 8181 8245          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005AD3  81A0 A0A0 
00005AD7  A040 0000 
00005ADB  00        
00005ADC  0000 0000 8246          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005AE0  0000 0000 
00005AE4  0000 0000 
00005AE8  0000 0000 
00005AEC  0000 0000 
00005AF0  0000      
00005AF2  0000 0000 8247          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005AF6  0000 0000 
00005AFA  0000 0000 
00005AFE  0000 0000 
00005B02  0000 0000 
00005B06  0000      
00005B08  0000 0000 8248          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B0C  0000 0000 
00005B10  0000 0000 
00005B14  0000 0000 
00005B18  0000 0000 
00005B1C  0000      
00005B1E  0000 0000 8249          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B22  0000 0000 
00005B26  0000 0000 
00005B2A  0000 0000 
00005B2E  0000 0000 
00005B32  0000      
00005B34  0000 0000 8250          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B38  0000 0000 
00005B3C  0000 0000 
00005B40  0000 0000 
00005B44  0000 0000 
00005B48  0000      
00005B4A  0000 0000 8251          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B4E  0000 0000 
00005B52  0000 0000 
00005B56  0000 00   
                    8252   @itoa_1:
00005B5A  2D32 3134 8253          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005B5E  3734 3833 
00005B62  3634 3800 
                    8254          section   bss
00005B66            8255                   align
          0000 5B66 8256   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8257   
                    8258   *********************************************************************************************************
                    8259   * Section for Uninitialised Data held in ROM as constants
                    8260   *********************************************************************************************************
                    8261   
0B000000            8262                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0128 8263   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8264   
                    8265   
0B000000            8266   bss             org       bss
                    8267   
                    8268   *********************************************************************************************************
                    8269   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8270   * install the exception handler using the C function InstallExceptionHandler()
                    8271   *********************************************************************************************************
                    8272   
                    8273   
                    8274   
0B000000            8275   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            8276   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            8277   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            8278   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            8279   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            8280   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            8281   VCheck           ds.l    1      ditto
0B00001C            8282   VTrapV           ds.l    1      ditto
0B000020            8283   VPrivilege       ds.l    1      ditto
0B000024            8284   VTrace           ds.l    1
0B000028            8285   VLine1010emul    ds.l    1
0B00002C            8286   VLine1111emul    ds.l    1
0B000030            8287   VUnassigned1     ds.l    1
0B000034            8288   VUnassigned2     ds.l    1
0B000038            8289   VUnassigned3     ds.l    1
0B00003C            8290   VUninit_IRQ      ds.l    1
0B000040            8291   VUnassigned4     ds.l    1
0B000044            8292   VUnassigned5     ds.l    1
0B000048            8293   VUnassigned6     ds.l    1
0B00004C            8294   VUnassigned7     ds.l    1
0B000050            8295   VUnassigned8     ds.l    1
0B000054            8296   VUnassigned9     ds.l    1
0B000058            8297   VUnassigned10    ds.l    1
0B00005C            8298   VUnassigned11    ds.l    1
0B000060            8299   VSpuriousIRQ     ds.l    1
                    8300   
                    8301   * Interrupt handlers Vector 25-31
0B000064            8302   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            8303   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            8304   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            8305   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            8306   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            8307   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            8308   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8309   
                    8310   * Trap Handler vectors 32-47
0B000080            8311   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            8312   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            8313   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            8314   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            8315   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            8316   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            8317   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            8318   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            8319   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            8320   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            8321   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            8322   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            8323   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            8324   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            8325   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            8326   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8327   
                    8328   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8329   
                    8330   ***********************************************************************************************************
                    8331   * Other Variables
                    8332   ***********************************************************************************************************
                    8333   *__DebugA5       ds.l    1
                    8334   *__UserA5        ds.l    1
                    8335   
                    8336   ***********************************************************************************************************
0B0000C0            8337   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            8338   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            8339   __heap:         ds.l    0       ; pointers for malloc functions
                    8340   
                    8341   *__himem:       ds.l    himem            ; highest memory location + 1
                    8342   *__stklen:      ds.l    stklen           ; default stack size
                    8343   
                    8344   *********************************************************************************************************
                    8345   * Section for Heap
                    8346   *********************************************************************************************************
                    8347   
                    8348   _i:
0B0000C4            8349          ds.b      4
                    8350   _x:
0B0000C8            8351          ds.b      4
                    8352   _y:
0B0000CC            8353          ds.b      4
                    8354   _z:
0B0000D0            8355          ds.b      4
                    8356   _PortA_Count:
0B0000D4            8357          ds.b      4
                    8358   _Trace:
0B0000D8            8359          ds.b      4
                    8360   _GoFlag:
0B0000DC            8361          ds.b      4
                    8362   _Echo:
0B0000E0            8363          ds.b      4
                    8364   _d0:
0B0000E4            8365          ds.b      4
                    8366   _d1:
0B0000E8            8367          ds.b      4
                    8368   _d2:
0B0000EC            8369          ds.b      4
                    8370   _d3:
0B0000F0            8371          ds.b      4
                    8372   _d4:
0B0000F4            8373          ds.b      4
                    8374   _d5:
0B0000F8            8375          ds.b      4
                    8376   _d6:
0B0000FC            8377          ds.b      4
                    8378   _d7:
0B000100            8379          ds.b      4
                    8380   _a0:
0B000104            8381          ds.b      4
                    8382   _a1:
0B000108            8383          ds.b      4
                    8384   _a2:
0B00010C            8385          ds.b      4
                    8386   _a3:
0B000110            8387          ds.b      4
                    8388   _a4:
0B000114            8389          ds.b      4
                    8390   _a5:
0B000118            8391          ds.b      4
                    8392   _a6:
0B00011C            8393          ds.b      4
                    8394   _PC:
0B000120            8395          ds.b      4
                    8396   _SSP:
0B000124            8397          ds.b      4
                    8398   _USP:
0B000128            8399          ds.b      4
                    8400   _SR:
0B00012C            8401          ds.b      2
                    8402   _BreakPointAddress:
0B00012E            8403          ds.b      32
                    8404   _BreakPointInstruction:
0B00014E            8405          ds.b      16
                    8406   _BreakPointSetOrCleared:
0B00015E            8407          ds.b      32
                    8408   _InstructionSize:
0B00017E            8409          ds.b      4
                    8410   _WatchPointAddress:
0B000182            8411          ds.b      32
                    8412   _WatchPointSetOrCleared:
0B0001A2            8413          ds.b      32
                    8414   _WatchPointString:
0B0001C2            8415          ds.b      800
                    8416   _TempString:
0B0004E2            8417          ds.b      100
                    8418   @vsscanf_buf:
0B000546            8419          ds.b      80
                    8420          section   heap
0B000596            8421                   align
          0B00 0596 8422   bssEnd          equ *                   end of storage space for unitialised variables
                    8423   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 8424   heap   equ       *
0B000596            8425                    align
          0000 0000

Assembly errors: 0
