680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 27 Mar 2025      Time: 01:44:11          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2F4E      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  25FE      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3CC6      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  469C      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  46A0      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  46B6      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  46B8      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3CC6      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  330A      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  46BA      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  46F4      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  470C      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  4714      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  471A      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  469C      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3CC6      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  471E      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  46F4      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  4732      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  4748      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  475C      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3CC6      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  478C      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  3404      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  323E      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  330A      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  47BC      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  47E2      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3CC6      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4804      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  4820      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  4866      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  4878      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  3376      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  488A      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; // TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011 // This might need to be 0x53
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while (TestForSPITransmitDataComplete() == 0);
                    1614   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1615          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1616          tst.l     D0
00001122  6602      1617          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1621          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1622          rts
                    1623   ; }
                    1624   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1625   ; void ClearSPIReadFIFO(void) {
                    1626   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1627          link      A6,#-4
                    1628   ; volatile unsigned char dummy;
                    1629   ; while((SPI_Status & 0x01) == 0) {
                    1630   ClearSPIReadFIFO_1:
00001134  1039 0040 1631          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1632          and.b     #1,D0
0000113E  660A      1633          bne.s     ClearSPIReadFIFO_3
                    1634   ; dummy = SPI_Data;
00001140  1D79 0040 1635          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1636          bra       ClearSPIReadFIFO_1
                    1637   ClearSPIReadFIFO_3:
0000114A  4E5E      1638          unlk      A6
0000114C  4E75      1639          rts
                    1640   ; }
                    1641   ; }
                    1642   ; void SPIFlashPollStatusWLE(void) {
                    1643   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char status;
                    1646   ; unsigned char dummy;
                    1647   ; do {
                    1648   SPIFlashPollStatusWLE_1:
                    1649   ; // Start a new read status register command each time
                    1650   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1651          move.b    #254,4227112
00001156  0040 8028 
                    1652   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1653          pea       5
0000115E  4EB8 10C4 1654          jsr       _SPISafeWrite
00001162  584F      1655          addq.w    #4,A7
                    1656   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1657          pea       255
00001168  4EB8 10C4 1658          jsr       _SPISafeWrite
0000116C  584F      1659          addq.w    #4,A7
0000116E  1D40 FFFE 1660          move.b    D0,-2(A6)
                    1661   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1662          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1663          move.b    -2(A6),D0
0000117E  C03C 0002 1664          and.b     #2,D0
00001182  67CE      1665          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1666          unlk      A6
00001186  4E75      1667          rts
                    1668   ; // printf("\r\n WLE Status: %02x \n", status);
                    1669   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1670   ; }
                    1671   ; void SPIFlashPollStatusBusy(void) {
                    1672   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1673          link      A6,#-4
                    1674   ; unsigned char status;
                    1675   ; unsigned char dummy;
                    1676   ; do {
                    1677   SPIFlashPollStatusBusy_1:
                    1678   ; // Start a new read status register command each time
                    1679   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1680          move.b    #254,4227112
00001190  0040 8028 
                    1681   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1682          pea       5
00001198  4EB8 10C4 1683          jsr       _SPISafeWrite
0000119C  584F      1684          addq.w    #4,A7
                    1685   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1686          pea       255
000011A2  4EB8 10C4 1687          jsr       _SPISafeWrite
000011A6  584F      1688          addq.w    #4,A7
000011A8  1D40 FFFE 1689          move.b    D0,-2(A6)
                    1690   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1691          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1692          move.b    -2(A6),D0
000011B8  C03C 0001 1693          and.b     #1,D0
000011BC  66CE      1694          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1695          unlk      A6
000011C0  4E75      1696          rts
                    1697   ; // printf("\r\n Busy Status: %02x \n", status);
                    1698   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011C2  4E56 0000 1707          link      A6,#0
                    1708   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1709          move.l    8(A6),D1
000011CA  C2BC 0000 1710          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1711          move.l    D1,-(A7)
000011D2  4EB8 10C4 1712          jsr       _SPISafeWrite
000011D6  584F      1713          addq.w    #4,A7
                    1714   ; return SPI_Data;
000011D8  1039 0040 1715          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1716          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1717          unlk      A6
000011E6  4E75      1718          rts
                    1719   ; }
                    1720   ; void SPIFlashWriteEnable() {
                    1721   _SPIFlashWriteEnable:
                    1722   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1723          move.b    #254,4227112
000011EC  0040 8028 
                    1724   ; SPISafeWrite(0x06);
000011F0  4878 0006 1725          pea       6
000011F4  4EB8 10C4 1726          jsr       _SPISafeWrite
000011F8  584F      1727          addq.w    #4,A7
                    1728   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1729          move.b    #255,4227112
000011FE  0040 8028 
                    1730   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1731   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1732          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1733          rts
                    1734   ; }
                    1735   ; void SPISendAddress(int c) {
                    1736   _SPISendAddress:
00001208  4E56 0000 1737          link      A6,#0
0000120C  48E7 2020 1738          movem.l   D2/A2,-(A7)
00001210  242E 0008 1739          move.l    8(A6),D2
00001214  45F8 10C4 1740          lea       _SPISafeWrite.L,A2
                    1741   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1742          move.l    D2,D1
0000121A  E081      1743          asr.l     #8,D1
0000121C  E081      1744          asr.l     #8,D1
0000121E  C2BC 0000 1745          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1746          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1747          move.l    D1,-(A7)
0000122C  4E92      1748          jsr       (A2)
0000122E  584F      1749          addq.w    #4,A7
                    1750   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1751          move.l    D2,D1
00001232  E081      1752          asr.l     #8,D1
00001234  C2BC 0000 1753          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1754          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1755          move.l    D1,-(A7)
00001242  4E92      1756          jsr       (A2)
00001244  584F      1757          addq.w    #4,A7
                    1758   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1759          move.l    D2,D1
00001248  C2BC 0000 1760          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1761          and.l     #255,D1
00001252  00FF      
00001254  2F01      1762          move.l    D1,-(A7)
00001256  4E92      1763          jsr       (A2)
00001258  584F      1764          addq.w    #4,A7
0000125A  4CDF 0404 1765          movem.l   (A7)+,D2/A2
0000125E  4E5E      1766          unlk      A6
00001260  4E75      1767          rts
                    1768   ; }
                    1769   ; void SPIFlashPageProgram(int addr) {
                    1770   _SPIFlashPageProgram:
00001262  4E56 FFF8 1771          link      A6,#-8
00001266  2F02      1772          move.l    D2,-(A7)
                    1773   ; unsigned char *sramMemoryPtr;
                    1774   ; int flashAddr = addr - 0x08000000;
00001268  202E 0008 1775          move.l    8(A6),D0
0000126C  0480 0800 1776          sub.l     #134217728,D0
00001270  0000      
00001272  2D40 FFFC 1777          move.l    D0,-4(A6)
                    1778   ; int i;
                    1779   ; SPI_CS = 0xFE;
00001276  13FC 00FE 1780          move.b    #254,4227112
0000127A  0040 8028 
                    1781   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000127E  4878 0002 1782          pea       2
00001282  4EB8 10C4 1783          jsr       _SPISafeWrite
00001286  584F      1784          addq.w    #4,A7
                    1785   ; SPISendAddress(flashAddr);
00001288  2F2E FFFC 1786          move.l    -4(A6),-(A7)
0000128C  4EB8 1208 1787          jsr       _SPISendAddress
00001290  584F      1788          addq.w    #4,A7
                    1789   ; for (i = 0; i < 256; i++) {
00001292  4282      1790          clr.l     D2
                    1791   SPIFlashPageProgram_1:
00001294  0C82 0000 1792          cmp.l     #256,D2
00001298  0100      
0000129A  6C22      1793          bge.s     SPIFlashPageProgram_3
                    1794   ; sramMemoryPtr = (unsigned char*) (addr + i);
0000129C  202E 0008 1795          move.l    8(A6),D0
000012A0  D082      1796          add.l     D2,D0
000012A2  2D40 FFF8 1797          move.l    D0,-8(A6)
                    1798   ; WriteSPIChar(*sramMemoryPtr); // Random value for testing purposes
000012A6  206E FFF8 1799          move.l    -8(A6),A0
000012AA  1210      1800          move.b    (A0),D1
000012AC  C2BC 0000 1801          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1802          move.l    D1,-(A7)
000012B4  4EB8 11C2 1803          jsr       _WriteSPIChar
000012B8  584F      1804          addq.w    #4,A7
000012BA  5282      1805          addq.l    #1,D2
000012BC  60D6      1806          bra       SPIFlashPageProgram_1
                    1807   SPIFlashPageProgram_3:
                    1808   ; // printf("%02x ", *sramMemoryPtr);
                    1809   ; }
                    1810   ; SPI_CS = 0xFF;
000012BE  13FC 00FF 1811          move.b    #255,4227112
000012C2  0040 8028 
                    1812   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1813   ; SPIFlashPollStatusBusy();
000012C6  4EB8 1188 1814          jsr       _SPIFlashPollStatusBusy
000012CA  241F      1815          move.l    (A7)+,D2
000012CC  4E5E      1816          unlk      A6
000012CE  4E75      1817          rts
                    1818   ; }
                    1819   ; void SPIFlashErase(void) {
                    1820   _SPIFlashErase:
                    1821   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1822   ; printf("\nErasing...\n");
000012D0  4879 0000 1823          pea       @m68kde~1_22.L
000012D4  48BE      
000012D6  4EB9 0000 1824          jsr       _printf
000012DA  3CC6      
000012DC  584F      1825          addq.w    #4,A7
                    1826   ; SPI_CS = 0xFE;
000012DE  13FC 00FE 1827          move.b    #254,4227112
000012E2  0040 8028 
                    1828   ; SPISafeWrite(0xC7);
000012E6  4878 00C7 1829          pea       199
000012EA  4EB8 10C4 1830          jsr       _SPISafeWrite
000012EE  584F      1831          addq.w    #4,A7
                    1832   ; SPI_CS = 0xFF;
000012F0  13FC 00FF 1833          move.b    #255,4227112
000012F4  0040 8028 
                    1834   ; SPIFlashPollStatusBusy();
000012F8  4EB8 1188 1835          jsr       _SPIFlashPollStatusBusy
000012FC  4E75      1836          rts
                    1837   ; }
                    1838   ; int SPIFlashRead() {
                    1839   _SPIFlashRead:
000012FE  4E56 FFFC 1840          link      A6,#-4
00001302  48E7 3000 1841          movem.l   D2/D3,-(A7)
                    1842   ; unsigned char readData;
                    1843   ; unsigned char *sramMemoryPtr;
                    1844   ; int addr;
                    1845   ; ClearSPIReadFIFO();
00001306  4EB8 1130 1846          jsr       _ClearSPIReadFIFO
                    1847   ; SPI_CS = 0xFE;
0000130A  13FC 00FE 1848          move.b    #254,4227112
0000130E  0040 8028 
                    1849   ; SPISafeWrite(0x03);
00001312  4878 0003 1850          pea       3
00001316  4EB8 10C4 1851          jsr       _SPISafeWrite
0000131A  584F      1852          addq.w    #4,A7
                    1853   ; SPISendAddress(0x0);
0000131C  42A7      1854          clr.l     -(A7)
0000131E  4EB8 1208 1855          jsr       _SPISendAddress
00001322  584F      1856          addq.w    #4,A7
                    1857   ; for (addr = 0x08000000; addr < (0x08040000); addr ++) {
00001324  243C 0800 1858          move.l    #134217728,D2
00001328  0000      
                    1859   SPIFlashRead_1:
0000132A  0C82 0804 1860          cmp.l     #134479872,D2
0000132E  0000      
00001330  6C1A      1861          bge.s     SPIFlashRead_3
                    1862   ; sramMemoryPtr = (unsigned char*) addr;
00001332  2D42 FFFC 1863          move.l    D2,-4(A6)
                    1864   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001336  4878 00FF 1865          pea       255
0000133A  4EB8 10C4 1866          jsr       _SPISafeWrite
0000133E  584F      1867          addq.w    #4,A7
00001340  1600      1868          move.b    D0,D3
                    1869   ; *sramMemoryPtr = readData;
00001342  206E FFFC 1870          move.l    -4(A6),A0
00001346  1083      1871          move.b    D3,(A0)
00001348  5282      1872          addq.l    #1,D2
0000134A  60DE      1873          bra       SPIFlashRead_1
                    1874   SPIFlashRead_3:
                    1875   ; }
                    1876   ; SPI_CS = 0xFF;
0000134C  13FC 00FF 1877          move.b    #255,4227112
00001350  0040 8028 
                    1878   ; SPIFlashPollStatusBusy();
00001354  4EB8 1188 1879          jsr       _SPIFlashPollStatusBusy
                    1880   ; return readData;
00001358  C6BC 0000 1881          and.l     #255,D3
0000135C  00FF      
0000135E  2003      1882          move.l    D3,D0
00001360  4CDF 000C 1883          movem.l   (A7)+,D2/D3
00001364  4E5E      1884          unlk      A6
00001366  4E75      1885          rts
                    1886   ; }
                    1887   ; /*******************************************************************
                    1888   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1889   ; ********************************************************************/
                    1890   ; void ProgramFlashChip(void)
                    1891   ; {
                    1892   _ProgramFlashChip:
00001368  4E56 FFFC 1893          link      A6,#-4
                    1894   ; int addr;
                    1895   ; SPIFlashPollStatusBusy();
0000136C  4EB8 1188 1896          jsr       _SPIFlashPollStatusBusy
                    1897   ; SPIFlashWriteEnable();
00001370  4EB8 11E8 1898          jsr       _SPIFlashWriteEnable
                    1899   ; SPIFlashErase();
00001374  4EB8 12D0 1900          jsr       _SPIFlashErase
                    1901   ; // 256KB = 262144 bytes (0x40000)
                    1902   ; // We need to write one page at a time (256 bytes at a time)
                    1903   ; // This code writes the user program from DRAM to FLASH
                    1904   ; // printf("\r\n Starting Programming...");
                    1905   ; // for (addr = 0x08000000; addr < (0x08040000); addr += 256) {
                    1906   ; //     SPIFlashWriteEnable(); 
                    1907   ; //     // printf("\r\n Addr: %08x \n", addr);
                    1908   ; //     SPIFlashPageProgram(addr);
                    1909   ; // }
                    1910   ; printf("\r\n Programming Complete!");
00001378  4879 0000 1911          pea       @m68kde~1_23.L
0000137C  48CC      
0000137E  4EB9 0000 1912          jsr       _printf
00001382  3CC6      
00001384  584F      1913          addq.w    #4,A7
00001386  4E5E      1914          unlk      A6
00001388  4E75      1915          rts
                    1916   ; }
                    1917   ; /*************************************************************************
                    1918   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1919   ; **************************************************************************/
                    1920   ; void LoadFromFlashChip(void)
                    1921   ; {
                    1922   _LoadFromFlashChip:
0000138A  4E56 FFFC 1923          link      A6,#-4
                    1924   ; int readData;
                    1925   ; printf("\r\n Loading Program From SPI Flash....") ;
0000138E  4879 0000 1926          pea       @m68kde~1_24.L
00001392  48E6      
00001394  4EB9 0000 1927          jsr       _printf
00001398  3CC6      
0000139A  584F      1928          addq.w    #4,A7
                    1929   ; SPIFlashPollStatusBusy();
0000139C  4EB8 1188 1930          jsr       _SPIFlashPollStatusBusy
                    1931   ; readData = SPIFlashRead();
000013A0  4EB8 12FE 1932          jsr       _SPIFlashRead
000013A4  2D40 FFFC 1933          move.l    D0,-4(A6)
                    1934   ; printf("\r\n Read Data: %08x \n", readData);
000013A8  2F2E FFFC 1935          move.l    -4(A6),-(A7)
000013AC  4879 0000 1936          pea       @m68kde~1_25.L
000013B0  490C      
000013B2  4EB9 0000 1937          jsr       _printf
000013B6  3CC6      
000013B8  504F      1938          addq.w    #8,A7
000013BA  4E5E      1939          unlk      A6
000013BC  4E75      1940          rts
                    1941   ; }
                    1942   ; void printBinary(unsigned char value) {
                    1943   _printBinary:
000013BE  4E56 0000 1944          link      A6,#0
000013C2  48E7 2020 1945          movem.l   D2/A2,-(A7)
000013C6  45F9 0000 1946          lea       _printf.L,A2
000013CA  3CC6      
                    1947   ; int i;
                    1948   ; printf("IIC_CRSR Transmit (Binary): ");
000013CC  4879 0000 1949          pea       @m68kde~1_26.L
000013D0  4922      
000013D2  4E92      1950          jsr       (A2)
000013D4  584F      1951          addq.w    #4,A7
                    1952   ; for (i = 7; i >= 0; i--) { // Loop through each bit (from MSB to LSB)
000013D6  7407      1953          moveq     #7,D2
                    1954   printBinary_1:
000013D8  0C82 0000 1955          cmp.l     #0,D2
000013DC  0000      
000013DE  6D22      1956          blt.s     printBinary_3
                    1957   ; printf("%d", (value >> i) & 1); // Shift and mask to extract each bit
000013E0  122E 000B 1958          move.b    11(A6),D1
000013E4  C2BC 0000 1959          and.l     #255,D1
000013E8  00FF      
000013EA  E4A1      1960          asr.l     D2,D1
000013EC  C2BC 0000 1961          and.l     #1,D1
000013F0  0001      
000013F2  2F01      1962          move.l    D1,-(A7)
000013F4  4879 0000 1963          pea       @m68kde~1_27.L
000013F8  4940      
000013FA  4E92      1964          jsr       (A2)
000013FC  504F      1965          addq.w    #8,A7
000013FE  5382      1966          subq.l    #1,D2
00001400  60D6      1967          bra       printBinary_1
                    1968   printBinary_3:
                    1969   ; }
                    1970   ; printf("\n");
00001402  4879 0000 1971          pea       @m68kde~1_28.L
00001406  4944      
00001408  4E92      1972          jsr       (A2)
0000140A  584F      1973          addq.w    #4,A7
0000140C  4CDF 0404 1974          movem.l   (A7)+,D2/A2
00001410  4E5E      1975          unlk      A6
00001412  4E75      1976          rts
                    1977   ; }
                    1978   ; void IICCoreEnable() {
                    1979   _IICCoreEnable:
                    1980   ; IIC_CTR |= 0xC0;     // Enable I2C core in control register (1000_0000)
00001414  0039 00C0 1981          or.b      #192,4227076
00001418  0040 8004 
0000141C  4E75      1982          rts
                    1983   ; }
                    1984   ; void IICCoreDisable() {
                    1985   _IICCoreDisable:
                    1986   ; IIC_CTR &= 0x7F;    // Disable I2C core in control register (0011_1111)
0000141E  0239 007F 1987          and.b     #127,4227076
00001422  0040 8004 
00001426  4E75      1988          rts
                    1989   ; }
                    1990   ; // I2C Driver Functions
                    1991   ; void IIC_Init(void) {
                    1992   _IIC_Init:
                    1993   ; IIC_PRER_LO = 0x59;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001428  13FC 0059 1994          move.b    #89,4227072
0000142C  0040 8000 
                    1995   ; IIC_PRER_HI = 0x00;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001430  4239 0040 1996          clr.b     4227074
00001434  8002      
                    1997   ; IIC_CTR &= 0xBF;     // Disable interrupt in control register (1011_1111)
00001436  0239 00BF 1998          and.b     #191,4227076
0000143A  0040 8004 
                    1999   ; IICCoreEnable();
0000143E  4EB8 1414 2000          jsr       _IICCoreEnable
00001442  4E75      2001          rts
                    2002   ; }
                    2003   ; void checkTIP() {
                    2004   _checkTIP:
                    2005   ; while (IIC_CRSR & TIP);
                    2006   checkTIP_1:
00001444  1039 0040 2007          move.b    4227080,D0
00001448  8008      
0000144A  C03C 0002 2008          and.b     #2,D0
0000144E  6702      2009          beq.s     checkTIP_3
00001450  60F2      2010          bra       checkTIP_1
                    2011   checkTIP_3:
00001452  4E75      2012          rts
                    2013   ; }
                    2014   ; int checkAck() {
                    2015   _checkAck:
                    2016   ; while ((IIC_CRSR & RXACK) == 1);
                    2017   checkAck_1:
00001454  1039 0040 2018          move.b    4227080,D0
00001458  8008      
0000145A  C07C 00FF 2019          and.w     #255,D0
0000145E  C07C 0080 2020          and.w     #128,D0
00001462  0C40 0001 2021          cmp.w     #1,D0
00001466  6602      2022          bne.s     checkAck_3
00001468  60EA      2023          bra       checkAck_1
                    2024   checkAck_3:
                    2025   ; printf("\r\n ACK Received\n");
0000146A  4879 0000 2026          pea       @m68kde~1_29.L
0000146E  4946      
00001470  4EB9 0000 2027          jsr       _printf
00001474  3CC6      
00001476  584F      2028          addq.w    #4,A7
                    2029   ; return 0;
00001478  4280      2030          clr.l     D0
0000147A  4E75      2031          rts
                    2032   ; }
                    2033   ; void IICStopCondition() {
                    2034   _IICStopCondition:
                    2035   ; IIC_CRSR |= STOP | READ | IACK; // STOP + READ + IACK
0000147C  0039 0061 2036          or.b      #97,4227080
00001480  0040 8008 
                    2037   ; checkTIP();
00001484  4EB8 1444 2038          jsr       _checkTIP
00001488  4E75      2039          rts
                    2040   ; }
                    2041   ; void IICStartCondition(int rwBit) {
                    2042   _IICStartCondition:
0000148A  4E56 0000 2043          link      A6,#0
                    2044   ; if (rwBit == 0) {
0000148E  202E 0008 2045          move.l    8(A6),D0
00001492  660A      2046          bne.s     IICStartCondition_1
                    2047   ; IIC_CRSR |= START | WRITE | IACK; // START + WRITE + IACK
00001494  0039 0091 2048          or.b      #145,4227080
00001498  0040 8008 
0000149C  6008      2049          bra.s     IICStartCondition_2
                    2050   IICStartCondition_1:
                    2051   ; } else {
                    2052   ; IIC_CRSR |= START | READ | IACK; // Start condition with read bit set
0000149E  0039 00A1 2053          or.b      #161,4227080
000014A2  0040 8008 
                    2054   IICStartCondition_2:
                    2055   ; }
                    2056   ; checkTIP();
000014A6  4EB8 1444 2057          jsr       _checkTIP
                    2058   ; checkAck();
000014AA  4EB8 1454 2059          jsr       _checkAck
000014AE  4E5E      2060          unlk      A6
000014B0  4E75      2061          rts
                    2062   ; }
                    2063   ; // EEPROM Address: 101000{B0} 
                    2064   ; // EEPROM Specific Functions
                    2065   ; void EEPROMByteWrite(int data, short int deviceAddr, short int memoryAddr) {
                    2066   _EEPROMByteWrite:
000014B2  4E56 0000 2067          link      A6,#0
000014B6  48E7 2038 2068          movem.l   D2/A2/A3/A4,-(A7)
000014BA  45F9 0000 2069          lea       _printf.L,A2
000014BE  3CC6      
000014C0  47F8 1444 2070          lea       _checkTIP.L,A3
000014C4  342E 0012 2071          move.w    18(A6),D2
000014C8  48C2      2072          ext.l     D2
000014CA  49F8 1454 2073          lea       _checkAck.L,A4
                    2074   ; // Check if there is a transmission in progress
                    2075   ; // IICCoreEnable();
                    2076   ; checkTIP();
000014CE  4E93      2077          jsr       (A3)
                    2078   ; // Set the start condition
                    2079   ; // IICStartCondition(0);
                    2080   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2081   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2082   ; // Control code, chip select, and block select (ie: Slave Address) and the R/W bit (== 0) are sent
                    2083   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000014D0  302E 000E 2084          move.w    14(A6),D0
000014D4  E340      2085          asl.w     #1,D0
000014D6  C07C 00FE 2086          and.w     #254,D0
000014DA  13C0 0040 2087          move.b    D0,4227078
000014DE  8006      
                    2088   ; IIC_CRSR = START | WRITE | IACK;
000014E0  13FC 0091 2089          move.b    #145,4227080
000014E4  0040 8008 
                    2090   ; printf("Sent Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
000014E8  322E 000E 2091          move.w    14(A6),D1
000014EC  E341      2092          asl.w     #1,D1
000014EE  C27C 00FE 2093          and.w     #254,D1
000014F2  48C1      2094          ext.l     D1
000014F4  2F01      2095          move.l    D1,-(A7)
000014F6  4879 0000 2096          pea       @m68kde~1_30.L
000014FA  4958      
000014FC  4E92      2097          jsr       (A2)
000014FE  504F      2098          addq.w    #8,A7
                    2099   ; checkTIP();
00001500  4E93      2100          jsr       (A3)
                    2101   ; checkAck();
00001502  4E94      2102          jsr       (A4)
                    2103   ; // printf("Status Register 2: %x\n", IIC_CRSR);
                    2104   ; // Check for ACK
                    2105   ; // printf("\r\n Slave Address Ack Status: : %d\n", checkAck()); //TIP is checked in checkAck function
                    2106   ; // Send the high-order byte of the address
                    2107   ; IIC_TXRX = (memoryAddr >> 8);
00001504  3002      2108          move.w    D2,D0
00001506  E040      2109          asr.w     #8,D0
00001508  13C0 0040 2110          move.b    D0,4227078
0000150C  8006      
                    2111   ; IIC_CRSR = WRITE | IACK;
0000150E  13FC 0011 2112          move.b    #17,4227080
00001512  0040 8008 
                    2113   ; checkTIP();
00001516  4E93      2114          jsr       (A3)
                    2115   ; checkAck();
00001518  4E94      2116          jsr       (A4)
                    2117   ; printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
0000151A  3202      2118          move.w    D2,D1
0000151C  E041      2119          asr.w     #8,D1
0000151E  48C1      2120          ext.l     D1
00001520  2F01      2121          move.l    D1,-(A7)
00001522  4879 0000 2122          pea       @m68kde~1_31.L
00001526  4972      
00001528  4E92      2123          jsr       (A2)
0000152A  504F      2124          addq.w    #8,A7
                    2125   ; // Send the lower-order byte of the address
                    2126   ; IIC_TXRX = (memoryAddr & 0xFF);
0000152C  3002      2127          move.w    D2,D0
0000152E  C07C 00FF 2128          and.w     #255,D0
00001532  13C0 0040 2129          move.b    D0,4227078
00001536  8006      
                    2130   ; IIC_CRSR = WRITE | IACK;
00001538  13FC 0011 2131          move.b    #17,4227080
0000153C  0040 8008 
                    2132   ; checkTIP();
00001540  4E93      2133          jsr       (A3)
                    2134   ; checkAck();
00001542  4E94      2135          jsr       (A4)
                    2136   ; printf("Sent Lower Memory Byte: %02x\n", memoryAddr & 0xFF);
00001544  3202      2137          move.w    D2,D1
00001546  C27C 00FF 2138          and.w     #255,D1
0000154A  48C1      2139          ext.l     D1
0000154C  2F01      2140          move.l    D1,-(A7)
0000154E  4879 0000 2141          pea       @m68kde~1_32.L
00001552  4990      
00001554  4E92      2142          jsr       (A2)
00001556  504F      2143          addq.w    #8,A7
                    2144   ; // printf("Status Register 4: %x\n", IIC_CRSR);
                    2145   ; // Transmit byte to be written
                    2146   ; IIC_TXRX = data;
00001558  202E 0008 2147          move.l    8(A6),D0
0000155C  13C0 0040 2148          move.b    D0,4227078
00001560  8006      
                    2149   ; IIC_CRSR = STOP | WRITE | IACK;
00001562  13FC 0051 2150          move.b    #81,4227080
00001566  0040 8008 
                    2151   ; checkTIP();
0000156A  4E93      2152          jsr       (A3)
                    2153   ; checkAck();
0000156C  4E94      2154          jsr       (A4)
                    2155   ; printf("Sent Data: %02x\n", data);
0000156E  2F2E 0008 2156          move.l    8(A6),-(A7)
00001572  4879 0000 2157          pea       @m68kde~1_33.L
00001576  49AE      
00001578  4E92      2158          jsr       (A2)
0000157A  504F      2159          addq.w    #8,A7
                    2160   ; printf("Sent Stop Condition");
0000157C  4879 0000 2161          pea       @m68kde~1_34.L
00001580  49C0      
00001582  4E92      2162          jsr       (A2)
00001584  584F      2163          addq.w    #4,A7
                    2164   ; // printf("Status Register 6: %x\n", IIC_CRSR);
                    2165   ; // IICCoreDisable();
                    2166   ; printf("\r\nI2C Byte Write Complete\n");
00001586  4879 0000 2167          pea       @m68kde~1_35.L
0000158A  49D4      
0000158C  4E92      2168          jsr       (A2)
0000158E  584F      2169          addq.w    #4,A7
00001590  4CDF 1C04 2170          movem.l   (A7)+,D2/A2/A3/A4
00001594  4E5E      2171          unlk      A6
00001596  4E75      2172          rts
                    2173   ; }
                    2174   ; void EEPROMFlashPageWrite(int* data, int adr, int numBytes) {
                    2175   _EEPROMFlashPageWrite:
00001598  4E56 0000 2176          link      A6,#0
0000159C  4E5E      2177          unlk      A6
0000159E  4E75      2178          rts
                    2179   ; }
                    2180   ; int EEPROMRandomRead(int deviceAddr, int readAddr) {
                    2181   _EEPROMRandomRead:
000015A0  4E56 0000 2182          link      A6,#0
000015A4  48E7 3838 2183          movem.l   D2/D3/D4/A2/A3/A4,-(A7)
000015A8  45F9 0000 2184          lea       _printf.L,A2
000015AC  3CC6      
000015AE  47F8 1444 2185          lea       _checkTIP.L,A3
000015B2  242E 000C 2186          move.l    12(A6),D2
000015B6  49F8 1454 2187          lea       _checkAck.L,A4
000015BA  282E 0008 2188          move.l    8(A6),D4
                    2189   ; int readData;
                    2190   ; // Wait for bus to be idle
                    2191   ; // IICCoreEnable(); 
                    2192   ; checkTIP(); 
000015BE  4E93      2193          jsr       (A3)
                    2194   ; // Print TXRX register
                    2195   ; // printf("IIC_TXRX read before: %02x", IIC_TXRX);
                    2196   ; // Send start condition for a write
                    2197   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000015C0  2004      2198          move.l    D4,D0
000015C2  E380      2199          asl.l     #1,D0
000015C4  C0BC 0000 2200          and.l     #254,D0
000015C8  00FE      
000015CA  13C0 0040 2201          move.b    D0,4227078
000015CE  8006      
                    2202   ; IIC_CRSR = START | WRITE | IACK;
000015D0  13FC 0091 2203          move.b    #145,4227080
000015D4  0040 8008 
                    2204   ; checkTIP();
000015D8  4E93      2205          jsr       (A3)
                    2206   ; checkAck();
000015DA  4E94      2207          jsr       (A4)
                    2208   ; printf("Sending Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
000015DC  2204      2209          move.l    D4,D1
000015DE  E381      2210          asl.l     #1,D1
000015E0  C2BC 0000 2211          and.l     #254,D1
000015E4  00FE      
000015E6  2F01      2212          move.l    D1,-(A7)
000015E8  4879 0000 2213          pea       @m68kde~1_36.L
000015EC  49F0      
000015EE  4E92      2214          jsr       (A2)
000015F0  504F      2215          addq.w    #8,A7
                    2216   ; // Send the high-order byte of the address
                    2217   ; IIC_TXRX = (readAddr >> 8);
000015F2  2002      2218          move.l    D2,D0
000015F4  E080      2219          asr.l     #8,D0
000015F6  13C0 0040 2220          move.b    D0,4227078
000015FA  8006      
                    2221   ; IIC_CRSR = WRITE | IACK;
000015FC  13FC 0011 2222          move.b    #17,4227080
00001600  0040 8008 
                    2223   ; printf("Sent Upper Memory Byte: %02x\n", readAddr >> 8);
00001604  2202      2224          move.l    D2,D1
00001606  E081      2225          asr.l     #8,D1
00001608  2F01      2226          move.l    D1,-(A7)
0000160A  4879 0000 2227          pea       @m68kde~1_31.L
0000160E  4972      
00001610  4E92      2228          jsr       (A2)
00001612  504F      2229          addq.w    #8,A7
                    2230   ; checkTIP();
00001614  4E93      2231          jsr       (A3)
                    2232   ; checkAck();
00001616  4E94      2233          jsr       (A4)
                    2234   ; // Send the low-order byte of the address
                    2235   ; IIC_TXRX = (readAddr & 0xFF);
00001618  2002      2236          move.l    D2,D0
0000161A  C0BC 0000 2237          and.l     #255,D0
0000161E  00FF      
00001620  13C0 0040 2238          move.b    D0,4227078
00001624  8006      
                    2239   ; IIC_CRSR = WRITE | IACK;
00001626  13FC 0011 2240          move.b    #17,4227080
0000162A  0040 8008 
                    2241   ; printf("Sent Lower Memory Byte: %02x\n", readAddr & 0xFF);
0000162E  2202      2242          move.l    D2,D1
00001630  C2BC 0000 2243          and.l     #255,D1
00001634  00FF      
00001636  2F01      2244          move.l    D1,-(A7)
00001638  4879 0000 2245          pea       @m68kde~1_32.L
0000163C  4990      
0000163E  4E92      2246          jsr       (A2)
00001640  504F      2247          addq.w    #8,A7
                    2248   ; checkTIP();
00001642  4E93      2249          jsr       (A3)
                    2250   ; checkAck();
00001644  4E94      2251          jsr       (A4)
                    2252   ; // send START condition again followed by slave address with R/W set to 1
                    2253   ; IIC_TXRX = 0xA1; //((deviceAddr << 1) | 0x01);
00001646  13FC 00A1 2254          move.b    #161,4227078
0000164A  0040 8006 
                    2255   ; IIC_CRSR = START | WRITE | IACK;
0000164E  13FC 0091 2256          move.b    #145,4227080
00001652  0040 8008 
                    2257   ; checkTIP();
00001656  4E93      2258          jsr       (A3)
                    2259   ; checkAck();
00001658  4E94      2260          jsr       (A4)
                    2261   ; printf("Sent Start Condition with Read Bit Set\n");
0000165A  4879 0000 2262          pea       @m68kde~1_37.L
0000165E  4A0E      
00001660  4E92      2263          jsr       (A2)
00001662  584F      2264          addq.w    #4,A7
                    2265   ; printf("Sent Slave Address with Read Bit Set: %02x\n", (deviceAddr << 1) | 0x01);
00001664  2204      2266          move.l    D4,D1
00001666  E381      2267          asl.l     #1,D1
00001668  82BC 0000 2268          or.l      #1,D1
0000166C  0001      
0000166E  2F01      2269          move.l    D1,-(A7)
00001670  4879 0000 2270          pea       @m68kde~1_38.L
00001674  4A36      
00001676  4E92      2271          jsr       (A2)
00001678  504F      2272          addq.w    #8,A7
                    2273   ; // // Print TXRX register
                    2274   ; // printf("IIC_TXRX read: %02x", IIC_TXRX);
                    2275   ; // IICStopCondition();
                    2276   ; IIC_CRSR |= STOP | READ | IACK; // STOP + READ + IACK
0000167A  0039 0061 2277          or.b      #97,4227080
0000167E  0040 8008 
                    2278   ; IIC_CRSR &= NACK; // NACK
00001682  0239 00F7 2279          and.b     #247,4227080
00001686  0040 8008 
                    2280   ; checkTIP();
0000168A  4E93      2281          jsr       (A3)
                    2282   ; printf("Sent Stop Condition\n");
0000168C  4879 0000 2283          pea       @m68kde~1_39.L
00001690  4A62      
00001692  4E92      2284          jsr       (A2)
00001694  584F      2285          addq.w    #4,A7
                    2286   ; // Check if IF flag is sent, and if so read the data
                    2287   ; while (!(IIC_CRSR & 0x1));
                    2288   EEPROMRandomRead_1:
00001696  1039 0040 2289          move.b    4227080,D0
0000169A  8008      
0000169C  C03C 0001 2290          and.b     #1,D0
000016A0  6602      2291          bne.s     EEPROMRandomRead_3
000016A2  60F2      2292          bra       EEPROMRandomRead_1
                    2293   EEPROMRandomRead_3:
                    2294   ; readData = IIC_TXRX;
000016A4  1039 0040 2295          move.b    4227078,D0
000016A8  8006      
000016AA  C0BC 0000 2296          and.l     #255,D0
000016AE  00FF      
000016B0  2600      2297          move.l    D0,D3
                    2298   ; printf("\r\n Data Read: %02x", readData);
000016B2  2F03      2299          move.l    D3,-(A7)
000016B4  4879 0000 2300          pea       @m68kde~1_40.L
000016B8  4A78      
000016BA  4E92      2301          jsr       (A2)
000016BC  504F      2302          addq.w    #8,A7
                    2303   ; // IICCoreDisable();
                    2304   ; return readData;    
000016BE  2003      2305          move.l    D3,D0
000016C0  4CDF 1C1C 2306          movem.l   (A7)+,D2/D3/D4/A2/A3/A4
000016C4  4E5E      2307          unlk      A6
000016C6  4E75      2308          rts
                    2309   ; }   
                    2310   ; I2CTest() {
                    2311   _I2CTest:
000016C8  4E56 FFE4 2312          link      A6,#-28
000016CC  2F0A      2313          move.l    A2,-(A7)
000016CE  45F9 0000 2314          lea       _printf.L,A2
000016D2  3CC6      
                    2315   ; int IICData[5] = {0x01, 0x02, 0x03, 0x04, 0x05};
000016D4  41EE FFE4 2316          lea       -28(A6),A0
000016D8  43F9 0000 2317          lea       I2CTest_IICData.L,A1
000016DC  5C2E      
000016DE  7004      2318          moveq     #4,D0
000016E0  20D9      2319          move.l    (A1)+,(A0)+
000016E2  51C8 FFFC 2320          dbra      D0,*-2
                    2321   ; int writeData = 0xAB;
000016E6  2D7C 0000 2322          move.l    #171,-8(A6)
000016EA  00AB FFF8 
                    2323   ; int readData;
                    2324   ; printf("\r\n I2C Test");
000016EE  4879 0000 2325          pea       @m68kde~1_41.L
000016F2  4A8C      
000016F4  4E92      2326          jsr       (A2)
000016F6  584F      2327          addq.w    #4,A7
                    2328   ; IIC_Init();
000016F8  4EB8 1428 2329          jsr       _IIC_Init
                    2330   ; //IICWriteData(IICData, 0x50, 5);
                    2331   ; printf("\r\n Starting EEPROM Write: Writing 0x%.2x to address 0x00\n", writeData); // Debug: Indicate the start of EEPROM write
000016FC  2F2E FFF8 2332          move.l    -8(A6),-(A7)
00001700  4879 0000 2333          pea       @m68kde~1_42.L
00001704  4A98      
00001706  4E92      2334          jsr       (A2)
00001708  504F      2335          addq.w    #8,A7
                    2336   ; EEPROMByteWrite(0xBC, EEPROM0, 0x0);
0000170A  42A7      2337          clr.l     -(A7)
0000170C  4878 0050 2338          pea       80
00001710  4878 00BC 2339          pea       188
00001714  4EB8 14B2 2340          jsr       _EEPROMByteWrite
00001718  DEFC 000C 2341          add.w     #12,A7
                    2342   ; printf("\r\nFinished write, Starting EEPROM Read\n");
0000171C  4879 0000 2343          pea       @m68kde~1_43.L
00001720  4AD2      
00001722  4E92      2344          jsr       (A2)
00001724  584F      2345          addq.w    #4,A7
                    2346   ; readData = EEPROMRandomRead(EEPROM0, 0x0);
00001726  42A7      2347          clr.l     -(A7)
00001728  4878 0050 2348          pea       80
0000172C  4EB8 15A0 2349          jsr       _EEPROMRandomRead
00001730  504F      2350          addq.w    #8,A7
00001732  2D40 FFFC 2351          move.l    D0,-4(A6)
                    2352   ; printf("\r\n Address: %d: %d\n", 0x0, readData);
00001736  2F2E FFFC 2353          move.l    -4(A6),-(A7)
0000173A  42A7      2354          clr.l     -(A7)
0000173C  4879 0000 2355          pea       @m68kde~1_44.L
00001740  4AFA      
00001742  4E92      2356          jsr       (A2)
00001744  DEFC 000C 2357          add.w     #12,A7
00001748  245F      2358          move.l    (A7)+,A2
0000174A  4E5E      2359          unlk      A6
0000174C  4E75      2360          rts
                    2361   ; }
                    2362   ; // Initialize and enable I2C controller
                    2363   ; // No interrupts and set clock frequency to 100Khz
                    2364   ; // Connect controller to 25 or 45 Mhz CPU clock
                    2365   ; // Check if device is ready before writing anything over I2C bus ie) TX register has written previous command.
                    2366   ; // Check the status register TIP bit to see when transmission has finished
                    2367   ; // Wait for ACK from slave after each write
                    2368   ; // Transmit a byte to the I2C bus
                    2369   ; // write the data to be transmitted into TX register and then write something to the command register that indiciates that you want to write
                    2370   ; // If you want to generate a start or stop condition, set the STA or STO bits in command register when you write to it,
                    2371   ; // Clear the ACK bit if you want to generate an ACK when reading data back from the slave
                    2372   ; // EEPROM Functions
                    2373   ; // Write a byte to the EEPROM
                    2374   ; // Start write by writing a slave address and sett bit 0 of the data to be transmitted to 0, to indicate that you are writing an address to the slave
                    2375   ; // Generate start condition, and set the bit select and chip select bits, and set bits [7:4] to 1010
                    2376   ; // Write 2 bytes which correspond to the the 2 byte internal 64k address inside the chip, and then write the data to be stored at that address
                    2377   ; // Read a byte from the EEPROM
                    2378   ; // Write a slave address along with a start condition
                    2379   ; // Write 2 bytes which correspond to the 2 internal address bytes of the EEPROM
                    2380   ; // Send repeated start condition and set RD bit and ACK bit in command register
                    2381   ; // Set stop bit, and don't forget to set IACK bit to clear any pending interrupt flag
                    2382   ; // When data is recieved from slave, you can find it in the I2C Rx register
                    2383   ; // Poll I2C controller to determine when the data has been read from the slave which can be done by checking the IF flag in status register
                    2384   ; // when IF flag == 1, the data has been received.
                    2385   ; // Clear the IF flag with each byte read 
                    2386   ; // If slave does not recieve ACK from I2C controller, it will not send any more data
                    2387   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2388   ; // IMPORTANT
                    2389   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2390   ; // has to be done with an interrupt (IRQ Level 6)
                    2391   ; //
                    2392   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2393   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2394   ; //
                    2395   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2396   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2397   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2398   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2399   ; // program area
                    2400   ; //
                    2401   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2402   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2403   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2404   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2405   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2406   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2407   ; void DumpRegisters()
                    2408   ; {
                    2409   _DumpRegisters:
0000174E  48E7 3F3C 2410          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001752  45F9 0000 2411          lea       _putch.L,A2
00001756  330A      
00001758  47F9 0000 2412          lea       _printf.L,A3
0000175C  3CC6      
0000175E  49F9 0B00 2413          lea       _SR.L,A4
00001762  012C      
00001764  4BF9 0B00 2414          lea       _WatchPointString.L,A5
00001768  01C2      
                    2415   ; short i, x, j, k ;
                    2416   ; unsigned char c, *BytePointer;
                    2417   ; // buld up strings for displaying watchpoints
                    2418   ; for(x = 0; x < (short)(8); x++)
0000176A  4242      2419          clr.w     D2
                    2420   DumpRegisters_1:
0000176C  0C42 0008 2421          cmp.w     #8,D2
00001770  6C00 01C6 2422          bge       DumpRegisters_3
                    2423   ; {
                    2424   ; if(WatchPointSetOrCleared[x] == 1)
00001774  48C2      2425          ext.l     D2
00001776  2002      2426          move.l    D2,D0
00001778  E588      2427          lsl.l     #2,D0
0000177A  41F9 0B00 2428          lea       _WatchPointSetOrCleared.L,A0
0000177E  01A2      
00001780  2030 0800 2429          move.l    0(A0,D0.L),D0
00001784  0C80 0000 2430          cmp.l     #1,D0
00001788  0001      
0000178A  6600 0186 2431          bne       DumpRegisters_4
                    2432   ; {
                    2433   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000178E  48C2      2434          ext.l     D2
00001790  2202      2435          move.l    D2,D1
00001792  E589      2436          lsl.l     #2,D1
00001794  41F9 0B00 2437          lea       _WatchPointAddress.L,A0
00001798  0182      
0000179A  2F30 1800 2438          move.l    0(A0,D1.L),-(A7)
0000179E  4879 0000 2439          pea       @m68kde~1_45.L
000017A2  4B0E      
000017A4  220D      2440          move.l    A5,D1
000017A6  48C2      2441          ext.l     D2
000017A8  2F00      2442          move.l    D0,-(A7)
000017AA  2002      2443          move.l    D2,D0
000017AC  C1FC 0064 2444          muls      #100,D0
000017B0  D280      2445          add.l     D0,D1
000017B2  201F      2446          move.l    (A7)+,D0
000017B4  2F01      2447          move.l    D1,-(A7)
000017B6  4EB9 0000 2448          jsr       _sprintf
000017BA  33A2      
000017BC  DEFC 000C 2449          add.w     #12,A7
                    2450   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000017C0  48C2      2451          ext.l     D2
000017C2  2002      2452          move.l    D2,D0
000017C4  E588      2453          lsl.l     #2,D0
000017C6  41F9 0B00 2454          lea       _WatchPointAddress.L,A0
000017CA  0182      
000017CC  2A30 0800 2455          move.l    0(A0,D0.L),D5
                    2456   ; for(j = 0; j < (short)(16); j+=2)
000017D0  4243      2457          clr.w     D3
                    2458   DumpRegisters_6:
000017D2  0C43 0010 2459          cmp.w     #16,D3
000017D6  6C00 0082 2460          bge       DumpRegisters_8
                    2461   ; {
                    2462   ; for(k = 0; k < (short)(2); k++)
000017DA  4246      2463          clr.w     D6
                    2464   DumpRegisters_9:
000017DC  0C46 0002 2465          cmp.w     #2,D6
000017E0  6C00 0052 2466          bge       DumpRegisters_11
                    2467   ; {
                    2468   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000017E4  2045      2469          move.l    D5,A0
000017E6  48C3      2470          ext.l     D3
000017E8  2203      2471          move.l    D3,D1
000017EA  48C6      2472          ext.l     D6
000017EC  D286      2473          add.l     D6,D1
000017EE  1230 1800 2474          move.b    0(A0,D1.L),D1
000017F2  C2BC 0000 2475          and.l     #255,D1
000017F6  00FF      
000017F8  2F01      2476          move.l    D1,-(A7)
000017FA  4879 0000 2477          pea       @m68kde~1_8.L
000017FE  4714      
00001800  4879 0B00 2478          pea       _TempString.L
00001804  04E2      
00001806  4EB9 0000 2479          jsr       _sprintf
0000180A  33A2      
0000180C  DEFC 000C 2480          add.w     #12,A7
                    2481   ; strcat(WatchPointString[x], TempString) ;
00001810  4879 0B00 2482          pea       _TempString.L
00001814  04E2      
00001816  220D      2483          move.l    A5,D1
00001818  48C2      2484          ext.l     D2
0000181A  2F00      2485          move.l    D0,-(A7)
0000181C  2002      2486          move.l    D2,D0
0000181E  C1FC 0064 2487          muls      #100,D0
00001822  D280      2488          add.l     D0,D1
00001824  201F      2489          move.l    (A7)+,D0
00001826  2F01      2490          move.l    D1,-(A7)
00001828  4EB9 0000 2491          jsr       _strcat
0000182C  33EE      
0000182E  504F      2492          addq.w    #8,A7
00001830  5246      2493          addq.w    #1,D6
00001832  60A8      2494          bra       DumpRegisters_9
                    2495   DumpRegisters_11:
                    2496   ; }
                    2497   ; strcat(WatchPointString[x]," ") ;
00001834  4879 0000 2498          pea       @m68kde~1_46.L
00001838  4B16      
0000183A  220D      2499          move.l    A5,D1
0000183C  48C2      2500          ext.l     D2
0000183E  2F00      2501          move.l    D0,-(A7)
00001840  2002      2502          move.l    D2,D0
00001842  C1FC 0064 2503          muls      #100,D0
00001846  D280      2504          add.l     D0,D1
00001848  201F      2505          move.l    (A7)+,D0
0000184A  2F01      2506          move.l    D1,-(A7)
0000184C  4EB9 0000 2507          jsr       _strcat
00001850  33EE      
00001852  504F      2508          addq.w    #8,A7
00001854  5443      2509          addq.w    #2,D3
00001856  6000 FF7A 2510          bra       DumpRegisters_6
                    2511   DumpRegisters_8:
                    2512   ; }
                    2513   ; strcat(WatchPointString[x], "  ") ;
0000185A  4879 0000 2514          pea       @m68kde~1_9.L
0000185E  471A      
00001860  220D      2515          move.l    A5,D1
00001862  48C2      2516          ext.l     D2
00001864  2F00      2517          move.l    D0,-(A7)
00001866  2002      2518          move.l    D2,D0
00001868  C1FC 0064 2519          muls      #100,D0
0000186C  D280      2520          add.l     D0,D1
0000186E  201F      2521          move.l    (A7)+,D0
00001870  2F01      2522          move.l    D1,-(A7)
00001872  4EB9 0000 2523          jsr       _strcat
00001876  33EE      
00001878  504F      2524          addq.w    #8,A7
                    2525   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000187A  48C2      2526          ext.l     D2
0000187C  2002      2527          move.l    D2,D0
0000187E  E588      2528          lsl.l     #2,D0
00001880  41F9 0B00 2529          lea       _WatchPointAddress.L,A0
00001884  0182      
00001886  2A30 0800 2530          move.l    0(A0,D0.L),D5
                    2531   ; for(j = 0; j < (short)(16); j++)
0000188A  4243      2532          clr.w     D3
                    2533   DumpRegisters_12:
0000188C  0C43 0010 2534          cmp.w     #16,D3
00001890  6C00 007E 2535          bge       DumpRegisters_14
                    2536   ; {
                    2537   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001894  2045      2538          move.l    D5,A0
00001896  48C3      2539          ext.l     D3
00001898  1030 3800 2540          move.b    0(A0,D3.L),D0
0000189C  C03C 007F 2541          and.b     #127,D0
000018A0  1E00      2542          move.b    D0,D7
                    2543   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000018A2  0C07 007F 2544          cmp.b     #127,D7
000018A6  6206      2545          bhi.s     DumpRegisters_17
000018A8  0C07 0020 2546          cmp.b     #32,D7
000018AC  6416      2547          bhs.s     DumpRegisters_15
                    2548   DumpRegisters_17:
                    2549   ; sprintf(TempString, ".") ;
000018AE  4879 0000 2550          pea       @m68kde~1_47.L
000018B2  4B18      
000018B4  4879 0B00 2551          pea       _TempString.L
000018B8  04E2      
000018BA  4EB9 0000 2552          jsr       _sprintf
000018BE  33A2      
000018C0  504F      2553          addq.w    #8,A7
000018C2  6026      2554          bra.s     DumpRegisters_16
                    2555   DumpRegisters_15:
                    2556   ; else
                    2557   ; sprintf(TempString, "%c", BytePointer[j]) ;
000018C4  2045      2558          move.l    D5,A0
000018C6  48C3      2559          ext.l     D3
000018C8  1230 3800 2560          move.b    0(A0,D3.L),D1
000018CC  C2BC 0000 2561          and.l     #255,D1
000018D0  00FF      
000018D2  2F01      2562          move.l    D1,-(A7)
000018D4  4879 0000 2563          pea       @m68kde~1_48.L
000018D8  4B1A      
000018DA  4879 0B00 2564          pea       _TempString.L
000018DE  04E2      
000018E0  4EB9 0000 2565          jsr       _sprintf
000018E4  33A2      
000018E6  DEFC 000C 2566          add.w     #12,A7
                    2567   DumpRegisters_16:
                    2568   ; strcat(WatchPointString[x], TempString) ;
000018EA  4879 0B00 2569          pea       _TempString.L
000018EE  04E2      
000018F0  220D      2570          move.l    A5,D1
000018F2  48C2      2571          ext.l     D2
000018F4  2F00      2572          move.l    D0,-(A7)
000018F6  2002      2573          move.l    D2,D0
000018F8  C1FC 0064 2574          muls      #100,D0
000018FC  D280      2575          add.l     D0,D1
000018FE  201F      2576          move.l    (A7)+,D0
00001900  2F01      2577          move.l    D1,-(A7)
00001902  4EB9 0000 2578          jsr       _strcat
00001906  33EE      
00001908  504F      2579          addq.w    #8,A7
0000190A  5243      2580          addq.w    #1,D3
0000190C  6000 FF7E 2581          bra       DumpRegisters_12
                    2582   DumpRegisters_14:
00001910  6020      2583          bra.s     DumpRegisters_5
                    2584   DumpRegisters_4:
                    2585   ; }
                    2586   ; }
                    2587   ; else
                    2588   ; strcpy(WatchPointString[x], "") ;
00001912  4879 0000 2589          pea       @m68kde~1_49.L
00001916  4B1E      
00001918  220D      2590          move.l    A5,D1
0000191A  48C2      2591          ext.l     D2
0000191C  2F00      2592          move.l    D0,-(A7)
0000191E  2002      2593          move.l    D2,D0
00001920  C1FC 0064 2594          muls      #100,D0
00001924  D280      2595          add.l     D0,D1
00001926  201F      2596          move.l    (A7)+,D0
00001928  2F01      2597          move.l    D1,-(A7)
0000192A  4EB9 0000 2598          jsr       _strcpy
0000192E  321C      
00001930  504F      2599          addq.w    #8,A7
                    2600   DumpRegisters_5:
00001932  5242      2601          addq.w    #1,D2
00001934  6000 FE36 2602          bra       DumpRegisters_1
                    2603   DumpRegisters_3:
                    2604   ; }
                    2605   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001938  2F39 0B00 2606          move.l    _a0.L,-(A7)
0000193C  0104      
0000193E  2F39 0B00 2607          move.l    _d0.L,-(A7)
00001942  00E4      
00001944  4879 0000 2608          pea       @m68kde~1_50.L
00001948  4B20      
0000194A  4E93      2609          jsr       (A3)
0000194C  DEFC 000C 2610          add.w     #12,A7
                    2611   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001950  2F39 0B00 2612          move.l    _a1.L,-(A7)
00001954  0108      
00001956  2F39 0B00 2613          move.l    _d1.L,-(A7)
0000195A  00E8      
0000195C  4879 0000 2614          pea       @m68kde~1_51.L
00001960  4B3C      
00001962  4E93      2615          jsr       (A3)
00001964  DEFC 000C 2616          add.w     #12,A7
                    2617   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001968  2F39 0B00 2618          move.l    _a2.L,-(A7)
0000196C  010C      
0000196E  2F39 0B00 2619          move.l    _d2.L,-(A7)
00001972  00EC      
00001974  4879 0000 2620          pea       @m68kde~1_52.L
00001978  4B56      
0000197A  4E93      2621          jsr       (A3)
0000197C  DEFC 000C 2622          add.w     #12,A7
                    2623   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001980  2F39 0B00 2624          move.l    _a3.L,-(A7)
00001984  0110      
00001986  2F39 0B00 2625          move.l    _d3.L,-(A7)
0000198A  00F0      
0000198C  4879 0000 2626          pea       @m68kde~1_53.L
00001990  4B70      
00001992  4E93      2627          jsr       (A3)
00001994  DEFC 000C 2628          add.w     #12,A7
                    2629   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001998  2F39 0B00 2630          move.l    _a4.L,-(A7)
0000199C  0114      
0000199E  2F39 0B00 2631          move.l    _d4.L,-(A7)
000019A2  00F4      
000019A4  4879 0000 2632          pea       @m68kde~1_54.L
000019A8  4B8A      
000019AA  4E93      2633          jsr       (A3)
000019AC  DEFC 000C 2634          add.w     #12,A7
                    2635   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000019B0  2F39 0B00 2636          move.l    _a5.L,-(A7)
000019B4  0118      
000019B6  2F39 0B00 2637          move.l    _d5.L,-(A7)
000019BA  00F8      
000019BC  4879 0000 2638          pea       @m68kde~1_55.L
000019C0  4BA4      
000019C2  4E93      2639          jsr       (A3)
000019C4  DEFC 000C 2640          add.w     #12,A7
                    2641   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000019C8  2F39 0B00 2642          move.l    _a6.L,-(A7)
000019CC  011C      
000019CE  2F39 0B00 2643          move.l    _d6.L,-(A7)
000019D2  00FC      
000019D4  4879 0000 2644          pea       @m68kde~1_56.L
000019D8  4BBE      
000019DA  4E93      2645          jsr       (A3)
000019DC  DEFC 000C 2646          add.w     #12,A7
                    2647   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000019E0  3214      2648          move.w    (A4),D1
000019E2  C27C 2000 2649          and.w     #8192,D1
000019E6  0C41 2000 2650          cmp.w     #8192,D1
000019EA  6608      2651          bne.s     DumpRegisters_18
000019EC  2239 0B00 2652          move.l    _SSP.L,D1
000019F0  0124      
000019F2  6006      2653          bra.s     DumpRegisters_19
                    2654   DumpRegisters_18:
000019F4  2239 0B00 2655          move.l    _USP.L,D1
000019F8  0128      
                    2656   DumpRegisters_19:
000019FA  2F01      2657          move.l    D1,-(A7)
000019FC  2F39 0B00 2658          move.l    _d7.L,-(A7)
00001A00  0100      
00001A02  4879 0000 2659          pea       @m68kde~1_57.L
00001A06  4BD8      
00001A08  4E93      2660          jsr       (A3)
00001A0A  DEFC 000C 2661          add.w     #12,A7
                    2662   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001A0E  2F39 0B00 2663          move.l    _USP.L,-(A7)
00001A12  0128      
00001A14  4879 0000 2664          pea       @m68kde~1_58.L
00001A18  4BF2      
00001A1A  4E93      2665          jsr       (A3)
00001A1C  504F      2666          addq.w    #8,A7
                    2667   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001A1E  2F39 0B00 2668          move.l    _SSP.L,-(A7)
00001A22  0124      
00001A24  4879 0000 2669          pea       @m68kde~1_59.L
00001A28  4C10      
00001A2A  4E93      2670          jsr       (A3)
00001A2C  504F      2671          addq.w    #8,A7
                    2672   ; printf("\r\n SR = $%04X   ",SR) ;
00001A2E  3214      2673          move.w    (A4),D1
00001A30  C2BC 0000 2674          and.l     #65535,D1
00001A34  FFFF      
00001A36  2F01      2675          move.l    D1,-(A7)
00001A38  4879 0000 2676          pea       @m68kde~1_60.L
00001A3C  4C32      
00001A3E  4E93      2677          jsr       (A3)
00001A40  504F      2678          addq.w    #8,A7
                    2679   ; // display the status word in characters etc.
                    2680   ; printf("   [") ;
00001A42  4879 0000 2681          pea       @m68kde~1_61.L
00001A46  4C44      
00001A48  4E93      2682          jsr       (A3)
00001A4A  584F      2683          addq.w    #4,A7
                    2684   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001A4C  3014      2685          move.w    (A4),D0
00001A4E  C07C 8000 2686          and.w     #32768,D0
00001A52  0C40 8000 2687          cmp.w     #32768,D0
00001A56  660A      2688          bne.s     DumpRegisters_20
00001A58  4878 0054 2689          pea       84
00001A5C  4E92      2690          jsr       (A2)
00001A5E  584F      2691          addq.w    #4,A7
00001A60  6008      2692          bra.s     DumpRegisters_21
                    2693   DumpRegisters_20:
00001A62  4878 002D 2694          pea       45
00001A66  4E92      2695          jsr       (A2)
00001A68  584F      2696          addq.w    #4,A7
                    2697   DumpRegisters_21:
                    2698   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001A6A  3014      2699          move.w    (A4),D0
00001A6C  C07C 2000 2700          and.w     #8192,D0
00001A70  0C40 2000 2701          cmp.w     #8192,D0
00001A74  660A      2702          bne.s     DumpRegisters_22
00001A76  4878 0053 2703          pea       83
00001A7A  4E92      2704          jsr       (A2)
00001A7C  584F      2705          addq.w    #4,A7
00001A7E  6008      2706          bra.s     DumpRegisters_23
                    2707   DumpRegisters_22:
00001A80  4878 0055 2708          pea       85
00001A84  4E92      2709          jsr       (A2)
00001A86  584F      2710          addq.w    #4,A7
                    2711   DumpRegisters_23:
                    2712   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001A88  3014      2713          move.w    (A4),D0
00001A8A  C07C 0400 2714          and.w     #1024,D0
00001A8E  0C40 0400 2715          cmp.w     #1024,D0
00001A92  660A      2716          bne.s     DumpRegisters_24
00001A94  4878 0031 2717          pea       49
00001A98  4E92      2718          jsr       (A2)
00001A9A  584F      2719          addq.w    #4,A7
00001A9C  6008      2720          bra.s     DumpRegisters_25
                    2721   DumpRegisters_24:
00001A9E  4878 0030 2722          pea       48
00001AA2  4E92      2723          jsr       (A2)
00001AA4  584F      2724          addq.w    #4,A7
                    2725   DumpRegisters_25:
                    2726   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001AA6  3014      2727          move.w    (A4),D0
00001AA8  C07C 0200 2728          and.w     #512,D0
00001AAC  0C40 0200 2729          cmp.w     #512,D0
00001AB0  660A      2730          bne.s     DumpRegisters_26
00001AB2  4878 0031 2731          pea       49
00001AB6  4E92      2732          jsr       (A2)
00001AB8  584F      2733          addq.w    #4,A7
00001ABA  6008      2734          bra.s     DumpRegisters_27
                    2735   DumpRegisters_26:
00001ABC  4878 0030 2736          pea       48
00001AC0  4E92      2737          jsr       (A2)
00001AC2  584F      2738          addq.w    #4,A7
                    2739   DumpRegisters_27:
                    2740   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001AC4  3014      2741          move.w    (A4),D0
00001AC6  C07C 0100 2742          and.w     #256,D0
00001ACA  0C40 0100 2743          cmp.w     #256,D0
00001ACE  660A      2744          bne.s     DumpRegisters_28
00001AD0  4878 0031 2745          pea       49
00001AD4  4E92      2746          jsr       (A2)
00001AD6  584F      2747          addq.w    #4,A7
00001AD8  6008      2748          bra.s     DumpRegisters_29
                    2749   DumpRegisters_28:
00001ADA  4878 0030 2750          pea       48
00001ADE  4E92      2751          jsr       (A2)
00001AE0  584F      2752          addq.w    #4,A7
                    2753   DumpRegisters_29:
                    2754   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001AE2  3014      2755          move.w    (A4),D0
00001AE4  C07C 0010 2756          and.w     #16,D0
00001AE8  0C40 0010 2757          cmp.w     #16,D0
00001AEC  660A      2758          bne.s     DumpRegisters_30
00001AEE  4878 0058 2759          pea       88
00001AF2  4E92      2760          jsr       (A2)
00001AF4  584F      2761          addq.w    #4,A7
00001AF6  6008      2762          bra.s     DumpRegisters_31
                    2763   DumpRegisters_30:
00001AF8  4878 002D 2764          pea       45
00001AFC  4E92      2765          jsr       (A2)
00001AFE  584F      2766          addq.w    #4,A7
                    2767   DumpRegisters_31:
                    2768   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001B00  3014      2769          move.w    (A4),D0
00001B02  C07C 0008 2770          and.w     #8,D0
00001B06  0C40 0008 2771          cmp.w     #8,D0
00001B0A  660A      2772          bne.s     DumpRegisters_32
00001B0C  4878 004E 2773          pea       78
00001B10  4E92      2774          jsr       (A2)
00001B12  584F      2775          addq.w    #4,A7
00001B14  6008      2776          bra.s     DumpRegisters_33
                    2777   DumpRegisters_32:
00001B16  4878 002D 2778          pea       45
00001B1A  4E92      2779          jsr       (A2)
00001B1C  584F      2780          addq.w    #4,A7
                    2781   DumpRegisters_33:
                    2782   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001B1E  3014      2783          move.w    (A4),D0
00001B20  C07C 0004 2784          and.w     #4,D0
00001B24  0C40 0004 2785          cmp.w     #4,D0
00001B28  660A      2786          bne.s     DumpRegisters_34
00001B2A  4878 005A 2787          pea       90
00001B2E  4E92      2788          jsr       (A2)
00001B30  584F      2789          addq.w    #4,A7
00001B32  6008      2790          bra.s     DumpRegisters_35
                    2791   DumpRegisters_34:
00001B34  4878 002D 2792          pea       45
00001B38  4E92      2793          jsr       (A2)
00001B3A  584F      2794          addq.w    #4,A7
                    2795   DumpRegisters_35:
                    2796   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001B3C  3014      2797          move.w    (A4),D0
00001B3E  C07C 0002 2798          and.w     #2,D0
00001B42  0C40 0002 2799          cmp.w     #2,D0
00001B46  660A      2800          bne.s     DumpRegisters_36
00001B48  4878 0056 2801          pea       86
00001B4C  4E92      2802          jsr       (A2)
00001B4E  584F      2803          addq.w    #4,A7
00001B50  6008      2804          bra.s     DumpRegisters_37
                    2805   DumpRegisters_36:
00001B52  4878 002D 2806          pea       45
00001B56  4E92      2807          jsr       (A2)
00001B58  584F      2808          addq.w    #4,A7
                    2809   DumpRegisters_37:
                    2810   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001B5A  3014      2811          move.w    (A4),D0
00001B5C  C07C 0001 2812          and.w     #1,D0
00001B60  0C40 0001 2813          cmp.w     #1,D0
00001B64  660A      2814          bne.s     DumpRegisters_38
00001B66  4878 0043 2815          pea       67
00001B6A  4E92      2816          jsr       (A2)
00001B6C  584F      2817          addq.w    #4,A7
00001B6E  6008      2818          bra.s     DumpRegisters_39
                    2819   DumpRegisters_38:
00001B70  4878 002D 2820          pea       45
00001B74  4E92      2821          jsr       (A2)
00001B76  584F      2822          addq.w    #4,A7
                    2823   DumpRegisters_39:
                    2824   ; putchar(']') ;
00001B78  4878 005D 2825          pea       93
00001B7C  4E92      2826          jsr       (A2)
00001B7E  584F      2827          addq.w    #4,A7
                    2828   ; printf("\r\n PC = $%08X  ", PC) ;
00001B80  2F39 0B00 2829          move.l    _PC.L,-(A7)
00001B84  0120      
00001B86  4879 0000 2830          pea       @m68kde~1_62.L
00001B8A  4C4A      
00001B8C  4E93      2831          jsr       (A3)
00001B8E  504F      2832          addq.w    #8,A7
                    2833   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001B90  2039 0B00 2834          move.l    _PC.L,D0
00001B94  0120      
00001B96  2040      2835          move.l    D0,A0
00001B98  3010      2836          move.w    (A0),D0
00001B9A  0C40 4E4E 2837          cmp.w     #20046,D0
00001B9E  660A      2838          bne.s     DumpRegisters_40
                    2839   ; printf("[@ BREAKPOINT]") ;
00001BA0  4879 0000 2840          pea       @m68kde~1_63.L
00001BA4  4C5A      
00001BA6  4E93      2841          jsr       (A3)
00001BA8  584F      2842          addq.w    #4,A7
                    2843   DumpRegisters_40:
                    2844   ; printf("\r\n") ;
00001BAA  4879 0000 2845          pea       @m68kde~1_1.L
00001BAE  469C      
00001BB0  4E93      2846          jsr       (A3)
00001BB2  584F      2847          addq.w    #4,A7
                    2848   ; for(i=0; i < 8; i++)    {
00001BB4  4244      2849          clr.w     D4
                    2850   DumpRegisters_42:
00001BB6  0C44 0008 2851          cmp.w     #8,D4
00001BBA  6C00 0040 2852          bge       DumpRegisters_44
                    2853   ; if(WatchPointSetOrCleared[i] == 1)
00001BBE  48C4      2854          ext.l     D4
00001BC0  2004      2855          move.l    D4,D0
00001BC2  E588      2856          lsl.l     #2,D0
00001BC4  41F9 0B00 2857          lea       _WatchPointSetOrCleared.L,A0
00001BC8  01A2      
00001BCA  2030 0800 2858          move.l    0(A0,D0.L),D0
00001BCE  0C80 0000 2859          cmp.l     #1,D0
00001BD2  0001      
00001BD4  6622      2860          bne.s     DumpRegisters_45
                    2861   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001BD6  220D      2862          move.l    A5,D1
00001BD8  48C4      2863          ext.l     D4
00001BDA  2F00      2864          move.l    D0,-(A7)
00001BDC  2004      2865          move.l    D4,D0
00001BDE  C1FC 0064 2866          muls      #100,D0
00001BE2  D280      2867          add.l     D0,D1
00001BE4  201F      2868          move.l    (A7)+,D0
00001BE6  2F01      2869          move.l    D1,-(A7)
00001BE8  48C4      2870          ext.l     D4
00001BEA  2F04      2871          move.l    D4,-(A7)
00001BEC  4879 0000 2872          pea       @m68kde~1_64.L
00001BF0  4C6A      
00001BF2  4E93      2873          jsr       (A3)
00001BF4  DEFC 000C 2874          add.w     #12,A7
                    2875   DumpRegisters_45:
00001BF8  5244      2876          addq.w    #1,D4
00001BFA  60BA      2877          bra       DumpRegisters_42
                    2878   DumpRegisters_44:
00001BFC  4CDF 3CFC 2879          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001C00  4E75      2880          rts
                    2881   ; }
                    2882   ; }
                    2883   ; // Trace Exception Handler
                    2884   ; void DumpRegistersandPause(void)
                    2885   ; {
                    2886   _DumpRegistersandPause:
00001C02  2F0A      2887          move.l    A2,-(A7)
00001C04  45F9 0000 2888          lea       _printf.L,A2
00001C08  3CC6      
                    2889   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001C0A  4879 0000 2890          pea       @m68kde~1_65.L
00001C0E  4C76      
00001C10  4E92      2891          jsr       (A2)
00001C12  584F      2892          addq.w    #4,A7
                    2893   ; printf("\r\nBreak Points :[Disabled]") ;
00001C14  4879 0000 2894          pea       @m68kde~1_66.L
00001C18  4C96      
00001C1A  4E92      2895          jsr       (A2)
00001C1C  584F      2896          addq.w    #4,A7
                    2897   ; DumpRegisters() ;
00001C1E  4EB8 174E 2898          jsr       _DumpRegisters
                    2899   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001C22  4879 0000 2900          pea       @m68kde~1_67.L
00001C26  4CB2      
00001C28  4E92      2901          jsr       (A2)
00001C2A  584F      2902          addq.w    #4,A7
                    2903   ; printf("\r\nPress <ESC> to Resume Program") ;
00001C2C  4879 0000 2904          pea       @m68kde~1_68.L
00001C30  4CDE      
00001C32  4E92      2905          jsr       (A2)
00001C34  584F      2906          addq.w    #4,A7
                    2907   ; menu() ;
00001C36  4EB9 0000 2908          jsr       _menu
00001C3A  27E6      
00001C3C  245F      2909          move.l    (A7)+,A2
00001C3E  4E75      2910          rts
                    2911   ; }
                    2912   ; void ChangeRegisters(void)
                    2913   ; {
                    2914   _ChangeRegisters:
00001C40  4E56 FFFC 2915          link      A6,#-4
00001C44  48E7 303C 2916          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001C48  45F9 0000 2917          lea       _printf.L,A2
00001C4C  3CC6      
00001C4E  47EE FFFC 2918          lea       -4(A6),A3
00001C52  49F8 0CA4 2919          lea       _Get8HexDigits.L,A4
00001C56  4BF8 0B68 2920          lea       __getch.L,A5
                    2921   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2922   ; int reg_val ;
                    2923   ; char c, reg[3] ;
                    2924   ; reg[0] = tolower(_getch()) ;
00001C5A  2F00      2925          move.l    D0,-(A7)
00001C5C  4E95      2926          jsr       (A5)
00001C5E  2200      2927          move.l    D0,D1
00001C60  201F      2928          move.l    (A7)+,D0
00001C62  2F01      2929          move.l    D1,-(A7)
00001C64  4EB9 0000 2930          jsr       _tolower
00001C68  3376      
00001C6A  584F      2931          addq.w    #4,A7
00001C6C  1680      2932          move.b    D0,(A3)
                    2933   ; reg[1] = c = tolower(_getch()) ;
00001C6E  2F00      2934          move.l    D0,-(A7)
00001C70  4E95      2935          jsr       (A5)
00001C72  2200      2936          move.l    D0,D1
00001C74  201F      2937          move.l    (A7)+,D0
00001C76  2F01      2938          move.l    D1,-(A7)
00001C78  4EB9 0000 2939          jsr       _tolower
00001C7C  3376      
00001C7E  584F      2940          addq.w    #4,A7
00001C80  1400      2941          move.b    D0,D2
00001C82  1740 0001 2942          move.b    D0,1(A3)
                    2943   ; if(reg[0] == (char)('d'))  {    // change data register
00001C86  1013      2944          move.b    (A3),D0
00001C88  0C00 0064 2945          cmp.b     #100,D0
00001C8C  6600 00AE 2946          bne       ChangeRegisters_1
                    2947   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001C90  102B 0001 2948          move.b    1(A3),D0
00001C94  0C00 0037 2949          cmp.b     #55,D0
00001C98  6E0A      2950          bgt.s     ChangeRegisters_5
00001C9A  102B 0001 2951          move.b    1(A3),D0
00001C9E  0C00 0030 2952          cmp.b     #48,D0
00001CA2  6C0E      2953          bge.s     ChangeRegisters_3
                    2954   ChangeRegisters_5:
                    2955   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001CA4  4879 0000 2956          pea       @m68kde~1_69.L
00001CA8  4CFE      
00001CAA  4E92      2957          jsr       (A2)
00001CAC  584F      2958          addq.w    #4,A7
                    2959   ; return ;
00001CAE  6000 0244 2960          bra       ChangeRegisters_6
                    2961   ChangeRegisters_3:
                    2962   ; }
                    2963   ; else {
                    2964   ; printf("\r\nD%c = ", c) ;
00001CB2  4882      2965          ext.w     D2
00001CB4  48C2      2966          ext.l     D2
00001CB6  2F02      2967          move.l    D2,-(A7)
00001CB8  4879 0000 2968          pea       @m68kde~1_70.L
00001CBC  4D2A      
00001CBE  4E92      2969          jsr       (A2)
00001CC0  504F      2970          addq.w    #8,A7
                    2971   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001CC2  42A7      2972          clr.l     -(A7)
00001CC4  4E94      2973          jsr       (A4)
00001CC6  584F      2974          addq.w    #4,A7
00001CC8  2600      2975          move.l    D0,D3
                    2976   ; }
                    2977   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2978   ; if(c == (char)('0'))
00001CCA  0C02 0030 2979          cmp.b     #48,D2
00001CCE  660A      2980          bne.s     ChangeRegisters_7
                    2981   ; d0 = reg_val ;
00001CD0  23C3 0B00 2982          move.l    D3,_d0.L
00001CD4  00E4      
00001CD6  6000 0060 2983          bra       ChangeRegisters_20
                    2984   ChangeRegisters_7:
                    2985   ; else if(c == (char)('1'))
00001CDA  0C02 0031 2986          cmp.b     #49,D2
00001CDE  660A      2987          bne.s     ChangeRegisters_9
                    2988   ; d1 = reg_val ;
00001CE0  23C3 0B00 2989          move.l    D3,_d1.L
00001CE4  00E8      
00001CE6  6000 0050 2990          bra       ChangeRegisters_20
                    2991   ChangeRegisters_9:
                    2992   ; else if(c == (char)('2'))
00001CEA  0C02 0032 2993          cmp.b     #50,D2
00001CEE  660A      2994          bne.s     ChangeRegisters_11
                    2995   ; d2 = reg_val ;
00001CF0  23C3 0B00 2996          move.l    D3,_d2.L
00001CF4  00EC      
00001CF6  6000 0040 2997          bra       ChangeRegisters_20
                    2998   ChangeRegisters_11:
                    2999   ; else if(c == (char)('3'))
00001CFA  0C02 0033 3000          cmp.b     #51,D2
00001CFE  6608      3001          bne.s     ChangeRegisters_13
                    3002   ; d3 = reg_val ;
00001D00  23C3 0B00 3003          move.l    D3,_d3.L
00001D04  00F0      
00001D06  6030      3004          bra.s     ChangeRegisters_20
                    3005   ChangeRegisters_13:
                    3006   ; else if(c == (char)('4'))
00001D08  0C02 0034 3007          cmp.b     #52,D2
00001D0C  6608      3008          bne.s     ChangeRegisters_15
                    3009   ; d4 = reg_val ;
00001D0E  23C3 0B00 3010          move.l    D3,_d4.L
00001D12  00F4      
00001D14  6022      3011          bra.s     ChangeRegisters_20
                    3012   ChangeRegisters_15:
                    3013   ; else if(c == (char)('5'))
00001D16  0C02 0035 3014          cmp.b     #53,D2
00001D1A  6608      3015          bne.s     ChangeRegisters_17
                    3016   ; d5 = reg_val ;
00001D1C  23C3 0B00 3017          move.l    D3,_d5.L
00001D20  00F8      
00001D22  6014      3018          bra.s     ChangeRegisters_20
                    3019   ChangeRegisters_17:
                    3020   ; else if(c == (char)('6'))
00001D24  0C02 0036 3021          cmp.b     #54,D2
00001D28  6608      3022          bne.s     ChangeRegisters_19
                    3023   ; d6 = reg_val ;
00001D2A  23C3 0B00 3024          move.l    D3,_d6.L
00001D2E  00FC      
00001D30  6006      3025          bra.s     ChangeRegisters_20
                    3026   ChangeRegisters_19:
                    3027   ; else
                    3028   ; d7 = reg_val ;
00001D32  23C3 0B00 3029          move.l    D3,_d7.L
00001D36  0100      
                    3030   ChangeRegisters_20:
00001D38  6000 01B6 3031          bra       ChangeRegisters_51
                    3032   ChangeRegisters_1:
                    3033   ; }
                    3034   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001D3C  1013      3035          move.b    (A3),D0
00001D3E  0C00 0061 3036          cmp.b     #97,D0
00001D42  6600 00A6 3037          bne       ChangeRegisters_21
                    3038   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001D46  0C02 0037 3039          cmp.b     #55,D2
00001D4A  6E06      3040          bgt.s     ChangeRegisters_25
00001D4C  0C02 0030 3041          cmp.b     #48,D2
00001D50  6C0E      3042          bge.s     ChangeRegisters_23
                    3043   ChangeRegisters_25:
                    3044   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001D52  4879 0000 3045          pea       @m68kde~1_71.L
00001D56  4D34      
00001D58  4E92      3046          jsr       (A2)
00001D5A  584F      3047          addq.w    #4,A7
                    3048   ; return ;
00001D5C  6000 0196 3049          bra       ChangeRegisters_6
                    3050   ChangeRegisters_23:
                    3051   ; }
                    3052   ; else {
                    3053   ; printf("\r\nA%c = ", c) ;
00001D60  4882      3054          ext.w     D2
00001D62  48C2      3055          ext.l     D2
00001D64  2F02      3056          move.l    D2,-(A7)
00001D66  4879 0000 3057          pea       @m68kde~1_72.L
00001D6A  4D62      
00001D6C  4E92      3058          jsr       (A2)
00001D6E  504F      3059          addq.w    #8,A7
                    3060   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001D70  42A7      3061          clr.l     -(A7)
00001D72  4E94      3062          jsr       (A4)
00001D74  584F      3063          addq.w    #4,A7
00001D76  2600      3064          move.l    D0,D3
                    3065   ; }
                    3066   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    3067   ; if(c == (char)('0'))
00001D78  0C02 0030 3068          cmp.b     #48,D2
00001D7C  660A      3069          bne.s     ChangeRegisters_26
                    3070   ; a0 = reg_val ;
00001D7E  23C3 0B00 3071          move.l    D3,_a0.L
00001D82  0104      
00001D84  6000 0060 3072          bra       ChangeRegisters_39
                    3073   ChangeRegisters_26:
                    3074   ; else if(c == (char)('1'))
00001D88  0C02 0031 3075          cmp.b     #49,D2
00001D8C  660A      3076          bne.s     ChangeRegisters_28
                    3077   ; a1 = reg_val ;
00001D8E  23C3 0B00 3078          move.l    D3,_a1.L
00001D92  0108      
00001D94  6000 0050 3079          bra       ChangeRegisters_39
                    3080   ChangeRegisters_28:
                    3081   ; else if(c == (char)('2'))
00001D98  0C02 0032 3082          cmp.b     #50,D2
00001D9C  660A      3083          bne.s     ChangeRegisters_30
                    3084   ; a2 = reg_val ;
00001D9E  23C3 0B00 3085          move.l    D3,_a2.L
00001DA2  010C      
00001DA4  6000 0040 3086          bra       ChangeRegisters_39
                    3087   ChangeRegisters_30:
                    3088   ; else if(c == (char)('3'))
00001DA8  0C02 0033 3089          cmp.b     #51,D2
00001DAC  6608      3090          bne.s     ChangeRegisters_32
                    3091   ; a3 = reg_val ;
00001DAE  23C3 0B00 3092          move.l    D3,_a3.L
00001DB2  0110      
00001DB4  6030      3093          bra.s     ChangeRegisters_39
                    3094   ChangeRegisters_32:
                    3095   ; else if(c == (char)('4'))
00001DB6  0C02 0034 3096          cmp.b     #52,D2
00001DBA  6608      3097          bne.s     ChangeRegisters_34
                    3098   ; a4 = reg_val ;
00001DBC  23C3 0B00 3099          move.l    D3,_a4.L
00001DC0  0114      
00001DC2  6022      3100          bra.s     ChangeRegisters_39
                    3101   ChangeRegisters_34:
                    3102   ; else if(c == (char)('5'))
00001DC4  0C02 0035 3103          cmp.b     #53,D2
00001DC8  6608      3104          bne.s     ChangeRegisters_36
                    3105   ; a5 = reg_val ;
00001DCA  23C3 0B00 3106          move.l    D3,_a5.L
00001DCE  0118      
00001DD0  6014      3107          bra.s     ChangeRegisters_39
                    3108   ChangeRegisters_36:
                    3109   ; else if(c == (char)('6'))
00001DD2  0C02 0036 3110          cmp.b     #54,D2
00001DD6  6608      3111          bne.s     ChangeRegisters_38
                    3112   ; a6 = reg_val ;
00001DD8  23C3 0B00 3113          move.l    D3,_a6.L
00001DDC  011C      
00001DDE  6006      3114          bra.s     ChangeRegisters_39
                    3115   ChangeRegisters_38:
                    3116   ; else
                    3117   ; USP = reg_val ;
00001DE0  23C3 0B00 3118          move.l    D3,_USP.L
00001DE4  0128      
                    3119   ChangeRegisters_39:
00001DE6  6000 0108 3120          bra       ChangeRegisters_51
                    3121   ChangeRegisters_21:
                    3122   ; }
                    3123   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001DEA  1013      3124          move.b    (A3),D0
00001DEC  0C00 0075 3125          cmp.b     #117,D0
00001DF0  6600 004E 3126          bne       ChangeRegisters_40
00001DF4  0C02 0073 3127          cmp.b     #115,D2
00001DF8  6600 0046 3128          bne       ChangeRegisters_40
                    3129   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001DFC  2F00      3130          move.l    D0,-(A7)
00001DFE  4E95      3131          jsr       (A5)
00001E00  2200      3132          move.l    D0,D1
00001E02  201F      3133          move.l    (A7)+,D0
00001E04  2F01      3134          move.l    D1,-(A7)
00001E06  4EB9 0000 3135          jsr       _tolower
00001E0A  3376      
00001E0C  584F      3136          addq.w    #4,A7
00001E0E  0C80 0000 3137          cmp.l     #112,D0
00001E12  0070      
00001E14  6618      3138          bne.s     ChangeRegisters_42
                    3139   ; printf("\r\nUser SP = ") ;
00001E16  4879 0000 3140          pea       @m68kde~1_73.L
00001E1A  4D6C      
00001E1C  4E92      3141          jsr       (A2)
00001E1E  584F      3142          addq.w    #4,A7
                    3143   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001E20  42A7      3144          clr.l     -(A7)
00001E22  4E94      3145          jsr       (A4)
00001E24  584F      3146          addq.w    #4,A7
00001E26  23C0 0B00 3147          move.l    D0,_USP.L
00001E2A  0128      
00001E2C  600E      3148          bra.s     ChangeRegisters_43
                    3149   ChangeRegisters_42:
                    3150   ; }
                    3151   ; else {
                    3152   ; printf("\r\nIllegal Register....") ;
00001E2E  4879 0000 3153          pea       @m68kde~1_74.L
00001E32  4D7A      
00001E34  4E92      3154          jsr       (A2)
00001E36  584F      3155          addq.w    #4,A7
                    3156   ; return ;
00001E38  6000 00BA 3157          bra       ChangeRegisters_6
                    3158   ChangeRegisters_43:
00001E3C  6000 00B2 3159          bra       ChangeRegisters_51
                    3160   ChangeRegisters_40:
                    3161   ; }
                    3162   ; }
                    3163   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001E40  1013      3164          move.b    (A3),D0
00001E42  0C00 0073 3165          cmp.b     #115,D0
00001E46  6600 004E 3166          bne       ChangeRegisters_44
00001E4A  0C02 0073 3167          cmp.b     #115,D2
00001E4E  6600 0046 3168          bne       ChangeRegisters_44
                    3169   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001E52  2F00      3170          move.l    D0,-(A7)
00001E54  4E95      3171          jsr       (A5)
00001E56  2200      3172          move.l    D0,D1
00001E58  201F      3173          move.l    (A7)+,D0
00001E5A  2F01      3174          move.l    D1,-(A7)
00001E5C  4EB9 0000 3175          jsr       _tolower
00001E60  3376      
00001E62  584F      3176          addq.w    #4,A7
00001E64  0C80 0000 3177          cmp.l     #112,D0
00001E68  0070      
00001E6A  6618      3178          bne.s     ChangeRegisters_46
                    3179   ; printf("\r\nSystem SP = ") ;
00001E6C  4879 0000 3180          pea       @m68kde~1_75.L
00001E70  4D92      
00001E72  4E92      3181          jsr       (A2)
00001E74  584F      3182          addq.w    #4,A7
                    3183   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001E76  42A7      3184          clr.l     -(A7)
00001E78  4E94      3185          jsr       (A4)
00001E7A  584F      3186          addq.w    #4,A7
00001E7C  23C0 0B00 3187          move.l    D0,_SSP.L
00001E80  0124      
00001E82  600E      3188          bra.s     ChangeRegisters_47
                    3189   ChangeRegisters_46:
                    3190   ; }
                    3191   ; else {
                    3192   ; printf("\r\nIllegal Register....") ;
00001E84  4879 0000 3193          pea       @m68kde~1_74.L
00001E88  4D7A      
00001E8A  4E92      3194          jsr       (A2)
00001E8C  584F      3195          addq.w    #4,A7
                    3196   ; return ;
00001E8E  6000 0064 3197          bra       ChangeRegisters_6
                    3198   ChangeRegisters_47:
00001E92  6000 005C 3199          bra       ChangeRegisters_51
                    3200   ChangeRegisters_44:
                    3201   ; }
                    3202   ; }
                    3203   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001E96  1013      3204          move.b    (A3),D0
00001E98  0C00 0070 3205          cmp.b     #112,D0
00001E9C  6620      3206          bne.s     ChangeRegisters_48
00001E9E  0C02 0063 3207          cmp.b     #99,D2
00001EA2  661A      3208          bne.s     ChangeRegisters_48
                    3209   ; printf("\r\nPC = ") ;
00001EA4  4879 0000 3210          pea       @m68kde~1_76.L
00001EA8  4DA2      
00001EAA  4E92      3211          jsr       (A2)
00001EAC  584F      3212          addq.w    #4,A7
                    3213   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001EAE  42A7      3214          clr.l     -(A7)
00001EB0  4E94      3215          jsr       (A4)
00001EB2  584F      3216          addq.w    #4,A7
00001EB4  23C0 0B00 3217          move.l    D0,_PC.L
00001EB8  0120      
00001EBA  6000 0034 3218          bra       ChangeRegisters_51
                    3219   ChangeRegisters_48:
                    3220   ; }
                    3221   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001EBE  1013      3222          move.b    (A3),D0
00001EC0  0C00 0073 3223          cmp.b     #115,D0
00001EC4  6620      3224          bne.s     ChangeRegisters_50
00001EC6  0C02 0072 3225          cmp.b     #114,D2
00001ECA  661A      3226          bne.s     ChangeRegisters_50
                    3227   ; printf("\r\nSR = ") ;
00001ECC  4879 0000 3228          pea       @m68kde~1_77.L
00001ED0  4DAA      
00001ED2  4E92      3229          jsr       (A2)
00001ED4  584F      3230          addq.w    #4,A7
                    3231   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001ED6  42A7      3232          clr.l     -(A7)
00001ED8  4EB8 0C58 3233          jsr       _Get4HexDigits
00001EDC  584F      3234          addq.w    #4,A7
00001EDE  33C0 0B00 3235          move.w    D0,_SR.L
00001EE2  012C      
00001EE4  600A      3236          bra.s     ChangeRegisters_51
                    3237   ChangeRegisters_50:
                    3238   ; }
                    3239   ; else
                    3240   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001EE6  4879 0000 3241          pea       @m68kde~1_78.L
00001EEA  4DB2      
00001EEC  4E92      3242          jsr       (A2)
00001EEE  584F      3243          addq.w    #4,A7
                    3244   ChangeRegisters_51:
                    3245   ; DumpRegisters() ;
00001EF0  4EB8 174E 3246          jsr       _DumpRegisters
                    3247   ChangeRegisters_6:
00001EF4  4CDF 3C0C 3248          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001EF8  4E5E      3249          unlk      A6
00001EFA  4E75      3250          rts
                    3251   ; }
                    3252   ; void BreakPointDisplay(void)
                    3253   ; {
                    3254   _BreakPointDisplay:
00001EFC  48E7 3030 3255          movem.l   D2/D3/A2/A3,-(A7)
00001F00  45F9 0000 3256          lea       _printf.L,A2
00001F04  3CC6      
00001F06  47F9 0B00 3257          lea       _BreakPointAddress.L,A3
00001F0A  012E      
                    3258   ; int i, BreakPointsSet = 0 ;
00001F0C  4283      3259          clr.l     D3
                    3260   ; // any break points  set
                    3261   ; for(i = 0; i < 8; i++)  {
00001F0E  4282      3262          clr.l     D2
                    3263   BreakPointDisplay_1:
00001F10  0C82 0000 3264          cmp.l     #8,D2
00001F14  0008      
00001F16  6C1C      3265          bge.s     BreakPointDisplay_3
                    3266   ; if(BreakPointSetOrCleared[i] == 1)
00001F18  2002      3267          move.l    D2,D0
00001F1A  E588      3268          lsl.l     #2,D0
00001F1C  41F9 0B00 3269          lea       _BreakPointSetOrCleared.L,A0
00001F20  015E      
00001F22  2030 0800 3270          move.l    0(A0,D0.L),D0
00001F26  0C80 0000 3271          cmp.l     #1,D0
00001F2A  0001      
00001F2C  6602      3272          bne.s     BreakPointDisplay_4
                    3273   ; BreakPointsSet = 1;
00001F2E  7601      3274          moveq     #1,D3
                    3275   BreakPointDisplay_4:
00001F30  5282      3276          addq.l    #1,D2
00001F32  60DC      3277          bra       BreakPointDisplay_1
                    3278   BreakPointDisplay_3:
                    3279   ; }
                    3280   ; if(BreakPointsSet == 1) {
00001F34  0C83 0000 3281          cmp.l     #1,D3
00001F38  0001      
00001F3A  6616      3282          bne.s     BreakPointDisplay_6
                    3283   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001F3C  4879 0000 3284          pea       @m68kde~1_79.L
00001F40  4DEE      
00001F42  4E92      3285          jsr       (A2)
00001F44  584F      3286          addq.w    #4,A7
                    3287   ; printf("\r\n---     ---------    -----------") ;
00001F46  4879 0000 3288          pea       @m68kde~1_80.L
00001F4A  4E14      
00001F4C  4E92      3289          jsr       (A2)
00001F4E  584F      3290          addq.w    #4,A7
00001F50  600A      3291          bra.s     BreakPointDisplay_7
                    3292   BreakPointDisplay_6:
                    3293   ; }
                    3294   ; else
                    3295   ; printf("\r\nNo BreakPoints Set") ;
00001F52  4879 0000 3296          pea       @m68kde~1_81.L
00001F56  4E38      
00001F58  4E92      3297          jsr       (A2)
00001F5A  584F      3298          addq.w    #4,A7
                    3299   BreakPointDisplay_7:
                    3300   ; for(i = 0; i < 8; i++)  {
00001F5C  4282      3301          clr.l     D2
                    3302   BreakPointDisplay_8:
00001F5E  0C82 0000 3303          cmp.l     #8,D2
00001F62  0008      
00001F64  6C00 005A 3304          bge       BreakPointDisplay_10
                    3305   ; // put opcode back, then put break point back
                    3306   ; if(BreakPointSetOrCleared[i] == 1)  {
00001F68  2002      3307          move.l    D2,D0
00001F6A  E588      3308          lsl.l     #2,D0
00001F6C  41F9 0B00 3309          lea       _BreakPointSetOrCleared.L,A0
00001F70  015E      
00001F72  2030 0800 3310          move.l    0(A0,D0.L),D0
00001F76  0C80 0000 3311          cmp.l     #1,D0
00001F7A  0001      
00001F7C  6600 003E 3312          bne       BreakPointDisplay_11
                    3313   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001F80  2002      3314          move.l    D2,D0
00001F82  E388      3315          lsl.l     #1,D0
00001F84  41F9 0B00 3316          lea       _BreakPointInstruction.L,A0
00001F88  014E      
00001F8A  2202      3317          move.l    D2,D1
00001F8C  E589      3318          lsl.l     #2,D1
00001F8E  2233 1800 3319          move.l    0(A3,D1.L),D1
00001F92  2241      3320          move.l    D1,A1
00001F94  32B0 0800 3321          move.w    0(A0,D0.L),(A1)
                    3322   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001F98  2002      3323          move.l    D2,D0
00001F9A  E588      3324          lsl.l     #2,D0
00001F9C  2033 0800 3325          move.l    0(A3,D0.L),D0
00001FA0  2040      3326          move.l    D0,A0
00001FA2  30BC 4E4E 3327          move.w    #20046,(A0)
                    3328   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001FA6  2202      3329          move.l    D2,D1
00001FA8  E589      3330          lsl.l     #2,D1
00001FAA  2F33 1800 3331          move.l    0(A3,D1.L),-(A7)
00001FAE  2F02      3332          move.l    D2,-(A7)
00001FB0  4879 0000 3333          pea       @m68kde~1_82.L
00001FB4  4E4E      
00001FB6  4E92      3334          jsr       (A2)
00001FB8  DEFC 000C 3335          add.w     #12,A7
                    3336   BreakPointDisplay_11:
00001FBC  5282      3337          addq.l    #1,D2
00001FBE  609E      3338          bra       BreakPointDisplay_8
                    3339   BreakPointDisplay_10:
                    3340   ; }
                    3341   ; }
                    3342   ; printf("\r\n") ;
00001FC0  4879 0000 3343          pea       @m68kde~1_1.L
00001FC4  469C      
00001FC6  4E92      3344          jsr       (A2)
00001FC8  584F      3345          addq.w    #4,A7
00001FCA  4CDF 0C0C 3346          movem.l   (A7)+,D2/D3/A2/A3
00001FCE  4E75      3347          rts
                    3348   ; }
                    3349   ; void WatchPointDisplay(void)
                    3350   ; {
                    3351   _WatchPointDisplay:
00001FD0  48E7 3020 3352          movem.l   D2/D3/A2,-(A7)
00001FD4  45F9 0000 3353          lea       _printf.L,A2
00001FD8  3CC6      
                    3354   ; int i ;
                    3355   ; int WatchPointsSet = 0 ;
00001FDA  4283      3356          clr.l     D3
                    3357   ; // any watchpoints set
                    3358   ; for(i = 0; i < 8; i++)  {
00001FDC  4282      3359          clr.l     D2
                    3360   WatchPointDisplay_1:
00001FDE  0C82 0000 3361          cmp.l     #8,D2
00001FE2  0008      
00001FE4  6C1C      3362          bge.s     WatchPointDisplay_3
                    3363   ; if(WatchPointSetOrCleared[i] == 1)
00001FE6  2002      3364          move.l    D2,D0
00001FE8  E588      3365          lsl.l     #2,D0
00001FEA  41F9 0B00 3366          lea       _WatchPointSetOrCleared.L,A0
00001FEE  01A2      
00001FF0  2030 0800 3367          move.l    0(A0,D0.L),D0
00001FF4  0C80 0000 3368          cmp.l     #1,D0
00001FF8  0001      
00001FFA  6602      3369          bne.s     WatchPointDisplay_4
                    3370   ; WatchPointsSet = 1;
00001FFC  7601      3371          moveq     #1,D3
                    3372   WatchPointDisplay_4:
00001FFE  5282      3373          addq.l    #1,D2
00002000  60DC      3374          bra       WatchPointDisplay_1
                    3375   WatchPointDisplay_3:
                    3376   ; }
                    3377   ; if(WatchPointsSet == 1) {
00002002  0C83 0000 3378          cmp.l     #1,D3
00002006  0001      
00002008  6616      3379          bne.s     WatchPointDisplay_6
                    3380   ; printf("\r\nNum     Address") ;
0000200A  4879 0000 3381          pea       @m68kde~1_83.L
0000200E  4E5E      
00002010  4E92      3382          jsr       (A2)
00002012  584F      3383          addq.w    #4,A7
                    3384   ; printf("\r\n---     ---------") ;
00002014  4879 0000 3385          pea       @m68kde~1_84.L
00002018  4E70      
0000201A  4E92      3386          jsr       (A2)
0000201C  584F      3387          addq.w    #4,A7
0000201E  600A      3388          bra.s     WatchPointDisplay_7
                    3389   WatchPointDisplay_6:
                    3390   ; }
                    3391   ; else
                    3392   ; printf("\r\nNo WatchPoints Set") ;
00002020  4879 0000 3393          pea       @m68kde~1_85.L
00002024  4E84      
00002026  4E92      3394          jsr       (A2)
00002028  584F      3395          addq.w    #4,A7
                    3396   WatchPointDisplay_7:
                    3397   ; for(i = 0; i < 8; i++)  {
0000202A  4282      3398          clr.l     D2
                    3399   WatchPointDisplay_8:
0000202C  0C82 0000 3400          cmp.l     #8,D2
00002030  0008      
00002032  6C00 0038 3401          bge       WatchPointDisplay_10
                    3402   ; if(WatchPointSetOrCleared[i] == 1)
00002036  2002      3403          move.l    D2,D0
00002038  E588      3404          lsl.l     #2,D0
0000203A  41F9 0B00 3405          lea       _WatchPointSetOrCleared.L,A0
0000203E  01A2      
00002040  2030 0800 3406          move.l    0(A0,D0.L),D0
00002044  0C80 0000 3407          cmp.l     #1,D0
00002048  0001      
0000204A  661C      3408          bne.s     WatchPointDisplay_11
                    3409   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
0000204C  2202      3410          move.l    D2,D1
0000204E  E589      3411          lsl.l     #2,D1
00002050  41F9 0B00 3412          lea       _WatchPointAddress.L,A0
00002054  0182      
00002056  2F30 1800 3413          move.l    0(A0,D1.L),-(A7)
0000205A  2F02      3414          move.l    D2,-(A7)
0000205C  4879 0000 3415          pea       @m68kde~1_82.L
00002060  4E4E      
00002062  4E92      3416          jsr       (A2)
00002064  DEFC 000C 3417          add.w     #12,A7
                    3418   WatchPointDisplay_11:
00002068  5282      3419          addq.l    #1,D2
0000206A  60C0      3420          bra       WatchPointDisplay_8
                    3421   WatchPointDisplay_10:
                    3422   ; }
                    3423   ; printf("\r\n") ;
0000206C  4879 0000 3424          pea       @m68kde~1_1.L
00002070  469C      
00002072  4E92      3425          jsr       (A2)
00002074  584F      3426          addq.w    #4,A7
00002076  4CDF 040C 3427          movem.l   (A7)+,D2/D3/A2
0000207A  4E75      3428          rts
                    3429   ; }
                    3430   ; void BreakPointClear(void)
                    3431   ; {
                    3432   _BreakPointClear:
0000207C  4E56 FFFC 3433          link      A6,#-4
00002080  48E7 2020 3434          movem.l   D2/A2,-(A7)
00002084  45F9 0000 3435          lea       _printf.L,A2
00002088  3CC6      
                    3436   ; unsigned int i ;
                    3437   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3438   ; BreakPointDisplay() ;
0000208A  4EB8 1EFC 3439          jsr       _BreakPointDisplay
                    3440   ; printf("\r\nEnter Break Point Number: ") ;
0000208E  4879 0000 3441          pea       @m68kde~1_86.L
00002092  4E9A      
00002094  4E92      3442          jsr       (A2)
00002096  584F      3443          addq.w    #4,A7
                    3444   ; i = xtod(_getch()) ;           // get break pointer number
00002098  2F00      3445          move.l    D0,-(A7)
0000209A  4EB8 0B68 3446          jsr       __getch
0000209E  2200      3447          move.l    D0,D1
000020A0  201F      3448          move.l    (A7)+,D0
000020A2  2F01      3449          move.l    D1,-(A7)
000020A4  4EB8 0BD2 3450          jsr       _xtod
000020A8  584F      3451          addq.w    #4,A7
000020AA  C0BC 0000 3452          and.l     #255,D0
000020AE  00FF      
000020B0  2400      3453          move.l    D0,D2
                    3454   ; if((i < 0) || (i > 7))   {
000020B2  0C82 0000 3455          cmp.l     #0,D2
000020B6  0000      
000020B8  6508      3456          blo.s     BreakPointClear_3
000020BA  0C82 0000 3457          cmp.l     #7,D2
000020BE  0007      
000020C0  630E      3458          bls.s     BreakPointClear_1
                    3459   BreakPointClear_3:
                    3460   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000020C2  4879 0000 3461          pea       @m68kde~1_87.L
000020C6  4EB8      
000020C8  4E92      3462          jsr       (A2)
000020CA  584F      3463          addq.w    #4,A7
                    3464   ; return ;
000020CC  6000 0080 3465          bra       BreakPointClear_4
                    3466   BreakPointClear_1:
                    3467   ; }
                    3468   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
000020D0  2002      3469          move.l    D2,D0
000020D2  E588      3470          lsl.l     #2,D0
000020D4  41F9 0B00 3471          lea       _BreakPointSetOrCleared.L,A0
000020D8  015E      
000020DA  2030 0800 3472          move.l    0(A0,D0.L),D0
000020DE  0C80 0000 3473          cmp.l     #1,D0
000020E2  0001      
000020E4  6600 005A 3474          bne       BreakPointClear_5
                    3475   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
000020E8  2002      3476          move.l    D2,D0
000020EA  E588      3477          lsl.l     #2,D0
000020EC  41F9 0B00 3478          lea       _BreakPointAddress.L,A0
000020F0  012E      
000020F2  2D70 0800 3479          move.l    0(A0,D0.L),-4(A6)
000020F6  FFFC      
                    3480   ; BreakPointAddress[i] = 0 ;
000020F8  2002      3481          move.l    D2,D0
000020FA  E588      3482          lsl.l     #2,D0
000020FC  41F9 0B00 3483          lea       _BreakPointAddress.L,A0
00002100  012E      
00002102  42B0 0800 3484          clr.l     0(A0,D0.L)
                    3485   ; BreakPointSetOrCleared[i] = 0 ;
00002106  2002      3486          move.l    D2,D0
00002108  E588      3487          lsl.l     #2,D0
0000210A  41F9 0B00 3488          lea       _BreakPointSetOrCleared.L,A0
0000210E  015E      
00002110  42B0 0800 3489          clr.l     0(A0,D0.L)
                    3490   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002114  2002      3491          move.l    D2,D0
00002116  E388      3492          lsl.l     #1,D0
00002118  41F9 0B00 3493          lea       _BreakPointInstruction.L,A0
0000211C  014E      
0000211E  226E FFFC 3494          move.l    -4(A6),A1
00002122  32B0 0800 3495          move.w    0(A0,D0.L),(A1)
                    3496   ; BreakPointInstruction[i] = 0 ;
00002126  2002      3497          move.l    D2,D0
00002128  E388      3498          lsl.l     #1,D0
0000212A  41F9 0B00 3499          lea       _BreakPointInstruction.L,A0
0000212E  014E      
00002130  4270 0800 3500          clr.w     0(A0,D0.L)
                    3501   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00002134  4879 0000 3502          pea       @m68kde~1_88.L
00002138  4ED4      
0000213A  4E92      3503          jsr       (A2)
0000213C  584F      3504          addq.w    #4,A7
0000213E  600A      3505          bra.s     BreakPointClear_6
                    3506   BreakPointClear_5:
                    3507   ; }
                    3508   ; else
                    3509   ; printf("\r\nBreak Point wasn't Set.....") ;
00002140  4879 0000 3510          pea       @m68kde~1_89.L
00002144  4EF2      
00002146  4E92      3511          jsr       (A2)
00002148  584F      3512          addq.w    #4,A7
                    3513   BreakPointClear_6:
                    3514   ; BreakPointDisplay() ;
0000214A  4EB8 1EFC 3515          jsr       _BreakPointDisplay
                    3516   ; return ;
                    3517   BreakPointClear_4:
0000214E  4CDF 0404 3518          movem.l   (A7)+,D2/A2
00002152  4E5E      3519          unlk      A6
00002154  4E75      3520          rts
                    3521   ; }
                    3522   ; void WatchPointClear(void)
                    3523   ; {
                    3524   _WatchPointClear:
00002156  48E7 2020 3525          movem.l   D2/A2,-(A7)
0000215A  45F9 0000 3526          lea       _printf.L,A2
0000215E  3CC6      
                    3527   ; unsigned int i ;
                    3528   ; WatchPointDisplay() ;
00002160  4EB8 1FD0 3529          jsr       _WatchPointDisplay
                    3530   ; printf("\r\nEnter Watch Point Number: ") ;
00002164  4879 0000 3531          pea       @m68kde~1_90.L
00002168  4F10      
0000216A  4E92      3532          jsr       (A2)
0000216C  584F      3533          addq.w    #4,A7
                    3534   ; i = xtod(_getch()) ;           // get watch pointer number
0000216E  2F00      3535          move.l    D0,-(A7)
00002170  4EB8 0B68 3536          jsr       __getch
00002174  2200      3537          move.l    D0,D1
00002176  201F      3538          move.l    (A7)+,D0
00002178  2F01      3539          move.l    D1,-(A7)
0000217A  4EB8 0BD2 3540          jsr       _xtod
0000217E  584F      3541          addq.w    #4,A7
00002180  C0BC 0000 3542          and.l     #255,D0
00002184  00FF      
00002186  2400      3543          move.l    D0,D2
                    3544   ; if((i < 0) || (i > 7))   {
00002188  0C82 0000 3545          cmp.l     #0,D2
0000218C  0000      
0000218E  6508      3546          blo.s     WatchPointClear_3
00002190  0C82 0000 3547          cmp.l     #7,D2
00002194  0007      
00002196  630E      3548          bls.s     WatchPointClear_1
                    3549   WatchPointClear_3:
                    3550   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00002198  4879 0000 3551          pea       @m68kde~1_87.L
0000219C  4EB8      
0000219E  4E92      3552          jsr       (A2)
000021A0  584F      3553          addq.w    #4,A7
                    3554   ; return ;
000021A2  6000 004E 3555          bra       WatchPointClear_4
                    3556   WatchPointClear_1:
                    3557   ; }
                    3558   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
000021A6  2002      3559          move.l    D2,D0
000021A8  E588      3560          lsl.l     #2,D0
000021AA  41F9 0B00 3561          lea       _WatchPointSetOrCleared.L,A0
000021AE  01A2      
000021B0  2030 0800 3562          move.l    0(A0,D0.L),D0
000021B4  0C80 0000 3563          cmp.l     #1,D0
000021B8  0001      
000021BA  6628      3564          bne.s     WatchPointClear_5
                    3565   ; WatchPointAddress[i] = 0 ;
000021BC  2002      3566          move.l    D2,D0
000021BE  E588      3567          lsl.l     #2,D0
000021C0  41F9 0B00 3568          lea       _WatchPointAddress.L,A0
000021C4  0182      
000021C6  42B0 0800 3569          clr.l     0(A0,D0.L)
                    3570   ; WatchPointSetOrCleared[i] = 0 ;
000021CA  2002      3571          move.l    D2,D0
000021CC  E588      3572          lsl.l     #2,D0
000021CE  41F9 0B00 3573          lea       _WatchPointSetOrCleared.L,A0
000021D2  01A2      
000021D4  42B0 0800 3574          clr.l     0(A0,D0.L)
                    3575   ; printf("\r\nWatch Point Cleared.....\r\n") ;
000021D8  4879 0000 3576          pea       @m68kde~1_91.L
000021DC  4F2E      
000021DE  4E92      3577          jsr       (A2)
000021E0  584F      3578          addq.w    #4,A7
000021E2  600A      3579          bra.s     WatchPointClear_6
                    3580   WatchPointClear_5:
                    3581   ; }
                    3582   ; else
                    3583   ; printf("\r\nWatch Point Was not Set.....") ;
000021E4  4879 0000 3584          pea       @m68kde~1_92.L
000021E8  4F4C      
000021EA  4E92      3585          jsr       (A2)
000021EC  584F      3586          addq.w    #4,A7
                    3587   WatchPointClear_6:
                    3588   ; WatchPointDisplay() ;
000021EE  4EB8 1FD0 3589          jsr       _WatchPointDisplay
                    3590   ; return ;
                    3591   WatchPointClear_4:
000021F2  4CDF 0404 3592          movem.l   (A7)+,D2/A2
000021F6  4E75      3593          rts
                    3594   ; }
                    3595   ; void DisableBreakPoints(void)
                    3596   ; {
                    3597   _DisableBreakPoints:
000021F8  4E56 FFFC 3598          link      A6,#-4
000021FC  2F02      3599          move.l    D2,-(A7)
                    3600   ; int i ;
                    3601   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3602   ; for(i = 0; i < 8; i++)  {
000021FE  4282      3603          clr.l     D2
                    3604   DisableBreakPoints_1:
00002200  0C82 0000 3605          cmp.l     #8,D2
00002204  0008      
00002206  6C00 003E 3606          bge       DisableBreakPoints_3
                    3607   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
0000220A  2002      3608          move.l    D2,D0
0000220C  E588      3609          lsl.l     #2,D0
0000220E  41F9 0B00 3610          lea       _BreakPointSetOrCleared.L,A0
00002212  015E      
00002214  2030 0800 3611          move.l    0(A0,D0.L),D0
00002218  0C80 0000 3612          cmp.l     #1,D0
0000221C  0001      
0000221E  6622      3613          bne.s     DisableBreakPoints_4
                    3614   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002220  2002      3615          move.l    D2,D0
00002222  E588      3616          lsl.l     #2,D0
00002224  41F9 0B00 3617          lea       _BreakPointAddress.L,A0
00002228  012E      
0000222A  2D70 0800 3618          move.l    0(A0,D0.L),-4(A6)
0000222E  FFFC      
                    3619   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00002230  2002      3620          move.l    D2,D0
00002232  E388      3621          lsl.l     #1,D0
00002234  41F9 0B00 3622          lea       _BreakPointInstruction.L,A0
00002238  014E      
0000223A  226E FFFC 3623          move.l    -4(A6),A1
0000223E  32B0 0800 3624          move.w    0(A0,D0.L),(A1)
                    3625   DisableBreakPoints_4:
00002242  5282      3626          addq.l    #1,D2
00002244  60BA      3627          bra       DisableBreakPoints_1
                    3628   DisableBreakPoints_3:
00002246  241F      3629          move.l    (A7)+,D2
00002248  4E5E      3630          unlk      A6
0000224A  4E75      3631          rts
                    3632   ; }
                    3633   ; }
                    3634   ; }
                    3635   ; void EnableBreakPoints(void)
                    3636   ; {
                    3637   _EnableBreakPoints:
0000224C  4E56 FFFC 3638          link      A6,#-4
00002250  2F02      3639          move.l    D2,-(A7)
                    3640   ; int i ;
                    3641   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3642   ; for(i = 0; i < 8; i++)  {
00002252  4282      3643          clr.l     D2
                    3644   EnableBreakPoints_1:
00002254  0C82 0000 3645          cmp.l     #8,D2
00002258  0008      
0000225A  6C32      3646          bge.s     EnableBreakPoints_3
                    3647   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
0000225C  2002      3648          move.l    D2,D0
0000225E  E588      3649          lsl.l     #2,D0
00002260  41F9 0B00 3650          lea       _BreakPointSetOrCleared.L,A0
00002264  015E      
00002266  2030 0800 3651          move.l    0(A0,D0.L),D0
0000226A  0C80 0000 3652          cmp.l     #1,D0
0000226E  0001      
00002270  6618      3653          bne.s     EnableBreakPoints_4
                    3654   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002272  2002      3655          move.l    D2,D0
00002274  E588      3656          lsl.l     #2,D0
00002276  41F9 0B00 3657          lea       _BreakPointAddress.L,A0
0000227A  012E      
0000227C  2D70 0800 3658          move.l    0(A0,D0.L),-4(A6)
00002280  FFFC      
                    3659   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00002282  206E FFFC 3660          move.l    -4(A6),A0
00002286  30BC 4E4E 3661          move.w    #20046,(A0)
                    3662   EnableBreakPoints_4:
0000228A  5282      3663          addq.l    #1,D2
0000228C  60C6      3664          bra       EnableBreakPoints_1
                    3665   EnableBreakPoints_3:
0000228E  241F      3666          move.l    (A7)+,D2
00002290  4E5E      3667          unlk      A6
00002292  4E75      3668          rts
                    3669   ; }
                    3670   ; }
                    3671   ; }
                    3672   ; void KillAllBreakPoints(void)
                    3673   ; {
                    3674   _KillAllBreakPoints:
00002294  4E56 FFFC 3675          link      A6,#-4
00002298  2F02      3676          move.l    D2,-(A7)
                    3677   ; int i ;
                    3678   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3679   ; for(i = 0; i < 8; i++)  {
0000229A  4282      3680          clr.l     D2
                    3681   KillAllBreakPoints_1:
0000229C  0C82 0000 3682          cmp.l     #8,D2
000022A0  0008      
000022A2  6C00 0052 3683          bge       KillAllBreakPoints_3
                    3684   ; // clear BP
                    3685   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000022A6  2002      3686          move.l    D2,D0
000022A8  E588      3687          lsl.l     #2,D0
000022AA  41F9 0B00 3688          lea       _BreakPointAddress.L,A0
000022AE  012E      
000022B0  2D70 0800 3689          move.l    0(A0,D0.L),-4(A6)
000022B4  FFFC      
                    3690   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
000022B6  2002      3691          move.l    D2,D0
000022B8  E388      3692          lsl.l     #1,D0
000022BA  41F9 0B00 3693          lea       _BreakPointInstruction.L,A0
000022BE  014E      
000022C0  226E FFFC 3694          move.l    -4(A6),A1
000022C4  32B0 0800 3695          move.w    0(A0,D0.L),(A1)
                    3696   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
000022C8  2002      3697          move.l    D2,D0
000022CA  E588      3698          lsl.l     #2,D0
000022CC  41F9 0B00 3699          lea       _BreakPointAddress.L,A0
000022D0  012E      
000022D2  42B0 0800 3700          clr.l     0(A0,D0.L)
                    3701   ; BreakPointInstruction[i] = 0 ;
000022D6  2002      3702          move.l    D2,D0
000022D8  E388      3703          lsl.l     #1,D0
000022DA  41F9 0B00 3704          lea       _BreakPointInstruction.L,A0
000022DE  014E      
000022E0  4270 0800 3705          clr.w     0(A0,D0.L)
                    3706   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
000022E4  2002      3707          move.l    D2,D0
000022E6  E588      3708          lsl.l     #2,D0
000022E8  41F9 0B00 3709          lea       _BreakPointSetOrCleared.L,A0
000022EC  015E      
000022EE  42B0 0800 3710          clr.l     0(A0,D0.L)
000022F2  5282      3711          addq.l    #1,D2
000022F4  60A6      3712          bra       KillAllBreakPoints_1
                    3713   KillAllBreakPoints_3:
000022F6  241F      3714          move.l    (A7)+,D2
000022F8  4E5E      3715          unlk      A6
000022FA  4E75      3716          rts
                    3717   ; }
                    3718   ; //BreakPointDisplay() ;       // display the break points
                    3719   ; }
                    3720   ; void KillAllWatchPoints(void)
                    3721   ; {
                    3722   _KillAllWatchPoints:
000022FC  2F02      3723          move.l    D2,-(A7)
                    3724   ; int i ;
                    3725   ; for(i = 0; i < 8; i++)  {
000022FE  4282      3726          clr.l     D2
                    3727   KillAllWatchPoints_1:
00002300  0C82 0000 3728          cmp.l     #8,D2
00002304  0008      
00002306  6C20      3729          bge.s     KillAllWatchPoints_3
                    3730   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002308  2002      3731          move.l    D2,D0
0000230A  E588      3732          lsl.l     #2,D0
0000230C  41F9 0B00 3733          lea       _WatchPointAddress.L,A0
00002310  0182      
00002312  42B0 0800 3734          clr.l     0(A0,D0.L)
                    3735   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002316  2002      3736          move.l    D2,D0
00002318  E588      3737          lsl.l     #2,D0
0000231A  41F9 0B00 3738          lea       _WatchPointSetOrCleared.L,A0
0000231E  01A2      
00002320  42B0 0800 3739          clr.l     0(A0,D0.L)
00002324  5282      3740          addq.l    #1,D2
00002326  60D8      3741          bra       KillAllWatchPoints_1
                    3742   KillAllWatchPoints_3:
00002328  241F      3743          move.l    (A7)+,D2
0000232A  4E75      3744          rts
                    3745   ; }
                    3746   ; //WatchPointDisplay() ;       // display the break points
                    3747   ; }
                    3748   ; void SetBreakPoint(void)
                    3749   ; {
                    3750   _SetBreakPoint:
0000232C  4E56 FFFC 3751          link      A6,#-4
00002330  48E7 3830 3752          movem.l   D2/D3/D4/A2/A3,-(A7)
00002334  45F9 0000 3753          lea       _printf.L,A2
00002338  3CC6      
0000233A  47F9 0B00 3754          lea       _BreakPointSetOrCleared.L,A3
0000233E  015E      
                    3755   ; int i ;
                    3756   ; int BPNumber;
                    3757   ; int BPAddress;
                    3758   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3759   ; // see if any free break points
                    3760   ; for(i = 0; i < 8; i ++) {
00002340  4282      3761          clr.l     D2
                    3762   SetBreakPoint_1:
00002342  0C82 0000 3763          cmp.l     #8,D2
00002346  0008      
00002348  6C10      3764          bge.s     SetBreakPoint_3
                    3765   ; if( BreakPointSetOrCleared[i] == 0)
0000234A  2002      3766          move.l    D2,D0
0000234C  E588      3767          lsl.l     #2,D0
0000234E  2033 0800 3768          move.l    0(A3,D0.L),D0
00002352  6602      3769          bne.s     SetBreakPoint_4
                    3770   ; break ;         // if spare BP found allow user to set it
00002354  6004      3771          bra.s     SetBreakPoint_3
                    3772   SetBreakPoint_4:
00002356  5282      3773          addq.l    #1,D2
00002358  60E8      3774          bra       SetBreakPoint_1
                    3775   SetBreakPoint_3:
                    3776   ; }
                    3777   ; if(i == 8) {
0000235A  0C82 0000 3778          cmp.l     #8,D2
0000235E  0008      
00002360  660E      3779          bne.s     SetBreakPoint_6
                    3780   ; printf("\r\nNo FREE Break Points.....") ;
00002362  4879 0000 3781          pea       @m68kde~1_93.L
00002366  4F6C      
00002368  4E92      3782          jsr       (A2)
0000236A  584F      3783          addq.w    #4,A7
                    3784   ; return ;
0000236C  6000 00D6 3785          bra       SetBreakPoint_15
                    3786   SetBreakPoint_6:
                    3787   ; }
                    3788   ; printf("\r\nBreak Point Address: ") ;
00002370  4879 0000 3789          pea       @m68kde~1_94.L
00002374  4F88      
00002376  4E92      3790          jsr       (A2)
00002378  584F      3791          addq.w    #4,A7
                    3792   ; BPAddress = Get8HexDigits(0) ;
0000237A  42A7      3793          clr.l     -(A7)
0000237C  4EB8 0CA4 3794          jsr       _Get8HexDigits
00002380  584F      3795          addq.w    #4,A7
00002382  2600      3796          move.l    D0,D3
                    3797   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00002384  2803      3798          move.l    D3,D4
                    3799   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00002386  2003      3800          move.l    D3,D0
00002388  C0BC 0000 3801          and.l     #1,D0
0000238C  0001      
0000238E  0C80 0000 3802          cmp.l     #1,D0
00002392  0001      
00002394  660E      3803          bne.s     SetBreakPoint_9
                    3804   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002396  4879 0000 3805          pea       @m68kde~1_95.L
0000239A  4FA0      
0000239C  4E92      3806          jsr       (A2)
0000239E  584F      3807          addq.w    #4,A7
                    3808   ; return ;
000023A0  6000 00A2 3809          bra       SetBreakPoint_15
                    3810   SetBreakPoint_9:
                    3811   ; }
                    3812   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
000023A4  0C83 0000 3813          cmp.l     #32768,D3
000023A8  8000      
000023AA  640E      3814          bhs.s     SetBreakPoint_11
                    3815   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
000023AC  4879 0000 3816          pea       @m68kde~1_96.L
000023B0  4FD6      
000023B2  4E92      3817          jsr       (A2)
000023B4  584F      3818          addq.w    #4,A7
                    3819   ; return ;
000023B6  6000 008C 3820          bra       SetBreakPoint_15
                    3821   SetBreakPoint_11:
                    3822   ; }
                    3823   ; // search for first free bp or existing same BP
                    3824   ; for(i = 0; i < 8; i++)  {
000023BA  4282      3825          clr.l     D2
                    3826   SetBreakPoint_13:
000023BC  0C82 0000 3827          cmp.l     #8,D2
000023C0  0008      
000023C2  6C00 0080 3828          bge       SetBreakPoint_15
                    3829   ; if(BreakPointAddress[i] == BPAddress)   {
000023C6  2002      3830          move.l    D2,D0
000023C8  E588      3831          lsl.l     #2,D0
000023CA  41F9 0B00 3832          lea       _BreakPointAddress.L,A0
000023CE  012E      
000023D0  B6B0 0800 3833          cmp.l     0(A0,D0.L),D3
000023D4  6610      3834          bne.s     SetBreakPoint_16
                    3835   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
000023D6  2F03      3836          move.l    D3,-(A7)
000023D8  4879 0000 3837          pea       @m68kde~1_97.L
000023DC  501E      
000023DE  4E92      3838          jsr       (A2)
000023E0  504F      3839          addq.w    #8,A7
                    3840   ; return ;
000023E2  6000 0060 3841          bra       SetBreakPoint_15
                    3842   SetBreakPoint_16:
                    3843   ; }
                    3844   ; if(BreakPointSetOrCleared[i] == 0) {
000023E6  2002      3845          move.l    D2,D0
000023E8  E588      3846          lsl.l     #2,D0
000023EA  2033 0800 3847          move.l    0(A3,D0.L),D0
000023EE  6600 004E 3848          bne       SetBreakPoint_18
                    3849   ; // set BP here
                    3850   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
000023F2  2002      3851          move.l    D2,D0
000023F4  E588      3852          lsl.l     #2,D0
000023F6  27BC 0000 3853          move.l    #1,0(A3,D0.L)
000023FA  0001 0800 
                    3854   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
000023FE  2044      3855          move.l    D4,A0
00002400  2002      3856          move.l    D2,D0
00002402  E388      3857          lsl.l     #1,D0
00002404  43F9 0B00 3858          lea       _BreakPointInstruction.L,A1
00002408  014E      
0000240A  3390 0800 3859          move.w    (A0),0(A1,D0.L)
                    3860   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
0000240E  2F04      3861          move.l    D4,-(A7)
00002410  4879 0000 3862          pea       @m68kde~1_98.L
00002414  5056      
00002416  4E92      3863          jsr       (A2)
00002418  504F      3864          addq.w    #8,A7
                    3865   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000241A  2044      3866          move.l    D4,A0
0000241C  30BC 4E4E 3867          move.w    #20046,(A0)
                    3868   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002420  2002      3869          move.l    D2,D0
00002422  E588      3870          lsl.l     #2,D0
00002424  41F9 0B00 3871          lea       _BreakPointAddress.L,A0
00002428  012E      
0000242A  2183 0800 3872          move.l    D3,0(A0,D0.L)
                    3873   ; printf("\r\n") ;
0000242E  4879 0000 3874          pea       @m68kde~1_1.L
00002432  469C      
00002434  4E92      3875          jsr       (A2)
00002436  584F      3876          addq.w    #4,A7
                    3877   ; BreakPointDisplay() ;       // display the break points
00002438  4EB8 1EFC 3878          jsr       _BreakPointDisplay
                    3879   ; return ;
0000243C  6006      3880          bra.s     SetBreakPoint_15
                    3881   SetBreakPoint_18:
0000243E  5282      3882          addq.l    #1,D2
00002440  6000 FF7A 3883          bra       SetBreakPoint_13
                    3884   SetBreakPoint_15:
00002444  4CDF 0C1C 3885          movem.l   (A7)+,D2/D3/D4/A2/A3
00002448  4E5E      3886          unlk      A6
0000244A  4E75      3887          rts
                    3888   ; }
                    3889   ; }
                    3890   ; }
                    3891   ; void SetWatchPoint(void)
                    3892   ; {
                    3893   _SetWatchPoint:
0000244C  4E56 FFF8 3894          link      A6,#-8
00002450  48E7 3030 3895          movem.l   D2/D3/A2/A3,-(A7)
00002454  45F9 0000 3896          lea       _printf.L,A2
00002458  3CC6      
0000245A  47F9 0B00 3897          lea       _WatchPointSetOrCleared.L,A3
0000245E  01A2      
                    3898   ; int i ;
                    3899   ; int WPNumber;
                    3900   ; int WPAddress;
                    3901   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3902   ; // see if any free break points
                    3903   ; for(i = 0; i < 8; i ++) {
00002460  4282      3904          clr.l     D2
                    3905   SetWatchPoint_1:
00002462  0C82 0000 3906          cmp.l     #8,D2
00002466  0008      
00002468  6C10      3907          bge.s     SetWatchPoint_3
                    3908   ; if( WatchPointSetOrCleared[i] == 0)
0000246A  2002      3909          move.l    D2,D0
0000246C  E588      3910          lsl.l     #2,D0
0000246E  2033 0800 3911          move.l    0(A3,D0.L),D0
00002472  6602      3912          bne.s     SetWatchPoint_4
                    3913   ; break ;         // if spare WP found allow user to set it
00002474  6004      3914          bra.s     SetWatchPoint_3
                    3915   SetWatchPoint_4:
00002476  5282      3916          addq.l    #1,D2
00002478  60E8      3917          bra       SetWatchPoint_1
                    3918   SetWatchPoint_3:
                    3919   ; }
                    3920   ; if(i == 8) {
0000247A  0C82 0000 3921          cmp.l     #8,D2
0000247E  0008      
00002480  660E      3922          bne.s     SetWatchPoint_6
                    3923   ; printf("\r\nNo FREE Watch Points.....") ;
00002482  4879 0000 3924          pea       @m68kde~1_99.L
00002486  507C      
00002488  4E92      3925          jsr       (A2)
0000248A  584F      3926          addq.w    #4,A7
                    3927   ; return ;
0000248C  6000 008C 3928          bra       SetWatchPoint_11
                    3929   SetWatchPoint_6:
                    3930   ; }
                    3931   ; printf("\r\nWatch Point Address: ") ;
00002490  4879 0000 3932          pea       @m68kde~1_100.L
00002494  5098      
00002496  4E92      3933          jsr       (A2)
00002498  584F      3934          addq.w    #4,A7
                    3935   ; WPAddress = Get8HexDigits(0) ;
0000249A  42A7      3936          clr.l     -(A7)
0000249C  4EB8 0CA4 3937          jsr       _Get8HexDigits
000024A0  584F      3938          addq.w    #4,A7
000024A2  2600      3939          move.l    D0,D3
                    3940   ; // search for first free wp or existing same wp
                    3941   ; for(i = 0; i < 8; i++)  {
000024A4  4282      3942          clr.l     D2
                    3943   SetWatchPoint_9:
000024A6  0C82 0000 3944          cmp.l     #8,D2
000024AA  0008      
000024AC  6C00 006C 3945          bge       SetWatchPoint_11
                    3946   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
000024B0  2002      3947          move.l    D2,D0
000024B2  E588      3948          lsl.l     #2,D0
000024B4  41F9 0B00 3949          lea       _WatchPointAddress.L,A0
000024B8  0182      
000024BA  B6B0 0800 3950          cmp.l     0(A0,D0.L),D3
000024BE  6614      3951          bne.s     SetWatchPoint_12
000024C0  4A83      3952          tst.l     D3
000024C2  6710      3953          beq.s     SetWatchPoint_12
                    3954   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
000024C4  2F03      3955          move.l    D3,-(A7)
000024C6  4879 0000 3956          pea       @m68kde~1_101.L
000024CA  50B0      
000024CC  4E92      3957          jsr       (A2)
000024CE  504F      3958          addq.w    #8,A7
                    3959   ; return ;
000024D0  6000 0048 3960          bra       SetWatchPoint_11
                    3961   SetWatchPoint_12:
                    3962   ; }
                    3963   ; if(WatchPointSetOrCleared[i] == 0) {
000024D4  2002      3964          move.l    D2,D0
000024D6  E588      3965          lsl.l     #2,D0
000024D8  2033 0800 3966          move.l    0(A3,D0.L),D0
000024DC  6600 0038 3967          bne       SetWatchPoint_14
                    3968   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
000024E0  2002      3969          move.l    D2,D0
000024E2  E588      3970          lsl.l     #2,D0
000024E4  27BC 0000 3971          move.l    #1,0(A3,D0.L)
000024E8  0001 0800 
                    3972   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
000024EC  2F03      3973          move.l    D3,-(A7)
000024EE  4879 0000 3974          pea       @m68kde~1_102.L
000024F2  50E6      
000024F4  4E92      3975          jsr       (A2)
000024F6  504F      3976          addq.w    #8,A7
                    3977   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
000024F8  2002      3978          move.l    D2,D0
000024FA  E588      3979          lsl.l     #2,D0
000024FC  41F9 0B00 3980          lea       _WatchPointAddress.L,A0
00002500  0182      
00002502  2183 0800 3981          move.l    D3,0(A0,D0.L)
                    3982   ; printf("\r\n") ;
00002506  4879 0000 3983          pea       @m68kde~1_1.L
0000250A  469C      
0000250C  4E92      3984          jsr       (A2)
0000250E  584F      3985          addq.w    #4,A7
                    3986   ; WatchPointDisplay() ;       // display the break points
00002510  4EB8 1FD0 3987          jsr       _WatchPointDisplay
                    3988   ; return ;
00002514  6004      3989          bra.s     SetWatchPoint_11
                    3990   SetWatchPoint_14:
00002516  5282      3991          addq.l    #1,D2
00002518  608C      3992          bra       SetWatchPoint_9
                    3993   SetWatchPoint_11:
0000251A  4CDF 0C0C 3994          movem.l   (A7)+,D2/D3/A2/A3
0000251E  4E5E      3995          unlk      A6
00002520  4E75      3996          rts
                    3997   ; }
                    3998   ; }
                    3999   ; }
                    4000   ; void HandleBreakPoint(void)
                    4001   ; {
                    4002   _HandleBreakPoint:
00002522  4E56 FFFC 4003          link      A6,#-4
00002526  48E7 0038 4004          movem.l   A2/A3/A4,-(A7)
0000252A  45F9 0B00 4005          lea       _i.L,A2
0000252E  00C4      
00002530  47F9 0000 4006          lea       _printf.L,A3
00002534  3CC6      
00002536  49F9 0B00 4007          lea       _PC.L,A4
0000253A  0120      
                    4008   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4009   ; // now we have to put the break point back to run the instruction
                    4010   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    4011   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
0000253C  5594      4012          subq.l    #2,(A4)
                    4013   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
0000253E  4879 0000 4014          pea       @m68kde~1_103.L
00002542  510C      
00002544  4E93      4015          jsr       (A3)
00002546  584F      4016          addq.w    #4,A7
                    4017   ; printf("\r\nSingle Step : [ON]") ;
00002548  4879 0000 4018          pea       @m68kde~1_104.L
0000254C  5120      
0000254E  4E93      4019          jsr       (A3)
00002550  584F      4020          addq.w    #4,A7
                    4021   ; printf("\r\nBreakPoints : [Enabled]") ;
00002552  4879 0000 4022          pea       @m68kde~1_105.L
00002556  5136      
00002558  4E93      4023          jsr       (A3)
0000255A  584F      4024          addq.w    #4,A7
                    4025   ; // now clear the break point (put original instruction back)
                    4026   ; ProgramBreakPointAddress = PC ;
0000255C  2D54 FFFC 4027          move.l    (A4),-4(A6)
                    4028   ; for(i = 0; i < 8; i ++) {
00002560  4292      4029          clr.l     (A2)
                    4030   HandleBreakPoint_1:
00002562  2012      4031          move.l    (A2),D0
00002564  0C80 0000 4032          cmp.l     #8,D0
00002568  0008      
0000256A  6400 0056 4033          bhs       HandleBreakPoint_3
                    4034   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
0000256E  2012      4035          move.l    (A2),D0
00002570  E588      4036          lsl.l     #2,D0
00002572  41F9 0B00 4037          lea       _BreakPointAddress.L,A0
00002576  012E      
00002578  2230 0800 4038          move.l    0(A0,D0.L),D1
0000257C  B294      4039          cmp.l     (A4),D1
0000257E  6600 003E 4040          bne       HandleBreakPoint_4
                    4041   ; BreakPointAddress[i] = 0 ;
00002582  2012      4042          move.l    (A2),D0
00002584  E588      4043          lsl.l     #2,D0
00002586  41F9 0B00 4044          lea       _BreakPointAddress.L,A0
0000258A  012E      
0000258C  42B0 0800 4045          clr.l     0(A0,D0.L)
                    4046   ; BreakPointSetOrCleared[i] = 0 ;
00002590  2012      4047          move.l    (A2),D0
00002592  E588      4048          lsl.l     #2,D0
00002594  41F9 0B00 4049          lea       _BreakPointSetOrCleared.L,A0
00002598  015E      
0000259A  42B0 0800 4050          clr.l     0(A0,D0.L)
                    4051   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000259E  2012      4052          move.l    (A2),D0
000025A0  E388      4053          lsl.l     #1,D0
000025A2  41F9 0B00 4054          lea       _BreakPointInstruction.L,A0
000025A6  014E      
000025A8  226E FFFC 4055          move.l    -4(A6),A1
000025AC  32B0 0800 4056          move.w    0(A0,D0.L),(A1)
                    4057   ; BreakPointInstruction[i] = 0 ;
000025B0  2012      4058          move.l    (A2),D0
000025B2  E388      4059          lsl.l     #1,D0
000025B4  41F9 0B00 4060          lea       _BreakPointInstruction.L,A0
000025B8  014E      
000025BA  4270 0800 4061          clr.w     0(A0,D0.L)
                    4062   HandleBreakPoint_4:
000025BE  5292      4063          addq.l    #1,(A2)
000025C0  60A0      4064          bra       HandleBreakPoint_1
                    4065   HandleBreakPoint_3:
                    4066   ; }
                    4067   ; }
                    4068   ; DumpRegisters() ;
000025C2  4EB8 174E 4069          jsr       _DumpRegisters
                    4070   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000025C6  4879 0000 4071          pea       @m68kde~1_67.L
000025CA  4CB2      
000025CC  4E93      4072          jsr       (A3)
000025CE  584F      4073          addq.w    #4,A7
                    4074   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
000025D0  4879 0000 4075          pea       @m68kde~1_106.L
000025D4  5150      
000025D6  4E93      4076          jsr       (A3)
000025D8  584F      4077          addq.w    #4,A7
                    4078   ; menu() ;
000025DA  4EB9 0000 4079          jsr       _menu
000025DE  27E6      
000025E0  4CDF 1C00 4080          movem.l   (A7)+,A2/A3/A4
000025E4  4E5E      4081          unlk      A6
000025E6  4E75      4082          rts
                    4083   ; }
                    4084   ; void UnknownCommand()
                    4085   ; {
                    4086   _UnknownCommand:
                    4087   ; printf("\r\nUnknown Command.....\r\n") ;
000025E8  4879 0000 4088          pea       @m68kde~1_107.L
000025EC  5178      
000025EE  4EB9 0000 4089          jsr       _printf
000025F2  3CC6      
000025F4  584F      4090          addq.w    #4,A7
                    4091   ; Help() ;
000025F6  4EB9 0000 4092          jsr       _Help
000025FA  270C      
000025FC  4E75      4093          rts
                    4094   ; }
                    4095   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    4096   ; void CallDebugMonitor(void)
                    4097   ; {
                    4098   _CallDebugMonitor:
                    4099   ; printf("\r\nProgram Ended (TRAP #15)....") ;
000025FE  4879 0000 4100          pea       @m68kde~1_108.L
00002602  5192      
00002604  4EB9 0000 4101          jsr       _printf
00002608  3CC6      
0000260A  584F      4102          addq.w    #4,A7
                    4103   ; menu();
0000260C  4EB9 0000 4104          jsr       _menu
00002610  27E6      
00002612  4E75      4105          rts
                    4106   ; }
                    4107   ; void Breakpoint(void)
                    4108   ; {
                    4109   _Breakpoint:
00002614  2F02      4110          move.l    D2,-(A7)
                    4111   ; char c;
                    4112   ; c = toupper(_getch());
00002616  2F00      4113          move.l    D0,-(A7)
00002618  4EB8 0B68 4114          jsr       __getch
0000261C  2200      4115          move.l    D0,D1
0000261E  201F      4116          move.l    (A7)+,D0
00002620  2F01      4117          move.l    D1,-(A7)
00002622  4EB9 0000 4118          jsr       _toupper
00002626  3404      
00002628  584F      4119          addq.w    #4,A7
0000262A  1400      4120          move.b    D0,D2
                    4121   ; if( c == (char)('D'))                                      // BreakPoint Display
0000262C  0C02 0044 4122          cmp.b     #68,D2
00002630  6608      4123          bne.s     Breakpoint_1
                    4124   ; BreakPointDisplay() ;
00002632  4EB8 1EFC 4125          jsr       _BreakPointDisplay
00002636  6000 0054 4126          bra       Breakpoint_10
                    4127   Breakpoint_1:
                    4128   ; else if(c == (char)('K')) {                                 // breakpoint Kill
0000263A  0C02 004B 4129          cmp.b     #75,D2
0000263E  6630      4130          bne.s     Breakpoint_3
                    4131   ; printf("\r\nKill All Break Points...(y/n)?") ;
00002640  4879 0000 4132          pea       @m68kde~1_109.L
00002644  51B2      
00002646  4EB9 0000 4133          jsr       _printf
0000264A  3CC6      
0000264C  584F      4134          addq.w    #4,A7
                    4135   ; c = toupper(_getch());
0000264E  2F00      4136          move.l    D0,-(A7)
00002650  4EB8 0B68 4137          jsr       __getch
00002654  2200      4138          move.l    D0,D1
00002656  201F      4139          move.l    (A7)+,D0
00002658  2F01      4140          move.l    D1,-(A7)
0000265A  4EB9 0000 4141          jsr       _toupper
0000265E  3404      
00002660  584F      4142          addq.w    #4,A7
00002662  1400      4143          move.b    D0,D2
                    4144   ; if(c == (char)('Y'))
00002664  0C02 0059 4145          cmp.b     #89,D2
00002668  6604      4146          bne.s     Breakpoint_5
                    4147   ; KillAllBreakPoints() ;
0000266A  4EB8 2294 4148          jsr       _KillAllBreakPoints
                    4149   Breakpoint_5:
0000266E  601C      4150          bra.s     Breakpoint_10
                    4151   Breakpoint_3:
                    4152   ; }
                    4153   ; else if(c == (char)('S')) {
00002670  0C02 0053 4154          cmp.b     #83,D2
00002674  6606      4155          bne.s     Breakpoint_7
                    4156   ; SetBreakPoint() ;
00002676  4EB8 232C 4157          jsr       _SetBreakPoint
0000267A  6010      4158          bra.s     Breakpoint_10
                    4159   Breakpoint_7:
                    4160   ; }
                    4161   ; else if(c == (char)('C')) {
0000267C  0C02 0043 4162          cmp.b     #67,D2
00002680  6606      4163          bne.s     Breakpoint_9
                    4164   ; BreakPointClear() ;
00002682  4EB8 207C 4165          jsr       _BreakPointClear
00002686  6004      4166          bra.s     Breakpoint_10
                    4167   Breakpoint_9:
                    4168   ; }
                    4169   ; else
                    4170   ; UnknownCommand() ;
00002688  4EB8 25E8 4171          jsr       _UnknownCommand
                    4172   Breakpoint_10:
0000268C  241F      4173          move.l    (A7)+,D2
0000268E  4E75      4174          rts
                    4175   ; }
                    4176   ; void Watchpoint(void)
                    4177   ; {
                    4178   _Watchpoint:
00002690  2F02      4179          move.l    D2,-(A7)
                    4180   ; char c;
                    4181   ; c = toupper(_getch());
00002692  2F00      4182          move.l    D0,-(A7)
00002694  4EB8 0B68 4183          jsr       __getch
00002698  2200      4184          move.l    D0,D1
0000269A  201F      4185          move.l    (A7)+,D0
0000269C  2F01      4186          move.l    D1,-(A7)
0000269E  4EB9 0000 4187          jsr       _toupper
000026A2  3404      
000026A4  584F      4188          addq.w    #4,A7
000026A6  1400      4189          move.b    D0,D2
                    4190   ; if( c == (char)('D'))                                      // WatchPoint Display
000026A8  0C02 0044 4191          cmp.b     #68,D2
000026AC  6608      4192          bne.s     Watchpoint_1
                    4193   ; WatchPointDisplay() ;
000026AE  4EB8 1FD0 4194          jsr       _WatchPointDisplay
000026B2  6000 0054 4195          bra       Watchpoint_10
                    4196   Watchpoint_1:
                    4197   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
000026B6  0C02 004B 4198          cmp.b     #75,D2
000026BA  6630      4199          bne.s     Watchpoint_3
                    4200   ; printf("\r\nKill All Watch Points...(y/n)?") ;
000026BC  4879 0000 4201          pea       @m68kde~1_110.L
000026C0  51D4      
000026C2  4EB9 0000 4202          jsr       _printf
000026C6  3CC6      
000026C8  584F      4203          addq.w    #4,A7
                    4204   ; c = toupper(_getch());
000026CA  2F00      4205          move.l    D0,-(A7)
000026CC  4EB8 0B68 4206          jsr       __getch
000026D0  2200      4207          move.l    D0,D1
000026D2  201F      4208          move.l    (A7)+,D0
000026D4  2F01      4209          move.l    D1,-(A7)
000026D6  4EB9 0000 4210          jsr       _toupper
000026DA  3404      
000026DC  584F      4211          addq.w    #4,A7
000026DE  1400      4212          move.b    D0,D2
                    4213   ; if(c == (char)('Y'))
000026E0  0C02 0059 4214          cmp.b     #89,D2
000026E4  6604      4215          bne.s     Watchpoint_5
                    4216   ; KillAllWatchPoints() ;
000026E6  4EB8 22FC 4217          jsr       _KillAllWatchPoints
                    4218   Watchpoint_5:
000026EA  601C      4219          bra.s     Watchpoint_10
                    4220   Watchpoint_3:
                    4221   ; }
                    4222   ; else if(c == (char)('S')) {
000026EC  0C02 0053 4223          cmp.b     #83,D2
000026F0  6606      4224          bne.s     Watchpoint_7
                    4225   ; SetWatchPoint() ;
000026F2  4EB8 244C 4226          jsr       _SetWatchPoint
000026F6  6010      4227          bra.s     Watchpoint_10
                    4228   Watchpoint_7:
                    4229   ; }
                    4230   ; else if(c == (char)('C')) {
000026F8  0C02 0043 4231          cmp.b     #67,D2
000026FC  6606      4232          bne.s     Watchpoint_9
                    4233   ; WatchPointClear() ;
000026FE  4EB8 2156 4234          jsr       _WatchPointClear
00002702  6004      4235          bra.s     Watchpoint_10
                    4236   Watchpoint_9:
                    4237   ; }
                    4238   ; else
                    4239   ; UnknownCommand() ;
00002704  4EB8 25E8 4240          jsr       _UnknownCommand
                    4241   Watchpoint_10:
00002708  241F      4242          move.l    (A7)+,D2
0000270A  4E75      4243          rts
                    4244   ; }
                    4245   ; void Help(void)
                    4246   ; {
                    4247   _Help:
0000270C  48E7 2020 4248          movem.l   D2/A2,-(A7)
00002710  45F9 0000 4249          lea       _printf.L,A2
00002714  3CC6      
                    4250   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002716  41F9 0000 4251          lea       @m68kde~1_111.L,A0
0000271A  51F6      
0000271C  2408      4252          move.l    A0,D2
                    4253   ; printf(banner) ;
0000271E  2F02      4254          move.l    D2,-(A7)
00002720  4E92      4255          jsr       (A2)
00002722  584F      4256          addq.w    #4,A7
                    4257   ; printf("\r\n  Debugger Command Summary") ;
00002724  4879 0000 4258          pea       @m68kde~1_112.L
00002728  523A      
0000272A  4E92      4259          jsr       (A2)
0000272C  584F      4260          addq.w    #4,A7
                    4261   ; printf(banner) ;
0000272E  2F02      4262          move.l    D2,-(A7)
00002730  4E92      4263          jsr       (A2)
00002732  584F      4264          addq.w    #4,A7
                    4265   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
00002734  4879 0000 4266          pea       @m68kde~1_113.L
00002738  5258      
0000273A  4E92      4267          jsr       (A2)
0000273C  584F      4268          addq.w    #4,A7
                    4269   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
0000273E  4879 0000 4270          pea       @m68kde~1_114.L
00002742  529C      
00002744  4E92      4271          jsr       (A2)
00002746  584F      4272          addq.w    #4,A7
                    4273   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002748  4879 0000 4274          pea       @m68kde~1_115.L
0000274C  52D4      
0000274E  4E92      4275          jsr       (A2)
00002750  584F      4276          addq.w    #4,A7
                    4277   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
00002752  4879 0000 4278          pea       @m68kde~1_116.L
00002756  530E      
00002758  4E92      4279          jsr       (A2)
0000275A  584F      4280          addq.w    #4,A7
                    4281   ; printf("\r\n  E            - Enter String into Memory") ;
0000275C  4879 0000 4282          pea       @m68kde~1_117.L
00002760  5340      
00002762  4E92      4283          jsr       (A2)
00002764  584F      4284          addq.w    #4,A7
                    4285   ; printf("\r\n  F            - Fill Memory with Data") ;
00002766  4879 0000 4286          pea       @m68kde~1_118.L
0000276A  536C      
0000276C  4E92      4287          jsr       (A2)
0000276E  584F      4288          addq.w    #4,A7
                    4289   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002770  2F39 0B00 4290          move.l    _PC.L,-(A7)
00002774  0120      
00002776  4879 0000 4291          pea       @m68kde~1_119.L
0000277A  5396      
0000277C  4E92      4292          jsr       (A2)
0000277E  504F      4293          addq.w    #8,A7
                    4294   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002780  4879 0000 4295          pea       @m68kde~1_120.L
00002784  53D0      
00002786  4E92      4296          jsr       (A2)
00002788  584F      4297          addq.w    #4,A7
                    4298   ; printf("\r\n  M            - Memory Examine and Change");
0000278A  4879 0000 4299          pea       @m68kde~1_121.L
0000278E  5408      
00002790  4E92      4300          jsr       (A2)
00002792  584F      4301          addq.w    #4,A7
                    4302   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002794  4879 0000 4303          pea       @m68kde~1_122.L
00002798  5436      
0000279A  4E92      4304          jsr       (A2)
0000279C  584F      4305          addq.w    #4,A7
                    4306   ; printf("\r\n  R            - Display 68000 Registers") ;
0000279E  4879 0000 4307          pea       @m68kde~1_123.L
000027A2  5470      
000027A4  4E92      4308          jsr       (A2)
000027A6  584F      4309          addq.w    #4,A7
                    4310   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
000027A8  4879 0000 4311          pea       @m68kde~1_124.L
000027AC  549C      
000027AE  4E92      4312          jsr       (A2)
000027B0  584F      4313          addq.w    #4,A7
                    4314   ; printf("\r\n  TM           - Test Memory") ;
000027B2  4879 0000 4315          pea       @m68kde~1_125.L
000027B6  54CE      
000027B8  4E92      4316          jsr       (A2)
000027BA  584F      4317          addq.w    #4,A7
                    4318   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
000027BC  4879 0000 4319          pea       @m68kde~1_126.L
000027C0  54EE      
000027C2  4E92      4320          jsr       (A2)
000027C4  584F      4321          addq.w    #4,A7
                    4322   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
000027C6  4879 0000 4323          pea       @m68kde~1_127.L
000027CA  5516      
000027CC  4E92      4324          jsr       (A2)
000027CE  584F      4325          addq.w    #4,A7
                    4326   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
000027D0  4879 0000 4327          pea       @m68kde~1_128.L
000027D4  554C      
000027D6  4E92      4328          jsr       (A2)
000027D8  584F      4329          addq.w    #4,A7
                    4330   ; printf(banner) ;
000027DA  2F02      4331          move.l    D2,-(A7)
000027DC  4E92      4332          jsr       (A2)
000027DE  584F      4333          addq.w    #4,A7
000027E0  4CDF 0404 4334          movem.l   (A7)+,D2/A2
000027E4  4E75      4335          rts
                    4336   ; }
                    4337   ; void menu(void)
                    4338   ; {
                    4339   _menu:
000027E6  48E7 303C 4340          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000027EA  45F9 0000 4341          lea       _printf.L,A2
000027EE  3CC6      
000027F0  47F9 0B00 4342          lea       _Trace.L,A3
000027F4  00D8      
000027F6  49F9 0B00 4343          lea       _x.L,A4
000027FA  00C8      
000027FC  4BF9 0B00 4344          lea       _SR.L,A5
00002800  012C      
                    4345   ; char c,c1 ;
                    4346   ; while(1)    {
                    4347   menu_1:
                    4348   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002802  4EB8 0BA6 4349          jsr       _FlushKeyboard
                    4350   ; printf("\r\n#") ;
00002806  4879 0000 4351          pea       @m68kde~1_129.L
0000280A  5584      
0000280C  4E92      4352          jsr       (A2)
0000280E  584F      4353          addq.w    #4,A7
                    4354   ; c = toupper(_getch());
00002810  2F00      4355          move.l    D0,-(A7)
00002812  4EB8 0B68 4356          jsr       __getch
00002816  2200      4357          move.l    D0,D1
00002818  201F      4358          move.l    (A7)+,D0
0000281A  2F01      4359          move.l    D1,-(A7)
0000281C  4EB9 0000 4360          jsr       _toupper
00002820  3404      
00002822  584F      4361          addq.w    #4,A7
00002824  1400      4362          move.b    D0,D2
                    4363   ; if( c == (char)('L'))                  // load s record file
00002826  0C02 004C 4364          cmp.b     #76,D2
0000282A  6608      4365          bne.s     menu_4
                    4366   ; Load_SRecordFile() ;
0000282C  4EB8 0E36 4367          jsr       _Load_SRecordFile
00002830  6000 021E 4368          bra       menu_46
                    4369   menu_4:
                    4370   ; else if( c == (char)('D'))             // dump memory
00002834  0C02 0044 4371          cmp.b     #68,D2
00002838  6608      4372          bne.s     menu_6
                    4373   ; DumpMemory() ;
0000283A  4EB8 0CCC 4374          jsr       _DumpMemory
0000283E  6000 0210 4375          bra       menu_46
                    4376   menu_6:
                    4377   ; else if( c == (char)('E'))             // Enter String into memory
00002842  0C02 0045 4378          cmp.b     #69,D2
00002846  660A      4379          bne.s     menu_8
                    4380   ; EnterString() ;
00002848  4EB9 0000 4381          jsr       _EnterString
0000284C  2B98      
0000284E  6000 0200 4382          bra       menu_46
                    4383   menu_8:
                    4384   ; else if( c == (char)('F'))             // fill memory
00002852  0C02 0046 4385          cmp.b     #70,D2
00002856  6608      4386          bne.s     menu_10
                    4387   ; FillMemory() ;
00002858  4EB8 0DBC 4388          jsr       _FillMemory
0000285C  6000 01F2 4389          bra       menu_46
                    4390   menu_10:
                    4391   ; else if( c == (char)('G'))  {           // go user program
00002860  0C02 0047 4392          cmp.b     #71,D2
00002864  6626      4393          bne.s     menu_12
                    4394   ; printf("\r\nProgram Running.....") ;
00002866  4879 0000 4395          pea       @m68kde~1_130.L
0000286A  5588      
0000286C  4E92      4396          jsr       (A2)
0000286E  584F      4397          addq.w    #4,A7
                    4398   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002870  4879 0000 4399          pea       @m68kde~1_131.L
00002874  55A0      
00002876  4E92      4400          jsr       (A2)
00002878  584F      4401          addq.w    #4,A7
                    4402   ; GoFlag = 1 ;
0000287A  23FC 0000 4403          move.l    #1,_GoFlag.L
0000287E  0001 0B00 
00002882  00DC      
                    4404   ; go() ;
00002884  4EB8 08B8 4405          jsr       _go
00002888  6000 01C6 4406          bra       menu_46
                    4407   menu_12:
                    4408   ; }
                    4409   ; else if( c == (char)('M'))           // memory examine and modify
0000288C  0C02 004D 4410          cmp.b     #77,D2
00002890  6608      4411          bne.s     menu_14
                    4412   ; MemoryChange() ;
00002892  4EB8 0FC4 4413          jsr       _MemoryChange
00002896  6000 01B8 4414          bra       menu_46
                    4415   menu_14:
                    4416   ; else if( c == (char)('P'))            // Program Flash Chip
0000289A  0C02 0050 4417          cmp.b     #80,D2
0000289E  6608      4418          bne.s     menu_16
                    4419   ; ProgramFlashChip() ;
000028A0  4EB8 1368 4420          jsr       _ProgramFlashChip
000028A4  6000 01AA 4421          bra       menu_46
                    4422   menu_16:
                    4423   ; else if( c == (char)('C'))             // copy flash chip to ram and go
000028A8  0C02 0043 4424          cmp.b     #67,D2
000028AC  6608      4425          bne.s     menu_18
                    4426   ; LoadFromFlashChip();
000028AE  4EB8 138A 4427          jsr       _LoadFromFlashChip
000028B2  6000 019C 4428          bra       menu_46
                    4429   menu_18:
                    4430   ; else if( c == (char)('R'))             // dump registers
000028B6  0C02 0052 4431          cmp.b     #82,D2
000028BA  6608      4432          bne.s     menu_20
                    4433   ; DumpRegisters() ;
000028BC  4EB8 174E 4434          jsr       _DumpRegisters
000028C0  6000 018E 4435          bra       menu_46
                    4436   menu_20:
                    4437   ; else if( c == (char)('.'))           // change registers
000028C4  0C02 002E 4438          cmp.b     #46,D2
000028C8  6608      4439          bne.s     menu_22
                    4440   ; ChangeRegisters() ;
000028CA  4EB8 1C40 4441          jsr       _ChangeRegisters
000028CE  6000 0180 4442          bra       menu_46
                    4443   menu_22:
                    4444   ; else if( c == (char)('B'))              // breakpoint command
000028D2  0C02 0042 4445          cmp.b     #66,D2
000028D6  6608      4446          bne.s     menu_24
                    4447   ; Breakpoint() ;
000028D8  4EB8 2614 4448          jsr       _Breakpoint
000028DC  6000 0172 4449          bra       menu_46
                    4450   menu_24:
                    4451   ; else if( c == (char)('T'))  {          // Test command
000028E0  0C02 0054 4452          cmp.b     #84,D2
000028E4  6600 0046 4453          bne       menu_26
                    4454   ; c1 = toupper(_getch()) ;
000028E8  2F00      4455          move.l    D0,-(A7)
000028EA  4EB8 0B68 4456          jsr       __getch
000028EE  2200      4457          move.l    D0,D1
000028F0  201F      4458          move.l    (A7)+,D0
000028F2  2F01      4459          move.l    D1,-(A7)
000028F4  4EB9 0000 4460          jsr       _toupper
000028F8  3404      
000028FA  584F      4461          addq.w    #4,A7
000028FC  1600      4462          move.b    D0,D3
                    4463   ; if(c1 == (char)('M'))                    // memory test
000028FE  0C03 004D 4464          cmp.b     #77,D3
00002902  6608      4465          bne.s     menu_28
                    4466   ; MemoryTest() ;
00002904  4EB9 0000 4467          jsr       _MemoryTest
00002908  2C10      
0000290A  601C      4468          bra.s     menu_33
                    4469   menu_28:
                    4470   ; else if( c1 == (char)('S'))              // Switch Test command
0000290C  0C03 0053 4471          cmp.b     #83,D3
00002910  6606      4472          bne.s     menu_30
                    4473   ; SwitchTest() ;
00002912  4EB8 0AA4 4474          jsr       _SwitchTest
00002916  6010      4475          bra.s     menu_33
                    4476   menu_30:
                    4477   ; else if( c1 == (char)('D'))              // display Test command
00002918  0C03 0044 4478          cmp.b     #68,D3
0000291C  6606      4479          bne.s     menu_32
                    4480   ; TestLEDS() ;
0000291E  4EB8 0A50 4481          jsr       _TestLEDS
00002922  6004      4482          bra.s     menu_33
                    4483   menu_32:
                    4484   ; else
                    4485   ; UnknownCommand() ;
00002924  4EB8 25E8 4486          jsr       _UnknownCommand
                    4487   menu_33:
00002928  6000 0126 4488          bra       menu_46
                    4489   menu_26:
                    4490   ; }
                    4491   ; else if( c == (char)(' ')) {             // Next instruction command
0000292C  0C02 0020 4492          cmp.b     #32,D2
00002930  6636      4493          bne.s     menu_34
                    4494   ; DisableBreakPoints() ;
00002932  4EB8 21F8 4495          jsr       _DisableBreakPoints
                    4496   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002936  2013      4497          move.l    (A3),D0
00002938  0C80 0000 4498          cmp.l     #1,D0
0000293C  0001      
0000293E  661A      4499          bne.s     menu_36
00002940  2039 0B00 4500          move.l    _GoFlag.L,D0
00002944  00DC      
00002946  0C80 0000 4501          cmp.l     #1,D0
0000294A  0001      
0000294C  660C      4502          bne.s     menu_36
                    4503   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
0000294E  13FC 0001 4504          move.b    #1,4194314
00002952  0040 000A 
                    4505   ; return ;
00002956  6000 00FC 4506          bra       menu_38
                    4507   menu_36:
                    4508   ; }
                    4509   ; else
                    4510   ; printf("\r\nError: Press 'G' first to start program") ;
0000295A  4879 0000 4511          pea       @m68kde~1_132.L
0000295E  55CE      
00002960  4E92      4512          jsr       (A2)
00002962  584F      4513          addq.w    #4,A7
00002964  6000 00EA 4514          bra       menu_46
                    4515   menu_34:
                    4516   ; }
                    4517   ; else if( c == (char)('S')) {             // single step
00002968  0C02 0053 4518          cmp.b     #83,D2
0000296C  6600 008C 4519          bne       menu_39
                    4520   ; if(Trace == 0) {
00002970  2013      4521          move.l    (A3),D0
00002972  6600 0050 4522          bne       menu_41
                    4523   ; DisableBreakPoints() ;
00002976  4EB8 21F8 4524          jsr       _DisableBreakPoints
                    4525   ; printf("\r\nSingle Step  :[ON]") ;
0000297A  4879 0000 4526          pea       @m68kde~1_133.L
0000297E  55F8      
00002980  4E92      4527          jsr       (A2)
00002982  584F      4528          addq.w    #4,A7
                    4529   ; printf("\r\nBreak Points :[Disabled]") ;
00002984  4879 0000 4530          pea       @m68kde~1_66.L
00002988  4C96      
0000298A  4E92      4531          jsr       (A2)
0000298C  584F      4532          addq.w    #4,A7
                    4533   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
0000298E  0055 8000 4534          or.w      #32768,(A5)
                    4535   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002992  2F39 0B00 4536          move.l    _PC.L,-(A7)
00002996  0120      
00002998  4879 0000 4537          pea       @m68kde~1_134.L
0000299C  560E      
0000299E  4E92      4538          jsr       (A2)
000029A0  504F      4539          addq.w    #8,A7
                    4540   ; printf("\r\nPush <RESET Button> to Stop.....") ;
000029A2  4879 0000 4541          pea       @m68kde~1_135.L
000029A6  5642      
000029A8  4E92      4542          jsr       (A2)
000029AA  584F      4543          addq.w    #4,A7
                    4544   ; DumpRegisters() ;
000029AC  4EB8 174E 4545          jsr       _DumpRegisters
                    4546   ; Trace = 1;
000029B0  26BC 0000 4547          move.l    #1,(A3)
000029B4  0001      
                    4548   ; TraceException = 1;
000029B6  13FC 0001 4549          move.b    #1,4194314
000029BA  0040 000A 
                    4550   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000029BE  28B8 0074 4551          move.l    116,(A4)
000029C2  6032      4552          bra.s     menu_42
                    4553   menu_41:
                    4554   ; }
                    4555   ; else {
                    4556   ; Trace = 0 ;
000029C4  4293      4557          clr.l     (A3)
                    4558   ; TraceException = 0 ;
000029C6  4239 0040 4559          clr.b     4194314
000029CA  000A      
                    4560   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000029CC  28B8 0074 4561          move.l    116,(A4)
                    4562   ; EnableBreakPoints() ;
000029D0  4EB8 224C 4563          jsr       _EnableBreakPoints
                    4564   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000029D4  0255 7FFF 4565          and.w     #32767,(A5)
                    4566   ; printf("\r\nSingle Step : [OFF]") ;
000029D8  4879 0000 4567          pea       @m68kde~1_136.L
000029DC  5666      
000029DE  4E92      4568          jsr       (A2)
000029E0  584F      4569          addq.w    #4,A7
                    4570   ; printf("\r\nBreak Points :[Enabled]") ;
000029E2  4879 0000 4571          pea       @m68kde~1_137.L
000029E6  567C      
000029E8  4E92      4572          jsr       (A2)
000029EA  584F      4573          addq.w    #4,A7
                    4574   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000029EC  4879 0000 4575          pea       @m68kde~1_138.L
000029F0  5696      
000029F2  4E92      4576          jsr       (A2)
000029F4  584F      4577          addq.w    #4,A7
                    4578   menu_42:
000029F6  6000 0058 4579          bra       menu_46
                    4580   menu_39:
                    4581   ; }
                    4582   ; }
                    4583   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000029FA  0C02 001B 4584          cmp.b     #27,D2
000029FE  6600 0040 4585          bne       menu_43
                    4586   ; Trace = 0;
00002A02  4293      4587          clr.l     (A3)
                    4588   ; TraceException = 0;
00002A04  4239 0040 4589          clr.b     4194314
00002A08  000A      
                    4590   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002A0A  28B8 0074 4591          move.l    116,(A4)
                    4592   ; EnableBreakPoints() ;
00002A0E  4EB8 224C 4593          jsr       _EnableBreakPoints
                    4594   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002A12  0255 7FFF 4595          and.w     #32767,(A5)
                    4596   ; printf("\r\nSingle Step  :[OFF]") ;
00002A16  4879 0000 4597          pea       @m68kde~1_139.L
00002A1A  56C0      
00002A1C  4E92      4598          jsr       (A2)
00002A1E  584F      4599          addq.w    #4,A7
                    4600   ; printf("\r\nBreak Points :[Enabled]");
00002A20  4879 0000 4601          pea       @m68kde~1_137.L
00002A24  567C      
00002A26  4E92      4602          jsr       (A2)
00002A28  584F      4603          addq.w    #4,A7
                    4604   ; printf("\r\nProgram Running.....") ;
00002A2A  4879 0000 4605          pea       @m68kde~1_130.L
00002A2E  5588      
00002A30  4E92      4606          jsr       (A2)
00002A32  584F      4607          addq.w    #4,A7
                    4608   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002A34  4879 0000 4609          pea       @m68kde~1_131.L
00002A38  55A0      
00002A3A  4E92      4610          jsr       (A2)
00002A3C  584F      4611          addq.w    #4,A7
                    4612   ; return ;
00002A3E  6014      4613          bra.s     menu_38
                    4614   menu_43:
                    4615   ; }
                    4616   ; else if( c == (char)('W'))              // Watchpoint command
00002A40  0C02 0057 4617          cmp.b     #87,D2
00002A44  6606      4618          bne.s     menu_45
                    4619   ; Watchpoint() ;
00002A46  4EB8 2690 4620          jsr       _Watchpoint
00002A4A  6004      4621          bra.s     menu_46
                    4622   menu_45:
                    4623   ; else
                    4624   ; UnknownCommand() ;
00002A4C  4EB8 25E8 4625          jsr       _UnknownCommand
                    4626   menu_46:
00002A50  6000 FDB0 4627          bra       menu_1
                    4628   menu_38:
00002A54  4CDF 3C0C 4629          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002A58  4E75      4630          rts
                    4631   ; }
                    4632   ; }
                    4633   ; void PrintErrorMessageandAbort(char *string) {
                    4634   _PrintErrorMessageandAbort:
00002A5A  4E56 0000 4635          link      A6,#0
                    4636   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002A5E  4879 0000 4637          pea       @m68kde~1_140.L
00002A62  56D6      
00002A64  4EB9 0000 4638          jsr       _printf
00002A68  3CC6      
00002A6A  584F      4639          addq.w    #4,A7
                    4640   ; printf("%s\r\n", string) ;
00002A6C  2F2E 0008 4641          move.l    8(A6),-(A7)
00002A70  4879 0000 4642          pea       @m68kde~1_141.L
00002A74  56F2      
00002A76  4EB9 0000 4643          jsr       _printf
00002A7A  3CC6      
00002A7C  504F      4644          addq.w    #8,A7
                    4645   ; menu() ;
00002A7E  4EB8 27E6 4646          jsr       _menu
00002A82  4E5E      4647          unlk      A6
00002A84  4E75      4648          rts
                    4649   ; }
                    4650   ; void IRQMessage(int level) {
                    4651   _IRQMessage:
00002A86  4E56 0000 4652          link      A6,#0
                    4653   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002A8A  4879 0000 4654          pea       @m68kde~1_142.L
00002A8E  56F8      
00002A90  4EB9 0000 4655          jsr       _printf
00002A94  3CC6      
00002A96  584F      4656          addq.w    #4,A7
                    4657   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002A98  2F2E 0008 4658          move.l    8(A6),-(A7)
00002A9C  4879 0000 4659          pea       @m68kde~1_143.L
00002AA0  5710      
00002AA2  4EB9 0000 4660          jsr       _printf
00002AA6  3CC6      
00002AA8  504F      4661          addq.w    #8,A7
                    4662   ; menu() ;
00002AAA  4EB8 27E6 4663          jsr       _menu
00002AAE  4E5E      4664          unlk      A6
00002AB0  4E75      4665          rts
                    4666   ; }
                    4667   ; void UnhandledIRQ1(void) {
                    4668   _UnhandledIRQ1:
                    4669   ; IRQMessage(1);
00002AB2  4878 0001 4670          pea       1
00002AB6  4EB8 2A86 4671          jsr       _IRQMessage
00002ABA  584F      4672          addq.w    #4,A7
00002ABC  4E75      4673          rts
                    4674   ; }
                    4675   ; void UnhandledIRQ2(void) {
                    4676   _UnhandledIRQ2:
                    4677   ; IRQMessage(2);
00002ABE  4878 0002 4678          pea       2
00002AC2  4EB8 2A86 4679          jsr       _IRQMessage
00002AC6  584F      4680          addq.w    #4,A7
00002AC8  4E75      4681          rts
                    4682   ; }
                    4683   ; void UnhandledIRQ3(void){
                    4684   _UnhandledIRQ3:
                    4685   ; IRQMessage(3);
00002ACA  4878 0003 4686          pea       3
00002ACE  4EB8 2A86 4687          jsr       _IRQMessage
00002AD2  584F      4688          addq.w    #4,A7
00002AD4  4E75      4689          rts
                    4690   ; }
                    4691   ; void UnhandledIRQ4(void) {
                    4692   _UnhandledIRQ4:
                    4693   ; IRQMessage(4);
00002AD6  4878 0004 4694          pea       4
00002ADA  4EB8 2A86 4695          jsr       _IRQMessage
00002ADE  584F      4696          addq.w    #4,A7
00002AE0  4E75      4697          rts
                    4698   ; }
                    4699   ; void UnhandledIRQ5(void) {
                    4700   _UnhandledIRQ5:
                    4701   ; IRQMessage(5);
00002AE2  4878 0005 4702          pea       5
00002AE6  4EB8 2A86 4703          jsr       _IRQMessage
00002AEA  584F      4704          addq.w    #4,A7
00002AEC  4E75      4705          rts
                    4706   ; }
                    4707   ; void UnhandledIRQ6(void) {
                    4708   _UnhandledIRQ6:
                    4709   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002AEE  4879 0000 4710          pea       @m68kde~1_144.L
00002AF2  5734      
00002AF4  4EB8 2A5A 4711          jsr       _PrintErrorMessageandAbort
00002AF8  584F      4712          addq.w    #4,A7
                    4713   ; menu() ;
00002AFA  4EB8 27E6 4714          jsr       _menu
00002AFE  4E75      4715          rts
                    4716   ; }
                    4717   ; void UnhandledIRQ7(void) {
                    4718   _UnhandledIRQ7:
                    4719   ; IRQMessage(7);
00002B00  4878 0007 4720          pea       7
00002B04  4EB8 2A86 4721          jsr       _IRQMessage
00002B08  584F      4722          addq.w    #4,A7
00002B0A  4E75      4723          rts
                    4724   ; }
                    4725   ; void UnhandledTrap(void) {
                    4726   _UnhandledTrap:
                    4727   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002B0C  4879 0000 4728          pea       @m68kde~1_145.L
00002B10  5774      
00002B12  4EB8 2A5A 4729          jsr       _PrintErrorMessageandAbort
00002B16  584F      4730          addq.w    #4,A7
00002B18  4E75      4731          rts
                    4732   ; }
                    4733   ; void BusError() {
                    4734   _BusError:
                    4735   ; PrintErrorMessageandAbort("BUS Error!") ;
00002B1A  4879 0000 4736          pea       @m68kde~1_146.L
00002B1E  578A      
00002B20  4EB8 2A5A 4737          jsr       _PrintErrorMessageandAbort
00002B24  584F      4738          addq.w    #4,A7
00002B26  4E75      4739          rts
                    4740   ; }
                    4741   ; void AddressError() {
                    4742   _AddressError:
                    4743   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002B28  4879 0000 4744          pea       @m68kde~1_147.L
00002B2C  5796      
00002B2E  4EB8 2A5A 4745          jsr       _PrintErrorMessageandAbort
00002B32  584F      4746          addq.w    #4,A7
00002B34  4E75      4747          rts
                    4748   ; }
                    4749   ; void IllegalInstruction() {
                    4750   _IllegalInstruction:
                    4751   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002B36  4879 0000 4752          pea       @m68kde~1_148.L
00002B3A  57A6      
00002B3C  4EB8 2A5A 4753          jsr       _PrintErrorMessageandAbort
00002B40  584F      4754          addq.w    #4,A7
00002B42  4E75      4755          rts
                    4756   ; }
                    4757   ; void Dividebyzero() {
                    4758   _Dividebyzero:
                    4759   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002B44  4879 0000 4760          pea       @m68kde~1_149.L
00002B48  57BA      
00002B4A  4EB8 2A5A 4761          jsr       _PrintErrorMessageandAbort
00002B4E  584F      4762          addq.w    #4,A7
00002B50  4E75      4763          rts
                    4764   ; }
                    4765   ; void Check() {
                    4766   _Check:
                    4767   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002B52  4879 0000 4768          pea       @m68kde~1_150.L
00002B56  57CA      
00002B58  4EB8 2A5A 4769          jsr       _PrintErrorMessageandAbort
00002B5C  584F      4770          addq.w    #4,A7
00002B5E  4E75      4771          rts
                    4772   ; }
                    4773   ; void Trapv() {
                    4774   _Trapv:
                    4775   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002B60  4879 0000 4776          pea       @m68kde~1_151.L
00002B64  57DC      
00002B66  4EB8 2A5A 4777          jsr       _PrintErrorMessageandAbort
00002B6A  584F      4778          addq.w    #4,A7
00002B6C  4E75      4779          rts
                    4780   ; }
                    4781   ; void PrivError() {
                    4782   _PrivError:
                    4783   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002B6E  4879 0000 4784          pea       @m68kde~1_152.L
00002B72  57EE      
00002B74  4EB8 2A5A 4785          jsr       _PrintErrorMessageandAbort
00002B78  584F      4786          addq.w    #4,A7
00002B7A  4E75      4787          rts
                    4788   ; }
                    4789   ; void UnitIRQ() {
                    4790   _UnitIRQ:
                    4791   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002B7C  4879 0000 4792          pea       @m68kde~1_153.L
00002B80  5802      
00002B82  4EB8 2A5A 4793          jsr       _PrintErrorMessageandAbort
00002B86  584F      4794          addq.w    #4,A7
00002B88  4E75      4795          rts
                    4796   ; }
                    4797   ; void Spurious() {
                    4798   _Spurious:
                    4799   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002B8A  4879 0000 4800          pea       @m68kde~1_154.L
00002B8E  5814      
00002B90  4EB8 2A5A 4801          jsr       _PrintErrorMessageandAbort
00002B94  584F      4802          addq.w    #4,A7
00002B96  4E75      4803          rts
                    4804   ; }
                    4805   ; void EnterString(void)
                    4806   ; {
                    4807   _EnterString:
00002B98  4E56 FFFC 4808          link      A6,#-4
00002B9C  2F02      4809          move.l    D2,-(A7)
                    4810   ; unsigned char *Start;
                    4811   ; unsigned char c;
                    4812   ; printf("\r\nStart Address in Memory: ") ;
00002B9E  4879 0000 4813          pea       @m68kde~1_155.L
00002BA2  5822      
00002BA4  4EB9 0000 4814          jsr       _printf
00002BA8  3CC6      
00002BAA  584F      4815          addq.w    #4,A7
                    4816   ; Start = Get8HexDigits(0) ;
00002BAC  42A7      4817          clr.l     -(A7)
00002BAE  4EB8 0CA4 4818          jsr       _Get8HexDigits
00002BB2  584F      4819          addq.w    #4,A7
00002BB4  2400      4820          move.l    D0,D2
                    4821   ; printf("\r\nEnter String (ESC to end) :") ;
00002BB6  4879 0000 4822          pea       @m68kde~1_156.L
00002BBA  583E      
00002BBC  4EB9 0000 4823          jsr       _printf
00002BC0  3CC6      
00002BC2  584F      4824          addq.w    #4,A7
                    4825   ; while((c = getchar()) != 0x1b)
                    4826   EnterString_1:
00002BC4  4EB9 0000 4827          jsr       _getch
00002BC8  333A      
00002BCA  1D40 FFFF 4828          move.b    D0,-1(A6)
00002BCE  0C00 001B 4829          cmp.b     #27,D0
00002BD2  670A      4830          beq.s     EnterString_3
                    4831   ; *Start++ = c ;
00002BD4  2042      4832          move.l    D2,A0
00002BD6  5282      4833          addq.l    #1,D2
00002BD8  10AE FFFF 4834          move.b    -1(A6),(A0)
00002BDC  60E6      4835          bra       EnterString_1
                    4836   EnterString_3:
                    4837   ; *Start = 0x00;  // terminate with a null
00002BDE  2042      4838          move.l    D2,A0
00002BE0  4210      4839          clr.b     (A0)
00002BE2  241F      4840          move.l    (A7)+,D2
00002BE4  4E5E      4841          unlk      A6
00002BE6  4E75      4842          rts
                    4843   ; }
                    4844   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4845   ; void clearInputBuffer() {
                    4846   _clearInputBuffer:
00002BE8  4E56 FFFC 4847          link      A6,#-4
                    4848   ; int c;
                    4849   ; while ((c = getchar()) != '\n' && c != EOF);
                    4850   clearInputBuffer_1:
00002BEC  4EB9 0000 4851          jsr       _getch
00002BF0  333A      
00002BF2  2D40 FFFC 4852          move.l    D0,-4(A6)
00002BF6  0C80 0000 4853          cmp.l     #10,D0
00002BFA  000A      
00002BFC  670E      4854          beq.s     clearInputBuffer_3
00002BFE  202E FFFC 4855          move.l    -4(A6),D0
00002C02  0C80 FFFF 4856          cmp.l     #-1,D0
00002C06  FFFF      
00002C08  6702      4857          beq.s     clearInputBuffer_3
00002C0A  60E0      4858          bra       clearInputBuffer_1
                    4859   clearInputBuffer_3:
00002C0C  4E5E      4860          unlk      A6
00002C0E  4E75      4861          rts
                    4862   ; }
                    4863   ; void MemoryTest(void)
                    4864   ; {
                    4865   _MemoryTest:
00002C10  4E56 FF40 4866          link      A6,#-192
00002C14  48E7 3F3C 4867          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002C18  45F9 0000 4868          lea       _printf.L,A2
00002C1C  3CC6      
00002C1E  4BF8 0B68 4869          lea       __getch.L,A5
                    4870   ; unsigned int *RamPtr, counter1=1 ;
00002C22  2D7C 0000 4871          move.l    #1,-188(A6)
00002C26  0001 FF44 
                    4872   ; register unsigned int i ;
                    4873   ; unsigned int Start, End ;
                    4874   ; char c, text[150];
                    4875   ; unsigned int* addressPointer;
                    4876   ; unsigned int startAddress = NULL;
00002C2A  42AE FFF0 4877          clr.l     -16(A6)
                    4878   ; unsigned int endAddress = NULL;
00002C2E  42AE FFF4 4879          clr.l     -12(A6)
                    4880   ; unsigned int byteLength;
                    4881   ; unsigned int dataSize = 0;
00002C32  4285      4882          clr.l     D5
                    4883   ; unsigned int dataPattern = 0;
00002C34  4283      4884          clr.l     D3
                    4885   ; unsigned int currAddress;
                    4886   ; unsigned int addrCount;
                    4887   ; unsigned int intBuffer = NULL;
00002C36  7E00      4888          moveq     #0,D7
                    4889   ; unsigned char *startAddressPtr = NULL;
00002C38  4282      4890          clr.l     D2
                    4891   ; unsigned char *endAddressPtr = NULL;
00002C3A  4286      4892          clr.l     D6
                    4893   ; unsigned short int *wordAddressPtr = NULL;
00002C3C  387C 0000 4894          move.w    #0,A4
                    4895   ; unsigned int *longAddressPtr = NULL;
00002C40  367C 0000 4896          move.w    #0,A3
                    4897   ; // IMPROVEMENTS TO BE MADE:
                    4898   ; // Suppossed to be able to write an odd address as a byte
                    4899   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    4900   ; // printf("\r\nStart Address: ") ;
                    4901   ; // Start = Get8HexDigits(0) ;
                    4902   ; // printf("\r\nEnd Address: ") ;
                    4903   ; // End = Get8HexDigits(0) ;
                    4904   ; // TODO
                    4905   ; scanflush();
00002C44  4EB9 0000 4906          jsr       _scanflush
00002C48  36BC      
                    4907   ; memset(text, 0, sizeof(text));  // fills with zeros
00002C4A  4878 0096 4908          pea       150
00002C4E  42A7      4909          clr.l     -(A7)
00002C50  486E FF56 4910          pea       -170(A6)
00002C54  4EB9 0000 4911          jsr       _memset
00002C58  33D6      
00002C5A  DEFC 000C 4912          add.w     #12,A7
                    4913   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
00002C5E  4879 0000 4914          pea       @m68kde~1_157.L
00002C62  585C      
00002C64  4E92      4915          jsr       (A2)
00002C66  584F      4916          addq.w    #4,A7
                    4917   ; dataSize = _getch() - 48;
00002C68  4E95      4918          jsr       (A5)
00002C6A  0480 0000 4919          sub.l     #48,D0
00002C6E  0030      
00002C70  2A00      4920          move.l    D0,D5
                    4921   ; printf("\n");
00002C72  4879 0000 4922          pea       @m68kde~1_28.L
00002C76  4944      
00002C78  4E92      4923          jsr       (A2)
00002C7A  584F      4924          addq.w    #4,A7
                    4925   ; if (dataSize == 0) {
00002C7C  4A85      4926          tst.l     D5
00002C7E  6600 0058 4927          bne       MemoryTest_1
                    4928   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
00002C82  4879 0000 4929          pea       @m68kde~1_158.L
00002C86  58B2      
00002C88  4E92      4930          jsr       (A2)
00002C8A  584F      4931          addq.w    #4,A7
                    4932   ; intBuffer = _getch() - 48;
00002C8C  4E95      4933          jsr       (A5)
00002C8E  0480 0000 4934          sub.l     #48,D0
00002C92  0030      
00002C94  2E00      4935          move.l    D0,D7
                    4936   ; // scanf("%d", &intBuffer);
                    4937   ; switch (intBuffer) {
00002C96  2007      4938          move.l    D7,D0
00002C98  0C80 0000 4939          cmp.l     #4,D0
00002C9C  0004      
00002C9E  642C      4940          bhs.s     MemoryTest_4
00002CA0  E380      4941          asl.l     #1,D0
00002CA2  303B 0806 4942          move.w    MemoryTest_5(PC,D0.L),D0
00002CA6  4EFB 0002 4943          jmp       MemoryTest_5(PC,D0.W)
                    4944   MemoryTest_5:
00002CAA  0008      4945          dc.w      MemoryTest_6-MemoryTest_5
00002CAC  000C      4946          dc.w      MemoryTest_7-MemoryTest_5
00002CAE  0014      4947          dc.w      MemoryTest_8-MemoryTest_5
00002CB0  001C      4948          dc.w      MemoryTest_9-MemoryTest_5
                    4949   MemoryTest_6:
                    4950   ; case(0):
                    4951   ; dataPattern = 0x00; break;
00002CB2  4283      4952          clr.l     D3
00002CB4  6016      4953          bra.s     MemoryTest_4
                    4954   MemoryTest_7:
                    4955   ; case(1):
                    4956   ; dataPattern = 0xB2; break;
00002CB6  263C 0000 4957          move.l    #178,D3
00002CBA  00B2      
00002CBC  600E      4958          bra.s     MemoryTest_4
                    4959   MemoryTest_8:
                    4960   ; case(2):
                    4961   ; dataPattern = 0xC3; break;
00002CBE  263C 0000 4962          move.l    #195,D3
00002CC2  00C3      
00002CC4  6006      4963          bra.s     MemoryTest_4
                    4964   MemoryTest_9:
                    4965   ; case(3):
                    4966   ; dataPattern = 0xD4; break;
00002CC6  263C 0000 4967          move.l    #212,D3
00002CCA  00D4      
                    4968   MemoryTest_4:
                    4969   ; }
                    4970   ; dataPattern &= 0xFF;
00002CCC  C6BC 0000 4971          and.l     #255,D3
00002CD0  00FF      
                    4972   ; byteLength = 1;
00002CD2  7801      4973          moveq     #1,D4
00002CD4  6000 00AE 4974          bra       MemoryTest_11
                    4975   MemoryTest_1:
                    4976   ; } else if (dataSize == 1) {
00002CD8  0C85 0000 4977          cmp.l     #1,D5
00002CDC  0001      
00002CDE  6600 0058 4978          bne       MemoryTest_10
                    4979   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
00002CE2  4879 0000 4980          pea       @m68kde~1_159.L
00002CE6  5914      
00002CE8  4E92      4981          jsr       (A2)
00002CEA  584F      4982          addq.w    #4,A7
                    4983   ; intBuffer = _getch() - 48;
00002CEC  4E95      4984          jsr       (A5)
00002CEE  0480 0000 4985          sub.l     #48,D0
00002CF2  0030      
00002CF4  2E00      4986          move.l    D0,D7
                    4987   ; switch (intBuffer) {
00002CF6  2007      4988          move.l    D7,D0
00002CF8  0C80 0000 4989          cmp.l     #4,D0
00002CFC  0004      
00002CFE  642C      4990          bhs.s     MemoryTest_13
00002D00  E380      4991          asl.l     #1,D0
00002D02  303B 0806 4992          move.w    MemoryTest_14(PC,D0.L),D0
00002D06  4EFB 0002 4993          jmp       MemoryTest_14(PC,D0.W)
                    4994   MemoryTest_14:
00002D0A  0008      4995          dc.w      MemoryTest_15-MemoryTest_14
00002D0C  000C      4996          dc.w      MemoryTest_16-MemoryTest_14
00002D0E  0014      4997          dc.w      MemoryTest_17-MemoryTest_14
00002D10  001C      4998          dc.w      MemoryTest_18-MemoryTest_14
                    4999   MemoryTest_15:
                    5000   ; case(0):
                    5001   ; dataPattern = 0x0000; break;
00002D12  4283      5002          clr.l     D3
00002D14  6016      5003          bra.s     MemoryTest_13
                    5004   MemoryTest_16:
                    5005   ; case(1):
                    5006   ; dataPattern = 0x1234; break;
00002D16  263C 0000 5007          move.l    #4660,D3
00002D1A  1234      
00002D1C  600E      5008          bra.s     MemoryTest_13
                    5009   MemoryTest_17:
                    5010   ; case(2):
                    5011   ; dataPattern = 0xA1B2; break;
00002D1E  263C 0000 5012          move.l    #41394,D3
00002D22  A1B2      
00002D24  6006      5013          bra.s     MemoryTest_13
                    5014   MemoryTest_18:
                    5015   ; case(3):
                    5016   ; dataPattern = 0xC3D4; break;
00002D26  263C 0000 5017          move.l    #50132,D3
00002D2A  C3D4      
                    5018   MemoryTest_13:
                    5019   ; }
                    5020   ; dataPattern &= 0xFFFF;
00002D2C  C6BC 0000 5021          and.l     #65535,D3
00002D30  FFFF      
                    5022   ; byteLength = 2;
00002D32  7802      5023          moveq     #2,D4
00002D34  6000 004E 5024          bra       MemoryTest_11
                    5025   MemoryTest_10:
                    5026   ; } else {
                    5027   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
00002D38  4879 0000 5028          pea       @m68kde~1_160.L
00002D3C  597E      
00002D3E  4E92      5029          jsr       (A2)
00002D40  584F      5030          addq.w    #4,A7
                    5031   ; intBuffer = _getch() - 48;
00002D42  4E95      5032          jsr       (A5)
00002D44  0480 0000 5033          sub.l     #48,D0
00002D48  0030      
00002D4A  2E00      5034          move.l    D0,D7
                    5035   ; switch (intBuffer) {
00002D4C  2007      5036          move.l    D7,D0
00002D4E  0C80 0000 5037          cmp.l     #4,D0
00002D52  0004      
00002D54  642C      5038          bhs.s     MemoryTest_20
00002D56  E380      5039          asl.l     #1,D0
00002D58  303B 0806 5040          move.w    MemoryTest_21(PC,D0.L),D0
00002D5C  4EFB 0002 5041          jmp       MemoryTest_21(PC,D0.W)
                    5042   MemoryTest_21:
00002D60  0008      5043          dc.w      MemoryTest_22-MemoryTest_21
00002D62  000C      5044          dc.w      MemoryTest_23-MemoryTest_21
00002D64  0014      5045          dc.w      MemoryTest_24-MemoryTest_21
00002D66  001C      5046          dc.w      MemoryTest_25-MemoryTest_21
                    5047   MemoryTest_22:
                    5048   ; case(0):
                    5049   ; dataPattern = 0x00000000; break;
00002D68  4283      5050          clr.l     D3
00002D6A  6016      5051          bra.s     MemoryTest_20
                    5052   MemoryTest_23:
                    5053   ; case(1):
                    5054   ; dataPattern = 0xAABBCCDD; break;
00002D6C  263C AABB 5055          move.l    #-1430532899,D3
00002D70  CCDD      
00002D72  600E      5056          bra.s     MemoryTest_20
                    5057   MemoryTest_24:
                    5058   ; case(2):
                    5059   ; dataPattern = 0x11223344; break;
00002D74  263C 1122 5060          move.l    #287454020,D3
00002D78  3344      
00002D7A  6006      5061          bra.s     MemoryTest_20
                    5062   MemoryTest_25:
                    5063   ; case(3):
                    5064   ; dataPattern = 0x76543210; break;
00002D7C  263C 7654 5065          move.l    #1985229328,D3
00002D80  3210      
                    5066   MemoryTest_20:
                    5067   ; }
                    5068   ; byteLength = 4;
00002D82  7804      5069          moveq     #4,D4
                    5070   MemoryTest_11:
                    5071   ; }
                    5072   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    5073   ; while (startAddressPtr == NULL || 
                    5074   MemoryTest_26:
00002D84  4A82      5075          tst.l     D2
00002D86  6732      5076          beq.s     MemoryTest_29
00002D88  0C84 0000 5077          cmp.l     #1,D4
00002D8C  0001      
00002D8E  6316      5078          bls.s     MemoryTest_30
00002D90  2F02      5079          move.l    D2,-(A7)
00002D92  4878 0002 5080          pea       2
00002D96  4EB9 0000 5081          jsr       ULDIV
00002D9A  322C      
00002D9C  202F 0004 5082          move.l    4(A7),D0
00002DA0  504F      5083          addq.w    #8,A7
00002DA2  4A80      5084          tst.l     D0
00002DA4  6614      5085          bne.s     MemoryTest_29
                    5086   MemoryTest_30:
00002DA6  0C82 0802 5087          cmp.l     #134348800,D2
00002DAA  0000      
00002DAC  650C      5088          blo.s     MemoryTest_29
00002DAE  203C 0B00 5089          move.l    #184549376,D0
00002DB2  0000      
00002DB4  9084      5090          sub.l     D4,D0
00002DB6  B480      5091          cmp.l     D0,D2
00002DB8  6316      5092          bls.s     MemoryTest_28
                    5093   MemoryTest_29:
                    5094   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    5095   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    5096   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    5097   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
00002DBA  4879 0000 5098          pea       @m68kde~1_161.L
00002DBE  59FC      
00002DC0  4E92      5099          jsr       (A2)
00002DC2  584F      5100          addq.w    #4,A7
                    5101   ; startAddressPtr =  Get8HexDigits(0);
00002DC4  42A7      5102          clr.l     -(A7)
00002DC6  4EB8 0CA4 5103          jsr       _Get8HexDigits
00002DCA  584F      5104          addq.w    #4,A7
00002DCC  2400      5105          move.l    D0,D2
00002DCE  60B4      5106          bra       MemoryTest_26
                    5107   MemoryTest_28:
                    5108   ; }
                    5109   ; while (endAddressPtr == NULL || 
                    5110   MemoryTest_31:
00002DD0  4A86      5111          tst.l     D6
00002DD2  670A      5112          beq.s     MemoryTest_34
00002DD4  202E FFF0 5113          move.l    -16(A6),D0
00002DD8  D084      5114          add.l     D4,D0
00002DDA  BC80      5115          cmp.l     D0,D6
00002DDC  6416      5116          bhs.s     MemoryTest_33
                    5117   MemoryTest_34:
                    5118   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    5119   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00002DDE  4879 0000 5120          pea       @m68kde~1_162.L
00002DE2  5A34      
00002DE4  4E92      5121          jsr       (A2)
00002DE6  584F      5122          addq.w    #4,A7
                    5123   ; endAddressPtr =  Get8HexDigits(0);
00002DE8  42A7      5124          clr.l     -(A7)
00002DEA  4EB8 0CA4 5125          jsr       _Get8HexDigits
00002DEE  584F      5126          addq.w    #4,A7
00002DF0  2C00      5127          move.l    D0,D6
00002DF2  60DC      5128          bra       MemoryTest_31
                    5129   MemoryTest_33:
                    5130   ; }
                    5131   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00002DF4  2F02      5132          move.l    D2,-(A7)
00002DF6  4879 0000 5133          pea       @m68kde~1_163.L
00002DFA  5A6A      
00002DFC  4E92      5134          jsr       (A2)
00002DFE  504F      5135          addq.w    #8,A7
                    5136   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
00002E00  2F06      5137          move.l    D6,-(A7)
00002E02  4879 0000 5138          pea       @m68kde~1_164.L
00002E06  5A82      
00002E08  4E92      5139          jsr       (A2)
00002E0A  504F      5140          addq.w    #8,A7
                    5141   ; addrCount = 0;
00002E0C  42AE FFFC 5142          clr.l     -4(A6)
                    5143   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    5144   MemoryTest_35:
00002E10  B486      5145          cmp.l     D6,D2
00002E12  6400 0132 5146          bhs       MemoryTest_37
00002E16  2006      5147          move.l    D6,D0
00002E18  9082      5148          sub.l     D2,D0
00002E1A  5280      5149          addq.l    #1,D0
00002E1C  B084      5150          cmp.l     D4,D0
00002E1E  6500 0126 5151          blo       MemoryTest_37
                    5152   ; // If address goes beyond 0x0B00_0000 then break
                    5153   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
00002E22  203C 0B00 5154          move.l    #184549376,D0
00002E26  0000      
00002E28  9084      5155          sub.l     D4,D0
00002E2A  B480      5156          cmp.l     D0,D2
00002E2C  6310      5157          bls.s     MemoryTest_38
                    5158   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
00002E2E  2F02      5159          move.l    D2,-(A7)
00002E30  4879 0000 5160          pea       @m68kde~1_165.L
00002E34  5A98      
00002E36  4E92      5161          jsr       (A2)
00002E38  504F      5162          addq.w    #8,A7
                    5163   ; break;
00002E3A  6000 010A 5164          bra       MemoryTest_37
                    5165   MemoryTest_38:
                    5166   ; }
                    5167   ; longAddressPtr = startAddressPtr;
00002E3E  2642      5168          move.l    D2,A3
                    5169   ; wordAddressPtr = startAddressPtr;
00002E40  2842      5170          move.l    D2,A4
                    5171   ; if (dataSize == 0) {
00002E42  4A85      5172          tst.l     D5
00002E44  6600 0034 5173          bne       MemoryTest_40
                    5174   ; *startAddressPtr = dataPattern;
00002E48  2042      5175          move.l    D2,A0
00002E4A  1083      5176          move.b    D3,(A0)
                    5177   ; if ((*startAddressPtr) != dataPattern) {
00002E4C  2042      5178          move.l    D2,A0
00002E4E  1010      5179          move.b    (A0),D0
00002E50  C0BC 0000 5180          and.l     #255,D0
00002E54  00FF      
00002E56  B083      5181          cmp.l     D3,D0
00002E58  671C      5182          beq.s     MemoryTest_42
                    5183   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002E5A  2F03      5184          move.l    D3,-(A7)
00002E5C  2042      5185          move.l    D2,A0
00002E5E  1210      5186          move.b    (A0),D1
00002E60  C2BC 0000 5187          and.l     #255,D1
00002E64  00FF      
00002E66  2F01      5188          move.l    D1,-(A7)
00002E68  2F02      5189          move.l    D2,-(A7)
00002E6A  4879 0000 5190          pea       @m68kde~1_166.L
00002E6E  5ACA      
00002E70  4E92      5191          jsr       (A2)
00002E72  DEFC 0010 5192          add.w     #16,A7
                    5193   MemoryTest_42:
00002E76  6000 0058 5194          bra       MemoryTest_48
                    5195   MemoryTest_40:
                    5196   ; }
                    5197   ; } else if (dataSize == 1) {
00002E7A  0C85 0000 5198          cmp.l     #1,D5
00002E7E  0001      
00002E80  662C      5199          bne.s     MemoryTest_44
                    5200   ; *wordAddressPtr = dataPattern;
00002E82  3883      5201          move.w    D3,(A4)
                    5202   ; if ((*wordAddressPtr) != dataPattern) {
00002E84  3014      5203          move.w    (A4),D0
00002E86  C0BC 0000 5204          and.l     #65535,D0
00002E8A  FFFF      
00002E8C  B083      5205          cmp.l     D3,D0
00002E8E  671C      5206          beq.s     MemoryTest_46
                    5207   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002E90  2F03      5208          move.l    D3,-(A7)
00002E92  2042      5209          move.l    D2,A0
00002E94  1210      5210          move.b    (A0),D1
00002E96  C2BC 0000 5211          and.l     #255,D1
00002E9A  00FF      
00002E9C  2F01      5212          move.l    D1,-(A7)
00002E9E  2F02      5213          move.l    D2,-(A7)
00002EA0  4879 0000 5214          pea       @m68kde~1_166.L
00002EA4  5ACA      
00002EA6  4E92      5215          jsr       (A2)
00002EA8  DEFC 0010 5216          add.w     #16,A7
                    5217   MemoryTest_46:
00002EAC  6022      5218          bra.s     MemoryTest_48
                    5219   MemoryTest_44:
                    5220   ; }
                    5221   ; } else {
                    5222   ; *longAddressPtr = dataPattern;
00002EAE  2683      5223          move.l    D3,(A3)
                    5224   ; if ((*longAddressPtr) != dataPattern) {
00002EB0  B693      5225          cmp.l     (A3),D3
00002EB2  671C      5226          beq.s     MemoryTest_48
                    5227   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002EB4  2F03      5228          move.l    D3,-(A7)
00002EB6  2042      5229          move.l    D2,A0
00002EB8  1210      5230          move.b    (A0),D1
00002EBA  C2BC 0000 5231          and.l     #255,D1
00002EBE  00FF      
00002EC0  2F01      5232          move.l    D1,-(A7)
00002EC2  2F02      5233          move.l    D2,-(A7)
00002EC4  4879 0000 5234          pea       @m68kde~1_166.L
00002EC8  5ACA      
00002ECA  4E92      5235          jsr       (A2)
00002ECC  DEFC 0010 5236          add.w     #16,A7
                    5237   MemoryTest_48:
                    5238   ; }
                    5239   ; }
                    5240   ; // if ((*startAddressPtr) != dataPattern) {
                    5241   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    5242   ; // }
                    5243   ; addrCount++;
00002ED0  52AE FFFC 5244          addq.l    #1,-4(A6)
                    5245   ; if (addrCount % 128 == 0) {
00002ED4  2F2E FFFC 5246          move.l    -4(A6),-(A7)
00002ED8  4878 0080 5247          pea       128
00002EDC  4EB9 0000 5248          jsr       ULDIV
00002EE0  322C      
00002EE2  202F 0004 5249          move.l    4(A7),D0
00002EE6  504F      5250          addq.w    #8,A7
00002EE8  4A80      5251          tst.l     D0
00002EEA  6600 0054 5252          bne       MemoryTest_55
                    5253   ; if (dataSize == 0) {
00002EEE  4A85      5254          tst.l     D5
00002EF0  661C      5255          bne.s     MemoryTest_52
                    5256   ; printf("Address: 0x%x Value: 0x%02X\n",
00002EF2  2042      5257          move.l    D2,A0
00002EF4  1210      5258          move.b    (A0),D1
00002EF6  C2BC 0000 5259          and.l     #255,D1
00002EFA  00FF      
00002EFC  2F01      5260          move.l    D1,-(A7)
00002EFE  2F02      5261          move.l    D2,-(A7)
00002F00  4879 0000 5262          pea       @m68kde~1_167.L
00002F04  5B10      
00002F06  4E92      5263          jsr       (A2)
00002F08  DEFC 000C 5264          add.w     #12,A7
00002F0C  6032      5265          bra.s     MemoryTest_55
                    5266   MemoryTest_52:
                    5267   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    5268   ; }
                    5269   ; else if (dataSize == 1) {
00002F0E  0C85 0000 5270          cmp.l     #1,D5
00002F12  0001      
00002F14  661A      5271          bne.s     MemoryTest_54
                    5272   ; printf("Address: 0x%x Value: 0x%04X\n",
00002F16  3214      5273          move.w    (A4),D1
00002F18  C2BC 0000 5274          and.l     #65535,D1
00002F1C  FFFF      
00002F1E  2F01      5275          move.l    D1,-(A7)
00002F20  2F0C      5276          move.l    A4,-(A7)
00002F22  4879 0000 5277          pea       @m68kde~1_168.L
00002F26  5B2E      
00002F28  4E92      5278          jsr       (A2)
00002F2A  DEFC 000C 5279          add.w     #12,A7
00002F2E  6010      5280          bra.s     MemoryTest_55
                    5281   MemoryTest_54:
                    5282   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    5283   ; }
                    5284   ; else {
                    5285   ; printf("Address: 0x%x Value: 0x%08X\n",
00002F30  2F13      5286          move.l    (A3),-(A7)
00002F32  2F0B      5287          move.l    A3,-(A7)
00002F34  4879 0000 5288          pea       @m68kde~1_169.L
00002F38  5B4C      
00002F3A  4E92      5289          jsr       (A2)
00002F3C  DEFC 000C 5290          add.w     #12,A7
                    5291   MemoryTest_55:
                    5292   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    5293   ; }
                    5294   ; }
                    5295   ; startAddressPtr += byteLength;
00002F40  D484      5296          add.l     D4,D2
00002F42  6000 FECC 5297          bra       MemoryTest_35
                    5298   MemoryTest_37:
00002F46  4CDF 3CFC 5299          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002F4A  4E5E      5300          unlk      A6
00002F4C  4E75      5301          rts
                    5302   ; }
                    5303   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    5304   ; }
                    5305   ; void main(void)
                    5306   ; {
                    5307   _main:
00002F4E  4E56 FFF4 5308          link      A6,#-12
00002F52  48E7 3030 5309          movem.l   D2/D3/A2/A3,-(A7)
00002F56  45F8 0A30 5310          lea       _InstallExceptionHandler.L,A2
00002F5A  47F9 0000 5311          lea       _printf.L,A3
00002F5E  3CC6      
                    5312   ; char c ;
                    5313   ; int i, j ;
                    5314   ; char *BugMessage = "DE1-68k Bug V1.77";
00002F60  41F9 0000 5315          lea       @m68kde~1_170.L,A0
00002F64  5B6A      
00002F66  2608      5316          move.l    A0,D3
                    5317   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002F68  41F9 0000 5318          lea       @m68kde~1_171.L,A0
00002F6C  5B7C      
00002F6E  2D48 FFFC 5319          move.l    A0,-4(A6)
                    5320   ; KillAllBreakPoints() ;
00002F72  4EB8 2294 5321          jsr       _KillAllBreakPoints
                    5322   ; i = x = y = z = PortA_Count = 0;
00002F76  42B9 0B00 5323          clr.l     _PortA_Count.L
00002F7A  00D4      
00002F7C  42B9 0B00 5324          clr.l     _z.L
00002F80  00D0      
00002F82  42B9 0B00 5325          clr.l     _y.L
00002F86  00CC      
00002F88  42B9 0B00 5326          clr.l     _x.L
00002F8C  00C8      
00002F8E  4282      5327          clr.l     D2
                    5328   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002F90  42B9 0B00 5329          clr.l     _GoFlag.L
00002F94  00DC      
00002F96  42B9 0B00 5330          clr.l     _Trace.L
00002F9A  00D8      
                    5331   ; Echo = 1 ;
00002F9C  23FC 0000 5332          move.l    #1,_Echo.L
00002FA0  0001 0B00 
00002FA4  00E0      
                    5333   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002FA6  42B9 0B00 5334          clr.l     _d7.L
00002FAA  0100      
00002FAC  42B9 0B00 5335          clr.l     _d6.L
00002FB0  00FC      
00002FB2  42B9 0B00 5336          clr.l     _d5.L
00002FB6  00F8      
00002FB8  42B9 0B00 5337          clr.l     _d4.L
00002FBC  00F4      
00002FBE  42B9 0B00 5338          clr.l     _d3.L
00002FC2  00F0      
00002FC4  42B9 0B00 5339          clr.l     _d2.L
00002FC8  00EC      
00002FCA  42B9 0B00 5340          clr.l     _d1.L
00002FCE  00E8      
00002FD0  42B9 0B00 5341          clr.l     _d0.L
00002FD4  00E4      
                    5342   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002FD6  42B9 0B00 5343          clr.l     _a6.L
00002FDA  011C      
00002FDC  42B9 0B00 5344          clr.l     _a5.L
00002FE0  0118      
00002FE2  42B9 0B00 5345          clr.l     _a4.L
00002FE6  0114      
00002FE8  42B9 0B00 5346          clr.l     _a3.L
00002FEC  0110      
00002FEE  42B9 0B00 5347          clr.l     _a2.L
00002FF2  010C      
00002FF4  42B9 0B00 5348          clr.l     _a1.L
00002FF8  0108      
00002FFA  42B9 0B00 5349          clr.l     _a0.L
00002FFE  0104      
                    5350   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00003000  23FC 0800 5351          move.l    #134217728,_PC.L
00003004  0000 0B00 
00003008  0120      
0000300A  23FC 0C00 5352          move.l    #201326592,_SSP.L
0000300E  0000 0B00 
00003012  0124      
00003014  23FC 0C00 5353          move.l    #201326592,_USP.L
00003018  0000 0B00 
0000301C  0128      
                    5354   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
0000301E  33FC 2000 5355          move.w    #8192,_SR.L
00003022  0B00 012C 
                    5356   ; // Initialise Breakpoint variables
                    5357   ; for(i = 0; i < 8; i++)  {
00003026  4282      5358          clr.l     D2
                    5359   main_1:
00003028  0C82 0000 5360          cmp.l     #8,D2
0000302C  0008      
0000302E  6C00 004C 5361          bge       main_3
                    5362   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00003032  2002      5363          move.l    D2,D0
00003034  E588      5364          lsl.l     #2,D0
00003036  41F9 0B00 5365          lea       _BreakPointAddress.L,A0
0000303A  012E      
0000303C  42B0 0800 5366          clr.l     0(A0,D0.L)
                    5367   ; WatchPointAddress[i] = 0 ;
00003040  2002      5368          move.l    D2,D0
00003042  E588      5369          lsl.l     #2,D0
00003044  41F9 0B00 5370          lea       _WatchPointAddress.L,A0
00003048  0182      
0000304A  42B0 0800 5371          clr.l     0(A0,D0.L)
                    5372   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
0000304E  2002      5373          move.l    D2,D0
00003050  E388      5374          lsl.l     #1,D0
00003052  41F9 0B00 5375          lea       _BreakPointInstruction.L,A0
00003056  014E      
00003058  4270 0800 5376          clr.w     0(A0,D0.L)
                    5377   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
0000305C  2002      5378          move.l    D2,D0
0000305E  E588      5379          lsl.l     #2,D0
00003060  41F9 0B00 5380          lea       _BreakPointSetOrCleared.L,A0
00003064  015E      
00003066  42B0 0800 5381          clr.l     0(A0,D0.L)
                    5382   ; WatchPointSetOrCleared[i] = 0;
0000306A  2002      5383          move.l    D2,D0
0000306C  E588      5384          lsl.l     #2,D0
0000306E  41F9 0B00 5385          lea       _WatchPointSetOrCleared.L,A0
00003072  01A2      
00003074  42B0 0800 5386          clr.l     0(A0,D0.L)
00003078  5282      5387          addq.l    #1,D2
0000307A  60AC      5388          bra       main_1
                    5389   main_3:
                    5390   ; }
                    5391   ; Init_RS232() ;     // initialise the RS232 port
0000307C  4EB8 0B12 5392          jsr       _Init_RS232
                    5393   ; Init_LCD() ;
00003080  4EB8 095E 5394          jsr       _Init_LCD
                    5395   ; SPI_Init();
00003084  4EB8 10FC 5396          jsr       _SPI_Init
                    5397   ; IIC_Init();
00003088  4EB8 1428 5398          jsr       _IIC_Init
                    5399   ; for( i = 32; i < 48; i++)
0000308C  7420      5400          moveq     #32,D2
                    5401   main_4:
0000308E  0C82 0000 5402          cmp.l     #48,D2
00003092  0030      
00003094  6C0E      5403          bge.s     main_6
                    5404   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00003096  2F02      5405          move.l    D2,-(A7)
00003098  4878 2B0C 5406          pea       _UnhandledTrap.L
0000309C  4E92      5407          jsr       (A2)
0000309E  504F      5408          addq.w    #8,A7
000030A0  5282      5409          addq.l    #1,D2
000030A2  60EA      5410          bra       main_4
                    5411   main_6:
                    5412   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
000030A4  4878 002F 5413          pea       47
000030A8  4878 27E6 5414          pea       _menu.L
000030AC  4E92      5415          jsr       (A2)
000030AE  504F      5416          addq.w    #8,A7
                    5417   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
000030B0  4878 0019 5418          pea       25
000030B4  4878 2AB2 5419          pea       _UnhandledIRQ1.L
000030B8  4E92      5420          jsr       (A2)
000030BA  504F      5421          addq.w    #8,A7
                    5422   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
000030BC  4878 001A 5423          pea       26
000030C0  4878 2ABE 5424          pea       _UnhandledIRQ2.L
000030C4  4E92      5425          jsr       (A2)
000030C6  504F      5426          addq.w    #8,A7
                    5427   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
000030C8  4878 001B 5428          pea       27
000030CC  4878 2ACA 5429          pea       _UnhandledIRQ3.L
000030D0  4E92      5430          jsr       (A2)
000030D2  504F      5431          addq.w    #8,A7
                    5432   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
000030D4  4878 001C 5433          pea       28
000030D8  4878 2AD6 5434          pea       _UnhandledIRQ4.L
000030DC  4E92      5435          jsr       (A2)
000030DE  504F      5436          addq.w    #8,A7
                    5437   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
000030E0  4878 001D 5438          pea       29
000030E4  4878 2AE2 5439          pea       _UnhandledIRQ5.L
000030E8  4E92      5440          jsr       (A2)
000030EA  504F      5441          addq.w    #8,A7
                    5442   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
000030EC  4878 001E 5443          pea       30
000030F0  4878 2AEE 5444          pea       _UnhandledIRQ6.L
000030F4  4E92      5445          jsr       (A2)
000030F6  504F      5446          addq.w    #8,A7
                    5447   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
000030F8  4878 001F 5448          pea       31
000030FC  4878 2B00 5449          pea       _UnhandledIRQ7.L
00003100  4E92      5450          jsr       (A2)
00003102  504F      5451          addq.w    #8,A7
                    5452   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00003104  4878 002E 5453          pea       46
00003108  4878 2522 5454          pea       _HandleBreakPoint.L
0000310C  4E92      5455          jsr       (A2)
0000310E  504F      5456          addq.w    #8,A7
                    5457   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00003110  4878 001D 5458          pea       29
00003114  4878 1C02 5459          pea       _DumpRegistersandPause.L
00003118  4E92      5460          jsr       (A2)
0000311A  504F      5461          addq.w    #8,A7
                    5462   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
0000311C  4878 0002 5463          pea       2
00003120  4878 2B1A 5464          pea       _BusError.L
00003124  4E92      5465          jsr       (A2)
00003126  504F      5466          addq.w    #8,A7
                    5467   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00003128  4878 0003 5468          pea       3
0000312C  4878 2B28 5469          pea       _AddressError.L
00003130  4E92      5470          jsr       (A2)
00003132  504F      5471          addq.w    #8,A7
                    5472   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00003134  4878 0004 5473          pea       4
00003138  4878 2B36 5474          pea       _IllegalInstruction.L
0000313C  4E92      5475          jsr       (A2)
0000313E  504F      5476          addq.w    #8,A7
                    5477   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00003140  4878 0005 5478          pea       5
00003144  4878 2B44 5479          pea       _Dividebyzero.L
00003148  4E92      5480          jsr       (A2)
0000314A  504F      5481          addq.w    #8,A7
                    5482   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
0000314C  4878 0006 5483          pea       6
00003150  4878 2B52 5484          pea       _Check.L
00003154  4E92      5485          jsr       (A2)
00003156  504F      5486          addq.w    #8,A7
                    5487   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00003158  4878 0007 5488          pea       7
0000315C  4878 2B60 5489          pea       _Trapv.L
00003160  4E92      5490          jsr       (A2)
00003162  504F      5491          addq.w    #8,A7
                    5492   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00003164  4878 0008 5493          pea       8
00003168  4878 2B6E 5494          pea       _PrivError.L
0000316C  4E92      5495          jsr       (A2)
0000316E  504F      5496          addq.w    #8,A7
                    5497   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00003170  4878 000F 5498          pea       15
00003174  4878 2B7C 5499          pea       _UnitIRQ.L
00003178  4E92      5500          jsr       (A2)
0000317A  504F      5501          addq.w    #8,A7
                    5502   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
0000317C  4878 0018 5503          pea       24
00003180  4878 2B52 5504          pea       _Check.L
00003184  4E92      5505          jsr       (A2)
00003186  504F      5506          addq.w    #8,A7
                    5507   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00003188  4EB8 0BA6 5508          jsr       _FlushKeyboard
                    5509   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
0000318C  4239 0040 5510          clr.b     4194314
00003190  000A      
                    5511   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5512   ; if (((char)(PortB & 0x02)) == (char)(0x02))    {
00003192  1039 0040 5513          move.b    4194306,D0
00003196  0002      
00003198  C03C 0002 5514          and.b     #2,D0
0000319C  0C00 0002 5515          cmp.b     #2,D0
000031A0  6628      5516          bne.s     main_7
                    5517   ; LoadFromFlashChip();
000031A2  4EB8 138A 5518          jsr       _LoadFromFlashChip
                    5519   ; printf("\r\nRunning.....") ;
000031A6  4879 0000 5520          pea       @m68kde~1_172.L
000031AA  5B9A      
000031AC  4E93      5521          jsr       (A3)
000031AE  584F      5522          addq.w    #4,A7
                    5523   ; Oline1("Running.....") ;
000031B0  4879 0000 5524          pea       @m68kde~1_173.L
000031B4  5BAA      
000031B6  4EB8 0A02 5525          jsr       _Oline1
000031BA  584F      5526          addq.w    #4,A7
                    5527   ; GoFlag = 1;
000031BC  23FC 0000 5528          move.l    #1,_GoFlag.L
000031C0  0001 0B00 
000031C4  00DC      
                    5529   ; go() ;
000031C6  4EB8 08B8 5530          jsr       _go
                    5531   main_7:
                    5532   ; }
                    5533   ; // otherwise start the debug monitor
                    5534   ; Oline0(BugMessage) ;
000031CA  2F03      5535          move.l    D3,-(A7)
000031CC  4EB8 09D4 5536          jsr       _Oline0
000031D0  584F      5537          addq.w    #4,A7
                    5538   ; Oline1("By: PJ Davies") ;
000031D2  4879 0000 5539          pea       @m68kde~1_174.L
000031D6  5BB8      
000031D8  4EB8 0A02 5540          jsr       _Oline1
000031DC  584F      5541          addq.w    #4,A7
                    5542   ; printf("\r\n%s", BugMessage) ;
000031DE  2F03      5543          move.l    D3,-(A7)
000031E0  4879 0000 5544          pea       @m68kde~1_175.L
000031E4  5BC6      
000031E6  4E93      5545          jsr       (A3)
000031E8  504F      5546          addq.w    #8,A7
                    5547   ; printf("\r\n%s", CopyrightMessage) ;
000031EA  2F2E FFFC 5548          move.l    -4(A6),-(A7)
000031EE  4879 0000 5549          pea       @m68kde~1_175.L
000031F2  5BC6      
000031F4  4E93      5550          jsr       (A3)
000031F6  504F      5551          addq.w    #8,A7
                    5552   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
000031F8  4879 0000 5553          pea       @m68kde~1_176.L
000031FC  5BCC      
000031FE  4E93      5554          jsr       (A3)
00003200  584F      5555          addq.w    #4,A7
                    5556   ; printf("Initializing i2c test...\n");
00003202  4879 0000 5557          pea       @m68kde~1_177.L
00003206  5C14      
00003208  4E93      5558          jsr       (A3)
0000320A  584F      5559          addq.w    #4,A7
                    5560   ; I2CTest();
0000320C  4EB8 16C8 5561          jsr       _I2CTest
                    5562   ; menu();
00003210  4EB8 27E6 5563          jsr       _menu
00003214  4CDF 0C0C 5564          movem.l   (A7)+,D2/D3/A2/A3
00003218  4E5E      5565          unlk      A6
0000321A  4E75      5566          rts
                    5567   ; }
                    5568   _strcpy:
0000321C  206F 0004 5569          move.l    (4,A7),A0
00003220  226F 0008 5570          move.l    (8,A7),A1
00003224  2008      5571          move.l    A0,D0
                    5572   strcpy_1:
00003226  10D9      5573          move.b    (A1)+,(A0)+
00003228  66FC      5574          bne       strcpy_1
0000322A  4E75      5575          rts
                    5576   ULDIV:
0000322C  4E56 0000 5577          link    A6,#0
00003230  48E7 C000 5578          movem.l D0/D1,-(A7)
00003234  222E 0008 5579          move.l  8(A6),D1
00003238  202E 000C 5580          move.l  12(A6),D0
0000323C  6036      5581          bra.s   ldiv_3
                    5582   LDIV:
0000323E  4E56 0000 5583          link    A6,#0
00003242  48E7 C000 5584          movem.l D0/D1,-(A7)
00003246  222E 0008 5585          move.l  8(A6),D1
0000324A  202E 000C 5586          move.l  12(A6),D0
0000324E  4A80      5587          tst.l   D0
00003250  6A0E      5588          bpl.s   ldiv_1
00003252  4480      5589          neg.l   D0
00003254  4A81      5590          tst.l   D1
00003256  6A14      5591          bpl.s   ldiv_2
00003258  4481      5592          neg.l   D1
0000325A  612A      5593          bsr.s   dodiv
0000325C  4481      5594          neg.l   D1
0000325E  6016      5595          bra.s   ldiv_4
                    5596   ldiv_1:
00003260  4A81      5597          tst.l   D1
00003262  6A10      5598          bpl.s   ldiv_3
00003264  4481      5599          neg.l   D1
00003266  611E      5600          bsr.s   dodiv
00003268  4480      5601          neg.l   D0
0000326A  600A      5602          bra.s   ldiv_4
                    5603   ldiv_2:
0000326C  6118      5604          bsr.s   dodiv
0000326E  4480      5605          neg.l   D0
00003270  4481      5606          neg.l   D1
00003272  6002      5607          bra.s   ldiv_4
                    5608   ldiv_3:
00003274  6110      5609          bsr.s   dodiv
                    5610   ldiv_4:
00003276  2D40 0008 5611          move.l  D0,8(A6)
0000327A  2D41 000C 5612          move.l  D1,12(A6)
0000327E  4CDF 0003 5613          movem.l (A7)+,D0/D1
00003282  4E5E      5614          unlk    A6
00003284  4E75      5615          rts
                    5616   dodiv:
00003286  0C81 0000 5617          cmpi.l  #$FFFF,D1
0000328A  FFFF      
0000328C  6236      5618          bhi.s   dodiv_2
0000328E  0C80 0000 5619          cmpi.l  #$FFFF,D0
00003292  FFFF      
00003294  6210      5620          bhi.s   dodiv_1
00003296  80C1      5621          divu    D1,D0
00003298  2200      5622          move.l  D0,D1
0000329A  4241      5623          clr.w   D1
0000329C  4841      5624          swap    D1
0000329E  0280 0000 5625          andi.l  #$FFFF,D0
000032A2  FFFF      
000032A4  4E75      5626          rts
                    5627   dodiv_1:
000032A6  48A7 A000 5628          movem.w D0/D2,-(A7)
000032AA  4240      5629          clr.w   D0
000032AC  4840      5630          swap    D0
000032AE  80C1      5631          divu    D1,D0
000032B0  3400      5632          move.w  D0,D2
000032B2  301F      5633          move.w  (A7)+,D0
000032B4  80C1      5634          divu    D1,D0
000032B6  4840      5635          swap    D0
000032B8  4281      5636          clr.l   D1
000032BA  3200      5637          move.w  D0,D1
000032BC  3002      5638          move.w  D2,D0
000032BE  4840      5639          swap    D0
000032C0  341F      5640          move.w  (A7)+,D2
000032C2  4E75      5641          rts
                    5642   dodiv_2:
000032C4  48E7 3800 5643          movem.l D2/D3/D4,-(A7)
000032C8  2401      5644          move.l  D1,D2
000032CA  4242      5645          clr.w   D2
000032CC  4842      5646          swap    D2
000032CE  5282      5647          addq.l  #1,D2
000032D0  2600      5648          move.l  D0,D3
000032D2  2801      5649          move.l  D1,D4
000032D4  2202      5650          move.l  D2,D1
000032D6  61CE      5651          bsr.s   dodiv_1
000032D8  2204      5652          move.l  D4,D1
000032DA  82C2      5653          divu    D2,D1
000032DC  80C1      5654          divu    D1,D0
000032DE  0280 0000 5655          andi.l  #$FFFF,D0
000032E2  FFFF      
                    5656   dodiv_3:
000032E4  2204      5657          move.l  D4,D1
000032E6  2404      5658          move.l  D4,D2
000032E8  4842      5659          swap    D2
000032EA  C2C0      5660          mulu    D0,D1
000032EC  C4C0      5661          mulu    D0,D2
000032EE  4842      5662          swap    D2
000032F0  D282      5663          add.l   D2,D1
000032F2  9283      5664          sub.l   D3,D1
000032F4  620A      5665          bhi.s   dodiv_4
000032F6  4481      5666          neg.l   D1
000032F8  B881      5667          cmp.l   D1,D4
000032FA  6208      5668          bhi.s   dodiv_5
000032FC  5280      5669          addq.l  #1,D0
000032FE  60E4      5670          bra.s   dodiv_3
                    5671   dodiv_4:
00003300  5380      5672          subq.l  #1,D0
00003302  60E0      5673          bra.s   dodiv_3
                    5674   dodiv_5:
00003304  4CDF 001C 5675          movem.l (A7)+,D2/D3/D4
00003308  4E75      5676          rts
                    5677   _putch:
0000330A  4E56 0000 5678          link      A6,#0
0000330E  48E7 2000 5679          movem.l   D2,-(A7)
00003312  242E 0008 5680          move.l    8(A6),D2
00003316  0C82 0000 5681          cmp.l     #10,D2
0000331A  000A      
0000331C  660A      5682          bne.s     putch_1
0000331E  4878 000D 5683          pea       13
00003322  6100 D818 5684          bsr       __putch
00003326  584F      5685          addq.w    #4,A7
                    5686   putch_1:
00003328  2F02      5687          move.l    D2,-(A7)
0000332A  6100 D810 5688          bsr       __putch
0000332E  584F      5689          addq.w    #4,A7
00003330  2002      5690          move.l    D2,D0
00003332  4CDF 0004 5691          movem.l   (A7)+,D2
00003336  4E5E      5692          unlk      A6
00003338  4E75      5693          rts
                    5694   _getch:
0000333A  48E7 2000 5695          movem.l   D2,-(A7)
0000333E  2439 0B00 5696          move.l    __ungetbuf,D2
00003342  00C0      
00003344  2039 0B00 5697          move.l    __ungetbuf,D0
00003348  00C0      
0000334A  0C80 FFFF 5698          cmp.l     #-1,D0
0000334E  FFFF      
00003350  670C      5699          beq.s     getch_1
00003352  23FC FFFF 5700          move.l    #-1,__ungetbuf
00003356  FFFF 0B00 
0000335A  00C0      
0000335C  6010      5701          bra.s     getch_3
                    5702   getch_1:
0000335E  6100 D808 5703          bsr       __getch
00003362  2400      5704          move.l    D0,D2
00003364  0C80 0000 5705          cmp.l     #13,D0
00003368  000D      
0000336A  6602      5706          bne.s     getch_3
0000336C  740A      5707          moveq     #10,D2
                    5708   getch_3:
0000336E  2002      5709          move.l    D2,D0
00003370  4CDF 0004 5710          movem.l   (A7)+,D2
00003374  4E75      5711          rts
                    5712   _tolower:
00003376  4E56 0000 5713          link      A6,#0
0000337A  48E7 2000 5714          movem.l   D2,-(A7)
0000337E  242E 0008 5715          move.l    8(A6),D2
00003382  0C82 0000 5716          cmp.l     #65,D2
00003386  0041      
00003388  6D0E      5717          blt.s     tolower_1
0000338A  0C82 0000 5718          cmp.l     #90,D2
0000338E  005A      
00003390  6E06      5719          bgt.s     tolower_1
00003392  84BC 0000 5720          or.l      #32,D2
00003396  0020      
                    5721   tolower_1:
00003398  2002      5722          move.l    D2,D0
0000339A  4CDF 0004 5723          movem.l   (A7)+,D2
0000339E  4E5E      5724          unlk      A6
000033A0  4E75      5725          rts
                    5726   _sprintf:
000033A2  4E56 FFFC 5727          link      A6,#-4
000033A6  48E7 2000 5728          movem.l   D2,-(A7)
000033AA  41EE 000C 5729          lea       12(A6),A0
000033AE  5848      5730          addq.w    #4,A0
000033B0  2408      5731          move.l    A0,D2
000033B2  2F02      5732          move.l    D2,-(A7)
000033B4  2F2E 000C 5733          move.l    12(A6),-(A7)
000033B8  2F2E 0008 5734          move.l    8(A6),-(A7)
000033BC  6100 09EC 5735          bsr       _vsprintf
000033C0  DEFC 000C 5736          add.w     #12,A7
000033C4  2D40 FFFC 5737          move.l    D0,-4(A6)
000033C8  4282      5738          clr.l     D2
000033CA  202E FFFC 5739          move.l    -4(A6),D0
000033CE  4CDF 0004 5740          movem.l   (A7)+,D2
000033D2  4E5E      5741          unlk      A6
000033D4  4E75      5742          rts
                    5743   _memset:
000033D6  206F 0004 5744          move.l    (4,A7),A0
000033DA  202F 0008 5745          move.l    (8,A7),D0
000033DE  222F 000C 5746          move.l    (12,A7),D1
000033E2  2248      5747          move.l    A0,A1	
                    5748   memset_1:
000033E4  12C0      5749          move.b    D0,(A1)+
000033E6  5341      5750          subq      #1,D1
000033E8  66FA      5751          bne       memset_1
000033EA  2008      5752          move.l    A0,D0
000033EC  4E75      5753          rts
                    5754   _strcat:
000033EE  206F 0004 5755          move.l    (4,A7),A0	
000033F2  226F 0008 5756          move.l    (8,A7),A1	
000033F6  2008      5757          move.l    A0,D0		
                    5758   strcat_0:
000033F8  4A18      5759          tst.b     (A0)+
000033FA  66FC      5760          bne       strcat_0
000033FC  5348      5761          subq      #1,A0
                    5762   strcat_1:
000033FE  10D9      5763          move.b    (A1)+,(A0)+
00003400  66FC      5764          bne       strcat_1
00003402  4E75      5765          rts
                    5766   _toupper:
00003404  4E56 0000 5767          link      A6,#0
00003408  48E7 2000 5768          movem.l   D2,-(A7)
0000340C  242E 0008 5769          move.l    8(A6),D2
00003410  0C82 0000 5770          cmp.l     #97,D2
00003414  0061      
00003416  6D0E      5771          blt.s     toupper_1
00003418  0C82 0000 5772          cmp.l     #122,D2
0000341C  007A      
0000341E  6E06      5773          bgt.s     toupper_1
00003420  C4BC 0000 5774          and.l     #95,D2
00003424  005F      
                    5775   toupper_1:
00003426  2002      5776          move.l    D2,D0
00003428  4CDF 0004 5777          movem.l   (A7)+,D2
0000342C  4E5E      5778          unlk      A6
0000342E  4E75      5779          rts
                    5780   @vsscanf_scanread:
00003430  4E56 FFFC 5781          link      A6,#-4
00003434  48E7 0020 5782          movem.l   A2,-(A7)
00003438  45F9 0000 5783          lea       @vsscanf_bufx,A2
0000343C  5C42      
0000343E  4AAE 0008 5784          tst.l     8(A6)
00003442  6722      5785          beq.s     @vsscanf_scanread_1
00003444  206E 0008 5786          move.l    8(A6),A0
00003448  58AE 0008 5787          addq.l    #4,8(A6)
0000344C  2050      5788          move.l    (A0),A0
0000344E  1010      5789          move.b    (A0),D0
00003450  4880      5790          ext.w     D0
00003452  48C0      5791          ext.l     D0
00003454  2D40 FFFC 5792          move.l    D0,-4(A6)
00003458  6706      5793          beq.s     @vsscanf_scanread_3
0000345A  202E FFFC 5794          move.l    -4(A6),D0
0000345E  6002      5795          bra.s     @vsscanf_scanread_4
                    5796   @vsscanf_scanread_3:
00003460  70FF      5797          moveq     #-1,D0
                    5798   @vsscanf_scanread_4:
00003462  6000 0032 5799          bra       @vsscanf_scanread_5
                    5800   @vsscanf_scanread_1:
00003466  2052      5801          move.l    (A2),A0
00003468  1010      5802          move.b    (A0),D0
0000346A  6620      5803          bne.s     @vsscanf_scanread_6
0000346C  4879 0B00 5804          pea       @vsscanf_buf
00003470  0546      
00003472  6100 1038 5805          bsr       _gets
00003476  584F      5806          addq.w    #4,A7
00003478  2480      5807          move.l    D0,(A2)
0000347A  4879 0000 5808          pea       @vsscanf_1
0000347E  5C46      
00003480  4879 0B00 5809          pea       @vsscanf_buf
00003484  0546      
00003486  6100 FF66 5810          bsr       _strcat
0000348A  504F      5811          addq.w    #8,A7
                    5812   @vsscanf_scanread_6:
0000348C  2052      5813          move.l    (A2),A0
0000348E  5292      5814          addq.l    #1,(A2)
00003490  1010      5815          move.b    (A0),D0
00003492  4880      5816          ext.w     D0
00003494  48C0      5817          ext.l     D0
                    5818   @vsscanf_scanread_5:
00003496  4CDF 0400 5819          movem.l   (A7)+,A2
0000349A  4E5E      5820          unlk      A6
0000349C  4E75      5821          rts
                    5822   @vsscanf_scanputback:
0000349E  4E56 0000 5823          link      A6,#0
000034A2  48E7 3000 5824          movem.l   D2/D3,-(A7)
000034A6  242E 000C 5825          move.l    12(A6),D2
000034AA  262E 0008 5826          move.l    8(A6),D3
000034AE  6718      5827          beq.s     @vsscanf_scanputback_1
000034B0  0C82 FFFF 5828          cmp.l     #-1,D2
000034B4  FFFF      
000034B6  670A      5829          beq.s     @vsscanf_scanputback_3
000034B8  5983      5830          subq.l    #4,D3
000034BA  2043      5831          move.l    D3,A0
000034BC  2050      5832          move.l    (A0),A0
000034BE  1082      5833          move.b    D2,(A0)
000034C0  6004      5834          bra.s     @vsscanf_scanputback_4
                    5835   @vsscanf_scanputback_3:
000034C2  2043      5836          move.l    D3,A0
000034C4  5390      5837          subq.l    #1,(A0)
                    5838   @vsscanf_scanputback_4:
000034C6  602E      5839          bra.s     @vsscanf_scanputback_6
                    5840   @vsscanf_scanputback_1:
000034C8  41F9 0B00 5841          lea       @vsscanf_buf,A0
000034CC  0546      
000034CE  2008      5842          move.l    A0,D0
000034D0  B0B9 0000 5843          cmp.l     @vsscanf_bufx,D0
000034D4  5C42      
000034D6  6610      5844          bne.s     @vsscanf_scanputback_5
000034D8  4239 0B00 5845          clr.b     @vsscanf_buf
000034DC  0546      
000034DE  2F02      5846          move.l    D2,-(A7)
000034E0  6100 103C 5847          bsr       _ungetch
000034E4  584F      5848          addq.w    #4,A7
000034E6  600E      5849          bra.s     @vsscanf_scanputback_6
                    5850   @vsscanf_scanputback_5:
000034E8  53B9 0000 5851          subq.l    #1,@vsscanf_bufx
000034EC  5C42      
000034EE  2079 0000 5852          move.l    @vsscanf_bufx,A0
000034F2  5C42      
000034F4  1082      5853          move.b    D2,(A0)
                    5854   @vsscanf_scanputback_6:
000034F6  2002      5855          move.l    D2,D0
000034F8  4CDF 000C 5856          movem.l   (A7)+,D2/D3
000034FC  4E5E      5857          unlk      A6
000034FE  4E75      5858          rts
                    5859   @vsscanf_scanspace:
00003500  4E56 0000 5860          link      A6,#0
00003504  48E7 2000 5861          movem.l   D2,-(A7)
                    5862   @vsscanf_scanspace_1:
00003508  2F2E 0008 5863          move.l    8(A6),-(A7)
0000350C  6100 FF22 5864          bsr       @vsscanf_scanread
00003510  584F      5865          addq.w    #4,A7
00003512  2400      5866          move.l    D0,D2
00003514  206E 000C 5867          move.l    12(A6),A0
00003518  5290      5868          addq.l    #1,(A0)
0000351A  2042      5869          move.l    D2,A0
0000351C  43F9 0000 5870          lea       __ctype,A1
00003520  5C48      
00003522  1030 9801 5871          move.b    1(A0,A1.L),D0
00003526  C03C 0010 5872          and.b     #16,D0
0000352A  66DC      5873          bne       @vsscanf_scanspace_1
0000352C  2002      5874          move.l    D2,D0
0000352E  4CDF 0004 5875          movem.l   (A7)+,D2
00003532  4E5E      5876          unlk      A6
00003534  4E75      5877          rts
                    5878   @vsscanf_scanselect:
00003536  4E56 0000 5879          link      A6,#0
0000353A  48E7 3F20 5880          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
0000353E  262E 000C 5881          move.l    12(A6),D3
00003542  2C2E 0018 5882          move.l    24(A6),D6
00003546  2E2E 0014 5883          move.l    20(A6),D7
0000354A  2043      5884          move.l    D3,A0
0000354C  1010      5885          move.b    (A0),D0
0000354E  4880      5886          ext.w     D0
00003550  48C0      5887          ext.l     D0
00003552  0C80 0000 5888          cmp.l     #94,D0
00003556  005E      
00003558  6608      5889          bne.s     @vsscanf_scanselect_1
0000355A  347C 0001 5890          move.w    #1,A2
0000355E  5283      5891          addq.l    #1,D3
00003560  6004      5892          bra.s     @vsscanf_scanselect_2
                    5893   @vsscanf_scanselect_1:
00003562  347C 0000 5894          move.w    #0,A2
                    5895   @vsscanf_scanselect_2:
00003566  202E 0010 5896          move.l    16(A6),D0
0000356A  53AE 0010 5897          subq.l    #1,16(A6)
0000356E  4A80      5898          tst.l     D0
00003570  6700 0108 5899          beq       @vsscanf_scanselect_5
00003574  2F2E 0008 5900          move.l    8(A6),-(A7)
00003578  6100 FEB6 5901          bsr       @vsscanf_scanread
0000357C  584F      5902          addq.w    #4,A7
0000357E  2800      5903          move.l    D0,D4
00003580  0C84 FFFF 5904          cmp.l     #-1,D4
00003584  FFFF      
00003586  6604      5905          bne.s     @vsscanf_scanselect_6
00003588  6000 00F0 5906          bra       @vsscanf_scanselect_5
                    5907   @vsscanf_scanselect_6:
0000358C  206E 001C 5908          move.l    28(A6),A0
00003590  5290      5909          addq.l    #1,(A0)
00003592  4285      5910          clr.l     D5
00003594  4282      5911          clr.l     D2
                    5912   @vsscanf_scanselect_8:
00003596  2043      5913          move.l    D3,A0
00003598  1030 2800 5914          move.b    0(A0,D2.L),D0
0000359C  4880      5915          ext.w     D0
0000359E  48C0      5916          ext.l     D0
000035A0  0C80 0000 5917          cmp.l     #93,D0
000035A4  005D      
000035A6  6700 008E 5918          beq       @vsscanf_scanselect_10
000035AA  4A82      5919          tst.l     D2
000035AC  6716      5920          beq.s     @vsscanf_scanselect_11
000035AE  2043      5921          move.l    D3,A0
000035B0  1030 2800 5922          move.b    0(A0,D2.L),D0
000035B4  4880      5923          ext.w     D0
000035B6  48C0      5924          ext.l     D0
000035B8  0C80 0000 5925          cmp.l     #93,D0
000035BC  005D      
000035BE  6604      5926          bne.s     @vsscanf_scanselect_11
000035C0  6000 0074 5927          bra       @vsscanf_scanselect_10
                    5928   @vsscanf_scanselect_11:
000035C4  4A82      5929          tst.l     D2
000035C6  6700 0058 5930          beq       @vsscanf_scanselect_15
000035CA  2043      5931          move.l    D3,A0
000035CC  1030 2800 5932          move.b    0(A0,D2.L),D0
000035D0  4880      5933          ext.w     D0
000035D2  48C0      5934          ext.l     D0
000035D4  0C80 0000 5935          cmp.l     #45,D0
000035D8  002D      
000035DA  6600 0044 5936          bne       @vsscanf_scanselect_15
000035DE  2043      5937          move.l    D3,A0
000035E0  2002      5938          move.l    D2,D0
000035E2  5380      5939          subq.l    #1,D0
000035E4  2243      5940          move.l    D3,A1
000035E6  2F08      5941          move.l    A0,-(A7)
000035E8  2042      5942          move.l    D2,A0
000035EA  1230 0800 5943          move.b    0(A0,D0.L),D1
000035EE  B230 9801 5944          cmp.b     1(A0,A1.L),D1
000035F2  6C00 002C 5945          bge       @vsscanf_scanselect_15
000035F6  205F      5946          move.l    (A7)+,A0
000035F8  2043      5947          move.l    D3,A0
000035FA  2002      5948          move.l    D2,D0
000035FC  5380      5949          subq.l    #1,D0
000035FE  1030 0800 5950          move.b    0(A0,D0.L),D0
00003602  4880      5951          ext.w     D0
00003604  48C0      5952          ext.l     D0
00003606  B880      5953          cmp.l     D0,D4
00003608  6D12      5954          blt.s     @vsscanf_scanselect_17
0000360A  2043      5955          move.l    D3,A0
0000360C  2242      5956          move.l    D2,A1
0000360E  1031 8801 5957          move.b    1(A1,A0.L),D0
00003612  4880      5958          ext.w     D0
00003614  48C0      5959          ext.l     D0
00003616  B880      5960          cmp.l     D0,D4
00003618  6E02      5961          bgt.s     @vsscanf_scanselect_17
0000361A  601A      5962          bra.s     @vsscanf_scanselect_10
                    5963   @vsscanf_scanselect_17:
0000361C  5282      5964          addq.l    #1,D2
0000361E  6010      5965          bra.s     @vsscanf_scanselect_19
                    5966   @vsscanf_scanselect_15:
00003620  2043      5967          move.l    D3,A0
00003622  1030 2800 5968          move.b    0(A0,D2.L),D0
00003626  4880      5969          ext.w     D0
00003628  48C0      5970          ext.l     D0
0000362A  B880      5971          cmp.l     D0,D4
0000362C  6602      5972          bne.s     @vsscanf_scanselect_19
0000362E  6006      5973          bra.s     @vsscanf_scanselect_10
                    5974   @vsscanf_scanselect_19:
00003630  5282      5975          addq.l    #1,D2
00003632  6000 FF62 5976          bra       @vsscanf_scanselect_8
                    5977   @vsscanf_scanselect_10:
00003636  4A82      5978          tst.l     D2
00003638  6712      5979          beq.s     @vsscanf_scanselect_23
0000363A  2043      5980          move.l    D3,A0
0000363C  1030 2800 5981          move.b    0(A0,D2.L),D0
00003640  4880      5982          ext.w     D0
00003642  48C0      5983          ext.l     D0
00003644  0C80 0000 5984          cmp.l     #93,D0
00003648  005D      
0000364A  6702      5985          beq.s     @vsscanf_scanselect_21
                    5986   @vsscanf_scanselect_23:
0000364C  7A01      5987          moveq     #1,D5
                    5988   @vsscanf_scanselect_21:
0000364E  200A      5989          move.l    A2,D0
00003650  6712      5990          beq.s     @vsscanf_scanselect_24
00003652  4A85      5991          tst.l     D5
00003654  660C      5992          bne.s     @vsscanf_scanselect_26
00003656  4A87      5993          tst.l     D7
00003658  6606      5994          bne.s     @vsscanf_scanselect_28
0000365A  2046      5995          move.l    D6,A0
0000365C  5286      5996          addq.l    #1,D6
0000365E  1084      5997          move.b    D4,(A0)
                    5998   @vsscanf_scanselect_28:
00003660  6014      5999          bra.s     @vsscanf_scanselect_4
                    6000   @vsscanf_scanselect_26:
00003662  6016      6001          bra.s     @vsscanf_scanselect_5
                    6002   @vsscanf_scanselect_24:
00003664  4A85      6003          tst.l     D5
00003666  670C      6004          beq.s     @vsscanf_scanselect_30
00003668  4A87      6005          tst.l     D7
0000366A  6606      6006          bne.s     @vsscanf_scanselect_32
0000366C  2046      6007          move.l    D6,A0
0000366E  5286      6008          addq.l    #1,D6
00003670  1084      6009          move.b    D4,(A0)
                    6010   @vsscanf_scanselect_32:
00003672  6002      6011          bra.s     @vsscanf_scanselect_4
                    6012   @vsscanf_scanselect_30:
00003674  6004      6013          bra.s     @vsscanf_scanselect_5
                    6014   @vsscanf_scanselect_4:
00003676  6000 FEEE 6015          bra       @vsscanf_scanselect_2
                    6016   @vsscanf_scanselect_5:
0000367A  0C84 FFFF 6017          cmp.l     #-1,D4
0000367E  FFFF      
00003680  6712      6018          beq.s     @vsscanf_scanselect_34
00003682  2F04      6019          move.l    D4,-(A7)
00003684  2F2E 0008 6020          move.l    8(A6),-(A7)
00003688  6100 FE14 6021          bsr       @vsscanf_scanputback
0000368C  504F      6022          addq.w    #8,A7
0000368E  206E 001C 6023          move.l    28(A6),A0
00003692  5390      6024          subq.l    #1,(A0)
                    6025   @vsscanf_scanselect_34:
00003694  4A87      6026          tst.l     D7
00003696  6604      6027          bne.s     @vsscanf_scanselect_36
00003698  2046      6028          move.l    D6,A0
0000369A  4210      6029          clr.b     (A0)
                    6030   @vsscanf_scanselect_36:
0000369C  5283      6031          addq.l    #1,D3
0000369E  2043      6032          move.l    D3,A0
000036A0  1010      6033          move.b    (A0),D0
000036A2  4880      6034          ext.w     D0
000036A4  48C0      6035          ext.l     D0
000036A6  0C80 0000 6036          cmp.l     #93,D0
000036AA  005D      
000036AC  6702      6037          beq.s     @vsscanf_scanselect_40
000036AE  60EC      6038          bra       @vsscanf_scanselect_36
                    6039   @vsscanf_scanselect_40:
000036B0  5283      6040          addq.l    #1,D3
000036B2  2003      6041          move.l    D3,D0
000036B4  4CDF 04FC 6042          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
000036B8  4E5E      6043          unlk      A6
000036BA  4E75      6044          rts
                    6045   _scanflush:
000036BC  41F9 0B00 6046          lea       @vsscanf_buf,A0
000036C0  0546      
000036C2  23C8 0000 6047          move.l    A0,@vsscanf_bufx
000036C6  5C42      
000036C8  4239 0B00 6048          clr.b     @vsscanf_buf
000036CC  0546      
000036CE  4878 FFFF 6049          pea       -1
000036D2  6100 0E4A 6050          bsr       _ungetch
000036D6  584F      6051          addq.w    #4,A7
000036D8  4E75      6052          rts
                    6053   _vsscanf:
000036DA  4E56 FF88 6054          link      A6,#-120
000036DE  48E7 3F3C 6055          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000036E2  47F8 3430 6056          lea       @vsscanf_scanread,A3
000036E6  4AAE 0008 6057          tst.l     8(A6)
000036EA  6706      6058          beq.s     vsscanf_1
000036EC  41EE 0008 6059          lea       8(A6),A0
000036F0  6004      6060          bra.s     vsscanf_2
                    6061   vsscanf_1:
000036F2  4280      6062          clr.l     D0
000036F4  2040      6063          move.l    D0,A0
                    6064   vsscanf_2:
000036F6  2A08      6065          move.l    A0,D5
000036F8  42AE FFE4 6066          clr.l     -28(A6)
000036FC  4284      6067          clr.l     D4
                    6068   vsscanf_3:
000036FE  206E 000C 6069          move.l    12(A6),A0
00003702  52AE 000C 6070          addq.l    #1,12(A6)
00003706  1010      6071          move.b    (A0),D0
00003708  4880      6072          ext.w     D0
0000370A  48C0      6073          ext.l     D0
0000370C  2600      6074          move.l    D0,D3
0000370E  6700 05AC 6075          beq       vsscanf_5
00003712  4286      6076          clr.l     D6
00003714  387C 0000 6077          move.w    #0,A4
00003718  0C83 0000 6078          cmp.l     #32,D3
0000371C  0020      
0000371E  6712      6079          beq.s     vsscanf_8
00003720  0C83 0000 6080          cmp.l     #9,D3
00003724  0009      
00003726  670A      6081          beq.s     vsscanf_8
00003728  0C83 0000 6082          cmp.l     #10,D3
0000372C  000A      
0000372E  6600 0048 6083          bne       vsscanf_6
                    6084   vsscanf_8:
00003732  2F05      6085          move.l    D5,-(A7)
00003734  4E93      6086          jsr       (A3)
00003736  584F      6087          addq.w    #4,A7
00003738  2400      6088          move.l    D0,D2
0000373A  52AE FFE4 6089          addq.l    #1,-28(A6)
0000373E  0C82 FFFF 6090          cmp.l     #-1,D2
00003742  FFFF      
00003744  660E      6091          bne.s     vsscanf_11
00003746  4A84      6092          tst.l     D4
00003748  6704      6093          beq.s     vsscanf_13
0000374A  2004      6094          move.l    D4,D0
0000374C  6002      6095          bra.s     vsscanf_14
                    6096   vsscanf_13:
0000374E  70FF      6097          moveq     #-1,D0
                    6098   vsscanf_14:
00003750  6000 056C 6099          bra       vsscanf_15
                    6100   vsscanf_11:
00003754  2042      6101          move.l    D2,A0
00003756  43F9 0000 6102          lea       __ctype,A1
0000375A  5C48      
0000375C  1030 9801 6103          move.b    1(A0,A1.L),D0
00003760  C03C 0010 6104          and.b     #16,D0
00003764  66CC      6105          bne       vsscanf_8
00003766  53AE FFE4 6106          subq.l    #1,-28(A6)
0000376A  2F02      6107          move.l    D2,-(A7)
0000376C  2F05      6108          move.l    D5,-(A7)
0000376E  6100 FD2E 6109          bsr       @vsscanf_scanputback
00003772  504F      6110          addq.w    #8,A7
00003774  6000 0542 6111          bra       vsscanf_139
                    6112   vsscanf_6:
00003778  0C83 0000 6113          cmp.l     #37,D3
0000377C  0025      
0000377E  6600 0502 6114          bne       vsscanf_127
00003782  206E 000C 6115          move.l    12(A6),A0
00003786  52AE 000C 6116          addq.l    #1,12(A6)
0000378A  1010      6117          move.b    (A0),D0
0000378C  4880      6118          ext.w     D0
0000378E  48C0      6119          ext.l     D0
00003790  2600      6120          move.l    D0,D3
00003792  42AE FFEC 6121          clr.l     -20(A6)
00003796  4286      6122          clr.l     D6
00003798  42AE FFE8 6123          clr.l     -24(A6)
0000379C  347C 7FFF 6124          move.w    #32767,A2
000037A0  0C83 0000 6125          cmp.l     #42,D3
000037A4  002A      
000037A6  6612      6126          bne.s     vsscanf_18
000037A8  7C01      6127          moveq     #1,D6
000037AA  206E 000C 6128          move.l    12(A6),A0
000037AE  52AE 000C 6129          addq.l    #1,12(A6)
000037B2  1010      6130          move.b    (A0),D0
000037B4  4880      6131          ext.w     D0
000037B6  48C0      6132          ext.l     D0
000037B8  2600      6133          move.l    D0,D3
                    6134   vsscanf_18:
000037BA  2043      6135          move.l    D3,A0
000037BC  43F9 0000 6136          lea       __ctype,A1
000037C0  5C48      
000037C2  1030 9801 6137          move.b    1(A0,A1.L),D0
000037C6  C03C 0004 6138          and.b     #4,D0
000037CA  6700 004E 6139          beq       vsscanf_24
000037CE  2003      6140          move.l    D3,D0
000037D0  0480 0000 6141          sub.l     #48,D0
000037D4  0030      
000037D6  2440      6142          move.l    D0,A2
                    6143   vsscanf_22:
000037D8  206E 000C 6144          move.l    12(A6),A0
000037DC  52AE 000C 6145          addq.l    #1,12(A6)
000037E0  1010      6146          move.b    (A0),D0
000037E2  4880      6147          ext.w     D0
000037E4  48C0      6148          ext.l     D0
000037E6  2600      6149          move.l    D0,D3
000037E8  2040      6150          move.l    D0,A0
000037EA  43F9 0000 6151          lea       __ctype,A1
000037EE  5C48      
000037F0  1030 9801 6152          move.b    1(A0,A1.L),D0
000037F4  C0BC 0000 6153          and.l     #255,D0
000037F8  00FF      
000037FA  C0BC 0000 6154          and.l     #4,D0
000037FE  0004      
00003800  6718      6155          beq.s     vsscanf_24
00003802  70D0      6156          moveq     #-48,D0
00003804  2F0A      6157          move.l    A2,-(A7)
00003806  4878 000A 6158          pea       10
0000380A  6100 0C12 6159          bsr       LMUL
0000380E  2217      6160          move.l    (A7),D1
00003810  504F      6161          addq.w    #8,A7
00003812  D283      6162          add.l     D3,D1
00003814  D081      6163          add.l     D1,D0
00003816  2440      6164          move.l    D0,A2
00003818  60BE      6165          bra       vsscanf_22
                    6166   vsscanf_24:
0000381A  0C83 0000 6167          cmp.l     #108,D3
0000381E  006C      
00003820  6708      6168          beq.s     vsscanf_27
00003822  0C83 0000 6169          cmp.l     #76,D3
00003826  004C      
00003828  661A      6170          bne.s     vsscanf_25
                    6171   vsscanf_27:
0000382A  2D7C 0000 6172          move.l    #1,-24(A6)
0000382E  0001 FFE8 
00003832  206E 000C 6173          move.l    12(A6),A0
00003836  52AE 000C 6174          addq.l    #1,12(A6)
0000383A  1010      6175          move.b    (A0),D0
0000383C  4880      6176          ext.w     D0
0000383E  48C0      6177          ext.l     D0
00003840  2600      6178          move.l    D0,D3
00003842  6020      6179          bra.s     vsscanf_28
                    6180   vsscanf_25:
00003844  0C83 0000 6181          cmp.l     #104,D3
00003848  0068      
0000384A  6618      6182          bne.s     vsscanf_28
0000384C  2D7C 0000 6183          move.l    #1,-20(A6)
00003850  0001 FFEC 
00003854  206E 000C 6184          move.l    12(A6),A0
00003858  52AE 000C 6185          addq.l    #1,12(A6)
0000385C  1010      6186          move.b    (A0),D0
0000385E  4880      6187          ext.w     D0
00003860  48C0      6188          ext.l     D0
00003862  2600      6189          move.l    D0,D3
                    6190   vsscanf_28:
00003864  0C83 0000 6191          cmp.l     #91,D3
00003868  005B      
0000386A  6600 0036 6192          bne       vsscanf_30
0000386E  4A86      6193          tst.l     D6
00003870  660A      6194          bne.s     vsscanf_32
00003872  206E 0010 6195          move.l    16(A6),A0
00003876  58AE 0010 6196          addq.l    #4,16(A6)
0000387A  2E10      6197          move.l    (A0),D7
                    6198   vsscanf_32:
0000387C  486E FFE4 6199          pea       -28(A6)
00003880  2F07      6200          move.l    D7,-(A7)
00003882  2F06      6201          move.l    D6,-(A7)
00003884  2F0A      6202          move.l    A2,-(A7)
00003886  2F2E 000C 6203          move.l    12(A6),-(A7)
0000388A  2F05      6204          move.l    D5,-(A7)
0000388C  6100 FCA8 6205          bsr       @vsscanf_scanselect
00003890  DEFC 0018 6206          add.w     #24,A7
00003894  2D40 000C 6207          move.l    D0,12(A6)
00003898  4A86      6208          tst.l     D6
0000389A  6602      6209          bne.s     vsscanf_34
0000389C  5284      6210          addq.l    #1,D4
                    6211   vsscanf_34:
0000389E  6000 0418 6212          bra       vsscanf_139
                    6213   vsscanf_30:
000038A2  0C83 0000 6214          cmp.l     #110,D3
000038A6  006E      
000038A8  661A      6215          bne.s     vsscanf_36
000038AA  4A86      6216          tst.l     D6
000038AC  6612      6217          bne.s     vsscanf_38
000038AE  206E 0010 6218          move.l    16(A6),A0
000038B2  58AE 0010 6219          addq.l    #4,16(A6)
000038B6  2E10      6220          move.l    (A0),D7
000038B8  2047      6221          move.l    D7,A0
000038BA  20AE FFE4 6222          move.l    -28(A6),(A0)
000038BE  5284      6223          addq.l    #1,D4
                    6224   vsscanf_38:
000038C0  6000 03F6 6225          bra       vsscanf_139
                    6226   vsscanf_36:
000038C4  0C83 0000 6227          cmp.l     #115,D3
000038C8  0073      
000038CA  6600 00AC 6228          bne       vsscanf_40
000038CE  486E FFE4 6229          pea       -28(A6)
000038D2  2F05      6230          move.l    D5,-(A7)
000038D4  6100 FC2A 6231          bsr       @vsscanf_scanspace
000038D8  504F      6232          addq.w    #8,A7
000038DA  2400      6233          move.l    D0,D2
000038DC  4A86      6234          tst.l     D6
000038DE  660A      6235          bne.s     vsscanf_42
000038E0  206E 0010 6236          move.l    16(A6),A0
000038E4  58AE 0010 6237          addq.l    #4,16(A6)
000038E8  2E10      6238          move.l    (A0),D7
                    6239   vsscanf_42:
000038EA  52AE FFE4 6240          addq.l    #1,-28(A6)
                    6241   vsscanf_44:
000038EE  200A      6242          move.l    A2,D0
000038F0  534A      6243          subq.w    #1,A2
000038F2  4A80      6244          tst.l     D0
000038F4  6700 0038 6245          beq       vsscanf_46
000038F8  2042      6246          move.l    D2,A0
000038FA  43F9 0000 6247          lea       __ctype,A1
000038FE  5C48      
00003900  1030 9801 6248          move.b    1(A0,A1.L),D0
00003904  C03C 0010 6249          and.b     #16,D0
00003908  6624      6250          bne.s     vsscanf_46
0000390A  0C82 FFFF 6251          cmp.l     #-1,D2
0000390E  FFFF      
00003910  671C      6252          beq.s     vsscanf_46
00003912  387C 0001 6253          move.w    #1,A4
00003916  4A86      6254          tst.l     D6
00003918  6606      6255          bne.s     vsscanf_47
0000391A  2047      6256          move.l    D7,A0
0000391C  5287      6257          addq.l    #1,D7
0000391E  1082      6258          move.b    D2,(A0)
                    6259   vsscanf_47:
00003920  2F05      6260          move.l    D5,-(A7)
00003922  4E93      6261          jsr       (A3)
00003924  584F      6262          addq.w    #4,A7
00003926  2400      6263          move.l    D0,D2
00003928  52AE FFE4 6264          addq.l    #1,-28(A6)
0000392C  60C0      6265          bra       vsscanf_44
                    6266   vsscanf_46:
0000392E  4A86      6267          tst.l     D6
00003930  660A      6268          bne.s     vsscanf_51
00003932  2047      6269          move.l    D7,A0
00003934  4210      6270          clr.b     (A0)
00003936  200C      6271          move.l    A4,D0
00003938  6702      6272          beq.s     vsscanf_51
0000393A  5284      6273          addq.l    #1,D4
                    6274   vsscanf_51:
0000393C  0C82 FFFF 6275          cmp.l     #-1,D2
00003940  FFFF      
00003942  6708      6276          beq.s     vsscanf_55
00003944  4A86      6277          tst.l     D6
00003946  661E      6278          bne.s     vsscanf_53
00003948  200C      6279          move.l    A4,D0
0000394A  661A      6280          bne.s     vsscanf_53
                    6281   vsscanf_55:
0000394C  4A84      6282          tst.l     D4
0000394E  6704      6283          beq.s     vsscanf_56
00003950  2004      6284          move.l    D4,D0
00003952  600E      6285          bra.s     vsscanf_59
                    6286   vsscanf_56:
00003954  0C82 FFFF 6287          cmp.l     #-1,D2
00003958  FFFF      
0000395A  6604      6288          bne.s     vsscanf_58
0000395C  70FF      6289          moveq     #-1,D0
0000395E  6002      6290          bra.s     vsscanf_59
                    6291   vsscanf_58:
00003960  2004      6292          move.l    D4,D0
                    6293   vsscanf_59:
00003962  6000 035A 6294          bra       vsscanf_15
                    6295   vsscanf_53:
00003966  53AE FFE4 6296          subq.l    #1,-28(A6)
0000396A  2F02      6297          move.l    D2,-(A7)
0000396C  2F05      6298          move.l    D5,-(A7)
0000396E  6100 FB2E 6299          bsr       @vsscanf_scanputback
00003972  504F      6300          addq.w    #8,A7
00003974  6000 0342 6301          bra       vsscanf_139
                    6302   vsscanf_40:
00003978  0C83 0000 6303          cmp.l     #99,D3
0000397C  0063      
0000397E  6600 008E 6304          bne       vsscanf_60
00003982  4A86      6305          tst.l     D6
00003984  660A      6306          bne.s     vsscanf_62
00003986  206E 0010 6307          move.l    16(A6),A0
0000398A  58AE 0010 6308          addq.l    #4,16(A6)
0000398E  2E10      6309          move.l    (A0),D7
                    6310   vsscanf_62:
00003990  2F05      6311          move.l    D5,-(A7)
00003992  4E93      6312          jsr       (A3)
00003994  584F      6313          addq.w    #4,A7
00003996  2400      6314          move.l    D0,D2
00003998  52AE FFE4 6315          addq.l    #1,-28(A6)
0000399C  200A      6316          move.l    A2,D0
0000399E  0C80 0000 6317          cmp.l     #32767,D0
000039A2  7FFF      
000039A4  6604      6318          bne.s     vsscanf_64
000039A6  347C 0001 6319          move.w    #1,A2
                    6320   vsscanf_64:
000039AA  0C82 FFFF 6321          cmp.l     #-1,D2
000039AE  FFFF      
000039B0  6606      6322          bne.s     vsscanf_66
000039B2  4A86      6323          tst.l     D6
000039B4  6602      6324          bne.s     vsscanf_66
000039B6  5384      6325          subq.l    #1,D4
                    6326   vsscanf_66:
000039B8  200A      6327          move.l    A2,D0
000039BA  534A      6328          subq.w    #1,A2
000039BC  4A80      6329          tst.l     D0
000039BE  6720      6330          beq.s     vsscanf_70
000039C0  0C82 FFFF 6331          cmp.l     #-1,D2
000039C4  FFFF      
000039C6  6718      6332          beq.s     vsscanf_70
000039C8  4A86      6333          tst.l     D6
000039CA  6606      6334          bne.s     vsscanf_71
000039CC  2047      6335          move.l    D7,A0
000039CE  5287      6336          addq.l    #1,D7
000039D0  1082      6337          move.b    D2,(A0)
                    6338   vsscanf_71:
000039D2  2F05      6339          move.l    D5,-(A7)
000039D4  4E93      6340          jsr       (A3)
000039D6  584F      6341          addq.w    #4,A7
000039D8  2400      6342          move.l    D0,D2
000039DA  52AE FFE4 6343          addq.l    #1,-28(A6)
000039DE  60D8      6344          bra       vsscanf_66
                    6345   vsscanf_70:
000039E0  0C82 FFFF 6346          cmp.l     #-1,D2
000039E4  FFFF      
000039E6  660E      6347          bne.s     vsscanf_73
000039E8  4A84      6348          tst.l     D4
000039EA  6704      6349          beq.s     vsscanf_75
000039EC  2004      6350          move.l    D4,D0
000039EE  6002      6351          bra.s     vsscanf_76
                    6352   vsscanf_75:
000039F0  70FF      6353          moveq     #-1,D0
                    6354   vsscanf_76:
000039F2  6000 02CA 6355          bra       vsscanf_15
                    6356   vsscanf_73:
000039F6  4A86      6357          tst.l     D6
000039F8  6602      6358          bne.s     vsscanf_77
000039FA  5284      6359          addq.l    #1,D4
                    6360   vsscanf_77:
000039FC  53AE FFE4 6361          subq.l    #1,-28(A6)
00003A00  2F02      6362          move.l    D2,-(A7)
00003A02  2F05      6363          move.l    D5,-(A7)
00003A04  6100 FA98 6364          bsr       @vsscanf_scanputback
00003A08  504F      6365          addq.w    #8,A7
00003A0A  6000 02AC 6366          bra       vsscanf_139
                    6367   vsscanf_60:
00003A0E  0C83 0000 6368          cmp.l     #105,D3
00003A12  0069      
00003A14  6600 0060 6369          bne       vsscanf_82
00003A18  486E FFE4 6370          pea       -28(A6)
00003A1C  2F05      6371          move.l    D5,-(A7)
00003A1E  6100 FAE0 6372          bsr       @vsscanf_scanspace
00003A22  504F      6373          addq.w    #8,A7
00003A24  2400      6374          move.l    D0,D2
00003A26  0C82 0000 6375          cmp.l     #48,D2
00003A2A  0030      
00003A2C  6600 0038 6376          bne       vsscanf_81
00003A30  387C 0001 6377          move.w    #1,A4
00003A34  2F05      6378          move.l    D5,-(A7)
00003A36  4E93      6379          jsr       (A3)
00003A38  584F      6380          addq.w    #4,A7
00003A3A  2400      6381          move.l    D0,D2
00003A3C  2F02      6382          move.l    D2,-(A7)
00003A3E  6100 F936 6383          bsr       _tolower
00003A42  584F      6384          addq.w    #4,A7
00003A44  0C80 0000 6385          cmp.l     #120,D0
00003A48  0078      
00003A4A  6604      6386          bne.s     vsscanf_83
00003A4C  7678      6387          moveq     #120,D3
00003A4E  6010      6388          bra.s     vsscanf_84
                    6389   vsscanf_83:
00003A50  53AE FFE4 6390          subq.l    #1,-28(A6)
00003A54  2F02      6391          move.l    D2,-(A7)
00003A56  2F05      6392          move.l    D5,-(A7)
00003A58  6100 FA44 6393          bsr       @vsscanf_scanputback
00003A5C  504F      6394          addq.w    #8,A7
00003A5E  766F      6395          moveq     #111,D3
                    6396   vsscanf_84:
00003A60  52AE FFE4 6397          addq.l    #1,-28(A6)
00003A64  6010      6398          bra.s     vsscanf_82
                    6399   vsscanf_81:
00003A66  53AE FFE4 6400          subq.l    #1,-28(A6)
00003A6A  2F02      6401          move.l    D2,-(A7)
00003A6C  2F05      6402          move.l    D5,-(A7)
00003A6E  6100 FA2E 6403          bsr       @vsscanf_scanputback
00003A72  504F      6404          addq.w    #8,A7
00003A74  7664      6405          moveq     #100,D3
                    6406   vsscanf_82:
00003A76  0C83 0000 6407          cmp.l     #100,D3
00003A7A  0064      
00003A7C  671A      6408          beq.s     vsscanf_87
00003A7E  0C83 0000 6409          cmp.l     #117,D3
00003A82  0075      
00003A84  6712      6410          beq.s     vsscanf_87
00003A86  0C83 0000 6411          cmp.l     #120,D3
00003A8A  0078      
00003A8C  670A      6412          beq.s     vsscanf_87
00003A8E  0C83 0000 6413          cmp.l     #111,D3
00003A92  006F      
00003A94  6600 01A4 6414          bne       vsscanf_85
                    6415   vsscanf_87:
00003A98  486E FFE4 6416          pea       -28(A6)
00003A9C  2F05      6417          move.l    D5,-(A7)
00003A9E  6100 FA60 6418          bsr       @vsscanf_scanspace
00003AA2  504F      6419          addq.w    #8,A7
00003AA4  2400      6420          move.l    D0,D2
00003AA6  2D7C 0000 6421          move.l    #10,-4(A6)
00003AAA  000A FFFC 
00003AAE  0C83 0000 6422          cmp.l     #120,D3
00003AB2  0078      
00003AB4  6608      6423          bne.s     vsscanf_88
00003AB6  2D7C 0000 6424          move.l    #16,-4(A6)
00003ABA  0010 FFFC 
                    6425   vsscanf_88:
00003ABE  0C83 0000 6426          cmp.l     #111,D3
00003AC2  006F      
00003AC4  6608      6427          bne.s     vsscanf_90
00003AC6  2D7C 0000 6428          move.l    #8,-4(A6)
00003ACA  0008 FFFC 
                    6429   vsscanf_90:
00003ACE  4A86      6430          tst.l     D6
00003AD0  660A      6431          bne.s     vsscanf_92
00003AD2  206E 0010 6432          move.l    16(A6),A0
00003AD6  58AE 0010 6433          addq.l    #4,16(A6)
00003ADA  2E10      6434          move.l    (A0),D7
                    6435   vsscanf_92:
00003ADC  42AE FFE0 6436          clr.l     -32(A6)
00003AE0  52AE FFE4 6437          addq.l    #1,-28(A6)
00003AE4  0C83 0000 6438          cmp.l     #117,D3
00003AE8  0075      
00003AEA  6720      6439          beq.s     vsscanf_94
00003AEC  0C82 0000 6440          cmp.l     #45,D2
00003AF0  002D      
00003AF2  6618      6441          bne.s     vsscanf_94
00003AF4  2F05      6442          move.l    D5,-(A7)
00003AF6  4E93      6443          jsr       (A3)
00003AF8  584F      6444          addq.w    #4,A7
00003AFA  2400      6445          move.l    D0,D2
00003AFC  52AE FFE4 6446          addq.l    #1,-28(A6)
00003B00  2D7C 0000 6447          move.l    #1,-32(A6)
00003B04  0001 FFE0 
00003B08  387C 0001 6448          move.w    #1,A4
                    6449   vsscanf_94:
00003B0C  3A7C 0000 6450          move.w    #0,A5
00003B10  0C82 FFFF 6451          cmp.l     #-1,D2
00003B14  FFFF      
00003B16  660E      6452          bne.s     vsscanf_96
00003B18  4A84      6453          tst.l     D4
00003B1A  6704      6454          beq.s     vsscanf_98
00003B1C  2004      6455          move.l    D4,D0
00003B1E  6002      6456          bra.s     vsscanf_99
                    6457   vsscanf_98:
00003B20  70FF      6458          moveq     #-1,D0
                    6459   vsscanf_99:
00003B22  6000 019A 6460          bra       vsscanf_15
                    6461   vsscanf_96:
00003B26  200A      6462          move.l    A2,D0
00003B28  534A      6463          subq.w    #1,A2
00003B2A  4A80      6464          tst.l     D0
00003B2C  6700 0090 6465          beq       vsscanf_102
00003B30  0C83 0000 6466          cmp.l     #120,D3
00003B34  0078      
00003B36  6620      6467          bne.s     vsscanf_104
00003B38  2F02      6468          move.l    D2,-(A7)
00003B3A  6100 F8C8 6469          bsr       _toupper
00003B3E  584F      6470          addq.w    #4,A7
00003B40  0C80 0000 6471          cmp.l     #65,D0
00003B44  0041      
00003B46  6D10      6472          blt.s     vsscanf_104
00003B48  2F02      6473          move.l    D2,-(A7)
00003B4A  6100 F8B8 6474          bsr       _toupper
00003B4E  584F      6475          addq.w    #4,A7
00003B50  0C80 0000 6476          cmp.l     #70,D0
00003B54  0046      
00003B56  6F14      6477          ble.s     vsscanf_103
                    6478   vsscanf_104:
00003B58  2042      6479          move.l    D2,A0
00003B5A  43F9 0000 6480          lea       __ctype,A1
00003B5E  5C48      
00003B60  1030 9801 6481          move.b    1(A0,A1.L),D0
00003B64  C03C 0004 6482          and.b     #4,D0
00003B68  6700 0054 6483          beq       vsscanf_102
                    6484   vsscanf_103:
00003B6C  2042      6485          move.l    D2,A0
00003B6E  43F9 0000 6486          lea       __ctype,A1
00003B72  5C48      
00003B74  1030 9801 6487          move.b    1(A0,A1.L),D0
00003B78  C03C 0004 6488          and.b     #4,D0
00003B7C  6614      6489          bne.s     vsscanf_105
00003B7E  70F9      6490          moveq     #-7,D0
00003B80  2F00      6491          move.l    D0,-(A7)
00003B82  2F02      6492          move.l    D2,-(A7)
00003B84  6100 F87E 6493          bsr       _toupper
00003B88  584F      6494          addq.w    #4,A7
00003B8A  2200      6495          move.l    D0,D1
00003B8C  201F      6496          move.l    (A7)+,D0
00003B8E  D081      6497          add.l     D1,D0
00003B90  2400      6498          move.l    D0,D2
                    6499   vsscanf_105:
00003B92  2F0D      6500          move.l    A5,-(A7)
00003B94  2F2E FFFC 6501          move.l    -4(A6),-(A7)
00003B98  6100 0884 6502          bsr       LMUL
00003B9C  2017      6503          move.l    (A7),D0
00003B9E  504F      6504          addq.w    #8,A7
00003BA0  D082      6505          add.l     D2,D0
00003BA2  0480 0000 6506          sub.l     #48,D0
00003BA6  0030      
00003BA8  2A40      6507          move.l    D0,A5
00003BAA  2F05      6508          move.l    D5,-(A7)
00003BAC  4E93      6509          jsr       (A3)
00003BAE  584F      6510          addq.w    #4,A7
00003BB0  2400      6511          move.l    D0,D2
00003BB2  52AE FFE4 6512          addq.l    #1,-28(A6)
00003BB6  387C 0001 6513          move.w    #1,A4
00003BBA  6000 FF6A 6514          bra       vsscanf_96
                    6515   vsscanf_102:
00003BBE  0C82 FFFF 6516          cmp.l     #-1,D2
00003BC2  FFFF      
00003BC4  671A      6517          beq.s     vsscanf_107
00003BC6  2F02      6518          move.l    D2,-(A7)
00003BC8  2F05      6519          move.l    D5,-(A7)
00003BCA  6100 F8D2 6520          bsr       @vsscanf_scanputback
00003BCE  504F      6521          addq.w    #8,A7
00003BD0  53AE FFE4 6522          subq.l    #1,-28(A6)
00003BD4  200C      6523          move.l    A4,D0
00003BD6  6606      6524          bne.s     vsscanf_109
00003BD8  2004      6525          move.l    D4,D0
00003BDA  6000 00E2 6526          bra       vsscanf_15
                    6527   vsscanf_109:
00003BDE  6012      6528          bra.s     vsscanf_111
                    6529   vsscanf_107:
00003BE0  200C      6530          move.l    A4,D0
00003BE2  660E      6531          bne.s     vsscanf_111
00003BE4  4A84      6532          tst.l     D4
00003BE6  6704      6533          beq.s     vsscanf_113
00003BE8  2004      6534          move.l    D4,D0
00003BEA  6002      6535          bra.s     vsscanf_114
                    6536   vsscanf_113:
00003BEC  70FF      6537          moveq     #-1,D0
                    6538   vsscanf_114:
00003BEE  6000 00CE 6539          bra       vsscanf_15
                    6540   vsscanf_111:
00003BF2  4AAE FFE0 6541          tst.l     -32(A6)
00003BF6  6706      6542          beq.s     vsscanf_115
00003BF8  200D      6543          move.l    A5,D0
00003BFA  4480      6544          neg.l     D0
00003BFC  2A40      6545          move.l    D0,A5
                    6546   vsscanf_115:
00003BFE  4A86      6547          tst.l     D6
00003C00  661E      6548          bne.s     vsscanf_117
00003C02  4AAE FFE8 6549          tst.l     -24(A6)
00003C06  6706      6550          beq.s     vsscanf_119
00003C08  2047      6551          move.l    D7,A0
00003C0A  208D      6552          move.l    A5,(A0)
00003C0C  6010      6553          bra.s     vsscanf_122
                    6554   vsscanf_119:
00003C0E  4AAE FFEC 6555          tst.l     -20(A6)
00003C12  6706      6556          beq.s     vsscanf_121
00003C14  2047      6557          move.l    D7,A0
00003C16  308D      6558          move.w    A5,(A0)
00003C18  6004      6559          bra.s     vsscanf_122
                    6560   vsscanf_121:
00003C1A  2047      6561          move.l    D7,A0
00003C1C  208D      6562          move.l    A5,(A0)
                    6563   vsscanf_122:
00003C1E  5284      6564          addq.l    #1,D4
                    6565   vsscanf_117:
00003C20  0C82 FFFF 6566          cmp.l     #-1,D2
00003C24  FFFF      
00003C26  660E      6567          bne.s     vsscanf_123
00003C28  4A84      6568          tst.l     D4
00003C2A  6704      6569          beq.s     vsscanf_125
00003C2C  2004      6570          move.l    D4,D0
00003C2E  6002      6571          bra.s     vsscanf_126
                    6572   vsscanf_125:
00003C30  70FF      6573          moveq     #-1,D0
                    6574   vsscanf_126:
00003C32  6000 008A 6575          bra       vsscanf_15
                    6576   vsscanf_123:
00003C36  6000 0080 6577          bra       vsscanf_139
                    6578   vsscanf_85:
00003C3A  0C83 0000 6579          cmp.l     #37,D3
00003C3E  0025      
00003C40  6600 0040 6580          bne       vsscanf_127
00003C44  2F05      6581          move.l    D5,-(A7)
00003C46  4E93      6582          jsr       (A3)
00003C48  584F      6583          addq.w    #4,A7
00003C4A  2400      6584          move.l    D0,D2
00003C4C  0C82 FFFF 6585          cmp.l     #-1,D2
00003C50  FFFF      
00003C52  660E      6586          bne.s     vsscanf_129
00003C54  4A84      6587          tst.l     D4
00003C56  6704      6588          beq.s     vsscanf_131
00003C58  2004      6589          move.l    D4,D0
00003C5A  6002      6590          bra.s     vsscanf_132
                    6591   vsscanf_131:
00003C5C  70FF      6592          moveq     #-1,D0
                    6593   vsscanf_132:
00003C5E  6000 005E 6594          bra       vsscanf_15
                    6595   vsscanf_129:
00003C62  52AE FFE4 6596          addq.l    #1,-28(A6)
00003C66  B483      6597          cmp.l     D3,D2
00003C68  6714      6598          beq.s     vsscanf_133
00003C6A  2F02      6599          move.l    D2,-(A7)
00003C6C  2F05      6600          move.l    D5,-(A7)
00003C6E  6100 F82E 6601          bsr       @vsscanf_scanputback
00003C72  504F      6602          addq.w    #8,A7
00003C74  53AE FFE4 6603          subq.l    #1,-28(A6)
00003C78  2004      6604          move.l    D4,D0
00003C7A  6000 0042 6605          bra       vsscanf_15
                    6606   vsscanf_133:
00003C7E  6000 0038 6607          bra       vsscanf_139
                    6608   vsscanf_127:
00003C82  2F05      6609          move.l    D5,-(A7)
00003C84  4E93      6610          jsr       (A3)
00003C86  584F      6611          addq.w    #4,A7
00003C88  2400      6612          move.l    D0,D2
00003C8A  52AE FFE4 6613          addq.l    #1,-28(A6)
00003C8E  0C82 FFFF 6614          cmp.l     #-1,D2
00003C92  FFFF      
00003C94  660C      6615          bne.s     vsscanf_135
00003C96  4A84      6616          tst.l     D4
00003C98  6704      6617          beq.s     vsscanf_137
00003C9A  2004      6618          move.l    D4,D0
00003C9C  6002      6619          bra.s     vsscanf_138
                    6620   vsscanf_137:
00003C9E  70FF      6621          moveq     #-1,D0
                    6622   vsscanf_138:
00003CA0  601C      6623          bra.s     vsscanf_15
                    6624   vsscanf_135:
00003CA2  B483      6625          cmp.l     D3,D2
00003CA4  6712      6626          beq.s     vsscanf_139
00003CA6  2F02      6627          move.l    D2,-(A7)
00003CA8  2F05      6628          move.l    D5,-(A7)
00003CAA  6100 F7F2 6629          bsr       @vsscanf_scanputback
00003CAE  504F      6630          addq.w    #8,A7
00003CB0  53AE FFE4 6631          subq.l    #1,-28(A6)
00003CB4  2004      6632          move.l    D4,D0
00003CB6  6006      6633          bra.s     vsscanf_15
                    6634   vsscanf_139:
00003CB8  6000 FA44 6635          bra       vsscanf_3
                    6636   vsscanf_5:
00003CBC  2004      6637          move.l    D4,D0
                    6638   vsscanf_15:
00003CBE  4CDF 3CFC 6639          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003CC2  4E5E      6640          unlk      A6
00003CC4  4E75      6641          rts
                    6642   _printf:
00003CC6  4E56 FFFC 6643          link      A6,#-4
00003CCA  48E7 2000 6644          movem.l   D2,-(A7)
00003CCE  41EE 0008 6645          lea       8(A6),A0
00003CD2  5848      6646          addq.w    #4,A0
00003CD4  2408      6647          move.l    A0,D2
00003CD6  2F02      6648          move.l    D2,-(A7)
00003CD8  2F2E 0008 6649          move.l    8(A6),-(A7)
00003CDC  42A7      6650          clr.l     -(A7)
00003CDE  6100 00CA 6651          bsr       _vsprintf
00003CE2  DEFC 000C 6652          add.w     #12,A7
00003CE6  2D40 FFFC 6653          move.l    D0,-4(A6)
00003CEA  4282      6654          clr.l     D2
00003CEC  202E FFFC 6655          move.l    -4(A6),D0
00003CF0  4CDF 0004 6656          movem.l   (A7)+,D2
00003CF4  4E5E      6657          unlk      A6
00003CF6  4E75      6658          rts
                    6659   @vsprintf_copy:
00003CF8  4E56 0000 6660          link      A6,#0
00003CFC  206E 0008 6661          move.l    8(A6),A0
00003D00  4A90      6662          tst.l     (A0)
00003D02  6710      6663          beq.s     @vsprintf_copy_1
00003D04  202E 000C 6664          move.l    12(A6),D0
00003D08  206E 0008 6665          move.l    8(A6),A0
00003D0C  2250      6666          move.l    (A0),A1
00003D0E  5290      6667          addq.l    #1,(A0)
00003D10  1280      6668          move.b    D0,(A1)
00003D12  600A      6669          bra.s     @vsprintf_copy_2
                    6670   @vsprintf_copy_1:
00003D14  2F2E 000C 6671          move.l    12(A6),-(A7)
00003D18  6100 F5F0 6672          bsr       _putch
00003D1C  584F      6673          addq.w    #4,A7
                    6674   @vsprintf_copy_2:
00003D1E  4E5E      6675          unlk      A6
00003D20  4E75      6676          rts
                    6677   @vsprintf_getval:
00003D22  4E56 0000 6678          link      A6,#0
00003D26  48E7 3000 6679          movem.l   D2/D3,-(A7)
00003D2A  242E 0008 6680          move.l    8(A6),D2
00003D2E  4283      6681          clr.l     D3
00003D30  2042      6682          move.l    D2,A0
00003D32  2050      6683          move.l    (A0),A0
00003D34  1010      6684          move.b    (A0),D0
00003D36  4880      6685          ext.w     D0
00003D38  48C0      6686          ext.l     D0
00003D3A  0C80 0000 6687          cmp.l     #42,D0
00003D3E  002A      
00003D40  6612      6688          bne.s     @vsprintf_getval_1
00003D42  206E 000C 6689          move.l    12(A6),A0
00003D46  2250      6690          move.l    (A0),A1
00003D48  5890      6691          addq.l    #4,(A0)
00003D4A  2611      6692          move.l    (A1),D3
00003D4C  2042      6693          move.l    D2,A0
00003D4E  5290      6694          addq.l    #1,(A0)
00003D50  6000 004E 6695          bra       @vsprintf_getval_5
                    6696   @vsprintf_getval_1:
00003D54  2042      6697          move.l    D2,A0
00003D56  2050      6698          move.l    (A0),A0
00003D58  1010      6699          move.b    (A0),D0
00003D5A  4880      6700          ext.w     D0
00003D5C  48C0      6701          ext.l     D0
00003D5E  0C80 0000 6702          cmp.l     #48,D0
00003D62  0030      
00003D64  6D00 003A 6703          blt       @vsprintf_getval_5
00003D68  2042      6704          move.l    D2,A0
00003D6A  2050      6705          move.l    (A0),A0
00003D6C  1010      6706          move.b    (A0),D0
00003D6E  4880      6707          ext.w     D0
00003D70  48C0      6708          ext.l     D0
00003D72  0C80 0000 6709          cmp.l     #57,D0
00003D76  0039      
00003D78  6E26      6710          bgt.s     @vsprintf_getval_5
00003D7A  2F03      6711          move.l    D3,-(A7)
00003D7C  4878 000A 6712          pea       10
00003D80  6100 069C 6713          bsr       LMUL
00003D84  2017      6714          move.l    (A7),D0
00003D86  504F      6715          addq.w    #8,A7
00003D88  2042      6716          move.l    D2,A0
00003D8A  2250      6717          move.l    (A0),A1
00003D8C  5290      6718          addq.l    #1,(A0)
00003D8E  1211      6719          move.b    (A1),D1
00003D90  4881      6720          ext.w     D1
00003D92  48C1      6721          ext.l     D1
00003D94  D081      6722          add.l     D1,D0
00003D96  0480 0000 6723          sub.l     #48,D0
00003D9A  0030      
00003D9C  2600      6724          move.l    D0,D3
00003D9E  60B4      6725          bra       @vsprintf_getval_1
                    6726   @vsprintf_getval_5:
00003DA0  2003      6727          move.l    D3,D0
00003DA2  4CDF 000C 6728          movem.l   (A7)+,D2/D3
00003DA6  4E5E      6729          unlk      A6
00003DA8  4E75      6730          rts
                    6731   _vsprintf:
00003DAA  4E56 FFCC 6732          link      A6,#-52
00003DAE  48E7 3F3C 6733          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003DB2  45EE 0008 6734          lea       8(A6),A2
00003DB6  47F8 3CF8 6735          lea       @vsprintf_copy,A3
00003DBA  49F9 0000 6736          lea       _ultoa,A4
00003DBE  4628      
00003DC0  4286      6737          clr.l     D6
                    6738   vsprintf_1:
00003DC2  206E 000C 6739          move.l    12(A6),A0
00003DC6  4A10      6740          tst.b     (A0)
00003DC8  6700 0624 6741          beq       vsprintf_3
00003DCC  206E 000C 6742          move.l    12(A6),A0
00003DD0  1010      6743          move.b    (A0),D0
00003DD2  4880      6744          ext.w     D0
00003DD4  48C0      6745          ext.l     D0
00003DD6  0C80 0000 6746          cmp.l     #37,D0
00003DDA  0025      
00003DDC  671C      6747          beq.s     vsprintf_4
00003DDE  206E 000C 6748          move.l    12(A6),A0
00003DE2  52AE 000C 6749          addq.l    #1,12(A6)
00003DE6  1210      6750          move.b    (A0),D1
00003DE8  4881      6751          ext.w     D1
00003DEA  48C1      6752          ext.l     D1
00003DEC  2F01      6753          move.l    D1,-(A7)
00003DEE  2F0A      6754          move.l    A2,-(A7)
00003DF0  4E93      6755          jsr       (A3)
00003DF2  504F      6756          addq.w    #8,A7
00003DF4  5286      6757          addq.l    #1,D6
00003DF6  6000 05F2 6758          bra       vsprintf_2
                    6759   vsprintf_4:
00003DFA  52AE 000C 6760          addq.l    #1,12(A6)
00003DFE  422E FFD3 6761          clr.b     -45(A6)
00003E02  422E FFD2 6762          clr.b     -46(A6)
00003E06  422E FFD0 6763          clr.b     -48(A6)
00003E0A  422E FFCF 6764          clr.b     -49(A6)
00003E0E  422E FFCE 6765          clr.b     -50(A6)
00003E12  422E FFCD 6766          clr.b     -51(A6)
00003E16  42AE FFFC 6767          clr.l     -4(A6)
00003E1A  7AFF      6768          moveq     #-1,D5
00003E1C  41EE FFDC 6769          lea       -36(A6),A0
00003E20  2608      6770          move.l    A0,D3
00003E22  2408      6771          move.l    A0,D2
                    6772   vsprintf_6:
00003E24  206E 000C 6773          move.l    12(A6),A0
00003E28  1010      6774          move.b    (A0),D0
00003E2A  4880      6775          ext.w     D0
00003E2C  48C0      6776          ext.l     D0
00003E2E  0C80 0000 6777          cmp.l     #43,D0
00003E32  002B      
00003E34  6730      6778          beq.s     vsprintf_12
00003E36  6E18      6779          bgt.s     vsprintf_15
00003E38  0C80 0000 6780          cmp.l     #35,D0
00003E3C  0023      
00003E3E  6700 003E 6781          beq       vsprintf_14
00003E42  6E00 0046 6782          bgt       vsprintf_9
00003E46  0C80 0000 6783          cmp.l     #32,D0
00003E4A  0020      
00003E4C  6724      6784          beq.s     vsprintf_13
00003E4E  603A      6785          bra.s     vsprintf_9
                    6786   vsprintf_15:
00003E50  0C80 0000 6787          cmp.l     #45,D0
00003E54  002D      
00003E56  6702      6788          beq.s     vsprintf_11
00003E58  6030      6789          bra.s     vsprintf_9
                    6790   vsprintf_11:
00003E5A  1D7C 0001 6791          move.b    #1,-51(A6)
00003E5E  FFCD      
00003E60  52AE 000C 6792          addq.l    #1,12(A6)
00003E64  6026      6793          bra.s     vsprintf_7
                    6794   vsprintf_12:
00003E66  1D7C 0001 6795          move.b    #1,-50(A6)
00003E6A  FFCE      
00003E6C  52AE 000C 6796          addq.l    #1,12(A6)
00003E70  601A      6797          bra.s     vsprintf_7
                    6798   vsprintf_13:
00003E72  1D7C 0001 6799          move.b    #1,-49(A6)
00003E76  FFCF      
00003E78  52AE 000C 6800          addq.l    #1,12(A6)
00003E7C  600E      6801          bra.s     vsprintf_7
                    6802   vsprintf_14:
00003E7E  1D7C 0001 6803          move.b    #1,-48(A6)
00003E82  FFD0      
00003E84  52AE 000C 6804          addq.l    #1,12(A6)
00003E88  6002      6805          bra.s     vsprintf_7
                    6806   vsprintf_9:
00003E8A  6002      6807          bra.s     vsprintf_8
                    6808   vsprintf_7:
00003E8C  6096      6809          bra       vsprintf_6
                    6810   vsprintf_8:
00003E8E  206E 000C 6811          move.l    12(A6),A0
00003E92  1010      6812          move.b    (A0),D0
00003E94  4880      6813          ext.w     D0
00003E96  48C0      6814          ext.l     D0
00003E98  0C80 0000 6815          cmp.l     #48,D0
00003E9C  0030      
00003E9E  660A      6816          bne.s     vsprintf_16
00003EA0  52AE 000C 6817          addq.l    #1,12(A6)
00003EA4  1D7C 0001 6818          move.b    #1,-46(A6)
00003EA8  FFD2      
                    6819   vsprintf_16:
00003EAA  486E 0010 6820          pea       16(A6)
00003EAE  486E 000C 6821          pea       12(A6)
00003EB2  6100 FE6E 6822          bsr       @vsprintf_getval
00003EB6  504F      6823          addq.w    #8,A7
00003EB8  2A40      6824          move.l    D0,A5
00003EBA  206E 000C 6825          move.l    12(A6),A0
00003EBE  1010      6826          move.b    (A0),D0
00003EC0  4880      6827          ext.w     D0
00003EC2  48C0      6828          ext.l     D0
00003EC4  0C80 0000 6829          cmp.l     #46,D0
00003EC8  002E      
00003ECA  6614      6830          bne.s     vsprintf_18
00003ECC  52AE 000C 6831          addq.l    #1,12(A6)
00003ED0  486E 0010 6832          pea       16(A6)
00003ED4  486E 000C 6833          pea       12(A6)
00003ED8  6100 FE48 6834          bsr       @vsprintf_getval
00003EDC  504F      6835          addq.w    #8,A7
00003EDE  2A00      6836          move.l    D0,D5
                    6837   vsprintf_18:
00003EE0  206E 000C 6838          move.l    12(A6),A0
00003EE4  1010      6839          move.b    (A0),D0
00003EE6  4880      6840          ext.w     D0
00003EE8  48C0      6841          ext.l     D0
00003EEA  0C80 0000 6842          cmp.l     #108,D0
00003EEE  006C      
00003EF0  660A      6843          bne.s     vsprintf_20
00003EF2  52AE 000C 6844          addq.l    #1,12(A6)
00003EF6  1D7C 0001 6845          move.b    #1,-45(A6)
00003EFA  FFD3      
                    6846   vsprintf_20:
00003EFC  206E 000C 6847          move.l    12(A6),A0
00003F00  1010      6848          move.b    (A0),D0
00003F02  4880      6849          ext.w     D0
00003F04  48C0      6850          ext.l     D0
00003F06  0C80 0000 6851          cmp.l     #111,D0
00003F0A  006F      
00003F0C  6700 00D4 6852          beq       vsprintf_27
00003F10  6E34      6853          bgt.s     vsprintf_33
00003F12  0C80 0000 6854          cmp.l     #100,D0
00003F16  0064      
00003F18  6700 0054 6855          beq       vsprintf_24
00003F1C  6E1C      6856          bgt.s     vsprintf_34
00003F1E  0C80 0000 6857          cmp.l     #99,D0
00003F22  0063      
00003F24  6700 012C 6858          beq       vsprintf_30
00003F28  6E00 016A 6859          bgt       vsprintf_22
00003F2C  0C80 0000 6860          cmp.l     #88,D0
00003F30  0058      
00003F32  6700 00E6 6861          beq       vsprintf_28
00003F36  6000 015C 6862          bra       vsprintf_22
                    6863   vsprintf_34:
00003F3A  0C80 0000 6864          cmp.l     #105,D0
00003F3E  0069      
00003F40  672C      6865          beq.s     vsprintf_24
00003F42  6000 0150 6866          bra       vsprintf_22
                    6867   vsprintf_33:
00003F46  0C80 0000 6868          cmp.l     #117,D0
00003F4A  0075      
00003F4C  6700 005C 6869          beq       vsprintf_26
00003F50  6E0E      6870          bgt.s     vsprintf_35
00003F52  0C80 0000 6871          cmp.l     #115,D0
00003F56  0073      
00003F58  6700 011C 6872          beq       vsprintf_31
00003F5C  6000 0136 6873          bra       vsprintf_22
                    6874   vsprintf_35:
00003F60  0C80 0000 6875          cmp.l     #120,D0
00003F64  0078      
00003F66  6700 00B2 6876          beq       vsprintf_28
00003F6A  6000 0128 6877          bra       vsprintf_22
                    6878   vsprintf_24:
00003F6E  4A2E FFD3 6879          tst.b     -45(A6)
00003F72  671A      6880          beq.s     vsprintf_36
00003F74  4878 000A 6881          pea       10
00003F78  2F03      6882          move.l    D3,-(A7)
00003F7A  206E 0010 6883          move.l    16(A6),A0
00003F7E  58AE 0010 6884          addq.l    #4,16(A6)
00003F82  2F10      6885          move.l    (A0),-(A7)
00003F84  6100 061E 6886          bsr       _ltoa
00003F88  DEFC 000C 6887          add.w     #12,A7
00003F8C  6018      6888          bra.s     vsprintf_37
                    6889   vsprintf_36:
00003F8E  4878 000A 6890          pea       10
00003F92  2F03      6891          move.l    D3,-(A7)
00003F94  206E 0010 6892          move.l    16(A6),A0
00003F98  58AE 0010 6893          addq.l    #4,16(A6)
00003F9C  2F10      6894          move.l    (A0),-(A7)
00003F9E  6100 0604 6895          bsr       _ltoa
00003FA2  DEFC 000C 6896          add.w     #12,A7
                    6897   vsprintf_37:
00003FA6  6000 00FA 6898          bra       vsprintf_23
                    6899   vsprintf_26:
00003FAA  4A2E FFD3 6900          tst.b     -45(A6)
00003FAE  6718      6901          beq.s     vsprintf_38
00003FB0  4878 000A 6902          pea       10
00003FB4  2F03      6903          move.l    D3,-(A7)
00003FB6  206E 0010 6904          move.l    16(A6),A0
00003FBA  58AE 0010 6905          addq.l    #4,16(A6)
00003FBE  2F10      6906          move.l    (A0),-(A7)
00003FC0  4E94      6907          jsr       (A4)
00003FC2  DEFC 000C 6908          add.w     #12,A7
00003FC6  6016      6909          bra.s     vsprintf_39
                    6910   vsprintf_38:
00003FC8  4878 000A 6911          pea       10
00003FCC  2F03      6912          move.l    D3,-(A7)
00003FCE  206E 0010 6913          move.l    16(A6),A0
00003FD2  58AE 0010 6914          addq.l    #4,16(A6)
00003FD6  2F10      6915          move.l    (A0),-(A7)
00003FD8  4E94      6916          jsr       (A4)
00003FDA  DEFC 000C 6917          add.w     #12,A7
                    6918   vsprintf_39:
00003FDE  6000 00C2 6919          bra       vsprintf_23
                    6920   vsprintf_27:
00003FE2  4A2E FFD3 6921          tst.b     -45(A6)
00003FE6  6718      6922          beq.s     vsprintf_40
00003FE8  4878 0008 6923          pea       8
00003FEC  2F03      6924          move.l    D3,-(A7)
00003FEE  206E 0010 6925          move.l    16(A6),A0
00003FF2  58AE 0010 6926          addq.l    #4,16(A6)
00003FF6  2F10      6927          move.l    (A0),-(A7)
00003FF8  4E94      6928          jsr       (A4)
00003FFA  DEFC 000C 6929          add.w     #12,A7
00003FFE  6016      6930          bra.s     vsprintf_41
                    6931   vsprintf_40:
00004000  4878 0008 6932          pea       8
00004004  2F03      6933          move.l    D3,-(A7)
00004006  206E 0010 6934          move.l    16(A6),A0
0000400A  58AE 0010 6935          addq.l    #4,16(A6)
0000400E  2F10      6936          move.l    (A0),-(A7)
00004010  4E94      6937          jsr       (A4)
00004012  DEFC 000C 6938          add.w     #12,A7
                    6939   vsprintf_41:
00004016  6000 008A 6940          bra       vsprintf_23
                    6941   vsprintf_28:
0000401A  4A2E FFD3 6942          tst.b     -45(A6)
0000401E  6718      6943          beq.s     vsprintf_42
00004020  4878 0010 6944          pea       16
00004024  2F03      6945          move.l    D3,-(A7)
00004026  206E 0010 6946          move.l    16(A6),A0
0000402A  58AE 0010 6947          addq.l    #4,16(A6)
0000402E  2F10      6948          move.l    (A0),-(A7)
00004030  4E94      6949          jsr       (A4)
00004032  DEFC 000C 6950          add.w     #12,A7
00004036  6016      6951          bra.s     vsprintf_43
                    6952   vsprintf_42:
00004038  4878 0010 6953          pea       16
0000403C  2F03      6954          move.l    D3,-(A7)
0000403E  206E 0010 6955          move.l    16(A6),A0
00004042  58AE 0010 6956          addq.l    #4,16(A6)
00004046  2F10      6957          move.l    (A0),-(A7)
00004048  4E94      6958          jsr       (A4)
0000404A  DEFC 000C 6959          add.w     #12,A7
                    6960   vsprintf_43:
0000404E  6000 0052 6961          bra       vsprintf_23
                    6962   vsprintf_30:
00004052  206E 0010 6963          move.l    16(A6),A0
00004056  58AE 0010 6964          addq.l    #4,16(A6)
0000405A  2010      6965          move.l    (A0),D0
0000405C  2042      6966          move.l    D2,A0
0000405E  5282      6967          addq.l    #1,D2
00004060  1080      6968          move.b    D0,(A0)
00004062  2042      6969          move.l    D2,A0
00004064  4210      6970          clr.b     (A0)
00004066  200D      6971          move.l    A5,D0
00004068  6704      6972          beq.s     vsprintf_44
0000406A  200D      6973          move.l    A5,D0
0000406C  6002      6974          bra.s     vsprintf_45
                    6975   vsprintf_44:
0000406E  7001      6976          moveq     #1,D0
                    6977   vsprintf_45:
00004070  2A00      6978          move.l    D0,D5
00004072  6000 002E 6979          bra       vsprintf_23
                    6980   vsprintf_31:
00004076  206E 0010 6981          move.l    16(A6),A0
0000407A  58AE 0010 6982          addq.l    #4,16(A6)
0000407E  2610      6983          move.l    (A0),D3
00004080  0C85 FFFF 6984          cmp.l     #-1,D5
00004084  FFFF      
00004086  660A      6985          bne.s     vsprintf_46
00004088  2F03      6986          move.l    D3,-(A7)
0000408A  6100 05FE 6987          bsr       _strlen
0000408E  584F      6988          addq.w    #4,A7
00004090  2A00      6989          move.l    D0,D5
                    6990   vsprintf_46:
00004092  600E      6991          bra.s     vsprintf_23
                    6992   vsprintf_22:
00004094  206E 000C 6993          move.l    12(A6),A0
00004098  2242      6994          move.l    D2,A1
0000409A  5282      6995          addq.l    #1,D2
0000409C  1290      6996          move.b    (A0),(A1)
0000409E  2042      6997          move.l    D2,A0
000040A0  4210      6998          clr.b     (A0)
                    6999   vsprintf_23:
000040A2  2F03      7000          move.l    D3,-(A7)
000040A4  6100 05E4 7001          bsr       _strlen
000040A8  584F      7002          addq.w    #4,A7
000040AA  1800      7003          move.b    D0,D4
000040AC  206E 000C 7004          move.l    12(A6),A0
000040B0  1010      7005          move.b    (A0),D0
000040B2  4880      7006          ext.w     D0
000040B4  48C0      7007          ext.l     D0
000040B6  0C80 0000 7008          cmp.l     #115,D0
000040BA  0073      
000040BC  6618      7009          bne.s     vsprintf_48
000040BE  0C85 0000 7010          cmp.l     #0,D5
000040C2  0000      
000040C4  6D10      7011          blt.s     vsprintf_48
000040C6  4884      7012          ext.w     D4
000040C8  48C4      7013          ext.l     D4
000040CA  B885      7014          cmp.l     D5,D4
000040CC  6F04      7015          ble.s     vsprintf_50
000040CE  1005      7016          move.b    D5,D0
000040D0  6002      7017          bra.s     vsprintf_51
                    7018   vsprintf_50:
000040D2  1004      7019          move.b    D4,D0
                    7020   vsprintf_51:
000040D4  1800      7021          move.b    D0,D4
                    7022   vsprintf_48:
000040D6  206E 000C 7023          move.l    12(A6),A0
000040DA  1010      7024          move.b    (A0),D0
000040DC  4880      7025          ext.w     D0
000040DE  48C0      7026          ext.l     D0
000040E0  0C80 0000 7027          cmp.l     #88,D0
000040E4  0058      
000040E6  6600 0026 7028          bne       vsprintf_56
000040EA  41EE FFDC 7029          lea       -36(A6),A0
000040EE  2408      7030          move.l    A0,D2
                    7031   vsprintf_54:
000040F0  2042      7032          move.l    D2,A0
000040F2  4A10      7033          tst.b     (A0)
000040F4  6718      7034          beq.s     vsprintf_56
000040F6  2042      7035          move.l    D2,A0
000040F8  1210      7036          move.b    (A0),D1
000040FA  4881      7037          ext.w     D1
000040FC  48C1      7038          ext.l     D1
000040FE  2F01      7039          move.l    D1,-(A7)
00004100  6100 F302 7040          bsr       _toupper
00004104  584F      7041          addq.w    #4,A7
00004106  2042      7042          move.l    D2,A0
00004108  1080      7043          move.b    D0,(A0)
0000410A  5282      7044          addq.l    #1,D2
0000410C  60E2      7045          bra       vsprintf_54
                    7046   vsprintf_56:
0000410E  7E00      7047          moveq     #0,D7
00004110  41EE FFD4 7048          lea       -44(A6),A0
00004114  2408      7049          move.l    A0,D2
00004116  206E 000C 7050          move.l    12(A6),A0
0000411A  1010      7051          move.b    (A0),D0
0000411C  4880      7052          ext.w     D0
0000411E  48C0      7053          ext.l     D0
00004120  0C80 0000 7054          cmp.l     #100,D0
00004124  0064      
00004126  6714      7055          beq.s     vsprintf_59
00004128  206E 000C 7056          move.l    12(A6),A0
0000412C  1010      7057          move.b    (A0),D0
0000412E  4880      7058          ext.w     D0
00004130  48C0      7059          ext.l     D0
00004132  0C80 0000 7060          cmp.l     #105,D0
00004136  0069      
00004138  6600 0076 7061          bne       vsprintf_65
                    7062   vsprintf_59:
0000413C  4A2E FFCE 7063          tst.b     -50(A6)
00004140  6612      7064          bne.s     vsprintf_62
00004142  2043      7065          move.l    D3,A0
00004144  1010      7066          move.b    (A0),D0
00004146  4880      7067          ext.w     D0
00004148  48C0      7068          ext.l     D0
0000414A  0C80 0000 7069          cmp.l     #45,D0
0000414E  002D      
00004150  6600 002E 7070          bne       vsprintf_60
                    7071   vsprintf_62:
00004154  2043      7072          move.l    D3,A0
00004156  1010      7073          move.b    (A0),D0
00004158  4880      7074          ext.w     D0
0000415A  48C0      7075          ext.l     D0
0000415C  0C80 0000 7076          cmp.l     #45,D0
00004160  002D      
00004162  660E      7077          bne.s     vsprintf_63
00004164  2043      7078          move.l    D3,A0
00004166  5283      7079          addq.l    #1,D3
00004168  2242      7080          move.l    D2,A1
0000416A  5282      7081          addq.l    #1,D2
0000416C  1290      7082          move.b    (A0),(A1)
0000416E  5304      7083          subq.b    #1,D4
00004170  6008      7084          bra.s     vsprintf_64
                    7085   vsprintf_63:
00004172  2042      7086          move.l    D2,A0
00004174  5282      7087          addq.l    #1,D2
00004176  10BC 002B 7088          move.b    #43,(A0)
                    7089   vsprintf_64:
0000417A  5287      7090          addq.l    #1,D7
0000417C  6000 0032 7091          bra       vsprintf_65
                    7092   vsprintf_60:
00004180  4A2E FFCF 7093          tst.b     -49(A6)
00004184  6700 002A 7094          beq       vsprintf_65
00004188  2043      7095          move.l    D3,A0
0000418A  1010      7096          move.b    (A0),D0
0000418C  4880      7097          ext.w     D0
0000418E  48C0      7098          ext.l     D0
00004190  0C80 0000 7099          cmp.l     #45,D0
00004194  002D      
00004196  660E      7100          bne.s     vsprintf_67
00004198  2043      7101          move.l    D3,A0
0000419A  5283      7102          addq.l    #1,D3
0000419C  2242      7103          move.l    D2,A1
0000419E  5282      7104          addq.l    #1,D2
000041A0  1290      7105          move.b    (A0),(A1)
000041A2  5304      7106          subq.b    #1,D4
000041A4  6008      7107          bra.s     vsprintf_68
                    7108   vsprintf_67:
000041A6  2042      7109          move.l    D2,A0
000041A8  5282      7110          addq.l    #1,D2
000041AA  10BC 0020 7111          move.b    #32,(A0)
                    7112   vsprintf_68:
000041AE  5287      7113          addq.l    #1,D7
                    7114   vsprintf_65:
000041B0  4A2E FFD0 7115          tst.b     -48(A6)
000041B4  6700 0066 7116          beq       vsprintf_77
000041B8  206E 000C 7117          move.l    12(A6),A0
000041BC  1010      7118          move.b    (A0),D0
000041BE  4880      7119          ext.w     D0
000041C0  48C0      7120          ext.l     D0
000041C2  0C80 0000 7121          cmp.l     #111,D0
000041C6  006F      
000041C8  671A      7122          beq.s     vsprintf_73
000041CA  6E0C      7123          bgt.s     vsprintf_76
000041CC  0C80 0000 7124          cmp.l     #88,D0
000041D0  0058      
000041D2  6710      7125          beq.s     vsprintf_73
000041D4  6000 0046 7126          bra       vsprintf_77
                    7127   vsprintf_76:
000041D8  0C80 0000 7128          cmp.l     #120,D0
000041DC  0078      
000041DE  6704      7129          beq.s     vsprintf_73
000041E0  6000 003A 7130          bra       vsprintf_77
                    7131   vsprintf_73:
000041E4  2042      7132          move.l    D2,A0
000041E6  5282      7133          addq.l    #1,D2
000041E8  10BC 0030 7134          move.b    #48,(A0)
000041EC  5287      7135          addq.l    #1,D7
000041EE  206E 000C 7136          move.l    12(A6),A0
000041F2  1010      7137          move.b    (A0),D0
000041F4  4880      7138          ext.w     D0
000041F6  48C0      7139          ext.l     D0
000041F8  0C80 0000 7140          cmp.l     #120,D0
000041FC  0078      
000041FE  6712      7141          beq.s     vsprintf_79
00004200  206E 000C 7142          move.l    12(A6),A0
00004204  1010      7143          move.b    (A0),D0
00004206  4880      7144          ext.w     D0
00004208  48C0      7145          ext.l     D0
0000420A  0C80 0000 7146          cmp.l     #88,D0
0000420E  0058      
00004210  660A      7147          bne.s     vsprintf_77
                    7148   vsprintf_79:
00004212  2042      7149          move.l    D2,A0
00004214  5282      7150          addq.l    #1,D2
00004216  10BC 0078 7151          move.b    #120,(A0)
0000421A  5287      7152          addq.l    #1,D7
                    7153   vsprintf_77:
0000421C  2042      7154          move.l    D2,A0
0000421E  4210      7155          clr.b     (A0)
00004220  206E 000C 7156          move.l    12(A6),A0
00004224  1010      7157          move.b    (A0),D0
00004226  4880      7158          ext.w     D0
00004228  48C0      7159          ext.l     D0
0000422A  0C80 0000 7160          cmp.l     #105,D0
0000422E  0069      
00004230  6700 0076 7161          beq       vsprintf_82
00004234  6E42      7162          bgt.s     vsprintf_93
00004236  0C80 0000 7163          cmp.l     #99,D0
0000423A  0063      
0000423C  6700 0084 7164          beq       vsprintf_96
00004240  6E1C      7165          bgt.s     vsprintf_94
00004242  0C80 0000 7166          cmp.l     #88,D0
00004246  0058      
00004248  6700 005E 7167          beq       vsprintf_82
0000424C  6E00 0184 7168          bgt       vsprintf_80
00004250  0C80 0000 7169          cmp.l     #69,D0
00004254  0045      
00004256  6700 0050 7170          beq       vsprintf_82
0000425A  6000 0176 7171          bra       vsprintf_80
                    7172   vsprintf_94:
0000425E  0C80 0000 7173          cmp.l     #101,D0
00004262  0065      
00004264  6700 0042 7174          beq       vsprintf_82
00004268  6E00 0168 7175          bgt       vsprintf_80
0000426C  0C80 0000 7176          cmp.l     #100,D0
00004270  0064      
00004272  6734      7177          beq.s     vsprintf_82
00004274  6000 015C 7178          bra       vsprintf_80
                    7179   vsprintf_93:
00004278  0C80 0000 7180          cmp.l     #117,D0
0000427C  0075      
0000427E  6728      7181          beq.s     vsprintf_82
00004280  6E1A      7182          bgt.s     vsprintf_95
00004282  0C80 0000 7183          cmp.l     #115,D0
00004286  0073      
00004288  6700 0038 7184          beq       vsprintf_96
0000428C  6E00 0144 7185          bgt       vsprintf_80
00004290  0C80 0000 7186          cmp.l     #111,D0
00004294  006F      
00004296  6710      7187          beq.s     vsprintf_82
00004298  6000 0138 7188          bra       vsprintf_80
                    7189   vsprintf_95:
0000429C  0C80 0000 7190          cmp.l     #120,D0
000042A0  0078      
000042A2  6704      7191          beq.s     vsprintf_82
000042A4  6000 012C 7192          bra       vsprintf_80
                    7193   vsprintf_82:
000042A8  4A2E FFD2 7194          tst.b     -46(A6)
000042AC  6714      7195          beq.s     vsprintf_96
000042AE  4A2E FFCD 7196          tst.b     -51(A6)
000042B2  660E      7197          bne.s     vsprintf_96
000042B4  200D      7198          move.l    A5,D0
000042B6  9087      7199          sub.l     D7,D0
000042B8  4884      7200          ext.w     D4
000042BA  48C4      7201          ext.l     D4
000042BC  9084      7202          sub.l     D4,D0
000042BE  2D40 FFFC 7203          move.l    D0,-4(A6)
                    7204   vsprintf_96:
000042C2  202E FFFC 7205          move.l    -4(A6),D0
000042C6  0C80 0000 7206          cmp.l     #0,D0
000042CA  0000      
000042CC  6C04      7207          bge.s     vsprintf_98
000042CE  42AE FFFC 7208          clr.l     -4(A6)
                    7209   vsprintf_98:
000042D2  4A2E FFCD 7210          tst.b     -51(A6)
000042D6  6600 0030 7211          bne       vsprintf_104
000042DA  4884      7212          ext.w     D4
000042DC  48C4      7213          ext.l     D4
000042DE  2004      7214          move.l    D4,D0
000042E0  D0AE FFFC 7215          add.l     -4(A6),D0
000042E4  D087      7216          add.l     D7,D0
000042E6  1D40 FFD1 7217          move.b    D0,-47(A6)
                    7218   vsprintf_102:
000042EA  102E FFD1 7219          move.b    -47(A6),D0
000042EE  4880      7220          ext.w     D0
000042F0  48C0      7221          ext.l     D0
000042F2  220D      7222          move.l    A5,D1
000042F4  534D      7223          subq.w    #1,A5
000042F6  B081      7224          cmp.l     D1,D0
000042F8  6C0E      7225          bge.s     vsprintf_104
000042FA  4878 0020 7226          pea       32
000042FE  2F0A      7227          move.l    A2,-(A7)
00004300  4E93      7228          jsr       (A3)
00004302  504F      7229          addq.w    #8,A7
00004304  5286      7230          addq.l    #1,D6
00004306  60E2      7231          bra       vsprintf_102
                    7232   vsprintf_104:
00004308  41EE FFD4 7233          lea       -44(A6),A0
0000430C  2408      7234          move.l    A0,D2
                    7235   vsprintf_105:
0000430E  2042      7236          move.l    D2,A0
00004310  4A10      7237          tst.b     (A0)
00004312  6716      7238          beq.s     vsprintf_107
00004314  2042      7239          move.l    D2,A0
00004316  5282      7240          addq.l    #1,D2
00004318  1210      7241          move.b    (A0),D1
0000431A  4881      7242          ext.w     D1
0000431C  48C1      7243          ext.l     D1
0000431E  2F01      7244          move.l    D1,-(A7)
00004320  2F0A      7245          move.l    A2,-(A7)
00004322  4E93      7246          jsr       (A3)
00004324  504F      7247          addq.w    #8,A7
00004326  5286      7248          addq.l    #1,D6
00004328  60E4      7249          bra       vsprintf_105
                    7250   vsprintf_107:
0000432A  202E FFFC 7251          move.l    -4(A6),D0
0000432E  1D40 FFD1 7252          move.b    D0,-47(A6)
                    7253   vsprintf_108:
00004332  102E FFD1 7254          move.b    -47(A6),D0
00004336  532E FFD1 7255          subq.b    #1,-47(A6)
0000433A  4A00      7256          tst.b     D0
0000433C  670E      7257          beq.s     vsprintf_110
0000433E  4878 0030 7258          pea       48
00004342  2F0A      7259          move.l    A2,-(A7)
00004344  4E93      7260          jsr       (A3)
00004346  504F      7261          addq.w    #8,A7
00004348  5286      7262          addq.l    #1,D6
0000434A  60E6      7263          bra       vsprintf_108
                    7264   vsprintf_110:
0000434C  2043      7265          move.l    D3,A0
0000434E  4A10      7266          tst.b     (A0)
00004350  6700 0048 7267          beq       vsprintf_113
00004354  206E 000C 7268          move.l    12(A6),A0
00004358  1010      7269          move.b    (A0),D0
0000435A  4880      7270          ext.w     D0
0000435C  48C0      7271          ext.l     D0
0000435E  0C80 0000 7272          cmp.l     #115,D0
00004362  0073      
00004364  670C      7273          beq.s     vsprintf_116
00004366  6E18      7274          bgt.s     vsprintf_119
00004368  0C80 0000 7275          cmp.l     #99,D0
0000436C  0063      
0000436E  6702      7276          beq.s     vsprintf_116
00004370  600E      7277          bra.s     vsprintf_119
                    7278   vsprintf_116:
00004372  2005      7279          move.l    D5,D0
00004374  5385      7280          subq.l    #1,D5
00004376  0C80 0000 7281          cmp.l     #0,D0
0000437A  0000      
0000437C  6E02      7282          bgt.s     vsprintf_119
0000437E  6016      7283          bra.s     vsprintf_115
                    7284   vsprintf_119:
00004380  2043      7285          move.l    D3,A0
00004382  5283      7286          addq.l    #1,D3
00004384  1210      7287          move.b    (A0),D1
00004386  4881      7288          ext.w     D1
00004388  48C1      7289          ext.l     D1
0000438A  2F01      7290          move.l    D1,-(A7)
0000438C  2F0A      7291          move.l    A2,-(A7)
0000438E  4E93      7292          jsr       (A3)
00004390  504F      7293          addq.w    #8,A7
00004392  5286      7294          addq.l    #1,D6
00004394  6002      7295          bra.s     vsprintf_112
                    7296   vsprintf_115:
00004396  6002      7297          bra.s     vsprintf_113
                    7298   vsprintf_112:
00004398  60B2      7299          bra       vsprintf_110
                    7300   vsprintf_113:
0000439A  4A2E FFCD 7301          tst.b     -51(A6)
0000439E  6700 0030 7302          beq       vsprintf_125
000043A2  4884      7303          ext.w     D4
000043A4  48C4      7304          ext.l     D4
000043A6  2004      7305          move.l    D4,D0
000043A8  D0AE FFFC 7306          add.l     -4(A6),D0
000043AC  D087      7307          add.l     D7,D0
000043AE  1D40 FFD1 7308          move.b    D0,-47(A6)
                    7309   vsprintf_123:
000043B2  102E FFD1 7310          move.b    -47(A6),D0
000043B6  4880      7311          ext.w     D0
000043B8  48C0      7312          ext.l     D0
000043BA  220D      7313          move.l    A5,D1
000043BC  534D      7314          subq.w    #1,A5
000043BE  B081      7315          cmp.l     D1,D0
000043C0  6C0E      7316          bge.s     vsprintf_125
000043C2  4878 0020 7317          pea       32
000043C6  2F0A      7318          move.l    A2,-(A7)
000043C8  4E93      7319          jsr       (A3)
000043CA  504F      7320          addq.w    #8,A7
000043CC  5386      7321          subq.l    #1,D6
000043CE  60E2      7322          bra       vsprintf_123
                    7323   vsprintf_125:
000043D0  6014      7324          bra.s     vsprintf_81
                    7325   vsprintf_80:
000043D2  206E 000C 7326          move.l    12(A6),A0
000043D6  1210      7327          move.b    (A0),D1
000043D8  4881      7328          ext.w     D1
000043DA  48C1      7329          ext.l     D1
000043DC  2F01      7330          move.l    D1,-(A7)
000043DE  2F0A      7331          move.l    A2,-(A7)
000043E0  4E93      7332          jsr       (A3)
000043E2  504F      7333          addq.w    #8,A7
000043E4  5286      7334          addq.l    #1,D6
                    7335   vsprintf_81:
000043E6  52AE 000C 7336          addq.l    #1,12(A6)
                    7337   vsprintf_2:
000043EA  6000 F9D6 7338          bra       vsprintf_1
                    7339   vsprintf_3:
000043EE  4A92      7340          tst.l     (A2)
000043F0  6710      7341          beq.s     vsprintf_126
000043F2  4201      7342          clr.b     D1
000043F4  C2BC 0000 7343          and.l     #255,D1
000043F8  00FF      
000043FA  2F01      7344          move.l    D1,-(A7)
000043FC  2F0A      7345          move.l    A2,-(A7)
000043FE  4E93      7346          jsr       (A3)
00004400  504F      7347          addq.w    #8,A7
                    7348   vsprintf_126:
00004402  2006      7349          move.l    D6,D0
00004404  4CDF 3CFC 7350          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004408  4E5E      7351          unlk      A6
0000440A  4E75      7352          rts
                    7353   ULMUL:
0000440C  4E56 0000 7354          link    A6,#0
00004410  48E7 C000 7355          movem.l D0/D1,-(A7)
00004414  222E 0008 7356          move.l  8(A6),D1
00004418  202E 000C 7357          move.l  12(A6),D0
0000441C  602C      7358          bra.s   lmul_3
                    7359   LMUL:
0000441E  4E56 0000 7360          link    A6,#0
00004422  48E7 C000 7361          movem.l D0/D1,-(A7)
00004426  222E 0008 7362          move.l  8(A6),D1
0000442A  202E 000C 7363          move.l  12(A6),D0
0000442E  4A80      7364          tst.l   D0
00004430  6A0A      7365          bpl.s   lmul_1
00004432  4480      7366          neg.l   D0
00004434  4A81      7367          tst.l   D1
00004436  6A0A      7368          bpl.s   lmul_2
00004438  4481      7369          neg.l   D1
0000443A  600E      7370          bra.s   lmul_3
                    7371   lmul_1:
0000443C  4A81      7372          tst.l   D1
0000443E  6A0A      7373          bpl.s   lmul_3
00004440  4481      7374          neg.l   D1
                    7375   lmul_2:
00004442  6114      7376          bsr.s   domul
00004444  4481      7377          neg.l   D1
00004446  4080      7378          negx.l  D0
00004448  6002      7379          bra.s   lmul_4
                    7380   lmul_3:
0000444A  610C      7381          bsr.s   domul
                    7382   lmul_4:
0000444C  2D41 0008 7383          move.l  D1,8(A6)
00004450  4CDF 0003 7384          movem.l (A7)+,D0/D1
00004454  4E5E      7385          unlk    A6
00004456  4E75      7386          rts
                    7387   domul:
00004458  0C81 0000 7388          cmpi.l  #$FFFF,D1
0000445C  FFFF      
0000445E  620C      7389          bhi.s   domul_1
00004460  0C80 0000 7390          cmpi.l  #$FFFF,D0
00004464  FFFF      
00004466  620E      7391          bhi.s   domul_2
00004468  C2C0      7392          mulu    D0,D1
0000446A  4E75      7393          rts
                    7394   domul_1:
0000446C  0C80 0000 7395          cmpi.l  #$FFFF,D0
00004470  FFFF      
00004472  6218      7396          bhi.s   domul_4
00004474  6002      7397          bra.s   domul_3
                    7398   domul_2
00004476  C141      7399          exg     D0,D1
                    7400   domul_3:
00004478  2F02      7401          move.l  D2,-(A7)
0000447A  2401      7402          move.l  D1,D2
0000447C  4842      7403          swap    D2
0000447E  C2C0      7404          mulu    D0,D1
00004480  C4C0      7405          mulu    D0,D2
00004482  4842      7406          swap    D2
00004484  4242      7407          clr.w   D2
00004486  D282      7408          add.l   D2,D1
00004488  241F      7409          move.l  (A7)+,D2
0000448A  4E75      7410          rts
                    7411   domul_4:
0000448C  48E7 3000 7412          movem.l D2/D3,-(A7)
00004490  2401      7413          move.l  D1,D2
00004492  2601      7414          move.l  D1,D3
00004494  C2C0      7415          mulu    D0,D1
00004496  4842      7416          swap    D2
00004498  C4C0      7417          mulu    D0,D2
0000449A  4840      7418          swap    D0
0000449C  C6C0      7419          mulu    D0,D3
0000449E  D483      7420          add.l   D3,D2
000044A0  4842      7421          swap    D2
000044A2  4242      7422          clr.w   D2
000044A4  D282      7423          add.l   D2,D1
000044A6  4CDF 000C 7424          movem.l (A7)+,D2/D3
000044AA  4E75      7425          rts
                    7426   _gets:
000044AC  4E56 0000 7427          link      A6,#0
000044B0  48E7 3820 7428          movem.l   D2/D3/D4/A2,-(A7)
000044B4  45F8 330A 7429          lea       _putch,A2
000044B8  282E 0008 7430          move.l    8(A6),D4
000044BC  2404      7431          move.l    D4,D2
                    7432   gets_1:
000044BE  6100 EE7A 7433          bsr       _getch
000044C2  2600      7434          move.l    D0,D3
000044C4  0C80 0000 7435          cmp.l     #10,D0
000044C8  000A      
000044CA  6700 003C 7436          beq       gets_3
000044CE  0C83 0000 7437          cmp.l     #8,D3
000044D2  0008      
000044D4  6712      7438          beq.s     gets_4
000044D6  2042      7439          move.l    D2,A0
000044D8  5282      7440          addq.l    #1,D2
000044DA  1083      7441          move.b    D3,(A0)
000044DC  4883      7442          ext.w     D3
000044DE  48C3      7443          ext.l     D3
000044E0  2F03      7444          move.l    D3,-(A7)
000044E2  4E92      7445          jsr       (A2)
000044E4  584F      7446          addq.w    #4,A7
000044E6  601E      7447          bra.s     gets_6
                    7448   gets_4:
000044E8  B484      7449          cmp.l     D4,D2
000044EA  631A      7450          bls.s     gets_6
000044EC  4878 0008 7451          pea       8
000044F0  4E92      7452          jsr       (A2)
000044F2  584F      7453          addq.w    #4,A7
000044F4  4878 0020 7454          pea       32
000044F8  4E92      7455          jsr       (A2)
000044FA  584F      7456          addq.w    #4,A7
000044FC  4878 0008 7457          pea       8
00004500  4E92      7458          jsr       (A2)
00004502  584F      7459          addq.w    #4,A7
00004504  5382      7460          subq.l    #1,D2
                    7461   gets_6:
00004506  60B6      7462          bra       gets_1
                    7463   gets_3:
00004508  4878 000A 7464          pea       10
0000450C  4E92      7465          jsr       (A2)
0000450E  584F      7466          addq.w    #4,A7
00004510  2042      7467          move.l    D2,A0
00004512  4210      7468          clr.b     (A0)
00004514  2004      7469          move.l    D4,D0
00004516  4CDF 041C 7470          movem.l   (A7)+,D2/D3/D4/A2
0000451A  4E5E      7471          unlk      A6
0000451C  4E75      7472          rts
                    7473   _ungetch:
0000451E  4E56 0000 7474          link      A6,#0
00004522  23EE 0008 7475          move.l    8(A6),__ungetbuf
00004526  0B00 00C0 
0000452A  202E 0008 7476          move.l    8(A6),D0
0000452E  4E5E      7477          unlk      A6
00004530  4E75      7478          rts
                    7479   @itoa_convert:
00004532  4E56 0000 7480          link      A6,#0
00004536  48E7 3C00 7481          movem.l   D2/D3/D4/D5,-(A7)
0000453A  242E 0008 7482          move.l    8(A6),D2
0000453E  262E 0010 7483          move.l    16(A6),D3
00004542  2A2E 000C 7484          move.l    12(A6),D5
00004546  2F05      7485          move.l    D5,-(A7)
00004548  2F03      7486          move.l    D3,-(A7)
0000454A  6100 ECE0 7487          bsr       ULDIV
0000454E  202F 0004 7488          move.l    4(A7),D0
00004552  504F      7489          addq.w    #8,A7
00004554  2800      7490          move.l    D0,D4
00004556  BA83      7491          cmp.l     D3,D5
00004558  651A      7492          blo.s     @itoa_convert_1
0000455A  2F03      7493          move.l    D3,-(A7)
0000455C  2F05      7494          move.l    D5,-(A7)
0000455E  2F03      7495          move.l    D3,-(A7)
00004560  6100 ECCA 7496          bsr       ULDIV
00004564  2217      7497          move.l    (A7),D1
00004566  504F      7498          addq.w    #8,A7
00004568  2F01      7499          move.l    D1,-(A7)
0000456A  2F02      7500          move.l    D2,-(A7)
0000456C  61C4      7501          bsr       @itoa_convert
0000456E  DEFC 000C 7502          add.w     #12,A7
00004572  2400      7503          move.l    D0,D2
                    7504   @itoa_convert_1:
00004574  0C84 0000 7505          cmp.l     #9,D4
00004578  0009      
0000457A  6E0A      7506          bgt.s     @itoa_convert_3
0000457C  2004      7507          move.l    D4,D0
0000457E  0680 0000 7508          add.l     #48,D0
00004582  0030      
00004584  600E      7509          bra.s     @itoa_convert_4
                    7510   @itoa_convert_3:
00004586  2004      7511          move.l    D4,D0
00004588  0680 0000 7512          add.l     #97,D0
0000458C  0061      
0000458E  0480 0000 7513          sub.l     #10,D0
00004592  000A      
                    7514   @itoa_convert_4:
00004594  2042      7515          move.l    D2,A0
00004596  1080      7516          move.b    D0,(A0)
00004598  2002      7517          move.l    D2,D0
0000459A  5280      7518          addq.l    #1,D0
0000459C  4CDF 003C 7519          movem.l   (A7)+,D2/D3/D4/D5
000045A0  4E5E      7520          unlk      A6
000045A2  4E75      7521          rts
                    7522   _ltoa:
000045A4  4E56 0000 7523          link      A6,#0
000045A8  48E7 3C00 7524          movem.l   D2/D3/D4/D5,-(A7)
000045AC  242E 0008 7525          move.l    8(A6),D2
000045B0  262E 000C 7526          move.l    12(A6),D3
000045B4  2A2E 0010 7527          move.l    16(A6),D5
000045B8  2803      7528          move.l    D3,D4
000045BA  0C85 0000 7529          cmp.l     #2,D5
000045BE  0002      
000045C0  6D08      7530          blt.s     ltoa_3
000045C2  0C85 0000 7531          cmp.l     #36,D5
000045C6  0024      
000045C8  6F06      7532          ble.s     ltoa_1
                    7533   ltoa_3:
000045CA  2003      7534          move.l    D3,D0
000045CC  6000 0052 7535          bra       ltoa_4
                    7536   ltoa_1:
000045D0  0C85 0000 7537          cmp.l     #10,D5
000045D4  000A      
000045D6  6600 0032 7538          bne       ltoa_5
000045DA  0C82 0000 7539          cmp.l     #0,D2
000045DE  0000      
000045E0  6C28      7540          bge.s     ltoa_5
000045E2  2002      7541          move.l    D2,D0
000045E4  4480      7542          neg.l     D0
000045E6  2400      7543          move.l    D0,D2
000045E8  0C82 0000 7544          cmp.l     #0,D2
000045EC  0000      
000045EE  6C12      7545          bge.s     ltoa_7
000045F0  4879 0000 7546          pea       @itoa_1
000045F4  5D4A      
000045F6  2F03      7547          move.l    D3,-(A7)
000045F8  6100 EC22 7548          bsr       _strcpy
000045FC  504F      7549          addq.w    #8,A7
000045FE  2003      7550          move.l    D3,D0
00004600  601E      7551          bra.s     ltoa_4
                    7552   ltoa_7:
00004602  2044      7553          move.l    D4,A0
00004604  5284      7554          addq.l    #1,D4
00004606  10BC 002D 7555          move.b    #45,(A0)
                    7556   ltoa_5:
0000460A  2F05      7557          move.l    D5,-(A7)
0000460C  2F02      7558          move.l    D2,-(A7)
0000460E  2F04      7559          move.l    D4,-(A7)
00004610  6100 FF20 7560          bsr       @itoa_convert
00004614  DEFC 000C 7561          add.w     #12,A7
00004618  2800      7562          move.l    D0,D4
0000461A  2044      7563          move.l    D4,A0
0000461C  4210      7564          clr.b     (A0)
0000461E  2003      7565          move.l    D3,D0
                    7566   ltoa_4:
00004620  4CDF 003C 7567          movem.l   (A7)+,D2/D3/D4/D5
00004624  4E5E      7568          unlk      A6
00004626  4E75      7569          rts
                    7570   _ultoa:
00004628  4E56 0000 7571          link      A6,#0
0000462C  48E7 3800 7572          movem.l   D2/D3/D4,-(A7)
00004630  262E 0010 7573          move.l    16(A6),D3
00004634  282E 000C 7574          move.l    12(A6),D4
00004638  2404      7575          move.l    D4,D2
0000463A  0C83 0000 7576          cmp.l     #2,D3
0000463E  0002      
00004640  6D08      7577          blt.s     ultoa_3
00004642  0C83 0000 7578          cmp.l     #36,D3
00004646  0024      
00004648  6F04      7579          ble.s     ultoa_1
                    7580   ultoa_3:
0000464A  2004      7581          move.l    D4,D0
0000464C  6018      7582          bra.s     ultoa_4
                    7583   ultoa_1:
0000464E  2F03      7584          move.l    D3,-(A7)
00004650  2F2E 0008 7585          move.l    8(A6),-(A7)
00004654  2F02      7586          move.l    D2,-(A7)
00004656  6100 FEDA 7587          bsr       @itoa_convert
0000465A  DEFC 000C 7588          add.w     #12,A7
0000465E  2400      7589          move.l    D0,D2
00004660  2042      7590          move.l    D2,A0
00004662  4210      7591          clr.b     (A0)
00004664  2004      7592          move.l    D4,D0
                    7593   ultoa_4:
00004666  4CDF 001C 7594          movem.l   (A7)+,D2/D3/D4
0000466A  4E5E      7595          unlk      A6
0000466C  4E75      7596          rts
                    7597   _itoa:
0000466E  4E56 0000 7598          link      A6,#0
00004672  2F2E 0010 7599          move.l    16(A6),-(A7)
00004676  2F2E 000C 7600          move.l    12(A6),-(A7)
0000467A  2F2E 0008 7601          move.l    8(A6),-(A7)
0000467E  6100 FF24 7602          bsr       _ltoa
00004682  DEFC 000C 7603          add.w     #12,A7
00004686  4E5E      7604          unlk      A6
00004688  4E75      7605          rts
                    7606   _strlen:
0000468A  206F 0004 7607          move.l    (4,A7),A0
0000468E  2248      7608          move.l    A0,A1
                    7609   strlen_1:
00004690  4A19      7610          tst.b     (A1)+
00004692  66FC      7611          bne       strlen_1
00004694  2009      7612          move.l    A1,D0
00004696  9088      7613          sub.l     A0,D0
00004698  5380      7614          subq.l    #1,D0
0000469A  4E75      7615          rts
                    7616          section   const
                    7617   
                    7618   @m68kde~1_1:
0000469C  0D0A 00   7619          dc.b      13,10,0
                    7620   @m68kde~1_2:
000046A0  0D53 7769 7621          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000046A4  7463 6865 
000046A8  7320 5357 
000046AC  5B        
000046AD  372D 305D 7622          dc.b      55,45,48,93,32,61,32,0
000046B1  203D 2000 
                    7623   @m68kde~1_3:
000046B6  3000      7624          dc.b      48,0
                    7625   @m68kde~1_4:
000046B8  3100      7626          dc.b      49,0
                    7627   @m68kde~1_5:
000046BA  0D0A 4475 7628          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000046BE  6D70 204D 
000046C2  656D 6F72 
000046C6  79        
000046C7  2042 6C6F 7629          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000046CB  636B 3A20 
000046CF  3C45 5343 
000046D3  3E20      
000046D5  746F 2041 7630          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
000046D9  626F 7274 
000046DD  2C20 3C53 
000046E1  50        
000046E2  4143 453E 7631          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
000046E6  2074 6F20 
000046EA  436F 6E74 
000046EE  69        
000046EF  6E75 6500 7632          dc.b      110,117,101,0
                    7633   @m68kde~1_6:
000046F4  0D0A 456E 7634          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000046F8  7465 7220 
000046FC  5374 6172 
00004700  74        
00004701  2041 6464 7635          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004705  7265 7373 
00004709  3A20 00   
                    7636   @m68kde~1_7:
0000470C  0D0A 2530 7637          dc.b      13,10,37,48,56,120,32,0
00004710  3878 2000 
                    7638   @m68kde~1_8:
00004714  2530 3258 7639          dc.b      37,48,50,88,0
00004718  00        
                    7640   @m68kde~1_9:
0000471A  2020 00   7641          dc.b      32,32,0
                    7642   @m68kde~1_10:
0000471E  0D0A 4669 7643          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004722  6C6C 204D 
00004726  656D 6F72 
0000472A  79        
0000472B  2042 6C6F 7644          dc.b      32,66,108,111,99,107,0
0000472F  636B 00   
                    7645   @m68kde~1_11:
00004732  0D0A 456E 7646          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004736  7465 7220 
0000473A  456E 6420 
0000473E  41        
0000473F  6464 7265 7647          dc.b      100,100,114,101,115,115,58,32,0
00004743  7373 3A20 
00004747  00        
                    7648   @m68kde~1_12:
00004748  0D0A 456E 7649          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
0000474C  7465 7220 
00004750  4669 6C6C 
00004754  20        
00004755  4461 7461 7650          dc.b      68,97,116,97,58,32,0
00004759  3A20 00   
                    7651   @m68kde~1_13:
0000475C  0D0A 4669 7652          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00004760  6C6C 696E 
00004764  6720 4164 
00004768  64        
00004769  7265 7373 7653          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000476D  6573 205B 
00004771  2425 3038 
00004775  58        
00004776  202D 2024 7654          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
0000477A  2530 3858 
0000477E  5D20 7769 
00004782  7468      
00004784  2024 2530 7655          dc.b      32,36,37,48,50,88,0
00004788  3258 00   
                    7656   @m68kde~1_14:
0000478C  0D0A 5573 7657          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00004790  6520 4879 
00004794  7065 7254 
00004798  65        
00004799  726D 696E 7658          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
0000479D  616C 2074 
000047A1  6F20 5365 
000047A5  6E64 2054 7659          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000047A9  6578 7420 
000047AD  4669 6C65 
000047B1  2028 2E68 7660          dc.b      32,40,46,104,101,120,41,13,10,0
000047B5  6578 290D 
000047B9  0A00      
                    7661   @m68kde~1_15:
000047BC  0D0A 4C6F 7662          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000047C0  6164 2046 
000047C4  6169 6C65 
000047C8  64        
000047C9  2061 7420 7663          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000047CD  4164 6472 
000047D1  6573 7320 
000047D5  3D        
000047D6  205B 2425 7664          dc.b      32,91,36,37,48,56,88,93,13,10,0
000047DA  3038 585D 
000047DE  0D0A 00   
                    7665   @m68kde~1_16:
000047E2  0D0A 5375 7666          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
000047E6  6363 6573 
000047EA  733A 2044 
000047EE  6F        
000047EF  776E 6C6F 7667          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
000047F3  6164 6564 
000047F7  2025 6420 
000047FB  6279 7465 7668          dc.b      98,121,116,101,115,13,10,0
000047FF  730D 0A00 
                    7669   @m68kde~1_17:
00004804  0D0A 4578 7670          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004808  616D 696E 
0000480C  6520 616E 
00004810  64        
00004811  2043 6861 7671          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004815  6E67 6520 
00004819  4D65 6D6F 
0000481D  72        
0000481E  7900      7672          dc.b      121,0
                    7673   @m68kde~1_18:
00004820  0D0A 3C45 7674          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004824  5343 3E20 
00004828  746F 2053 
0000482C  746F      
0000482E  702C 203C 7675          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004832  5350 4143 
00004836  453E 2074 
0000483A  6F20      
0000483C  4164 7661 7676          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00004840  6E63 652C 
00004844  2027 2D27 
00004848  2074      
0000484A  6F20 476F 7677          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
0000484E  2042 6163 
00004852  6B2C 203C 
00004856  4441      
00004858  5441 3E20 7678          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
0000485C  746F 2063 
00004860  6861 6E67 
00004864  65        
00004865  00        7679          dc.b      0
                    7680   @m68kde~1_19:
00004866  0D0A 456E 7681          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
0000486A  7465 7220 
0000486E  4164 6472 
00004872  65        
00004873  7373 3A20 7682          dc.b      115,115,58,32,0
00004877  00        
                    7683   @m68kde~1_20:
00004878  0D0A 5B25 7684          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
0000487C  3038 785D 
00004880  203A 2025 
00004884  3032 78   
00004887  2020 00   7685          dc.b      32,32,0
                    7686   @m68kde~1_21:
0000488A  0D0A 5761 7687          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
0000488E  726E 696E 
00004892  6720 4368 
00004896  61        
00004897  6E67 6520 7688          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
0000489B  4661 696C 
0000489F  6564 3A20 
000048A3  57        
000048A4  726F 7465 7689          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000048A8  205B 2530 
000048AC  3278 5D2C 
000048B0  20        
000048B1  5265 6164 7690          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000048B5  205B 2530 
000048B9  3278 5D00 
                    7691   @m68kde~1_22:
000048BE  0A45 7261 7692          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
000048C2  7369 6E67 
000048C6  2E2E 2E0A 
000048CA  00        
                    7693   @m68kde~1_23:
000048CC  0D0A 2050 7694          dc.b      13,10,32,80,114,111,103,114,97,109,109,105,110
000048D0  726F 6772 
000048D4  616D 6D69 
000048D8  6E        
000048D9  6720 436F 7695          dc.b      103,32,67,111,109,112,108,101,116,101,33,0
000048DD  6D70 6C65 
000048E1  7465 2100 
                    7696   @m68kde~1_24:
000048E6  0D0A 204C 7697          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
000048EA  6F61 6469 
000048EE  6E67 2050 
000048F2  72        
000048F3  6F67 7261 7698          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
000048F7  6D20 4672 
000048FB  6F6D 2053 
000048FF  50        
00004900  4920 466C 7699          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
00004904  6173 682E 
00004908  2E2E 2E00 
                    7700   @m68kde~1_25:
0000490C  0D0A 2052 7701          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
00004910  6561 6420 
00004914  4461 7461 
00004918  3A20      
0000491A  2530 3878 7702          dc.b      37,48,56,120,32,10,0
0000491E  200A 00   
                    7703   @m68kde~1_26:
00004922  4949 435F 7704          dc.b      73,73,67,95,67,82,83,82,32,84,114,97,110,115
00004926  4352 5352 
0000492A  2054 7261 
0000492E  6E73      
00004930  6D69 7420 7705          dc.b      109,105,116,32,40,66,105,110,97,114,121,41,58
00004934  2842 696E 
00004938  6172 7929 
0000493C  3A        
0000493D  2000      7706          dc.b      32,0
                    7707   @m68kde~1_27:
00004940  2564 00   7708          dc.b      37,100,0
                    7709   @m68kde~1_28:
00004944  0A00      7710          dc.b      10,0
                    7711   @m68kde~1_29:
00004946  0D0A 2041 7712          dc.b      13,10,32,65,67,75,32,82,101,99,101,105,118,101
0000494A  434B 2052 
0000494E  6563 6569 
00004952  7665      
00004954  640A 00   7713          dc.b      100,10,0
                    7714   @m68kde~1_30:
00004958  5365 6E74 7715          dc.b      83,101,110,116,32,83,108,97,118,101,32,65,100
0000495C  2053 6C61 
00004960  7665 2041 
00004964  64        
00004965  6472 6573 7716          dc.b      100,114,101,115,115,58,32,37,48,50,120,10,0
00004969  733A 2025 
0000496D  3032 780A 
00004971  00        
                    7717   @m68kde~1_31:
00004972  5365 6E74 7718          dc.b      83,101,110,116,32,85,112,112,101,114,32,77,101
00004976  2055 7070 
0000497A  6572 204D 
0000497E  65        
0000497F  6D6F 7279 7719          dc.b      109,111,114,121,32,66,121,116,101,58,32,37,48
00004983  2042 7974 
00004987  653A 2025 
0000498B  30        
0000498C  3278 0A00 7720          dc.b      50,120,10,0
                    7721   @m68kde~1_32:
00004990  5365 6E74 7722          dc.b      83,101,110,116,32,76,111,119,101,114,32,77,101
00004994  204C 6F77 
00004998  6572 204D 
0000499C  65        
0000499D  6D6F 7279 7723          dc.b      109,111,114,121,32,66,121,116,101,58,32,37,48
000049A1  2042 7974 
000049A5  653A 2025 
000049A9  30        
000049AA  3278 0A00 7724          dc.b      50,120,10,0
                    7725   @m68kde~1_33:
000049AE  5365 6E74 7726          dc.b      83,101,110,116,32,68,97,116,97,58,32,37,48,50
000049B2  2044 6174 
000049B6  613A 2025 
000049BA  3032      
000049BC  780A 00   7727          dc.b      120,10,0
                    7728   @m68kde~1_34:
000049C0  5365 6E74 7729          dc.b      83,101,110,116,32,83,116,111,112,32,67,111,110
000049C4  2053 746F 
000049C8  7020 436F 
000049CC  6E        
000049CD  6469 7469 7730          dc.b      100,105,116,105,111,110,0
000049D1  6F6E 00   
                    7731   @m68kde~1_35:
000049D4  0D0A 4932 7732          dc.b      13,10,73,50,67,32,66,121,116,101,32,87,114,105
000049D8  4320 4279 
000049DC  7465 2057 
000049E0  7269      
000049E2  7465 2043 7733          dc.b      116,101,32,67,111,109,112,108,101,116,101,10
000049E6  6F6D 706C 
000049EA  6574 650A 
000049EE  00        7734          dc.b      0
                    7735   @m68kde~1_36:
000049F0  5365 6E64 7736          dc.b      83,101,110,100,105,110,103,32,83,108,97,118
000049F4  696E 6720 
000049F8  536C 6176 
000049FC  6520 4164 7737          dc.b      101,32,65,100,100,114,101,115,115,58,32,37,48
00004A00  6472 6573 
00004A04  733A 2025 
00004A08  30        
00004A09  3278 0A00 7738          dc.b      50,120,10,0
                    7739   @m68kde~1_37:
00004A0E  5365 6E74 7740          dc.b      83,101,110,116,32,83,116,97,114,116,32,67,111
00004A12  2053 7461 
00004A16  7274 2043 
00004A1A  6F        
00004A1B  6E64 6974 7741          dc.b      110,100,105,116,105,111,110,32,119,105,116,104
00004A1F  696F 6E20 
00004A23  7769 7468 
00004A27  2052 6561 7742          dc.b      32,82,101,97,100,32,66,105,116,32,83,101,116
00004A2B  6420 4269 
00004A2F  7420 5365 
00004A33  74        
00004A34  0A00      7743          dc.b      10,0
                    7744   @m68kde~1_38:
00004A36  5365 6E74 7745          dc.b      83,101,110,116,32,83,108,97,118,101,32,65,100
00004A3A  2053 6C61 
00004A3E  7665 2041 
00004A42  64        
00004A43  6472 6573 7746          dc.b      100,114,101,115,115,32,119,105,116,104,32,82
00004A47  7320 7769 
00004A4B  7468 2052 
00004A4F  6561 6420 7747          dc.b      101,97,100,32,66,105,116,32,83,101,116,58,32
00004A53  4269 7420 
00004A57  5365 743A 
00004A5B  20        
00004A5C  2530 3278 7748          dc.b      37,48,50,120,10,0
00004A60  0A00      
                    7749   @m68kde~1_39:
00004A62  5365 6E74 7750          dc.b      83,101,110,116,32,83,116,111,112,32,67,111,110
00004A66  2053 746F 
00004A6A  7020 436F 
00004A6E  6E        
00004A6F  6469 7469 7751          dc.b      100,105,116,105,111,110,10,0
00004A73  6F6E 0A00 
                    7752   @m68kde~1_40:
00004A78  0D0A 2044 7753          dc.b      13,10,32,68,97,116,97,32,82,101,97,100,58,32
00004A7C  6174 6120 
00004A80  5265 6164 
00004A84  3A20      
00004A86  2530 3278 7754          dc.b      37,48,50,120,0
00004A8A  00        
                    7755   @m68kde~1_41:
00004A8C  0D0A 2049 7756          dc.b      13,10,32,73,50,67,32,84,101,115,116,0
00004A90  3243 2054 
00004A94  6573 7400 
                    7757   @m68kde~1_42:
00004A98  0D0A 2053 7758          dc.b      13,10,32,83,116,97,114,116,105,110,103,32,69
00004A9C  7461 7274 
00004AA0  696E 6720 
00004AA4  45        
00004AA5  4550 524F 7759          dc.b      69,80,82,79,77,32,87,114,105,116,101,58,32,87
00004AA9  4D20 5772 
00004AAD  6974 653A 
00004AB1  2057      
00004AB3  7269 7469 7760          dc.b      114,105,116,105,110,103,32,48,120,37,46,50,120
00004AB7  6E67 2030 
00004ABB  7825 2E32 
00004ABF  78        
00004AC0  2074 6F20 7761          dc.b      32,116,111,32,97,100,100,114,101,115,115,32
00004AC4  6164 6472 
00004AC8  6573 7320 
00004ACC  3078 3030 7762          dc.b      48,120,48,48,10,0
00004AD0  0A00      
                    7763   @m68kde~1_43:
00004AD2  0D0A 4669 7764          dc.b      13,10,70,105,110,105,115,104,101,100,32,119
00004AD6  6E69 7368 
00004ADA  6564 2077 
00004ADE  7269 7465 7765          dc.b      114,105,116,101,44,32,83,116,97,114,116,105
00004AE2  2C20 5374 
00004AE6  6172 7469 
00004AEA  6E67 2045 7766          dc.b      110,103,32,69,69,80,82,79,77,32,82,101,97,100
00004AEE  4550 524F 
00004AF2  4D20 5265 
00004AF6  6164      
00004AF8  0A00      7767          dc.b      10,0
                    7768   @m68kde~1_44:
00004AFA  0D0A 2041 7769          dc.b      13,10,32,65,100,100,114,101,115,115,58,32,37
00004AFE  6464 7265 
00004B02  7373 3A20 
00004B06  25        
00004B07  643A 2025 7770          dc.b      100,58,32,37,100,10,0
00004B0B  640A 00   
                    7771   @m68kde~1_45:
00004B0E  2425 3038 7772          dc.b      36,37,48,56,88,32,32,0
00004B12  5820 2000 
                    7773   @m68kde~1_46:
00004B16  2000      7774          dc.b      32,0
                    7775   @m68kde~1_47:
00004B18  2E00      7776          dc.b      46,0
                    7777   @m68kde~1_48:
00004B1A  2563 00   7778          dc.b      37,99,0
                    7779   @m68kde~1_49:
00004B1E  00        7780          dc.b      0
                    7781   @m68kde~1_50:
00004B20  0D0A 0D0A 7782          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004B24  2044 3020 
00004B28  3D20 2425 
00004B2C  3038 58   
00004B2F  2020 4130 7783          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004B33  203D 2024 
00004B37  2530 3858 
00004B3B  00        
                    7784   @m68kde~1_51:
00004B3C  0D0A 2044 7785          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004B40  3120 3D20 
00004B44  2425 3038 
00004B48  5820 20   
00004B4B  4131 203D 7786          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004B4F  2024 2530 
00004B53  3858 00   
                    7787   @m68kde~1_52:
00004B56  0D0A 2044 7788          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004B5A  3220 3D20 
00004B5E  2425 3038 
00004B62  5820 20   
00004B65  4132 203D 7789          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004B69  2024 2530 
00004B6D  3858 00   
                    7790   @m68kde~1_53:
00004B70  0D0A 2044 7791          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004B74  3320 3D20 
00004B78  2425 3038 
00004B7C  5820 20   
00004B7F  4133 203D 7792          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004B83  2024 2530 
00004B87  3858 00   
                    7793   @m68kde~1_54:
00004B8A  0D0A 2044 7794          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004B8E  3420 3D20 
00004B92  2425 3038 
00004B96  5820 20   
00004B99  4134 203D 7795          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004B9D  2024 2530 
00004BA1  3858 00   
                    7796   @m68kde~1_55:
00004BA4  0D0A 2044 7797          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004BA8  3520 3D20 
00004BAC  2425 3038 
00004BB0  5820 20   
00004BB3  4135 203D 7798          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004BB7  2024 2530 
00004BBB  3858 00   
                    7799   @m68kde~1_56:
00004BBE  0D0A 2044 7800          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004BC2  3620 3D20 
00004BC6  2425 3038 
00004BCA  5820 20   
00004BCD  4136 203D 7801          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004BD1  2024 2530 
00004BD5  3858 00   
                    7802   @m68kde~1_57:
00004BD8  0D0A 2044 7803          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004BDC  3720 3D20 
00004BE0  2425 3038 
00004BE4  5820 20   
00004BE7  4137 203D 7804          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004BEB  2024 2530 
00004BEF  3858 00   
                    7805   @m68kde~1_58:
00004BF2  0D0A 0D0A 7806          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004BF6  5553 5020 
00004BFA  3D20 2425 
00004BFE  3038 58   
00004C01  2020 2841 7807          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004C05  3729 2055 
00004C09  7365 7220 
00004C0D  5350      
00004C0F  00        7808          dc.b      0
                    7809   @m68kde~1_59:
00004C10  0D0A 5353 7810          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004C14  5020 3D20 
00004C18  2425 3038 
00004C1C  5820 20   
00004C1F  2841 3729 7811          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004C23  2053 7570 
00004C27  6572 7669 
00004C2B  73        
00004C2C  6F72 2053 7812          dc.b      111,114,32,83,80,0
00004C30  5000      
                    7813   @m68kde~1_60:
00004C32  0D0A 2053 7814          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004C36  5220 3D20 
00004C3A  2425 3034 
00004C3E  5820 20   
00004C41  2000      7815          dc.b      32,0
                    7816   @m68kde~1_61:
00004C44  2020 205B 7817          dc.b      32,32,32,91,0
00004C48  00        
                    7818   @m68kde~1_62:
00004C4A  0D0A 2050 7819          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004C4E  4320 3D20 
00004C52  2425 3038 
00004C56  5820 20   
00004C59  00        7820          dc.b      0
                    7821   @m68kde~1_63:
00004C5A  5B40 2042 7822          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004C5E  5245 414B 
00004C62  504F 494E 
00004C66  545D 00   
                    7823   @m68kde~1_64:
00004C6A  0D0A 5750 7824          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004C6E  2564 203D 
00004C72  2025 7300 
                    7825   @m68kde~1_65:
00004C76  0D0A 0D0A 7826          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004C7A  0D0A 0D0A 
00004C7E  0D0A 0D0A 
00004C82  5369 6E   
00004C85  676C 6520 7827          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004C89  5374 6570 
00004C8D  2020 3A5B 
00004C91  4F        
00004C92  4E5D 00   7828          dc.b      78,93,0
                    7829   @m68kde~1_66:
00004C96  0D0A 4272 7830          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004C9A  6561 6B20 
00004C9E  506F 696E 
00004CA2  74        
00004CA3  7320 3A5B 7831          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004CA7  4469 7361 
00004CAB  626C 6564 
00004CAF  5D        
00004CB0  00        7832          dc.b      0
                    7833   @m68kde~1_67:
00004CB2  0D0A 5072 7834          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004CB6  6573 7320 
00004CBA  3C53 5041 
00004CBE  4345      
00004CC0  3E20 746F 7835          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004CC4  2045 7865 
00004CC8  6375 7465 
00004CCC  20        
00004CCD  4E65 7874 7836          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004CD1  2049 6E73 
00004CD5  7472 7563 
00004CD9  7469 6F6E 7837          dc.b      116,105,111,110,0
00004CDD  00        
                    7838   @m68kde~1_68:
00004CDE  0D0A 5072 7839          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004CE2  6573 7320 
00004CE6  3C45 5343 
00004CEA  3E20      
00004CEC  746F 2052 7840          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004CF0  6573 756D 
00004CF4  6520 5072 
00004CF8  6F67 7261 7841          dc.b      111,103,114,97,109,0
00004CFC  6D00      
                    7842   @m68kde~1_69:
00004CFE  0D0A 496C 7843          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004D02  6C65 6761 
00004D06  6C20 4461 
00004D0A  74        
00004D0B  6120 5265 7844          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004D0F  6769 7374 
00004D13  6572 203A 
00004D17  20        
00004D18  5573 6520 7845          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004D1C  4430 2D44 
00004D20  372E 2E2E 
00004D24  2E2E      
00004D26  0D0A 00   7846          dc.b      13,10,0
                    7847   @m68kde~1_70:
00004D2A  0D0A 4425 7848          dc.b      13,10,68,37,99,32,61,32,0
00004D2E  6320 3D20 
00004D32  00        
                    7849   @m68kde~1_71:
00004D34  0D0A 496C 7850          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004D38  6C65 6761 
00004D3C  6C20 4164 
00004D40  64        
00004D41  7265 7373 7851          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004D45  2052 6567 
00004D49  6973 7465 
00004D4D  7220 3A20 7852          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004D51  5573 6520 
00004D55  4130 2D41 
00004D59  372E      
00004D5B  2E2E 2E2E 7853          dc.b      46,46,46,46,13,10,0
00004D5F  0D0A 00   
                    7854   @m68kde~1_72:
00004D62  0D0A 4125 7855          dc.b      13,10,65,37,99,32,61,32,0
00004D66  6320 3D20 
00004D6A  00        
                    7856   @m68kde~1_73:
00004D6C  0D0A 5573 7857          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004D70  6572 2053 
00004D74  5020 3D20 
00004D78  00        
                    7858   @m68kde~1_74:
00004D7A  0D0A 496C 7859          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004D7E  6C65 6761 
00004D82  6C20 5265 
00004D86  67        
00004D87  6973 7465 7860          dc.b      105,115,116,101,114,46,46,46,46,0
00004D8B  722E 2E2E 
00004D8F  2E00      
                    7861   @m68kde~1_75:
00004D92  0D0A 5379 7862          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004D96  7374 656D 
00004D9A  2053 5020 
00004D9E  3D        
00004D9F  2000      7863          dc.b      32,0
                    7864   @m68kde~1_76:
00004DA2  0D0A 5043 7865          dc.b      13,10,80,67,32,61,32,0
00004DA6  203D 2000 
                    7866   @m68kde~1_77:
00004DAA  0D0A 5352 7867          dc.b      13,10,83,82,32,61,32,0
00004DAE  203D 2000 
                    7868   @m68kde~1_78:
00004DB2  0D0A 496C 7869          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004DB6  6C65 6761 
00004DBA  6C20 5265 
00004DBE  67        
00004DBF  6973 7465 7870          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004DC3  723A 2055 
00004DC7  7365 2041 
00004DCB  30        
00004DCC  2D41 372C 7871          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004DD0  2044 302D 
00004DD4  4437 2C20 
00004DD8  5353 50   
00004DDB  2C20 5553 7872          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004DDF  502C 2050 
00004DE3  4320 6F72 
00004DE7  2053      
00004DE9  520D 0A00 7873          dc.b      82,13,10,0
                    7874   @m68kde~1_79:
00004DEE  0D0A 0D0A 7875          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004DF2  4E75 6D20 
00004DF6  2020 2020 
00004DFA  4164      
00004DFC  6472 6573 7876          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004E00  7320 2020 
00004E04  2020 2049 
00004E08  6E        
00004E09  7374 7275 7877          dc.b      115,116,114,117,99,116,105,111,110,0
00004E0D  6374 696F 
00004E11  6E00      
                    7878   @m68kde~1_80:
00004E14  0D0A 2D2D 7879          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004E18  2D20 2020 
00004E1C  2020 2D2D 
00004E20  2D2D 2D   
00004E23  2D2D 2D2D 7880          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004E27  2020 2020 
00004E2B  2D2D 2D2D 
00004E2F  2D2D 2D   
00004E32  2D2D 2D2D 7881          dc.b      45,45,45,45,0
00004E36  00        
                    7882   @m68kde~1_81:
00004E38  0D0A 4E6F 7883          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004E3C  2042 7265 
00004E40  616B 506F 
00004E44  69        
00004E45  6E74 7320 7884          dc.b      110,116,115,32,83,101,116,0
00004E49  5365 7400 
                    7885   @m68kde~1_82:
00004E4E  0D0A 2533 7886          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004E52  6420 2020 
00004E56  2020 2425 
00004E5A  3038 78   
00004E5D  00        7887          dc.b      0
                    7888   @m68kde~1_83:
00004E5E  0D0A 4E75 7889          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004E62  6D20 2020 
00004E66  2020 4164 
00004E6A  6472      
00004E6C  6573 7300 7890          dc.b      101,115,115,0
                    7891   @m68kde~1_84:
00004E70  0D0A 2D2D 7892          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004E74  2D20 2020 
00004E78  2020 2D2D 
00004E7C  2D2D 2D   
00004E7F  2D2D 2D2D 7893          dc.b      45,45,45,45,0
00004E83  00        
                    7894   @m68kde~1_85:
00004E84  0D0A 4E6F 7895          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004E88  2057 6174 
00004E8C  6368 506F 
00004E90  69        
00004E91  6E74 7320 7896          dc.b      110,116,115,32,83,101,116,0
00004E95  5365 7400 
                    7897   @m68kde~1_86:
00004E9A  0D0A 456E 7898          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004E9E  7465 7220 
00004EA2  4272 6561 
00004EA6  6B        
00004EA7  2050 6F69 7899          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004EAB  6E74 204E 
00004EAF  756D 6265 
00004EB3  72        
00004EB4  3A20 00   7900          dc.b      58,32,0
                    7901   @m68kde~1_87:
00004EB8  0D0A 496C 7902          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004EBC  6C65 6761 
00004EC0  6C20 5261 
00004EC4  6E        
00004EC5  6765 203A 7903          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004EC9  2055 7365 
00004ECD  2030 202D 
00004ED1  2037      
00004ED3  00        7904          dc.b      0
                    7905   @m68kde~1_88:
00004ED4  0D0A 4272 7906          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004ED8  6561 6B20 
00004EDC  506F 696E 
00004EE0  74        
00004EE1  2043 6C65 7907          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004EE5  6172 6564 
00004EE9  2E2E 2E2E 
00004EED  2E        
00004EEE  0D0A 00   7908          dc.b      13,10,0
                    7909   @m68kde~1_89:
00004EF2  0D0A 4272 7910          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004EF6  6561 6B20 
00004EFA  506F 696E 
00004EFE  74        
00004EFF  2077 6173 7911          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004F03  6E27 7420 
00004F07  5365 742E 
00004F0B  2E        
00004F0C  2E2E 2E00 7912          dc.b      46,46,46,0
                    7913   @m68kde~1_90:
00004F10  0D0A 456E 7914          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004F14  7465 7220 
00004F18  5761 7463 
00004F1C  68        
00004F1D  2050 6F69 7915          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004F21  6E74 204E 
00004F25  756D 6265 
00004F29  72        
00004F2A  3A20 00   7916          dc.b      58,32,0
                    7917   @m68kde~1_91:
00004F2E  0D0A 5761 7918          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004F32  7463 6820 
00004F36  506F 696E 
00004F3A  74        
00004F3B  2043 6C65 7919          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004F3F  6172 6564 
00004F43  2E2E 2E2E 
00004F47  2E        
00004F48  0D0A 00   7920          dc.b      13,10,0
                    7921   @m68kde~1_92:
00004F4C  0D0A 5761 7922          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004F50  7463 6820 
00004F54  506F 696E 
00004F58  74        
00004F59  2057 6173 7923          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004F5D  206E 6F74 
00004F61  2053 6574 
00004F65  2E        
00004F66  2E2E 2E2E 7924          dc.b      46,46,46,46,0
00004F6A  00        
                    7925   @m68kde~1_93:
00004F6C  0D0A 4E6F 7926          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004F70  2046 5245 
00004F74  4520 4272 
00004F78  6561      
00004F7A  6B20 506F 7927          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004F7E  696E 7473 
00004F82  2E2E 2E2E 
00004F86  2E        
00004F87  00        7928          dc.b      0
                    7929   @m68kde~1_94:
00004F88  0D0A 4272 7930          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004F8C  6561 6B20 
00004F90  506F 696E 
00004F94  74        
00004F95  2041 6464 7931          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004F99  7265 7373 
00004F9D  3A20 00   
                    7932   @m68kde~1_95:
00004FA0  0D0A 4572 7933          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004FA4  726F 7220 
00004FA8  3A20 4272 
00004FAC  65        
00004FAD  616B 2050 7934          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004FB1  6F69 6E74 
00004FB5  7320 4341 
00004FB9  4E        
00004FBA  4E4F 5420 7935          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004FBE  6265 2073 
00004FC2  6574 2061 
00004FC6  74        
00004FC7  204F 4444 7936          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004FCB  2061 6464 
00004FCF  7265 7373 
00004FD3  65        
00004FD4  7300      7937          dc.b      115,0
                    7938   @m68kde~1_96:
00004FD6  0D0A 4572 7939          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004FDA  726F 7220 
00004FDE  3A20 4272 
00004FE2  65        
00004FE3  616B 2050 7940          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004FE7  6F69 6E74 
00004FEB  7320 4341 
00004FEF  4E        
00004FF0  4E4F 5420 7941          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004FF4  6265 2073 
00004FF8  6574 2066 
00004FFC  6F        
00004FFD  7220 524F 7942          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00005001  4D20 696E 
00005005  2052 616E 
00005009  67        
0000500A  6520 3A20 7943          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
0000500E  5B24 302D 
00005012  2430 3030 
00005016  3037 46   
00005019  4646 5D00 7944          dc.b      70,70,93,0
                    7945   @m68kde~1_97:
0000501E  0D0A 4572 7946          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00005022  726F 723A 
00005026  2042 7265 
0000502A  61        
0000502B  6B20 506F 7947          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
0000502F  696E 7420 
00005033  416C 7265 
00005037  6164 7920 7948          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
0000503B  4578 6973 
0000503F  7473 2061 
00005043  74        
00005044  2041 6464 7949          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00005048  7265 7373 
0000504C  203A 2025 
00005050  30        
00005051  3878 0D0A 7950          dc.b      56,120,13,10,0
00005055  00        
                    7951   @m68kde~1_98:
00005056  0D0A 4272 7952          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000505A  6561 6B20 
0000505E  506F 696E 
00005062  74        
00005063  2053 6574 7953          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005067  2061 7420 
0000506B  4164 6472 
0000506F  65        
00005070  7373 3A20 7954          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005074  5B24 2530 
00005078  3878 5D00 
                    7955   @m68kde~1_99:
0000507C  0D0A 4E6F 7956          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00005080  2046 5245 
00005084  4520 5761 
00005088  7463      
0000508A  6820 506F 7957          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
0000508E  696E 7473 
00005092  2E2E 2E2E 
00005096  2E        
00005097  00        7958          dc.b      0
                    7959   @m68kde~1_100:
00005098  0D0A 5761 7960          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000509C  7463 6820 
000050A0  506F 696E 
000050A4  74        
000050A5  2041 6464 7961          dc.b      32,65,100,100,114,101,115,115,58,32,0
000050A9  7265 7373 
000050AD  3A20 00   
                    7962   @m68kde~1_101:
000050B0  0D0A 4572 7963          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000050B4  726F 723A 
000050B8  2057 6174 
000050BC  63        
000050BD  6820 506F 7964          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000050C1  696E 7420 
000050C5  416C 7265 
000050C9  6164 7920 7965          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000050CD  5365 7420 
000050D1  6174 2041 
000050D5  64        
000050D6  6472 6573 7966          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000050DA  7320 3A20 
000050DE  2530 3878 
000050E2  0D        
000050E3  0A00      7967          dc.b      10,0
                    7968   @m68kde~1_102:
000050E6  0D0A 5761 7969          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000050EA  7463 6820 
000050EE  506F 696E 
000050F2  74        
000050F3  2053 6574 7970          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000050F7  2061 7420 
000050FB  4164 6472 
000050FF  65        
00005100  7373 3A20 7971          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005104  5B24 2530 
00005108  3878 5D00 
                    7972   @m68kde~1_103:
0000510C  0D0A 0D0A 7973          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00005110  0D0A 0D0A 
00005114  4042 5245 
00005118  414B 50   
0000511B  4F49 4E54 7974          dc.b      79,73,78,84,0
0000511F  00        
                    7975   @m68kde~1_104:
00005120  0D0A 5369 7976          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005124  6E67 6C65 
00005128  2053 7465 
0000512C  70        
0000512D  203A 205B 7977          dc.b      32,58,32,91,79,78,93,0
00005131  4F4E 5D00 
                    7978   @m68kde~1_105:
00005136  0D0A 4272 7979          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
0000513A  6561 6B50 
0000513E  6F69 6E74 
00005142  73        
00005143  203A 205B 7980          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00005147  456E 6162 
0000514B  6C65 645D 
0000514F  00        
                    7981   @m68kde~1_106:
00005150  0D0A 5072 7982          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005154  6573 7320 
00005158  3C45 5343 
0000515C  3E20      
0000515E  746F 2052 7983          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005162  6573 756D 
00005166  6520 5573 
0000516A  6572 2050 7984          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
0000516E  726F 6772 
00005172  616D 0D0A 
00005176  00        
                    7985   @m68kde~1_107:
00005178  0D0A 556E 7986          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
0000517C  6B6E 6F77 
00005180  6E20 436F 
00005184  6D        
00005185  6D61 6E64 7987          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00005189  2E2E 2E2E 
0000518D  2E0D 0A00 
                    7988   @m68kde~1_108:
00005192  0D0A 5072 7989          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00005196  6F67 7261 
0000519A  6D20 456E 
0000519E  64        
0000519F  6564 2028 7990          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000051A3  5452 4150 
000051A7  2023 3135 
000051AB  292E      
000051AD  2E2E 2E00 7991          dc.b      46,46,46,0
                    7992   @m68kde~1_109:
000051B2  0D0A 4B69 7993          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000051B6  6C6C 2041 
000051BA  6C6C 2042 
000051BE  72        
000051BF  6561 6B20 7994          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000051C3  506F 696E 
000051C7  7473 2E2E 
000051CB  2E        
000051CC  2879 2F6E 7995          dc.b      40,121,47,110,41,63,0
000051D0  293F 00   
                    7996   @m68kde~1_110:
000051D4  0D0A 4B69 7997          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000051D8  6C6C 2041 
000051DC  6C6C 2057 
000051E0  61        
000051E1  7463 6820 7998          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
000051E5  506F 696E 
000051E9  7473 2E2E 
000051ED  2E        
000051EE  2879 2F6E 7999          dc.b      40,121,47,110,41,63,0
000051F2  293F 00   
                    8000   @m68kde~1_111:
000051F6  0D0A 2D2D 8001          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000051FA  2D2D 2D2D 
000051FE  2D2D 2D2D 
00005202  2D2D 2D   
00005205  2D2D 2D2D 8002          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005209  2D2D 2D2D 
0000520D  2D2D 2D2D 
00005211  2D2D 2D   
00005214  2D2D 2D2D 8003          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005218  2D2D 2D2D 
0000521C  2D2D 2D2D 
00005220  2D2D 2D   
00005223  2D2D 2D2D 8004          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005227  2D2D 2D2D 
0000522B  2D2D 2D2D 
0000522F  2D2D 2D   
00005232  2D2D 2D2D 8005          dc.b      45,45,45,45,45,45,0
00005236  2D2D 00   
                    8006   @m68kde~1_112:
0000523A  0D0A 2020 8007          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
0000523E  4465 6275 
00005242  6767 6572 
00005246  20        
00005247  436F 6D6D 8008          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
0000524B  616E 6420 
0000524F  5375 6D6D 
00005253  6172 7900 8009          dc.b      97,114,121,0
                    8010   @m68kde~1_113:
00005258  0D0A 2020 8011          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
0000525C  2E28 7265 
00005260  6729 2020 
00005264  2020      
00005266  2020 202D 8012          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
0000526A  2043 6861 
0000526E  6E67 6520 
00005272  5265      
00005274  6769 7374 8013          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00005278  6572 733A 
0000527C  2065 2E67 
00005280  2041 302D 8014          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00005284  4137 2C44 
00005288  302D 4437 
0000528C  2C50 43   
0000528F  2C53 5350 8015          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00005293  2C55 5350 
00005297  2C53 5200 
                    8016   @m68kde~1_114:
0000529C  0D0A 2020 8017          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
000052A0  4244 2F42 
000052A4  532F 4243 
000052A8  2F42 4B   
000052AB  2020 2D20 8018          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000052AF  4272 6561 
000052B3  6B20 506F 
000052B7  69        
000052B8  6E74 3A20 8019          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000052BC  4469 7370 
000052C0  6C61 792F 
000052C4  53        
000052C5  6574 2F43 8020          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000052C9  6C65 6172 
000052CD  2F4B 696C 
000052D1  6C        
000052D2  00        8021          dc.b      0
                    8022   @m68kde~1_115:
000052D4  0D0A 2020 8023          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000052D8  4320 2020 
000052DC  2020 2020 
000052E0  2020 20   
000052E3  2020 2D20 8024          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000052E7  436F 7079 
000052EB  2050 726F 
000052EF  67        
000052F0  7261 6D20 8025          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
000052F4  6672 6F6D 
000052F8  2046 6C61 
000052FC  73        
000052FD  6820 746F 8026          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00005301  204D 6169 
00005305  6E20 4D65 
00005309  6D        
0000530A  6F72 7900 8027          dc.b      111,114,121,0
                    8028   @m68kde~1_116:
0000530E  0D0A 2020 8029          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00005312  4420 2020 
00005316  2020 2020 
0000531A  2020 20   
0000531D  2020 2D20 8030          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00005321  4475 6D70 
00005325  204D 656D 
00005329  6F        
0000532A  7279 2043 8031          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
0000532E  6F6E 7465 
00005332  6E74 7320 
00005336  746F 2053 8032          dc.b      116,111,32,83,99,114,101,101,110,0
0000533A  6372 6565 
0000533E  6E00      
                    8033   @m68kde~1_117:
00005340  0D0A 2020 8034          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00005344  4520 2020 
00005348  2020 2020 
0000534C  2020 20   
0000534F  2020 2D20 8035          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00005353  456E 7465 
00005357  7220 5374 
0000535B  72        
0000535C  696E 6720 8036          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00005360  696E 746F 
00005364  204D 656D 
00005368  6F72 7900 8037          dc.b      111,114,121,0
                    8038   @m68kde~1_118:
0000536C  0D0A 2020 8039          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00005370  4620 2020 
00005374  2020 2020 
00005378  2020 20   
0000537B  2020 2D20 8040          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
0000537F  4669 6C6C 
00005383  204D 656D 
00005387  6F        
00005388  7279 2077 8041          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
0000538C  6974 6820 
00005390  4461 7461 
00005394  00        
                    8042   @m68kde~1_119:
00005396  0D0A 2020 8043          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
0000539A  4720 2020 
0000539E  2020 2020 
000053A2  2020 20   
000053A5  2020 2D20 8044          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000053A9  476F 2050 
000053AD  726F 6772 
000053B1  61        
000053B2  6D20 5374 8045          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000053B6  6172 7469 
000053BA  6E67 2061 
000053BE  74        
000053BF  2041 6464 8046          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
000053C3  7265 7373 
000053C7  3A20 2425 
000053CB  30        
000053CC  3858 00   8047          dc.b      56,88,0
                    8048   @m68kde~1_120:
000053D0  0D0A 2020 8049          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000053D4  4C20 2020 
000053D8  2020 2020 
000053DC  2020 20   
000053DF  2020 2D20 8050          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000053E3  4C6F 6164 
000053E7  2050 726F 
000053EB  67        
000053EC  7261 6D20 8051          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000053F0  282E 4845 
000053F4  5820 6669 
000053F8  6C        
000053F9  6529 2066 8052          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
000053FD  726F 6D20 
00005401  4C61 7074 
00005405  6F        
00005406  7000      8053          dc.b      112,0
                    8054   @m68kde~1_121:
00005408  0D0A 2020 8055          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
0000540C  4D20 2020 
00005410  2020 2020 
00005414  2020 20   
00005417  2020 2D20 8056          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000541B  4D65 6D6F 
0000541F  7279 2045 
00005423  78        
00005424  616D 696E 8057          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00005428  6520 616E 
0000542C  6420 4368 
00005430  61        
00005431  6E67 6500 8058          dc.b      110,103,101,0
                    8059   @m68kde~1_122:
00005436  0D0A 2020 8060          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
0000543A  5020 2020 
0000543E  2020 2020 
00005442  2020 20   
00005445  2020 2D20 8061          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00005449  5072 6F67 
0000544D  7261 6D20 
00005451  46        
00005452  6C61 7368 8062          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00005456  204D 656D 
0000545A  6F72 7920 
0000545E  7769 7468 8063          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00005462  2055 7365 
00005466  7220 5072 
0000546A  6F67 7261 8064          dc.b      111,103,114,97,109,0
0000546E  6D00      
                    8065   @m68kde~1_123:
00005470  0D0A 2020 8066          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00005474  5220 2020 
00005478  2020 2020 
0000547C  2020 20   
0000547F  2020 2D20 8067          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00005483  4469 7370 
00005487  6C61 7920 
0000548B  36        
0000548C  3830 3030 8068          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00005490  2052 6567 
00005494  6973 7465 
00005498  72        
00005499  7300      8069          dc.b      115,0
                    8070   @m68kde~1_124:
0000549C  0D0A 2020 8071          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000054A0  5320 2020 
000054A4  2020 2020 
000054A8  2020 20   
000054AB  2020 2D20 8072          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000054AF  546F 6767 
000054B3  6C65 204F 
000054B7  4E        
000054B8  2F4F 4646 8073          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
000054BC  2053 696E 
000054C0  676C 6520 
000054C4  53        
000054C5  7465 7020 8074          dc.b      116,101,112,32,77,111,100,101,0
000054C9  4D6F 6465 
000054CD  00        
                    8075   @m68kde~1_125:
000054CE  0D0A 2020 8076          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000054D2  544D 2020 
000054D6  2020 2020 
000054DA  2020 20   
000054DD  2020 2D20 8077          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000054E1  5465 7374 
000054E5  204D 656D 
000054E9  6F        
000054EA  7279 00   8078          dc.b      114,121,0
                    8079   @m68kde~1_126:
000054EE  0D0A 2020 8080          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000054F2  5453 2020 
000054F6  2020 2020 
000054FA  2020 20   
000054FD  2020 2D20 8081          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00005501  5465 7374 
00005505  2053 7769 
00005509  74        
0000550A  6368 6573 8082          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
0000550E  3A20 5357 
00005512  372D 3000 
                    8083   @m68kde~1_127:
00005516  0D0A 2020 8084          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000551A  5444 2020 
0000551E  2020 2020 
00005522  2020 20   
00005525  2020 2D20 8085          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00005529  5465 7374 
0000552D  2044 6973 
00005531  70        
00005532  6C61 7973 8086          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00005536  3A20 4C45 
0000553A  4473 2061 
0000553E  6E        
0000553F  6420 372D 8087          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00005543  5365 676D 
00005547  656E 7400 
                    8088   @m68kde~1_128:
0000554C  0D0A 2020 8089          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00005550  5744 2F57 
00005554  532F 5743 
00005558  2F57 4B   
0000555B  2020 2D20 8090          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
0000555F  5761 7463 
00005563  6820 506F 
00005567  696E      
00005569  743A 2044 8091          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
0000556D  6973 706C 
00005571  6179 2F53 
00005575  65        
00005576  742F 436C 8092          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
0000557A  6561 722F 
0000557E  4B69 6C6C 
00005582  00        
                    8093   @m68kde~1_129:
00005584  0D0A 2300 8094          dc.b      13,10,35,0
                    8095   @m68kde~1_130:
00005588  0D0A 5072 8096          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
0000558C  6F67 7261 
00005590  6D20 5275 
00005594  6E        
00005595  6E69 6E67 8097          dc.b      110,105,110,103,46,46,46,46,46,0
00005599  2E2E 2E2E 
0000559D  2E00      
                    8098   @m68kde~1_131:
000055A0  0D0A 5072 8099          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000055A4  6573 7320 
000055A8  3C52 4553 
000055AC  4554      
000055AE  3E20 6275 8100          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000055B2  7474 6F6E 
000055B6  203C 4B65 
000055BA  79        
000055BB  303E 206F 8101          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
000055BF  6E20 4445 
000055C3  3120 746F 
000055C7  2073      
000055C9  746F 7000 8102          dc.b      116,111,112,0
                    8103   @m68kde~1_132:
000055CE  0D0A 4572 8104          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000055D2  726F 723A 
000055D6  2050 7265 
000055DA  73        
000055DB  7320 2747 8105          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000055DF  2720 6669 
000055E3  7273 7420 
000055E7  74        
000055E8  6F20 7374 8106          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000055EC  6172 7420 
000055F0  7072 6F67 
000055F4  7261 6D00 8107          dc.b      114,97,109,0
                    8108   @m68kde~1_133:
000055F8  0D0A 5369 8109          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000055FC  6E67 6C65 
00005600  2053 7465 
00005604  70        
00005605  2020 3A5B 8110          dc.b      32,32,58,91,79,78,93,0
00005609  4F4E 5D00 
                    8111   @m68kde~1_134:
0000560E  0D0A 5072 8112          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00005612  6573 7320 
00005616  2747 2720 
0000561A  74        
0000561B  6F20 5472 8113          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
0000561F  6163 6520 
00005623  5072 6F67 
00005627  72        
00005628  616D 2066 8114          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
0000562C  726F 6D20 
00005630  6164 6472 
00005634  6573 7320 8115          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00005638  2425 582E 
0000563C  2E2E 2E2E 
00005640  00        
                    8116   @m68kde~1_135:
00005642  0D0A 5075 8117          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00005646  7368 203C 
0000564A  5245 5345 
0000564E  5420      
00005650  4275 7474 8118          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00005654  6F6E 3E20 
00005658  746F 2053 
0000565C  74        
0000565D  6F70 2E2E 8119          dc.b      111,112,46,46,46,46,46,0
00005661  2E2E 2E00 
                    8120   @m68kde~1_136:
00005666  0D0A 5369 8121          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000566A  6E67 6C65 
0000566E  2053 7465 
00005672  70        
00005673  203A 205B 8122          dc.b      32,58,32,91,79,70,70,93,0
00005677  4F46 465D 
0000567B  00        
                    8123   @m68kde~1_137:
0000567C  0D0A 4272 8124          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005680  6561 6B20 
00005684  506F 696E 
00005688  74        
00005689  7320 3A5B 8125          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
0000568D  456E 6162 
00005691  6C65 645D 
00005695  00        
                    8126   @m68kde~1_138:
00005696  0D0A 5072 8127          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000569A  6573 7320 
0000569E  3C45 5343 
000056A2  3E20      
000056A4  746F 2052 8128          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000056A8  6573 756D 
000056AC  6520 5573 
000056B0  6572 2050 8129          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
000056B4  726F 6772 
000056B8  616D 2E2E 
000056BC  2E        
000056BD  2E2E 00   8130          dc.b      46,46,0
                    8131   @m68kde~1_139:
000056C0  0D0A 5369 8132          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000056C4  6E67 6C65 
000056C8  2053 7465 
000056CC  70        
000056CD  2020 3A5B 8133          dc.b      32,32,58,91,79,70,70,93,0
000056D1  4F46 465D 
000056D5  00        
                    8134   @m68kde~1_140:
000056D6  0D0A 0D0A 8135          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000056DA  5072 6F67 
000056DE  7261 6D20 
000056E2  41        
000056E3  424F 5254 8136          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000056E7  2021 2121 
000056EB  2121 210D 
000056EF  0A00      
                    8137   @m68kde~1_141:
000056F2  2573 0D0A 8138          dc.b      37,115,13,10,0
000056F6  00        
                    8139   @m68kde~1_142:
000056F8  0D0A 0D0A 8140          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000056FC  5072 6F67 
00005700  7261 6D20 
00005704  41        
00005705  424F 5254 8141          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005709  2021 2121 
0000570D  2121 00   
                    8142   @m68kde~1_143:
00005710  0D0A 556E 8143          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005714  6861 6E64 
00005718  6C65 6420 
0000571C  49        
0000571D  6E74 6572 8144          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00005721  7275 7074 
00005725  3A20 4952 
00005729  5125 6420 8145          dc.b      81,37,100,32,33,33,33,33,33,0
0000572D  2121 2121 
00005731  2100      
                    8146   @m68kde~1_144:
00005734  4144 4452 8147          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00005738  4553 5320 
0000573C  4552 524F 
00005740  523A 20   
00005743  3136 206F 8148          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005747  7220 3332 
0000574B  2042 6974 
0000574F  2054      
00005751  7261 6E73 8149          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00005755  6665 7220 
00005759  746F 2F66 
0000575D  726F 6D20 8150          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00005761  616E 204F 
00005765  4444 2041 
00005769  64        
0000576A  6472 6573 8151          dc.b      100,114,101,115,115,46,46,46,46,0
0000576E  732E 2E2E 
00005772  2E00      
                    8152   @m68kde~1_145:
00005774  556E 6861 8153          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00005778  6E64 6C65 
0000577C  6420 5472 
00005780  6170 2021 8154          dc.b      97,112,32,33,33,33,33,33,0
00005784  2121 2121 
00005788  00        
                    8155   @m68kde~1_146:
0000578A  4255 5320 8156          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000578E  4572 726F 
00005792  7221 00   
                    8157   @m68kde~1_147:
00005796  4144 4452 8158          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000579A  4553 5320 
0000579E  4572 726F 
000057A2  7221      
000057A4  00        8159          dc.b      0
                    8160   @m68kde~1_148:
000057A6  494C 4C45 8161          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000057AA  4741 4C20 
000057AE  494E 5354 
000057B2  5255 43   
000057B5  5449 4F4E 8162          dc.b      84,73,79,78,0
000057B9  00        
                    8163   @m68kde~1_149:
000057BA  4449 5649 8164          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000057BE  4445 2042 
000057C2  5920 5A45 
000057C6  524F 00   
                    8165   @m68kde~1_150:
000057CA  2743 484B 8166          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000057CE  2720 494E 
000057D2  5354 5255 
000057D6  4354 49   
000057D9  4F4E 00   8167          dc.b      79,78,0
                    8168   @m68kde~1_151:
000057DC  5452 4150 8169          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000057E0  5620 494E 
000057E4  5354 5255 
000057E8  4354 49   
000057EB  4F4E 00   8170          dc.b      79,78,0
                    8171   @m68kde~1_152:
000057EE  5052 4956 8172          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000057F2  494C 4547 
000057F6  4520 5649 
000057FA  4F4C 41   
000057FD  5449 4F4E 8173          dc.b      84,73,79,78,0
00005801  00        
                    8174   @m68kde~1_153:
00005802  554E 494E 8175          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005806  4954 4941 
0000580A  4C49 5345 
0000580E  4420 49   
00005811  5251 00   8176          dc.b      82,81,0
                    8177   @m68kde~1_154:
00005814  5350 5552 8178          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005818  494F 5553 
0000581C  2049 5251 
00005820  00        
                    8179   @m68kde~1_155:
00005822  0D0A 5374 8180          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005826  6172 7420 
0000582A  4164 6472 
0000582E  65        
0000582F  7373 2069 8181          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00005833  6E20 4D65 
00005837  6D6F 7279 
0000583B  3A20 00   8182          dc.b      58,32,0
                    8183   @m68kde~1_156:
0000583E  0D0A 456E 8184          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00005842  7465 7220 
00005846  5374 7269 
0000584A  6E        
0000584B  6720 2845 8185          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
0000584F  5343 2074 
00005853  6F20 656E 
00005857  64        
00005858  2920 3A00 8186          dc.b      41,32,58,0
                    8187   @m68kde~1_157:
0000585C  0A45 6E74 8188          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
00005860  6572 2077 
00005864  6861 7420 
00005868  73        
00005869  697A 6520 8189          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
0000586D  6F66 206D 
00005871  656D 6F72 
00005875  7920 796F 8190          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
00005879  7520 7761 
0000587D  6E74 2074 
00005881  6F20 7265 8191          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00005885  6164 2F77 
00005889  7269 7465 
0000588D  0A20 4279 8192          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
00005891  7465 203D 
00005895  2030 0A20 
00005899  576F      
0000589B  7264 203D 8193          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
0000589F  2031 0A20 
000058A3  4C6F 6E67 
000058A7  20        
000058A8  576F 7264 8194          dc.b      87,111,114,100,32,61,32,50,10,0
000058AC  203D 2032 
000058B0  0A00      
                    8195   @m68kde~1_158:
000058B2  0A45 6E74 8196          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000058B6  6572 2077 
000058BA  6869 6368 
000058BE  2064 6174 8197          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000058C2  6120 7061 
000058C6  7474 6572 
000058CA  6E        
000058CB  2079 6F75 8198          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000058CF  2077 616E 
000058D3  7420 746F 
000058D7  2077 7269 8199          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000058DB  7465 2069 
000058DF  6E74 6F20 
000058E3  6D65 6D6F 8200          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
000058E7  7279 0A20 
000058EB  3078 3030 
000058EF  20        
000058F0  3D20 300A 8201          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
000058F4  2030 7842 
000058F8  3220 3D20 
000058FC  310A 20   
000058FF  3078 4333 8202          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
00005903  203D 2032 
00005907  0A20 3078 
0000590B  4434      
0000590D  203D 2033 8203          dc.b      32,61,32,51,10,0
00005911  0A00      
                    8204   @m68kde~1_159:
00005914  0A45 6E74 8205          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005918  6572 2077 
0000591C  6869 6368 
00005920  2064 6174 8206          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005924  6120 7061 
00005928  7474 6572 
0000592C  6E        
0000592D  2079 6F75 8207          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005931  2077 616E 
00005935  7420 746F 
00005939  2077 7269 8208          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000593D  7465 2069 
00005941  6E74 6F20 
00005945  6D65 6D6F 8209          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005949  7279 0A20 
0000594D  3078 3030 
00005951  30        
00005952  3020 3D20 8210          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
00005956  300A 2030 
0000595A  7831 3233 
0000595E  3420 3D   
00005961  2031 0A20 8211          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
00005965  3078 4131 
00005969  4232 203D 
0000596D  2032 0A   
00005970  2030 7843 8212          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
00005974  3344 3420 
00005978  3D20 330A 
0000597C  00        
                    8213   @m68kde~1_160:
0000597E  0A45 6E74 8214          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005982  6572 2077 
00005986  6869 6368 
0000598A  2064 6174 8215          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
0000598E  6120 7061 
00005992  7474 6572 
00005996  6E        
00005997  2079 6F75 8216          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000599B  2077 616E 
0000599F  7420 746F 
000059A3  2077 7269 8217          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000059A7  7465 2069 
000059AB  6E74 6F20 
000059AF  6D65 6D6F 8218          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000059B3  7279 0A20 
000059B7  3078 3030 
000059BB  30        
000059BC  305F 3030 8219          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
000059C0  3030 203D 
000059C4  2030 0A20 
000059C8  3078 41   
000059CB  4142 425F 8220          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
000059CF  4343 4444 
000059D3  203D 2031 
000059D7  0A20 30   
000059DA  7831 3132 8221          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
000059DE  325F 3333 
000059E2  3434 203D 
000059E6  2032 0A   
000059E9  2030 7837 8222          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
000059ED  3635 345F 
000059F1  3332 3130 
000059F5  203D 20   
000059F8  330A 00   8223          dc.b      51,10,0
                    8224   @m68kde~1_161:
000059FC  0A50 726F 8225          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
00005A00  7669 6465 
00005A04  2053 7461 
00005A08  72        
00005A09  7420 4164 8226          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
00005A0D  6472 6573 
00005A11  7320 696E 
00005A15  2068 6578 8227          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
00005A19  2028 646F 
00005A1D  206E 6F74 
00005A21  2075 7365 8228          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
00005A25  2030 7820 
00005A29  7072 6566 
00005A2D  6978 290A 8229          dc.b      105,120,41,10,48,120,0
00005A31  3078 00   
                    8230   @m68kde~1_162:
00005A34  0A50 726F 8231          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
00005A38  7669 6465 
00005A3C  2045 6E64 
00005A40  2041 6464 8232          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
00005A44  7265 7373 
00005A48  2069 6E20 
00005A4C  6865 7820 8233          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
00005A50  2864 6F20 
00005A54  6E6F 7420 
00005A58  7573 6520 8234          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
00005A5C  3078 2070 
00005A60  7265 6669 
00005A64  7829 0A30 8235          dc.b      120,41,10,48,120,0
00005A68  7800      
                    8236   @m68kde~1_163:
00005A6A  0A53 7461 8237          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
00005A6E  7274 2041 
00005A72  6464 7265 
00005A76  73        
00005A77  7320 3078 8238          dc.b      115,32,48,120,37,48,56,120,10,0
00005A7B  2530 3878 
00005A7F  0A00      
                    8239   @m68kde~1_164:
00005A82  0A45 6E64 8240          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
00005A86  2041 6464 
00005A8A  7265 7373 
00005A8E  3A20 3078 8241          dc.b      58,32,48,120,37,48,56,120,10,0
00005A92  2530 3878 
00005A96  0A00      
                    8242   @m68kde~1_165:
00005A98  4552 524F 8243          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
00005A9C  522E 2E2E 
00005AA0  2041 6464 
00005AA4  7265      
00005AA6  7373 2030 8244          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
00005AAA  7825 7820 
00005AAE  6973 2062 
00005AB2  65        
00005AB3  796F 6E64 8245          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005AB7  2074 6865 
00005ABB  206D 656D 
00005ABF  6F72 7920 8246          dc.b      111,114,121,32,114,97,110,103,101,10,0
00005AC3  7261 6E67 
00005AC7  650A 00   
                    8247   @m68kde~1_166:
00005ACA  4552 524F 8248          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
00005ACE  522E 2E2E 
00005AD2  2056 616C 
00005AD6  7565      
00005AD8  2077 7269 8249          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
00005ADC  7474 656E 
00005AE0  2074 6F20 
00005AE4  6164 6472 8250          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00005AE8  6573 7320 
00005AEC  3078 2578 
00005AF0  203D 3D20 8251          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00005AF4  3078 2578 
00005AF8  2E20 5661 
00005AFC  6C75      
00005AFE  6520 4578 8252          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
00005B02  7065 6374 
00005B06  6564 3A20 
00005B0A  30        
00005B0B  7825 780A 8253          dc.b      120,37,120,10,0
00005B0F  00        
                    8254   @m68kde~1_167:
00005B10  4164 6472 8255          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005B14  6573 733A 
00005B18  2030 7825 
00005B1C  78        
00005B1D  2056 616C 8256          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
00005B21  7565 3A20 
00005B25  3078 2530 
00005B29  3258      
00005B2B  0A00      8257          dc.b      10,0
                    8258   @m68kde~1_168:
00005B2E  4164 6472 8259          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005B32  6573 733A 
00005B36  2030 7825 
00005B3A  78        
00005B3B  2056 616C 8260          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
00005B3F  7565 3A20 
00005B43  3078 2530 
00005B47  3458      
00005B49  0A00      8261          dc.b      10,0
                    8262   @m68kde~1_169:
00005B4C  4164 6472 8263          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005B50  6573 733A 
00005B54  2030 7825 
00005B58  78        
00005B59  2056 616C 8264          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
00005B5D  7565 3A20 
00005B61  3078 2530 
00005B65  3858      
00005B67  0A00      8265          dc.b      10,0
                    8266   @m68kde~1_170:
00005B6A  4445 312D 8267          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00005B6E  3638 6B20 
00005B72  4275 6720 
00005B76  5631      
00005B78  2E37 3700 8268          dc.b      46,55,55,0
                    8269   @m68kde~1_171:
00005B7C  436F 7079 8270          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00005B80  7269 6768 
00005B84  7420 2843 
00005B88  2920 504A 8271          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00005B8C  2044 6176 
00005B90  6965 7320 
00005B94  3230      
00005B96  3136 00   8272          dc.b      49,54,0
                    8273   @m68kde~1_172:
00005B9A  0D0A 5275 8274          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00005B9E  6E6E 696E 
00005BA2  672E 2E2E 
00005BA6  2E        
00005BA7  2E00      8275          dc.b      46,0
                    8276   @m68kde~1_173:
00005BAA  5275 6E6E 8277          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005BAE  696E 672E 
00005BB2  2E2E 2E2E 
00005BB6  00        
                    8278   @m68kde~1_174:
00005BB8  4279 3A20 8279          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005BBC  504A 2044 
00005BC0  6176 6965 
00005BC4  73        
00005BC5  00        8280          dc.b      0
                    8281   @m68kde~1_175:
00005BC6  0D0A 2573 8282          dc.b      13,10,37,115,0
00005BCA  00        
                    8283   @m68kde~1_176:
00005BCC  0A20 5374 8284          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
00005BD0  7564 656E 
00005BD4  7420 4E61 
00005BD8  6D        
00005BD9  6573 3A0A 8285          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
00005BDD  205A 6163 
00005BE1  6861 7269 
00005BE5  61        
00005BE6  6820 4A6F 8286          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
00005BEA  7365 7068 
00005BEE  3A20 3435 
00005BF2  35        
00005BF3  3030 3035 8287          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00005BF7  3520 0A20 
00005BFB  556D 6169 
00005BFF  7220      
00005C01  4D61 7A68 8288          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
00005C05  6172 3A20 
00005C09  3230 3333 
00005C0D  3333      
00005C0F  3038 0A00 8289          dc.b      48,56,10,0
                    8290   @m68kde~1_177:
00005C14  496E 6974 8291          dc.b      73,110,105,116,105,97,108,105,122,105,110,103
00005C18  6961 6C69 
00005C1C  7A69 6E67 
00005C20  2069 3263 8292          dc.b      32,105,50,99,32,116,101,115,116,46,46,46,10
00005C24  2074 6573 
00005C28  742E 2E2E 
00005C2C  0A        
00005C2D  00        8293          dc.b      0
                    8294          section   data
00005C2E            8295                   align
          0000 5C2E 8296   DataStart       equ       *
                    8297   
                    8298   *********************************************************************************************************
                    8299   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8300   * to ram as part of the CStart routine in this file
                    8301   *********************************************************************************************************
                    8302   
                    8303   I2CTest_IICData:
00005C2E  0000 0001 8304          dc.l      1,2,3,4,5
00005C32  0000 0002 
00005C36  0000 0003 
00005C3A  0000 0004 
00005C3E  0000 0005 
                    8305   @vsscanf_bufx:
00005C42  0B00 0546 8306          dc.l      @vsscanf_buf
                    8307   @vsscanf_1:
00005C46  0A00      8308          dc.b      10,0
                    8309   __ctype:
00005C48  0040 4040 8310          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005C4C  4040 4040 
00005C50  4040 5050 
00005C54  5050 50   
00005C57  4040 4040 8311          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00005C5B  4040 4040 
00005C5F  4040 4040 
00005C63  4040 40   
00005C66  4040 40D0 8312          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005C6A  A0A0 A0A0 
00005C6E  A0A0 A0A0 
00005C72  A0A0 A0A0 8313          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005C76  A0A0 A08C 
00005C7A  8C8C 8C   
00005C7D  8C8C 8C8C 8314          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005C81  8C8C A0A0 
00005C85  A0A0 A0   
00005C88  A0A0 8A8A 8315          dc.b      160,160,138,138,138,138,138,138,130,130,130
00005C8C  8A8A 8A8A 
00005C90  8282 82   
00005C93  8282 8282 8316          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005C97  8282 8282 
00005C9B  8282 82   
00005C9E  8282 8282 8317          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005CA2  8282 A0A0 
00005CA6  A0A0 A0   
00005CA9  A089 8989 8318          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005CAD  8989 8981 
00005CB1  8181 81   
00005CB4  8181 8181 8319          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005CB8  8181 8181 
00005CBC  8181 81   
00005CBF  8181 8181 8320          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005CC3  81A0 A0A0 
00005CC7  A040 0000 
00005CCB  00        
00005CCC  0000 0000 8321          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005CD0  0000 0000 
00005CD4  0000 0000 
00005CD8  0000 0000 
00005CDC  0000 0000 
00005CE0  0000      
00005CE2  0000 0000 8322          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005CE6  0000 0000 
00005CEA  0000 0000 
00005CEE  0000 0000 
00005CF2  0000 0000 
00005CF6  0000      
00005CF8  0000 0000 8323          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005CFC  0000 0000 
00005D00  0000 0000 
00005D04  0000 0000 
00005D08  0000 0000 
00005D0C  0000      
00005D0E  0000 0000 8324          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005D12  0000 0000 
00005D16  0000 0000 
00005D1A  0000 0000 
00005D1E  0000 0000 
00005D22  0000      
00005D24  0000 0000 8325          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005D28  0000 0000 
00005D2C  0000 0000 
00005D30  0000 0000 
00005D34  0000 0000 
00005D38  0000      
00005D3A  0000 0000 8326          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005D3E  0000 0000 
00005D42  0000 0000 
00005D46  0000 00   
                    8327   @itoa_1:
00005D4A  2D32 3134 8328          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005D4E  3734 3833 
00005D52  3634 3800 
                    8329          section   bss
00005D56            8330                   align
          0000 5D56 8331   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8332   
                    8333   *********************************************************************************************************
                    8334   * Section for Uninitialised Data held in ROM as constants
                    8335   *********************************************************************************************************
                    8336   
0B000000            8337                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0128 8338   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8339   
                    8340   
0B000000            8341   bss             org       bss
                    8342   
                    8343   *********************************************************************************************************
                    8344   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8345   * install the exception handler using the C function InstallExceptionHandler()
                    8346   *********************************************************************************************************
                    8347   
                    8348   
                    8349   
0B000000            8350   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            8351   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            8352   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            8353   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            8354   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            8355   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            8356   VCheck           ds.l    1      ditto
0B00001C            8357   VTrapV           ds.l    1      ditto
0B000020            8358   VPrivilege       ds.l    1      ditto
0B000024            8359   VTrace           ds.l    1
0B000028            8360   VLine1010emul    ds.l    1
0B00002C            8361   VLine1111emul    ds.l    1
0B000030            8362   VUnassigned1     ds.l    1
0B000034            8363   VUnassigned2     ds.l    1
0B000038            8364   VUnassigned3     ds.l    1
0B00003C            8365   VUninit_IRQ      ds.l    1
0B000040            8366   VUnassigned4     ds.l    1
0B000044            8367   VUnassigned5     ds.l    1
0B000048            8368   VUnassigned6     ds.l    1
0B00004C            8369   VUnassigned7     ds.l    1
0B000050            8370   VUnassigned8     ds.l    1
0B000054            8371   VUnassigned9     ds.l    1
0B000058            8372   VUnassigned10    ds.l    1
0B00005C            8373   VUnassigned11    ds.l    1
0B000060            8374   VSpuriousIRQ     ds.l    1
                    8375   
                    8376   * Interrupt handlers Vector 25-31
0B000064            8377   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            8378   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            8379   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            8380   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            8381   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            8382   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            8383   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8384   
                    8385   * Trap Handler vectors 32-47
0B000080            8386   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            8387   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            8388   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            8389   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            8390   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            8391   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            8392   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            8393   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            8394   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            8395   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            8396   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            8397   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            8398   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            8399   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            8400   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            8401   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8402   
                    8403   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8404   
                    8405   ***********************************************************************************************************
                    8406   * Other Variables
                    8407   ***********************************************************************************************************
                    8408   *__DebugA5       ds.l    1
                    8409   *__UserA5        ds.l    1
                    8410   
                    8411   ***********************************************************************************************************
0B0000C0            8412   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            8413   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            8414   __heap:         ds.l    0       ; pointers for malloc functions
                    8415   
                    8416   *__himem:       ds.l    himem            ; highest memory location + 1
                    8417   *__stklen:      ds.l    stklen           ; default stack size
                    8418   
                    8419   *********************************************************************************************************
                    8420   * Section for Heap
                    8421   *********************************************************************************************************
                    8422   
                    8423   _i:
0B0000C4            8424          ds.b      4
                    8425   _x:
0B0000C8            8426          ds.b      4
                    8427   _y:
0B0000CC            8428          ds.b      4
                    8429   _z:
0B0000D0            8430          ds.b      4
                    8431   _PortA_Count:
0B0000D4            8432          ds.b      4
                    8433   _Trace:
0B0000D8            8434          ds.b      4
                    8435   _GoFlag:
0B0000DC            8436          ds.b      4
                    8437   _Echo:
0B0000E0            8438          ds.b      4
                    8439   _d0:
0B0000E4            8440          ds.b      4
                    8441   _d1:
0B0000E8            8442          ds.b      4
                    8443   _d2:
0B0000EC            8444          ds.b      4
                    8445   _d3:
0B0000F0            8446          ds.b      4
                    8447   _d4:
0B0000F4            8448          ds.b      4
                    8449   _d5:
0B0000F8            8450          ds.b      4
                    8451   _d6:
0B0000FC            8452          ds.b      4
                    8453   _d7:
0B000100            8454          ds.b      4
                    8455   _a0:
0B000104            8456          ds.b      4
                    8457   _a1:
0B000108            8458          ds.b      4
                    8459   _a2:
0B00010C            8460          ds.b      4
                    8461   _a3:
0B000110            8462          ds.b      4
                    8463   _a4:
0B000114            8464          ds.b      4
                    8465   _a5:
0B000118            8466          ds.b      4
                    8467   _a6:
0B00011C            8468          ds.b      4
                    8469   _PC:
0B000120            8470          ds.b      4
                    8471   _SSP:
0B000124            8472          ds.b      4
                    8473   _USP:
0B000128            8474          ds.b      4
                    8475   _SR:
0B00012C            8476          ds.b      2
                    8477   _BreakPointAddress:
0B00012E            8478          ds.b      32
                    8479   _BreakPointInstruction:
0B00014E            8480          ds.b      16
                    8481   _BreakPointSetOrCleared:
0B00015E            8482          ds.b      32
                    8483   _InstructionSize:
0B00017E            8484          ds.b      4
                    8485   _WatchPointAddress:
0B000182            8486          ds.b      32
                    8487   _WatchPointSetOrCleared:
0B0001A2            8488          ds.b      32
                    8489   _WatchPointString:
0B0001C2            8490          ds.b      800
                    8491   _TempString:
0B0004E2            8492          ds.b      100
                    8493   @vsscanf_buf:
0B000546            8494          ds.b      80
                    8495          section   heap
0B000596            8496                   align
          0B00 0596 8497   bssEnd          equ *                   end of storage space for unitialised variables
                    8498   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 8499   heap   equ       *
0B000596            8500                    align
          0000 0000

Assembly errors: 0
