680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 27 Mar 2025      Time: 23:42:47          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  3706      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2D9A      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  4470      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  4E46      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  4E4A      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4E60      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  4E62      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  4470      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  3AB4      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  4E64      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4E9E      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  4EB6      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  4EBE      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  4EC4      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  4E46      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  4470      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  4EC8      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  4E9E      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  4EDC      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  4EF2      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  4F06      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  4470      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  4F36      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  3BAE      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  39E8      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  3AB4      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  4F66      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4F8C      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  4470      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4FAE      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  4FCA      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  5010      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  5022      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  3B20      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  5034      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; // TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011 // This might need to be 0x53
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while (TestForSPITransmitDataComplete() == 0);
                    1614   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1615          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1616          tst.l     D0
00001122  6602      1617          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1621          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1622          rts
                    1623   ; }
                    1624   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1625   ; void ClearSPIReadFIFO(void) {
                    1626   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1627          link      A6,#-4
                    1628   ; volatile unsigned char dummy;
                    1629   ; while((SPI_Status & 0x01) == 0) {
                    1630   ClearSPIReadFIFO_1:
00001134  1039 0040 1631          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1632          and.b     #1,D0
0000113E  660A      1633          bne.s     ClearSPIReadFIFO_3
                    1634   ; dummy = SPI_Data;
00001140  1D79 0040 1635          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1636          bra       ClearSPIReadFIFO_1
                    1637   ClearSPIReadFIFO_3:
0000114A  4E5E      1638          unlk      A6
0000114C  4E75      1639          rts
                    1640   ; }
                    1641   ; }
                    1642   ; void SPIFlashPollStatusWLE(void) {
                    1643   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char status;
                    1646   ; unsigned char dummy;
                    1647   ; do {
                    1648   SPIFlashPollStatusWLE_1:
                    1649   ; // Start a new read status register command each time
                    1650   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1651          move.b    #254,4227112
00001156  0040 8028 
                    1652   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1653          pea       5
0000115E  4EB8 10C4 1654          jsr       _SPISafeWrite
00001162  584F      1655          addq.w    #4,A7
                    1656   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1657          pea       255
00001168  4EB8 10C4 1658          jsr       _SPISafeWrite
0000116C  584F      1659          addq.w    #4,A7
0000116E  1D40 FFFE 1660          move.b    D0,-2(A6)
                    1661   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1662          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1663          move.b    -2(A6),D0
0000117E  C03C 0002 1664          and.b     #2,D0
00001182  67CE      1665          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1666          unlk      A6
00001186  4E75      1667          rts
                    1668   ; // printf("\r\n WLE Status: %02x \n", status);
                    1669   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1670   ; }
                    1671   ; void SPIFlashPollStatusBusy(void) {
                    1672   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1673          link      A6,#-4
                    1674   ; unsigned char status;
                    1675   ; unsigned char dummy;
                    1676   ; do {
                    1677   SPIFlashPollStatusBusy_1:
                    1678   ; // Start a new read status register command each time
                    1679   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1680          move.b    #254,4227112
00001190  0040 8028 
                    1681   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1682          pea       5
00001198  4EB8 10C4 1683          jsr       _SPISafeWrite
0000119C  584F      1684          addq.w    #4,A7
                    1685   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1686          pea       255
000011A2  4EB8 10C4 1687          jsr       _SPISafeWrite
000011A6  584F      1688          addq.w    #4,A7
000011A8  1D40 FFFE 1689          move.b    D0,-2(A6)
                    1690   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1691          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1692          move.b    -2(A6),D0
000011B8  C03C 0001 1693          and.b     #1,D0
000011BC  66CE      1694          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1695          unlk      A6
000011C0  4E75      1696          rts
                    1697   ; // printf("\r\n Busy Status: %02x \n", status);
                    1698   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011C2  4E56 0000 1707          link      A6,#0
                    1708   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1709          move.l    8(A6),D1
000011CA  C2BC 0000 1710          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1711          move.l    D1,-(A7)
000011D2  4EB8 10C4 1712          jsr       _SPISafeWrite
000011D6  584F      1713          addq.w    #4,A7
                    1714   ; return SPI_Data;
000011D8  1039 0040 1715          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1716          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1717          unlk      A6
000011E6  4E75      1718          rts
                    1719   ; }
                    1720   ; void SPIFlashWriteEnable() {
                    1721   _SPIFlashWriteEnable:
                    1722   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1723          move.b    #254,4227112
000011EC  0040 8028 
                    1724   ; SPISafeWrite(0x06);
000011F0  4878 0006 1725          pea       6
000011F4  4EB8 10C4 1726          jsr       _SPISafeWrite
000011F8  584F      1727          addq.w    #4,A7
                    1728   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1729          move.b    #255,4227112
000011FE  0040 8028 
                    1730   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1731   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1732          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1733          rts
                    1734   ; }
                    1735   ; void SPISendAddress(int c) {
                    1736   _SPISendAddress:
00001208  4E56 0000 1737          link      A6,#0
0000120C  48E7 2020 1738          movem.l   D2/A2,-(A7)
00001210  242E 0008 1739          move.l    8(A6),D2
00001214  45F8 10C4 1740          lea       _SPISafeWrite.L,A2
                    1741   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1742          move.l    D2,D1
0000121A  E081      1743          asr.l     #8,D1
0000121C  E081      1744          asr.l     #8,D1
0000121E  C2BC 0000 1745          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1746          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1747          move.l    D1,-(A7)
0000122C  4E92      1748          jsr       (A2)
0000122E  584F      1749          addq.w    #4,A7
                    1750   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1751          move.l    D2,D1
00001232  E081      1752          asr.l     #8,D1
00001234  C2BC 0000 1753          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1754          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1755          move.l    D1,-(A7)
00001242  4E92      1756          jsr       (A2)
00001244  584F      1757          addq.w    #4,A7
                    1758   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1759          move.l    D2,D1
00001248  C2BC 0000 1760          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1761          and.l     #255,D1
00001252  00FF      
00001254  2F01      1762          move.l    D1,-(A7)
00001256  4E92      1763          jsr       (A2)
00001258  584F      1764          addq.w    #4,A7
0000125A  4CDF 0404 1765          movem.l   (A7)+,D2/A2
0000125E  4E5E      1766          unlk      A6
00001260  4E75      1767          rts
                    1768   ; }
                    1769   ; void SPIFlashPageProgram(int addr) {
                    1770   _SPIFlashPageProgram:
00001262  4E56 FFF8 1771          link      A6,#-8
00001266  2F02      1772          move.l    D2,-(A7)
                    1773   ; unsigned char *sramMemoryPtr;
                    1774   ; int flashAddr = addr - 0x08000000;
00001268  202E 0008 1775          move.l    8(A6),D0
0000126C  0480 0800 1776          sub.l     #134217728,D0
00001270  0000      
00001272  2D40 FFFC 1777          move.l    D0,-4(A6)
                    1778   ; int i;
                    1779   ; SPI_CS = 0xFE;
00001276  13FC 00FE 1780          move.b    #254,4227112
0000127A  0040 8028 
                    1781   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000127E  4878 0002 1782          pea       2
00001282  4EB8 10C4 1783          jsr       _SPISafeWrite
00001286  584F      1784          addq.w    #4,A7
                    1785   ; SPISendAddress(flashAddr);
00001288  2F2E FFFC 1786          move.l    -4(A6),-(A7)
0000128C  4EB8 1208 1787          jsr       _SPISendAddress
00001290  584F      1788          addq.w    #4,A7
                    1789   ; for (i = 0; i < 256; i++) {
00001292  4282      1790          clr.l     D2
                    1791   SPIFlashPageProgram_1:
00001294  0C82 0000 1792          cmp.l     #256,D2
00001298  0100      
0000129A  6C22      1793          bge.s     SPIFlashPageProgram_3
                    1794   ; sramMemoryPtr = (unsigned char*) (addr + i);
0000129C  202E 0008 1795          move.l    8(A6),D0
000012A0  D082      1796          add.l     D2,D0
000012A2  2D40 FFF8 1797          move.l    D0,-8(A6)
                    1798   ; WriteSPIChar(*sramMemoryPtr); // Random value for testing purposes
000012A6  206E FFF8 1799          move.l    -8(A6),A0
000012AA  1210      1800          move.b    (A0),D1
000012AC  C2BC 0000 1801          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1802          move.l    D1,-(A7)
000012B4  4EB8 11C2 1803          jsr       _WriteSPIChar
000012B8  584F      1804          addq.w    #4,A7
000012BA  5282      1805          addq.l    #1,D2
000012BC  60D6      1806          bra       SPIFlashPageProgram_1
                    1807   SPIFlashPageProgram_3:
                    1808   ; // printf("%02x ", *sramMemoryPtr);
                    1809   ; }
                    1810   ; SPI_CS = 0xFF;
000012BE  13FC 00FF 1811          move.b    #255,4227112
000012C2  0040 8028 
                    1812   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1813   ; SPIFlashPollStatusBusy();
000012C6  4EB8 1188 1814          jsr       _SPIFlashPollStatusBusy
000012CA  241F      1815          move.l    (A7)+,D2
000012CC  4E5E      1816          unlk      A6
000012CE  4E75      1817          rts
                    1818   ; }
                    1819   ; void SPIFlashErase(void) {
                    1820   _SPIFlashErase:
                    1821   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1822   ; printf("\nErasing...\n");
000012D0  4879 0000 1823          pea       @m68kde~1_22.L
000012D4  5068      
000012D6  4EB9 0000 1824          jsr       _printf
000012DA  4470      
000012DC  584F      1825          addq.w    #4,A7
                    1826   ; SPI_CS = 0xFE;
000012DE  13FC 00FE 1827          move.b    #254,4227112
000012E2  0040 8028 
                    1828   ; SPISafeWrite(0xC7);
000012E6  4878 00C7 1829          pea       199
000012EA  4EB8 10C4 1830          jsr       _SPISafeWrite
000012EE  584F      1831          addq.w    #4,A7
                    1832   ; SPI_CS = 0xFF;
000012F0  13FC 00FF 1833          move.b    #255,4227112
000012F4  0040 8028 
                    1834   ; SPIFlashPollStatusBusy();
000012F8  4EB8 1188 1835          jsr       _SPIFlashPollStatusBusy
000012FC  4E75      1836          rts
                    1837   ; }
                    1838   ; int SPIFlashRead() {
                    1839   _SPIFlashRead:
000012FE  4E56 FFFC 1840          link      A6,#-4
00001302  48E7 3000 1841          movem.l   D2/D3,-(A7)
                    1842   ; unsigned char readData;
                    1843   ; unsigned char *sramMemoryPtr;
                    1844   ; int addr;
                    1845   ; ClearSPIReadFIFO();
00001306  4EB8 1130 1846          jsr       _ClearSPIReadFIFO
                    1847   ; SPI_CS = 0xFE;
0000130A  13FC 00FE 1848          move.b    #254,4227112
0000130E  0040 8028 
                    1849   ; SPISafeWrite(0x03);
00001312  4878 0003 1850          pea       3
00001316  4EB8 10C4 1851          jsr       _SPISafeWrite
0000131A  584F      1852          addq.w    #4,A7
                    1853   ; SPISendAddress(0x0);
0000131C  42A7      1854          clr.l     -(A7)
0000131E  4EB8 1208 1855          jsr       _SPISendAddress
00001322  584F      1856          addq.w    #4,A7
                    1857   ; for (addr = 0x08000000; addr < (0x08040000); addr ++) {
00001324  243C 0800 1858          move.l    #134217728,D2
00001328  0000      
                    1859   SPIFlashRead_1:
0000132A  0C82 0804 1860          cmp.l     #134479872,D2
0000132E  0000      
00001330  6C1A      1861          bge.s     SPIFlashRead_3
                    1862   ; sramMemoryPtr = (unsigned char*) addr;
00001332  2D42 FFFC 1863          move.l    D2,-4(A6)
                    1864   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001336  4878 00FF 1865          pea       255
0000133A  4EB8 10C4 1866          jsr       _SPISafeWrite
0000133E  584F      1867          addq.w    #4,A7
00001340  1600      1868          move.b    D0,D3
                    1869   ; *sramMemoryPtr = readData;
00001342  206E FFFC 1870          move.l    -4(A6),A0
00001346  1083      1871          move.b    D3,(A0)
00001348  5282      1872          addq.l    #1,D2
0000134A  60DE      1873          bra       SPIFlashRead_1
                    1874   SPIFlashRead_3:
                    1875   ; }
                    1876   ; SPI_CS = 0xFF;
0000134C  13FC 00FF 1877          move.b    #255,4227112
00001350  0040 8028 
                    1878   ; SPIFlashPollStatusBusy();
00001354  4EB8 1188 1879          jsr       _SPIFlashPollStatusBusy
                    1880   ; return readData;
00001358  C6BC 0000 1881          and.l     #255,D3
0000135C  00FF      
0000135E  2003      1882          move.l    D3,D0
00001360  4CDF 000C 1883          movem.l   (A7)+,D2/D3
00001364  4E5E      1884          unlk      A6
00001366  4E75      1885          rts
                    1886   ; }
                    1887   ; /*******************************************************************
                    1888   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1889   ; ********************************************************************/
                    1890   ; void ProgramFlashChip(void)
                    1891   ; {
                    1892   _ProgramFlashChip:
00001368  4E56 FFFC 1893          link      A6,#-4
                    1894   ; int addr;
                    1895   ; SPIFlashPollStatusBusy();
0000136C  4EB8 1188 1896          jsr       _SPIFlashPollStatusBusy
                    1897   ; SPIFlashWriteEnable();
00001370  4EB8 11E8 1898          jsr       _SPIFlashWriteEnable
                    1899   ; SPIFlashErase();
00001374  4EB8 12D0 1900          jsr       _SPIFlashErase
                    1901   ; // 256KB = 262144 bytes (0x40000)
                    1902   ; // We need to write one page at a time (256 bytes at a time)
                    1903   ; // This code writes the user program from DRAM to FLASH
                    1904   ; // printf("\r\n Starting Programming...");
                    1905   ; // for (addr = 0x08000000; addr < (0x08040000); addr += 256) {
                    1906   ; //     SPIFlashWriteEnable(); 
                    1907   ; //     // printf("\r\n Addr: %08x \n", addr);
                    1908   ; //     SPIFlashPageProgram(addr);
                    1909   ; // }
                    1910   ; printf("\r\n Programming Complete!");
00001378  4879 0000 1911          pea       @m68kde~1_23.L
0000137C  5076      
0000137E  4EB9 0000 1912          jsr       _printf
00001382  4470      
00001384  584F      1913          addq.w    #4,A7
00001386  4E5E      1914          unlk      A6
00001388  4E75      1915          rts
                    1916   ; }
                    1917   ; /*************************************************************************
                    1918   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1919   ; **************************************************************************/
                    1920   ; void LoadFromFlashChip(void)
                    1921   ; {
                    1922   _LoadFromFlashChip:
0000138A  4E56 FFFC 1923          link      A6,#-4
                    1924   ; int readData;
                    1925   ; printf("\r\n Loading Program From SPI Flash....") ;
0000138E  4879 0000 1926          pea       @m68kde~1_24.L
00001392  5090      
00001394  4EB9 0000 1927          jsr       _printf
00001398  4470      
0000139A  584F      1928          addq.w    #4,A7
                    1929   ; SPIFlashPollStatusBusy();
0000139C  4EB8 1188 1930          jsr       _SPIFlashPollStatusBusy
                    1931   ; readData = SPIFlashRead();
000013A0  4EB8 12FE 1932          jsr       _SPIFlashRead
000013A4  2D40 FFFC 1933          move.l    D0,-4(A6)
                    1934   ; printf("\r\n Read Data: %08x \n", readData);
000013A8  2F2E FFFC 1935          move.l    -4(A6),-(A7)
000013AC  4879 0000 1936          pea       @m68kde~1_25.L
000013B0  50B6      
000013B2  4EB9 0000 1937          jsr       _printf
000013B6  4470      
000013B8  504F      1938          addq.w    #8,A7
000013BA  4E5E      1939          unlk      A6
000013BC  4E75      1940          rts
                    1941   ; }
                    1942   ; void printBinary(unsigned char value) {
                    1943   _printBinary:
000013BE  4E56 0000 1944          link      A6,#0
000013C2  48E7 2020 1945          movem.l   D2/A2,-(A7)
000013C6  45F9 0000 1946          lea       _printf.L,A2
000013CA  4470      
                    1947   ; int i;
                    1948   ; printf("IIC_CRSR Transmit (Binary): ");
000013CC  4879 0000 1949          pea       @m68kde~1_26.L
000013D0  50CC      
000013D2  4E92      1950          jsr       (A2)
000013D4  584F      1951          addq.w    #4,A7
                    1952   ; for (i = 7; i >= 0; i--) { // Loop through each bit (from MSB to LSB)
000013D6  7407      1953          moveq     #7,D2
                    1954   printBinary_1:
000013D8  0C82 0000 1955          cmp.l     #0,D2
000013DC  0000      
000013DE  6D22      1956          blt.s     printBinary_3
                    1957   ; printf("%d", (value >> i) & 1); // Shift and mask to extract each bit
000013E0  122E 000B 1958          move.b    11(A6),D1
000013E4  C2BC 0000 1959          and.l     #255,D1
000013E8  00FF      
000013EA  E4A1      1960          asr.l     D2,D1
000013EC  C2BC 0000 1961          and.l     #1,D1
000013F0  0001      
000013F2  2F01      1962          move.l    D1,-(A7)
000013F4  4879 0000 1963          pea       @m68kde~1_27.L
000013F8  50EA      
000013FA  4E92      1964          jsr       (A2)
000013FC  504F      1965          addq.w    #8,A7
000013FE  5382      1966          subq.l    #1,D2
00001400  60D6      1967          bra       printBinary_1
                    1968   printBinary_3:
                    1969   ; }
                    1970   ; printf("\n");
00001402  4879 0000 1971          pea       @m68kde~1_28.L
00001406  50EE      
00001408  4E92      1972          jsr       (A2)
0000140A  584F      1973          addq.w    #4,A7
0000140C  4CDF 0404 1974          movem.l   (A7)+,D2/A2
00001410  4E5E      1975          unlk      A6
00001412  4E75      1976          rts
                    1977   ; }
                    1978   ; void IICCoreEnable() {
                    1979   _IICCoreEnable:
                    1980   ; IIC_CTR |= 0x80;     // Enable I2C core in control register (1000_0000)
00001414  0039 0080 1981          or.b      #128,4227076
00001418  0040 8004 
0000141C  4E75      1982          rts
                    1983   ; }
                    1984   ; void IICCoreDisable() {
                    1985   _IICCoreDisable:
                    1986   ; IIC_CTR &= 0x7F;    // Disable I2C core in control register (0011_1111)
0000141E  0239 007F 1987          and.b     #127,4227076
00001422  0040 8004 
00001426  4E75      1988          rts
                    1989   ; }
                    1990   ; // I2C Driver Functions
                    1991   ; void IIC_Init(void) {
                    1992   _IIC_Init:
                    1993   ; IIC_PRER_LO = 0x59;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001428  13FC 0059 1994          move.b    #89,4227072
0000142C  0040 8000 
                    1995   ; IIC_PRER_HI = 0x00;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001430  4239 0040 1996          clr.b     4227074
00001434  8002      
                    1997   ; IIC_CTR &= 0xBF;     // Disable interrupt in control register (1011_1111)
00001436  0239 00BF 1998          and.b     #191,4227076
0000143A  0040 8004 
                    1999   ; IICCoreEnable();
0000143E  4EB8 1414 2000          jsr       _IICCoreEnable
00001442  4E75      2001          rts
                    2002   ; }
                    2003   ; void wait5ms(void) {
                    2004   _wait5ms:
00001444  2F02      2005          move.l    D2,-(A7)
                    2006   ; int i;
                    2007   ; for (i = 0; i < 10000; i++); // Wait for 5 ms
00001446  4282      2008          clr.l     D2
                    2009   wait5ms_1:
00001448  0C82 0000 2010          cmp.l     #10000,D2
0000144C  2710      
0000144E  6C04      2011          bge.s     wait5ms_3
00001450  5282      2012          addq.l    #1,D2
00001452  60F4      2013          bra       wait5ms_1
                    2014   wait5ms_3:
00001454  241F      2015          move.l    (A7)+,D2
00001456  4E75      2016          rts
                    2017   ; }
                    2018   ; void checkTIP() {
                    2019   _checkTIP:
                    2020   ; while (IIC_CRSR & TIP);
                    2021   checkTIP_1:
00001458  1039 0040 2022          move.b    4227080,D0
0000145C  8008      
0000145E  C03C 0002 2023          and.b     #2,D0
00001462  6702      2024          beq.s     checkTIP_3
00001464  60F2      2025          bra       checkTIP_1
                    2026   checkTIP_3:
00001466  4E75      2027          rts
                    2028   ; }
                    2029   ; void checkAck() {
                    2030   _checkAck:
                    2031   ; while ((IIC_CRSR & RXACK) == 1);
                    2032   checkAck_1:
00001468  1039 0040 2033          move.b    4227080,D0
0000146C  8008      
0000146E  C07C 00FF 2034          and.w     #255,D0
00001472  C07C 0080 2035          and.w     #128,D0
00001476  0C40 0001 2036          cmp.w     #1,D0
0000147A  6602      2037          bne.s     checkAck_3
0000147C  60EA      2038          bra       checkAck_1
                    2039   checkAck_3:
0000147E  4E75      2040          rts
                    2041   ; }
                    2042   ; void IICStopCondition() {
                    2043   _IICStopCondition:
                    2044   ; IIC_CRSR |= STOP | READ | IACK; // STOP + READ + IACK
00001480  0039 0061 2045          or.b      #97,4227080
00001484  0040 8008 
                    2046   ; checkTIP();
00001488  4EB8 1458 2047          jsr       _checkTIP
0000148C  4E75      2048          rts
                    2049   ; }
                    2050   ; void IICStartCondition(int rwBit) {
                    2051   _IICStartCondition:
0000148E  4E56 0000 2052          link      A6,#0
                    2053   ; if (rwBit == 0) {
00001492  202E 0008 2054          move.l    8(A6),D0
00001496  660A      2055          bne.s     IICStartCondition_1
                    2056   ; IIC_CRSR |= START | WRITE | IACK; // START + WRITE + IACK
00001498  0039 0091 2057          or.b      #145,4227080
0000149C  0040 8008 
000014A0  6008      2058          bra.s     IICStartCondition_2
                    2059   IICStartCondition_1:
                    2060   ; } else {
                    2061   ; IIC_CRSR |= START | READ | IACK; // Start condition with read bit set
000014A2  0039 00A1 2062          or.b      #161,4227080
000014A6  0040 8008 
                    2063   IICStartCondition_2:
                    2064   ; }
                    2065   ; checkTIP();
000014AA  4EB8 1458 2066          jsr       _checkTIP
                    2067   ; checkAck();
000014AE  4EB8 1468 2068          jsr       _checkAck
000014B2  4E5E      2069          unlk      A6
000014B4  4E75      2070          rts
                    2071   ; }
                    2072   ; // EEPROM Address: 101000{B0} 
                    2073   ; // EEPROM Specific Functions
                    2074   ; void EEPROMByteWrite(unsigned int data, unsigned int deviceAddr, unsigned int memoryAddr) {
                    2075   _EEPROMByteWrite:
000014B6  4E56 0000 2076          link      A6,#0
000014BA  48E7 3030 2077          movem.l   D2/D3/A2/A3,-(A7)
000014BE  45F8 1458 2078          lea       _checkTIP.L,A2
000014C2  47F8 1468 2079          lea       _checkAck.L,A3
000014C6  242E 000C 2080          move.l    12(A6),D2
000014CA  262E 0010 2081          move.l    16(A6),D3
                    2082   ; // Check if there is a transmission in progress
                    2083   ; // IICCoreEnable();
                    2084   ; if (memoryAddr < 0x10000) {
000014CE  0C83 0001 2085          cmp.l     #65536,D3
000014D2  0000      
000014D4  6404      2086          bhs.s     EEPROMByteWrite_1
                    2087   ; deviceAddr = EEPROM0;
000014D6  7450      2088          moveq     #80,D2
000014D8  6002      2089          bra.s     EEPROMByteWrite_2
                    2090   EEPROMByteWrite_1:
                    2091   ; } else {
                    2092   ; deviceAddr = EEPROM1;
000014DA  7451      2093          moveq     #81,D2
                    2094   EEPROMByteWrite_2:
                    2095   ; }
                    2096   ; checkTIP();
000014DC  4E92      2097          jsr       (A2)
                    2098   ; // Set the start condition
                    2099   ; // IICStartCondition(0);
                    2100   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2101   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2102   ; // Control code, chip select, and block select (ie: Slave Address) and the R/W bit (== 0) are sent
                    2103   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000014DE  2002      2104          move.l    D2,D0
000014E0  E388      2105          lsl.l     #1,D0
000014E2  C0BC 0000 2106          and.l     #254,D0
000014E6  00FE      
000014E8  13C0 0040 2107          move.b    D0,4227078
000014EC  8006      
                    2108   ; IIC_CRSR = START | WRITE | IACK;
000014EE  13FC 0091 2109          move.b    #145,4227080
000014F2  0040 8008 
                    2110   ; // printf("Sent Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2111   ; checkTIP();
000014F6  4E92      2112          jsr       (A2)
                    2113   ; checkAck();
000014F8  4E93      2114          jsr       (A3)
                    2115   ; // printf("Status Register 2: %x\n", IIC_CRSR);
                    2116   ; // Check for ACK
                    2117   ; // printf("\r\n Slave Address Ack Status: : %d\n", checkAck()); //TIP is checked in checkAck function
                    2118   ; // Send the high-order byte of the address
                    2119   ; IIC_TXRX = (memoryAddr >> 8) & 0xFF;
000014FA  2003      2120          move.l    D3,D0
000014FC  E088      2121          lsr.l     #8,D0
000014FE  C0BC 0000 2122          and.l     #255,D0
00001502  00FF      
00001504  13C0 0040 2123          move.b    D0,4227078
00001508  8006      
                    2124   ; IIC_CRSR = WRITE | IACK;
0000150A  13FC 0011 2125          move.b    #17,4227080
0000150E  0040 8008 
                    2126   ; checkTIP();
00001512  4E92      2127          jsr       (A2)
                    2128   ; checkAck();
00001514  4E93      2129          jsr       (A3)
                    2130   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2131   ; // Send the lower-order byte of the address
                    2132   ; IIC_TXRX = (memoryAddr & 0xFF);
00001516  2003      2133          move.l    D3,D0
00001518  C0BC 0000 2134          and.l     #255,D0
0000151C  00FF      
0000151E  13C0 0040 2135          move.b    D0,4227078
00001522  8006      
                    2136   ; IIC_CRSR = WRITE | IACK;
00001524  13FC 0011 2137          move.b    #17,4227080
00001528  0040 8008 
                    2138   ; checkTIP();
0000152C  4E92      2139          jsr       (A2)
                    2140   ; checkAck();
0000152E  4E93      2141          jsr       (A3)
                    2142   ; //printf("Sent Lower Memory Byte: %02x\n", memoryAddr & 0xFF);
                    2143   ; // printf("Status Register 4: %x\n", IIC_CRSR);
                    2144   ; // Transmit byte to be written
                    2145   ; IIC_TXRX = data;
00001530  202E 0008 2146          move.l    8(A6),D0
00001534  13C0 0040 2147          move.b    D0,4227078
00001538  8006      
                    2148   ; IIC_CRSR = STOP | WRITE | IACK;
0000153A  13FC 0051 2149          move.b    #81,4227080
0000153E  0040 8008 
                    2150   ; checkTIP();
00001542  4E92      2151          jsr       (A2)
                    2152   ; checkAck();
00001544  4E93      2153          jsr       (A3)
                    2154   ; wait5ms();
00001546  4EB8 1444 2155          jsr       _wait5ms
0000154A  4CDF 0C0C 2156          movem.l   (A7)+,D2/D3/A2/A3
0000154E  4E5E      2157          unlk      A6
00001550  4E75      2158          rts
                    2159   ; // printf("Sent Data: %02x\n", data);
                    2160   ; // printf("Sent Stop Condition");
                    2161   ; // printf("Status Register 6: %x\n", IIC_CRSR);
                    2162   ; // IICCoreDisable();
                    2163   ; //printf("\r\nI2C Byte Write Complete\n");
                    2164   ; }
                    2165   ; void EEPROMFlashPageWrite(int* data, unsigned int startingGlobalAddress, unsigned int numBytes, int fullMemory) {
                    2166   _EEPROMFlashPageWrite:
00001552  4E56 0000 2167          link      A6,#0
00001556  48E7 3F3C 2168          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000155A  282E 000C 2169          move.l    12(A6),D4
0000155E  45F8 1458 2170          lea       _checkTIP.L,A2
00001562  47F8 1468 2171          lea       _checkAck.L,A3
00001566  2A6E 0010 2172          move.l    16(A6),A5
                    2173   ; unsigned int currentAddress = startingGlobalAddress; 
0000156A  2404      2174          move.l    D4,D2
                    2175   ; unsigned int endAddress = startingGlobalAddress + numBytes;
0000156C  2004      2176          move.l    D4,D0
0000156E  D08D      2177          add.l     A5,D0
00001570  2C00      2178          move.l    D0,D6
                    2179   ; unsigned int blockAddress;
                    2180   ; unsigned int deviceAddress;
                    2181   ; unsigned int pageFlag;
                    2182   ; unsigned int currIndex = 0;
00001572  387C 0000 2183          move.w    #0,A4
                    2184   ; startingGlobalAddress = startingGlobalAddress & 0xFFFF; // Mask to 16 bits
00001576  C8BC 0000 2185          and.l     #65535,D4
0000157A  FFFF      
                    2186   ; currentAddress = startingGlobalAddress; 
0000157C  2404      2187          move.l    D4,D2
                    2188   ; endAddress = startingGlobalAddress + numBytes;
0000157E  2004      2189          move.l    D4,D0
00001580  D08D      2190          add.l     A5,D0
00001582  2C00      2191          move.l    D0,D6
                    2192   ; printf("EEPROM Flash Page Write: Start Address: 0x%x, numbytes: %d\n", startingGlobalAddress, numBytes);
00001584  2F0D      2193          move.l    A5,-(A7)
00001586  2F04      2194          move.l    D4,-(A7)
00001588  4879 0000 2195          pea       @m68kde~1_29.L
0000158C  50F0      
0000158E  4EB9 0000 2196          jsr       _printf
00001592  4470      
00001594  DEFC 000C 2197          add.w     #12,A7
                    2198   ; if (currentAddress < 0x10000) {
00001598  0C82 0001 2199          cmp.l     #65536,D2
0000159C  0000      
0000159E  6406      2200          bhs.s     EEPROMFlashPageWrite_1
                    2201   ; blockAddress = startingGlobalAddress; // Lower 64KB block
000015A0  2604      2202          move.l    D4,D3
                    2203   ; deviceAddress = EEPROM0;
000015A2  7A50      2204          moveq     #80,D5
000015A4  600C      2205          bra.s     EEPROMFlashPageWrite_2
                    2206   EEPROMFlashPageWrite_1:
                    2207   ; } else {
                    2208   ; blockAddress = startingGlobalAddress - 0x10000; // Upper 64KB block
000015A6  2004      2209          move.l    D4,D0
000015A8  0480 0001 2210          sub.l     #65536,D0
000015AC  0000      
000015AE  2600      2211          move.l    D0,D3
                    2212   ; deviceAddress = EEPROM1;
000015B0  7A51      2213          moveq     #81,D5
                    2214   EEPROMFlashPageWrite_2:
                    2215   ; }
                    2216   ; checkTIP();
000015B2  4E92      2217          jsr       (A2)
                    2218   ; while (currentAddress < endAddress) {
                    2219   EEPROMFlashPageWrite_3:
000015B4  B486      2220          cmp.l     D6,D2
000015B6  6400 0106 2221          bhs       EEPROMFlashPageWrite_5
                    2222   ; // printf("Entered New Page, Current Address: %d, End Address: %d\n", currentAddress, endAddress);
                    2223   ; if (currentAddress == 0x10000) {
000015BA  0C82 0001 2224          cmp.l     #65536,D2
000015BE  0000      
000015C0  6604      2225          bne.s     EEPROMFlashPageWrite_6
                    2226   ; blockAddress = 0; // Reset to beginning of Block 1
000015C2  4283      2227          clr.l     D3
000015C4  6016      2228          bra.s     EEPROMFlashPageWrite_7
                    2229   EEPROMFlashPageWrite_6:
                    2230   ; } 
                    2231   ; else {
                    2232   ; blockAddress = (currentAddress < 0x10000) ? currentAddress : (currentAddress - 0x10000);
000015C6  0C82 0001 2233          cmp.l     #65536,D2
000015CA  0000      
000015CC  6404      2234          bhs.s     EEPROMFlashPageWrite_8
000015CE  2002      2235          move.l    D2,D0
000015D0  6008      2236          bra.s     EEPROMFlashPageWrite_9
                    2237   EEPROMFlashPageWrite_8:
000015D2  2002      2238          move.l    D2,D0
000015D4  0480 0001 2239          sub.l     #65536,D0
000015D8  0000      
                    2240   EEPROMFlashPageWrite_9:
000015DA  2600      2241          move.l    D0,D3
                    2242   EEPROMFlashPageWrite_7:
                    2243   ; }    
                    2244   ; pageFlag = 1;
000015DC  7E01      2245          moveq     #1,D7
                    2246   ; // START condition
                    2247   ; IIC_TXRX = (deviceAddress << 1) & 0xFE;    // Upper 64KB block
000015DE  2005      2248          move.l    D5,D0
000015E0  E388      2249          lsl.l     #1,D0
000015E2  C0BC 0000 2250          and.l     #254,D0
000015E6  00FE      
000015E8  13C0 0040 2251          move.b    D0,4227078
000015EC  8006      
                    2252   ; IIC_CRSR = START | WRITE | IACK;
000015EE  13FC 0091 2253          move.b    #145,4227080
000015F2  0040 8008 
                    2254   ; checkTIP();
000015F6  4E92      2255          jsr       (A2)
                    2256   ; checkAck();
000015F8  4E93      2257          jsr       (A3)
                    2258   ; // Send the two address bytes
                    2259   ; // Send the high-order byte of the address
                    2260   ; IIC_TXRX = (blockAddress >> 8) & 0xFF;
000015FA  2003      2261          move.l    D3,D0
000015FC  E088      2262          lsr.l     #8,D0
000015FE  C0BC 0000 2263          and.l     #255,D0
00001602  00FF      
00001604  13C0 0040 2264          move.b    D0,4227078
00001608  8006      
                    2265   ; IIC_CRSR = WRITE | IACK;
0000160A  13FC 0011 2266          move.b    #17,4227080
0000160E  0040 8008 
                    2267   ; checkTIP();
00001612  4E92      2268          jsr       (A2)
                    2269   ; checkAck();
00001614  4E93      2270          jsr       (A3)
                    2271   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2272   ; // Send the lower-order byte of the address
                    2273   ; IIC_TXRX = (blockAddress & 0xFF);
00001616  2003      2274          move.l    D3,D0
00001618  C0BC 0000 2275          and.l     #255,D0
0000161C  00FF      
0000161E  13C0 0040 2276          move.b    D0,4227078
00001622  8006      
                    2277   ; IIC_CRSR = WRITE | IACK;
00001624  13FC 0011 2278          move.b    #17,4227080
00001628  0040 8008 
                    2279   ; checkTIP();
0000162C  4E92      2280          jsr       (A2)
                    2281   ; checkAck();
0000162E  4E93      2282          jsr       (A3)
                    2283   ; while (pageFlag) {
                    2284   EEPROMFlashPageWrite_10:
00001630  4A87      2285          tst.l     D7
00001632  6700 0086 2286          beq       EEPROMFlashPageWrite_12
                    2287   ; if (fullMemory) {        
00001636  4AAE 0014 2288          tst.l     20(A6)
0000163A  670E      2289          beq.s     EEPROMFlashPageWrite_13
                    2290   ; IIC_TXRX = data[0];
0000163C  206E 0008 2291          move.l    8(A6),A0
00001640  2010      2292          move.l    (A0),D0
00001642  13C0 0040 2293          move.b    D0,4227078
00001646  8006      
00001648  6012      2294          bra.s     EEPROMFlashPageWrite_14
                    2295   EEPROMFlashPageWrite_13:
                    2296   ; } else {
                    2297   ; IIC_TXRX = data[currIndex];
0000164A  206E 0008 2298          move.l    8(A6),A0
0000164E  200C      2299          move.l    A4,D0
00001650  E588      2300          lsl.l     #2,D0
00001652  2030 0800 2301          move.l    0(A0,D0.L),D0
00001656  13C0 0040 2302          move.b    D0,4227078
0000165A  8006      
                    2303   EEPROMFlashPageWrite_14:
                    2304   ; }
                    2305   ; if (currentAddress == 0xFFFF) {
0000165C  0C82 0000 2306          cmp.l     #65535,D2
00001660  FFFF      
00001662  6602      2307          bne.s     EEPROMFlashPageWrite_15
                    2308   ; deviceAddress = EEPROM1;  // Switch to next device for next byte
00001664  7A51      2309          moveq     #81,D5
                    2310   EEPROMFlashPageWrite_15:
                    2311   ; }
                    2312   ; if (blockAddress % 128 == 127 || currentAddress == endAddress - 1 || currentAddress == 0xFFFF) {
00001666  2F03      2313          move.l    D3,-(A7)
00001668  4878 0080 2314          pea       128
0000166C  4EB9 0000 2315          jsr       ULDIV
00001670  39D6      
00001672  202F 0004 2316          move.l    4(A7),D0
00001676  504F      2317          addq.w    #8,A7
00001678  0C80 0000 2318          cmp.l     #127,D0
0000167C  007F      
0000167E  6710      2319          beq.s     EEPROMFlashPageWrite_19
00001680  2006      2320          move.l    D6,D0
00001682  5380      2321          subq.l    #1,D0
00001684  B480      2322          cmp.l     D0,D2
00001686  6708      2323          beq.s     EEPROMFlashPageWrite_19
00001688  0C82 0000 2324          cmp.l     #65535,D2
0000168C  FFFF      
0000168E  6614      2325          bne.s     EEPROMFlashPageWrite_17
                    2326   EEPROMFlashPageWrite_19:
                    2327   ; IIC_CRSR = STOP | WRITE | IACK;
00001690  13FC 0051 2328          move.b    #81,4227080
00001694  0040 8008 
                    2329   ; pageFlag = 0;
00001698  7E00      2330          moveq     #0,D7
                    2331   ; checkTIP();
0000169A  4E92      2332          jsr       (A2)
                    2333   ; checkAck();
0000169C  4E93      2334          jsr       (A3)
                    2335   ; wait5ms();
0000169E  4EB8 1444 2336          jsr       _wait5ms
000016A2  600C      2337          bra.s     EEPROMFlashPageWrite_18
                    2338   EEPROMFlashPageWrite_17:
                    2339   ; } else {
                    2340   ; IIC_CRSR = WRITE | IACK;
000016A4  13FC 0011 2341          move.b    #17,4227080
000016A8  0040 8008 
                    2342   ; checkTIP();
000016AC  4E92      2343          jsr       (A2)
                    2344   ; checkAck();
000016AE  4E93      2345          jsr       (A3)
                    2346   EEPROMFlashPageWrite_18:
                    2347   ; }
                    2348   ; // ("Current Address: %d, End Address: %d, Block Address: %d\n", currentAddress, endAddress, blockAddress);
                    2349   ; currIndex++;
000016B0  524C      2350          addq.w    #1,A4
                    2351   ; currentAddress++;
000016B2  5282      2352          addq.l    #1,D2
                    2353   ; blockAddress++;  // Increment blockAddress WITH currentAddress
000016B4  5283      2354          addq.l    #1,D3
000016B6  6000 FF78 2355          bra       EEPROMFlashPageWrite_10
                    2356   EEPROMFlashPageWrite_12:
000016BA  6000 FEF8 2357          bra       EEPROMFlashPageWrite_3
                    2358   EEPROMFlashPageWrite_5:
000016BE  4CDF 3CFC 2359          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000016C2  4E5E      2360          unlk      A6
000016C4  4E75      2361          rts
                    2362   ; }
                    2363   ; }
                    2364   ; }
                    2365   ; int EEPROMRandomRead(unsigned int deviceAddr, unsigned readAddr) {
                    2366   _EEPROMRandomRead:
000016C6  4E56 FFFC 2367          link      A6,#-4
000016CA  48E7 3030 2368          movem.l   D2/D3/A2/A3,-(A7)
000016CE  45F8 1458 2369          lea       _checkTIP.L,A2
000016D2  47F8 1468 2370          lea       _checkAck.L,A3
000016D6  242E 0008 2371          move.l    8(A6),D2
000016DA  262E 000C 2372          move.l    12(A6),D3
                    2373   ; unsigned int readData;
                    2374   ; if (readAddr < 0x10000) {
000016DE  0C83 0001 2375          cmp.l     #65536,D3
000016E2  0000      
000016E4  6404      2376          bhs.s     EEPROMRandomRead_1
                    2377   ; deviceAddr = EEPROM0;
000016E6  7450      2378          moveq     #80,D2
000016E8  6002      2379          bra.s     EEPROMRandomRead_2
                    2380   EEPROMRandomRead_1:
                    2381   ; } else {
                    2382   ; deviceAddr = EEPROM1;
000016EA  7451      2383          moveq     #81,D2
                    2384   EEPROMRandomRead_2:
                    2385   ; }
                    2386   ; // Wait for bus to be idle
                    2387   ; // IICCoreEnable(); 
                    2388   ; checkTIP(); 
000016EC  4E92      2389          jsr       (A2)
                    2390   ; // Print TXRX register
                    2391   ; // Send start condition for a write
                    2392   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000016EE  2002      2393          move.l    D2,D0
000016F0  E388      2394          lsl.l     #1,D0
000016F2  C0BC 0000 2395          and.l     #254,D0
000016F6  00FE      
000016F8  13C0 0040 2396          move.b    D0,4227078
000016FC  8006      
                    2397   ; IIC_CRSR = START | WRITE | IACK;
000016FE  13FC 0091 2398          move.b    #145,4227080
00001702  0040 8008 
                    2399   ; checkTIP();
00001706  4E92      2400          jsr       (A2)
                    2401   ; checkAck();
00001708  4E93      2402          jsr       (A3)
                    2403   ; //printf("Sending Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2404   ; // Send the high-order byte of the address
                    2405   ; IIC_TXRX = (readAddr >> 8) & 0xFF;
0000170A  2003      2406          move.l    D3,D0
0000170C  E088      2407          lsr.l     #8,D0
0000170E  C0BC 0000 2408          and.l     #255,D0
00001712  00FF      
00001714  13C0 0040 2409          move.b    D0,4227078
00001718  8006      
                    2410   ; IIC_CRSR = WRITE | IACK;
0000171A  13FC 0011 2411          move.b    #17,4227080
0000171E  0040 8008 
                    2412   ; //printf("Sent Upper Memory Byte: %02x\n", readAddr >> 8);
                    2413   ; checkTIP();
00001722  4E92      2414          jsr       (A2)
                    2415   ; checkAck();
00001724  4E93      2416          jsr       (A3)
                    2417   ; // Send the low-order byte of the address
                    2418   ; IIC_TXRX = (readAddr & 0xFF);
00001726  2003      2419          move.l    D3,D0
00001728  C0BC 0000 2420          and.l     #255,D0
0000172C  00FF      
0000172E  13C0 0040 2421          move.b    D0,4227078
00001732  8006      
                    2422   ; IIC_CRSR = WRITE | IACK;
00001734  13FC 0011 2423          move.b    #17,4227080
00001738  0040 8008 
                    2424   ; //printf("Sent Lower Memory Byte: %02x\n", readAddr & 0xFF);
                    2425   ; checkTIP();
0000173C  4E92      2426          jsr       (A2)
                    2427   ; checkAck();
0000173E  4E93      2428          jsr       (A3)
                    2429   ; // send START condition again followed by slave address with R/W set to 1
                    2430   ; IIC_TXRX = ((deviceAddr << 1) | 0x01);
00001740  2002      2431          move.l    D2,D0
00001742  E388      2432          lsl.l     #1,D0
00001744  80BC 0000 2433          or.l      #1,D0
00001748  0001      
0000174A  13C0 0040 2434          move.b    D0,4227078
0000174E  8006      
                    2435   ; IIC_CRSR = START | WRITE | IACK;
00001750  13FC 0091 2436          move.b    #145,4227080
00001754  0040 8008 
                    2437   ; checkTIP();
00001758  4E92      2438          jsr       (A2)
                    2439   ; checkAck();
0000175A  4E93      2440          jsr       (A3)
                    2441   ; // IICStopCondition();
                    2442   ; IIC_CRSR = STOP | READ | IACK | NACK; // STOP + READ + IACK + NACK
0000175C  13FC 0069 2443          move.b    #105,4227080
00001760  0040 8008 
                    2444   ; checkTIP();
00001764  4E92      2445          jsr       (A2)
                    2446   ; // Check if IF flag is sent, and if so read the data
                    2447   ; while (!(IIC_CRSR & 0x1));
                    2448   EEPROMRandomRead_3:
00001766  1039 0040 2449          move.b    4227080,D0
0000176A  8008      
0000176C  C03C 0001 2450          and.b     #1,D0
00001770  6602      2451          bne.s     EEPROMRandomRead_5
00001772  60F2      2452          bra       EEPROMRandomRead_3
                    2453   EEPROMRandomRead_5:
                    2454   ; IIC_CRSR = 0;
00001774  4239 0040 2455          clr.b     4227080
00001778  8008      
                    2456   ; readData = IIC_TXRX;
0000177A  1039 0040 2457          move.b    4227078,D0
0000177E  8006      
00001780  C0BC 0000 2458          and.l     #255,D0
00001784  00FF      
00001786  2D40 FFFC 2459          move.l    D0,-4(A6)
                    2460   ; return readData;    
0000178A  202E FFFC 2461          move.l    -4(A6),D0
0000178E  4CDF 0C0C 2462          movem.l   (A7)+,D2/D3/A2/A3
00001792  4E5E      2463          unlk      A6
00001794  4E75      2464          rts
                    2465   ; }
                    2466   ; void EEPROMReadBlock0(unsigned int startAddr, int* readLen) {
                    2467   _EEPROMReadBlock0:
00001796  4E56 FFFC 2468          link      A6,#-4
0000179A  48E7 3C30 2469          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
0000179E  45F8 1458 2470          lea       _checkTIP.L,A2
000017A2  47F8 1468 2471          lea       _checkAck.L,A3
000017A6  262E 0008 2472          move.l    8(A6),D3
                    2473   ; unsigned int currAddr;
                    2474   ; unsigned int endAddr;
                    2475   ; unsigned int readData;
                    2476   ; int exitFlag = 0;
000017AA  4285      2477          clr.l     D5
                    2478   ; startAddr = startAddr & 0xFFFF; // Mask to 16 bits
000017AC  C6BC 0000 2479          and.l     #65535,D3
000017B0  FFFF      
                    2480   ; currAddr = startAddr;
000017B2  2403      2481          move.l    D3,D2
                    2482   ; endAddr = startAddr + *readLen;
000017B4  2003      2483          move.l    D3,D0
000017B6  206E 000C 2484          move.l    12(A6),A0
000017BA  D090      2485          add.l     (A0),D0
000017BC  2800      2486          move.l    D0,D4
                    2487   ; //printf("Start Addr: %d\n Curr Addr: %d, Read Len: %d\n", startAddr, currAddr, *readLen);
                    2488   ; checkTIP();
000017BE  4E92      2489          jsr       (A2)
                    2490   ; IIC_TXRX = ((EEPROM0 << 1) & 0xFE); // Send EEPROM address with write bit
000017C0  13FC 00A0 2491          move.b    #160,4227078
000017C4  0040 8006 
                    2492   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
000017C8  13FC 0091 2493          move.b    #145,4227080
000017CC  0040 8008 
                    2494   ; checkTIP();
000017D0  4E92      2495          jsr       (A2)
                    2496   ; checkAck(); 
000017D2  4E93      2497          jsr       (A3)
                    2498   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
000017D4  2002      2499          move.l    D2,D0
000017D6  E088      2500          lsr.l     #8,D0
000017D8  C0BC 0000 2501          and.l     #255,D0
000017DC  00FF      
000017DE  13C0 0040 2502          move.b    D0,4227078
000017E2  8006      
                    2503   ; IIC_CRSR = WRITE | IACK; // Write command
000017E4  13FC 0011 2504          move.b    #17,4227080
000017E8  0040 8008 
                    2505   ; checkTIP();
000017EC  4E92      2506          jsr       (A2)
                    2507   ; checkAck();
000017EE  4E93      2508          jsr       (A3)
                    2509   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
000017F0  2002      2510          move.l    D2,D0
000017F2  C0BC 0000 2511          and.l     #255,D0
000017F6  00FF      
000017F8  13C0 0040 2512          move.b    D0,4227078
000017FC  8006      
                    2513   ; IIC_CRSR = WRITE | IACK; // Write command
000017FE  13FC 0011 2514          move.b    #17,4227080
00001802  0040 8008 
                    2515   ; checkTIP();
00001806  4E92      2516          jsr       (A2)
                    2517   ; checkAck();
00001808  4E93      2518          jsr       (A3)
                    2519   ; // Repeated start condition here:
                    2520   ; IIC_TXRX = ((EEPROM0 << 1) | 0x01); // (A3) Send EEPROM address with read bit
0000180A  13FC 00A1 2521          move.b    #161,4227078
0000180E  0040 8006 
                    2522   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
00001812  13FC 0091 2523          move.b    #145,4227080
00001816  0040 8008 
                    2524   ; checkTIP();
0000181A  4E92      2525          jsr       (A2)
                    2526   ; checkAck();
0000181C  4E93      2527          jsr       (A3)
                    2528   ; // Evaluate data here
                    2529   ; for (currAddr = startAddr; currAddr < endAddr; currAddr++) {
0000181E  2403      2530          move.l    D3,D2
                    2531   EEPROMReadBlock0_1:
00001820  B484      2532          cmp.l     D4,D2
00001822  6400 009A 2533          bhs       EEPROMReadBlock0_3
                    2534   ; if (currAddr == 0xFFFF || currAddr == endAddr - 1) {
00001826  0C82 0000 2535          cmp.l     #65535,D2
0000182A  FFFF      
0000182C  6708      2536          beq.s     EEPROMReadBlock0_6
0000182E  2004      2537          move.l    D4,D0
00001830  5380      2538          subq.l    #1,D0
00001832  B480      2539          cmp.l     D0,D2
00001834  660C      2540          bne.s     EEPROMReadBlock0_4
                    2541   EEPROMReadBlock0_6:
                    2542   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
00001836  13FC 0069 2543          move.b    #105,4227080
0000183A  0040 8008 
                    2544   ; exitFlag = 1;
0000183E  7A01      2545          moveq     #1,D5
00001840  6008      2546          bra.s     EEPROMReadBlock0_5
                    2547   EEPROMReadBlock0_4:
                    2548   ; } else {
                    2549   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
00001842  13FC 0021 2550          move.b    #33,4227080
00001846  0040 8008 
                    2551   EEPROMReadBlock0_5:
                    2552   ; }
                    2553   ; (*readLen)--;
0000184A  206E 000C 2554          move.l    12(A6),A0
0000184E  5390      2555          subq.l    #1,(A0)
                    2556   ; checkTIP();
00001850  4E92      2557          jsr       (A2)
                    2558   ; checkAck(); // Check for ACK
00001852  4E93      2559          jsr       (A3)
                    2560   ; // Read data from EEPROM
                    2561   ; while (!(IIC_CRSR & 0x1)); // Wait for IF flag to be set
                    2562   EEPROMReadBlock0_7:
00001854  1039 0040 2563          move.b    4227080,D0
00001858  8008      
0000185A  C03C 0001 2564          and.b     #1,D0
0000185E  6602      2565          bne.s     EEPROMReadBlock0_9
00001860  60F2      2566          bra       EEPROMReadBlock0_7
                    2567   EEPROMReadBlock0_9:
                    2568   ; IIC_CRSR = 0; // Clear IF flag
00001862  4239 0040 2569          clr.b     4227080
00001866  8008      
                    2570   ; readData = IIC_TXRX; // Read data from EEPROM
00001868  1039 0040 2571          move.b    4227078,D0
0000186C  8006      
0000186E  C0BC 0000 2572          and.l     #255,D0
00001872  00FF      
00001874  2D40 FFFC 2573          move.l    D0,-4(A6)
                    2574   ; if ((currAddr % 1000) == 0) {
00001878  2F02      2575          move.l    D2,-(A7)
0000187A  4878 03E8 2576          pea       1000
0000187E  4EB9 0000 2577          jsr       ULDIV
00001882  39D6      
00001884  202F 0004 2578          move.l    4(A7),D0
00001888  504F      2579          addq.w    #8,A7
0000188A  4A80      2580          tst.l     D0
0000188C  6616      2581          bne.s     EEPROMReadBlock0_10
                    2582   ; printf("\r\n Block 0 Address: 0x%04X: %d\n", currAddr, readData);
0000188E  2F2E FFFC 2583          move.l    -4(A6),-(A7)
00001892  2F02      2584          move.l    D2,-(A7)
00001894  4879 0000 2585          pea       @m68kde~1_30.L
00001898  512C      
0000189A  4EB9 0000 2586          jsr       _printf
0000189E  4470      
000018A0  DEFC 000C 2587          add.w     #12,A7
                    2588   EEPROMReadBlock0_10:
                    2589   ; }
                    2590   ; if (exitFlag) {
000018A4  4A85      2591          tst.l     D5
000018A6  6710      2592          beq.s     EEPROMReadBlock0_12
                    2593   ; printf("\r\n Exiting EEPROM Read Block 0\n");
000018A8  4879 0000 2594          pea       @m68kde~1_31.L
000018AC  514C      
000018AE  4EB9 0000 2595          jsr       _printf
000018B2  4470      
000018B4  584F      2596          addq.w    #4,A7
                    2597   ; break;
000018B6  6006      2598          bra.s     EEPROMReadBlock0_3
                    2599   EEPROMReadBlock0_12:
000018B8  5282      2600          addq.l    #1,D2
000018BA  6000 FF64 2601          bra       EEPROMReadBlock0_1
                    2602   EEPROMReadBlock0_3:
000018BE  4CDF 0C3C 2603          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
000018C2  4E5E      2604          unlk      A6
000018C4  4E75      2605          rts
                    2606   ; }
                    2607   ; }
                    2608   ; }
                    2609   ; // STILL NEED TO TEST BLOCK 1 MORE AND CROSSING THE BLOCK BOUNDARY
                    2610   ; void EEPROMReadBlock1(int startAddr, int* readLen) {
                    2611   _EEPROMReadBlock1:
000018C6  4E56 FFF8 2612          link      A6,#-8
000018CA  48E7 3030 2613          movem.l   D2/D3/A2/A3,-(A7)
000018CE  45F8 1458 2614          lea       _checkTIP.L,A2
000018D2  47F8 1468 2615          lea       _checkAck.L,A3
                    2616   ; unsigned int currAddr = startAddr & 0xFFFF; // Mask to 16 bits
000018D6  202E 0008 2617          move.l    8(A6),D0
000018DA  C0BC 0000 2618          and.l     #65535,D0
000018DE  FFFF      
000018E0  2400      2619          move.l    D0,D2
                    2620   ; unsigned int endAddr = currAddr + *readLen;
000018E2  2002      2621          move.l    D2,D0
000018E4  206E 000C 2622          move.l    12(A6),A0
000018E8  D090      2623          add.l     (A0),D0
000018EA  2D40 FFF8 2624          move.l    D0,-8(A6)
                    2625   ; unsigned int readData;
                    2626   ; int exitFlag = 0;
000018EE  4283      2627          clr.l     D3
                    2628   ; checkTIP();
000018F0  4E92      2629          jsr       (A2)
                    2630   ; IIC_TXRX = ((EEPROM1 << 1) & 0xFE); // Send EEPROM address with write bit
000018F2  13FC 00A2 2631          move.b    #162,4227078
000018F6  0040 8006 
                    2632   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
000018FA  13FC 0091 2633          move.b    #145,4227080
000018FE  0040 8008 
                    2634   ; checkTIP();
00001902  4E92      2635          jsr       (A2)
                    2636   ; checkAck(); 
00001904  4E93      2637          jsr       (A3)
                    2638   ; IIC_TXRX = (currAddr >> 8) & 0xFF; // Send high byte of address
00001906  2002      2639          move.l    D2,D0
00001908  E088      2640          lsr.l     #8,D0
0000190A  C0BC 0000 2641          and.l     #255,D0
0000190E  00FF      
00001910  13C0 0040 2642          move.b    D0,4227078
00001914  8006      
                    2643   ; IIC_CRSR = WRITE | IACK; // Write command
00001916  13FC 0011 2644          move.b    #17,4227080
0000191A  0040 8008 
                    2645   ; checkTIP();
0000191E  4E92      2646          jsr       (A2)
                    2647   ; checkAck();
00001920  4E93      2648          jsr       (A3)
                    2649   ; IIC_TXRX = (currAddr & 0xFF); // Send low byte of address
00001922  2002      2650          move.l    D2,D0
00001924  C0BC 0000 2651          and.l     #255,D0
00001928  00FF      
0000192A  13C0 0040 2652          move.b    D0,4227078
0000192E  8006      
                    2653   ; IIC_CRSR = WRITE | IACK; // Write command
00001930  13FC 0011 2654          move.b    #17,4227080
00001934  0040 8008 
                    2655   ; checkTIP();
00001938  4E92      2656          jsr       (A2)
                    2657   ; checkAck();
0000193A  4E93      2658          jsr       (A3)
                    2659   ; // Repeated start condition here:
                    2660   ; IIC_TXRX = ((EEPROM1 << 1) | 0x01); // (A3) Send EEPROM address with read bit
0000193C  13FC 00A3 2661          move.b    #163,4227078
00001940  0040 8006 
                    2662   ; IIC_CRSR = START | WRITE | IACK; // Start condition with read bit
00001944  13FC 0091 2663          move.b    #145,4227080
00001948  0040 8008 
                    2664   ; checkTIP();
0000194C  4E92      2665          jsr       (A2)
                    2666   ; checkAck();
0000194E  4E93      2667          jsr       (A3)
                    2668   ; // Evaluate data here
                    2669   ; for (currAddr = startAddr & 0xFFFF; currAddr < endAddr; currAddr++) {
00001950  202E 0008 2670          move.l    8(A6),D0
00001954  C0BC 0000 2671          and.l     #65535,D0
00001958  FFFF      
0000195A  2400      2672          move.l    D0,D2
                    2673   EEPROMReadBlock1_1:
0000195C  B4AE FFF8 2674          cmp.l     -8(A6),D2
00001960  6400 009A 2675          bhs       EEPROMReadBlock1_3
                    2676   ; if (currAddr == 0xFFFF) {
00001964  0C82 0000 2677          cmp.l     #65535,D2
00001968  FFFF      
0000196A  660C      2678          bne.s     EEPROMReadBlock1_4
                    2679   ; IIC_CRSR = STOP | READ | IACK | NACK; // Stop condition with read bit
0000196C  13FC 0069 2680          move.b    #105,4227080
00001970  0040 8008 
                    2681   ; exitFlag = 1;
00001974  7601      2682          moveq     #1,D3
00001976  6008      2683          bra.s     EEPROMReadBlock1_5
                    2684   EEPROMReadBlock1_4:
                    2685   ; } else {
                    2686   ; IIC_CRSR = (READ | IACK) & (~NACK); // Read command
00001978  13FC 0021 2687          move.b    #33,4227080
0000197C  0040 8008 
                    2688   EEPROMReadBlock1_5:
                    2689   ; }
                    2690   ; (*readLen)--;
00001980  206E 000C 2691          move.l    12(A6),A0
00001984  5390      2692          subq.l    #1,(A0)
                    2693   ; checkTIP();
00001986  4E92      2694          jsr       (A2)
                    2695   ; checkAck(); // Check for ACK
00001988  4E93      2696          jsr       (A3)
                    2697   ; // Read data from EEPROM
                    2698   ; while (!IIC_CRSR & 0x1); // Wait for IF flag to be set
                    2699   EEPROMReadBlock1_6:
0000198A  4A39 0040 2700          tst.b     4227080
0000198E  8008      
00001990  6604      2701          bne.s     EEPROMReadBlock1_9
00001992  7001      2702          moveq     #1,D0
00001994  6002      2703          bra.s     EEPROMReadBlock1_10
                    2704   EEPROMReadBlock1_9:
00001996  4280      2705          clr.l     D0
                    2706   EEPROMReadBlock1_10:
00001998  C03C 0001 2707          and.b     #1,D0
0000199C  6702      2708          beq.s     EEPROMReadBlock1_8
0000199E  60EA      2709          bra       EEPROMReadBlock1_6
                    2710   EEPROMReadBlock1_8:
                    2711   ; IIC_CRSR = 0; // Clear IF flag
000019A0  4239 0040 2712          clr.b     4227080
000019A4  8008      
                    2713   ; readData = IIC_TXRX; // Read data from EEPROM
000019A6  1039 0040 2714          move.b    4227078,D0
000019AA  8006      
000019AC  C0BC 0000 2715          and.l     #255,D0
000019B0  00FF      
000019B2  2D40 FFFC 2716          move.l    D0,-4(A6)
                    2717   ; if ((currAddr % 1000) == 0) {
000019B6  2F02      2718          move.l    D2,-(A7)
000019B8  4878 03E8 2719          pea       1000
000019BC  4EB9 0000 2720          jsr       ULDIV
000019C0  39D6      
000019C2  202F 0004 2721          move.l    4(A7),D0
000019C6  504F      2722          addq.w    #8,A7
000019C8  4A80      2723          tst.l     D0
000019CA  6616      2724          bne.s     EEPROMReadBlock1_11
                    2725   ; printf("\r\n Block 1 Address: 0x%04X: %d\n", currAddr, readData);
000019CC  2F2E FFFC 2726          move.l    -4(A6),-(A7)
000019D0  2F02      2727          move.l    D2,-(A7)
000019D2  4879 0000 2728          pea       @m68kde~1_32.L
000019D6  516C      
000019D8  4EB9 0000 2729          jsr       _printf
000019DC  4470      
000019DE  DEFC 000C 2730          add.w     #12,A7
                    2731   EEPROMReadBlock1_11:
                    2732   ; }
                    2733   ; if (exitFlag) {
000019E2  4A83      2734          tst.l     D3
000019E4  6710      2735          beq.s     EEPROMReadBlock1_13
                    2736   ; printf("\r\n Exiting EEPROM Read Block 1\n");
000019E6  4879 0000 2737          pea       @m68kde~1_33.L
000019EA  518C      
000019EC  4EB9 0000 2738          jsr       _printf
000019F0  4470      
000019F2  584F      2739          addq.w    #4,A7
                    2740   ; break;
000019F4  6006      2741          bra.s     EEPROMReadBlock1_3
                    2742   EEPROMReadBlock1_13:
000019F6  5282      2743          addq.l    #1,D2
000019F8  6000 FF62 2744          bra       EEPROMReadBlock1_1
                    2745   EEPROMReadBlock1_3:
000019FC  4CDF 0C0C 2746          movem.l   (A7)+,D2/D3/A2/A3
00001A00  4E5E      2747          unlk      A6
00001A02  4E75      2748          rts
                    2749   ; }
                    2750   ; }
                    2751   ; }
                    2752   ; int EEPROMSequentialRead(unsigned int startGlobalAddr, int readLen) {
                    2753   _EEPROMSequentialRead:
00001A04  4E56 0000 2754          link      A6,#0
00001A08  48E7 2020 2755          movem.l   D2/A2,-(A7)
00001A0C  45EE 000C 2756          lea       12(A6),A2
00001A10  242E 0008 2757          move.l    8(A6),D2
                    2758   ; // REMOVE THIS: startGlobalAddr = startGlobalAddr & 0xFFFF;
                    2759   ; if (startGlobalAddr <= 0xFFFF) {
00001A14  0C82 0000 2760          cmp.l     #65535,D2
00001A18  FFFF      
00001A1A  6220      2761          bhi.s     EEPROMSequentialRead_1
                    2762   ; EEPROMReadBlock0(startGlobalAddr, &readLen);
00001A1C  2F0A      2763          move.l    A2,-(A7)
00001A1E  2F02      2764          move.l    D2,-(A7)
00001A20  4EB8 1796 2765          jsr       _EEPROMReadBlock0
00001A24  504F      2766          addq.w    #8,A7
                    2767   ; if (readLen > 0) {
00001A26  2012      2768          move.l    (A2),D0
00001A28  0C80 0000 2769          cmp.l     #0,D0
00001A2C  0000      
00001A2E  6F0A      2770          ble.s     EEPROMSequentialRead_3
                    2771   ; EEPROMReadBlock1(0, &readLen);
00001A30  2F0A      2772          move.l    A2,-(A7)
00001A32  42A7      2773          clr.l     -(A7)
00001A34  4EB8 18C6 2774          jsr       _EEPROMReadBlock1
00001A38  504F      2775          addq.w    #8,A7
                    2776   EEPROMSequentialRead_3:
00001A3A  6012      2777          bra.s     EEPROMSequentialRead_2
                    2778   EEPROMSequentialRead_1:
                    2779   ; }
                    2780   ; } else {
                    2781   ; EEPROMReadBlock1(startGlobalAddr - 0x10000, &readLen);
00001A3C  2F0A      2782          move.l    A2,-(A7)
00001A3E  2202      2783          move.l    D2,D1
00001A40  0481 0001 2784          sub.l     #65536,D1
00001A44  0000      
00001A46  2F01      2785          move.l    D1,-(A7)
00001A48  4EB8 18C6 2786          jsr       _EEPROMReadBlock1
00001A4C  504F      2787          addq.w    #8,A7
                    2788   EEPROMSequentialRead_2:
00001A4E  4CDF 0404 2789          movem.l   (A7)+,D2/A2
00001A52  4E5E      2790          unlk      A6
00001A54  4E75      2791          rts
                    2792   ; }
                    2793   ; }
                    2794   ; // I2CTest() {
                    2795   ; //     unsigned int i, j;
                    2796   ; //     unsigned int readData;
                    2797   ; //     char c, text[150];
                    2798   ; //     unsigned char dataByte;
                    2799   ; //     unsigned int address, size, intBuffer;
                    2800   ; //     unsigned int testChoice = 0;
                    2801   ; //     unsigned char startAddress;
                    2802   ; //     unsigned int dataPattern = 0;
                    2803   ; //     printf("\r\n I2C Test\n");
                    2804   ; //     printf("\r\nInitializing I2C...\n");
                    2805   ; //     IIC_Init();
                    2806   ; //     scanflush();
                    2807   ; //     memset(text, 0, sizeof(text));  // fills with zeros
                    2808   ; //     printf("\r\nChoose option:\n");  // Fixed missing \n
                    2809   ; //     printf("1 Read Single Byte from EEPROM\n");
                    2810   ; //     printf("2 Write Single Byte to EEPROM\n");
                    2811   ; //     printf("3 Read Block of Data from EEPROM\n");
                    2812   ; //     printf("4 Write Block of Data to EEPROM\n");
                    2813   ; //     testChoice = _getch() - 48;    
                    2814   ; //     // Option 1: Read Single Byte
                    2815   ; //     if (testChoice == 1) {
                    2816   ; //         printf("\r\nRead Single Byte\n");
                    2817   ; //         printf("Enter address: 0x");
                    2818   ; //         address = Get8HexDigits(0);
                    2819   ; //         dataByte = EEPROMRandomRead(EEPROM0, address);
                    2820   ; //         printf("Read from address 0x%X: 0x%02X\n", address, dataByte);
                    2821   ; //     }
                    2822   ; //     // Option 2: Write Single Byte
                    2823   ; //     if (testChoice == 2) {
                    2824   ; //         printf("\r\nWrite Single Byte\n"); 
                    2825   ; //         printf("Enter address: 0x");
                    2826   ; //         address = Get8HexDigits(0);
                    2827   ; //         printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
                    2828   ; //         intBuffer = _getch() - 48;
                    2829   ; //         // scanf("%d", &intBuffer);
                    2830   ; //         switch (intBuffer) {
                    2831   ; //             case(0):
                    2832   ; //                 dataPattern = 0x00; break;
                    2833   ; //             case(1):
                    2834   ; //                 dataPattern = 0xB2; break;
                    2835   ; //             case(2):
                    2836   ; //                 dataPattern = 0xC3; break;
                    2837   ; //             case(3):
                    2838   ; //                 dataPattern = 0xD4; break;
                    2839   ; //         }
                    2840   ; //         dataPattern &= 0xFF;
                    2841   ; //         EEPROMByteWrite(dataPattern, EEPROM0, address);
                    2842   ; //         printf("Wrote 0x%02X to address 0x%X\n", dataPattern, address);
                    2843   ; //         readData = EEPROMRandomRead(EEPROM0, address);
                    2844   ; //         printf("Read back: 0x%02X\n", readData);
                    2845   ; //     }
                    2846   ; //     // Option 3: Read Block of Data
                    2847   ; //     if (testChoice == 3) {
                    2848   ; //         printf("\r\nRead Block of Data\n");
                    2849   ; //         printf("Enter start address (hex): 0x");
                    2850   ; //         startAddress = Get8HexDigits(0);
                    2851   ; //         switch (intBuffer) {
                    2852   ; //             case(0):
                    2853   ; //                 dataPattern = 0x00; break;
                    2854   ; //             case(1):
                    2855   ; //                 dataPattern = 0xB2; break;
                    2856   ; //             case(2):
                    2857   ; //                 dataPattern = 0xC3; break;
                    2858   ; //             case(3):
                    2859   ; //                 dataPattern = 0xD4; break;
                    2860   ; //         }
                    2861   ; //         printf("\nReading %d bytes starting from address 0x%X...\n", numBytes, startAddress);
                    2862   ; //         EEPROMSequentialRead(startAddress, numBytes);
                    2863   ; //     }
                    2864   ; //     // Option 4: Write Block of Data
                    2865   ; //     if (testChoice == 4) {
                    2866   ; //     }
                    2867   ; // Updated I2CTest function with improved EEPROM read and write functionality
                    2868   ; int I2CTest() {
                    2869   _I2CTest:
00001A56  4E56 FF4C 2870          link      A6,#-180
00001A5A  48E7 3F3C 2871          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001A5E  45F9 0000 2872          lea       _printf.L,A2
00001A62  4470      
00001A64  47F8 0CA4 2873          lea       _Get8HexDigits.L,A3
00001A68  49F8 1A04 2874          lea       _EEPROMSequentialRead.L,A4
00001A6C  4BF8 0B68 2875          lea       __getch.L,A5
                    2876   ; unsigned int i, j;
                    2877   ; unsigned int readData;
                    2878   ; char c, text[150];
                    2879   ; unsigned char dataByte;
                    2880   ; unsigned int address, size, intBuffer;
                    2881   ; unsigned int testChoice = 0;
00001A70  4285      2882          clr.l     D5
                    2883   ; unsigned int startAddress;
                    2884   ; unsigned int dataPattern = 0;
00001A72  4282      2885          clr.l     D2
                    2886   ; unsigned int numBytes = 0;
00001A74  4283      2887          clr.l     D3
                    2888   ; unsigned int totalsize = 0;
00001A76  42AE FFF8 2889          clr.l     -8(A6)
                    2890   ; int arr[1];
                    2891   ; printf("\r\n I2C Test\n");
00001A7A  4879 0000 2892          pea       @m68kde~1_34.L
00001A7E  51AC      
00001A80  4E92      2893          jsr       (A2)
00001A82  584F      2894          addq.w    #4,A7
                    2895   ; printf("\r\nInitializing I2C...\n");
00001A84  4879 0000 2896          pea       @m68kde~1_35.L
00001A88  51BA      
00001A8A  4E92      2897          jsr       (A2)
00001A8C  584F      2898          addq.w    #4,A7
                    2899   ; IIC_Init();
00001A8E  4EB8 1428 2900          jsr       _IIC_Init
                    2901   ; scanflush();
00001A92  4EB9 0000 2902          jsr       _scanflush
00001A96  3E66      
                    2903   ; memset(text, 0, sizeof(text));  // fills with zeros
00001A98  4878 0096 2904          pea       150
00001A9C  42A7      2905          clr.l     -(A7)
00001A9E  486E FF5C 2906          pea       -164(A6)
00001AA2  4EB9 0000 2907          jsr       _memset
00001AA6  3B80      
00001AA8  DEFC 000C 2908          add.w     #12,A7
                    2909   ; printf("\r\nChoose option:\n");
00001AAC  4879 0000 2910          pea       @m68kde~1_36.L
00001AB0  51D2      
00001AB2  4E92      2911          jsr       (A2)
00001AB4  584F      2912          addq.w    #4,A7
                    2913   ; printf("1 Read Single Byte from EEPROM\n");
00001AB6  4879 0000 2914          pea       @m68kde~1_37.L
00001ABA  51E4      
00001ABC  4E92      2915          jsr       (A2)
00001ABE  584F      2916          addq.w    #4,A7
                    2917   ; printf("2 Write Single Byte to EEPROM\n");
00001AC0  4879 0000 2918          pea       @m68kde~1_38.L
00001AC4  5204      
00001AC6  4E92      2919          jsr       (A2)
00001AC8  584F      2920          addq.w    #4,A7
                    2921   ; printf("3 Read Block of Data from EEPROM\n");
00001ACA  4879 0000 2922          pea       @m68kde~1_39.L
00001ACE  5224      
00001AD0  4E92      2923          jsr       (A2)
00001AD2  584F      2924          addq.w    #4,A7
                    2925   ; printf("4 Write Block of Data to EEPROM\n");
00001AD4  4879 0000 2926          pea       @m68kde~1_40.L
00001AD8  5246      
00001ADA  4E92      2927          jsr       (A2)
00001ADC  584F      2928          addq.w    #4,A7
                    2929   ; testChoice = _getch() - 48;    
00001ADE  4E95      2930          jsr       (A5)
00001AE0  0480 0000 2931          sub.l     #48,D0
00001AE4  0030      
00001AE6  2A00      2932          move.l    D0,D5
                    2933   ; // Option 1: Read Single Byte
                    2934   ; if (testChoice == 1) {
00001AE8  0C85 0000 2935          cmp.l     #1,D5
00001AEC  0001      
00001AEE  6600 004C 2936          bne       I2CTest_1
                    2937   ; printf("\r\nRead Single Byte\n");
00001AF2  4879 0000 2938          pea       @m68kde~1_41.L
00001AF6  5268      
00001AF8  4E92      2939          jsr       (A2)
00001AFA  584F      2940          addq.w    #4,A7
                    2941   ; printf("Enter address (hex): 0x");
00001AFC  4879 0000 2942          pea       @m68kde~1_42.L
00001B00  527C      
00001B02  4E92      2943          jsr       (A2)
00001B04  584F      2944          addq.w    #4,A7
                    2945   ; address = Get8HexDigits(0);
00001B06  42A7      2946          clr.l     -(A7)
00001B08  4E93      2947          jsr       (A3)
00001B0A  584F      2948          addq.w    #4,A7
00001B0C  2800      2949          move.l    D0,D4
                    2950   ; dataByte = EEPROMRandomRead(EEPROM0, address);
00001B0E  2F04      2951          move.l    D4,-(A7)
00001B10  4878 0050 2952          pea       80
00001B14  4EB8 16C6 2953          jsr       _EEPROMRandomRead
00001B18  504F      2954          addq.w    #8,A7
00001B1A  1D40 FFF3 2955          move.b    D0,-13(A6)
                    2956   ; printf("\r\nRead from address 0x%X: 0x%02X\n", address, dataByte);
00001B1E  122E FFF3 2957          move.b    -13(A6),D1
00001B22  C2BC 0000 2958          and.l     #255,D1
00001B26  00FF      
00001B28  2F01      2959          move.l    D1,-(A7)
00001B2A  2F04      2960          move.l    D4,-(A7)
00001B2C  4879 0000 2961          pea       @m68kde~1_43.L
00001B30  5294      
00001B32  4E92      2962          jsr       (A2)
00001B34  DEFC 000C 2963          add.w     #12,A7
00001B38  6000 0220 2964          bra       I2CTest_17
                    2965   I2CTest_1:
                    2966   ; }
                    2967   ; // Option 2: Write Single Byte
                    2968   ; else if (testChoice == 2) {
00001B3C  0C85 0000 2969          cmp.l     #2,D5
00001B40  0002      
00001B42  6600 00DE 2970          bne       I2CTest_3
                    2971   ; printf("\r\nWrite Single Byte\n"); 
00001B46  4879 0000 2972          pea       @m68kde~1_44.L
00001B4A  52B6      
00001B4C  4E92      2973          jsr       (A2)
00001B4E  584F      2974          addq.w    #4,A7
                    2975   ; printf("\r\nEnter address (hex): 0x");
00001B50  4879 0000 2976          pea       @m68kde~1_45.L
00001B54  52CC      
00001B56  4E92      2977          jsr       (A2)
00001B58  584F      2978          addq.w    #4,A7
                    2979   ; address = Get8HexDigits(0);
00001B5A  42A7      2980          clr.l     -(A7)
00001B5C  4E93      2981          jsr       (A3)
00001B5E  584F      2982          addq.w    #4,A7
00001B60  2800      2983          move.l    D0,D4
                    2984   ; printf("\nEnter which data pattern you want to write into memory:\n");
00001B62  4879 0000 2985          pea       @m68kde~1_46.L
00001B66  52E6      
00001B68  4E92      2986          jsr       (A2)
00001B6A  584F      2987          addq.w    #4,A7
                    2988   ; printf(" 0: 0x00\n 1: 0xB2\n 2: 0xC3\n 3: 0xD4\n 4: Custom value\n");
00001B6C  4879 0000 2989          pea       @m68kde~1_47.L
00001B70  5320      
00001B72  4E92      2990          jsr       (A2)
00001B74  584F      2991          addq.w    #4,A7
                    2992   ; intBuffer = _getch() - 48;
00001B76  4E95      2993          jsr       (A5)
00001B78  0480 0000 2994          sub.l     #48,D0
00001B7C  0030      
00001B7E  2E00      2995          move.l    D0,D7
                    2996   ; if (intBuffer == 4) {
00001B80  0C87 0000 2997          cmp.l     #4,D7
00001B84  0004      
00001B86  6618      2998          bne.s     I2CTest_5
                    2999   ; printf("Select pattern");
00001B88  4879 0000 3000          pea       @m68kde~1_48.L
00001B8C  5356      
00001B8E  4E92      3001          jsr       (A2)
00001B90  584F      3002          addq.w    #4,A7
                    3003   ; dataPattern = Get2HexDigits(0);
00001B92  42A7      3004          clr.l     -(A7)
00001B94  4EB8 0C04 3005          jsr       _Get2HexDigits
00001B98  584F      3006          addq.w    #4,A7
00001B9A  2400      3007          move.l    D0,D2
00001B9C  6000 003C 3008          bra       I2CTest_8
                    3009   I2CTest_5:
                    3010   ; } else {
                    3011   ; switch (intBuffer) {
00001BA0  2007      3012          move.l    D7,D0
00001BA2  0C80 0000 3013          cmp.l     #4,D0
00001BA6  0004      
00001BA8  642E      3014          bhs.s     I2CTest_7
00001BAA  E380      3015          asl.l     #1,D0
00001BAC  303B 0806 3016          move.w    I2CTest_9(PC,D0.L),D0
00001BB0  4EFB 0002 3017          jmp       I2CTest_9(PC,D0.W)
                    3018   I2CTest_9:
00001BB4  0008      3019          dc.w      I2CTest_10-I2CTest_9
00001BB6  000C      3020          dc.w      I2CTest_11-I2CTest_9
00001BB8  0014      3021          dc.w      I2CTest_12-I2CTest_9
00001BBA  001C      3022          dc.w      I2CTest_13-I2CTest_9
                    3023   I2CTest_10:
                    3024   ; case 0:
                    3025   ; dataPattern = 0x00; break;
00001BBC  4282      3026          clr.l     D2
00001BBE  601A      3027          bra.s     I2CTest_8
                    3028   I2CTest_11:
                    3029   ; case 1:
                    3030   ; dataPattern = 0xB2; break;
00001BC0  243C 0000 3031          move.l    #178,D2
00001BC4  00B2      
00001BC6  6012      3032          bra.s     I2CTest_8
                    3033   I2CTest_12:
                    3034   ; case 2:
                    3035   ; dataPattern = 0xC3; break;
00001BC8  243C 0000 3036          move.l    #195,D2
00001BCC  00C3      
00001BCE  600A      3037          bra.s     I2CTest_8
                    3038   I2CTest_13:
                    3039   ; case 3:
                    3040   ; dataPattern = 0xD4; break;
00001BD0  243C 0000 3041          move.l    #212,D2
00001BD4  00D4      
00001BD6  6002      3042          bra.s     I2CTest_8
                    3043   I2CTest_7:
                    3044   ; default:
                    3045   ; dataPattern = 0x00; break;
00001BD8  4282      3046          clr.l     D2
                    3047   I2CTest_8:
                    3048   ; }
                    3049   ; }
                    3050   ; dataPattern &= 0xFF;
00001BDA  C4BC 0000 3051          and.l     #255,D2
00001BDE  00FF      
                    3052   ; EEPROMByteWrite(dataPattern, EEPROM0, address);
00001BE0  2F04      3053          move.l    D4,-(A7)
00001BE2  4878 0050 3054          pea       80
00001BE6  2F02      3055          move.l    D2,-(A7)
00001BE8  4EB8 14B6 3056          jsr       _EEPROMByteWrite
00001BEC  DEFC 000C 3057          add.w     #12,A7
                    3058   ; printf("Wrote 0x%02X to address 0x%X\n", dataPattern, address);
00001BF0  2F04      3059          move.l    D4,-(A7)
00001BF2  2F02      3060          move.l    D2,-(A7)
00001BF4  4879 0000 3061          pea       @m68kde~1_49.L
00001BF8  5366      
00001BFA  4E92      3062          jsr       (A2)
00001BFC  DEFC 000C 3063          add.w     #12,A7
                    3064   ; readData = EEPROMRandomRead(EEPROM0, address);
00001C00  2F04      3065          move.l    D4,-(A7)
00001C02  4878 0050 3066          pea       80
00001C06  4EB8 16C6 3067          jsr       _EEPROMRandomRead
00001C0A  504F      3068          addq.w    #8,A7
00001C0C  2D40 FF56 3069          move.l    D0,-170(A6)
                    3070   ; printf("Read back: 0x%02X\n", readData);
00001C10  2F2E FF56 3071          move.l    -170(A6),-(A7)
00001C14  4879 0000 3072          pea       @m68kde~1_50.L
00001C18  5384      
00001C1A  4E92      3073          jsr       (A2)
00001C1C  504F      3074          addq.w    #8,A7
00001C1E  6000 013A 3075          bra       I2CTest_17
                    3076   I2CTest_3:
                    3077   ; }
                    3078   ; // Option 3: Read Block of Data
                    3079   ; else if (testChoice == 3) {
00001C22  0C85 0000 3080          cmp.l     #3,D5
00001C26  0003      
00001C28  6600 004E 3081          bne       I2CTest_15
                    3082   ; printf("\r\nRead Block of Data\n");
00001C2C  4879 0000 3083          pea       @m68kde~1_51.L
00001C30  5398      
00001C32  4E92      3084          jsr       (A2)
00001C34  584F      3085          addq.w    #4,A7
                    3086   ; printf("Enter start address (hex): 0x");
00001C36  4879 0000 3087          pea       @m68kde~1_52.L
00001C3A  53AE      
00001C3C  4E92      3088          jsr       (A2)
00001C3E  584F      3089          addq.w    #4,A7
                    3090   ; startAddress = Get8HexDigits(0);
00001C40  42A7      3091          clr.l     -(A7)
00001C42  4E93      3092          jsr       (A3)
00001C44  584F      3093          addq.w    #4,A7
00001C46  2C00      3094          move.l    D0,D6
                    3095   ; printf("\r\nEnter number of bytes to read (hex): 0x");
00001C48  4879 0000 3096          pea       @m68kde~1_53.L
00001C4C  53CC      
00001C4E  4E92      3097          jsr       (A2)
00001C50  584F      3098          addq.w    #4,A7
                    3099   ; numBytes = Get8HexDigits(0);
00001C52  42A7      3100          clr.l     -(A7)
00001C54  4E93      3101          jsr       (A3)
00001C56  584F      3102          addq.w    #4,A7
00001C58  2600      3103          move.l    D0,D3
                    3104   ; printf("\r\nReading 0x%X (%d) bytes starting from address 0x%X...\n", numBytes, numBytes, startAddress);
00001C5A  2F06      3105          move.l    D6,-(A7)
00001C5C  2F03      3106          move.l    D3,-(A7)
00001C5E  2F03      3107          move.l    D3,-(A7)
00001C60  4879 0000 3108          pea       @m68kde~1_54.L
00001C64  53F6      
00001C66  4E92      3109          jsr       (A2)
00001C68  DEFC 0010 3110          add.w     #16,A7
                    3111   ; EEPROMSequentialRead(startAddress, numBytes);
00001C6C  2F03      3112          move.l    D3,-(A7)
00001C6E  2F06      3113          move.l    D6,-(A7)
00001C70  4E94      3114          jsr       (A4)
00001C72  504F      3115          addq.w    #8,A7
00001C74  6000 00E4 3116          bra       I2CTest_17
                    3117   I2CTest_15:
                    3118   ; }
                    3119   ; // Option 4: Write Block of Data
                    3120   ; else if (testChoice == 4) {
00001C78  0C85 0000 3121          cmp.l     #4,D5
00001C7C  0004      
00001C7E  6600 00DA 3122          bne       I2CTest_17
                    3123   ; printf("\r\nWrite Block of Data\n");
00001C82  4879 0000 3124          pea       @m68kde~1_55.L
00001C86  5430      
00001C88  4E92      3125          jsr       (A2)
00001C8A  584F      3126          addq.w    #4,A7
                    3127   ; printf("Enter start address (hex): 0x");
00001C8C  4879 0000 3128          pea       @m68kde~1_52.L
00001C90  53AE      
00001C92  4E92      3129          jsr       (A2)
00001C94  584F      3130          addq.w    #4,A7
                    3131   ; startAddress = Get8HexDigits(0);
00001C96  42A7      3132          clr.l     -(A7)
00001C98  4E93      3133          jsr       (A3)
00001C9A  584F      3134          addq.w    #4,A7
00001C9C  2C00      3135          move.l    D0,D6
                    3136   ; printf("\r\nEnter number of bytes to write (hex): 0x");
00001C9E  4879 0000 3137          pea       @m68kde~1_56.L
00001CA2  5448      
00001CA4  4E92      3138          jsr       (A2)
00001CA6  584F      3139          addq.w    #4,A7
                    3140   ; numBytes = Get8HexDigits(0);
00001CA8  42A7      3141          clr.l     -(A7)
00001CAA  4E93      3142          jsr       (A3)
00001CAC  584F      3143          addq.w    #4,A7
00001CAE  2600      3144          move.l    D0,D3
                    3145   ; printf("\r\nEnter which data pattern you want to write into memory:\n");
00001CB0  4879 0000 3146          pea       @m68kde~1_57.L
00001CB4  5474      
00001CB6  4E92      3147          jsr       (A2)
00001CB8  584F      3148          addq.w    #4,A7
                    3149   ; printf(" 0: 0x00\n 1: 0xB2\n 2: 0xC3\n 3: 0xD4\n 4: Incrementing pattern\n");
00001CBA  4879 0000 3150          pea       @m68kde~1_58.L
00001CBE  54B0      
00001CC0  4E92      3151          jsr       (A2)
00001CC2  584F      3152          addq.w    #4,A7
                    3153   ; intBuffer = _getch() - 48;
00001CC4  4E95      3154          jsr       (A5)
00001CC6  0480 0000 3155          sub.l     #48,D0
00001CCA  0030      
00001CCC  2E00      3156          move.l    D0,D7
                    3157   ; if (intBuffer == 4) {
00001CCE  0C87 0000 3158          cmp.l     #4,D7
00001CD2  0004      
00001CD4  6614      3159          bne.s     I2CTest_19
                    3160   ; printf("Selected incrementing pattern (address & 0xFF)\n");
00001CD6  4879 0000 3161          pea       @m68kde~1_59.L
00001CDA  54EE      
00001CDC  4E92      3162          jsr       (A2)
00001CDE  584F      3163          addq.w    #4,A7
                    3164   ; dataPattern = 0xFF;  // Special marker for incrementing pattern
00001CE0  243C 0000 3165          move.l    #255,D2
00001CE4  00FF      
00001CE6  6000 0048 3166          bra       I2CTest_20
                    3167   I2CTest_19:
                    3168   ; } else {
                    3169   ; switch (intBuffer) {
00001CEA  2007      3170          move.l    D7,D0
00001CEC  0C80 0000 3171          cmp.l     #4,D0
00001CF0  0004      
00001CF2  642E      3172          bhs.s     I2CTest_21
00001CF4  E380      3173          asl.l     #1,D0
00001CF6  303B 0806 3174          move.w    I2CTest_23(PC,D0.L),D0
00001CFA  4EFB 0002 3175          jmp       I2CTest_23(PC,D0.W)
                    3176   I2CTest_23:
00001CFE  0008      3177          dc.w      I2CTest_24-I2CTest_23
00001D00  000C      3178          dc.w      I2CTest_25-I2CTest_23
00001D02  0014      3179          dc.w      I2CTest_26-I2CTest_23
00001D04  001C      3180          dc.w      I2CTest_27-I2CTest_23
                    3181   I2CTest_24:
                    3182   ; case 0:
                    3183   ; dataPattern = 0x00; break;
00001D06  4282      3184          clr.l     D2
00001D08  601A      3185          bra.s     I2CTest_22
                    3186   I2CTest_25:
                    3187   ; case 1:
                    3188   ; dataPattern = 0xB2; break;
00001D0A  243C 0000 3189          move.l    #178,D2
00001D0E  00B2      
00001D10  6012      3190          bra.s     I2CTest_22
                    3191   I2CTest_26:
                    3192   ; case 2:
                    3193   ; dataPattern = 0xC3; break;
00001D12  243C 0000 3194          move.l    #195,D2
00001D16  00C3      
00001D18  600A      3195          bra.s     I2CTest_22
                    3196   I2CTest_27:
                    3197   ; case 3:
                    3198   ; dataPattern = 0xD4; break;
00001D1A  243C 0000 3199          move.l    #212,D2
00001D1E  00D4      
00001D20  6002      3200          bra.s     I2CTest_22
                    3201   I2CTest_21:
                    3202   ; default:
                    3203   ; dataPattern = 0x00; break;
00001D22  4282      3204          clr.l     D2
                    3205   I2CTest_22:
                    3206   ; }
                    3207   ; printf("Selected pattern: 0x%02X\n", dataPattern);
00001D24  2F02      3208          move.l    D2,-(A7)
00001D26  4879 0000 3209          pea       @m68kde~1_60.L
00001D2A  551E      
00001D2C  4E92      3210          jsr       (A2)
00001D2E  504F      3211          addq.w    #8,A7
                    3212   I2CTest_20:
                    3213   ; }
                    3214   ; printf("\r\nPreparing to write 0x%X (%d) bytes of data starting at address 0x%X...\n", numBytes, numBytes, startAddress);
00001D30  2F06      3215          move.l    D6,-(A7)
00001D32  2F03      3216          move.l    D3,-(A7)
00001D34  2F03      3217          move.l    D3,-(A7)
00001D36  4879 0000 3218          pea       @m68kde~1_61.L
00001D3A  5538      
00001D3C  4E92      3219          jsr       (A2)
00001D3E  DEFC 0010 3220          add.w     #16,A7
                    3221   ; arr[0] = dataPattern; // Initialize the first byte of the array
00001D42  2D42 FFFC 3222          move.l    D2,-4+0(A6)
                    3223   ; EEPROMFlashPageWrite(arr, startAddress, numBytes, 1);
00001D46  4878 0001 3224          pea       1
00001D4A  2F03      3225          move.l    D3,-(A7)
00001D4C  2F06      3226          move.l    D6,-(A7)
00001D4E  486E FFFC 3227          pea       -4(A6)
00001D52  4EB8 1552 3228          jsr       _EEPROMFlashPageWrite
00001D56  DEFC 0010 3229          add.w     #16,A7
                    3230   I2CTest_17:
                    3231   ; }
                    3232   ; if (testChoice == 5) {
00001D5A  0C85 0000 3233          cmp.l     #5,D5
00001D5E  0005      
00001D60  6600 003E 3234          bne       I2CTest_29
                    3235   ; printf("\r\Printing Entire EEPROM\n");
00001D64  4879 0000 3236          pea       @m68kde~1_62.L
00001D68  5582      
00001D6A  4E92      3237          jsr       (A2)
00001D6C  584F      3238          addq.w    #4,A7
                    3239   ; EEPROMSequentialRead(0x0000, 32768);  // First 32KB
00001D6E  4878 8000 3240          pea       32768
00001D72  42A7      3241          clr.l     -(A7)
00001D74  4E94      3242          jsr       (A4)
00001D76  504F      3243          addq.w    #8,A7
                    3244   ; EEPROMSequentialRead(0x8000, 32768);  // Second 32KB
00001D78  4878 8000 3245          pea       32768
00001D7C  4878 8000 3246          pea       32768
00001D80  4E94      3247          jsr       (A4)
00001D82  504F      3248          addq.w    #8,A7
                    3249   ; EEPROMSequentialRead(0x10000, 32768); // Third 32KB
00001D84  4878 8000 3250          pea       32768
00001D88  4879 0001 3251          pea       65536
00001D8C  0000      
00001D8E  4E94      3252          jsr       (A4)
00001D90  504F      3253          addq.w    #8,A7
                    3254   ; EEPROMSequentialRead(0x18000, 32768); // Fourth 32KB
00001D92  4878 8000 3255          pea       32768
00001D96  4879 0001 3256          pea       98304
00001D9A  8000      
00001D9C  4E94      3257          jsr       (A4)
00001D9E  504F      3258          addq.w    #8,A7
                    3259   I2CTest_29:
00001DA0  4CDF 3CFC 3260          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001DA4  4E5E      3261          unlk      A6
00001DA6  4E75      3262          rts
                    3263   ; }
                    3264   ; }
                    3265   ; // I2CTest() {
                    3266   ; //   unsigned int arraySize = 512;
                    3267   ; //   unsigned int IICData[512];
                    3268   ; //   unsigned int i;
                    3269   ; //   unsigned int writeData = 0xAB;
                    3270   ; //   unsigned int readData;
                    3271   ; //   unsigned int totalBytes = 0x20000;
                    3272   ; //   for (i = 0; i < arraySize; i++) {
                    3273   ; //     IICData[i] = (i % 50) + 1;
                    3274   ; //     IICData[i] = 0xAA;
                    3275   ; //   } 
                    3276   ; //   printf("\r\n I2C Test\n");
                    3277   ; //   IIC_Init();  
                    3278   ; //   printf("Page Write\n");
                    3279   ; //   EEPROMFlashPageWrite(IICData, 0x0, totalBytes); // Write data to EEPROM
                    3280   ; //   printf("Sequential Read\n");
                    3281   ; //   EEPROMSequentialRead(0x0000, 32768);  // First 32KB
                    3282   ; //   EEPROMSequentialRead(0x8000, 32768);  // Second 32KB
                    3283   ; //   EEPROMSequentialRead(0x10000, 32768); // Third 32KB
                    3284   ; //   EEPROMSequentialRead(0x18000, 32768); // Fourth 32KB
                    3285   ; //   printf("\r\n Starting EEPROM Write: Writing 0x%.2x to address 0x00\n", writeData); // Debug: Indicate the start of EEPROM write
                    3286   ; //   for (i = 0x0; i < 0x5; i++) {
                    3287   ; //     printf("\r\n Writing %d to address %d\n", i * 5, i);
                    3288   ; //     EEPROMByteWrite(i * 5, EEPROM1, i); // Write data to EEPROM
                    3289   ; //   }
                    3290   ; //   printf("\r\nFinished write, Starting EEPROM Read\n");
                    3291   ; //   for (i = 0; i < 5; i++) {
                    3292   ; //     readData = EEPROMRandomRead(EEPROM1, i); // Read data from EEPROM
                    3293   ; //     printf("\r\n Address: %d: %d\n", i, readData); // Debug: Indicate the address being read and the data read
                    3294   ; //   }
                    3295   ; //   // readData = EEPROMRandomRead(EEPROM0, 0x0);
                    3296   ; //   IICCoreDisable();
                    3297   ; // }
                    3298   ; // Initialize and enable I2C controller
                    3299   ; // No interrupts and set clock frequency to 100Khz
                    3300   ; // Connect controller to 25 or 45 Mhz CPU clock
                    3301   ; // Check if device is ready before writing anything over I2C bus ie) TX register has written previous command.
                    3302   ; // Check the status register TIP bit to see when transmission has finished
                    3303   ; // Wait for ACK from slave after each write
                    3304   ; // Transmit a byte to the I2C bus
                    3305   ; // write the data to be transmitted into TX register and then write something to the command register that indiciates that you want to write
                    3306   ; // If you want to generate a start or stop condition, set the STA or STO bits in command register when you write to it,
                    3307   ; // Clear the ACK bit if you want to generate an ACK when reading data back from the slave
                    3308   ; // DAC Functions
                    3309   ; // DAC/ADC Address: 1001001 + R/W
                    3310   ; // Control Byte: Set bit6 on to activate unity gain buffer. lower nibble selects the input channel (For DAC ignored once you enter DAC mode)
                    3311   ; // Calculate sine wave values between 0 and 255 
                    3312   ; // Pseudo code process
                    3313   ; // Init I2C 
                    3314   ; // Control byte sent after the slave address. COnfigure this properly
                    3315   ; // Remaining bits can select input channel mode
                    3316   ; // Generate sine wave
                    3317   ; void ADCRead() {
                    3318   _ADCRead:
00001DA8  4E56 FFFC 3319          link      A6,#-4
00001DAC  48E7 0030 3320          movem.l   A2/A3,-(A7)
00001DB0  45F9 0B00 3321          lea       _i.L,A2
00001DB4  00C4      
00001DB6  47F8 1458 3322          lea       _checkTIP.L,A3
                    3323   ; unsigned int readData;
                    3324   ; IIC_Init();
00001DBA  4EB8 1428 3325          jsr       _IIC_Init
                    3326   ; checkTIP();
00001DBE  4E93      3327          jsr       (A3)
                    3328   ; IIC_TXRX = ((PCF8591 << 1) | 0x1); // Send EEPROM address with read bit
00001DC0  13FC 0093 3329          move.b    #147,4227078
00001DC4  0040 8006 
                    3330   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
00001DC8  13FC 0091 3331          move.b    #145,4227080
00001DCC  0040 8008 
                    3332   ; checkTIP();
00001DD0  4E93      3333          jsr       (A3)
                    3334   ; checkAck();
00001DD2  4EB8 1468 3335          jsr       _checkAck
                    3336   ; // Read data from ADC continously 
                    3337   ; while(1) {  // Loop continuously
                    3338   ADCRead_1:
                    3339   ; for (i = 0; i < NUM_SAMPLES; i++) {
00001DD6  4292      3340          clr.l     (A2)
                    3341   ADCRead_4:
00001DD8  2012      3342          move.l    (A2),D0
00001DDA  0C80 0000 3343          cmp.l     #512,D0
00001DDE  0200      
00001DE0  6400 0056 3344          bhs       ADCRead_6
                    3345   ; // Load the triangle wave sample into the I2C transmit register
                    3346   ; IIC_CRSR = (READ | IACK) & (~NACK);  // Initiate I2C write for the data byte
00001DE4  13FC 0021 3347          move.b    #33,4227080
00001DE8  0040 8008 
                    3348   ; checkTIP();  // Wait until the transmission is complete
00001DEC  4E93      3349          jsr       (A3)
                    3350   ; while (!IIC_CRSR & 0x1); // Wait for IF flag to be set
                    3351   ADCRead_7:
00001DEE  4A39 0040 3352          tst.b     4227080
00001DF2  8008      
00001DF4  6604      3353          bne.s     ADCRead_10
00001DF6  7001      3354          moveq     #1,D0
00001DF8  6002      3355          bra.s     ADCRead_11
                    3356   ADCRead_10:
00001DFA  4280      3357          clr.l     D0
                    3358   ADCRead_11:
00001DFC  C03C 0001 3359          and.b     #1,D0
00001E00  6702      3360          beq.s     ADCRead_9
00001E02  60EA      3361          bra       ADCRead_7
                    3362   ADCRead_9:
                    3363   ; IIC_CRSR = 0; // Clear IF flag
00001E04  4239 0040 3364          clr.b     4227080
00001E08  8008      
                    3365   ; readData = IIC_TXRX; // Read data from EEPROM
00001E0A  1039 0040 3366          move.b    4227078,D0
00001E0E  8006      
00001E10  C0BC 0000 3367          and.l     #255,D0
00001E14  00FF      
00001E16  2D40 FFFC 3368          move.l    D0,-4(A6)
                    3369   ; printf("\r\n ADC Read: %d\n", readData); // Debug: Indicate the address being read and the data read
00001E1A  2F2E FFFC 3370          move.l    -4(A6),-(A7)
00001E1E  4879 0000 3371          pea       @m68kde~1_63.L
00001E22  559C      
00001E24  4EB9 0000 3372          jsr       _printf
00001E28  4470      
00001E2A  504F      3373          addq.w    #8,A7
                    3374   ; wait5ms(); Wait3ms();
00001E2C  4EB8 1444 3375          jsr       _wait5ms
00001E30  4EB8 0946 3376          jsr       _Wait3ms
00001E34  5292      3377          addq.l    #1,(A2)
00001E36  60A0      3378          bra       ADCRead_4
                    3379   ADCRead_6:
00001E38  609C      3380          bra       ADCRead_1
                    3381   ; }
                    3382   ; }
                    3383   ; }
                    3384   ; void DACWave() {
                    3385   _DACWave:
00001E3A  4E56 F800 3386          link      A6,#-2048
00001E3E  48E7 2038 3387          movem.l   D2/A2/A3/A4,-(A7)
00001E42  45F8 1458 3388          lea       _checkTIP.L,A2
00001E46  47F8 1468 3389          lea       _checkAck.L,A3
00001E4A  49EE F800 3390          lea       -2048(A6),A4
                    3391   ; int triangle_table[NUM_SAMPLES];
                    3392   ; int i;
                    3393   ; // Generate triangle wave samples
                    3394   ; // Ascending part: from 0 to 255
                    3395   ; for(i = 0; i < HALF_SAMPLES; i++) {
00001E4E  4282      3396          clr.l     D2
                    3397   DACWave_1:
00001E50  0C82 0000 3398          cmp.l     #256,D2
00001E54  0100      
00001E56  6C0C      3399          bge.s     DACWave_3
                    3400   ; triangle_table[i] = i;  // 0 to 255
00001E58  2002      3401          move.l    D2,D0
00001E5A  E588      3402          lsl.l     #2,D0
00001E5C  2982 0800 3403          move.l    D2,0(A4,D0.L)
00001E60  5282      3404          addq.l    #1,D2
00001E62  60EC      3405          bra       DACWave_1
                    3406   DACWave_3:
                    3407   ; }
                    3408   ; // Descending part: from 255 back to 0
                    3409   ; for(i = HALF_SAMPLES; i < NUM_SAMPLES; i++) {
00001E64  243C 0000 3410          move.l    #256,D2
00001E68  0100      
                    3411   DACWave_4:
00001E6A  0C82 0000 3412          cmp.l     #512,D2
00001E6E  0200      
00001E70  6C1C      3413          bge.s     DACWave_6
                    3414   ; triangle_table[i] = 255 - (i - HALF_SAMPLES);
00001E72  303C 00FF 3415          move.w    #255,D0
00001E76  48C0      3416          ext.l     D0
00001E78  2202      3417          move.l    D2,D1
00001E7A  0481 0000 3418          sub.l     #256,D1
00001E7E  0100      
00001E80  9081      3419          sub.l     D1,D0
00001E82  2202      3420          move.l    D2,D1
00001E84  E589      3421          lsl.l     #2,D1
00001E86  2980 1800 3422          move.l    D0,0(A4,D1.L)
00001E8A  5282      3423          addq.l    #1,D2
00001E8C  60DC      3424          bra       DACWave_4
                    3425   DACWave_6:
                    3426   ; }
                    3427   ; IIC_Init();
00001E8E  4EB8 1428 3428          jsr       _IIC_Init
                    3429   ; checkTIP();
00001E92  4E92      3430          jsr       (A2)
                    3431   ; // START condition with slave address
                    3432   ; IIC_TXRX = ((PCF8591 << 1) & 0xFE); // Send EEPROM address with write bit
00001E94  13FC 0092 3433          move.b    #146,4227078
00001E98  0040 8006 
                    3434   ; IIC_CRSR = START | WRITE | IACK; // Start condition with write bit
00001E9C  13FC 0091 3435          move.b    #145,4227080
00001EA0  0040 8008 
                    3436   ; checkTIP();
00001EA4  4E92      3437          jsr       (A2)
                    3438   ; checkAck();
00001EA6  4E93      3439          jsr       (A3)
                    3440   ; // DAC Control Byte: Send 01XX0XXX
                    3441   ; IIC_TXRX = 0x40; // Send EEPROM address with write bit
00001EA8  13FC 0040 3442          move.b    #64,4227078
00001EAC  0040 8006 
                    3443   ; IIC_CRSR = WRITE | IACK; // Start condition with write bit
00001EB0  13FC 0011 3444          move.b    #17,4227080
00001EB4  0040 8008 
                    3445   ; checkTIP();
00001EB8  4E92      3446          jsr       (A2)
                    3447   ; checkAck();
00001EBA  4E93      3448          jsr       (A3)
                    3449   ; // Go up and down from 0 to 255 to create effects
                    3450   ; while(1) {  // Loop continuously
                    3451   DACWave_7:
                    3452   ; for (i = 0; i < NUM_SAMPLES; i++) {
00001EBC  4282      3453          clr.l     D2
                    3454   DACWave_10:
00001EBE  0C82 0000 3455          cmp.l     #512,D2
00001EC2  0200      
00001EC4  6C22      3456          bge.s     DACWave_12
                    3457   ; // Load the triangle wave sample into the I2C transmit register
                    3458   ; IIC_TXRX = triangle_table[i];
00001EC6  2002      3459          move.l    D2,D0
00001EC8  E588      3460          lsl.l     #2,D0
00001ECA  2034 0800 3461          move.l    0(A4,D0.L),D0
00001ECE  13C0 0040 3462          move.b    D0,4227078
00001ED2  8006      
                    3463   ; IIC_CRSR = WRITE | IACK;  // Initiate I2C write for the data byte
00001ED4  13FC 0011 3464          move.b    #17,4227080
00001ED8  0040 8008 
                    3465   ; checkTIP();  // Wait until the transmission is complete
00001EDC  4E92      3466          jsr       (A2)
                    3467   ; checkAck();  // Check for acknowledgment from the DAC
00001EDE  4E93      3468          jsr       (A3)
                    3469   ; Wait1ms();
00001EE0  4EB8 0932 3470          jsr       _Wait1ms
00001EE4  5282      3471          addq.l    #1,D2
00001EE6  60D6      3472          bra       DACWave_10
                    3473   DACWave_12:
00001EE8  60D2      3474          bra       DACWave_7
                    3475   ; }
                    3476   ; }
                    3477   ; }
                    3478   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    3479   ; // IMPORTANT
                    3480   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    3481   ; // has to be done with an interrupt (IRQ Level 6)
                    3482   ; //
                    3483   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    3484   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    3485   ; //
                    3486   ; // on return from the IRQ service handler, the first access to the user memory program space
                    3487   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    3488   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    3489   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    3490   ; // program area
                    3491   ; //
                    3492   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    3493   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    3494   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    3495   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    3496   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    3497   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    3498   ; void DumpRegisters()
                    3499   ; {
                    3500   _DumpRegisters:
00001EEA  48E7 3F3C 3501          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001EEE  45F9 0000 3502          lea       _putch.L,A2
00001EF2  3AB4      
00001EF4  47F9 0000 3503          lea       _printf.L,A3
00001EF8  4470      
00001EFA  49F9 0B00 3504          lea       _SR.L,A4
00001EFE  012C      
00001F00  4BF9 0B00 3505          lea       _WatchPointString.L,A5
00001F04  01C2      
                    3506   ; short i, x, j, k ;
                    3507   ; unsigned char c, *BytePointer;
                    3508   ; // buld up strings for displaying watchpoints
                    3509   ; for(x = 0; x < (short)(8); x++)
00001F06  4242      3510          clr.w     D2
                    3511   DumpRegisters_1:
00001F08  0C42 0008 3512          cmp.w     #8,D2
00001F0C  6C00 01C6 3513          bge       DumpRegisters_3
                    3514   ; {
                    3515   ; if(WatchPointSetOrCleared[x] == 1)
00001F10  48C2      3516          ext.l     D2
00001F12  2002      3517          move.l    D2,D0
00001F14  E588      3518          lsl.l     #2,D0
00001F16  41F9 0B00 3519          lea       _WatchPointSetOrCleared.L,A0
00001F1A  01A2      
00001F1C  2030 0800 3520          move.l    0(A0,D0.L),D0
00001F20  0C80 0000 3521          cmp.l     #1,D0
00001F24  0001      
00001F26  6600 0186 3522          bne       DumpRegisters_4
                    3523   ; {
                    3524   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001F2A  48C2      3525          ext.l     D2
00001F2C  2202      3526          move.l    D2,D1
00001F2E  E589      3527          lsl.l     #2,D1
00001F30  41F9 0B00 3528          lea       _WatchPointAddress.L,A0
00001F34  0182      
00001F36  2F30 1800 3529          move.l    0(A0,D1.L),-(A7)
00001F3A  4879 0000 3530          pea       @m68kde~1_64.L
00001F3E  55AE      
00001F40  220D      3531          move.l    A5,D1
00001F42  48C2      3532          ext.l     D2
00001F44  2F00      3533          move.l    D0,-(A7)
00001F46  2002      3534          move.l    D2,D0
00001F48  C1FC 0064 3535          muls      #100,D0
00001F4C  D280      3536          add.l     D0,D1
00001F4E  201F      3537          move.l    (A7)+,D0
00001F50  2F01      3538          move.l    D1,-(A7)
00001F52  4EB9 0000 3539          jsr       _sprintf
00001F56  3B4C      
00001F58  DEFC 000C 3540          add.w     #12,A7
                    3541   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001F5C  48C2      3542          ext.l     D2
00001F5E  2002      3543          move.l    D2,D0
00001F60  E588      3544          lsl.l     #2,D0
00001F62  41F9 0B00 3545          lea       _WatchPointAddress.L,A0
00001F66  0182      
00001F68  2A30 0800 3546          move.l    0(A0,D0.L),D5
                    3547   ; for(j = 0; j < (short)(16); j+=2)
00001F6C  4243      3548          clr.w     D3
                    3549   DumpRegisters_6:
00001F6E  0C43 0010 3550          cmp.w     #16,D3
00001F72  6C00 0082 3551          bge       DumpRegisters_8
                    3552   ; {
                    3553   ; for(k = 0; k < (short)(2); k++)
00001F76  4246      3554          clr.w     D6
                    3555   DumpRegisters_9:
00001F78  0C46 0002 3556          cmp.w     #2,D6
00001F7C  6C00 0052 3557          bge       DumpRegisters_11
                    3558   ; {
                    3559   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001F80  2045      3560          move.l    D5,A0
00001F82  48C3      3561          ext.l     D3
00001F84  2203      3562          move.l    D3,D1
00001F86  48C6      3563          ext.l     D6
00001F88  D286      3564          add.l     D6,D1
00001F8A  1230 1800 3565          move.b    0(A0,D1.L),D1
00001F8E  C2BC 0000 3566          and.l     #255,D1
00001F92  00FF      
00001F94  2F01      3567          move.l    D1,-(A7)
00001F96  4879 0000 3568          pea       @m68kde~1_8.L
00001F9A  4EBE      
00001F9C  4879 0B00 3569          pea       _TempString.L
00001FA0  04E2      
00001FA2  4EB9 0000 3570          jsr       _sprintf
00001FA6  3B4C      
00001FA8  DEFC 000C 3571          add.w     #12,A7
                    3572   ; strcat(WatchPointString[x], TempString) ;
00001FAC  4879 0B00 3573          pea       _TempString.L
00001FB0  04E2      
00001FB2  220D      3574          move.l    A5,D1
00001FB4  48C2      3575          ext.l     D2
00001FB6  2F00      3576          move.l    D0,-(A7)
00001FB8  2002      3577          move.l    D2,D0
00001FBA  C1FC 0064 3578          muls      #100,D0
00001FBE  D280      3579          add.l     D0,D1
00001FC0  201F      3580          move.l    (A7)+,D0
00001FC2  2F01      3581          move.l    D1,-(A7)
00001FC4  4EB9 0000 3582          jsr       _strcat
00001FC8  3B98      
00001FCA  504F      3583          addq.w    #8,A7
00001FCC  5246      3584          addq.w    #1,D6
00001FCE  60A8      3585          bra       DumpRegisters_9
                    3586   DumpRegisters_11:
                    3587   ; }
                    3588   ; strcat(WatchPointString[x]," ") ;
00001FD0  4879 0000 3589          pea       @m68kde~1_65.L
00001FD4  55B6      
00001FD6  220D      3590          move.l    A5,D1
00001FD8  48C2      3591          ext.l     D2
00001FDA  2F00      3592          move.l    D0,-(A7)
00001FDC  2002      3593          move.l    D2,D0
00001FDE  C1FC 0064 3594          muls      #100,D0
00001FE2  D280      3595          add.l     D0,D1
00001FE4  201F      3596          move.l    (A7)+,D0
00001FE6  2F01      3597          move.l    D1,-(A7)
00001FE8  4EB9 0000 3598          jsr       _strcat
00001FEC  3B98      
00001FEE  504F      3599          addq.w    #8,A7
00001FF0  5443      3600          addq.w    #2,D3
00001FF2  6000 FF7A 3601          bra       DumpRegisters_6
                    3602   DumpRegisters_8:
                    3603   ; }
                    3604   ; strcat(WatchPointString[x], "  ") ;
00001FF6  4879 0000 3605          pea       @m68kde~1_9.L
00001FFA  4EC4      
00001FFC  220D      3606          move.l    A5,D1
00001FFE  48C2      3607          ext.l     D2
00002000  2F00      3608          move.l    D0,-(A7)
00002002  2002      3609          move.l    D2,D0
00002004  C1FC 0064 3610          muls      #100,D0
00002008  D280      3611          add.l     D0,D1
0000200A  201F      3612          move.l    (A7)+,D0
0000200C  2F01      3613          move.l    D1,-(A7)
0000200E  4EB9 0000 3614          jsr       _strcat
00002012  3B98      
00002014  504F      3615          addq.w    #8,A7
                    3616   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00002016  48C2      3617          ext.l     D2
00002018  2002      3618          move.l    D2,D0
0000201A  E588      3619          lsl.l     #2,D0
0000201C  41F9 0B00 3620          lea       _WatchPointAddress.L,A0
00002020  0182      
00002022  2A30 0800 3621          move.l    0(A0,D0.L),D5
                    3622   ; for(j = 0; j < (short)(16); j++)
00002026  4243      3623          clr.w     D3
                    3624   DumpRegisters_12:
00002028  0C43 0010 3625          cmp.w     #16,D3
0000202C  6C00 007E 3626          bge       DumpRegisters_14
                    3627   ; {
                    3628   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00002030  2045      3629          move.l    D5,A0
00002032  48C3      3630          ext.l     D3
00002034  1030 3800 3631          move.b    0(A0,D3.L),D0
00002038  C03C 007F 3632          and.b     #127,D0
0000203C  1E00      3633          move.b    D0,D7
                    3634   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000203E  0C07 007F 3635          cmp.b     #127,D7
00002042  6206      3636          bhi.s     DumpRegisters_17
00002044  0C07 0020 3637          cmp.b     #32,D7
00002048  6416      3638          bhs.s     DumpRegisters_15
                    3639   DumpRegisters_17:
                    3640   ; sprintf(TempString, ".") ;
0000204A  4879 0000 3641          pea       @m68kde~1_66.L
0000204E  55B8      
00002050  4879 0B00 3642          pea       _TempString.L
00002054  04E2      
00002056  4EB9 0000 3643          jsr       _sprintf
0000205A  3B4C      
0000205C  504F      3644          addq.w    #8,A7
0000205E  6026      3645          bra.s     DumpRegisters_16
                    3646   DumpRegisters_15:
                    3647   ; else
                    3648   ; sprintf(TempString, "%c", BytePointer[j]) ;
00002060  2045      3649          move.l    D5,A0
00002062  48C3      3650          ext.l     D3
00002064  1230 3800 3651          move.b    0(A0,D3.L),D1
00002068  C2BC 0000 3652          and.l     #255,D1
0000206C  00FF      
0000206E  2F01      3653          move.l    D1,-(A7)
00002070  4879 0000 3654          pea       @m68kde~1_67.L
00002074  55BA      
00002076  4879 0B00 3655          pea       _TempString.L
0000207A  04E2      
0000207C  4EB9 0000 3656          jsr       _sprintf
00002080  3B4C      
00002082  DEFC 000C 3657          add.w     #12,A7
                    3658   DumpRegisters_16:
                    3659   ; strcat(WatchPointString[x], TempString) ;
00002086  4879 0B00 3660          pea       _TempString.L
0000208A  04E2      
0000208C  220D      3661          move.l    A5,D1
0000208E  48C2      3662          ext.l     D2
00002090  2F00      3663          move.l    D0,-(A7)
00002092  2002      3664          move.l    D2,D0
00002094  C1FC 0064 3665          muls      #100,D0
00002098  D280      3666          add.l     D0,D1
0000209A  201F      3667          move.l    (A7)+,D0
0000209C  2F01      3668          move.l    D1,-(A7)
0000209E  4EB9 0000 3669          jsr       _strcat
000020A2  3B98      
000020A4  504F      3670          addq.w    #8,A7
000020A6  5243      3671          addq.w    #1,D3
000020A8  6000 FF7E 3672          bra       DumpRegisters_12
                    3673   DumpRegisters_14:
000020AC  6020      3674          bra.s     DumpRegisters_5
                    3675   DumpRegisters_4:
                    3676   ; }
                    3677   ; }
                    3678   ; else
                    3679   ; strcpy(WatchPointString[x], "") ;
000020AE  4879 0000 3680          pea       @m68kde~1_68.L
000020B2  55BE      
000020B4  220D      3681          move.l    A5,D1
000020B6  48C2      3682          ext.l     D2
000020B8  2F00      3683          move.l    D0,-(A7)
000020BA  2002      3684          move.l    D2,D0
000020BC  C1FC 0064 3685          muls      #100,D0
000020C0  D280      3686          add.l     D0,D1
000020C2  201F      3687          move.l    (A7)+,D0
000020C4  2F01      3688          move.l    D1,-(A7)
000020C6  4EB9 0000 3689          jsr       _strcpy
000020CA  39C6      
000020CC  504F      3690          addq.w    #8,A7
                    3691   DumpRegisters_5:
000020CE  5242      3692          addq.w    #1,D2
000020D0  6000 FE36 3693          bra       DumpRegisters_1
                    3694   DumpRegisters_3:
                    3695   ; }
                    3696   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000020D4  2F39 0B00 3697          move.l    _a0.L,-(A7)
000020D8  0104      
000020DA  2F39 0B00 3698          move.l    _d0.L,-(A7)
000020DE  00E4      
000020E0  4879 0000 3699          pea       @m68kde~1_69.L
000020E4  55C0      
000020E6  4E93      3700          jsr       (A3)
000020E8  DEFC 000C 3701          add.w     #12,A7
                    3702   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000020EC  2F39 0B00 3703          move.l    _a1.L,-(A7)
000020F0  0108      
000020F2  2F39 0B00 3704          move.l    _d1.L,-(A7)
000020F6  00E8      
000020F8  4879 0000 3705          pea       @m68kde~1_70.L
000020FC  55DC      
000020FE  4E93      3706          jsr       (A3)
00002100  DEFC 000C 3707          add.w     #12,A7
                    3708   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00002104  2F39 0B00 3709          move.l    _a2.L,-(A7)
00002108  010C      
0000210A  2F39 0B00 3710          move.l    _d2.L,-(A7)
0000210E  00EC      
00002110  4879 0000 3711          pea       @m68kde~1_71.L
00002114  55F6      
00002116  4E93      3712          jsr       (A3)
00002118  DEFC 000C 3713          add.w     #12,A7
                    3714   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
0000211C  2F39 0B00 3715          move.l    _a3.L,-(A7)
00002120  0110      
00002122  2F39 0B00 3716          move.l    _d3.L,-(A7)
00002126  00F0      
00002128  4879 0000 3717          pea       @m68kde~1_72.L
0000212C  5610      
0000212E  4E93      3718          jsr       (A3)
00002130  DEFC 000C 3719          add.w     #12,A7
                    3720   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00002134  2F39 0B00 3721          move.l    _a4.L,-(A7)
00002138  0114      
0000213A  2F39 0B00 3722          move.l    _d4.L,-(A7)
0000213E  00F4      
00002140  4879 0000 3723          pea       @m68kde~1_73.L
00002144  562A      
00002146  4E93      3724          jsr       (A3)
00002148  DEFC 000C 3725          add.w     #12,A7
                    3726   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
0000214C  2F39 0B00 3727          move.l    _a5.L,-(A7)
00002150  0118      
00002152  2F39 0B00 3728          move.l    _d5.L,-(A7)
00002156  00F8      
00002158  4879 0000 3729          pea       @m68kde~1_74.L
0000215C  5644      
0000215E  4E93      3730          jsr       (A3)
00002160  DEFC 000C 3731          add.w     #12,A7
                    3732   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00002164  2F39 0B00 3733          move.l    _a6.L,-(A7)
00002168  011C      
0000216A  2F39 0B00 3734          move.l    _d6.L,-(A7)
0000216E  00FC      
00002170  4879 0000 3735          pea       @m68kde~1_75.L
00002174  565E      
00002176  4E93      3736          jsr       (A3)
00002178  DEFC 000C 3737          add.w     #12,A7
                    3738   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
0000217C  3214      3739          move.w    (A4),D1
0000217E  C27C 2000 3740          and.w     #8192,D1
00002182  0C41 2000 3741          cmp.w     #8192,D1
00002186  6608      3742          bne.s     DumpRegisters_18
00002188  2239 0B00 3743          move.l    _SSP.L,D1
0000218C  0124      
0000218E  6006      3744          bra.s     DumpRegisters_19
                    3745   DumpRegisters_18:
00002190  2239 0B00 3746          move.l    _USP.L,D1
00002194  0128      
                    3747   DumpRegisters_19:
00002196  2F01      3748          move.l    D1,-(A7)
00002198  2F39 0B00 3749          move.l    _d7.L,-(A7)
0000219C  0100      
0000219E  4879 0000 3750          pea       @m68kde~1_76.L
000021A2  5678      
000021A4  4E93      3751          jsr       (A3)
000021A6  DEFC 000C 3752          add.w     #12,A7
                    3753   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
000021AA  2F39 0B00 3754          move.l    _USP.L,-(A7)
000021AE  0128      
000021B0  4879 0000 3755          pea       @m68kde~1_77.L
000021B4  5692      
000021B6  4E93      3756          jsr       (A3)
000021B8  504F      3757          addq.w    #8,A7
                    3758   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000021BA  2F39 0B00 3759          move.l    _SSP.L,-(A7)
000021BE  0124      
000021C0  4879 0000 3760          pea       @m68kde~1_78.L
000021C4  56B0      
000021C6  4E93      3761          jsr       (A3)
000021C8  504F      3762          addq.w    #8,A7
                    3763   ; printf("\r\n SR = $%04X   ",SR) ;
000021CA  3214      3764          move.w    (A4),D1
000021CC  C2BC 0000 3765          and.l     #65535,D1
000021D0  FFFF      
000021D2  2F01      3766          move.l    D1,-(A7)
000021D4  4879 0000 3767          pea       @m68kde~1_79.L
000021D8  56D2      
000021DA  4E93      3768          jsr       (A3)
000021DC  504F      3769          addq.w    #8,A7
                    3770   ; // display the status word in characters etc.
                    3771   ; printf("   [") ;
000021DE  4879 0000 3772          pea       @m68kde~1_80.L
000021E2  56E4      
000021E4  4E93      3773          jsr       (A3)
000021E6  584F      3774          addq.w    #4,A7
                    3775   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000021E8  3014      3776          move.w    (A4),D0
000021EA  C07C 8000 3777          and.w     #32768,D0
000021EE  0C40 8000 3778          cmp.w     #32768,D0
000021F2  660A      3779          bne.s     DumpRegisters_20
000021F4  4878 0054 3780          pea       84
000021F8  4E92      3781          jsr       (A2)
000021FA  584F      3782          addq.w    #4,A7
000021FC  6008      3783          bra.s     DumpRegisters_21
                    3784   DumpRegisters_20:
000021FE  4878 002D 3785          pea       45
00002202  4E92      3786          jsr       (A2)
00002204  584F      3787          addq.w    #4,A7
                    3788   DumpRegisters_21:
                    3789   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00002206  3014      3790          move.w    (A4),D0
00002208  C07C 2000 3791          and.w     #8192,D0
0000220C  0C40 2000 3792          cmp.w     #8192,D0
00002210  660A      3793          bne.s     DumpRegisters_22
00002212  4878 0053 3794          pea       83
00002216  4E92      3795          jsr       (A2)
00002218  584F      3796          addq.w    #4,A7
0000221A  6008      3797          bra.s     DumpRegisters_23
                    3798   DumpRegisters_22:
0000221C  4878 0055 3799          pea       85
00002220  4E92      3800          jsr       (A2)
00002222  584F      3801          addq.w    #4,A7
                    3802   DumpRegisters_23:
                    3803   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00002224  3014      3804          move.w    (A4),D0
00002226  C07C 0400 3805          and.w     #1024,D0
0000222A  0C40 0400 3806          cmp.w     #1024,D0
0000222E  660A      3807          bne.s     DumpRegisters_24
00002230  4878 0031 3808          pea       49
00002234  4E92      3809          jsr       (A2)
00002236  584F      3810          addq.w    #4,A7
00002238  6008      3811          bra.s     DumpRegisters_25
                    3812   DumpRegisters_24:
0000223A  4878 0030 3813          pea       48
0000223E  4E92      3814          jsr       (A2)
00002240  584F      3815          addq.w    #4,A7
                    3816   DumpRegisters_25:
                    3817   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00002242  3014      3818          move.w    (A4),D0
00002244  C07C 0200 3819          and.w     #512,D0
00002248  0C40 0200 3820          cmp.w     #512,D0
0000224C  660A      3821          bne.s     DumpRegisters_26
0000224E  4878 0031 3822          pea       49
00002252  4E92      3823          jsr       (A2)
00002254  584F      3824          addq.w    #4,A7
00002256  6008      3825          bra.s     DumpRegisters_27
                    3826   DumpRegisters_26:
00002258  4878 0030 3827          pea       48
0000225C  4E92      3828          jsr       (A2)
0000225E  584F      3829          addq.w    #4,A7
                    3830   DumpRegisters_27:
                    3831   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00002260  3014      3832          move.w    (A4),D0
00002262  C07C 0100 3833          and.w     #256,D0
00002266  0C40 0100 3834          cmp.w     #256,D0
0000226A  660A      3835          bne.s     DumpRegisters_28
0000226C  4878 0031 3836          pea       49
00002270  4E92      3837          jsr       (A2)
00002272  584F      3838          addq.w    #4,A7
00002274  6008      3839          bra.s     DumpRegisters_29
                    3840   DumpRegisters_28:
00002276  4878 0030 3841          pea       48
0000227A  4E92      3842          jsr       (A2)
0000227C  584F      3843          addq.w    #4,A7
                    3844   DumpRegisters_29:
                    3845   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000227E  3014      3846          move.w    (A4),D0
00002280  C07C 0010 3847          and.w     #16,D0
00002284  0C40 0010 3848          cmp.w     #16,D0
00002288  660A      3849          bne.s     DumpRegisters_30
0000228A  4878 0058 3850          pea       88
0000228E  4E92      3851          jsr       (A2)
00002290  584F      3852          addq.w    #4,A7
00002292  6008      3853          bra.s     DumpRegisters_31
                    3854   DumpRegisters_30:
00002294  4878 002D 3855          pea       45
00002298  4E92      3856          jsr       (A2)
0000229A  584F      3857          addq.w    #4,A7
                    3858   DumpRegisters_31:
                    3859   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
0000229C  3014      3860          move.w    (A4),D0
0000229E  C07C 0008 3861          and.w     #8,D0
000022A2  0C40 0008 3862          cmp.w     #8,D0
000022A6  660A      3863          bne.s     DumpRegisters_32
000022A8  4878 004E 3864          pea       78
000022AC  4E92      3865          jsr       (A2)
000022AE  584F      3866          addq.w    #4,A7
000022B0  6008      3867          bra.s     DumpRegisters_33
                    3868   DumpRegisters_32:
000022B2  4878 002D 3869          pea       45
000022B6  4E92      3870          jsr       (A2)
000022B8  584F      3871          addq.w    #4,A7
                    3872   DumpRegisters_33:
                    3873   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000022BA  3014      3874          move.w    (A4),D0
000022BC  C07C 0004 3875          and.w     #4,D0
000022C0  0C40 0004 3876          cmp.w     #4,D0
000022C4  660A      3877          bne.s     DumpRegisters_34
000022C6  4878 005A 3878          pea       90
000022CA  4E92      3879          jsr       (A2)
000022CC  584F      3880          addq.w    #4,A7
000022CE  6008      3881          bra.s     DumpRegisters_35
                    3882   DumpRegisters_34:
000022D0  4878 002D 3883          pea       45
000022D4  4E92      3884          jsr       (A2)
000022D6  584F      3885          addq.w    #4,A7
                    3886   DumpRegisters_35:
                    3887   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000022D8  3014      3888          move.w    (A4),D0
000022DA  C07C 0002 3889          and.w     #2,D0
000022DE  0C40 0002 3890          cmp.w     #2,D0
000022E2  660A      3891          bne.s     DumpRegisters_36
000022E4  4878 0056 3892          pea       86
000022E8  4E92      3893          jsr       (A2)
000022EA  584F      3894          addq.w    #4,A7
000022EC  6008      3895          bra.s     DumpRegisters_37
                    3896   DumpRegisters_36:
000022EE  4878 002D 3897          pea       45
000022F2  4E92      3898          jsr       (A2)
000022F4  584F      3899          addq.w    #4,A7
                    3900   DumpRegisters_37:
                    3901   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000022F6  3014      3902          move.w    (A4),D0
000022F8  C07C 0001 3903          and.w     #1,D0
000022FC  0C40 0001 3904          cmp.w     #1,D0
00002300  660A      3905          bne.s     DumpRegisters_38
00002302  4878 0043 3906          pea       67
00002306  4E92      3907          jsr       (A2)
00002308  584F      3908          addq.w    #4,A7
0000230A  6008      3909          bra.s     DumpRegisters_39
                    3910   DumpRegisters_38:
0000230C  4878 002D 3911          pea       45
00002310  4E92      3912          jsr       (A2)
00002312  584F      3913          addq.w    #4,A7
                    3914   DumpRegisters_39:
                    3915   ; putchar(']') ;
00002314  4878 005D 3916          pea       93
00002318  4E92      3917          jsr       (A2)
0000231A  584F      3918          addq.w    #4,A7
                    3919   ; printf("\r\n PC = $%08X  ", PC) ;
0000231C  2F39 0B00 3920          move.l    _PC.L,-(A7)
00002320  0120      
00002322  4879 0000 3921          pea       @m68kde~1_81.L
00002326  56EA      
00002328  4E93      3922          jsr       (A3)
0000232A  504F      3923          addq.w    #8,A7
                    3924   ; if(*(unsigned short int *)(PC) == 0x4e4e)
0000232C  2039 0B00 3925          move.l    _PC.L,D0
00002330  0120      
00002332  2040      3926          move.l    D0,A0
00002334  3010      3927          move.w    (A0),D0
00002336  0C40 4E4E 3928          cmp.w     #20046,D0
0000233A  660A      3929          bne.s     DumpRegisters_40
                    3930   ; printf("[@ BREAKPOINT]") ;
0000233C  4879 0000 3931          pea       @m68kde~1_82.L
00002340  56FA      
00002342  4E93      3932          jsr       (A3)
00002344  584F      3933          addq.w    #4,A7
                    3934   DumpRegisters_40:
                    3935   ; printf("\r\n") ;
00002346  4879 0000 3936          pea       @m68kde~1_1.L
0000234A  4E46      
0000234C  4E93      3937          jsr       (A3)
0000234E  584F      3938          addq.w    #4,A7
                    3939   ; for(i=0; i < 8; i++)    {
00002350  4244      3940          clr.w     D4
                    3941   DumpRegisters_42:
00002352  0C44 0008 3942          cmp.w     #8,D4
00002356  6C00 0040 3943          bge       DumpRegisters_44
                    3944   ; if(WatchPointSetOrCleared[i] == 1)
0000235A  48C4      3945          ext.l     D4
0000235C  2004      3946          move.l    D4,D0
0000235E  E588      3947          lsl.l     #2,D0
00002360  41F9 0B00 3948          lea       _WatchPointSetOrCleared.L,A0
00002364  01A2      
00002366  2030 0800 3949          move.l    0(A0,D0.L),D0
0000236A  0C80 0000 3950          cmp.l     #1,D0
0000236E  0001      
00002370  6622      3951          bne.s     DumpRegisters_45
                    3952   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00002372  220D      3953          move.l    A5,D1
00002374  48C4      3954          ext.l     D4
00002376  2F00      3955          move.l    D0,-(A7)
00002378  2004      3956          move.l    D4,D0
0000237A  C1FC 0064 3957          muls      #100,D0
0000237E  D280      3958          add.l     D0,D1
00002380  201F      3959          move.l    (A7)+,D0
00002382  2F01      3960          move.l    D1,-(A7)
00002384  48C4      3961          ext.l     D4
00002386  2F04      3962          move.l    D4,-(A7)
00002388  4879 0000 3963          pea       @m68kde~1_83.L
0000238C  570A      
0000238E  4E93      3964          jsr       (A3)
00002390  DEFC 000C 3965          add.w     #12,A7
                    3966   DumpRegisters_45:
00002394  5244      3967          addq.w    #1,D4
00002396  60BA      3968          bra       DumpRegisters_42
                    3969   DumpRegisters_44:
00002398  4CDF 3CFC 3970          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000239C  4E75      3971          rts
                    3972   ; }
                    3973   ; }
                    3974   ; // Trace Exception Handler
                    3975   ; void DumpRegistersandPause(void)
                    3976   ; {
                    3977   _DumpRegistersandPause:
0000239E  2F0A      3978          move.l    A2,-(A7)
000023A0  45F9 0000 3979          lea       _printf.L,A2
000023A4  4470      
                    3980   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
000023A6  4879 0000 3981          pea       @m68kde~1_84.L
000023AA  5716      
000023AC  4E92      3982          jsr       (A2)
000023AE  584F      3983          addq.w    #4,A7
                    3984   ; printf("\r\nBreak Points :[Disabled]") ;
000023B0  4879 0000 3985          pea       @m68kde~1_85.L
000023B4  5736      
000023B6  4E92      3986          jsr       (A2)
000023B8  584F      3987          addq.w    #4,A7
                    3988   ; DumpRegisters() ;
000023BA  4EB8 1EEA 3989          jsr       _DumpRegisters
                    3990   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000023BE  4879 0000 3991          pea       @m68kde~1_86.L
000023C2  5752      
000023C4  4E92      3992          jsr       (A2)
000023C6  584F      3993          addq.w    #4,A7
                    3994   ; printf("\r\nPress <ESC> to Resume Program") ;
000023C8  4879 0000 3995          pea       @m68kde~1_87.L
000023CC  577E      
000023CE  4E92      3996          jsr       (A2)
000023D0  584F      3997          addq.w    #4,A7
                    3998   ; menu() ;
000023D2  4EB9 0000 3999          jsr       _menu
000023D6  2F82      
000023D8  245F      4000          move.l    (A7)+,A2
000023DA  4E75      4001          rts
                    4002   ; }
                    4003   ; void ChangeRegisters(void)
                    4004   ; {
                    4005   _ChangeRegisters:
000023DC  4E56 FFFC 4006          link      A6,#-4
000023E0  48E7 303C 4007          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000023E4  45F9 0000 4008          lea       _printf.L,A2
000023E8  4470      
000023EA  47EE FFFC 4009          lea       -4(A6),A3
000023EE  49F8 0CA4 4010          lea       _Get8HexDigits.L,A4
000023F2  4BF8 0B68 4011          lea       __getch.L,A5
                    4012   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    4013   ; int reg_val ;
                    4014   ; char c, reg[3] ;
                    4015   ; reg[0] = tolower(_getch()) ;
000023F6  2F00      4016          move.l    D0,-(A7)
000023F8  4E95      4017          jsr       (A5)
000023FA  2200      4018          move.l    D0,D1
000023FC  201F      4019          move.l    (A7)+,D0
000023FE  2F01      4020          move.l    D1,-(A7)
00002400  4EB9 0000 4021          jsr       _tolower
00002404  3B20      
00002406  584F      4022          addq.w    #4,A7
00002408  1680      4023          move.b    D0,(A3)
                    4024   ; reg[1] = c = tolower(_getch()) ;
0000240A  2F00      4025          move.l    D0,-(A7)
0000240C  4E95      4026          jsr       (A5)
0000240E  2200      4027          move.l    D0,D1
00002410  201F      4028          move.l    (A7)+,D0
00002412  2F01      4029          move.l    D1,-(A7)
00002414  4EB9 0000 4030          jsr       _tolower
00002418  3B20      
0000241A  584F      4031          addq.w    #4,A7
0000241C  1400      4032          move.b    D0,D2
0000241E  1740 0001 4033          move.b    D0,1(A3)
                    4034   ; if(reg[0] == (char)('d'))  {    // change data register
00002422  1013      4035          move.b    (A3),D0
00002424  0C00 0064 4036          cmp.b     #100,D0
00002428  6600 00AE 4037          bne       ChangeRegisters_1
                    4038   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
0000242C  102B 0001 4039          move.b    1(A3),D0
00002430  0C00 0037 4040          cmp.b     #55,D0
00002434  6E0A      4041          bgt.s     ChangeRegisters_5
00002436  102B 0001 4042          move.b    1(A3),D0
0000243A  0C00 0030 4043          cmp.b     #48,D0
0000243E  6C0E      4044          bge.s     ChangeRegisters_3
                    4045   ChangeRegisters_5:
                    4046   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00002440  4879 0000 4047          pea       @m68kde~1_88.L
00002444  579E      
00002446  4E92      4048          jsr       (A2)
00002448  584F      4049          addq.w    #4,A7
                    4050   ; return ;
0000244A  6000 0244 4051          bra       ChangeRegisters_6
                    4052   ChangeRegisters_3:
                    4053   ; }
                    4054   ; else {
                    4055   ; printf("\r\nD%c = ", c) ;
0000244E  4882      4056          ext.w     D2
00002450  48C2      4057          ext.l     D2
00002452  2F02      4058          move.l    D2,-(A7)
00002454  4879 0000 4059          pea       @m68kde~1_89.L
00002458  57CA      
0000245A  4E92      4060          jsr       (A2)
0000245C  504F      4061          addq.w    #8,A7
                    4062   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000245E  42A7      4063          clr.l     -(A7)
00002460  4E94      4064          jsr       (A4)
00002462  584F      4065          addq.w    #4,A7
00002464  2600      4066          move.l    D0,D3
                    4067   ; }
                    4068   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    4069   ; if(c == (char)('0'))
00002466  0C02 0030 4070          cmp.b     #48,D2
0000246A  660A      4071          bne.s     ChangeRegisters_7
                    4072   ; d0 = reg_val ;
0000246C  23C3 0B00 4073          move.l    D3,_d0.L
00002470  00E4      
00002472  6000 0060 4074          bra       ChangeRegisters_20
                    4075   ChangeRegisters_7:
                    4076   ; else if(c == (char)('1'))
00002476  0C02 0031 4077          cmp.b     #49,D2
0000247A  660A      4078          bne.s     ChangeRegisters_9
                    4079   ; d1 = reg_val ;
0000247C  23C3 0B00 4080          move.l    D3,_d1.L
00002480  00E8      
00002482  6000 0050 4081          bra       ChangeRegisters_20
                    4082   ChangeRegisters_9:
                    4083   ; else if(c == (char)('2'))
00002486  0C02 0032 4084          cmp.b     #50,D2
0000248A  660A      4085          bne.s     ChangeRegisters_11
                    4086   ; d2 = reg_val ;
0000248C  23C3 0B00 4087          move.l    D3,_d2.L
00002490  00EC      
00002492  6000 0040 4088          bra       ChangeRegisters_20
                    4089   ChangeRegisters_11:
                    4090   ; else if(c == (char)('3'))
00002496  0C02 0033 4091          cmp.b     #51,D2
0000249A  6608      4092          bne.s     ChangeRegisters_13
                    4093   ; d3 = reg_val ;
0000249C  23C3 0B00 4094          move.l    D3,_d3.L
000024A0  00F0      
000024A2  6030      4095          bra.s     ChangeRegisters_20
                    4096   ChangeRegisters_13:
                    4097   ; else if(c == (char)('4'))
000024A4  0C02 0034 4098          cmp.b     #52,D2
000024A8  6608      4099          bne.s     ChangeRegisters_15
                    4100   ; d4 = reg_val ;
000024AA  23C3 0B00 4101          move.l    D3,_d4.L
000024AE  00F4      
000024B0  6022      4102          bra.s     ChangeRegisters_20
                    4103   ChangeRegisters_15:
                    4104   ; else if(c == (char)('5'))
000024B2  0C02 0035 4105          cmp.b     #53,D2
000024B6  6608      4106          bne.s     ChangeRegisters_17
                    4107   ; d5 = reg_val ;
000024B8  23C3 0B00 4108          move.l    D3,_d5.L
000024BC  00F8      
000024BE  6014      4109          bra.s     ChangeRegisters_20
                    4110   ChangeRegisters_17:
                    4111   ; else if(c == (char)('6'))
000024C0  0C02 0036 4112          cmp.b     #54,D2
000024C4  6608      4113          bne.s     ChangeRegisters_19
                    4114   ; d6 = reg_val ;
000024C6  23C3 0B00 4115          move.l    D3,_d6.L
000024CA  00FC      
000024CC  6006      4116          bra.s     ChangeRegisters_20
                    4117   ChangeRegisters_19:
                    4118   ; else
                    4119   ; d7 = reg_val ;
000024CE  23C3 0B00 4120          move.l    D3,_d7.L
000024D2  0100      
                    4121   ChangeRegisters_20:
000024D4  6000 01B6 4122          bra       ChangeRegisters_51
                    4123   ChangeRegisters_1:
                    4124   ; }
                    4125   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000024D8  1013      4126          move.b    (A3),D0
000024DA  0C00 0061 4127          cmp.b     #97,D0
000024DE  6600 00A6 4128          bne       ChangeRegisters_21
                    4129   ; if((c > (char)('7')) || (c < (char)('0'))) {
000024E2  0C02 0037 4130          cmp.b     #55,D2
000024E6  6E06      4131          bgt.s     ChangeRegisters_25
000024E8  0C02 0030 4132          cmp.b     #48,D2
000024EC  6C0E      4133          bge.s     ChangeRegisters_23
                    4134   ChangeRegisters_25:
                    4135   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000024EE  4879 0000 4136          pea       @m68kde~1_90.L
000024F2  57D4      
000024F4  4E92      4137          jsr       (A2)
000024F6  584F      4138          addq.w    #4,A7
                    4139   ; return ;
000024F8  6000 0196 4140          bra       ChangeRegisters_6
                    4141   ChangeRegisters_23:
                    4142   ; }
                    4143   ; else {
                    4144   ; printf("\r\nA%c = ", c) ;
000024FC  4882      4145          ext.w     D2
000024FE  48C2      4146          ext.l     D2
00002500  2F02      4147          move.l    D2,-(A7)
00002502  4879 0000 4148          pea       @m68kde~1_91.L
00002506  5802      
00002508  4E92      4149          jsr       (A2)
0000250A  504F      4150          addq.w    #8,A7
                    4151   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000250C  42A7      4152          clr.l     -(A7)
0000250E  4E94      4153          jsr       (A4)
00002510  584F      4154          addq.w    #4,A7
00002512  2600      4155          move.l    D0,D3
                    4156   ; }
                    4157   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    4158   ; if(c == (char)('0'))
00002514  0C02 0030 4159          cmp.b     #48,D2
00002518  660A      4160          bne.s     ChangeRegisters_26
                    4161   ; a0 = reg_val ;
0000251A  23C3 0B00 4162          move.l    D3,_a0.L
0000251E  0104      
00002520  6000 0060 4163          bra       ChangeRegisters_39
                    4164   ChangeRegisters_26:
                    4165   ; else if(c == (char)('1'))
00002524  0C02 0031 4166          cmp.b     #49,D2
00002528  660A      4167          bne.s     ChangeRegisters_28
                    4168   ; a1 = reg_val ;
0000252A  23C3 0B00 4169          move.l    D3,_a1.L
0000252E  0108      
00002530  6000 0050 4170          bra       ChangeRegisters_39
                    4171   ChangeRegisters_28:
                    4172   ; else if(c == (char)('2'))
00002534  0C02 0032 4173          cmp.b     #50,D2
00002538  660A      4174          bne.s     ChangeRegisters_30
                    4175   ; a2 = reg_val ;
0000253A  23C3 0B00 4176          move.l    D3,_a2.L
0000253E  010C      
00002540  6000 0040 4177          bra       ChangeRegisters_39
                    4178   ChangeRegisters_30:
                    4179   ; else if(c == (char)('3'))
00002544  0C02 0033 4180          cmp.b     #51,D2
00002548  6608      4181          bne.s     ChangeRegisters_32
                    4182   ; a3 = reg_val ;
0000254A  23C3 0B00 4183          move.l    D3,_a3.L
0000254E  0110      
00002550  6030      4184          bra.s     ChangeRegisters_39
                    4185   ChangeRegisters_32:
                    4186   ; else if(c == (char)('4'))
00002552  0C02 0034 4187          cmp.b     #52,D2
00002556  6608      4188          bne.s     ChangeRegisters_34
                    4189   ; a4 = reg_val ;
00002558  23C3 0B00 4190          move.l    D3,_a4.L
0000255C  0114      
0000255E  6022      4191          bra.s     ChangeRegisters_39
                    4192   ChangeRegisters_34:
                    4193   ; else if(c == (char)('5'))
00002560  0C02 0035 4194          cmp.b     #53,D2
00002564  6608      4195          bne.s     ChangeRegisters_36
                    4196   ; a5 = reg_val ;
00002566  23C3 0B00 4197          move.l    D3,_a5.L
0000256A  0118      
0000256C  6014      4198          bra.s     ChangeRegisters_39
                    4199   ChangeRegisters_36:
                    4200   ; else if(c == (char)('6'))
0000256E  0C02 0036 4201          cmp.b     #54,D2
00002572  6608      4202          bne.s     ChangeRegisters_38
                    4203   ; a6 = reg_val ;
00002574  23C3 0B00 4204          move.l    D3,_a6.L
00002578  011C      
0000257A  6006      4205          bra.s     ChangeRegisters_39
                    4206   ChangeRegisters_38:
                    4207   ; else
                    4208   ; USP = reg_val ;
0000257C  23C3 0B00 4209          move.l    D3,_USP.L
00002580  0128      
                    4210   ChangeRegisters_39:
00002582  6000 0108 4211          bra       ChangeRegisters_51
                    4212   ChangeRegisters_21:
                    4213   ; }
                    4214   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00002586  1013      4215          move.b    (A3),D0
00002588  0C00 0075 4216          cmp.b     #117,D0
0000258C  6600 004E 4217          bne       ChangeRegisters_40
00002590  0C02 0073 4218          cmp.b     #115,D2
00002594  6600 0046 4219          bne       ChangeRegisters_40
                    4220   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00002598  2F00      4221          move.l    D0,-(A7)
0000259A  4E95      4222          jsr       (A5)
0000259C  2200      4223          move.l    D0,D1
0000259E  201F      4224          move.l    (A7)+,D0
000025A0  2F01      4225          move.l    D1,-(A7)
000025A2  4EB9 0000 4226          jsr       _tolower
000025A6  3B20      
000025A8  584F      4227          addq.w    #4,A7
000025AA  0C80 0000 4228          cmp.l     #112,D0
000025AE  0070      
000025B0  6618      4229          bne.s     ChangeRegisters_42
                    4230   ; printf("\r\nUser SP = ") ;
000025B2  4879 0000 4231          pea       @m68kde~1_92.L
000025B6  580C      
000025B8  4E92      4232          jsr       (A2)
000025BA  584F      4233          addq.w    #4,A7
                    4234   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000025BC  42A7      4235          clr.l     -(A7)
000025BE  4E94      4236          jsr       (A4)
000025C0  584F      4237          addq.w    #4,A7
000025C2  23C0 0B00 4238          move.l    D0,_USP.L
000025C6  0128      
000025C8  600E      4239          bra.s     ChangeRegisters_43
                    4240   ChangeRegisters_42:
                    4241   ; }
                    4242   ; else {
                    4243   ; printf("\r\nIllegal Register....") ;
000025CA  4879 0000 4244          pea       @m68kde~1_93.L
000025CE  581A      
000025D0  4E92      4245          jsr       (A2)
000025D2  584F      4246          addq.w    #4,A7
                    4247   ; return ;
000025D4  6000 00BA 4248          bra       ChangeRegisters_6
                    4249   ChangeRegisters_43:
000025D8  6000 00B2 4250          bra       ChangeRegisters_51
                    4251   ChangeRegisters_40:
                    4252   ; }
                    4253   ; }
                    4254   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000025DC  1013      4255          move.b    (A3),D0
000025DE  0C00 0073 4256          cmp.b     #115,D0
000025E2  6600 004E 4257          bne       ChangeRegisters_44
000025E6  0C02 0073 4258          cmp.b     #115,D2
000025EA  6600 0046 4259          bne       ChangeRegisters_44
                    4260   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000025EE  2F00      4261          move.l    D0,-(A7)
000025F0  4E95      4262          jsr       (A5)
000025F2  2200      4263          move.l    D0,D1
000025F4  201F      4264          move.l    (A7)+,D0
000025F6  2F01      4265          move.l    D1,-(A7)
000025F8  4EB9 0000 4266          jsr       _tolower
000025FC  3B20      
000025FE  584F      4267          addq.w    #4,A7
00002600  0C80 0000 4268          cmp.l     #112,D0
00002604  0070      
00002606  6618      4269          bne.s     ChangeRegisters_46
                    4270   ; printf("\r\nSystem SP = ") ;
00002608  4879 0000 4271          pea       @m68kde~1_94.L
0000260C  5832      
0000260E  4E92      4272          jsr       (A2)
00002610  584F      4273          addq.w    #4,A7
                    4274   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00002612  42A7      4275          clr.l     -(A7)
00002614  4E94      4276          jsr       (A4)
00002616  584F      4277          addq.w    #4,A7
00002618  23C0 0B00 4278          move.l    D0,_SSP.L
0000261C  0124      
0000261E  600E      4279          bra.s     ChangeRegisters_47
                    4280   ChangeRegisters_46:
                    4281   ; }
                    4282   ; else {
                    4283   ; printf("\r\nIllegal Register....") ;
00002620  4879 0000 4284          pea       @m68kde~1_93.L
00002624  581A      
00002626  4E92      4285          jsr       (A2)
00002628  584F      4286          addq.w    #4,A7
                    4287   ; return ;
0000262A  6000 0064 4288          bra       ChangeRegisters_6
                    4289   ChangeRegisters_47:
0000262E  6000 005C 4290          bra       ChangeRegisters_51
                    4291   ChangeRegisters_44:
                    4292   ; }
                    4293   ; }
                    4294   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00002632  1013      4295          move.b    (A3),D0
00002634  0C00 0070 4296          cmp.b     #112,D0
00002638  6620      4297          bne.s     ChangeRegisters_48
0000263A  0C02 0063 4298          cmp.b     #99,D2
0000263E  661A      4299          bne.s     ChangeRegisters_48
                    4300   ; printf("\r\nPC = ") ;
00002640  4879 0000 4301          pea       @m68kde~1_95.L
00002644  5842      
00002646  4E92      4302          jsr       (A2)
00002648  584F      4303          addq.w    #4,A7
                    4304   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000264A  42A7      4305          clr.l     -(A7)
0000264C  4E94      4306          jsr       (A4)
0000264E  584F      4307          addq.w    #4,A7
00002650  23C0 0B00 4308          move.l    D0,_PC.L
00002654  0120      
00002656  6000 0034 4309          bra       ChangeRegisters_51
                    4310   ChangeRegisters_48:
                    4311   ; }
                    4312   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
0000265A  1013      4313          move.b    (A3),D0
0000265C  0C00 0073 4314          cmp.b     #115,D0
00002660  6620      4315          bne.s     ChangeRegisters_50
00002662  0C02 0072 4316          cmp.b     #114,D2
00002666  661A      4317          bne.s     ChangeRegisters_50
                    4318   ; printf("\r\nSR = ") ;
00002668  4879 0000 4319          pea       @m68kde~1_96.L
0000266C  584A      
0000266E  4E92      4320          jsr       (A2)
00002670  584F      4321          addq.w    #4,A7
                    4322   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00002672  42A7      4323          clr.l     -(A7)
00002674  4EB8 0C58 4324          jsr       _Get4HexDigits
00002678  584F      4325          addq.w    #4,A7
0000267A  33C0 0B00 4326          move.w    D0,_SR.L
0000267E  012C      
00002680  600A      4327          bra.s     ChangeRegisters_51
                    4328   ChangeRegisters_50:
                    4329   ; }
                    4330   ; else
                    4331   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00002682  4879 0000 4332          pea       @m68kde~1_97.L
00002686  5852      
00002688  4E92      4333          jsr       (A2)
0000268A  584F      4334          addq.w    #4,A7
                    4335   ChangeRegisters_51:
                    4336   ; DumpRegisters() ;
0000268C  4EB8 1EEA 4337          jsr       _DumpRegisters
                    4338   ChangeRegisters_6:
00002690  4CDF 3C0C 4339          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002694  4E5E      4340          unlk      A6
00002696  4E75      4341          rts
                    4342   ; }
                    4343   ; void BreakPointDisplay(void)
                    4344   ; {
                    4345   _BreakPointDisplay:
00002698  48E7 3030 4346          movem.l   D2/D3/A2/A3,-(A7)
0000269C  45F9 0000 4347          lea       _printf.L,A2
000026A0  4470      
000026A2  47F9 0B00 4348          lea       _BreakPointAddress.L,A3
000026A6  012E      
                    4349   ; int i, BreakPointsSet = 0 ;
000026A8  4283      4350          clr.l     D3
                    4351   ; // any break points  set
                    4352   ; for(i = 0; i < 8; i++)  {
000026AA  4282      4353          clr.l     D2
                    4354   BreakPointDisplay_1:
000026AC  0C82 0000 4355          cmp.l     #8,D2
000026B0  0008      
000026B2  6C1C      4356          bge.s     BreakPointDisplay_3
                    4357   ; if(BreakPointSetOrCleared[i] == 1)
000026B4  2002      4358          move.l    D2,D0
000026B6  E588      4359          lsl.l     #2,D0
000026B8  41F9 0B00 4360          lea       _BreakPointSetOrCleared.L,A0
000026BC  015E      
000026BE  2030 0800 4361          move.l    0(A0,D0.L),D0
000026C2  0C80 0000 4362          cmp.l     #1,D0
000026C6  0001      
000026C8  6602      4363          bne.s     BreakPointDisplay_4
                    4364   ; BreakPointsSet = 1;
000026CA  7601      4365          moveq     #1,D3
                    4366   BreakPointDisplay_4:
000026CC  5282      4367          addq.l    #1,D2
000026CE  60DC      4368          bra       BreakPointDisplay_1
                    4369   BreakPointDisplay_3:
                    4370   ; }
                    4371   ; if(BreakPointsSet == 1) {
000026D0  0C83 0000 4372          cmp.l     #1,D3
000026D4  0001      
000026D6  6616      4373          bne.s     BreakPointDisplay_6
                    4374   ; printf("\r\n\r\nNum     Address      Instruction") ;
000026D8  4879 0000 4375          pea       @m68kde~1_98.L
000026DC  588E      
000026DE  4E92      4376          jsr       (A2)
000026E0  584F      4377          addq.w    #4,A7
                    4378   ; printf("\r\n---     ---------    -----------") ;
000026E2  4879 0000 4379          pea       @m68kde~1_99.L
000026E6  58B4      
000026E8  4E92      4380          jsr       (A2)
000026EA  584F      4381          addq.w    #4,A7
000026EC  600A      4382          bra.s     BreakPointDisplay_7
                    4383   BreakPointDisplay_6:
                    4384   ; }
                    4385   ; else
                    4386   ; printf("\r\nNo BreakPoints Set") ;
000026EE  4879 0000 4387          pea       @m68kde~1_100.L
000026F2  58D8      
000026F4  4E92      4388          jsr       (A2)
000026F6  584F      4389          addq.w    #4,A7
                    4390   BreakPointDisplay_7:
                    4391   ; for(i = 0; i < 8; i++)  {
000026F8  4282      4392          clr.l     D2
                    4393   BreakPointDisplay_8:
000026FA  0C82 0000 4394          cmp.l     #8,D2
000026FE  0008      
00002700  6C00 005A 4395          bge       BreakPointDisplay_10
                    4396   ; // put opcode back, then put break point back
                    4397   ; if(BreakPointSetOrCleared[i] == 1)  {
00002704  2002      4398          move.l    D2,D0
00002706  E588      4399          lsl.l     #2,D0
00002708  41F9 0B00 4400          lea       _BreakPointSetOrCleared.L,A0
0000270C  015E      
0000270E  2030 0800 4401          move.l    0(A0,D0.L),D0
00002712  0C80 0000 4402          cmp.l     #1,D0
00002716  0001      
00002718  6600 003E 4403          bne       BreakPointDisplay_11
                    4404   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
0000271C  2002      4405          move.l    D2,D0
0000271E  E388      4406          lsl.l     #1,D0
00002720  41F9 0B00 4407          lea       _BreakPointInstruction.L,A0
00002724  014E      
00002726  2202      4408          move.l    D2,D1
00002728  E589      4409          lsl.l     #2,D1
0000272A  2233 1800 4410          move.l    0(A3,D1.L),D1
0000272E  2241      4411          move.l    D1,A1
00002730  32B0 0800 4412          move.w    0(A0,D0.L),(A1)
                    4413   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00002734  2002      4414          move.l    D2,D0
00002736  E588      4415          lsl.l     #2,D0
00002738  2033 0800 4416          move.l    0(A3,D0.L),D0
0000273C  2040      4417          move.l    D0,A0
0000273E  30BC 4E4E 4418          move.w    #20046,(A0)
                    4419   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00002742  2202      4420          move.l    D2,D1
00002744  E589      4421          lsl.l     #2,D1
00002746  2F33 1800 4422          move.l    0(A3,D1.L),-(A7)
0000274A  2F02      4423          move.l    D2,-(A7)
0000274C  4879 0000 4424          pea       @m68kde~1_101.L
00002750  58EE      
00002752  4E92      4425          jsr       (A2)
00002754  DEFC 000C 4426          add.w     #12,A7
                    4427   BreakPointDisplay_11:
00002758  5282      4428          addq.l    #1,D2
0000275A  609E      4429          bra       BreakPointDisplay_8
                    4430   BreakPointDisplay_10:
                    4431   ; }
                    4432   ; }
                    4433   ; printf("\r\n") ;
0000275C  4879 0000 4434          pea       @m68kde~1_1.L
00002760  4E46      
00002762  4E92      4435          jsr       (A2)
00002764  584F      4436          addq.w    #4,A7
00002766  4CDF 0C0C 4437          movem.l   (A7)+,D2/D3/A2/A3
0000276A  4E75      4438          rts
                    4439   ; }
                    4440   ; void WatchPointDisplay(void)
                    4441   ; {
                    4442   _WatchPointDisplay:
0000276C  48E7 3020 4443          movem.l   D2/D3/A2,-(A7)
00002770  45F9 0000 4444          lea       _printf.L,A2
00002774  4470      
                    4445   ; int i ;
                    4446   ; int WatchPointsSet = 0 ;
00002776  4283      4447          clr.l     D3
                    4448   ; // any watchpoints set
                    4449   ; for(i = 0; i < 8; i++)  {
00002778  4282      4450          clr.l     D2
                    4451   WatchPointDisplay_1:
0000277A  0C82 0000 4452          cmp.l     #8,D2
0000277E  0008      
00002780  6C1C      4453          bge.s     WatchPointDisplay_3
                    4454   ; if(WatchPointSetOrCleared[i] == 1)
00002782  2002      4455          move.l    D2,D0
00002784  E588      4456          lsl.l     #2,D0
00002786  41F9 0B00 4457          lea       _WatchPointSetOrCleared.L,A0
0000278A  01A2      
0000278C  2030 0800 4458          move.l    0(A0,D0.L),D0
00002790  0C80 0000 4459          cmp.l     #1,D0
00002794  0001      
00002796  6602      4460          bne.s     WatchPointDisplay_4
                    4461   ; WatchPointsSet = 1;
00002798  7601      4462          moveq     #1,D3
                    4463   WatchPointDisplay_4:
0000279A  5282      4464          addq.l    #1,D2
0000279C  60DC      4465          bra       WatchPointDisplay_1
                    4466   WatchPointDisplay_3:
                    4467   ; }
                    4468   ; if(WatchPointsSet == 1) {
0000279E  0C83 0000 4469          cmp.l     #1,D3
000027A2  0001      
000027A4  6616      4470          bne.s     WatchPointDisplay_6
                    4471   ; printf("\r\nNum     Address") ;
000027A6  4879 0000 4472          pea       @m68kde~1_102.L
000027AA  58FE      
000027AC  4E92      4473          jsr       (A2)
000027AE  584F      4474          addq.w    #4,A7
                    4475   ; printf("\r\n---     ---------") ;
000027B0  4879 0000 4476          pea       @m68kde~1_103.L
000027B4  5910      
000027B6  4E92      4477          jsr       (A2)
000027B8  584F      4478          addq.w    #4,A7
000027BA  600A      4479          bra.s     WatchPointDisplay_7
                    4480   WatchPointDisplay_6:
                    4481   ; }
                    4482   ; else
                    4483   ; printf("\r\nNo WatchPoints Set") ;
000027BC  4879 0000 4484          pea       @m68kde~1_104.L
000027C0  5924      
000027C2  4E92      4485          jsr       (A2)
000027C4  584F      4486          addq.w    #4,A7
                    4487   WatchPointDisplay_7:
                    4488   ; for(i = 0; i < 8; i++)  {
000027C6  4282      4489          clr.l     D2
                    4490   WatchPointDisplay_8:
000027C8  0C82 0000 4491          cmp.l     #8,D2
000027CC  0008      
000027CE  6C00 0038 4492          bge       WatchPointDisplay_10
                    4493   ; if(WatchPointSetOrCleared[i] == 1)
000027D2  2002      4494          move.l    D2,D0
000027D4  E588      4495          lsl.l     #2,D0
000027D6  41F9 0B00 4496          lea       _WatchPointSetOrCleared.L,A0
000027DA  01A2      
000027DC  2030 0800 4497          move.l    0(A0,D0.L),D0
000027E0  0C80 0000 4498          cmp.l     #1,D0
000027E4  0001      
000027E6  661C      4499          bne.s     WatchPointDisplay_11
                    4500   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000027E8  2202      4501          move.l    D2,D1
000027EA  E589      4502          lsl.l     #2,D1
000027EC  41F9 0B00 4503          lea       _WatchPointAddress.L,A0
000027F0  0182      
000027F2  2F30 1800 4504          move.l    0(A0,D1.L),-(A7)
000027F6  2F02      4505          move.l    D2,-(A7)
000027F8  4879 0000 4506          pea       @m68kde~1_101.L
000027FC  58EE      
000027FE  4E92      4507          jsr       (A2)
00002800  DEFC 000C 4508          add.w     #12,A7
                    4509   WatchPointDisplay_11:
00002804  5282      4510          addq.l    #1,D2
00002806  60C0      4511          bra       WatchPointDisplay_8
                    4512   WatchPointDisplay_10:
                    4513   ; }
                    4514   ; printf("\r\n") ;
00002808  4879 0000 4515          pea       @m68kde~1_1.L
0000280C  4E46      
0000280E  4E92      4516          jsr       (A2)
00002810  584F      4517          addq.w    #4,A7
00002812  4CDF 040C 4518          movem.l   (A7)+,D2/D3/A2
00002816  4E75      4519          rts
                    4520   ; }
                    4521   ; void BreakPointClear(void)
                    4522   ; {
                    4523   _BreakPointClear:
00002818  4E56 FFFC 4524          link      A6,#-4
0000281C  48E7 2020 4525          movem.l   D2/A2,-(A7)
00002820  45F9 0000 4526          lea       _printf.L,A2
00002824  4470      
                    4527   ; unsigned int i ;
                    4528   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4529   ; BreakPointDisplay() ;
00002826  4EB8 2698 4530          jsr       _BreakPointDisplay
                    4531   ; printf("\r\nEnter Break Point Number: ") ;
0000282A  4879 0000 4532          pea       @m68kde~1_105.L
0000282E  593A      
00002830  4E92      4533          jsr       (A2)
00002832  584F      4534          addq.w    #4,A7
                    4535   ; i = xtod(_getch()) ;           // get break pointer number
00002834  2F00      4536          move.l    D0,-(A7)
00002836  4EB8 0B68 4537          jsr       __getch
0000283A  2200      4538          move.l    D0,D1
0000283C  201F      4539          move.l    (A7)+,D0
0000283E  2F01      4540          move.l    D1,-(A7)
00002840  4EB8 0BD2 4541          jsr       _xtod
00002844  584F      4542          addq.w    #4,A7
00002846  C0BC 0000 4543          and.l     #255,D0
0000284A  00FF      
0000284C  2400      4544          move.l    D0,D2
                    4545   ; if((i < 0) || (i > 7))   {
0000284E  0C82 0000 4546          cmp.l     #0,D2
00002852  0000      
00002854  6508      4547          blo.s     BreakPointClear_3
00002856  0C82 0000 4548          cmp.l     #7,D2
0000285A  0007      
0000285C  630E      4549          bls.s     BreakPointClear_1
                    4550   BreakPointClear_3:
                    4551   ; printf("\r\nIllegal Range : Use 0 - 7") ;
0000285E  4879 0000 4552          pea       @m68kde~1_106.L
00002862  5958      
00002864  4E92      4553          jsr       (A2)
00002866  584F      4554          addq.w    #4,A7
                    4555   ; return ;
00002868  6000 0080 4556          bra       BreakPointClear_4
                    4557   BreakPointClear_1:
                    4558   ; }
                    4559   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
0000286C  2002      4560          move.l    D2,D0
0000286E  E588      4561          lsl.l     #2,D0
00002870  41F9 0B00 4562          lea       _BreakPointSetOrCleared.L,A0
00002874  015E      
00002876  2030 0800 4563          move.l    0(A0,D0.L),D0
0000287A  0C80 0000 4564          cmp.l     #1,D0
0000287E  0001      
00002880  6600 005A 4565          bne       BreakPointClear_5
                    4566   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00002884  2002      4567          move.l    D2,D0
00002886  E588      4568          lsl.l     #2,D0
00002888  41F9 0B00 4569          lea       _BreakPointAddress.L,A0
0000288C  012E      
0000288E  2D70 0800 4570          move.l    0(A0,D0.L),-4(A6)
00002892  FFFC      
                    4571   ; BreakPointAddress[i] = 0 ;
00002894  2002      4572          move.l    D2,D0
00002896  E588      4573          lsl.l     #2,D0
00002898  41F9 0B00 4574          lea       _BreakPointAddress.L,A0
0000289C  012E      
0000289E  42B0 0800 4575          clr.l     0(A0,D0.L)
                    4576   ; BreakPointSetOrCleared[i] = 0 ;
000028A2  2002      4577          move.l    D2,D0
000028A4  E588      4578          lsl.l     #2,D0
000028A6  41F9 0B00 4579          lea       _BreakPointSetOrCleared.L,A0
000028AA  015E      
000028AC  42B0 0800 4580          clr.l     0(A0,D0.L)
                    4581   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000028B0  2002      4582          move.l    D2,D0
000028B2  E388      4583          lsl.l     #1,D0
000028B4  41F9 0B00 4584          lea       _BreakPointInstruction.L,A0
000028B8  014E      
000028BA  226E FFFC 4585          move.l    -4(A6),A1
000028BE  32B0 0800 4586          move.w    0(A0,D0.L),(A1)
                    4587   ; BreakPointInstruction[i] = 0 ;
000028C2  2002      4588          move.l    D2,D0
000028C4  E388      4589          lsl.l     #1,D0
000028C6  41F9 0B00 4590          lea       _BreakPointInstruction.L,A0
000028CA  014E      
000028CC  4270 0800 4591          clr.w     0(A0,D0.L)
                    4592   ; printf("\r\nBreak Point Cleared.....\r\n") ;
000028D0  4879 0000 4593          pea       @m68kde~1_107.L
000028D4  5974      
000028D6  4E92      4594          jsr       (A2)
000028D8  584F      4595          addq.w    #4,A7
000028DA  600A      4596          bra.s     BreakPointClear_6
                    4597   BreakPointClear_5:
                    4598   ; }
                    4599   ; else
                    4600   ; printf("\r\nBreak Point wasn't Set.....") ;
000028DC  4879 0000 4601          pea       @m68kde~1_108.L
000028E0  5992      
000028E2  4E92      4602          jsr       (A2)
000028E4  584F      4603          addq.w    #4,A7
                    4604   BreakPointClear_6:
                    4605   ; BreakPointDisplay() ;
000028E6  4EB8 2698 4606          jsr       _BreakPointDisplay
                    4607   ; return ;
                    4608   BreakPointClear_4:
000028EA  4CDF 0404 4609          movem.l   (A7)+,D2/A2
000028EE  4E5E      4610          unlk      A6
000028F0  4E75      4611          rts
                    4612   ; }
                    4613   ; void WatchPointClear(void)
                    4614   ; {
                    4615   _WatchPointClear:
000028F2  48E7 2020 4616          movem.l   D2/A2,-(A7)
000028F6  45F9 0000 4617          lea       _printf.L,A2
000028FA  4470      
                    4618   ; unsigned int i ;
                    4619   ; WatchPointDisplay() ;
000028FC  4EB8 276C 4620          jsr       _WatchPointDisplay
                    4621   ; printf("\r\nEnter Watch Point Number: ") ;
00002900  4879 0000 4622          pea       @m68kde~1_109.L
00002904  59B0      
00002906  4E92      4623          jsr       (A2)
00002908  584F      4624          addq.w    #4,A7
                    4625   ; i = xtod(_getch()) ;           // get watch pointer number
0000290A  2F00      4626          move.l    D0,-(A7)
0000290C  4EB8 0B68 4627          jsr       __getch
00002910  2200      4628          move.l    D0,D1
00002912  201F      4629          move.l    (A7)+,D0
00002914  2F01      4630          move.l    D1,-(A7)
00002916  4EB8 0BD2 4631          jsr       _xtod
0000291A  584F      4632          addq.w    #4,A7
0000291C  C0BC 0000 4633          and.l     #255,D0
00002920  00FF      
00002922  2400      4634          move.l    D0,D2
                    4635   ; if((i < 0) || (i > 7))   {
00002924  0C82 0000 4636          cmp.l     #0,D2
00002928  0000      
0000292A  6508      4637          blo.s     WatchPointClear_3
0000292C  0C82 0000 4638          cmp.l     #7,D2
00002930  0007      
00002932  630E      4639          bls.s     WatchPointClear_1
                    4640   WatchPointClear_3:
                    4641   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00002934  4879 0000 4642          pea       @m68kde~1_106.L
00002938  5958      
0000293A  4E92      4643          jsr       (A2)
0000293C  584F      4644          addq.w    #4,A7
                    4645   ; return ;
0000293E  6000 004E 4646          bra       WatchPointClear_4
                    4647   WatchPointClear_1:
                    4648   ; }
                    4649   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00002942  2002      4650          move.l    D2,D0
00002944  E588      4651          lsl.l     #2,D0
00002946  41F9 0B00 4652          lea       _WatchPointSetOrCleared.L,A0
0000294A  01A2      
0000294C  2030 0800 4653          move.l    0(A0,D0.L),D0
00002950  0C80 0000 4654          cmp.l     #1,D0
00002954  0001      
00002956  6628      4655          bne.s     WatchPointClear_5
                    4656   ; WatchPointAddress[i] = 0 ;
00002958  2002      4657          move.l    D2,D0
0000295A  E588      4658          lsl.l     #2,D0
0000295C  41F9 0B00 4659          lea       _WatchPointAddress.L,A0
00002960  0182      
00002962  42B0 0800 4660          clr.l     0(A0,D0.L)
                    4661   ; WatchPointSetOrCleared[i] = 0 ;
00002966  2002      4662          move.l    D2,D0
00002968  E588      4663          lsl.l     #2,D0
0000296A  41F9 0B00 4664          lea       _WatchPointSetOrCleared.L,A0
0000296E  01A2      
00002970  42B0 0800 4665          clr.l     0(A0,D0.L)
                    4666   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00002974  4879 0000 4667          pea       @m68kde~1_110.L
00002978  59CE      
0000297A  4E92      4668          jsr       (A2)
0000297C  584F      4669          addq.w    #4,A7
0000297E  600A      4670          bra.s     WatchPointClear_6
                    4671   WatchPointClear_5:
                    4672   ; }
                    4673   ; else
                    4674   ; printf("\r\nWatch Point Was not Set.....") ;
00002980  4879 0000 4675          pea       @m68kde~1_111.L
00002984  59EC      
00002986  4E92      4676          jsr       (A2)
00002988  584F      4677          addq.w    #4,A7
                    4678   WatchPointClear_6:
                    4679   ; WatchPointDisplay() ;
0000298A  4EB8 276C 4680          jsr       _WatchPointDisplay
                    4681   ; return ;
                    4682   WatchPointClear_4:
0000298E  4CDF 0404 4683          movem.l   (A7)+,D2/A2
00002992  4E75      4684          rts
                    4685   ; }
                    4686   ; void DisableBreakPoints(void)
                    4687   ; {
                    4688   _DisableBreakPoints:
00002994  4E56 FFFC 4689          link      A6,#-4
00002998  2F02      4690          move.l    D2,-(A7)
                    4691   ; int i ;
                    4692   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4693   ; for(i = 0; i < 8; i++)  {
0000299A  4282      4694          clr.l     D2
                    4695   DisableBreakPoints_1:
0000299C  0C82 0000 4696          cmp.l     #8,D2
000029A0  0008      
000029A2  6C00 003E 4697          bge       DisableBreakPoints_3
                    4698   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
000029A6  2002      4699          move.l    D2,D0
000029A8  E588      4700          lsl.l     #2,D0
000029AA  41F9 0B00 4701          lea       _BreakPointSetOrCleared.L,A0
000029AE  015E      
000029B0  2030 0800 4702          move.l    0(A0,D0.L),D0
000029B4  0C80 0000 4703          cmp.l     #1,D0
000029B8  0001      
000029BA  6622      4704          bne.s     DisableBreakPoints_4
                    4705   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000029BC  2002      4706          move.l    D2,D0
000029BE  E588      4707          lsl.l     #2,D0
000029C0  41F9 0B00 4708          lea       _BreakPointAddress.L,A0
000029C4  012E      
000029C6  2D70 0800 4709          move.l    0(A0,D0.L),-4(A6)
000029CA  FFFC      
                    4710   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
000029CC  2002      4711          move.l    D2,D0
000029CE  E388      4712          lsl.l     #1,D0
000029D0  41F9 0B00 4713          lea       _BreakPointInstruction.L,A0
000029D4  014E      
000029D6  226E FFFC 4714          move.l    -4(A6),A1
000029DA  32B0 0800 4715          move.w    0(A0,D0.L),(A1)
                    4716   DisableBreakPoints_4:
000029DE  5282      4717          addq.l    #1,D2
000029E0  60BA      4718          bra       DisableBreakPoints_1
                    4719   DisableBreakPoints_3:
000029E2  241F      4720          move.l    (A7)+,D2
000029E4  4E5E      4721          unlk      A6
000029E6  4E75      4722          rts
                    4723   ; }
                    4724   ; }
                    4725   ; }
                    4726   ; void EnableBreakPoints(void)
                    4727   ; {
                    4728   _EnableBreakPoints:
000029E8  4E56 FFFC 4729          link      A6,#-4
000029EC  2F02      4730          move.l    D2,-(A7)
                    4731   ; int i ;
                    4732   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4733   ; for(i = 0; i < 8; i++)  {
000029EE  4282      4734          clr.l     D2
                    4735   EnableBreakPoints_1:
000029F0  0C82 0000 4736          cmp.l     #8,D2
000029F4  0008      
000029F6  6C32      4737          bge.s     EnableBreakPoints_3
                    4738   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
000029F8  2002      4739          move.l    D2,D0
000029FA  E588      4740          lsl.l     #2,D0
000029FC  41F9 0B00 4741          lea       _BreakPointSetOrCleared.L,A0
00002A00  015E      
00002A02  2030 0800 4742          move.l    0(A0,D0.L),D0
00002A06  0C80 0000 4743          cmp.l     #1,D0
00002A0A  0001      
00002A0C  6618      4744          bne.s     EnableBreakPoints_4
                    4745   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002A0E  2002      4746          move.l    D2,D0
00002A10  E588      4747          lsl.l     #2,D0
00002A12  41F9 0B00 4748          lea       _BreakPointAddress.L,A0
00002A16  012E      
00002A18  2D70 0800 4749          move.l    0(A0,D0.L),-4(A6)
00002A1C  FFFC      
                    4750   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00002A1E  206E FFFC 4751          move.l    -4(A6),A0
00002A22  30BC 4E4E 4752          move.w    #20046,(A0)
                    4753   EnableBreakPoints_4:
00002A26  5282      4754          addq.l    #1,D2
00002A28  60C6      4755          bra       EnableBreakPoints_1
                    4756   EnableBreakPoints_3:
00002A2A  241F      4757          move.l    (A7)+,D2
00002A2C  4E5E      4758          unlk      A6
00002A2E  4E75      4759          rts
                    4760   ; }
                    4761   ; }
                    4762   ; }
                    4763   ; void KillAllBreakPoints(void)
                    4764   ; {
                    4765   _KillAllBreakPoints:
00002A30  4E56 FFFC 4766          link      A6,#-4
00002A34  2F02      4767          move.l    D2,-(A7)
                    4768   ; int i ;
                    4769   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4770   ; for(i = 0; i < 8; i++)  {
00002A36  4282      4771          clr.l     D2
                    4772   KillAllBreakPoints_1:
00002A38  0C82 0000 4773          cmp.l     #8,D2
00002A3C  0008      
00002A3E  6C00 0052 4774          bge       KillAllBreakPoints_3
                    4775   ; // clear BP
                    4776   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002A42  2002      4777          move.l    D2,D0
00002A44  E588      4778          lsl.l     #2,D0
00002A46  41F9 0B00 4779          lea       _BreakPointAddress.L,A0
00002A4A  012E      
00002A4C  2D70 0800 4780          move.l    0(A0,D0.L),-4(A6)
00002A50  FFFC      
                    4781   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002A52  2002      4782          move.l    D2,D0
00002A54  E388      4783          lsl.l     #1,D0
00002A56  41F9 0B00 4784          lea       _BreakPointInstruction.L,A0
00002A5A  014E      
00002A5C  226E FFFC 4785          move.l    -4(A6),A1
00002A60  32B0 0800 4786          move.w    0(A0,D0.L),(A1)
                    4787   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002A64  2002      4788          move.l    D2,D0
00002A66  E588      4789          lsl.l     #2,D0
00002A68  41F9 0B00 4790          lea       _BreakPointAddress.L,A0
00002A6C  012E      
00002A6E  42B0 0800 4791          clr.l     0(A0,D0.L)
                    4792   ; BreakPointInstruction[i] = 0 ;
00002A72  2002      4793          move.l    D2,D0
00002A74  E388      4794          lsl.l     #1,D0
00002A76  41F9 0B00 4795          lea       _BreakPointInstruction.L,A0
00002A7A  014E      
00002A7C  4270 0800 4796          clr.w     0(A0,D0.L)
                    4797   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002A80  2002      4798          move.l    D2,D0
00002A82  E588      4799          lsl.l     #2,D0
00002A84  41F9 0B00 4800          lea       _BreakPointSetOrCleared.L,A0
00002A88  015E      
00002A8A  42B0 0800 4801          clr.l     0(A0,D0.L)
00002A8E  5282      4802          addq.l    #1,D2
00002A90  60A6      4803          bra       KillAllBreakPoints_1
                    4804   KillAllBreakPoints_3:
00002A92  241F      4805          move.l    (A7)+,D2
00002A94  4E5E      4806          unlk      A6
00002A96  4E75      4807          rts
                    4808   ; }
                    4809   ; //BreakPointDisplay() ;       // display the break points
                    4810   ; }
                    4811   ; void KillAllWatchPoints(void)
                    4812   ; {
                    4813   _KillAllWatchPoints:
00002A98  2F02      4814          move.l    D2,-(A7)
                    4815   ; int i ;
                    4816   ; for(i = 0; i < 8; i++)  {
00002A9A  4282      4817          clr.l     D2
                    4818   KillAllWatchPoints_1:
00002A9C  0C82 0000 4819          cmp.l     #8,D2
00002AA0  0008      
00002AA2  6C20      4820          bge.s     KillAllWatchPoints_3
                    4821   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002AA4  2002      4822          move.l    D2,D0
00002AA6  E588      4823          lsl.l     #2,D0
00002AA8  41F9 0B00 4824          lea       _WatchPointAddress.L,A0
00002AAC  0182      
00002AAE  42B0 0800 4825          clr.l     0(A0,D0.L)
                    4826   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002AB2  2002      4827          move.l    D2,D0
00002AB4  E588      4828          lsl.l     #2,D0
00002AB6  41F9 0B00 4829          lea       _WatchPointSetOrCleared.L,A0
00002ABA  01A2      
00002ABC  42B0 0800 4830          clr.l     0(A0,D0.L)
00002AC0  5282      4831          addq.l    #1,D2
00002AC2  60D8      4832          bra       KillAllWatchPoints_1
                    4833   KillAllWatchPoints_3:
00002AC4  241F      4834          move.l    (A7)+,D2
00002AC6  4E75      4835          rts
                    4836   ; }
                    4837   ; //WatchPointDisplay() ;       // display the break points
                    4838   ; }
                    4839   ; void SetBreakPoint(void)
                    4840   ; {
                    4841   _SetBreakPoint:
00002AC8  4E56 FFFC 4842          link      A6,#-4
00002ACC  48E7 3830 4843          movem.l   D2/D3/D4/A2/A3,-(A7)
00002AD0  45F9 0000 4844          lea       _printf.L,A2
00002AD4  4470      
00002AD6  47F9 0B00 4845          lea       _BreakPointSetOrCleared.L,A3
00002ADA  015E      
                    4846   ; int i ;
                    4847   ; int BPNumber;
                    4848   ; int BPAddress;
                    4849   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    4850   ; // see if any free break points
                    4851   ; for(i = 0; i < 8; i ++) {
00002ADC  4282      4852          clr.l     D2
                    4853   SetBreakPoint_1:
00002ADE  0C82 0000 4854          cmp.l     #8,D2
00002AE2  0008      
00002AE4  6C10      4855          bge.s     SetBreakPoint_3
                    4856   ; if( BreakPointSetOrCleared[i] == 0)
00002AE6  2002      4857          move.l    D2,D0
00002AE8  E588      4858          lsl.l     #2,D0
00002AEA  2033 0800 4859          move.l    0(A3,D0.L),D0
00002AEE  6602      4860          bne.s     SetBreakPoint_4
                    4861   ; break ;         // if spare BP found allow user to set it
00002AF0  6004      4862          bra.s     SetBreakPoint_3
                    4863   SetBreakPoint_4:
00002AF2  5282      4864          addq.l    #1,D2
00002AF4  60E8      4865          bra       SetBreakPoint_1
                    4866   SetBreakPoint_3:
                    4867   ; }
                    4868   ; if(i == 8) {
00002AF6  0C82 0000 4869          cmp.l     #8,D2
00002AFA  0008      
00002AFC  660E      4870          bne.s     SetBreakPoint_6
                    4871   ; printf("\r\nNo FREE Break Points.....") ;
00002AFE  4879 0000 4872          pea       @m68kde~1_112.L
00002B02  5A0C      
00002B04  4E92      4873          jsr       (A2)
00002B06  584F      4874          addq.w    #4,A7
                    4875   ; return ;
00002B08  6000 00D6 4876          bra       SetBreakPoint_15
                    4877   SetBreakPoint_6:
                    4878   ; }
                    4879   ; printf("\r\nBreak Point Address: ") ;
00002B0C  4879 0000 4880          pea       @m68kde~1_113.L
00002B10  5A28      
00002B12  4E92      4881          jsr       (A2)
00002B14  584F      4882          addq.w    #4,A7
                    4883   ; BPAddress = Get8HexDigits(0) ;
00002B16  42A7      4884          clr.l     -(A7)
00002B18  4EB8 0CA4 4885          jsr       _Get8HexDigits
00002B1C  584F      4886          addq.w    #4,A7
00002B1E  2600      4887          move.l    D0,D3
                    4888   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00002B20  2803      4889          move.l    D3,D4
                    4890   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00002B22  2003      4891          move.l    D3,D0
00002B24  C0BC 0000 4892          and.l     #1,D0
00002B28  0001      
00002B2A  0C80 0000 4893          cmp.l     #1,D0
00002B2E  0001      
00002B30  660E      4894          bne.s     SetBreakPoint_9
                    4895   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002B32  4879 0000 4896          pea       @m68kde~1_114.L
00002B36  5A40      
00002B38  4E92      4897          jsr       (A2)
00002B3A  584F      4898          addq.w    #4,A7
                    4899   ; return ;
00002B3C  6000 00A2 4900          bra       SetBreakPoint_15
                    4901   SetBreakPoint_9:
                    4902   ; }
                    4903   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002B40  0C83 0000 4904          cmp.l     #32768,D3
00002B44  8000      
00002B46  640E      4905          bhs.s     SetBreakPoint_11
                    4906   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002B48  4879 0000 4907          pea       @m68kde~1_115.L
00002B4C  5A76      
00002B4E  4E92      4908          jsr       (A2)
00002B50  584F      4909          addq.w    #4,A7
                    4910   ; return ;
00002B52  6000 008C 4911          bra       SetBreakPoint_15
                    4912   SetBreakPoint_11:
                    4913   ; }
                    4914   ; // search for first free bp or existing same BP
                    4915   ; for(i = 0; i < 8; i++)  {
00002B56  4282      4916          clr.l     D2
                    4917   SetBreakPoint_13:
00002B58  0C82 0000 4918          cmp.l     #8,D2
00002B5C  0008      
00002B5E  6C00 0080 4919          bge       SetBreakPoint_15
                    4920   ; if(BreakPointAddress[i] == BPAddress)   {
00002B62  2002      4921          move.l    D2,D0
00002B64  E588      4922          lsl.l     #2,D0
00002B66  41F9 0B00 4923          lea       _BreakPointAddress.L,A0
00002B6A  012E      
00002B6C  B6B0 0800 4924          cmp.l     0(A0,D0.L),D3
00002B70  6610      4925          bne.s     SetBreakPoint_16
                    4926   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002B72  2F03      4927          move.l    D3,-(A7)
00002B74  4879 0000 4928          pea       @m68kde~1_116.L
00002B78  5ABE      
00002B7A  4E92      4929          jsr       (A2)
00002B7C  504F      4930          addq.w    #8,A7
                    4931   ; return ;
00002B7E  6000 0060 4932          bra       SetBreakPoint_15
                    4933   SetBreakPoint_16:
                    4934   ; }
                    4935   ; if(BreakPointSetOrCleared[i] == 0) {
00002B82  2002      4936          move.l    D2,D0
00002B84  E588      4937          lsl.l     #2,D0
00002B86  2033 0800 4938          move.l    0(A3,D0.L),D0
00002B8A  6600 004E 4939          bne       SetBreakPoint_18
                    4940   ; // set BP here
                    4941   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002B8E  2002      4942          move.l    D2,D0
00002B90  E588      4943          lsl.l     #2,D0
00002B92  27BC 0000 4944          move.l    #1,0(A3,D0.L)
00002B96  0001 0800 
                    4945   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002B9A  2044      4946          move.l    D4,A0
00002B9C  2002      4947          move.l    D2,D0
00002B9E  E388      4948          lsl.l     #1,D0
00002BA0  43F9 0B00 4949          lea       _BreakPointInstruction.L,A1
00002BA4  014E      
00002BA6  3390 0800 4950          move.w    (A0),0(A1,D0.L)
                    4951   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00002BAA  2F04      4952          move.l    D4,-(A7)
00002BAC  4879 0000 4953          pea       @m68kde~1_117.L
00002BB0  5AF6      
00002BB2  4E92      4954          jsr       (A2)
00002BB4  504F      4955          addq.w    #8,A7
                    4956   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00002BB6  2044      4957          move.l    D4,A0
00002BB8  30BC 4E4E 4958          move.w    #20046,(A0)
                    4959   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002BBC  2002      4960          move.l    D2,D0
00002BBE  E588      4961          lsl.l     #2,D0
00002BC0  41F9 0B00 4962          lea       _BreakPointAddress.L,A0
00002BC4  012E      
00002BC6  2183 0800 4963          move.l    D3,0(A0,D0.L)
                    4964   ; printf("\r\n") ;
00002BCA  4879 0000 4965          pea       @m68kde~1_1.L
00002BCE  4E46      
00002BD0  4E92      4966          jsr       (A2)
00002BD2  584F      4967          addq.w    #4,A7
                    4968   ; BreakPointDisplay() ;       // display the break points
00002BD4  4EB8 2698 4969          jsr       _BreakPointDisplay
                    4970   ; return ;
00002BD8  6006      4971          bra.s     SetBreakPoint_15
                    4972   SetBreakPoint_18:
00002BDA  5282      4973          addq.l    #1,D2
00002BDC  6000 FF7A 4974          bra       SetBreakPoint_13
                    4975   SetBreakPoint_15:
00002BE0  4CDF 0C1C 4976          movem.l   (A7)+,D2/D3/D4/A2/A3
00002BE4  4E5E      4977          unlk      A6
00002BE6  4E75      4978          rts
                    4979   ; }
                    4980   ; }
                    4981   ; }
                    4982   ; void SetWatchPoint(void)
                    4983   ; {
                    4984   _SetWatchPoint:
00002BE8  4E56 FFF8 4985          link      A6,#-8
00002BEC  48E7 3030 4986          movem.l   D2/D3/A2/A3,-(A7)
00002BF0  45F9 0000 4987          lea       _printf.L,A2
00002BF4  4470      
00002BF6  47F9 0B00 4988          lea       _WatchPointSetOrCleared.L,A3
00002BFA  01A2      
                    4989   ; int i ;
                    4990   ; int WPNumber;
                    4991   ; int WPAddress;
                    4992   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    4993   ; // see if any free break points
                    4994   ; for(i = 0; i < 8; i ++) {
00002BFC  4282      4995          clr.l     D2
                    4996   SetWatchPoint_1:
00002BFE  0C82 0000 4997          cmp.l     #8,D2
00002C02  0008      
00002C04  6C10      4998          bge.s     SetWatchPoint_3
                    4999   ; if( WatchPointSetOrCleared[i] == 0)
00002C06  2002      5000          move.l    D2,D0
00002C08  E588      5001          lsl.l     #2,D0
00002C0A  2033 0800 5002          move.l    0(A3,D0.L),D0
00002C0E  6602      5003          bne.s     SetWatchPoint_4
                    5004   ; break ;         // if spare WP found allow user to set it
00002C10  6004      5005          bra.s     SetWatchPoint_3
                    5006   SetWatchPoint_4:
00002C12  5282      5007          addq.l    #1,D2
00002C14  60E8      5008          bra       SetWatchPoint_1
                    5009   SetWatchPoint_3:
                    5010   ; }
                    5011   ; if(i == 8) {
00002C16  0C82 0000 5012          cmp.l     #8,D2
00002C1A  0008      
00002C1C  660E      5013          bne.s     SetWatchPoint_6
                    5014   ; printf("\r\nNo FREE Watch Points.....") ;
00002C1E  4879 0000 5015          pea       @m68kde~1_118.L
00002C22  5B1C      
00002C24  4E92      5016          jsr       (A2)
00002C26  584F      5017          addq.w    #4,A7
                    5018   ; return ;
00002C28  6000 008C 5019          bra       SetWatchPoint_11
                    5020   SetWatchPoint_6:
                    5021   ; }
                    5022   ; printf("\r\nWatch Point Address: ") ;
00002C2C  4879 0000 5023          pea       @m68kde~1_119.L
00002C30  5B38      
00002C32  4E92      5024          jsr       (A2)
00002C34  584F      5025          addq.w    #4,A7
                    5026   ; WPAddress = Get8HexDigits(0) ;
00002C36  42A7      5027          clr.l     -(A7)
00002C38  4EB8 0CA4 5028          jsr       _Get8HexDigits
00002C3C  584F      5029          addq.w    #4,A7
00002C3E  2600      5030          move.l    D0,D3
                    5031   ; // search for first free wp or existing same wp
                    5032   ; for(i = 0; i < 8; i++)  {
00002C40  4282      5033          clr.l     D2
                    5034   SetWatchPoint_9:
00002C42  0C82 0000 5035          cmp.l     #8,D2
00002C46  0008      
00002C48  6C00 006C 5036          bge       SetWatchPoint_11
                    5037   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002C4C  2002      5038          move.l    D2,D0
00002C4E  E588      5039          lsl.l     #2,D0
00002C50  41F9 0B00 5040          lea       _WatchPointAddress.L,A0
00002C54  0182      
00002C56  B6B0 0800 5041          cmp.l     0(A0,D0.L),D3
00002C5A  6614      5042          bne.s     SetWatchPoint_12
00002C5C  4A83      5043          tst.l     D3
00002C5E  6710      5044          beq.s     SetWatchPoint_12
                    5045   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002C60  2F03      5046          move.l    D3,-(A7)
00002C62  4879 0000 5047          pea       @m68kde~1_120.L
00002C66  5B50      
00002C68  4E92      5048          jsr       (A2)
00002C6A  504F      5049          addq.w    #8,A7
                    5050   ; return ;
00002C6C  6000 0048 5051          bra       SetWatchPoint_11
                    5052   SetWatchPoint_12:
                    5053   ; }
                    5054   ; if(WatchPointSetOrCleared[i] == 0) {
00002C70  2002      5055          move.l    D2,D0
00002C72  E588      5056          lsl.l     #2,D0
00002C74  2033 0800 5057          move.l    0(A3,D0.L),D0
00002C78  6600 0038 5058          bne       SetWatchPoint_14
                    5059   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002C7C  2002      5060          move.l    D2,D0
00002C7E  E588      5061          lsl.l     #2,D0
00002C80  27BC 0000 5062          move.l    #1,0(A3,D0.L)
00002C84  0001 0800 
                    5063   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002C88  2F03      5064          move.l    D3,-(A7)
00002C8A  4879 0000 5065          pea       @m68kde~1_121.L
00002C8E  5B86      
00002C90  4E92      5066          jsr       (A2)
00002C92  504F      5067          addq.w    #8,A7
                    5068   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002C94  2002      5069          move.l    D2,D0
00002C96  E588      5070          lsl.l     #2,D0
00002C98  41F9 0B00 5071          lea       _WatchPointAddress.L,A0
00002C9C  0182      
00002C9E  2183 0800 5072          move.l    D3,0(A0,D0.L)
                    5073   ; printf("\r\n") ;
00002CA2  4879 0000 5074          pea       @m68kde~1_1.L
00002CA6  4E46      
00002CA8  4E92      5075          jsr       (A2)
00002CAA  584F      5076          addq.w    #4,A7
                    5077   ; WatchPointDisplay() ;       // display the break points
00002CAC  4EB8 276C 5078          jsr       _WatchPointDisplay
                    5079   ; return ;
00002CB0  6004      5080          bra.s     SetWatchPoint_11
                    5081   SetWatchPoint_14:
00002CB2  5282      5082          addq.l    #1,D2
00002CB4  608C      5083          bra       SetWatchPoint_9
                    5084   SetWatchPoint_11:
00002CB6  4CDF 0C0C 5085          movem.l   (A7)+,D2/D3/A2/A3
00002CBA  4E5E      5086          unlk      A6
00002CBC  4E75      5087          rts
                    5088   ; }
                    5089   ; }
                    5090   ; }
                    5091   ; void HandleBreakPoint(void)
                    5092   ; {
                    5093   _HandleBreakPoint:
00002CBE  4E56 FFFC 5094          link      A6,#-4
00002CC2  48E7 0038 5095          movem.l   A2/A3/A4,-(A7)
00002CC6  45F9 0B00 5096          lea       _i.L,A2
00002CCA  00C4      
00002CCC  47F9 0000 5097          lea       _printf.L,A3
00002CD0  4470      
00002CD2  49F9 0B00 5098          lea       _PC.L,A4
00002CD6  0120      
                    5099   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    5100   ; // now we have to put the break point back to run the instruction
                    5101   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    5102   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00002CD8  5594      5103          subq.l    #2,(A4)
                    5104   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00002CDA  4879 0000 5105          pea       @m68kde~1_122.L
00002CDE  5BAC      
00002CE0  4E93      5106          jsr       (A3)
00002CE2  584F      5107          addq.w    #4,A7
                    5108   ; printf("\r\nSingle Step : [ON]") ;
00002CE4  4879 0000 5109          pea       @m68kde~1_123.L
00002CE8  5BC0      
00002CEA  4E93      5110          jsr       (A3)
00002CEC  584F      5111          addq.w    #4,A7
                    5112   ; printf("\r\nBreakPoints : [Enabled]") ;
00002CEE  4879 0000 5113          pea       @m68kde~1_124.L
00002CF2  5BD6      
00002CF4  4E93      5114          jsr       (A3)
00002CF6  584F      5115          addq.w    #4,A7
                    5116   ; // now clear the break point (put original instruction back)
                    5117   ; ProgramBreakPointAddress = PC ;
00002CF8  2D54 FFFC 5118          move.l    (A4),-4(A6)
                    5119   ; for(i = 0; i < 8; i ++) {
00002CFC  4292      5120          clr.l     (A2)
                    5121   HandleBreakPoint_1:
00002CFE  2012      5122          move.l    (A2),D0
00002D00  0C80 0000 5123          cmp.l     #8,D0
00002D04  0008      
00002D06  6400 0056 5124          bhs       HandleBreakPoint_3
                    5125   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00002D0A  2012      5126          move.l    (A2),D0
00002D0C  E588      5127          lsl.l     #2,D0
00002D0E  41F9 0B00 5128          lea       _BreakPointAddress.L,A0
00002D12  012E      
00002D14  2230 0800 5129          move.l    0(A0,D0.L),D1
00002D18  B294      5130          cmp.l     (A4),D1
00002D1A  6600 003E 5131          bne       HandleBreakPoint_4
                    5132   ; BreakPointAddress[i] = 0 ;
00002D1E  2012      5133          move.l    (A2),D0
00002D20  E588      5134          lsl.l     #2,D0
00002D22  41F9 0B00 5135          lea       _BreakPointAddress.L,A0
00002D26  012E      
00002D28  42B0 0800 5136          clr.l     0(A0,D0.L)
                    5137   ; BreakPointSetOrCleared[i] = 0 ;
00002D2C  2012      5138          move.l    (A2),D0
00002D2E  E588      5139          lsl.l     #2,D0
00002D30  41F9 0B00 5140          lea       _BreakPointSetOrCleared.L,A0
00002D34  015E      
00002D36  42B0 0800 5141          clr.l     0(A0,D0.L)
                    5142   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002D3A  2012      5143          move.l    (A2),D0
00002D3C  E388      5144          lsl.l     #1,D0
00002D3E  41F9 0B00 5145          lea       _BreakPointInstruction.L,A0
00002D42  014E      
00002D44  226E FFFC 5146          move.l    -4(A6),A1
00002D48  32B0 0800 5147          move.w    0(A0,D0.L),(A1)
                    5148   ; BreakPointInstruction[i] = 0 ;
00002D4C  2012      5149          move.l    (A2),D0
00002D4E  E388      5150          lsl.l     #1,D0
00002D50  41F9 0B00 5151          lea       _BreakPointInstruction.L,A0
00002D54  014E      
00002D56  4270 0800 5152          clr.w     0(A0,D0.L)
                    5153   HandleBreakPoint_4:
00002D5A  5292      5154          addq.l    #1,(A2)
00002D5C  60A0      5155          bra       HandleBreakPoint_1
                    5156   HandleBreakPoint_3:
                    5157   ; }
                    5158   ; }
                    5159   ; DumpRegisters() ;
00002D5E  4EB8 1EEA 5160          jsr       _DumpRegisters
                    5161   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002D62  4879 0000 5162          pea       @m68kde~1_86.L
00002D66  5752      
00002D68  4E93      5163          jsr       (A3)
00002D6A  584F      5164          addq.w    #4,A7
                    5165   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002D6C  4879 0000 5166          pea       @m68kde~1_125.L
00002D70  5BF0      
00002D72  4E93      5167          jsr       (A3)
00002D74  584F      5168          addq.w    #4,A7
                    5169   ; menu() ;
00002D76  4EB9 0000 5170          jsr       _menu
00002D7A  2F82      
00002D7C  4CDF 1C00 5171          movem.l   (A7)+,A2/A3/A4
00002D80  4E5E      5172          unlk      A6
00002D82  4E75      5173          rts
                    5174   ; }
                    5175   ; void UnknownCommand()
                    5176   ; {
                    5177   _UnknownCommand:
                    5178   ; printf("\r\nUnknown Command.....\r\n") ;
00002D84  4879 0000 5179          pea       @m68kde~1_126.L
00002D88  5C18      
00002D8A  4EB9 0000 5180          jsr       _printf
00002D8E  4470      
00002D90  584F      5181          addq.w    #4,A7
                    5182   ; Help() ;
00002D92  4EB9 0000 5183          jsr       _Help
00002D96  2EA8      
00002D98  4E75      5184          rts
                    5185   ; }
                    5186   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    5187   ; void CallDebugMonitor(void)
                    5188   ; {
                    5189   _CallDebugMonitor:
                    5190   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002D9A  4879 0000 5191          pea       @m68kde~1_127.L
00002D9E  5C32      
00002DA0  4EB9 0000 5192          jsr       _printf
00002DA4  4470      
00002DA6  584F      5193          addq.w    #4,A7
                    5194   ; menu();
00002DA8  4EB9 0000 5195          jsr       _menu
00002DAC  2F82      
00002DAE  4E75      5196          rts
                    5197   ; }
                    5198   ; void Breakpoint(void)
                    5199   ; {
                    5200   _Breakpoint:
00002DB0  2F02      5201          move.l    D2,-(A7)
                    5202   ; char c;
                    5203   ; c = toupper(_getch());
00002DB2  2F00      5204          move.l    D0,-(A7)
00002DB4  4EB8 0B68 5205          jsr       __getch
00002DB8  2200      5206          move.l    D0,D1
00002DBA  201F      5207          move.l    (A7)+,D0
00002DBC  2F01      5208          move.l    D1,-(A7)
00002DBE  4EB9 0000 5209          jsr       _toupper
00002DC2  3BAE      
00002DC4  584F      5210          addq.w    #4,A7
00002DC6  1400      5211          move.b    D0,D2
                    5212   ; if( c == (char)('D'))                                      // BreakPoint Display
00002DC8  0C02 0044 5213          cmp.b     #68,D2
00002DCC  6608      5214          bne.s     Breakpoint_1
                    5215   ; BreakPointDisplay() ;
00002DCE  4EB8 2698 5216          jsr       _BreakPointDisplay
00002DD2  6000 0054 5217          bra       Breakpoint_10
                    5218   Breakpoint_1:
                    5219   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00002DD6  0C02 004B 5220          cmp.b     #75,D2
00002DDA  6630      5221          bne.s     Breakpoint_3
                    5222   ; printf("\r\nKill All Break Points...(y/n)?") ;
00002DDC  4879 0000 5223          pea       @m68kde~1_128.L
00002DE0  5C52      
00002DE2  4EB9 0000 5224          jsr       _printf
00002DE6  4470      
00002DE8  584F      5225          addq.w    #4,A7
                    5226   ; c = toupper(_getch());
00002DEA  2F00      5227          move.l    D0,-(A7)
00002DEC  4EB8 0B68 5228          jsr       __getch
00002DF0  2200      5229          move.l    D0,D1
00002DF2  201F      5230          move.l    (A7)+,D0
00002DF4  2F01      5231          move.l    D1,-(A7)
00002DF6  4EB9 0000 5232          jsr       _toupper
00002DFA  3BAE      
00002DFC  584F      5233          addq.w    #4,A7
00002DFE  1400      5234          move.b    D0,D2
                    5235   ; if(c == (char)('Y'))
00002E00  0C02 0059 5236          cmp.b     #89,D2
00002E04  6604      5237          bne.s     Breakpoint_5
                    5238   ; KillAllBreakPoints() ;
00002E06  4EB8 2A30 5239          jsr       _KillAllBreakPoints
                    5240   Breakpoint_5:
00002E0A  601C      5241          bra.s     Breakpoint_10
                    5242   Breakpoint_3:
                    5243   ; }
                    5244   ; else if(c == (char)('S')) {
00002E0C  0C02 0053 5245          cmp.b     #83,D2
00002E10  6606      5246          bne.s     Breakpoint_7
                    5247   ; SetBreakPoint() ;
00002E12  4EB8 2AC8 5248          jsr       _SetBreakPoint
00002E16  6010      5249          bra.s     Breakpoint_10
                    5250   Breakpoint_7:
                    5251   ; }
                    5252   ; else if(c == (char)('C')) {
00002E18  0C02 0043 5253          cmp.b     #67,D2
00002E1C  6606      5254          bne.s     Breakpoint_9
                    5255   ; BreakPointClear() ;
00002E1E  4EB8 2818 5256          jsr       _BreakPointClear
00002E22  6004      5257          bra.s     Breakpoint_10
                    5258   Breakpoint_9:
                    5259   ; }
                    5260   ; else
                    5261   ; UnknownCommand() ;
00002E24  4EB8 2D84 5262          jsr       _UnknownCommand
                    5263   Breakpoint_10:
00002E28  241F      5264          move.l    (A7)+,D2
00002E2A  4E75      5265          rts
                    5266   ; }
                    5267   ; void Watchpoint(void)
                    5268   ; {
                    5269   _Watchpoint:
00002E2C  2F02      5270          move.l    D2,-(A7)
                    5271   ; char c;
                    5272   ; c = toupper(_getch());
00002E2E  2F00      5273          move.l    D0,-(A7)
00002E30  4EB8 0B68 5274          jsr       __getch
00002E34  2200      5275          move.l    D0,D1
00002E36  201F      5276          move.l    (A7)+,D0
00002E38  2F01      5277          move.l    D1,-(A7)
00002E3A  4EB9 0000 5278          jsr       _toupper
00002E3E  3BAE      
00002E40  584F      5279          addq.w    #4,A7
00002E42  1400      5280          move.b    D0,D2
                    5281   ; if( c == (char)('D'))                                      // WatchPoint Display
00002E44  0C02 0044 5282          cmp.b     #68,D2
00002E48  6608      5283          bne.s     Watchpoint_1
                    5284   ; WatchPointDisplay() ;
00002E4A  4EB8 276C 5285          jsr       _WatchPointDisplay
00002E4E  6000 0054 5286          bra       Watchpoint_10
                    5287   Watchpoint_1:
                    5288   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002E52  0C02 004B 5289          cmp.b     #75,D2
00002E56  6630      5290          bne.s     Watchpoint_3
                    5291   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002E58  4879 0000 5292          pea       @m68kde~1_129.L
00002E5C  5C74      
00002E5E  4EB9 0000 5293          jsr       _printf
00002E62  4470      
00002E64  584F      5294          addq.w    #4,A7
                    5295   ; c = toupper(_getch());
00002E66  2F00      5296          move.l    D0,-(A7)
00002E68  4EB8 0B68 5297          jsr       __getch
00002E6C  2200      5298          move.l    D0,D1
00002E6E  201F      5299          move.l    (A7)+,D0
00002E70  2F01      5300          move.l    D1,-(A7)
00002E72  4EB9 0000 5301          jsr       _toupper
00002E76  3BAE      
00002E78  584F      5302          addq.w    #4,A7
00002E7A  1400      5303          move.b    D0,D2
                    5304   ; if(c == (char)('Y'))
00002E7C  0C02 0059 5305          cmp.b     #89,D2
00002E80  6604      5306          bne.s     Watchpoint_5
                    5307   ; KillAllWatchPoints() ;
00002E82  4EB8 2A98 5308          jsr       _KillAllWatchPoints
                    5309   Watchpoint_5:
00002E86  601C      5310          bra.s     Watchpoint_10
                    5311   Watchpoint_3:
                    5312   ; }
                    5313   ; else if(c == (char)('S')) {
00002E88  0C02 0053 5314          cmp.b     #83,D2
00002E8C  6606      5315          bne.s     Watchpoint_7
                    5316   ; SetWatchPoint() ;
00002E8E  4EB8 2BE8 5317          jsr       _SetWatchPoint
00002E92  6010      5318          bra.s     Watchpoint_10
                    5319   Watchpoint_7:
                    5320   ; }
                    5321   ; else if(c == (char)('C')) {
00002E94  0C02 0043 5322          cmp.b     #67,D2
00002E98  6606      5323          bne.s     Watchpoint_9
                    5324   ; WatchPointClear() ;
00002E9A  4EB8 28F2 5325          jsr       _WatchPointClear
00002E9E  6004      5326          bra.s     Watchpoint_10
                    5327   Watchpoint_9:
                    5328   ; }
                    5329   ; else
                    5330   ; UnknownCommand() ;
00002EA0  4EB8 2D84 5331          jsr       _UnknownCommand
                    5332   Watchpoint_10:
00002EA4  241F      5333          move.l    (A7)+,D2
00002EA6  4E75      5334          rts
                    5335   ; }
                    5336   ; void Help(void)
                    5337   ; {
                    5338   _Help:
00002EA8  48E7 2020 5339          movem.l   D2/A2,-(A7)
00002EAC  45F9 0000 5340          lea       _printf.L,A2
00002EB0  4470      
                    5341   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002EB2  41F9 0000 5342          lea       @m68kde~1_130.L,A0
00002EB6  5C96      
00002EB8  2408      5343          move.l    A0,D2
                    5344   ; printf(banner) ;
00002EBA  2F02      5345          move.l    D2,-(A7)
00002EBC  4E92      5346          jsr       (A2)
00002EBE  584F      5347          addq.w    #4,A7
                    5348   ; printf("\r\n  Debugger Command Summary") ;
00002EC0  4879 0000 5349          pea       @m68kde~1_131.L
00002EC4  5CDA      
00002EC6  4E92      5350          jsr       (A2)
00002EC8  584F      5351          addq.w    #4,A7
                    5352   ; printf(banner) ;
00002ECA  2F02      5353          move.l    D2,-(A7)
00002ECC  4E92      5354          jsr       (A2)
00002ECE  584F      5355          addq.w    #4,A7
                    5356   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
00002ED0  4879 0000 5357          pea       @m68kde~1_132.L
00002ED4  5CF8      
00002ED6  4E92      5358          jsr       (A2)
00002ED8  584F      5359          addq.w    #4,A7
                    5360   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
00002EDA  4879 0000 5361          pea       @m68kde~1_133.L
00002EDE  5D3C      
00002EE0  4E92      5362          jsr       (A2)
00002EE2  584F      5363          addq.w    #4,A7
                    5364   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002EE4  4879 0000 5365          pea       @m68kde~1_134.L
00002EE8  5D74      
00002EEA  4E92      5366          jsr       (A2)
00002EEC  584F      5367          addq.w    #4,A7
                    5368   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
00002EEE  4879 0000 5369          pea       @m68kde~1_135.L
00002EF2  5DAE      
00002EF4  4E92      5370          jsr       (A2)
00002EF6  584F      5371          addq.w    #4,A7
                    5372   ; printf("\r\n  E            - Enter String into Memory") ;
00002EF8  4879 0000 5373          pea       @m68kde~1_136.L
00002EFC  5DE0      
00002EFE  4E92      5374          jsr       (A2)
00002F00  584F      5375          addq.w    #4,A7
                    5376   ; printf("\r\n  F            - Fill Memory with Data") ;
00002F02  4879 0000 5377          pea       @m68kde~1_137.L
00002F06  5E0C      
00002F08  4E92      5378          jsr       (A2)
00002F0A  584F      5379          addq.w    #4,A7
                    5380   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002F0C  2F39 0B00 5381          move.l    _PC.L,-(A7)
00002F10  0120      
00002F12  4879 0000 5382          pea       @m68kde~1_138.L
00002F16  5E36      
00002F18  4E92      5383          jsr       (A2)
00002F1A  504F      5384          addq.w    #8,A7
                    5385   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002F1C  4879 0000 5386          pea       @m68kde~1_139.L
00002F20  5E70      
00002F22  4E92      5387          jsr       (A2)
00002F24  584F      5388          addq.w    #4,A7
                    5389   ; printf("\r\n  M            - Memory Examine and Change");
00002F26  4879 0000 5390          pea       @m68kde~1_140.L
00002F2A  5EA8      
00002F2C  4E92      5391          jsr       (A2)
00002F2E  584F      5392          addq.w    #4,A7
                    5393   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002F30  4879 0000 5394          pea       @m68kde~1_141.L
00002F34  5ED6      
00002F36  4E92      5395          jsr       (A2)
00002F38  584F      5396          addq.w    #4,A7
                    5397   ; printf("\r\n  R            - Display 68000 Registers") ;
00002F3A  4879 0000 5398          pea       @m68kde~1_142.L
00002F3E  5F10      
00002F40  4E92      5399          jsr       (A2)
00002F42  584F      5400          addq.w    #4,A7
                    5401   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002F44  4879 0000 5402          pea       @m68kde~1_143.L
00002F48  5F3C      
00002F4A  4E92      5403          jsr       (A2)
00002F4C  584F      5404          addq.w    #4,A7
                    5405   ; printf("\r\n  TM           - Test Memory") ;
00002F4E  4879 0000 5406          pea       @m68kde~1_144.L
00002F52  5F6E      
00002F54  4E92      5407          jsr       (A2)
00002F56  584F      5408          addq.w    #4,A7
                    5409   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002F58  4879 0000 5410          pea       @m68kde~1_145.L
00002F5C  5F8E      
00002F5E  4E92      5411          jsr       (A2)
00002F60  584F      5412          addq.w    #4,A7
                    5413   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002F62  4879 0000 5414          pea       @m68kde~1_146.L
00002F66  5FB6      
00002F68  4E92      5415          jsr       (A2)
00002F6A  584F      5416          addq.w    #4,A7
                    5417   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002F6C  4879 0000 5418          pea       @m68kde~1_147.L
00002F70  5FEC      
00002F72  4E92      5419          jsr       (A2)
00002F74  584F      5420          addq.w    #4,A7
                    5421   ; printf(banner) ;
00002F76  2F02      5422          move.l    D2,-(A7)
00002F78  4E92      5423          jsr       (A2)
00002F7A  584F      5424          addq.w    #4,A7
00002F7C  4CDF 0404 5425          movem.l   (A7)+,D2/A2
00002F80  4E75      5426          rts
                    5427   ; }
                    5428   ; void menu(void)
                    5429   ; {
                    5430   _menu:
00002F82  48E7 303C 5431          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002F86  45F9 0000 5432          lea       _printf.L,A2
00002F8A  4470      
00002F8C  47F9 0B00 5433          lea       _Trace.L,A3
00002F90  00D8      
00002F92  49F9 0B00 5434          lea       _x.L,A4
00002F96  00C8      
00002F98  4BF9 0B00 5435          lea       _SR.L,A5
00002F9C  012C      
                    5436   ; char c,c1 ;
                    5437   ; while(1)    {
                    5438   menu_1:
                    5439   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002F9E  4EB8 0BA6 5440          jsr       _FlushKeyboard
                    5441   ; printf("\r\n#") ;
00002FA2  4879 0000 5442          pea       @m68kde~1_148.L
00002FA6  6024      
00002FA8  4E92      5443          jsr       (A2)
00002FAA  584F      5444          addq.w    #4,A7
                    5445   ; c = toupper(_getch());
00002FAC  2F00      5446          move.l    D0,-(A7)
00002FAE  4EB8 0B68 5447          jsr       __getch
00002FB2  2200      5448          move.l    D0,D1
00002FB4  201F      5449          move.l    (A7)+,D0
00002FB6  2F01      5450          move.l    D1,-(A7)
00002FB8  4EB9 0000 5451          jsr       _toupper
00002FBC  3BAE      
00002FBE  584F      5452          addq.w    #4,A7
00002FC0  1400      5453          move.b    D0,D2
                    5454   ; if( c == (char)('L'))                  // load s record file
00002FC2  0C02 004C 5455          cmp.b     #76,D2
00002FC6  6608      5456          bne.s     menu_4
                    5457   ; Load_SRecordFile() ;
00002FC8  4EB8 0E36 5458          jsr       _Load_SRecordFile
00002FCC  6000 023A 5459          bra       menu_50
                    5460   menu_4:
                    5461   ; else if( c == (char)('D'))             // dump memory
00002FD0  0C02 0044 5462          cmp.b     #68,D2
00002FD4  6608      5463          bne.s     menu_6
                    5464   ; DumpMemory() ;
00002FD6  4EB8 0CCC 5465          jsr       _DumpMemory
00002FDA  6000 022C 5466          bra       menu_50
                    5467   menu_6:
                    5468   ; else if( c == (char)('E'))             // Enter String into memory
00002FDE  0C02 0045 5469          cmp.b     #69,D2
00002FE2  660A      5470          bne.s     menu_8
                    5471   ; EnterString() ;
00002FE4  4EB9 0000 5472          jsr       _EnterString
00002FE8  3350      
00002FEA  6000 021C 5473          bra       menu_50
                    5474   menu_8:
                    5475   ; else if( c == (char)('F'))             // fill memory
00002FEE  0C02 0046 5476          cmp.b     #70,D2
00002FF2  6608      5477          bne.s     menu_10
                    5478   ; FillMemory() ;
00002FF4  4EB8 0DBC 5479          jsr       _FillMemory
00002FF8  6000 020E 5480          bra       menu_50
                    5481   menu_10:
                    5482   ; else if( c == (char)('G'))  {           // go user program
00002FFC  0C02 0047 5483          cmp.b     #71,D2
00003000  6626      5484          bne.s     menu_12
                    5485   ; printf("\r\nProgram Running.....") ;
00003002  4879 0000 5486          pea       @m68kde~1_149.L
00003006  6028      
00003008  4E92      5487          jsr       (A2)
0000300A  584F      5488          addq.w    #4,A7
                    5489   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000300C  4879 0000 5490          pea       @m68kde~1_150.L
00003010  6040      
00003012  4E92      5491          jsr       (A2)
00003014  584F      5492          addq.w    #4,A7
                    5493   ; GoFlag = 1 ;
00003016  23FC 0000 5494          move.l    #1,_GoFlag.L
0000301A  0001 0B00 
0000301E  00DC      
                    5495   ; go() ;
00003020  4EB8 08B8 5496          jsr       _go
00003024  6000 01E2 5497          bra       menu_50
                    5498   menu_12:
                    5499   ; }
                    5500   ; else if( c == (char)('M'))           // memory examine and modify
00003028  0C02 004D 5501          cmp.b     #77,D2
0000302C  6608      5502          bne.s     menu_14
                    5503   ; MemoryChange() ;
0000302E  4EB8 0FC4 5504          jsr       _MemoryChange
00003032  6000 01D4 5505          bra       menu_50
                    5506   menu_14:
                    5507   ; else if( c == (char)('I'))           //I2Ctest()
00003036  0C02 0049 5508          cmp.b     #73,D2
0000303A  6608      5509          bne.s     menu_16
                    5510   ; I2CTest(); 
0000303C  4EB8 1A56 5511          jsr       _I2CTest
00003040  6000 01C6 5512          bra       menu_50
                    5513   menu_16:
                    5514   ; else if( c == (char)('W'))           // DAC test
00003044  0C02 0057 5515          cmp.b     #87,D2
00003048  6608      5516          bne.s     menu_18
                    5517   ; DACWave();
0000304A  4EB8 1E3A 5518          jsr       _DACWave
0000304E  6000 01B8 5519          bra       menu_50
                    5520   menu_18:
                    5521   ; else if( c == (char)('P'))            // Program Flash Chip
00003052  0C02 0050 5522          cmp.b     #80,D2
00003056  6608      5523          bne.s     menu_20
                    5524   ; ProgramFlashChip() ;
00003058  4EB8 1368 5525          jsr       _ProgramFlashChip
0000305C  6000 01AA 5526          bra       menu_50
                    5527   menu_20:
                    5528   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00003060  0C02 0043 5529          cmp.b     #67,D2
00003064  6608      5530          bne.s     menu_22
                    5531   ; LoadFromFlashChip();
00003066  4EB8 138A 5532          jsr       _LoadFromFlashChip
0000306A  6000 019C 5533          bra       menu_50
                    5534   menu_22:
                    5535   ; else if( c == (char)('R'))             // dump registers
0000306E  0C02 0052 5536          cmp.b     #82,D2
00003072  6608      5537          bne.s     menu_24
                    5538   ; DumpRegisters() ;
00003074  4EB8 1EEA 5539          jsr       _DumpRegisters
00003078  6000 018E 5540          bra       menu_50
                    5541   menu_24:
                    5542   ; else if( c == (char)('.'))           // change registers
0000307C  0C02 002E 5543          cmp.b     #46,D2
00003080  6608      5544          bne.s     menu_26
                    5545   ; ChangeRegisters() ;
00003082  4EB8 23DC 5546          jsr       _ChangeRegisters
00003086  6000 0180 5547          bra       menu_50
                    5548   menu_26:
                    5549   ; else if( c == (char)('B'))              // breakpoint command
0000308A  0C02 0042 5550          cmp.b     #66,D2
0000308E  6608      5551          bne.s     menu_28
                    5552   ; Breakpoint() ;
00003090  4EB8 2DB0 5553          jsr       _Breakpoint
00003094  6000 0172 5554          bra       menu_50
                    5555   menu_28:
                    5556   ; else if( c == (char)('T'))  {          // Test command
00003098  0C02 0054 5557          cmp.b     #84,D2
0000309C  6600 0046 5558          bne       menu_30
                    5559   ; c1 = toupper(_getch()) ;
000030A0  2F00      5560          move.l    D0,-(A7)
000030A2  4EB8 0B68 5561          jsr       __getch
000030A6  2200      5562          move.l    D0,D1
000030A8  201F      5563          move.l    (A7)+,D0
000030AA  2F01      5564          move.l    D1,-(A7)
000030AC  4EB9 0000 5565          jsr       _toupper
000030B0  3BAE      
000030B2  584F      5566          addq.w    #4,A7
000030B4  1600      5567          move.b    D0,D3
                    5568   ; if(c1 == (char)('M'))                    // memory test
000030B6  0C03 004D 5569          cmp.b     #77,D3
000030BA  6608      5570          bne.s     menu_32
                    5571   ; MemoryTest() ;
000030BC  4EB9 0000 5572          jsr       _MemoryTest
000030C0  33C8      
000030C2  601C      5573          bra.s     menu_37
                    5574   menu_32:
                    5575   ; else if( c1 == (char)('S'))              // Switch Test command
000030C4  0C03 0053 5576          cmp.b     #83,D3
000030C8  6606      5577          bne.s     menu_34
                    5578   ; SwitchTest() ;
000030CA  4EB8 0AA4 5579          jsr       _SwitchTest
000030CE  6010      5580          bra.s     menu_37
                    5581   menu_34:
                    5582   ; else if( c1 == (char)('D'))              // display Test command
000030D0  0C03 0044 5583          cmp.b     #68,D3
000030D4  6606      5584          bne.s     menu_36
                    5585   ; TestLEDS() ;
000030D6  4EB8 0A50 5586          jsr       _TestLEDS
000030DA  6004      5587          bra.s     menu_37
                    5588   menu_36:
                    5589   ; else
                    5590   ; UnknownCommand() ;
000030DC  4EB8 2D84 5591          jsr       _UnknownCommand
                    5592   menu_37:
000030E0  6000 0126 5593          bra       menu_50
                    5594   menu_30:
                    5595   ; }
                    5596   ; else if( c == (char)(' ')) {             // Next instruction command
000030E4  0C02 0020 5597          cmp.b     #32,D2
000030E8  6636      5598          bne.s     menu_38
                    5599   ; DisableBreakPoints() ;
000030EA  4EB8 2994 5600          jsr       _DisableBreakPoints
                    5601   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000030EE  2013      5602          move.l    (A3),D0
000030F0  0C80 0000 5603          cmp.l     #1,D0
000030F4  0001      
000030F6  661A      5604          bne.s     menu_40
000030F8  2039 0B00 5605          move.l    _GoFlag.L,D0
000030FC  00DC      
000030FE  0C80 0000 5606          cmp.l     #1,D0
00003102  0001      
00003104  660C      5607          bne.s     menu_40
                    5608   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00003106  13FC 0001 5609          move.b    #1,4194314
0000310A  0040 000A 
                    5610   ; return ;
0000310E  6000 00FC 5611          bra       menu_42
                    5612   menu_40:
                    5613   ; }
                    5614   ; else
                    5615   ; printf("\r\nError: Press 'G' first to start program") ;
00003112  4879 0000 5616          pea       @m68kde~1_151.L
00003116  606E      
00003118  4E92      5617          jsr       (A2)
0000311A  584F      5618          addq.w    #4,A7
0000311C  6000 00EA 5619          bra       menu_50
                    5620   menu_38:
                    5621   ; }
                    5622   ; else if( c == (char)('S')) {             // single step
00003120  0C02 0053 5623          cmp.b     #83,D2
00003124  6600 008C 5624          bne       menu_43
                    5625   ; if(Trace == 0) {
00003128  2013      5626          move.l    (A3),D0
0000312A  6600 0050 5627          bne       menu_45
                    5628   ; DisableBreakPoints() ;
0000312E  4EB8 2994 5629          jsr       _DisableBreakPoints
                    5630   ; printf("\r\nSingle Step  :[ON]") ;
00003132  4879 0000 5631          pea       @m68kde~1_152.L
00003136  6098      
00003138  4E92      5632          jsr       (A2)
0000313A  584F      5633          addq.w    #4,A7
                    5634   ; printf("\r\nBreak Points :[Disabled]") ;
0000313C  4879 0000 5635          pea       @m68kde~1_85.L
00003140  5736      
00003142  4E92      5636          jsr       (A2)
00003144  584F      5637          addq.w    #4,A7
                    5638   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00003146  0055 8000 5639          or.w      #32768,(A5)
                    5640   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000314A  2F39 0B00 5641          move.l    _PC.L,-(A7)
0000314E  0120      
00003150  4879 0000 5642          pea       @m68kde~1_153.L
00003154  60AE      
00003156  4E92      5643          jsr       (A2)
00003158  504F      5644          addq.w    #8,A7
                    5645   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000315A  4879 0000 5646          pea       @m68kde~1_154.L
0000315E  60E2      
00003160  4E92      5647          jsr       (A2)
00003162  584F      5648          addq.w    #4,A7
                    5649   ; DumpRegisters() ;
00003164  4EB8 1EEA 5650          jsr       _DumpRegisters
                    5651   ; Trace = 1;
00003168  26BC 0000 5652          move.l    #1,(A3)
0000316C  0001      
                    5653   ; TraceException = 1;
0000316E  13FC 0001 5654          move.b    #1,4194314
00003172  0040 000A 
                    5655   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00003176  28B8 0074 5656          move.l    116,(A4)
0000317A  6032      5657          bra.s     menu_46
                    5658   menu_45:
                    5659   ; }
                    5660   ; else {
                    5661   ; Trace = 0 ;
0000317C  4293      5662          clr.l     (A3)
                    5663   ; TraceException = 0 ;
0000317E  4239 0040 5664          clr.b     4194314
00003182  000A      
                    5665   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00003184  28B8 0074 5666          move.l    116,(A4)
                    5667   ; EnableBreakPoints() ;
00003188  4EB8 29E8 5668          jsr       _EnableBreakPoints
                    5669   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000318C  0255 7FFF 5670          and.w     #32767,(A5)
                    5671   ; printf("\r\nSingle Step : [OFF]") ;
00003190  4879 0000 5672          pea       @m68kde~1_155.L
00003194  6106      
00003196  4E92      5673          jsr       (A2)
00003198  584F      5674          addq.w    #4,A7
                    5675   ; printf("\r\nBreak Points :[Enabled]") ;
0000319A  4879 0000 5676          pea       @m68kde~1_156.L
0000319E  611C      
000031A0  4E92      5677          jsr       (A2)
000031A2  584F      5678          addq.w    #4,A7
                    5679   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000031A4  4879 0000 5680          pea       @m68kde~1_157.L
000031A8  6136      
000031AA  4E92      5681          jsr       (A2)
000031AC  584F      5682          addq.w    #4,A7
                    5683   menu_46:
000031AE  6000 0058 5684          bra       menu_50
                    5685   menu_43:
                    5686   ; }
                    5687   ; }
                    5688   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000031B2  0C02 001B 5689          cmp.b     #27,D2
000031B6  6600 0040 5690          bne       menu_47
                    5691   ; Trace = 0;
000031BA  4293      5692          clr.l     (A3)
                    5693   ; TraceException = 0;
000031BC  4239 0040 5694          clr.b     4194314
000031C0  000A      
                    5695   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000031C2  28B8 0074 5696          move.l    116,(A4)
                    5697   ; EnableBreakPoints() ;
000031C6  4EB8 29E8 5698          jsr       _EnableBreakPoints
                    5699   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000031CA  0255 7FFF 5700          and.w     #32767,(A5)
                    5701   ; printf("\r\nSingle Step  :[OFF]") ;
000031CE  4879 0000 5702          pea       @m68kde~1_158.L
000031D2  6160      
000031D4  4E92      5703          jsr       (A2)
000031D6  584F      5704          addq.w    #4,A7
                    5705   ; printf("\r\nBreak Points :[Enabled]");
000031D8  4879 0000 5706          pea       @m68kde~1_156.L
000031DC  611C      
000031DE  4E92      5707          jsr       (A2)
000031E0  584F      5708          addq.w    #4,A7
                    5709   ; printf("\r\nProgram Running.....") ;
000031E2  4879 0000 5710          pea       @m68kde~1_149.L
000031E6  6028      
000031E8  4E92      5711          jsr       (A2)
000031EA  584F      5712          addq.w    #4,A7
                    5713   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000031EC  4879 0000 5714          pea       @m68kde~1_150.L
000031F0  6040      
000031F2  4E92      5715          jsr       (A2)
000031F4  584F      5716          addq.w    #4,A7
                    5717   ; return ;
000031F6  6014      5718          bra.s     menu_42
                    5719   menu_47:
                    5720   ; }
                    5721   ; else if( c == (char)('W'))              // Watchpoint command
000031F8  0C02 0057 5722          cmp.b     #87,D2
000031FC  6606      5723          bne.s     menu_49
                    5724   ; Watchpoint() ;
000031FE  4EB8 2E2C 5725          jsr       _Watchpoint
00003202  6004      5726          bra.s     menu_50
                    5727   menu_49:
                    5728   ; else
                    5729   ; UnknownCommand() ;
00003204  4EB8 2D84 5730          jsr       _UnknownCommand
                    5731   menu_50:
00003208  6000 FD94 5732          bra       menu_1
                    5733   menu_42:
0000320C  4CDF 3C0C 5734          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00003210  4E75      5735          rts
                    5736   ; }
                    5737   ; }
                    5738   ; void PrintErrorMessageandAbort(char *string) {
                    5739   _PrintErrorMessageandAbort:
00003212  4E56 0000 5740          link      A6,#0
                    5741   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00003216  4879 0000 5742          pea       @m68kde~1_159.L
0000321A  6176      
0000321C  4EB9 0000 5743          jsr       _printf
00003220  4470      
00003222  584F      5744          addq.w    #4,A7
                    5745   ; printf("%s\r\n", string) ;
00003224  2F2E 0008 5746          move.l    8(A6),-(A7)
00003228  4879 0000 5747          pea       @m68kde~1_160.L
0000322C  6192      
0000322E  4EB9 0000 5748          jsr       _printf
00003232  4470      
00003234  504F      5749          addq.w    #8,A7
                    5750   ; menu() ;
00003236  4EB8 2F82 5751          jsr       _menu
0000323A  4E5E      5752          unlk      A6
0000323C  4E75      5753          rts
                    5754   ; }
                    5755   ; void IRQMessage(int level) {
                    5756   _IRQMessage:
0000323E  4E56 0000 5757          link      A6,#0
                    5758   ; printf("\r\n\r\nProgram ABORT !!!!!");
00003242  4879 0000 5759          pea       @m68kde~1_161.L
00003246  6198      
00003248  4EB9 0000 5760          jsr       _printf
0000324C  4470      
0000324E  584F      5761          addq.w    #4,A7
                    5762   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00003250  2F2E 0008 5763          move.l    8(A6),-(A7)
00003254  4879 0000 5764          pea       @m68kde~1_162.L
00003258  61B0      
0000325A  4EB9 0000 5765          jsr       _printf
0000325E  4470      
00003260  504F      5766          addq.w    #8,A7
                    5767   ; menu() ;
00003262  4EB8 2F82 5768          jsr       _menu
00003266  4E5E      5769          unlk      A6
00003268  4E75      5770          rts
                    5771   ; }
                    5772   ; void UnhandledIRQ1(void) {
                    5773   _UnhandledIRQ1:
                    5774   ; IRQMessage(1);
0000326A  4878 0001 5775          pea       1
0000326E  4EB8 323E 5776          jsr       _IRQMessage
00003272  584F      5777          addq.w    #4,A7
00003274  4E75      5778          rts
                    5779   ; }
                    5780   ; void UnhandledIRQ2(void) {
                    5781   _UnhandledIRQ2:
                    5782   ; IRQMessage(2);
00003276  4878 0002 5783          pea       2
0000327A  4EB8 323E 5784          jsr       _IRQMessage
0000327E  584F      5785          addq.w    #4,A7
00003280  4E75      5786          rts
                    5787   ; }
                    5788   ; void UnhandledIRQ3(void){
                    5789   _UnhandledIRQ3:
                    5790   ; IRQMessage(3);
00003282  4878 0003 5791          pea       3
00003286  4EB8 323E 5792          jsr       _IRQMessage
0000328A  584F      5793          addq.w    #4,A7
0000328C  4E75      5794          rts
                    5795   ; }
                    5796   ; void UnhandledIRQ4(void) {
                    5797   _UnhandledIRQ4:
                    5798   ; IRQMessage(4);
0000328E  4878 0004 5799          pea       4
00003292  4EB8 323E 5800          jsr       _IRQMessage
00003296  584F      5801          addq.w    #4,A7
00003298  4E75      5802          rts
                    5803   ; }
                    5804   ; void UnhandledIRQ5(void) {
                    5805   _UnhandledIRQ5:
                    5806   ; IRQMessage(5);
0000329A  4878 0005 5807          pea       5
0000329E  4EB8 323E 5808          jsr       _IRQMessage
000032A2  584F      5809          addq.w    #4,A7
000032A4  4E75      5810          rts
                    5811   ; }
                    5812   ; void UnhandledIRQ6(void) {
                    5813   _UnhandledIRQ6:
                    5814   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000032A6  4879 0000 5815          pea       @m68kde~1_163.L
000032AA  61D4      
000032AC  4EB8 3212 5816          jsr       _PrintErrorMessageandAbort
000032B0  584F      5817          addq.w    #4,A7
                    5818   ; menu() ;
000032B2  4EB8 2F82 5819          jsr       _menu
000032B6  4E75      5820          rts
                    5821   ; }
                    5822   ; void UnhandledIRQ7(void) {
                    5823   _UnhandledIRQ7:
                    5824   ; IRQMessage(7);
000032B8  4878 0007 5825          pea       7
000032BC  4EB8 323E 5826          jsr       _IRQMessage
000032C0  584F      5827          addq.w    #4,A7
000032C2  4E75      5828          rts
                    5829   ; }
                    5830   ; void UnhandledTrap(void) {
                    5831   _UnhandledTrap:
                    5832   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000032C4  4879 0000 5833          pea       @m68kde~1_164.L
000032C8  6214      
000032CA  4EB8 3212 5834          jsr       _PrintErrorMessageandAbort
000032CE  584F      5835          addq.w    #4,A7
000032D0  4E75      5836          rts
                    5837   ; }
                    5838   ; void BusError() {
                    5839   _BusError:
                    5840   ; PrintErrorMessageandAbort("BUS Error!") ;
000032D2  4879 0000 5841          pea       @m68kde~1_165.L
000032D6  622A      
000032D8  4EB8 3212 5842          jsr       _PrintErrorMessageandAbort
000032DC  584F      5843          addq.w    #4,A7
000032DE  4E75      5844          rts
                    5845   ; }
                    5846   ; void AddressError() {
                    5847   _AddressError:
                    5848   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000032E0  4879 0000 5849          pea       @m68kde~1_166.L
000032E4  6236      
000032E6  4EB8 3212 5850          jsr       _PrintErrorMessageandAbort
000032EA  584F      5851          addq.w    #4,A7
000032EC  4E75      5852          rts
                    5853   ; }
                    5854   ; void IllegalInstruction() {
                    5855   _IllegalInstruction:
                    5856   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000032EE  4879 0000 5857          pea       @m68kde~1_167.L
000032F2  6246      
000032F4  4EB8 3212 5858          jsr       _PrintErrorMessageandAbort
000032F8  584F      5859          addq.w    #4,A7
000032FA  4E75      5860          rts
                    5861   ; }
                    5862   ; void Dividebyzero() {
                    5863   _Dividebyzero:
                    5864   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000032FC  4879 0000 5865          pea       @m68kde~1_168.L
00003300  625A      
00003302  4EB8 3212 5866          jsr       _PrintErrorMessageandAbort
00003306  584F      5867          addq.w    #4,A7
00003308  4E75      5868          rts
                    5869   ; }
                    5870   ; void Check() {
                    5871   _Check:
                    5872   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000330A  4879 0000 5873          pea       @m68kde~1_169.L
0000330E  626A      
00003310  4EB8 3212 5874          jsr       _PrintErrorMessageandAbort
00003314  584F      5875          addq.w    #4,A7
00003316  4E75      5876          rts
                    5877   ; }
                    5878   ; void Trapv() {
                    5879   _Trapv:
                    5880   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00003318  4879 0000 5881          pea       @m68kde~1_170.L
0000331C  627C      
0000331E  4EB8 3212 5882          jsr       _PrintErrorMessageandAbort
00003322  584F      5883          addq.w    #4,A7
00003324  4E75      5884          rts
                    5885   ; }
                    5886   ; void PrivError() {
                    5887   _PrivError:
                    5888   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00003326  4879 0000 5889          pea       @m68kde~1_171.L
0000332A  628E      
0000332C  4EB8 3212 5890          jsr       _PrintErrorMessageandAbort
00003330  584F      5891          addq.w    #4,A7
00003332  4E75      5892          rts
                    5893   ; }
                    5894   ; void UnitIRQ() {
                    5895   _UnitIRQ:
                    5896   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00003334  4879 0000 5897          pea       @m68kde~1_172.L
00003338  62A2      
0000333A  4EB8 3212 5898          jsr       _PrintErrorMessageandAbort
0000333E  584F      5899          addq.w    #4,A7
00003340  4E75      5900          rts
                    5901   ; }
                    5902   ; void Spurious() {
                    5903   _Spurious:
                    5904   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00003342  4879 0000 5905          pea       @m68kde~1_173.L
00003346  62B4      
00003348  4EB8 3212 5906          jsr       _PrintErrorMessageandAbort
0000334C  584F      5907          addq.w    #4,A7
0000334E  4E75      5908          rts
                    5909   ; }
                    5910   ; void EnterString(void)
                    5911   ; {
                    5912   _EnterString:
00003350  4E56 FFFC 5913          link      A6,#-4
00003354  2F02      5914          move.l    D2,-(A7)
                    5915   ; unsigned char *Start;
                    5916   ; unsigned char c;
                    5917   ; printf("\r\nStart Address in Memory: ") ;
00003356  4879 0000 5918          pea       @m68kde~1_174.L
0000335A  62C2      
0000335C  4EB9 0000 5919          jsr       _printf
00003360  4470      
00003362  584F      5920          addq.w    #4,A7
                    5921   ; Start = Get8HexDigits(0) ;
00003364  42A7      5922          clr.l     -(A7)
00003366  4EB8 0CA4 5923          jsr       _Get8HexDigits
0000336A  584F      5924          addq.w    #4,A7
0000336C  2400      5925          move.l    D0,D2
                    5926   ; printf("\r\nEnter String (ESC to end) :") ;
0000336E  4879 0000 5927          pea       @m68kde~1_175.L
00003372  62DE      
00003374  4EB9 0000 5928          jsr       _printf
00003378  4470      
0000337A  584F      5929          addq.w    #4,A7
                    5930   ; while((c = getchar()) != 0x1b)
                    5931   EnterString_1:
0000337C  4EB9 0000 5932          jsr       _getch
00003380  3AE4      
00003382  1D40 FFFF 5933          move.b    D0,-1(A6)
00003386  0C00 001B 5934          cmp.b     #27,D0
0000338A  670A      5935          beq.s     EnterString_3
                    5936   ; *Start++ = c ;
0000338C  2042      5937          move.l    D2,A0
0000338E  5282      5938          addq.l    #1,D2
00003390  10AE FFFF 5939          move.b    -1(A6),(A0)
00003394  60E6      5940          bra       EnterString_1
                    5941   EnterString_3:
                    5942   ; *Start = 0x00;  // terminate with a null
00003396  2042      5943          move.l    D2,A0
00003398  4210      5944          clr.b     (A0)
0000339A  241F      5945          move.l    (A7)+,D2
0000339C  4E5E      5946          unlk      A6
0000339E  4E75      5947          rts
                    5948   ; }
                    5949   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    5950   ; void clearInputBuffer() {
                    5951   _clearInputBuffer:
000033A0  4E56 FFFC 5952          link      A6,#-4
                    5953   ; int c;
                    5954   ; while ((c = getchar()) != '\n' && c != EOF);
                    5955   clearInputBuffer_1:
000033A4  4EB9 0000 5956          jsr       _getch
000033A8  3AE4      
000033AA  2D40 FFFC 5957          move.l    D0,-4(A6)
000033AE  0C80 0000 5958          cmp.l     #10,D0
000033B2  000A      
000033B4  670E      5959          beq.s     clearInputBuffer_3
000033B6  202E FFFC 5960          move.l    -4(A6),D0
000033BA  0C80 FFFF 5961          cmp.l     #-1,D0
000033BE  FFFF      
000033C0  6702      5962          beq.s     clearInputBuffer_3
000033C2  60E0      5963          bra       clearInputBuffer_1
                    5964   clearInputBuffer_3:
000033C4  4E5E      5965          unlk      A6
000033C6  4E75      5966          rts
                    5967   ; }
                    5968   ; void MemoryTest(void)
                    5969   ; {
                    5970   _MemoryTest:
000033C8  4E56 FF40 5971          link      A6,#-192
000033CC  48E7 3F3C 5972          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000033D0  45F9 0000 5973          lea       _printf.L,A2
000033D4  4470      
000033D6  4BF8 0B68 5974          lea       __getch.L,A5
                    5975   ; unsigned int *RamPtr, counter1=1 ;
000033DA  2D7C 0000 5976          move.l    #1,-188(A6)
000033DE  0001 FF44 
                    5977   ; register unsigned int i ;
                    5978   ; unsigned int Start, End ;
                    5979   ; char c, text[150];
                    5980   ; unsigned int* addressPointer;
                    5981   ; unsigned int startAddress = NULL;
000033E2  42AE FFF0 5982          clr.l     -16(A6)
                    5983   ; unsigned int endAddress = NULL;
000033E6  42AE FFF4 5984          clr.l     -12(A6)
                    5985   ; unsigned int byteLength;
                    5986   ; unsigned int dataSize = 0;
000033EA  4285      5987          clr.l     D5
                    5988   ; unsigned int dataPattern = 0;
000033EC  4283      5989          clr.l     D3
                    5990   ; unsigned int currAddress;
                    5991   ; unsigned int addrCount;
                    5992   ; unsigned int intBuffer = NULL;
000033EE  7E00      5993          moveq     #0,D7
                    5994   ; unsigned char *startAddressPtr = NULL;
000033F0  4282      5995          clr.l     D2
                    5996   ; unsigned char *endAddressPtr = NULL;
000033F2  4286      5997          clr.l     D6
                    5998   ; unsigned short int *wordAddressPtr = NULL;
000033F4  387C 0000 5999          move.w    #0,A4
                    6000   ; unsigned int *longAddressPtr = NULL;
000033F8  367C 0000 6001          move.w    #0,A3
                    6002   ; // IMPROVEMENTS TO BE MADE:
                    6003   ; // Suppossed to be able to write an odd address as a byte
                    6004   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    6005   ; // printf("\r\nStart Address: ") ;
                    6006   ; // Start = Get8HexDigits(0) ;
                    6007   ; // printf("\r\nEnd Address: ") ;
                    6008   ; // End = Get8HexDigits(0) ;
                    6009   ; // TODO
                    6010   ; scanflush();
000033FC  4EB9 0000 6011          jsr       _scanflush
00003400  3E66      
                    6012   ; memset(text, 0, sizeof(text));  // fills with zeros
00003402  4878 0096 6013          pea       150
00003406  42A7      6014          clr.l     -(A7)
00003408  486E FF56 6015          pea       -170(A6)
0000340C  4EB9 0000 6016          jsr       _memset
00003410  3B80      
00003412  DEFC 000C 6017          add.w     #12,A7
                    6018   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
00003416  4879 0000 6019          pea       @m68kde~1_176.L
0000341A  62FC      
0000341C  4E92      6020          jsr       (A2)
0000341E  584F      6021          addq.w    #4,A7
                    6022   ; dataSize = _getch() - 48;
00003420  4E95      6023          jsr       (A5)
00003422  0480 0000 6024          sub.l     #48,D0
00003426  0030      
00003428  2A00      6025          move.l    D0,D5
                    6026   ; printf("\n");
0000342A  4879 0000 6027          pea       @m68kde~1_28.L
0000342E  50EE      
00003430  4E92      6028          jsr       (A2)
00003432  584F      6029          addq.w    #4,A7
                    6030   ; if (dataSize == 0) {
00003434  4A85      6031          tst.l     D5
00003436  6600 0058 6032          bne       MemoryTest_1
                    6033   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
0000343A  4879 0000 6034          pea       @m68kde~1_177.L
0000343E  6352      
00003440  4E92      6035          jsr       (A2)
00003442  584F      6036          addq.w    #4,A7
                    6037   ; intBuffer = _getch() - 48;
00003444  4E95      6038          jsr       (A5)
00003446  0480 0000 6039          sub.l     #48,D0
0000344A  0030      
0000344C  2E00      6040          move.l    D0,D7
                    6041   ; // scanf("%d", &intBuffer);
                    6042   ; switch (intBuffer) {
0000344E  2007      6043          move.l    D7,D0
00003450  0C80 0000 6044          cmp.l     #4,D0
00003454  0004      
00003456  642C      6045          bhs.s     MemoryTest_4
00003458  E380      6046          asl.l     #1,D0
0000345A  303B 0806 6047          move.w    MemoryTest_5(PC,D0.L),D0
0000345E  4EFB 0002 6048          jmp       MemoryTest_5(PC,D0.W)
                    6049   MemoryTest_5:
00003462  0008      6050          dc.w      MemoryTest_6-MemoryTest_5
00003464  000C      6051          dc.w      MemoryTest_7-MemoryTest_5
00003466  0014      6052          dc.w      MemoryTest_8-MemoryTest_5
00003468  001C      6053          dc.w      MemoryTest_9-MemoryTest_5
                    6054   MemoryTest_6:
                    6055   ; case(0):
                    6056   ; dataPattern = 0x00; break;
0000346A  4283      6057          clr.l     D3
0000346C  6016      6058          bra.s     MemoryTest_4
                    6059   MemoryTest_7:
                    6060   ; case(1):
                    6061   ; dataPattern = 0xB2; break;
0000346E  263C 0000 6062          move.l    #178,D3
00003472  00B2      
00003474  600E      6063          bra.s     MemoryTest_4
                    6064   MemoryTest_8:
                    6065   ; case(2):
                    6066   ; dataPattern = 0xC3; break;
00003476  263C 0000 6067          move.l    #195,D3
0000347A  00C3      
0000347C  6006      6068          bra.s     MemoryTest_4
                    6069   MemoryTest_9:
                    6070   ; case(3):
                    6071   ; dataPattern = 0xD4; break;
0000347E  263C 0000 6072          move.l    #212,D3
00003482  00D4      
                    6073   MemoryTest_4:
                    6074   ; }
                    6075   ; dataPattern &= 0xFF;
00003484  C6BC 0000 6076          and.l     #255,D3
00003488  00FF      
                    6077   ; byteLength = 1;
0000348A  7801      6078          moveq     #1,D4
0000348C  6000 00AE 6079          bra       MemoryTest_11
                    6080   MemoryTest_1:
                    6081   ; } else if (dataSize == 1) {
00003490  0C85 0000 6082          cmp.l     #1,D5
00003494  0001      
00003496  6600 0058 6083          bne       MemoryTest_10
                    6084   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
0000349A  4879 0000 6085          pea       @m68kde~1_178.L
0000349E  63B4      
000034A0  4E92      6086          jsr       (A2)
000034A2  584F      6087          addq.w    #4,A7
                    6088   ; intBuffer = _getch() - 48;
000034A4  4E95      6089          jsr       (A5)
000034A6  0480 0000 6090          sub.l     #48,D0
000034AA  0030      
000034AC  2E00      6091          move.l    D0,D7
                    6092   ; switch (intBuffer) {
000034AE  2007      6093          move.l    D7,D0
000034B0  0C80 0000 6094          cmp.l     #4,D0
000034B4  0004      
000034B6  642C      6095          bhs.s     MemoryTest_13
000034B8  E380      6096          asl.l     #1,D0
000034BA  303B 0806 6097          move.w    MemoryTest_14(PC,D0.L),D0
000034BE  4EFB 0002 6098          jmp       MemoryTest_14(PC,D0.W)
                    6099   MemoryTest_14:
000034C2  0008      6100          dc.w      MemoryTest_15-MemoryTest_14
000034C4  000C      6101          dc.w      MemoryTest_16-MemoryTest_14
000034C6  0014      6102          dc.w      MemoryTest_17-MemoryTest_14
000034C8  001C      6103          dc.w      MemoryTest_18-MemoryTest_14
                    6104   MemoryTest_15:
                    6105   ; case(0):
                    6106   ; dataPattern = 0x0000; break;
000034CA  4283      6107          clr.l     D3
000034CC  6016      6108          bra.s     MemoryTest_13
                    6109   MemoryTest_16:
                    6110   ; case(1):
                    6111   ; dataPattern = 0x1234; break;
000034CE  263C 0000 6112          move.l    #4660,D3
000034D2  1234      
000034D4  600E      6113          bra.s     MemoryTest_13
                    6114   MemoryTest_17:
                    6115   ; case(2):
                    6116   ; dataPattern = 0xA1B2; break;
000034D6  263C 0000 6117          move.l    #41394,D3
000034DA  A1B2      
000034DC  6006      6118          bra.s     MemoryTest_13
                    6119   MemoryTest_18:
                    6120   ; case(3):
                    6121   ; dataPattern = 0xC3D4; break;
000034DE  263C 0000 6122          move.l    #50132,D3
000034E2  C3D4      
                    6123   MemoryTest_13:
                    6124   ; }
                    6125   ; dataPattern &= 0xFFFF;
000034E4  C6BC 0000 6126          and.l     #65535,D3
000034E8  FFFF      
                    6127   ; byteLength = 2;
000034EA  7802      6128          moveq     #2,D4
000034EC  6000 004E 6129          bra       MemoryTest_11
                    6130   MemoryTest_10:
                    6131   ; } else {
                    6132   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
000034F0  4879 0000 6133          pea       @m68kde~1_179.L
000034F4  641E      
000034F6  4E92      6134          jsr       (A2)
000034F8  584F      6135          addq.w    #4,A7
                    6136   ; intBuffer = _getch() - 48;
000034FA  4E95      6137          jsr       (A5)
000034FC  0480 0000 6138          sub.l     #48,D0
00003500  0030      
00003502  2E00      6139          move.l    D0,D7
                    6140   ; switch (intBuffer) {
00003504  2007      6141          move.l    D7,D0
00003506  0C80 0000 6142          cmp.l     #4,D0
0000350A  0004      
0000350C  642C      6143          bhs.s     MemoryTest_20
0000350E  E380      6144          asl.l     #1,D0
00003510  303B 0806 6145          move.w    MemoryTest_21(PC,D0.L),D0
00003514  4EFB 0002 6146          jmp       MemoryTest_21(PC,D0.W)
                    6147   MemoryTest_21:
00003518  0008      6148          dc.w      MemoryTest_22-MemoryTest_21
0000351A  000C      6149          dc.w      MemoryTest_23-MemoryTest_21
0000351C  0014      6150          dc.w      MemoryTest_24-MemoryTest_21
0000351E  001C      6151          dc.w      MemoryTest_25-MemoryTest_21
                    6152   MemoryTest_22:
                    6153   ; case(0):
                    6154   ; dataPattern = 0x00000000; break;
00003520  4283      6155          clr.l     D3
00003522  6016      6156          bra.s     MemoryTest_20
                    6157   MemoryTest_23:
                    6158   ; case(1):
                    6159   ; dataPattern = 0xAABBCCDD; break;
00003524  263C AABB 6160          move.l    #-1430532899,D3
00003528  CCDD      
0000352A  600E      6161          bra.s     MemoryTest_20
                    6162   MemoryTest_24:
                    6163   ; case(2):
                    6164   ; dataPattern = 0x11223344; break;
0000352C  263C 1122 6165          move.l    #287454020,D3
00003530  3344      
00003532  6006      6166          bra.s     MemoryTest_20
                    6167   MemoryTest_25:
                    6168   ; case(3):
                    6169   ; dataPattern = 0x76543210; break;
00003534  263C 7654 6170          move.l    #1985229328,D3
00003538  3210      
                    6171   MemoryTest_20:
                    6172   ; }
                    6173   ; byteLength = 4;
0000353A  7804      6174          moveq     #4,D4
                    6175   MemoryTest_11:
                    6176   ; }
                    6177   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    6178   ; while (startAddressPtr == NULL || 
                    6179   MemoryTest_26:
0000353C  4A82      6180          tst.l     D2
0000353E  6732      6181          beq.s     MemoryTest_29
00003540  0C84 0000 6182          cmp.l     #1,D4
00003544  0001      
00003546  6316      6183          bls.s     MemoryTest_30
00003548  2F02      6184          move.l    D2,-(A7)
0000354A  4878 0002 6185          pea       2
0000354E  4EB9 0000 6186          jsr       ULDIV
00003552  39D6      
00003554  202F 0004 6187          move.l    4(A7),D0
00003558  504F      6188          addq.w    #8,A7
0000355A  4A80      6189          tst.l     D0
0000355C  6614      6190          bne.s     MemoryTest_29
                    6191   MemoryTest_30:
0000355E  0C82 0802 6192          cmp.l     #134348800,D2
00003562  0000      
00003564  650C      6193          blo.s     MemoryTest_29
00003566  203C 0B00 6194          move.l    #184549376,D0
0000356A  0000      
0000356C  9084      6195          sub.l     D4,D0
0000356E  B480      6196          cmp.l     D0,D2
00003570  6316      6197          bls.s     MemoryTest_28
                    6198   MemoryTest_29:
                    6199   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    6200   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    6201   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    6202   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
00003572  4879 0000 6203          pea       @m68kde~1_180.L
00003576  649C      
00003578  4E92      6204          jsr       (A2)
0000357A  584F      6205          addq.w    #4,A7
                    6206   ; startAddressPtr =  Get8HexDigits(0);
0000357C  42A7      6207          clr.l     -(A7)
0000357E  4EB8 0CA4 6208          jsr       _Get8HexDigits
00003582  584F      6209          addq.w    #4,A7
00003584  2400      6210          move.l    D0,D2
00003586  60B4      6211          bra       MemoryTest_26
                    6212   MemoryTest_28:
                    6213   ; }
                    6214   ; while (endAddressPtr == NULL || 
                    6215   MemoryTest_31:
00003588  4A86      6216          tst.l     D6
0000358A  670A      6217          beq.s     MemoryTest_34
0000358C  202E FFF0 6218          move.l    -16(A6),D0
00003590  D084      6219          add.l     D4,D0
00003592  BC80      6220          cmp.l     D0,D6
00003594  6416      6221          bhs.s     MemoryTest_33
                    6222   MemoryTest_34:
                    6223   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    6224   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00003596  4879 0000 6225          pea       @m68kde~1_181.L
0000359A  64D4      
0000359C  4E92      6226          jsr       (A2)
0000359E  584F      6227          addq.w    #4,A7
                    6228   ; endAddressPtr =  Get8HexDigits(0);
000035A0  42A7      6229          clr.l     -(A7)
000035A2  4EB8 0CA4 6230          jsr       _Get8HexDigits
000035A6  584F      6231          addq.w    #4,A7
000035A8  2C00      6232          move.l    D0,D6
000035AA  60DC      6233          bra       MemoryTest_31
                    6234   MemoryTest_33:
                    6235   ; }
                    6236   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
000035AC  2F02      6237          move.l    D2,-(A7)
000035AE  4879 0000 6238          pea       @m68kde~1_182.L
000035B2  650A      
000035B4  4E92      6239          jsr       (A2)
000035B6  504F      6240          addq.w    #8,A7
                    6241   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
000035B8  2F06      6242          move.l    D6,-(A7)
000035BA  4879 0000 6243          pea       @m68kde~1_183.L
000035BE  6522      
000035C0  4E92      6244          jsr       (A2)
000035C2  504F      6245          addq.w    #8,A7
                    6246   ; addrCount = 0;
000035C4  42AE FFFC 6247          clr.l     -4(A6)
                    6248   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    6249   MemoryTest_35:
000035C8  B486      6250          cmp.l     D6,D2
000035CA  6400 0132 6251          bhs       MemoryTest_37
000035CE  2006      6252          move.l    D6,D0
000035D0  9082      6253          sub.l     D2,D0
000035D2  5280      6254          addq.l    #1,D0
000035D4  B084      6255          cmp.l     D4,D0
000035D6  6500 0126 6256          blo       MemoryTest_37
                    6257   ; // If address goes beyond 0x0B00_0000 then break
                    6258   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
000035DA  203C 0B00 6259          move.l    #184549376,D0
000035DE  0000      
000035E0  9084      6260          sub.l     D4,D0
000035E2  B480      6261          cmp.l     D0,D2
000035E4  6310      6262          bls.s     MemoryTest_38
                    6263   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
000035E6  2F02      6264          move.l    D2,-(A7)
000035E8  4879 0000 6265          pea       @m68kde~1_184.L
000035EC  6538      
000035EE  4E92      6266          jsr       (A2)
000035F0  504F      6267          addq.w    #8,A7
                    6268   ; break;
000035F2  6000 010A 6269          bra       MemoryTest_37
                    6270   MemoryTest_38:
                    6271   ; }
                    6272   ; longAddressPtr = startAddressPtr;
000035F6  2642      6273          move.l    D2,A3
                    6274   ; wordAddressPtr = startAddressPtr;
000035F8  2842      6275          move.l    D2,A4
                    6276   ; if (dataSize == 0) {
000035FA  4A85      6277          tst.l     D5
000035FC  6600 0034 6278          bne       MemoryTest_40
                    6279   ; *startAddressPtr = dataPattern;
00003600  2042      6280          move.l    D2,A0
00003602  1083      6281          move.b    D3,(A0)
                    6282   ; if ((*startAddressPtr) != dataPattern) {
00003604  2042      6283          move.l    D2,A0
00003606  1010      6284          move.b    (A0),D0
00003608  C0BC 0000 6285          and.l     #255,D0
0000360C  00FF      
0000360E  B083      6286          cmp.l     D3,D0
00003610  671C      6287          beq.s     MemoryTest_42
                    6288   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00003612  2F03      6289          move.l    D3,-(A7)
00003614  2042      6290          move.l    D2,A0
00003616  1210      6291          move.b    (A0),D1
00003618  C2BC 0000 6292          and.l     #255,D1
0000361C  00FF      
0000361E  2F01      6293          move.l    D1,-(A7)
00003620  2F02      6294          move.l    D2,-(A7)
00003622  4879 0000 6295          pea       @m68kde~1_185.L
00003626  656A      
00003628  4E92      6296          jsr       (A2)
0000362A  DEFC 0010 6297          add.w     #16,A7
                    6298   MemoryTest_42:
0000362E  6000 0058 6299          bra       MemoryTest_48
                    6300   MemoryTest_40:
                    6301   ; }
                    6302   ; } else if (dataSize == 1) {
00003632  0C85 0000 6303          cmp.l     #1,D5
00003636  0001      
00003638  662C      6304          bne.s     MemoryTest_44
                    6305   ; *wordAddressPtr = dataPattern;
0000363A  3883      6306          move.w    D3,(A4)
                    6307   ; if ((*wordAddressPtr) != dataPattern) {
0000363C  3014      6308          move.w    (A4),D0
0000363E  C0BC 0000 6309          and.l     #65535,D0
00003642  FFFF      
00003644  B083      6310          cmp.l     D3,D0
00003646  671C      6311          beq.s     MemoryTest_46
                    6312   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00003648  2F03      6313          move.l    D3,-(A7)
0000364A  2042      6314          move.l    D2,A0
0000364C  1210      6315          move.b    (A0),D1
0000364E  C2BC 0000 6316          and.l     #255,D1
00003652  00FF      
00003654  2F01      6317          move.l    D1,-(A7)
00003656  2F02      6318          move.l    D2,-(A7)
00003658  4879 0000 6319          pea       @m68kde~1_185.L
0000365C  656A      
0000365E  4E92      6320          jsr       (A2)
00003660  DEFC 0010 6321          add.w     #16,A7
                    6322   MemoryTest_46:
00003664  6022      6323          bra.s     MemoryTest_48
                    6324   MemoryTest_44:
                    6325   ; }
                    6326   ; } else {
                    6327   ; *longAddressPtr = dataPattern;
00003666  2683      6328          move.l    D3,(A3)
                    6329   ; if ((*longAddressPtr) != dataPattern) {
00003668  B693      6330          cmp.l     (A3),D3
0000366A  671C      6331          beq.s     MemoryTest_48
                    6332   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
0000366C  2F03      6333          move.l    D3,-(A7)
0000366E  2042      6334          move.l    D2,A0
00003670  1210      6335          move.b    (A0),D1
00003672  C2BC 0000 6336          and.l     #255,D1
00003676  00FF      
00003678  2F01      6337          move.l    D1,-(A7)
0000367A  2F02      6338          move.l    D2,-(A7)
0000367C  4879 0000 6339          pea       @m68kde~1_185.L
00003680  656A      
00003682  4E92      6340          jsr       (A2)
00003684  DEFC 0010 6341          add.w     #16,A7
                    6342   MemoryTest_48:
                    6343   ; }
                    6344   ; }
                    6345   ; // if ((*startAddressPtr) != dataPattern) {
                    6346   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    6347   ; // }
                    6348   ; addrCount++;
00003688  52AE FFFC 6349          addq.l    #1,-4(A6)
                    6350   ; if (addrCount % 128 == 0) {
0000368C  2F2E FFFC 6351          move.l    -4(A6),-(A7)
00003690  4878 0080 6352          pea       128
00003694  4EB9 0000 6353          jsr       ULDIV
00003698  39D6      
0000369A  202F 0004 6354          move.l    4(A7),D0
0000369E  504F      6355          addq.w    #8,A7
000036A0  4A80      6356          tst.l     D0
000036A2  6600 0054 6357          bne       MemoryTest_55
                    6358   ; if (dataSize == 0) {
000036A6  4A85      6359          tst.l     D5
000036A8  661C      6360          bne.s     MemoryTest_52
                    6361   ; printf("Address: 0x%x Value: 0x%02X\n",
000036AA  2042      6362          move.l    D2,A0
000036AC  1210      6363          move.b    (A0),D1
000036AE  C2BC 0000 6364          and.l     #255,D1
000036B2  00FF      
000036B4  2F01      6365          move.l    D1,-(A7)
000036B6  2F02      6366          move.l    D2,-(A7)
000036B8  4879 0000 6367          pea       @m68kde~1_186.L
000036BC  65B0      
000036BE  4E92      6368          jsr       (A2)
000036C0  DEFC 000C 6369          add.w     #12,A7
000036C4  6032      6370          bra.s     MemoryTest_55
                    6371   MemoryTest_52:
                    6372   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    6373   ; }
                    6374   ; else if (dataSize == 1) {
000036C6  0C85 0000 6375          cmp.l     #1,D5
000036CA  0001      
000036CC  661A      6376          bne.s     MemoryTest_54
                    6377   ; printf("Address: 0x%x Value: 0x%04X\n",
000036CE  3214      6378          move.w    (A4),D1
000036D0  C2BC 0000 6379          and.l     #65535,D1
000036D4  FFFF      
000036D6  2F01      6380          move.l    D1,-(A7)
000036D8  2F0C      6381          move.l    A4,-(A7)
000036DA  4879 0000 6382          pea       @m68kde~1_187.L
000036DE  65CE      
000036E0  4E92      6383          jsr       (A2)
000036E2  DEFC 000C 6384          add.w     #12,A7
000036E6  6010      6385          bra.s     MemoryTest_55
                    6386   MemoryTest_54:
                    6387   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    6388   ; }
                    6389   ; else {
                    6390   ; printf("Address: 0x%x Value: 0x%08X\n",
000036E8  2F13      6391          move.l    (A3),-(A7)
000036EA  2F0B      6392          move.l    A3,-(A7)
000036EC  4879 0000 6393          pea       @m68kde~1_188.L
000036F0  65EC      
000036F2  4E92      6394          jsr       (A2)
000036F4  DEFC 000C 6395          add.w     #12,A7
                    6396   MemoryTest_55:
                    6397   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    6398   ; }
                    6399   ; }
                    6400   ; startAddressPtr += byteLength;
000036F8  D484      6401          add.l     D4,D2
000036FA  6000 FECC 6402          bra       MemoryTest_35
                    6403   MemoryTest_37:
000036FE  4CDF 3CFC 6404          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003702  4E5E      6405          unlk      A6
00003704  4E75      6406          rts
                    6407   ; }
                    6408   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    6409   ; }
                    6410   ; void main(void)
                    6411   ; {
                    6412   _main:
00003706  4E56 FFF4 6413          link      A6,#-12
0000370A  48E7 3030 6414          movem.l   D2/D3/A2/A3,-(A7)
0000370E  45F8 0A30 6415          lea       _InstallExceptionHandler.L,A2
00003712  47F9 0000 6416          lea       _printf.L,A3
00003716  4470      
                    6417   ; char c ;
                    6418   ; int i, j ;
                    6419   ; char *BugMessage = "DE1-68k Bug V1.77";
00003718  41F9 0000 6420          lea       @m68kde~1_189.L,A0
0000371C  660A      
0000371E  2608      6421          move.l    A0,D3
                    6422   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00003720  41F9 0000 6423          lea       @m68kde~1_190.L,A0
00003724  661C      
00003726  2D48 FFFC 6424          move.l    A0,-4(A6)
                    6425   ; KillAllBreakPoints() ;
0000372A  4EB8 2A30 6426          jsr       _KillAllBreakPoints
                    6427   ; i = x = y = z = PortA_Count = 0;
0000372E  42B9 0B00 6428          clr.l     _PortA_Count.L
00003732  00D4      
00003734  42B9 0B00 6429          clr.l     _z.L
00003738  00D0      
0000373A  42B9 0B00 6430          clr.l     _y.L
0000373E  00CC      
00003740  42B9 0B00 6431          clr.l     _x.L
00003744  00C8      
00003746  4282      6432          clr.l     D2
                    6433   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00003748  42B9 0B00 6434          clr.l     _GoFlag.L
0000374C  00DC      
0000374E  42B9 0B00 6435          clr.l     _Trace.L
00003752  00D8      
                    6436   ; Echo = 1 ;
00003754  23FC 0000 6437          move.l    #1,_Echo.L
00003758  0001 0B00 
0000375C  00E0      
                    6438   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
0000375E  42B9 0B00 6439          clr.l     _d7.L
00003762  0100      
00003764  42B9 0B00 6440          clr.l     _d6.L
00003768  00FC      
0000376A  42B9 0B00 6441          clr.l     _d5.L
0000376E  00F8      
00003770  42B9 0B00 6442          clr.l     _d4.L
00003774  00F4      
00003776  42B9 0B00 6443          clr.l     _d3.L
0000377A  00F0      
0000377C  42B9 0B00 6444          clr.l     _d2.L
00003780  00EC      
00003782  42B9 0B00 6445          clr.l     _d1.L
00003786  00E8      
00003788  42B9 0B00 6446          clr.l     _d0.L
0000378C  00E4      
                    6447   ; a0=a1=a2=a3=a4=a5=a6=0 ;
0000378E  42B9 0B00 6448          clr.l     _a6.L
00003792  011C      
00003794  42B9 0B00 6449          clr.l     _a5.L
00003798  0118      
0000379A  42B9 0B00 6450          clr.l     _a4.L
0000379E  0114      
000037A0  42B9 0B00 6451          clr.l     _a3.L
000037A4  0110      
000037A6  42B9 0B00 6452          clr.l     _a2.L
000037AA  010C      
000037AC  42B9 0B00 6453          clr.l     _a1.L
000037B0  0108      
000037B2  42B9 0B00 6454          clr.l     _a0.L
000037B6  0104      
                    6455   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
000037B8  23FC 0800 6456          move.l    #134217728,_PC.L
000037BC  0000 0B00 
000037C0  0120      
000037C2  23FC 0C00 6457          move.l    #201326592,_SSP.L
000037C6  0000 0B00 
000037CA  0124      
000037CC  23FC 0C00 6458          move.l    #201326592,_USP.L
000037D0  0000 0B00 
000037D4  0128      
                    6459   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
000037D6  33FC 2000 6460          move.w    #8192,_SR.L
000037DA  0B00 012C 
                    6461   ; // Initialise Breakpoint variables
                    6462   ; for(i = 0; i < 8; i++)  {
000037DE  4282      6463          clr.l     D2
                    6464   main_1:
000037E0  0C82 0000 6465          cmp.l     #8,D2
000037E4  0008      
000037E6  6C00 004C 6466          bge       main_3
                    6467   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000037EA  2002      6468          move.l    D2,D0
000037EC  E588      6469          lsl.l     #2,D0
000037EE  41F9 0B00 6470          lea       _BreakPointAddress.L,A0
000037F2  012E      
000037F4  42B0 0800 6471          clr.l     0(A0,D0.L)
                    6472   ; WatchPointAddress[i] = 0 ;
000037F8  2002      6473          move.l    D2,D0
000037FA  E588      6474          lsl.l     #2,D0
000037FC  41F9 0B00 6475          lea       _WatchPointAddress.L,A0
00003800  0182      
00003802  42B0 0800 6476          clr.l     0(A0,D0.L)
                    6477   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00003806  2002      6478          move.l    D2,D0
00003808  E388      6479          lsl.l     #1,D0
0000380A  41F9 0B00 6480          lea       _BreakPointInstruction.L,A0
0000380E  014E      
00003810  4270 0800 6481          clr.w     0(A0,D0.L)
                    6482   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00003814  2002      6483          move.l    D2,D0
00003816  E588      6484          lsl.l     #2,D0
00003818  41F9 0B00 6485          lea       _BreakPointSetOrCleared.L,A0
0000381C  015E      
0000381E  42B0 0800 6486          clr.l     0(A0,D0.L)
                    6487   ; WatchPointSetOrCleared[i] = 0;
00003822  2002      6488          move.l    D2,D0
00003824  E588      6489          lsl.l     #2,D0
00003826  41F9 0B00 6490          lea       _WatchPointSetOrCleared.L,A0
0000382A  01A2      
0000382C  42B0 0800 6491          clr.l     0(A0,D0.L)
00003830  5282      6492          addq.l    #1,D2
00003832  60AC      6493          bra       main_1
                    6494   main_3:
                    6495   ; }
                    6496   ; Init_RS232() ;     // initialise the RS232 port
00003834  4EB8 0B12 6497          jsr       _Init_RS232
                    6498   ; Init_LCD() ;
00003838  4EB8 095E 6499          jsr       _Init_LCD
                    6500   ; SPI_Init();
0000383C  4EB8 10FC 6501          jsr       _SPI_Init
                    6502   ; IIC_Init();
00003840  4EB8 1428 6503          jsr       _IIC_Init
                    6504   ; for( i = 32; i < 48; i++)
00003844  7420      6505          moveq     #32,D2
                    6506   main_4:
00003846  0C82 0000 6507          cmp.l     #48,D2
0000384A  0030      
0000384C  6C0E      6508          bge.s     main_6
                    6509   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
0000384E  2F02      6510          move.l    D2,-(A7)
00003850  4878 32C4 6511          pea       _UnhandledTrap.L
00003854  4E92      6512          jsr       (A2)
00003856  504F      6513          addq.w    #8,A7
00003858  5282      6514          addq.l    #1,D2
0000385A  60EA      6515          bra       main_4
                    6516   main_6:
                    6517   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
0000385C  4878 002F 6518          pea       47
00003860  4878 2F82 6519          pea       _menu.L
00003864  4E92      6520          jsr       (A2)
00003866  504F      6521          addq.w    #8,A7
                    6522   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00003868  4878 0019 6523          pea       25
0000386C  4878 326A 6524          pea       _UnhandledIRQ1.L
00003870  4E92      6525          jsr       (A2)
00003872  504F      6526          addq.w    #8,A7
                    6527   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00003874  4878 001A 6528          pea       26
00003878  4878 3276 6529          pea       _UnhandledIRQ2.L
0000387C  4E92      6530          jsr       (A2)
0000387E  504F      6531          addq.w    #8,A7
                    6532   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00003880  4878 001B 6533          pea       27
00003884  4878 3282 6534          pea       _UnhandledIRQ3.L
00003888  4E92      6535          jsr       (A2)
0000388A  504F      6536          addq.w    #8,A7
                    6537   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
0000388C  4878 001C 6538          pea       28
00003890  4878 328E 6539          pea       _UnhandledIRQ4.L
00003894  4E92      6540          jsr       (A2)
00003896  504F      6541          addq.w    #8,A7
                    6542   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00003898  4878 001D 6543          pea       29
0000389C  4878 329A 6544          pea       _UnhandledIRQ5.L
000038A0  4E92      6545          jsr       (A2)
000038A2  504F      6546          addq.w    #8,A7
                    6547   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
000038A4  4878 001E 6548          pea       30
000038A8  4878 32A6 6549          pea       _UnhandledIRQ6.L
000038AC  4E92      6550          jsr       (A2)
000038AE  504F      6551          addq.w    #8,A7
                    6552   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
000038B0  4878 001F 6553          pea       31
000038B4  4878 32B8 6554          pea       _UnhandledIRQ7.L
000038B8  4E92      6555          jsr       (A2)
000038BA  504F      6556          addq.w    #8,A7
                    6557   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
000038BC  4878 002E 6558          pea       46
000038C0  4878 2CBE 6559          pea       _HandleBreakPoint.L
000038C4  4E92      6560          jsr       (A2)
000038C6  504F      6561          addq.w    #8,A7
                    6562   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
000038C8  4878 001D 6563          pea       29
000038CC  4878 239E 6564          pea       _DumpRegistersandPause.L
000038D0  4E92      6565          jsr       (A2)
000038D2  504F      6566          addq.w    #8,A7
                    6567   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
000038D4  4878 0002 6568          pea       2
000038D8  4878 32D2 6569          pea       _BusError.L
000038DC  4E92      6570          jsr       (A2)
000038DE  504F      6571          addq.w    #8,A7
                    6572   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
000038E0  4878 0003 6573          pea       3
000038E4  4878 32E0 6574          pea       _AddressError.L
000038E8  4E92      6575          jsr       (A2)
000038EA  504F      6576          addq.w    #8,A7
                    6577   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
000038EC  4878 0004 6578          pea       4
000038F0  4878 32EE 6579          pea       _IllegalInstruction.L
000038F4  4E92      6580          jsr       (A2)
000038F6  504F      6581          addq.w    #8,A7
                    6582   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
000038F8  4878 0005 6583          pea       5
000038FC  4878 32FC 6584          pea       _Dividebyzero.L
00003900  4E92      6585          jsr       (A2)
00003902  504F      6586          addq.w    #8,A7
                    6587   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00003904  4878 0006 6588          pea       6
00003908  4878 330A 6589          pea       _Check.L
0000390C  4E92      6590          jsr       (A2)
0000390E  504F      6591          addq.w    #8,A7
                    6592   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00003910  4878 0007 6593          pea       7
00003914  4878 3318 6594          pea       _Trapv.L
00003918  4E92      6595          jsr       (A2)
0000391A  504F      6596          addq.w    #8,A7
                    6597   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
0000391C  4878 0008 6598          pea       8
00003920  4878 3326 6599          pea       _PrivError.L
00003924  4E92      6600          jsr       (A2)
00003926  504F      6601          addq.w    #8,A7
                    6602   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00003928  4878 000F 6603          pea       15
0000392C  4878 3334 6604          pea       _UnitIRQ.L
00003930  4E92      6605          jsr       (A2)
00003932  504F      6606          addq.w    #8,A7
                    6607   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00003934  4878 0018 6608          pea       24
00003938  4878 330A 6609          pea       _Check.L
0000393C  4E92      6610          jsr       (A2)
0000393E  504F      6611          addq.w    #8,A7
                    6612   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00003940  4EB8 0BA6 6613          jsr       _FlushKeyboard
                    6614   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00003944  4239 0040 6615          clr.b     4194314
00003948  000A      
                    6616   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    6617   ; if (((char)(PortB & 0x02)) == (char)(0x02))    {
0000394A  1039 0040 6618          move.b    4194306,D0
0000394E  0002      
00003950  C03C 0002 6619          and.b     #2,D0
00003954  0C00 0002 6620          cmp.b     #2,D0
00003958  6628      6621          bne.s     main_7
                    6622   ; LoadFromFlashChip();
0000395A  4EB8 138A 6623          jsr       _LoadFromFlashChip
                    6624   ; printf("\r\nRunning.....") ;
0000395E  4879 0000 6625          pea       @m68kde~1_191.L
00003962  663A      
00003964  4E93      6626          jsr       (A3)
00003966  584F      6627          addq.w    #4,A7
                    6628   ; Oline1("Running.....") ;
00003968  4879 0000 6629          pea       @m68kde~1_192.L
0000396C  664A      
0000396E  4EB8 0A02 6630          jsr       _Oline1
00003972  584F      6631          addq.w    #4,A7
                    6632   ; GoFlag = 1;
00003974  23FC 0000 6633          move.l    #1,_GoFlag.L
00003978  0001 0B00 
0000397C  00DC      
                    6634   ; go() ;
0000397E  4EB8 08B8 6635          jsr       _go
                    6636   main_7:
                    6637   ; }
                    6638   ; // otherwise start the debug monitor
                    6639   ; Oline0(BugMessage) ;
00003982  2F03      6640          move.l    D3,-(A7)
00003984  4EB8 09D4 6641          jsr       _Oline0
00003988  584F      6642          addq.w    #4,A7
                    6643   ; Oline1("By: PJ Davies") ;
0000398A  4879 0000 6644          pea       @m68kde~1_193.L
0000398E  6658      
00003990  4EB8 0A02 6645          jsr       _Oline1
00003994  584F      6646          addq.w    #4,A7
                    6647   ; printf("\r\n%s", BugMessage) ;
00003996  2F03      6648          move.l    D3,-(A7)
00003998  4879 0000 6649          pea       @m68kde~1_194.L
0000399C  6666      
0000399E  4E93      6650          jsr       (A3)
000039A0  504F      6651          addq.w    #8,A7
                    6652   ; printf("\r\n%s", CopyrightMessage) ;
000039A2  2F2E FFFC 6653          move.l    -4(A6),-(A7)
000039A6  4879 0000 6654          pea       @m68kde~1_194.L
000039AA  6666      
000039AC  4E93      6655          jsr       (A3)
000039AE  504F      6656          addq.w    #8,A7
                    6657   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
000039B0  4879 0000 6658          pea       @m68kde~1_195.L
000039B4  666C      
000039B6  4E93      6659          jsr       (A3)
000039B8  584F      6660          addq.w    #4,A7
                    6661   ; menu();
000039BA  4EB8 2F82 6662          jsr       _menu
000039BE  4CDF 0C0C 6663          movem.l   (A7)+,D2/D3/A2/A3
000039C2  4E5E      6664          unlk      A6
000039C4  4E75      6665          rts
                    6666   ; }
                    6667   _strcpy:
000039C6  206F 0004 6668          move.l    (4,A7),A0
000039CA  226F 0008 6669          move.l    (8,A7),A1
000039CE  2008      6670          move.l    A0,D0
                    6671   strcpy_1:
000039D0  10D9      6672          move.b    (A1)+,(A0)+
000039D2  66FC      6673          bne       strcpy_1
000039D4  4E75      6674          rts
                    6675   ULDIV:
000039D6  4E56 0000 6676          link    A6,#0
000039DA  48E7 C000 6677          movem.l D0/D1,-(A7)
000039DE  222E 0008 6678          move.l  8(A6),D1
000039E2  202E 000C 6679          move.l  12(A6),D0
000039E6  6036      6680          bra.s   ldiv_3
                    6681   LDIV:
000039E8  4E56 0000 6682          link    A6,#0
000039EC  48E7 C000 6683          movem.l D0/D1,-(A7)
000039F0  222E 0008 6684          move.l  8(A6),D1
000039F4  202E 000C 6685          move.l  12(A6),D0
000039F8  4A80      6686          tst.l   D0
000039FA  6A0E      6687          bpl.s   ldiv_1
000039FC  4480      6688          neg.l   D0
000039FE  4A81      6689          tst.l   D1
00003A00  6A14      6690          bpl.s   ldiv_2
00003A02  4481      6691          neg.l   D1
00003A04  612A      6692          bsr.s   dodiv
00003A06  4481      6693          neg.l   D1
00003A08  6016      6694          bra.s   ldiv_4
                    6695   ldiv_1:
00003A0A  4A81      6696          tst.l   D1
00003A0C  6A10      6697          bpl.s   ldiv_3
00003A0E  4481      6698          neg.l   D1
00003A10  611E      6699          bsr.s   dodiv
00003A12  4480      6700          neg.l   D0
00003A14  600A      6701          bra.s   ldiv_4
                    6702   ldiv_2:
00003A16  6118      6703          bsr.s   dodiv
00003A18  4480      6704          neg.l   D0
00003A1A  4481      6705          neg.l   D1
00003A1C  6002      6706          bra.s   ldiv_4
                    6707   ldiv_3:
00003A1E  6110      6708          bsr.s   dodiv
                    6709   ldiv_4:
00003A20  2D40 0008 6710          move.l  D0,8(A6)
00003A24  2D41 000C 6711          move.l  D1,12(A6)
00003A28  4CDF 0003 6712          movem.l (A7)+,D0/D1
00003A2C  4E5E      6713          unlk    A6
00003A2E  4E75      6714          rts
                    6715   dodiv:
00003A30  0C81 0000 6716          cmpi.l  #$FFFF,D1
00003A34  FFFF      
00003A36  6236      6717          bhi.s   dodiv_2
00003A38  0C80 0000 6718          cmpi.l  #$FFFF,D0
00003A3C  FFFF      
00003A3E  6210      6719          bhi.s   dodiv_1
00003A40  80C1      6720          divu    D1,D0
00003A42  2200      6721          move.l  D0,D1
00003A44  4241      6722          clr.w   D1
00003A46  4841      6723          swap    D1
00003A48  0280 0000 6724          andi.l  #$FFFF,D0
00003A4C  FFFF      
00003A4E  4E75      6725          rts
                    6726   dodiv_1:
00003A50  48A7 A000 6727          movem.w D0/D2,-(A7)
00003A54  4240      6728          clr.w   D0
00003A56  4840      6729          swap    D0
00003A58  80C1      6730          divu    D1,D0
00003A5A  3400      6731          move.w  D0,D2
00003A5C  301F      6732          move.w  (A7)+,D0
00003A5E  80C1      6733          divu    D1,D0
00003A60  4840      6734          swap    D0
00003A62  4281      6735          clr.l   D1
00003A64  3200      6736          move.w  D0,D1
00003A66  3002      6737          move.w  D2,D0
00003A68  4840      6738          swap    D0
00003A6A  341F      6739          move.w  (A7)+,D2
00003A6C  4E75      6740          rts
                    6741   dodiv_2:
00003A6E  48E7 3800 6742          movem.l D2/D3/D4,-(A7)
00003A72  2401      6743          move.l  D1,D2
00003A74  4242      6744          clr.w   D2
00003A76  4842      6745          swap    D2
00003A78  5282      6746          addq.l  #1,D2
00003A7A  2600      6747          move.l  D0,D3
00003A7C  2801      6748          move.l  D1,D4
00003A7E  2202      6749          move.l  D2,D1
00003A80  61CE      6750          bsr.s   dodiv_1
00003A82  2204      6751          move.l  D4,D1
00003A84  82C2      6752          divu    D2,D1
00003A86  80C1      6753          divu    D1,D0
00003A88  0280 0000 6754          andi.l  #$FFFF,D0
00003A8C  FFFF      
                    6755   dodiv_3:
00003A8E  2204      6756          move.l  D4,D1
00003A90  2404      6757          move.l  D4,D2
00003A92  4842      6758          swap    D2
00003A94  C2C0      6759          mulu    D0,D1
00003A96  C4C0      6760          mulu    D0,D2
00003A98  4842      6761          swap    D2
00003A9A  D282      6762          add.l   D2,D1
00003A9C  9283      6763          sub.l   D3,D1
00003A9E  620A      6764          bhi.s   dodiv_4
00003AA0  4481      6765          neg.l   D1
00003AA2  B881      6766          cmp.l   D1,D4
00003AA4  6208      6767          bhi.s   dodiv_5
00003AA6  5280      6768          addq.l  #1,D0
00003AA8  60E4      6769          bra.s   dodiv_3
                    6770   dodiv_4:
00003AAA  5380      6771          subq.l  #1,D0
00003AAC  60E0      6772          bra.s   dodiv_3
                    6773   dodiv_5:
00003AAE  4CDF 001C 6774          movem.l (A7)+,D2/D3/D4
00003AB2  4E75      6775          rts
                    6776   _putch:
00003AB4  4E56 0000 6777          link      A6,#0
00003AB8  48E7 2000 6778          movem.l   D2,-(A7)
00003ABC  242E 0008 6779          move.l    8(A6),D2
00003AC0  0C82 0000 6780          cmp.l     #10,D2
00003AC4  000A      
00003AC6  660A      6781          bne.s     putch_1
00003AC8  4878 000D 6782          pea       13
00003ACC  6100 D06E 6783          bsr       __putch
00003AD0  584F      6784          addq.w    #4,A7
                    6785   putch_1:
00003AD2  2F02      6786          move.l    D2,-(A7)
00003AD4  6100 D066 6787          bsr       __putch
00003AD8  584F      6788          addq.w    #4,A7
00003ADA  2002      6789          move.l    D2,D0
00003ADC  4CDF 0004 6790          movem.l   (A7)+,D2
00003AE0  4E5E      6791          unlk      A6
00003AE2  4E75      6792          rts
                    6793   _getch:
00003AE4  48E7 2000 6794          movem.l   D2,-(A7)
00003AE8  2439 0B00 6795          move.l    __ungetbuf,D2
00003AEC  00C0      
00003AEE  2039 0B00 6796          move.l    __ungetbuf,D0
00003AF2  00C0      
00003AF4  0C80 FFFF 6797          cmp.l     #-1,D0
00003AF8  FFFF      
00003AFA  670C      6798          beq.s     getch_1
00003AFC  23FC FFFF 6799          move.l    #-1,__ungetbuf
00003B00  FFFF 0B00 
00003B04  00C0      
00003B06  6010      6800          bra.s     getch_3
                    6801   getch_1:
00003B08  6100 D05E 6802          bsr       __getch
00003B0C  2400      6803          move.l    D0,D2
00003B0E  0C80 0000 6804          cmp.l     #13,D0
00003B12  000D      
00003B14  6602      6805          bne.s     getch_3
00003B16  740A      6806          moveq     #10,D2
                    6807   getch_3:
00003B18  2002      6808          move.l    D2,D0
00003B1A  4CDF 0004 6809          movem.l   (A7)+,D2
00003B1E  4E75      6810          rts
                    6811   _tolower:
00003B20  4E56 0000 6812          link      A6,#0
00003B24  48E7 2000 6813          movem.l   D2,-(A7)
00003B28  242E 0008 6814          move.l    8(A6),D2
00003B2C  0C82 0000 6815          cmp.l     #65,D2
00003B30  0041      
00003B32  6D0E      6816          blt.s     tolower_1
00003B34  0C82 0000 6817          cmp.l     #90,D2
00003B38  005A      
00003B3A  6E06      6818          bgt.s     tolower_1
00003B3C  84BC 0000 6819          or.l      #32,D2
00003B40  0020      
                    6820   tolower_1:
00003B42  2002      6821          move.l    D2,D0
00003B44  4CDF 0004 6822          movem.l   (A7)+,D2
00003B48  4E5E      6823          unlk      A6
00003B4A  4E75      6824          rts
                    6825   _sprintf:
00003B4C  4E56 FFFC 6826          link      A6,#-4
00003B50  48E7 2000 6827          movem.l   D2,-(A7)
00003B54  41EE 000C 6828          lea       12(A6),A0
00003B58  5848      6829          addq.w    #4,A0
00003B5A  2408      6830          move.l    A0,D2
00003B5C  2F02      6831          move.l    D2,-(A7)
00003B5E  2F2E 000C 6832          move.l    12(A6),-(A7)
00003B62  2F2E 0008 6833          move.l    8(A6),-(A7)
00003B66  6100 09EC 6834          bsr       _vsprintf
00003B6A  DEFC 000C 6835          add.w     #12,A7
00003B6E  2D40 FFFC 6836          move.l    D0,-4(A6)
00003B72  4282      6837          clr.l     D2
00003B74  202E FFFC 6838          move.l    -4(A6),D0
00003B78  4CDF 0004 6839          movem.l   (A7)+,D2
00003B7C  4E5E      6840          unlk      A6
00003B7E  4E75      6841          rts
                    6842   _memset:
00003B80  206F 0004 6843          move.l    (4,A7),A0
00003B84  202F 0008 6844          move.l    (8,A7),D0
00003B88  222F 000C 6845          move.l    (12,A7),D1
00003B8C  2248      6846          move.l    A0,A1	
                    6847   memset_1:
00003B8E  12C0      6848          move.b    D0,(A1)+
00003B90  5341      6849          subq      #1,D1
00003B92  66FA      6850          bne       memset_1
00003B94  2008      6851          move.l    A0,D0
00003B96  4E75      6852          rts
                    6853   _strcat:
00003B98  206F 0004 6854          move.l    (4,A7),A0	
00003B9C  226F 0008 6855          move.l    (8,A7),A1	
00003BA0  2008      6856          move.l    A0,D0		
                    6857   strcat_0:
00003BA2  4A18      6858          tst.b     (A0)+
00003BA4  66FC      6859          bne       strcat_0
00003BA6  5348      6860          subq      #1,A0
                    6861   strcat_1:
00003BA8  10D9      6862          move.b    (A1)+,(A0)+
00003BAA  66FC      6863          bne       strcat_1
00003BAC  4E75      6864          rts
                    6865   _toupper:
00003BAE  4E56 0000 6866          link      A6,#0
00003BB2  48E7 2000 6867          movem.l   D2,-(A7)
00003BB6  242E 0008 6868          move.l    8(A6),D2
00003BBA  0C82 0000 6869          cmp.l     #97,D2
00003BBE  0061      
00003BC0  6D0E      6870          blt.s     toupper_1
00003BC2  0C82 0000 6871          cmp.l     #122,D2
00003BC6  007A      
00003BC8  6E06      6872          bgt.s     toupper_1
00003BCA  C4BC 0000 6873          and.l     #95,D2
00003BCE  005F      
                    6874   toupper_1:
00003BD0  2002      6875          move.l    D2,D0
00003BD2  4CDF 0004 6876          movem.l   (A7)+,D2
00003BD6  4E5E      6877          unlk      A6
00003BD8  4E75      6878          rts
                    6879   @vsscanf_scanread:
00003BDA  4E56 FFFC 6880          link      A6,#-4
00003BDE  48E7 0020 6881          movem.l   A2,-(A7)
00003BE2  45F9 0000 6882          lea       @vsscanf_bufx,A2
00003BE6  66B4      
00003BE8  4AAE 0008 6883          tst.l     8(A6)
00003BEC  6722      6884          beq.s     @vsscanf_scanread_1
00003BEE  206E 0008 6885          move.l    8(A6),A0
00003BF2  58AE 0008 6886          addq.l    #4,8(A6)
00003BF6  2050      6887          move.l    (A0),A0
00003BF8  1010      6888          move.b    (A0),D0
00003BFA  4880      6889          ext.w     D0
00003BFC  48C0      6890          ext.l     D0
00003BFE  2D40 FFFC 6891          move.l    D0,-4(A6)
00003C02  6706      6892          beq.s     @vsscanf_scanread_3
00003C04  202E FFFC 6893          move.l    -4(A6),D0
00003C08  6002      6894          bra.s     @vsscanf_scanread_4
                    6895   @vsscanf_scanread_3:
00003C0A  70FF      6896          moveq     #-1,D0
                    6897   @vsscanf_scanread_4:
00003C0C  6000 0032 6898          bra       @vsscanf_scanread_5
                    6899   @vsscanf_scanread_1:
00003C10  2052      6900          move.l    (A2),A0
00003C12  1010      6901          move.b    (A0),D0
00003C14  6620      6902          bne.s     @vsscanf_scanread_6
00003C16  4879 0B00 6903          pea       @vsscanf_buf
00003C1A  0546      
00003C1C  6100 1038 6904          bsr       _gets
00003C20  584F      6905          addq.w    #4,A7
00003C22  2480      6906          move.l    D0,(A2)
00003C24  4879 0000 6907          pea       @vsscanf_1
00003C28  66B8      
00003C2A  4879 0B00 6908          pea       @vsscanf_buf
00003C2E  0546      
00003C30  6100 FF66 6909          bsr       _strcat
00003C34  504F      6910          addq.w    #8,A7
                    6911   @vsscanf_scanread_6:
00003C36  2052      6912          move.l    (A2),A0
00003C38  5292      6913          addq.l    #1,(A2)
00003C3A  1010      6914          move.b    (A0),D0
00003C3C  4880      6915          ext.w     D0
00003C3E  48C0      6916          ext.l     D0
                    6917   @vsscanf_scanread_5:
00003C40  4CDF 0400 6918          movem.l   (A7)+,A2
00003C44  4E5E      6919          unlk      A6
00003C46  4E75      6920          rts
                    6921   @vsscanf_scanputback:
00003C48  4E56 0000 6922          link      A6,#0
00003C4C  48E7 3000 6923          movem.l   D2/D3,-(A7)
00003C50  242E 000C 6924          move.l    12(A6),D2
00003C54  262E 0008 6925          move.l    8(A6),D3
00003C58  6718      6926          beq.s     @vsscanf_scanputback_1
00003C5A  0C82 FFFF 6927          cmp.l     #-1,D2
00003C5E  FFFF      
00003C60  670A      6928          beq.s     @vsscanf_scanputback_3
00003C62  5983      6929          subq.l    #4,D3
00003C64  2043      6930          move.l    D3,A0
00003C66  2050      6931          move.l    (A0),A0
00003C68  1082      6932          move.b    D2,(A0)
00003C6A  6004      6933          bra.s     @vsscanf_scanputback_4
                    6934   @vsscanf_scanputback_3:
00003C6C  2043      6935          move.l    D3,A0
00003C6E  5390      6936          subq.l    #1,(A0)
                    6937   @vsscanf_scanputback_4:
00003C70  602E      6938          bra.s     @vsscanf_scanputback_6
                    6939   @vsscanf_scanputback_1:
00003C72  41F9 0B00 6940          lea       @vsscanf_buf,A0
00003C76  0546      
00003C78  2008      6941          move.l    A0,D0
00003C7A  B0B9 0000 6942          cmp.l     @vsscanf_bufx,D0
00003C7E  66B4      
00003C80  6610      6943          bne.s     @vsscanf_scanputback_5
00003C82  4239 0B00 6944          clr.b     @vsscanf_buf
00003C86  0546      
00003C88  2F02      6945          move.l    D2,-(A7)
00003C8A  6100 103C 6946          bsr       _ungetch
00003C8E  584F      6947          addq.w    #4,A7
00003C90  600E      6948          bra.s     @vsscanf_scanputback_6
                    6949   @vsscanf_scanputback_5:
00003C92  53B9 0000 6950          subq.l    #1,@vsscanf_bufx
00003C96  66B4      
00003C98  2079 0000 6951          move.l    @vsscanf_bufx,A0
00003C9C  66B4      
00003C9E  1082      6952          move.b    D2,(A0)
                    6953   @vsscanf_scanputback_6:
00003CA0  2002      6954          move.l    D2,D0
00003CA2  4CDF 000C 6955          movem.l   (A7)+,D2/D3
00003CA6  4E5E      6956          unlk      A6
00003CA8  4E75      6957          rts
                    6958   @vsscanf_scanspace:
00003CAA  4E56 0000 6959          link      A6,#0
00003CAE  48E7 2000 6960          movem.l   D2,-(A7)
                    6961   @vsscanf_scanspace_1:
00003CB2  2F2E 0008 6962          move.l    8(A6),-(A7)
00003CB6  6100 FF22 6963          bsr       @vsscanf_scanread
00003CBA  584F      6964          addq.w    #4,A7
00003CBC  2400      6965          move.l    D0,D2
00003CBE  206E 000C 6966          move.l    12(A6),A0
00003CC2  5290      6967          addq.l    #1,(A0)
00003CC4  2042      6968          move.l    D2,A0
00003CC6  43F9 0000 6969          lea       __ctype,A1
00003CCA  66BA      
00003CCC  1030 9801 6970          move.b    1(A0,A1.L),D0
00003CD0  C03C 0010 6971          and.b     #16,D0
00003CD4  66DC      6972          bne       @vsscanf_scanspace_1
00003CD6  2002      6973          move.l    D2,D0
00003CD8  4CDF 0004 6974          movem.l   (A7)+,D2
00003CDC  4E5E      6975          unlk      A6
00003CDE  4E75      6976          rts
                    6977   @vsscanf_scanselect:
00003CE0  4E56 0000 6978          link      A6,#0
00003CE4  48E7 3F20 6979          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00003CE8  262E 000C 6980          move.l    12(A6),D3
00003CEC  2C2E 0018 6981          move.l    24(A6),D6
00003CF0  2E2E 0014 6982          move.l    20(A6),D7
00003CF4  2043      6983          move.l    D3,A0
00003CF6  1010      6984          move.b    (A0),D0
00003CF8  4880      6985          ext.w     D0
00003CFA  48C0      6986          ext.l     D0
00003CFC  0C80 0000 6987          cmp.l     #94,D0
00003D00  005E      
00003D02  6608      6988          bne.s     @vsscanf_scanselect_1
00003D04  347C 0001 6989          move.w    #1,A2
00003D08  5283      6990          addq.l    #1,D3
00003D0A  6004      6991          bra.s     @vsscanf_scanselect_2
                    6992   @vsscanf_scanselect_1:
00003D0C  347C 0000 6993          move.w    #0,A2
                    6994   @vsscanf_scanselect_2:
00003D10  202E 0010 6995          move.l    16(A6),D0
00003D14  53AE 0010 6996          subq.l    #1,16(A6)
00003D18  4A80      6997          tst.l     D0
00003D1A  6700 0108 6998          beq       @vsscanf_scanselect_5
00003D1E  2F2E 0008 6999          move.l    8(A6),-(A7)
00003D22  6100 FEB6 7000          bsr       @vsscanf_scanread
00003D26  584F      7001          addq.w    #4,A7
00003D28  2800      7002          move.l    D0,D4
00003D2A  0C84 FFFF 7003          cmp.l     #-1,D4
00003D2E  FFFF      
00003D30  6604      7004          bne.s     @vsscanf_scanselect_6
00003D32  6000 00F0 7005          bra       @vsscanf_scanselect_5
                    7006   @vsscanf_scanselect_6:
00003D36  206E 001C 7007          move.l    28(A6),A0
00003D3A  5290      7008          addq.l    #1,(A0)
00003D3C  4285      7009          clr.l     D5
00003D3E  4282      7010          clr.l     D2
                    7011   @vsscanf_scanselect_8:
00003D40  2043      7012          move.l    D3,A0
00003D42  1030 2800 7013          move.b    0(A0,D2.L),D0
00003D46  4880      7014          ext.w     D0
00003D48  48C0      7015          ext.l     D0
00003D4A  0C80 0000 7016          cmp.l     #93,D0
00003D4E  005D      
00003D50  6700 008E 7017          beq       @vsscanf_scanselect_10
00003D54  4A82      7018          tst.l     D2
00003D56  6716      7019          beq.s     @vsscanf_scanselect_11
00003D58  2043      7020          move.l    D3,A0
00003D5A  1030 2800 7021          move.b    0(A0,D2.L),D0
00003D5E  4880      7022          ext.w     D0
00003D60  48C0      7023          ext.l     D0
00003D62  0C80 0000 7024          cmp.l     #93,D0
00003D66  005D      
00003D68  6604      7025          bne.s     @vsscanf_scanselect_11
00003D6A  6000 0074 7026          bra       @vsscanf_scanselect_10
                    7027   @vsscanf_scanselect_11:
00003D6E  4A82      7028          tst.l     D2
00003D70  6700 0058 7029          beq       @vsscanf_scanselect_15
00003D74  2043      7030          move.l    D3,A0
00003D76  1030 2800 7031          move.b    0(A0,D2.L),D0
00003D7A  4880      7032          ext.w     D0
00003D7C  48C0      7033          ext.l     D0
00003D7E  0C80 0000 7034          cmp.l     #45,D0
00003D82  002D      
00003D84  6600 0044 7035          bne       @vsscanf_scanselect_15
00003D88  2043      7036          move.l    D3,A0
00003D8A  2002      7037          move.l    D2,D0
00003D8C  5380      7038          subq.l    #1,D0
00003D8E  2243      7039          move.l    D3,A1
00003D90  2F08      7040          move.l    A0,-(A7)
00003D92  2042      7041          move.l    D2,A0
00003D94  1230 0800 7042          move.b    0(A0,D0.L),D1
00003D98  B230 9801 7043          cmp.b     1(A0,A1.L),D1
00003D9C  6C00 002C 7044          bge       @vsscanf_scanselect_15
00003DA0  205F      7045          move.l    (A7)+,A0
00003DA2  2043      7046          move.l    D3,A0
00003DA4  2002      7047          move.l    D2,D0
00003DA6  5380      7048          subq.l    #1,D0
00003DA8  1030 0800 7049          move.b    0(A0,D0.L),D0
00003DAC  4880      7050          ext.w     D0
00003DAE  48C0      7051          ext.l     D0
00003DB0  B880      7052          cmp.l     D0,D4
00003DB2  6D12      7053          blt.s     @vsscanf_scanselect_17
00003DB4  2043      7054          move.l    D3,A0
00003DB6  2242      7055          move.l    D2,A1
00003DB8  1031 8801 7056          move.b    1(A1,A0.L),D0
00003DBC  4880      7057          ext.w     D0
00003DBE  48C0      7058          ext.l     D0
00003DC0  B880      7059          cmp.l     D0,D4
00003DC2  6E02      7060          bgt.s     @vsscanf_scanselect_17
00003DC4  601A      7061          bra.s     @vsscanf_scanselect_10
                    7062   @vsscanf_scanselect_17:
00003DC6  5282      7063          addq.l    #1,D2
00003DC8  6010      7064          bra.s     @vsscanf_scanselect_19
                    7065   @vsscanf_scanselect_15:
00003DCA  2043      7066          move.l    D3,A0
00003DCC  1030 2800 7067          move.b    0(A0,D2.L),D0
00003DD0  4880      7068          ext.w     D0
00003DD2  48C0      7069          ext.l     D0
00003DD4  B880      7070          cmp.l     D0,D4
00003DD6  6602      7071          bne.s     @vsscanf_scanselect_19
00003DD8  6006      7072          bra.s     @vsscanf_scanselect_10
                    7073   @vsscanf_scanselect_19:
00003DDA  5282      7074          addq.l    #1,D2
00003DDC  6000 FF62 7075          bra       @vsscanf_scanselect_8
                    7076   @vsscanf_scanselect_10:
00003DE0  4A82      7077          tst.l     D2
00003DE2  6712      7078          beq.s     @vsscanf_scanselect_23
00003DE4  2043      7079          move.l    D3,A0
00003DE6  1030 2800 7080          move.b    0(A0,D2.L),D0
00003DEA  4880      7081          ext.w     D0
00003DEC  48C0      7082          ext.l     D0
00003DEE  0C80 0000 7083          cmp.l     #93,D0
00003DF2  005D      
00003DF4  6702      7084          beq.s     @vsscanf_scanselect_21
                    7085   @vsscanf_scanselect_23:
00003DF6  7A01      7086          moveq     #1,D5
                    7087   @vsscanf_scanselect_21:
00003DF8  200A      7088          move.l    A2,D0
00003DFA  6712      7089          beq.s     @vsscanf_scanselect_24
00003DFC  4A85      7090          tst.l     D5
00003DFE  660C      7091          bne.s     @vsscanf_scanselect_26
00003E00  4A87      7092          tst.l     D7
00003E02  6606      7093          bne.s     @vsscanf_scanselect_28
00003E04  2046      7094          move.l    D6,A0
00003E06  5286      7095          addq.l    #1,D6
00003E08  1084      7096          move.b    D4,(A0)
                    7097   @vsscanf_scanselect_28:
00003E0A  6014      7098          bra.s     @vsscanf_scanselect_4
                    7099   @vsscanf_scanselect_26:
00003E0C  6016      7100          bra.s     @vsscanf_scanselect_5
                    7101   @vsscanf_scanselect_24:
00003E0E  4A85      7102          tst.l     D5
00003E10  670C      7103          beq.s     @vsscanf_scanselect_30
00003E12  4A87      7104          tst.l     D7
00003E14  6606      7105          bne.s     @vsscanf_scanselect_32
00003E16  2046      7106          move.l    D6,A0
00003E18  5286      7107          addq.l    #1,D6
00003E1A  1084      7108          move.b    D4,(A0)
                    7109   @vsscanf_scanselect_32:
00003E1C  6002      7110          bra.s     @vsscanf_scanselect_4
                    7111   @vsscanf_scanselect_30:
00003E1E  6004      7112          bra.s     @vsscanf_scanselect_5
                    7113   @vsscanf_scanselect_4:
00003E20  6000 FEEE 7114          bra       @vsscanf_scanselect_2
                    7115   @vsscanf_scanselect_5:
00003E24  0C84 FFFF 7116          cmp.l     #-1,D4
00003E28  FFFF      
00003E2A  6712      7117          beq.s     @vsscanf_scanselect_34
00003E2C  2F04      7118          move.l    D4,-(A7)
00003E2E  2F2E 0008 7119          move.l    8(A6),-(A7)
00003E32  6100 FE14 7120          bsr       @vsscanf_scanputback
00003E36  504F      7121          addq.w    #8,A7
00003E38  206E 001C 7122          move.l    28(A6),A0
00003E3C  5390      7123          subq.l    #1,(A0)
                    7124   @vsscanf_scanselect_34:
00003E3E  4A87      7125          tst.l     D7
00003E40  6604      7126          bne.s     @vsscanf_scanselect_36
00003E42  2046      7127          move.l    D6,A0
00003E44  4210      7128          clr.b     (A0)
                    7129   @vsscanf_scanselect_36:
00003E46  5283      7130          addq.l    #1,D3
00003E48  2043      7131          move.l    D3,A0
00003E4A  1010      7132          move.b    (A0),D0
00003E4C  4880      7133          ext.w     D0
00003E4E  48C0      7134          ext.l     D0
00003E50  0C80 0000 7135          cmp.l     #93,D0
00003E54  005D      
00003E56  6702      7136          beq.s     @vsscanf_scanselect_40
00003E58  60EC      7137          bra       @vsscanf_scanselect_36
                    7138   @vsscanf_scanselect_40:
00003E5A  5283      7139          addq.l    #1,D3
00003E5C  2003      7140          move.l    D3,D0
00003E5E  4CDF 04FC 7141          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003E62  4E5E      7142          unlk      A6
00003E64  4E75      7143          rts
                    7144   _scanflush:
00003E66  41F9 0B00 7145          lea       @vsscanf_buf,A0
00003E6A  0546      
00003E6C  23C8 0000 7146          move.l    A0,@vsscanf_bufx
00003E70  66B4      
00003E72  4239 0B00 7147          clr.b     @vsscanf_buf
00003E76  0546      
00003E78  4878 FFFF 7148          pea       -1
00003E7C  6100 0E4A 7149          bsr       _ungetch
00003E80  584F      7150          addq.w    #4,A7
00003E82  4E75      7151          rts
                    7152   _vsscanf:
00003E84  4E56 FF88 7153          link      A6,#-120
00003E88  48E7 3F3C 7154          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003E8C  47F8 3BDA 7155          lea       @vsscanf_scanread,A3
00003E90  4AAE 0008 7156          tst.l     8(A6)
00003E94  6706      7157          beq.s     vsscanf_1
00003E96  41EE 0008 7158          lea       8(A6),A0
00003E9A  6004      7159          bra.s     vsscanf_2
                    7160   vsscanf_1:
00003E9C  4280      7161          clr.l     D0
00003E9E  2040      7162          move.l    D0,A0
                    7163   vsscanf_2:
00003EA0  2A08      7164          move.l    A0,D5
00003EA2  42AE FFE4 7165          clr.l     -28(A6)
00003EA6  4284      7166          clr.l     D4
                    7167   vsscanf_3:
00003EA8  206E 000C 7168          move.l    12(A6),A0
00003EAC  52AE 000C 7169          addq.l    #1,12(A6)
00003EB0  1010      7170          move.b    (A0),D0
00003EB2  4880      7171          ext.w     D0
00003EB4  48C0      7172          ext.l     D0
00003EB6  2600      7173          move.l    D0,D3
00003EB8  6700 05AC 7174          beq       vsscanf_5
00003EBC  4286      7175          clr.l     D6
00003EBE  387C 0000 7176          move.w    #0,A4
00003EC2  0C83 0000 7177          cmp.l     #32,D3
00003EC6  0020      
00003EC8  6712      7178          beq.s     vsscanf_8
00003ECA  0C83 0000 7179          cmp.l     #9,D3
00003ECE  0009      
00003ED0  670A      7180          beq.s     vsscanf_8
00003ED2  0C83 0000 7181          cmp.l     #10,D3
00003ED6  000A      
00003ED8  6600 0048 7182          bne       vsscanf_6
                    7183   vsscanf_8:
00003EDC  2F05      7184          move.l    D5,-(A7)
00003EDE  4E93      7185          jsr       (A3)
00003EE0  584F      7186          addq.w    #4,A7
00003EE2  2400      7187          move.l    D0,D2
00003EE4  52AE FFE4 7188          addq.l    #1,-28(A6)
00003EE8  0C82 FFFF 7189          cmp.l     #-1,D2
00003EEC  FFFF      
00003EEE  660E      7190          bne.s     vsscanf_11
00003EF0  4A84      7191          tst.l     D4
00003EF2  6704      7192          beq.s     vsscanf_13
00003EF4  2004      7193          move.l    D4,D0
00003EF6  6002      7194          bra.s     vsscanf_14
                    7195   vsscanf_13:
00003EF8  70FF      7196          moveq     #-1,D0
                    7197   vsscanf_14:
00003EFA  6000 056C 7198          bra       vsscanf_15
                    7199   vsscanf_11:
00003EFE  2042      7200          move.l    D2,A0
00003F00  43F9 0000 7201          lea       __ctype,A1
00003F04  66BA      
00003F06  1030 9801 7202          move.b    1(A0,A1.L),D0
00003F0A  C03C 0010 7203          and.b     #16,D0
00003F0E  66CC      7204          bne       vsscanf_8
00003F10  53AE FFE4 7205          subq.l    #1,-28(A6)
00003F14  2F02      7206          move.l    D2,-(A7)
00003F16  2F05      7207          move.l    D5,-(A7)
00003F18  6100 FD2E 7208          bsr       @vsscanf_scanputback
00003F1C  504F      7209          addq.w    #8,A7
00003F1E  6000 0542 7210          bra       vsscanf_139
                    7211   vsscanf_6:
00003F22  0C83 0000 7212          cmp.l     #37,D3
00003F26  0025      
00003F28  6600 0502 7213          bne       vsscanf_127
00003F2C  206E 000C 7214          move.l    12(A6),A0
00003F30  52AE 000C 7215          addq.l    #1,12(A6)
00003F34  1010      7216          move.b    (A0),D0
00003F36  4880      7217          ext.w     D0
00003F38  48C0      7218          ext.l     D0
00003F3A  2600      7219          move.l    D0,D3
00003F3C  42AE FFEC 7220          clr.l     -20(A6)
00003F40  4286      7221          clr.l     D6
00003F42  42AE FFE8 7222          clr.l     -24(A6)
00003F46  347C 7FFF 7223          move.w    #32767,A2
00003F4A  0C83 0000 7224          cmp.l     #42,D3
00003F4E  002A      
00003F50  6612      7225          bne.s     vsscanf_18
00003F52  7C01      7226          moveq     #1,D6
00003F54  206E 000C 7227          move.l    12(A6),A0
00003F58  52AE 000C 7228          addq.l    #1,12(A6)
00003F5C  1010      7229          move.b    (A0),D0
00003F5E  4880      7230          ext.w     D0
00003F60  48C0      7231          ext.l     D0
00003F62  2600      7232          move.l    D0,D3
                    7233   vsscanf_18:
00003F64  2043      7234          move.l    D3,A0
00003F66  43F9 0000 7235          lea       __ctype,A1
00003F6A  66BA      
00003F6C  1030 9801 7236          move.b    1(A0,A1.L),D0
00003F70  C03C 0004 7237          and.b     #4,D0
00003F74  6700 004E 7238          beq       vsscanf_24
00003F78  2003      7239          move.l    D3,D0
00003F7A  0480 0000 7240          sub.l     #48,D0
00003F7E  0030      
00003F80  2440      7241          move.l    D0,A2
                    7242   vsscanf_22:
00003F82  206E 000C 7243          move.l    12(A6),A0
00003F86  52AE 000C 7244          addq.l    #1,12(A6)
00003F8A  1010      7245          move.b    (A0),D0
00003F8C  4880      7246          ext.w     D0
00003F8E  48C0      7247          ext.l     D0
00003F90  2600      7248          move.l    D0,D3
00003F92  2040      7249          move.l    D0,A0
00003F94  43F9 0000 7250          lea       __ctype,A1
00003F98  66BA      
00003F9A  1030 9801 7251          move.b    1(A0,A1.L),D0
00003F9E  C0BC 0000 7252          and.l     #255,D0
00003FA2  00FF      
00003FA4  C0BC 0000 7253          and.l     #4,D0
00003FA8  0004      
00003FAA  6718      7254          beq.s     vsscanf_24
00003FAC  70D0      7255          moveq     #-48,D0
00003FAE  2F0A      7256          move.l    A2,-(A7)
00003FB0  4878 000A 7257          pea       10
00003FB4  6100 0C12 7258          bsr       LMUL
00003FB8  2217      7259          move.l    (A7),D1
00003FBA  504F      7260          addq.w    #8,A7
00003FBC  D283      7261          add.l     D3,D1
00003FBE  D081      7262          add.l     D1,D0
00003FC0  2440      7263          move.l    D0,A2
00003FC2  60BE      7264          bra       vsscanf_22
                    7265   vsscanf_24:
00003FC4  0C83 0000 7266          cmp.l     #108,D3
00003FC8  006C      
00003FCA  6708      7267          beq.s     vsscanf_27
00003FCC  0C83 0000 7268          cmp.l     #76,D3
00003FD0  004C      
00003FD2  661A      7269          bne.s     vsscanf_25
                    7270   vsscanf_27:
00003FD4  2D7C 0000 7271          move.l    #1,-24(A6)
00003FD8  0001 FFE8 
00003FDC  206E 000C 7272          move.l    12(A6),A0
00003FE0  52AE 000C 7273          addq.l    #1,12(A6)
00003FE4  1010      7274          move.b    (A0),D0
00003FE6  4880      7275          ext.w     D0
00003FE8  48C0      7276          ext.l     D0
00003FEA  2600      7277          move.l    D0,D3
00003FEC  6020      7278          bra.s     vsscanf_28
                    7279   vsscanf_25:
00003FEE  0C83 0000 7280          cmp.l     #104,D3
00003FF2  0068      
00003FF4  6618      7281          bne.s     vsscanf_28
00003FF6  2D7C 0000 7282          move.l    #1,-20(A6)
00003FFA  0001 FFEC 
00003FFE  206E 000C 7283          move.l    12(A6),A0
00004002  52AE 000C 7284          addq.l    #1,12(A6)
00004006  1010      7285          move.b    (A0),D0
00004008  4880      7286          ext.w     D0
0000400A  48C0      7287          ext.l     D0
0000400C  2600      7288          move.l    D0,D3
                    7289   vsscanf_28:
0000400E  0C83 0000 7290          cmp.l     #91,D3
00004012  005B      
00004014  6600 0036 7291          bne       vsscanf_30
00004018  4A86      7292          tst.l     D6
0000401A  660A      7293          bne.s     vsscanf_32
0000401C  206E 0010 7294          move.l    16(A6),A0
00004020  58AE 0010 7295          addq.l    #4,16(A6)
00004024  2E10      7296          move.l    (A0),D7
                    7297   vsscanf_32:
00004026  486E FFE4 7298          pea       -28(A6)
0000402A  2F07      7299          move.l    D7,-(A7)
0000402C  2F06      7300          move.l    D6,-(A7)
0000402E  2F0A      7301          move.l    A2,-(A7)
00004030  2F2E 000C 7302          move.l    12(A6),-(A7)
00004034  2F05      7303          move.l    D5,-(A7)
00004036  6100 FCA8 7304          bsr       @vsscanf_scanselect
0000403A  DEFC 0018 7305          add.w     #24,A7
0000403E  2D40 000C 7306          move.l    D0,12(A6)
00004042  4A86      7307          tst.l     D6
00004044  6602      7308          bne.s     vsscanf_34
00004046  5284      7309          addq.l    #1,D4
                    7310   vsscanf_34:
00004048  6000 0418 7311          bra       vsscanf_139
                    7312   vsscanf_30:
0000404C  0C83 0000 7313          cmp.l     #110,D3
00004050  006E      
00004052  661A      7314          bne.s     vsscanf_36
00004054  4A86      7315          tst.l     D6
00004056  6612      7316          bne.s     vsscanf_38
00004058  206E 0010 7317          move.l    16(A6),A0
0000405C  58AE 0010 7318          addq.l    #4,16(A6)
00004060  2E10      7319          move.l    (A0),D7
00004062  2047      7320          move.l    D7,A0
00004064  20AE FFE4 7321          move.l    -28(A6),(A0)
00004068  5284      7322          addq.l    #1,D4
                    7323   vsscanf_38:
0000406A  6000 03F6 7324          bra       vsscanf_139
                    7325   vsscanf_36:
0000406E  0C83 0000 7326          cmp.l     #115,D3
00004072  0073      
00004074  6600 00AC 7327          bne       vsscanf_40
00004078  486E FFE4 7328          pea       -28(A6)
0000407C  2F05      7329          move.l    D5,-(A7)
0000407E  6100 FC2A 7330          bsr       @vsscanf_scanspace
00004082  504F      7331          addq.w    #8,A7
00004084  2400      7332          move.l    D0,D2
00004086  4A86      7333          tst.l     D6
00004088  660A      7334          bne.s     vsscanf_42
0000408A  206E 0010 7335          move.l    16(A6),A0
0000408E  58AE 0010 7336          addq.l    #4,16(A6)
00004092  2E10      7337          move.l    (A0),D7
                    7338   vsscanf_42:
00004094  52AE FFE4 7339          addq.l    #1,-28(A6)
                    7340   vsscanf_44:
00004098  200A      7341          move.l    A2,D0
0000409A  534A      7342          subq.w    #1,A2
0000409C  4A80      7343          tst.l     D0
0000409E  6700 0038 7344          beq       vsscanf_46
000040A2  2042      7345          move.l    D2,A0
000040A4  43F9 0000 7346          lea       __ctype,A1
000040A8  66BA      
000040AA  1030 9801 7347          move.b    1(A0,A1.L),D0
000040AE  C03C 0010 7348          and.b     #16,D0
000040B2  6624      7349          bne.s     vsscanf_46
000040B4  0C82 FFFF 7350          cmp.l     #-1,D2
000040B8  FFFF      
000040BA  671C      7351          beq.s     vsscanf_46
000040BC  387C 0001 7352          move.w    #1,A4
000040C0  4A86      7353          tst.l     D6
000040C2  6606      7354          bne.s     vsscanf_47
000040C4  2047      7355          move.l    D7,A0
000040C6  5287      7356          addq.l    #1,D7
000040C8  1082      7357          move.b    D2,(A0)
                    7358   vsscanf_47:
000040CA  2F05      7359          move.l    D5,-(A7)
000040CC  4E93      7360          jsr       (A3)
000040CE  584F      7361          addq.w    #4,A7
000040D0  2400      7362          move.l    D0,D2
000040D2  52AE FFE4 7363          addq.l    #1,-28(A6)
000040D6  60C0      7364          bra       vsscanf_44
                    7365   vsscanf_46:
000040D8  4A86      7366          tst.l     D6
000040DA  660A      7367          bne.s     vsscanf_51
000040DC  2047      7368          move.l    D7,A0
000040DE  4210      7369          clr.b     (A0)
000040E0  200C      7370          move.l    A4,D0
000040E2  6702      7371          beq.s     vsscanf_51
000040E4  5284      7372          addq.l    #1,D4
                    7373   vsscanf_51:
000040E6  0C82 FFFF 7374          cmp.l     #-1,D2
000040EA  FFFF      
000040EC  6708      7375          beq.s     vsscanf_55
000040EE  4A86      7376          tst.l     D6
000040F0  661E      7377          bne.s     vsscanf_53
000040F2  200C      7378          move.l    A4,D0
000040F4  661A      7379          bne.s     vsscanf_53
                    7380   vsscanf_55:
000040F6  4A84      7381          tst.l     D4
000040F8  6704      7382          beq.s     vsscanf_56
000040FA  2004      7383          move.l    D4,D0
000040FC  600E      7384          bra.s     vsscanf_59
                    7385   vsscanf_56:
000040FE  0C82 FFFF 7386          cmp.l     #-1,D2
00004102  FFFF      
00004104  6604      7387          bne.s     vsscanf_58
00004106  70FF      7388          moveq     #-1,D0
00004108  6002      7389          bra.s     vsscanf_59
                    7390   vsscanf_58:
0000410A  2004      7391          move.l    D4,D0
                    7392   vsscanf_59:
0000410C  6000 035A 7393          bra       vsscanf_15
                    7394   vsscanf_53:
00004110  53AE FFE4 7395          subq.l    #1,-28(A6)
00004114  2F02      7396          move.l    D2,-(A7)
00004116  2F05      7397          move.l    D5,-(A7)
00004118  6100 FB2E 7398          bsr       @vsscanf_scanputback
0000411C  504F      7399          addq.w    #8,A7
0000411E  6000 0342 7400          bra       vsscanf_139
                    7401   vsscanf_40:
00004122  0C83 0000 7402          cmp.l     #99,D3
00004126  0063      
00004128  6600 008E 7403          bne       vsscanf_60
0000412C  4A86      7404          tst.l     D6
0000412E  660A      7405          bne.s     vsscanf_62
00004130  206E 0010 7406          move.l    16(A6),A0
00004134  58AE 0010 7407          addq.l    #4,16(A6)
00004138  2E10      7408          move.l    (A0),D7
                    7409   vsscanf_62:
0000413A  2F05      7410          move.l    D5,-(A7)
0000413C  4E93      7411          jsr       (A3)
0000413E  584F      7412          addq.w    #4,A7
00004140  2400      7413          move.l    D0,D2
00004142  52AE FFE4 7414          addq.l    #1,-28(A6)
00004146  200A      7415          move.l    A2,D0
00004148  0C80 0000 7416          cmp.l     #32767,D0
0000414C  7FFF      
0000414E  6604      7417          bne.s     vsscanf_64
00004150  347C 0001 7418          move.w    #1,A2
                    7419   vsscanf_64:
00004154  0C82 FFFF 7420          cmp.l     #-1,D2
00004158  FFFF      
0000415A  6606      7421          bne.s     vsscanf_66
0000415C  4A86      7422          tst.l     D6
0000415E  6602      7423          bne.s     vsscanf_66
00004160  5384      7424          subq.l    #1,D4
                    7425   vsscanf_66:
00004162  200A      7426          move.l    A2,D0
00004164  534A      7427          subq.w    #1,A2
00004166  4A80      7428          tst.l     D0
00004168  6720      7429          beq.s     vsscanf_70
0000416A  0C82 FFFF 7430          cmp.l     #-1,D2
0000416E  FFFF      
00004170  6718      7431          beq.s     vsscanf_70
00004172  4A86      7432          tst.l     D6
00004174  6606      7433          bne.s     vsscanf_71
00004176  2047      7434          move.l    D7,A0
00004178  5287      7435          addq.l    #1,D7
0000417A  1082      7436          move.b    D2,(A0)
                    7437   vsscanf_71:
0000417C  2F05      7438          move.l    D5,-(A7)
0000417E  4E93      7439          jsr       (A3)
00004180  584F      7440          addq.w    #4,A7
00004182  2400      7441          move.l    D0,D2
00004184  52AE FFE4 7442          addq.l    #1,-28(A6)
00004188  60D8      7443          bra       vsscanf_66
                    7444   vsscanf_70:
0000418A  0C82 FFFF 7445          cmp.l     #-1,D2
0000418E  FFFF      
00004190  660E      7446          bne.s     vsscanf_73
00004192  4A84      7447          tst.l     D4
00004194  6704      7448          beq.s     vsscanf_75
00004196  2004      7449          move.l    D4,D0
00004198  6002      7450          bra.s     vsscanf_76
                    7451   vsscanf_75:
0000419A  70FF      7452          moveq     #-1,D0
                    7453   vsscanf_76:
0000419C  6000 02CA 7454          bra       vsscanf_15
                    7455   vsscanf_73:
000041A0  4A86      7456          tst.l     D6
000041A2  6602      7457          bne.s     vsscanf_77
000041A4  5284      7458          addq.l    #1,D4
                    7459   vsscanf_77:
000041A6  53AE FFE4 7460          subq.l    #1,-28(A6)
000041AA  2F02      7461          move.l    D2,-(A7)
000041AC  2F05      7462          move.l    D5,-(A7)
000041AE  6100 FA98 7463          bsr       @vsscanf_scanputback
000041B2  504F      7464          addq.w    #8,A7
000041B4  6000 02AC 7465          bra       vsscanf_139
                    7466   vsscanf_60:
000041B8  0C83 0000 7467          cmp.l     #105,D3
000041BC  0069      
000041BE  6600 0060 7468          bne       vsscanf_82
000041C2  486E FFE4 7469          pea       -28(A6)
000041C6  2F05      7470          move.l    D5,-(A7)
000041C8  6100 FAE0 7471          bsr       @vsscanf_scanspace
000041CC  504F      7472          addq.w    #8,A7
000041CE  2400      7473          move.l    D0,D2
000041D0  0C82 0000 7474          cmp.l     #48,D2
000041D4  0030      
000041D6  6600 0038 7475          bne       vsscanf_81
000041DA  387C 0001 7476          move.w    #1,A4
000041DE  2F05      7477          move.l    D5,-(A7)
000041E0  4E93      7478          jsr       (A3)
000041E2  584F      7479          addq.w    #4,A7
000041E4  2400      7480          move.l    D0,D2
000041E6  2F02      7481          move.l    D2,-(A7)
000041E8  6100 F936 7482          bsr       _tolower
000041EC  584F      7483          addq.w    #4,A7
000041EE  0C80 0000 7484          cmp.l     #120,D0
000041F2  0078      
000041F4  6604      7485          bne.s     vsscanf_83
000041F6  7678      7486          moveq     #120,D3
000041F8  6010      7487          bra.s     vsscanf_84
                    7488   vsscanf_83:
000041FA  53AE FFE4 7489          subq.l    #1,-28(A6)
000041FE  2F02      7490          move.l    D2,-(A7)
00004200  2F05      7491          move.l    D5,-(A7)
00004202  6100 FA44 7492          bsr       @vsscanf_scanputback
00004206  504F      7493          addq.w    #8,A7
00004208  766F      7494          moveq     #111,D3
                    7495   vsscanf_84:
0000420A  52AE FFE4 7496          addq.l    #1,-28(A6)
0000420E  6010      7497          bra.s     vsscanf_82
                    7498   vsscanf_81:
00004210  53AE FFE4 7499          subq.l    #1,-28(A6)
00004214  2F02      7500          move.l    D2,-(A7)
00004216  2F05      7501          move.l    D5,-(A7)
00004218  6100 FA2E 7502          bsr       @vsscanf_scanputback
0000421C  504F      7503          addq.w    #8,A7
0000421E  7664      7504          moveq     #100,D3
                    7505   vsscanf_82:
00004220  0C83 0000 7506          cmp.l     #100,D3
00004224  0064      
00004226  671A      7507          beq.s     vsscanf_87
00004228  0C83 0000 7508          cmp.l     #117,D3
0000422C  0075      
0000422E  6712      7509          beq.s     vsscanf_87
00004230  0C83 0000 7510          cmp.l     #120,D3
00004234  0078      
00004236  670A      7511          beq.s     vsscanf_87
00004238  0C83 0000 7512          cmp.l     #111,D3
0000423C  006F      
0000423E  6600 01A4 7513          bne       vsscanf_85
                    7514   vsscanf_87:
00004242  486E FFE4 7515          pea       -28(A6)
00004246  2F05      7516          move.l    D5,-(A7)
00004248  6100 FA60 7517          bsr       @vsscanf_scanspace
0000424C  504F      7518          addq.w    #8,A7
0000424E  2400      7519          move.l    D0,D2
00004250  2D7C 0000 7520          move.l    #10,-4(A6)
00004254  000A FFFC 
00004258  0C83 0000 7521          cmp.l     #120,D3
0000425C  0078      
0000425E  6608      7522          bne.s     vsscanf_88
00004260  2D7C 0000 7523          move.l    #16,-4(A6)
00004264  0010 FFFC 
                    7524   vsscanf_88:
00004268  0C83 0000 7525          cmp.l     #111,D3
0000426C  006F      
0000426E  6608      7526          bne.s     vsscanf_90
00004270  2D7C 0000 7527          move.l    #8,-4(A6)
00004274  0008 FFFC 
                    7528   vsscanf_90:
00004278  4A86      7529          tst.l     D6
0000427A  660A      7530          bne.s     vsscanf_92
0000427C  206E 0010 7531          move.l    16(A6),A0
00004280  58AE 0010 7532          addq.l    #4,16(A6)
00004284  2E10      7533          move.l    (A0),D7
                    7534   vsscanf_92:
00004286  42AE FFE0 7535          clr.l     -32(A6)
0000428A  52AE FFE4 7536          addq.l    #1,-28(A6)
0000428E  0C83 0000 7537          cmp.l     #117,D3
00004292  0075      
00004294  6720      7538          beq.s     vsscanf_94
00004296  0C82 0000 7539          cmp.l     #45,D2
0000429A  002D      
0000429C  6618      7540          bne.s     vsscanf_94
0000429E  2F05      7541          move.l    D5,-(A7)
000042A0  4E93      7542          jsr       (A3)
000042A2  584F      7543          addq.w    #4,A7
000042A4  2400      7544          move.l    D0,D2
000042A6  52AE FFE4 7545          addq.l    #1,-28(A6)
000042AA  2D7C 0000 7546          move.l    #1,-32(A6)
000042AE  0001 FFE0 
000042B2  387C 0001 7547          move.w    #1,A4
                    7548   vsscanf_94:
000042B6  3A7C 0000 7549          move.w    #0,A5
000042BA  0C82 FFFF 7550          cmp.l     #-1,D2
000042BE  FFFF      
000042C0  660E      7551          bne.s     vsscanf_96
000042C2  4A84      7552          tst.l     D4
000042C4  6704      7553          beq.s     vsscanf_98
000042C6  2004      7554          move.l    D4,D0
000042C8  6002      7555          bra.s     vsscanf_99
                    7556   vsscanf_98:
000042CA  70FF      7557          moveq     #-1,D0
                    7558   vsscanf_99:
000042CC  6000 019A 7559          bra       vsscanf_15
                    7560   vsscanf_96:
000042D0  200A      7561          move.l    A2,D0
000042D2  534A      7562          subq.w    #1,A2
000042D4  4A80      7563          tst.l     D0
000042D6  6700 0090 7564          beq       vsscanf_102
000042DA  0C83 0000 7565          cmp.l     #120,D3
000042DE  0078      
000042E0  6620      7566          bne.s     vsscanf_104
000042E2  2F02      7567          move.l    D2,-(A7)
000042E4  6100 F8C8 7568          bsr       _toupper
000042E8  584F      7569          addq.w    #4,A7
000042EA  0C80 0000 7570          cmp.l     #65,D0
000042EE  0041      
000042F0  6D10      7571          blt.s     vsscanf_104
000042F2  2F02      7572          move.l    D2,-(A7)
000042F4  6100 F8B8 7573          bsr       _toupper
000042F8  584F      7574          addq.w    #4,A7
000042FA  0C80 0000 7575          cmp.l     #70,D0
000042FE  0046      
00004300  6F14      7576          ble.s     vsscanf_103
                    7577   vsscanf_104:
00004302  2042      7578          move.l    D2,A0
00004304  43F9 0000 7579          lea       __ctype,A1
00004308  66BA      
0000430A  1030 9801 7580          move.b    1(A0,A1.L),D0
0000430E  C03C 0004 7581          and.b     #4,D0
00004312  6700 0054 7582          beq       vsscanf_102
                    7583   vsscanf_103:
00004316  2042      7584          move.l    D2,A0
00004318  43F9 0000 7585          lea       __ctype,A1
0000431C  66BA      
0000431E  1030 9801 7586          move.b    1(A0,A1.L),D0
00004322  C03C 0004 7587          and.b     #4,D0
00004326  6614      7588          bne.s     vsscanf_105
00004328  70F9      7589          moveq     #-7,D0
0000432A  2F00      7590          move.l    D0,-(A7)
0000432C  2F02      7591          move.l    D2,-(A7)
0000432E  6100 F87E 7592          bsr       _toupper
00004332  584F      7593          addq.w    #4,A7
00004334  2200      7594          move.l    D0,D1
00004336  201F      7595          move.l    (A7)+,D0
00004338  D081      7596          add.l     D1,D0
0000433A  2400      7597          move.l    D0,D2
                    7598   vsscanf_105:
0000433C  2F0D      7599          move.l    A5,-(A7)
0000433E  2F2E FFFC 7600          move.l    -4(A6),-(A7)
00004342  6100 0884 7601          bsr       LMUL
00004346  2017      7602          move.l    (A7),D0
00004348  504F      7603          addq.w    #8,A7
0000434A  D082      7604          add.l     D2,D0
0000434C  0480 0000 7605          sub.l     #48,D0
00004350  0030      
00004352  2A40      7606          move.l    D0,A5
00004354  2F05      7607          move.l    D5,-(A7)
00004356  4E93      7608          jsr       (A3)
00004358  584F      7609          addq.w    #4,A7
0000435A  2400      7610          move.l    D0,D2
0000435C  52AE FFE4 7611          addq.l    #1,-28(A6)
00004360  387C 0001 7612          move.w    #1,A4
00004364  6000 FF6A 7613          bra       vsscanf_96
                    7614   vsscanf_102:
00004368  0C82 FFFF 7615          cmp.l     #-1,D2
0000436C  FFFF      
0000436E  671A      7616          beq.s     vsscanf_107
00004370  2F02      7617          move.l    D2,-(A7)
00004372  2F05      7618          move.l    D5,-(A7)
00004374  6100 F8D2 7619          bsr       @vsscanf_scanputback
00004378  504F      7620          addq.w    #8,A7
0000437A  53AE FFE4 7621          subq.l    #1,-28(A6)
0000437E  200C      7622          move.l    A4,D0
00004380  6606      7623          bne.s     vsscanf_109
00004382  2004      7624          move.l    D4,D0
00004384  6000 00E2 7625          bra       vsscanf_15
                    7626   vsscanf_109:
00004388  6012      7627          bra.s     vsscanf_111
                    7628   vsscanf_107:
0000438A  200C      7629          move.l    A4,D0
0000438C  660E      7630          bne.s     vsscanf_111
0000438E  4A84      7631          tst.l     D4
00004390  6704      7632          beq.s     vsscanf_113
00004392  2004      7633          move.l    D4,D0
00004394  6002      7634          bra.s     vsscanf_114
                    7635   vsscanf_113:
00004396  70FF      7636          moveq     #-1,D0
                    7637   vsscanf_114:
00004398  6000 00CE 7638          bra       vsscanf_15
                    7639   vsscanf_111:
0000439C  4AAE FFE0 7640          tst.l     -32(A6)
000043A0  6706      7641          beq.s     vsscanf_115
000043A2  200D      7642          move.l    A5,D0
000043A4  4480      7643          neg.l     D0
000043A6  2A40      7644          move.l    D0,A5
                    7645   vsscanf_115:
000043A8  4A86      7646          tst.l     D6
000043AA  661E      7647          bne.s     vsscanf_117
000043AC  4AAE FFE8 7648          tst.l     -24(A6)
000043B0  6706      7649          beq.s     vsscanf_119
000043B2  2047      7650          move.l    D7,A0
000043B4  208D      7651          move.l    A5,(A0)
000043B6  6010      7652          bra.s     vsscanf_122
                    7653   vsscanf_119:
000043B8  4AAE FFEC 7654          tst.l     -20(A6)
000043BC  6706      7655          beq.s     vsscanf_121
000043BE  2047      7656          move.l    D7,A0
000043C0  308D      7657          move.w    A5,(A0)
000043C2  6004      7658          bra.s     vsscanf_122
                    7659   vsscanf_121:
000043C4  2047      7660          move.l    D7,A0
000043C6  208D      7661          move.l    A5,(A0)
                    7662   vsscanf_122:
000043C8  5284      7663          addq.l    #1,D4
                    7664   vsscanf_117:
000043CA  0C82 FFFF 7665          cmp.l     #-1,D2
000043CE  FFFF      
000043D0  660E      7666          bne.s     vsscanf_123
000043D2  4A84      7667          tst.l     D4
000043D4  6704      7668          beq.s     vsscanf_125
000043D6  2004      7669          move.l    D4,D0
000043D8  6002      7670          bra.s     vsscanf_126
                    7671   vsscanf_125:
000043DA  70FF      7672          moveq     #-1,D0
                    7673   vsscanf_126:
000043DC  6000 008A 7674          bra       vsscanf_15
                    7675   vsscanf_123:
000043E0  6000 0080 7676          bra       vsscanf_139
                    7677   vsscanf_85:
000043E4  0C83 0000 7678          cmp.l     #37,D3
000043E8  0025      
000043EA  6600 0040 7679          bne       vsscanf_127
000043EE  2F05      7680          move.l    D5,-(A7)
000043F0  4E93      7681          jsr       (A3)
000043F2  584F      7682          addq.w    #4,A7
000043F4  2400      7683          move.l    D0,D2
000043F6  0C82 FFFF 7684          cmp.l     #-1,D2
000043FA  FFFF      
000043FC  660E      7685          bne.s     vsscanf_129
000043FE  4A84      7686          tst.l     D4
00004400  6704      7687          beq.s     vsscanf_131
00004402  2004      7688          move.l    D4,D0
00004404  6002      7689          bra.s     vsscanf_132
                    7690   vsscanf_131:
00004406  70FF      7691          moveq     #-1,D0
                    7692   vsscanf_132:
00004408  6000 005E 7693          bra       vsscanf_15
                    7694   vsscanf_129:
0000440C  52AE FFE4 7695          addq.l    #1,-28(A6)
00004410  B483      7696          cmp.l     D3,D2
00004412  6714      7697          beq.s     vsscanf_133
00004414  2F02      7698          move.l    D2,-(A7)
00004416  2F05      7699          move.l    D5,-(A7)
00004418  6100 F82E 7700          bsr       @vsscanf_scanputback
0000441C  504F      7701          addq.w    #8,A7
0000441E  53AE FFE4 7702          subq.l    #1,-28(A6)
00004422  2004      7703          move.l    D4,D0
00004424  6000 0042 7704          bra       vsscanf_15
                    7705   vsscanf_133:
00004428  6000 0038 7706          bra       vsscanf_139
                    7707   vsscanf_127:
0000442C  2F05      7708          move.l    D5,-(A7)
0000442E  4E93      7709          jsr       (A3)
00004430  584F      7710          addq.w    #4,A7
00004432  2400      7711          move.l    D0,D2
00004434  52AE FFE4 7712          addq.l    #1,-28(A6)
00004438  0C82 FFFF 7713          cmp.l     #-1,D2
0000443C  FFFF      
0000443E  660C      7714          bne.s     vsscanf_135
00004440  4A84      7715          tst.l     D4
00004442  6704      7716          beq.s     vsscanf_137
00004444  2004      7717          move.l    D4,D0
00004446  6002      7718          bra.s     vsscanf_138
                    7719   vsscanf_137:
00004448  70FF      7720          moveq     #-1,D0
                    7721   vsscanf_138:
0000444A  601C      7722          bra.s     vsscanf_15
                    7723   vsscanf_135:
0000444C  B483      7724          cmp.l     D3,D2
0000444E  6712      7725          beq.s     vsscanf_139
00004450  2F02      7726          move.l    D2,-(A7)
00004452  2F05      7727          move.l    D5,-(A7)
00004454  6100 F7F2 7728          bsr       @vsscanf_scanputback
00004458  504F      7729          addq.w    #8,A7
0000445A  53AE FFE4 7730          subq.l    #1,-28(A6)
0000445E  2004      7731          move.l    D4,D0
00004460  6006      7732          bra.s     vsscanf_15
                    7733   vsscanf_139:
00004462  6000 FA44 7734          bra       vsscanf_3
                    7735   vsscanf_5:
00004466  2004      7736          move.l    D4,D0
                    7737   vsscanf_15:
00004468  4CDF 3CFC 7738          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000446C  4E5E      7739          unlk      A6
0000446E  4E75      7740          rts
                    7741   _printf:
00004470  4E56 FFFC 7742          link      A6,#-4
00004474  48E7 2000 7743          movem.l   D2,-(A7)
00004478  41EE 0008 7744          lea       8(A6),A0
0000447C  5848      7745          addq.w    #4,A0
0000447E  2408      7746          move.l    A0,D2
00004480  2F02      7747          move.l    D2,-(A7)
00004482  2F2E 0008 7748          move.l    8(A6),-(A7)
00004486  42A7      7749          clr.l     -(A7)
00004488  6100 00CA 7750          bsr       _vsprintf
0000448C  DEFC 000C 7751          add.w     #12,A7
00004490  2D40 FFFC 7752          move.l    D0,-4(A6)
00004494  4282      7753          clr.l     D2
00004496  202E FFFC 7754          move.l    -4(A6),D0
0000449A  4CDF 0004 7755          movem.l   (A7)+,D2
0000449E  4E5E      7756          unlk      A6
000044A0  4E75      7757          rts
                    7758   @vsprintf_copy:
000044A2  4E56 0000 7759          link      A6,#0
000044A6  206E 0008 7760          move.l    8(A6),A0
000044AA  4A90      7761          tst.l     (A0)
000044AC  6710      7762          beq.s     @vsprintf_copy_1
000044AE  202E 000C 7763          move.l    12(A6),D0
000044B2  206E 0008 7764          move.l    8(A6),A0
000044B6  2250      7765          move.l    (A0),A1
000044B8  5290      7766          addq.l    #1,(A0)
000044BA  1280      7767          move.b    D0,(A1)
000044BC  600A      7768          bra.s     @vsprintf_copy_2
                    7769   @vsprintf_copy_1:
000044BE  2F2E 000C 7770          move.l    12(A6),-(A7)
000044C2  6100 F5F0 7771          bsr       _putch
000044C6  584F      7772          addq.w    #4,A7
                    7773   @vsprintf_copy_2:
000044C8  4E5E      7774          unlk      A6
000044CA  4E75      7775          rts
                    7776   @vsprintf_getval:
000044CC  4E56 0000 7777          link      A6,#0
000044D0  48E7 3000 7778          movem.l   D2/D3,-(A7)
000044D4  242E 0008 7779          move.l    8(A6),D2
000044D8  4283      7780          clr.l     D3
000044DA  2042      7781          move.l    D2,A0
000044DC  2050      7782          move.l    (A0),A0
000044DE  1010      7783          move.b    (A0),D0
000044E0  4880      7784          ext.w     D0
000044E2  48C0      7785          ext.l     D0
000044E4  0C80 0000 7786          cmp.l     #42,D0
000044E8  002A      
000044EA  6612      7787          bne.s     @vsprintf_getval_1
000044EC  206E 000C 7788          move.l    12(A6),A0
000044F0  2250      7789          move.l    (A0),A1
000044F2  5890      7790          addq.l    #4,(A0)
000044F4  2611      7791          move.l    (A1),D3
000044F6  2042      7792          move.l    D2,A0
000044F8  5290      7793          addq.l    #1,(A0)
000044FA  6000 004E 7794          bra       @vsprintf_getval_5
                    7795   @vsprintf_getval_1:
000044FE  2042      7796          move.l    D2,A0
00004500  2050      7797          move.l    (A0),A0
00004502  1010      7798          move.b    (A0),D0
00004504  4880      7799          ext.w     D0
00004506  48C0      7800          ext.l     D0
00004508  0C80 0000 7801          cmp.l     #48,D0
0000450C  0030      
0000450E  6D00 003A 7802          blt       @vsprintf_getval_5
00004512  2042      7803          move.l    D2,A0
00004514  2050      7804          move.l    (A0),A0
00004516  1010      7805          move.b    (A0),D0
00004518  4880      7806          ext.w     D0
0000451A  48C0      7807          ext.l     D0
0000451C  0C80 0000 7808          cmp.l     #57,D0
00004520  0039      
00004522  6E26      7809          bgt.s     @vsprintf_getval_5
00004524  2F03      7810          move.l    D3,-(A7)
00004526  4878 000A 7811          pea       10
0000452A  6100 069C 7812          bsr       LMUL
0000452E  2017      7813          move.l    (A7),D0
00004530  504F      7814          addq.w    #8,A7
00004532  2042      7815          move.l    D2,A0
00004534  2250      7816          move.l    (A0),A1
00004536  5290      7817          addq.l    #1,(A0)
00004538  1211      7818          move.b    (A1),D1
0000453A  4881      7819          ext.w     D1
0000453C  48C1      7820          ext.l     D1
0000453E  D081      7821          add.l     D1,D0
00004540  0480 0000 7822          sub.l     #48,D0
00004544  0030      
00004546  2600      7823          move.l    D0,D3
00004548  60B4      7824          bra       @vsprintf_getval_1
                    7825   @vsprintf_getval_5:
0000454A  2003      7826          move.l    D3,D0
0000454C  4CDF 000C 7827          movem.l   (A7)+,D2/D3
00004550  4E5E      7828          unlk      A6
00004552  4E75      7829          rts
                    7830   _vsprintf:
00004554  4E56 FFCC 7831          link      A6,#-52
00004558  48E7 3F3C 7832          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000455C  45EE 0008 7833          lea       8(A6),A2
00004560  47F8 44A2 7834          lea       @vsprintf_copy,A3
00004564  49F9 0000 7835          lea       _ultoa,A4
00004568  4DD2      
0000456A  4286      7836          clr.l     D6
                    7837   vsprintf_1:
0000456C  206E 000C 7838          move.l    12(A6),A0
00004570  4A10      7839          tst.b     (A0)
00004572  6700 0624 7840          beq       vsprintf_3
00004576  206E 000C 7841          move.l    12(A6),A0
0000457A  1010      7842          move.b    (A0),D0
0000457C  4880      7843          ext.w     D0
0000457E  48C0      7844          ext.l     D0
00004580  0C80 0000 7845          cmp.l     #37,D0
00004584  0025      
00004586  671C      7846          beq.s     vsprintf_4
00004588  206E 000C 7847          move.l    12(A6),A0
0000458C  52AE 000C 7848          addq.l    #1,12(A6)
00004590  1210      7849          move.b    (A0),D1
00004592  4881      7850          ext.w     D1
00004594  48C1      7851          ext.l     D1
00004596  2F01      7852          move.l    D1,-(A7)
00004598  2F0A      7853          move.l    A2,-(A7)
0000459A  4E93      7854          jsr       (A3)
0000459C  504F      7855          addq.w    #8,A7
0000459E  5286      7856          addq.l    #1,D6
000045A0  6000 05F2 7857          bra       vsprintf_2
                    7858   vsprintf_4:
000045A4  52AE 000C 7859          addq.l    #1,12(A6)
000045A8  422E FFD3 7860          clr.b     -45(A6)
000045AC  422E FFD2 7861          clr.b     -46(A6)
000045B0  422E FFD0 7862          clr.b     -48(A6)
000045B4  422E FFCF 7863          clr.b     -49(A6)
000045B8  422E FFCE 7864          clr.b     -50(A6)
000045BC  422E FFCD 7865          clr.b     -51(A6)
000045C0  42AE FFFC 7866          clr.l     -4(A6)
000045C4  7AFF      7867          moveq     #-1,D5
000045C6  41EE FFDC 7868          lea       -36(A6),A0
000045CA  2608      7869          move.l    A0,D3
000045CC  2408      7870          move.l    A0,D2
                    7871   vsprintf_6:
000045CE  206E 000C 7872          move.l    12(A6),A0
000045D2  1010      7873          move.b    (A0),D0
000045D4  4880      7874          ext.w     D0
000045D6  48C0      7875          ext.l     D0
000045D8  0C80 0000 7876          cmp.l     #43,D0
000045DC  002B      
000045DE  6730      7877          beq.s     vsprintf_12
000045E0  6E18      7878          bgt.s     vsprintf_15
000045E2  0C80 0000 7879          cmp.l     #35,D0
000045E6  0023      
000045E8  6700 003E 7880          beq       vsprintf_14
000045EC  6E00 0046 7881          bgt       vsprintf_9
000045F0  0C80 0000 7882          cmp.l     #32,D0
000045F4  0020      
000045F6  6724      7883          beq.s     vsprintf_13
000045F8  603A      7884          bra.s     vsprintf_9
                    7885   vsprintf_15:
000045FA  0C80 0000 7886          cmp.l     #45,D0
000045FE  002D      
00004600  6702      7887          beq.s     vsprintf_11
00004602  6030      7888          bra.s     vsprintf_9
                    7889   vsprintf_11:
00004604  1D7C 0001 7890          move.b    #1,-51(A6)
00004608  FFCD      
0000460A  52AE 000C 7891          addq.l    #1,12(A6)
0000460E  6026      7892          bra.s     vsprintf_7
                    7893   vsprintf_12:
00004610  1D7C 0001 7894          move.b    #1,-50(A6)
00004614  FFCE      
00004616  52AE 000C 7895          addq.l    #1,12(A6)
0000461A  601A      7896          bra.s     vsprintf_7
                    7897   vsprintf_13:
0000461C  1D7C 0001 7898          move.b    #1,-49(A6)
00004620  FFCF      
00004622  52AE 000C 7899          addq.l    #1,12(A6)
00004626  600E      7900          bra.s     vsprintf_7
                    7901   vsprintf_14:
00004628  1D7C 0001 7902          move.b    #1,-48(A6)
0000462C  FFD0      
0000462E  52AE 000C 7903          addq.l    #1,12(A6)
00004632  6002      7904          bra.s     vsprintf_7
                    7905   vsprintf_9:
00004634  6002      7906          bra.s     vsprintf_8
                    7907   vsprintf_7:
00004636  6096      7908          bra       vsprintf_6
                    7909   vsprintf_8:
00004638  206E 000C 7910          move.l    12(A6),A0
0000463C  1010      7911          move.b    (A0),D0
0000463E  4880      7912          ext.w     D0
00004640  48C0      7913          ext.l     D0
00004642  0C80 0000 7914          cmp.l     #48,D0
00004646  0030      
00004648  660A      7915          bne.s     vsprintf_16
0000464A  52AE 000C 7916          addq.l    #1,12(A6)
0000464E  1D7C 0001 7917          move.b    #1,-46(A6)
00004652  FFD2      
                    7918   vsprintf_16:
00004654  486E 0010 7919          pea       16(A6)
00004658  486E 000C 7920          pea       12(A6)
0000465C  6100 FE6E 7921          bsr       @vsprintf_getval
00004660  504F      7922          addq.w    #8,A7
00004662  2A40      7923          move.l    D0,A5
00004664  206E 000C 7924          move.l    12(A6),A0
00004668  1010      7925          move.b    (A0),D0
0000466A  4880      7926          ext.w     D0
0000466C  48C0      7927          ext.l     D0
0000466E  0C80 0000 7928          cmp.l     #46,D0
00004672  002E      
00004674  6614      7929          bne.s     vsprintf_18
00004676  52AE 000C 7930          addq.l    #1,12(A6)
0000467A  486E 0010 7931          pea       16(A6)
0000467E  486E 000C 7932          pea       12(A6)
00004682  6100 FE48 7933          bsr       @vsprintf_getval
00004686  504F      7934          addq.w    #8,A7
00004688  2A00      7935          move.l    D0,D5
                    7936   vsprintf_18:
0000468A  206E 000C 7937          move.l    12(A6),A0
0000468E  1010      7938          move.b    (A0),D0
00004690  4880      7939          ext.w     D0
00004692  48C0      7940          ext.l     D0
00004694  0C80 0000 7941          cmp.l     #108,D0
00004698  006C      
0000469A  660A      7942          bne.s     vsprintf_20
0000469C  52AE 000C 7943          addq.l    #1,12(A6)
000046A0  1D7C 0001 7944          move.b    #1,-45(A6)
000046A4  FFD3      
                    7945   vsprintf_20:
000046A6  206E 000C 7946          move.l    12(A6),A0
000046AA  1010      7947          move.b    (A0),D0
000046AC  4880      7948          ext.w     D0
000046AE  48C0      7949          ext.l     D0
000046B0  0C80 0000 7950          cmp.l     #111,D0
000046B4  006F      
000046B6  6700 00D4 7951          beq       vsprintf_27
000046BA  6E34      7952          bgt.s     vsprintf_33
000046BC  0C80 0000 7953          cmp.l     #100,D0
000046C0  0064      
000046C2  6700 0054 7954          beq       vsprintf_24
000046C6  6E1C      7955          bgt.s     vsprintf_34
000046C8  0C80 0000 7956          cmp.l     #99,D0
000046CC  0063      
000046CE  6700 012C 7957          beq       vsprintf_30
000046D2  6E00 016A 7958          bgt       vsprintf_22
000046D6  0C80 0000 7959          cmp.l     #88,D0
000046DA  0058      
000046DC  6700 00E6 7960          beq       vsprintf_28
000046E0  6000 015C 7961          bra       vsprintf_22
                    7962   vsprintf_34:
000046E4  0C80 0000 7963          cmp.l     #105,D0
000046E8  0069      
000046EA  672C      7964          beq.s     vsprintf_24
000046EC  6000 0150 7965          bra       vsprintf_22
                    7966   vsprintf_33:
000046F0  0C80 0000 7967          cmp.l     #117,D0
000046F4  0075      
000046F6  6700 005C 7968          beq       vsprintf_26
000046FA  6E0E      7969          bgt.s     vsprintf_35
000046FC  0C80 0000 7970          cmp.l     #115,D0
00004700  0073      
00004702  6700 011C 7971          beq       vsprintf_31
00004706  6000 0136 7972          bra       vsprintf_22
                    7973   vsprintf_35:
0000470A  0C80 0000 7974          cmp.l     #120,D0
0000470E  0078      
00004710  6700 00B2 7975          beq       vsprintf_28
00004714  6000 0128 7976          bra       vsprintf_22
                    7977   vsprintf_24:
00004718  4A2E FFD3 7978          tst.b     -45(A6)
0000471C  671A      7979          beq.s     vsprintf_36
0000471E  4878 000A 7980          pea       10
00004722  2F03      7981          move.l    D3,-(A7)
00004724  206E 0010 7982          move.l    16(A6),A0
00004728  58AE 0010 7983          addq.l    #4,16(A6)
0000472C  2F10      7984          move.l    (A0),-(A7)
0000472E  6100 061E 7985          bsr       _ltoa
00004732  DEFC 000C 7986          add.w     #12,A7
00004736  6018      7987          bra.s     vsprintf_37
                    7988   vsprintf_36:
00004738  4878 000A 7989          pea       10
0000473C  2F03      7990          move.l    D3,-(A7)
0000473E  206E 0010 7991          move.l    16(A6),A0
00004742  58AE 0010 7992          addq.l    #4,16(A6)
00004746  2F10      7993          move.l    (A0),-(A7)
00004748  6100 0604 7994          bsr       _ltoa
0000474C  DEFC 000C 7995          add.w     #12,A7
                    7996   vsprintf_37:
00004750  6000 00FA 7997          bra       vsprintf_23
                    7998   vsprintf_26:
00004754  4A2E FFD3 7999          tst.b     -45(A6)
00004758  6718      8000          beq.s     vsprintf_38
0000475A  4878 000A 8001          pea       10
0000475E  2F03      8002          move.l    D3,-(A7)
00004760  206E 0010 8003          move.l    16(A6),A0
00004764  58AE 0010 8004          addq.l    #4,16(A6)
00004768  2F10      8005          move.l    (A0),-(A7)
0000476A  4E94      8006          jsr       (A4)
0000476C  DEFC 000C 8007          add.w     #12,A7
00004770  6016      8008          bra.s     vsprintf_39
                    8009   vsprintf_38:
00004772  4878 000A 8010          pea       10
00004776  2F03      8011          move.l    D3,-(A7)
00004778  206E 0010 8012          move.l    16(A6),A0
0000477C  58AE 0010 8013          addq.l    #4,16(A6)
00004780  2F10      8014          move.l    (A0),-(A7)
00004782  4E94      8015          jsr       (A4)
00004784  DEFC 000C 8016          add.w     #12,A7
                    8017   vsprintf_39:
00004788  6000 00C2 8018          bra       vsprintf_23
                    8019   vsprintf_27:
0000478C  4A2E FFD3 8020          tst.b     -45(A6)
00004790  6718      8021          beq.s     vsprintf_40
00004792  4878 0008 8022          pea       8
00004796  2F03      8023          move.l    D3,-(A7)
00004798  206E 0010 8024          move.l    16(A6),A0
0000479C  58AE 0010 8025          addq.l    #4,16(A6)
000047A0  2F10      8026          move.l    (A0),-(A7)
000047A2  4E94      8027          jsr       (A4)
000047A4  DEFC 000C 8028          add.w     #12,A7
000047A8  6016      8029          bra.s     vsprintf_41
                    8030   vsprintf_40:
000047AA  4878 0008 8031          pea       8
000047AE  2F03      8032          move.l    D3,-(A7)
000047B0  206E 0010 8033          move.l    16(A6),A0
000047B4  58AE 0010 8034          addq.l    #4,16(A6)
000047B8  2F10      8035          move.l    (A0),-(A7)
000047BA  4E94      8036          jsr       (A4)
000047BC  DEFC 000C 8037          add.w     #12,A7
                    8038   vsprintf_41:
000047C0  6000 008A 8039          bra       vsprintf_23
                    8040   vsprintf_28:
000047C4  4A2E FFD3 8041          tst.b     -45(A6)
000047C8  6718      8042          beq.s     vsprintf_42
000047CA  4878 0010 8043          pea       16
000047CE  2F03      8044          move.l    D3,-(A7)
000047D0  206E 0010 8045          move.l    16(A6),A0
000047D4  58AE 0010 8046          addq.l    #4,16(A6)
000047D8  2F10      8047          move.l    (A0),-(A7)
000047DA  4E94      8048          jsr       (A4)
000047DC  DEFC 000C 8049          add.w     #12,A7
000047E0  6016      8050          bra.s     vsprintf_43
                    8051   vsprintf_42:
000047E2  4878 0010 8052          pea       16
000047E6  2F03      8053          move.l    D3,-(A7)
000047E8  206E 0010 8054          move.l    16(A6),A0
000047EC  58AE 0010 8055          addq.l    #4,16(A6)
000047F0  2F10      8056          move.l    (A0),-(A7)
000047F2  4E94      8057          jsr       (A4)
000047F4  DEFC 000C 8058          add.w     #12,A7
                    8059   vsprintf_43:
000047F8  6000 0052 8060          bra       vsprintf_23
                    8061   vsprintf_30:
000047FC  206E 0010 8062          move.l    16(A6),A0
00004800  58AE 0010 8063          addq.l    #4,16(A6)
00004804  2010      8064          move.l    (A0),D0
00004806  2042      8065          move.l    D2,A0
00004808  5282      8066          addq.l    #1,D2
0000480A  1080      8067          move.b    D0,(A0)
0000480C  2042      8068          move.l    D2,A0
0000480E  4210      8069          clr.b     (A0)
00004810  200D      8070          move.l    A5,D0
00004812  6704      8071          beq.s     vsprintf_44
00004814  200D      8072          move.l    A5,D0
00004816  6002      8073          bra.s     vsprintf_45
                    8074   vsprintf_44:
00004818  7001      8075          moveq     #1,D0
                    8076   vsprintf_45:
0000481A  2A00      8077          move.l    D0,D5
0000481C  6000 002E 8078          bra       vsprintf_23
                    8079   vsprintf_31:
00004820  206E 0010 8080          move.l    16(A6),A0
00004824  58AE 0010 8081          addq.l    #4,16(A6)
00004828  2610      8082          move.l    (A0),D3
0000482A  0C85 FFFF 8083          cmp.l     #-1,D5
0000482E  FFFF      
00004830  660A      8084          bne.s     vsprintf_46
00004832  2F03      8085          move.l    D3,-(A7)
00004834  6100 05FE 8086          bsr       _strlen
00004838  584F      8087          addq.w    #4,A7
0000483A  2A00      8088          move.l    D0,D5
                    8089   vsprintf_46:
0000483C  600E      8090          bra.s     vsprintf_23
                    8091   vsprintf_22:
0000483E  206E 000C 8092          move.l    12(A6),A0
00004842  2242      8093          move.l    D2,A1
00004844  5282      8094          addq.l    #1,D2
00004846  1290      8095          move.b    (A0),(A1)
00004848  2042      8096          move.l    D2,A0
0000484A  4210      8097          clr.b     (A0)
                    8098   vsprintf_23:
0000484C  2F03      8099          move.l    D3,-(A7)
0000484E  6100 05E4 8100          bsr       _strlen
00004852  584F      8101          addq.w    #4,A7
00004854  1800      8102          move.b    D0,D4
00004856  206E 000C 8103          move.l    12(A6),A0
0000485A  1010      8104          move.b    (A0),D0
0000485C  4880      8105          ext.w     D0
0000485E  48C0      8106          ext.l     D0
00004860  0C80 0000 8107          cmp.l     #115,D0
00004864  0073      
00004866  6618      8108          bne.s     vsprintf_48
00004868  0C85 0000 8109          cmp.l     #0,D5
0000486C  0000      
0000486E  6D10      8110          blt.s     vsprintf_48
00004870  4884      8111          ext.w     D4
00004872  48C4      8112          ext.l     D4
00004874  B885      8113          cmp.l     D5,D4
00004876  6F04      8114          ble.s     vsprintf_50
00004878  1005      8115          move.b    D5,D0
0000487A  6002      8116          bra.s     vsprintf_51
                    8117   vsprintf_50:
0000487C  1004      8118          move.b    D4,D0
                    8119   vsprintf_51:
0000487E  1800      8120          move.b    D0,D4
                    8121   vsprintf_48:
00004880  206E 000C 8122          move.l    12(A6),A0
00004884  1010      8123          move.b    (A0),D0
00004886  4880      8124          ext.w     D0
00004888  48C0      8125          ext.l     D0
0000488A  0C80 0000 8126          cmp.l     #88,D0
0000488E  0058      
00004890  6600 0026 8127          bne       vsprintf_56
00004894  41EE FFDC 8128          lea       -36(A6),A0
00004898  2408      8129          move.l    A0,D2
                    8130   vsprintf_54:
0000489A  2042      8131          move.l    D2,A0
0000489C  4A10      8132          tst.b     (A0)
0000489E  6718      8133          beq.s     vsprintf_56
000048A0  2042      8134          move.l    D2,A0
000048A2  1210      8135          move.b    (A0),D1
000048A4  4881      8136          ext.w     D1
000048A6  48C1      8137          ext.l     D1
000048A8  2F01      8138          move.l    D1,-(A7)
000048AA  6100 F302 8139          bsr       _toupper
000048AE  584F      8140          addq.w    #4,A7
000048B0  2042      8141          move.l    D2,A0
000048B2  1080      8142          move.b    D0,(A0)
000048B4  5282      8143          addq.l    #1,D2
000048B6  60E2      8144          bra       vsprintf_54
                    8145   vsprintf_56:
000048B8  7E00      8146          moveq     #0,D7
000048BA  41EE FFD4 8147          lea       -44(A6),A0
000048BE  2408      8148          move.l    A0,D2
000048C0  206E 000C 8149          move.l    12(A6),A0
000048C4  1010      8150          move.b    (A0),D0
000048C6  4880      8151          ext.w     D0
000048C8  48C0      8152          ext.l     D0
000048CA  0C80 0000 8153          cmp.l     #100,D0
000048CE  0064      
000048D0  6714      8154          beq.s     vsprintf_59
000048D2  206E 000C 8155          move.l    12(A6),A0
000048D6  1010      8156          move.b    (A0),D0
000048D8  4880      8157          ext.w     D0
000048DA  48C0      8158          ext.l     D0
000048DC  0C80 0000 8159          cmp.l     #105,D0
000048E0  0069      
000048E2  6600 0076 8160          bne       vsprintf_65
                    8161   vsprintf_59:
000048E6  4A2E FFCE 8162          tst.b     -50(A6)
000048EA  6612      8163          bne.s     vsprintf_62
000048EC  2043      8164          move.l    D3,A0
000048EE  1010      8165          move.b    (A0),D0
000048F0  4880      8166          ext.w     D0
000048F2  48C0      8167          ext.l     D0
000048F4  0C80 0000 8168          cmp.l     #45,D0
000048F8  002D      
000048FA  6600 002E 8169          bne       vsprintf_60
                    8170   vsprintf_62:
000048FE  2043      8171          move.l    D3,A0
00004900  1010      8172          move.b    (A0),D0
00004902  4880      8173          ext.w     D0
00004904  48C0      8174          ext.l     D0
00004906  0C80 0000 8175          cmp.l     #45,D0
0000490A  002D      
0000490C  660E      8176          bne.s     vsprintf_63
0000490E  2043      8177          move.l    D3,A0
00004910  5283      8178          addq.l    #1,D3
00004912  2242      8179          move.l    D2,A1
00004914  5282      8180          addq.l    #1,D2
00004916  1290      8181          move.b    (A0),(A1)
00004918  5304      8182          subq.b    #1,D4
0000491A  6008      8183          bra.s     vsprintf_64
                    8184   vsprintf_63:
0000491C  2042      8185          move.l    D2,A0
0000491E  5282      8186          addq.l    #1,D2
00004920  10BC 002B 8187          move.b    #43,(A0)
                    8188   vsprintf_64:
00004924  5287      8189          addq.l    #1,D7
00004926  6000 0032 8190          bra       vsprintf_65
                    8191   vsprintf_60:
0000492A  4A2E FFCF 8192          tst.b     -49(A6)
0000492E  6700 002A 8193          beq       vsprintf_65
00004932  2043      8194          move.l    D3,A0
00004934  1010      8195          move.b    (A0),D0
00004936  4880      8196          ext.w     D0
00004938  48C0      8197          ext.l     D0
0000493A  0C80 0000 8198          cmp.l     #45,D0
0000493E  002D      
00004940  660E      8199          bne.s     vsprintf_67
00004942  2043      8200          move.l    D3,A0
00004944  5283      8201          addq.l    #1,D3
00004946  2242      8202          move.l    D2,A1
00004948  5282      8203          addq.l    #1,D2
0000494A  1290      8204          move.b    (A0),(A1)
0000494C  5304      8205          subq.b    #1,D4
0000494E  6008      8206          bra.s     vsprintf_68
                    8207   vsprintf_67:
00004950  2042      8208          move.l    D2,A0
00004952  5282      8209          addq.l    #1,D2
00004954  10BC 0020 8210          move.b    #32,(A0)
                    8211   vsprintf_68:
00004958  5287      8212          addq.l    #1,D7
                    8213   vsprintf_65:
0000495A  4A2E FFD0 8214          tst.b     -48(A6)
0000495E  6700 0066 8215          beq       vsprintf_77
00004962  206E 000C 8216          move.l    12(A6),A0
00004966  1010      8217          move.b    (A0),D0
00004968  4880      8218          ext.w     D0
0000496A  48C0      8219          ext.l     D0
0000496C  0C80 0000 8220          cmp.l     #111,D0
00004970  006F      
00004972  671A      8221          beq.s     vsprintf_73
00004974  6E0C      8222          bgt.s     vsprintf_76
00004976  0C80 0000 8223          cmp.l     #88,D0
0000497A  0058      
0000497C  6710      8224          beq.s     vsprintf_73
0000497E  6000 0046 8225          bra       vsprintf_77
                    8226   vsprintf_76:
00004982  0C80 0000 8227          cmp.l     #120,D0
00004986  0078      
00004988  6704      8228          beq.s     vsprintf_73
0000498A  6000 003A 8229          bra       vsprintf_77
                    8230   vsprintf_73:
0000498E  2042      8231          move.l    D2,A0
00004990  5282      8232          addq.l    #1,D2
00004992  10BC 0030 8233          move.b    #48,(A0)
00004996  5287      8234          addq.l    #1,D7
00004998  206E 000C 8235          move.l    12(A6),A0
0000499C  1010      8236          move.b    (A0),D0
0000499E  4880      8237          ext.w     D0
000049A0  48C0      8238          ext.l     D0
000049A2  0C80 0000 8239          cmp.l     #120,D0
000049A6  0078      
000049A8  6712      8240          beq.s     vsprintf_79
000049AA  206E 000C 8241          move.l    12(A6),A0
000049AE  1010      8242          move.b    (A0),D0
000049B0  4880      8243          ext.w     D0
000049B2  48C0      8244          ext.l     D0
000049B4  0C80 0000 8245          cmp.l     #88,D0
000049B8  0058      
000049BA  660A      8246          bne.s     vsprintf_77
                    8247   vsprintf_79:
000049BC  2042      8248          move.l    D2,A0
000049BE  5282      8249          addq.l    #1,D2
000049C0  10BC 0078 8250          move.b    #120,(A0)
000049C4  5287      8251          addq.l    #1,D7
                    8252   vsprintf_77:
000049C6  2042      8253          move.l    D2,A0
000049C8  4210      8254          clr.b     (A0)
000049CA  206E 000C 8255          move.l    12(A6),A0
000049CE  1010      8256          move.b    (A0),D0
000049D0  4880      8257          ext.w     D0
000049D2  48C0      8258          ext.l     D0
000049D4  0C80 0000 8259          cmp.l     #105,D0
000049D8  0069      
000049DA  6700 0076 8260          beq       vsprintf_82
000049DE  6E42      8261          bgt.s     vsprintf_93
000049E0  0C80 0000 8262          cmp.l     #99,D0
000049E4  0063      
000049E6  6700 0084 8263          beq       vsprintf_96
000049EA  6E1C      8264          bgt.s     vsprintf_94
000049EC  0C80 0000 8265          cmp.l     #88,D0
000049F0  0058      
000049F2  6700 005E 8266          beq       vsprintf_82
000049F6  6E00 0184 8267          bgt       vsprintf_80
000049FA  0C80 0000 8268          cmp.l     #69,D0
000049FE  0045      
00004A00  6700 0050 8269          beq       vsprintf_82
00004A04  6000 0176 8270          bra       vsprintf_80
                    8271   vsprintf_94:
00004A08  0C80 0000 8272          cmp.l     #101,D0
00004A0C  0065      
00004A0E  6700 0042 8273          beq       vsprintf_82
00004A12  6E00 0168 8274          bgt       vsprintf_80
00004A16  0C80 0000 8275          cmp.l     #100,D0
00004A1A  0064      
00004A1C  6734      8276          beq.s     vsprintf_82
00004A1E  6000 015C 8277          bra       vsprintf_80
                    8278   vsprintf_93:
00004A22  0C80 0000 8279          cmp.l     #117,D0
00004A26  0075      
00004A28  6728      8280          beq.s     vsprintf_82
00004A2A  6E1A      8281          bgt.s     vsprintf_95
00004A2C  0C80 0000 8282          cmp.l     #115,D0
00004A30  0073      
00004A32  6700 0038 8283          beq       vsprintf_96
00004A36  6E00 0144 8284          bgt       vsprintf_80
00004A3A  0C80 0000 8285          cmp.l     #111,D0
00004A3E  006F      
00004A40  6710      8286          beq.s     vsprintf_82
00004A42  6000 0138 8287          bra       vsprintf_80
                    8288   vsprintf_95:
00004A46  0C80 0000 8289          cmp.l     #120,D0
00004A4A  0078      
00004A4C  6704      8290          beq.s     vsprintf_82
00004A4E  6000 012C 8291          bra       vsprintf_80
                    8292   vsprintf_82:
00004A52  4A2E FFD2 8293          tst.b     -46(A6)
00004A56  6714      8294          beq.s     vsprintf_96
00004A58  4A2E FFCD 8295          tst.b     -51(A6)
00004A5C  660E      8296          bne.s     vsprintf_96
00004A5E  200D      8297          move.l    A5,D0
00004A60  9087      8298          sub.l     D7,D0
00004A62  4884      8299          ext.w     D4
00004A64  48C4      8300          ext.l     D4
00004A66  9084      8301          sub.l     D4,D0
00004A68  2D40 FFFC 8302          move.l    D0,-4(A6)
                    8303   vsprintf_96:
00004A6C  202E FFFC 8304          move.l    -4(A6),D0
00004A70  0C80 0000 8305          cmp.l     #0,D0
00004A74  0000      
00004A76  6C04      8306          bge.s     vsprintf_98
00004A78  42AE FFFC 8307          clr.l     -4(A6)
                    8308   vsprintf_98:
00004A7C  4A2E FFCD 8309          tst.b     -51(A6)
00004A80  6600 0030 8310          bne       vsprintf_104
00004A84  4884      8311          ext.w     D4
00004A86  48C4      8312          ext.l     D4
00004A88  2004      8313          move.l    D4,D0
00004A8A  D0AE FFFC 8314          add.l     -4(A6),D0
00004A8E  D087      8315          add.l     D7,D0
00004A90  1D40 FFD1 8316          move.b    D0,-47(A6)
                    8317   vsprintf_102:
00004A94  102E FFD1 8318          move.b    -47(A6),D0
00004A98  4880      8319          ext.w     D0
00004A9A  48C0      8320          ext.l     D0
00004A9C  220D      8321          move.l    A5,D1
00004A9E  534D      8322          subq.w    #1,A5
00004AA0  B081      8323          cmp.l     D1,D0
00004AA2  6C0E      8324          bge.s     vsprintf_104
00004AA4  4878 0020 8325          pea       32
00004AA8  2F0A      8326          move.l    A2,-(A7)
00004AAA  4E93      8327          jsr       (A3)
00004AAC  504F      8328          addq.w    #8,A7
00004AAE  5286      8329          addq.l    #1,D6
00004AB0  60E2      8330          bra       vsprintf_102
                    8331   vsprintf_104:
00004AB2  41EE FFD4 8332          lea       -44(A6),A0
00004AB6  2408      8333          move.l    A0,D2
                    8334   vsprintf_105:
00004AB8  2042      8335          move.l    D2,A0
00004ABA  4A10      8336          tst.b     (A0)
00004ABC  6716      8337          beq.s     vsprintf_107
00004ABE  2042      8338          move.l    D2,A0
00004AC0  5282      8339          addq.l    #1,D2
00004AC2  1210      8340          move.b    (A0),D1
00004AC4  4881      8341          ext.w     D1
00004AC6  48C1      8342          ext.l     D1
00004AC8  2F01      8343          move.l    D1,-(A7)
00004ACA  2F0A      8344          move.l    A2,-(A7)
00004ACC  4E93      8345          jsr       (A3)
00004ACE  504F      8346          addq.w    #8,A7
00004AD0  5286      8347          addq.l    #1,D6
00004AD2  60E4      8348          bra       vsprintf_105
                    8349   vsprintf_107:
00004AD4  202E FFFC 8350          move.l    -4(A6),D0
00004AD8  1D40 FFD1 8351          move.b    D0,-47(A6)
                    8352   vsprintf_108:
00004ADC  102E FFD1 8353          move.b    -47(A6),D0
00004AE0  532E FFD1 8354          subq.b    #1,-47(A6)
00004AE4  4A00      8355          tst.b     D0
00004AE6  670E      8356          beq.s     vsprintf_110
00004AE8  4878 0030 8357          pea       48
00004AEC  2F0A      8358          move.l    A2,-(A7)
00004AEE  4E93      8359          jsr       (A3)
00004AF0  504F      8360          addq.w    #8,A7
00004AF2  5286      8361          addq.l    #1,D6
00004AF4  60E6      8362          bra       vsprintf_108
                    8363   vsprintf_110:
00004AF6  2043      8364          move.l    D3,A0
00004AF8  4A10      8365          tst.b     (A0)
00004AFA  6700 0048 8366          beq       vsprintf_113
00004AFE  206E 000C 8367          move.l    12(A6),A0
00004B02  1010      8368          move.b    (A0),D0
00004B04  4880      8369          ext.w     D0
00004B06  48C0      8370          ext.l     D0
00004B08  0C80 0000 8371          cmp.l     #115,D0
00004B0C  0073      
00004B0E  670C      8372          beq.s     vsprintf_116
00004B10  6E18      8373          bgt.s     vsprintf_119
00004B12  0C80 0000 8374          cmp.l     #99,D0
00004B16  0063      
00004B18  6702      8375          beq.s     vsprintf_116
00004B1A  600E      8376          bra.s     vsprintf_119
                    8377   vsprintf_116:
00004B1C  2005      8378          move.l    D5,D0
00004B1E  5385      8379          subq.l    #1,D5
00004B20  0C80 0000 8380          cmp.l     #0,D0
00004B24  0000      
00004B26  6E02      8381          bgt.s     vsprintf_119
00004B28  6016      8382          bra.s     vsprintf_115
                    8383   vsprintf_119:
00004B2A  2043      8384          move.l    D3,A0
00004B2C  5283      8385          addq.l    #1,D3
00004B2E  1210      8386          move.b    (A0),D1
00004B30  4881      8387          ext.w     D1
00004B32  48C1      8388          ext.l     D1
00004B34  2F01      8389          move.l    D1,-(A7)
00004B36  2F0A      8390          move.l    A2,-(A7)
00004B38  4E93      8391          jsr       (A3)
00004B3A  504F      8392          addq.w    #8,A7
00004B3C  5286      8393          addq.l    #1,D6
00004B3E  6002      8394          bra.s     vsprintf_112
                    8395   vsprintf_115:
00004B40  6002      8396          bra.s     vsprintf_113
                    8397   vsprintf_112:
00004B42  60B2      8398          bra       vsprintf_110
                    8399   vsprintf_113:
00004B44  4A2E FFCD 8400          tst.b     -51(A6)
00004B48  6700 0030 8401          beq       vsprintf_125
00004B4C  4884      8402          ext.w     D4
00004B4E  48C4      8403          ext.l     D4
00004B50  2004      8404          move.l    D4,D0
00004B52  D0AE FFFC 8405          add.l     -4(A6),D0
00004B56  D087      8406          add.l     D7,D0
00004B58  1D40 FFD1 8407          move.b    D0,-47(A6)
                    8408   vsprintf_123:
00004B5C  102E FFD1 8409          move.b    -47(A6),D0
00004B60  4880      8410          ext.w     D0
00004B62  48C0      8411          ext.l     D0
00004B64  220D      8412          move.l    A5,D1
00004B66  534D      8413          subq.w    #1,A5
00004B68  B081      8414          cmp.l     D1,D0
00004B6A  6C0E      8415          bge.s     vsprintf_125
00004B6C  4878 0020 8416          pea       32
00004B70  2F0A      8417          move.l    A2,-(A7)
00004B72  4E93      8418          jsr       (A3)
00004B74  504F      8419          addq.w    #8,A7
00004B76  5386      8420          subq.l    #1,D6
00004B78  60E2      8421          bra       vsprintf_123
                    8422   vsprintf_125:
00004B7A  6014      8423          bra.s     vsprintf_81
                    8424   vsprintf_80:
00004B7C  206E 000C 8425          move.l    12(A6),A0
00004B80  1210      8426          move.b    (A0),D1
00004B82  4881      8427          ext.w     D1
00004B84  48C1      8428          ext.l     D1
00004B86  2F01      8429          move.l    D1,-(A7)
00004B88  2F0A      8430          move.l    A2,-(A7)
00004B8A  4E93      8431          jsr       (A3)
00004B8C  504F      8432          addq.w    #8,A7
00004B8E  5286      8433          addq.l    #1,D6
                    8434   vsprintf_81:
00004B90  52AE 000C 8435          addq.l    #1,12(A6)
                    8436   vsprintf_2:
00004B94  6000 F9D6 8437          bra       vsprintf_1
                    8438   vsprintf_3:
00004B98  4A92      8439          tst.l     (A2)
00004B9A  6710      8440          beq.s     vsprintf_126
00004B9C  4201      8441          clr.b     D1
00004B9E  C2BC 0000 8442          and.l     #255,D1
00004BA2  00FF      
00004BA4  2F01      8443          move.l    D1,-(A7)
00004BA6  2F0A      8444          move.l    A2,-(A7)
00004BA8  4E93      8445          jsr       (A3)
00004BAA  504F      8446          addq.w    #8,A7
                    8447   vsprintf_126:
00004BAC  2006      8448          move.l    D6,D0
00004BAE  4CDF 3CFC 8449          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004BB2  4E5E      8450          unlk      A6
00004BB4  4E75      8451          rts
                    8452   ULMUL:
00004BB6  4E56 0000 8453          link    A6,#0
00004BBA  48E7 C000 8454          movem.l D0/D1,-(A7)
00004BBE  222E 0008 8455          move.l  8(A6),D1
00004BC2  202E 000C 8456          move.l  12(A6),D0
00004BC6  602C      8457          bra.s   lmul_3
                    8458   LMUL:
00004BC8  4E56 0000 8459          link    A6,#0
00004BCC  48E7 C000 8460          movem.l D0/D1,-(A7)
00004BD0  222E 0008 8461          move.l  8(A6),D1
00004BD4  202E 000C 8462          move.l  12(A6),D0
00004BD8  4A80      8463          tst.l   D0
00004BDA  6A0A      8464          bpl.s   lmul_1
00004BDC  4480      8465          neg.l   D0
00004BDE  4A81      8466          tst.l   D1
00004BE0  6A0A      8467          bpl.s   lmul_2
00004BE2  4481      8468          neg.l   D1
00004BE4  600E      8469          bra.s   lmul_3
                    8470   lmul_1:
00004BE6  4A81      8471          tst.l   D1
00004BE8  6A0A      8472          bpl.s   lmul_3
00004BEA  4481      8473          neg.l   D1
                    8474   lmul_2:
00004BEC  6114      8475          bsr.s   domul
00004BEE  4481      8476          neg.l   D1
00004BF0  4080      8477          negx.l  D0
00004BF2  6002      8478          bra.s   lmul_4
                    8479   lmul_3:
00004BF4  610C      8480          bsr.s   domul
                    8481   lmul_4:
00004BF6  2D41 0008 8482          move.l  D1,8(A6)
00004BFA  4CDF 0003 8483          movem.l (A7)+,D0/D1
00004BFE  4E5E      8484          unlk    A6
00004C00  4E75      8485          rts
                    8486   domul:
00004C02  0C81 0000 8487          cmpi.l  #$FFFF,D1
00004C06  FFFF      
00004C08  620C      8488          bhi.s   domul_1
00004C0A  0C80 0000 8489          cmpi.l  #$FFFF,D0
00004C0E  FFFF      
00004C10  620E      8490          bhi.s   domul_2
00004C12  C2C0      8491          mulu    D0,D1
00004C14  4E75      8492          rts
                    8493   domul_1:
00004C16  0C80 0000 8494          cmpi.l  #$FFFF,D0
00004C1A  FFFF      
00004C1C  6218      8495          bhi.s   domul_4
00004C1E  6002      8496          bra.s   domul_3
                    8497   domul_2
00004C20  C141      8498          exg     D0,D1
                    8499   domul_3:
00004C22  2F02      8500          move.l  D2,-(A7)
00004C24  2401      8501          move.l  D1,D2
00004C26  4842      8502          swap    D2
00004C28  C2C0      8503          mulu    D0,D1
00004C2A  C4C0      8504          mulu    D0,D2
00004C2C  4842      8505          swap    D2
00004C2E  4242      8506          clr.w   D2
00004C30  D282      8507          add.l   D2,D1
00004C32  241F      8508          move.l  (A7)+,D2
00004C34  4E75      8509          rts
                    8510   domul_4:
00004C36  48E7 3000 8511          movem.l D2/D3,-(A7)
00004C3A  2401      8512          move.l  D1,D2
00004C3C  2601      8513          move.l  D1,D3
00004C3E  C2C0      8514          mulu    D0,D1
00004C40  4842      8515          swap    D2
00004C42  C4C0      8516          mulu    D0,D2
00004C44  4840      8517          swap    D0
00004C46  C6C0      8518          mulu    D0,D3
00004C48  D483      8519          add.l   D3,D2
00004C4A  4842      8520          swap    D2
00004C4C  4242      8521          clr.w   D2
00004C4E  D282      8522          add.l   D2,D1
00004C50  4CDF 000C 8523          movem.l (A7)+,D2/D3
00004C54  4E75      8524          rts
                    8525   _gets:
00004C56  4E56 0000 8526          link      A6,#0
00004C5A  48E7 3820 8527          movem.l   D2/D3/D4/A2,-(A7)
00004C5E  45F8 3AB4 8528          lea       _putch,A2
00004C62  282E 0008 8529          move.l    8(A6),D4
00004C66  2404      8530          move.l    D4,D2
                    8531   gets_1:
00004C68  6100 EE7A 8532          bsr       _getch
00004C6C  2600      8533          move.l    D0,D3
00004C6E  0C80 0000 8534          cmp.l     #10,D0
00004C72  000A      
00004C74  6700 003C 8535          beq       gets_3
00004C78  0C83 0000 8536          cmp.l     #8,D3
00004C7C  0008      
00004C7E  6712      8537          beq.s     gets_4
00004C80  2042      8538          move.l    D2,A0
00004C82  5282      8539          addq.l    #1,D2
00004C84  1083      8540          move.b    D3,(A0)
00004C86  4883      8541          ext.w     D3
00004C88  48C3      8542          ext.l     D3
00004C8A  2F03      8543          move.l    D3,-(A7)
00004C8C  4E92      8544          jsr       (A2)
00004C8E  584F      8545          addq.w    #4,A7
00004C90  601E      8546          bra.s     gets_6
                    8547   gets_4:
00004C92  B484      8548          cmp.l     D4,D2
00004C94  631A      8549          bls.s     gets_6
00004C96  4878 0008 8550          pea       8
00004C9A  4E92      8551          jsr       (A2)
00004C9C  584F      8552          addq.w    #4,A7
00004C9E  4878 0020 8553          pea       32
00004CA2  4E92      8554          jsr       (A2)
00004CA4  584F      8555          addq.w    #4,A7
00004CA6  4878 0008 8556          pea       8
00004CAA  4E92      8557          jsr       (A2)
00004CAC  584F      8558          addq.w    #4,A7
00004CAE  5382      8559          subq.l    #1,D2
                    8560   gets_6:
00004CB0  60B6      8561          bra       gets_1
                    8562   gets_3:
00004CB2  4878 000A 8563          pea       10
00004CB6  4E92      8564          jsr       (A2)
00004CB8  584F      8565          addq.w    #4,A7
00004CBA  2042      8566          move.l    D2,A0
00004CBC  4210      8567          clr.b     (A0)
00004CBE  2004      8568          move.l    D4,D0
00004CC0  4CDF 041C 8569          movem.l   (A7)+,D2/D3/D4/A2
00004CC4  4E5E      8570          unlk      A6
00004CC6  4E75      8571          rts
                    8572   _ungetch:
00004CC8  4E56 0000 8573          link      A6,#0
00004CCC  23EE 0008 8574          move.l    8(A6),__ungetbuf
00004CD0  0B00 00C0 
00004CD4  202E 0008 8575          move.l    8(A6),D0
00004CD8  4E5E      8576          unlk      A6
00004CDA  4E75      8577          rts
                    8578   @itoa_convert:
00004CDC  4E56 0000 8579          link      A6,#0
00004CE0  48E7 3C00 8580          movem.l   D2/D3/D4/D5,-(A7)
00004CE4  242E 0008 8581          move.l    8(A6),D2
00004CE8  262E 0010 8582          move.l    16(A6),D3
00004CEC  2A2E 000C 8583          move.l    12(A6),D5
00004CF0  2F05      8584          move.l    D5,-(A7)
00004CF2  2F03      8585          move.l    D3,-(A7)
00004CF4  6100 ECE0 8586          bsr       ULDIV
00004CF8  202F 0004 8587          move.l    4(A7),D0
00004CFC  504F      8588          addq.w    #8,A7
00004CFE  2800      8589          move.l    D0,D4
00004D00  BA83      8590          cmp.l     D3,D5
00004D02  651A      8591          blo.s     @itoa_convert_1
00004D04  2F03      8592          move.l    D3,-(A7)
00004D06  2F05      8593          move.l    D5,-(A7)
00004D08  2F03      8594          move.l    D3,-(A7)
00004D0A  6100 ECCA 8595          bsr       ULDIV
00004D0E  2217      8596          move.l    (A7),D1
00004D10  504F      8597          addq.w    #8,A7
00004D12  2F01      8598          move.l    D1,-(A7)
00004D14  2F02      8599          move.l    D2,-(A7)
00004D16  61C4      8600          bsr       @itoa_convert
00004D18  DEFC 000C 8601          add.w     #12,A7
00004D1C  2400      8602          move.l    D0,D2
                    8603   @itoa_convert_1:
00004D1E  0C84 0000 8604          cmp.l     #9,D4
00004D22  0009      
00004D24  6E0A      8605          bgt.s     @itoa_convert_3
00004D26  2004      8606          move.l    D4,D0
00004D28  0680 0000 8607          add.l     #48,D0
00004D2C  0030      
00004D2E  600E      8608          bra.s     @itoa_convert_4
                    8609   @itoa_convert_3:
00004D30  2004      8610          move.l    D4,D0
00004D32  0680 0000 8611          add.l     #97,D0
00004D36  0061      
00004D38  0480 0000 8612          sub.l     #10,D0
00004D3C  000A      
                    8613   @itoa_convert_4:
00004D3E  2042      8614          move.l    D2,A0
00004D40  1080      8615          move.b    D0,(A0)
00004D42  2002      8616          move.l    D2,D0
00004D44  5280      8617          addq.l    #1,D0
00004D46  4CDF 003C 8618          movem.l   (A7)+,D2/D3/D4/D5
00004D4A  4E5E      8619          unlk      A6
00004D4C  4E75      8620          rts
                    8621   _ltoa:
00004D4E  4E56 0000 8622          link      A6,#0
00004D52  48E7 3C00 8623          movem.l   D2/D3/D4/D5,-(A7)
00004D56  242E 0008 8624          move.l    8(A6),D2
00004D5A  262E 000C 8625          move.l    12(A6),D3
00004D5E  2A2E 0010 8626          move.l    16(A6),D5
00004D62  2803      8627          move.l    D3,D4
00004D64  0C85 0000 8628          cmp.l     #2,D5
00004D68  0002      
00004D6A  6D08      8629          blt.s     ltoa_3
00004D6C  0C85 0000 8630          cmp.l     #36,D5
00004D70  0024      
00004D72  6F06      8631          ble.s     ltoa_1
                    8632   ltoa_3:
00004D74  2003      8633          move.l    D3,D0
00004D76  6000 0052 8634          bra       ltoa_4
                    8635   ltoa_1:
00004D7A  0C85 0000 8636          cmp.l     #10,D5
00004D7E  000A      
00004D80  6600 0032 8637          bne       ltoa_5
00004D84  0C82 0000 8638          cmp.l     #0,D2
00004D88  0000      
00004D8A  6C28      8639          bge.s     ltoa_5
00004D8C  2002      8640          move.l    D2,D0
00004D8E  4480      8641          neg.l     D0
00004D90  2400      8642          move.l    D0,D2
00004D92  0C82 0000 8643          cmp.l     #0,D2
00004D96  0000      
00004D98  6C12      8644          bge.s     ltoa_7
00004D9A  4879 0000 8645          pea       @itoa_1
00004D9E  67BC      
00004DA0  2F03      8646          move.l    D3,-(A7)
00004DA2  6100 EC22 8647          bsr       _strcpy
00004DA6  504F      8648          addq.w    #8,A7
00004DA8  2003      8649          move.l    D3,D0
00004DAA  601E      8650          bra.s     ltoa_4
                    8651   ltoa_7:
00004DAC  2044      8652          move.l    D4,A0
00004DAE  5284      8653          addq.l    #1,D4
00004DB0  10BC 002D 8654          move.b    #45,(A0)
                    8655   ltoa_5:
00004DB4  2F05      8656          move.l    D5,-(A7)
00004DB6  2F02      8657          move.l    D2,-(A7)
00004DB8  2F04      8658          move.l    D4,-(A7)
00004DBA  6100 FF20 8659          bsr       @itoa_convert
00004DBE  DEFC 000C 8660          add.w     #12,A7
00004DC2  2800      8661          move.l    D0,D4
00004DC4  2044      8662          move.l    D4,A0
00004DC6  4210      8663          clr.b     (A0)
00004DC8  2003      8664          move.l    D3,D0
                    8665   ltoa_4:
00004DCA  4CDF 003C 8666          movem.l   (A7)+,D2/D3/D4/D5
00004DCE  4E5E      8667          unlk      A6
00004DD0  4E75      8668          rts
                    8669   _ultoa:
00004DD2  4E56 0000 8670          link      A6,#0
00004DD6  48E7 3800 8671          movem.l   D2/D3/D4,-(A7)
00004DDA  262E 0010 8672          move.l    16(A6),D3
00004DDE  282E 000C 8673          move.l    12(A6),D4
00004DE2  2404      8674          move.l    D4,D2
00004DE4  0C83 0000 8675          cmp.l     #2,D3
00004DE8  0002      
00004DEA  6D08      8676          blt.s     ultoa_3
00004DEC  0C83 0000 8677          cmp.l     #36,D3
00004DF0  0024      
00004DF2  6F04      8678          ble.s     ultoa_1
                    8679   ultoa_3:
00004DF4  2004      8680          move.l    D4,D0
00004DF6  6018      8681          bra.s     ultoa_4
                    8682   ultoa_1:
00004DF8  2F03      8683          move.l    D3,-(A7)
00004DFA  2F2E 0008 8684          move.l    8(A6),-(A7)
00004DFE  2F02      8685          move.l    D2,-(A7)
00004E00  6100 FEDA 8686          bsr       @itoa_convert
00004E04  DEFC 000C 8687          add.w     #12,A7
00004E08  2400      8688          move.l    D0,D2
00004E0A  2042      8689          move.l    D2,A0
00004E0C  4210      8690          clr.b     (A0)
00004E0E  2004      8691          move.l    D4,D0
                    8692   ultoa_4:
00004E10  4CDF 001C 8693          movem.l   (A7)+,D2/D3/D4
00004E14  4E5E      8694          unlk      A6
00004E16  4E75      8695          rts
                    8696   _itoa:
00004E18  4E56 0000 8697          link      A6,#0
00004E1C  2F2E 0010 8698          move.l    16(A6),-(A7)
00004E20  2F2E 000C 8699          move.l    12(A6),-(A7)
00004E24  2F2E 0008 8700          move.l    8(A6),-(A7)
00004E28  6100 FF24 8701          bsr       _ltoa
00004E2C  DEFC 000C 8702          add.w     #12,A7
00004E30  4E5E      8703          unlk      A6
00004E32  4E75      8704          rts
                    8705   _strlen:
00004E34  206F 0004 8706          move.l    (4,A7),A0
00004E38  2248      8707          move.l    A0,A1
                    8708   strlen_1:
00004E3A  4A19      8709          tst.b     (A1)+
00004E3C  66FC      8710          bne       strlen_1
00004E3E  2009      8711          move.l    A1,D0
00004E40  9088      8712          sub.l     A0,D0
00004E42  5380      8713          subq.l    #1,D0
00004E44  4E75      8714          rts
                    8715          section   const
                    8716   
                    8717   @m68kde~1_1:
00004E46  0D0A 00   8718          dc.b      13,10,0
                    8719   @m68kde~1_2:
00004E4A  0D53 7769 8720          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004E4E  7463 6865 
00004E52  7320 5357 
00004E56  5B        
00004E57  372D 305D 8721          dc.b      55,45,48,93,32,61,32,0
00004E5B  203D 2000 
                    8722   @m68kde~1_3:
00004E60  3000      8723          dc.b      48,0
                    8724   @m68kde~1_4:
00004E62  3100      8725          dc.b      49,0
                    8726   @m68kde~1_5:
00004E64  0D0A 4475 8727          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004E68  6D70 204D 
00004E6C  656D 6F72 
00004E70  79        
00004E71  2042 6C6F 8728          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004E75  636B 3A20 
00004E79  3C45 5343 
00004E7D  3E20      
00004E7F  746F 2041 8729          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004E83  626F 7274 
00004E87  2C20 3C53 
00004E8B  50        
00004E8C  4143 453E 8730          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004E90  2074 6F20 
00004E94  436F 6E74 
00004E98  69        
00004E99  6E75 6500 8731          dc.b      110,117,101,0
                    8732   @m68kde~1_6:
00004E9E  0D0A 456E 8733          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004EA2  7465 7220 
00004EA6  5374 6172 
00004EAA  74        
00004EAB  2041 6464 8734          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004EAF  7265 7373 
00004EB3  3A20 00   
                    8735   @m68kde~1_7:
00004EB6  0D0A 2530 8736          dc.b      13,10,37,48,56,120,32,0
00004EBA  3878 2000 
                    8737   @m68kde~1_8:
00004EBE  2530 3258 8738          dc.b      37,48,50,88,0
00004EC2  00        
                    8739   @m68kde~1_9:
00004EC4  2020 00   8740          dc.b      32,32,0
                    8741   @m68kde~1_10:
00004EC8  0D0A 4669 8742          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004ECC  6C6C 204D 
00004ED0  656D 6F72 
00004ED4  79        
00004ED5  2042 6C6F 8743          dc.b      32,66,108,111,99,107,0
00004ED9  636B 00   
                    8744   @m68kde~1_11:
00004EDC  0D0A 456E 8745          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004EE0  7465 7220 
00004EE4  456E 6420 
00004EE8  41        
00004EE9  6464 7265 8746          dc.b      100,100,114,101,115,115,58,32,0
00004EED  7373 3A20 
00004EF1  00        
                    8747   @m68kde~1_12:
00004EF2  0D0A 456E 8748          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004EF6  7465 7220 
00004EFA  4669 6C6C 
00004EFE  20        
00004EFF  4461 7461 8749          dc.b      68,97,116,97,58,32,0
00004F03  3A20 00   
                    8750   @m68kde~1_13:
00004F06  0D0A 4669 8751          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00004F0A  6C6C 696E 
00004F0E  6720 4164 
00004F12  64        
00004F13  7265 7373 8752          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00004F17  6573 205B 
00004F1B  2425 3038 
00004F1F  58        
00004F20  202D 2024 8753          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00004F24  2530 3858 
00004F28  5D20 7769 
00004F2C  7468      
00004F2E  2024 2530 8754          dc.b      32,36,37,48,50,88,0
00004F32  3258 00   
                    8755   @m68kde~1_14:
00004F36  0D0A 5573 8756          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00004F3A  6520 4879 
00004F3E  7065 7254 
00004F42  65        
00004F43  726D 696E 8757          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00004F47  616C 2074 
00004F4B  6F20 5365 
00004F4F  6E64 2054 8758          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004F53  6578 7420 
00004F57  4669 6C65 
00004F5B  2028 2E68 8759          dc.b      32,40,46,104,101,120,41,13,10,0
00004F5F  6578 290D 
00004F63  0A00      
                    8760   @m68kde~1_15:
00004F66  0D0A 4C6F 8761          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004F6A  6164 2046 
00004F6E  6169 6C65 
00004F72  64        
00004F73  2061 7420 8762          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00004F77  4164 6472 
00004F7B  6573 7320 
00004F7F  3D        
00004F80  205B 2425 8763          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004F84  3038 585D 
00004F88  0D0A 00   
                    8764   @m68kde~1_16:
00004F8C  0D0A 5375 8765          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004F90  6363 6573 
00004F94  733A 2044 
00004F98  6F        
00004F99  776E 6C6F 8766          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004F9D  6164 6564 
00004FA1  2025 6420 
00004FA5  6279 7465 8767          dc.b      98,121,116,101,115,13,10,0
00004FA9  730D 0A00 
                    8768   @m68kde~1_17:
00004FAE  0D0A 4578 8769          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004FB2  616D 696E 
00004FB6  6520 616E 
00004FBA  64        
00004FBB  2043 6861 8770          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004FBF  6E67 6520 
00004FC3  4D65 6D6F 
00004FC7  72        
00004FC8  7900      8771          dc.b      121,0
                    8772   @m68kde~1_18:
00004FCA  0D0A 3C45 8773          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004FCE  5343 3E20 
00004FD2  746F 2053 
00004FD6  746F      
00004FD8  702C 203C 8774          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004FDC  5350 4143 
00004FE0  453E 2074 
00004FE4  6F20      
00004FE6  4164 7661 8775          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00004FEA  6E63 652C 
00004FEE  2027 2D27 
00004FF2  2074      
00004FF4  6F20 476F 8776          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004FF8  2042 6163 
00004FFC  6B2C 203C 
00005000  4441      
00005002  5441 3E20 8777          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00005006  746F 2063 
0000500A  6861 6E67 
0000500E  65        
0000500F  00        8778          dc.b      0
                    8779   @m68kde~1_19:
00005010  0D0A 456E 8780          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00005014  7465 7220 
00005018  4164 6472 
0000501C  65        
0000501D  7373 3A20 8781          dc.b      115,115,58,32,0
00005021  00        
                    8782   @m68kde~1_20:
00005022  0D0A 5B25 8783          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00005026  3038 785D 
0000502A  203A 2025 
0000502E  3032 78   
00005031  2020 00   8784          dc.b      32,32,0
                    8785   @m68kde~1_21:
00005034  0D0A 5761 8786          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00005038  726E 696E 
0000503C  6720 4368 
00005040  61        
00005041  6E67 6520 8787          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00005045  4661 696C 
00005049  6564 3A20 
0000504D  57        
0000504E  726F 7465 8788          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00005052  205B 2530 
00005056  3278 5D2C 
0000505A  20        
0000505B  5265 6164 8789          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
0000505F  205B 2530 
00005063  3278 5D00 
                    8790   @m68kde~1_22:
00005068  0A45 7261 8791          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
0000506C  7369 6E67 
00005070  2E2E 2E0A 
00005074  00        
                    8792   @m68kde~1_23:
00005076  0D0A 2050 8793          dc.b      13,10,32,80,114,111,103,114,97,109,109,105,110
0000507A  726F 6772 
0000507E  616D 6D69 
00005082  6E        
00005083  6720 436F 8794          dc.b      103,32,67,111,109,112,108,101,116,101,33,0
00005087  6D70 6C65 
0000508B  7465 2100 
                    8795   @m68kde~1_24:
00005090  0D0A 204C 8796          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
00005094  6F61 6469 
00005098  6E67 2050 
0000509C  72        
0000509D  6F67 7261 8797          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
000050A1  6D20 4672 
000050A5  6F6D 2053 
000050A9  50        
000050AA  4920 466C 8798          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
000050AE  6173 682E 
000050B2  2E2E 2E00 
                    8799   @m68kde~1_25:
000050B6  0D0A 2052 8800          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
000050BA  6561 6420 
000050BE  4461 7461 
000050C2  3A20      
000050C4  2530 3878 8801          dc.b      37,48,56,120,32,10,0
000050C8  200A 00   
                    8802   @m68kde~1_26:
000050CC  4949 435F 8803          dc.b      73,73,67,95,67,82,83,82,32,84,114,97,110,115
000050D0  4352 5352 
000050D4  2054 7261 
000050D8  6E73      
000050DA  6D69 7420 8804          dc.b      109,105,116,32,40,66,105,110,97,114,121,41,58
000050DE  2842 696E 
000050E2  6172 7929 
000050E6  3A        
000050E7  2000      8805          dc.b      32,0
                    8806   @m68kde~1_27:
000050EA  2564 00   8807          dc.b      37,100,0
                    8808   @m68kde~1_28:
000050EE  0A00      8809          dc.b      10,0
                    8810   @m68kde~1_29:
000050F0  4545 5052 8811          dc.b      69,69,80,82,79,77,32,70,108,97,115,104,32,80
000050F4  4F4D 2046 
000050F8  6C61 7368 
000050FC  2050      
000050FE  6167 6520 8812          dc.b      97,103,101,32,87,114,105,116,101,58,32,83,116
00005102  5772 6974 
00005106  653A 2053 
0000510A  74        
0000510B  6172 7420 8813          dc.b      97,114,116,32,65,100,100,114,101,115,115,58
0000510F  4164 6472 
00005113  6573 733A 
00005117  2030 7825 8814          dc.b      32,48,120,37,120,44,32,110,117,109,98,121,116
0000511B  782C 206E 
0000511F  756D 6279 
00005123  74        
00005124  6573 3A20 8815          dc.b      101,115,58,32,37,100,10,0
00005128  2564 0A00 
                    8816   @m68kde~1_30:
0000512C  0D0A 2042 8817          dc.b      13,10,32,66,108,111,99,107,32,48,32,65,100,100
00005130  6C6F 636B 
00005134  2030 2041 
00005138  6464      
0000513A  7265 7373 8818          dc.b      114,101,115,115,58,32,48,120,37,48,52,88,58
0000513E  3A20 3078 
00005142  2530 3458 
00005146  3A        
00005147  2025 640A 8819          dc.b      32,37,100,10,0
0000514B  00        
                    8820   @m68kde~1_31:
0000514C  0D0A 2045 8821          dc.b      13,10,32,69,120,105,116,105,110,103,32,69,69
00005150  7869 7469 
00005154  6E67 2045 
00005158  45        
00005159  5052 4F4D 8822          dc.b      80,82,79,77,32,82,101,97,100,32,66,108,111,99
0000515D  2052 6561 
00005161  6420 426C 
00005165  6F63      
00005167  6B20 300A 8823          dc.b      107,32,48,10,0
0000516B  00        
                    8824   @m68kde~1_32:
0000516C  0D0A 2042 8825          dc.b      13,10,32,66,108,111,99,107,32,49,32,65,100,100
00005170  6C6F 636B 
00005174  2031 2041 
00005178  6464      
0000517A  7265 7373 8826          dc.b      114,101,115,115,58,32,48,120,37,48,52,88,58
0000517E  3A20 3078 
00005182  2530 3458 
00005186  3A        
00005187  2025 640A 8827          dc.b      32,37,100,10,0
0000518B  00        
                    8828   @m68kde~1_33:
0000518C  0D0A 2045 8829          dc.b      13,10,32,69,120,105,116,105,110,103,32,69,69
00005190  7869 7469 
00005194  6E67 2045 
00005198  45        
00005199  5052 4F4D 8830          dc.b      80,82,79,77,32,82,101,97,100,32,66,108,111,99
0000519D  2052 6561 
000051A1  6420 426C 
000051A5  6F63      
000051A7  6B20 310A 8831          dc.b      107,32,49,10,0
000051AB  00        
                    8832   @m68kde~1_34:
000051AC  0D0A 2049 8833          dc.b      13,10,32,73,50,67,32,84,101,115,116,10,0
000051B0  3243 2054 
000051B4  6573 740A 
000051B8  00        
                    8834   @m68kde~1_35:
000051BA  0D0A 496E 8835          dc.b      13,10,73,110,105,116,105,97,108,105,122,105
000051BE  6974 6961 
000051C2  6C69 7A69 
000051C6  6E67 2049 8836          dc.b      110,103,32,73,50,67,46,46,46,10,0
000051CA  3243 2E2E 
000051CE  2E0A 00   
                    8837   @m68kde~1_36:
000051D2  0D0A 4368 8838          dc.b      13,10,67,104,111,111,115,101,32,111,112,116
000051D6  6F6F 7365 
000051DA  206F 7074 
000051DE  696F 6E3A 8839          dc.b      105,111,110,58,10,0
000051E2  0A00      
                    8840   @m68kde~1_37:
000051E4  3120 5265 8841          dc.b      49,32,82,101,97,100,32,83,105,110,103,108,101
000051E8  6164 2053 
000051EC  696E 676C 
000051F0  65        
000051F1  2042 7974 8842          dc.b      32,66,121,116,101,32,102,114,111,109,32,69,69
000051F5  6520 6672 
000051F9  6F6D 2045 
000051FD  45        
000051FE  5052 4F4D 8843          dc.b      80,82,79,77,10,0
00005202  0A00      
                    8844   @m68kde~1_38:
00005204  3220 5772 8845          dc.b      50,32,87,114,105,116,101,32,83,105,110,103,108
00005208  6974 6520 
0000520C  5369 6E67 
00005210  6C        
00005211  6520 4279 8846          dc.b      101,32,66,121,116,101,32,116,111,32,69,69,80
00005215  7465 2074 
00005219  6F20 4545 
0000521D  50        
0000521E  524F 4D0A 8847          dc.b      82,79,77,10,0
00005222  00        
                    8848   @m68kde~1_39:
00005224  3320 5265 8849          dc.b      51,32,82,101,97,100,32,66,108,111,99,107,32
00005228  6164 2042 
0000522C  6C6F 636B 
00005230  20        
00005231  6F66 2044 8850          dc.b      111,102,32,68,97,116,97,32,102,114,111,109,32
00005235  6174 6120 
00005239  6672 6F6D 
0000523D  20        
0000523E  4545 5052 8851          dc.b      69,69,80,82,79,77,10,0
00005242  4F4D 0A00 
                    8852   @m68kde~1_40:
00005246  3420 5772 8853          dc.b      52,32,87,114,105,116,101,32,66,108,111,99,107
0000524A  6974 6520 
0000524E  426C 6F63 
00005252  6B        
00005253  206F 6620 8854          dc.b      32,111,102,32,68,97,116,97,32,116,111,32,69
00005257  4461 7461 
0000525B  2074 6F20 
0000525F  45        
00005260  4550 524F 8855          dc.b      69,80,82,79,77,10,0
00005264  4D0A 00   
                    8856   @m68kde~1_41:
00005268  0D0A 5265 8857          dc.b      13,10,82,101,97,100,32,83,105,110,103,108,101
0000526C  6164 2053 
00005270  696E 676C 
00005274  65        
00005275  2042 7974 8858          dc.b      32,66,121,116,101,10,0
00005279  650A 00   
                    8859   @m68kde~1_42:
0000527C  456E 7465 8860          dc.b      69,110,116,101,114,32,97,100,100,114,101,115
00005280  7220 6164 
00005284  6472 6573 
00005288  7320 2868 8861          dc.b      115,32,40,104,101,120,41,58,32,48,120,0
0000528C  6578 293A 
00005290  2030 7800 
                    8862   @m68kde~1_43:
00005294  0D0A 5265 8863          dc.b      13,10,82,101,97,100,32,102,114,111,109,32,97
00005298  6164 2066 
0000529C  726F 6D20 
000052A0  61        
000052A1  6464 7265 8864          dc.b      100,100,114,101,115,115,32,48,120,37,88,58,32
000052A5  7373 2030 
000052A9  7825 583A 
000052AD  20        
000052AE  3078 2530 8865          dc.b      48,120,37,48,50,88,10,0
000052B2  3258 0A00 
                    8866   @m68kde~1_44:
000052B6  0D0A 5772 8867          dc.b      13,10,87,114,105,116,101,32,83,105,110,103,108
000052BA  6974 6520 
000052BE  5369 6E67 
000052C2  6C        
000052C3  6520 4279 8868          dc.b      101,32,66,121,116,101,10,0
000052C7  7465 0A00 
                    8869   @m68kde~1_45:
000052CC  0D0A 456E 8870          dc.b      13,10,69,110,116,101,114,32,97,100,100,114,101
000052D0  7465 7220 
000052D4  6164 6472 
000052D8  65        
000052D9  7373 2028 8871          dc.b      115,115,32,40,104,101,120,41,58,32,48,120,0
000052DD  6865 7829 
000052E1  3A20 3078 
000052E5  00        
                    8872   @m68kde~1_46:
000052E6  0A45 6E74 8873          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000052EA  6572 2077 
000052EE  6869 6368 
000052F2  2064 6174 8874          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000052F6  6120 7061 
000052FA  7474 6572 
000052FE  6E        
000052FF  2079 6F75 8875          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005303  2077 616E 
00005307  7420 746F 
0000530B  2077 7269 8876          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000530F  7465 2069 
00005313  6E74 6F20 
00005317  6D65 6D6F 8877          dc.b      109,101,109,111,114,121,58,10,0
0000531B  7279 3A0A 
0000531F  00        
                    8878   @m68kde~1_47:
00005320  2030 3A20 8879          dc.b      32,48,58,32,48,120,48,48,10,32,49,58,32,48,120
00005324  3078 3030 
00005328  0A20 313A 
0000532C  2030 78   
0000532F  4232 0A20 8880          dc.b      66,50,10,32,50,58,32,48,120,67,51,10,32,51,58
00005333  323A 2030 
00005337  7843 330A 
0000533B  2033 3A   
0000533E  2030 7844 8881          dc.b      32,48,120,68,52,10,32,52,58,32,67,117,115,116
00005342  340A 2034 
00005346  3A20 4375 
0000534A  7374      
0000534C  6F6D 2076 8882          dc.b      111,109,32,118,97,108,117,101,10,0
00005350  616C 7565 
00005354  0A00      
                    8883   @m68kde~1_48:
00005356  5365 6C65 8884          dc.b      83,101,108,101,99,116,32,112,97,116,116,101
0000535A  6374 2070 
0000535E  6174 7465 
00005362  726E 00   8885          dc.b      114,110,0
                    8886   @m68kde~1_49:
00005366  5772 6F74 8887          dc.b      87,114,111,116,101,32,48,120,37,48,50,88,32
0000536A  6520 3078 
0000536E  2530 3258 
00005372  20        
00005373  746F 2061 8888          dc.b      116,111,32,97,100,100,114,101,115,115,32,48
00005377  6464 7265 
0000537B  7373 2030 
0000537F  7825 580A 8889          dc.b      120,37,88,10,0
00005383  00        
                    8890   @m68kde~1_50:
00005384  5265 6164 8891          dc.b      82,101,97,100,32,98,97,99,107,58,32,48,120,37
00005388  2062 6163 
0000538C  6B3A 2030 
00005390  7825      
00005392  3032 580A 8892          dc.b      48,50,88,10,0
00005396  00        
                    8893   @m68kde~1_51:
00005398  0D0A 5265 8894          dc.b      13,10,82,101,97,100,32,66,108,111,99,107,32
0000539C  6164 2042 
000053A0  6C6F 636B 
000053A4  20        
000053A5  6F66 2044 8895          dc.b      111,102,32,68,97,116,97,10,0
000053A9  6174 610A 
000053AD  00        
                    8896   @m68kde~1_52:
000053AE  456E 7465 8897          dc.b      69,110,116,101,114,32,115,116,97,114,116,32
000053B2  7220 7374 
000053B6  6172 7420 
000053BA  6164 6472 8898          dc.b      97,100,100,114,101,115,115,32,40,104,101,120
000053BE  6573 7320 
000053C2  2868 6578 
000053C6  293A 2030 8899          dc.b      41,58,32,48,120,0
000053CA  7800      
                    8900   @m68kde~1_53:
000053CC  0D0A 456E 8901          dc.b      13,10,69,110,116,101,114,32,110,117,109,98,101
000053D0  7465 7220 
000053D4  6E75 6D62 
000053D8  65        
000053D9  7220 6F66 8902          dc.b      114,32,111,102,32,98,121,116,101,115,32,116
000053DD  2062 7974 
000053E1  6573 2074 
000053E5  6F20 7265 8903          dc.b      111,32,114,101,97,100,32,40,104,101,120,41,58
000053E9  6164 2028 
000053ED  6865 7829 
000053F1  3A        
000053F2  2030 7800 8904          dc.b      32,48,120,0
                    8905   @m68kde~1_54:
000053F6  0D0A 5265 8906          dc.b      13,10,82,101,97,100,105,110,103,32,48,120,37
000053FA  6164 696E 
000053FE  6720 3078 
00005402  25        
00005403  5820 2825 8907          dc.b      88,32,40,37,100,41,32,98,121,116,101,115,32
00005407  6429 2062 
0000540B  7974 6573 
0000540F  20        
00005410  7374 6172 8908          dc.b      115,116,97,114,116,105,110,103,32,102,114,111
00005414  7469 6E67 
00005418  2066 726F 
0000541C  6D20 6164 8909          dc.b      109,32,97,100,100,114,101,115,115,32,48,120
00005420  6472 6573 
00005424  7320 3078 
00005428  2558 2E2E 8910          dc.b      37,88,46,46,46,10,0
0000542C  2E0A 00   
                    8911   @m68kde~1_55:
00005430  0D0A 5772 8912          dc.b      13,10,87,114,105,116,101,32,66,108,111,99,107
00005434  6974 6520 
00005438  426C 6F63 
0000543C  6B        
0000543D  206F 6620 8913          dc.b      32,111,102,32,68,97,116,97,10,0
00005441  4461 7461 
00005445  0A00      
                    8914   @m68kde~1_56:
00005448  0D0A 456E 8915          dc.b      13,10,69,110,116,101,114,32,110,117,109,98,101
0000544C  7465 7220 
00005450  6E75 6D62 
00005454  65        
00005455  7220 6F66 8916          dc.b      114,32,111,102,32,98,121,116,101,115,32,116
00005459  2062 7974 
0000545D  6573 2074 
00005461  6F20 7772 8917          dc.b      111,32,119,114,105,116,101,32,40,104,101,120
00005465  6974 6520 
00005469  2868 6578 
0000546D  293A 2030 8918          dc.b      41,58,32,48,120,0
00005471  7800      
                    8919   @m68kde~1_57:
00005474  0D0A 456E 8920          dc.b      13,10,69,110,116,101,114,32,119,104,105,99,104
00005478  7465 7220 
0000547C  7768 6963 
00005480  68        
00005481  2064 6174 8921          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005485  6120 7061 
00005489  7474 6572 
0000548D  6E        
0000548E  2079 6F75 8922          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005492  2077 616E 
00005496  7420 746F 
0000549A  2077 7269 8923          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000549E  7465 2069 
000054A2  6E74 6F20 
000054A6  6D65 6D6F 8924          dc.b      109,101,109,111,114,121,58,10,0
000054AA  7279 3A0A 
000054AE  00        
                    8925   @m68kde~1_58:
000054B0  2030 3A20 8926          dc.b      32,48,58,32,48,120,48,48,10,32,49,58,32,48,120
000054B4  3078 3030 
000054B8  0A20 313A 
000054BC  2030 78   
000054BF  4232 0A20 8927          dc.b      66,50,10,32,50,58,32,48,120,67,51,10,32,51,58
000054C3  323A 2030 
000054C7  7843 330A 
000054CB  2033 3A   
000054CE  2030 7844 8928          dc.b      32,48,120,68,52,10,32,52,58,32,73,110,99,114
000054D2  340A 2034 
000054D6  3A20 496E 
000054DA  6372      
000054DC  656D 656E 8929          dc.b      101,109,101,110,116,105,110,103,32,112,97,116
000054E0  7469 6E67 
000054E4  2070 6174 
000054E8  7465 726E 8930          dc.b      116,101,114,110,10,0
000054EC  0A00      
                    8931   @m68kde~1_59:
000054EE  5365 6C65 8932          dc.b      83,101,108,101,99,116,101,100,32,105,110,99
000054F2  6374 6564 
000054F6  2069 6E63 
000054FA  7265 6D65 8933          dc.b      114,101,109,101,110,116,105,110,103,32,112,97
000054FE  6E74 696E 
00005502  6720 7061 
00005506  7474 6572 8934          dc.b      116,116,101,114,110,32,40,97,100,100,114,101
0000550A  6E20 2861 
0000550E  6464 7265 
00005512  7373 2026 8935          dc.b      115,115,32,38,32,48,120,70,70,41,10,0
00005516  2030 7846 
0000551A  4629 0A00 
                    8936   @m68kde~1_60:
0000551E  5365 6C65 8937          dc.b      83,101,108,101,99,116,101,100,32,112,97,116
00005522  6374 6564 
00005526  2070 6174 
0000552A  7465 726E 8938          dc.b      116,101,114,110,58,32,48,120,37,48,50,88,10
0000552E  3A20 3078 
00005532  2530 3258 
00005536  0A        
00005537  00        8939          dc.b      0
                    8940   @m68kde~1_61:
00005538  0D0A 5072 8941          dc.b      13,10,80,114,101,112,97,114,105,110,103,32,116
0000553C  6570 6172 
00005540  696E 6720 
00005544  74        
00005545  6F20 7772 8942          dc.b      111,32,119,114,105,116,101,32,48,120,37,88,32
00005549  6974 6520 
0000554D  3078 2558 
00005551  20        
00005552  2825 6429 8943          dc.b      40,37,100,41,32,98,121,116,101,115,32,111,102
00005556  2062 7974 
0000555A  6573 206F 
0000555E  66        
0000555F  2064 6174 8944          dc.b      32,100,97,116,97,32,115,116,97,114,116,105,110
00005563  6120 7374 
00005567  6172 7469 
0000556B  6E        
0000556C  6720 6174 8945          dc.b      103,32,97,116,32,97,100,100,114,101,115,115
00005570  2061 6464 
00005574  7265 7373 
00005578  2030 7825 8946          dc.b      32,48,120,37,88,46,46,46,10,0
0000557C  582E 2E2E 
00005580  0A00      
                    8947   @m68kde~1_62:
00005582  0D50 7269 8948          dc.b      13,80,114,105,110,116,105,110,103,32,69,110
00005586  6E74 696E 
0000558A  6720 456E 
0000558E  7469 7265 8949          dc.b      116,105,114,101,32,69,69,80,82,79,77,10,0
00005592  2045 4550 
00005596  524F 4D0A 
0000559A  00        
                    8950   @m68kde~1_63:
0000559C  0D0A 2041 8951          dc.b      13,10,32,65,68,67,32,82,101,97,100,58,32,37
000055A0  4443 2052 
000055A4  6561 643A 
000055A8  2025      
000055AA  640A 00   8952          dc.b      100,10,0
                    8953   @m68kde~1_64:
000055AE  2425 3038 8954          dc.b      36,37,48,56,88,32,32,0
000055B2  5820 2000 
                    8955   @m68kde~1_65:
000055B6  2000      8956          dc.b      32,0
                    8957   @m68kde~1_66:
000055B8  2E00      8958          dc.b      46,0
                    8959   @m68kde~1_67:
000055BA  2563 00   8960          dc.b      37,99,0
                    8961   @m68kde~1_68:
000055BE  00        8962          dc.b      0
                    8963   @m68kde~1_69:
000055C0  0D0A 0D0A 8964          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000055C4  2044 3020 
000055C8  3D20 2425 
000055CC  3038 58   
000055CF  2020 4130 8965          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000055D3  203D 2024 
000055D7  2530 3858 
000055DB  00        
                    8966   @m68kde~1_70:
000055DC  0D0A 2044 8967          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000055E0  3120 3D20 
000055E4  2425 3038 
000055E8  5820 20   
000055EB  4131 203D 8968          dc.b      65,49,32,61,32,36,37,48,56,88,0
000055EF  2024 2530 
000055F3  3858 00   
                    8969   @m68kde~1_71:
000055F6  0D0A 2044 8970          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000055FA  3220 3D20 
000055FE  2425 3038 
00005602  5820 20   
00005605  4132 203D 8971          dc.b      65,50,32,61,32,36,37,48,56,88,0
00005609  2024 2530 
0000560D  3858 00   
                    8972   @m68kde~1_72:
00005610  0D0A 2044 8973          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00005614  3320 3D20 
00005618  2425 3038 
0000561C  5820 20   
0000561F  4133 203D 8974          dc.b      65,51,32,61,32,36,37,48,56,88,0
00005623  2024 2530 
00005627  3858 00   
                    8975   @m68kde~1_73:
0000562A  0D0A 2044 8976          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000562E  3420 3D20 
00005632  2425 3038 
00005636  5820 20   
00005639  4134 203D 8977          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000563D  2024 2530 
00005641  3858 00   
                    8978   @m68kde~1_74:
00005644  0D0A 2044 8979          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00005648  3520 3D20 
0000564C  2425 3038 
00005650  5820 20   
00005653  4135 203D 8980          dc.b      65,53,32,61,32,36,37,48,56,88,0
00005657  2024 2530 
0000565B  3858 00   
                    8981   @m68kde~1_75:
0000565E  0D0A 2044 8982          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00005662  3620 3D20 
00005666  2425 3038 
0000566A  5820 20   
0000566D  4136 203D 8983          dc.b      65,54,32,61,32,36,37,48,56,88,0
00005671  2024 2530 
00005675  3858 00   
                    8984   @m68kde~1_76:
00005678  0D0A 2044 8985          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
0000567C  3720 3D20 
00005680  2425 3038 
00005684  5820 20   
00005687  4137 203D 8986          dc.b      65,55,32,61,32,36,37,48,56,88,0
0000568B  2024 2530 
0000568F  3858 00   
                    8987   @m68kde~1_77:
00005692  0D0A 0D0A 8988          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00005696  5553 5020 
0000569A  3D20 2425 
0000569E  3038 58   
000056A1  2020 2841 8989          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000056A5  3729 2055 
000056A9  7365 7220 
000056AD  5350      
000056AF  00        8990          dc.b      0
                    8991   @m68kde~1_78:
000056B0  0D0A 5353 8992          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000056B4  5020 3D20 
000056B8  2425 3038 
000056BC  5820 20   
000056BF  2841 3729 8993          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000056C3  2053 7570 
000056C7  6572 7669 
000056CB  73        
000056CC  6F72 2053 8994          dc.b      111,114,32,83,80,0
000056D0  5000      
                    8995   @m68kde~1_79:
000056D2  0D0A 2053 8996          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000056D6  5220 3D20 
000056DA  2425 3034 
000056DE  5820 20   
000056E1  2000      8997          dc.b      32,0
                    8998   @m68kde~1_80:
000056E4  2020 205B 8999          dc.b      32,32,32,91,0
000056E8  00        
                    9000   @m68kde~1_81:
000056EA  0D0A 2050 9001          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000056EE  4320 3D20 
000056F2  2425 3038 
000056F6  5820 20   
000056F9  00        9002          dc.b      0
                    9003   @m68kde~1_82:
000056FA  5B40 2042 9004          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
000056FE  5245 414B 
00005702  504F 494E 
00005706  545D 00   
                    9005   @m68kde~1_83:
0000570A  0D0A 5750 9006          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
0000570E  2564 203D 
00005712  2025 7300 
                    9007   @m68kde~1_84:
00005716  0D0A 0D0A 9008          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000571A  0D0A 0D0A 
0000571E  0D0A 0D0A 
00005722  5369 6E   
00005725  676C 6520 9009          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00005729  5374 6570 
0000572D  2020 3A5B 
00005731  4F        
00005732  4E5D 00   9010          dc.b      78,93,0
                    9011   @m68kde~1_85:
00005736  0D0A 4272 9012          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000573A  6561 6B20 
0000573E  506F 696E 
00005742  74        
00005743  7320 3A5B 9013          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00005747  4469 7361 
0000574B  626C 6564 
0000574F  5D        
00005750  00        9014          dc.b      0
                    9015   @m68kde~1_86:
00005752  0D0A 5072 9016          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00005756  6573 7320 
0000575A  3C53 5041 
0000575E  4345      
00005760  3E20 746F 9017          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00005764  2045 7865 
00005768  6375 7465 
0000576C  20        
0000576D  4E65 7874 9018          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00005771  2049 6E73 
00005775  7472 7563 
00005779  7469 6F6E 9019          dc.b      116,105,111,110,0
0000577D  00        
                    9020   @m68kde~1_87:
0000577E  0D0A 5072 9021          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005782  6573 7320 
00005786  3C45 5343 
0000578A  3E20      
0000578C  746F 2052 9022          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00005790  6573 756D 
00005794  6520 5072 
00005798  6F67 7261 9023          dc.b      111,103,114,97,109,0
0000579C  6D00      
                    9024   @m68kde~1_88:
0000579E  0D0A 496C 9025          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000057A2  6C65 6761 
000057A6  6C20 4461 
000057AA  74        
000057AB  6120 5265 9026          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000057AF  6769 7374 
000057B3  6572 203A 
000057B7  20        
000057B8  5573 6520 9027          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000057BC  4430 2D44 
000057C0  372E 2E2E 
000057C4  2E2E      
000057C6  0D0A 00   9028          dc.b      13,10,0
                    9029   @m68kde~1_89:
000057CA  0D0A 4425 9030          dc.b      13,10,68,37,99,32,61,32,0
000057CE  6320 3D20 
000057D2  00        
                    9031   @m68kde~1_90:
000057D4  0D0A 496C 9032          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000057D8  6C65 6761 
000057DC  6C20 4164 
000057E0  64        
000057E1  7265 7373 9033          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000057E5  2052 6567 
000057E9  6973 7465 
000057ED  7220 3A20 9034          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000057F1  5573 6520 
000057F5  4130 2D41 
000057F9  372E      
000057FB  2E2E 2E2E 9035          dc.b      46,46,46,46,13,10,0
000057FF  0D0A 00   
                    9036   @m68kde~1_91:
00005802  0D0A 4125 9037          dc.b      13,10,65,37,99,32,61,32,0
00005806  6320 3D20 
0000580A  00        
                    9038   @m68kde~1_92:
0000580C  0D0A 5573 9039          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00005810  6572 2053 
00005814  5020 3D20 
00005818  00        
                    9040   @m68kde~1_93:
0000581A  0D0A 496C 9041          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000581E  6C65 6761 
00005822  6C20 5265 
00005826  67        
00005827  6973 7465 9042          dc.b      105,115,116,101,114,46,46,46,46,0
0000582B  722E 2E2E 
0000582F  2E00      
                    9043   @m68kde~1_94:
00005832  0D0A 5379 9044          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00005836  7374 656D 
0000583A  2053 5020 
0000583E  3D        
0000583F  2000      9045          dc.b      32,0
                    9046   @m68kde~1_95:
00005842  0D0A 5043 9047          dc.b      13,10,80,67,32,61,32,0
00005846  203D 2000 
                    9048   @m68kde~1_96:
0000584A  0D0A 5352 9049          dc.b      13,10,83,82,32,61,32,0
0000584E  203D 2000 
                    9050   @m68kde~1_97:
00005852  0D0A 496C 9051          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00005856  6C65 6761 
0000585A  6C20 5265 
0000585E  67        
0000585F  6973 7465 9052          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00005863  723A 2055 
00005867  7365 2041 
0000586B  30        
0000586C  2D41 372C 9053          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00005870  2044 302D 
00005874  4437 2C20 
00005878  5353 50   
0000587B  2C20 5553 9054          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000587F  502C 2050 
00005883  4320 6F72 
00005887  2053      
00005889  520D 0A00 9055          dc.b      82,13,10,0
                    9056   @m68kde~1_98:
0000588E  0D0A 0D0A 9057          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00005892  4E75 6D20 
00005896  2020 2020 
0000589A  4164      
0000589C  6472 6573 9058          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000058A0  7320 2020 
000058A4  2020 2049 
000058A8  6E        
000058A9  7374 7275 9059          dc.b      115,116,114,117,99,116,105,111,110,0
000058AD  6374 696F 
000058B1  6E00      
                    9060   @m68kde~1_99:
000058B4  0D0A 2D2D 9061          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000058B8  2D20 2020 
000058BC  2020 2D2D 
000058C0  2D2D 2D   
000058C3  2D2D 2D2D 9062          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000058C7  2020 2020 
000058CB  2D2D 2D2D 
000058CF  2D2D 2D   
000058D2  2D2D 2D2D 9063          dc.b      45,45,45,45,0
000058D6  00        
                    9064   @m68kde~1_100:
000058D8  0D0A 4E6F 9065          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000058DC  2042 7265 
000058E0  616B 506F 
000058E4  69        
000058E5  6E74 7320 9066          dc.b      110,116,115,32,83,101,116,0
000058E9  5365 7400 
                    9067   @m68kde~1_101:
000058EE  0D0A 2533 9068          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000058F2  6420 2020 
000058F6  2020 2425 
000058FA  3038 78   
000058FD  00        9069          dc.b      0
                    9070   @m68kde~1_102:
000058FE  0D0A 4E75 9071          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00005902  6D20 2020 
00005906  2020 4164 
0000590A  6472      
0000590C  6573 7300 9072          dc.b      101,115,115,0
                    9073   @m68kde~1_103:
00005910  0D0A 2D2D 9074          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00005914  2D20 2020 
00005918  2020 2D2D 
0000591C  2D2D 2D   
0000591F  2D2D 2D2D 9075          dc.b      45,45,45,45,0
00005923  00        
                    9076   @m68kde~1_104:
00005924  0D0A 4E6F 9077          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00005928  2057 6174 
0000592C  6368 506F 
00005930  69        
00005931  6E74 7320 9078          dc.b      110,116,115,32,83,101,116,0
00005935  5365 7400 
                    9079   @m68kde~1_105:
0000593A  0D0A 456E 9080          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000593E  7465 7220 
00005942  4272 6561 
00005946  6B        
00005947  2050 6F69 9081          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000594B  6E74 204E 
0000594F  756D 6265 
00005953  72        
00005954  3A20 00   9082          dc.b      58,32,0
                    9083   @m68kde~1_106:
00005958  0D0A 496C 9084          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
0000595C  6C65 6761 
00005960  6C20 5261 
00005964  6E        
00005965  6765 203A 9085          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00005969  2055 7365 
0000596D  2030 202D 
00005971  2037      
00005973  00        9086          dc.b      0
                    9087   @m68kde~1_107:
00005974  0D0A 4272 9088          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005978  6561 6B20 
0000597C  506F 696E 
00005980  74        
00005981  2043 6C65 9089          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00005985  6172 6564 
00005989  2E2E 2E2E 
0000598D  2E        
0000598E  0D0A 00   9090          dc.b      13,10,0
                    9091   @m68kde~1_108:
00005992  0D0A 4272 9092          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005996  6561 6B20 
0000599A  506F 696E 
0000599E  74        
0000599F  2077 6173 9093          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000059A3  6E27 7420 
000059A7  5365 742E 
000059AB  2E        
000059AC  2E2E 2E00 9094          dc.b      46,46,46,0
                    9095   @m68kde~1_109:
000059B0  0D0A 456E 9096          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000059B4  7465 7220 
000059B8  5761 7463 
000059BC  68        
000059BD  2050 6F69 9097          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000059C1  6E74 204E 
000059C5  756D 6265 
000059C9  72        
000059CA  3A20 00   9098          dc.b      58,32,0
                    9099   @m68kde~1_110:
000059CE  0D0A 5761 9100          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000059D2  7463 6820 
000059D6  506F 696E 
000059DA  74        
000059DB  2043 6C65 9101          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000059DF  6172 6564 
000059E3  2E2E 2E2E 
000059E7  2E        
000059E8  0D0A 00   9102          dc.b      13,10,0
                    9103   @m68kde~1_111:
000059EC  0D0A 5761 9104          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000059F0  7463 6820 
000059F4  506F 696E 
000059F8  74        
000059F9  2057 6173 9105          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000059FD  206E 6F74 
00005A01  2053 6574 
00005A05  2E        
00005A06  2E2E 2E2E 9106          dc.b      46,46,46,46,0
00005A0A  00        
                    9107   @m68kde~1_112:
00005A0C  0D0A 4E6F 9108          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00005A10  2046 5245 
00005A14  4520 4272 
00005A18  6561      
00005A1A  6B20 506F 9109          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00005A1E  696E 7473 
00005A22  2E2E 2E2E 
00005A26  2E        
00005A27  00        9110          dc.b      0
                    9111   @m68kde~1_113:
00005A28  0D0A 4272 9112          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005A2C  6561 6B20 
00005A30  506F 696E 
00005A34  74        
00005A35  2041 6464 9113          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005A39  7265 7373 
00005A3D  3A20 00   
                    9114   @m68kde~1_114:
00005A40  0D0A 4572 9115          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00005A44  726F 7220 
00005A48  3A20 4272 
00005A4C  65        
00005A4D  616B 2050 9116          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00005A51  6F69 6E74 
00005A55  7320 4341 
00005A59  4E        
00005A5A  4E4F 5420 9117          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00005A5E  6265 2073 
00005A62  6574 2061 
00005A66  74        
00005A67  204F 4444 9118          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00005A6B  2061 6464 
00005A6F  7265 7373 
00005A73  65        
00005A74  7300      9119          dc.b      115,0
                    9120   @m68kde~1_115:
00005A76  0D0A 4572 9121          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00005A7A  726F 7220 
00005A7E  3A20 4272 
00005A82  65        
00005A83  616B 2050 9122          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00005A87  6F69 6E74 
00005A8B  7320 4341 
00005A8F  4E        
00005A90  4E4F 5420 9123          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00005A94  6265 2073 
00005A98  6574 2066 
00005A9C  6F        
00005A9D  7220 524F 9124          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00005AA1  4D20 696E 
00005AA5  2052 616E 
00005AA9  67        
00005AAA  6520 3A20 9125          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00005AAE  5B24 302D 
00005AB2  2430 3030 
00005AB6  3037 46   
00005AB9  4646 5D00 9126          dc.b      70,70,93,0
                    9127   @m68kde~1_116:
00005ABE  0D0A 4572 9128          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00005AC2  726F 723A 
00005AC6  2042 7265 
00005ACA  61        
00005ACB  6B20 506F 9129          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00005ACF  696E 7420 
00005AD3  416C 7265 
00005AD7  6164 7920 9130          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00005ADB  4578 6973 
00005ADF  7473 2061 
00005AE3  74        
00005AE4  2041 6464 9131          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00005AE8  7265 7373 
00005AEC  203A 2025 
00005AF0  30        
00005AF1  3878 0D0A 9132          dc.b      56,120,13,10,0
00005AF5  00        
                    9133   @m68kde~1_117:
00005AF6  0D0A 4272 9134          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005AFA  6561 6B20 
00005AFE  506F 696E 
00005B02  74        
00005B03  2053 6574 9135          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005B07  2061 7420 
00005B0B  4164 6472 
00005B0F  65        
00005B10  7373 3A20 9136          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005B14  5B24 2530 
00005B18  3878 5D00 
                    9137   @m68kde~1_118:
00005B1C  0D0A 4E6F 9138          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00005B20  2046 5245 
00005B24  4520 5761 
00005B28  7463      
00005B2A  6820 506F 9139          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00005B2E  696E 7473 
00005B32  2E2E 2E2E 
00005B36  2E        
00005B37  00        9140          dc.b      0
                    9141   @m68kde~1_119:
00005B38  0D0A 5761 9142          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005B3C  7463 6820 
00005B40  506F 696E 
00005B44  74        
00005B45  2041 6464 9143          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005B49  7265 7373 
00005B4D  3A20 00   
                    9144   @m68kde~1_120:
00005B50  0D0A 4572 9145          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00005B54  726F 723A 
00005B58  2057 6174 
00005B5C  63        
00005B5D  6820 506F 9146          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00005B61  696E 7420 
00005B65  416C 7265 
00005B69  6164 7920 9147          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00005B6D  5365 7420 
00005B71  6174 2041 
00005B75  64        
00005B76  6472 6573 9148          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00005B7A  7320 3A20 
00005B7E  2530 3878 
00005B82  0D        
00005B83  0A00      9149          dc.b      10,0
                    9150   @m68kde~1_121:
00005B86  0D0A 5761 9151          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005B8A  7463 6820 
00005B8E  506F 696E 
00005B92  74        
00005B93  2053 6574 9152          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005B97  2061 7420 
00005B9B  4164 6472 
00005B9F  65        
00005BA0  7373 3A20 9153          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005BA4  5B24 2530 
00005BA8  3878 5D00 
                    9154   @m68kde~1_122:
00005BAC  0D0A 0D0A 9155          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00005BB0  0D0A 0D0A 
00005BB4  4042 5245 
00005BB8  414B 50   
00005BBB  4F49 4E54 9156          dc.b      79,73,78,84,0
00005BBF  00        
                    9157   @m68kde~1_123:
00005BC0  0D0A 5369 9158          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005BC4  6E67 6C65 
00005BC8  2053 7465 
00005BCC  70        
00005BCD  203A 205B 9159          dc.b      32,58,32,91,79,78,93,0
00005BD1  4F4E 5D00 
                    9160   @m68kde~1_124:
00005BD6  0D0A 4272 9161          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00005BDA  6561 6B50 
00005BDE  6F69 6E74 
00005BE2  73        
00005BE3  203A 205B 9162          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00005BE7  456E 6162 
00005BEB  6C65 645D 
00005BEF  00        
                    9163   @m68kde~1_125:
00005BF0  0D0A 5072 9164          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005BF4  6573 7320 
00005BF8  3C45 5343 
00005BFC  3E20      
00005BFE  746F 2052 9165          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005C02  6573 756D 
00005C06  6520 5573 
00005C0A  6572 2050 9166          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00005C0E  726F 6772 
00005C12  616D 0D0A 
00005C16  00        
                    9167   @m68kde~1_126:
00005C18  0D0A 556E 9168          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00005C1C  6B6E 6F77 
00005C20  6E20 436F 
00005C24  6D        
00005C25  6D61 6E64 9169          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00005C29  2E2E 2E2E 
00005C2D  2E0D 0A00 
                    9170   @m68kde~1_127:
00005C32  0D0A 5072 9171          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00005C36  6F67 7261 
00005C3A  6D20 456E 
00005C3E  64        
00005C3F  6564 2028 9172          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00005C43  5452 4150 
00005C47  2023 3135 
00005C4B  292E      
00005C4D  2E2E 2E00 9173          dc.b      46,46,46,0
                    9174   @m68kde~1_128:
00005C52  0D0A 4B69 9175          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00005C56  6C6C 2041 
00005C5A  6C6C 2042 
00005C5E  72        
00005C5F  6561 6B20 9176          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00005C63  506F 696E 
00005C67  7473 2E2E 
00005C6B  2E        
00005C6C  2879 2F6E 9177          dc.b      40,121,47,110,41,63,0
00005C70  293F 00   
                    9178   @m68kde~1_129:
00005C74  0D0A 4B69 9179          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00005C78  6C6C 2041 
00005C7C  6C6C 2057 
00005C80  61        
00005C81  7463 6820 9180          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00005C85  506F 696E 
00005C89  7473 2E2E 
00005C8D  2E        
00005C8E  2879 2F6E 9181          dc.b      40,121,47,110,41,63,0
00005C92  293F 00   
                    9182   @m68kde~1_130:
00005C96  0D0A 2D2D 9183          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00005C9A  2D2D 2D2D 
00005C9E  2D2D 2D2D 
00005CA2  2D2D 2D   
00005CA5  2D2D 2D2D 9184          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005CA9  2D2D 2D2D 
00005CAD  2D2D 2D2D 
00005CB1  2D2D 2D   
00005CB4  2D2D 2D2D 9185          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005CB8  2D2D 2D2D 
00005CBC  2D2D 2D2D 
00005CC0  2D2D 2D   
00005CC3  2D2D 2D2D 9186          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005CC7  2D2D 2D2D 
00005CCB  2D2D 2D2D 
00005CCF  2D2D 2D   
00005CD2  2D2D 2D2D 9187          dc.b      45,45,45,45,45,45,0
00005CD6  2D2D 00   
                    9188   @m68kde~1_131:
00005CDA  0D0A 2020 9189          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00005CDE  4465 6275 
00005CE2  6767 6572 
00005CE6  20        
00005CE7  436F 6D6D 9190          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00005CEB  616E 6420 
00005CEF  5375 6D6D 
00005CF3  6172 7900 9191          dc.b      97,114,121,0
                    9192   @m68kde~1_132:
00005CF8  0D0A 2020 9193          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00005CFC  2E28 7265 
00005D00  6729 2020 
00005D04  2020      
00005D06  2020 202D 9194          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00005D0A  2043 6861 
00005D0E  6E67 6520 
00005D12  5265      
00005D14  6769 7374 9195          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00005D18  6572 733A 
00005D1C  2065 2E67 
00005D20  2041 302D 9196          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00005D24  4137 2C44 
00005D28  302D 4437 
00005D2C  2C50 43   
00005D2F  2C53 5350 9197          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00005D33  2C55 5350 
00005D37  2C53 5200 
                    9198   @m68kde~1_133:
00005D3C  0D0A 2020 9199          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00005D40  4244 2F42 
00005D44  532F 4243 
00005D48  2F42 4B   
00005D4B  2020 2D20 9200          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00005D4F  4272 6561 
00005D53  6B20 506F 
00005D57  69        
00005D58  6E74 3A20 9201          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00005D5C  4469 7370 
00005D60  6C61 792F 
00005D64  53        
00005D65  6574 2F43 9202          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00005D69  6C65 6172 
00005D6D  2F4B 696C 
00005D71  6C        
00005D72  00        9203          dc.b      0
                    9204   @m68kde~1_134:
00005D74  0D0A 2020 9205          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00005D78  4320 2020 
00005D7C  2020 2020 
00005D80  2020 20   
00005D83  2020 2D20 9206          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00005D87  436F 7079 
00005D8B  2050 726F 
00005D8F  67        
00005D90  7261 6D20 9207          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00005D94  6672 6F6D 
00005D98  2046 6C61 
00005D9C  73        
00005D9D  6820 746F 9208          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00005DA1  204D 6169 
00005DA5  6E20 4D65 
00005DA9  6D        
00005DAA  6F72 7900 9209          dc.b      111,114,121,0
                    9210   @m68kde~1_135:
00005DAE  0D0A 2020 9211          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00005DB2  4420 2020 
00005DB6  2020 2020 
00005DBA  2020 20   
00005DBD  2020 2D20 9212          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00005DC1  4475 6D70 
00005DC5  204D 656D 
00005DC9  6F        
00005DCA  7279 2043 9213          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00005DCE  6F6E 7465 
00005DD2  6E74 7320 
00005DD6  746F 2053 9214          dc.b      116,111,32,83,99,114,101,101,110,0
00005DDA  6372 6565 
00005DDE  6E00      
                    9215   @m68kde~1_136:
00005DE0  0D0A 2020 9216          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00005DE4  4520 2020 
00005DE8  2020 2020 
00005DEC  2020 20   
00005DEF  2020 2D20 9217          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00005DF3  456E 7465 
00005DF7  7220 5374 
00005DFB  72        
00005DFC  696E 6720 9218          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00005E00  696E 746F 
00005E04  204D 656D 
00005E08  6F72 7900 9219          dc.b      111,114,121,0
                    9220   @m68kde~1_137:
00005E0C  0D0A 2020 9221          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00005E10  4620 2020 
00005E14  2020 2020 
00005E18  2020 20   
00005E1B  2020 2D20 9222          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00005E1F  4669 6C6C 
00005E23  204D 656D 
00005E27  6F        
00005E28  7279 2077 9223          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00005E2C  6974 6820 
00005E30  4461 7461 
00005E34  00        
                    9224   @m68kde~1_138:
00005E36  0D0A 2020 9225          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00005E3A  4720 2020 
00005E3E  2020 2020 
00005E42  2020 20   
00005E45  2020 2D20 9226          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00005E49  476F 2050 
00005E4D  726F 6772 
00005E51  61        
00005E52  6D20 5374 9227          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00005E56  6172 7469 
00005E5A  6E67 2061 
00005E5E  74        
00005E5F  2041 6464 9228          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00005E63  7265 7373 
00005E67  3A20 2425 
00005E6B  30        
00005E6C  3858 00   9229          dc.b      56,88,0
                    9230   @m68kde~1_139:
00005E70  0D0A 2020 9231          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00005E74  4C20 2020 
00005E78  2020 2020 
00005E7C  2020 20   
00005E7F  2020 2D20 9232          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00005E83  4C6F 6164 
00005E87  2050 726F 
00005E8B  67        
00005E8C  7261 6D20 9233          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00005E90  282E 4845 
00005E94  5820 6669 
00005E98  6C        
00005E99  6529 2066 9234          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00005E9D  726F 6D20 
00005EA1  4C61 7074 
00005EA5  6F        
00005EA6  7000      9235          dc.b      112,0
                    9236   @m68kde~1_140:
00005EA8  0D0A 2020 9237          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00005EAC  4D20 2020 
00005EB0  2020 2020 
00005EB4  2020 20   
00005EB7  2020 2D20 9238          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00005EBB  4D65 6D6F 
00005EBF  7279 2045 
00005EC3  78        
00005EC4  616D 696E 9239          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00005EC8  6520 616E 
00005ECC  6420 4368 
00005ED0  61        
00005ED1  6E67 6500 9240          dc.b      110,103,101,0
                    9241   @m68kde~1_141:
00005ED6  0D0A 2020 9242          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00005EDA  5020 2020 
00005EDE  2020 2020 
00005EE2  2020 20   
00005EE5  2020 2D20 9243          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00005EE9  5072 6F67 
00005EED  7261 6D20 
00005EF1  46        
00005EF2  6C61 7368 9244          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00005EF6  204D 656D 
00005EFA  6F72 7920 
00005EFE  7769 7468 9245          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00005F02  2055 7365 
00005F06  7220 5072 
00005F0A  6F67 7261 9246          dc.b      111,103,114,97,109,0
00005F0E  6D00      
                    9247   @m68kde~1_142:
00005F10  0D0A 2020 9248          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00005F14  5220 2020 
00005F18  2020 2020 
00005F1C  2020 20   
00005F1F  2020 2D20 9249          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00005F23  4469 7370 
00005F27  6C61 7920 
00005F2B  36        
00005F2C  3830 3030 9250          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00005F30  2052 6567 
00005F34  6973 7465 
00005F38  72        
00005F39  7300      9251          dc.b      115,0
                    9252   @m68kde~1_143:
00005F3C  0D0A 2020 9253          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00005F40  5320 2020 
00005F44  2020 2020 
00005F48  2020 20   
00005F4B  2020 2D20 9254          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00005F4F  546F 6767 
00005F53  6C65 204F 
00005F57  4E        
00005F58  2F4F 4646 9255          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00005F5C  2053 696E 
00005F60  676C 6520 
00005F64  53        
00005F65  7465 7020 9256          dc.b      116,101,112,32,77,111,100,101,0
00005F69  4D6F 6465 
00005F6D  00        
                    9257   @m68kde~1_144:
00005F6E  0D0A 2020 9258          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00005F72  544D 2020 
00005F76  2020 2020 
00005F7A  2020 20   
00005F7D  2020 2D20 9259          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00005F81  5465 7374 
00005F85  204D 656D 
00005F89  6F        
00005F8A  7279 00   9260          dc.b      114,121,0
                    9261   @m68kde~1_145:
00005F8E  0D0A 2020 9262          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00005F92  5453 2020 
00005F96  2020 2020 
00005F9A  2020 20   
00005F9D  2020 2D20 9263          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00005FA1  5465 7374 
00005FA5  2053 7769 
00005FA9  74        
00005FAA  6368 6573 9264          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00005FAE  3A20 5357 
00005FB2  372D 3000 
                    9265   @m68kde~1_146:
00005FB6  0D0A 2020 9266          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00005FBA  5444 2020 
00005FBE  2020 2020 
00005FC2  2020 20   
00005FC5  2020 2D20 9267          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00005FC9  5465 7374 
00005FCD  2044 6973 
00005FD1  70        
00005FD2  6C61 7973 9268          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00005FD6  3A20 4C45 
00005FDA  4473 2061 
00005FDE  6E        
00005FDF  6420 372D 9269          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00005FE3  5365 676D 
00005FE7  656E 7400 
                    9270   @m68kde~1_147:
00005FEC  0D0A 2020 9271          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00005FF0  5744 2F57 
00005FF4  532F 5743 
00005FF8  2F57 4B   
00005FFB  2020 2D20 9272          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00005FFF  5761 7463 
00006003  6820 506F 
00006007  696E      
00006009  743A 2044 9273          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
0000600D  6973 706C 
00006011  6179 2F53 
00006015  65        
00006016  742F 436C 9274          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
0000601A  6561 722F 
0000601E  4B69 6C6C 
00006022  00        
                    9275   @m68kde~1_148:
00006024  0D0A 2300 9276          dc.b      13,10,35,0
                    9277   @m68kde~1_149:
00006028  0D0A 5072 9278          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
0000602C  6F67 7261 
00006030  6D20 5275 
00006034  6E        
00006035  6E69 6E67 9279          dc.b      110,105,110,103,46,46,46,46,46,0
00006039  2E2E 2E2E 
0000603D  2E00      
                    9280   @m68kde~1_150:
00006040  0D0A 5072 9281          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00006044  6573 7320 
00006048  3C52 4553 
0000604C  4554      
0000604E  3E20 6275 9282          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00006052  7474 6F6E 
00006056  203C 4B65 
0000605A  79        
0000605B  303E 206F 9283          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
0000605F  6E20 4445 
00006063  3120 746F 
00006067  2073      
00006069  746F 7000 9284          dc.b      116,111,112,0
                    9285   @m68kde~1_151:
0000606E  0D0A 4572 9286          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00006072  726F 723A 
00006076  2050 7265 
0000607A  73        
0000607B  7320 2747 9287          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
0000607F  2720 6669 
00006083  7273 7420 
00006087  74        
00006088  6F20 7374 9288          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
0000608C  6172 7420 
00006090  7072 6F67 
00006094  7261 6D00 9289          dc.b      114,97,109,0
                    9290   @m68kde~1_152:
00006098  0D0A 5369 9291          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000609C  6E67 6C65 
000060A0  2053 7465 
000060A4  70        
000060A5  2020 3A5B 9292          dc.b      32,32,58,91,79,78,93,0
000060A9  4F4E 5D00 
                    9293   @m68kde~1_153:
000060AE  0D0A 5072 9294          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
000060B2  6573 7320 
000060B6  2747 2720 
000060BA  74        
000060BB  6F20 5472 9295          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
000060BF  6163 6520 
000060C3  5072 6F67 
000060C7  72        
000060C8  616D 2066 9296          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
000060CC  726F 6D20 
000060D0  6164 6472 
000060D4  6573 7320 9297          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000060D8  2425 582E 
000060DC  2E2E 2E2E 
000060E0  00        
                    9298   @m68kde~1_154:
000060E2  0D0A 5075 9299          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
000060E6  7368 203C 
000060EA  5245 5345 
000060EE  5420      
000060F0  4275 7474 9300          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
000060F4  6F6E 3E20 
000060F8  746F 2053 
000060FC  74        
000060FD  6F70 2E2E 9301          dc.b      111,112,46,46,46,46,46,0
00006101  2E2E 2E00 
                    9302   @m68kde~1_155:
00006106  0D0A 5369 9303          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000610A  6E67 6C65 
0000610E  2053 7465 
00006112  70        
00006113  203A 205B 9304          dc.b      32,58,32,91,79,70,70,93,0
00006117  4F46 465D 
0000611B  00        
                    9305   @m68kde~1_156:
0000611C  0D0A 4272 9306          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006120  6561 6B20 
00006124  506F 696E 
00006128  74        
00006129  7320 3A5B 9307          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
0000612D  456E 6162 
00006131  6C65 645D 
00006135  00        
                    9308   @m68kde~1_157:
00006136  0D0A 5072 9309          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000613A  6573 7320 
0000613E  3C45 5343 
00006142  3E20      
00006144  746F 2052 9310          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006148  6573 756D 
0000614C  6520 5573 
00006150  6572 2050 9311          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00006154  726F 6772 
00006158  616D 2E2E 
0000615C  2E        
0000615D  2E2E 00   9312          dc.b      46,46,0
                    9313   @m68kde~1_158:
00006160  0D0A 5369 9314          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006164  6E67 6C65 
00006168  2053 7465 
0000616C  70        
0000616D  2020 3A5B 9315          dc.b      32,32,58,91,79,70,70,93,0
00006171  4F46 465D 
00006175  00        
                    9316   @m68kde~1_159:
00006176  0D0A 0D0A 9317          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000617A  5072 6F67 
0000617E  7261 6D20 
00006182  41        
00006183  424F 5254 9318          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00006187  2021 2121 
0000618B  2121 210D 
0000618F  0A00      
                    9319   @m68kde~1_160:
00006192  2573 0D0A 9320          dc.b      37,115,13,10,0
00006196  00        
                    9321   @m68kde~1_161:
00006198  0D0A 0D0A 9322          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000619C  5072 6F67 
000061A0  7261 6D20 
000061A4  41        
000061A5  424F 5254 9323          dc.b      66,79,82,84,32,33,33,33,33,33,0
000061A9  2021 2121 
000061AD  2121 00   
                    9324   @m68kde~1_162:
000061B0  0D0A 556E 9325          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
000061B4  6861 6E64 
000061B8  6C65 6420 
000061BC  49        
000061BD  6E74 6572 9326          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
000061C1  7275 7074 
000061C5  3A20 4952 
000061C9  5125 6420 9327          dc.b      81,37,100,32,33,33,33,33,33,0
000061CD  2121 2121 
000061D1  2100      
                    9328   @m68kde~1_163:
000061D4  4144 4452 9329          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000061D8  4553 5320 
000061DC  4552 524F 
000061E0  523A 20   
000061E3  3136 206F 9330          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000061E7  7220 3332 
000061EB  2042 6974 
000061EF  2054      
000061F1  7261 6E73 9331          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
000061F5  6665 7220 
000061F9  746F 2F66 
000061FD  726F 6D20 9332          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00006201  616E 204F 
00006205  4444 2041 
00006209  64        
0000620A  6472 6573 9333          dc.b      100,114,101,115,115,46,46,46,46,0
0000620E  732E 2E2E 
00006212  2E00      
                    9334   @m68kde~1_164:
00006214  556E 6861 9335          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00006218  6E64 6C65 
0000621C  6420 5472 
00006220  6170 2021 9336          dc.b      97,112,32,33,33,33,33,33,0
00006224  2121 2121 
00006228  00        
                    9337   @m68kde~1_165:
0000622A  4255 5320 9338          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000622E  4572 726F 
00006232  7221 00   
                    9339   @m68kde~1_166:
00006236  4144 4452 9340          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000623A  4553 5320 
0000623E  4572 726F 
00006242  7221      
00006244  00        9341          dc.b      0
                    9342   @m68kde~1_167:
00006246  494C 4C45 9343          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000624A  4741 4C20 
0000624E  494E 5354 
00006252  5255 43   
00006255  5449 4F4E 9344          dc.b      84,73,79,78,0
00006259  00        
                    9345   @m68kde~1_168:
0000625A  4449 5649 9346          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
0000625E  4445 2042 
00006262  5920 5A45 
00006266  524F 00   
                    9347   @m68kde~1_169:
0000626A  2743 484B 9348          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
0000626E  2720 494E 
00006272  5354 5255 
00006276  4354 49   
00006279  4F4E 00   9349          dc.b      79,78,0
                    9350   @m68kde~1_170:
0000627C  5452 4150 9351          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00006280  5620 494E 
00006284  5354 5255 
00006288  4354 49   
0000628B  4F4E 00   9352          dc.b      79,78,0
                    9353   @m68kde~1_171:
0000628E  5052 4956 9354          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00006292  494C 4547 
00006296  4520 5649 
0000629A  4F4C 41   
0000629D  5449 4F4E 9355          dc.b      84,73,79,78,0
000062A1  00        
                    9356   @m68kde~1_172:
000062A2  554E 494E 9357          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
000062A6  4954 4941 
000062AA  4C49 5345 
000062AE  4420 49   
000062B1  5251 00   9358          dc.b      82,81,0
                    9359   @m68kde~1_173:
000062B4  5350 5552 9360          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
000062B8  494F 5553 
000062BC  2049 5251 
000062C0  00        
                    9361   @m68kde~1_174:
000062C2  0D0A 5374 9362          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000062C6  6172 7420 
000062CA  4164 6472 
000062CE  65        
000062CF  7373 2069 9363          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000062D3  6E20 4D65 
000062D7  6D6F 7279 
000062DB  3A20 00   9364          dc.b      58,32,0
                    9365   @m68kde~1_175:
000062DE  0D0A 456E 9366          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000062E2  7465 7220 
000062E6  5374 7269 
000062EA  6E        
000062EB  6720 2845 9367          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000062EF  5343 2074 
000062F3  6F20 656E 
000062F7  64        
000062F8  2920 3A00 9368          dc.b      41,32,58,0
                    9369   @m68kde~1_176:
000062FC  0A45 6E74 9370          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
00006300  6572 2077 
00006304  6861 7420 
00006308  73        
00006309  697A 6520 9371          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
0000630D  6F66 206D 
00006311  656D 6F72 
00006315  7920 796F 9372          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
00006319  7520 7761 
0000631D  6E74 2074 
00006321  6F20 7265 9373          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00006325  6164 2F77 
00006329  7269 7465 
0000632D  0A20 4279 9374          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
00006331  7465 203D 
00006335  2030 0A20 
00006339  576F      
0000633B  7264 203D 9375          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
0000633F  2031 0A20 
00006343  4C6F 6E67 
00006347  20        
00006348  576F 7264 9376          dc.b      87,111,114,100,32,61,32,50,10,0
0000634C  203D 2032 
00006350  0A00      
                    9377   @m68kde~1_177:
00006352  0A45 6E74 9378          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00006356  6572 2077 
0000635A  6869 6368 
0000635E  2064 6174 9379          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00006362  6120 7061 
00006366  7474 6572 
0000636A  6E        
0000636B  2079 6F75 9380          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000636F  2077 616E 
00006373  7420 746F 
00006377  2077 7269 9381          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000637B  7465 2069 
0000637F  6E74 6F20 
00006383  6D65 6D6F 9382          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
00006387  7279 0A20 
0000638B  3078 3030 
0000638F  20        
00006390  3D20 300A 9383          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
00006394  2030 7842 
00006398  3220 3D20 
0000639C  310A 20   
0000639F  3078 4333 9384          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
000063A3  203D 2032 
000063A7  0A20 3078 
000063AB  4434      
000063AD  203D 2033 9385          dc.b      32,61,32,51,10,0
000063B1  0A00      
                    9386   @m68kde~1_178:
000063B4  0A45 6E74 9387          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000063B8  6572 2077 
000063BC  6869 6368 
000063C0  2064 6174 9388          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000063C4  6120 7061 
000063C8  7474 6572 
000063CC  6E        
000063CD  2079 6F75 9389          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000063D1  2077 616E 
000063D5  7420 746F 
000063D9  2077 7269 9390          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000063DD  7465 2069 
000063E1  6E74 6F20 
000063E5  6D65 6D6F 9391          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000063E9  7279 0A20 
000063ED  3078 3030 
000063F1  30        
000063F2  3020 3D20 9392          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
000063F6  300A 2030 
000063FA  7831 3233 
000063FE  3420 3D   
00006401  2031 0A20 9393          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
00006405  3078 4131 
00006409  4232 203D 
0000640D  2032 0A   
00006410  2030 7843 9394          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
00006414  3344 3420 
00006418  3D20 330A 
0000641C  00        
                    9395   @m68kde~1_179:
0000641E  0A45 6E74 9396          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00006422  6572 2077 
00006426  6869 6368 
0000642A  2064 6174 9397          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
0000642E  6120 7061 
00006432  7474 6572 
00006436  6E        
00006437  2079 6F75 9398          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000643B  2077 616E 
0000643F  7420 746F 
00006443  2077 7269 9399          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00006447  7465 2069 
0000644B  6E74 6F20 
0000644F  6D65 6D6F 9400          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00006453  7279 0A20 
00006457  3078 3030 
0000645B  30        
0000645C  305F 3030 9401          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
00006460  3030 203D 
00006464  2030 0A20 
00006468  3078 41   
0000646B  4142 425F 9402          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
0000646F  4343 4444 
00006473  203D 2031 
00006477  0A20 30   
0000647A  7831 3132 9403          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
0000647E  325F 3333 
00006482  3434 203D 
00006486  2032 0A   
00006489  2030 7837 9404          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
0000648D  3635 345F 
00006491  3332 3130 
00006495  203D 20   
00006498  330A 00   9405          dc.b      51,10,0
                    9406   @m68kde~1_180:
0000649C  0A50 726F 9407          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
000064A0  7669 6465 
000064A4  2053 7461 
000064A8  72        
000064A9  7420 4164 9408          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
000064AD  6472 6573 
000064B1  7320 696E 
000064B5  2068 6578 9409          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
000064B9  2028 646F 
000064BD  206E 6F74 
000064C1  2075 7365 9410          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
000064C5  2030 7820 
000064C9  7072 6566 
000064CD  6978 290A 9411          dc.b      105,120,41,10,48,120,0
000064D1  3078 00   
                    9412   @m68kde~1_181:
000064D4  0A50 726F 9413          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
000064D8  7669 6465 
000064DC  2045 6E64 
000064E0  2041 6464 9414          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
000064E4  7265 7373 
000064E8  2069 6E20 
000064EC  6865 7820 9415          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
000064F0  2864 6F20 
000064F4  6E6F 7420 
000064F8  7573 6520 9416          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
000064FC  3078 2070 
00006500  7265 6669 
00006504  7829 0A30 9417          dc.b      120,41,10,48,120,0
00006508  7800      
                    9418   @m68kde~1_182:
0000650A  0A53 7461 9419          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
0000650E  7274 2041 
00006512  6464 7265 
00006516  73        
00006517  7320 3078 9420          dc.b      115,32,48,120,37,48,56,120,10,0
0000651B  2530 3878 
0000651F  0A00      
                    9421   @m68kde~1_183:
00006522  0A45 6E64 9422          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
00006526  2041 6464 
0000652A  7265 7373 
0000652E  3A20 3078 9423          dc.b      58,32,48,120,37,48,56,120,10,0
00006532  2530 3878 
00006536  0A00      
                    9424   @m68kde~1_184:
00006538  4552 524F 9425          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
0000653C  522E 2E2E 
00006540  2041 6464 
00006544  7265      
00006546  7373 2030 9426          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
0000654A  7825 7820 
0000654E  6973 2062 
00006552  65        
00006553  796F 6E64 9427          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00006557  2074 6865 
0000655B  206D 656D 
0000655F  6F72 7920 9428          dc.b      111,114,121,32,114,97,110,103,101,10,0
00006563  7261 6E67 
00006567  650A 00   
                    9429   @m68kde~1_185:
0000656A  4552 524F 9430          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
0000656E  522E 2E2E 
00006572  2056 616C 
00006576  7565      
00006578  2077 7269 9431          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
0000657C  7474 656E 
00006580  2074 6F20 
00006584  6164 6472 9432          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00006588  6573 7320 
0000658C  3078 2578 
00006590  203D 3D20 9433          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00006594  3078 2578 
00006598  2E20 5661 
0000659C  6C75      
0000659E  6520 4578 9434          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
000065A2  7065 6374 
000065A6  6564 3A20 
000065AA  30        
000065AB  7825 780A 9435          dc.b      120,37,120,10,0
000065AF  00        
                    9436   @m68kde~1_186:
000065B0  4164 6472 9437          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000065B4  6573 733A 
000065B8  2030 7825 
000065BC  78        
000065BD  2056 616C 9438          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
000065C1  7565 3A20 
000065C5  3078 2530 
000065C9  3258      
000065CB  0A00      9439          dc.b      10,0
                    9440   @m68kde~1_187:
000065CE  4164 6472 9441          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000065D2  6573 733A 
000065D6  2030 7825 
000065DA  78        
000065DB  2056 616C 9442          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
000065DF  7565 3A20 
000065E3  3078 2530 
000065E7  3458      
000065E9  0A00      9443          dc.b      10,0
                    9444   @m68kde~1_188:
000065EC  4164 6472 9445          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000065F0  6573 733A 
000065F4  2030 7825 
000065F8  78        
000065F9  2056 616C 9446          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
000065FD  7565 3A20 
00006601  3078 2530 
00006605  3858      
00006607  0A00      9447          dc.b      10,0
                    9448   @m68kde~1_189:
0000660A  4445 312D 9449          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
0000660E  3638 6B20 
00006612  4275 6720 
00006616  5631      
00006618  2E37 3700 9450          dc.b      46,55,55,0
                    9451   @m68kde~1_190:
0000661C  436F 7079 9452          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00006620  7269 6768 
00006624  7420 2843 
00006628  2920 504A 9453          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
0000662C  2044 6176 
00006630  6965 7320 
00006634  3230      
00006636  3136 00   9454          dc.b      49,54,0
                    9455   @m68kde~1_191:
0000663A  0D0A 5275 9456          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
0000663E  6E6E 696E 
00006642  672E 2E2E 
00006646  2E        
00006647  2E00      9457          dc.b      46,0
                    9458   @m68kde~1_192:
0000664A  5275 6E6E 9459          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
0000664E  696E 672E 
00006652  2E2E 2E2E 
00006656  00        
                    9460   @m68kde~1_193:
00006658  4279 3A20 9461          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
0000665C  504A 2044 
00006660  6176 6965 
00006664  73        
00006665  00        9462          dc.b      0
                    9463   @m68kde~1_194:
00006666  0D0A 2573 9464          dc.b      13,10,37,115,0
0000666A  00        
                    9465   @m68kde~1_195:
0000666C  0A20 5374 9466          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
00006670  7564 656E 
00006674  7420 4E61 
00006678  6D        
00006679  6573 3A0A 9467          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
0000667D  205A 6163 
00006681  6861 7269 
00006685  61        
00006686  6820 4A6F 9468          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
0000668A  7365 7068 
0000668E  3A20 3435 
00006692  35        
00006693  3030 3035 9469          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00006697  3520 0A20 
0000669B  556D 6169 
0000669F  7220      
000066A1  4D61 7A68 9470          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
000066A5  6172 3A20 
000066A9  3230 3333 
000066AD  3333      
000066AF  3038 0A00 9471          dc.b      48,56,10,0
                    9472          section   data
000066B4            9473                   align
          0000 66B4 9474   DataStart       equ       *
                    9475   
                    9476   *********************************************************************************************************
                    9477   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    9478   * to ram as part of the CStart routine in this file
                    9479   *********************************************************************************************************
                    9480   
                    9481   @vsscanf_bufx:
000066B4  0B00 0546 9482          dc.l      @vsscanf_buf
                    9483   @vsscanf_1:
000066B8  0A00      9484          dc.b      10,0
                    9485   __ctype:
000066BA  0040 4040 9486          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
000066BE  4040 4040 
000066C2  4040 5050 
000066C6  5050 50   
000066C9  4040 4040 9487          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000066CD  4040 4040 
000066D1  4040 4040 
000066D5  4040 40   
000066D8  4040 40D0 9488          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000066DC  A0A0 A0A0 
000066E0  A0A0 A0A0 
000066E4  A0A0 A0A0 9489          dc.b      160,160,160,160,160,160,160,140,140,140,140
000066E8  A0A0 A08C 
000066EC  8C8C 8C   
000066EF  8C8C 8C8C 9490          dc.b      140,140,140,140,140,140,160,160,160,160,160
000066F3  8C8C A0A0 
000066F7  A0A0 A0   
000066FA  A0A0 8A8A 9491          dc.b      160,160,138,138,138,138,138,138,130,130,130
000066FE  8A8A 8A8A 
00006702  8282 82   
00006705  8282 8282 9492          dc.b      130,130,130,130,130,130,130,130,130,130,130
00006709  8282 8282 
0000670D  8282 82   
00006710  8282 8282 9493          dc.b      130,130,130,130,130,130,160,160,160,160,160
00006714  8282 A0A0 
00006718  A0A0 A0   
0000671B  A089 8989 9494          dc.b      160,137,137,137,137,137,137,129,129,129,129
0000671F  8989 8981 
00006723  8181 81   
00006726  8181 8181 9495          dc.b      129,129,129,129,129,129,129,129,129,129,129
0000672A  8181 8181 
0000672E  8181 81   
00006731  8181 8181 9496          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00006735  81A0 A0A0 
00006739  A040 0000 
0000673D  00        
0000673E  0000 0000 9497          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006742  0000 0000 
00006746  0000 0000 
0000674A  0000 0000 
0000674E  0000 0000 
00006752  0000      
00006754  0000 0000 9498          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006758  0000 0000 
0000675C  0000 0000 
00006760  0000 0000 
00006764  0000 0000 
00006768  0000      
0000676A  0000 0000 9499          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000676E  0000 0000 
00006772  0000 0000 
00006776  0000 0000 
0000677A  0000 0000 
0000677E  0000      
00006780  0000 0000 9500          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006784  0000 0000 
00006788  0000 0000 
0000678C  0000 0000 
00006790  0000 0000 
00006794  0000      
00006796  0000 0000 9501          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000679A  0000 0000 
0000679E  0000 0000 
000067A2  0000 0000 
000067A6  0000 0000 
000067AA  0000      
000067AC  0000 0000 9502          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000067B0  0000 0000 
000067B4  0000 0000 
000067B8  0000 00   
                    9503   @itoa_1:
000067BC  2D32 3134 9504          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000067C0  3734 3833 
000067C4  3634 3800 
                    9505          section   bss
000067C8            9506                   align
          0000 67C8 9507   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    9508   
                    9509   *********************************************************************************************************
                    9510   * Section for Uninitialised Data held in ROM as constants
                    9511   *********************************************************************************************************
                    9512   
0B000000            9513                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 9514   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    9515   
                    9516   
0B000000            9517   bss             org       bss
                    9518   
                    9519   *********************************************************************************************************
                    9520   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    9521   * install the exception handler using the C function InstallExceptionHandler()
                    9522   *********************************************************************************************************
                    9523   
                    9524   
                    9525   
0B000000            9526   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            9527   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            9528   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            9529   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            9530   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            9531   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            9532   VCheck           ds.l    1      ditto
0B00001C            9533   VTrapV           ds.l    1      ditto
0B000020            9534   VPrivilege       ds.l    1      ditto
0B000024            9535   VTrace           ds.l    1
0B000028            9536   VLine1010emul    ds.l    1
0B00002C            9537   VLine1111emul    ds.l    1
0B000030            9538   VUnassigned1     ds.l    1
0B000034            9539   VUnassigned2     ds.l    1
0B000038            9540   VUnassigned3     ds.l    1
0B00003C            9541   VUninit_IRQ      ds.l    1
0B000040            9542   VUnassigned4     ds.l    1
0B000044            9543   VUnassigned5     ds.l    1
0B000048            9544   VUnassigned6     ds.l    1
0B00004C            9545   VUnassigned7     ds.l    1
0B000050            9546   VUnassigned8     ds.l    1
0B000054            9547   VUnassigned9     ds.l    1
0B000058            9548   VUnassigned10    ds.l    1
0B00005C            9549   VUnassigned11    ds.l    1
0B000060            9550   VSpuriousIRQ     ds.l    1
                    9551   
                    9552   * Interrupt handlers Vector 25-31
0B000064            9553   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            9554   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            9555   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            9556   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            9557   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            9558   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            9559   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    9560   
                    9561   * Trap Handler vectors 32-47
0B000080            9562   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            9563   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            9564   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            9565   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            9566   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            9567   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            9568   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            9569   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            9570   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            9571   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            9572   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            9573   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            9574   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            9575   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            9576   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            9577   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    9578   
                    9579   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    9580   
                    9581   ***********************************************************************************************************
                    9582   * Other Variables
                    9583   ***********************************************************************************************************
                    9584   *__DebugA5       ds.l    1
                    9585   *__UserA5        ds.l    1
                    9586   
                    9587   ***********************************************************************************************************
0B0000C0            9588   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            9589   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            9590   __heap:         ds.l    0       ; pointers for malloc functions
                    9591   
                    9592   *__himem:       ds.l    himem            ; highest memory location + 1
                    9593   *__stklen:      ds.l    stklen           ; default stack size
                    9594   
                    9595   *********************************************************************************************************
                    9596   * Section for Heap
                    9597   *********************************************************************************************************
                    9598   
                    9599   _i:
0B0000C4            9600          ds.b      4
                    9601   _x:
0B0000C8            9602          ds.b      4
                    9603   _y:
0B0000CC            9604          ds.b      4
                    9605   _z:
0B0000D0            9606          ds.b      4
                    9607   _PortA_Count:
0B0000D4            9608          ds.b      4
                    9609   _Trace:
0B0000D8            9610          ds.b      4
                    9611   _GoFlag:
0B0000DC            9612          ds.b      4
                    9613   _Echo:
0B0000E0            9614          ds.b      4
                    9615   _d0:
0B0000E4            9616          ds.b      4
                    9617   _d1:
0B0000E8            9618          ds.b      4
                    9619   _d2:
0B0000EC            9620          ds.b      4
                    9621   _d3:
0B0000F0            9622          ds.b      4
                    9623   _d4:
0B0000F4            9624          ds.b      4
                    9625   _d5:
0B0000F8            9626          ds.b      4
                    9627   _d6:
0B0000FC            9628          ds.b      4
                    9629   _d7:
0B000100            9630          ds.b      4
                    9631   _a0:
0B000104            9632          ds.b      4
                    9633   _a1:
0B000108            9634          ds.b      4
                    9635   _a2:
0B00010C            9636          ds.b      4
                    9637   _a3:
0B000110            9638          ds.b      4
                    9639   _a4:
0B000114            9640          ds.b      4
                    9641   _a5:
0B000118            9642          ds.b      4
                    9643   _a6:
0B00011C            9644          ds.b      4
                    9645   _PC:
0B000120            9646          ds.b      4
                    9647   _SSP:
0B000124            9648          ds.b      4
                    9649   _USP:
0B000128            9650          ds.b      4
                    9651   _SR:
0B00012C            9652          ds.b      2
                    9653   _BreakPointAddress:
0B00012E            9654          ds.b      32
                    9655   _BreakPointInstruction:
0B00014E            9656          ds.b      16
                    9657   _BreakPointSetOrCleared:
0B00015E            9658          ds.b      32
                    9659   _InstructionSize:
0B00017E            9660          ds.b      4
                    9661   _WatchPointAddress:
0B000182            9662          ds.b      32
                    9663   _WatchPointSetOrCleared:
0B0001A2            9664          ds.b      32
                    9665   _WatchPointString:
0B0001C2            9666          ds.b      800
                    9667   _TempString:
0B0004E2            9668          ds.b      100
                    9669   @vsscanf_buf:
0B000546            9670          ds.b      80
                    9671          section   heap
0B000596            9672                   align
          0B00 0596 9673   bssEnd          equ *                   end of storage space for unitialised variables
                    9674   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 9675   heap   equ       *
0B000596            9676                    align
          0000 0000

Assembly errors: 0
