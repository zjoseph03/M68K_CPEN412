680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 27 Mar 2025      Time: 13:30:25          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2EC0      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2570      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3C38      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  460E      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  4612      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4628      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  462A      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3C38      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  327C      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  462C      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4666      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  467E      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  4686      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  468C      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  460E      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3C38      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  4690      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  4666      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  46A4      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  46BA      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  46CE      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3C38      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  46FE      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  3376      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  31B0      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  327C      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  472E      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4754      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3C38      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4776      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  4792      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  47D8      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  47EA      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  32E8      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  47FC      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; // TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011 // This might need to be 0x53
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while (TestForSPITransmitDataComplete() == 0);
                    1614   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1615          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1616          tst.l     D0
00001122  6602      1617          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1621          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1622          rts
                    1623   ; }
                    1624   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1625   ; void ClearSPIReadFIFO(void) {
                    1626   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1627          link      A6,#-4
                    1628   ; volatile unsigned char dummy;
                    1629   ; while((SPI_Status & 0x01) == 0) {
                    1630   ClearSPIReadFIFO_1:
00001134  1039 0040 1631          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1632          and.b     #1,D0
0000113E  660A      1633          bne.s     ClearSPIReadFIFO_3
                    1634   ; dummy = SPI_Data;
00001140  1D79 0040 1635          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1636          bra       ClearSPIReadFIFO_1
                    1637   ClearSPIReadFIFO_3:
0000114A  4E5E      1638          unlk      A6
0000114C  4E75      1639          rts
                    1640   ; }
                    1641   ; }
                    1642   ; void SPIFlashPollStatusWLE(void) {
                    1643   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char status;
                    1646   ; unsigned char dummy;
                    1647   ; do {
                    1648   SPIFlashPollStatusWLE_1:
                    1649   ; // Start a new read status register command each time
                    1650   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1651          move.b    #254,4227112
00001156  0040 8028 
                    1652   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1653          pea       5
0000115E  4EB8 10C4 1654          jsr       _SPISafeWrite
00001162  584F      1655          addq.w    #4,A7
                    1656   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1657          pea       255
00001168  4EB8 10C4 1658          jsr       _SPISafeWrite
0000116C  584F      1659          addq.w    #4,A7
0000116E  1D40 FFFE 1660          move.b    D0,-2(A6)
                    1661   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1662          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1663          move.b    -2(A6),D0
0000117E  C03C 0002 1664          and.b     #2,D0
00001182  67CE      1665          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1666          unlk      A6
00001186  4E75      1667          rts
                    1668   ; // printf("\r\n WLE Status: %02x \n", status);
                    1669   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1670   ; }
                    1671   ; void SPIFlashPollStatusBusy(void) {
                    1672   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1673          link      A6,#-4
                    1674   ; unsigned char status;
                    1675   ; unsigned char dummy;
                    1676   ; do {
                    1677   SPIFlashPollStatusBusy_1:
                    1678   ; // Start a new read status register command each time
                    1679   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1680          move.b    #254,4227112
00001190  0040 8028 
                    1681   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1682          pea       5
00001198  4EB8 10C4 1683          jsr       _SPISafeWrite
0000119C  584F      1684          addq.w    #4,A7
                    1685   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1686          pea       255
000011A2  4EB8 10C4 1687          jsr       _SPISafeWrite
000011A6  584F      1688          addq.w    #4,A7
000011A8  1D40 FFFE 1689          move.b    D0,-2(A6)
                    1690   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1691          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1692          move.b    -2(A6),D0
000011B8  C03C 0001 1693          and.b     #1,D0
000011BC  66CE      1694          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1695          unlk      A6
000011C0  4E75      1696          rts
                    1697   ; // printf("\r\n Busy Status: %02x \n", status);
                    1698   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011C2  4E56 0000 1707          link      A6,#0
                    1708   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1709          move.l    8(A6),D1
000011CA  C2BC 0000 1710          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1711          move.l    D1,-(A7)
000011D2  4EB8 10C4 1712          jsr       _SPISafeWrite
000011D6  584F      1713          addq.w    #4,A7
                    1714   ; return SPI_Data;
000011D8  1039 0040 1715          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1716          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1717          unlk      A6
000011E6  4E75      1718          rts
                    1719   ; }
                    1720   ; void SPIFlashWriteEnable() {
                    1721   _SPIFlashWriteEnable:
                    1722   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1723          move.b    #254,4227112
000011EC  0040 8028 
                    1724   ; SPISafeWrite(0x06);
000011F0  4878 0006 1725          pea       6
000011F4  4EB8 10C4 1726          jsr       _SPISafeWrite
000011F8  584F      1727          addq.w    #4,A7
                    1728   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1729          move.b    #255,4227112
000011FE  0040 8028 
                    1730   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1731   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1732          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1733          rts
                    1734   ; }
                    1735   ; void SPISendAddress(int c) {
                    1736   _SPISendAddress:
00001208  4E56 0000 1737          link      A6,#0
0000120C  48E7 2020 1738          movem.l   D2/A2,-(A7)
00001210  242E 0008 1739          move.l    8(A6),D2
00001214  45F8 10C4 1740          lea       _SPISafeWrite.L,A2
                    1741   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1742          move.l    D2,D1
0000121A  E081      1743          asr.l     #8,D1
0000121C  E081      1744          asr.l     #8,D1
0000121E  C2BC 0000 1745          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1746          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1747          move.l    D1,-(A7)
0000122C  4E92      1748          jsr       (A2)
0000122E  584F      1749          addq.w    #4,A7
                    1750   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1751          move.l    D2,D1
00001232  E081      1752          asr.l     #8,D1
00001234  C2BC 0000 1753          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1754          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1755          move.l    D1,-(A7)
00001242  4E92      1756          jsr       (A2)
00001244  584F      1757          addq.w    #4,A7
                    1758   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1759          move.l    D2,D1
00001248  C2BC 0000 1760          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1761          and.l     #255,D1
00001252  00FF      
00001254  2F01      1762          move.l    D1,-(A7)
00001256  4E92      1763          jsr       (A2)
00001258  584F      1764          addq.w    #4,A7
0000125A  4CDF 0404 1765          movem.l   (A7)+,D2/A2
0000125E  4E5E      1766          unlk      A6
00001260  4E75      1767          rts
                    1768   ; }
                    1769   ; void SPIFlashPageProgram(int addr) {
                    1770   _SPIFlashPageProgram:
00001262  4E56 FFF8 1771          link      A6,#-8
00001266  2F02      1772          move.l    D2,-(A7)
                    1773   ; unsigned char *sramMemoryPtr;
                    1774   ; int flashAddr = addr - 0x08000000;
00001268  202E 0008 1775          move.l    8(A6),D0
0000126C  0480 0800 1776          sub.l     #134217728,D0
00001270  0000      
00001272  2D40 FFFC 1777          move.l    D0,-4(A6)
                    1778   ; int i;
                    1779   ; SPI_CS = 0xFE;
00001276  13FC 00FE 1780          move.b    #254,4227112
0000127A  0040 8028 
                    1781   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000127E  4878 0002 1782          pea       2
00001282  4EB8 10C4 1783          jsr       _SPISafeWrite
00001286  584F      1784          addq.w    #4,A7
                    1785   ; SPISendAddress(flashAddr);
00001288  2F2E FFFC 1786          move.l    -4(A6),-(A7)
0000128C  4EB8 1208 1787          jsr       _SPISendAddress
00001290  584F      1788          addq.w    #4,A7
                    1789   ; for (i = 0; i < 256; i++) {
00001292  4282      1790          clr.l     D2
                    1791   SPIFlashPageProgram_1:
00001294  0C82 0000 1792          cmp.l     #256,D2
00001298  0100      
0000129A  6C22      1793          bge.s     SPIFlashPageProgram_3
                    1794   ; sramMemoryPtr = (unsigned char*) (addr + i);
0000129C  202E 0008 1795          move.l    8(A6),D0
000012A0  D082      1796          add.l     D2,D0
000012A2  2D40 FFF8 1797          move.l    D0,-8(A6)
                    1798   ; WriteSPIChar(*sramMemoryPtr); // Random value for testing purposes
000012A6  206E FFF8 1799          move.l    -8(A6),A0
000012AA  1210      1800          move.b    (A0),D1
000012AC  C2BC 0000 1801          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1802          move.l    D1,-(A7)
000012B4  4EB8 11C2 1803          jsr       _WriteSPIChar
000012B8  584F      1804          addq.w    #4,A7
000012BA  5282      1805          addq.l    #1,D2
000012BC  60D6      1806          bra       SPIFlashPageProgram_1
                    1807   SPIFlashPageProgram_3:
                    1808   ; // printf("%02x ", *sramMemoryPtr);
                    1809   ; }
                    1810   ; SPI_CS = 0xFF;
000012BE  13FC 00FF 1811          move.b    #255,4227112
000012C2  0040 8028 
                    1812   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1813   ; SPIFlashPollStatusBusy();
000012C6  4EB8 1188 1814          jsr       _SPIFlashPollStatusBusy
000012CA  241F      1815          move.l    (A7)+,D2
000012CC  4E5E      1816          unlk      A6
000012CE  4E75      1817          rts
                    1818   ; }
                    1819   ; void SPIFlashErase(void) {
                    1820   _SPIFlashErase:
                    1821   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1822   ; printf("\nErasing...\n");
000012D0  4879 0000 1823          pea       @m68kde~1_22.L
000012D4  4830      
000012D6  4EB9 0000 1824          jsr       _printf
000012DA  3C38      
000012DC  584F      1825          addq.w    #4,A7
                    1826   ; SPI_CS = 0xFE;
000012DE  13FC 00FE 1827          move.b    #254,4227112
000012E2  0040 8028 
                    1828   ; SPISafeWrite(0xC7);
000012E6  4878 00C7 1829          pea       199
000012EA  4EB8 10C4 1830          jsr       _SPISafeWrite
000012EE  584F      1831          addq.w    #4,A7
                    1832   ; SPI_CS = 0xFF;
000012F0  13FC 00FF 1833          move.b    #255,4227112
000012F4  0040 8028 
                    1834   ; SPIFlashPollStatusBusy();
000012F8  4EB8 1188 1835          jsr       _SPIFlashPollStatusBusy
000012FC  4E75      1836          rts
                    1837   ; }
                    1838   ; int SPIFlashRead() {
                    1839   _SPIFlashRead:
000012FE  4E56 FFFC 1840          link      A6,#-4
00001302  48E7 3000 1841          movem.l   D2/D3,-(A7)
                    1842   ; unsigned char readData;
                    1843   ; unsigned char *sramMemoryPtr;
                    1844   ; int addr;
                    1845   ; ClearSPIReadFIFO();
00001306  4EB8 1130 1846          jsr       _ClearSPIReadFIFO
                    1847   ; SPI_CS = 0xFE;
0000130A  13FC 00FE 1848          move.b    #254,4227112
0000130E  0040 8028 
                    1849   ; SPISafeWrite(0x03);
00001312  4878 0003 1850          pea       3
00001316  4EB8 10C4 1851          jsr       _SPISafeWrite
0000131A  584F      1852          addq.w    #4,A7
                    1853   ; SPISendAddress(0x0);
0000131C  42A7      1854          clr.l     -(A7)
0000131E  4EB8 1208 1855          jsr       _SPISendAddress
00001322  584F      1856          addq.w    #4,A7
                    1857   ; for (addr = 0x08000000; addr < (0x08040000); addr ++) {
00001324  243C 0800 1858          move.l    #134217728,D2
00001328  0000      
                    1859   SPIFlashRead_1:
0000132A  0C82 0804 1860          cmp.l     #134479872,D2
0000132E  0000      
00001330  6C1A      1861          bge.s     SPIFlashRead_3
                    1862   ; sramMemoryPtr = (unsigned char*) addr;
00001332  2D42 FFFC 1863          move.l    D2,-4(A6)
                    1864   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001336  4878 00FF 1865          pea       255
0000133A  4EB8 10C4 1866          jsr       _SPISafeWrite
0000133E  584F      1867          addq.w    #4,A7
00001340  1600      1868          move.b    D0,D3
                    1869   ; *sramMemoryPtr = readData;
00001342  206E FFFC 1870          move.l    -4(A6),A0
00001346  1083      1871          move.b    D3,(A0)
00001348  5282      1872          addq.l    #1,D2
0000134A  60DE      1873          bra       SPIFlashRead_1
                    1874   SPIFlashRead_3:
                    1875   ; }
                    1876   ; SPI_CS = 0xFF;
0000134C  13FC 00FF 1877          move.b    #255,4227112
00001350  0040 8028 
                    1878   ; SPIFlashPollStatusBusy();
00001354  4EB8 1188 1879          jsr       _SPIFlashPollStatusBusy
                    1880   ; return readData;
00001358  C6BC 0000 1881          and.l     #255,D3
0000135C  00FF      
0000135E  2003      1882          move.l    D3,D0
00001360  4CDF 000C 1883          movem.l   (A7)+,D2/D3
00001364  4E5E      1884          unlk      A6
00001366  4E75      1885          rts
                    1886   ; }
                    1887   ; /*******************************************************************
                    1888   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1889   ; ********************************************************************/
                    1890   ; void ProgramFlashChip(void)
                    1891   ; {
                    1892   _ProgramFlashChip:
00001368  4E56 FFFC 1893          link      A6,#-4
                    1894   ; int addr;
                    1895   ; SPIFlashPollStatusBusy();
0000136C  4EB8 1188 1896          jsr       _SPIFlashPollStatusBusy
                    1897   ; SPIFlashWriteEnable();
00001370  4EB8 11E8 1898          jsr       _SPIFlashWriteEnable
                    1899   ; SPIFlashErase();
00001374  4EB8 12D0 1900          jsr       _SPIFlashErase
                    1901   ; // 256KB = 262144 bytes (0x40000)
                    1902   ; // We need to write one page at a time (256 bytes at a time)
                    1903   ; // This code writes the user program from DRAM to FLASH
                    1904   ; // printf("\r\n Starting Programming...");
                    1905   ; // for (addr = 0x08000000; addr < (0x08040000); addr += 256) {
                    1906   ; //     SPIFlashWriteEnable(); 
                    1907   ; //     // printf("\r\n Addr: %08x \n", addr);
                    1908   ; //     SPIFlashPageProgram(addr);
                    1909   ; // }
                    1910   ; printf("\r\n Programming Complete!");
00001378  4879 0000 1911          pea       @m68kde~1_23.L
0000137C  483E      
0000137E  4EB9 0000 1912          jsr       _printf
00001382  3C38      
00001384  584F      1913          addq.w    #4,A7
00001386  4E5E      1914          unlk      A6
00001388  4E75      1915          rts
                    1916   ; }
                    1917   ; /*************************************************************************
                    1918   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1919   ; **************************************************************************/
                    1920   ; void LoadFromFlashChip(void)
                    1921   ; {
                    1922   _LoadFromFlashChip:
0000138A  4E56 FFFC 1923          link      A6,#-4
                    1924   ; int readData;
                    1925   ; printf("\r\n Loading Program From SPI Flash....") ;
0000138E  4879 0000 1926          pea       @m68kde~1_24.L
00001392  4858      
00001394  4EB9 0000 1927          jsr       _printf
00001398  3C38      
0000139A  584F      1928          addq.w    #4,A7
                    1929   ; SPIFlashPollStatusBusy();
0000139C  4EB8 1188 1930          jsr       _SPIFlashPollStatusBusy
                    1931   ; readData = SPIFlashRead();
000013A0  4EB8 12FE 1932          jsr       _SPIFlashRead
000013A4  2D40 FFFC 1933          move.l    D0,-4(A6)
                    1934   ; printf("\r\n Read Data: %08x \n", readData);
000013A8  2F2E FFFC 1935          move.l    -4(A6),-(A7)
000013AC  4879 0000 1936          pea       @m68kde~1_25.L
000013B0  487E      
000013B2  4EB9 0000 1937          jsr       _printf
000013B6  3C38      
000013B8  504F      1938          addq.w    #8,A7
000013BA  4E5E      1939          unlk      A6
000013BC  4E75      1940          rts
                    1941   ; }
                    1942   ; void printBinary(unsigned char value) {
                    1943   _printBinary:
000013BE  4E56 0000 1944          link      A6,#0
000013C2  48E7 2020 1945          movem.l   D2/A2,-(A7)
000013C6  45F9 0000 1946          lea       _printf.L,A2
000013CA  3C38      
                    1947   ; int i;
                    1948   ; printf("IIC_CRSR Transmit (Binary): ");
000013CC  4879 0000 1949          pea       @m68kde~1_26.L
000013D0  4894      
000013D2  4E92      1950          jsr       (A2)
000013D4  584F      1951          addq.w    #4,A7
                    1952   ; for (i = 7; i >= 0; i--) { // Loop through each bit (from MSB to LSB)
000013D6  7407      1953          moveq     #7,D2
                    1954   printBinary_1:
000013D8  0C82 0000 1955          cmp.l     #0,D2
000013DC  0000      
000013DE  6D22      1956          blt.s     printBinary_3
                    1957   ; printf("%d", (value >> i) & 1); // Shift and mask to extract each bit
000013E0  122E 000B 1958          move.b    11(A6),D1
000013E4  C2BC 0000 1959          and.l     #255,D1
000013E8  00FF      
000013EA  E4A1      1960          asr.l     D2,D1
000013EC  C2BC 0000 1961          and.l     #1,D1
000013F0  0001      
000013F2  2F01      1962          move.l    D1,-(A7)
000013F4  4879 0000 1963          pea       @m68kde~1_27.L
000013F8  48B2      
000013FA  4E92      1964          jsr       (A2)
000013FC  504F      1965          addq.w    #8,A7
000013FE  5382      1966          subq.l    #1,D2
00001400  60D6      1967          bra       printBinary_1
                    1968   printBinary_3:
                    1969   ; }
                    1970   ; printf("\n");
00001402  4879 0000 1971          pea       @m68kde~1_28.L
00001406  48B6      
00001408  4E92      1972          jsr       (A2)
0000140A  584F      1973          addq.w    #4,A7
0000140C  4CDF 0404 1974          movem.l   (A7)+,D2/A2
00001410  4E5E      1975          unlk      A6
00001412  4E75      1976          rts
                    1977   ; }
                    1978   ; void IICCoreEnable() {
                    1979   _IICCoreEnable:
                    1980   ; IIC_CTR |= 0x80;     // Enable I2C core in control register (1000_0000)
00001414  0039 0080 1981          or.b      #128,4227076
00001418  0040 8004 
0000141C  4E75      1982          rts
                    1983   ; }
                    1984   ; void IICCoreDisable() {
                    1985   _IICCoreDisable:
                    1986   ; IIC_CTR &= 0x7F;    // Disable I2C core in control register (0011_1111)
0000141E  0239 007F 1987          and.b     #127,4227076
00001422  0040 8004 
00001426  4E75      1988          rts
                    1989   ; }
                    1990   ; // I2C Driver Functions
                    1991   ; void IIC_Init(void) {
                    1992   _IIC_Init:
                    1993   ; IIC_PRER_LO = 0x59;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001428  13FC 0059 1994          move.b    #89,4227072
0000142C  0040 8000 
                    1995   ; IIC_PRER_HI = 0x00;  // Scale the I2C clock from 45 Mhz to 100 Khz
00001430  4239 0040 1996          clr.b     4227074
00001434  8002      
                    1997   ; IIC_CTR &= 0xBF;     // Disable interrupt in control register (1011_1111)
00001436  0239 00BF 1998          and.b     #191,4227076
0000143A  0040 8004 
                    1999   ; IICCoreEnable();
0000143E  4EB8 1414 2000          jsr       _IICCoreEnable
00001442  4E75      2001          rts
                    2002   ; }
                    2003   ; void wait5ms(void) {
                    2004   _wait5ms:
00001444  2F02      2005          move.l    D2,-(A7)
                    2006   ; int i;
                    2007   ; for (i = 0; i < 10000; i++); // Wait for 5 ms
00001446  4282      2008          clr.l     D2
                    2009   wait5ms_1:
00001448  0C82 0000 2010          cmp.l     #10000,D2
0000144C  2710      
0000144E  6C04      2011          bge.s     wait5ms_3
00001450  5282      2012          addq.l    #1,D2
00001452  60F4      2013          bra       wait5ms_1
                    2014   wait5ms_3:
00001454  241F      2015          move.l    (A7)+,D2
00001456  4E75      2016          rts
                    2017   ; }
                    2018   ; void checkTIP() {
                    2019   _checkTIP:
                    2020   ; while (IIC_CRSR & TIP);
                    2021   checkTIP_1:
00001458  1039 0040 2022          move.b    4227080,D0
0000145C  8008      
0000145E  C03C 0002 2023          and.b     #2,D0
00001462  6702      2024          beq.s     checkTIP_3
00001464  60F2      2025          bra       checkTIP_1
                    2026   checkTIP_3:
00001466  4E75      2027          rts
                    2028   ; }
                    2029   ; void checkAck() {
                    2030   _checkAck:
                    2031   ; while ((IIC_CRSR & RXACK) == 1);
                    2032   checkAck_1:
00001468  1039 0040 2033          move.b    4227080,D0
0000146C  8008      
0000146E  C07C 00FF 2034          and.w     #255,D0
00001472  C07C 0080 2035          and.w     #128,D0
00001476  0C40 0001 2036          cmp.w     #1,D0
0000147A  6602      2037          bne.s     checkAck_3
0000147C  60EA      2038          bra       checkAck_1
                    2039   checkAck_3:
0000147E  4E75      2040          rts
                    2041   ; }
                    2042   ; void IICStopCondition() {
                    2043   _IICStopCondition:
                    2044   ; IIC_CRSR |= STOP | READ | IACK; // STOP + READ + IACK
00001480  0039 0061 2045          or.b      #97,4227080
00001484  0040 8008 
                    2046   ; checkTIP();
00001488  4EB8 1458 2047          jsr       _checkTIP
0000148C  4E75      2048          rts
                    2049   ; }
                    2050   ; void IICStartCondition(int rwBit) {
                    2051   _IICStartCondition:
0000148E  4E56 0000 2052          link      A6,#0
                    2053   ; if (rwBit == 0) {
00001492  202E 0008 2054          move.l    8(A6),D0
00001496  660A      2055          bne.s     IICStartCondition_1
                    2056   ; IIC_CRSR |= START | WRITE | IACK; // START + WRITE + IACK
00001498  0039 0091 2057          or.b      #145,4227080
0000149C  0040 8008 
000014A0  6008      2058          bra.s     IICStartCondition_2
                    2059   IICStartCondition_1:
                    2060   ; } else {
                    2061   ; IIC_CRSR |= START | READ | IACK; // Start condition with read bit set
000014A2  0039 00A1 2062          or.b      #161,4227080
000014A6  0040 8008 
                    2063   IICStartCondition_2:
                    2064   ; }
                    2065   ; checkTIP();
000014AA  4EB8 1458 2066          jsr       _checkTIP
                    2067   ; checkAck();
000014AE  4EB8 1468 2068          jsr       _checkAck
000014B2  4E5E      2069          unlk      A6
000014B4  4E75      2070          rts
                    2071   ; }
                    2072   ; // EEPROM Address: 101000{B0} 
                    2073   ; // EEPROM Specific Functions
                    2074   ; void EEPROMByteWrite(int data, short int deviceAddr, short int memoryAddr) {
                    2075   _EEPROMByteWrite:
000014B6  4E56 0000 2076          link      A6,#0
000014BA  48E7 0030 2077          movem.l   A2/A3,-(A7)
000014BE  45F8 1458 2078          lea       _checkTIP.L,A2
000014C2  47F8 1468 2079          lea       _checkAck.L,A3
                    2080   ; // Check if there is a transmission in progress
                    2081   ; // IICCoreEnable();
                    2082   ; checkTIP();
000014C6  4E92      2083          jsr       (A2)
                    2084   ; // Set the start condition
                    2085   ; // IICStartCondition(0);
                    2086   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2087   ; // printf("Status Register 1: %x\n", IIC_CRSR);
                    2088   ; // Control code, chip select, and block select (ie: Slave Address) and the R/W bit (== 0) are sent
                    2089   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
000014C8  302E 000E 2090          move.w    14(A6),D0
000014CC  E340      2091          asl.w     #1,D0
000014CE  C07C 00FE 2092          and.w     #254,D0
000014D2  13C0 0040 2093          move.b    D0,4227078
000014D6  8006      
                    2094   ; IIC_CRSR = START | WRITE | IACK;
000014D8  13FC 0091 2095          move.b    #145,4227080
000014DC  0040 8008 
                    2096   ; // printf("Sent Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2097   ; checkTIP();
000014E0  4E92      2098          jsr       (A2)
                    2099   ; checkAck();
000014E2  4E93      2100          jsr       (A3)
                    2101   ; // printf("Status Register 2: %x\n", IIC_CRSR);
                    2102   ; // Check for ACK
                    2103   ; // printf("\r\n Slave Address Ack Status: : %d\n", checkAck()); //TIP is checked in checkAck function
                    2104   ; // Send the high-order byte of the address
                    2105   ; IIC_TXRX = (memoryAddr >> 8) & 0xFF;
000014E4  302E 0012 2106          move.w    18(A6),D0
000014E8  E040      2107          asr.w     #8,D0
000014EA  C07C 00FF 2108          and.w     #255,D0
000014EE  13C0 0040 2109          move.b    D0,4227078
000014F2  8006      
                    2110   ; IIC_CRSR = WRITE | IACK;
000014F4  13FC 0011 2111          move.b    #17,4227080
000014F8  0040 8008 
                    2112   ; checkTIP();
000014FC  4E92      2113          jsr       (A2)
                    2114   ; checkAck();
000014FE  4E93      2115          jsr       (A3)
                    2116   ; // printf("Sent Upper Memory Byte: %02x\n", memoryAddr >> 8);
                    2117   ; // Send the lower-order byte of the address
                    2118   ; IIC_TXRX = (memoryAddr & 0xFF);
00001500  302E 0012 2119          move.w    18(A6),D0
00001504  C07C 00FF 2120          and.w     #255,D0
00001508  13C0 0040 2121          move.b    D0,4227078
0000150C  8006      
                    2122   ; IIC_CRSR = WRITE | IACK;
0000150E  13FC 0011 2123          move.b    #17,4227080
00001512  0040 8008 
                    2124   ; checkTIP();
00001516  4E92      2125          jsr       (A2)
                    2126   ; checkAck();
00001518  4E93      2127          jsr       (A3)
                    2128   ; //printf("Sent Lower Memory Byte: %02x\n", memoryAddr & 0xFF);
                    2129   ; // printf("Status Register 4: %x\n", IIC_CRSR);
                    2130   ; // Transmit byte to be written
                    2131   ; IIC_TXRX = data;
0000151A  202E 0008 2132          move.l    8(A6),D0
0000151E  13C0 0040 2133          move.b    D0,4227078
00001522  8006      
                    2134   ; IIC_CRSR = STOP | WRITE | IACK;
00001524  13FC 0051 2135          move.b    #81,4227080
00001528  0040 8008 
                    2136   ; checkTIP();
0000152C  4E92      2137          jsr       (A2)
                    2138   ; checkAck();
0000152E  4E93      2139          jsr       (A3)
                    2140   ; wait5ms();
00001530  4EB8 1444 2141          jsr       _wait5ms
00001534  4CDF 0C00 2142          movem.l   (A7)+,A2/A3
00001538  4E5E      2143          unlk      A6
0000153A  4E75      2144          rts
                    2145   ; // printf("Sent Data: %02x\n", data);
                    2146   ; // printf("Sent Stop Condition");
                    2147   ; // printf("Status Register 6: %x\n", IIC_CRSR);
                    2148   ; // IICCoreDisable();
                    2149   ; //printf("\r\nI2C Byte Write Complete\n");
                    2150   ; }
                    2151   ; void EEPROMFlashPageWrite(int* data, int adr, int numBytes) {
                    2152   _EEPROMFlashPageWrite:
0000153C  4E56 0000 2153          link      A6,#0
00001540  4E5E      2154          unlk      A6
00001542  4E75      2155          rts
                    2156   ; }
                    2157   ; int EEPROMRandomRead(int deviceAddr, int readAddr) {
                    2158   _EEPROMRandomRead:
00001544  4E56 FFFC 2159          link      A6,#-4
00001548  48E7 0030 2160          movem.l   A2/A3,-(A7)
0000154C  45F8 1458 2161          lea       _checkTIP.L,A2
00001550  47F8 1468 2162          lea       _checkAck.L,A3
                    2163   ; int readData;
                    2164   ; // Wait for bus to be idle
                    2165   ; // IICCoreEnable(); 
                    2166   ; checkTIP(); 
00001554  4E92      2167          jsr       (A2)
                    2168   ; // Print TXRX register
                    2169   ; // printf("IIC_TXRX read before: %02x", IIC_TXRX);
                    2170   ; // Send start condition for a write
                    2171   ; IIC_TXRX = ((deviceAddr << 1) & 0xFE);
00001556  202E 0008 2172          move.l    8(A6),D0
0000155A  E380      2173          asl.l     #1,D0
0000155C  C0BC 0000 2174          and.l     #254,D0
00001560  00FE      
00001562  13C0 0040 2175          move.b    D0,4227078
00001566  8006      
                    2176   ; IIC_CRSR = START | WRITE | IACK;
00001568  13FC 0091 2177          move.b    #145,4227080
0000156C  0040 8008 
                    2178   ; checkTIP();
00001570  4E92      2179          jsr       (A2)
                    2180   ; checkAck();
00001572  4E93      2181          jsr       (A3)
                    2182   ; //printf("Sending Slave Address: %02x\n", (deviceAddr << 1) & 0xFE);
                    2183   ; // Send the high-order byte of the address
                    2184   ; IIC_TXRX = (readAddr >> 8) & 0xFF;
00001574  202E 000C 2185          move.l    12(A6),D0
00001578  E080      2186          asr.l     #8,D0
0000157A  C0BC 0000 2187          and.l     #255,D0
0000157E  00FF      
00001580  13C0 0040 2188          move.b    D0,4227078
00001584  8006      
                    2189   ; IIC_CRSR = WRITE | IACK;
00001586  13FC 0011 2190          move.b    #17,4227080
0000158A  0040 8008 
                    2191   ; //printf("Sent Upper Memory Byte: %02x\n", readAddr >> 8);
                    2192   ; checkTIP();
0000158E  4E92      2193          jsr       (A2)
                    2194   ; checkAck();
00001590  4E93      2195          jsr       (A3)
                    2196   ; // Send the low-order byte of the address
                    2197   ; IIC_TXRX = (readAddr & 0xFF);
00001592  202E 000C 2198          move.l    12(A6),D0
00001596  C0BC 0000 2199          and.l     #255,D0
0000159A  00FF      
0000159C  13C0 0040 2200          move.b    D0,4227078
000015A0  8006      
                    2201   ; IIC_CRSR = WRITE | IACK;
000015A2  13FC 0011 2202          move.b    #17,4227080
000015A6  0040 8008 
                    2203   ; //printf("Sent Lower Memory Byte: %02x\n", readAddr & 0xFF);
                    2204   ; checkTIP();
000015AA  4E92      2205          jsr       (A2)
                    2206   ; checkAck();
000015AC  4E93      2207          jsr       (A3)
                    2208   ; // send START condition again followed by slave address with R/W set to 1
                    2209   ; IIC_TXRX = 0xA1; //((deviceAddr << 1) | 0x01);
000015AE  13FC 00A1 2210          move.b    #161,4227078
000015B2  0040 8006 
                    2211   ; IIC_CRSR = START | WRITE | IACK;
000015B6  13FC 0091 2212          move.b    #145,4227080
000015BA  0040 8008 
                    2213   ; checkTIP();
000015BE  4E92      2214          jsr       (A2)
                    2215   ; checkAck();
000015C0  4E93      2216          jsr       (A3)
                    2217   ; //printf("Sent Start Condition with Read Bit Set\n");
                    2218   ; //printf("Sent Slave Address with Read Bit Set: %02x\n", (deviceAddr << 1) | 0x01);
                    2219   ; // // Print TXRX register
                    2220   ; // printf("IIC_TXRX read: %02x", IIC_TXRX);
                    2221   ; // IICStopCondition();
                    2222   ; IIC_CRSR = STOP | READ | IACK | NACK; // STOP + READ + IACK + NACK
000015C2  13FC 0069 2223          move.b    #105,4227080
000015C6  0040 8008 
                    2224   ; checkTIP();
000015CA  4E92      2225          jsr       (A2)
                    2226   ; //printf("Sent Stop Condition\n");
                    2227   ; // Check if IF flag is sent, and if so read the data
                    2228   ; while (!(IIC_CRSR & 0x1));
                    2229   EEPROMRandomRead_1:
000015CC  1039 0040 2230          move.b    4227080,D0
000015D0  8008      
000015D2  C03C 0001 2231          and.b     #1,D0
000015D6  6602      2232          bne.s     EEPROMRandomRead_3
000015D8  60F2      2233          bra       EEPROMRandomRead_1
                    2234   EEPROMRandomRead_3:
                    2235   ; IIC_CRSR = 0;
000015DA  4239 0040 2236          clr.b     4227080
000015DE  8008      
                    2237   ; readData = IIC_TXRX;
000015E0  1039 0040 2238          move.b    4227078,D0
000015E4  8006      
000015E6  C0BC 0000 2239          and.l     #255,D0
000015EA  00FF      
000015EC  2D40 FFFC 2240          move.l    D0,-4(A6)
                    2241   ; //printf("\r\n Data Read: %02x", readData);
                    2242   ; // IICCoreDisable();
                    2243   ; // wait5ms();
                    2244   ; return readData;    
000015F0  202E FFFC 2245          move.l    -4(A6),D0
000015F4  4CDF 0C00 2246          movem.l   (A7)+,A2/A3
000015F8  4E5E      2247          unlk      A6
000015FA  4E75      2248          rts
                    2249   ; }   
                    2250   ; I2CTest() {
                    2251   _I2CTest:
000015FC  4E56 FFE8 2252          link      A6,#-24
00001600  48E7 3020 2253          movem.l   D2/D3/A2,-(A7)
00001604  45F9 0000 2254          lea       _printf.L,A2
00001608  3C38      
                    2255   ; int IICData[5] = {0x01, 0x02, 0x03, 0x04, 0x05};
0000160A  41EE FFE8 2256          lea       -24(A6),A0
0000160E  43F9 0000 2257          lea       I2CTest_IICData.L,A1
00001612  5A78      
00001614  7004      2258          moveq     #4,D0
00001616  20D9      2259          move.l    (A1)+,(A0)+
00001618  51C8 FFFC 2260          dbra      D0,*-2
                    2261   ; int writeData = 0xAB;
0000161C  2D7C 0000 2262          move.l    #171,-4(A6)
00001620  00AB FFFC 
                    2263   ; int readData;
                    2264   ; int i;
                    2265   ; printf("\r\n I2C Test");
00001624  4879 0000 2266          pea       @m68kde~1_29.L
00001628  48B8      
0000162A  4E92      2267          jsr       (A2)
0000162C  584F      2268          addq.w    #4,A7
                    2269   ; IIC_Init();
0000162E  4EB8 1428 2270          jsr       _IIC_Init
                    2271   ; //IICWriteData(IICData, 0x50, 5);
                    2272   ; printf("\r\n Starting EEPROM Write: Writing 0x%.2x to address 0x00\n", writeData); // Debug: Indicate the start of EEPROM write
00001632  2F2E FFFC 2273          move.l    -4(A6),-(A7)
00001636  4879 0000 2274          pea       @m68kde~1_30.L
0000163A  48C4      
0000163C  4E92      2275          jsr       (A2)
0000163E  504F      2276          addq.w    #8,A7
                    2277   ; for (i = 0; i < 50; i++) {
00001640  4282      2278          clr.l     D2
                    2279   I2CTest_1:
00001642  0C82 0000 2280          cmp.l     #50,D2
00001646  0032      
00001648  6C26      2281          bge.s     I2CTest_3
                    2282   ; printf("\r\n Writing %d to address %d\n", i, i);
0000164A  2F02      2283          move.l    D2,-(A7)
0000164C  2F02      2284          move.l    D2,-(A7)
0000164E  4879 0000 2285          pea       @m68kde~1_31.L
00001652  48FE      
00001654  4E92      2286          jsr       (A2)
00001656  DEFC 000C 2287          add.w     #12,A7
                    2288   ; EEPROMByteWrite(i, EEPROM0, i); // Write data to EEPROM
0000165A  48C2      2289          ext.l     D2
0000165C  2F02      2290          move.l    D2,-(A7)
0000165E  4878 0050 2291          pea       80
00001662  2F02      2292          move.l    D2,-(A7)
00001664  4EB8 14B6 2293          jsr       _EEPROMByteWrite
00001668  DEFC 000C 2294          add.w     #12,A7
0000166C  5282      2295          addq.l    #1,D2
0000166E  60D2      2296          bra       I2CTest_1
                    2297   I2CTest_3:
                    2298   ; // wait5ms(); wait5ms(); wait5ms(); wait5ms(); wait5ms(); wait5ms(); wait5ms(); wait5ms(); // Wait for 5 ms
                    2299   ; // readData = EEPROMRandomRead(EEPROM0, i);
                    2300   ; // printf("\r\n Address: %d: %d\n", i, readData);
                    2301   ; }
                    2302   ; // EEPROMByteWrite(0xBC, EEPROM0, 0x0);
                    2303   ; printf("\r\nFinished write, Starting EEPROM Read\n");
00001670  4879 0000 2304          pea       @m68kde~1_32.L
00001674  491C      
00001676  4E92      2305          jsr       (A2)
00001678  584F      2306          addq.w    #4,A7
                    2307   ; for (i = 0; i < 50; i++) {
0000167A  4282      2308          clr.l     D2
                    2309   I2CTest_4:
0000167C  0C82 0000 2310          cmp.l     #50,D2
00001680  0032      
00001682  6C22      2311          bge.s     I2CTest_6
                    2312   ; readData = EEPROMRandomRead(EEPROM0, i); // Read data from EEPROM
00001684  2F02      2313          move.l    D2,-(A7)
00001686  4878 0050 2314          pea       80
0000168A  4EB8 1544 2315          jsr       _EEPROMRandomRead
0000168E  504F      2316          addq.w    #8,A7
00001690  2600      2317          move.l    D0,D3
                    2318   ; printf("\r\n Address: %d: %d\n", i, readData); // Debug: Indicate the address being read and the data read
00001692  2F03      2319          move.l    D3,-(A7)
00001694  2F02      2320          move.l    D2,-(A7)
00001696  4879 0000 2321          pea       @m68kde~1_33.L
0000169A  4944      
0000169C  4E92      2322          jsr       (A2)
0000169E  DEFC 000C 2323          add.w     #12,A7
000016A2  5282      2324          addq.l    #1,D2
000016A4  60D6      2325          bra       I2CTest_4
                    2326   I2CTest_6:
                    2327   ; }
                    2328   ; readData = EEPROMRandomRead(EEPROM0, 0x0);
000016A6  42A7      2329          clr.l     -(A7)
000016A8  4878 0050 2330          pea       80
000016AC  4EB8 1544 2331          jsr       _EEPROMRandomRead
000016B0  504F      2332          addq.w    #8,A7
000016B2  2600      2333          move.l    D0,D3
                    2334   ; IICCoreDisable();
000016B4  4EB8 141E 2335          jsr       _IICCoreDisable
000016B8  4CDF 040C 2336          movem.l   (A7)+,D2/D3/A2
000016BC  4E5E      2337          unlk      A6
000016BE  4E75      2338          rts
                    2339   ; // printf("\r\n Address: %d: %d\n", 0x0, readData);
                    2340   ; }
                    2341   ; // Initialize and enable I2C controller
                    2342   ; // No interrupts and set clock frequency to 100Khz
                    2343   ; // Connect controller to 25 or 45 Mhz CPU clock
                    2344   ; // Check if device is ready before writing anything over I2C bus ie) TX register has written previous command.
                    2345   ; // Check the status register TIP bit to see when transmission has finished
                    2346   ; // Wait for ACK from slave after each write
                    2347   ; // Transmit a byte to the I2C bus
                    2348   ; // write the data to be transmitted into TX register and then write something to the command register that indiciates that you want to write
                    2349   ; // If you want to generate a start or stop condition, set the STA or STO bits in command register when you write to it,
                    2350   ; // Clear the ACK bit if you want to generate an ACK when reading data back from the slave
                    2351   ; // EEPROM Functions
                    2352   ; // Write a byte to the EEPROM
                    2353   ; // Start write by writing a slave address and sett bit 0 of the data to be transmitted to 0, to indicate that you are writing an address to the slave
                    2354   ; // Generate start condition, and set the bit select and chip select bits, and set bits [7:4] to 1010
                    2355   ; // Write 2 bytes which correspond to the the 2 byte internal 64k address inside the chip, and then write the data to be stored at that address
                    2356   ; // Read a byte from the EEPROM
                    2357   ; // Write a slave address along with a start condition
                    2358   ; // Write 2 bytes which correspond to the 2 internal address bytes of the EEPROM
                    2359   ; // Send repeated start condition and set RD bit and ACK bit in command register
                    2360   ; // Set stop bit, and don't forget to set IACK bit to clear any pending interrupt flag
                    2361   ; // When data is recieved from slave, you can find it in the I2C Rx register
                    2362   ; // Poll I2C controller to determine when the data has been read from the slave which can be done by checking the IF flag in status register
                    2363   ; // when IF flag == 1, the data has been received.
                    2364   ; // Clear the IF flag with each byte read 
                    2365   ; // If slave does not recieve ACK from I2C controller, it will not send any more data
                    2366   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2367   ; // IMPORTANT
                    2368   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2369   ; // has to be done with an interrupt (IRQ Level 6)
                    2370   ; //
                    2371   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2372   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2373   ; //
                    2374   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2375   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2376   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2377   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2378   ; // program area
                    2379   ; //
                    2380   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2381   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2382   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2383   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2384   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2385   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2386   ; void DumpRegisters()
                    2387   ; {
                    2388   _DumpRegisters:
000016C0  48E7 3F3C 2389          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000016C4  45F9 0000 2390          lea       _putch.L,A2
000016C8  327C      
000016CA  47F9 0000 2391          lea       _printf.L,A3
000016CE  3C38      
000016D0  49F9 0B00 2392          lea       _SR.L,A4
000016D4  012C      
000016D6  4BF9 0B00 2393          lea       _WatchPointString.L,A5
000016DA  01C2      
                    2394   ; short i, x, j, k ;
                    2395   ; unsigned char c, *BytePointer;
                    2396   ; // buld up strings for displaying watchpoints
                    2397   ; for(x = 0; x < (short)(8); x++)
000016DC  4242      2398          clr.w     D2
                    2399   DumpRegisters_1:
000016DE  0C42 0008 2400          cmp.w     #8,D2
000016E2  6C00 01C6 2401          bge       DumpRegisters_3
                    2402   ; {
                    2403   ; if(WatchPointSetOrCleared[x] == 1)
000016E6  48C2      2404          ext.l     D2
000016E8  2002      2405          move.l    D2,D0
000016EA  E588      2406          lsl.l     #2,D0
000016EC  41F9 0B00 2407          lea       _WatchPointSetOrCleared.L,A0
000016F0  01A2      
000016F2  2030 0800 2408          move.l    0(A0,D0.L),D0
000016F6  0C80 0000 2409          cmp.l     #1,D0
000016FA  0001      
000016FC  6600 0186 2410          bne       DumpRegisters_4
                    2411   ; {
                    2412   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001700  48C2      2413          ext.l     D2
00001702  2202      2414          move.l    D2,D1
00001704  E589      2415          lsl.l     #2,D1
00001706  41F9 0B00 2416          lea       _WatchPointAddress.L,A0
0000170A  0182      
0000170C  2F30 1800 2417          move.l    0(A0,D1.L),-(A7)
00001710  4879 0000 2418          pea       @m68kde~1_34.L
00001714  4958      
00001716  220D      2419          move.l    A5,D1
00001718  48C2      2420          ext.l     D2
0000171A  2F00      2421          move.l    D0,-(A7)
0000171C  2002      2422          move.l    D2,D0
0000171E  C1FC 0064 2423          muls      #100,D0
00001722  D280      2424          add.l     D0,D1
00001724  201F      2425          move.l    (A7)+,D0
00001726  2F01      2426          move.l    D1,-(A7)
00001728  4EB9 0000 2427          jsr       _sprintf
0000172C  3314      
0000172E  DEFC 000C 2428          add.w     #12,A7
                    2429   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001732  48C2      2430          ext.l     D2
00001734  2002      2431          move.l    D2,D0
00001736  E588      2432          lsl.l     #2,D0
00001738  41F9 0B00 2433          lea       _WatchPointAddress.L,A0
0000173C  0182      
0000173E  2A30 0800 2434          move.l    0(A0,D0.L),D5
                    2435   ; for(j = 0; j < (short)(16); j+=2)
00001742  4243      2436          clr.w     D3
                    2437   DumpRegisters_6:
00001744  0C43 0010 2438          cmp.w     #16,D3
00001748  6C00 0082 2439          bge       DumpRegisters_8
                    2440   ; {
                    2441   ; for(k = 0; k < (short)(2); k++)
0000174C  4246      2442          clr.w     D6
                    2443   DumpRegisters_9:
0000174E  0C46 0002 2444          cmp.w     #2,D6
00001752  6C00 0052 2445          bge       DumpRegisters_11
                    2446   ; {
                    2447   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001756  2045      2448          move.l    D5,A0
00001758  48C3      2449          ext.l     D3
0000175A  2203      2450          move.l    D3,D1
0000175C  48C6      2451          ext.l     D6
0000175E  D286      2452          add.l     D6,D1
00001760  1230 1800 2453          move.b    0(A0,D1.L),D1
00001764  C2BC 0000 2454          and.l     #255,D1
00001768  00FF      
0000176A  2F01      2455          move.l    D1,-(A7)
0000176C  4879 0000 2456          pea       @m68kde~1_8.L
00001770  4686      
00001772  4879 0B00 2457          pea       _TempString.L
00001776  04E2      
00001778  4EB9 0000 2458          jsr       _sprintf
0000177C  3314      
0000177E  DEFC 000C 2459          add.w     #12,A7
                    2460   ; strcat(WatchPointString[x], TempString) ;
00001782  4879 0B00 2461          pea       _TempString.L
00001786  04E2      
00001788  220D      2462          move.l    A5,D1
0000178A  48C2      2463          ext.l     D2
0000178C  2F00      2464          move.l    D0,-(A7)
0000178E  2002      2465          move.l    D2,D0
00001790  C1FC 0064 2466          muls      #100,D0
00001794  D280      2467          add.l     D0,D1
00001796  201F      2468          move.l    (A7)+,D0
00001798  2F01      2469          move.l    D1,-(A7)
0000179A  4EB9 0000 2470          jsr       _strcat
0000179E  3360      
000017A0  504F      2471          addq.w    #8,A7
000017A2  5246      2472          addq.w    #1,D6
000017A4  60A8      2473          bra       DumpRegisters_9
                    2474   DumpRegisters_11:
                    2475   ; }
                    2476   ; strcat(WatchPointString[x]," ") ;
000017A6  4879 0000 2477          pea       @m68kde~1_35.L
000017AA  4960      
000017AC  220D      2478          move.l    A5,D1
000017AE  48C2      2479          ext.l     D2
000017B0  2F00      2480          move.l    D0,-(A7)
000017B2  2002      2481          move.l    D2,D0
000017B4  C1FC 0064 2482          muls      #100,D0
000017B8  D280      2483          add.l     D0,D1
000017BA  201F      2484          move.l    (A7)+,D0
000017BC  2F01      2485          move.l    D1,-(A7)
000017BE  4EB9 0000 2486          jsr       _strcat
000017C2  3360      
000017C4  504F      2487          addq.w    #8,A7
000017C6  5443      2488          addq.w    #2,D3
000017C8  6000 FF7A 2489          bra       DumpRegisters_6
                    2490   DumpRegisters_8:
                    2491   ; }
                    2492   ; strcat(WatchPointString[x], "  ") ;
000017CC  4879 0000 2493          pea       @m68kde~1_9.L
000017D0  468C      
000017D2  220D      2494          move.l    A5,D1
000017D4  48C2      2495          ext.l     D2
000017D6  2F00      2496          move.l    D0,-(A7)
000017D8  2002      2497          move.l    D2,D0
000017DA  C1FC 0064 2498          muls      #100,D0
000017DE  D280      2499          add.l     D0,D1
000017E0  201F      2500          move.l    (A7)+,D0
000017E2  2F01      2501          move.l    D1,-(A7)
000017E4  4EB9 0000 2502          jsr       _strcat
000017E8  3360      
000017EA  504F      2503          addq.w    #8,A7
                    2504   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000017EC  48C2      2505          ext.l     D2
000017EE  2002      2506          move.l    D2,D0
000017F0  E588      2507          lsl.l     #2,D0
000017F2  41F9 0B00 2508          lea       _WatchPointAddress.L,A0
000017F6  0182      
000017F8  2A30 0800 2509          move.l    0(A0,D0.L),D5
                    2510   ; for(j = 0; j < (short)(16); j++)
000017FC  4243      2511          clr.w     D3
                    2512   DumpRegisters_12:
000017FE  0C43 0010 2513          cmp.w     #16,D3
00001802  6C00 007E 2514          bge       DumpRegisters_14
                    2515   ; {
                    2516   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001806  2045      2517          move.l    D5,A0
00001808  48C3      2518          ext.l     D3
0000180A  1030 3800 2519          move.b    0(A0,D3.L),D0
0000180E  C03C 007F 2520          and.b     #127,D0
00001812  1E00      2521          move.b    D0,D7
                    2522   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001814  0C07 007F 2523          cmp.b     #127,D7
00001818  6206      2524          bhi.s     DumpRegisters_17
0000181A  0C07 0020 2525          cmp.b     #32,D7
0000181E  6416      2526          bhs.s     DumpRegisters_15
                    2527   DumpRegisters_17:
                    2528   ; sprintf(TempString, ".") ;
00001820  4879 0000 2529          pea       @m68kde~1_36.L
00001824  4962      
00001826  4879 0B00 2530          pea       _TempString.L
0000182A  04E2      
0000182C  4EB9 0000 2531          jsr       _sprintf
00001830  3314      
00001832  504F      2532          addq.w    #8,A7
00001834  6026      2533          bra.s     DumpRegisters_16
                    2534   DumpRegisters_15:
                    2535   ; else
                    2536   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001836  2045      2537          move.l    D5,A0
00001838  48C3      2538          ext.l     D3
0000183A  1230 3800 2539          move.b    0(A0,D3.L),D1
0000183E  C2BC 0000 2540          and.l     #255,D1
00001842  00FF      
00001844  2F01      2541          move.l    D1,-(A7)
00001846  4879 0000 2542          pea       @m68kde~1_37.L
0000184A  4964      
0000184C  4879 0B00 2543          pea       _TempString.L
00001850  04E2      
00001852  4EB9 0000 2544          jsr       _sprintf
00001856  3314      
00001858  DEFC 000C 2545          add.w     #12,A7
                    2546   DumpRegisters_16:
                    2547   ; strcat(WatchPointString[x], TempString) ;
0000185C  4879 0B00 2548          pea       _TempString.L
00001860  04E2      
00001862  220D      2549          move.l    A5,D1
00001864  48C2      2550          ext.l     D2
00001866  2F00      2551          move.l    D0,-(A7)
00001868  2002      2552          move.l    D2,D0
0000186A  C1FC 0064 2553          muls      #100,D0
0000186E  D280      2554          add.l     D0,D1
00001870  201F      2555          move.l    (A7)+,D0
00001872  2F01      2556          move.l    D1,-(A7)
00001874  4EB9 0000 2557          jsr       _strcat
00001878  3360      
0000187A  504F      2558          addq.w    #8,A7
0000187C  5243      2559          addq.w    #1,D3
0000187E  6000 FF7E 2560          bra       DumpRegisters_12
                    2561   DumpRegisters_14:
00001882  6020      2562          bra.s     DumpRegisters_5
                    2563   DumpRegisters_4:
                    2564   ; }
                    2565   ; }
                    2566   ; else
                    2567   ; strcpy(WatchPointString[x], "") ;
00001884  4879 0000 2568          pea       @m68kde~1_38.L
00001888  4968      
0000188A  220D      2569          move.l    A5,D1
0000188C  48C2      2570          ext.l     D2
0000188E  2F00      2571          move.l    D0,-(A7)
00001890  2002      2572          move.l    D2,D0
00001892  C1FC 0064 2573          muls      #100,D0
00001896  D280      2574          add.l     D0,D1
00001898  201F      2575          move.l    (A7)+,D0
0000189A  2F01      2576          move.l    D1,-(A7)
0000189C  4EB9 0000 2577          jsr       _strcpy
000018A0  318E      
000018A2  504F      2578          addq.w    #8,A7
                    2579   DumpRegisters_5:
000018A4  5242      2580          addq.w    #1,D2
000018A6  6000 FE36 2581          bra       DumpRegisters_1
                    2582   DumpRegisters_3:
                    2583   ; }
                    2584   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000018AA  2F39 0B00 2585          move.l    _a0.L,-(A7)
000018AE  0104      
000018B0  2F39 0B00 2586          move.l    _d0.L,-(A7)
000018B4  00E4      
000018B6  4879 0000 2587          pea       @m68kde~1_39.L
000018BA  496A      
000018BC  4E93      2588          jsr       (A3)
000018BE  DEFC 000C 2589          add.w     #12,A7
                    2590   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000018C2  2F39 0B00 2591          move.l    _a1.L,-(A7)
000018C6  0108      
000018C8  2F39 0B00 2592          move.l    _d1.L,-(A7)
000018CC  00E8      
000018CE  4879 0000 2593          pea       @m68kde~1_40.L
000018D2  4986      
000018D4  4E93      2594          jsr       (A3)
000018D6  DEFC 000C 2595          add.w     #12,A7
                    2596   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000018DA  2F39 0B00 2597          move.l    _a2.L,-(A7)
000018DE  010C      
000018E0  2F39 0B00 2598          move.l    _d2.L,-(A7)
000018E4  00EC      
000018E6  4879 0000 2599          pea       @m68kde~1_41.L
000018EA  49A0      
000018EC  4E93      2600          jsr       (A3)
000018EE  DEFC 000C 2601          add.w     #12,A7
                    2602   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000018F2  2F39 0B00 2603          move.l    _a3.L,-(A7)
000018F6  0110      
000018F8  2F39 0B00 2604          move.l    _d3.L,-(A7)
000018FC  00F0      
000018FE  4879 0000 2605          pea       @m68kde~1_42.L
00001902  49BA      
00001904  4E93      2606          jsr       (A3)
00001906  DEFC 000C 2607          add.w     #12,A7
                    2608   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
0000190A  2F39 0B00 2609          move.l    _a4.L,-(A7)
0000190E  0114      
00001910  2F39 0B00 2610          move.l    _d4.L,-(A7)
00001914  00F4      
00001916  4879 0000 2611          pea       @m68kde~1_43.L
0000191A  49D4      
0000191C  4E93      2612          jsr       (A3)
0000191E  DEFC 000C 2613          add.w     #12,A7
                    2614   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001922  2F39 0B00 2615          move.l    _a5.L,-(A7)
00001926  0118      
00001928  2F39 0B00 2616          move.l    _d5.L,-(A7)
0000192C  00F8      
0000192E  4879 0000 2617          pea       @m68kde~1_44.L
00001932  49EE      
00001934  4E93      2618          jsr       (A3)
00001936  DEFC 000C 2619          add.w     #12,A7
                    2620   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
0000193A  2F39 0B00 2621          move.l    _a6.L,-(A7)
0000193E  011C      
00001940  2F39 0B00 2622          move.l    _d6.L,-(A7)
00001944  00FC      
00001946  4879 0000 2623          pea       @m68kde~1_45.L
0000194A  4A08      
0000194C  4E93      2624          jsr       (A3)
0000194E  DEFC 000C 2625          add.w     #12,A7
                    2626   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001952  3214      2627          move.w    (A4),D1
00001954  C27C 2000 2628          and.w     #8192,D1
00001958  0C41 2000 2629          cmp.w     #8192,D1
0000195C  6608      2630          bne.s     DumpRegisters_18
0000195E  2239 0B00 2631          move.l    _SSP.L,D1
00001962  0124      
00001964  6006      2632          bra.s     DumpRegisters_19
                    2633   DumpRegisters_18:
00001966  2239 0B00 2634          move.l    _USP.L,D1
0000196A  0128      
                    2635   DumpRegisters_19:
0000196C  2F01      2636          move.l    D1,-(A7)
0000196E  2F39 0B00 2637          move.l    _d7.L,-(A7)
00001972  0100      
00001974  4879 0000 2638          pea       @m68kde~1_46.L
00001978  4A22      
0000197A  4E93      2639          jsr       (A3)
0000197C  DEFC 000C 2640          add.w     #12,A7
                    2641   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001980  2F39 0B00 2642          move.l    _USP.L,-(A7)
00001984  0128      
00001986  4879 0000 2643          pea       @m68kde~1_47.L
0000198A  4A3C      
0000198C  4E93      2644          jsr       (A3)
0000198E  504F      2645          addq.w    #8,A7
                    2646   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001990  2F39 0B00 2647          move.l    _SSP.L,-(A7)
00001994  0124      
00001996  4879 0000 2648          pea       @m68kde~1_48.L
0000199A  4A5A      
0000199C  4E93      2649          jsr       (A3)
0000199E  504F      2650          addq.w    #8,A7
                    2651   ; printf("\r\n SR = $%04X   ",SR) ;
000019A0  3214      2652          move.w    (A4),D1
000019A2  C2BC 0000 2653          and.l     #65535,D1
000019A6  FFFF      
000019A8  2F01      2654          move.l    D1,-(A7)
000019AA  4879 0000 2655          pea       @m68kde~1_49.L
000019AE  4A7C      
000019B0  4E93      2656          jsr       (A3)
000019B2  504F      2657          addq.w    #8,A7
                    2658   ; // display the status word in characters etc.
                    2659   ; printf("   [") ;
000019B4  4879 0000 2660          pea       @m68kde~1_50.L
000019B8  4A8E      
000019BA  4E93      2661          jsr       (A3)
000019BC  584F      2662          addq.w    #4,A7
                    2663   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000019BE  3014      2664          move.w    (A4),D0
000019C0  C07C 8000 2665          and.w     #32768,D0
000019C4  0C40 8000 2666          cmp.w     #32768,D0
000019C8  660A      2667          bne.s     DumpRegisters_20
000019CA  4878 0054 2668          pea       84
000019CE  4E92      2669          jsr       (A2)
000019D0  584F      2670          addq.w    #4,A7
000019D2  6008      2671          bra.s     DumpRegisters_21
                    2672   DumpRegisters_20:
000019D4  4878 002D 2673          pea       45
000019D8  4E92      2674          jsr       (A2)
000019DA  584F      2675          addq.w    #4,A7
                    2676   DumpRegisters_21:
                    2677   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000019DC  3014      2678          move.w    (A4),D0
000019DE  C07C 2000 2679          and.w     #8192,D0
000019E2  0C40 2000 2680          cmp.w     #8192,D0
000019E6  660A      2681          bne.s     DumpRegisters_22
000019E8  4878 0053 2682          pea       83
000019EC  4E92      2683          jsr       (A2)
000019EE  584F      2684          addq.w    #4,A7
000019F0  6008      2685          bra.s     DumpRegisters_23
                    2686   DumpRegisters_22:
000019F2  4878 0055 2687          pea       85
000019F6  4E92      2688          jsr       (A2)
000019F8  584F      2689          addq.w    #4,A7
                    2690   DumpRegisters_23:
                    2691   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000019FA  3014      2692          move.w    (A4),D0
000019FC  C07C 0400 2693          and.w     #1024,D0
00001A00  0C40 0400 2694          cmp.w     #1024,D0
00001A04  660A      2695          bne.s     DumpRegisters_24
00001A06  4878 0031 2696          pea       49
00001A0A  4E92      2697          jsr       (A2)
00001A0C  584F      2698          addq.w    #4,A7
00001A0E  6008      2699          bra.s     DumpRegisters_25
                    2700   DumpRegisters_24:
00001A10  4878 0030 2701          pea       48
00001A14  4E92      2702          jsr       (A2)
00001A16  584F      2703          addq.w    #4,A7
                    2704   DumpRegisters_25:
                    2705   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001A18  3014      2706          move.w    (A4),D0
00001A1A  C07C 0200 2707          and.w     #512,D0
00001A1E  0C40 0200 2708          cmp.w     #512,D0
00001A22  660A      2709          bne.s     DumpRegisters_26
00001A24  4878 0031 2710          pea       49
00001A28  4E92      2711          jsr       (A2)
00001A2A  584F      2712          addq.w    #4,A7
00001A2C  6008      2713          bra.s     DumpRegisters_27
                    2714   DumpRegisters_26:
00001A2E  4878 0030 2715          pea       48
00001A32  4E92      2716          jsr       (A2)
00001A34  584F      2717          addq.w    #4,A7
                    2718   DumpRegisters_27:
                    2719   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001A36  3014      2720          move.w    (A4),D0
00001A38  C07C 0100 2721          and.w     #256,D0
00001A3C  0C40 0100 2722          cmp.w     #256,D0
00001A40  660A      2723          bne.s     DumpRegisters_28
00001A42  4878 0031 2724          pea       49
00001A46  4E92      2725          jsr       (A2)
00001A48  584F      2726          addq.w    #4,A7
00001A4A  6008      2727          bra.s     DumpRegisters_29
                    2728   DumpRegisters_28:
00001A4C  4878 0030 2729          pea       48
00001A50  4E92      2730          jsr       (A2)
00001A52  584F      2731          addq.w    #4,A7
                    2732   DumpRegisters_29:
                    2733   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001A54  3014      2734          move.w    (A4),D0
00001A56  C07C 0010 2735          and.w     #16,D0
00001A5A  0C40 0010 2736          cmp.w     #16,D0
00001A5E  660A      2737          bne.s     DumpRegisters_30
00001A60  4878 0058 2738          pea       88
00001A64  4E92      2739          jsr       (A2)
00001A66  584F      2740          addq.w    #4,A7
00001A68  6008      2741          bra.s     DumpRegisters_31
                    2742   DumpRegisters_30:
00001A6A  4878 002D 2743          pea       45
00001A6E  4E92      2744          jsr       (A2)
00001A70  584F      2745          addq.w    #4,A7
                    2746   DumpRegisters_31:
                    2747   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001A72  3014      2748          move.w    (A4),D0
00001A74  C07C 0008 2749          and.w     #8,D0
00001A78  0C40 0008 2750          cmp.w     #8,D0
00001A7C  660A      2751          bne.s     DumpRegisters_32
00001A7E  4878 004E 2752          pea       78
00001A82  4E92      2753          jsr       (A2)
00001A84  584F      2754          addq.w    #4,A7
00001A86  6008      2755          bra.s     DumpRegisters_33
                    2756   DumpRegisters_32:
00001A88  4878 002D 2757          pea       45
00001A8C  4E92      2758          jsr       (A2)
00001A8E  584F      2759          addq.w    #4,A7
                    2760   DumpRegisters_33:
                    2761   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001A90  3014      2762          move.w    (A4),D0
00001A92  C07C 0004 2763          and.w     #4,D0
00001A96  0C40 0004 2764          cmp.w     #4,D0
00001A9A  660A      2765          bne.s     DumpRegisters_34
00001A9C  4878 005A 2766          pea       90
00001AA0  4E92      2767          jsr       (A2)
00001AA2  584F      2768          addq.w    #4,A7
00001AA4  6008      2769          bra.s     DumpRegisters_35
                    2770   DumpRegisters_34:
00001AA6  4878 002D 2771          pea       45
00001AAA  4E92      2772          jsr       (A2)
00001AAC  584F      2773          addq.w    #4,A7
                    2774   DumpRegisters_35:
                    2775   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001AAE  3014      2776          move.w    (A4),D0
00001AB0  C07C 0002 2777          and.w     #2,D0
00001AB4  0C40 0002 2778          cmp.w     #2,D0
00001AB8  660A      2779          bne.s     DumpRegisters_36
00001ABA  4878 0056 2780          pea       86
00001ABE  4E92      2781          jsr       (A2)
00001AC0  584F      2782          addq.w    #4,A7
00001AC2  6008      2783          bra.s     DumpRegisters_37
                    2784   DumpRegisters_36:
00001AC4  4878 002D 2785          pea       45
00001AC8  4E92      2786          jsr       (A2)
00001ACA  584F      2787          addq.w    #4,A7
                    2788   DumpRegisters_37:
                    2789   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001ACC  3014      2790          move.w    (A4),D0
00001ACE  C07C 0001 2791          and.w     #1,D0
00001AD2  0C40 0001 2792          cmp.w     #1,D0
00001AD6  660A      2793          bne.s     DumpRegisters_38
00001AD8  4878 0043 2794          pea       67
00001ADC  4E92      2795          jsr       (A2)
00001ADE  584F      2796          addq.w    #4,A7
00001AE0  6008      2797          bra.s     DumpRegisters_39
                    2798   DumpRegisters_38:
00001AE2  4878 002D 2799          pea       45
00001AE6  4E92      2800          jsr       (A2)
00001AE8  584F      2801          addq.w    #4,A7
                    2802   DumpRegisters_39:
                    2803   ; putchar(']') ;
00001AEA  4878 005D 2804          pea       93
00001AEE  4E92      2805          jsr       (A2)
00001AF0  584F      2806          addq.w    #4,A7
                    2807   ; printf("\r\n PC = $%08X  ", PC) ;
00001AF2  2F39 0B00 2808          move.l    _PC.L,-(A7)
00001AF6  0120      
00001AF8  4879 0000 2809          pea       @m68kde~1_51.L
00001AFC  4A94      
00001AFE  4E93      2810          jsr       (A3)
00001B00  504F      2811          addq.w    #8,A7
                    2812   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001B02  2039 0B00 2813          move.l    _PC.L,D0
00001B06  0120      
00001B08  2040      2814          move.l    D0,A0
00001B0A  3010      2815          move.w    (A0),D0
00001B0C  0C40 4E4E 2816          cmp.w     #20046,D0
00001B10  660A      2817          bne.s     DumpRegisters_40
                    2818   ; printf("[@ BREAKPOINT]") ;
00001B12  4879 0000 2819          pea       @m68kde~1_52.L
00001B16  4AA4      
00001B18  4E93      2820          jsr       (A3)
00001B1A  584F      2821          addq.w    #4,A7
                    2822   DumpRegisters_40:
                    2823   ; printf("\r\n") ;
00001B1C  4879 0000 2824          pea       @m68kde~1_1.L
00001B20  460E      
00001B22  4E93      2825          jsr       (A3)
00001B24  584F      2826          addq.w    #4,A7
                    2827   ; for(i=0; i < 8; i++)    {
00001B26  4244      2828          clr.w     D4
                    2829   DumpRegisters_42:
00001B28  0C44 0008 2830          cmp.w     #8,D4
00001B2C  6C00 0040 2831          bge       DumpRegisters_44
                    2832   ; if(WatchPointSetOrCleared[i] == 1)
00001B30  48C4      2833          ext.l     D4
00001B32  2004      2834          move.l    D4,D0
00001B34  E588      2835          lsl.l     #2,D0
00001B36  41F9 0B00 2836          lea       _WatchPointSetOrCleared.L,A0
00001B3A  01A2      
00001B3C  2030 0800 2837          move.l    0(A0,D0.L),D0
00001B40  0C80 0000 2838          cmp.l     #1,D0
00001B44  0001      
00001B46  6622      2839          bne.s     DumpRegisters_45
                    2840   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001B48  220D      2841          move.l    A5,D1
00001B4A  48C4      2842          ext.l     D4
00001B4C  2F00      2843          move.l    D0,-(A7)
00001B4E  2004      2844          move.l    D4,D0
00001B50  C1FC 0064 2845          muls      #100,D0
00001B54  D280      2846          add.l     D0,D1
00001B56  201F      2847          move.l    (A7)+,D0
00001B58  2F01      2848          move.l    D1,-(A7)
00001B5A  48C4      2849          ext.l     D4
00001B5C  2F04      2850          move.l    D4,-(A7)
00001B5E  4879 0000 2851          pea       @m68kde~1_53.L
00001B62  4AB4      
00001B64  4E93      2852          jsr       (A3)
00001B66  DEFC 000C 2853          add.w     #12,A7
                    2854   DumpRegisters_45:
00001B6A  5244      2855          addq.w    #1,D4
00001B6C  60BA      2856          bra       DumpRegisters_42
                    2857   DumpRegisters_44:
00001B6E  4CDF 3CFC 2858          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001B72  4E75      2859          rts
                    2860   ; }
                    2861   ; }
                    2862   ; // Trace Exception Handler
                    2863   ; void DumpRegistersandPause(void)
                    2864   ; {
                    2865   _DumpRegistersandPause:
00001B74  2F0A      2866          move.l    A2,-(A7)
00001B76  45F9 0000 2867          lea       _printf.L,A2
00001B7A  3C38      
                    2868   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001B7C  4879 0000 2869          pea       @m68kde~1_54.L
00001B80  4AC0      
00001B82  4E92      2870          jsr       (A2)
00001B84  584F      2871          addq.w    #4,A7
                    2872   ; printf("\r\nBreak Points :[Disabled]") ;
00001B86  4879 0000 2873          pea       @m68kde~1_55.L
00001B8A  4AE0      
00001B8C  4E92      2874          jsr       (A2)
00001B8E  584F      2875          addq.w    #4,A7
                    2876   ; DumpRegisters() ;
00001B90  4EB8 16C0 2877          jsr       _DumpRegisters
                    2878   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001B94  4879 0000 2879          pea       @m68kde~1_56.L
00001B98  4AFC      
00001B9A  4E92      2880          jsr       (A2)
00001B9C  584F      2881          addq.w    #4,A7
                    2882   ; printf("\r\nPress <ESC> to Resume Program") ;
00001B9E  4879 0000 2883          pea       @m68kde~1_57.L
00001BA2  4B28      
00001BA4  4E92      2884          jsr       (A2)
00001BA6  584F      2885          addq.w    #4,A7
                    2886   ; menu() ;
00001BA8  4EB9 0000 2887          jsr       _menu
00001BAC  2758      
00001BAE  245F      2888          move.l    (A7)+,A2
00001BB0  4E75      2889          rts
                    2890   ; }
                    2891   ; void ChangeRegisters(void)
                    2892   ; {
                    2893   _ChangeRegisters:
00001BB2  4E56 FFFC 2894          link      A6,#-4
00001BB6  48E7 303C 2895          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001BBA  45F9 0000 2896          lea       _printf.L,A2
00001BBE  3C38      
00001BC0  47EE FFFC 2897          lea       -4(A6),A3
00001BC4  49F8 0CA4 2898          lea       _Get8HexDigits.L,A4
00001BC8  4BF8 0B68 2899          lea       __getch.L,A5
                    2900   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2901   ; int reg_val ;
                    2902   ; char c, reg[3] ;
                    2903   ; reg[0] = tolower(_getch()) ;
00001BCC  2F00      2904          move.l    D0,-(A7)
00001BCE  4E95      2905          jsr       (A5)
00001BD0  2200      2906          move.l    D0,D1
00001BD2  201F      2907          move.l    (A7)+,D0
00001BD4  2F01      2908          move.l    D1,-(A7)
00001BD6  4EB9 0000 2909          jsr       _tolower
00001BDA  32E8      
00001BDC  584F      2910          addq.w    #4,A7
00001BDE  1680      2911          move.b    D0,(A3)
                    2912   ; reg[1] = c = tolower(_getch()) ;
00001BE0  2F00      2913          move.l    D0,-(A7)
00001BE2  4E95      2914          jsr       (A5)
00001BE4  2200      2915          move.l    D0,D1
00001BE6  201F      2916          move.l    (A7)+,D0
00001BE8  2F01      2917          move.l    D1,-(A7)
00001BEA  4EB9 0000 2918          jsr       _tolower
00001BEE  32E8      
00001BF0  584F      2919          addq.w    #4,A7
00001BF2  1400      2920          move.b    D0,D2
00001BF4  1740 0001 2921          move.b    D0,1(A3)
                    2922   ; if(reg[0] == (char)('d'))  {    // change data register
00001BF8  1013      2923          move.b    (A3),D0
00001BFA  0C00 0064 2924          cmp.b     #100,D0
00001BFE  6600 00AE 2925          bne       ChangeRegisters_1
                    2926   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001C02  102B 0001 2927          move.b    1(A3),D0
00001C06  0C00 0037 2928          cmp.b     #55,D0
00001C0A  6E0A      2929          bgt.s     ChangeRegisters_5
00001C0C  102B 0001 2930          move.b    1(A3),D0
00001C10  0C00 0030 2931          cmp.b     #48,D0
00001C14  6C0E      2932          bge.s     ChangeRegisters_3
                    2933   ChangeRegisters_5:
                    2934   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001C16  4879 0000 2935          pea       @m68kde~1_58.L
00001C1A  4B48      
00001C1C  4E92      2936          jsr       (A2)
00001C1E  584F      2937          addq.w    #4,A7
                    2938   ; return ;
00001C20  6000 0244 2939          bra       ChangeRegisters_6
                    2940   ChangeRegisters_3:
                    2941   ; }
                    2942   ; else {
                    2943   ; printf("\r\nD%c = ", c) ;
00001C24  4882      2944          ext.w     D2
00001C26  48C2      2945          ext.l     D2
00001C28  2F02      2946          move.l    D2,-(A7)
00001C2A  4879 0000 2947          pea       @m68kde~1_59.L
00001C2E  4B74      
00001C30  4E92      2948          jsr       (A2)
00001C32  504F      2949          addq.w    #8,A7
                    2950   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C34  42A7      2951          clr.l     -(A7)
00001C36  4E94      2952          jsr       (A4)
00001C38  584F      2953          addq.w    #4,A7
00001C3A  2600      2954          move.l    D0,D3
                    2955   ; }
                    2956   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2957   ; if(c == (char)('0'))
00001C3C  0C02 0030 2958          cmp.b     #48,D2
00001C40  660A      2959          bne.s     ChangeRegisters_7
                    2960   ; d0 = reg_val ;
00001C42  23C3 0B00 2961          move.l    D3,_d0.L
00001C46  00E4      
00001C48  6000 0060 2962          bra       ChangeRegisters_20
                    2963   ChangeRegisters_7:
                    2964   ; else if(c == (char)('1'))
00001C4C  0C02 0031 2965          cmp.b     #49,D2
00001C50  660A      2966          bne.s     ChangeRegisters_9
                    2967   ; d1 = reg_val ;
00001C52  23C3 0B00 2968          move.l    D3,_d1.L
00001C56  00E8      
00001C58  6000 0050 2969          bra       ChangeRegisters_20
                    2970   ChangeRegisters_9:
                    2971   ; else if(c == (char)('2'))
00001C5C  0C02 0032 2972          cmp.b     #50,D2
00001C60  660A      2973          bne.s     ChangeRegisters_11
                    2974   ; d2 = reg_val ;
00001C62  23C3 0B00 2975          move.l    D3,_d2.L
00001C66  00EC      
00001C68  6000 0040 2976          bra       ChangeRegisters_20
                    2977   ChangeRegisters_11:
                    2978   ; else if(c == (char)('3'))
00001C6C  0C02 0033 2979          cmp.b     #51,D2
00001C70  6608      2980          bne.s     ChangeRegisters_13
                    2981   ; d3 = reg_val ;
00001C72  23C3 0B00 2982          move.l    D3,_d3.L
00001C76  00F0      
00001C78  6030      2983          bra.s     ChangeRegisters_20
                    2984   ChangeRegisters_13:
                    2985   ; else if(c == (char)('4'))
00001C7A  0C02 0034 2986          cmp.b     #52,D2
00001C7E  6608      2987          bne.s     ChangeRegisters_15
                    2988   ; d4 = reg_val ;
00001C80  23C3 0B00 2989          move.l    D3,_d4.L
00001C84  00F4      
00001C86  6022      2990          bra.s     ChangeRegisters_20
                    2991   ChangeRegisters_15:
                    2992   ; else if(c == (char)('5'))
00001C88  0C02 0035 2993          cmp.b     #53,D2
00001C8C  6608      2994          bne.s     ChangeRegisters_17
                    2995   ; d5 = reg_val ;
00001C8E  23C3 0B00 2996          move.l    D3,_d5.L
00001C92  00F8      
00001C94  6014      2997          bra.s     ChangeRegisters_20
                    2998   ChangeRegisters_17:
                    2999   ; else if(c == (char)('6'))
00001C96  0C02 0036 3000          cmp.b     #54,D2
00001C9A  6608      3001          bne.s     ChangeRegisters_19
                    3002   ; d6 = reg_val ;
00001C9C  23C3 0B00 3003          move.l    D3,_d6.L
00001CA0  00FC      
00001CA2  6006      3004          bra.s     ChangeRegisters_20
                    3005   ChangeRegisters_19:
                    3006   ; else
                    3007   ; d7 = reg_val ;
00001CA4  23C3 0B00 3008          move.l    D3,_d7.L
00001CA8  0100      
                    3009   ChangeRegisters_20:
00001CAA  6000 01B6 3010          bra       ChangeRegisters_51
                    3011   ChangeRegisters_1:
                    3012   ; }
                    3013   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001CAE  1013      3014          move.b    (A3),D0
00001CB0  0C00 0061 3015          cmp.b     #97,D0
00001CB4  6600 00A6 3016          bne       ChangeRegisters_21
                    3017   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001CB8  0C02 0037 3018          cmp.b     #55,D2
00001CBC  6E06      3019          bgt.s     ChangeRegisters_25
00001CBE  0C02 0030 3020          cmp.b     #48,D2
00001CC2  6C0E      3021          bge.s     ChangeRegisters_23
                    3022   ChangeRegisters_25:
                    3023   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001CC4  4879 0000 3024          pea       @m68kde~1_60.L
00001CC8  4B7E      
00001CCA  4E92      3025          jsr       (A2)
00001CCC  584F      3026          addq.w    #4,A7
                    3027   ; return ;
00001CCE  6000 0196 3028          bra       ChangeRegisters_6
                    3029   ChangeRegisters_23:
                    3030   ; }
                    3031   ; else {
                    3032   ; printf("\r\nA%c = ", c) ;
00001CD2  4882      3033          ext.w     D2
00001CD4  48C2      3034          ext.l     D2
00001CD6  2F02      3035          move.l    D2,-(A7)
00001CD8  4879 0000 3036          pea       @m68kde~1_61.L
00001CDC  4BAC      
00001CDE  4E92      3037          jsr       (A2)
00001CE0  504F      3038          addq.w    #8,A7
                    3039   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001CE2  42A7      3040          clr.l     -(A7)
00001CE4  4E94      3041          jsr       (A4)
00001CE6  584F      3042          addq.w    #4,A7
00001CE8  2600      3043          move.l    D0,D3
                    3044   ; }
                    3045   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    3046   ; if(c == (char)('0'))
00001CEA  0C02 0030 3047          cmp.b     #48,D2
00001CEE  660A      3048          bne.s     ChangeRegisters_26
                    3049   ; a0 = reg_val ;
00001CF0  23C3 0B00 3050          move.l    D3,_a0.L
00001CF4  0104      
00001CF6  6000 0060 3051          bra       ChangeRegisters_39
                    3052   ChangeRegisters_26:
                    3053   ; else if(c == (char)('1'))
00001CFA  0C02 0031 3054          cmp.b     #49,D2
00001CFE  660A      3055          bne.s     ChangeRegisters_28
                    3056   ; a1 = reg_val ;
00001D00  23C3 0B00 3057          move.l    D3,_a1.L
00001D04  0108      
00001D06  6000 0050 3058          bra       ChangeRegisters_39
                    3059   ChangeRegisters_28:
                    3060   ; else if(c == (char)('2'))
00001D0A  0C02 0032 3061          cmp.b     #50,D2
00001D0E  660A      3062          bne.s     ChangeRegisters_30
                    3063   ; a2 = reg_val ;
00001D10  23C3 0B00 3064          move.l    D3,_a2.L
00001D14  010C      
00001D16  6000 0040 3065          bra       ChangeRegisters_39
                    3066   ChangeRegisters_30:
                    3067   ; else if(c == (char)('3'))
00001D1A  0C02 0033 3068          cmp.b     #51,D2
00001D1E  6608      3069          bne.s     ChangeRegisters_32
                    3070   ; a3 = reg_val ;
00001D20  23C3 0B00 3071          move.l    D3,_a3.L
00001D24  0110      
00001D26  6030      3072          bra.s     ChangeRegisters_39
                    3073   ChangeRegisters_32:
                    3074   ; else if(c == (char)('4'))
00001D28  0C02 0034 3075          cmp.b     #52,D2
00001D2C  6608      3076          bne.s     ChangeRegisters_34
                    3077   ; a4 = reg_val ;
00001D2E  23C3 0B00 3078          move.l    D3,_a4.L
00001D32  0114      
00001D34  6022      3079          bra.s     ChangeRegisters_39
                    3080   ChangeRegisters_34:
                    3081   ; else if(c == (char)('5'))
00001D36  0C02 0035 3082          cmp.b     #53,D2
00001D3A  6608      3083          bne.s     ChangeRegisters_36
                    3084   ; a5 = reg_val ;
00001D3C  23C3 0B00 3085          move.l    D3,_a5.L
00001D40  0118      
00001D42  6014      3086          bra.s     ChangeRegisters_39
                    3087   ChangeRegisters_36:
                    3088   ; else if(c == (char)('6'))
00001D44  0C02 0036 3089          cmp.b     #54,D2
00001D48  6608      3090          bne.s     ChangeRegisters_38
                    3091   ; a6 = reg_val ;
00001D4A  23C3 0B00 3092          move.l    D3,_a6.L
00001D4E  011C      
00001D50  6006      3093          bra.s     ChangeRegisters_39
                    3094   ChangeRegisters_38:
                    3095   ; else
                    3096   ; USP = reg_val ;
00001D52  23C3 0B00 3097          move.l    D3,_USP.L
00001D56  0128      
                    3098   ChangeRegisters_39:
00001D58  6000 0108 3099          bra       ChangeRegisters_51
                    3100   ChangeRegisters_21:
                    3101   ; }
                    3102   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001D5C  1013      3103          move.b    (A3),D0
00001D5E  0C00 0075 3104          cmp.b     #117,D0
00001D62  6600 004E 3105          bne       ChangeRegisters_40
00001D66  0C02 0073 3106          cmp.b     #115,D2
00001D6A  6600 0046 3107          bne       ChangeRegisters_40
                    3108   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001D6E  2F00      3109          move.l    D0,-(A7)
00001D70  4E95      3110          jsr       (A5)
00001D72  2200      3111          move.l    D0,D1
00001D74  201F      3112          move.l    (A7)+,D0
00001D76  2F01      3113          move.l    D1,-(A7)
00001D78  4EB9 0000 3114          jsr       _tolower
00001D7C  32E8      
00001D7E  584F      3115          addq.w    #4,A7
00001D80  0C80 0000 3116          cmp.l     #112,D0
00001D84  0070      
00001D86  6618      3117          bne.s     ChangeRegisters_42
                    3118   ; printf("\r\nUser SP = ") ;
00001D88  4879 0000 3119          pea       @m68kde~1_62.L
00001D8C  4BB6      
00001D8E  4E92      3120          jsr       (A2)
00001D90  584F      3121          addq.w    #4,A7
                    3122   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001D92  42A7      3123          clr.l     -(A7)
00001D94  4E94      3124          jsr       (A4)
00001D96  584F      3125          addq.w    #4,A7
00001D98  23C0 0B00 3126          move.l    D0,_USP.L
00001D9C  0128      
00001D9E  600E      3127          bra.s     ChangeRegisters_43
                    3128   ChangeRegisters_42:
                    3129   ; }
                    3130   ; else {
                    3131   ; printf("\r\nIllegal Register....") ;
00001DA0  4879 0000 3132          pea       @m68kde~1_63.L
00001DA4  4BC4      
00001DA6  4E92      3133          jsr       (A2)
00001DA8  584F      3134          addq.w    #4,A7
                    3135   ; return ;
00001DAA  6000 00BA 3136          bra       ChangeRegisters_6
                    3137   ChangeRegisters_43:
00001DAE  6000 00B2 3138          bra       ChangeRegisters_51
                    3139   ChangeRegisters_40:
                    3140   ; }
                    3141   ; }
                    3142   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001DB2  1013      3143          move.b    (A3),D0
00001DB4  0C00 0073 3144          cmp.b     #115,D0
00001DB8  6600 004E 3145          bne       ChangeRegisters_44
00001DBC  0C02 0073 3146          cmp.b     #115,D2
00001DC0  6600 0046 3147          bne       ChangeRegisters_44
                    3148   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001DC4  2F00      3149          move.l    D0,-(A7)
00001DC6  4E95      3150          jsr       (A5)
00001DC8  2200      3151          move.l    D0,D1
00001DCA  201F      3152          move.l    (A7)+,D0
00001DCC  2F01      3153          move.l    D1,-(A7)
00001DCE  4EB9 0000 3154          jsr       _tolower
00001DD2  32E8      
00001DD4  584F      3155          addq.w    #4,A7
00001DD6  0C80 0000 3156          cmp.l     #112,D0
00001DDA  0070      
00001DDC  6618      3157          bne.s     ChangeRegisters_46
                    3158   ; printf("\r\nSystem SP = ") ;
00001DDE  4879 0000 3159          pea       @m68kde~1_64.L
00001DE2  4BDC      
00001DE4  4E92      3160          jsr       (A2)
00001DE6  584F      3161          addq.w    #4,A7
                    3162   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001DE8  42A7      3163          clr.l     -(A7)
00001DEA  4E94      3164          jsr       (A4)
00001DEC  584F      3165          addq.w    #4,A7
00001DEE  23C0 0B00 3166          move.l    D0,_SSP.L
00001DF2  0124      
00001DF4  600E      3167          bra.s     ChangeRegisters_47
                    3168   ChangeRegisters_46:
                    3169   ; }
                    3170   ; else {
                    3171   ; printf("\r\nIllegal Register....") ;
00001DF6  4879 0000 3172          pea       @m68kde~1_63.L
00001DFA  4BC4      
00001DFC  4E92      3173          jsr       (A2)
00001DFE  584F      3174          addq.w    #4,A7
                    3175   ; return ;
00001E00  6000 0064 3176          bra       ChangeRegisters_6
                    3177   ChangeRegisters_47:
00001E04  6000 005C 3178          bra       ChangeRegisters_51
                    3179   ChangeRegisters_44:
                    3180   ; }
                    3181   ; }
                    3182   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001E08  1013      3183          move.b    (A3),D0
00001E0A  0C00 0070 3184          cmp.b     #112,D0
00001E0E  6620      3185          bne.s     ChangeRegisters_48
00001E10  0C02 0063 3186          cmp.b     #99,D2
00001E14  661A      3187          bne.s     ChangeRegisters_48
                    3188   ; printf("\r\nPC = ") ;
00001E16  4879 0000 3189          pea       @m68kde~1_65.L
00001E1A  4BEC      
00001E1C  4E92      3190          jsr       (A2)
00001E1E  584F      3191          addq.w    #4,A7
                    3192   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001E20  42A7      3193          clr.l     -(A7)
00001E22  4E94      3194          jsr       (A4)
00001E24  584F      3195          addq.w    #4,A7
00001E26  23C0 0B00 3196          move.l    D0,_PC.L
00001E2A  0120      
00001E2C  6000 0034 3197          bra       ChangeRegisters_51
                    3198   ChangeRegisters_48:
                    3199   ; }
                    3200   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001E30  1013      3201          move.b    (A3),D0
00001E32  0C00 0073 3202          cmp.b     #115,D0
00001E36  6620      3203          bne.s     ChangeRegisters_50
00001E38  0C02 0072 3204          cmp.b     #114,D2
00001E3C  661A      3205          bne.s     ChangeRegisters_50
                    3206   ; printf("\r\nSR = ") ;
00001E3E  4879 0000 3207          pea       @m68kde~1_66.L
00001E42  4BF4      
00001E44  4E92      3208          jsr       (A2)
00001E46  584F      3209          addq.w    #4,A7
                    3210   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001E48  42A7      3211          clr.l     -(A7)
00001E4A  4EB8 0C58 3212          jsr       _Get4HexDigits
00001E4E  584F      3213          addq.w    #4,A7
00001E50  33C0 0B00 3214          move.w    D0,_SR.L
00001E54  012C      
00001E56  600A      3215          bra.s     ChangeRegisters_51
                    3216   ChangeRegisters_50:
                    3217   ; }
                    3218   ; else
                    3219   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001E58  4879 0000 3220          pea       @m68kde~1_67.L
00001E5C  4BFC      
00001E5E  4E92      3221          jsr       (A2)
00001E60  584F      3222          addq.w    #4,A7
                    3223   ChangeRegisters_51:
                    3224   ; DumpRegisters() ;
00001E62  4EB8 16C0 3225          jsr       _DumpRegisters
                    3226   ChangeRegisters_6:
00001E66  4CDF 3C0C 3227          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001E6A  4E5E      3228          unlk      A6
00001E6C  4E75      3229          rts
                    3230   ; }
                    3231   ; void BreakPointDisplay(void)
                    3232   ; {
                    3233   _BreakPointDisplay:
00001E6E  48E7 3030 3234          movem.l   D2/D3/A2/A3,-(A7)
00001E72  45F9 0000 3235          lea       _printf.L,A2
00001E76  3C38      
00001E78  47F9 0B00 3236          lea       _BreakPointAddress.L,A3
00001E7C  012E      
                    3237   ; int i, BreakPointsSet = 0 ;
00001E7E  4283      3238          clr.l     D3
                    3239   ; // any break points  set
                    3240   ; for(i = 0; i < 8; i++)  {
00001E80  4282      3241          clr.l     D2
                    3242   BreakPointDisplay_1:
00001E82  0C82 0000 3243          cmp.l     #8,D2
00001E86  0008      
00001E88  6C1C      3244          bge.s     BreakPointDisplay_3
                    3245   ; if(BreakPointSetOrCleared[i] == 1)
00001E8A  2002      3246          move.l    D2,D0
00001E8C  E588      3247          lsl.l     #2,D0
00001E8E  41F9 0B00 3248          lea       _BreakPointSetOrCleared.L,A0
00001E92  015E      
00001E94  2030 0800 3249          move.l    0(A0,D0.L),D0
00001E98  0C80 0000 3250          cmp.l     #1,D0
00001E9C  0001      
00001E9E  6602      3251          bne.s     BreakPointDisplay_4
                    3252   ; BreakPointsSet = 1;
00001EA0  7601      3253          moveq     #1,D3
                    3254   BreakPointDisplay_4:
00001EA2  5282      3255          addq.l    #1,D2
00001EA4  60DC      3256          bra       BreakPointDisplay_1
                    3257   BreakPointDisplay_3:
                    3258   ; }
                    3259   ; if(BreakPointsSet == 1) {
00001EA6  0C83 0000 3260          cmp.l     #1,D3
00001EAA  0001      
00001EAC  6616      3261          bne.s     BreakPointDisplay_6
                    3262   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001EAE  4879 0000 3263          pea       @m68kde~1_68.L
00001EB2  4C38      
00001EB4  4E92      3264          jsr       (A2)
00001EB6  584F      3265          addq.w    #4,A7
                    3266   ; printf("\r\n---     ---------    -----------") ;
00001EB8  4879 0000 3267          pea       @m68kde~1_69.L
00001EBC  4C5E      
00001EBE  4E92      3268          jsr       (A2)
00001EC0  584F      3269          addq.w    #4,A7
00001EC2  600A      3270          bra.s     BreakPointDisplay_7
                    3271   BreakPointDisplay_6:
                    3272   ; }
                    3273   ; else
                    3274   ; printf("\r\nNo BreakPoints Set") ;
00001EC4  4879 0000 3275          pea       @m68kde~1_70.L
00001EC8  4C82      
00001ECA  4E92      3276          jsr       (A2)
00001ECC  584F      3277          addq.w    #4,A7
                    3278   BreakPointDisplay_7:
                    3279   ; for(i = 0; i < 8; i++)  {
00001ECE  4282      3280          clr.l     D2
                    3281   BreakPointDisplay_8:
00001ED0  0C82 0000 3282          cmp.l     #8,D2
00001ED4  0008      
00001ED6  6C00 005A 3283          bge       BreakPointDisplay_10
                    3284   ; // put opcode back, then put break point back
                    3285   ; if(BreakPointSetOrCleared[i] == 1)  {
00001EDA  2002      3286          move.l    D2,D0
00001EDC  E588      3287          lsl.l     #2,D0
00001EDE  41F9 0B00 3288          lea       _BreakPointSetOrCleared.L,A0
00001EE2  015E      
00001EE4  2030 0800 3289          move.l    0(A0,D0.L),D0
00001EE8  0C80 0000 3290          cmp.l     #1,D0
00001EEC  0001      
00001EEE  6600 003E 3291          bne       BreakPointDisplay_11
                    3292   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001EF2  2002      3293          move.l    D2,D0
00001EF4  E388      3294          lsl.l     #1,D0
00001EF6  41F9 0B00 3295          lea       _BreakPointInstruction.L,A0
00001EFA  014E      
00001EFC  2202      3296          move.l    D2,D1
00001EFE  E589      3297          lsl.l     #2,D1
00001F00  2233 1800 3298          move.l    0(A3,D1.L),D1
00001F04  2241      3299          move.l    D1,A1
00001F06  32B0 0800 3300          move.w    0(A0,D0.L),(A1)
                    3301   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001F0A  2002      3302          move.l    D2,D0
00001F0C  E588      3303          lsl.l     #2,D0
00001F0E  2033 0800 3304          move.l    0(A3,D0.L),D0
00001F12  2040      3305          move.l    D0,A0
00001F14  30BC 4E4E 3306          move.w    #20046,(A0)
                    3307   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001F18  2202      3308          move.l    D2,D1
00001F1A  E589      3309          lsl.l     #2,D1
00001F1C  2F33 1800 3310          move.l    0(A3,D1.L),-(A7)
00001F20  2F02      3311          move.l    D2,-(A7)
00001F22  4879 0000 3312          pea       @m68kde~1_71.L
00001F26  4C98      
00001F28  4E92      3313          jsr       (A2)
00001F2A  DEFC 000C 3314          add.w     #12,A7
                    3315   BreakPointDisplay_11:
00001F2E  5282      3316          addq.l    #1,D2
00001F30  609E      3317          bra       BreakPointDisplay_8
                    3318   BreakPointDisplay_10:
                    3319   ; }
                    3320   ; }
                    3321   ; printf("\r\n") ;
00001F32  4879 0000 3322          pea       @m68kde~1_1.L
00001F36  460E      
00001F38  4E92      3323          jsr       (A2)
00001F3A  584F      3324          addq.w    #4,A7
00001F3C  4CDF 0C0C 3325          movem.l   (A7)+,D2/D3/A2/A3
00001F40  4E75      3326          rts
                    3327   ; }
                    3328   ; void WatchPointDisplay(void)
                    3329   ; {
                    3330   _WatchPointDisplay:
00001F42  48E7 3020 3331          movem.l   D2/D3/A2,-(A7)
00001F46  45F9 0000 3332          lea       _printf.L,A2
00001F4A  3C38      
                    3333   ; int i ;
                    3334   ; int WatchPointsSet = 0 ;
00001F4C  4283      3335          clr.l     D3
                    3336   ; // any watchpoints set
                    3337   ; for(i = 0; i < 8; i++)  {
00001F4E  4282      3338          clr.l     D2
                    3339   WatchPointDisplay_1:
00001F50  0C82 0000 3340          cmp.l     #8,D2
00001F54  0008      
00001F56  6C1C      3341          bge.s     WatchPointDisplay_3
                    3342   ; if(WatchPointSetOrCleared[i] == 1)
00001F58  2002      3343          move.l    D2,D0
00001F5A  E588      3344          lsl.l     #2,D0
00001F5C  41F9 0B00 3345          lea       _WatchPointSetOrCleared.L,A0
00001F60  01A2      
00001F62  2030 0800 3346          move.l    0(A0,D0.L),D0
00001F66  0C80 0000 3347          cmp.l     #1,D0
00001F6A  0001      
00001F6C  6602      3348          bne.s     WatchPointDisplay_4
                    3349   ; WatchPointsSet = 1;
00001F6E  7601      3350          moveq     #1,D3
                    3351   WatchPointDisplay_4:
00001F70  5282      3352          addq.l    #1,D2
00001F72  60DC      3353          bra       WatchPointDisplay_1
                    3354   WatchPointDisplay_3:
                    3355   ; }
                    3356   ; if(WatchPointsSet == 1) {
00001F74  0C83 0000 3357          cmp.l     #1,D3
00001F78  0001      
00001F7A  6616      3358          bne.s     WatchPointDisplay_6
                    3359   ; printf("\r\nNum     Address") ;
00001F7C  4879 0000 3360          pea       @m68kde~1_72.L
00001F80  4CA8      
00001F82  4E92      3361          jsr       (A2)
00001F84  584F      3362          addq.w    #4,A7
                    3363   ; printf("\r\n---     ---------") ;
00001F86  4879 0000 3364          pea       @m68kde~1_73.L
00001F8A  4CBA      
00001F8C  4E92      3365          jsr       (A2)
00001F8E  584F      3366          addq.w    #4,A7
00001F90  600A      3367          bra.s     WatchPointDisplay_7
                    3368   WatchPointDisplay_6:
                    3369   ; }
                    3370   ; else
                    3371   ; printf("\r\nNo WatchPoints Set") ;
00001F92  4879 0000 3372          pea       @m68kde~1_74.L
00001F96  4CCE      
00001F98  4E92      3373          jsr       (A2)
00001F9A  584F      3374          addq.w    #4,A7
                    3375   WatchPointDisplay_7:
                    3376   ; for(i = 0; i < 8; i++)  {
00001F9C  4282      3377          clr.l     D2
                    3378   WatchPointDisplay_8:
00001F9E  0C82 0000 3379          cmp.l     #8,D2
00001FA2  0008      
00001FA4  6C00 0038 3380          bge       WatchPointDisplay_10
                    3381   ; if(WatchPointSetOrCleared[i] == 1)
00001FA8  2002      3382          move.l    D2,D0
00001FAA  E588      3383          lsl.l     #2,D0
00001FAC  41F9 0B00 3384          lea       _WatchPointSetOrCleared.L,A0
00001FB0  01A2      
00001FB2  2030 0800 3385          move.l    0(A0,D0.L),D0
00001FB6  0C80 0000 3386          cmp.l     #1,D0
00001FBA  0001      
00001FBC  661C      3387          bne.s     WatchPointDisplay_11
                    3388   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001FBE  2202      3389          move.l    D2,D1
00001FC0  E589      3390          lsl.l     #2,D1
00001FC2  41F9 0B00 3391          lea       _WatchPointAddress.L,A0
00001FC6  0182      
00001FC8  2F30 1800 3392          move.l    0(A0,D1.L),-(A7)
00001FCC  2F02      3393          move.l    D2,-(A7)
00001FCE  4879 0000 3394          pea       @m68kde~1_71.L
00001FD2  4C98      
00001FD4  4E92      3395          jsr       (A2)
00001FD6  DEFC 000C 3396          add.w     #12,A7
                    3397   WatchPointDisplay_11:
00001FDA  5282      3398          addq.l    #1,D2
00001FDC  60C0      3399          bra       WatchPointDisplay_8
                    3400   WatchPointDisplay_10:
                    3401   ; }
                    3402   ; printf("\r\n") ;
00001FDE  4879 0000 3403          pea       @m68kde~1_1.L
00001FE2  460E      
00001FE4  4E92      3404          jsr       (A2)
00001FE6  584F      3405          addq.w    #4,A7
00001FE8  4CDF 040C 3406          movem.l   (A7)+,D2/D3/A2
00001FEC  4E75      3407          rts
                    3408   ; }
                    3409   ; void BreakPointClear(void)
                    3410   ; {
                    3411   _BreakPointClear:
00001FEE  4E56 FFFC 3412          link      A6,#-4
00001FF2  48E7 2020 3413          movem.l   D2/A2,-(A7)
00001FF6  45F9 0000 3414          lea       _printf.L,A2
00001FFA  3C38      
                    3415   ; unsigned int i ;
                    3416   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3417   ; BreakPointDisplay() ;
00001FFC  4EB8 1E6E 3418          jsr       _BreakPointDisplay
                    3419   ; printf("\r\nEnter Break Point Number: ") ;
00002000  4879 0000 3420          pea       @m68kde~1_75.L
00002004  4CE4      
00002006  4E92      3421          jsr       (A2)
00002008  584F      3422          addq.w    #4,A7
                    3423   ; i = xtod(_getch()) ;           // get break pointer number
0000200A  2F00      3424          move.l    D0,-(A7)
0000200C  4EB8 0B68 3425          jsr       __getch
00002010  2200      3426          move.l    D0,D1
00002012  201F      3427          move.l    (A7)+,D0
00002014  2F01      3428          move.l    D1,-(A7)
00002016  4EB8 0BD2 3429          jsr       _xtod
0000201A  584F      3430          addq.w    #4,A7
0000201C  C0BC 0000 3431          and.l     #255,D0
00002020  00FF      
00002022  2400      3432          move.l    D0,D2
                    3433   ; if((i < 0) || (i > 7))   {
00002024  0C82 0000 3434          cmp.l     #0,D2
00002028  0000      
0000202A  6508      3435          blo.s     BreakPointClear_3
0000202C  0C82 0000 3436          cmp.l     #7,D2
00002030  0007      
00002032  630E      3437          bls.s     BreakPointClear_1
                    3438   BreakPointClear_3:
                    3439   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00002034  4879 0000 3440          pea       @m68kde~1_76.L
00002038  4D02      
0000203A  4E92      3441          jsr       (A2)
0000203C  584F      3442          addq.w    #4,A7
                    3443   ; return ;
0000203E  6000 0080 3444          bra       BreakPointClear_4
                    3445   BreakPointClear_1:
                    3446   ; }
                    3447   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00002042  2002      3448          move.l    D2,D0
00002044  E588      3449          lsl.l     #2,D0
00002046  41F9 0B00 3450          lea       _BreakPointSetOrCleared.L,A0
0000204A  015E      
0000204C  2030 0800 3451          move.l    0(A0,D0.L),D0
00002050  0C80 0000 3452          cmp.l     #1,D0
00002054  0001      
00002056  6600 005A 3453          bne       BreakPointClear_5
                    3454   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
0000205A  2002      3455          move.l    D2,D0
0000205C  E588      3456          lsl.l     #2,D0
0000205E  41F9 0B00 3457          lea       _BreakPointAddress.L,A0
00002062  012E      
00002064  2D70 0800 3458          move.l    0(A0,D0.L),-4(A6)
00002068  FFFC      
                    3459   ; BreakPointAddress[i] = 0 ;
0000206A  2002      3460          move.l    D2,D0
0000206C  E588      3461          lsl.l     #2,D0
0000206E  41F9 0B00 3462          lea       _BreakPointAddress.L,A0
00002072  012E      
00002074  42B0 0800 3463          clr.l     0(A0,D0.L)
                    3464   ; BreakPointSetOrCleared[i] = 0 ;
00002078  2002      3465          move.l    D2,D0
0000207A  E588      3466          lsl.l     #2,D0
0000207C  41F9 0B00 3467          lea       _BreakPointSetOrCleared.L,A0
00002080  015E      
00002082  42B0 0800 3468          clr.l     0(A0,D0.L)
                    3469   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002086  2002      3470          move.l    D2,D0
00002088  E388      3471          lsl.l     #1,D0
0000208A  41F9 0B00 3472          lea       _BreakPointInstruction.L,A0
0000208E  014E      
00002090  226E FFFC 3473          move.l    -4(A6),A1
00002094  32B0 0800 3474          move.w    0(A0,D0.L),(A1)
                    3475   ; BreakPointInstruction[i] = 0 ;
00002098  2002      3476          move.l    D2,D0
0000209A  E388      3477          lsl.l     #1,D0
0000209C  41F9 0B00 3478          lea       _BreakPointInstruction.L,A0
000020A0  014E      
000020A2  4270 0800 3479          clr.w     0(A0,D0.L)
                    3480   ; printf("\r\nBreak Point Cleared.....\r\n") ;
000020A6  4879 0000 3481          pea       @m68kde~1_77.L
000020AA  4D1E      
000020AC  4E92      3482          jsr       (A2)
000020AE  584F      3483          addq.w    #4,A7
000020B0  600A      3484          bra.s     BreakPointClear_6
                    3485   BreakPointClear_5:
                    3486   ; }
                    3487   ; else
                    3488   ; printf("\r\nBreak Point wasn't Set.....") ;
000020B2  4879 0000 3489          pea       @m68kde~1_78.L
000020B6  4D3C      
000020B8  4E92      3490          jsr       (A2)
000020BA  584F      3491          addq.w    #4,A7
                    3492   BreakPointClear_6:
                    3493   ; BreakPointDisplay() ;
000020BC  4EB8 1E6E 3494          jsr       _BreakPointDisplay
                    3495   ; return ;
                    3496   BreakPointClear_4:
000020C0  4CDF 0404 3497          movem.l   (A7)+,D2/A2
000020C4  4E5E      3498          unlk      A6
000020C6  4E75      3499          rts
                    3500   ; }
                    3501   ; void WatchPointClear(void)
                    3502   ; {
                    3503   _WatchPointClear:
000020C8  48E7 2020 3504          movem.l   D2/A2,-(A7)
000020CC  45F9 0000 3505          lea       _printf.L,A2
000020D0  3C38      
                    3506   ; unsigned int i ;
                    3507   ; WatchPointDisplay() ;
000020D2  4EB8 1F42 3508          jsr       _WatchPointDisplay
                    3509   ; printf("\r\nEnter Watch Point Number: ") ;
000020D6  4879 0000 3510          pea       @m68kde~1_79.L
000020DA  4D5A      
000020DC  4E92      3511          jsr       (A2)
000020DE  584F      3512          addq.w    #4,A7
                    3513   ; i = xtod(_getch()) ;           // get watch pointer number
000020E0  2F00      3514          move.l    D0,-(A7)
000020E2  4EB8 0B68 3515          jsr       __getch
000020E6  2200      3516          move.l    D0,D1
000020E8  201F      3517          move.l    (A7)+,D0
000020EA  2F01      3518          move.l    D1,-(A7)
000020EC  4EB8 0BD2 3519          jsr       _xtod
000020F0  584F      3520          addq.w    #4,A7
000020F2  C0BC 0000 3521          and.l     #255,D0
000020F6  00FF      
000020F8  2400      3522          move.l    D0,D2
                    3523   ; if((i < 0) || (i > 7))   {
000020FA  0C82 0000 3524          cmp.l     #0,D2
000020FE  0000      
00002100  6508      3525          blo.s     WatchPointClear_3
00002102  0C82 0000 3526          cmp.l     #7,D2
00002106  0007      
00002108  630E      3527          bls.s     WatchPointClear_1
                    3528   WatchPointClear_3:
                    3529   ; printf("\r\nIllegal Range : Use 0 - 7") ;
0000210A  4879 0000 3530          pea       @m68kde~1_76.L
0000210E  4D02      
00002110  4E92      3531          jsr       (A2)
00002112  584F      3532          addq.w    #4,A7
                    3533   ; return ;
00002114  6000 004E 3534          bra       WatchPointClear_4
                    3535   WatchPointClear_1:
                    3536   ; }
                    3537   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00002118  2002      3538          move.l    D2,D0
0000211A  E588      3539          lsl.l     #2,D0
0000211C  41F9 0B00 3540          lea       _WatchPointSetOrCleared.L,A0
00002120  01A2      
00002122  2030 0800 3541          move.l    0(A0,D0.L),D0
00002126  0C80 0000 3542          cmp.l     #1,D0
0000212A  0001      
0000212C  6628      3543          bne.s     WatchPointClear_5
                    3544   ; WatchPointAddress[i] = 0 ;
0000212E  2002      3545          move.l    D2,D0
00002130  E588      3546          lsl.l     #2,D0
00002132  41F9 0B00 3547          lea       _WatchPointAddress.L,A0
00002136  0182      
00002138  42B0 0800 3548          clr.l     0(A0,D0.L)
                    3549   ; WatchPointSetOrCleared[i] = 0 ;
0000213C  2002      3550          move.l    D2,D0
0000213E  E588      3551          lsl.l     #2,D0
00002140  41F9 0B00 3552          lea       _WatchPointSetOrCleared.L,A0
00002144  01A2      
00002146  42B0 0800 3553          clr.l     0(A0,D0.L)
                    3554   ; printf("\r\nWatch Point Cleared.....\r\n") ;
0000214A  4879 0000 3555          pea       @m68kde~1_80.L
0000214E  4D78      
00002150  4E92      3556          jsr       (A2)
00002152  584F      3557          addq.w    #4,A7
00002154  600A      3558          bra.s     WatchPointClear_6
                    3559   WatchPointClear_5:
                    3560   ; }
                    3561   ; else
                    3562   ; printf("\r\nWatch Point Was not Set.....") ;
00002156  4879 0000 3563          pea       @m68kde~1_81.L
0000215A  4D96      
0000215C  4E92      3564          jsr       (A2)
0000215E  584F      3565          addq.w    #4,A7
                    3566   WatchPointClear_6:
                    3567   ; WatchPointDisplay() ;
00002160  4EB8 1F42 3568          jsr       _WatchPointDisplay
                    3569   ; return ;
                    3570   WatchPointClear_4:
00002164  4CDF 0404 3571          movem.l   (A7)+,D2/A2
00002168  4E75      3572          rts
                    3573   ; }
                    3574   ; void DisableBreakPoints(void)
                    3575   ; {
                    3576   _DisableBreakPoints:
0000216A  4E56 FFFC 3577          link      A6,#-4
0000216E  2F02      3578          move.l    D2,-(A7)
                    3579   ; int i ;
                    3580   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3581   ; for(i = 0; i < 8; i++)  {
00002170  4282      3582          clr.l     D2
                    3583   DisableBreakPoints_1:
00002172  0C82 0000 3584          cmp.l     #8,D2
00002176  0008      
00002178  6C00 003E 3585          bge       DisableBreakPoints_3
                    3586   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
0000217C  2002      3587          move.l    D2,D0
0000217E  E588      3588          lsl.l     #2,D0
00002180  41F9 0B00 3589          lea       _BreakPointSetOrCleared.L,A0
00002184  015E      
00002186  2030 0800 3590          move.l    0(A0,D0.L),D0
0000218A  0C80 0000 3591          cmp.l     #1,D0
0000218E  0001      
00002190  6622      3592          bne.s     DisableBreakPoints_4
                    3593   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002192  2002      3594          move.l    D2,D0
00002194  E588      3595          lsl.l     #2,D0
00002196  41F9 0B00 3596          lea       _BreakPointAddress.L,A0
0000219A  012E      
0000219C  2D70 0800 3597          move.l    0(A0,D0.L),-4(A6)
000021A0  FFFC      
                    3598   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
000021A2  2002      3599          move.l    D2,D0
000021A4  E388      3600          lsl.l     #1,D0
000021A6  41F9 0B00 3601          lea       _BreakPointInstruction.L,A0
000021AA  014E      
000021AC  226E FFFC 3602          move.l    -4(A6),A1
000021B0  32B0 0800 3603          move.w    0(A0,D0.L),(A1)
                    3604   DisableBreakPoints_4:
000021B4  5282      3605          addq.l    #1,D2
000021B6  60BA      3606          bra       DisableBreakPoints_1
                    3607   DisableBreakPoints_3:
000021B8  241F      3608          move.l    (A7)+,D2
000021BA  4E5E      3609          unlk      A6
000021BC  4E75      3610          rts
                    3611   ; }
                    3612   ; }
                    3613   ; }
                    3614   ; void EnableBreakPoints(void)
                    3615   ; {
                    3616   _EnableBreakPoints:
000021BE  4E56 FFFC 3617          link      A6,#-4
000021C2  2F02      3618          move.l    D2,-(A7)
                    3619   ; int i ;
                    3620   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3621   ; for(i = 0; i < 8; i++)  {
000021C4  4282      3622          clr.l     D2
                    3623   EnableBreakPoints_1:
000021C6  0C82 0000 3624          cmp.l     #8,D2
000021CA  0008      
000021CC  6C32      3625          bge.s     EnableBreakPoints_3
                    3626   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
000021CE  2002      3627          move.l    D2,D0
000021D0  E588      3628          lsl.l     #2,D0
000021D2  41F9 0B00 3629          lea       _BreakPointSetOrCleared.L,A0
000021D6  015E      
000021D8  2030 0800 3630          move.l    0(A0,D0.L),D0
000021DC  0C80 0000 3631          cmp.l     #1,D0
000021E0  0001      
000021E2  6618      3632          bne.s     EnableBreakPoints_4
                    3633   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000021E4  2002      3634          move.l    D2,D0
000021E6  E588      3635          lsl.l     #2,D0
000021E8  41F9 0B00 3636          lea       _BreakPointAddress.L,A0
000021EC  012E      
000021EE  2D70 0800 3637          move.l    0(A0,D0.L),-4(A6)
000021F2  FFFC      
                    3638   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
000021F4  206E FFFC 3639          move.l    -4(A6),A0
000021F8  30BC 4E4E 3640          move.w    #20046,(A0)
                    3641   EnableBreakPoints_4:
000021FC  5282      3642          addq.l    #1,D2
000021FE  60C6      3643          bra       EnableBreakPoints_1
                    3644   EnableBreakPoints_3:
00002200  241F      3645          move.l    (A7)+,D2
00002202  4E5E      3646          unlk      A6
00002204  4E75      3647          rts
                    3648   ; }
                    3649   ; }
                    3650   ; }
                    3651   ; void KillAllBreakPoints(void)
                    3652   ; {
                    3653   _KillAllBreakPoints:
00002206  4E56 FFFC 3654          link      A6,#-4
0000220A  2F02      3655          move.l    D2,-(A7)
                    3656   ; int i ;
                    3657   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3658   ; for(i = 0; i < 8; i++)  {
0000220C  4282      3659          clr.l     D2
                    3660   KillAllBreakPoints_1:
0000220E  0C82 0000 3661          cmp.l     #8,D2
00002212  0008      
00002214  6C00 0052 3662          bge       KillAllBreakPoints_3
                    3663   ; // clear BP
                    3664   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002218  2002      3665          move.l    D2,D0
0000221A  E588      3666          lsl.l     #2,D0
0000221C  41F9 0B00 3667          lea       _BreakPointAddress.L,A0
00002220  012E      
00002222  2D70 0800 3668          move.l    0(A0,D0.L),-4(A6)
00002226  FFFC      
                    3669   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002228  2002      3670          move.l    D2,D0
0000222A  E388      3671          lsl.l     #1,D0
0000222C  41F9 0B00 3672          lea       _BreakPointInstruction.L,A0
00002230  014E      
00002232  226E FFFC 3673          move.l    -4(A6),A1
00002236  32B0 0800 3674          move.w    0(A0,D0.L),(A1)
                    3675   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
0000223A  2002      3676          move.l    D2,D0
0000223C  E588      3677          lsl.l     #2,D0
0000223E  41F9 0B00 3678          lea       _BreakPointAddress.L,A0
00002242  012E      
00002244  42B0 0800 3679          clr.l     0(A0,D0.L)
                    3680   ; BreakPointInstruction[i] = 0 ;
00002248  2002      3681          move.l    D2,D0
0000224A  E388      3682          lsl.l     #1,D0
0000224C  41F9 0B00 3683          lea       _BreakPointInstruction.L,A0
00002250  014E      
00002252  4270 0800 3684          clr.w     0(A0,D0.L)
                    3685   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002256  2002      3686          move.l    D2,D0
00002258  E588      3687          lsl.l     #2,D0
0000225A  41F9 0B00 3688          lea       _BreakPointSetOrCleared.L,A0
0000225E  015E      
00002260  42B0 0800 3689          clr.l     0(A0,D0.L)
00002264  5282      3690          addq.l    #1,D2
00002266  60A6      3691          bra       KillAllBreakPoints_1
                    3692   KillAllBreakPoints_3:
00002268  241F      3693          move.l    (A7)+,D2
0000226A  4E5E      3694          unlk      A6
0000226C  4E75      3695          rts
                    3696   ; }
                    3697   ; //BreakPointDisplay() ;       // display the break points
                    3698   ; }
                    3699   ; void KillAllWatchPoints(void)
                    3700   ; {
                    3701   _KillAllWatchPoints:
0000226E  2F02      3702          move.l    D2,-(A7)
                    3703   ; int i ;
                    3704   ; for(i = 0; i < 8; i++)  {
00002270  4282      3705          clr.l     D2
                    3706   KillAllWatchPoints_1:
00002272  0C82 0000 3707          cmp.l     #8,D2
00002276  0008      
00002278  6C20      3708          bge.s     KillAllWatchPoints_3
                    3709   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
0000227A  2002      3710          move.l    D2,D0
0000227C  E588      3711          lsl.l     #2,D0
0000227E  41F9 0B00 3712          lea       _WatchPointAddress.L,A0
00002282  0182      
00002284  42B0 0800 3713          clr.l     0(A0,D0.L)
                    3714   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002288  2002      3715          move.l    D2,D0
0000228A  E588      3716          lsl.l     #2,D0
0000228C  41F9 0B00 3717          lea       _WatchPointSetOrCleared.L,A0
00002290  01A2      
00002292  42B0 0800 3718          clr.l     0(A0,D0.L)
00002296  5282      3719          addq.l    #1,D2
00002298  60D8      3720          bra       KillAllWatchPoints_1
                    3721   KillAllWatchPoints_3:
0000229A  241F      3722          move.l    (A7)+,D2
0000229C  4E75      3723          rts
                    3724   ; }
                    3725   ; //WatchPointDisplay() ;       // display the break points
                    3726   ; }
                    3727   ; void SetBreakPoint(void)
                    3728   ; {
                    3729   _SetBreakPoint:
0000229E  4E56 FFFC 3730          link      A6,#-4
000022A2  48E7 3830 3731          movem.l   D2/D3/D4/A2/A3,-(A7)
000022A6  45F9 0000 3732          lea       _printf.L,A2
000022AA  3C38      
000022AC  47F9 0B00 3733          lea       _BreakPointSetOrCleared.L,A3
000022B0  015E      
                    3734   ; int i ;
                    3735   ; int BPNumber;
                    3736   ; int BPAddress;
                    3737   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3738   ; // see if any free break points
                    3739   ; for(i = 0; i < 8; i ++) {
000022B2  4282      3740          clr.l     D2
                    3741   SetBreakPoint_1:
000022B4  0C82 0000 3742          cmp.l     #8,D2
000022B8  0008      
000022BA  6C10      3743          bge.s     SetBreakPoint_3
                    3744   ; if( BreakPointSetOrCleared[i] == 0)
000022BC  2002      3745          move.l    D2,D0
000022BE  E588      3746          lsl.l     #2,D0
000022C0  2033 0800 3747          move.l    0(A3,D0.L),D0
000022C4  6602      3748          bne.s     SetBreakPoint_4
                    3749   ; break ;         // if spare BP found allow user to set it
000022C6  6004      3750          bra.s     SetBreakPoint_3
                    3751   SetBreakPoint_4:
000022C8  5282      3752          addq.l    #1,D2
000022CA  60E8      3753          bra       SetBreakPoint_1
                    3754   SetBreakPoint_3:
                    3755   ; }
                    3756   ; if(i == 8) {
000022CC  0C82 0000 3757          cmp.l     #8,D2
000022D0  0008      
000022D2  660E      3758          bne.s     SetBreakPoint_6
                    3759   ; printf("\r\nNo FREE Break Points.....") ;
000022D4  4879 0000 3760          pea       @m68kde~1_82.L
000022D8  4DB6      
000022DA  4E92      3761          jsr       (A2)
000022DC  584F      3762          addq.w    #4,A7
                    3763   ; return ;
000022DE  6000 00D6 3764          bra       SetBreakPoint_15
                    3765   SetBreakPoint_6:
                    3766   ; }
                    3767   ; printf("\r\nBreak Point Address: ") ;
000022E2  4879 0000 3768          pea       @m68kde~1_83.L
000022E6  4DD2      
000022E8  4E92      3769          jsr       (A2)
000022EA  584F      3770          addq.w    #4,A7
                    3771   ; BPAddress = Get8HexDigits(0) ;
000022EC  42A7      3772          clr.l     -(A7)
000022EE  4EB8 0CA4 3773          jsr       _Get8HexDigits
000022F2  584F      3774          addq.w    #4,A7
000022F4  2600      3775          move.l    D0,D3
                    3776   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
000022F6  2803      3777          move.l    D3,D4
                    3778   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
000022F8  2003      3779          move.l    D3,D0
000022FA  C0BC 0000 3780          and.l     #1,D0
000022FE  0001      
00002300  0C80 0000 3781          cmp.l     #1,D0
00002304  0001      
00002306  660E      3782          bne.s     SetBreakPoint_9
                    3783   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002308  4879 0000 3784          pea       @m68kde~1_84.L
0000230C  4DEA      
0000230E  4E92      3785          jsr       (A2)
00002310  584F      3786          addq.w    #4,A7
                    3787   ; return ;
00002312  6000 00A2 3788          bra       SetBreakPoint_15
                    3789   SetBreakPoint_9:
                    3790   ; }
                    3791   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002316  0C83 0000 3792          cmp.l     #32768,D3
0000231A  8000      
0000231C  640E      3793          bhs.s     SetBreakPoint_11
                    3794   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000231E  4879 0000 3795          pea       @m68kde~1_85.L
00002322  4E20      
00002324  4E92      3796          jsr       (A2)
00002326  584F      3797          addq.w    #4,A7
                    3798   ; return ;
00002328  6000 008C 3799          bra       SetBreakPoint_15
                    3800   SetBreakPoint_11:
                    3801   ; }
                    3802   ; // search for first free bp or existing same BP
                    3803   ; for(i = 0; i < 8; i++)  {
0000232C  4282      3804          clr.l     D2
                    3805   SetBreakPoint_13:
0000232E  0C82 0000 3806          cmp.l     #8,D2
00002332  0008      
00002334  6C00 0080 3807          bge       SetBreakPoint_15
                    3808   ; if(BreakPointAddress[i] == BPAddress)   {
00002338  2002      3809          move.l    D2,D0
0000233A  E588      3810          lsl.l     #2,D0
0000233C  41F9 0B00 3811          lea       _BreakPointAddress.L,A0
00002340  012E      
00002342  B6B0 0800 3812          cmp.l     0(A0,D0.L),D3
00002346  6610      3813          bne.s     SetBreakPoint_16
                    3814   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002348  2F03      3815          move.l    D3,-(A7)
0000234A  4879 0000 3816          pea       @m68kde~1_86.L
0000234E  4E68      
00002350  4E92      3817          jsr       (A2)
00002352  504F      3818          addq.w    #8,A7
                    3819   ; return ;
00002354  6000 0060 3820          bra       SetBreakPoint_15
                    3821   SetBreakPoint_16:
                    3822   ; }
                    3823   ; if(BreakPointSetOrCleared[i] == 0) {
00002358  2002      3824          move.l    D2,D0
0000235A  E588      3825          lsl.l     #2,D0
0000235C  2033 0800 3826          move.l    0(A3,D0.L),D0
00002360  6600 004E 3827          bne       SetBreakPoint_18
                    3828   ; // set BP here
                    3829   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002364  2002      3830          move.l    D2,D0
00002366  E588      3831          lsl.l     #2,D0
00002368  27BC 0000 3832          move.l    #1,0(A3,D0.L)
0000236C  0001 0800 
                    3833   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002370  2044      3834          move.l    D4,A0
00002372  2002      3835          move.l    D2,D0
00002374  E388      3836          lsl.l     #1,D0
00002376  43F9 0B00 3837          lea       _BreakPointInstruction.L,A1
0000237A  014E      
0000237C  3390 0800 3838          move.w    (A0),0(A1,D0.L)
                    3839   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00002380  2F04      3840          move.l    D4,-(A7)
00002382  4879 0000 3841          pea       @m68kde~1_87.L
00002386  4EA0      
00002388  4E92      3842          jsr       (A2)
0000238A  504F      3843          addq.w    #8,A7
                    3844   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000238C  2044      3845          move.l    D4,A0
0000238E  30BC 4E4E 3846          move.w    #20046,(A0)
                    3847   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002392  2002      3848          move.l    D2,D0
00002394  E588      3849          lsl.l     #2,D0
00002396  41F9 0B00 3850          lea       _BreakPointAddress.L,A0
0000239A  012E      
0000239C  2183 0800 3851          move.l    D3,0(A0,D0.L)
                    3852   ; printf("\r\n") ;
000023A0  4879 0000 3853          pea       @m68kde~1_1.L
000023A4  460E      
000023A6  4E92      3854          jsr       (A2)
000023A8  584F      3855          addq.w    #4,A7
                    3856   ; BreakPointDisplay() ;       // display the break points
000023AA  4EB8 1E6E 3857          jsr       _BreakPointDisplay
                    3858   ; return ;
000023AE  6006      3859          bra.s     SetBreakPoint_15
                    3860   SetBreakPoint_18:
000023B0  5282      3861          addq.l    #1,D2
000023B2  6000 FF7A 3862          bra       SetBreakPoint_13
                    3863   SetBreakPoint_15:
000023B6  4CDF 0C1C 3864          movem.l   (A7)+,D2/D3/D4/A2/A3
000023BA  4E5E      3865          unlk      A6
000023BC  4E75      3866          rts
                    3867   ; }
                    3868   ; }
                    3869   ; }
                    3870   ; void SetWatchPoint(void)
                    3871   ; {
                    3872   _SetWatchPoint:
000023BE  4E56 FFF8 3873          link      A6,#-8
000023C2  48E7 3030 3874          movem.l   D2/D3/A2/A3,-(A7)
000023C6  45F9 0000 3875          lea       _printf.L,A2
000023CA  3C38      
000023CC  47F9 0B00 3876          lea       _WatchPointSetOrCleared.L,A3
000023D0  01A2      
                    3877   ; int i ;
                    3878   ; int WPNumber;
                    3879   ; int WPAddress;
                    3880   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3881   ; // see if any free break points
                    3882   ; for(i = 0; i < 8; i ++) {
000023D2  4282      3883          clr.l     D2
                    3884   SetWatchPoint_1:
000023D4  0C82 0000 3885          cmp.l     #8,D2
000023D8  0008      
000023DA  6C10      3886          bge.s     SetWatchPoint_3
                    3887   ; if( WatchPointSetOrCleared[i] == 0)
000023DC  2002      3888          move.l    D2,D0
000023DE  E588      3889          lsl.l     #2,D0
000023E0  2033 0800 3890          move.l    0(A3,D0.L),D0
000023E4  6602      3891          bne.s     SetWatchPoint_4
                    3892   ; break ;         // if spare WP found allow user to set it
000023E6  6004      3893          bra.s     SetWatchPoint_3
                    3894   SetWatchPoint_4:
000023E8  5282      3895          addq.l    #1,D2
000023EA  60E8      3896          bra       SetWatchPoint_1
                    3897   SetWatchPoint_3:
                    3898   ; }
                    3899   ; if(i == 8) {
000023EC  0C82 0000 3900          cmp.l     #8,D2
000023F0  0008      
000023F2  660E      3901          bne.s     SetWatchPoint_6
                    3902   ; printf("\r\nNo FREE Watch Points.....") ;
000023F4  4879 0000 3903          pea       @m68kde~1_88.L
000023F8  4EC6      
000023FA  4E92      3904          jsr       (A2)
000023FC  584F      3905          addq.w    #4,A7
                    3906   ; return ;
000023FE  6000 008C 3907          bra       SetWatchPoint_11
                    3908   SetWatchPoint_6:
                    3909   ; }
                    3910   ; printf("\r\nWatch Point Address: ") ;
00002402  4879 0000 3911          pea       @m68kde~1_89.L
00002406  4EE2      
00002408  4E92      3912          jsr       (A2)
0000240A  584F      3913          addq.w    #4,A7
                    3914   ; WPAddress = Get8HexDigits(0) ;
0000240C  42A7      3915          clr.l     -(A7)
0000240E  4EB8 0CA4 3916          jsr       _Get8HexDigits
00002412  584F      3917          addq.w    #4,A7
00002414  2600      3918          move.l    D0,D3
                    3919   ; // search for first free wp or existing same wp
                    3920   ; for(i = 0; i < 8; i++)  {
00002416  4282      3921          clr.l     D2
                    3922   SetWatchPoint_9:
00002418  0C82 0000 3923          cmp.l     #8,D2
0000241C  0008      
0000241E  6C00 006C 3924          bge       SetWatchPoint_11
                    3925   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002422  2002      3926          move.l    D2,D0
00002424  E588      3927          lsl.l     #2,D0
00002426  41F9 0B00 3928          lea       _WatchPointAddress.L,A0
0000242A  0182      
0000242C  B6B0 0800 3929          cmp.l     0(A0,D0.L),D3
00002430  6614      3930          bne.s     SetWatchPoint_12
00002432  4A83      3931          tst.l     D3
00002434  6710      3932          beq.s     SetWatchPoint_12
                    3933   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002436  2F03      3934          move.l    D3,-(A7)
00002438  4879 0000 3935          pea       @m68kde~1_90.L
0000243C  4EFA      
0000243E  4E92      3936          jsr       (A2)
00002440  504F      3937          addq.w    #8,A7
                    3938   ; return ;
00002442  6000 0048 3939          bra       SetWatchPoint_11
                    3940   SetWatchPoint_12:
                    3941   ; }
                    3942   ; if(WatchPointSetOrCleared[i] == 0) {
00002446  2002      3943          move.l    D2,D0
00002448  E588      3944          lsl.l     #2,D0
0000244A  2033 0800 3945          move.l    0(A3,D0.L),D0
0000244E  6600 0038 3946          bne       SetWatchPoint_14
                    3947   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002452  2002      3948          move.l    D2,D0
00002454  E588      3949          lsl.l     #2,D0
00002456  27BC 0000 3950          move.l    #1,0(A3,D0.L)
0000245A  0001 0800 
                    3951   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000245E  2F03      3952          move.l    D3,-(A7)
00002460  4879 0000 3953          pea       @m68kde~1_91.L
00002464  4F30      
00002466  4E92      3954          jsr       (A2)
00002468  504F      3955          addq.w    #8,A7
                    3956   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
0000246A  2002      3957          move.l    D2,D0
0000246C  E588      3958          lsl.l     #2,D0
0000246E  41F9 0B00 3959          lea       _WatchPointAddress.L,A0
00002472  0182      
00002474  2183 0800 3960          move.l    D3,0(A0,D0.L)
                    3961   ; printf("\r\n") ;
00002478  4879 0000 3962          pea       @m68kde~1_1.L
0000247C  460E      
0000247E  4E92      3963          jsr       (A2)
00002480  584F      3964          addq.w    #4,A7
                    3965   ; WatchPointDisplay() ;       // display the break points
00002482  4EB8 1F42 3966          jsr       _WatchPointDisplay
                    3967   ; return ;
00002486  6004      3968          bra.s     SetWatchPoint_11
                    3969   SetWatchPoint_14:
00002488  5282      3970          addq.l    #1,D2
0000248A  608C      3971          bra       SetWatchPoint_9
                    3972   SetWatchPoint_11:
0000248C  4CDF 0C0C 3973          movem.l   (A7)+,D2/D3/A2/A3
00002490  4E5E      3974          unlk      A6
00002492  4E75      3975          rts
                    3976   ; }
                    3977   ; }
                    3978   ; }
                    3979   ; void HandleBreakPoint(void)
                    3980   ; {
                    3981   _HandleBreakPoint:
00002494  4E56 FFFC 3982          link      A6,#-4
00002498  48E7 0038 3983          movem.l   A2/A3/A4,-(A7)
0000249C  45F9 0B00 3984          lea       _i.L,A2
000024A0  00C4      
000024A2  47F9 0000 3985          lea       _printf.L,A3
000024A6  3C38      
000024A8  49F9 0B00 3986          lea       _PC.L,A4
000024AC  0120      
                    3987   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3988   ; // now we have to put the break point back to run the instruction
                    3989   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3990   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000024AE  5594      3991          subq.l    #2,(A4)
                    3992   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000024B0  4879 0000 3993          pea       @m68kde~1_92.L
000024B4  4F56      
000024B6  4E93      3994          jsr       (A3)
000024B8  584F      3995          addq.w    #4,A7
                    3996   ; printf("\r\nSingle Step : [ON]") ;
000024BA  4879 0000 3997          pea       @m68kde~1_93.L
000024BE  4F6A      
000024C0  4E93      3998          jsr       (A3)
000024C2  584F      3999          addq.w    #4,A7
                    4000   ; printf("\r\nBreakPoints : [Enabled]") ;
000024C4  4879 0000 4001          pea       @m68kde~1_94.L
000024C8  4F80      
000024CA  4E93      4002          jsr       (A3)
000024CC  584F      4003          addq.w    #4,A7
                    4004   ; // now clear the break point (put original instruction back)
                    4005   ; ProgramBreakPointAddress = PC ;
000024CE  2D54 FFFC 4006          move.l    (A4),-4(A6)
                    4007   ; for(i = 0; i < 8; i ++) {
000024D2  4292      4008          clr.l     (A2)
                    4009   HandleBreakPoint_1:
000024D4  2012      4010          move.l    (A2),D0
000024D6  0C80 0000 4011          cmp.l     #8,D0
000024DA  0008      
000024DC  6400 0056 4012          bhs       HandleBreakPoint_3
                    4013   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000024E0  2012      4014          move.l    (A2),D0
000024E2  E588      4015          lsl.l     #2,D0
000024E4  41F9 0B00 4016          lea       _BreakPointAddress.L,A0
000024E8  012E      
000024EA  2230 0800 4017          move.l    0(A0,D0.L),D1
000024EE  B294      4018          cmp.l     (A4),D1
000024F0  6600 003E 4019          bne       HandleBreakPoint_4
                    4020   ; BreakPointAddress[i] = 0 ;
000024F4  2012      4021          move.l    (A2),D0
000024F6  E588      4022          lsl.l     #2,D0
000024F8  41F9 0B00 4023          lea       _BreakPointAddress.L,A0
000024FC  012E      
000024FE  42B0 0800 4024          clr.l     0(A0,D0.L)
                    4025   ; BreakPointSetOrCleared[i] = 0 ;
00002502  2012      4026          move.l    (A2),D0
00002504  E588      4027          lsl.l     #2,D0
00002506  41F9 0B00 4028          lea       _BreakPointSetOrCleared.L,A0
0000250A  015E      
0000250C  42B0 0800 4029          clr.l     0(A0,D0.L)
                    4030   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002510  2012      4031          move.l    (A2),D0
00002512  E388      4032          lsl.l     #1,D0
00002514  41F9 0B00 4033          lea       _BreakPointInstruction.L,A0
00002518  014E      
0000251A  226E FFFC 4034          move.l    -4(A6),A1
0000251E  32B0 0800 4035          move.w    0(A0,D0.L),(A1)
                    4036   ; BreakPointInstruction[i] = 0 ;
00002522  2012      4037          move.l    (A2),D0
00002524  E388      4038          lsl.l     #1,D0
00002526  41F9 0B00 4039          lea       _BreakPointInstruction.L,A0
0000252A  014E      
0000252C  4270 0800 4040          clr.w     0(A0,D0.L)
                    4041   HandleBreakPoint_4:
00002530  5292      4042          addq.l    #1,(A2)
00002532  60A0      4043          bra       HandleBreakPoint_1
                    4044   HandleBreakPoint_3:
                    4045   ; }
                    4046   ; }
                    4047   ; DumpRegisters() ;
00002534  4EB8 16C0 4048          jsr       _DumpRegisters
                    4049   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002538  4879 0000 4050          pea       @m68kde~1_56.L
0000253C  4AFC      
0000253E  4E93      4051          jsr       (A3)
00002540  584F      4052          addq.w    #4,A7
                    4053   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002542  4879 0000 4054          pea       @m68kde~1_95.L
00002546  4F9A      
00002548  4E93      4055          jsr       (A3)
0000254A  584F      4056          addq.w    #4,A7
                    4057   ; menu() ;
0000254C  4EB9 0000 4058          jsr       _menu
00002550  2758      
00002552  4CDF 1C00 4059          movem.l   (A7)+,A2/A3/A4
00002556  4E5E      4060          unlk      A6
00002558  4E75      4061          rts
                    4062   ; }
                    4063   ; void UnknownCommand()
                    4064   ; {
                    4065   _UnknownCommand:
                    4066   ; printf("\r\nUnknown Command.....\r\n") ;
0000255A  4879 0000 4067          pea       @m68kde~1_96.L
0000255E  4FC2      
00002560  4EB9 0000 4068          jsr       _printf
00002564  3C38      
00002566  584F      4069          addq.w    #4,A7
                    4070   ; Help() ;
00002568  4EB9 0000 4071          jsr       _Help
0000256C  267E      
0000256E  4E75      4072          rts
                    4073   ; }
                    4074   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    4075   ; void CallDebugMonitor(void)
                    4076   ; {
                    4077   _CallDebugMonitor:
                    4078   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002570  4879 0000 4079          pea       @m68kde~1_97.L
00002574  4FDC      
00002576  4EB9 0000 4080          jsr       _printf
0000257A  3C38      
0000257C  584F      4081          addq.w    #4,A7
                    4082   ; menu();
0000257E  4EB9 0000 4083          jsr       _menu
00002582  2758      
00002584  4E75      4084          rts
                    4085   ; }
                    4086   ; void Breakpoint(void)
                    4087   ; {
                    4088   _Breakpoint:
00002586  2F02      4089          move.l    D2,-(A7)
                    4090   ; char c;
                    4091   ; c = toupper(_getch());
00002588  2F00      4092          move.l    D0,-(A7)
0000258A  4EB8 0B68 4093          jsr       __getch
0000258E  2200      4094          move.l    D0,D1
00002590  201F      4095          move.l    (A7)+,D0
00002592  2F01      4096          move.l    D1,-(A7)
00002594  4EB9 0000 4097          jsr       _toupper
00002598  3376      
0000259A  584F      4098          addq.w    #4,A7
0000259C  1400      4099          move.b    D0,D2
                    4100   ; if( c == (char)('D'))                                      // BreakPoint Display
0000259E  0C02 0044 4101          cmp.b     #68,D2
000025A2  6608      4102          bne.s     Breakpoint_1
                    4103   ; BreakPointDisplay() ;
000025A4  4EB8 1E6E 4104          jsr       _BreakPointDisplay
000025A8  6000 0054 4105          bra       Breakpoint_10
                    4106   Breakpoint_1:
                    4107   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000025AC  0C02 004B 4108          cmp.b     #75,D2
000025B0  6630      4109          bne.s     Breakpoint_3
                    4110   ; printf("\r\nKill All Break Points...(y/n)?") ;
000025B2  4879 0000 4111          pea       @m68kde~1_98.L
000025B6  4FFC      
000025B8  4EB9 0000 4112          jsr       _printf
000025BC  3C38      
000025BE  584F      4113          addq.w    #4,A7
                    4114   ; c = toupper(_getch());
000025C0  2F00      4115          move.l    D0,-(A7)
000025C2  4EB8 0B68 4116          jsr       __getch
000025C6  2200      4117          move.l    D0,D1
000025C8  201F      4118          move.l    (A7)+,D0
000025CA  2F01      4119          move.l    D1,-(A7)
000025CC  4EB9 0000 4120          jsr       _toupper
000025D0  3376      
000025D2  584F      4121          addq.w    #4,A7
000025D4  1400      4122          move.b    D0,D2
                    4123   ; if(c == (char)('Y'))
000025D6  0C02 0059 4124          cmp.b     #89,D2
000025DA  6604      4125          bne.s     Breakpoint_5
                    4126   ; KillAllBreakPoints() ;
000025DC  4EB8 2206 4127          jsr       _KillAllBreakPoints
                    4128   Breakpoint_5:
000025E0  601C      4129          bra.s     Breakpoint_10
                    4130   Breakpoint_3:
                    4131   ; }
                    4132   ; else if(c == (char)('S')) {
000025E2  0C02 0053 4133          cmp.b     #83,D2
000025E6  6606      4134          bne.s     Breakpoint_7
                    4135   ; SetBreakPoint() ;
000025E8  4EB8 229E 4136          jsr       _SetBreakPoint
000025EC  6010      4137          bra.s     Breakpoint_10
                    4138   Breakpoint_7:
                    4139   ; }
                    4140   ; else if(c == (char)('C')) {
000025EE  0C02 0043 4141          cmp.b     #67,D2
000025F2  6606      4142          bne.s     Breakpoint_9
                    4143   ; BreakPointClear() ;
000025F4  4EB8 1FEE 4144          jsr       _BreakPointClear
000025F8  6004      4145          bra.s     Breakpoint_10
                    4146   Breakpoint_9:
                    4147   ; }
                    4148   ; else
                    4149   ; UnknownCommand() ;
000025FA  4EB8 255A 4150          jsr       _UnknownCommand
                    4151   Breakpoint_10:
000025FE  241F      4152          move.l    (A7)+,D2
00002600  4E75      4153          rts
                    4154   ; }
                    4155   ; void Watchpoint(void)
                    4156   ; {
                    4157   _Watchpoint:
00002602  2F02      4158          move.l    D2,-(A7)
                    4159   ; char c;
                    4160   ; c = toupper(_getch());
00002604  2F00      4161          move.l    D0,-(A7)
00002606  4EB8 0B68 4162          jsr       __getch
0000260A  2200      4163          move.l    D0,D1
0000260C  201F      4164          move.l    (A7)+,D0
0000260E  2F01      4165          move.l    D1,-(A7)
00002610  4EB9 0000 4166          jsr       _toupper
00002614  3376      
00002616  584F      4167          addq.w    #4,A7
00002618  1400      4168          move.b    D0,D2
                    4169   ; if( c == (char)('D'))                                      // WatchPoint Display
0000261A  0C02 0044 4170          cmp.b     #68,D2
0000261E  6608      4171          bne.s     Watchpoint_1
                    4172   ; WatchPointDisplay() ;
00002620  4EB8 1F42 4173          jsr       _WatchPointDisplay
00002624  6000 0054 4174          bra       Watchpoint_10
                    4175   Watchpoint_1:
                    4176   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002628  0C02 004B 4177          cmp.b     #75,D2
0000262C  6630      4178          bne.s     Watchpoint_3
                    4179   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000262E  4879 0000 4180          pea       @m68kde~1_99.L
00002632  501E      
00002634  4EB9 0000 4181          jsr       _printf
00002638  3C38      
0000263A  584F      4182          addq.w    #4,A7
                    4183   ; c = toupper(_getch());
0000263C  2F00      4184          move.l    D0,-(A7)
0000263E  4EB8 0B68 4185          jsr       __getch
00002642  2200      4186          move.l    D0,D1
00002644  201F      4187          move.l    (A7)+,D0
00002646  2F01      4188          move.l    D1,-(A7)
00002648  4EB9 0000 4189          jsr       _toupper
0000264C  3376      
0000264E  584F      4190          addq.w    #4,A7
00002650  1400      4191          move.b    D0,D2
                    4192   ; if(c == (char)('Y'))
00002652  0C02 0059 4193          cmp.b     #89,D2
00002656  6604      4194          bne.s     Watchpoint_5
                    4195   ; KillAllWatchPoints() ;
00002658  4EB8 226E 4196          jsr       _KillAllWatchPoints
                    4197   Watchpoint_5:
0000265C  601C      4198          bra.s     Watchpoint_10
                    4199   Watchpoint_3:
                    4200   ; }
                    4201   ; else if(c == (char)('S')) {
0000265E  0C02 0053 4202          cmp.b     #83,D2
00002662  6606      4203          bne.s     Watchpoint_7
                    4204   ; SetWatchPoint() ;
00002664  4EB8 23BE 4205          jsr       _SetWatchPoint
00002668  6010      4206          bra.s     Watchpoint_10
                    4207   Watchpoint_7:
                    4208   ; }
                    4209   ; else if(c == (char)('C')) {
0000266A  0C02 0043 4210          cmp.b     #67,D2
0000266E  6606      4211          bne.s     Watchpoint_9
                    4212   ; WatchPointClear() ;
00002670  4EB8 20C8 4213          jsr       _WatchPointClear
00002674  6004      4214          bra.s     Watchpoint_10
                    4215   Watchpoint_9:
                    4216   ; }
                    4217   ; else
                    4218   ; UnknownCommand() ;
00002676  4EB8 255A 4219          jsr       _UnknownCommand
                    4220   Watchpoint_10:
0000267A  241F      4221          move.l    (A7)+,D2
0000267C  4E75      4222          rts
                    4223   ; }
                    4224   ; void Help(void)
                    4225   ; {
                    4226   _Help:
0000267E  48E7 2020 4227          movem.l   D2/A2,-(A7)
00002682  45F9 0000 4228          lea       _printf.L,A2
00002686  3C38      
                    4229   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002688  41F9 0000 4230          lea       @m68kde~1_100.L,A0
0000268C  5040      
0000268E  2408      4231          move.l    A0,D2
                    4232   ; printf(banner) ;
00002690  2F02      4233          move.l    D2,-(A7)
00002692  4E92      4234          jsr       (A2)
00002694  584F      4235          addq.w    #4,A7
                    4236   ; printf("\r\n  Debugger Command Summary") ;
00002696  4879 0000 4237          pea       @m68kde~1_101.L
0000269A  5084      
0000269C  4E92      4238          jsr       (A2)
0000269E  584F      4239          addq.w    #4,A7
                    4240   ; printf(banner) ;
000026A0  2F02      4241          move.l    D2,-(A7)
000026A2  4E92      4242          jsr       (A2)
000026A4  584F      4243          addq.w    #4,A7
                    4244   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000026A6  4879 0000 4245          pea       @m68kde~1_102.L
000026AA  50A2      
000026AC  4E92      4246          jsr       (A2)
000026AE  584F      4247          addq.w    #4,A7
                    4248   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000026B0  4879 0000 4249          pea       @m68kde~1_103.L
000026B4  50E6      
000026B6  4E92      4250          jsr       (A2)
000026B8  584F      4251          addq.w    #4,A7
                    4252   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000026BA  4879 0000 4253          pea       @m68kde~1_104.L
000026BE  511E      
000026C0  4E92      4254          jsr       (A2)
000026C2  584F      4255          addq.w    #4,A7
                    4256   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000026C4  4879 0000 4257          pea       @m68kde~1_105.L
000026C8  5158      
000026CA  4E92      4258          jsr       (A2)
000026CC  584F      4259          addq.w    #4,A7
                    4260   ; printf("\r\n  E            - Enter String into Memory") ;
000026CE  4879 0000 4261          pea       @m68kde~1_106.L
000026D2  518A      
000026D4  4E92      4262          jsr       (A2)
000026D6  584F      4263          addq.w    #4,A7
                    4264   ; printf("\r\n  F            - Fill Memory with Data") ;
000026D8  4879 0000 4265          pea       @m68kde~1_107.L
000026DC  51B6      
000026DE  4E92      4266          jsr       (A2)
000026E0  584F      4267          addq.w    #4,A7
                    4268   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000026E2  2F39 0B00 4269          move.l    _PC.L,-(A7)
000026E6  0120      
000026E8  4879 0000 4270          pea       @m68kde~1_108.L
000026EC  51E0      
000026EE  4E92      4271          jsr       (A2)
000026F0  504F      4272          addq.w    #8,A7
                    4273   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
000026F2  4879 0000 4274          pea       @m68kde~1_109.L
000026F6  521A      
000026F8  4E92      4275          jsr       (A2)
000026FA  584F      4276          addq.w    #4,A7
                    4277   ; printf("\r\n  M            - Memory Examine and Change");
000026FC  4879 0000 4278          pea       @m68kde~1_110.L
00002700  5252      
00002702  4E92      4279          jsr       (A2)
00002704  584F      4280          addq.w    #4,A7
                    4281   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002706  4879 0000 4282          pea       @m68kde~1_111.L
0000270A  5280      
0000270C  4E92      4283          jsr       (A2)
0000270E  584F      4284          addq.w    #4,A7
                    4285   ; printf("\r\n  R            - Display 68000 Registers") ;
00002710  4879 0000 4286          pea       @m68kde~1_112.L
00002714  52BA      
00002716  4E92      4287          jsr       (A2)
00002718  584F      4288          addq.w    #4,A7
                    4289   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
0000271A  4879 0000 4290          pea       @m68kde~1_113.L
0000271E  52E6      
00002720  4E92      4291          jsr       (A2)
00002722  584F      4292          addq.w    #4,A7
                    4293   ; printf("\r\n  TM           - Test Memory") ;
00002724  4879 0000 4294          pea       @m68kde~1_114.L
00002728  5318      
0000272A  4E92      4295          jsr       (A2)
0000272C  584F      4296          addq.w    #4,A7
                    4297   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000272E  4879 0000 4298          pea       @m68kde~1_115.L
00002732  5338      
00002734  4E92      4299          jsr       (A2)
00002736  584F      4300          addq.w    #4,A7
                    4301   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002738  4879 0000 4302          pea       @m68kde~1_116.L
0000273C  5360      
0000273E  4E92      4303          jsr       (A2)
00002740  584F      4304          addq.w    #4,A7
                    4305   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002742  4879 0000 4306          pea       @m68kde~1_117.L
00002746  5396      
00002748  4E92      4307          jsr       (A2)
0000274A  584F      4308          addq.w    #4,A7
                    4309   ; printf(banner) ;
0000274C  2F02      4310          move.l    D2,-(A7)
0000274E  4E92      4311          jsr       (A2)
00002750  584F      4312          addq.w    #4,A7
00002752  4CDF 0404 4313          movem.l   (A7)+,D2/A2
00002756  4E75      4314          rts
                    4315   ; }
                    4316   ; void menu(void)
                    4317   ; {
                    4318   _menu:
00002758  48E7 303C 4319          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000275C  45F9 0000 4320          lea       _printf.L,A2
00002760  3C38      
00002762  47F9 0B00 4321          lea       _Trace.L,A3
00002766  00D8      
00002768  49F9 0B00 4322          lea       _x.L,A4
0000276C  00C8      
0000276E  4BF9 0B00 4323          lea       _SR.L,A5
00002772  012C      
                    4324   ; char c,c1 ;
                    4325   ; while(1)    {
                    4326   menu_1:
                    4327   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002774  4EB8 0BA6 4328          jsr       _FlushKeyboard
                    4329   ; printf("\r\n#") ;
00002778  4879 0000 4330          pea       @m68kde~1_118.L
0000277C  53CE      
0000277E  4E92      4331          jsr       (A2)
00002780  584F      4332          addq.w    #4,A7
                    4333   ; c = toupper(_getch());
00002782  2F00      4334          move.l    D0,-(A7)
00002784  4EB8 0B68 4335          jsr       __getch
00002788  2200      4336          move.l    D0,D1
0000278A  201F      4337          move.l    (A7)+,D0
0000278C  2F01      4338          move.l    D1,-(A7)
0000278E  4EB9 0000 4339          jsr       _toupper
00002792  3376      
00002794  584F      4340          addq.w    #4,A7
00002796  1400      4341          move.b    D0,D2
                    4342   ; if( c == (char)('L'))                  // load s record file
00002798  0C02 004C 4343          cmp.b     #76,D2
0000279C  6608      4344          bne.s     menu_4
                    4345   ; Load_SRecordFile() ;
0000279E  4EB8 0E36 4346          jsr       _Load_SRecordFile
000027A2  6000 021E 4347          bra       menu_46
                    4348   menu_4:
                    4349   ; else if( c == (char)('D'))             // dump memory
000027A6  0C02 0044 4350          cmp.b     #68,D2
000027AA  6608      4351          bne.s     menu_6
                    4352   ; DumpMemory() ;
000027AC  4EB8 0CCC 4353          jsr       _DumpMemory
000027B0  6000 0210 4354          bra       menu_46
                    4355   menu_6:
                    4356   ; else if( c == (char)('E'))             // Enter String into memory
000027B4  0C02 0045 4357          cmp.b     #69,D2
000027B8  660A      4358          bne.s     menu_8
                    4359   ; EnterString() ;
000027BA  4EB9 0000 4360          jsr       _EnterString
000027BE  2B0A      
000027C0  6000 0200 4361          bra       menu_46
                    4362   menu_8:
                    4363   ; else if( c == (char)('F'))             // fill memory
000027C4  0C02 0046 4364          cmp.b     #70,D2
000027C8  6608      4365          bne.s     menu_10
                    4366   ; FillMemory() ;
000027CA  4EB8 0DBC 4367          jsr       _FillMemory
000027CE  6000 01F2 4368          bra       menu_46
                    4369   menu_10:
                    4370   ; else if( c == (char)('G'))  {           // go user program
000027D2  0C02 0047 4371          cmp.b     #71,D2
000027D6  6626      4372          bne.s     menu_12
                    4373   ; printf("\r\nProgram Running.....") ;
000027D8  4879 0000 4374          pea       @m68kde~1_119.L
000027DC  53D2      
000027DE  4E92      4375          jsr       (A2)
000027E0  584F      4376          addq.w    #4,A7
                    4377   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000027E2  4879 0000 4378          pea       @m68kde~1_120.L
000027E6  53EA      
000027E8  4E92      4379          jsr       (A2)
000027EA  584F      4380          addq.w    #4,A7
                    4381   ; GoFlag = 1 ;
000027EC  23FC 0000 4382          move.l    #1,_GoFlag.L
000027F0  0001 0B00 
000027F4  00DC      
                    4383   ; go() ;
000027F6  4EB8 08B8 4384          jsr       _go
000027FA  6000 01C6 4385          bra       menu_46
                    4386   menu_12:
                    4387   ; }
                    4388   ; else if( c == (char)('M'))           // memory examine and modify
000027FE  0C02 004D 4389          cmp.b     #77,D2
00002802  6608      4390          bne.s     menu_14
                    4391   ; MemoryChange() ;
00002804  4EB8 0FC4 4392          jsr       _MemoryChange
00002808  6000 01B8 4393          bra       menu_46
                    4394   menu_14:
                    4395   ; else if( c == (char)('P'))            // Program Flash Chip
0000280C  0C02 0050 4396          cmp.b     #80,D2
00002810  6608      4397          bne.s     menu_16
                    4398   ; ProgramFlashChip() ;
00002812  4EB8 1368 4399          jsr       _ProgramFlashChip
00002816  6000 01AA 4400          bra       menu_46
                    4401   menu_16:
                    4402   ; else if( c == (char)('C'))             // copy flash chip to ram and go
0000281A  0C02 0043 4403          cmp.b     #67,D2
0000281E  6608      4404          bne.s     menu_18
                    4405   ; LoadFromFlashChip();
00002820  4EB8 138A 4406          jsr       _LoadFromFlashChip
00002824  6000 019C 4407          bra       menu_46
                    4408   menu_18:
                    4409   ; else if( c == (char)('R'))             // dump registers
00002828  0C02 0052 4410          cmp.b     #82,D2
0000282C  6608      4411          bne.s     menu_20
                    4412   ; DumpRegisters() ;
0000282E  4EB8 16C0 4413          jsr       _DumpRegisters
00002832  6000 018E 4414          bra       menu_46
                    4415   menu_20:
                    4416   ; else if( c == (char)('.'))           // change registers
00002836  0C02 002E 4417          cmp.b     #46,D2
0000283A  6608      4418          bne.s     menu_22
                    4419   ; ChangeRegisters() ;
0000283C  4EB8 1BB2 4420          jsr       _ChangeRegisters
00002840  6000 0180 4421          bra       menu_46
                    4422   menu_22:
                    4423   ; else if( c == (char)('B'))              // breakpoint command
00002844  0C02 0042 4424          cmp.b     #66,D2
00002848  6608      4425          bne.s     menu_24
                    4426   ; Breakpoint() ;
0000284A  4EB8 2586 4427          jsr       _Breakpoint
0000284E  6000 0172 4428          bra       menu_46
                    4429   menu_24:
                    4430   ; else if( c == (char)('T'))  {          // Test command
00002852  0C02 0054 4431          cmp.b     #84,D2
00002856  6600 0046 4432          bne       menu_26
                    4433   ; c1 = toupper(_getch()) ;
0000285A  2F00      4434          move.l    D0,-(A7)
0000285C  4EB8 0B68 4435          jsr       __getch
00002860  2200      4436          move.l    D0,D1
00002862  201F      4437          move.l    (A7)+,D0
00002864  2F01      4438          move.l    D1,-(A7)
00002866  4EB9 0000 4439          jsr       _toupper
0000286A  3376      
0000286C  584F      4440          addq.w    #4,A7
0000286E  1600      4441          move.b    D0,D3
                    4442   ; if(c1 == (char)('M'))                    // memory test
00002870  0C03 004D 4443          cmp.b     #77,D3
00002874  6608      4444          bne.s     menu_28
                    4445   ; MemoryTest() ;
00002876  4EB9 0000 4446          jsr       _MemoryTest
0000287A  2B82      
0000287C  601C      4447          bra.s     menu_33
                    4448   menu_28:
                    4449   ; else if( c1 == (char)('S'))              // Switch Test command
0000287E  0C03 0053 4450          cmp.b     #83,D3
00002882  6606      4451          bne.s     menu_30
                    4452   ; SwitchTest() ;
00002884  4EB8 0AA4 4453          jsr       _SwitchTest
00002888  6010      4454          bra.s     menu_33
                    4455   menu_30:
                    4456   ; else if( c1 == (char)('D'))              // display Test command
0000288A  0C03 0044 4457          cmp.b     #68,D3
0000288E  6606      4458          bne.s     menu_32
                    4459   ; TestLEDS() ;
00002890  4EB8 0A50 4460          jsr       _TestLEDS
00002894  6004      4461          bra.s     menu_33
                    4462   menu_32:
                    4463   ; else
                    4464   ; UnknownCommand() ;
00002896  4EB8 255A 4465          jsr       _UnknownCommand
                    4466   menu_33:
0000289A  6000 0126 4467          bra       menu_46
                    4468   menu_26:
                    4469   ; }
                    4470   ; else if( c == (char)(' ')) {             // Next instruction command
0000289E  0C02 0020 4471          cmp.b     #32,D2
000028A2  6636      4472          bne.s     menu_34
                    4473   ; DisableBreakPoints() ;
000028A4  4EB8 216A 4474          jsr       _DisableBreakPoints
                    4475   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000028A8  2013      4476          move.l    (A3),D0
000028AA  0C80 0000 4477          cmp.l     #1,D0
000028AE  0001      
000028B0  661A      4478          bne.s     menu_36
000028B2  2039 0B00 4479          move.l    _GoFlag.L,D0
000028B6  00DC      
000028B8  0C80 0000 4480          cmp.l     #1,D0
000028BC  0001      
000028BE  660C      4481          bne.s     menu_36
                    4482   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000028C0  13FC 0001 4483          move.b    #1,4194314
000028C4  0040 000A 
                    4484   ; return ;
000028C8  6000 00FC 4485          bra       menu_38
                    4486   menu_36:
                    4487   ; }
                    4488   ; else
                    4489   ; printf("\r\nError: Press 'G' first to start program") ;
000028CC  4879 0000 4490          pea       @m68kde~1_121.L
000028D0  5418      
000028D2  4E92      4491          jsr       (A2)
000028D4  584F      4492          addq.w    #4,A7
000028D6  6000 00EA 4493          bra       menu_46
                    4494   menu_34:
                    4495   ; }
                    4496   ; else if( c == (char)('S')) {             // single step
000028DA  0C02 0053 4497          cmp.b     #83,D2
000028DE  6600 008C 4498          bne       menu_39
                    4499   ; if(Trace == 0) {
000028E2  2013      4500          move.l    (A3),D0
000028E4  6600 0050 4501          bne       menu_41
                    4502   ; DisableBreakPoints() ;
000028E8  4EB8 216A 4503          jsr       _DisableBreakPoints
                    4504   ; printf("\r\nSingle Step  :[ON]") ;
000028EC  4879 0000 4505          pea       @m68kde~1_122.L
000028F0  5442      
000028F2  4E92      4506          jsr       (A2)
000028F4  584F      4507          addq.w    #4,A7
                    4508   ; printf("\r\nBreak Points :[Disabled]") ;
000028F6  4879 0000 4509          pea       @m68kde~1_55.L
000028FA  4AE0      
000028FC  4E92      4510          jsr       (A2)
000028FE  584F      4511          addq.w    #4,A7
                    4512   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002900  0055 8000 4513          or.w      #32768,(A5)
                    4514   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002904  2F39 0B00 4515          move.l    _PC.L,-(A7)
00002908  0120      
0000290A  4879 0000 4516          pea       @m68kde~1_123.L
0000290E  5458      
00002910  4E92      4517          jsr       (A2)
00002912  504F      4518          addq.w    #8,A7
                    4519   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002914  4879 0000 4520          pea       @m68kde~1_124.L
00002918  548C      
0000291A  4E92      4521          jsr       (A2)
0000291C  584F      4522          addq.w    #4,A7
                    4523   ; DumpRegisters() ;
0000291E  4EB8 16C0 4524          jsr       _DumpRegisters
                    4525   ; Trace = 1;
00002922  26BC 0000 4526          move.l    #1,(A3)
00002926  0001      
                    4527   ; TraceException = 1;
00002928  13FC 0001 4528          move.b    #1,4194314
0000292C  0040 000A 
                    4529   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002930  28B8 0074 4530          move.l    116,(A4)
00002934  6032      4531          bra.s     menu_42
                    4532   menu_41:
                    4533   ; }
                    4534   ; else {
                    4535   ; Trace = 0 ;
00002936  4293      4536          clr.l     (A3)
                    4537   ; TraceException = 0 ;
00002938  4239 0040 4538          clr.b     4194314
0000293C  000A      
                    4539   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000293E  28B8 0074 4540          move.l    116,(A4)
                    4541   ; EnableBreakPoints() ;
00002942  4EB8 21BE 4542          jsr       _EnableBreakPoints
                    4543   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002946  0255 7FFF 4544          and.w     #32767,(A5)
                    4545   ; printf("\r\nSingle Step : [OFF]") ;
0000294A  4879 0000 4546          pea       @m68kde~1_125.L
0000294E  54B0      
00002950  4E92      4547          jsr       (A2)
00002952  584F      4548          addq.w    #4,A7
                    4549   ; printf("\r\nBreak Points :[Enabled]") ;
00002954  4879 0000 4550          pea       @m68kde~1_126.L
00002958  54C6      
0000295A  4E92      4551          jsr       (A2)
0000295C  584F      4552          addq.w    #4,A7
                    4553   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
0000295E  4879 0000 4554          pea       @m68kde~1_127.L
00002962  54E0      
00002964  4E92      4555          jsr       (A2)
00002966  584F      4556          addq.w    #4,A7
                    4557   menu_42:
00002968  6000 0058 4558          bra       menu_46
                    4559   menu_39:
                    4560   ; }
                    4561   ; }
                    4562   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
0000296C  0C02 001B 4563          cmp.b     #27,D2
00002970  6600 0040 4564          bne       menu_43
                    4565   ; Trace = 0;
00002974  4293      4566          clr.l     (A3)
                    4567   ; TraceException = 0;
00002976  4239 0040 4568          clr.b     4194314
0000297A  000A      
                    4569   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
0000297C  28B8 0074 4570          move.l    116,(A4)
                    4571   ; EnableBreakPoints() ;
00002980  4EB8 21BE 4572          jsr       _EnableBreakPoints
                    4573   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002984  0255 7FFF 4574          and.w     #32767,(A5)
                    4575   ; printf("\r\nSingle Step  :[OFF]") ;
00002988  4879 0000 4576          pea       @m68kde~1_128.L
0000298C  550A      
0000298E  4E92      4577          jsr       (A2)
00002990  584F      4578          addq.w    #4,A7
                    4579   ; printf("\r\nBreak Points :[Enabled]");
00002992  4879 0000 4580          pea       @m68kde~1_126.L
00002996  54C6      
00002998  4E92      4581          jsr       (A2)
0000299A  584F      4582          addq.w    #4,A7
                    4583   ; printf("\r\nProgram Running.....") ;
0000299C  4879 0000 4584          pea       @m68kde~1_119.L
000029A0  53D2      
000029A2  4E92      4585          jsr       (A2)
000029A4  584F      4586          addq.w    #4,A7
                    4587   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000029A6  4879 0000 4588          pea       @m68kde~1_120.L
000029AA  53EA      
000029AC  4E92      4589          jsr       (A2)
000029AE  584F      4590          addq.w    #4,A7
                    4591   ; return ;
000029B0  6014      4592          bra.s     menu_38
                    4593   menu_43:
                    4594   ; }
                    4595   ; else if( c == (char)('W'))              // Watchpoint command
000029B2  0C02 0057 4596          cmp.b     #87,D2
000029B6  6606      4597          bne.s     menu_45
                    4598   ; Watchpoint() ;
000029B8  4EB8 2602 4599          jsr       _Watchpoint
000029BC  6004      4600          bra.s     menu_46
                    4601   menu_45:
                    4602   ; else
                    4603   ; UnknownCommand() ;
000029BE  4EB8 255A 4604          jsr       _UnknownCommand
                    4605   menu_46:
000029C2  6000 FDB0 4606          bra       menu_1
                    4607   menu_38:
000029C6  4CDF 3C0C 4608          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000029CA  4E75      4609          rts
                    4610   ; }
                    4611   ; }
                    4612   ; void PrintErrorMessageandAbort(char *string) {
                    4613   _PrintErrorMessageandAbort:
000029CC  4E56 0000 4614          link      A6,#0
                    4615   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000029D0  4879 0000 4616          pea       @m68kde~1_129.L
000029D4  5520      
000029D6  4EB9 0000 4617          jsr       _printf
000029DA  3C38      
000029DC  584F      4618          addq.w    #4,A7
                    4619   ; printf("%s\r\n", string) ;
000029DE  2F2E 0008 4620          move.l    8(A6),-(A7)
000029E2  4879 0000 4621          pea       @m68kde~1_130.L
000029E6  553C      
000029E8  4EB9 0000 4622          jsr       _printf
000029EC  3C38      
000029EE  504F      4623          addq.w    #8,A7
                    4624   ; menu() ;
000029F0  4EB8 2758 4625          jsr       _menu
000029F4  4E5E      4626          unlk      A6
000029F6  4E75      4627          rts
                    4628   ; }
                    4629   ; void IRQMessage(int level) {
                    4630   _IRQMessage:
000029F8  4E56 0000 4631          link      A6,#0
                    4632   ; printf("\r\n\r\nProgram ABORT !!!!!");
000029FC  4879 0000 4633          pea       @m68kde~1_131.L
00002A00  5542      
00002A02  4EB9 0000 4634          jsr       _printf
00002A06  3C38      
00002A08  584F      4635          addq.w    #4,A7
                    4636   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002A0A  2F2E 0008 4637          move.l    8(A6),-(A7)
00002A0E  4879 0000 4638          pea       @m68kde~1_132.L
00002A12  555A      
00002A14  4EB9 0000 4639          jsr       _printf
00002A18  3C38      
00002A1A  504F      4640          addq.w    #8,A7
                    4641   ; menu() ;
00002A1C  4EB8 2758 4642          jsr       _menu
00002A20  4E5E      4643          unlk      A6
00002A22  4E75      4644          rts
                    4645   ; }
                    4646   ; void UnhandledIRQ1(void) {
                    4647   _UnhandledIRQ1:
                    4648   ; IRQMessage(1);
00002A24  4878 0001 4649          pea       1
00002A28  4EB8 29F8 4650          jsr       _IRQMessage
00002A2C  584F      4651          addq.w    #4,A7
00002A2E  4E75      4652          rts
                    4653   ; }
                    4654   ; void UnhandledIRQ2(void) {
                    4655   _UnhandledIRQ2:
                    4656   ; IRQMessage(2);
00002A30  4878 0002 4657          pea       2
00002A34  4EB8 29F8 4658          jsr       _IRQMessage
00002A38  584F      4659          addq.w    #4,A7
00002A3A  4E75      4660          rts
                    4661   ; }
                    4662   ; void UnhandledIRQ3(void){
                    4663   _UnhandledIRQ3:
                    4664   ; IRQMessage(3);
00002A3C  4878 0003 4665          pea       3
00002A40  4EB8 29F8 4666          jsr       _IRQMessage
00002A44  584F      4667          addq.w    #4,A7
00002A46  4E75      4668          rts
                    4669   ; }
                    4670   ; void UnhandledIRQ4(void) {
                    4671   _UnhandledIRQ4:
                    4672   ; IRQMessage(4);
00002A48  4878 0004 4673          pea       4
00002A4C  4EB8 29F8 4674          jsr       _IRQMessage
00002A50  584F      4675          addq.w    #4,A7
00002A52  4E75      4676          rts
                    4677   ; }
                    4678   ; void UnhandledIRQ5(void) {
                    4679   _UnhandledIRQ5:
                    4680   ; IRQMessage(5);
00002A54  4878 0005 4681          pea       5
00002A58  4EB8 29F8 4682          jsr       _IRQMessage
00002A5C  584F      4683          addq.w    #4,A7
00002A5E  4E75      4684          rts
                    4685   ; }
                    4686   ; void UnhandledIRQ6(void) {
                    4687   _UnhandledIRQ6:
                    4688   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002A60  4879 0000 4689          pea       @m68kde~1_133.L
00002A64  557E      
00002A66  4EB8 29CC 4690          jsr       _PrintErrorMessageandAbort
00002A6A  584F      4691          addq.w    #4,A7
                    4692   ; menu() ;
00002A6C  4EB8 2758 4693          jsr       _menu
00002A70  4E75      4694          rts
                    4695   ; }
                    4696   ; void UnhandledIRQ7(void) {
                    4697   _UnhandledIRQ7:
                    4698   ; IRQMessage(7);
00002A72  4878 0007 4699          pea       7
00002A76  4EB8 29F8 4700          jsr       _IRQMessage
00002A7A  584F      4701          addq.w    #4,A7
00002A7C  4E75      4702          rts
                    4703   ; }
                    4704   ; void UnhandledTrap(void) {
                    4705   _UnhandledTrap:
                    4706   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002A7E  4879 0000 4707          pea       @m68kde~1_134.L
00002A82  55BE      
00002A84  4EB8 29CC 4708          jsr       _PrintErrorMessageandAbort
00002A88  584F      4709          addq.w    #4,A7
00002A8A  4E75      4710          rts
                    4711   ; }
                    4712   ; void BusError() {
                    4713   _BusError:
                    4714   ; PrintErrorMessageandAbort("BUS Error!") ;
00002A8C  4879 0000 4715          pea       @m68kde~1_135.L
00002A90  55D4      
00002A92  4EB8 29CC 4716          jsr       _PrintErrorMessageandAbort
00002A96  584F      4717          addq.w    #4,A7
00002A98  4E75      4718          rts
                    4719   ; }
                    4720   ; void AddressError() {
                    4721   _AddressError:
                    4722   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002A9A  4879 0000 4723          pea       @m68kde~1_136.L
00002A9E  55E0      
00002AA0  4EB8 29CC 4724          jsr       _PrintErrorMessageandAbort
00002AA4  584F      4725          addq.w    #4,A7
00002AA6  4E75      4726          rts
                    4727   ; }
                    4728   ; void IllegalInstruction() {
                    4729   _IllegalInstruction:
                    4730   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002AA8  4879 0000 4731          pea       @m68kde~1_137.L
00002AAC  55F0      
00002AAE  4EB8 29CC 4732          jsr       _PrintErrorMessageandAbort
00002AB2  584F      4733          addq.w    #4,A7
00002AB4  4E75      4734          rts
                    4735   ; }
                    4736   ; void Dividebyzero() {
                    4737   _Dividebyzero:
                    4738   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002AB6  4879 0000 4739          pea       @m68kde~1_138.L
00002ABA  5604      
00002ABC  4EB8 29CC 4740          jsr       _PrintErrorMessageandAbort
00002AC0  584F      4741          addq.w    #4,A7
00002AC2  4E75      4742          rts
                    4743   ; }
                    4744   ; void Check() {
                    4745   _Check:
                    4746   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002AC4  4879 0000 4747          pea       @m68kde~1_139.L
00002AC8  5614      
00002ACA  4EB8 29CC 4748          jsr       _PrintErrorMessageandAbort
00002ACE  584F      4749          addq.w    #4,A7
00002AD0  4E75      4750          rts
                    4751   ; }
                    4752   ; void Trapv() {
                    4753   _Trapv:
                    4754   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002AD2  4879 0000 4755          pea       @m68kde~1_140.L
00002AD6  5626      
00002AD8  4EB8 29CC 4756          jsr       _PrintErrorMessageandAbort
00002ADC  584F      4757          addq.w    #4,A7
00002ADE  4E75      4758          rts
                    4759   ; }
                    4760   ; void PrivError() {
                    4761   _PrivError:
                    4762   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002AE0  4879 0000 4763          pea       @m68kde~1_141.L
00002AE4  5638      
00002AE6  4EB8 29CC 4764          jsr       _PrintErrorMessageandAbort
00002AEA  584F      4765          addq.w    #4,A7
00002AEC  4E75      4766          rts
                    4767   ; }
                    4768   ; void UnitIRQ() {
                    4769   _UnitIRQ:
                    4770   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002AEE  4879 0000 4771          pea       @m68kde~1_142.L
00002AF2  564C      
00002AF4  4EB8 29CC 4772          jsr       _PrintErrorMessageandAbort
00002AF8  584F      4773          addq.w    #4,A7
00002AFA  4E75      4774          rts
                    4775   ; }
                    4776   ; void Spurious() {
                    4777   _Spurious:
                    4778   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002AFC  4879 0000 4779          pea       @m68kde~1_143.L
00002B00  565E      
00002B02  4EB8 29CC 4780          jsr       _PrintErrorMessageandAbort
00002B06  584F      4781          addq.w    #4,A7
00002B08  4E75      4782          rts
                    4783   ; }
                    4784   ; void EnterString(void)
                    4785   ; {
                    4786   _EnterString:
00002B0A  4E56 FFFC 4787          link      A6,#-4
00002B0E  2F02      4788          move.l    D2,-(A7)
                    4789   ; unsigned char *Start;
                    4790   ; unsigned char c;
                    4791   ; printf("\r\nStart Address in Memory: ") ;
00002B10  4879 0000 4792          pea       @m68kde~1_144.L
00002B14  566C      
00002B16  4EB9 0000 4793          jsr       _printf
00002B1A  3C38      
00002B1C  584F      4794          addq.w    #4,A7
                    4795   ; Start = Get8HexDigits(0) ;
00002B1E  42A7      4796          clr.l     -(A7)
00002B20  4EB8 0CA4 4797          jsr       _Get8HexDigits
00002B24  584F      4798          addq.w    #4,A7
00002B26  2400      4799          move.l    D0,D2
                    4800   ; printf("\r\nEnter String (ESC to end) :") ;
00002B28  4879 0000 4801          pea       @m68kde~1_145.L
00002B2C  5688      
00002B2E  4EB9 0000 4802          jsr       _printf
00002B32  3C38      
00002B34  584F      4803          addq.w    #4,A7
                    4804   ; while((c = getchar()) != 0x1b)
                    4805   EnterString_1:
00002B36  4EB9 0000 4806          jsr       _getch
00002B3A  32AC      
00002B3C  1D40 FFFF 4807          move.b    D0,-1(A6)
00002B40  0C00 001B 4808          cmp.b     #27,D0
00002B44  670A      4809          beq.s     EnterString_3
                    4810   ; *Start++ = c ;
00002B46  2042      4811          move.l    D2,A0
00002B48  5282      4812          addq.l    #1,D2
00002B4A  10AE FFFF 4813          move.b    -1(A6),(A0)
00002B4E  60E6      4814          bra       EnterString_1
                    4815   EnterString_3:
                    4816   ; *Start = 0x00;  // terminate with a null
00002B50  2042      4817          move.l    D2,A0
00002B52  4210      4818          clr.b     (A0)
00002B54  241F      4819          move.l    (A7)+,D2
00002B56  4E5E      4820          unlk      A6
00002B58  4E75      4821          rts
                    4822   ; }
                    4823   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4824   ; void clearInputBuffer() {
                    4825   _clearInputBuffer:
00002B5A  4E56 FFFC 4826          link      A6,#-4
                    4827   ; int c;
                    4828   ; while ((c = getchar()) != '\n' && c != EOF);
                    4829   clearInputBuffer_1:
00002B5E  4EB9 0000 4830          jsr       _getch
00002B62  32AC      
00002B64  2D40 FFFC 4831          move.l    D0,-4(A6)
00002B68  0C80 0000 4832          cmp.l     #10,D0
00002B6C  000A      
00002B6E  670E      4833          beq.s     clearInputBuffer_3
00002B70  202E FFFC 4834          move.l    -4(A6),D0
00002B74  0C80 FFFF 4835          cmp.l     #-1,D0
00002B78  FFFF      
00002B7A  6702      4836          beq.s     clearInputBuffer_3
00002B7C  60E0      4837          bra       clearInputBuffer_1
                    4838   clearInputBuffer_3:
00002B7E  4E5E      4839          unlk      A6
00002B80  4E75      4840          rts
                    4841   ; }
                    4842   ; void MemoryTest(void)
                    4843   ; {
                    4844   _MemoryTest:
00002B82  4E56 FF40 4845          link      A6,#-192
00002B86  48E7 3F3C 4846          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002B8A  45F9 0000 4847          lea       _printf.L,A2
00002B8E  3C38      
00002B90  4BF8 0B68 4848          lea       __getch.L,A5
                    4849   ; unsigned int *RamPtr, counter1=1 ;
00002B94  2D7C 0000 4850          move.l    #1,-188(A6)
00002B98  0001 FF44 
                    4851   ; register unsigned int i ;
                    4852   ; unsigned int Start, End ;
                    4853   ; char c, text[150];
                    4854   ; unsigned int* addressPointer;
                    4855   ; unsigned int startAddress = NULL;
00002B9C  42AE FFF0 4856          clr.l     -16(A6)
                    4857   ; unsigned int endAddress = NULL;
00002BA0  42AE FFF4 4858          clr.l     -12(A6)
                    4859   ; unsigned int byteLength;
                    4860   ; unsigned int dataSize = 0;
00002BA4  4285      4861          clr.l     D5
                    4862   ; unsigned int dataPattern = 0;
00002BA6  4283      4863          clr.l     D3
                    4864   ; unsigned int currAddress;
                    4865   ; unsigned int addrCount;
                    4866   ; unsigned int intBuffer = NULL;
00002BA8  7E00      4867          moveq     #0,D7
                    4868   ; unsigned char *startAddressPtr = NULL;
00002BAA  4282      4869          clr.l     D2
                    4870   ; unsigned char *endAddressPtr = NULL;
00002BAC  4286      4871          clr.l     D6
                    4872   ; unsigned short int *wordAddressPtr = NULL;
00002BAE  387C 0000 4873          move.w    #0,A4
                    4874   ; unsigned int *longAddressPtr = NULL;
00002BB2  367C 0000 4875          move.w    #0,A3
                    4876   ; // IMPROVEMENTS TO BE MADE:
                    4877   ; // Suppossed to be able to write an odd address as a byte
                    4878   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    4879   ; // printf("\r\nStart Address: ") ;
                    4880   ; // Start = Get8HexDigits(0) ;
                    4881   ; // printf("\r\nEnd Address: ") ;
                    4882   ; // End = Get8HexDigits(0) ;
                    4883   ; // TODO
                    4884   ; scanflush();
00002BB6  4EB9 0000 4885          jsr       _scanflush
00002BBA  362E      
                    4886   ; memset(text, 0, sizeof(text));  // fills with zeros
00002BBC  4878 0096 4887          pea       150
00002BC0  42A7      4888          clr.l     -(A7)
00002BC2  486E FF56 4889          pea       -170(A6)
00002BC6  4EB9 0000 4890          jsr       _memset
00002BCA  3348      
00002BCC  DEFC 000C 4891          add.w     #12,A7
                    4892   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
00002BD0  4879 0000 4893          pea       @m68kde~1_146.L
00002BD4  56A6      
00002BD6  4E92      4894          jsr       (A2)
00002BD8  584F      4895          addq.w    #4,A7
                    4896   ; dataSize = _getch() - 48;
00002BDA  4E95      4897          jsr       (A5)
00002BDC  0480 0000 4898          sub.l     #48,D0
00002BE0  0030      
00002BE2  2A00      4899          move.l    D0,D5
                    4900   ; printf("\n");
00002BE4  4879 0000 4901          pea       @m68kde~1_28.L
00002BE8  48B6      
00002BEA  4E92      4902          jsr       (A2)
00002BEC  584F      4903          addq.w    #4,A7
                    4904   ; if (dataSize == 0) {
00002BEE  4A85      4905          tst.l     D5
00002BF0  6600 0058 4906          bne       MemoryTest_1
                    4907   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
00002BF4  4879 0000 4908          pea       @m68kde~1_147.L
00002BF8  56FC      
00002BFA  4E92      4909          jsr       (A2)
00002BFC  584F      4910          addq.w    #4,A7
                    4911   ; intBuffer = _getch() - 48;
00002BFE  4E95      4912          jsr       (A5)
00002C00  0480 0000 4913          sub.l     #48,D0
00002C04  0030      
00002C06  2E00      4914          move.l    D0,D7
                    4915   ; // scanf("%d", &intBuffer);
                    4916   ; switch (intBuffer) {
00002C08  2007      4917          move.l    D7,D0
00002C0A  0C80 0000 4918          cmp.l     #4,D0
00002C0E  0004      
00002C10  642C      4919          bhs.s     MemoryTest_4
00002C12  E380      4920          asl.l     #1,D0
00002C14  303B 0806 4921          move.w    MemoryTest_5(PC,D0.L),D0
00002C18  4EFB 0002 4922          jmp       MemoryTest_5(PC,D0.W)
                    4923   MemoryTest_5:
00002C1C  0008      4924          dc.w      MemoryTest_6-MemoryTest_5
00002C1E  000C      4925          dc.w      MemoryTest_7-MemoryTest_5
00002C20  0014      4926          dc.w      MemoryTest_8-MemoryTest_5
00002C22  001C      4927          dc.w      MemoryTest_9-MemoryTest_5
                    4928   MemoryTest_6:
                    4929   ; case(0):
                    4930   ; dataPattern = 0x00; break;
00002C24  4283      4931          clr.l     D3
00002C26  6016      4932          bra.s     MemoryTest_4
                    4933   MemoryTest_7:
                    4934   ; case(1):
                    4935   ; dataPattern = 0xB2; break;
00002C28  263C 0000 4936          move.l    #178,D3
00002C2C  00B2      
00002C2E  600E      4937          bra.s     MemoryTest_4
                    4938   MemoryTest_8:
                    4939   ; case(2):
                    4940   ; dataPattern = 0xC3; break;
00002C30  263C 0000 4941          move.l    #195,D3
00002C34  00C3      
00002C36  6006      4942          bra.s     MemoryTest_4
                    4943   MemoryTest_9:
                    4944   ; case(3):
                    4945   ; dataPattern = 0xD4; break;
00002C38  263C 0000 4946          move.l    #212,D3
00002C3C  00D4      
                    4947   MemoryTest_4:
                    4948   ; }
                    4949   ; dataPattern &= 0xFF;
00002C3E  C6BC 0000 4950          and.l     #255,D3
00002C42  00FF      
                    4951   ; byteLength = 1;
00002C44  7801      4952          moveq     #1,D4
00002C46  6000 00AE 4953          bra       MemoryTest_11
                    4954   MemoryTest_1:
                    4955   ; } else if (dataSize == 1) {
00002C4A  0C85 0000 4956          cmp.l     #1,D5
00002C4E  0001      
00002C50  6600 0058 4957          bne       MemoryTest_10
                    4958   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
00002C54  4879 0000 4959          pea       @m68kde~1_148.L
00002C58  575E      
00002C5A  4E92      4960          jsr       (A2)
00002C5C  584F      4961          addq.w    #4,A7
                    4962   ; intBuffer = _getch() - 48;
00002C5E  4E95      4963          jsr       (A5)
00002C60  0480 0000 4964          sub.l     #48,D0
00002C64  0030      
00002C66  2E00      4965          move.l    D0,D7
                    4966   ; switch (intBuffer) {
00002C68  2007      4967          move.l    D7,D0
00002C6A  0C80 0000 4968          cmp.l     #4,D0
00002C6E  0004      
00002C70  642C      4969          bhs.s     MemoryTest_13
00002C72  E380      4970          asl.l     #1,D0
00002C74  303B 0806 4971          move.w    MemoryTest_14(PC,D0.L),D0
00002C78  4EFB 0002 4972          jmp       MemoryTest_14(PC,D0.W)
                    4973   MemoryTest_14:
00002C7C  0008      4974          dc.w      MemoryTest_15-MemoryTest_14
00002C7E  000C      4975          dc.w      MemoryTest_16-MemoryTest_14
00002C80  0014      4976          dc.w      MemoryTest_17-MemoryTest_14
00002C82  001C      4977          dc.w      MemoryTest_18-MemoryTest_14
                    4978   MemoryTest_15:
                    4979   ; case(0):
                    4980   ; dataPattern = 0x0000; break;
00002C84  4283      4981          clr.l     D3
00002C86  6016      4982          bra.s     MemoryTest_13
                    4983   MemoryTest_16:
                    4984   ; case(1):
                    4985   ; dataPattern = 0x1234; break;
00002C88  263C 0000 4986          move.l    #4660,D3
00002C8C  1234      
00002C8E  600E      4987          bra.s     MemoryTest_13
                    4988   MemoryTest_17:
                    4989   ; case(2):
                    4990   ; dataPattern = 0xA1B2; break;
00002C90  263C 0000 4991          move.l    #41394,D3
00002C94  A1B2      
00002C96  6006      4992          bra.s     MemoryTest_13
                    4993   MemoryTest_18:
                    4994   ; case(3):
                    4995   ; dataPattern = 0xC3D4; break;
00002C98  263C 0000 4996          move.l    #50132,D3
00002C9C  C3D4      
                    4997   MemoryTest_13:
                    4998   ; }
                    4999   ; dataPattern &= 0xFFFF;
00002C9E  C6BC 0000 5000          and.l     #65535,D3
00002CA2  FFFF      
                    5001   ; byteLength = 2;
00002CA4  7802      5002          moveq     #2,D4
00002CA6  6000 004E 5003          bra       MemoryTest_11
                    5004   MemoryTest_10:
                    5005   ; } else {
                    5006   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
00002CAA  4879 0000 5007          pea       @m68kde~1_149.L
00002CAE  57C8      
00002CB0  4E92      5008          jsr       (A2)
00002CB2  584F      5009          addq.w    #4,A7
                    5010   ; intBuffer = _getch() - 48;
00002CB4  4E95      5011          jsr       (A5)
00002CB6  0480 0000 5012          sub.l     #48,D0
00002CBA  0030      
00002CBC  2E00      5013          move.l    D0,D7
                    5014   ; switch (intBuffer) {
00002CBE  2007      5015          move.l    D7,D0
00002CC0  0C80 0000 5016          cmp.l     #4,D0
00002CC4  0004      
00002CC6  642C      5017          bhs.s     MemoryTest_20
00002CC8  E380      5018          asl.l     #1,D0
00002CCA  303B 0806 5019          move.w    MemoryTest_21(PC,D0.L),D0
00002CCE  4EFB 0002 5020          jmp       MemoryTest_21(PC,D0.W)
                    5021   MemoryTest_21:
00002CD2  0008      5022          dc.w      MemoryTest_22-MemoryTest_21
00002CD4  000C      5023          dc.w      MemoryTest_23-MemoryTest_21
00002CD6  0014      5024          dc.w      MemoryTest_24-MemoryTest_21
00002CD8  001C      5025          dc.w      MemoryTest_25-MemoryTest_21
                    5026   MemoryTest_22:
                    5027   ; case(0):
                    5028   ; dataPattern = 0x00000000; break;
00002CDA  4283      5029          clr.l     D3
00002CDC  6016      5030          bra.s     MemoryTest_20
                    5031   MemoryTest_23:
                    5032   ; case(1):
                    5033   ; dataPattern = 0xAABBCCDD; break;
00002CDE  263C AABB 5034          move.l    #-1430532899,D3
00002CE2  CCDD      
00002CE4  600E      5035          bra.s     MemoryTest_20
                    5036   MemoryTest_24:
                    5037   ; case(2):
                    5038   ; dataPattern = 0x11223344; break;
00002CE6  263C 1122 5039          move.l    #287454020,D3
00002CEA  3344      
00002CEC  6006      5040          bra.s     MemoryTest_20
                    5041   MemoryTest_25:
                    5042   ; case(3):
                    5043   ; dataPattern = 0x76543210; break;
00002CEE  263C 7654 5044          move.l    #1985229328,D3
00002CF2  3210      
                    5045   MemoryTest_20:
                    5046   ; }
                    5047   ; byteLength = 4;
00002CF4  7804      5048          moveq     #4,D4
                    5049   MemoryTest_11:
                    5050   ; }
                    5051   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    5052   ; while (startAddressPtr == NULL || 
                    5053   MemoryTest_26:
00002CF6  4A82      5054          tst.l     D2
00002CF8  6732      5055          beq.s     MemoryTest_29
00002CFA  0C84 0000 5056          cmp.l     #1,D4
00002CFE  0001      
00002D00  6316      5057          bls.s     MemoryTest_30
00002D02  2F02      5058          move.l    D2,-(A7)
00002D04  4878 0002 5059          pea       2
00002D08  4EB9 0000 5060          jsr       ULDIV
00002D0C  319E      
00002D0E  202F 0004 5061          move.l    4(A7),D0
00002D12  504F      5062          addq.w    #8,A7
00002D14  4A80      5063          tst.l     D0
00002D16  6614      5064          bne.s     MemoryTest_29
                    5065   MemoryTest_30:
00002D18  0C82 0802 5066          cmp.l     #134348800,D2
00002D1C  0000      
00002D1E  650C      5067          blo.s     MemoryTest_29
00002D20  203C 0B00 5068          move.l    #184549376,D0
00002D24  0000      
00002D26  9084      5069          sub.l     D4,D0
00002D28  B480      5070          cmp.l     D0,D2
00002D2A  6316      5071          bls.s     MemoryTest_28
                    5072   MemoryTest_29:
                    5073   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    5074   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    5075   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    5076   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
00002D2C  4879 0000 5077          pea       @m68kde~1_150.L
00002D30  5846      
00002D32  4E92      5078          jsr       (A2)
00002D34  584F      5079          addq.w    #4,A7
                    5080   ; startAddressPtr =  Get8HexDigits(0);
00002D36  42A7      5081          clr.l     -(A7)
00002D38  4EB8 0CA4 5082          jsr       _Get8HexDigits
00002D3C  584F      5083          addq.w    #4,A7
00002D3E  2400      5084          move.l    D0,D2
00002D40  60B4      5085          bra       MemoryTest_26
                    5086   MemoryTest_28:
                    5087   ; }
                    5088   ; while (endAddressPtr == NULL || 
                    5089   MemoryTest_31:
00002D42  4A86      5090          tst.l     D6
00002D44  670A      5091          beq.s     MemoryTest_34
00002D46  202E FFF0 5092          move.l    -16(A6),D0
00002D4A  D084      5093          add.l     D4,D0
00002D4C  BC80      5094          cmp.l     D0,D6
00002D4E  6416      5095          bhs.s     MemoryTest_33
                    5096   MemoryTest_34:
                    5097   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    5098   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00002D50  4879 0000 5099          pea       @m68kde~1_151.L
00002D54  587E      
00002D56  4E92      5100          jsr       (A2)
00002D58  584F      5101          addq.w    #4,A7
                    5102   ; endAddressPtr =  Get8HexDigits(0);
00002D5A  42A7      5103          clr.l     -(A7)
00002D5C  4EB8 0CA4 5104          jsr       _Get8HexDigits
00002D60  584F      5105          addq.w    #4,A7
00002D62  2C00      5106          move.l    D0,D6
00002D64  60DC      5107          bra       MemoryTest_31
                    5108   MemoryTest_33:
                    5109   ; }
                    5110   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00002D66  2F02      5111          move.l    D2,-(A7)
00002D68  4879 0000 5112          pea       @m68kde~1_152.L
00002D6C  58B4      
00002D6E  4E92      5113          jsr       (A2)
00002D70  504F      5114          addq.w    #8,A7
                    5115   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
00002D72  2F06      5116          move.l    D6,-(A7)
00002D74  4879 0000 5117          pea       @m68kde~1_153.L
00002D78  58CC      
00002D7A  4E92      5118          jsr       (A2)
00002D7C  504F      5119          addq.w    #8,A7
                    5120   ; addrCount = 0;
00002D7E  42AE FFFC 5121          clr.l     -4(A6)
                    5122   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    5123   MemoryTest_35:
00002D82  B486      5124          cmp.l     D6,D2
00002D84  6400 0132 5125          bhs       MemoryTest_37
00002D88  2006      5126          move.l    D6,D0
00002D8A  9082      5127          sub.l     D2,D0
00002D8C  5280      5128          addq.l    #1,D0
00002D8E  B084      5129          cmp.l     D4,D0
00002D90  6500 0126 5130          blo       MemoryTest_37
                    5131   ; // If address goes beyond 0x0B00_0000 then break
                    5132   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
00002D94  203C 0B00 5133          move.l    #184549376,D0
00002D98  0000      
00002D9A  9084      5134          sub.l     D4,D0
00002D9C  B480      5135          cmp.l     D0,D2
00002D9E  6310      5136          bls.s     MemoryTest_38
                    5137   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
00002DA0  2F02      5138          move.l    D2,-(A7)
00002DA2  4879 0000 5139          pea       @m68kde~1_154.L
00002DA6  58E2      
00002DA8  4E92      5140          jsr       (A2)
00002DAA  504F      5141          addq.w    #8,A7
                    5142   ; break;
00002DAC  6000 010A 5143          bra       MemoryTest_37
                    5144   MemoryTest_38:
                    5145   ; }
                    5146   ; longAddressPtr = startAddressPtr;
00002DB0  2642      5147          move.l    D2,A3
                    5148   ; wordAddressPtr = startAddressPtr;
00002DB2  2842      5149          move.l    D2,A4
                    5150   ; if (dataSize == 0) {
00002DB4  4A85      5151          tst.l     D5
00002DB6  6600 0034 5152          bne       MemoryTest_40
                    5153   ; *startAddressPtr = dataPattern;
00002DBA  2042      5154          move.l    D2,A0
00002DBC  1083      5155          move.b    D3,(A0)
                    5156   ; if ((*startAddressPtr) != dataPattern) {
00002DBE  2042      5157          move.l    D2,A0
00002DC0  1010      5158          move.b    (A0),D0
00002DC2  C0BC 0000 5159          and.l     #255,D0
00002DC6  00FF      
00002DC8  B083      5160          cmp.l     D3,D0
00002DCA  671C      5161          beq.s     MemoryTest_42
                    5162   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002DCC  2F03      5163          move.l    D3,-(A7)
00002DCE  2042      5164          move.l    D2,A0
00002DD0  1210      5165          move.b    (A0),D1
00002DD2  C2BC 0000 5166          and.l     #255,D1
00002DD6  00FF      
00002DD8  2F01      5167          move.l    D1,-(A7)
00002DDA  2F02      5168          move.l    D2,-(A7)
00002DDC  4879 0000 5169          pea       @m68kde~1_155.L
00002DE0  5914      
00002DE2  4E92      5170          jsr       (A2)
00002DE4  DEFC 0010 5171          add.w     #16,A7
                    5172   MemoryTest_42:
00002DE8  6000 0058 5173          bra       MemoryTest_48
                    5174   MemoryTest_40:
                    5175   ; }
                    5176   ; } else if (dataSize == 1) {
00002DEC  0C85 0000 5177          cmp.l     #1,D5
00002DF0  0001      
00002DF2  662C      5178          bne.s     MemoryTest_44
                    5179   ; *wordAddressPtr = dataPattern;
00002DF4  3883      5180          move.w    D3,(A4)
                    5181   ; if ((*wordAddressPtr) != dataPattern) {
00002DF6  3014      5182          move.w    (A4),D0
00002DF8  C0BC 0000 5183          and.l     #65535,D0
00002DFC  FFFF      
00002DFE  B083      5184          cmp.l     D3,D0
00002E00  671C      5185          beq.s     MemoryTest_46
                    5186   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002E02  2F03      5187          move.l    D3,-(A7)
00002E04  2042      5188          move.l    D2,A0
00002E06  1210      5189          move.b    (A0),D1
00002E08  C2BC 0000 5190          and.l     #255,D1
00002E0C  00FF      
00002E0E  2F01      5191          move.l    D1,-(A7)
00002E10  2F02      5192          move.l    D2,-(A7)
00002E12  4879 0000 5193          pea       @m68kde~1_155.L
00002E16  5914      
00002E18  4E92      5194          jsr       (A2)
00002E1A  DEFC 0010 5195          add.w     #16,A7
                    5196   MemoryTest_46:
00002E1E  6022      5197          bra.s     MemoryTest_48
                    5198   MemoryTest_44:
                    5199   ; }
                    5200   ; } else {
                    5201   ; *longAddressPtr = dataPattern;
00002E20  2683      5202          move.l    D3,(A3)
                    5203   ; if ((*longAddressPtr) != dataPattern) {
00002E22  B693      5204          cmp.l     (A3),D3
00002E24  671C      5205          beq.s     MemoryTest_48
                    5206   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002E26  2F03      5207          move.l    D3,-(A7)
00002E28  2042      5208          move.l    D2,A0
00002E2A  1210      5209          move.b    (A0),D1
00002E2C  C2BC 0000 5210          and.l     #255,D1
00002E30  00FF      
00002E32  2F01      5211          move.l    D1,-(A7)
00002E34  2F02      5212          move.l    D2,-(A7)
00002E36  4879 0000 5213          pea       @m68kde~1_155.L
00002E3A  5914      
00002E3C  4E92      5214          jsr       (A2)
00002E3E  DEFC 0010 5215          add.w     #16,A7
                    5216   MemoryTest_48:
                    5217   ; }
                    5218   ; }
                    5219   ; // if ((*startAddressPtr) != dataPattern) {
                    5220   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    5221   ; // }
                    5222   ; addrCount++;
00002E42  52AE FFFC 5223          addq.l    #1,-4(A6)
                    5224   ; if (addrCount % 128 == 0) {
00002E46  2F2E FFFC 5225          move.l    -4(A6),-(A7)
00002E4A  4878 0080 5226          pea       128
00002E4E  4EB9 0000 5227          jsr       ULDIV
00002E52  319E      
00002E54  202F 0004 5228          move.l    4(A7),D0
00002E58  504F      5229          addq.w    #8,A7
00002E5A  4A80      5230          tst.l     D0
00002E5C  6600 0054 5231          bne       MemoryTest_55
                    5232   ; if (dataSize == 0) {
00002E60  4A85      5233          tst.l     D5
00002E62  661C      5234          bne.s     MemoryTest_52
                    5235   ; printf("Address: 0x%x Value: 0x%02X\n",
00002E64  2042      5236          move.l    D2,A0
00002E66  1210      5237          move.b    (A0),D1
00002E68  C2BC 0000 5238          and.l     #255,D1
00002E6C  00FF      
00002E6E  2F01      5239          move.l    D1,-(A7)
00002E70  2F02      5240          move.l    D2,-(A7)
00002E72  4879 0000 5241          pea       @m68kde~1_156.L
00002E76  595A      
00002E78  4E92      5242          jsr       (A2)
00002E7A  DEFC 000C 5243          add.w     #12,A7
00002E7E  6032      5244          bra.s     MemoryTest_55
                    5245   MemoryTest_52:
                    5246   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    5247   ; }
                    5248   ; else if (dataSize == 1) {
00002E80  0C85 0000 5249          cmp.l     #1,D5
00002E84  0001      
00002E86  661A      5250          bne.s     MemoryTest_54
                    5251   ; printf("Address: 0x%x Value: 0x%04X\n",
00002E88  3214      5252          move.w    (A4),D1
00002E8A  C2BC 0000 5253          and.l     #65535,D1
00002E8E  FFFF      
00002E90  2F01      5254          move.l    D1,-(A7)
00002E92  2F0C      5255          move.l    A4,-(A7)
00002E94  4879 0000 5256          pea       @m68kde~1_157.L
00002E98  5978      
00002E9A  4E92      5257          jsr       (A2)
00002E9C  DEFC 000C 5258          add.w     #12,A7
00002EA0  6010      5259          bra.s     MemoryTest_55
                    5260   MemoryTest_54:
                    5261   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    5262   ; }
                    5263   ; else {
                    5264   ; printf("Address: 0x%x Value: 0x%08X\n",
00002EA2  2F13      5265          move.l    (A3),-(A7)
00002EA4  2F0B      5266          move.l    A3,-(A7)
00002EA6  4879 0000 5267          pea       @m68kde~1_158.L
00002EAA  5996      
00002EAC  4E92      5268          jsr       (A2)
00002EAE  DEFC 000C 5269          add.w     #12,A7
                    5270   MemoryTest_55:
                    5271   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    5272   ; }
                    5273   ; }
                    5274   ; startAddressPtr += byteLength;
00002EB2  D484      5275          add.l     D4,D2
00002EB4  6000 FECC 5276          bra       MemoryTest_35
                    5277   MemoryTest_37:
00002EB8  4CDF 3CFC 5278          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002EBC  4E5E      5279          unlk      A6
00002EBE  4E75      5280          rts
                    5281   ; }
                    5282   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    5283   ; }
                    5284   ; void main(void)
                    5285   ; {
                    5286   _main:
00002EC0  4E56 FFF4 5287          link      A6,#-12
00002EC4  48E7 3030 5288          movem.l   D2/D3/A2/A3,-(A7)
00002EC8  45F8 0A30 5289          lea       _InstallExceptionHandler.L,A2
00002ECC  47F9 0000 5290          lea       _printf.L,A3
00002ED0  3C38      
                    5291   ; char c ;
                    5292   ; int i, j ;
                    5293   ; char *BugMessage = "DE1-68k Bug V1.77";
00002ED2  41F9 0000 5294          lea       @m68kde~1_159.L,A0
00002ED6  59B4      
00002ED8  2608      5295          move.l    A0,D3
                    5296   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002EDA  41F9 0000 5297          lea       @m68kde~1_160.L,A0
00002EDE  59C6      
00002EE0  2D48 FFFC 5298          move.l    A0,-4(A6)
                    5299   ; KillAllBreakPoints() ;
00002EE4  4EB8 2206 5300          jsr       _KillAllBreakPoints
                    5301   ; i = x = y = z = PortA_Count = 0;
00002EE8  42B9 0B00 5302          clr.l     _PortA_Count.L
00002EEC  00D4      
00002EEE  42B9 0B00 5303          clr.l     _z.L
00002EF2  00D0      
00002EF4  42B9 0B00 5304          clr.l     _y.L
00002EF8  00CC      
00002EFA  42B9 0B00 5305          clr.l     _x.L
00002EFE  00C8      
00002F00  4282      5306          clr.l     D2
                    5307   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002F02  42B9 0B00 5308          clr.l     _GoFlag.L
00002F06  00DC      
00002F08  42B9 0B00 5309          clr.l     _Trace.L
00002F0C  00D8      
                    5310   ; Echo = 1 ;
00002F0E  23FC 0000 5311          move.l    #1,_Echo.L
00002F12  0001 0B00 
00002F16  00E0      
                    5312   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002F18  42B9 0B00 5313          clr.l     _d7.L
00002F1C  0100      
00002F1E  42B9 0B00 5314          clr.l     _d6.L
00002F22  00FC      
00002F24  42B9 0B00 5315          clr.l     _d5.L
00002F28  00F8      
00002F2A  42B9 0B00 5316          clr.l     _d4.L
00002F2E  00F4      
00002F30  42B9 0B00 5317          clr.l     _d3.L
00002F34  00F0      
00002F36  42B9 0B00 5318          clr.l     _d2.L
00002F3A  00EC      
00002F3C  42B9 0B00 5319          clr.l     _d1.L
00002F40  00E8      
00002F42  42B9 0B00 5320          clr.l     _d0.L
00002F46  00E4      
                    5321   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002F48  42B9 0B00 5322          clr.l     _a6.L
00002F4C  011C      
00002F4E  42B9 0B00 5323          clr.l     _a5.L
00002F52  0118      
00002F54  42B9 0B00 5324          clr.l     _a4.L
00002F58  0114      
00002F5A  42B9 0B00 5325          clr.l     _a3.L
00002F5E  0110      
00002F60  42B9 0B00 5326          clr.l     _a2.L
00002F64  010C      
00002F66  42B9 0B00 5327          clr.l     _a1.L
00002F6A  0108      
00002F6C  42B9 0B00 5328          clr.l     _a0.L
00002F70  0104      
                    5329   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002F72  23FC 0800 5330          move.l    #134217728,_PC.L
00002F76  0000 0B00 
00002F7A  0120      
00002F7C  23FC 0C00 5331          move.l    #201326592,_SSP.L
00002F80  0000 0B00 
00002F84  0124      
00002F86  23FC 0C00 5332          move.l    #201326592,_USP.L
00002F8A  0000 0B00 
00002F8E  0128      
                    5333   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002F90  33FC 2000 5334          move.w    #8192,_SR.L
00002F94  0B00 012C 
                    5335   ; // Initialise Breakpoint variables
                    5336   ; for(i = 0; i < 8; i++)  {
00002F98  4282      5337          clr.l     D2
                    5338   main_1:
00002F9A  0C82 0000 5339          cmp.l     #8,D2
00002F9E  0008      
00002FA0  6C00 004C 5340          bge       main_3
                    5341   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002FA4  2002      5342          move.l    D2,D0
00002FA6  E588      5343          lsl.l     #2,D0
00002FA8  41F9 0B00 5344          lea       _BreakPointAddress.L,A0
00002FAC  012E      
00002FAE  42B0 0800 5345          clr.l     0(A0,D0.L)
                    5346   ; WatchPointAddress[i] = 0 ;
00002FB2  2002      5347          move.l    D2,D0
00002FB4  E588      5348          lsl.l     #2,D0
00002FB6  41F9 0B00 5349          lea       _WatchPointAddress.L,A0
00002FBA  0182      
00002FBC  42B0 0800 5350          clr.l     0(A0,D0.L)
                    5351   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002FC0  2002      5352          move.l    D2,D0
00002FC2  E388      5353          lsl.l     #1,D0
00002FC4  41F9 0B00 5354          lea       _BreakPointInstruction.L,A0
00002FC8  014E      
00002FCA  4270 0800 5355          clr.w     0(A0,D0.L)
                    5356   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002FCE  2002      5357          move.l    D2,D0
00002FD0  E588      5358          lsl.l     #2,D0
00002FD2  41F9 0B00 5359          lea       _BreakPointSetOrCleared.L,A0
00002FD6  015E      
00002FD8  42B0 0800 5360          clr.l     0(A0,D0.L)
                    5361   ; WatchPointSetOrCleared[i] = 0;
00002FDC  2002      5362          move.l    D2,D0
00002FDE  E588      5363          lsl.l     #2,D0
00002FE0  41F9 0B00 5364          lea       _WatchPointSetOrCleared.L,A0
00002FE4  01A2      
00002FE6  42B0 0800 5365          clr.l     0(A0,D0.L)
00002FEA  5282      5366          addq.l    #1,D2
00002FEC  60AC      5367          bra       main_1
                    5368   main_3:
                    5369   ; }
                    5370   ; Init_RS232() ;     // initialise the RS232 port
00002FEE  4EB8 0B12 5371          jsr       _Init_RS232
                    5372   ; Init_LCD() ;
00002FF2  4EB8 095E 5373          jsr       _Init_LCD
                    5374   ; SPI_Init();
00002FF6  4EB8 10FC 5375          jsr       _SPI_Init
                    5376   ; IIC_Init();
00002FFA  4EB8 1428 5377          jsr       _IIC_Init
                    5378   ; for( i = 32; i < 48; i++)
00002FFE  7420      5379          moveq     #32,D2
                    5380   main_4:
00003000  0C82 0000 5381          cmp.l     #48,D2
00003004  0030      
00003006  6C0E      5382          bge.s     main_6
                    5383   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00003008  2F02      5384          move.l    D2,-(A7)
0000300A  4878 2A7E 5385          pea       _UnhandledTrap.L
0000300E  4E92      5386          jsr       (A2)
00003010  504F      5387          addq.w    #8,A7
00003012  5282      5388          addq.l    #1,D2
00003014  60EA      5389          bra       main_4
                    5390   main_6:
                    5391   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00003016  4878 002F 5392          pea       47
0000301A  4878 2758 5393          pea       _menu.L
0000301E  4E92      5394          jsr       (A2)
00003020  504F      5395          addq.w    #8,A7
                    5396   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00003022  4878 0019 5397          pea       25
00003026  4878 2A24 5398          pea       _UnhandledIRQ1.L
0000302A  4E92      5399          jsr       (A2)
0000302C  504F      5400          addq.w    #8,A7
                    5401   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
0000302E  4878 001A 5402          pea       26
00003032  4878 2A30 5403          pea       _UnhandledIRQ2.L
00003036  4E92      5404          jsr       (A2)
00003038  504F      5405          addq.w    #8,A7
                    5406   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
0000303A  4878 001B 5407          pea       27
0000303E  4878 2A3C 5408          pea       _UnhandledIRQ3.L
00003042  4E92      5409          jsr       (A2)
00003044  504F      5410          addq.w    #8,A7
                    5411   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00003046  4878 001C 5412          pea       28
0000304A  4878 2A48 5413          pea       _UnhandledIRQ4.L
0000304E  4E92      5414          jsr       (A2)
00003050  504F      5415          addq.w    #8,A7
                    5416   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00003052  4878 001D 5417          pea       29
00003056  4878 2A54 5418          pea       _UnhandledIRQ5.L
0000305A  4E92      5419          jsr       (A2)
0000305C  504F      5420          addq.w    #8,A7
                    5421   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
0000305E  4878 001E 5422          pea       30
00003062  4878 2A60 5423          pea       _UnhandledIRQ6.L
00003066  4E92      5424          jsr       (A2)
00003068  504F      5425          addq.w    #8,A7
                    5426   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
0000306A  4878 001F 5427          pea       31
0000306E  4878 2A72 5428          pea       _UnhandledIRQ7.L
00003072  4E92      5429          jsr       (A2)
00003074  504F      5430          addq.w    #8,A7
                    5431   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00003076  4878 002E 5432          pea       46
0000307A  4878 2494 5433          pea       _HandleBreakPoint.L
0000307E  4E92      5434          jsr       (A2)
00003080  504F      5435          addq.w    #8,A7
                    5436   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00003082  4878 001D 5437          pea       29
00003086  4878 1B74 5438          pea       _DumpRegistersandPause.L
0000308A  4E92      5439          jsr       (A2)
0000308C  504F      5440          addq.w    #8,A7
                    5441   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
0000308E  4878 0002 5442          pea       2
00003092  4878 2A8C 5443          pea       _BusError.L
00003096  4E92      5444          jsr       (A2)
00003098  504F      5445          addq.w    #8,A7
                    5446   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
0000309A  4878 0003 5447          pea       3
0000309E  4878 2A9A 5448          pea       _AddressError.L
000030A2  4E92      5449          jsr       (A2)
000030A4  504F      5450          addq.w    #8,A7
                    5451   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
000030A6  4878 0004 5452          pea       4
000030AA  4878 2AA8 5453          pea       _IllegalInstruction.L
000030AE  4E92      5454          jsr       (A2)
000030B0  504F      5455          addq.w    #8,A7
                    5456   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
000030B2  4878 0005 5457          pea       5
000030B6  4878 2AB6 5458          pea       _Dividebyzero.L
000030BA  4E92      5459          jsr       (A2)
000030BC  504F      5460          addq.w    #8,A7
                    5461   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
000030BE  4878 0006 5462          pea       6
000030C2  4878 2AC4 5463          pea       _Check.L
000030C6  4E92      5464          jsr       (A2)
000030C8  504F      5465          addq.w    #8,A7
                    5466   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
000030CA  4878 0007 5467          pea       7
000030CE  4878 2AD2 5468          pea       _Trapv.L
000030D2  4E92      5469          jsr       (A2)
000030D4  504F      5470          addq.w    #8,A7
                    5471   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
000030D6  4878 0008 5472          pea       8
000030DA  4878 2AE0 5473          pea       _PrivError.L
000030DE  4E92      5474          jsr       (A2)
000030E0  504F      5475          addq.w    #8,A7
                    5476   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
000030E2  4878 000F 5477          pea       15
000030E6  4878 2AEE 5478          pea       _UnitIRQ.L
000030EA  4E92      5479          jsr       (A2)
000030EC  504F      5480          addq.w    #8,A7
                    5481   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
000030EE  4878 0018 5482          pea       24
000030F2  4878 2AC4 5483          pea       _Check.L
000030F6  4E92      5484          jsr       (A2)
000030F8  504F      5485          addq.w    #8,A7
                    5486   ; FlushKeyboard() ;                        // dump unread characters from keyboard
000030FA  4EB8 0BA6 5487          jsr       _FlushKeyboard
                    5488   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
000030FE  4239 0040 5489          clr.b     4194314
00003102  000A      
                    5490   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5491   ; if (((char)(PortB & 0x02)) == (char)(0x02))    {
00003104  1039 0040 5492          move.b    4194306,D0
00003108  0002      
0000310A  C03C 0002 5493          and.b     #2,D0
0000310E  0C00 0002 5494          cmp.b     #2,D0
00003112  6628      5495          bne.s     main_7
                    5496   ; LoadFromFlashChip();
00003114  4EB8 138A 5497          jsr       _LoadFromFlashChip
                    5498   ; printf("\r\nRunning.....") ;
00003118  4879 0000 5499          pea       @m68kde~1_161.L
0000311C  59E4      
0000311E  4E93      5500          jsr       (A3)
00003120  584F      5501          addq.w    #4,A7
                    5502   ; Oline1("Running.....") ;
00003122  4879 0000 5503          pea       @m68kde~1_162.L
00003126  59F4      
00003128  4EB8 0A02 5504          jsr       _Oline1
0000312C  584F      5505          addq.w    #4,A7
                    5506   ; GoFlag = 1;
0000312E  23FC 0000 5507          move.l    #1,_GoFlag.L
00003132  0001 0B00 
00003136  00DC      
                    5508   ; go() ;
00003138  4EB8 08B8 5509          jsr       _go
                    5510   main_7:
                    5511   ; }
                    5512   ; // otherwise start the debug monitor
                    5513   ; Oline0(BugMessage) ;
0000313C  2F03      5514          move.l    D3,-(A7)
0000313E  4EB8 09D4 5515          jsr       _Oline0
00003142  584F      5516          addq.w    #4,A7
                    5517   ; Oline1("By: PJ Davies") ;
00003144  4879 0000 5518          pea       @m68kde~1_163.L
00003148  5A02      
0000314A  4EB8 0A02 5519          jsr       _Oline1
0000314E  584F      5520          addq.w    #4,A7
                    5521   ; printf("\r\n%s", BugMessage) ;
00003150  2F03      5522          move.l    D3,-(A7)
00003152  4879 0000 5523          pea       @m68kde~1_164.L
00003156  5A10      
00003158  4E93      5524          jsr       (A3)
0000315A  504F      5525          addq.w    #8,A7
                    5526   ; printf("\r\n%s", CopyrightMessage) ;
0000315C  2F2E FFFC 5527          move.l    -4(A6),-(A7)
00003160  4879 0000 5528          pea       @m68kde~1_164.L
00003164  5A10      
00003166  4E93      5529          jsr       (A3)
00003168  504F      5530          addq.w    #8,A7
                    5531   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
0000316A  4879 0000 5532          pea       @m68kde~1_165.L
0000316E  5A16      
00003170  4E93      5533          jsr       (A3)
00003172  584F      5534          addq.w    #4,A7
                    5535   ; printf("Initializing i2c test...\n");
00003174  4879 0000 5536          pea       @m68kde~1_166.L
00003178  5A5E      
0000317A  4E93      5537          jsr       (A3)
0000317C  584F      5538          addq.w    #4,A7
                    5539   ; I2CTest();
0000317E  4EB8 15FC 5540          jsr       _I2CTest
                    5541   ; menu();
00003182  4EB8 2758 5542          jsr       _menu
00003186  4CDF 0C0C 5543          movem.l   (A7)+,D2/D3/A2/A3
0000318A  4E5E      5544          unlk      A6
0000318C  4E75      5545          rts
                    5546   ; }
                    5547   _strcpy:
0000318E  206F 0004 5548          move.l    (4,A7),A0
00003192  226F 0008 5549          move.l    (8,A7),A1
00003196  2008      5550          move.l    A0,D0
                    5551   strcpy_1:
00003198  10D9      5552          move.b    (A1)+,(A0)+
0000319A  66FC      5553          bne       strcpy_1
0000319C  4E75      5554          rts
                    5555   ULDIV:
0000319E  4E56 0000 5556          link    A6,#0
000031A2  48E7 C000 5557          movem.l D0/D1,-(A7)
000031A6  222E 0008 5558          move.l  8(A6),D1
000031AA  202E 000C 5559          move.l  12(A6),D0
000031AE  6036      5560          bra.s   ldiv_3
                    5561   LDIV:
000031B0  4E56 0000 5562          link    A6,#0
000031B4  48E7 C000 5563          movem.l D0/D1,-(A7)
000031B8  222E 0008 5564          move.l  8(A6),D1
000031BC  202E 000C 5565          move.l  12(A6),D0
000031C0  4A80      5566          tst.l   D0
000031C2  6A0E      5567          bpl.s   ldiv_1
000031C4  4480      5568          neg.l   D0
000031C6  4A81      5569          tst.l   D1
000031C8  6A14      5570          bpl.s   ldiv_2
000031CA  4481      5571          neg.l   D1
000031CC  612A      5572          bsr.s   dodiv
000031CE  4481      5573          neg.l   D1
000031D0  6016      5574          bra.s   ldiv_4
                    5575   ldiv_1:
000031D2  4A81      5576          tst.l   D1
000031D4  6A10      5577          bpl.s   ldiv_3
000031D6  4481      5578          neg.l   D1
000031D8  611E      5579          bsr.s   dodiv
000031DA  4480      5580          neg.l   D0
000031DC  600A      5581          bra.s   ldiv_4
                    5582   ldiv_2:
000031DE  6118      5583          bsr.s   dodiv
000031E0  4480      5584          neg.l   D0
000031E2  4481      5585          neg.l   D1
000031E4  6002      5586          bra.s   ldiv_4
                    5587   ldiv_3:
000031E6  6110      5588          bsr.s   dodiv
                    5589   ldiv_4:
000031E8  2D40 0008 5590          move.l  D0,8(A6)
000031EC  2D41 000C 5591          move.l  D1,12(A6)
000031F0  4CDF 0003 5592          movem.l (A7)+,D0/D1
000031F4  4E5E      5593          unlk    A6
000031F6  4E75      5594          rts
                    5595   dodiv:
000031F8  0C81 0000 5596          cmpi.l  #$FFFF,D1
000031FC  FFFF      
000031FE  6236      5597          bhi.s   dodiv_2
00003200  0C80 0000 5598          cmpi.l  #$FFFF,D0
00003204  FFFF      
00003206  6210      5599          bhi.s   dodiv_1
00003208  80C1      5600          divu    D1,D0
0000320A  2200      5601          move.l  D0,D1
0000320C  4241      5602          clr.w   D1
0000320E  4841      5603          swap    D1
00003210  0280 0000 5604          andi.l  #$FFFF,D0
00003214  FFFF      
00003216  4E75      5605          rts
                    5606   dodiv_1:
00003218  48A7 A000 5607          movem.w D0/D2,-(A7)
0000321C  4240      5608          clr.w   D0
0000321E  4840      5609          swap    D0
00003220  80C1      5610          divu    D1,D0
00003222  3400      5611          move.w  D0,D2
00003224  301F      5612          move.w  (A7)+,D0
00003226  80C1      5613          divu    D1,D0
00003228  4840      5614          swap    D0
0000322A  4281      5615          clr.l   D1
0000322C  3200      5616          move.w  D0,D1
0000322E  3002      5617          move.w  D2,D0
00003230  4840      5618          swap    D0
00003232  341F      5619          move.w  (A7)+,D2
00003234  4E75      5620          rts
                    5621   dodiv_2:
00003236  48E7 3800 5622          movem.l D2/D3/D4,-(A7)
0000323A  2401      5623          move.l  D1,D2
0000323C  4242      5624          clr.w   D2
0000323E  4842      5625          swap    D2
00003240  5282      5626          addq.l  #1,D2
00003242  2600      5627          move.l  D0,D3
00003244  2801      5628          move.l  D1,D4
00003246  2202      5629          move.l  D2,D1
00003248  61CE      5630          bsr.s   dodiv_1
0000324A  2204      5631          move.l  D4,D1
0000324C  82C2      5632          divu    D2,D1
0000324E  80C1      5633          divu    D1,D0
00003250  0280 0000 5634          andi.l  #$FFFF,D0
00003254  FFFF      
                    5635   dodiv_3:
00003256  2204      5636          move.l  D4,D1
00003258  2404      5637          move.l  D4,D2
0000325A  4842      5638          swap    D2
0000325C  C2C0      5639          mulu    D0,D1
0000325E  C4C0      5640          mulu    D0,D2
00003260  4842      5641          swap    D2
00003262  D282      5642          add.l   D2,D1
00003264  9283      5643          sub.l   D3,D1
00003266  620A      5644          bhi.s   dodiv_4
00003268  4481      5645          neg.l   D1
0000326A  B881      5646          cmp.l   D1,D4
0000326C  6208      5647          bhi.s   dodiv_5
0000326E  5280      5648          addq.l  #1,D0
00003270  60E4      5649          bra.s   dodiv_3
                    5650   dodiv_4:
00003272  5380      5651          subq.l  #1,D0
00003274  60E0      5652          bra.s   dodiv_3
                    5653   dodiv_5:
00003276  4CDF 001C 5654          movem.l (A7)+,D2/D3/D4
0000327A  4E75      5655          rts
                    5656   _putch:
0000327C  4E56 0000 5657          link      A6,#0
00003280  48E7 2000 5658          movem.l   D2,-(A7)
00003284  242E 0008 5659          move.l    8(A6),D2
00003288  0C82 0000 5660          cmp.l     #10,D2
0000328C  000A      
0000328E  660A      5661          bne.s     putch_1
00003290  4878 000D 5662          pea       13
00003294  6100 D8A6 5663          bsr       __putch
00003298  584F      5664          addq.w    #4,A7
                    5665   putch_1:
0000329A  2F02      5666          move.l    D2,-(A7)
0000329C  6100 D89E 5667          bsr       __putch
000032A0  584F      5668          addq.w    #4,A7
000032A2  2002      5669          move.l    D2,D0
000032A4  4CDF 0004 5670          movem.l   (A7)+,D2
000032A8  4E5E      5671          unlk      A6
000032AA  4E75      5672          rts
                    5673   _getch:
000032AC  48E7 2000 5674          movem.l   D2,-(A7)
000032B0  2439 0B00 5675          move.l    __ungetbuf,D2
000032B4  00C0      
000032B6  2039 0B00 5676          move.l    __ungetbuf,D0
000032BA  00C0      
000032BC  0C80 FFFF 5677          cmp.l     #-1,D0
000032C0  FFFF      
000032C2  670C      5678          beq.s     getch_1
000032C4  23FC FFFF 5679          move.l    #-1,__ungetbuf
000032C8  FFFF 0B00 
000032CC  00C0      
000032CE  6010      5680          bra.s     getch_3
                    5681   getch_1:
000032D0  6100 D896 5682          bsr       __getch
000032D4  2400      5683          move.l    D0,D2
000032D6  0C80 0000 5684          cmp.l     #13,D0
000032DA  000D      
000032DC  6602      5685          bne.s     getch_3
000032DE  740A      5686          moveq     #10,D2
                    5687   getch_3:
000032E0  2002      5688          move.l    D2,D0
000032E2  4CDF 0004 5689          movem.l   (A7)+,D2
000032E6  4E75      5690          rts
                    5691   _tolower:
000032E8  4E56 0000 5692          link      A6,#0
000032EC  48E7 2000 5693          movem.l   D2,-(A7)
000032F0  242E 0008 5694          move.l    8(A6),D2
000032F4  0C82 0000 5695          cmp.l     #65,D2
000032F8  0041      
000032FA  6D0E      5696          blt.s     tolower_1
000032FC  0C82 0000 5697          cmp.l     #90,D2
00003300  005A      
00003302  6E06      5698          bgt.s     tolower_1
00003304  84BC 0000 5699          or.l      #32,D2
00003308  0020      
                    5700   tolower_1:
0000330A  2002      5701          move.l    D2,D0
0000330C  4CDF 0004 5702          movem.l   (A7)+,D2
00003310  4E5E      5703          unlk      A6
00003312  4E75      5704          rts
                    5705   _sprintf:
00003314  4E56 FFFC 5706          link      A6,#-4
00003318  48E7 2000 5707          movem.l   D2,-(A7)
0000331C  41EE 000C 5708          lea       12(A6),A0
00003320  5848      5709          addq.w    #4,A0
00003322  2408      5710          move.l    A0,D2
00003324  2F02      5711          move.l    D2,-(A7)
00003326  2F2E 000C 5712          move.l    12(A6),-(A7)
0000332A  2F2E 0008 5713          move.l    8(A6),-(A7)
0000332E  6100 09EC 5714          bsr       _vsprintf
00003332  DEFC 000C 5715          add.w     #12,A7
00003336  2D40 FFFC 5716          move.l    D0,-4(A6)
0000333A  4282      5717          clr.l     D2
0000333C  202E FFFC 5718          move.l    -4(A6),D0
00003340  4CDF 0004 5719          movem.l   (A7)+,D2
00003344  4E5E      5720          unlk      A6
00003346  4E75      5721          rts
                    5722   _memset:
00003348  206F 0004 5723          move.l    (4,A7),A0
0000334C  202F 0008 5724          move.l    (8,A7),D0
00003350  222F 000C 5725          move.l    (12,A7),D1
00003354  2248      5726          move.l    A0,A1	
                    5727   memset_1:
00003356  12C0      5728          move.b    D0,(A1)+
00003358  5341      5729          subq      #1,D1
0000335A  66FA      5730          bne       memset_1
0000335C  2008      5731          move.l    A0,D0
0000335E  4E75      5732          rts
                    5733   _strcat:
00003360  206F 0004 5734          move.l    (4,A7),A0	
00003364  226F 0008 5735          move.l    (8,A7),A1	
00003368  2008      5736          move.l    A0,D0		
                    5737   strcat_0:
0000336A  4A18      5738          tst.b     (A0)+
0000336C  66FC      5739          bne       strcat_0
0000336E  5348      5740          subq      #1,A0
                    5741   strcat_1:
00003370  10D9      5742          move.b    (A1)+,(A0)+
00003372  66FC      5743          bne       strcat_1
00003374  4E75      5744          rts
                    5745   _toupper:
00003376  4E56 0000 5746          link      A6,#0
0000337A  48E7 2000 5747          movem.l   D2,-(A7)
0000337E  242E 0008 5748          move.l    8(A6),D2
00003382  0C82 0000 5749          cmp.l     #97,D2
00003386  0061      
00003388  6D0E      5750          blt.s     toupper_1
0000338A  0C82 0000 5751          cmp.l     #122,D2
0000338E  007A      
00003390  6E06      5752          bgt.s     toupper_1
00003392  C4BC 0000 5753          and.l     #95,D2
00003396  005F      
                    5754   toupper_1:
00003398  2002      5755          move.l    D2,D0
0000339A  4CDF 0004 5756          movem.l   (A7)+,D2
0000339E  4E5E      5757          unlk      A6
000033A0  4E75      5758          rts
                    5759   @vsscanf_scanread:
000033A2  4E56 FFFC 5760          link      A6,#-4
000033A6  48E7 0020 5761          movem.l   A2,-(A7)
000033AA  45F9 0000 5762          lea       @vsscanf_bufx,A2
000033AE  5A8C      
000033B0  4AAE 0008 5763          tst.l     8(A6)
000033B4  6722      5764          beq.s     @vsscanf_scanread_1
000033B6  206E 0008 5765          move.l    8(A6),A0
000033BA  58AE 0008 5766          addq.l    #4,8(A6)
000033BE  2050      5767          move.l    (A0),A0
000033C0  1010      5768          move.b    (A0),D0
000033C2  4880      5769          ext.w     D0
000033C4  48C0      5770          ext.l     D0
000033C6  2D40 FFFC 5771          move.l    D0,-4(A6)
000033CA  6706      5772          beq.s     @vsscanf_scanread_3
000033CC  202E FFFC 5773          move.l    -4(A6),D0
000033D0  6002      5774          bra.s     @vsscanf_scanread_4
                    5775   @vsscanf_scanread_3:
000033D2  70FF      5776          moveq     #-1,D0
                    5777   @vsscanf_scanread_4:
000033D4  6000 0032 5778          bra       @vsscanf_scanread_5
                    5779   @vsscanf_scanread_1:
000033D8  2052      5780          move.l    (A2),A0
000033DA  1010      5781          move.b    (A0),D0
000033DC  6620      5782          bne.s     @vsscanf_scanread_6
000033DE  4879 0B00 5783          pea       @vsscanf_buf
000033E2  0546      
000033E4  6100 1038 5784          bsr       _gets
000033E8  584F      5785          addq.w    #4,A7
000033EA  2480      5786          move.l    D0,(A2)
000033EC  4879 0000 5787          pea       @vsscanf_1
000033F0  5A90      
000033F2  4879 0B00 5788          pea       @vsscanf_buf
000033F6  0546      
000033F8  6100 FF66 5789          bsr       _strcat
000033FC  504F      5790          addq.w    #8,A7
                    5791   @vsscanf_scanread_6:
000033FE  2052      5792          move.l    (A2),A0
00003400  5292      5793          addq.l    #1,(A2)
00003402  1010      5794          move.b    (A0),D0
00003404  4880      5795          ext.w     D0
00003406  48C0      5796          ext.l     D0
                    5797   @vsscanf_scanread_5:
00003408  4CDF 0400 5798          movem.l   (A7)+,A2
0000340C  4E5E      5799          unlk      A6
0000340E  4E75      5800          rts
                    5801   @vsscanf_scanputback:
00003410  4E56 0000 5802          link      A6,#0
00003414  48E7 3000 5803          movem.l   D2/D3,-(A7)
00003418  242E 000C 5804          move.l    12(A6),D2
0000341C  262E 0008 5805          move.l    8(A6),D3
00003420  6718      5806          beq.s     @vsscanf_scanputback_1
00003422  0C82 FFFF 5807          cmp.l     #-1,D2
00003426  FFFF      
00003428  670A      5808          beq.s     @vsscanf_scanputback_3
0000342A  5983      5809          subq.l    #4,D3
0000342C  2043      5810          move.l    D3,A0
0000342E  2050      5811          move.l    (A0),A0
00003430  1082      5812          move.b    D2,(A0)
00003432  6004      5813          bra.s     @vsscanf_scanputback_4
                    5814   @vsscanf_scanputback_3:
00003434  2043      5815          move.l    D3,A0
00003436  5390      5816          subq.l    #1,(A0)
                    5817   @vsscanf_scanputback_4:
00003438  602E      5818          bra.s     @vsscanf_scanputback_6
                    5819   @vsscanf_scanputback_1:
0000343A  41F9 0B00 5820          lea       @vsscanf_buf,A0
0000343E  0546      
00003440  2008      5821          move.l    A0,D0
00003442  B0B9 0000 5822          cmp.l     @vsscanf_bufx,D0
00003446  5A8C      
00003448  6610      5823          bne.s     @vsscanf_scanputback_5
0000344A  4239 0B00 5824          clr.b     @vsscanf_buf
0000344E  0546      
00003450  2F02      5825          move.l    D2,-(A7)
00003452  6100 103C 5826          bsr       _ungetch
00003456  584F      5827          addq.w    #4,A7
00003458  600E      5828          bra.s     @vsscanf_scanputback_6
                    5829   @vsscanf_scanputback_5:
0000345A  53B9 0000 5830          subq.l    #1,@vsscanf_bufx
0000345E  5A8C      
00003460  2079 0000 5831          move.l    @vsscanf_bufx,A0
00003464  5A8C      
00003466  1082      5832          move.b    D2,(A0)
                    5833   @vsscanf_scanputback_6:
00003468  2002      5834          move.l    D2,D0
0000346A  4CDF 000C 5835          movem.l   (A7)+,D2/D3
0000346E  4E5E      5836          unlk      A6
00003470  4E75      5837          rts
                    5838   @vsscanf_scanspace:
00003472  4E56 0000 5839          link      A6,#0
00003476  48E7 2000 5840          movem.l   D2,-(A7)
                    5841   @vsscanf_scanspace_1:
0000347A  2F2E 0008 5842          move.l    8(A6),-(A7)
0000347E  6100 FF22 5843          bsr       @vsscanf_scanread
00003482  584F      5844          addq.w    #4,A7
00003484  2400      5845          move.l    D0,D2
00003486  206E 000C 5846          move.l    12(A6),A0
0000348A  5290      5847          addq.l    #1,(A0)
0000348C  2042      5848          move.l    D2,A0
0000348E  43F9 0000 5849          lea       __ctype,A1
00003492  5A92      
00003494  1030 9801 5850          move.b    1(A0,A1.L),D0
00003498  C03C 0010 5851          and.b     #16,D0
0000349C  66DC      5852          bne       @vsscanf_scanspace_1
0000349E  2002      5853          move.l    D2,D0
000034A0  4CDF 0004 5854          movem.l   (A7)+,D2
000034A4  4E5E      5855          unlk      A6
000034A6  4E75      5856          rts
                    5857   @vsscanf_scanselect:
000034A8  4E56 0000 5858          link      A6,#0
000034AC  48E7 3F20 5859          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
000034B0  262E 000C 5860          move.l    12(A6),D3
000034B4  2C2E 0018 5861          move.l    24(A6),D6
000034B8  2E2E 0014 5862          move.l    20(A6),D7
000034BC  2043      5863          move.l    D3,A0
000034BE  1010      5864          move.b    (A0),D0
000034C0  4880      5865          ext.w     D0
000034C2  48C0      5866          ext.l     D0
000034C4  0C80 0000 5867          cmp.l     #94,D0
000034C8  005E      
000034CA  6608      5868          bne.s     @vsscanf_scanselect_1
000034CC  347C 0001 5869          move.w    #1,A2
000034D0  5283      5870          addq.l    #1,D3
000034D2  6004      5871          bra.s     @vsscanf_scanselect_2
                    5872   @vsscanf_scanselect_1:
000034D4  347C 0000 5873          move.w    #0,A2
                    5874   @vsscanf_scanselect_2:
000034D8  202E 0010 5875          move.l    16(A6),D0
000034DC  53AE 0010 5876          subq.l    #1,16(A6)
000034E0  4A80      5877          tst.l     D0
000034E2  6700 0108 5878          beq       @vsscanf_scanselect_5
000034E6  2F2E 0008 5879          move.l    8(A6),-(A7)
000034EA  6100 FEB6 5880          bsr       @vsscanf_scanread
000034EE  584F      5881          addq.w    #4,A7
000034F0  2800      5882          move.l    D0,D4
000034F2  0C84 FFFF 5883          cmp.l     #-1,D4
000034F6  FFFF      
000034F8  6604      5884          bne.s     @vsscanf_scanselect_6
000034FA  6000 00F0 5885          bra       @vsscanf_scanselect_5
                    5886   @vsscanf_scanselect_6:
000034FE  206E 001C 5887          move.l    28(A6),A0
00003502  5290      5888          addq.l    #1,(A0)
00003504  4285      5889          clr.l     D5
00003506  4282      5890          clr.l     D2
                    5891   @vsscanf_scanselect_8:
00003508  2043      5892          move.l    D3,A0
0000350A  1030 2800 5893          move.b    0(A0,D2.L),D0
0000350E  4880      5894          ext.w     D0
00003510  48C0      5895          ext.l     D0
00003512  0C80 0000 5896          cmp.l     #93,D0
00003516  005D      
00003518  6700 008E 5897          beq       @vsscanf_scanselect_10
0000351C  4A82      5898          tst.l     D2
0000351E  6716      5899          beq.s     @vsscanf_scanselect_11
00003520  2043      5900          move.l    D3,A0
00003522  1030 2800 5901          move.b    0(A0,D2.L),D0
00003526  4880      5902          ext.w     D0
00003528  48C0      5903          ext.l     D0
0000352A  0C80 0000 5904          cmp.l     #93,D0
0000352E  005D      
00003530  6604      5905          bne.s     @vsscanf_scanselect_11
00003532  6000 0074 5906          bra       @vsscanf_scanselect_10
                    5907   @vsscanf_scanselect_11:
00003536  4A82      5908          tst.l     D2
00003538  6700 0058 5909          beq       @vsscanf_scanselect_15
0000353C  2043      5910          move.l    D3,A0
0000353E  1030 2800 5911          move.b    0(A0,D2.L),D0
00003542  4880      5912          ext.w     D0
00003544  48C0      5913          ext.l     D0
00003546  0C80 0000 5914          cmp.l     #45,D0
0000354A  002D      
0000354C  6600 0044 5915          bne       @vsscanf_scanselect_15
00003550  2043      5916          move.l    D3,A0
00003552  2002      5917          move.l    D2,D0
00003554  5380      5918          subq.l    #1,D0
00003556  2243      5919          move.l    D3,A1
00003558  2F08      5920          move.l    A0,-(A7)
0000355A  2042      5921          move.l    D2,A0
0000355C  1230 0800 5922          move.b    0(A0,D0.L),D1
00003560  B230 9801 5923          cmp.b     1(A0,A1.L),D1
00003564  6C00 002C 5924          bge       @vsscanf_scanselect_15
00003568  205F      5925          move.l    (A7)+,A0
0000356A  2043      5926          move.l    D3,A0
0000356C  2002      5927          move.l    D2,D0
0000356E  5380      5928          subq.l    #1,D0
00003570  1030 0800 5929          move.b    0(A0,D0.L),D0
00003574  4880      5930          ext.w     D0
00003576  48C0      5931          ext.l     D0
00003578  B880      5932          cmp.l     D0,D4
0000357A  6D12      5933          blt.s     @vsscanf_scanselect_17
0000357C  2043      5934          move.l    D3,A0
0000357E  2242      5935          move.l    D2,A1
00003580  1031 8801 5936          move.b    1(A1,A0.L),D0
00003584  4880      5937          ext.w     D0
00003586  48C0      5938          ext.l     D0
00003588  B880      5939          cmp.l     D0,D4
0000358A  6E02      5940          bgt.s     @vsscanf_scanselect_17
0000358C  601A      5941          bra.s     @vsscanf_scanselect_10
                    5942   @vsscanf_scanselect_17:
0000358E  5282      5943          addq.l    #1,D2
00003590  6010      5944          bra.s     @vsscanf_scanselect_19
                    5945   @vsscanf_scanselect_15:
00003592  2043      5946          move.l    D3,A0
00003594  1030 2800 5947          move.b    0(A0,D2.L),D0
00003598  4880      5948          ext.w     D0
0000359A  48C0      5949          ext.l     D0
0000359C  B880      5950          cmp.l     D0,D4
0000359E  6602      5951          bne.s     @vsscanf_scanselect_19
000035A0  6006      5952          bra.s     @vsscanf_scanselect_10
                    5953   @vsscanf_scanselect_19:
000035A2  5282      5954          addq.l    #1,D2
000035A4  6000 FF62 5955          bra       @vsscanf_scanselect_8
                    5956   @vsscanf_scanselect_10:
000035A8  4A82      5957          tst.l     D2
000035AA  6712      5958          beq.s     @vsscanf_scanselect_23
000035AC  2043      5959          move.l    D3,A0
000035AE  1030 2800 5960          move.b    0(A0,D2.L),D0
000035B2  4880      5961          ext.w     D0
000035B4  48C0      5962          ext.l     D0
000035B6  0C80 0000 5963          cmp.l     #93,D0
000035BA  005D      
000035BC  6702      5964          beq.s     @vsscanf_scanselect_21
                    5965   @vsscanf_scanselect_23:
000035BE  7A01      5966          moveq     #1,D5
                    5967   @vsscanf_scanselect_21:
000035C0  200A      5968          move.l    A2,D0
000035C2  6712      5969          beq.s     @vsscanf_scanselect_24
000035C4  4A85      5970          tst.l     D5
000035C6  660C      5971          bne.s     @vsscanf_scanselect_26
000035C8  4A87      5972          tst.l     D7
000035CA  6606      5973          bne.s     @vsscanf_scanselect_28
000035CC  2046      5974          move.l    D6,A0
000035CE  5286      5975          addq.l    #1,D6
000035D0  1084      5976          move.b    D4,(A0)
                    5977   @vsscanf_scanselect_28:
000035D2  6014      5978          bra.s     @vsscanf_scanselect_4
                    5979   @vsscanf_scanselect_26:
000035D4  6016      5980          bra.s     @vsscanf_scanselect_5
                    5981   @vsscanf_scanselect_24:
000035D6  4A85      5982          tst.l     D5
000035D8  670C      5983          beq.s     @vsscanf_scanselect_30
000035DA  4A87      5984          tst.l     D7
000035DC  6606      5985          bne.s     @vsscanf_scanselect_32
000035DE  2046      5986          move.l    D6,A0
000035E0  5286      5987          addq.l    #1,D6
000035E2  1084      5988          move.b    D4,(A0)
                    5989   @vsscanf_scanselect_32:
000035E4  6002      5990          bra.s     @vsscanf_scanselect_4
                    5991   @vsscanf_scanselect_30:
000035E6  6004      5992          bra.s     @vsscanf_scanselect_5
                    5993   @vsscanf_scanselect_4:
000035E8  6000 FEEE 5994          bra       @vsscanf_scanselect_2
                    5995   @vsscanf_scanselect_5:
000035EC  0C84 FFFF 5996          cmp.l     #-1,D4
000035F0  FFFF      
000035F2  6712      5997          beq.s     @vsscanf_scanselect_34
000035F4  2F04      5998          move.l    D4,-(A7)
000035F6  2F2E 0008 5999          move.l    8(A6),-(A7)
000035FA  6100 FE14 6000          bsr       @vsscanf_scanputback
000035FE  504F      6001          addq.w    #8,A7
00003600  206E 001C 6002          move.l    28(A6),A0
00003604  5390      6003          subq.l    #1,(A0)
                    6004   @vsscanf_scanselect_34:
00003606  4A87      6005          tst.l     D7
00003608  6604      6006          bne.s     @vsscanf_scanselect_36
0000360A  2046      6007          move.l    D6,A0
0000360C  4210      6008          clr.b     (A0)
                    6009   @vsscanf_scanselect_36:
0000360E  5283      6010          addq.l    #1,D3
00003610  2043      6011          move.l    D3,A0
00003612  1010      6012          move.b    (A0),D0
00003614  4880      6013          ext.w     D0
00003616  48C0      6014          ext.l     D0
00003618  0C80 0000 6015          cmp.l     #93,D0
0000361C  005D      
0000361E  6702      6016          beq.s     @vsscanf_scanselect_40
00003620  60EC      6017          bra       @vsscanf_scanselect_36
                    6018   @vsscanf_scanselect_40:
00003622  5283      6019          addq.l    #1,D3
00003624  2003      6020          move.l    D3,D0
00003626  4CDF 04FC 6021          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
0000362A  4E5E      6022          unlk      A6
0000362C  4E75      6023          rts
                    6024   _scanflush:
0000362E  41F9 0B00 6025          lea       @vsscanf_buf,A0
00003632  0546      
00003634  23C8 0000 6026          move.l    A0,@vsscanf_bufx
00003638  5A8C      
0000363A  4239 0B00 6027          clr.b     @vsscanf_buf
0000363E  0546      
00003640  4878 FFFF 6028          pea       -1
00003644  6100 0E4A 6029          bsr       _ungetch
00003648  584F      6030          addq.w    #4,A7
0000364A  4E75      6031          rts
                    6032   _vsscanf:
0000364C  4E56 FF88 6033          link      A6,#-120
00003650  48E7 3F3C 6034          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003654  47F8 33A2 6035          lea       @vsscanf_scanread,A3
00003658  4AAE 0008 6036          tst.l     8(A6)
0000365C  6706      6037          beq.s     vsscanf_1
0000365E  41EE 0008 6038          lea       8(A6),A0
00003662  6004      6039          bra.s     vsscanf_2
                    6040   vsscanf_1:
00003664  4280      6041          clr.l     D0
00003666  2040      6042          move.l    D0,A0
                    6043   vsscanf_2:
00003668  2A08      6044          move.l    A0,D5
0000366A  42AE FFE4 6045          clr.l     -28(A6)
0000366E  4284      6046          clr.l     D4
                    6047   vsscanf_3:
00003670  206E 000C 6048          move.l    12(A6),A0
00003674  52AE 000C 6049          addq.l    #1,12(A6)
00003678  1010      6050          move.b    (A0),D0
0000367A  4880      6051          ext.w     D0
0000367C  48C0      6052          ext.l     D0
0000367E  2600      6053          move.l    D0,D3
00003680  6700 05AC 6054          beq       vsscanf_5
00003684  4286      6055          clr.l     D6
00003686  387C 0000 6056          move.w    #0,A4
0000368A  0C83 0000 6057          cmp.l     #32,D3
0000368E  0020      
00003690  6712      6058          beq.s     vsscanf_8
00003692  0C83 0000 6059          cmp.l     #9,D3
00003696  0009      
00003698  670A      6060          beq.s     vsscanf_8
0000369A  0C83 0000 6061          cmp.l     #10,D3
0000369E  000A      
000036A0  6600 0048 6062          bne       vsscanf_6
                    6063   vsscanf_8:
000036A4  2F05      6064          move.l    D5,-(A7)
000036A6  4E93      6065          jsr       (A3)
000036A8  584F      6066          addq.w    #4,A7
000036AA  2400      6067          move.l    D0,D2
000036AC  52AE FFE4 6068          addq.l    #1,-28(A6)
000036B0  0C82 FFFF 6069          cmp.l     #-1,D2
000036B4  FFFF      
000036B6  660E      6070          bne.s     vsscanf_11
000036B8  4A84      6071          tst.l     D4
000036BA  6704      6072          beq.s     vsscanf_13
000036BC  2004      6073          move.l    D4,D0
000036BE  6002      6074          bra.s     vsscanf_14
                    6075   vsscanf_13:
000036C0  70FF      6076          moveq     #-1,D0
                    6077   vsscanf_14:
000036C2  6000 056C 6078          bra       vsscanf_15
                    6079   vsscanf_11:
000036C6  2042      6080          move.l    D2,A0
000036C8  43F9 0000 6081          lea       __ctype,A1
000036CC  5A92      
000036CE  1030 9801 6082          move.b    1(A0,A1.L),D0
000036D2  C03C 0010 6083          and.b     #16,D0
000036D6  66CC      6084          bne       vsscanf_8
000036D8  53AE FFE4 6085          subq.l    #1,-28(A6)
000036DC  2F02      6086          move.l    D2,-(A7)
000036DE  2F05      6087          move.l    D5,-(A7)
000036E0  6100 FD2E 6088          bsr       @vsscanf_scanputback
000036E4  504F      6089          addq.w    #8,A7
000036E6  6000 0542 6090          bra       vsscanf_139
                    6091   vsscanf_6:
000036EA  0C83 0000 6092          cmp.l     #37,D3
000036EE  0025      
000036F0  6600 0502 6093          bne       vsscanf_127
000036F4  206E 000C 6094          move.l    12(A6),A0
000036F8  52AE 000C 6095          addq.l    #1,12(A6)
000036FC  1010      6096          move.b    (A0),D0
000036FE  4880      6097          ext.w     D0
00003700  48C0      6098          ext.l     D0
00003702  2600      6099          move.l    D0,D3
00003704  42AE FFEC 6100          clr.l     -20(A6)
00003708  4286      6101          clr.l     D6
0000370A  42AE FFE8 6102          clr.l     -24(A6)
0000370E  347C 7FFF 6103          move.w    #32767,A2
00003712  0C83 0000 6104          cmp.l     #42,D3
00003716  002A      
00003718  6612      6105          bne.s     vsscanf_18
0000371A  7C01      6106          moveq     #1,D6
0000371C  206E 000C 6107          move.l    12(A6),A0
00003720  52AE 000C 6108          addq.l    #1,12(A6)
00003724  1010      6109          move.b    (A0),D0
00003726  4880      6110          ext.w     D0
00003728  48C0      6111          ext.l     D0
0000372A  2600      6112          move.l    D0,D3
                    6113   vsscanf_18:
0000372C  2043      6114          move.l    D3,A0
0000372E  43F9 0000 6115          lea       __ctype,A1
00003732  5A92      
00003734  1030 9801 6116          move.b    1(A0,A1.L),D0
00003738  C03C 0004 6117          and.b     #4,D0
0000373C  6700 004E 6118          beq       vsscanf_24
00003740  2003      6119          move.l    D3,D0
00003742  0480 0000 6120          sub.l     #48,D0
00003746  0030      
00003748  2440      6121          move.l    D0,A2
                    6122   vsscanf_22:
0000374A  206E 000C 6123          move.l    12(A6),A0
0000374E  52AE 000C 6124          addq.l    #1,12(A6)
00003752  1010      6125          move.b    (A0),D0
00003754  4880      6126          ext.w     D0
00003756  48C0      6127          ext.l     D0
00003758  2600      6128          move.l    D0,D3
0000375A  2040      6129          move.l    D0,A0
0000375C  43F9 0000 6130          lea       __ctype,A1
00003760  5A92      
00003762  1030 9801 6131          move.b    1(A0,A1.L),D0
00003766  C0BC 0000 6132          and.l     #255,D0
0000376A  00FF      
0000376C  C0BC 0000 6133          and.l     #4,D0
00003770  0004      
00003772  6718      6134          beq.s     vsscanf_24
00003774  70D0      6135          moveq     #-48,D0
00003776  2F0A      6136          move.l    A2,-(A7)
00003778  4878 000A 6137          pea       10
0000377C  6100 0C12 6138          bsr       LMUL
00003780  2217      6139          move.l    (A7),D1
00003782  504F      6140          addq.w    #8,A7
00003784  D283      6141          add.l     D3,D1
00003786  D081      6142          add.l     D1,D0
00003788  2440      6143          move.l    D0,A2
0000378A  60BE      6144          bra       vsscanf_22
                    6145   vsscanf_24:
0000378C  0C83 0000 6146          cmp.l     #108,D3
00003790  006C      
00003792  6708      6147          beq.s     vsscanf_27
00003794  0C83 0000 6148          cmp.l     #76,D3
00003798  004C      
0000379A  661A      6149          bne.s     vsscanf_25
                    6150   vsscanf_27:
0000379C  2D7C 0000 6151          move.l    #1,-24(A6)
000037A0  0001 FFE8 
000037A4  206E 000C 6152          move.l    12(A6),A0
000037A8  52AE 000C 6153          addq.l    #1,12(A6)
000037AC  1010      6154          move.b    (A0),D0
000037AE  4880      6155          ext.w     D0
000037B0  48C0      6156          ext.l     D0
000037B2  2600      6157          move.l    D0,D3
000037B4  6020      6158          bra.s     vsscanf_28
                    6159   vsscanf_25:
000037B6  0C83 0000 6160          cmp.l     #104,D3
000037BA  0068      
000037BC  6618      6161          bne.s     vsscanf_28
000037BE  2D7C 0000 6162          move.l    #1,-20(A6)
000037C2  0001 FFEC 
000037C6  206E 000C 6163          move.l    12(A6),A0
000037CA  52AE 000C 6164          addq.l    #1,12(A6)
000037CE  1010      6165          move.b    (A0),D0
000037D0  4880      6166          ext.w     D0
000037D2  48C0      6167          ext.l     D0
000037D4  2600      6168          move.l    D0,D3
                    6169   vsscanf_28:
000037D6  0C83 0000 6170          cmp.l     #91,D3
000037DA  005B      
000037DC  6600 0036 6171          bne       vsscanf_30
000037E0  4A86      6172          tst.l     D6
000037E2  660A      6173          bne.s     vsscanf_32
000037E4  206E 0010 6174          move.l    16(A6),A0
000037E8  58AE 0010 6175          addq.l    #4,16(A6)
000037EC  2E10      6176          move.l    (A0),D7
                    6177   vsscanf_32:
000037EE  486E FFE4 6178          pea       -28(A6)
000037F2  2F07      6179          move.l    D7,-(A7)
000037F4  2F06      6180          move.l    D6,-(A7)
000037F6  2F0A      6181          move.l    A2,-(A7)
000037F8  2F2E 000C 6182          move.l    12(A6),-(A7)
000037FC  2F05      6183          move.l    D5,-(A7)
000037FE  6100 FCA8 6184          bsr       @vsscanf_scanselect
00003802  DEFC 0018 6185          add.w     #24,A7
00003806  2D40 000C 6186          move.l    D0,12(A6)
0000380A  4A86      6187          tst.l     D6
0000380C  6602      6188          bne.s     vsscanf_34
0000380E  5284      6189          addq.l    #1,D4
                    6190   vsscanf_34:
00003810  6000 0418 6191          bra       vsscanf_139
                    6192   vsscanf_30:
00003814  0C83 0000 6193          cmp.l     #110,D3
00003818  006E      
0000381A  661A      6194          bne.s     vsscanf_36
0000381C  4A86      6195          tst.l     D6
0000381E  6612      6196          bne.s     vsscanf_38
00003820  206E 0010 6197          move.l    16(A6),A0
00003824  58AE 0010 6198          addq.l    #4,16(A6)
00003828  2E10      6199          move.l    (A0),D7
0000382A  2047      6200          move.l    D7,A0
0000382C  20AE FFE4 6201          move.l    -28(A6),(A0)
00003830  5284      6202          addq.l    #1,D4
                    6203   vsscanf_38:
00003832  6000 03F6 6204          bra       vsscanf_139
                    6205   vsscanf_36:
00003836  0C83 0000 6206          cmp.l     #115,D3
0000383A  0073      
0000383C  6600 00AC 6207          bne       vsscanf_40
00003840  486E FFE4 6208          pea       -28(A6)
00003844  2F05      6209          move.l    D5,-(A7)
00003846  6100 FC2A 6210          bsr       @vsscanf_scanspace
0000384A  504F      6211          addq.w    #8,A7
0000384C  2400      6212          move.l    D0,D2
0000384E  4A86      6213          tst.l     D6
00003850  660A      6214          bne.s     vsscanf_42
00003852  206E 0010 6215          move.l    16(A6),A0
00003856  58AE 0010 6216          addq.l    #4,16(A6)
0000385A  2E10      6217          move.l    (A0),D7
                    6218   vsscanf_42:
0000385C  52AE FFE4 6219          addq.l    #1,-28(A6)
                    6220   vsscanf_44:
00003860  200A      6221          move.l    A2,D0
00003862  534A      6222          subq.w    #1,A2
00003864  4A80      6223          tst.l     D0
00003866  6700 0038 6224          beq       vsscanf_46
0000386A  2042      6225          move.l    D2,A0
0000386C  43F9 0000 6226          lea       __ctype,A1
00003870  5A92      
00003872  1030 9801 6227          move.b    1(A0,A1.L),D0
00003876  C03C 0010 6228          and.b     #16,D0
0000387A  6624      6229          bne.s     vsscanf_46
0000387C  0C82 FFFF 6230          cmp.l     #-1,D2
00003880  FFFF      
00003882  671C      6231          beq.s     vsscanf_46
00003884  387C 0001 6232          move.w    #1,A4
00003888  4A86      6233          tst.l     D6
0000388A  6606      6234          bne.s     vsscanf_47
0000388C  2047      6235          move.l    D7,A0
0000388E  5287      6236          addq.l    #1,D7
00003890  1082      6237          move.b    D2,(A0)
                    6238   vsscanf_47:
00003892  2F05      6239          move.l    D5,-(A7)
00003894  4E93      6240          jsr       (A3)
00003896  584F      6241          addq.w    #4,A7
00003898  2400      6242          move.l    D0,D2
0000389A  52AE FFE4 6243          addq.l    #1,-28(A6)
0000389E  60C0      6244          bra       vsscanf_44
                    6245   vsscanf_46:
000038A0  4A86      6246          tst.l     D6
000038A2  660A      6247          bne.s     vsscanf_51
000038A4  2047      6248          move.l    D7,A0
000038A6  4210      6249          clr.b     (A0)
000038A8  200C      6250          move.l    A4,D0
000038AA  6702      6251          beq.s     vsscanf_51
000038AC  5284      6252          addq.l    #1,D4
                    6253   vsscanf_51:
000038AE  0C82 FFFF 6254          cmp.l     #-1,D2
000038B2  FFFF      
000038B4  6708      6255          beq.s     vsscanf_55
000038B6  4A86      6256          tst.l     D6
000038B8  661E      6257          bne.s     vsscanf_53
000038BA  200C      6258          move.l    A4,D0
000038BC  661A      6259          bne.s     vsscanf_53
                    6260   vsscanf_55:
000038BE  4A84      6261          tst.l     D4
000038C0  6704      6262          beq.s     vsscanf_56
000038C2  2004      6263          move.l    D4,D0
000038C4  600E      6264          bra.s     vsscanf_59
                    6265   vsscanf_56:
000038C6  0C82 FFFF 6266          cmp.l     #-1,D2
000038CA  FFFF      
000038CC  6604      6267          bne.s     vsscanf_58
000038CE  70FF      6268          moveq     #-1,D0
000038D0  6002      6269          bra.s     vsscanf_59
                    6270   vsscanf_58:
000038D2  2004      6271          move.l    D4,D0
                    6272   vsscanf_59:
000038D4  6000 035A 6273          bra       vsscanf_15
                    6274   vsscanf_53:
000038D8  53AE FFE4 6275          subq.l    #1,-28(A6)
000038DC  2F02      6276          move.l    D2,-(A7)
000038DE  2F05      6277          move.l    D5,-(A7)
000038E0  6100 FB2E 6278          bsr       @vsscanf_scanputback
000038E4  504F      6279          addq.w    #8,A7
000038E6  6000 0342 6280          bra       vsscanf_139
                    6281   vsscanf_40:
000038EA  0C83 0000 6282          cmp.l     #99,D3
000038EE  0063      
000038F0  6600 008E 6283          bne       vsscanf_60
000038F4  4A86      6284          tst.l     D6
000038F6  660A      6285          bne.s     vsscanf_62
000038F8  206E 0010 6286          move.l    16(A6),A0
000038FC  58AE 0010 6287          addq.l    #4,16(A6)
00003900  2E10      6288          move.l    (A0),D7
                    6289   vsscanf_62:
00003902  2F05      6290          move.l    D5,-(A7)
00003904  4E93      6291          jsr       (A3)
00003906  584F      6292          addq.w    #4,A7
00003908  2400      6293          move.l    D0,D2
0000390A  52AE FFE4 6294          addq.l    #1,-28(A6)
0000390E  200A      6295          move.l    A2,D0
00003910  0C80 0000 6296          cmp.l     #32767,D0
00003914  7FFF      
00003916  6604      6297          bne.s     vsscanf_64
00003918  347C 0001 6298          move.w    #1,A2
                    6299   vsscanf_64:
0000391C  0C82 FFFF 6300          cmp.l     #-1,D2
00003920  FFFF      
00003922  6606      6301          bne.s     vsscanf_66
00003924  4A86      6302          tst.l     D6
00003926  6602      6303          bne.s     vsscanf_66
00003928  5384      6304          subq.l    #1,D4
                    6305   vsscanf_66:
0000392A  200A      6306          move.l    A2,D0
0000392C  534A      6307          subq.w    #1,A2
0000392E  4A80      6308          tst.l     D0
00003930  6720      6309          beq.s     vsscanf_70
00003932  0C82 FFFF 6310          cmp.l     #-1,D2
00003936  FFFF      
00003938  6718      6311          beq.s     vsscanf_70
0000393A  4A86      6312          tst.l     D6
0000393C  6606      6313          bne.s     vsscanf_71
0000393E  2047      6314          move.l    D7,A0
00003940  5287      6315          addq.l    #1,D7
00003942  1082      6316          move.b    D2,(A0)
                    6317   vsscanf_71:
00003944  2F05      6318          move.l    D5,-(A7)
00003946  4E93      6319          jsr       (A3)
00003948  584F      6320          addq.w    #4,A7
0000394A  2400      6321          move.l    D0,D2
0000394C  52AE FFE4 6322          addq.l    #1,-28(A6)
00003950  60D8      6323          bra       vsscanf_66
                    6324   vsscanf_70:
00003952  0C82 FFFF 6325          cmp.l     #-1,D2
00003956  FFFF      
00003958  660E      6326          bne.s     vsscanf_73
0000395A  4A84      6327          tst.l     D4
0000395C  6704      6328          beq.s     vsscanf_75
0000395E  2004      6329          move.l    D4,D0
00003960  6002      6330          bra.s     vsscanf_76
                    6331   vsscanf_75:
00003962  70FF      6332          moveq     #-1,D0
                    6333   vsscanf_76:
00003964  6000 02CA 6334          bra       vsscanf_15
                    6335   vsscanf_73:
00003968  4A86      6336          tst.l     D6
0000396A  6602      6337          bne.s     vsscanf_77
0000396C  5284      6338          addq.l    #1,D4
                    6339   vsscanf_77:
0000396E  53AE FFE4 6340          subq.l    #1,-28(A6)
00003972  2F02      6341          move.l    D2,-(A7)
00003974  2F05      6342          move.l    D5,-(A7)
00003976  6100 FA98 6343          bsr       @vsscanf_scanputback
0000397A  504F      6344          addq.w    #8,A7
0000397C  6000 02AC 6345          bra       vsscanf_139
                    6346   vsscanf_60:
00003980  0C83 0000 6347          cmp.l     #105,D3
00003984  0069      
00003986  6600 0060 6348          bne       vsscanf_82
0000398A  486E FFE4 6349          pea       -28(A6)
0000398E  2F05      6350          move.l    D5,-(A7)
00003990  6100 FAE0 6351          bsr       @vsscanf_scanspace
00003994  504F      6352          addq.w    #8,A7
00003996  2400      6353          move.l    D0,D2
00003998  0C82 0000 6354          cmp.l     #48,D2
0000399C  0030      
0000399E  6600 0038 6355          bne       vsscanf_81
000039A2  387C 0001 6356          move.w    #1,A4
000039A6  2F05      6357          move.l    D5,-(A7)
000039A8  4E93      6358          jsr       (A3)
000039AA  584F      6359          addq.w    #4,A7
000039AC  2400      6360          move.l    D0,D2
000039AE  2F02      6361          move.l    D2,-(A7)
000039B0  6100 F936 6362          bsr       _tolower
000039B4  584F      6363          addq.w    #4,A7
000039B6  0C80 0000 6364          cmp.l     #120,D0
000039BA  0078      
000039BC  6604      6365          bne.s     vsscanf_83
000039BE  7678      6366          moveq     #120,D3
000039C0  6010      6367          bra.s     vsscanf_84
                    6368   vsscanf_83:
000039C2  53AE FFE4 6369          subq.l    #1,-28(A6)
000039C6  2F02      6370          move.l    D2,-(A7)
000039C8  2F05      6371          move.l    D5,-(A7)
000039CA  6100 FA44 6372          bsr       @vsscanf_scanputback
000039CE  504F      6373          addq.w    #8,A7
000039D0  766F      6374          moveq     #111,D3
                    6375   vsscanf_84:
000039D2  52AE FFE4 6376          addq.l    #1,-28(A6)
000039D6  6010      6377          bra.s     vsscanf_82
                    6378   vsscanf_81:
000039D8  53AE FFE4 6379          subq.l    #1,-28(A6)
000039DC  2F02      6380          move.l    D2,-(A7)
000039DE  2F05      6381          move.l    D5,-(A7)
000039E0  6100 FA2E 6382          bsr       @vsscanf_scanputback
000039E4  504F      6383          addq.w    #8,A7
000039E6  7664      6384          moveq     #100,D3
                    6385   vsscanf_82:
000039E8  0C83 0000 6386          cmp.l     #100,D3
000039EC  0064      
000039EE  671A      6387          beq.s     vsscanf_87
000039F0  0C83 0000 6388          cmp.l     #117,D3
000039F4  0075      
000039F6  6712      6389          beq.s     vsscanf_87
000039F8  0C83 0000 6390          cmp.l     #120,D3
000039FC  0078      
000039FE  670A      6391          beq.s     vsscanf_87
00003A00  0C83 0000 6392          cmp.l     #111,D3
00003A04  006F      
00003A06  6600 01A4 6393          bne       vsscanf_85
                    6394   vsscanf_87:
00003A0A  486E FFE4 6395          pea       -28(A6)
00003A0E  2F05      6396          move.l    D5,-(A7)
00003A10  6100 FA60 6397          bsr       @vsscanf_scanspace
00003A14  504F      6398          addq.w    #8,A7
00003A16  2400      6399          move.l    D0,D2
00003A18  2D7C 0000 6400          move.l    #10,-4(A6)
00003A1C  000A FFFC 
00003A20  0C83 0000 6401          cmp.l     #120,D3
00003A24  0078      
00003A26  6608      6402          bne.s     vsscanf_88
00003A28  2D7C 0000 6403          move.l    #16,-4(A6)
00003A2C  0010 FFFC 
                    6404   vsscanf_88:
00003A30  0C83 0000 6405          cmp.l     #111,D3
00003A34  006F      
00003A36  6608      6406          bne.s     vsscanf_90
00003A38  2D7C 0000 6407          move.l    #8,-4(A6)
00003A3C  0008 FFFC 
                    6408   vsscanf_90:
00003A40  4A86      6409          tst.l     D6
00003A42  660A      6410          bne.s     vsscanf_92
00003A44  206E 0010 6411          move.l    16(A6),A0
00003A48  58AE 0010 6412          addq.l    #4,16(A6)
00003A4C  2E10      6413          move.l    (A0),D7
                    6414   vsscanf_92:
00003A4E  42AE FFE0 6415          clr.l     -32(A6)
00003A52  52AE FFE4 6416          addq.l    #1,-28(A6)
00003A56  0C83 0000 6417          cmp.l     #117,D3
00003A5A  0075      
00003A5C  6720      6418          beq.s     vsscanf_94
00003A5E  0C82 0000 6419          cmp.l     #45,D2
00003A62  002D      
00003A64  6618      6420          bne.s     vsscanf_94
00003A66  2F05      6421          move.l    D5,-(A7)
00003A68  4E93      6422          jsr       (A3)
00003A6A  584F      6423          addq.w    #4,A7
00003A6C  2400      6424          move.l    D0,D2
00003A6E  52AE FFE4 6425          addq.l    #1,-28(A6)
00003A72  2D7C 0000 6426          move.l    #1,-32(A6)
00003A76  0001 FFE0 
00003A7A  387C 0001 6427          move.w    #1,A4
                    6428   vsscanf_94:
00003A7E  3A7C 0000 6429          move.w    #0,A5
00003A82  0C82 FFFF 6430          cmp.l     #-1,D2
00003A86  FFFF      
00003A88  660E      6431          bne.s     vsscanf_96
00003A8A  4A84      6432          tst.l     D4
00003A8C  6704      6433          beq.s     vsscanf_98
00003A8E  2004      6434          move.l    D4,D0
00003A90  6002      6435          bra.s     vsscanf_99
                    6436   vsscanf_98:
00003A92  70FF      6437          moveq     #-1,D0
                    6438   vsscanf_99:
00003A94  6000 019A 6439          bra       vsscanf_15
                    6440   vsscanf_96:
00003A98  200A      6441          move.l    A2,D0
00003A9A  534A      6442          subq.w    #1,A2
00003A9C  4A80      6443          tst.l     D0
00003A9E  6700 0090 6444          beq       vsscanf_102
00003AA2  0C83 0000 6445          cmp.l     #120,D3
00003AA6  0078      
00003AA8  6620      6446          bne.s     vsscanf_104
00003AAA  2F02      6447          move.l    D2,-(A7)
00003AAC  6100 F8C8 6448          bsr       _toupper
00003AB0  584F      6449          addq.w    #4,A7
00003AB2  0C80 0000 6450          cmp.l     #65,D0
00003AB6  0041      
00003AB8  6D10      6451          blt.s     vsscanf_104
00003ABA  2F02      6452          move.l    D2,-(A7)
00003ABC  6100 F8B8 6453          bsr       _toupper
00003AC0  584F      6454          addq.w    #4,A7
00003AC2  0C80 0000 6455          cmp.l     #70,D0
00003AC6  0046      
00003AC8  6F14      6456          ble.s     vsscanf_103
                    6457   vsscanf_104:
00003ACA  2042      6458          move.l    D2,A0
00003ACC  43F9 0000 6459          lea       __ctype,A1
00003AD0  5A92      
00003AD2  1030 9801 6460          move.b    1(A0,A1.L),D0
00003AD6  C03C 0004 6461          and.b     #4,D0
00003ADA  6700 0054 6462          beq       vsscanf_102
                    6463   vsscanf_103:
00003ADE  2042      6464          move.l    D2,A0
00003AE0  43F9 0000 6465          lea       __ctype,A1
00003AE4  5A92      
00003AE6  1030 9801 6466          move.b    1(A0,A1.L),D0
00003AEA  C03C 0004 6467          and.b     #4,D0
00003AEE  6614      6468          bne.s     vsscanf_105
00003AF0  70F9      6469          moveq     #-7,D0
00003AF2  2F00      6470          move.l    D0,-(A7)
00003AF4  2F02      6471          move.l    D2,-(A7)
00003AF6  6100 F87E 6472          bsr       _toupper
00003AFA  584F      6473          addq.w    #4,A7
00003AFC  2200      6474          move.l    D0,D1
00003AFE  201F      6475          move.l    (A7)+,D0
00003B00  D081      6476          add.l     D1,D0
00003B02  2400      6477          move.l    D0,D2
                    6478   vsscanf_105:
00003B04  2F0D      6479          move.l    A5,-(A7)
00003B06  2F2E FFFC 6480          move.l    -4(A6),-(A7)
00003B0A  6100 0884 6481          bsr       LMUL
00003B0E  2017      6482          move.l    (A7),D0
00003B10  504F      6483          addq.w    #8,A7
00003B12  D082      6484          add.l     D2,D0
00003B14  0480 0000 6485          sub.l     #48,D0
00003B18  0030      
00003B1A  2A40      6486          move.l    D0,A5
00003B1C  2F05      6487          move.l    D5,-(A7)
00003B1E  4E93      6488          jsr       (A3)
00003B20  584F      6489          addq.w    #4,A7
00003B22  2400      6490          move.l    D0,D2
00003B24  52AE FFE4 6491          addq.l    #1,-28(A6)
00003B28  387C 0001 6492          move.w    #1,A4
00003B2C  6000 FF6A 6493          bra       vsscanf_96
                    6494   vsscanf_102:
00003B30  0C82 FFFF 6495          cmp.l     #-1,D2
00003B34  FFFF      
00003B36  671A      6496          beq.s     vsscanf_107
00003B38  2F02      6497          move.l    D2,-(A7)
00003B3A  2F05      6498          move.l    D5,-(A7)
00003B3C  6100 F8D2 6499          bsr       @vsscanf_scanputback
00003B40  504F      6500          addq.w    #8,A7
00003B42  53AE FFE4 6501          subq.l    #1,-28(A6)
00003B46  200C      6502          move.l    A4,D0
00003B48  6606      6503          bne.s     vsscanf_109
00003B4A  2004      6504          move.l    D4,D0
00003B4C  6000 00E2 6505          bra       vsscanf_15
                    6506   vsscanf_109:
00003B50  6012      6507          bra.s     vsscanf_111
                    6508   vsscanf_107:
00003B52  200C      6509          move.l    A4,D0
00003B54  660E      6510          bne.s     vsscanf_111
00003B56  4A84      6511          tst.l     D4
00003B58  6704      6512          beq.s     vsscanf_113
00003B5A  2004      6513          move.l    D4,D0
00003B5C  6002      6514          bra.s     vsscanf_114
                    6515   vsscanf_113:
00003B5E  70FF      6516          moveq     #-1,D0
                    6517   vsscanf_114:
00003B60  6000 00CE 6518          bra       vsscanf_15
                    6519   vsscanf_111:
00003B64  4AAE FFE0 6520          tst.l     -32(A6)
00003B68  6706      6521          beq.s     vsscanf_115
00003B6A  200D      6522          move.l    A5,D0
00003B6C  4480      6523          neg.l     D0
00003B6E  2A40      6524          move.l    D0,A5
                    6525   vsscanf_115:
00003B70  4A86      6526          tst.l     D6
00003B72  661E      6527          bne.s     vsscanf_117
00003B74  4AAE FFE8 6528          tst.l     -24(A6)
00003B78  6706      6529          beq.s     vsscanf_119
00003B7A  2047      6530          move.l    D7,A0
00003B7C  208D      6531          move.l    A5,(A0)
00003B7E  6010      6532          bra.s     vsscanf_122
                    6533   vsscanf_119:
00003B80  4AAE FFEC 6534          tst.l     -20(A6)
00003B84  6706      6535          beq.s     vsscanf_121
00003B86  2047      6536          move.l    D7,A0
00003B88  308D      6537          move.w    A5,(A0)
00003B8A  6004      6538          bra.s     vsscanf_122
                    6539   vsscanf_121:
00003B8C  2047      6540          move.l    D7,A0
00003B8E  208D      6541          move.l    A5,(A0)
                    6542   vsscanf_122:
00003B90  5284      6543          addq.l    #1,D4
                    6544   vsscanf_117:
00003B92  0C82 FFFF 6545          cmp.l     #-1,D2
00003B96  FFFF      
00003B98  660E      6546          bne.s     vsscanf_123
00003B9A  4A84      6547          tst.l     D4
00003B9C  6704      6548          beq.s     vsscanf_125
00003B9E  2004      6549          move.l    D4,D0
00003BA0  6002      6550          bra.s     vsscanf_126
                    6551   vsscanf_125:
00003BA2  70FF      6552          moveq     #-1,D0
                    6553   vsscanf_126:
00003BA4  6000 008A 6554          bra       vsscanf_15
                    6555   vsscanf_123:
00003BA8  6000 0080 6556          bra       vsscanf_139
                    6557   vsscanf_85:
00003BAC  0C83 0000 6558          cmp.l     #37,D3
00003BB0  0025      
00003BB2  6600 0040 6559          bne       vsscanf_127
00003BB6  2F05      6560          move.l    D5,-(A7)
00003BB8  4E93      6561          jsr       (A3)
00003BBA  584F      6562          addq.w    #4,A7
00003BBC  2400      6563          move.l    D0,D2
00003BBE  0C82 FFFF 6564          cmp.l     #-1,D2
00003BC2  FFFF      
00003BC4  660E      6565          bne.s     vsscanf_129
00003BC6  4A84      6566          tst.l     D4
00003BC8  6704      6567          beq.s     vsscanf_131
00003BCA  2004      6568          move.l    D4,D0
00003BCC  6002      6569          bra.s     vsscanf_132
                    6570   vsscanf_131:
00003BCE  70FF      6571          moveq     #-1,D0
                    6572   vsscanf_132:
00003BD0  6000 005E 6573          bra       vsscanf_15
                    6574   vsscanf_129:
00003BD4  52AE FFE4 6575          addq.l    #1,-28(A6)
00003BD8  B483      6576          cmp.l     D3,D2
00003BDA  6714      6577          beq.s     vsscanf_133
00003BDC  2F02      6578          move.l    D2,-(A7)
00003BDE  2F05      6579          move.l    D5,-(A7)
00003BE0  6100 F82E 6580          bsr       @vsscanf_scanputback
00003BE4  504F      6581          addq.w    #8,A7
00003BE6  53AE FFE4 6582          subq.l    #1,-28(A6)
00003BEA  2004      6583          move.l    D4,D0
00003BEC  6000 0042 6584          bra       vsscanf_15
                    6585   vsscanf_133:
00003BF0  6000 0038 6586          bra       vsscanf_139
                    6587   vsscanf_127:
00003BF4  2F05      6588          move.l    D5,-(A7)
00003BF6  4E93      6589          jsr       (A3)
00003BF8  584F      6590          addq.w    #4,A7
00003BFA  2400      6591          move.l    D0,D2
00003BFC  52AE FFE4 6592          addq.l    #1,-28(A6)
00003C00  0C82 FFFF 6593          cmp.l     #-1,D2
00003C04  FFFF      
00003C06  660C      6594          bne.s     vsscanf_135
00003C08  4A84      6595          tst.l     D4
00003C0A  6704      6596          beq.s     vsscanf_137
00003C0C  2004      6597          move.l    D4,D0
00003C0E  6002      6598          bra.s     vsscanf_138
                    6599   vsscanf_137:
00003C10  70FF      6600          moveq     #-1,D0
                    6601   vsscanf_138:
00003C12  601C      6602          bra.s     vsscanf_15
                    6603   vsscanf_135:
00003C14  B483      6604          cmp.l     D3,D2
00003C16  6712      6605          beq.s     vsscanf_139
00003C18  2F02      6606          move.l    D2,-(A7)
00003C1A  2F05      6607          move.l    D5,-(A7)
00003C1C  6100 F7F2 6608          bsr       @vsscanf_scanputback
00003C20  504F      6609          addq.w    #8,A7
00003C22  53AE FFE4 6610          subq.l    #1,-28(A6)
00003C26  2004      6611          move.l    D4,D0
00003C28  6006      6612          bra.s     vsscanf_15
                    6613   vsscanf_139:
00003C2A  6000 FA44 6614          bra       vsscanf_3
                    6615   vsscanf_5:
00003C2E  2004      6616          move.l    D4,D0
                    6617   vsscanf_15:
00003C30  4CDF 3CFC 6618          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003C34  4E5E      6619          unlk      A6
00003C36  4E75      6620          rts
                    6621   _printf:
00003C38  4E56 FFFC 6622          link      A6,#-4
00003C3C  48E7 2000 6623          movem.l   D2,-(A7)
00003C40  41EE 0008 6624          lea       8(A6),A0
00003C44  5848      6625          addq.w    #4,A0
00003C46  2408      6626          move.l    A0,D2
00003C48  2F02      6627          move.l    D2,-(A7)
00003C4A  2F2E 0008 6628          move.l    8(A6),-(A7)
00003C4E  42A7      6629          clr.l     -(A7)
00003C50  6100 00CA 6630          bsr       _vsprintf
00003C54  DEFC 000C 6631          add.w     #12,A7
00003C58  2D40 FFFC 6632          move.l    D0,-4(A6)
00003C5C  4282      6633          clr.l     D2
00003C5E  202E FFFC 6634          move.l    -4(A6),D0
00003C62  4CDF 0004 6635          movem.l   (A7)+,D2
00003C66  4E5E      6636          unlk      A6
00003C68  4E75      6637          rts
                    6638   @vsprintf_copy:
00003C6A  4E56 0000 6639          link      A6,#0
00003C6E  206E 0008 6640          move.l    8(A6),A0
00003C72  4A90      6641          tst.l     (A0)
00003C74  6710      6642          beq.s     @vsprintf_copy_1
00003C76  202E 000C 6643          move.l    12(A6),D0
00003C7A  206E 0008 6644          move.l    8(A6),A0
00003C7E  2250      6645          move.l    (A0),A1
00003C80  5290      6646          addq.l    #1,(A0)
00003C82  1280      6647          move.b    D0,(A1)
00003C84  600A      6648          bra.s     @vsprintf_copy_2
                    6649   @vsprintf_copy_1:
00003C86  2F2E 000C 6650          move.l    12(A6),-(A7)
00003C8A  6100 F5F0 6651          bsr       _putch
00003C8E  584F      6652          addq.w    #4,A7
                    6653   @vsprintf_copy_2:
00003C90  4E5E      6654          unlk      A6
00003C92  4E75      6655          rts
                    6656   @vsprintf_getval:
00003C94  4E56 0000 6657          link      A6,#0
00003C98  48E7 3000 6658          movem.l   D2/D3,-(A7)
00003C9C  242E 0008 6659          move.l    8(A6),D2
00003CA0  4283      6660          clr.l     D3
00003CA2  2042      6661          move.l    D2,A0
00003CA4  2050      6662          move.l    (A0),A0
00003CA6  1010      6663          move.b    (A0),D0
00003CA8  4880      6664          ext.w     D0
00003CAA  48C0      6665          ext.l     D0
00003CAC  0C80 0000 6666          cmp.l     #42,D0
00003CB0  002A      
00003CB2  6612      6667          bne.s     @vsprintf_getval_1
00003CB4  206E 000C 6668          move.l    12(A6),A0
00003CB8  2250      6669          move.l    (A0),A1
00003CBA  5890      6670          addq.l    #4,(A0)
00003CBC  2611      6671          move.l    (A1),D3
00003CBE  2042      6672          move.l    D2,A0
00003CC0  5290      6673          addq.l    #1,(A0)
00003CC2  6000 004E 6674          bra       @vsprintf_getval_5
                    6675   @vsprintf_getval_1:
00003CC6  2042      6676          move.l    D2,A0
00003CC8  2050      6677          move.l    (A0),A0
00003CCA  1010      6678          move.b    (A0),D0
00003CCC  4880      6679          ext.w     D0
00003CCE  48C0      6680          ext.l     D0
00003CD0  0C80 0000 6681          cmp.l     #48,D0
00003CD4  0030      
00003CD6  6D00 003A 6682          blt       @vsprintf_getval_5
00003CDA  2042      6683          move.l    D2,A0
00003CDC  2050      6684          move.l    (A0),A0
00003CDE  1010      6685          move.b    (A0),D0
00003CE0  4880      6686          ext.w     D0
00003CE2  48C0      6687          ext.l     D0
00003CE4  0C80 0000 6688          cmp.l     #57,D0
00003CE8  0039      
00003CEA  6E26      6689          bgt.s     @vsprintf_getval_5
00003CEC  2F03      6690          move.l    D3,-(A7)
00003CEE  4878 000A 6691          pea       10
00003CF2  6100 069C 6692          bsr       LMUL
00003CF6  2017      6693          move.l    (A7),D0
00003CF8  504F      6694          addq.w    #8,A7
00003CFA  2042      6695          move.l    D2,A0
00003CFC  2250      6696          move.l    (A0),A1
00003CFE  5290      6697          addq.l    #1,(A0)
00003D00  1211      6698          move.b    (A1),D1
00003D02  4881      6699          ext.w     D1
00003D04  48C1      6700          ext.l     D1
00003D06  D081      6701          add.l     D1,D0
00003D08  0480 0000 6702          sub.l     #48,D0
00003D0C  0030      
00003D0E  2600      6703          move.l    D0,D3
00003D10  60B4      6704          bra       @vsprintf_getval_1
                    6705   @vsprintf_getval_5:
00003D12  2003      6706          move.l    D3,D0
00003D14  4CDF 000C 6707          movem.l   (A7)+,D2/D3
00003D18  4E5E      6708          unlk      A6
00003D1A  4E75      6709          rts
                    6710   _vsprintf:
00003D1C  4E56 FFCC 6711          link      A6,#-52
00003D20  48E7 3F3C 6712          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003D24  45EE 0008 6713          lea       8(A6),A2
00003D28  47F8 3C6A 6714          lea       @vsprintf_copy,A3
00003D2C  49F9 0000 6715          lea       _ultoa,A4
00003D30  459A      
00003D32  4286      6716          clr.l     D6
                    6717   vsprintf_1:
00003D34  206E 000C 6718          move.l    12(A6),A0
00003D38  4A10      6719          tst.b     (A0)
00003D3A  6700 0624 6720          beq       vsprintf_3
00003D3E  206E 000C 6721          move.l    12(A6),A0
00003D42  1010      6722          move.b    (A0),D0
00003D44  4880      6723          ext.w     D0
00003D46  48C0      6724          ext.l     D0
00003D48  0C80 0000 6725          cmp.l     #37,D0
00003D4C  0025      
00003D4E  671C      6726          beq.s     vsprintf_4
00003D50  206E 000C 6727          move.l    12(A6),A0
00003D54  52AE 000C 6728          addq.l    #1,12(A6)
00003D58  1210      6729          move.b    (A0),D1
00003D5A  4881      6730          ext.w     D1
00003D5C  48C1      6731          ext.l     D1
00003D5E  2F01      6732          move.l    D1,-(A7)
00003D60  2F0A      6733          move.l    A2,-(A7)
00003D62  4E93      6734          jsr       (A3)
00003D64  504F      6735          addq.w    #8,A7
00003D66  5286      6736          addq.l    #1,D6
00003D68  6000 05F2 6737          bra       vsprintf_2
                    6738   vsprintf_4:
00003D6C  52AE 000C 6739          addq.l    #1,12(A6)
00003D70  422E FFD3 6740          clr.b     -45(A6)
00003D74  422E FFD2 6741          clr.b     -46(A6)
00003D78  422E FFD0 6742          clr.b     -48(A6)
00003D7C  422E FFCF 6743          clr.b     -49(A6)
00003D80  422E FFCE 6744          clr.b     -50(A6)
00003D84  422E FFCD 6745          clr.b     -51(A6)
00003D88  42AE FFFC 6746          clr.l     -4(A6)
00003D8C  7AFF      6747          moveq     #-1,D5
00003D8E  41EE FFDC 6748          lea       -36(A6),A0
00003D92  2608      6749          move.l    A0,D3
00003D94  2408      6750          move.l    A0,D2
                    6751   vsprintf_6:
00003D96  206E 000C 6752          move.l    12(A6),A0
00003D9A  1010      6753          move.b    (A0),D0
00003D9C  4880      6754          ext.w     D0
00003D9E  48C0      6755          ext.l     D0
00003DA0  0C80 0000 6756          cmp.l     #43,D0
00003DA4  002B      
00003DA6  6730      6757          beq.s     vsprintf_12
00003DA8  6E18      6758          bgt.s     vsprintf_15
00003DAA  0C80 0000 6759          cmp.l     #35,D0
00003DAE  0023      
00003DB0  6700 003E 6760          beq       vsprintf_14
00003DB4  6E00 0046 6761          bgt       vsprintf_9
00003DB8  0C80 0000 6762          cmp.l     #32,D0
00003DBC  0020      
00003DBE  6724      6763          beq.s     vsprintf_13
00003DC0  603A      6764          bra.s     vsprintf_9
                    6765   vsprintf_15:
00003DC2  0C80 0000 6766          cmp.l     #45,D0
00003DC6  002D      
00003DC8  6702      6767          beq.s     vsprintf_11
00003DCA  6030      6768          bra.s     vsprintf_9
                    6769   vsprintf_11:
00003DCC  1D7C 0001 6770          move.b    #1,-51(A6)
00003DD0  FFCD      
00003DD2  52AE 000C 6771          addq.l    #1,12(A6)
00003DD6  6026      6772          bra.s     vsprintf_7
                    6773   vsprintf_12:
00003DD8  1D7C 0001 6774          move.b    #1,-50(A6)
00003DDC  FFCE      
00003DDE  52AE 000C 6775          addq.l    #1,12(A6)
00003DE2  601A      6776          bra.s     vsprintf_7
                    6777   vsprintf_13:
00003DE4  1D7C 0001 6778          move.b    #1,-49(A6)
00003DE8  FFCF      
00003DEA  52AE 000C 6779          addq.l    #1,12(A6)
00003DEE  600E      6780          bra.s     vsprintf_7
                    6781   vsprintf_14:
00003DF0  1D7C 0001 6782          move.b    #1,-48(A6)
00003DF4  FFD0      
00003DF6  52AE 000C 6783          addq.l    #1,12(A6)
00003DFA  6002      6784          bra.s     vsprintf_7
                    6785   vsprintf_9:
00003DFC  6002      6786          bra.s     vsprintf_8
                    6787   vsprintf_7:
00003DFE  6096      6788          bra       vsprintf_6
                    6789   vsprintf_8:
00003E00  206E 000C 6790          move.l    12(A6),A0
00003E04  1010      6791          move.b    (A0),D0
00003E06  4880      6792          ext.w     D0
00003E08  48C0      6793          ext.l     D0
00003E0A  0C80 0000 6794          cmp.l     #48,D0
00003E0E  0030      
00003E10  660A      6795          bne.s     vsprintf_16
00003E12  52AE 000C 6796          addq.l    #1,12(A6)
00003E16  1D7C 0001 6797          move.b    #1,-46(A6)
00003E1A  FFD2      
                    6798   vsprintf_16:
00003E1C  486E 0010 6799          pea       16(A6)
00003E20  486E 000C 6800          pea       12(A6)
00003E24  6100 FE6E 6801          bsr       @vsprintf_getval
00003E28  504F      6802          addq.w    #8,A7
00003E2A  2A40      6803          move.l    D0,A5
00003E2C  206E 000C 6804          move.l    12(A6),A0
00003E30  1010      6805          move.b    (A0),D0
00003E32  4880      6806          ext.w     D0
00003E34  48C0      6807          ext.l     D0
00003E36  0C80 0000 6808          cmp.l     #46,D0
00003E3A  002E      
00003E3C  6614      6809          bne.s     vsprintf_18
00003E3E  52AE 000C 6810          addq.l    #1,12(A6)
00003E42  486E 0010 6811          pea       16(A6)
00003E46  486E 000C 6812          pea       12(A6)
00003E4A  6100 FE48 6813          bsr       @vsprintf_getval
00003E4E  504F      6814          addq.w    #8,A7
00003E50  2A00      6815          move.l    D0,D5
                    6816   vsprintf_18:
00003E52  206E 000C 6817          move.l    12(A6),A0
00003E56  1010      6818          move.b    (A0),D0
00003E58  4880      6819          ext.w     D0
00003E5A  48C0      6820          ext.l     D0
00003E5C  0C80 0000 6821          cmp.l     #108,D0
00003E60  006C      
00003E62  660A      6822          bne.s     vsprintf_20
00003E64  52AE 000C 6823          addq.l    #1,12(A6)
00003E68  1D7C 0001 6824          move.b    #1,-45(A6)
00003E6C  FFD3      
                    6825   vsprintf_20:
00003E6E  206E 000C 6826          move.l    12(A6),A0
00003E72  1010      6827          move.b    (A0),D0
00003E74  4880      6828          ext.w     D0
00003E76  48C0      6829          ext.l     D0
00003E78  0C80 0000 6830          cmp.l     #111,D0
00003E7C  006F      
00003E7E  6700 00D4 6831          beq       vsprintf_27
00003E82  6E34      6832          bgt.s     vsprintf_33
00003E84  0C80 0000 6833          cmp.l     #100,D0
00003E88  0064      
00003E8A  6700 0054 6834          beq       vsprintf_24
00003E8E  6E1C      6835          bgt.s     vsprintf_34
00003E90  0C80 0000 6836          cmp.l     #99,D0
00003E94  0063      
00003E96  6700 012C 6837          beq       vsprintf_30
00003E9A  6E00 016A 6838          bgt       vsprintf_22
00003E9E  0C80 0000 6839          cmp.l     #88,D0
00003EA2  0058      
00003EA4  6700 00E6 6840          beq       vsprintf_28
00003EA8  6000 015C 6841          bra       vsprintf_22
                    6842   vsprintf_34:
00003EAC  0C80 0000 6843          cmp.l     #105,D0
00003EB0  0069      
00003EB2  672C      6844          beq.s     vsprintf_24
00003EB4  6000 0150 6845          bra       vsprintf_22
                    6846   vsprintf_33:
00003EB8  0C80 0000 6847          cmp.l     #117,D0
00003EBC  0075      
00003EBE  6700 005C 6848          beq       vsprintf_26
00003EC2  6E0E      6849          bgt.s     vsprintf_35
00003EC4  0C80 0000 6850          cmp.l     #115,D0
00003EC8  0073      
00003ECA  6700 011C 6851          beq       vsprintf_31
00003ECE  6000 0136 6852          bra       vsprintf_22
                    6853   vsprintf_35:
00003ED2  0C80 0000 6854          cmp.l     #120,D0
00003ED6  0078      
00003ED8  6700 00B2 6855          beq       vsprintf_28
00003EDC  6000 0128 6856          bra       vsprintf_22
                    6857   vsprintf_24:
00003EE0  4A2E FFD3 6858          tst.b     -45(A6)
00003EE4  671A      6859          beq.s     vsprintf_36
00003EE6  4878 000A 6860          pea       10
00003EEA  2F03      6861          move.l    D3,-(A7)
00003EEC  206E 0010 6862          move.l    16(A6),A0
00003EF0  58AE 0010 6863          addq.l    #4,16(A6)
00003EF4  2F10      6864          move.l    (A0),-(A7)
00003EF6  6100 061E 6865          bsr       _ltoa
00003EFA  DEFC 000C 6866          add.w     #12,A7
00003EFE  6018      6867          bra.s     vsprintf_37
                    6868   vsprintf_36:
00003F00  4878 000A 6869          pea       10
00003F04  2F03      6870          move.l    D3,-(A7)
00003F06  206E 0010 6871          move.l    16(A6),A0
00003F0A  58AE 0010 6872          addq.l    #4,16(A6)
00003F0E  2F10      6873          move.l    (A0),-(A7)
00003F10  6100 0604 6874          bsr       _ltoa
00003F14  DEFC 000C 6875          add.w     #12,A7
                    6876   vsprintf_37:
00003F18  6000 00FA 6877          bra       vsprintf_23
                    6878   vsprintf_26:
00003F1C  4A2E FFD3 6879          tst.b     -45(A6)
00003F20  6718      6880          beq.s     vsprintf_38
00003F22  4878 000A 6881          pea       10
00003F26  2F03      6882          move.l    D3,-(A7)
00003F28  206E 0010 6883          move.l    16(A6),A0
00003F2C  58AE 0010 6884          addq.l    #4,16(A6)
00003F30  2F10      6885          move.l    (A0),-(A7)
00003F32  4E94      6886          jsr       (A4)
00003F34  DEFC 000C 6887          add.w     #12,A7
00003F38  6016      6888          bra.s     vsprintf_39
                    6889   vsprintf_38:
00003F3A  4878 000A 6890          pea       10
00003F3E  2F03      6891          move.l    D3,-(A7)
00003F40  206E 0010 6892          move.l    16(A6),A0
00003F44  58AE 0010 6893          addq.l    #4,16(A6)
00003F48  2F10      6894          move.l    (A0),-(A7)
00003F4A  4E94      6895          jsr       (A4)
00003F4C  DEFC 000C 6896          add.w     #12,A7
                    6897   vsprintf_39:
00003F50  6000 00C2 6898          bra       vsprintf_23
                    6899   vsprintf_27:
00003F54  4A2E FFD3 6900          tst.b     -45(A6)
00003F58  6718      6901          beq.s     vsprintf_40
00003F5A  4878 0008 6902          pea       8
00003F5E  2F03      6903          move.l    D3,-(A7)
00003F60  206E 0010 6904          move.l    16(A6),A0
00003F64  58AE 0010 6905          addq.l    #4,16(A6)
00003F68  2F10      6906          move.l    (A0),-(A7)
00003F6A  4E94      6907          jsr       (A4)
00003F6C  DEFC 000C 6908          add.w     #12,A7
00003F70  6016      6909          bra.s     vsprintf_41
                    6910   vsprintf_40:
00003F72  4878 0008 6911          pea       8
00003F76  2F03      6912          move.l    D3,-(A7)
00003F78  206E 0010 6913          move.l    16(A6),A0
00003F7C  58AE 0010 6914          addq.l    #4,16(A6)
00003F80  2F10      6915          move.l    (A0),-(A7)
00003F82  4E94      6916          jsr       (A4)
00003F84  DEFC 000C 6917          add.w     #12,A7
                    6918   vsprintf_41:
00003F88  6000 008A 6919          bra       vsprintf_23
                    6920   vsprintf_28:
00003F8C  4A2E FFD3 6921          tst.b     -45(A6)
00003F90  6718      6922          beq.s     vsprintf_42
00003F92  4878 0010 6923          pea       16
00003F96  2F03      6924          move.l    D3,-(A7)
00003F98  206E 0010 6925          move.l    16(A6),A0
00003F9C  58AE 0010 6926          addq.l    #4,16(A6)
00003FA0  2F10      6927          move.l    (A0),-(A7)
00003FA2  4E94      6928          jsr       (A4)
00003FA4  DEFC 000C 6929          add.w     #12,A7
00003FA8  6016      6930          bra.s     vsprintf_43
                    6931   vsprintf_42:
00003FAA  4878 0010 6932          pea       16
00003FAE  2F03      6933          move.l    D3,-(A7)
00003FB0  206E 0010 6934          move.l    16(A6),A0
00003FB4  58AE 0010 6935          addq.l    #4,16(A6)
00003FB8  2F10      6936          move.l    (A0),-(A7)
00003FBA  4E94      6937          jsr       (A4)
00003FBC  DEFC 000C 6938          add.w     #12,A7
                    6939   vsprintf_43:
00003FC0  6000 0052 6940          bra       vsprintf_23
                    6941   vsprintf_30:
00003FC4  206E 0010 6942          move.l    16(A6),A0
00003FC8  58AE 0010 6943          addq.l    #4,16(A6)
00003FCC  2010      6944          move.l    (A0),D0
00003FCE  2042      6945          move.l    D2,A0
00003FD0  5282      6946          addq.l    #1,D2
00003FD2  1080      6947          move.b    D0,(A0)
00003FD4  2042      6948          move.l    D2,A0
00003FD6  4210      6949          clr.b     (A0)
00003FD8  200D      6950          move.l    A5,D0
00003FDA  6704      6951          beq.s     vsprintf_44
00003FDC  200D      6952          move.l    A5,D0
00003FDE  6002      6953          bra.s     vsprintf_45
                    6954   vsprintf_44:
00003FE0  7001      6955          moveq     #1,D0
                    6956   vsprintf_45:
00003FE2  2A00      6957          move.l    D0,D5
00003FE4  6000 002E 6958          bra       vsprintf_23
                    6959   vsprintf_31:
00003FE8  206E 0010 6960          move.l    16(A6),A0
00003FEC  58AE 0010 6961          addq.l    #4,16(A6)
00003FF0  2610      6962          move.l    (A0),D3
00003FF2  0C85 FFFF 6963          cmp.l     #-1,D5
00003FF6  FFFF      
00003FF8  660A      6964          bne.s     vsprintf_46
00003FFA  2F03      6965          move.l    D3,-(A7)
00003FFC  6100 05FE 6966          bsr       _strlen
00004000  584F      6967          addq.w    #4,A7
00004002  2A00      6968          move.l    D0,D5
                    6969   vsprintf_46:
00004004  600E      6970          bra.s     vsprintf_23
                    6971   vsprintf_22:
00004006  206E 000C 6972          move.l    12(A6),A0
0000400A  2242      6973          move.l    D2,A1
0000400C  5282      6974          addq.l    #1,D2
0000400E  1290      6975          move.b    (A0),(A1)
00004010  2042      6976          move.l    D2,A0
00004012  4210      6977          clr.b     (A0)
                    6978   vsprintf_23:
00004014  2F03      6979          move.l    D3,-(A7)
00004016  6100 05E4 6980          bsr       _strlen
0000401A  584F      6981          addq.w    #4,A7
0000401C  1800      6982          move.b    D0,D4
0000401E  206E 000C 6983          move.l    12(A6),A0
00004022  1010      6984          move.b    (A0),D0
00004024  4880      6985          ext.w     D0
00004026  48C0      6986          ext.l     D0
00004028  0C80 0000 6987          cmp.l     #115,D0
0000402C  0073      
0000402E  6618      6988          bne.s     vsprintf_48
00004030  0C85 0000 6989          cmp.l     #0,D5
00004034  0000      
00004036  6D10      6990          blt.s     vsprintf_48
00004038  4884      6991          ext.w     D4
0000403A  48C4      6992          ext.l     D4
0000403C  B885      6993          cmp.l     D5,D4
0000403E  6F04      6994          ble.s     vsprintf_50
00004040  1005      6995          move.b    D5,D0
00004042  6002      6996          bra.s     vsprintf_51
                    6997   vsprintf_50:
00004044  1004      6998          move.b    D4,D0
                    6999   vsprintf_51:
00004046  1800      7000          move.b    D0,D4
                    7001   vsprintf_48:
00004048  206E 000C 7002          move.l    12(A6),A0
0000404C  1010      7003          move.b    (A0),D0
0000404E  4880      7004          ext.w     D0
00004050  48C0      7005          ext.l     D0
00004052  0C80 0000 7006          cmp.l     #88,D0
00004056  0058      
00004058  6600 0026 7007          bne       vsprintf_56
0000405C  41EE FFDC 7008          lea       -36(A6),A0
00004060  2408      7009          move.l    A0,D2
                    7010   vsprintf_54:
00004062  2042      7011          move.l    D2,A0
00004064  4A10      7012          tst.b     (A0)
00004066  6718      7013          beq.s     vsprintf_56
00004068  2042      7014          move.l    D2,A0
0000406A  1210      7015          move.b    (A0),D1
0000406C  4881      7016          ext.w     D1
0000406E  48C1      7017          ext.l     D1
00004070  2F01      7018          move.l    D1,-(A7)
00004072  6100 F302 7019          bsr       _toupper
00004076  584F      7020          addq.w    #4,A7
00004078  2042      7021          move.l    D2,A0
0000407A  1080      7022          move.b    D0,(A0)
0000407C  5282      7023          addq.l    #1,D2
0000407E  60E2      7024          bra       vsprintf_54
                    7025   vsprintf_56:
00004080  7E00      7026          moveq     #0,D7
00004082  41EE FFD4 7027          lea       -44(A6),A0
00004086  2408      7028          move.l    A0,D2
00004088  206E 000C 7029          move.l    12(A6),A0
0000408C  1010      7030          move.b    (A0),D0
0000408E  4880      7031          ext.w     D0
00004090  48C0      7032          ext.l     D0
00004092  0C80 0000 7033          cmp.l     #100,D0
00004096  0064      
00004098  6714      7034          beq.s     vsprintf_59
0000409A  206E 000C 7035          move.l    12(A6),A0
0000409E  1010      7036          move.b    (A0),D0
000040A0  4880      7037          ext.w     D0
000040A2  48C0      7038          ext.l     D0
000040A4  0C80 0000 7039          cmp.l     #105,D0
000040A8  0069      
000040AA  6600 0076 7040          bne       vsprintf_65
                    7041   vsprintf_59:
000040AE  4A2E FFCE 7042          tst.b     -50(A6)
000040B2  6612      7043          bne.s     vsprintf_62
000040B4  2043      7044          move.l    D3,A0
000040B6  1010      7045          move.b    (A0),D0
000040B8  4880      7046          ext.w     D0
000040BA  48C0      7047          ext.l     D0
000040BC  0C80 0000 7048          cmp.l     #45,D0
000040C0  002D      
000040C2  6600 002E 7049          bne       vsprintf_60
                    7050   vsprintf_62:
000040C6  2043      7051          move.l    D3,A0
000040C8  1010      7052          move.b    (A0),D0
000040CA  4880      7053          ext.w     D0
000040CC  48C0      7054          ext.l     D0
000040CE  0C80 0000 7055          cmp.l     #45,D0
000040D2  002D      
000040D4  660E      7056          bne.s     vsprintf_63
000040D6  2043      7057          move.l    D3,A0
000040D8  5283      7058          addq.l    #1,D3
000040DA  2242      7059          move.l    D2,A1
000040DC  5282      7060          addq.l    #1,D2
000040DE  1290      7061          move.b    (A0),(A1)
000040E0  5304      7062          subq.b    #1,D4
000040E2  6008      7063          bra.s     vsprintf_64
                    7064   vsprintf_63:
000040E4  2042      7065          move.l    D2,A0
000040E6  5282      7066          addq.l    #1,D2
000040E8  10BC 002B 7067          move.b    #43,(A0)
                    7068   vsprintf_64:
000040EC  5287      7069          addq.l    #1,D7
000040EE  6000 0032 7070          bra       vsprintf_65
                    7071   vsprintf_60:
000040F2  4A2E FFCF 7072          tst.b     -49(A6)
000040F6  6700 002A 7073          beq       vsprintf_65
000040FA  2043      7074          move.l    D3,A0
000040FC  1010      7075          move.b    (A0),D0
000040FE  4880      7076          ext.w     D0
00004100  48C0      7077          ext.l     D0
00004102  0C80 0000 7078          cmp.l     #45,D0
00004106  002D      
00004108  660E      7079          bne.s     vsprintf_67
0000410A  2043      7080          move.l    D3,A0
0000410C  5283      7081          addq.l    #1,D3
0000410E  2242      7082          move.l    D2,A1
00004110  5282      7083          addq.l    #1,D2
00004112  1290      7084          move.b    (A0),(A1)
00004114  5304      7085          subq.b    #1,D4
00004116  6008      7086          bra.s     vsprintf_68
                    7087   vsprintf_67:
00004118  2042      7088          move.l    D2,A0
0000411A  5282      7089          addq.l    #1,D2
0000411C  10BC 0020 7090          move.b    #32,(A0)
                    7091   vsprintf_68:
00004120  5287      7092          addq.l    #1,D7
                    7093   vsprintf_65:
00004122  4A2E FFD0 7094          tst.b     -48(A6)
00004126  6700 0066 7095          beq       vsprintf_77
0000412A  206E 000C 7096          move.l    12(A6),A0
0000412E  1010      7097          move.b    (A0),D0
00004130  4880      7098          ext.w     D0
00004132  48C0      7099          ext.l     D0
00004134  0C80 0000 7100          cmp.l     #111,D0
00004138  006F      
0000413A  671A      7101          beq.s     vsprintf_73
0000413C  6E0C      7102          bgt.s     vsprintf_76
0000413E  0C80 0000 7103          cmp.l     #88,D0
00004142  0058      
00004144  6710      7104          beq.s     vsprintf_73
00004146  6000 0046 7105          bra       vsprintf_77
                    7106   vsprintf_76:
0000414A  0C80 0000 7107          cmp.l     #120,D0
0000414E  0078      
00004150  6704      7108          beq.s     vsprintf_73
00004152  6000 003A 7109          bra       vsprintf_77
                    7110   vsprintf_73:
00004156  2042      7111          move.l    D2,A0
00004158  5282      7112          addq.l    #1,D2
0000415A  10BC 0030 7113          move.b    #48,(A0)
0000415E  5287      7114          addq.l    #1,D7
00004160  206E 000C 7115          move.l    12(A6),A0
00004164  1010      7116          move.b    (A0),D0
00004166  4880      7117          ext.w     D0
00004168  48C0      7118          ext.l     D0
0000416A  0C80 0000 7119          cmp.l     #120,D0
0000416E  0078      
00004170  6712      7120          beq.s     vsprintf_79
00004172  206E 000C 7121          move.l    12(A6),A0
00004176  1010      7122          move.b    (A0),D0
00004178  4880      7123          ext.w     D0
0000417A  48C0      7124          ext.l     D0
0000417C  0C80 0000 7125          cmp.l     #88,D0
00004180  0058      
00004182  660A      7126          bne.s     vsprintf_77
                    7127   vsprintf_79:
00004184  2042      7128          move.l    D2,A0
00004186  5282      7129          addq.l    #1,D2
00004188  10BC 0078 7130          move.b    #120,(A0)
0000418C  5287      7131          addq.l    #1,D7
                    7132   vsprintf_77:
0000418E  2042      7133          move.l    D2,A0
00004190  4210      7134          clr.b     (A0)
00004192  206E 000C 7135          move.l    12(A6),A0
00004196  1010      7136          move.b    (A0),D0
00004198  4880      7137          ext.w     D0
0000419A  48C0      7138          ext.l     D0
0000419C  0C80 0000 7139          cmp.l     #105,D0
000041A0  0069      
000041A2  6700 0076 7140          beq       vsprintf_82
000041A6  6E42      7141          bgt.s     vsprintf_93
000041A8  0C80 0000 7142          cmp.l     #99,D0
000041AC  0063      
000041AE  6700 0084 7143          beq       vsprintf_96
000041B2  6E1C      7144          bgt.s     vsprintf_94
000041B4  0C80 0000 7145          cmp.l     #88,D0
000041B8  0058      
000041BA  6700 005E 7146          beq       vsprintf_82
000041BE  6E00 0184 7147          bgt       vsprintf_80
000041C2  0C80 0000 7148          cmp.l     #69,D0
000041C6  0045      
000041C8  6700 0050 7149          beq       vsprintf_82
000041CC  6000 0176 7150          bra       vsprintf_80
                    7151   vsprintf_94:
000041D0  0C80 0000 7152          cmp.l     #101,D0
000041D4  0065      
000041D6  6700 0042 7153          beq       vsprintf_82
000041DA  6E00 0168 7154          bgt       vsprintf_80
000041DE  0C80 0000 7155          cmp.l     #100,D0
000041E2  0064      
000041E4  6734      7156          beq.s     vsprintf_82
000041E6  6000 015C 7157          bra       vsprintf_80
                    7158   vsprintf_93:
000041EA  0C80 0000 7159          cmp.l     #117,D0
000041EE  0075      
000041F0  6728      7160          beq.s     vsprintf_82
000041F2  6E1A      7161          bgt.s     vsprintf_95
000041F4  0C80 0000 7162          cmp.l     #115,D0
000041F8  0073      
000041FA  6700 0038 7163          beq       vsprintf_96
000041FE  6E00 0144 7164          bgt       vsprintf_80
00004202  0C80 0000 7165          cmp.l     #111,D0
00004206  006F      
00004208  6710      7166          beq.s     vsprintf_82
0000420A  6000 0138 7167          bra       vsprintf_80
                    7168   vsprintf_95:
0000420E  0C80 0000 7169          cmp.l     #120,D0
00004212  0078      
00004214  6704      7170          beq.s     vsprintf_82
00004216  6000 012C 7171          bra       vsprintf_80
                    7172   vsprintf_82:
0000421A  4A2E FFD2 7173          tst.b     -46(A6)
0000421E  6714      7174          beq.s     vsprintf_96
00004220  4A2E FFCD 7175          tst.b     -51(A6)
00004224  660E      7176          bne.s     vsprintf_96
00004226  200D      7177          move.l    A5,D0
00004228  9087      7178          sub.l     D7,D0
0000422A  4884      7179          ext.w     D4
0000422C  48C4      7180          ext.l     D4
0000422E  9084      7181          sub.l     D4,D0
00004230  2D40 FFFC 7182          move.l    D0,-4(A6)
                    7183   vsprintf_96:
00004234  202E FFFC 7184          move.l    -4(A6),D0
00004238  0C80 0000 7185          cmp.l     #0,D0
0000423C  0000      
0000423E  6C04      7186          bge.s     vsprintf_98
00004240  42AE FFFC 7187          clr.l     -4(A6)
                    7188   vsprintf_98:
00004244  4A2E FFCD 7189          tst.b     -51(A6)
00004248  6600 0030 7190          bne       vsprintf_104
0000424C  4884      7191          ext.w     D4
0000424E  48C4      7192          ext.l     D4
00004250  2004      7193          move.l    D4,D0
00004252  D0AE FFFC 7194          add.l     -4(A6),D0
00004256  D087      7195          add.l     D7,D0
00004258  1D40 FFD1 7196          move.b    D0,-47(A6)
                    7197   vsprintf_102:
0000425C  102E FFD1 7198          move.b    -47(A6),D0
00004260  4880      7199          ext.w     D0
00004262  48C0      7200          ext.l     D0
00004264  220D      7201          move.l    A5,D1
00004266  534D      7202          subq.w    #1,A5
00004268  B081      7203          cmp.l     D1,D0
0000426A  6C0E      7204          bge.s     vsprintf_104
0000426C  4878 0020 7205          pea       32
00004270  2F0A      7206          move.l    A2,-(A7)
00004272  4E93      7207          jsr       (A3)
00004274  504F      7208          addq.w    #8,A7
00004276  5286      7209          addq.l    #1,D6
00004278  60E2      7210          bra       vsprintf_102
                    7211   vsprintf_104:
0000427A  41EE FFD4 7212          lea       -44(A6),A0
0000427E  2408      7213          move.l    A0,D2
                    7214   vsprintf_105:
00004280  2042      7215          move.l    D2,A0
00004282  4A10      7216          tst.b     (A0)
00004284  6716      7217          beq.s     vsprintf_107
00004286  2042      7218          move.l    D2,A0
00004288  5282      7219          addq.l    #1,D2
0000428A  1210      7220          move.b    (A0),D1
0000428C  4881      7221          ext.w     D1
0000428E  48C1      7222          ext.l     D1
00004290  2F01      7223          move.l    D1,-(A7)
00004292  2F0A      7224          move.l    A2,-(A7)
00004294  4E93      7225          jsr       (A3)
00004296  504F      7226          addq.w    #8,A7
00004298  5286      7227          addq.l    #1,D6
0000429A  60E4      7228          bra       vsprintf_105
                    7229   vsprintf_107:
0000429C  202E FFFC 7230          move.l    -4(A6),D0
000042A0  1D40 FFD1 7231          move.b    D0,-47(A6)
                    7232   vsprintf_108:
000042A4  102E FFD1 7233          move.b    -47(A6),D0
000042A8  532E FFD1 7234          subq.b    #1,-47(A6)
000042AC  4A00      7235          tst.b     D0
000042AE  670E      7236          beq.s     vsprintf_110
000042B0  4878 0030 7237          pea       48
000042B4  2F0A      7238          move.l    A2,-(A7)
000042B6  4E93      7239          jsr       (A3)
000042B8  504F      7240          addq.w    #8,A7
000042BA  5286      7241          addq.l    #1,D6
000042BC  60E6      7242          bra       vsprintf_108
                    7243   vsprintf_110:
000042BE  2043      7244          move.l    D3,A0
000042C0  4A10      7245          tst.b     (A0)
000042C2  6700 0048 7246          beq       vsprintf_113
000042C6  206E 000C 7247          move.l    12(A6),A0
000042CA  1010      7248          move.b    (A0),D0
000042CC  4880      7249          ext.w     D0
000042CE  48C0      7250          ext.l     D0
000042D0  0C80 0000 7251          cmp.l     #115,D0
000042D4  0073      
000042D6  670C      7252          beq.s     vsprintf_116
000042D8  6E18      7253          bgt.s     vsprintf_119
000042DA  0C80 0000 7254          cmp.l     #99,D0
000042DE  0063      
000042E0  6702      7255          beq.s     vsprintf_116
000042E2  600E      7256          bra.s     vsprintf_119
                    7257   vsprintf_116:
000042E4  2005      7258          move.l    D5,D0
000042E6  5385      7259          subq.l    #1,D5
000042E8  0C80 0000 7260          cmp.l     #0,D0
000042EC  0000      
000042EE  6E02      7261          bgt.s     vsprintf_119
000042F0  6016      7262          bra.s     vsprintf_115
                    7263   vsprintf_119:
000042F2  2043      7264          move.l    D3,A0
000042F4  5283      7265          addq.l    #1,D3
000042F6  1210      7266          move.b    (A0),D1
000042F8  4881      7267          ext.w     D1
000042FA  48C1      7268          ext.l     D1
000042FC  2F01      7269          move.l    D1,-(A7)
000042FE  2F0A      7270          move.l    A2,-(A7)
00004300  4E93      7271          jsr       (A3)
00004302  504F      7272          addq.w    #8,A7
00004304  5286      7273          addq.l    #1,D6
00004306  6002      7274          bra.s     vsprintf_112
                    7275   vsprintf_115:
00004308  6002      7276          bra.s     vsprintf_113
                    7277   vsprintf_112:
0000430A  60B2      7278          bra       vsprintf_110
                    7279   vsprintf_113:
0000430C  4A2E FFCD 7280          tst.b     -51(A6)
00004310  6700 0030 7281          beq       vsprintf_125
00004314  4884      7282          ext.w     D4
00004316  48C4      7283          ext.l     D4
00004318  2004      7284          move.l    D4,D0
0000431A  D0AE FFFC 7285          add.l     -4(A6),D0
0000431E  D087      7286          add.l     D7,D0
00004320  1D40 FFD1 7287          move.b    D0,-47(A6)
                    7288   vsprintf_123:
00004324  102E FFD1 7289          move.b    -47(A6),D0
00004328  4880      7290          ext.w     D0
0000432A  48C0      7291          ext.l     D0
0000432C  220D      7292          move.l    A5,D1
0000432E  534D      7293          subq.w    #1,A5
00004330  B081      7294          cmp.l     D1,D0
00004332  6C0E      7295          bge.s     vsprintf_125
00004334  4878 0020 7296          pea       32
00004338  2F0A      7297          move.l    A2,-(A7)
0000433A  4E93      7298          jsr       (A3)
0000433C  504F      7299          addq.w    #8,A7
0000433E  5386      7300          subq.l    #1,D6
00004340  60E2      7301          bra       vsprintf_123
                    7302   vsprintf_125:
00004342  6014      7303          bra.s     vsprintf_81
                    7304   vsprintf_80:
00004344  206E 000C 7305          move.l    12(A6),A0
00004348  1210      7306          move.b    (A0),D1
0000434A  4881      7307          ext.w     D1
0000434C  48C1      7308          ext.l     D1
0000434E  2F01      7309          move.l    D1,-(A7)
00004350  2F0A      7310          move.l    A2,-(A7)
00004352  4E93      7311          jsr       (A3)
00004354  504F      7312          addq.w    #8,A7
00004356  5286      7313          addq.l    #1,D6
                    7314   vsprintf_81:
00004358  52AE 000C 7315          addq.l    #1,12(A6)
                    7316   vsprintf_2:
0000435C  6000 F9D6 7317          bra       vsprintf_1
                    7318   vsprintf_3:
00004360  4A92      7319          tst.l     (A2)
00004362  6710      7320          beq.s     vsprintf_126
00004364  4201      7321          clr.b     D1
00004366  C2BC 0000 7322          and.l     #255,D1
0000436A  00FF      
0000436C  2F01      7323          move.l    D1,-(A7)
0000436E  2F0A      7324          move.l    A2,-(A7)
00004370  4E93      7325          jsr       (A3)
00004372  504F      7326          addq.w    #8,A7
                    7327   vsprintf_126:
00004374  2006      7328          move.l    D6,D0
00004376  4CDF 3CFC 7329          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000437A  4E5E      7330          unlk      A6
0000437C  4E75      7331          rts
                    7332   ULMUL:
0000437E  4E56 0000 7333          link    A6,#0
00004382  48E7 C000 7334          movem.l D0/D1,-(A7)
00004386  222E 0008 7335          move.l  8(A6),D1
0000438A  202E 000C 7336          move.l  12(A6),D0
0000438E  602C      7337          bra.s   lmul_3
                    7338   LMUL:
00004390  4E56 0000 7339          link    A6,#0
00004394  48E7 C000 7340          movem.l D0/D1,-(A7)
00004398  222E 0008 7341          move.l  8(A6),D1
0000439C  202E 000C 7342          move.l  12(A6),D0
000043A0  4A80      7343          tst.l   D0
000043A2  6A0A      7344          bpl.s   lmul_1
000043A4  4480      7345          neg.l   D0
000043A6  4A81      7346          tst.l   D1
000043A8  6A0A      7347          bpl.s   lmul_2
000043AA  4481      7348          neg.l   D1
000043AC  600E      7349          bra.s   lmul_3
                    7350   lmul_1:
000043AE  4A81      7351          tst.l   D1
000043B0  6A0A      7352          bpl.s   lmul_3
000043B2  4481      7353          neg.l   D1
                    7354   lmul_2:
000043B4  6114      7355          bsr.s   domul
000043B6  4481      7356          neg.l   D1
000043B8  4080      7357          negx.l  D0
000043BA  6002      7358          bra.s   lmul_4
                    7359   lmul_3:
000043BC  610C      7360          bsr.s   domul
                    7361   lmul_4:
000043BE  2D41 0008 7362          move.l  D1,8(A6)
000043C2  4CDF 0003 7363          movem.l (A7)+,D0/D1
000043C6  4E5E      7364          unlk    A6
000043C8  4E75      7365          rts
                    7366   domul:
000043CA  0C81 0000 7367          cmpi.l  #$FFFF,D1
000043CE  FFFF      
000043D0  620C      7368          bhi.s   domul_1
000043D2  0C80 0000 7369          cmpi.l  #$FFFF,D0
000043D6  FFFF      
000043D8  620E      7370          bhi.s   domul_2
000043DA  C2C0      7371          mulu    D0,D1
000043DC  4E75      7372          rts
                    7373   domul_1:
000043DE  0C80 0000 7374          cmpi.l  #$FFFF,D0
000043E2  FFFF      
000043E4  6218      7375          bhi.s   domul_4
000043E6  6002      7376          bra.s   domul_3
                    7377   domul_2
000043E8  C141      7378          exg     D0,D1
                    7379   domul_3:
000043EA  2F02      7380          move.l  D2,-(A7)
000043EC  2401      7381          move.l  D1,D2
000043EE  4842      7382          swap    D2
000043F0  C2C0      7383          mulu    D0,D1
000043F2  C4C0      7384          mulu    D0,D2
000043F4  4842      7385          swap    D2
000043F6  4242      7386          clr.w   D2
000043F8  D282      7387          add.l   D2,D1
000043FA  241F      7388          move.l  (A7)+,D2
000043FC  4E75      7389          rts
                    7390   domul_4:
000043FE  48E7 3000 7391          movem.l D2/D3,-(A7)
00004402  2401      7392          move.l  D1,D2
00004404  2601      7393          move.l  D1,D3
00004406  C2C0      7394          mulu    D0,D1
00004408  4842      7395          swap    D2
0000440A  C4C0      7396          mulu    D0,D2
0000440C  4840      7397          swap    D0
0000440E  C6C0      7398          mulu    D0,D3
00004410  D483      7399          add.l   D3,D2
00004412  4842      7400          swap    D2
00004414  4242      7401          clr.w   D2
00004416  D282      7402          add.l   D2,D1
00004418  4CDF 000C 7403          movem.l (A7)+,D2/D3
0000441C  4E75      7404          rts
                    7405   _gets:
0000441E  4E56 0000 7406          link      A6,#0
00004422  48E7 3820 7407          movem.l   D2/D3/D4/A2,-(A7)
00004426  45F8 327C 7408          lea       _putch,A2
0000442A  282E 0008 7409          move.l    8(A6),D4
0000442E  2404      7410          move.l    D4,D2
                    7411   gets_1:
00004430  6100 EE7A 7412          bsr       _getch
00004434  2600      7413          move.l    D0,D3
00004436  0C80 0000 7414          cmp.l     #10,D0
0000443A  000A      
0000443C  6700 003C 7415          beq       gets_3
00004440  0C83 0000 7416          cmp.l     #8,D3
00004444  0008      
00004446  6712      7417          beq.s     gets_4
00004448  2042      7418          move.l    D2,A0
0000444A  5282      7419          addq.l    #1,D2
0000444C  1083      7420          move.b    D3,(A0)
0000444E  4883      7421          ext.w     D3
00004450  48C3      7422          ext.l     D3
00004452  2F03      7423          move.l    D3,-(A7)
00004454  4E92      7424          jsr       (A2)
00004456  584F      7425          addq.w    #4,A7
00004458  601E      7426          bra.s     gets_6
                    7427   gets_4:
0000445A  B484      7428          cmp.l     D4,D2
0000445C  631A      7429          bls.s     gets_6
0000445E  4878 0008 7430          pea       8
00004462  4E92      7431          jsr       (A2)
00004464  584F      7432          addq.w    #4,A7
00004466  4878 0020 7433          pea       32
0000446A  4E92      7434          jsr       (A2)
0000446C  584F      7435          addq.w    #4,A7
0000446E  4878 0008 7436          pea       8
00004472  4E92      7437          jsr       (A2)
00004474  584F      7438          addq.w    #4,A7
00004476  5382      7439          subq.l    #1,D2
                    7440   gets_6:
00004478  60B6      7441          bra       gets_1
                    7442   gets_3:
0000447A  4878 000A 7443          pea       10
0000447E  4E92      7444          jsr       (A2)
00004480  584F      7445          addq.w    #4,A7
00004482  2042      7446          move.l    D2,A0
00004484  4210      7447          clr.b     (A0)
00004486  2004      7448          move.l    D4,D0
00004488  4CDF 041C 7449          movem.l   (A7)+,D2/D3/D4/A2
0000448C  4E5E      7450          unlk      A6
0000448E  4E75      7451          rts
                    7452   _ungetch:
00004490  4E56 0000 7453          link      A6,#0
00004494  23EE 0008 7454          move.l    8(A6),__ungetbuf
00004498  0B00 00C0 
0000449C  202E 0008 7455          move.l    8(A6),D0
000044A0  4E5E      7456          unlk      A6
000044A2  4E75      7457          rts
                    7458   @itoa_convert:
000044A4  4E56 0000 7459          link      A6,#0
000044A8  48E7 3C00 7460          movem.l   D2/D3/D4/D5,-(A7)
000044AC  242E 0008 7461          move.l    8(A6),D2
000044B0  262E 0010 7462          move.l    16(A6),D3
000044B4  2A2E 000C 7463          move.l    12(A6),D5
000044B8  2F05      7464          move.l    D5,-(A7)
000044BA  2F03      7465          move.l    D3,-(A7)
000044BC  6100 ECE0 7466          bsr       ULDIV
000044C0  202F 0004 7467          move.l    4(A7),D0
000044C4  504F      7468          addq.w    #8,A7
000044C6  2800      7469          move.l    D0,D4
000044C8  BA83      7470          cmp.l     D3,D5
000044CA  651A      7471          blo.s     @itoa_convert_1
000044CC  2F03      7472          move.l    D3,-(A7)
000044CE  2F05      7473          move.l    D5,-(A7)
000044D0  2F03      7474          move.l    D3,-(A7)
000044D2  6100 ECCA 7475          bsr       ULDIV
000044D6  2217      7476          move.l    (A7),D1
000044D8  504F      7477          addq.w    #8,A7
000044DA  2F01      7478          move.l    D1,-(A7)
000044DC  2F02      7479          move.l    D2,-(A7)
000044DE  61C4      7480          bsr       @itoa_convert
000044E0  DEFC 000C 7481          add.w     #12,A7
000044E4  2400      7482          move.l    D0,D2
                    7483   @itoa_convert_1:
000044E6  0C84 0000 7484          cmp.l     #9,D4
000044EA  0009      
000044EC  6E0A      7485          bgt.s     @itoa_convert_3
000044EE  2004      7486          move.l    D4,D0
000044F0  0680 0000 7487          add.l     #48,D0
000044F4  0030      
000044F6  600E      7488          bra.s     @itoa_convert_4
                    7489   @itoa_convert_3:
000044F8  2004      7490          move.l    D4,D0
000044FA  0680 0000 7491          add.l     #97,D0
000044FE  0061      
00004500  0480 0000 7492          sub.l     #10,D0
00004504  000A      
                    7493   @itoa_convert_4:
00004506  2042      7494          move.l    D2,A0
00004508  1080      7495          move.b    D0,(A0)
0000450A  2002      7496          move.l    D2,D0
0000450C  5280      7497          addq.l    #1,D0
0000450E  4CDF 003C 7498          movem.l   (A7)+,D2/D3/D4/D5
00004512  4E5E      7499          unlk      A6
00004514  4E75      7500          rts
                    7501   _ltoa:
00004516  4E56 0000 7502          link      A6,#0
0000451A  48E7 3C00 7503          movem.l   D2/D3/D4/D5,-(A7)
0000451E  242E 0008 7504          move.l    8(A6),D2
00004522  262E 000C 7505          move.l    12(A6),D3
00004526  2A2E 0010 7506          move.l    16(A6),D5
0000452A  2803      7507          move.l    D3,D4
0000452C  0C85 0000 7508          cmp.l     #2,D5
00004530  0002      
00004532  6D08      7509          blt.s     ltoa_3
00004534  0C85 0000 7510          cmp.l     #36,D5
00004538  0024      
0000453A  6F06      7511          ble.s     ltoa_1
                    7512   ltoa_3:
0000453C  2003      7513          move.l    D3,D0
0000453E  6000 0052 7514          bra       ltoa_4
                    7515   ltoa_1:
00004542  0C85 0000 7516          cmp.l     #10,D5
00004546  000A      
00004548  6600 0032 7517          bne       ltoa_5
0000454C  0C82 0000 7518          cmp.l     #0,D2
00004550  0000      
00004552  6C28      7519          bge.s     ltoa_5
00004554  2002      7520          move.l    D2,D0
00004556  4480      7521          neg.l     D0
00004558  2400      7522          move.l    D0,D2
0000455A  0C82 0000 7523          cmp.l     #0,D2
0000455E  0000      
00004560  6C12      7524          bge.s     ltoa_7
00004562  4879 0000 7525          pea       @itoa_1
00004566  5B94      
00004568  2F03      7526          move.l    D3,-(A7)
0000456A  6100 EC22 7527          bsr       _strcpy
0000456E  504F      7528          addq.w    #8,A7
00004570  2003      7529          move.l    D3,D0
00004572  601E      7530          bra.s     ltoa_4
                    7531   ltoa_7:
00004574  2044      7532          move.l    D4,A0
00004576  5284      7533          addq.l    #1,D4
00004578  10BC 002D 7534          move.b    #45,(A0)
                    7535   ltoa_5:
0000457C  2F05      7536          move.l    D5,-(A7)
0000457E  2F02      7537          move.l    D2,-(A7)
00004580  2F04      7538          move.l    D4,-(A7)
00004582  6100 FF20 7539          bsr       @itoa_convert
00004586  DEFC 000C 7540          add.w     #12,A7
0000458A  2800      7541          move.l    D0,D4
0000458C  2044      7542          move.l    D4,A0
0000458E  4210      7543          clr.b     (A0)
00004590  2003      7544          move.l    D3,D0
                    7545   ltoa_4:
00004592  4CDF 003C 7546          movem.l   (A7)+,D2/D3/D4/D5
00004596  4E5E      7547          unlk      A6
00004598  4E75      7548          rts
                    7549   _ultoa:
0000459A  4E56 0000 7550          link      A6,#0
0000459E  48E7 3800 7551          movem.l   D2/D3/D4,-(A7)
000045A2  262E 0010 7552          move.l    16(A6),D3
000045A6  282E 000C 7553          move.l    12(A6),D4
000045AA  2404      7554          move.l    D4,D2
000045AC  0C83 0000 7555          cmp.l     #2,D3
000045B0  0002      
000045B2  6D08      7556          blt.s     ultoa_3
000045B4  0C83 0000 7557          cmp.l     #36,D3
000045B8  0024      
000045BA  6F04      7558          ble.s     ultoa_1
                    7559   ultoa_3:
000045BC  2004      7560          move.l    D4,D0
000045BE  6018      7561          bra.s     ultoa_4
                    7562   ultoa_1:
000045C0  2F03      7563          move.l    D3,-(A7)
000045C2  2F2E 0008 7564          move.l    8(A6),-(A7)
000045C6  2F02      7565          move.l    D2,-(A7)
000045C8  6100 FEDA 7566          bsr       @itoa_convert
000045CC  DEFC 000C 7567          add.w     #12,A7
000045D0  2400      7568          move.l    D0,D2
000045D2  2042      7569          move.l    D2,A0
000045D4  4210      7570          clr.b     (A0)
000045D6  2004      7571          move.l    D4,D0
                    7572   ultoa_4:
000045D8  4CDF 001C 7573          movem.l   (A7)+,D2/D3/D4
000045DC  4E5E      7574          unlk      A6
000045DE  4E75      7575          rts
                    7576   _itoa:
000045E0  4E56 0000 7577          link      A6,#0
000045E4  2F2E 0010 7578          move.l    16(A6),-(A7)
000045E8  2F2E 000C 7579          move.l    12(A6),-(A7)
000045EC  2F2E 0008 7580          move.l    8(A6),-(A7)
000045F0  6100 FF24 7581          bsr       _ltoa
000045F4  DEFC 000C 7582          add.w     #12,A7
000045F8  4E5E      7583          unlk      A6
000045FA  4E75      7584          rts
                    7585   _strlen:
000045FC  206F 0004 7586          move.l    (4,A7),A0
00004600  2248      7587          move.l    A0,A1
                    7588   strlen_1:
00004602  4A19      7589          tst.b     (A1)+
00004604  66FC      7590          bne       strlen_1
00004606  2009      7591          move.l    A1,D0
00004608  9088      7592          sub.l     A0,D0
0000460A  5380      7593          subq.l    #1,D0
0000460C  4E75      7594          rts
                    7595          section   const
                    7596   
                    7597   @m68kde~1_1:
0000460E  0D0A 00   7598          dc.b      13,10,0
                    7599   @m68kde~1_2:
00004612  0D53 7769 7600          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004616  7463 6865 
0000461A  7320 5357 
0000461E  5B        
0000461F  372D 305D 7601          dc.b      55,45,48,93,32,61,32,0
00004623  203D 2000 
                    7602   @m68kde~1_3:
00004628  3000      7603          dc.b      48,0
                    7604   @m68kde~1_4:
0000462A  3100      7605          dc.b      49,0
                    7606   @m68kde~1_5:
0000462C  0D0A 4475 7607          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004630  6D70 204D 
00004634  656D 6F72 
00004638  79        
00004639  2042 6C6F 7608          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
0000463D  636B 3A20 
00004641  3C45 5343 
00004645  3E20      
00004647  746F 2041 7609          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
0000464B  626F 7274 
0000464F  2C20 3C53 
00004653  50        
00004654  4143 453E 7610          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004658  2074 6F20 
0000465C  436F 6E74 
00004660  69        
00004661  6E75 6500 7611          dc.b      110,117,101,0
                    7612   @m68kde~1_6:
00004666  0D0A 456E 7613          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
0000466A  7465 7220 
0000466E  5374 6172 
00004672  74        
00004673  2041 6464 7614          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004677  7265 7373 
0000467B  3A20 00   
                    7615   @m68kde~1_7:
0000467E  0D0A 2530 7616          dc.b      13,10,37,48,56,120,32,0
00004682  3878 2000 
                    7617   @m68kde~1_8:
00004686  2530 3258 7618          dc.b      37,48,50,88,0
0000468A  00        
                    7619   @m68kde~1_9:
0000468C  2020 00   7620          dc.b      32,32,0
                    7621   @m68kde~1_10:
00004690  0D0A 4669 7622          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004694  6C6C 204D 
00004698  656D 6F72 
0000469C  79        
0000469D  2042 6C6F 7623          dc.b      32,66,108,111,99,107,0
000046A1  636B 00   
                    7624   @m68kde~1_11:
000046A4  0D0A 456E 7625          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000046A8  7465 7220 
000046AC  456E 6420 
000046B0  41        
000046B1  6464 7265 7626          dc.b      100,100,114,101,115,115,58,32,0
000046B5  7373 3A20 
000046B9  00        
                    7627   @m68kde~1_12:
000046BA  0D0A 456E 7628          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000046BE  7465 7220 
000046C2  4669 6C6C 
000046C6  20        
000046C7  4461 7461 7629          dc.b      68,97,116,97,58,32,0
000046CB  3A20 00   
                    7630   @m68kde~1_13:
000046CE  0D0A 4669 7631          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000046D2  6C6C 696E 
000046D6  6720 4164 
000046DA  64        
000046DB  7265 7373 7632          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000046DF  6573 205B 
000046E3  2425 3038 
000046E7  58        
000046E8  202D 2024 7633          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000046EC  2530 3858 
000046F0  5D20 7769 
000046F4  7468      
000046F6  2024 2530 7634          dc.b      32,36,37,48,50,88,0
000046FA  3258 00   
                    7635   @m68kde~1_14:
000046FE  0D0A 5573 7636          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00004702  6520 4879 
00004706  7065 7254 
0000470A  65        
0000470B  726D 696E 7637          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
0000470F  616C 2074 
00004713  6F20 5365 
00004717  6E64 2054 7638          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
0000471B  6578 7420 
0000471F  4669 6C65 
00004723  2028 2E68 7639          dc.b      32,40,46,104,101,120,41,13,10,0
00004727  6578 290D 
0000472B  0A00      
                    7640   @m68kde~1_15:
0000472E  0D0A 4C6F 7641          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004732  6164 2046 
00004736  6169 6C65 
0000473A  64        
0000473B  2061 7420 7642          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000473F  4164 6472 
00004743  6573 7320 
00004747  3D        
00004748  205B 2425 7643          dc.b      32,91,36,37,48,56,88,93,13,10,0
0000474C  3038 585D 
00004750  0D0A 00   
                    7644   @m68kde~1_16:
00004754  0D0A 5375 7645          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004758  6363 6573 
0000475C  733A 2044 
00004760  6F        
00004761  776E 6C6F 7646          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004765  6164 6564 
00004769  2025 6420 
0000476D  6279 7465 7647          dc.b      98,121,116,101,115,13,10,0
00004771  730D 0A00 
                    7648   @m68kde~1_17:
00004776  0D0A 4578 7649          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
0000477A  616D 696E 
0000477E  6520 616E 
00004782  64        
00004783  2043 6861 7650          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004787  6E67 6520 
0000478B  4D65 6D6F 
0000478F  72        
00004790  7900      7651          dc.b      121,0
                    7652   @m68kde~1_18:
00004792  0D0A 3C45 7653          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004796  5343 3E20 
0000479A  746F 2053 
0000479E  746F      
000047A0  702C 203C 7654          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000047A4  5350 4143 
000047A8  453E 2074 
000047AC  6F20      
000047AE  4164 7661 7655          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000047B2  6E63 652C 
000047B6  2027 2D27 
000047BA  2074      
000047BC  6F20 476F 7656          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000047C0  2042 6163 
000047C4  6B2C 203C 
000047C8  4441      
000047CA  5441 3E20 7657          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000047CE  746F 2063 
000047D2  6861 6E67 
000047D6  65        
000047D7  00        7658          dc.b      0
                    7659   @m68kde~1_19:
000047D8  0D0A 456E 7660          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000047DC  7465 7220 
000047E0  4164 6472 
000047E4  65        
000047E5  7373 3A20 7661          dc.b      115,115,58,32,0
000047E9  00        
                    7662   @m68kde~1_20:
000047EA  0D0A 5B25 7663          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000047EE  3038 785D 
000047F2  203A 2025 
000047F6  3032 78   
000047F9  2020 00   7664          dc.b      32,32,0
                    7665   @m68kde~1_21:
000047FC  0D0A 5761 7666          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00004800  726E 696E 
00004804  6720 4368 
00004808  61        
00004809  6E67 6520 7667          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
0000480D  4661 696C 
00004811  6564 3A20 
00004815  57        
00004816  726F 7465 7668          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
0000481A  205B 2530 
0000481E  3278 5D2C 
00004822  20        
00004823  5265 6164 7669          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004827  205B 2530 
0000482B  3278 5D00 
                    7670   @m68kde~1_22:
00004830  0A45 7261 7671          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
00004834  7369 6E67 
00004838  2E2E 2E0A 
0000483C  00        
                    7672   @m68kde~1_23:
0000483E  0D0A 2050 7673          dc.b      13,10,32,80,114,111,103,114,97,109,109,105,110
00004842  726F 6772 
00004846  616D 6D69 
0000484A  6E        
0000484B  6720 436F 7674          dc.b      103,32,67,111,109,112,108,101,116,101,33,0
0000484F  6D70 6C65 
00004853  7465 2100 
                    7675   @m68kde~1_24:
00004858  0D0A 204C 7676          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
0000485C  6F61 6469 
00004860  6E67 2050 
00004864  72        
00004865  6F67 7261 7677          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
00004869  6D20 4672 
0000486D  6F6D 2053 
00004871  50        
00004872  4920 466C 7678          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
00004876  6173 682E 
0000487A  2E2E 2E00 
                    7679   @m68kde~1_25:
0000487E  0D0A 2052 7680          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
00004882  6561 6420 
00004886  4461 7461 
0000488A  3A20      
0000488C  2530 3878 7681          dc.b      37,48,56,120,32,10,0
00004890  200A 00   
                    7682   @m68kde~1_26:
00004894  4949 435F 7683          dc.b      73,73,67,95,67,82,83,82,32,84,114,97,110,115
00004898  4352 5352 
0000489C  2054 7261 
000048A0  6E73      
000048A2  6D69 7420 7684          dc.b      109,105,116,32,40,66,105,110,97,114,121,41,58
000048A6  2842 696E 
000048AA  6172 7929 
000048AE  3A        
000048AF  2000      7685          dc.b      32,0
                    7686   @m68kde~1_27:
000048B2  2564 00   7687          dc.b      37,100,0
                    7688   @m68kde~1_28:
000048B6  0A00      7689          dc.b      10,0
                    7690   @m68kde~1_29:
000048B8  0D0A 2049 7691          dc.b      13,10,32,73,50,67,32,84,101,115,116,0
000048BC  3243 2054 
000048C0  6573 7400 
                    7692   @m68kde~1_30:
000048C4  0D0A 2053 7693          dc.b      13,10,32,83,116,97,114,116,105,110,103,32,69
000048C8  7461 7274 
000048CC  696E 6720 
000048D0  45        
000048D1  4550 524F 7694          dc.b      69,80,82,79,77,32,87,114,105,116,101,58,32,87
000048D5  4D20 5772 
000048D9  6974 653A 
000048DD  2057      
000048DF  7269 7469 7695          dc.b      114,105,116,105,110,103,32,48,120,37,46,50,120
000048E3  6E67 2030 
000048E7  7825 2E32 
000048EB  78        
000048EC  2074 6F20 7696          dc.b      32,116,111,32,97,100,100,114,101,115,115,32
000048F0  6164 6472 
000048F4  6573 7320 
000048F8  3078 3030 7697          dc.b      48,120,48,48,10,0
000048FC  0A00      
                    7698   @m68kde~1_31:
000048FE  0D0A 2057 7699          dc.b      13,10,32,87,114,105,116,105,110,103,32,37,100
00004902  7269 7469 
00004906  6E67 2025 
0000490A  64        
0000490B  2074 6F20 7700          dc.b      32,116,111,32,97,100,100,114,101,115,115,32
0000490F  6164 6472 
00004913  6573 7320 
00004917  2564 0A00 7701          dc.b      37,100,10,0
                    7702   @m68kde~1_32:
0000491C  0D0A 4669 7703          dc.b      13,10,70,105,110,105,115,104,101,100,32,119
00004920  6E69 7368 
00004924  6564 2077 
00004928  7269 7465 7704          dc.b      114,105,116,101,44,32,83,116,97,114,116,105
0000492C  2C20 5374 
00004930  6172 7469 
00004934  6E67 2045 7705          dc.b      110,103,32,69,69,80,82,79,77,32,82,101,97,100
00004938  4550 524F 
0000493C  4D20 5265 
00004940  6164      
00004942  0A00      7706          dc.b      10,0
                    7707   @m68kde~1_33:
00004944  0D0A 2041 7708          dc.b      13,10,32,65,100,100,114,101,115,115,58,32,37
00004948  6464 7265 
0000494C  7373 3A20 
00004950  25        
00004951  643A 2025 7709          dc.b      100,58,32,37,100,10,0
00004955  640A 00   
                    7710   @m68kde~1_34:
00004958  2425 3038 7711          dc.b      36,37,48,56,88,32,32,0
0000495C  5820 2000 
                    7712   @m68kde~1_35:
00004960  2000      7713          dc.b      32,0
                    7714   @m68kde~1_36:
00004962  2E00      7715          dc.b      46,0
                    7716   @m68kde~1_37:
00004964  2563 00   7717          dc.b      37,99,0
                    7718   @m68kde~1_38:
00004968  00        7719          dc.b      0
                    7720   @m68kde~1_39:
0000496A  0D0A 0D0A 7721          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
0000496E  2044 3020 
00004972  3D20 2425 
00004976  3038 58   
00004979  2020 4130 7722          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
0000497D  203D 2024 
00004981  2530 3858 
00004985  00        
                    7723   @m68kde~1_40:
00004986  0D0A 2044 7724          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
0000498A  3120 3D20 
0000498E  2425 3038 
00004992  5820 20   
00004995  4131 203D 7725          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004999  2024 2530 
0000499D  3858 00   
                    7726   @m68kde~1_41:
000049A0  0D0A 2044 7727          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000049A4  3220 3D20 
000049A8  2425 3038 
000049AC  5820 20   
000049AF  4132 203D 7728          dc.b      65,50,32,61,32,36,37,48,56,88,0
000049B3  2024 2530 
000049B7  3858 00   
                    7729   @m68kde~1_42:
000049BA  0D0A 2044 7730          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
000049BE  3320 3D20 
000049C2  2425 3038 
000049C6  5820 20   
000049C9  4133 203D 7731          dc.b      65,51,32,61,32,36,37,48,56,88,0
000049CD  2024 2530 
000049D1  3858 00   
                    7732   @m68kde~1_43:
000049D4  0D0A 2044 7733          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000049D8  3420 3D20 
000049DC  2425 3038 
000049E0  5820 20   
000049E3  4134 203D 7734          dc.b      65,52,32,61,32,36,37,48,56,88,0
000049E7  2024 2530 
000049EB  3858 00   
                    7735   @m68kde~1_44:
000049EE  0D0A 2044 7736          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000049F2  3520 3D20 
000049F6  2425 3038 
000049FA  5820 20   
000049FD  4135 203D 7737          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004A01  2024 2530 
00004A05  3858 00   
                    7738   @m68kde~1_45:
00004A08  0D0A 2044 7739          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004A0C  3620 3D20 
00004A10  2425 3038 
00004A14  5820 20   
00004A17  4136 203D 7740          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004A1B  2024 2530 
00004A1F  3858 00   
                    7741   @m68kde~1_46:
00004A22  0D0A 2044 7742          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004A26  3720 3D20 
00004A2A  2425 3038 
00004A2E  5820 20   
00004A31  4137 203D 7743          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004A35  2024 2530 
00004A39  3858 00   
                    7744   @m68kde~1_47:
00004A3C  0D0A 0D0A 7745          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004A40  5553 5020 
00004A44  3D20 2425 
00004A48  3038 58   
00004A4B  2020 2841 7746          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004A4F  3729 2055 
00004A53  7365 7220 
00004A57  5350      
00004A59  00        7747          dc.b      0
                    7748   @m68kde~1_48:
00004A5A  0D0A 5353 7749          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004A5E  5020 3D20 
00004A62  2425 3038 
00004A66  5820 20   
00004A69  2841 3729 7750          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004A6D  2053 7570 
00004A71  6572 7669 
00004A75  73        
00004A76  6F72 2053 7751          dc.b      111,114,32,83,80,0
00004A7A  5000      
                    7752   @m68kde~1_49:
00004A7C  0D0A 2053 7753          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004A80  5220 3D20 
00004A84  2425 3034 
00004A88  5820 20   
00004A8B  2000      7754          dc.b      32,0
                    7755   @m68kde~1_50:
00004A8E  2020 205B 7756          dc.b      32,32,32,91,0
00004A92  00        
                    7757   @m68kde~1_51:
00004A94  0D0A 2050 7758          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004A98  4320 3D20 
00004A9C  2425 3038 
00004AA0  5820 20   
00004AA3  00        7759          dc.b      0
                    7760   @m68kde~1_52:
00004AA4  5B40 2042 7761          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004AA8  5245 414B 
00004AAC  504F 494E 
00004AB0  545D 00   
                    7762   @m68kde~1_53:
00004AB4  0D0A 5750 7763          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004AB8  2564 203D 
00004ABC  2025 7300 
                    7764   @m68kde~1_54:
00004AC0  0D0A 0D0A 7765          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004AC4  0D0A 0D0A 
00004AC8  0D0A 0D0A 
00004ACC  5369 6E   
00004ACF  676C 6520 7766          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004AD3  5374 6570 
00004AD7  2020 3A5B 
00004ADB  4F        
00004ADC  4E5D 00   7767          dc.b      78,93,0
                    7768   @m68kde~1_55:
00004AE0  0D0A 4272 7769          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004AE4  6561 6B20 
00004AE8  506F 696E 
00004AEC  74        
00004AED  7320 3A5B 7770          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004AF1  4469 7361 
00004AF5  626C 6564 
00004AF9  5D        
00004AFA  00        7771          dc.b      0
                    7772   @m68kde~1_56:
00004AFC  0D0A 5072 7773          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004B00  6573 7320 
00004B04  3C53 5041 
00004B08  4345      
00004B0A  3E20 746F 7774          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004B0E  2045 7865 
00004B12  6375 7465 
00004B16  20        
00004B17  4E65 7874 7775          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004B1B  2049 6E73 
00004B1F  7472 7563 
00004B23  7469 6F6E 7776          dc.b      116,105,111,110,0
00004B27  00        
                    7777   @m68kde~1_57:
00004B28  0D0A 5072 7778          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004B2C  6573 7320 
00004B30  3C45 5343 
00004B34  3E20      
00004B36  746F 2052 7779          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004B3A  6573 756D 
00004B3E  6520 5072 
00004B42  6F67 7261 7780          dc.b      111,103,114,97,109,0
00004B46  6D00      
                    7781   @m68kde~1_58:
00004B48  0D0A 496C 7782          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004B4C  6C65 6761 
00004B50  6C20 4461 
00004B54  74        
00004B55  6120 5265 7783          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004B59  6769 7374 
00004B5D  6572 203A 
00004B61  20        
00004B62  5573 6520 7784          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004B66  4430 2D44 
00004B6A  372E 2E2E 
00004B6E  2E2E      
00004B70  0D0A 00   7785          dc.b      13,10,0
                    7786   @m68kde~1_59:
00004B74  0D0A 4425 7787          dc.b      13,10,68,37,99,32,61,32,0
00004B78  6320 3D20 
00004B7C  00        
                    7788   @m68kde~1_60:
00004B7E  0D0A 496C 7789          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004B82  6C65 6761 
00004B86  6C20 4164 
00004B8A  64        
00004B8B  7265 7373 7790          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004B8F  2052 6567 
00004B93  6973 7465 
00004B97  7220 3A20 7791          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004B9B  5573 6520 
00004B9F  4130 2D41 
00004BA3  372E      
00004BA5  2E2E 2E2E 7792          dc.b      46,46,46,46,13,10,0
00004BA9  0D0A 00   
                    7793   @m68kde~1_61:
00004BAC  0D0A 4125 7794          dc.b      13,10,65,37,99,32,61,32,0
00004BB0  6320 3D20 
00004BB4  00        
                    7795   @m68kde~1_62:
00004BB6  0D0A 5573 7796          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004BBA  6572 2053 
00004BBE  5020 3D20 
00004BC2  00        
                    7797   @m68kde~1_63:
00004BC4  0D0A 496C 7798          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004BC8  6C65 6761 
00004BCC  6C20 5265 
00004BD0  67        
00004BD1  6973 7465 7799          dc.b      105,115,116,101,114,46,46,46,46,0
00004BD5  722E 2E2E 
00004BD9  2E00      
                    7800   @m68kde~1_64:
00004BDC  0D0A 5379 7801          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004BE0  7374 656D 
00004BE4  2053 5020 
00004BE8  3D        
00004BE9  2000      7802          dc.b      32,0
                    7803   @m68kde~1_65:
00004BEC  0D0A 5043 7804          dc.b      13,10,80,67,32,61,32,0
00004BF0  203D 2000 
                    7805   @m68kde~1_66:
00004BF4  0D0A 5352 7806          dc.b      13,10,83,82,32,61,32,0
00004BF8  203D 2000 
                    7807   @m68kde~1_67:
00004BFC  0D0A 496C 7808          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004C00  6C65 6761 
00004C04  6C20 5265 
00004C08  67        
00004C09  6973 7465 7809          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004C0D  723A 2055 
00004C11  7365 2041 
00004C15  30        
00004C16  2D41 372C 7810          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004C1A  2044 302D 
00004C1E  4437 2C20 
00004C22  5353 50   
00004C25  2C20 5553 7811          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004C29  502C 2050 
00004C2D  4320 6F72 
00004C31  2053      
00004C33  520D 0A00 7812          dc.b      82,13,10,0
                    7813   @m68kde~1_68:
00004C38  0D0A 0D0A 7814          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004C3C  4E75 6D20 
00004C40  2020 2020 
00004C44  4164      
00004C46  6472 6573 7815          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004C4A  7320 2020 
00004C4E  2020 2049 
00004C52  6E        
00004C53  7374 7275 7816          dc.b      115,116,114,117,99,116,105,111,110,0
00004C57  6374 696F 
00004C5B  6E00      
                    7817   @m68kde~1_69:
00004C5E  0D0A 2D2D 7818          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004C62  2D20 2020 
00004C66  2020 2D2D 
00004C6A  2D2D 2D   
00004C6D  2D2D 2D2D 7819          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004C71  2020 2020 
00004C75  2D2D 2D2D 
00004C79  2D2D 2D   
00004C7C  2D2D 2D2D 7820          dc.b      45,45,45,45,0
00004C80  00        
                    7821   @m68kde~1_70:
00004C82  0D0A 4E6F 7822          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004C86  2042 7265 
00004C8A  616B 506F 
00004C8E  69        
00004C8F  6E74 7320 7823          dc.b      110,116,115,32,83,101,116,0
00004C93  5365 7400 
                    7824   @m68kde~1_71:
00004C98  0D0A 2533 7825          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004C9C  6420 2020 
00004CA0  2020 2425 
00004CA4  3038 78   
00004CA7  00        7826          dc.b      0
                    7827   @m68kde~1_72:
00004CA8  0D0A 4E75 7828          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004CAC  6D20 2020 
00004CB0  2020 4164 
00004CB4  6472      
00004CB6  6573 7300 7829          dc.b      101,115,115,0
                    7830   @m68kde~1_73:
00004CBA  0D0A 2D2D 7831          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004CBE  2D20 2020 
00004CC2  2020 2D2D 
00004CC6  2D2D 2D   
00004CC9  2D2D 2D2D 7832          dc.b      45,45,45,45,0
00004CCD  00        
                    7833   @m68kde~1_74:
00004CCE  0D0A 4E6F 7834          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004CD2  2057 6174 
00004CD6  6368 506F 
00004CDA  69        
00004CDB  6E74 7320 7835          dc.b      110,116,115,32,83,101,116,0
00004CDF  5365 7400 
                    7836   @m68kde~1_75:
00004CE4  0D0A 456E 7837          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004CE8  7465 7220 
00004CEC  4272 6561 
00004CF0  6B        
00004CF1  2050 6F69 7838          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004CF5  6E74 204E 
00004CF9  756D 6265 
00004CFD  72        
00004CFE  3A20 00   7839          dc.b      58,32,0
                    7840   @m68kde~1_76:
00004D02  0D0A 496C 7841          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004D06  6C65 6761 
00004D0A  6C20 5261 
00004D0E  6E        
00004D0F  6765 203A 7842          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004D13  2055 7365 
00004D17  2030 202D 
00004D1B  2037      
00004D1D  00        7843          dc.b      0
                    7844   @m68kde~1_77:
00004D1E  0D0A 4272 7845          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D22  6561 6B20 
00004D26  506F 696E 
00004D2A  74        
00004D2B  2043 6C65 7846          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004D2F  6172 6564 
00004D33  2E2E 2E2E 
00004D37  2E        
00004D38  0D0A 00   7847          dc.b      13,10,0
                    7848   @m68kde~1_78:
00004D3C  0D0A 4272 7849          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D40  6561 6B20 
00004D44  506F 696E 
00004D48  74        
00004D49  2077 6173 7850          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004D4D  6E27 7420 
00004D51  5365 742E 
00004D55  2E        
00004D56  2E2E 2E00 7851          dc.b      46,46,46,0
                    7852   @m68kde~1_79:
00004D5A  0D0A 456E 7853          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004D5E  7465 7220 
00004D62  5761 7463 
00004D66  68        
00004D67  2050 6F69 7854          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004D6B  6E74 204E 
00004D6F  756D 6265 
00004D73  72        
00004D74  3A20 00   7855          dc.b      58,32,0
                    7856   @m68kde~1_80:
00004D78  0D0A 5761 7857          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004D7C  7463 6820 
00004D80  506F 696E 
00004D84  74        
00004D85  2043 6C65 7858          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004D89  6172 6564 
00004D8D  2E2E 2E2E 
00004D91  2E        
00004D92  0D0A 00   7859          dc.b      13,10,0
                    7860   @m68kde~1_81:
00004D96  0D0A 5761 7861          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004D9A  7463 6820 
00004D9E  506F 696E 
00004DA2  74        
00004DA3  2057 6173 7862          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004DA7  206E 6F74 
00004DAB  2053 6574 
00004DAF  2E        
00004DB0  2E2E 2E2E 7863          dc.b      46,46,46,46,0
00004DB4  00        
                    7864   @m68kde~1_82:
00004DB6  0D0A 4E6F 7865          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004DBA  2046 5245 
00004DBE  4520 4272 
00004DC2  6561      
00004DC4  6B20 506F 7866          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004DC8  696E 7473 
00004DCC  2E2E 2E2E 
00004DD0  2E        
00004DD1  00        7867          dc.b      0
                    7868   @m68kde~1_83:
00004DD2  0D0A 4272 7869          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004DD6  6561 6B20 
00004DDA  506F 696E 
00004DDE  74        
00004DDF  2041 6464 7870          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004DE3  7265 7373 
00004DE7  3A20 00   
                    7871   @m68kde~1_84:
00004DEA  0D0A 4572 7872          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004DEE  726F 7220 
00004DF2  3A20 4272 
00004DF6  65        
00004DF7  616B 2050 7873          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004DFB  6F69 6E74 
00004DFF  7320 4341 
00004E03  4E        
00004E04  4E4F 5420 7874          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004E08  6265 2073 
00004E0C  6574 2061 
00004E10  74        
00004E11  204F 4444 7875          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004E15  2061 6464 
00004E19  7265 7373 
00004E1D  65        
00004E1E  7300      7876          dc.b      115,0
                    7877   @m68kde~1_85:
00004E20  0D0A 4572 7878          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004E24  726F 7220 
00004E28  3A20 4272 
00004E2C  65        
00004E2D  616B 2050 7879          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004E31  6F69 6E74 
00004E35  7320 4341 
00004E39  4E        
00004E3A  4E4F 5420 7880          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004E3E  6265 2073 
00004E42  6574 2066 
00004E46  6F        
00004E47  7220 524F 7881          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004E4B  4D20 696E 
00004E4F  2052 616E 
00004E53  67        
00004E54  6520 3A20 7882          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004E58  5B24 302D 
00004E5C  2430 3030 
00004E60  3037 46   
00004E63  4646 5D00 7883          dc.b      70,70,93,0
                    7884   @m68kde~1_86:
00004E68  0D0A 4572 7885          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004E6C  726F 723A 
00004E70  2042 7265 
00004E74  61        
00004E75  6B20 506F 7886          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004E79  696E 7420 
00004E7D  416C 7265 
00004E81  6164 7920 7887          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004E85  4578 6973 
00004E89  7473 2061 
00004E8D  74        
00004E8E  2041 6464 7888          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004E92  7265 7373 
00004E96  203A 2025 
00004E9A  30        
00004E9B  3878 0D0A 7889          dc.b      56,120,13,10,0
00004E9F  00        
                    7890   @m68kde~1_87:
00004EA0  0D0A 4272 7891          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004EA4  6561 6B20 
00004EA8  506F 696E 
00004EAC  74        
00004EAD  2053 6574 7892          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004EB1  2061 7420 
00004EB5  4164 6472 
00004EB9  65        
00004EBA  7373 3A20 7893          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004EBE  5B24 2530 
00004EC2  3878 5D00 
                    7894   @m68kde~1_88:
00004EC6  0D0A 4E6F 7895          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004ECA  2046 5245 
00004ECE  4520 5761 
00004ED2  7463      
00004ED4  6820 506F 7896          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004ED8  696E 7473 
00004EDC  2E2E 2E2E 
00004EE0  2E        
00004EE1  00        7897          dc.b      0
                    7898   @m68kde~1_89:
00004EE2  0D0A 5761 7899          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004EE6  7463 6820 
00004EEA  506F 696E 
00004EEE  74        
00004EEF  2041 6464 7900          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004EF3  7265 7373 
00004EF7  3A20 00   
                    7901   @m68kde~1_90:
00004EFA  0D0A 4572 7902          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004EFE  726F 723A 
00004F02  2057 6174 
00004F06  63        
00004F07  6820 506F 7903          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004F0B  696E 7420 
00004F0F  416C 7265 
00004F13  6164 7920 7904          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004F17  5365 7420 
00004F1B  6174 2041 
00004F1F  64        
00004F20  6472 6573 7905          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004F24  7320 3A20 
00004F28  2530 3878 
00004F2C  0D        
00004F2D  0A00      7906          dc.b      10,0
                    7907   @m68kde~1_91:
00004F30  0D0A 5761 7908          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004F34  7463 6820 
00004F38  506F 696E 
00004F3C  74        
00004F3D  2053 6574 7909          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004F41  2061 7420 
00004F45  4164 6472 
00004F49  65        
00004F4A  7373 3A20 7910          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004F4E  5B24 2530 
00004F52  3878 5D00 
                    7911   @m68kde~1_92:
00004F56  0D0A 0D0A 7912          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004F5A  0D0A 0D0A 
00004F5E  4042 5245 
00004F62  414B 50   
00004F65  4F49 4E54 7913          dc.b      79,73,78,84,0
00004F69  00        
                    7914   @m68kde~1_93:
00004F6A  0D0A 5369 7915          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004F6E  6E67 6C65 
00004F72  2053 7465 
00004F76  70        
00004F77  203A 205B 7916          dc.b      32,58,32,91,79,78,93,0
00004F7B  4F4E 5D00 
                    7917   @m68kde~1_94:
00004F80  0D0A 4272 7918          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004F84  6561 6B50 
00004F88  6F69 6E74 
00004F8C  73        
00004F8D  203A 205B 7919          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004F91  456E 6162 
00004F95  6C65 645D 
00004F99  00        
                    7920   @m68kde~1_95:
00004F9A  0D0A 5072 7921          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004F9E  6573 7320 
00004FA2  3C45 5343 
00004FA6  3E20      
00004FA8  746F 2052 7922          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004FAC  6573 756D 
00004FB0  6520 5573 
00004FB4  6572 2050 7923          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004FB8  726F 6772 
00004FBC  616D 0D0A 
00004FC0  00        
                    7924   @m68kde~1_96:
00004FC2  0D0A 556E 7925          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004FC6  6B6E 6F77 
00004FCA  6E20 436F 
00004FCE  6D        
00004FCF  6D61 6E64 7926          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004FD3  2E2E 2E2E 
00004FD7  2E0D 0A00 
                    7927   @m68kde~1_97:
00004FDC  0D0A 5072 7928          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004FE0  6F67 7261 
00004FE4  6D20 456E 
00004FE8  64        
00004FE9  6564 2028 7929          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004FED  5452 4150 
00004FF1  2023 3135 
00004FF5  292E      
00004FF7  2E2E 2E00 7930          dc.b      46,46,46,0
                    7931   @m68kde~1_98:
00004FFC  0D0A 4B69 7932          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00005000  6C6C 2041 
00005004  6C6C 2042 
00005008  72        
00005009  6561 6B20 7933          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
0000500D  506F 696E 
00005011  7473 2E2E 
00005015  2E        
00005016  2879 2F6E 7934          dc.b      40,121,47,110,41,63,0
0000501A  293F 00   
                    7935   @m68kde~1_99:
0000501E  0D0A 4B69 7936          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00005022  6C6C 2041 
00005026  6C6C 2057 
0000502A  61        
0000502B  7463 6820 7937          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
0000502F  506F 696E 
00005033  7473 2E2E 
00005037  2E        
00005038  2879 2F6E 7938          dc.b      40,121,47,110,41,63,0
0000503C  293F 00   
                    7939   @m68kde~1_100:
00005040  0D0A 2D2D 7940          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00005044  2D2D 2D2D 
00005048  2D2D 2D2D 
0000504C  2D2D 2D   
0000504F  2D2D 2D2D 7941          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005053  2D2D 2D2D 
00005057  2D2D 2D2D 
0000505B  2D2D 2D   
0000505E  2D2D 2D2D 7942          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005062  2D2D 2D2D 
00005066  2D2D 2D2D 
0000506A  2D2D 2D   
0000506D  2D2D 2D2D 7943          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005071  2D2D 2D2D 
00005075  2D2D 2D2D 
00005079  2D2D 2D   
0000507C  2D2D 2D2D 7944          dc.b      45,45,45,45,45,45,0
00005080  2D2D 00   
                    7945   @m68kde~1_101:
00005084  0D0A 2020 7946          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00005088  4465 6275 
0000508C  6767 6572 
00005090  20        
00005091  436F 6D6D 7947          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00005095  616E 6420 
00005099  5375 6D6D 
0000509D  6172 7900 7948          dc.b      97,114,121,0
                    7949   @m68kde~1_102:
000050A2  0D0A 2020 7950          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
000050A6  2E28 7265 
000050AA  6729 2020 
000050AE  2020      
000050B0  2020 202D 7951          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
000050B4  2043 6861 
000050B8  6E67 6520 
000050BC  5265      
000050BE  6769 7374 7952          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
000050C2  6572 733A 
000050C6  2065 2E67 
000050CA  2041 302D 7953          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
000050CE  4137 2C44 
000050D2  302D 4437 
000050D6  2C50 43   
000050D9  2C53 5350 7954          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
000050DD  2C55 5350 
000050E1  2C53 5200 
                    7955   @m68kde~1_103:
000050E6  0D0A 2020 7956          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
000050EA  4244 2F42 
000050EE  532F 4243 
000050F2  2F42 4B   
000050F5  2020 2D20 7957          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000050F9  4272 6561 
000050FD  6B20 506F 
00005101  69        
00005102  6E74 3A20 7958          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00005106  4469 7370 
0000510A  6C61 792F 
0000510E  53        
0000510F  6574 2F43 7959          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00005113  6C65 6172 
00005117  2F4B 696C 
0000511B  6C        
0000511C  00        7960          dc.b      0
                    7961   @m68kde~1_104:
0000511E  0D0A 2020 7962          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00005122  4320 2020 
00005126  2020 2020 
0000512A  2020 20   
0000512D  2020 2D20 7963          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00005131  436F 7079 
00005135  2050 726F 
00005139  67        
0000513A  7261 6D20 7964          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
0000513E  6672 6F6D 
00005142  2046 6C61 
00005146  73        
00005147  6820 746F 7965          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
0000514B  204D 6169 
0000514F  6E20 4D65 
00005153  6D        
00005154  6F72 7900 7966          dc.b      111,114,121,0
                    7967   @m68kde~1_105:
00005158  0D0A 2020 7968          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
0000515C  4420 2020 
00005160  2020 2020 
00005164  2020 20   
00005167  2020 2D20 7969          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
0000516B  4475 6D70 
0000516F  204D 656D 
00005173  6F        
00005174  7279 2043 7970          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00005178  6F6E 7465 
0000517C  6E74 7320 
00005180  746F 2053 7971          dc.b      116,111,32,83,99,114,101,101,110,0
00005184  6372 6565 
00005188  6E00      
                    7972   @m68kde~1_106:
0000518A  0D0A 2020 7973          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
0000518E  4520 2020 
00005192  2020 2020 
00005196  2020 20   
00005199  2020 2D20 7974          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
0000519D  456E 7465 
000051A1  7220 5374 
000051A5  72        
000051A6  696E 6720 7975          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
000051AA  696E 746F 
000051AE  204D 656D 
000051B2  6F72 7900 7976          dc.b      111,114,121,0
                    7977   @m68kde~1_107:
000051B6  0D0A 2020 7978          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
000051BA  4620 2020 
000051BE  2020 2020 
000051C2  2020 20   
000051C5  2020 2D20 7979          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
000051C9  4669 6C6C 
000051CD  204D 656D 
000051D1  6F        
000051D2  7279 2077 7980          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
000051D6  6974 6820 
000051DA  4461 7461 
000051DE  00        
                    7981   @m68kde~1_108:
000051E0  0D0A 2020 7982          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
000051E4  4720 2020 
000051E8  2020 2020 
000051EC  2020 20   
000051EF  2020 2D20 7983          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000051F3  476F 2050 
000051F7  726F 6772 
000051FB  61        
000051FC  6D20 5374 7984          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00005200  6172 7469 
00005204  6E67 2061 
00005208  74        
00005209  2041 6464 7985          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
0000520D  7265 7373 
00005211  3A20 2425 
00005215  30        
00005216  3858 00   7986          dc.b      56,88,0
                    7987   @m68kde~1_109:
0000521A  0D0A 2020 7988          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
0000521E  4C20 2020 
00005222  2020 2020 
00005226  2020 20   
00005229  2020 2D20 7989          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
0000522D  4C6F 6164 
00005231  2050 726F 
00005235  67        
00005236  7261 6D20 7990          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
0000523A  282E 4845 
0000523E  5820 6669 
00005242  6C        
00005243  6529 2066 7991          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00005247  726F 6D20 
0000524B  4C61 7074 
0000524F  6F        
00005250  7000      7992          dc.b      112,0
                    7993   @m68kde~1_110:
00005252  0D0A 2020 7994          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00005256  4D20 2020 
0000525A  2020 2020 
0000525E  2020 20   
00005261  2020 2D20 7995          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00005265  4D65 6D6F 
00005269  7279 2045 
0000526D  78        
0000526E  616D 696E 7996          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00005272  6520 616E 
00005276  6420 4368 
0000527A  61        
0000527B  6E67 6500 7997          dc.b      110,103,101,0
                    7998   @m68kde~1_111:
00005280  0D0A 2020 7999          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00005284  5020 2020 
00005288  2020 2020 
0000528C  2020 20   
0000528F  2020 2D20 8000          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00005293  5072 6F67 
00005297  7261 6D20 
0000529B  46        
0000529C  6C61 7368 8001          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
000052A0  204D 656D 
000052A4  6F72 7920 
000052A8  7769 7468 8002          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
000052AC  2055 7365 
000052B0  7220 5072 
000052B4  6F67 7261 8003          dc.b      111,103,114,97,109,0
000052B8  6D00      
                    8004   @m68kde~1_112:
000052BA  0D0A 2020 8005          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
000052BE  5220 2020 
000052C2  2020 2020 
000052C6  2020 20   
000052C9  2020 2D20 8006          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
000052CD  4469 7370 
000052D1  6C61 7920 
000052D5  36        
000052D6  3830 3030 8007          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
000052DA  2052 6567 
000052DE  6973 7465 
000052E2  72        
000052E3  7300      8008          dc.b      115,0
                    8009   @m68kde~1_113:
000052E6  0D0A 2020 8010          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000052EA  5320 2020 
000052EE  2020 2020 
000052F2  2020 20   
000052F5  2020 2D20 8011          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000052F9  546F 6767 
000052FD  6C65 204F 
00005301  4E        
00005302  2F4F 4646 8012          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00005306  2053 696E 
0000530A  676C 6520 
0000530E  53        
0000530F  7465 7020 8013          dc.b      116,101,112,32,77,111,100,101,0
00005313  4D6F 6465 
00005317  00        
                    8014   @m68kde~1_114:
00005318  0D0A 2020 8015          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
0000531C  544D 2020 
00005320  2020 2020 
00005324  2020 20   
00005327  2020 2D20 8016          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
0000532B  5465 7374 
0000532F  204D 656D 
00005333  6F        
00005334  7279 00   8017          dc.b      114,121,0
                    8018   @m68kde~1_115:
00005338  0D0A 2020 8019          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
0000533C  5453 2020 
00005340  2020 2020 
00005344  2020 20   
00005347  2020 2D20 8020          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
0000534B  5465 7374 
0000534F  2053 7769 
00005353  74        
00005354  6368 6573 8021          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00005358  3A20 5357 
0000535C  372D 3000 
                    8022   @m68kde~1_116:
00005360  0D0A 2020 8023          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00005364  5444 2020 
00005368  2020 2020 
0000536C  2020 20   
0000536F  2020 2D20 8024          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00005373  5465 7374 
00005377  2044 6973 
0000537B  70        
0000537C  6C61 7973 8025          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00005380  3A20 4C45 
00005384  4473 2061 
00005388  6E        
00005389  6420 372D 8026          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
0000538D  5365 676D 
00005391  656E 7400 
                    8027   @m68kde~1_117:
00005396  0D0A 2020 8028          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
0000539A  5744 2F57 
0000539E  532F 5743 
000053A2  2F57 4B   
000053A5  2020 2D20 8029          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
000053A9  5761 7463 
000053AD  6820 506F 
000053B1  696E      
000053B3  743A 2044 8030          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
000053B7  6973 706C 
000053BB  6179 2F53 
000053BF  65        
000053C0  742F 436C 8031          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
000053C4  6561 722F 
000053C8  4B69 6C6C 
000053CC  00        
                    8032   @m68kde~1_118:
000053CE  0D0A 2300 8033          dc.b      13,10,35,0
                    8034   @m68kde~1_119:
000053D2  0D0A 5072 8035          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
000053D6  6F67 7261 
000053DA  6D20 5275 
000053DE  6E        
000053DF  6E69 6E67 8036          dc.b      110,105,110,103,46,46,46,46,46,0
000053E3  2E2E 2E2E 
000053E7  2E00      
                    8037   @m68kde~1_120:
000053EA  0D0A 5072 8038          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000053EE  6573 7320 
000053F2  3C52 4553 
000053F6  4554      
000053F8  3E20 6275 8039          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000053FC  7474 6F6E 
00005400  203C 4B65 
00005404  79        
00005405  303E 206F 8040          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00005409  6E20 4445 
0000540D  3120 746F 
00005411  2073      
00005413  746F 7000 8041          dc.b      116,111,112,0
                    8042   @m68kde~1_121:
00005418  0D0A 4572 8043          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
0000541C  726F 723A 
00005420  2050 7265 
00005424  73        
00005425  7320 2747 8044          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00005429  2720 6669 
0000542D  7273 7420 
00005431  74        
00005432  6F20 7374 8045          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00005436  6172 7420 
0000543A  7072 6F67 
0000543E  7261 6D00 8046          dc.b      114,97,109,0
                    8047   @m68kde~1_122:
00005442  0D0A 5369 8048          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005446  6E67 6C65 
0000544A  2053 7465 
0000544E  70        
0000544F  2020 3A5B 8049          dc.b      32,32,58,91,79,78,93,0
00005453  4F4E 5D00 
                    8050   @m68kde~1_123:
00005458  0D0A 5072 8051          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
0000545C  6573 7320 
00005460  2747 2720 
00005464  74        
00005465  6F20 5472 8052          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00005469  6163 6520 
0000546D  5072 6F67 
00005471  72        
00005472  616D 2066 8053          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00005476  726F 6D20 
0000547A  6164 6472 
0000547E  6573 7320 8054          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00005482  2425 582E 
00005486  2E2E 2E2E 
0000548A  00        
                    8055   @m68kde~1_124:
0000548C  0D0A 5075 8056          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00005490  7368 203C 
00005494  5245 5345 
00005498  5420      
0000549A  4275 7474 8057          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
0000549E  6F6E 3E20 
000054A2  746F 2053 
000054A6  74        
000054A7  6F70 2E2E 8058          dc.b      111,112,46,46,46,46,46,0
000054AB  2E2E 2E00 
                    8059   @m68kde~1_125:
000054B0  0D0A 5369 8060          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000054B4  6E67 6C65 
000054B8  2053 7465 
000054BC  70        
000054BD  203A 205B 8061          dc.b      32,58,32,91,79,70,70,93,0
000054C1  4F46 465D 
000054C5  00        
                    8062   @m68kde~1_126:
000054C6  0D0A 4272 8063          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000054CA  6561 6B20 
000054CE  506F 696E 
000054D2  74        
000054D3  7320 3A5B 8064          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
000054D7  456E 6162 
000054DB  6C65 645D 
000054DF  00        
                    8065   @m68kde~1_127:
000054E0  0D0A 5072 8066          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000054E4  6573 7320 
000054E8  3C45 5343 
000054EC  3E20      
000054EE  746F 2052 8067          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000054F2  6573 756D 
000054F6  6520 5573 
000054FA  6572 2050 8068          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
000054FE  726F 6772 
00005502  616D 2E2E 
00005506  2E        
00005507  2E2E 00   8069          dc.b      46,46,0
                    8070   @m68kde~1_128:
0000550A  0D0A 5369 8071          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000550E  6E67 6C65 
00005512  2053 7465 
00005516  70        
00005517  2020 3A5B 8072          dc.b      32,32,58,91,79,70,70,93,0
0000551B  4F46 465D 
0000551F  00        
                    8073   @m68kde~1_129:
00005520  0D0A 0D0A 8074          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005524  5072 6F67 
00005528  7261 6D20 
0000552C  41        
0000552D  424F 5254 8075          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00005531  2021 2121 
00005535  2121 210D 
00005539  0A00      
                    8076   @m68kde~1_130:
0000553C  2573 0D0A 8077          dc.b      37,115,13,10,0
00005540  00        
                    8078   @m68kde~1_131:
00005542  0D0A 0D0A 8079          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005546  5072 6F67 
0000554A  7261 6D20 
0000554E  41        
0000554F  424F 5254 8080          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005553  2021 2121 
00005557  2121 00   
                    8081   @m68kde~1_132:
0000555A  0D0A 556E 8082          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
0000555E  6861 6E64 
00005562  6C65 6420 
00005566  49        
00005567  6E74 6572 8083          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
0000556B  7275 7074 
0000556F  3A20 4952 
00005573  5125 6420 8084          dc.b      81,37,100,32,33,33,33,33,33,0
00005577  2121 2121 
0000557B  2100      
                    8085   @m68kde~1_133:
0000557E  4144 4452 8086          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00005582  4553 5320 
00005586  4552 524F 
0000558A  523A 20   
0000558D  3136 206F 8087          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005591  7220 3332 
00005595  2042 6974 
00005599  2054      
0000559B  7261 6E73 8088          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
0000559F  6665 7220 
000055A3  746F 2F66 
000055A7  726F 6D20 8089          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000055AB  616E 204F 
000055AF  4444 2041 
000055B3  64        
000055B4  6472 6573 8090          dc.b      100,114,101,115,115,46,46,46,46,0
000055B8  732E 2E2E 
000055BC  2E00      
                    8091   @m68kde~1_134:
000055BE  556E 6861 8092          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000055C2  6E64 6C65 
000055C6  6420 5472 
000055CA  6170 2021 8093          dc.b      97,112,32,33,33,33,33,33,0
000055CE  2121 2121 
000055D2  00        
                    8094   @m68kde~1_135:
000055D4  4255 5320 8095          dc.b      66,85,83,32,69,114,114,111,114,33,0
000055D8  4572 726F 
000055DC  7221 00   
                    8096   @m68kde~1_136:
000055E0  4144 4452 8097          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
000055E4  4553 5320 
000055E8  4572 726F 
000055EC  7221      
000055EE  00        8098          dc.b      0
                    8099   @m68kde~1_137:
000055F0  494C 4C45 8100          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000055F4  4741 4C20 
000055F8  494E 5354 
000055FC  5255 43   
000055FF  5449 4F4E 8101          dc.b      84,73,79,78,0
00005603  00        
                    8102   @m68kde~1_138:
00005604  4449 5649 8103          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00005608  4445 2042 
0000560C  5920 5A45 
00005610  524F 00   
                    8104   @m68kde~1_139:
00005614  2743 484B 8105          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00005618  2720 494E 
0000561C  5354 5255 
00005620  4354 49   
00005623  4F4E 00   8106          dc.b      79,78,0
                    8107   @m68kde~1_140:
00005626  5452 4150 8108          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
0000562A  5620 494E 
0000562E  5354 5255 
00005632  4354 49   
00005635  4F4E 00   8109          dc.b      79,78,0
                    8110   @m68kde~1_141:
00005638  5052 4956 8111          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
0000563C  494C 4547 
00005640  4520 5649 
00005644  4F4C 41   
00005647  5449 4F4E 8112          dc.b      84,73,79,78,0
0000564B  00        
                    8113   @m68kde~1_142:
0000564C  554E 494E 8114          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005650  4954 4941 
00005654  4C49 5345 
00005658  4420 49   
0000565B  5251 00   8115          dc.b      82,81,0
                    8116   @m68kde~1_143:
0000565E  5350 5552 8117          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005662  494F 5553 
00005666  2049 5251 
0000566A  00        
                    8118   @m68kde~1_144:
0000566C  0D0A 5374 8119          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005670  6172 7420 
00005674  4164 6472 
00005678  65        
00005679  7373 2069 8120          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
0000567D  6E20 4D65 
00005681  6D6F 7279 
00005685  3A20 00   8121          dc.b      58,32,0
                    8122   @m68kde~1_145:
00005688  0D0A 456E 8123          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
0000568C  7465 7220 
00005690  5374 7269 
00005694  6E        
00005695  6720 2845 8124          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00005699  5343 2074 
0000569D  6F20 656E 
000056A1  64        
000056A2  2920 3A00 8125          dc.b      41,32,58,0
                    8126   @m68kde~1_146:
000056A6  0A45 6E74 8127          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
000056AA  6572 2077 
000056AE  6861 7420 
000056B2  73        
000056B3  697A 6520 8128          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
000056B7  6F66 206D 
000056BB  656D 6F72 
000056BF  7920 796F 8129          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
000056C3  7520 7761 
000056C7  6E74 2074 
000056CB  6F20 7265 8130          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
000056CF  6164 2F77 
000056D3  7269 7465 
000056D7  0A20 4279 8131          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
000056DB  7465 203D 
000056DF  2030 0A20 
000056E3  576F      
000056E5  7264 203D 8132          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
000056E9  2031 0A20 
000056ED  4C6F 6E67 
000056F1  20        
000056F2  576F 7264 8133          dc.b      87,111,114,100,32,61,32,50,10,0
000056F6  203D 2032 
000056FA  0A00      
                    8134   @m68kde~1_147:
000056FC  0A45 6E74 8135          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005700  6572 2077 
00005704  6869 6368 
00005708  2064 6174 8136          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
0000570C  6120 7061 
00005710  7474 6572 
00005714  6E        
00005715  2079 6F75 8137          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005719  2077 616E 
0000571D  7420 746F 
00005721  2077 7269 8138          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005725  7465 2069 
00005729  6E74 6F20 
0000572D  6D65 6D6F 8139          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
00005731  7279 0A20 
00005735  3078 3030 
00005739  20        
0000573A  3D20 300A 8140          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
0000573E  2030 7842 
00005742  3220 3D20 
00005746  310A 20   
00005749  3078 4333 8141          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
0000574D  203D 2032 
00005751  0A20 3078 
00005755  4434      
00005757  203D 2033 8142          dc.b      32,61,32,51,10,0
0000575B  0A00      
                    8143   @m68kde~1_148:
0000575E  0A45 6E74 8144          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005762  6572 2077 
00005766  6869 6368 
0000576A  2064 6174 8145          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
0000576E  6120 7061 
00005772  7474 6572 
00005776  6E        
00005777  2079 6F75 8146          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000577B  2077 616E 
0000577F  7420 746F 
00005783  2077 7269 8147          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005787  7465 2069 
0000578B  6E74 6F20 
0000578F  6D65 6D6F 8148          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005793  7279 0A20 
00005797  3078 3030 
0000579B  30        
0000579C  3020 3D20 8149          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
000057A0  300A 2030 
000057A4  7831 3233 
000057A8  3420 3D   
000057AB  2031 0A20 8150          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
000057AF  3078 4131 
000057B3  4232 203D 
000057B7  2032 0A   
000057BA  2030 7843 8151          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
000057BE  3344 3420 
000057C2  3D20 330A 
000057C6  00        
                    8152   @m68kde~1_149:
000057C8  0A45 6E74 8153          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000057CC  6572 2077 
000057D0  6869 6368 
000057D4  2064 6174 8154          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000057D8  6120 7061 
000057DC  7474 6572 
000057E0  6E        
000057E1  2079 6F75 8155          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000057E5  2077 616E 
000057E9  7420 746F 
000057ED  2077 7269 8156          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000057F1  7465 2069 
000057F5  6E74 6F20 
000057F9  6D65 6D6F 8157          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000057FD  7279 0A20 
00005801  3078 3030 
00005805  30        
00005806  305F 3030 8158          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
0000580A  3030 203D 
0000580E  2030 0A20 
00005812  3078 41   
00005815  4142 425F 8159          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
00005819  4343 4444 
0000581D  203D 2031 
00005821  0A20 30   
00005824  7831 3132 8160          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
00005828  325F 3333 
0000582C  3434 203D 
00005830  2032 0A   
00005833  2030 7837 8161          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
00005837  3635 345F 
0000583B  3332 3130 
0000583F  203D 20   
00005842  330A 00   8162          dc.b      51,10,0
                    8163   @m68kde~1_150:
00005846  0A50 726F 8164          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
0000584A  7669 6465 
0000584E  2053 7461 
00005852  72        
00005853  7420 4164 8165          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
00005857  6472 6573 
0000585B  7320 696E 
0000585F  2068 6578 8166          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
00005863  2028 646F 
00005867  206E 6F74 
0000586B  2075 7365 8167          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
0000586F  2030 7820 
00005873  7072 6566 
00005877  6978 290A 8168          dc.b      105,120,41,10,48,120,0
0000587B  3078 00   
                    8169   @m68kde~1_151:
0000587E  0A50 726F 8170          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
00005882  7669 6465 
00005886  2045 6E64 
0000588A  2041 6464 8171          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
0000588E  7265 7373 
00005892  2069 6E20 
00005896  6865 7820 8172          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
0000589A  2864 6F20 
0000589E  6E6F 7420 
000058A2  7573 6520 8173          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
000058A6  3078 2070 
000058AA  7265 6669 
000058AE  7829 0A30 8174          dc.b      120,41,10,48,120,0
000058B2  7800      
                    8175   @m68kde~1_152:
000058B4  0A53 7461 8176          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
000058B8  7274 2041 
000058BC  6464 7265 
000058C0  73        
000058C1  7320 3078 8177          dc.b      115,32,48,120,37,48,56,120,10,0
000058C5  2530 3878 
000058C9  0A00      
                    8178   @m68kde~1_153:
000058CC  0A45 6E64 8179          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
000058D0  2041 6464 
000058D4  7265 7373 
000058D8  3A20 3078 8180          dc.b      58,32,48,120,37,48,56,120,10,0
000058DC  2530 3878 
000058E0  0A00      
                    8181   @m68kde~1_154:
000058E2  4552 524F 8182          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
000058E6  522E 2E2E 
000058EA  2041 6464 
000058EE  7265      
000058F0  7373 2030 8183          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
000058F4  7825 7820 
000058F8  6973 2062 
000058FC  65        
000058FD  796F 6E64 8184          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005901  2074 6865 
00005905  206D 656D 
00005909  6F72 7920 8185          dc.b      111,114,121,32,114,97,110,103,101,10,0
0000590D  7261 6E67 
00005911  650A 00   
                    8186   @m68kde~1_155:
00005914  4552 524F 8187          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
00005918  522E 2E2E 
0000591C  2056 616C 
00005920  7565      
00005922  2077 7269 8188          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
00005926  7474 656E 
0000592A  2074 6F20 
0000592E  6164 6472 8189          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00005932  6573 7320 
00005936  3078 2578 
0000593A  203D 3D20 8190          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
0000593E  3078 2578 
00005942  2E20 5661 
00005946  6C75      
00005948  6520 4578 8191          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
0000594C  7065 6374 
00005950  6564 3A20 
00005954  30        
00005955  7825 780A 8192          dc.b      120,37,120,10,0
00005959  00        
                    8193   @m68kde~1_156:
0000595A  4164 6472 8194          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
0000595E  6573 733A 
00005962  2030 7825 
00005966  78        
00005967  2056 616C 8195          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
0000596B  7565 3A20 
0000596F  3078 2530 
00005973  3258      
00005975  0A00      8196          dc.b      10,0
                    8197   @m68kde~1_157:
00005978  4164 6472 8198          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
0000597C  6573 733A 
00005980  2030 7825 
00005984  78        
00005985  2056 616C 8199          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
00005989  7565 3A20 
0000598D  3078 2530 
00005991  3458      
00005993  0A00      8200          dc.b      10,0
                    8201   @m68kde~1_158:
00005996  4164 6472 8202          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
0000599A  6573 733A 
0000599E  2030 7825 
000059A2  78        
000059A3  2056 616C 8203          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
000059A7  7565 3A20 
000059AB  3078 2530 
000059AF  3858      
000059B1  0A00      8204          dc.b      10,0
                    8205   @m68kde~1_159:
000059B4  4445 312D 8206          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000059B8  3638 6B20 
000059BC  4275 6720 
000059C0  5631      
000059C2  2E37 3700 8207          dc.b      46,55,55,0
                    8208   @m68kde~1_160:
000059C6  436F 7079 8209          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000059CA  7269 6768 
000059CE  7420 2843 
000059D2  2920 504A 8210          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000059D6  2044 6176 
000059DA  6965 7320 
000059DE  3230      
000059E0  3136 00   8211          dc.b      49,54,0
                    8212   @m68kde~1_161:
000059E4  0D0A 5275 8213          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000059E8  6E6E 696E 
000059EC  672E 2E2E 
000059F0  2E        
000059F1  2E00      8214          dc.b      46,0
                    8215   @m68kde~1_162:
000059F4  5275 6E6E 8216          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000059F8  696E 672E 
000059FC  2E2E 2E2E 
00005A00  00        
                    8217   @m68kde~1_163:
00005A02  4279 3A20 8218          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005A06  504A 2044 
00005A0A  6176 6965 
00005A0E  73        
00005A0F  00        8219          dc.b      0
                    8220   @m68kde~1_164:
00005A10  0D0A 2573 8221          dc.b      13,10,37,115,0
00005A14  00        
                    8222   @m68kde~1_165:
00005A16  0A20 5374 8223          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
00005A1A  7564 656E 
00005A1E  7420 4E61 
00005A22  6D        
00005A23  6573 3A0A 8224          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
00005A27  205A 6163 
00005A2B  6861 7269 
00005A2F  61        
00005A30  6820 4A6F 8225          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
00005A34  7365 7068 
00005A38  3A20 3435 
00005A3C  35        
00005A3D  3030 3035 8226          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00005A41  3520 0A20 
00005A45  556D 6169 
00005A49  7220      
00005A4B  4D61 7A68 8227          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
00005A4F  6172 3A20 
00005A53  3230 3333 
00005A57  3333      
00005A59  3038 0A00 8228          dc.b      48,56,10,0
                    8229   @m68kde~1_166:
00005A5E  496E 6974 8230          dc.b      73,110,105,116,105,97,108,105,122,105,110,103
00005A62  6961 6C69 
00005A66  7A69 6E67 
00005A6A  2069 3263 8231          dc.b      32,105,50,99,32,116,101,115,116,46,46,46,10
00005A6E  2074 6573 
00005A72  742E 2E2E 
00005A76  0A        
00005A77  00        8232          dc.b      0
                    8233          section   data
00005A78            8234                   align
          0000 5A78 8235   DataStart       equ       *
                    8236   
                    8237   *********************************************************************************************************
                    8238   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8239   * to ram as part of the CStart routine in this file
                    8240   *********************************************************************************************************
                    8241   
                    8242   I2CTest_IICData:
00005A78  0000 0001 8243          dc.l      1,2,3,4,5
00005A7C  0000 0002 
00005A80  0000 0003 
00005A84  0000 0004 
00005A88  0000 0005 
                    8244   @vsscanf_bufx:
00005A8C  0B00 0546 8245          dc.l      @vsscanf_buf
                    8246   @vsscanf_1:
00005A90  0A00      8247          dc.b      10,0
                    8248   __ctype:
00005A92  0040 4040 8249          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005A96  4040 4040 
00005A9A  4040 5050 
00005A9E  5050 50   
00005AA1  4040 4040 8250          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00005AA5  4040 4040 
00005AA9  4040 4040 
00005AAD  4040 40   
00005AB0  4040 40D0 8251          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005AB4  A0A0 A0A0 
00005AB8  A0A0 A0A0 
00005ABC  A0A0 A0A0 8252          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005AC0  A0A0 A08C 
00005AC4  8C8C 8C   
00005AC7  8C8C 8C8C 8253          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005ACB  8C8C A0A0 
00005ACF  A0A0 A0   
00005AD2  A0A0 8A8A 8254          dc.b      160,160,138,138,138,138,138,138,130,130,130
00005AD6  8A8A 8A8A 
00005ADA  8282 82   
00005ADD  8282 8282 8255          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005AE1  8282 8282 
00005AE5  8282 82   
00005AE8  8282 8282 8256          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005AEC  8282 A0A0 
00005AF0  A0A0 A0   
00005AF3  A089 8989 8257          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005AF7  8989 8981 
00005AFB  8181 81   
00005AFE  8181 8181 8258          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005B02  8181 8181 
00005B06  8181 81   
00005B09  8181 8181 8259          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005B0D  81A0 A0A0 
00005B11  A040 0000 
00005B15  00        
00005B16  0000 0000 8260          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B1A  0000 0000 
00005B1E  0000 0000 
00005B22  0000 0000 
00005B26  0000 0000 
00005B2A  0000      
00005B2C  0000 0000 8261          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B30  0000 0000 
00005B34  0000 0000 
00005B38  0000 0000 
00005B3C  0000 0000 
00005B40  0000      
00005B42  0000 0000 8262          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B46  0000 0000 
00005B4A  0000 0000 
00005B4E  0000 0000 
00005B52  0000 0000 
00005B56  0000      
00005B58  0000 0000 8263          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B5C  0000 0000 
00005B60  0000 0000 
00005B64  0000 0000 
00005B68  0000 0000 
00005B6C  0000      
00005B6E  0000 0000 8264          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B72  0000 0000 
00005B76  0000 0000 
00005B7A  0000 0000 
00005B7E  0000 0000 
00005B82  0000      
00005B84  0000 0000 8265          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B88  0000 0000 
00005B8C  0000 0000 
00005B90  0000 00   
                    8266   @itoa_1:
00005B94  2D32 3134 8267          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005B98  3734 3833 
00005B9C  3634 3800 
                    8268          section   bss
00005BA0            8269                   align
          0000 5BA0 8270   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8271   
                    8272   *********************************************************************************************************
                    8273   * Section for Uninitialised Data held in ROM as constants
                    8274   *********************************************************************************************************
                    8275   
0B000000            8276                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0128 8277   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8278   
                    8279   
0B000000            8280   bss             org       bss
                    8281   
                    8282   *********************************************************************************************************
                    8283   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8284   * install the exception handler using the C function InstallExceptionHandler()
                    8285   *********************************************************************************************************
                    8286   
                    8287   
                    8288   
0B000000            8289   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            8290   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            8291   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            8292   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            8293   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            8294   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            8295   VCheck           ds.l    1      ditto
0B00001C            8296   VTrapV           ds.l    1      ditto
0B000020            8297   VPrivilege       ds.l    1      ditto
0B000024            8298   VTrace           ds.l    1
0B000028            8299   VLine1010emul    ds.l    1
0B00002C            8300   VLine1111emul    ds.l    1
0B000030            8301   VUnassigned1     ds.l    1
0B000034            8302   VUnassigned2     ds.l    1
0B000038            8303   VUnassigned3     ds.l    1
0B00003C            8304   VUninit_IRQ      ds.l    1
0B000040            8305   VUnassigned4     ds.l    1
0B000044            8306   VUnassigned5     ds.l    1
0B000048            8307   VUnassigned6     ds.l    1
0B00004C            8308   VUnassigned7     ds.l    1
0B000050            8309   VUnassigned8     ds.l    1
0B000054            8310   VUnassigned9     ds.l    1
0B000058            8311   VUnassigned10    ds.l    1
0B00005C            8312   VUnassigned11    ds.l    1
0B000060            8313   VSpuriousIRQ     ds.l    1
                    8314   
                    8315   * Interrupt handlers Vector 25-31
0B000064            8316   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            8317   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            8318   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            8319   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            8320   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            8321   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            8322   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8323   
                    8324   * Trap Handler vectors 32-47
0B000080            8325   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            8326   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            8327   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            8328   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            8329   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            8330   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            8331   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            8332   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            8333   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            8334   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            8335   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            8336   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            8337   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            8338   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            8339   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            8340   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8341   
                    8342   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8343   
                    8344   ***********************************************************************************************************
                    8345   * Other Variables
                    8346   ***********************************************************************************************************
                    8347   *__DebugA5       ds.l    1
                    8348   *__UserA5        ds.l    1
                    8349   
                    8350   ***********************************************************************************************************
0B0000C0            8351   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            8352   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            8353   __heap:         ds.l    0       ; pointers for malloc functions
                    8354   
                    8355   *__himem:       ds.l    himem            ; highest memory location + 1
                    8356   *__stklen:      ds.l    stklen           ; default stack size
                    8357   
                    8358   *********************************************************************************************************
                    8359   * Section for Heap
                    8360   *********************************************************************************************************
                    8361   
                    8362   _i:
0B0000C4            8363          ds.b      4
                    8364   _x:
0B0000C8            8365          ds.b      4
                    8366   _y:
0B0000CC            8367          ds.b      4
                    8368   _z:
0B0000D0            8369          ds.b      4
                    8370   _PortA_Count:
0B0000D4            8371          ds.b      4
                    8372   _Trace:
0B0000D8            8373          ds.b      4
                    8374   _GoFlag:
0B0000DC            8375          ds.b      4
                    8376   _Echo:
0B0000E0            8377          ds.b      4
                    8378   _d0:
0B0000E4            8379          ds.b      4
                    8380   _d1:
0B0000E8            8381          ds.b      4
                    8382   _d2:
0B0000EC            8383          ds.b      4
                    8384   _d3:
0B0000F0            8385          ds.b      4
                    8386   _d4:
0B0000F4            8387          ds.b      4
                    8388   _d5:
0B0000F8            8389          ds.b      4
                    8390   _d6:
0B0000FC            8391          ds.b      4
                    8392   _d7:
0B000100            8393          ds.b      4
                    8394   _a0:
0B000104            8395          ds.b      4
                    8396   _a1:
0B000108            8397          ds.b      4
                    8398   _a2:
0B00010C            8399          ds.b      4
                    8400   _a3:
0B000110            8401          ds.b      4
                    8402   _a4:
0B000114            8403          ds.b      4
                    8404   _a5:
0B000118            8405          ds.b      4
                    8406   _a6:
0B00011C            8407          ds.b      4
                    8408   _PC:
0B000120            8409          ds.b      4
                    8410   _SSP:
0B000124            8411          ds.b      4
                    8412   _USP:
0B000128            8413          ds.b      4
                    8414   _SR:
0B00012C            8415          ds.b      2
                    8416   _BreakPointAddress:
0B00012E            8417          ds.b      32
                    8418   _BreakPointInstruction:
0B00014E            8419          ds.b      16
                    8420   _BreakPointSetOrCleared:
0B00015E            8421          ds.b      32
                    8422   _InstructionSize:
0B00017E            8423          ds.b      4
                    8424   _WatchPointAddress:
0B000182            8425          ds.b      32
                    8426   _WatchPointSetOrCleared:
0B0001A2            8427          ds.b      32
                    8428   _WatchPointString:
0B0001C2            8429          ds.b      800
                    8430   _TempString:
0B0004E2            8431          ds.b      100
                    8432   @vsscanf_buf:
0B000546            8433          ds.b      80
                    8434          section   heap
0B000596            8435                   align
          0B00 0596 8436   bssEnd          equ *                   end of storage space for unitialised variables
                    8437   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 8438   heap   equ       *
0B000596            8439                    align
          0000 0000

Assembly errors: 0
