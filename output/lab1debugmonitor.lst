680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 06 Feb 2025      Time: 00:45:36          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  28B2      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1F86      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; #define StartOfExceptionVectorTable 0x08030000
                     473   ; //#define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; #define TopOfStack 0x08040000
                     476   ; //#define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  672          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3616      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  3FEC      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  3FF0      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4006      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  4008      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0803  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3616      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2C5A      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  400A      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4044      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  405C      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  4064      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  406A      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  3FEC      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3616      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  406E      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  4044      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  4082      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  4098      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  40AC      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3616      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0803 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  40DC      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  2D54      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2B8E      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2C5A      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  410C      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4132      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0803 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3616      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4154      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  4170      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  41B6      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  41C8      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  2CC6      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  41DA      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /*******************************************************************
                    1547   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1548   ; ********************************************************************/
                    1549   ; void ProgramFlashChip(void)
                    1550   ; {
                    1551   _ProgramFlashChip:
000010C4  4E75      1552          rts
                    1553   ; //
                    1554   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1555   ; // TODO : then verify by reading it back and comparing to memory
                    1556   ; //
                    1557   ; }
                    1558   ; /*************************************************************************
                    1559   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1560   ; **************************************************************************/
                    1561   ; void LoadFromFlashChip(void)
                    1562   ; {
                    1563   _LoadFromFlashChip:
                    1564   ; printf("\r\nLoading Program From SPI Flash....") ;
000010C6  4879 0000 1565          pea       @m68kde~1_22.L
000010CA  420E      
000010CC  4EB9 0000 1566          jsr       _printf
000010D0  3616      
000010D2  584F      1567          addq.w    #4,A7
000010D4  4E75      1568          rts
                    1569   ; //
                    1570   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1571   ; //
                    1572   ; }
                    1573   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1574   ; // IMPORTANT
                    1575   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1576   ; // has to be done with an interrupt (IRQ Level 6)
                    1577   ; //
                    1578   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1579   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1580   ; //
                    1581   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1582   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1583   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1584   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1585   ; // program area
                    1586   ; //
                    1587   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1588   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1589   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1590   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1591   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1592   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1593   ; void DumpRegisters()
                    1594   ; {
                    1595   _DumpRegisters:
000010D6  48E7 3F3C 1596          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000010DA  45F9 0000 1597          lea       _putch.L,A2
000010DE  2C5A      
000010E0  47F9 0000 1598          lea       _printf.L,A3
000010E4  3616      
000010E6  49F9 0803 1599          lea       _SR.L,A4
000010EA  012C      
000010EC  4BF9 0803 1600          lea       _WatchPointString.L,A5
000010F0  01C2      
                    1601   ; short i, x, j, k ;
                    1602   ; unsigned char c, *BytePointer;
                    1603   ; // buld up strings for displaying watchpoints
                    1604   ; for(x = 0; x < (short)(8); x++)
000010F2  4242      1605          clr.w     D2
                    1606   DumpRegisters_1:
000010F4  0C42 0008 1607          cmp.w     #8,D2
000010F8  6C00 01C6 1608          bge       DumpRegisters_3
                    1609   ; {
                    1610   ; if(WatchPointSetOrCleared[x] == 1)
000010FC  48C2      1611          ext.l     D2
000010FE  2002      1612          move.l    D2,D0
00001100  E588      1613          lsl.l     #2,D0
00001102  41F9 0803 1614          lea       _WatchPointSetOrCleared.L,A0
00001106  01A2      
00001108  2030 0800 1615          move.l    0(A0,D0.L),D0
0000110C  0C80 0000 1616          cmp.l     #1,D0
00001110  0001      
00001112  6600 0186 1617          bne       DumpRegisters_4
                    1618   ; {
                    1619   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001116  48C2      1620          ext.l     D2
00001118  2202      1621          move.l    D2,D1
0000111A  E589      1622          lsl.l     #2,D1
0000111C  41F9 0803 1623          lea       _WatchPointAddress.L,A0
00001120  0182      
00001122  2F30 1800 1624          move.l    0(A0,D1.L),-(A7)
00001126  4879 0000 1625          pea       @m68kde~1_23.L
0000112A  4234      
0000112C  220D      1626          move.l    A5,D1
0000112E  48C2      1627          ext.l     D2
00001130  2F00      1628          move.l    D0,-(A7)
00001132  2002      1629          move.l    D2,D0
00001134  C1FC 0064 1630          muls      #100,D0
00001138  D280      1631          add.l     D0,D1
0000113A  201F      1632          move.l    (A7)+,D0
0000113C  2F01      1633          move.l    D1,-(A7)
0000113E  4EB9 0000 1634          jsr       _sprintf
00001142  2CF2      
00001144  DEFC 000C 1635          add.w     #12,A7
                    1636   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001148  48C2      1637          ext.l     D2
0000114A  2002      1638          move.l    D2,D0
0000114C  E588      1639          lsl.l     #2,D0
0000114E  41F9 0803 1640          lea       _WatchPointAddress.L,A0
00001152  0182      
00001154  2A30 0800 1641          move.l    0(A0,D0.L),D5
                    1642   ; for(j = 0; j < (short)(16); j+=2)
00001158  4243      1643          clr.w     D3
                    1644   DumpRegisters_6:
0000115A  0C43 0010 1645          cmp.w     #16,D3
0000115E  6C00 0082 1646          bge       DumpRegisters_8
                    1647   ; {
                    1648   ; for(k = 0; k < (short)(2); k++)
00001162  4246      1649          clr.w     D6
                    1650   DumpRegisters_9:
00001164  0C46 0002 1651          cmp.w     #2,D6
00001168  6C00 0052 1652          bge       DumpRegisters_11
                    1653   ; {
                    1654   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000116C  2045      1655          move.l    D5,A0
0000116E  48C3      1656          ext.l     D3
00001170  2203      1657          move.l    D3,D1
00001172  48C6      1658          ext.l     D6
00001174  D286      1659          add.l     D6,D1
00001176  1230 1800 1660          move.b    0(A0,D1.L),D1
0000117A  C2BC 0000 1661          and.l     #255,D1
0000117E  00FF      
00001180  2F01      1662          move.l    D1,-(A7)
00001182  4879 0000 1663          pea       @m68kde~1_8.L
00001186  4064      
00001188  4879 0803 1664          pea       _TempString.L
0000118C  04E2      
0000118E  4EB9 0000 1665          jsr       _sprintf
00001192  2CF2      
00001194  DEFC 000C 1666          add.w     #12,A7
                    1667   ; strcat(WatchPointString[x], TempString) ;
00001198  4879 0803 1668          pea       _TempString.L
0000119C  04E2      
0000119E  220D      1669          move.l    A5,D1
000011A0  48C2      1670          ext.l     D2
000011A2  2F00      1671          move.l    D0,-(A7)
000011A4  2002      1672          move.l    D2,D0
000011A6  C1FC 0064 1673          muls      #100,D0
000011AA  D280      1674          add.l     D0,D1
000011AC  201F      1675          move.l    (A7)+,D0
000011AE  2F01      1676          move.l    D1,-(A7)
000011B0  4EB9 0000 1677          jsr       _strcat
000011B4  2D3E      
000011B6  504F      1678          addq.w    #8,A7
000011B8  5246      1679          addq.w    #1,D6
000011BA  60A8      1680          bra       DumpRegisters_9
                    1681   DumpRegisters_11:
                    1682   ; }
                    1683   ; strcat(WatchPointString[x]," ") ;
000011BC  4879 0000 1684          pea       @m68kde~1_24.L
000011C0  423C      
000011C2  220D      1685          move.l    A5,D1
000011C4  48C2      1686          ext.l     D2
000011C6  2F00      1687          move.l    D0,-(A7)
000011C8  2002      1688          move.l    D2,D0
000011CA  C1FC 0064 1689          muls      #100,D0
000011CE  D280      1690          add.l     D0,D1
000011D0  201F      1691          move.l    (A7)+,D0
000011D2  2F01      1692          move.l    D1,-(A7)
000011D4  4EB9 0000 1693          jsr       _strcat
000011D8  2D3E      
000011DA  504F      1694          addq.w    #8,A7
000011DC  5443      1695          addq.w    #2,D3
000011DE  6000 FF7A 1696          bra       DumpRegisters_6
                    1697   DumpRegisters_8:
                    1698   ; }
                    1699   ; strcat(WatchPointString[x], "  ") ;
000011E2  4879 0000 1700          pea       @m68kde~1_9.L
000011E6  406A      
000011E8  220D      1701          move.l    A5,D1
000011EA  48C2      1702          ext.l     D2
000011EC  2F00      1703          move.l    D0,-(A7)
000011EE  2002      1704          move.l    D2,D0
000011F0  C1FC 0064 1705          muls      #100,D0
000011F4  D280      1706          add.l     D0,D1
000011F6  201F      1707          move.l    (A7)+,D0
000011F8  2F01      1708          move.l    D1,-(A7)
000011FA  4EB9 0000 1709          jsr       _strcat
000011FE  2D3E      
00001200  504F      1710          addq.w    #8,A7
                    1711   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001202  48C2      1712          ext.l     D2
00001204  2002      1713          move.l    D2,D0
00001206  E588      1714          lsl.l     #2,D0
00001208  41F9 0803 1715          lea       _WatchPointAddress.L,A0
0000120C  0182      
0000120E  2A30 0800 1716          move.l    0(A0,D0.L),D5
                    1717   ; for(j = 0; j < (short)(16); j++)
00001212  4243      1718          clr.w     D3
                    1719   DumpRegisters_12:
00001214  0C43 0010 1720          cmp.w     #16,D3
00001218  6C00 007E 1721          bge       DumpRegisters_14
                    1722   ; {
                    1723   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000121C  2045      1724          move.l    D5,A0
0000121E  48C3      1725          ext.l     D3
00001220  1030 3800 1726          move.b    0(A0,D3.L),D0
00001224  C03C 007F 1727          and.b     #127,D0
00001228  1E00      1728          move.b    D0,D7
                    1729   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000122A  0C07 007F 1730          cmp.b     #127,D7
0000122E  6206      1731          bhi.s     DumpRegisters_17
00001230  0C07 0020 1732          cmp.b     #32,D7
00001234  6416      1733          bhs.s     DumpRegisters_15
                    1734   DumpRegisters_17:
                    1735   ; sprintf(TempString, ".") ;
00001236  4879 0000 1736          pea       @m68kde~1_25.L
0000123A  423E      
0000123C  4879 0803 1737          pea       _TempString.L
00001240  04E2      
00001242  4EB9 0000 1738          jsr       _sprintf
00001246  2CF2      
00001248  504F      1739          addq.w    #8,A7
0000124A  6026      1740          bra.s     DumpRegisters_16
                    1741   DumpRegisters_15:
                    1742   ; else
                    1743   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000124C  2045      1744          move.l    D5,A0
0000124E  48C3      1745          ext.l     D3
00001250  1230 3800 1746          move.b    0(A0,D3.L),D1
00001254  C2BC 0000 1747          and.l     #255,D1
00001258  00FF      
0000125A  2F01      1748          move.l    D1,-(A7)
0000125C  4879 0000 1749          pea       @m68kde~1_26.L
00001260  4240      
00001262  4879 0803 1750          pea       _TempString.L
00001266  04E2      
00001268  4EB9 0000 1751          jsr       _sprintf
0000126C  2CF2      
0000126E  DEFC 000C 1752          add.w     #12,A7
                    1753   DumpRegisters_16:
                    1754   ; strcat(WatchPointString[x], TempString) ;
00001272  4879 0803 1755          pea       _TempString.L
00001276  04E2      
00001278  220D      1756          move.l    A5,D1
0000127A  48C2      1757          ext.l     D2
0000127C  2F00      1758          move.l    D0,-(A7)
0000127E  2002      1759          move.l    D2,D0
00001280  C1FC 0064 1760          muls      #100,D0
00001284  D280      1761          add.l     D0,D1
00001286  201F      1762          move.l    (A7)+,D0
00001288  2F01      1763          move.l    D1,-(A7)
0000128A  4EB9 0000 1764          jsr       _strcat
0000128E  2D3E      
00001290  504F      1765          addq.w    #8,A7
00001292  5243      1766          addq.w    #1,D3
00001294  6000 FF7E 1767          bra       DumpRegisters_12
                    1768   DumpRegisters_14:
00001298  6020      1769          bra.s     DumpRegisters_5
                    1770   DumpRegisters_4:
                    1771   ; }
                    1772   ; }
                    1773   ; else
                    1774   ; strcpy(WatchPointString[x], "") ;
0000129A  4879 0000 1775          pea       @m68kde~1_27.L
0000129E  4244      
000012A0  220D      1776          move.l    A5,D1
000012A2  48C2      1777          ext.l     D2
000012A4  2F00      1778          move.l    D0,-(A7)
000012A6  2002      1779          move.l    D2,D0
000012A8  C1FC 0064 1780          muls      #100,D0
000012AC  D280      1781          add.l     D0,D1
000012AE  201F      1782          move.l    (A7)+,D0
000012B0  2F01      1783          move.l    D1,-(A7)
000012B2  4EB9 0000 1784          jsr       _strcpy
000012B6  2B6C      
000012B8  504F      1785          addq.w    #8,A7
                    1786   DumpRegisters_5:
000012BA  5242      1787          addq.w    #1,D2
000012BC  6000 FE36 1788          bra       DumpRegisters_1
                    1789   DumpRegisters_3:
                    1790   ; }
                    1791   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000012C0  2F39 0803 1792          move.l    _a0.L,-(A7)
000012C4  0104      
000012C6  2F39 0803 1793          move.l    _d0.L,-(A7)
000012CA  00E4      
000012CC  4879 0000 1794          pea       @m68kde~1_28.L
000012D0  4246      
000012D2  4E93      1795          jsr       (A3)
000012D4  DEFC 000C 1796          add.w     #12,A7
                    1797   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000012D8  2F39 0803 1798          move.l    _a1.L,-(A7)
000012DC  0108      
000012DE  2F39 0803 1799          move.l    _d1.L,-(A7)
000012E2  00E8      
000012E4  4879 0000 1800          pea       @m68kde~1_29.L
000012E8  4262      
000012EA  4E93      1801          jsr       (A3)
000012EC  DEFC 000C 1802          add.w     #12,A7
                    1803   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000012F0  2F39 0803 1804          move.l    _a2.L,-(A7)
000012F4  010C      
000012F6  2F39 0803 1805          move.l    _d2.L,-(A7)
000012FA  00EC      
000012FC  4879 0000 1806          pea       @m68kde~1_30.L
00001300  427C      
00001302  4E93      1807          jsr       (A3)
00001304  DEFC 000C 1808          add.w     #12,A7
                    1809   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001308  2F39 0803 1810          move.l    _a3.L,-(A7)
0000130C  0110      
0000130E  2F39 0803 1811          move.l    _d3.L,-(A7)
00001312  00F0      
00001314  4879 0000 1812          pea       @m68kde~1_31.L
00001318  4296      
0000131A  4E93      1813          jsr       (A3)
0000131C  DEFC 000C 1814          add.w     #12,A7
                    1815   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001320  2F39 0803 1816          move.l    _a4.L,-(A7)
00001324  0114      
00001326  2F39 0803 1817          move.l    _d4.L,-(A7)
0000132A  00F4      
0000132C  4879 0000 1818          pea       @m68kde~1_32.L
00001330  42B0      
00001332  4E93      1819          jsr       (A3)
00001334  DEFC 000C 1820          add.w     #12,A7
                    1821   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001338  2F39 0803 1822          move.l    _a5.L,-(A7)
0000133C  0118      
0000133E  2F39 0803 1823          move.l    _d5.L,-(A7)
00001342  00F8      
00001344  4879 0000 1824          pea       @m68kde~1_33.L
00001348  42CA      
0000134A  4E93      1825          jsr       (A3)
0000134C  DEFC 000C 1826          add.w     #12,A7
                    1827   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001350  2F39 0803 1828          move.l    _a6.L,-(A7)
00001354  011C      
00001356  2F39 0803 1829          move.l    _d6.L,-(A7)
0000135A  00FC      
0000135C  4879 0000 1830          pea       @m68kde~1_34.L
00001360  42E4      
00001362  4E93      1831          jsr       (A3)
00001364  DEFC 000C 1832          add.w     #12,A7
                    1833   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001368  3214      1834          move.w    (A4),D1
0000136A  C27C 2000 1835          and.w     #8192,D1
0000136E  0C41 2000 1836          cmp.w     #8192,D1
00001372  6608      1837          bne.s     DumpRegisters_18
00001374  2239 0803 1838          move.l    _SSP.L,D1
00001378  0124      
0000137A  6006      1839          bra.s     DumpRegisters_19
                    1840   DumpRegisters_18:
0000137C  2239 0803 1841          move.l    _USP.L,D1
00001380  0128      
                    1842   DumpRegisters_19:
00001382  2F01      1843          move.l    D1,-(A7)
00001384  2F39 0803 1844          move.l    _d7.L,-(A7)
00001388  0100      
0000138A  4879 0000 1845          pea       @m68kde~1_35.L
0000138E  42FE      
00001390  4E93      1846          jsr       (A3)
00001392  DEFC 000C 1847          add.w     #12,A7
                    1848   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001396  2F39 0803 1849          move.l    _USP.L,-(A7)
0000139A  0128      
0000139C  4879 0000 1850          pea       @m68kde~1_36.L
000013A0  4318      
000013A2  4E93      1851          jsr       (A3)
000013A4  504F      1852          addq.w    #8,A7
                    1853   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013A6  2F39 0803 1854          move.l    _SSP.L,-(A7)
000013AA  0124      
000013AC  4879 0000 1855          pea       @m68kde~1_37.L
000013B0  4336      
000013B2  4E93      1856          jsr       (A3)
000013B4  504F      1857          addq.w    #8,A7
                    1858   ; printf("\r\n SR = $%04X   ",SR) ;
000013B6  3214      1859          move.w    (A4),D1
000013B8  C2BC 0000 1860          and.l     #65535,D1
000013BC  FFFF      
000013BE  2F01      1861          move.l    D1,-(A7)
000013C0  4879 0000 1862          pea       @m68kde~1_38.L
000013C4  4358      
000013C6  4E93      1863          jsr       (A3)
000013C8  504F      1864          addq.w    #8,A7
                    1865   ; // display the status word in characters etc.
                    1866   ; printf("   [") ;
000013CA  4879 0000 1867          pea       @m68kde~1_39.L
000013CE  436A      
000013D0  4E93      1868          jsr       (A3)
000013D2  584F      1869          addq.w    #4,A7
                    1870   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000013D4  3014      1871          move.w    (A4),D0
000013D6  C07C 8000 1872          and.w     #32768,D0
000013DA  0C40 8000 1873          cmp.w     #32768,D0
000013DE  660A      1874          bne.s     DumpRegisters_20
000013E0  4878 0054 1875          pea       84
000013E4  4E92      1876          jsr       (A2)
000013E6  584F      1877          addq.w    #4,A7
000013E8  6008      1878          bra.s     DumpRegisters_21
                    1879   DumpRegisters_20:
000013EA  4878 002D 1880          pea       45
000013EE  4E92      1881          jsr       (A2)
000013F0  584F      1882          addq.w    #4,A7
                    1883   DumpRegisters_21:
                    1884   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000013F2  3014      1885          move.w    (A4),D0
000013F4  C07C 2000 1886          and.w     #8192,D0
000013F8  0C40 2000 1887          cmp.w     #8192,D0
000013FC  660A      1888          bne.s     DumpRegisters_22
000013FE  4878 0053 1889          pea       83
00001402  4E92      1890          jsr       (A2)
00001404  584F      1891          addq.w    #4,A7
00001406  6008      1892          bra.s     DumpRegisters_23
                    1893   DumpRegisters_22:
00001408  4878 0055 1894          pea       85
0000140C  4E92      1895          jsr       (A2)
0000140E  584F      1896          addq.w    #4,A7
                    1897   DumpRegisters_23:
                    1898   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001410  3014      1899          move.w    (A4),D0
00001412  C07C 0400 1900          and.w     #1024,D0
00001416  0C40 0400 1901          cmp.w     #1024,D0
0000141A  660A      1902          bne.s     DumpRegisters_24
0000141C  4878 0031 1903          pea       49
00001420  4E92      1904          jsr       (A2)
00001422  584F      1905          addq.w    #4,A7
00001424  6008      1906          bra.s     DumpRegisters_25
                    1907   DumpRegisters_24:
00001426  4878 0030 1908          pea       48
0000142A  4E92      1909          jsr       (A2)
0000142C  584F      1910          addq.w    #4,A7
                    1911   DumpRegisters_25:
                    1912   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000142E  3014      1913          move.w    (A4),D0
00001430  C07C 0200 1914          and.w     #512,D0
00001434  0C40 0200 1915          cmp.w     #512,D0
00001438  660A      1916          bne.s     DumpRegisters_26
0000143A  4878 0031 1917          pea       49
0000143E  4E92      1918          jsr       (A2)
00001440  584F      1919          addq.w    #4,A7
00001442  6008      1920          bra.s     DumpRegisters_27
                    1921   DumpRegisters_26:
00001444  4878 0030 1922          pea       48
00001448  4E92      1923          jsr       (A2)
0000144A  584F      1924          addq.w    #4,A7
                    1925   DumpRegisters_27:
                    1926   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000144C  3014      1927          move.w    (A4),D0
0000144E  C07C 0100 1928          and.w     #256,D0
00001452  0C40 0100 1929          cmp.w     #256,D0
00001456  660A      1930          bne.s     DumpRegisters_28
00001458  4878 0031 1931          pea       49
0000145C  4E92      1932          jsr       (A2)
0000145E  584F      1933          addq.w    #4,A7
00001460  6008      1934          bra.s     DumpRegisters_29
                    1935   DumpRegisters_28:
00001462  4878 0030 1936          pea       48
00001466  4E92      1937          jsr       (A2)
00001468  584F      1938          addq.w    #4,A7
                    1939   DumpRegisters_29:
                    1940   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000146A  3014      1941          move.w    (A4),D0
0000146C  C07C 0010 1942          and.w     #16,D0
00001470  0C40 0010 1943          cmp.w     #16,D0
00001474  660A      1944          bne.s     DumpRegisters_30
00001476  4878 0058 1945          pea       88
0000147A  4E92      1946          jsr       (A2)
0000147C  584F      1947          addq.w    #4,A7
0000147E  6008      1948          bra.s     DumpRegisters_31
                    1949   DumpRegisters_30:
00001480  4878 002D 1950          pea       45
00001484  4E92      1951          jsr       (A2)
00001486  584F      1952          addq.w    #4,A7
                    1953   DumpRegisters_31:
                    1954   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001488  3014      1955          move.w    (A4),D0
0000148A  C07C 0008 1956          and.w     #8,D0
0000148E  0C40 0008 1957          cmp.w     #8,D0
00001492  660A      1958          bne.s     DumpRegisters_32
00001494  4878 004E 1959          pea       78
00001498  4E92      1960          jsr       (A2)
0000149A  584F      1961          addq.w    #4,A7
0000149C  6008      1962          bra.s     DumpRegisters_33
                    1963   DumpRegisters_32:
0000149E  4878 002D 1964          pea       45
000014A2  4E92      1965          jsr       (A2)
000014A4  584F      1966          addq.w    #4,A7
                    1967   DumpRegisters_33:
                    1968   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014A6  3014      1969          move.w    (A4),D0
000014A8  C07C 0004 1970          and.w     #4,D0
000014AC  0C40 0004 1971          cmp.w     #4,D0
000014B0  660A      1972          bne.s     DumpRegisters_34
000014B2  4878 005A 1973          pea       90
000014B6  4E92      1974          jsr       (A2)
000014B8  584F      1975          addq.w    #4,A7
000014BA  6008      1976          bra.s     DumpRegisters_35
                    1977   DumpRegisters_34:
000014BC  4878 002D 1978          pea       45
000014C0  4E92      1979          jsr       (A2)
000014C2  584F      1980          addq.w    #4,A7
                    1981   DumpRegisters_35:
                    1982   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000014C4  3014      1983          move.w    (A4),D0
000014C6  C07C 0002 1984          and.w     #2,D0
000014CA  0C40 0002 1985          cmp.w     #2,D0
000014CE  660A      1986          bne.s     DumpRegisters_36
000014D0  4878 0056 1987          pea       86
000014D4  4E92      1988          jsr       (A2)
000014D6  584F      1989          addq.w    #4,A7
000014D8  6008      1990          bra.s     DumpRegisters_37
                    1991   DumpRegisters_36:
000014DA  4878 002D 1992          pea       45
000014DE  4E92      1993          jsr       (A2)
000014E0  584F      1994          addq.w    #4,A7
                    1995   DumpRegisters_37:
                    1996   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000014E2  3014      1997          move.w    (A4),D0
000014E4  C07C 0001 1998          and.w     #1,D0
000014E8  0C40 0001 1999          cmp.w     #1,D0
000014EC  660A      2000          bne.s     DumpRegisters_38
000014EE  4878 0043 2001          pea       67
000014F2  4E92      2002          jsr       (A2)
000014F4  584F      2003          addq.w    #4,A7
000014F6  6008      2004          bra.s     DumpRegisters_39
                    2005   DumpRegisters_38:
000014F8  4878 002D 2006          pea       45
000014FC  4E92      2007          jsr       (A2)
000014FE  584F      2008          addq.w    #4,A7
                    2009   DumpRegisters_39:
                    2010   ; putchar(']') ;
00001500  4878 005D 2011          pea       93
00001504  4E92      2012          jsr       (A2)
00001506  584F      2013          addq.w    #4,A7
                    2014   ; printf("\r\n PC = $%08X  ", PC) ;
00001508  2F39 0803 2015          move.l    _PC.L,-(A7)
0000150C  0120      
0000150E  4879 0000 2016          pea       @m68kde~1_40.L
00001512  4370      
00001514  4E93      2017          jsr       (A3)
00001516  504F      2018          addq.w    #8,A7
                    2019   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001518  2039 0803 2020          move.l    _PC.L,D0
0000151C  0120      
0000151E  2040      2021          move.l    D0,A0
00001520  3010      2022          move.w    (A0),D0
00001522  0C40 4E4E 2023          cmp.w     #20046,D0
00001526  660A      2024          bne.s     DumpRegisters_40
                    2025   ; printf("[@ BREAKPOINT]") ;
00001528  4879 0000 2026          pea       @m68kde~1_41.L
0000152C  4380      
0000152E  4E93      2027          jsr       (A3)
00001530  584F      2028          addq.w    #4,A7
                    2029   DumpRegisters_40:
                    2030   ; printf("\r\n") ;
00001532  4879 0000 2031          pea       @m68kde~1_1.L
00001536  3FEC      
00001538  4E93      2032          jsr       (A3)
0000153A  584F      2033          addq.w    #4,A7
                    2034   ; for(i=0; i < 8; i++)    {
0000153C  4244      2035          clr.w     D4
                    2036   DumpRegisters_42:
0000153E  0C44 0008 2037          cmp.w     #8,D4
00001542  6C00 0040 2038          bge       DumpRegisters_44
                    2039   ; if(WatchPointSetOrCleared[i] == 1)
00001546  48C4      2040          ext.l     D4
00001548  2004      2041          move.l    D4,D0
0000154A  E588      2042          lsl.l     #2,D0
0000154C  41F9 0803 2043          lea       _WatchPointSetOrCleared.L,A0
00001550  01A2      
00001552  2030 0800 2044          move.l    0(A0,D0.L),D0
00001556  0C80 0000 2045          cmp.l     #1,D0
0000155A  0001      
0000155C  6622      2046          bne.s     DumpRegisters_45
                    2047   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000155E  220D      2048          move.l    A5,D1
00001560  48C4      2049          ext.l     D4
00001562  2F00      2050          move.l    D0,-(A7)
00001564  2004      2051          move.l    D4,D0
00001566  C1FC 0064 2052          muls      #100,D0
0000156A  D280      2053          add.l     D0,D1
0000156C  201F      2054          move.l    (A7)+,D0
0000156E  2F01      2055          move.l    D1,-(A7)
00001570  48C4      2056          ext.l     D4
00001572  2F04      2057          move.l    D4,-(A7)
00001574  4879 0000 2058          pea       @m68kde~1_42.L
00001578  4390      
0000157A  4E93      2059          jsr       (A3)
0000157C  DEFC 000C 2060          add.w     #12,A7
                    2061   DumpRegisters_45:
00001580  5244      2062          addq.w    #1,D4
00001582  60BA      2063          bra       DumpRegisters_42
                    2064   DumpRegisters_44:
00001584  4CDF 3CFC 2065          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001588  4E75      2066          rts
                    2067   ; }
                    2068   ; }
                    2069   ; // Trace Exception Handler
                    2070   ; void DumpRegistersandPause(void)
                    2071   ; {
                    2072   _DumpRegistersandPause:
0000158A  2F0A      2073          move.l    A2,-(A7)
0000158C  45F9 0000 2074          lea       _printf.L,A2
00001590  3616      
                    2075   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001592  4879 0000 2076          pea       @m68kde~1_43.L
00001596  439C      
00001598  4E92      2077          jsr       (A2)
0000159A  584F      2078          addq.w    #4,A7
                    2079   ; printf("\r\nBreak Points :[Disabled]") ;
0000159C  4879 0000 2080          pea       @m68kde~1_44.L
000015A0  43BC      
000015A2  4E92      2081          jsr       (A2)
000015A4  584F      2082          addq.w    #4,A7
                    2083   ; DumpRegisters() ;
000015A6  4EB8 10D6 2084          jsr       _DumpRegisters
                    2085   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015AA  4879 0000 2086          pea       @m68kde~1_45.L
000015AE  43D8      
000015B0  4E92      2087          jsr       (A2)
000015B2  584F      2088          addq.w    #4,A7
                    2089   ; printf("\r\nPress <ESC> to Resume Program") ;
000015B4  4879 0000 2090          pea       @m68kde~1_46.L
000015B8  4404      
000015BA  4E92      2091          jsr       (A2)
000015BC  584F      2092          addq.w    #4,A7
                    2093   ; menu() ;
000015BE  4EB9 0000 2094          jsr       _menu
000015C2  216E      
000015C4  245F      2095          move.l    (A7)+,A2
000015C6  4E75      2096          rts
                    2097   ; }
                    2098   ; void ChangeRegisters(void)
                    2099   ; {
                    2100   _ChangeRegisters:
000015C8  4E56 FFFC 2101          link      A6,#-4
000015CC  48E7 303C 2102          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000015D0  45F9 0000 2103          lea       _printf.L,A2
000015D4  3616      
000015D6  47EE FFFC 2104          lea       -4(A6),A3
000015DA  49F8 0CA4 2105          lea       _Get8HexDigits.L,A4
000015DE  4BF8 0B68 2106          lea       __getch.L,A5
                    2107   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2108   ; int reg_val ;
                    2109   ; char c, reg[3] ;
                    2110   ; reg[0] = tolower(_getch()) ;
000015E2  2F00      2111          move.l    D0,-(A7)
000015E4  4E95      2112          jsr       (A5)
000015E6  2200      2113          move.l    D0,D1
000015E8  201F      2114          move.l    (A7)+,D0
000015EA  2F01      2115          move.l    D1,-(A7)
000015EC  4EB9 0000 2116          jsr       _tolower
000015F0  2CC6      
000015F2  584F      2117          addq.w    #4,A7
000015F4  1680      2118          move.b    D0,(A3)
                    2119   ; reg[1] = c = tolower(_getch()) ;
000015F6  2F00      2120          move.l    D0,-(A7)
000015F8  4E95      2121          jsr       (A5)
000015FA  2200      2122          move.l    D0,D1
000015FC  201F      2123          move.l    (A7)+,D0
000015FE  2F01      2124          move.l    D1,-(A7)
00001600  4EB9 0000 2125          jsr       _tolower
00001604  2CC6      
00001606  584F      2126          addq.w    #4,A7
00001608  1400      2127          move.b    D0,D2
0000160A  1740 0001 2128          move.b    D0,1(A3)
                    2129   ; if(reg[0] == (char)('d'))  {    // change data register
0000160E  1013      2130          move.b    (A3),D0
00001610  0C00 0064 2131          cmp.b     #100,D0
00001614  6600 00AE 2132          bne       ChangeRegisters_1
                    2133   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001618  102B 0001 2134          move.b    1(A3),D0
0000161C  0C00 0037 2135          cmp.b     #55,D0
00001620  6E0A      2136          bgt.s     ChangeRegisters_5
00001622  102B 0001 2137          move.b    1(A3),D0
00001626  0C00 0030 2138          cmp.b     #48,D0
0000162A  6C0E      2139          bge.s     ChangeRegisters_3
                    2140   ChangeRegisters_5:
                    2141   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000162C  4879 0000 2142          pea       @m68kde~1_47.L
00001630  4424      
00001632  4E92      2143          jsr       (A2)
00001634  584F      2144          addq.w    #4,A7
                    2145   ; return ;
00001636  6000 0244 2146          bra       ChangeRegisters_6
                    2147   ChangeRegisters_3:
                    2148   ; }
                    2149   ; else {
                    2150   ; printf("\r\nD%c = ", c) ;
0000163A  4882      2151          ext.w     D2
0000163C  48C2      2152          ext.l     D2
0000163E  2F02      2153          move.l    D2,-(A7)
00001640  4879 0000 2154          pea       @m68kde~1_48.L
00001644  4450      
00001646  4E92      2155          jsr       (A2)
00001648  504F      2156          addq.w    #8,A7
                    2157   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000164A  42A7      2158          clr.l     -(A7)
0000164C  4E94      2159          jsr       (A4)
0000164E  584F      2160          addq.w    #4,A7
00001650  2600      2161          move.l    D0,D3
                    2162   ; }
                    2163   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2164   ; if(c == (char)('0'))
00001652  0C02 0030 2165          cmp.b     #48,D2
00001656  660A      2166          bne.s     ChangeRegisters_7
                    2167   ; d0 = reg_val ;
00001658  23C3 0803 2168          move.l    D3,_d0.L
0000165C  00E4      
0000165E  6000 0060 2169          bra       ChangeRegisters_20
                    2170   ChangeRegisters_7:
                    2171   ; else if(c == (char)('1'))
00001662  0C02 0031 2172          cmp.b     #49,D2
00001666  660A      2173          bne.s     ChangeRegisters_9
                    2174   ; d1 = reg_val ;
00001668  23C3 0803 2175          move.l    D3,_d1.L
0000166C  00E8      
0000166E  6000 0050 2176          bra       ChangeRegisters_20
                    2177   ChangeRegisters_9:
                    2178   ; else if(c == (char)('2'))
00001672  0C02 0032 2179          cmp.b     #50,D2
00001676  660A      2180          bne.s     ChangeRegisters_11
                    2181   ; d2 = reg_val ;
00001678  23C3 0803 2182          move.l    D3,_d2.L
0000167C  00EC      
0000167E  6000 0040 2183          bra       ChangeRegisters_20
                    2184   ChangeRegisters_11:
                    2185   ; else if(c == (char)('3'))
00001682  0C02 0033 2186          cmp.b     #51,D2
00001686  6608      2187          bne.s     ChangeRegisters_13
                    2188   ; d3 = reg_val ;
00001688  23C3 0803 2189          move.l    D3,_d3.L
0000168C  00F0      
0000168E  6030      2190          bra.s     ChangeRegisters_20
                    2191   ChangeRegisters_13:
                    2192   ; else if(c == (char)('4'))
00001690  0C02 0034 2193          cmp.b     #52,D2
00001694  6608      2194          bne.s     ChangeRegisters_15
                    2195   ; d4 = reg_val ;
00001696  23C3 0803 2196          move.l    D3,_d4.L
0000169A  00F4      
0000169C  6022      2197          bra.s     ChangeRegisters_20
                    2198   ChangeRegisters_15:
                    2199   ; else if(c == (char)('5'))
0000169E  0C02 0035 2200          cmp.b     #53,D2
000016A2  6608      2201          bne.s     ChangeRegisters_17
                    2202   ; d5 = reg_val ;
000016A4  23C3 0803 2203          move.l    D3,_d5.L
000016A8  00F8      
000016AA  6014      2204          bra.s     ChangeRegisters_20
                    2205   ChangeRegisters_17:
                    2206   ; else if(c == (char)('6'))
000016AC  0C02 0036 2207          cmp.b     #54,D2
000016B0  6608      2208          bne.s     ChangeRegisters_19
                    2209   ; d6 = reg_val ;
000016B2  23C3 0803 2210          move.l    D3,_d6.L
000016B6  00FC      
000016B8  6006      2211          bra.s     ChangeRegisters_20
                    2212   ChangeRegisters_19:
                    2213   ; else
                    2214   ; d7 = reg_val ;
000016BA  23C3 0803 2215          move.l    D3,_d7.L
000016BE  0100      
                    2216   ChangeRegisters_20:
000016C0  6000 01B6 2217          bra       ChangeRegisters_51
                    2218   ChangeRegisters_1:
                    2219   ; }
                    2220   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000016C4  1013      2221          move.b    (A3),D0
000016C6  0C00 0061 2222          cmp.b     #97,D0
000016CA  6600 00A6 2223          bne       ChangeRegisters_21
                    2224   ; if((c > (char)('7')) || (c < (char)('0'))) {
000016CE  0C02 0037 2225          cmp.b     #55,D2
000016D2  6E06      2226          bgt.s     ChangeRegisters_25
000016D4  0C02 0030 2227          cmp.b     #48,D2
000016D8  6C0E      2228          bge.s     ChangeRegisters_23
                    2229   ChangeRegisters_25:
                    2230   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000016DA  4879 0000 2231          pea       @m68kde~1_49.L
000016DE  445A      
000016E0  4E92      2232          jsr       (A2)
000016E2  584F      2233          addq.w    #4,A7
                    2234   ; return ;
000016E4  6000 0196 2235          bra       ChangeRegisters_6
                    2236   ChangeRegisters_23:
                    2237   ; }
                    2238   ; else {
                    2239   ; printf("\r\nA%c = ", c) ;
000016E8  4882      2240          ext.w     D2
000016EA  48C2      2241          ext.l     D2
000016EC  2F02      2242          move.l    D2,-(A7)
000016EE  4879 0000 2243          pea       @m68kde~1_50.L
000016F2  4488      
000016F4  4E92      2244          jsr       (A2)
000016F6  504F      2245          addq.w    #8,A7
                    2246   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016F8  42A7      2247          clr.l     -(A7)
000016FA  4E94      2248          jsr       (A4)
000016FC  584F      2249          addq.w    #4,A7
000016FE  2600      2250          move.l    D0,D3
                    2251   ; }
                    2252   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2253   ; if(c == (char)('0'))
00001700  0C02 0030 2254          cmp.b     #48,D2
00001704  660A      2255          bne.s     ChangeRegisters_26
                    2256   ; a0 = reg_val ;
00001706  23C3 0803 2257          move.l    D3,_a0.L
0000170A  0104      
0000170C  6000 0060 2258          bra       ChangeRegisters_39
                    2259   ChangeRegisters_26:
                    2260   ; else if(c == (char)('1'))
00001710  0C02 0031 2261          cmp.b     #49,D2
00001714  660A      2262          bne.s     ChangeRegisters_28
                    2263   ; a1 = reg_val ;
00001716  23C3 0803 2264          move.l    D3,_a1.L
0000171A  0108      
0000171C  6000 0050 2265          bra       ChangeRegisters_39
                    2266   ChangeRegisters_28:
                    2267   ; else if(c == (char)('2'))
00001720  0C02 0032 2268          cmp.b     #50,D2
00001724  660A      2269          bne.s     ChangeRegisters_30
                    2270   ; a2 = reg_val ;
00001726  23C3 0803 2271          move.l    D3,_a2.L
0000172A  010C      
0000172C  6000 0040 2272          bra       ChangeRegisters_39
                    2273   ChangeRegisters_30:
                    2274   ; else if(c == (char)('3'))
00001730  0C02 0033 2275          cmp.b     #51,D2
00001734  6608      2276          bne.s     ChangeRegisters_32
                    2277   ; a3 = reg_val ;
00001736  23C3 0803 2278          move.l    D3,_a3.L
0000173A  0110      
0000173C  6030      2279          bra.s     ChangeRegisters_39
                    2280   ChangeRegisters_32:
                    2281   ; else if(c == (char)('4'))
0000173E  0C02 0034 2282          cmp.b     #52,D2
00001742  6608      2283          bne.s     ChangeRegisters_34
                    2284   ; a4 = reg_val ;
00001744  23C3 0803 2285          move.l    D3,_a4.L
00001748  0114      
0000174A  6022      2286          bra.s     ChangeRegisters_39
                    2287   ChangeRegisters_34:
                    2288   ; else if(c == (char)('5'))
0000174C  0C02 0035 2289          cmp.b     #53,D2
00001750  6608      2290          bne.s     ChangeRegisters_36
                    2291   ; a5 = reg_val ;
00001752  23C3 0803 2292          move.l    D3,_a5.L
00001756  0118      
00001758  6014      2293          bra.s     ChangeRegisters_39
                    2294   ChangeRegisters_36:
                    2295   ; else if(c == (char)('6'))
0000175A  0C02 0036 2296          cmp.b     #54,D2
0000175E  6608      2297          bne.s     ChangeRegisters_38
                    2298   ; a6 = reg_val ;
00001760  23C3 0803 2299          move.l    D3,_a6.L
00001764  011C      
00001766  6006      2300          bra.s     ChangeRegisters_39
                    2301   ChangeRegisters_38:
                    2302   ; else
                    2303   ; USP = reg_val ;
00001768  23C3 0803 2304          move.l    D3,_USP.L
0000176C  0128      
                    2305   ChangeRegisters_39:
0000176E  6000 0108 2306          bra       ChangeRegisters_51
                    2307   ChangeRegisters_21:
                    2308   ; }
                    2309   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001772  1013      2310          move.b    (A3),D0
00001774  0C00 0075 2311          cmp.b     #117,D0
00001778  6600 004E 2312          bne       ChangeRegisters_40
0000177C  0C02 0073 2313          cmp.b     #115,D2
00001780  6600 0046 2314          bne       ChangeRegisters_40
                    2315   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001784  2F00      2316          move.l    D0,-(A7)
00001786  4E95      2317          jsr       (A5)
00001788  2200      2318          move.l    D0,D1
0000178A  201F      2319          move.l    (A7)+,D0
0000178C  2F01      2320          move.l    D1,-(A7)
0000178E  4EB9 0000 2321          jsr       _tolower
00001792  2CC6      
00001794  584F      2322          addq.w    #4,A7
00001796  0C80 0000 2323          cmp.l     #112,D0
0000179A  0070      
0000179C  6618      2324          bne.s     ChangeRegisters_42
                    2325   ; printf("\r\nUser SP = ") ;
0000179E  4879 0000 2326          pea       @m68kde~1_51.L
000017A2  4492      
000017A4  4E92      2327          jsr       (A2)
000017A6  584F      2328          addq.w    #4,A7
                    2329   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017A8  42A7      2330          clr.l     -(A7)
000017AA  4E94      2331          jsr       (A4)
000017AC  584F      2332          addq.w    #4,A7
000017AE  23C0 0803 2333          move.l    D0,_USP.L
000017B2  0128      
000017B4  600E      2334          bra.s     ChangeRegisters_43
                    2335   ChangeRegisters_42:
                    2336   ; }
                    2337   ; else {
                    2338   ; printf("\r\nIllegal Register....") ;
000017B6  4879 0000 2339          pea       @m68kde~1_52.L
000017BA  44A0      
000017BC  4E92      2340          jsr       (A2)
000017BE  584F      2341          addq.w    #4,A7
                    2342   ; return ;
000017C0  6000 00BA 2343          bra       ChangeRegisters_6
                    2344   ChangeRegisters_43:
000017C4  6000 00B2 2345          bra       ChangeRegisters_51
                    2346   ChangeRegisters_40:
                    2347   ; }
                    2348   ; }
                    2349   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000017C8  1013      2350          move.b    (A3),D0
000017CA  0C00 0073 2351          cmp.b     #115,D0
000017CE  6600 004E 2352          bne       ChangeRegisters_44
000017D2  0C02 0073 2353          cmp.b     #115,D2
000017D6  6600 0046 2354          bne       ChangeRegisters_44
                    2355   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000017DA  2F00      2356          move.l    D0,-(A7)
000017DC  4E95      2357          jsr       (A5)
000017DE  2200      2358          move.l    D0,D1
000017E0  201F      2359          move.l    (A7)+,D0
000017E2  2F01      2360          move.l    D1,-(A7)
000017E4  4EB9 0000 2361          jsr       _tolower
000017E8  2CC6      
000017EA  584F      2362          addq.w    #4,A7
000017EC  0C80 0000 2363          cmp.l     #112,D0
000017F0  0070      
000017F2  6618      2364          bne.s     ChangeRegisters_46
                    2365   ; printf("\r\nSystem SP = ") ;
000017F4  4879 0000 2366          pea       @m68kde~1_53.L
000017F8  44B8      
000017FA  4E92      2367          jsr       (A2)
000017FC  584F      2368          addq.w    #4,A7
                    2369   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017FE  42A7      2370          clr.l     -(A7)
00001800  4E94      2371          jsr       (A4)
00001802  584F      2372          addq.w    #4,A7
00001804  23C0 0803 2373          move.l    D0,_SSP.L
00001808  0124      
0000180A  600E      2374          bra.s     ChangeRegisters_47
                    2375   ChangeRegisters_46:
                    2376   ; }
                    2377   ; else {
                    2378   ; printf("\r\nIllegal Register....") ;
0000180C  4879 0000 2379          pea       @m68kde~1_52.L
00001810  44A0      
00001812  4E92      2380          jsr       (A2)
00001814  584F      2381          addq.w    #4,A7
                    2382   ; return ;
00001816  6000 0064 2383          bra       ChangeRegisters_6
                    2384   ChangeRegisters_47:
0000181A  6000 005C 2385          bra       ChangeRegisters_51
                    2386   ChangeRegisters_44:
                    2387   ; }
                    2388   ; }
                    2389   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
0000181E  1013      2390          move.b    (A3),D0
00001820  0C00 0070 2391          cmp.b     #112,D0
00001824  6620      2392          bne.s     ChangeRegisters_48
00001826  0C02 0063 2393          cmp.b     #99,D2
0000182A  661A      2394          bne.s     ChangeRegisters_48
                    2395   ; printf("\r\nPC = ") ;
0000182C  4879 0000 2396          pea       @m68kde~1_54.L
00001830  44C8      
00001832  4E92      2397          jsr       (A2)
00001834  584F      2398          addq.w    #4,A7
                    2399   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001836  42A7      2400          clr.l     -(A7)
00001838  4E94      2401          jsr       (A4)
0000183A  584F      2402          addq.w    #4,A7
0000183C  23C0 0803 2403          move.l    D0,_PC.L
00001840  0120      
00001842  6000 0034 2404          bra       ChangeRegisters_51
                    2405   ChangeRegisters_48:
                    2406   ; }
                    2407   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001846  1013      2408          move.b    (A3),D0
00001848  0C00 0073 2409          cmp.b     #115,D0
0000184C  6620      2410          bne.s     ChangeRegisters_50
0000184E  0C02 0072 2411          cmp.b     #114,D2
00001852  661A      2412          bne.s     ChangeRegisters_50
                    2413   ; printf("\r\nSR = ") ;
00001854  4879 0000 2414          pea       @m68kde~1_55.L
00001858  44D0      
0000185A  4E92      2415          jsr       (A2)
0000185C  584F      2416          addq.w    #4,A7
                    2417   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000185E  42A7      2418          clr.l     -(A7)
00001860  4EB8 0C58 2419          jsr       _Get4HexDigits
00001864  584F      2420          addq.w    #4,A7
00001866  33C0 0803 2421          move.w    D0,_SR.L
0000186A  012C      
0000186C  600A      2422          bra.s     ChangeRegisters_51
                    2423   ChangeRegisters_50:
                    2424   ; }
                    2425   ; else
                    2426   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000186E  4879 0000 2427          pea       @m68kde~1_56.L
00001872  44D8      
00001874  4E92      2428          jsr       (A2)
00001876  584F      2429          addq.w    #4,A7
                    2430   ChangeRegisters_51:
                    2431   ; DumpRegisters() ;
00001878  4EB8 10D6 2432          jsr       _DumpRegisters
                    2433   ChangeRegisters_6:
0000187C  4CDF 3C0C 2434          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001880  4E5E      2435          unlk      A6
00001882  4E75      2436          rts
                    2437   ; }
                    2438   ; void BreakPointDisplay(void)
                    2439   ; {
                    2440   _BreakPointDisplay:
00001884  48E7 3030 2441          movem.l   D2/D3/A2/A3,-(A7)
00001888  45F9 0000 2442          lea       _printf.L,A2
0000188C  3616      
0000188E  47F9 0803 2443          lea       _BreakPointAddress.L,A3
00001892  012E      
                    2444   ; int i, BreakPointsSet = 0 ;
00001894  4283      2445          clr.l     D3
                    2446   ; // any break points  set
                    2447   ; for(i = 0; i < 8; i++)  {
00001896  4282      2448          clr.l     D2
                    2449   BreakPointDisplay_1:
00001898  0C82 0000 2450          cmp.l     #8,D2
0000189C  0008      
0000189E  6C1C      2451          bge.s     BreakPointDisplay_3
                    2452   ; if(BreakPointSetOrCleared[i] == 1)
000018A0  2002      2453          move.l    D2,D0
000018A2  E588      2454          lsl.l     #2,D0
000018A4  41F9 0803 2455          lea       _BreakPointSetOrCleared.L,A0
000018A8  015E      
000018AA  2030 0800 2456          move.l    0(A0,D0.L),D0
000018AE  0C80 0000 2457          cmp.l     #1,D0
000018B2  0001      
000018B4  6602      2458          bne.s     BreakPointDisplay_4
                    2459   ; BreakPointsSet = 1;
000018B6  7601      2460          moveq     #1,D3
                    2461   BreakPointDisplay_4:
000018B8  5282      2462          addq.l    #1,D2
000018BA  60DC      2463          bra       BreakPointDisplay_1
                    2464   BreakPointDisplay_3:
                    2465   ; }
                    2466   ; if(BreakPointsSet == 1) {
000018BC  0C83 0000 2467          cmp.l     #1,D3
000018C0  0001      
000018C2  6616      2468          bne.s     BreakPointDisplay_6
                    2469   ; printf("\r\n\r\nNum     Address      Instruction") ;
000018C4  4879 0000 2470          pea       @m68kde~1_57.L
000018C8  4514      
000018CA  4E92      2471          jsr       (A2)
000018CC  584F      2472          addq.w    #4,A7
                    2473   ; printf("\r\n---     ---------    -----------") ;
000018CE  4879 0000 2474          pea       @m68kde~1_58.L
000018D2  453A      
000018D4  4E92      2475          jsr       (A2)
000018D6  584F      2476          addq.w    #4,A7
000018D8  600A      2477          bra.s     BreakPointDisplay_7
                    2478   BreakPointDisplay_6:
                    2479   ; }
                    2480   ; else
                    2481   ; printf("\r\nNo BreakPoints Set") ;
000018DA  4879 0000 2482          pea       @m68kde~1_59.L
000018DE  455E      
000018E0  4E92      2483          jsr       (A2)
000018E2  584F      2484          addq.w    #4,A7
                    2485   BreakPointDisplay_7:
                    2486   ; for(i = 0; i < 8; i++)  {
000018E4  4282      2487          clr.l     D2
                    2488   BreakPointDisplay_8:
000018E6  0C82 0000 2489          cmp.l     #8,D2
000018EA  0008      
000018EC  6C00 005A 2490          bge       BreakPointDisplay_10
                    2491   ; // put opcode back, then put break point back
                    2492   ; if(BreakPointSetOrCleared[i] == 1)  {
000018F0  2002      2493          move.l    D2,D0
000018F2  E588      2494          lsl.l     #2,D0
000018F4  41F9 0803 2495          lea       _BreakPointSetOrCleared.L,A0
000018F8  015E      
000018FA  2030 0800 2496          move.l    0(A0,D0.L),D0
000018FE  0C80 0000 2497          cmp.l     #1,D0
00001902  0001      
00001904  6600 003E 2498          bne       BreakPointDisplay_11
                    2499   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001908  2002      2500          move.l    D2,D0
0000190A  E388      2501          lsl.l     #1,D0
0000190C  41F9 0803 2502          lea       _BreakPointInstruction.L,A0
00001910  014E      
00001912  2202      2503          move.l    D2,D1
00001914  E589      2504          lsl.l     #2,D1
00001916  2233 1800 2505          move.l    0(A3,D1.L),D1
0000191A  2241      2506          move.l    D1,A1
0000191C  32B0 0800 2507          move.w    0(A0,D0.L),(A1)
                    2508   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001920  2002      2509          move.l    D2,D0
00001922  E588      2510          lsl.l     #2,D0
00001924  2033 0800 2511          move.l    0(A3,D0.L),D0
00001928  2040      2512          move.l    D0,A0
0000192A  30BC 4E4E 2513          move.w    #20046,(A0)
                    2514   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
0000192E  2202      2515          move.l    D2,D1
00001930  E589      2516          lsl.l     #2,D1
00001932  2F33 1800 2517          move.l    0(A3,D1.L),-(A7)
00001936  2F02      2518          move.l    D2,-(A7)
00001938  4879 0000 2519          pea       @m68kde~1_60.L
0000193C  4574      
0000193E  4E92      2520          jsr       (A2)
00001940  DEFC 000C 2521          add.w     #12,A7
                    2522   BreakPointDisplay_11:
00001944  5282      2523          addq.l    #1,D2
00001946  609E      2524          bra       BreakPointDisplay_8
                    2525   BreakPointDisplay_10:
                    2526   ; }
                    2527   ; }
                    2528   ; printf("\r\n") ;
00001948  4879 0000 2529          pea       @m68kde~1_1.L
0000194C  3FEC      
0000194E  4E92      2530          jsr       (A2)
00001950  584F      2531          addq.w    #4,A7
00001952  4CDF 0C0C 2532          movem.l   (A7)+,D2/D3/A2/A3
00001956  4E75      2533          rts
                    2534   ; }
                    2535   ; void WatchPointDisplay(void)
                    2536   ; {
                    2537   _WatchPointDisplay:
00001958  48E7 3020 2538          movem.l   D2/D3/A2,-(A7)
0000195C  45F9 0000 2539          lea       _printf.L,A2
00001960  3616      
                    2540   ; int i ;
                    2541   ; int WatchPointsSet = 0 ;
00001962  4283      2542          clr.l     D3
                    2543   ; // any watchpoints set
                    2544   ; for(i = 0; i < 8; i++)  {
00001964  4282      2545          clr.l     D2
                    2546   WatchPointDisplay_1:
00001966  0C82 0000 2547          cmp.l     #8,D2
0000196A  0008      
0000196C  6C1C      2548          bge.s     WatchPointDisplay_3
                    2549   ; if(WatchPointSetOrCleared[i] == 1)
0000196E  2002      2550          move.l    D2,D0
00001970  E588      2551          lsl.l     #2,D0
00001972  41F9 0803 2552          lea       _WatchPointSetOrCleared.L,A0
00001976  01A2      
00001978  2030 0800 2553          move.l    0(A0,D0.L),D0
0000197C  0C80 0000 2554          cmp.l     #1,D0
00001980  0001      
00001982  6602      2555          bne.s     WatchPointDisplay_4
                    2556   ; WatchPointsSet = 1;
00001984  7601      2557          moveq     #1,D3
                    2558   WatchPointDisplay_4:
00001986  5282      2559          addq.l    #1,D2
00001988  60DC      2560          bra       WatchPointDisplay_1
                    2561   WatchPointDisplay_3:
                    2562   ; }
                    2563   ; if(WatchPointsSet == 1) {
0000198A  0C83 0000 2564          cmp.l     #1,D3
0000198E  0001      
00001990  6616      2565          bne.s     WatchPointDisplay_6
                    2566   ; printf("\r\nNum     Address") ;
00001992  4879 0000 2567          pea       @m68kde~1_61.L
00001996  4584      
00001998  4E92      2568          jsr       (A2)
0000199A  584F      2569          addq.w    #4,A7
                    2570   ; printf("\r\n---     ---------") ;
0000199C  4879 0000 2571          pea       @m68kde~1_62.L
000019A0  4596      
000019A2  4E92      2572          jsr       (A2)
000019A4  584F      2573          addq.w    #4,A7
000019A6  600A      2574          bra.s     WatchPointDisplay_7
                    2575   WatchPointDisplay_6:
                    2576   ; }
                    2577   ; else
                    2578   ; printf("\r\nNo WatchPoints Set") ;
000019A8  4879 0000 2579          pea       @m68kde~1_63.L
000019AC  45AA      
000019AE  4E92      2580          jsr       (A2)
000019B0  584F      2581          addq.w    #4,A7
                    2582   WatchPointDisplay_7:
                    2583   ; for(i = 0; i < 8; i++)  {
000019B2  4282      2584          clr.l     D2
                    2585   WatchPointDisplay_8:
000019B4  0C82 0000 2586          cmp.l     #8,D2
000019B8  0008      
000019BA  6C00 0038 2587          bge       WatchPointDisplay_10
                    2588   ; if(WatchPointSetOrCleared[i] == 1)
000019BE  2002      2589          move.l    D2,D0
000019C0  E588      2590          lsl.l     #2,D0
000019C2  41F9 0803 2591          lea       _WatchPointSetOrCleared.L,A0
000019C6  01A2      
000019C8  2030 0800 2592          move.l    0(A0,D0.L),D0
000019CC  0C80 0000 2593          cmp.l     #1,D0
000019D0  0001      
000019D2  661C      2594          bne.s     WatchPointDisplay_11
                    2595   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000019D4  2202      2596          move.l    D2,D1
000019D6  E589      2597          lsl.l     #2,D1
000019D8  41F9 0803 2598          lea       _WatchPointAddress.L,A0
000019DC  0182      
000019DE  2F30 1800 2599          move.l    0(A0,D1.L),-(A7)
000019E2  2F02      2600          move.l    D2,-(A7)
000019E4  4879 0000 2601          pea       @m68kde~1_60.L
000019E8  4574      
000019EA  4E92      2602          jsr       (A2)
000019EC  DEFC 000C 2603          add.w     #12,A7
                    2604   WatchPointDisplay_11:
000019F0  5282      2605          addq.l    #1,D2
000019F2  60C0      2606          bra       WatchPointDisplay_8
                    2607   WatchPointDisplay_10:
                    2608   ; }
                    2609   ; printf("\r\n") ;
000019F4  4879 0000 2610          pea       @m68kde~1_1.L
000019F8  3FEC      
000019FA  4E92      2611          jsr       (A2)
000019FC  584F      2612          addq.w    #4,A7
000019FE  4CDF 040C 2613          movem.l   (A7)+,D2/D3/A2
00001A02  4E75      2614          rts
                    2615   ; }
                    2616   ; void BreakPointClear(void)
                    2617   ; {
                    2618   _BreakPointClear:
00001A04  4E56 FFFC 2619          link      A6,#-4
00001A08  48E7 2020 2620          movem.l   D2/A2,-(A7)
00001A0C  45F9 0000 2621          lea       _printf.L,A2
00001A10  3616      
                    2622   ; unsigned int i ;
                    2623   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2624   ; BreakPointDisplay() ;
00001A12  4EB8 1884 2625          jsr       _BreakPointDisplay
                    2626   ; printf("\r\nEnter Break Point Number: ") ;
00001A16  4879 0000 2627          pea       @m68kde~1_64.L
00001A1A  45C0      
00001A1C  4E92      2628          jsr       (A2)
00001A1E  584F      2629          addq.w    #4,A7
                    2630   ; i = xtod(_getch()) ;           // get break pointer number
00001A20  2F00      2631          move.l    D0,-(A7)
00001A22  4EB8 0B68 2632          jsr       __getch
00001A26  2200      2633          move.l    D0,D1
00001A28  201F      2634          move.l    (A7)+,D0
00001A2A  2F01      2635          move.l    D1,-(A7)
00001A2C  4EB8 0BD2 2636          jsr       _xtod
00001A30  584F      2637          addq.w    #4,A7
00001A32  C0BC 0000 2638          and.l     #255,D0
00001A36  00FF      
00001A38  2400      2639          move.l    D0,D2
                    2640   ; if((i < 0) || (i > 7))   {
00001A3A  0C82 0000 2641          cmp.l     #0,D2
00001A3E  0000      
00001A40  6508      2642          blo.s     BreakPointClear_3
00001A42  0C82 0000 2643          cmp.l     #7,D2
00001A46  0007      
00001A48  630E      2644          bls.s     BreakPointClear_1
                    2645   BreakPointClear_3:
                    2646   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A4A  4879 0000 2647          pea       @m68kde~1_65.L
00001A4E  45DE      
00001A50  4E92      2648          jsr       (A2)
00001A52  584F      2649          addq.w    #4,A7
                    2650   ; return ;
00001A54  6000 0080 2651          bra       BreakPointClear_4
                    2652   BreakPointClear_1:
                    2653   ; }
                    2654   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001A58  2002      2655          move.l    D2,D0
00001A5A  E588      2656          lsl.l     #2,D0
00001A5C  41F9 0803 2657          lea       _BreakPointSetOrCleared.L,A0
00001A60  015E      
00001A62  2030 0800 2658          move.l    0(A0,D0.L),D0
00001A66  0C80 0000 2659          cmp.l     #1,D0
00001A6A  0001      
00001A6C  6600 005A 2660          bne       BreakPointClear_5
                    2661   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001A70  2002      2662          move.l    D2,D0
00001A72  E588      2663          lsl.l     #2,D0
00001A74  41F9 0803 2664          lea       _BreakPointAddress.L,A0
00001A78  012E      
00001A7A  2D70 0800 2665          move.l    0(A0,D0.L),-4(A6)
00001A7E  FFFC      
                    2666   ; BreakPointAddress[i] = 0 ;
00001A80  2002      2667          move.l    D2,D0
00001A82  E588      2668          lsl.l     #2,D0
00001A84  41F9 0803 2669          lea       _BreakPointAddress.L,A0
00001A88  012E      
00001A8A  42B0 0800 2670          clr.l     0(A0,D0.L)
                    2671   ; BreakPointSetOrCleared[i] = 0 ;
00001A8E  2002      2672          move.l    D2,D0
00001A90  E588      2673          lsl.l     #2,D0
00001A92  41F9 0803 2674          lea       _BreakPointSetOrCleared.L,A0
00001A96  015E      
00001A98  42B0 0800 2675          clr.l     0(A0,D0.L)
                    2676   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001A9C  2002      2677          move.l    D2,D0
00001A9E  E388      2678          lsl.l     #1,D0
00001AA0  41F9 0803 2679          lea       _BreakPointInstruction.L,A0
00001AA4  014E      
00001AA6  226E FFFC 2680          move.l    -4(A6),A1
00001AAA  32B0 0800 2681          move.w    0(A0,D0.L),(A1)
                    2682   ; BreakPointInstruction[i] = 0 ;
00001AAE  2002      2683          move.l    D2,D0
00001AB0  E388      2684          lsl.l     #1,D0
00001AB2  41F9 0803 2685          lea       _BreakPointInstruction.L,A0
00001AB6  014E      
00001AB8  4270 0800 2686          clr.w     0(A0,D0.L)
                    2687   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001ABC  4879 0000 2688          pea       @m68kde~1_66.L
00001AC0  45FA      
00001AC2  4E92      2689          jsr       (A2)
00001AC4  584F      2690          addq.w    #4,A7
00001AC6  600A      2691          bra.s     BreakPointClear_6
                    2692   BreakPointClear_5:
                    2693   ; }
                    2694   ; else
                    2695   ; printf("\r\nBreak Point wasn't Set.....") ;
00001AC8  4879 0000 2696          pea       @m68kde~1_67.L
00001ACC  4618      
00001ACE  4E92      2697          jsr       (A2)
00001AD0  584F      2698          addq.w    #4,A7
                    2699   BreakPointClear_6:
                    2700   ; BreakPointDisplay() ;
00001AD2  4EB8 1884 2701          jsr       _BreakPointDisplay
                    2702   ; return ;
                    2703   BreakPointClear_4:
00001AD6  4CDF 0404 2704          movem.l   (A7)+,D2/A2
00001ADA  4E5E      2705          unlk      A6
00001ADC  4E75      2706          rts
                    2707   ; }
                    2708   ; void WatchPointClear(void)
                    2709   ; {
                    2710   _WatchPointClear:
00001ADE  48E7 2020 2711          movem.l   D2/A2,-(A7)
00001AE2  45F9 0000 2712          lea       _printf.L,A2
00001AE6  3616      
                    2713   ; unsigned int i ;
                    2714   ; WatchPointDisplay() ;
00001AE8  4EB8 1958 2715          jsr       _WatchPointDisplay
                    2716   ; printf("\r\nEnter Watch Point Number: ") ;
00001AEC  4879 0000 2717          pea       @m68kde~1_68.L
00001AF0  4636      
00001AF2  4E92      2718          jsr       (A2)
00001AF4  584F      2719          addq.w    #4,A7
                    2720   ; i = xtod(_getch()) ;           // get watch pointer number
00001AF6  2F00      2721          move.l    D0,-(A7)
00001AF8  4EB8 0B68 2722          jsr       __getch
00001AFC  2200      2723          move.l    D0,D1
00001AFE  201F      2724          move.l    (A7)+,D0
00001B00  2F01      2725          move.l    D1,-(A7)
00001B02  4EB8 0BD2 2726          jsr       _xtod
00001B06  584F      2727          addq.w    #4,A7
00001B08  C0BC 0000 2728          and.l     #255,D0
00001B0C  00FF      
00001B0E  2400      2729          move.l    D0,D2
                    2730   ; if((i < 0) || (i > 7))   {
00001B10  0C82 0000 2731          cmp.l     #0,D2
00001B14  0000      
00001B16  6508      2732          blo.s     WatchPointClear_3
00001B18  0C82 0000 2733          cmp.l     #7,D2
00001B1C  0007      
00001B1E  630E      2734          bls.s     WatchPointClear_1
                    2735   WatchPointClear_3:
                    2736   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B20  4879 0000 2737          pea       @m68kde~1_65.L
00001B24  45DE      
00001B26  4E92      2738          jsr       (A2)
00001B28  584F      2739          addq.w    #4,A7
                    2740   ; return ;
00001B2A  6000 004E 2741          bra       WatchPointClear_4
                    2742   WatchPointClear_1:
                    2743   ; }
                    2744   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B2E  2002      2745          move.l    D2,D0
00001B30  E588      2746          lsl.l     #2,D0
00001B32  41F9 0803 2747          lea       _WatchPointSetOrCleared.L,A0
00001B36  01A2      
00001B38  2030 0800 2748          move.l    0(A0,D0.L),D0
00001B3C  0C80 0000 2749          cmp.l     #1,D0
00001B40  0001      
00001B42  6628      2750          bne.s     WatchPointClear_5
                    2751   ; WatchPointAddress[i] = 0 ;
00001B44  2002      2752          move.l    D2,D0
00001B46  E588      2753          lsl.l     #2,D0
00001B48  41F9 0803 2754          lea       _WatchPointAddress.L,A0
00001B4C  0182      
00001B4E  42B0 0800 2755          clr.l     0(A0,D0.L)
                    2756   ; WatchPointSetOrCleared[i] = 0 ;
00001B52  2002      2757          move.l    D2,D0
00001B54  E588      2758          lsl.l     #2,D0
00001B56  41F9 0803 2759          lea       _WatchPointSetOrCleared.L,A0
00001B5A  01A2      
00001B5C  42B0 0800 2760          clr.l     0(A0,D0.L)
                    2761   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001B60  4879 0000 2762          pea       @m68kde~1_69.L
00001B64  4654      
00001B66  4E92      2763          jsr       (A2)
00001B68  584F      2764          addq.w    #4,A7
00001B6A  600A      2765          bra.s     WatchPointClear_6
                    2766   WatchPointClear_5:
                    2767   ; }
                    2768   ; else
                    2769   ; printf("\r\nWatch Point Was not Set.....") ;
00001B6C  4879 0000 2770          pea       @m68kde~1_70.L
00001B70  4672      
00001B72  4E92      2771          jsr       (A2)
00001B74  584F      2772          addq.w    #4,A7
                    2773   WatchPointClear_6:
                    2774   ; WatchPointDisplay() ;
00001B76  4EB8 1958 2775          jsr       _WatchPointDisplay
                    2776   ; return ;
                    2777   WatchPointClear_4:
00001B7A  4CDF 0404 2778          movem.l   (A7)+,D2/A2
00001B7E  4E75      2779          rts
                    2780   ; }
                    2781   ; void DisableBreakPoints(void)
                    2782   ; {
                    2783   _DisableBreakPoints:
00001B80  4E56 FFFC 2784          link      A6,#-4
00001B84  2F02      2785          move.l    D2,-(A7)
                    2786   ; int i ;
                    2787   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2788   ; for(i = 0; i < 8; i++)  {
00001B86  4282      2789          clr.l     D2
                    2790   DisableBreakPoints_1:
00001B88  0C82 0000 2791          cmp.l     #8,D2
00001B8C  0008      
00001B8E  6C00 003E 2792          bge       DisableBreakPoints_3
                    2793   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001B92  2002      2794          move.l    D2,D0
00001B94  E588      2795          lsl.l     #2,D0
00001B96  41F9 0803 2796          lea       _BreakPointSetOrCleared.L,A0
00001B9A  015E      
00001B9C  2030 0800 2797          move.l    0(A0,D0.L),D0
00001BA0  0C80 0000 2798          cmp.l     #1,D0
00001BA4  0001      
00001BA6  6622      2799          bne.s     DisableBreakPoints_4
                    2800   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BA8  2002      2801          move.l    D2,D0
00001BAA  E588      2802          lsl.l     #2,D0
00001BAC  41F9 0803 2803          lea       _BreakPointAddress.L,A0
00001BB0  012E      
00001BB2  2D70 0800 2804          move.l    0(A0,D0.L),-4(A6)
00001BB6  FFFC      
                    2805   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001BB8  2002      2806          move.l    D2,D0
00001BBA  E388      2807          lsl.l     #1,D0
00001BBC  41F9 0803 2808          lea       _BreakPointInstruction.L,A0
00001BC0  014E      
00001BC2  226E FFFC 2809          move.l    -4(A6),A1
00001BC6  32B0 0800 2810          move.w    0(A0,D0.L),(A1)
                    2811   DisableBreakPoints_4:
00001BCA  5282      2812          addq.l    #1,D2
00001BCC  60BA      2813          bra       DisableBreakPoints_1
                    2814   DisableBreakPoints_3:
00001BCE  241F      2815          move.l    (A7)+,D2
00001BD0  4E5E      2816          unlk      A6
00001BD2  4E75      2817          rts
                    2818   ; }
                    2819   ; }
                    2820   ; }
                    2821   ; void EnableBreakPoints(void)
                    2822   ; {
                    2823   _EnableBreakPoints:
00001BD4  4E56 FFFC 2824          link      A6,#-4
00001BD8  2F02      2825          move.l    D2,-(A7)
                    2826   ; int i ;
                    2827   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2828   ; for(i = 0; i < 8; i++)  {
00001BDA  4282      2829          clr.l     D2
                    2830   EnableBreakPoints_1:
00001BDC  0C82 0000 2831          cmp.l     #8,D2
00001BE0  0008      
00001BE2  6C32      2832          bge.s     EnableBreakPoints_3
                    2833   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001BE4  2002      2834          move.l    D2,D0
00001BE6  E588      2835          lsl.l     #2,D0
00001BE8  41F9 0803 2836          lea       _BreakPointSetOrCleared.L,A0
00001BEC  015E      
00001BEE  2030 0800 2837          move.l    0(A0,D0.L),D0
00001BF2  0C80 0000 2838          cmp.l     #1,D0
00001BF6  0001      
00001BF8  6618      2839          bne.s     EnableBreakPoints_4
                    2840   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BFA  2002      2841          move.l    D2,D0
00001BFC  E588      2842          lsl.l     #2,D0
00001BFE  41F9 0803 2843          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  2D70 0800 2844          move.l    0(A0,D0.L),-4(A6)
00001C08  FFFC      
                    2845   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C0A  206E FFFC 2846          move.l    -4(A6),A0
00001C0E  30BC 4E4E 2847          move.w    #20046,(A0)
                    2848   EnableBreakPoints_4:
00001C12  5282      2849          addq.l    #1,D2
00001C14  60C6      2850          bra       EnableBreakPoints_1
                    2851   EnableBreakPoints_3:
00001C16  241F      2852          move.l    (A7)+,D2
00001C18  4E5E      2853          unlk      A6
00001C1A  4E75      2854          rts
                    2855   ; }
                    2856   ; }
                    2857   ; }
                    2858   ; void KillAllBreakPoints(void)
                    2859   ; {
                    2860   _KillAllBreakPoints:
00001C1C  4E56 FFFC 2861          link      A6,#-4
00001C20  2F02      2862          move.l    D2,-(A7)
                    2863   ; int i ;
                    2864   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2865   ; for(i = 0; i < 8; i++)  {
00001C22  4282      2866          clr.l     D2
                    2867   KillAllBreakPoints_1:
00001C24  0C82 0000 2868          cmp.l     #8,D2
00001C28  0008      
00001C2A  6C00 0052 2869          bge       KillAllBreakPoints_3
                    2870   ; // clear BP
                    2871   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C2E  2002      2872          move.l    D2,D0
00001C30  E588      2873          lsl.l     #2,D0
00001C32  41F9 0803 2874          lea       _BreakPointAddress.L,A0
00001C36  012E      
00001C38  2D70 0800 2875          move.l    0(A0,D0.L),-4(A6)
00001C3C  FFFC      
                    2876   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C3E  2002      2877          move.l    D2,D0
00001C40  E388      2878          lsl.l     #1,D0
00001C42  41F9 0803 2879          lea       _BreakPointInstruction.L,A0
00001C46  014E      
00001C48  226E FFFC 2880          move.l    -4(A6),A1
00001C4C  32B0 0800 2881          move.w    0(A0,D0.L),(A1)
                    2882   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C50  2002      2883          move.l    D2,D0
00001C52  E588      2884          lsl.l     #2,D0
00001C54  41F9 0803 2885          lea       _BreakPointAddress.L,A0
00001C58  012E      
00001C5A  42B0 0800 2886          clr.l     0(A0,D0.L)
                    2887   ; BreakPointInstruction[i] = 0 ;
00001C5E  2002      2888          move.l    D2,D0
00001C60  E388      2889          lsl.l     #1,D0
00001C62  41F9 0803 2890          lea       _BreakPointInstruction.L,A0
00001C66  014E      
00001C68  4270 0800 2891          clr.w     0(A0,D0.L)
                    2892   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C6C  2002      2893          move.l    D2,D0
00001C6E  E588      2894          lsl.l     #2,D0
00001C70  41F9 0803 2895          lea       _BreakPointSetOrCleared.L,A0
00001C74  015E      
00001C76  42B0 0800 2896          clr.l     0(A0,D0.L)
00001C7A  5282      2897          addq.l    #1,D2
00001C7C  60A6      2898          bra       KillAllBreakPoints_1
                    2899   KillAllBreakPoints_3:
00001C7E  241F      2900          move.l    (A7)+,D2
00001C80  4E5E      2901          unlk      A6
00001C82  4E75      2902          rts
                    2903   ; }
                    2904   ; //BreakPointDisplay() ;       // display the break points
                    2905   ; }
                    2906   ; void KillAllWatchPoints(void)
                    2907   ; {
                    2908   _KillAllWatchPoints:
00001C84  2F02      2909          move.l    D2,-(A7)
                    2910   ; int i ;
                    2911   ; for(i = 0; i < 8; i++)  {
00001C86  4282      2912          clr.l     D2
                    2913   KillAllWatchPoints_1:
00001C88  0C82 0000 2914          cmp.l     #8,D2
00001C8C  0008      
00001C8E  6C20      2915          bge.s     KillAllWatchPoints_3
                    2916   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C90  2002      2917          move.l    D2,D0
00001C92  E588      2918          lsl.l     #2,D0
00001C94  41F9 0803 2919          lea       _WatchPointAddress.L,A0
00001C98  0182      
00001C9A  42B0 0800 2920          clr.l     0(A0,D0.L)
                    2921   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C9E  2002      2922          move.l    D2,D0
00001CA0  E588      2923          lsl.l     #2,D0
00001CA2  41F9 0803 2924          lea       _WatchPointSetOrCleared.L,A0
00001CA6  01A2      
00001CA8  42B0 0800 2925          clr.l     0(A0,D0.L)
00001CAC  5282      2926          addq.l    #1,D2
00001CAE  60D8      2927          bra       KillAllWatchPoints_1
                    2928   KillAllWatchPoints_3:
00001CB0  241F      2929          move.l    (A7)+,D2
00001CB2  4E75      2930          rts
                    2931   ; }
                    2932   ; //WatchPointDisplay() ;       // display the break points
                    2933   ; }
                    2934   ; void SetBreakPoint(void)
                    2935   ; {
                    2936   _SetBreakPoint:
00001CB4  4E56 FFFC 2937          link      A6,#-4
00001CB8  48E7 3830 2938          movem.l   D2/D3/D4/A2/A3,-(A7)
00001CBC  45F9 0000 2939          lea       _printf.L,A2
00001CC0  3616      
00001CC2  47F9 0803 2940          lea       _BreakPointSetOrCleared.L,A3
00001CC6  015E      
                    2941   ; int i ;
                    2942   ; int BPNumber;
                    2943   ; int BPAddress;
                    2944   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2945   ; // see if any free break points
                    2946   ; for(i = 0; i < 8; i ++) {
00001CC8  4282      2947          clr.l     D2
                    2948   SetBreakPoint_1:
00001CCA  0C82 0000 2949          cmp.l     #8,D2
00001CCE  0008      
00001CD0  6C10      2950          bge.s     SetBreakPoint_3
                    2951   ; if( BreakPointSetOrCleared[i] == 0)
00001CD2  2002      2952          move.l    D2,D0
00001CD4  E588      2953          lsl.l     #2,D0
00001CD6  2033 0800 2954          move.l    0(A3,D0.L),D0
00001CDA  6602      2955          bne.s     SetBreakPoint_4
                    2956   ; break ;         // if spare BP found allow user to set it
00001CDC  6004      2957          bra.s     SetBreakPoint_3
                    2958   SetBreakPoint_4:
00001CDE  5282      2959          addq.l    #1,D2
00001CE0  60E8      2960          bra       SetBreakPoint_1
                    2961   SetBreakPoint_3:
                    2962   ; }
                    2963   ; if(i == 8) {
00001CE2  0C82 0000 2964          cmp.l     #8,D2
00001CE6  0008      
00001CE8  660E      2965          bne.s     SetBreakPoint_6
                    2966   ; printf("\r\nNo FREE Break Points.....") ;
00001CEA  4879 0000 2967          pea       @m68kde~1_71.L
00001CEE  4692      
00001CF0  4E92      2968          jsr       (A2)
00001CF2  584F      2969          addq.w    #4,A7
                    2970   ; return ;
00001CF4  6000 00D6 2971          bra       SetBreakPoint_15
                    2972   SetBreakPoint_6:
                    2973   ; }
                    2974   ; printf("\r\nBreak Point Address: ") ;
00001CF8  4879 0000 2975          pea       @m68kde~1_72.L
00001CFC  46AE      
00001CFE  4E92      2976          jsr       (A2)
00001D00  584F      2977          addq.w    #4,A7
                    2978   ; BPAddress = Get8HexDigits(0) ;
00001D02  42A7      2979          clr.l     -(A7)
00001D04  4EB8 0CA4 2980          jsr       _Get8HexDigits
00001D08  584F      2981          addq.w    #4,A7
00001D0A  2600      2982          move.l    D0,D3
                    2983   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D0C  2803      2984          move.l    D3,D4
                    2985   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D0E  2003      2986          move.l    D3,D0
00001D10  C0BC 0000 2987          and.l     #1,D0
00001D14  0001      
00001D16  0C80 0000 2988          cmp.l     #1,D0
00001D1A  0001      
00001D1C  660E      2989          bne.s     SetBreakPoint_9
                    2990   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D1E  4879 0000 2991          pea       @m68kde~1_73.L
00001D22  46C6      
00001D24  4E92      2992          jsr       (A2)
00001D26  584F      2993          addq.w    #4,A7
                    2994   ; return ;
00001D28  6000 00A2 2995          bra       SetBreakPoint_15
                    2996   SetBreakPoint_9:
                    2997   ; }
                    2998   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D2C  0C83 0000 2999          cmp.l     #32768,D3
00001D30  8000      
00001D32  640E      3000          bhs.s     SetBreakPoint_11
                    3001   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D34  4879 0000 3002          pea       @m68kde~1_74.L
00001D38  46FC      
00001D3A  4E92      3003          jsr       (A2)
00001D3C  584F      3004          addq.w    #4,A7
                    3005   ; return ;
00001D3E  6000 008C 3006          bra       SetBreakPoint_15
                    3007   SetBreakPoint_11:
                    3008   ; }
                    3009   ; // search for first free bp or existing same BP
                    3010   ; for(i = 0; i < 8; i++)  {
00001D42  4282      3011          clr.l     D2
                    3012   SetBreakPoint_13:
00001D44  0C82 0000 3013          cmp.l     #8,D2
00001D48  0008      
00001D4A  6C00 0080 3014          bge       SetBreakPoint_15
                    3015   ; if(BreakPointAddress[i] == BPAddress)   {
00001D4E  2002      3016          move.l    D2,D0
00001D50  E588      3017          lsl.l     #2,D0
00001D52  41F9 0803 3018          lea       _BreakPointAddress.L,A0
00001D56  012E      
00001D58  B6B0 0800 3019          cmp.l     0(A0,D0.L),D3
00001D5C  6610      3020          bne.s     SetBreakPoint_16
                    3021   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001D5E  2F03      3022          move.l    D3,-(A7)
00001D60  4879 0000 3023          pea       @m68kde~1_75.L
00001D64  4744      
00001D66  4E92      3024          jsr       (A2)
00001D68  504F      3025          addq.w    #8,A7
                    3026   ; return ;
00001D6A  6000 0060 3027          bra       SetBreakPoint_15
                    3028   SetBreakPoint_16:
                    3029   ; }
                    3030   ; if(BreakPointSetOrCleared[i] == 0) {
00001D6E  2002      3031          move.l    D2,D0
00001D70  E588      3032          lsl.l     #2,D0
00001D72  2033 0800 3033          move.l    0(A3,D0.L),D0
00001D76  6600 004E 3034          bne       SetBreakPoint_18
                    3035   ; // set BP here
                    3036   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001D7A  2002      3037          move.l    D2,D0
00001D7C  E588      3038          lsl.l     #2,D0
00001D7E  27BC 0000 3039          move.l    #1,0(A3,D0.L)
00001D82  0001 0800 
                    3040   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001D86  2044      3041          move.l    D4,A0
00001D88  2002      3042          move.l    D2,D0
00001D8A  E388      3043          lsl.l     #1,D0
00001D8C  43F9 0803 3044          lea       _BreakPointInstruction.L,A1
00001D90  014E      
00001D92  3390 0800 3045          move.w    (A0),0(A1,D0.L)
                    3046   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001D96  2F04      3047          move.l    D4,-(A7)
00001D98  4879 0000 3048          pea       @m68kde~1_76.L
00001D9C  477C      
00001D9E  4E92      3049          jsr       (A2)
00001DA0  504F      3050          addq.w    #8,A7
                    3051   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DA2  2044      3052          move.l    D4,A0
00001DA4  30BC 4E4E 3053          move.w    #20046,(A0)
                    3054   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DA8  2002      3055          move.l    D2,D0
00001DAA  E588      3056          lsl.l     #2,D0
00001DAC  41F9 0803 3057          lea       _BreakPointAddress.L,A0
00001DB0  012E      
00001DB2  2183 0800 3058          move.l    D3,0(A0,D0.L)
                    3059   ; printf("\r\n") ;
00001DB6  4879 0000 3060          pea       @m68kde~1_1.L
00001DBA  3FEC      
00001DBC  4E92      3061          jsr       (A2)
00001DBE  584F      3062          addq.w    #4,A7
                    3063   ; BreakPointDisplay() ;       // display the break points
00001DC0  4EB8 1884 3064          jsr       _BreakPointDisplay
                    3065   ; return ;
00001DC4  6006      3066          bra.s     SetBreakPoint_15
                    3067   SetBreakPoint_18:
00001DC6  5282      3068          addq.l    #1,D2
00001DC8  6000 FF7A 3069          bra       SetBreakPoint_13
                    3070   SetBreakPoint_15:
00001DCC  4CDF 0C1C 3071          movem.l   (A7)+,D2/D3/D4/A2/A3
00001DD0  4E5E      3072          unlk      A6
00001DD2  4E75      3073          rts
                    3074   ; }
                    3075   ; }
                    3076   ; }
                    3077   ; void SetWatchPoint(void)
                    3078   ; {
                    3079   _SetWatchPoint:
00001DD4  4E56 FFF8 3080          link      A6,#-8
00001DD8  48E7 3030 3081          movem.l   D2/D3/A2/A3,-(A7)
00001DDC  45F9 0000 3082          lea       _printf.L,A2
00001DE0  3616      
00001DE2  47F9 0803 3083          lea       _WatchPointSetOrCleared.L,A3
00001DE6  01A2      
                    3084   ; int i ;
                    3085   ; int WPNumber;
                    3086   ; int WPAddress;
                    3087   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3088   ; // see if any free break points
                    3089   ; for(i = 0; i < 8; i ++) {
00001DE8  4282      3090          clr.l     D2
                    3091   SetWatchPoint_1:
00001DEA  0C82 0000 3092          cmp.l     #8,D2
00001DEE  0008      
00001DF0  6C10      3093          bge.s     SetWatchPoint_3
                    3094   ; if( WatchPointSetOrCleared[i] == 0)
00001DF2  2002      3095          move.l    D2,D0
00001DF4  E588      3096          lsl.l     #2,D0
00001DF6  2033 0800 3097          move.l    0(A3,D0.L),D0
00001DFA  6602      3098          bne.s     SetWatchPoint_4
                    3099   ; break ;         // if spare WP found allow user to set it
00001DFC  6004      3100          bra.s     SetWatchPoint_3
                    3101   SetWatchPoint_4:
00001DFE  5282      3102          addq.l    #1,D2
00001E00  60E8      3103          bra       SetWatchPoint_1
                    3104   SetWatchPoint_3:
                    3105   ; }
                    3106   ; if(i == 8) {
00001E02  0C82 0000 3107          cmp.l     #8,D2
00001E06  0008      
00001E08  660E      3108          bne.s     SetWatchPoint_6
                    3109   ; printf("\r\nNo FREE Watch Points.....") ;
00001E0A  4879 0000 3110          pea       @m68kde~1_77.L
00001E0E  47A2      
00001E10  4E92      3111          jsr       (A2)
00001E12  584F      3112          addq.w    #4,A7
                    3113   ; return ;
00001E14  6000 008C 3114          bra       SetWatchPoint_11
                    3115   SetWatchPoint_6:
                    3116   ; }
                    3117   ; printf("\r\nWatch Point Address: ") ;
00001E18  4879 0000 3118          pea       @m68kde~1_78.L
00001E1C  47BE      
00001E1E  4E92      3119          jsr       (A2)
00001E20  584F      3120          addq.w    #4,A7
                    3121   ; WPAddress = Get8HexDigits(0) ;
00001E22  42A7      3122          clr.l     -(A7)
00001E24  4EB8 0CA4 3123          jsr       _Get8HexDigits
00001E28  584F      3124          addq.w    #4,A7
00001E2A  2600      3125          move.l    D0,D3
                    3126   ; // search for first free wp or existing same wp
                    3127   ; for(i = 0; i < 8; i++)  {
00001E2C  4282      3128          clr.l     D2
                    3129   SetWatchPoint_9:
00001E2E  0C82 0000 3130          cmp.l     #8,D2
00001E32  0008      
00001E34  6C00 006C 3131          bge       SetWatchPoint_11
                    3132   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E38  2002      3133          move.l    D2,D0
00001E3A  E588      3134          lsl.l     #2,D0
00001E3C  41F9 0803 3135          lea       _WatchPointAddress.L,A0
00001E40  0182      
00001E42  B6B0 0800 3136          cmp.l     0(A0,D0.L),D3
00001E46  6614      3137          bne.s     SetWatchPoint_12
00001E48  4A83      3138          tst.l     D3
00001E4A  6710      3139          beq.s     SetWatchPoint_12
                    3140   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E4C  2F03      3141          move.l    D3,-(A7)
00001E4E  4879 0000 3142          pea       @m68kde~1_79.L
00001E52  47D6      
00001E54  4E92      3143          jsr       (A2)
00001E56  504F      3144          addq.w    #8,A7
                    3145   ; return ;
00001E58  6000 0048 3146          bra       SetWatchPoint_11
                    3147   SetWatchPoint_12:
                    3148   ; }
                    3149   ; if(WatchPointSetOrCleared[i] == 0) {
00001E5C  2002      3150          move.l    D2,D0
00001E5E  E588      3151          lsl.l     #2,D0
00001E60  2033 0800 3152          move.l    0(A3,D0.L),D0
00001E64  6600 0038 3153          bne       SetWatchPoint_14
                    3154   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001E68  2002      3155          move.l    D2,D0
00001E6A  E588      3156          lsl.l     #2,D0
00001E6C  27BC 0000 3157          move.l    #1,0(A3,D0.L)
00001E70  0001 0800 
                    3158   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001E74  2F03      3159          move.l    D3,-(A7)
00001E76  4879 0000 3160          pea       @m68kde~1_80.L
00001E7A  480C      
00001E7C  4E92      3161          jsr       (A2)
00001E7E  504F      3162          addq.w    #8,A7
                    3163   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001E80  2002      3164          move.l    D2,D0
00001E82  E588      3165          lsl.l     #2,D0
00001E84  41F9 0803 3166          lea       _WatchPointAddress.L,A0
00001E88  0182      
00001E8A  2183 0800 3167          move.l    D3,0(A0,D0.L)
                    3168   ; printf("\r\n") ;
00001E8E  4879 0000 3169          pea       @m68kde~1_1.L
00001E92  3FEC      
00001E94  4E92      3170          jsr       (A2)
00001E96  584F      3171          addq.w    #4,A7
                    3172   ; WatchPointDisplay() ;       // display the break points
00001E98  4EB8 1958 3173          jsr       _WatchPointDisplay
                    3174   ; return ;
00001E9C  6004      3175          bra.s     SetWatchPoint_11
                    3176   SetWatchPoint_14:
00001E9E  5282      3177          addq.l    #1,D2
00001EA0  608C      3178          bra       SetWatchPoint_9
                    3179   SetWatchPoint_11:
00001EA2  4CDF 0C0C 3180          movem.l   (A7)+,D2/D3/A2/A3
00001EA6  4E5E      3181          unlk      A6
00001EA8  4E75      3182          rts
                    3183   ; }
                    3184   ; }
                    3185   ; }
                    3186   ; void HandleBreakPoint(void)
                    3187   ; {
                    3188   _HandleBreakPoint:
00001EAA  4E56 FFFC 3189          link      A6,#-4
00001EAE  48E7 0038 3190          movem.l   A2/A3/A4,-(A7)
00001EB2  45F9 0803 3191          lea       _i.L,A2
00001EB6  00C4      
00001EB8  47F9 0000 3192          lea       _printf.L,A3
00001EBC  3616      
00001EBE  49F9 0803 3193          lea       _PC.L,A4
00001EC2  0120      
                    3194   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3195   ; // now we have to put the break point back to run the instruction
                    3196   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3197   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001EC4  5594      3198          subq.l    #2,(A4)
                    3199   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001EC6  4879 0000 3200          pea       @m68kde~1_81.L
00001ECA  4832      
00001ECC  4E93      3201          jsr       (A3)
00001ECE  584F      3202          addq.w    #4,A7
                    3203   ; printf("\r\nSingle Step : [ON]") ;
00001ED0  4879 0000 3204          pea       @m68kde~1_82.L
00001ED4  4846      
00001ED6  4E93      3205          jsr       (A3)
00001ED8  584F      3206          addq.w    #4,A7
                    3207   ; printf("\r\nBreakPoints : [Enabled]") ;
00001EDA  4879 0000 3208          pea       @m68kde~1_83.L
00001EDE  485C      
00001EE0  4E93      3209          jsr       (A3)
00001EE2  584F      3210          addq.w    #4,A7
                    3211   ; // now clear the break point (put original instruction back)
                    3212   ; ProgramBreakPointAddress = PC ;
00001EE4  2D54 FFFC 3213          move.l    (A4),-4(A6)
                    3214   ; for(i = 0; i < 8; i ++) {
00001EE8  4292      3215          clr.l     (A2)
                    3216   HandleBreakPoint_1:
00001EEA  2012      3217          move.l    (A2),D0
00001EEC  0C80 0000 3218          cmp.l     #8,D0
00001EF0  0008      
00001EF2  6400 0056 3219          bhs       HandleBreakPoint_3
                    3220   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001EF6  2012      3221          move.l    (A2),D0
00001EF8  E588      3222          lsl.l     #2,D0
00001EFA  41F9 0803 3223          lea       _BreakPointAddress.L,A0
00001EFE  012E      
00001F00  2230 0800 3224          move.l    0(A0,D0.L),D1
00001F04  B294      3225          cmp.l     (A4),D1
00001F06  6600 003E 3226          bne       HandleBreakPoint_4
                    3227   ; BreakPointAddress[i] = 0 ;
00001F0A  2012      3228          move.l    (A2),D0
00001F0C  E588      3229          lsl.l     #2,D0
00001F0E  41F9 0803 3230          lea       _BreakPointAddress.L,A0
00001F12  012E      
00001F14  42B0 0800 3231          clr.l     0(A0,D0.L)
                    3232   ; BreakPointSetOrCleared[i] = 0 ;
00001F18  2012      3233          move.l    (A2),D0
00001F1A  E588      3234          lsl.l     #2,D0
00001F1C  41F9 0803 3235          lea       _BreakPointSetOrCleared.L,A0
00001F20  015E      
00001F22  42B0 0800 3236          clr.l     0(A0,D0.L)
                    3237   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F26  2012      3238          move.l    (A2),D0
00001F28  E388      3239          lsl.l     #1,D0
00001F2A  41F9 0803 3240          lea       _BreakPointInstruction.L,A0
00001F2E  014E      
00001F30  226E FFFC 3241          move.l    -4(A6),A1
00001F34  32B0 0800 3242          move.w    0(A0,D0.L),(A1)
                    3243   ; BreakPointInstruction[i] = 0 ;
00001F38  2012      3244          move.l    (A2),D0
00001F3A  E388      3245          lsl.l     #1,D0
00001F3C  41F9 0803 3246          lea       _BreakPointInstruction.L,A0
00001F40  014E      
00001F42  4270 0800 3247          clr.w     0(A0,D0.L)
                    3248   HandleBreakPoint_4:
00001F46  5292      3249          addq.l    #1,(A2)
00001F48  60A0      3250          bra       HandleBreakPoint_1
                    3251   HandleBreakPoint_3:
                    3252   ; }
                    3253   ; }
                    3254   ; DumpRegisters() ;
00001F4A  4EB8 10D6 3255          jsr       _DumpRegisters
                    3256   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F4E  4879 0000 3257          pea       @m68kde~1_45.L
00001F52  43D8      
00001F54  4E93      3258          jsr       (A3)
00001F56  584F      3259          addq.w    #4,A7
                    3260   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001F58  4879 0000 3261          pea       @m68kde~1_84.L
00001F5C  4876      
00001F5E  4E93      3262          jsr       (A3)
00001F60  584F      3263          addq.w    #4,A7
                    3264   ; menu() ;
00001F62  4EB9 0000 3265          jsr       _menu
00001F66  216E      
00001F68  4CDF 1C00 3266          movem.l   (A7)+,A2/A3/A4
00001F6C  4E5E      3267          unlk      A6
00001F6E  4E75      3268          rts
                    3269   ; }
                    3270   ; void UnknownCommand()
                    3271   ; {
                    3272   _UnknownCommand:
                    3273   ; printf("\r\nUnknown Command.....\r\n") ;
00001F70  4879 0000 3274          pea       @m68kde~1_85.L
00001F74  489E      
00001F76  4EB9 0000 3275          jsr       _printf
00001F7A  3616      
00001F7C  584F      3276          addq.w    #4,A7
                    3277   ; Help() ;
00001F7E  4EB9 0000 3278          jsr       _Help
00001F82  2094      
00001F84  4E75      3279          rts
                    3280   ; }
                    3281   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3282   ; void CallDebugMonitor(void)
                    3283   ; {
                    3284   _CallDebugMonitor:
                    3285   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001F86  4879 0000 3286          pea       @m68kde~1_86.L
00001F8A  48B8      
00001F8C  4EB9 0000 3287          jsr       _printf
00001F90  3616      
00001F92  584F      3288          addq.w    #4,A7
                    3289   ; menu();
00001F94  4EB9 0000 3290          jsr       _menu
00001F98  216E      
00001F9A  4E75      3291          rts
                    3292   ; }
                    3293   ; void Breakpoint(void)
                    3294   ; {
                    3295   _Breakpoint:
00001F9C  2F02      3296          move.l    D2,-(A7)
                    3297   ; char c;
                    3298   ; c = toupper(_getch());
00001F9E  2F00      3299          move.l    D0,-(A7)
00001FA0  4EB8 0B68 3300          jsr       __getch
00001FA4  2200      3301          move.l    D0,D1
00001FA6  201F      3302          move.l    (A7)+,D0
00001FA8  2F01      3303          move.l    D1,-(A7)
00001FAA  4EB9 0000 3304          jsr       _toupper
00001FAE  2D54      
00001FB0  584F      3305          addq.w    #4,A7
00001FB2  1400      3306          move.b    D0,D2
                    3307   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FB4  0C02 0044 3308          cmp.b     #68,D2
00001FB8  6608      3309          bne.s     Breakpoint_1
                    3310   ; BreakPointDisplay() ;
00001FBA  4EB8 1884 3311          jsr       _BreakPointDisplay
00001FBE  6000 0054 3312          bra       Breakpoint_10
                    3313   Breakpoint_1:
                    3314   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001FC2  0C02 004B 3315          cmp.b     #75,D2
00001FC6  6630      3316          bne.s     Breakpoint_3
                    3317   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001FC8  4879 0000 3318          pea       @m68kde~1_87.L
00001FCC  48D8      
00001FCE  4EB9 0000 3319          jsr       _printf
00001FD2  3616      
00001FD4  584F      3320          addq.w    #4,A7
                    3321   ; c = toupper(_getch());
00001FD6  2F00      3322          move.l    D0,-(A7)
00001FD8  4EB8 0B68 3323          jsr       __getch
00001FDC  2200      3324          move.l    D0,D1
00001FDE  201F      3325          move.l    (A7)+,D0
00001FE0  2F01      3326          move.l    D1,-(A7)
00001FE2  4EB9 0000 3327          jsr       _toupper
00001FE6  2D54      
00001FE8  584F      3328          addq.w    #4,A7
00001FEA  1400      3329          move.b    D0,D2
                    3330   ; if(c == (char)('Y'))
00001FEC  0C02 0059 3331          cmp.b     #89,D2
00001FF0  6604      3332          bne.s     Breakpoint_5
                    3333   ; KillAllBreakPoints() ;
00001FF2  4EB8 1C1C 3334          jsr       _KillAllBreakPoints
                    3335   Breakpoint_5:
00001FF6  601C      3336          bra.s     Breakpoint_10
                    3337   Breakpoint_3:
                    3338   ; }
                    3339   ; else if(c == (char)('S')) {
00001FF8  0C02 0053 3340          cmp.b     #83,D2
00001FFC  6606      3341          bne.s     Breakpoint_7
                    3342   ; SetBreakPoint() ;
00001FFE  4EB8 1CB4 3343          jsr       _SetBreakPoint
00002002  6010      3344          bra.s     Breakpoint_10
                    3345   Breakpoint_7:
                    3346   ; }
                    3347   ; else if(c == (char)('C')) {
00002004  0C02 0043 3348          cmp.b     #67,D2
00002008  6606      3349          bne.s     Breakpoint_9
                    3350   ; BreakPointClear() ;
0000200A  4EB8 1A04 3351          jsr       _BreakPointClear
0000200E  6004      3352          bra.s     Breakpoint_10
                    3353   Breakpoint_9:
                    3354   ; }
                    3355   ; else
                    3356   ; UnknownCommand() ;
00002010  4EB8 1F70 3357          jsr       _UnknownCommand
                    3358   Breakpoint_10:
00002014  241F      3359          move.l    (A7)+,D2
00002016  4E75      3360          rts
                    3361   ; }
                    3362   ; void Watchpoint(void)
                    3363   ; {
                    3364   _Watchpoint:
00002018  2F02      3365          move.l    D2,-(A7)
                    3366   ; char c;
                    3367   ; c = toupper(_getch());
0000201A  2F00      3368          move.l    D0,-(A7)
0000201C  4EB8 0B68 3369          jsr       __getch
00002020  2200      3370          move.l    D0,D1
00002022  201F      3371          move.l    (A7)+,D0
00002024  2F01      3372          move.l    D1,-(A7)
00002026  4EB9 0000 3373          jsr       _toupper
0000202A  2D54      
0000202C  584F      3374          addq.w    #4,A7
0000202E  1400      3375          move.b    D0,D2
                    3376   ; if( c == (char)('D'))                                      // WatchPoint Display
00002030  0C02 0044 3377          cmp.b     #68,D2
00002034  6608      3378          bne.s     Watchpoint_1
                    3379   ; WatchPointDisplay() ;
00002036  4EB8 1958 3380          jsr       _WatchPointDisplay
0000203A  6000 0054 3381          bra       Watchpoint_10
                    3382   Watchpoint_1:
                    3383   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000203E  0C02 004B 3384          cmp.b     #75,D2
00002042  6630      3385          bne.s     Watchpoint_3
                    3386   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002044  4879 0000 3387          pea       @m68kde~1_88.L
00002048  48FA      
0000204A  4EB9 0000 3388          jsr       _printf
0000204E  3616      
00002050  584F      3389          addq.w    #4,A7
                    3390   ; c = toupper(_getch());
00002052  2F00      3391          move.l    D0,-(A7)
00002054  4EB8 0B68 3392          jsr       __getch
00002058  2200      3393          move.l    D0,D1
0000205A  201F      3394          move.l    (A7)+,D0
0000205C  2F01      3395          move.l    D1,-(A7)
0000205E  4EB9 0000 3396          jsr       _toupper
00002062  2D54      
00002064  584F      3397          addq.w    #4,A7
00002066  1400      3398          move.b    D0,D2
                    3399   ; if(c == (char)('Y'))
00002068  0C02 0059 3400          cmp.b     #89,D2
0000206C  6604      3401          bne.s     Watchpoint_5
                    3402   ; KillAllWatchPoints() ;
0000206E  4EB8 1C84 3403          jsr       _KillAllWatchPoints
                    3404   Watchpoint_5:
00002072  601C      3405          bra.s     Watchpoint_10
                    3406   Watchpoint_3:
                    3407   ; }
                    3408   ; else if(c == (char)('S')) {
00002074  0C02 0053 3409          cmp.b     #83,D2
00002078  6606      3410          bne.s     Watchpoint_7
                    3411   ; SetWatchPoint() ;
0000207A  4EB8 1DD4 3412          jsr       _SetWatchPoint
0000207E  6010      3413          bra.s     Watchpoint_10
                    3414   Watchpoint_7:
                    3415   ; }
                    3416   ; else if(c == (char)('C')) {
00002080  0C02 0043 3417          cmp.b     #67,D2
00002084  6606      3418          bne.s     Watchpoint_9
                    3419   ; WatchPointClear() ;
00002086  4EB8 1ADE 3420          jsr       _WatchPointClear
0000208A  6004      3421          bra.s     Watchpoint_10
                    3422   Watchpoint_9:
                    3423   ; }
                    3424   ; else
                    3425   ; UnknownCommand() ;
0000208C  4EB8 1F70 3426          jsr       _UnknownCommand
                    3427   Watchpoint_10:
00002090  241F      3428          move.l    (A7)+,D2
00002092  4E75      3429          rts
                    3430   ; }
                    3431   ; void Help(void)
                    3432   ; {
                    3433   _Help:
00002094  48E7 2020 3434          movem.l   D2/A2,-(A7)
00002098  45F9 0000 3435          lea       _printf.L,A2
0000209C  3616      
                    3436   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000209E  41F9 0000 3437          lea       @m68kde~1_89.L,A0
000020A2  491C      
000020A4  2408      3438          move.l    A0,D2
                    3439   ; printf(banner) ;
000020A6  2F02      3440          move.l    D2,-(A7)
000020A8  4E92      3441          jsr       (A2)
000020AA  584F      3442          addq.w    #4,A7
                    3443   ; printf("\r\n  Debugger Command Summary") ;
000020AC  4879 0000 3444          pea       @m68kde~1_90.L
000020B0  4960      
000020B2  4E92      3445          jsr       (A2)
000020B4  584F      3446          addq.w    #4,A7
                    3447   ; printf(banner) ;
000020B6  2F02      3448          move.l    D2,-(A7)
000020B8  4E92      3449          jsr       (A2)
000020BA  584F      3450          addq.w    #4,A7
                    3451   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000020BC  4879 0000 3452          pea       @m68kde~1_91.L
000020C0  497E      
000020C2  4E92      3453          jsr       (A2)
000020C4  584F      3454          addq.w    #4,A7
                    3455   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000020C6  4879 0000 3456          pea       @m68kde~1_92.L
000020CA  49C2      
000020CC  4E92      3457          jsr       (A2)
000020CE  584F      3458          addq.w    #4,A7
                    3459   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000020D0  4879 0000 3460          pea       @m68kde~1_93.L
000020D4  49FA      
000020D6  4E92      3461          jsr       (A2)
000020D8  584F      3462          addq.w    #4,A7
                    3463   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000020DA  4879 0000 3464          pea       @m68kde~1_94.L
000020DE  4A34      
000020E0  4E92      3465          jsr       (A2)
000020E2  584F      3466          addq.w    #4,A7
                    3467   ; printf("\r\n  E            - Enter String into Memory") ;
000020E4  4879 0000 3468          pea       @m68kde~1_95.L
000020E8  4A66      
000020EA  4E92      3469          jsr       (A2)
000020EC  584F      3470          addq.w    #4,A7
                    3471   ; printf("\r\n  F            - Fill Memory with Data") ;
000020EE  4879 0000 3472          pea       @m68kde~1_96.L
000020F2  4A92      
000020F4  4E92      3473          jsr       (A2)
000020F6  584F      3474          addq.w    #4,A7
                    3475   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000020F8  2F39 0803 3476          move.l    _PC.L,-(A7)
000020FC  0120      
000020FE  4879 0000 3477          pea       @m68kde~1_97.L
00002102  4ABC      
00002104  4E92      3478          jsr       (A2)
00002106  504F      3479          addq.w    #8,A7
                    3480   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002108  4879 0000 3481          pea       @m68kde~1_98.L
0000210C  4AF6      
0000210E  4E92      3482          jsr       (A2)
00002110  584F      3483          addq.w    #4,A7
                    3484   ; printf("\r\n  M            - Memory Examine and Change");
00002112  4879 0000 3485          pea       @m68kde~1_99.L
00002116  4B2E      
00002118  4E92      3486          jsr       (A2)
0000211A  584F      3487          addq.w    #4,A7
                    3488   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000211C  4879 0000 3489          pea       @m68kde~1_100.L
00002120  4B5C      
00002122  4E92      3490          jsr       (A2)
00002124  584F      3491          addq.w    #4,A7
                    3492   ; printf("\r\n  R            - Display 68000 Registers") ;
00002126  4879 0000 3493          pea       @m68kde~1_101.L
0000212A  4B96      
0000212C  4E92      3494          jsr       (A2)
0000212E  584F      3495          addq.w    #4,A7
                    3496   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002130  4879 0000 3497          pea       @m68kde~1_102.L
00002134  4BC2      
00002136  4E92      3498          jsr       (A2)
00002138  584F      3499          addq.w    #4,A7
                    3500   ; printf("\r\n  TM           - Test Memory") ;
0000213A  4879 0000 3501          pea       @m68kde~1_103.L
0000213E  4BF4      
00002140  4E92      3502          jsr       (A2)
00002142  584F      3503          addq.w    #4,A7
                    3504   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002144  4879 0000 3505          pea       @m68kde~1_104.L
00002148  4C14      
0000214A  4E92      3506          jsr       (A2)
0000214C  584F      3507          addq.w    #4,A7
                    3508   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
0000214E  4879 0000 3509          pea       @m68kde~1_105.L
00002152  4C3C      
00002154  4E92      3510          jsr       (A2)
00002156  584F      3511          addq.w    #4,A7
                    3512   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002158  4879 0000 3513          pea       @m68kde~1_106.L
0000215C  4C72      
0000215E  4E92      3514          jsr       (A2)
00002160  584F      3515          addq.w    #4,A7
                    3516   ; printf(banner) ;
00002162  2F02      3517          move.l    D2,-(A7)
00002164  4E92      3518          jsr       (A2)
00002166  584F      3519          addq.w    #4,A7
00002168  4CDF 0404 3520          movem.l   (A7)+,D2/A2
0000216C  4E75      3521          rts
                    3522   ; }
                    3523   ; void menu(void)
                    3524   ; {
                    3525   _menu:
0000216E  48E7 303C 3526          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002172  45F9 0000 3527          lea       _printf.L,A2
00002176  3616      
00002178  47F9 0803 3528          lea       _Trace.L,A3
0000217C  00D8      
0000217E  49F9 0803 3529          lea       _x.L,A4
00002182  00C8      
00002184  4BF9 0803 3530          lea       _SR.L,A5
00002188  012C      
                    3531   ; char c,c1 ;
                    3532   ; while(1)    {
                    3533   menu_1:
                    3534   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000218A  4EB8 0BA6 3535          jsr       _FlushKeyboard
                    3536   ; printf("\r\n#") ;
0000218E  4879 0000 3537          pea       @m68kde~1_107.L
00002192  4CAA      
00002194  4E92      3538          jsr       (A2)
00002196  584F      3539          addq.w    #4,A7
                    3540   ; c = toupper(_getch());
00002198  2F00      3541          move.l    D0,-(A7)
0000219A  4EB8 0B68 3542          jsr       __getch
0000219E  2200      3543          move.l    D0,D1
000021A0  201F      3544          move.l    (A7)+,D0
000021A2  2F01      3545          move.l    D1,-(A7)
000021A4  4EB9 0000 3546          jsr       _toupper
000021A8  2D54      
000021AA  584F      3547          addq.w    #4,A7
000021AC  1400      3548          move.b    D0,D2
                    3549   ; if( c == (char)('L'))                  // load s record file
000021AE  0C02 004C 3550          cmp.b     #76,D2
000021B2  6608      3551          bne.s     menu_4
                    3552   ; Load_SRecordFile() ;
000021B4  4EB8 0E36 3553          jsr       _Load_SRecordFile
000021B8  6000 021E 3554          bra       menu_46
                    3555   menu_4:
                    3556   ; else if( c == (char)('D'))             // dump memory
000021BC  0C02 0044 3557          cmp.b     #68,D2
000021C0  6608      3558          bne.s     menu_6
                    3559   ; DumpMemory() ;
000021C2  4EB8 0CCC 3560          jsr       _DumpMemory
000021C6  6000 0210 3561          bra       menu_46
                    3562   menu_6:
                    3563   ; else if( c == (char)('E'))             // Enter String into memory
000021CA  0C02 0045 3564          cmp.b     #69,D2
000021CE  660A      3565          bne.s     menu_8
                    3566   ; EnterString() ;
000021D0  4EB9 0000 3567          jsr       _EnterString
000021D4  2520      
000021D6  6000 0200 3568          bra       menu_46
                    3569   menu_8:
                    3570   ; else if( c == (char)('F'))             // fill memory
000021DA  0C02 0046 3571          cmp.b     #70,D2
000021DE  6608      3572          bne.s     menu_10
                    3573   ; FillMemory() ;
000021E0  4EB8 0DBC 3574          jsr       _FillMemory
000021E4  6000 01F2 3575          bra       menu_46
                    3576   menu_10:
                    3577   ; else if( c == (char)('G'))  {           // go user program
000021E8  0C02 0047 3578          cmp.b     #71,D2
000021EC  6626      3579          bne.s     menu_12
                    3580   ; printf("\r\nProgram Running.....") ;
000021EE  4879 0000 3581          pea       @m68kde~1_108.L
000021F2  4CAE      
000021F4  4E92      3582          jsr       (A2)
000021F6  584F      3583          addq.w    #4,A7
                    3584   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000021F8  4879 0000 3585          pea       @m68kde~1_109.L
000021FC  4CC6      
000021FE  4E92      3586          jsr       (A2)
00002200  584F      3587          addq.w    #4,A7
                    3588   ; GoFlag = 1 ;
00002202  23FC 0000 3589          move.l    #1,_GoFlag.L
00002206  0001 0803 
0000220A  00DC      
                    3590   ; go() ;
0000220C  4EB8 08B8 3591          jsr       _go
00002210  6000 01C6 3592          bra       menu_46
                    3593   menu_12:
                    3594   ; }
                    3595   ; else if( c == (char)('M'))           // memory examine and modify
00002214  0C02 004D 3596          cmp.b     #77,D2
00002218  6608      3597          bne.s     menu_14
                    3598   ; MemoryChange() ;
0000221A  4EB8 0FC4 3599          jsr       _MemoryChange
0000221E  6000 01B8 3600          bra       menu_46
                    3601   menu_14:
                    3602   ; else if( c == (char)('P'))            // Program Flash Chip
00002222  0C02 0050 3603          cmp.b     #80,D2
00002226  6608      3604          bne.s     menu_16
                    3605   ; ProgramFlashChip() ;
00002228  4EB8 10C4 3606          jsr       _ProgramFlashChip
0000222C  6000 01AA 3607          bra       menu_46
                    3608   menu_16:
                    3609   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002230  0C02 0043 3610          cmp.b     #67,D2
00002234  6608      3611          bne.s     menu_18
                    3612   ; LoadFromFlashChip();
00002236  4EB8 10C6 3613          jsr       _LoadFromFlashChip
0000223A  6000 019C 3614          bra       menu_46
                    3615   menu_18:
                    3616   ; else if( c == (char)('R'))             // dump registers
0000223E  0C02 0052 3617          cmp.b     #82,D2
00002242  6608      3618          bne.s     menu_20
                    3619   ; DumpRegisters() ;
00002244  4EB8 10D6 3620          jsr       _DumpRegisters
00002248  6000 018E 3621          bra       menu_46
                    3622   menu_20:
                    3623   ; else if( c == (char)('.'))           // change registers
0000224C  0C02 002E 3624          cmp.b     #46,D2
00002250  6608      3625          bne.s     menu_22
                    3626   ; ChangeRegisters() ;
00002252  4EB8 15C8 3627          jsr       _ChangeRegisters
00002256  6000 0180 3628          bra       menu_46
                    3629   menu_22:
                    3630   ; else if( c == (char)('B'))              // breakpoint command
0000225A  0C02 0042 3631          cmp.b     #66,D2
0000225E  6608      3632          bne.s     menu_24
                    3633   ; Breakpoint() ;
00002260  4EB8 1F9C 3634          jsr       _Breakpoint
00002264  6000 0172 3635          bra       menu_46
                    3636   menu_24:
                    3637   ; else if( c == (char)('T'))  {          // Test command
00002268  0C02 0054 3638          cmp.b     #84,D2
0000226C  6600 0046 3639          bne       menu_26
                    3640   ; c1 = toupper(_getch()) ;
00002270  2F00      3641          move.l    D0,-(A7)
00002272  4EB8 0B68 3642          jsr       __getch
00002276  2200      3643          move.l    D0,D1
00002278  201F      3644          move.l    (A7)+,D0
0000227A  2F01      3645          move.l    D1,-(A7)
0000227C  4EB9 0000 3646          jsr       _toupper
00002280  2D54      
00002282  584F      3647          addq.w    #4,A7
00002284  1600      3648          move.b    D0,D3
                    3649   ; if(c1 == (char)('M'))                    // memory test
00002286  0C03 004D 3650          cmp.b     #77,D3
0000228A  6608      3651          bne.s     menu_28
                    3652   ; MemoryTest() ;
0000228C  4EB9 0000 3653          jsr       _MemoryTest
00002290  2598      
00002292  601C      3654          bra.s     menu_33
                    3655   menu_28:
                    3656   ; else if( c1 == (char)('S'))              // Switch Test command
00002294  0C03 0053 3657          cmp.b     #83,D3
00002298  6606      3658          bne.s     menu_30
                    3659   ; SwitchTest() ;
0000229A  4EB8 0AA4 3660          jsr       _SwitchTest
0000229E  6010      3661          bra.s     menu_33
                    3662   menu_30:
                    3663   ; else if( c1 == (char)('D'))              // display Test command
000022A0  0C03 0044 3664          cmp.b     #68,D3
000022A4  6606      3665          bne.s     menu_32
                    3666   ; TestLEDS() ;
000022A6  4EB8 0A50 3667          jsr       _TestLEDS
000022AA  6004      3668          bra.s     menu_33
                    3669   menu_32:
                    3670   ; else
                    3671   ; UnknownCommand() ;
000022AC  4EB8 1F70 3672          jsr       _UnknownCommand
                    3673   menu_33:
000022B0  6000 0126 3674          bra       menu_46
                    3675   menu_26:
                    3676   ; }
                    3677   ; else if( c == (char)(' ')) {             // Next instruction command
000022B4  0C02 0020 3678          cmp.b     #32,D2
000022B8  6636      3679          bne.s     menu_34
                    3680   ; DisableBreakPoints() ;
000022BA  4EB8 1B80 3681          jsr       _DisableBreakPoints
                    3682   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000022BE  2013      3683          move.l    (A3),D0
000022C0  0C80 0000 3684          cmp.l     #1,D0
000022C4  0001      
000022C6  661A      3685          bne.s     menu_36
000022C8  2039 0803 3686          move.l    _GoFlag.L,D0
000022CC  00DC      
000022CE  0C80 0000 3687          cmp.l     #1,D0
000022D2  0001      
000022D4  660C      3688          bne.s     menu_36
                    3689   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000022D6  13FC 0001 3690          move.b    #1,4194314
000022DA  0040 000A 
                    3691   ; return ;
000022DE  6000 00FC 3692          bra       menu_38
                    3693   menu_36:
                    3694   ; }
                    3695   ; else
                    3696   ; printf("\r\nError: Press 'G' first to start program") ;
000022E2  4879 0000 3697          pea       @m68kde~1_110.L
000022E6  4CF4      
000022E8  4E92      3698          jsr       (A2)
000022EA  584F      3699          addq.w    #4,A7
000022EC  6000 00EA 3700          bra       menu_46
                    3701   menu_34:
                    3702   ; }
                    3703   ; else if( c == (char)('S')) {             // single step
000022F0  0C02 0053 3704          cmp.b     #83,D2
000022F4  6600 008C 3705          bne       menu_39
                    3706   ; if(Trace == 0) {
000022F8  2013      3707          move.l    (A3),D0
000022FA  6600 0050 3708          bne       menu_41
                    3709   ; DisableBreakPoints() ;
000022FE  4EB8 1B80 3710          jsr       _DisableBreakPoints
                    3711   ; printf("\r\nSingle Step  :[ON]") ;
00002302  4879 0000 3712          pea       @m68kde~1_111.L
00002306  4D1E      
00002308  4E92      3713          jsr       (A2)
0000230A  584F      3714          addq.w    #4,A7
                    3715   ; printf("\r\nBreak Points :[Disabled]") ;
0000230C  4879 0000 3716          pea       @m68kde~1_44.L
00002310  43BC      
00002312  4E92      3717          jsr       (A2)
00002314  584F      3718          addq.w    #4,A7
                    3719   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002316  0055 8000 3720          or.w      #32768,(A5)
                    3721   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000231A  2F39 0803 3722          move.l    _PC.L,-(A7)
0000231E  0120      
00002320  4879 0000 3723          pea       @m68kde~1_112.L
00002324  4D34      
00002326  4E92      3724          jsr       (A2)
00002328  504F      3725          addq.w    #8,A7
                    3726   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000232A  4879 0000 3727          pea       @m68kde~1_113.L
0000232E  4D68      
00002330  4E92      3728          jsr       (A2)
00002332  584F      3729          addq.w    #4,A7
                    3730   ; DumpRegisters() ;
00002334  4EB8 10D6 3731          jsr       _DumpRegisters
                    3732   ; Trace = 1;
00002338  26BC 0000 3733          move.l    #1,(A3)
0000233C  0001      
                    3734   ; TraceException = 1;
0000233E  13FC 0001 3735          move.b    #1,4194314
00002342  0040 000A 
                    3736   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002346  28B8 0074 3737          move.l    116,(A4)
0000234A  6032      3738          bra.s     menu_42
                    3739   menu_41:
                    3740   ; }
                    3741   ; else {
                    3742   ; Trace = 0 ;
0000234C  4293      3743          clr.l     (A3)
                    3744   ; TraceException = 0 ;
0000234E  4239 0040 3745          clr.b     4194314
00002352  000A      
                    3746   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002354  28B8 0074 3747          move.l    116,(A4)
                    3748   ; EnableBreakPoints() ;
00002358  4EB8 1BD4 3749          jsr       _EnableBreakPoints
                    3750   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000235C  0255 7FFF 3751          and.w     #32767,(A5)
                    3752   ; printf("\r\nSingle Step : [OFF]") ;
00002360  4879 0000 3753          pea       @m68kde~1_114.L
00002364  4D8C      
00002366  4E92      3754          jsr       (A2)
00002368  584F      3755          addq.w    #4,A7
                    3756   ; printf("\r\nBreak Points :[Enabled]") ;
0000236A  4879 0000 3757          pea       @m68kde~1_115.L
0000236E  4DA2      
00002370  4E92      3758          jsr       (A2)
00002372  584F      3759          addq.w    #4,A7
                    3760   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002374  4879 0000 3761          pea       @m68kde~1_116.L
00002378  4DBC      
0000237A  4E92      3762          jsr       (A2)
0000237C  584F      3763          addq.w    #4,A7
                    3764   menu_42:
0000237E  6000 0058 3765          bra       menu_46
                    3766   menu_39:
                    3767   ; }
                    3768   ; }
                    3769   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002382  0C02 001B 3770          cmp.b     #27,D2
00002386  6600 0040 3771          bne       menu_43
                    3772   ; Trace = 0;
0000238A  4293      3773          clr.l     (A3)
                    3774   ; TraceException = 0;
0000238C  4239 0040 3775          clr.b     4194314
00002390  000A      
                    3776   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002392  28B8 0074 3777          move.l    116,(A4)
                    3778   ; EnableBreakPoints() ;
00002396  4EB8 1BD4 3779          jsr       _EnableBreakPoints
                    3780   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000239A  0255 7FFF 3781          and.w     #32767,(A5)
                    3782   ; printf("\r\nSingle Step  :[OFF]") ;
0000239E  4879 0000 3783          pea       @m68kde~1_117.L
000023A2  4DE6      
000023A4  4E92      3784          jsr       (A2)
000023A6  584F      3785          addq.w    #4,A7
                    3786   ; printf("\r\nBreak Points :[Enabled]");
000023A8  4879 0000 3787          pea       @m68kde~1_115.L
000023AC  4DA2      
000023AE  4E92      3788          jsr       (A2)
000023B0  584F      3789          addq.w    #4,A7
                    3790   ; printf("\r\nProgram Running.....") ;
000023B2  4879 0000 3791          pea       @m68kde~1_108.L
000023B6  4CAE      
000023B8  4E92      3792          jsr       (A2)
000023BA  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023BC  4879 0000 3795          pea       @m68kde~1_109.L
000023C0  4CC6      
000023C2  4E92      3796          jsr       (A2)
000023C4  584F      3797          addq.w    #4,A7
                    3798   ; return ;
000023C6  6014      3799          bra.s     menu_38
                    3800   menu_43:
                    3801   ; }
                    3802   ; else if( c == (char)('W'))              // Watchpoint command
000023C8  0C02 0057 3803          cmp.b     #87,D2
000023CC  6606      3804          bne.s     menu_45
                    3805   ; Watchpoint() ;
000023CE  4EB8 2018 3806          jsr       _Watchpoint
000023D2  6004      3807          bra.s     menu_46
                    3808   menu_45:
                    3809   ; else
                    3810   ; UnknownCommand() ;
000023D4  4EB8 1F70 3811          jsr       _UnknownCommand
                    3812   menu_46:
000023D8  6000 FDB0 3813          bra       menu_1
                    3814   menu_38:
000023DC  4CDF 3C0C 3815          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000023E0  4E75      3816          rts
                    3817   ; }
                    3818   ; }
                    3819   ; void PrintErrorMessageandAbort(char *string) {
                    3820   _PrintErrorMessageandAbort:
000023E2  4E56 0000 3821          link      A6,#0
                    3822   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000023E6  4879 0000 3823          pea       @m68kde~1_118.L
000023EA  4DFC      
000023EC  4EB9 0000 3824          jsr       _printf
000023F0  3616      
000023F2  584F      3825          addq.w    #4,A7
                    3826   ; printf("%s\r\n", string) ;
000023F4  2F2E 0008 3827          move.l    8(A6),-(A7)
000023F8  4879 0000 3828          pea       @m68kde~1_119.L
000023FC  4E18      
000023FE  4EB9 0000 3829          jsr       _printf
00002402  3616      
00002404  504F      3830          addq.w    #8,A7
                    3831   ; menu() ;
00002406  4EB8 216E 3832          jsr       _menu
0000240A  4E5E      3833          unlk      A6
0000240C  4E75      3834          rts
                    3835   ; }
                    3836   ; void IRQMessage(int level) {
                    3837   _IRQMessage:
0000240E  4E56 0000 3838          link      A6,#0
                    3839   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002412  4879 0000 3840          pea       @m68kde~1_120.L
00002416  4E1E      
00002418  4EB9 0000 3841          jsr       _printf
0000241C  3616      
0000241E  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002420  2F2E 0008 3844          move.l    8(A6),-(A7)
00002424  4879 0000 3845          pea       @m68kde~1_121.L
00002428  4E36      
0000242A  4EB9 0000 3846          jsr       _printf
0000242E  3616      
00002430  504F      3847          addq.w    #8,A7
                    3848   ; menu() ;
00002432  4EB8 216E 3849          jsr       _menu
00002436  4E5E      3850          unlk      A6
00002438  4E75      3851          rts
                    3852   ; }
                    3853   ; void UnhandledIRQ1(void) {
                    3854   _UnhandledIRQ1:
                    3855   ; IRQMessage(1);
0000243A  4878 0001 3856          pea       1
0000243E  4EB8 240E 3857          jsr       _IRQMessage
00002442  584F      3858          addq.w    #4,A7
00002444  4E75      3859          rts
                    3860   ; }
                    3861   ; void UnhandledIRQ2(void) {
                    3862   _UnhandledIRQ2:
                    3863   ; IRQMessage(2);
00002446  4878 0002 3864          pea       2
0000244A  4EB8 240E 3865          jsr       _IRQMessage
0000244E  584F      3866          addq.w    #4,A7
00002450  4E75      3867          rts
                    3868   ; }
                    3869   ; void UnhandledIRQ3(void){
                    3870   _UnhandledIRQ3:
                    3871   ; IRQMessage(3);
00002452  4878 0003 3872          pea       3
00002456  4EB8 240E 3873          jsr       _IRQMessage
0000245A  584F      3874          addq.w    #4,A7
0000245C  4E75      3875          rts
                    3876   ; }
                    3877   ; void UnhandledIRQ4(void) {
                    3878   _UnhandledIRQ4:
                    3879   ; IRQMessage(4);
0000245E  4878 0004 3880          pea       4
00002462  4EB8 240E 3881          jsr       _IRQMessage
00002466  584F      3882          addq.w    #4,A7
00002468  4E75      3883          rts
                    3884   ; }
                    3885   ; void UnhandledIRQ5(void) {
                    3886   _UnhandledIRQ5:
                    3887   ; IRQMessage(5);
0000246A  4878 0005 3888          pea       5
0000246E  4EB8 240E 3889          jsr       _IRQMessage
00002472  584F      3890          addq.w    #4,A7
00002474  4E75      3891          rts
                    3892   ; }
                    3893   ; void UnhandledIRQ6(void) {
                    3894   _UnhandledIRQ6:
                    3895   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002476  4879 0000 3896          pea       @m68kde~1_122.L
0000247A  4E5A      
0000247C  4EB8 23E2 3897          jsr       _PrintErrorMessageandAbort
00002480  584F      3898          addq.w    #4,A7
                    3899   ; menu() ;
00002482  4EB8 216E 3900          jsr       _menu
00002486  4E75      3901          rts
                    3902   ; }
                    3903   ; void UnhandledIRQ7(void) {
                    3904   _UnhandledIRQ7:
                    3905   ; IRQMessage(7);
00002488  4878 0007 3906          pea       7
0000248C  4EB8 240E 3907          jsr       _IRQMessage
00002490  584F      3908          addq.w    #4,A7
00002492  4E75      3909          rts
                    3910   ; }
                    3911   ; void UnhandledTrap(void) {
                    3912   _UnhandledTrap:
                    3913   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002494  4879 0000 3914          pea       @m68kde~1_123.L
00002498  4E9A      
0000249A  4EB8 23E2 3915          jsr       _PrintErrorMessageandAbort
0000249E  584F      3916          addq.w    #4,A7
000024A0  4E75      3917          rts
                    3918   ; }
                    3919   ; void BusError() {
                    3920   _BusError:
                    3921   ; PrintErrorMessageandAbort("BUS Error!") ;
000024A2  4879 0000 3922          pea       @m68kde~1_124.L
000024A6  4EB0      
000024A8  4EB8 23E2 3923          jsr       _PrintErrorMessageandAbort
000024AC  584F      3924          addq.w    #4,A7
000024AE  4E75      3925          rts
                    3926   ; }
                    3927   ; void AddressError() {
                    3928   _AddressError:
                    3929   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000024B0  4879 0000 3930          pea       @m68kde~1_125.L
000024B4  4EBC      
000024B6  4EB8 23E2 3931          jsr       _PrintErrorMessageandAbort
000024BA  584F      3932          addq.w    #4,A7
000024BC  4E75      3933          rts
                    3934   ; }
                    3935   ; void IllegalInstruction() {
                    3936   _IllegalInstruction:
                    3937   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000024BE  4879 0000 3938          pea       @m68kde~1_126.L
000024C2  4ECC      
000024C4  4EB8 23E2 3939          jsr       _PrintErrorMessageandAbort
000024C8  584F      3940          addq.w    #4,A7
000024CA  4E75      3941          rts
                    3942   ; }
                    3943   ; void Dividebyzero() {
                    3944   _Dividebyzero:
                    3945   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000024CC  4879 0000 3946          pea       @m68kde~1_127.L
000024D0  4EE0      
000024D2  4EB8 23E2 3947          jsr       _PrintErrorMessageandAbort
000024D6  584F      3948          addq.w    #4,A7
000024D8  4E75      3949          rts
                    3950   ; }
                    3951   ; void Check() {
                    3952   _Check:
                    3953   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000024DA  4879 0000 3954          pea       @m68kde~1_128.L
000024DE  4EF0      
000024E0  4EB8 23E2 3955          jsr       _PrintErrorMessageandAbort
000024E4  584F      3956          addq.w    #4,A7
000024E6  4E75      3957          rts
                    3958   ; }
                    3959   ; void Trapv() {
                    3960   _Trapv:
                    3961   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000024E8  4879 0000 3962          pea       @m68kde~1_129.L
000024EC  4F02      
000024EE  4EB8 23E2 3963          jsr       _PrintErrorMessageandAbort
000024F2  584F      3964          addq.w    #4,A7
000024F4  4E75      3965          rts
                    3966   ; }
                    3967   ; void PrivError() {
                    3968   _PrivError:
                    3969   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000024F6  4879 0000 3970          pea       @m68kde~1_130.L
000024FA  4F14      
000024FC  4EB8 23E2 3971          jsr       _PrintErrorMessageandAbort
00002500  584F      3972          addq.w    #4,A7
00002502  4E75      3973          rts
                    3974   ; }
                    3975   ; void UnitIRQ() {
                    3976   _UnitIRQ:
                    3977   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002504  4879 0000 3978          pea       @m68kde~1_131.L
00002508  4F28      
0000250A  4EB8 23E2 3979          jsr       _PrintErrorMessageandAbort
0000250E  584F      3980          addq.w    #4,A7
00002510  4E75      3981          rts
                    3982   ; }
                    3983   ; void Spurious() {
                    3984   _Spurious:
                    3985   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002512  4879 0000 3986          pea       @m68kde~1_132.L
00002516  4F3A      
00002518  4EB8 23E2 3987          jsr       _PrintErrorMessageandAbort
0000251C  584F      3988          addq.w    #4,A7
0000251E  4E75      3989          rts
                    3990   ; }
                    3991   ; void EnterString(void)
                    3992   ; {
                    3993   _EnterString:
00002520  4E56 FFFC 3994          link      A6,#-4
00002524  2F02      3995          move.l    D2,-(A7)
                    3996   ; unsigned char *Start;
                    3997   ; unsigned char c;
                    3998   ; printf("\r\nStart Address in Memory: ") ;
00002526  4879 0000 3999          pea       @m68kde~1_133.L
0000252A  4F48      
0000252C  4EB9 0000 4000          jsr       _printf
00002530  3616      
00002532  584F      4001          addq.w    #4,A7
                    4002   ; Start = Get8HexDigits(0) ;
00002534  42A7      4003          clr.l     -(A7)
00002536  4EB8 0CA4 4004          jsr       _Get8HexDigits
0000253A  584F      4005          addq.w    #4,A7
0000253C  2400      4006          move.l    D0,D2
                    4007   ; printf("\r\nEnter String (ESC to end) :") ;
0000253E  4879 0000 4008          pea       @m68kde~1_134.L
00002542  4F64      
00002544  4EB9 0000 4009          jsr       _printf
00002548  3616      
0000254A  584F      4010          addq.w    #4,A7
                    4011   ; while((c = getchar()) != 0x1b)
                    4012   EnterString_1:
0000254C  4EB9 0000 4013          jsr       _getch
00002550  2C8A      
00002552  1D40 FFFF 4014          move.b    D0,-1(A6)
00002556  0C00 001B 4015          cmp.b     #27,D0
0000255A  670A      4016          beq.s     EnterString_3
                    4017   ; *Start++ = c ;
0000255C  2042      4018          move.l    D2,A0
0000255E  5282      4019          addq.l    #1,D2
00002560  10AE FFFF 4020          move.b    -1(A6),(A0)
00002564  60E6      4021          bra       EnterString_1
                    4022   EnterString_3:
                    4023   ; *Start = 0x00;  // terminate with a null
00002566  2042      4024          move.l    D2,A0
00002568  4210      4025          clr.b     (A0)
0000256A  241F      4026          move.l    (A7)+,D2
0000256C  4E5E      4027          unlk      A6
0000256E  4E75      4028          rts
                    4029   ; }
                    4030   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4031   ; void clearInputBuffer() {
                    4032   _clearInputBuffer:
00002570  4E56 FFFC 4033          link      A6,#-4
                    4034   ; int c;
                    4035   ; while ((c = getchar()) != '\n' && c != EOF);
                    4036   clearInputBuffer_1:
00002574  4EB9 0000 4037          jsr       _getch
00002578  2C8A      
0000257A  2D40 FFFC 4038          move.l    D0,-4(A6)
0000257E  0C80 0000 4039          cmp.l     #10,D0
00002582  000A      
00002584  670E      4040          beq.s     clearInputBuffer_3
00002586  202E FFFC 4041          move.l    -4(A6),D0
0000258A  0C80 FFFF 4042          cmp.l     #-1,D0
0000258E  FFFF      
00002590  6702      4043          beq.s     clearInputBuffer_3
00002592  60E0      4044          bra       clearInputBuffer_1
                    4045   clearInputBuffer_3:
00002594  4E5E      4046          unlk      A6
00002596  4E75      4047          rts
                    4048   ; }
                    4049   ; void MemoryTest(void)
                    4050   ; {
                    4051   _MemoryTest:
00002598  4E56 FF40 4052          link      A6,#-192
0000259C  48E7 3F3C 4053          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000025A0  45F9 0000 4054          lea       _printf.L,A2
000025A4  3616      
000025A6  4BF8 0B68 4055          lea       __getch.L,A5
                    4056   ; unsigned int *RamPtr, counter1=1 ;
000025AA  2D7C 0000 4057          move.l    #1,-188(A6)
000025AE  0001 FF44 
                    4058   ; register unsigned int i ;
                    4059   ; unsigned int Start, End ;
                    4060   ; char c, text[150];
                    4061   ; unsigned int* addressPointer;
                    4062   ; unsigned int startAddress = NULL;
000025B2  42AE FFF0 4063          clr.l     -16(A6)
                    4064   ; unsigned int endAddress = NULL;
000025B6  42AE FFF4 4065          clr.l     -12(A6)
                    4066   ; unsigned int byteLength;
                    4067   ; unsigned int dataSize = 0;
000025BA  4284      4068          clr.l     D4
                    4069   ; unsigned int dataPattern = 0;
000025BC  4282      4070          clr.l     D2
                    4071   ; unsigned int currAddress;
                    4072   ; unsigned int addrCount;
                    4073   ; unsigned int intBuffer = NULL;
000025BE  7E00      4074          moveq     #0,D7
                    4075   ; unsigned char *startAddressPtr = NULL;
000025C0  4283      4076          clr.l     D3
                    4077   ; unsigned char *endAddressPtr = NULL;
000025C2  4286      4078          clr.l     D6
                    4079   ; unsigned short int *wordAddressPtr = NULL;
000025C4  387C 0000 4080          move.w    #0,A4
                    4081   ; unsigned int *longAddressPtr = NULL;
000025C8  367C 0000 4082          move.w    #0,A3
                    4083   ; // printf("\r\nStart Address: ") ;
                    4084   ; // Start = Get8HexDigits(0) ;
                    4085   ; // printf("\r\nEnd Address: ") ;
                    4086   ; // End = Get8HexDigits(0) ;
                    4087   ; // TODO
                    4088   ; scanflush();
000025CC  4EB9 0000 4089          jsr       _scanflush
000025D0  300C      
                    4090   ; memset(text, 0, sizeof(text));  // fills with zeros
000025D2  4878 0096 4091          pea       150
000025D6  42A7      4092          clr.l     -(A7)
000025D8  486E FF56 4093          pea       -170(A6)
000025DC  4EB9 0000 4094          jsr       _memset
000025E0  2D26      
000025E2  DEFC 000C 4095          add.w     #12,A7
                    4096   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
000025E6  4879 0000 4097          pea       @m68kde~1_135.L
000025EA  4F82      
000025EC  4E92      4098          jsr       (A2)
000025EE  584F      4099          addq.w    #4,A7
                    4100   ; dataSize = _getch() - 48;
000025F0  4E95      4101          jsr       (A5)
000025F2  0480 0000 4102          sub.l     #48,D0
000025F6  0030      
000025F8  2800      4103          move.l    D0,D4
                    4104   ; printf("\n");
000025FA  4879 0000 4105          pea       @m68kde~1_136.L
000025FE  4FD8      
00002600  4E92      4106          jsr       (A2)
00002602  584F      4107          addq.w    #4,A7
                    4108   ; if (dataSize == 0) {
00002604  4A84      4109          tst.l     D4
00002606  6600 0058 4110          bne       MemoryTest_1
                    4111   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
0000260A  4879 0000 4112          pea       @m68kde~1_137.L
0000260E  4FDA      
00002610  4E92      4113          jsr       (A2)
00002612  584F      4114          addq.w    #4,A7
                    4115   ; intBuffer = _getch() - 48;
00002614  4E95      4116          jsr       (A5)
00002616  0480 0000 4117          sub.l     #48,D0
0000261A  0030      
0000261C  2E00      4118          move.l    D0,D7
                    4119   ; // scanf("%d", &intBuffer);
                    4120   ; switch (intBuffer) {
0000261E  2007      4121          move.l    D7,D0
00002620  0C80 0000 4122          cmp.l     #4,D0
00002624  0004      
00002626  642C      4123          bhs.s     MemoryTest_4
00002628  E380      4124          asl.l     #1,D0
0000262A  303B 0806 4125          move.w    MemoryTest_5(PC,D0.L),D0
0000262E  4EFB 0002 4126          jmp       MemoryTest_5(PC,D0.W)
                    4127   MemoryTest_5:
00002632  0008      4128          dc.w      MemoryTest_6-MemoryTest_5
00002634  000C      4129          dc.w      MemoryTest_7-MemoryTest_5
00002636  0014      4130          dc.w      MemoryTest_8-MemoryTest_5
00002638  001C      4131          dc.w      MemoryTest_9-MemoryTest_5
                    4132   MemoryTest_6:
                    4133   ; case(0):
                    4134   ; dataPattern = 0x00; break;
0000263A  4282      4135          clr.l     D2
0000263C  6016      4136          bra.s     MemoryTest_4
                    4137   MemoryTest_7:
                    4138   ; case(1):
                    4139   ; dataPattern = 0xB2; break;
0000263E  243C 0000 4140          move.l    #178,D2
00002642  00B2      
00002644  600E      4141          bra.s     MemoryTest_4
                    4142   MemoryTest_8:
                    4143   ; case(2):
                    4144   ; dataPattern = 0xC3; break;
00002646  243C 0000 4145          move.l    #195,D2
0000264A  00C3      
0000264C  6006      4146          bra.s     MemoryTest_4
                    4147   MemoryTest_9:
                    4148   ; case(3):
                    4149   ; dataPattern = 0xD4; break;
0000264E  243C 0000 4150          move.l    #212,D2
00002652  00D4      
                    4151   MemoryTest_4:
                    4152   ; }
                    4153   ; dataPattern &= 0xFF;
00002654  C4BC 0000 4154          and.l     #255,D2
00002658  00FF      
                    4155   ; byteLength = 1;
0000265A  7A01      4156          moveq     #1,D5
0000265C  6000 00AE 4157          bra       MemoryTest_11
                    4158   MemoryTest_1:
                    4159   ; } else if (dataSize == 1) {
00002660  0C84 0000 4160          cmp.l     #1,D4
00002664  0001      
00002666  6600 0058 4161          bne       MemoryTest_10
                    4162   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
0000266A  4879 0000 4163          pea       @m68kde~1_138.L
0000266E  503C      
00002670  4E92      4164          jsr       (A2)
00002672  584F      4165          addq.w    #4,A7
                    4166   ; intBuffer = _getch() - 48;
00002674  4E95      4167          jsr       (A5)
00002676  0480 0000 4168          sub.l     #48,D0
0000267A  0030      
0000267C  2E00      4169          move.l    D0,D7
                    4170   ; switch (intBuffer) {
0000267E  2007      4171          move.l    D7,D0
00002680  0C80 0000 4172          cmp.l     #4,D0
00002684  0004      
00002686  642C      4173          bhs.s     MemoryTest_13
00002688  E380      4174          asl.l     #1,D0
0000268A  303B 0806 4175          move.w    MemoryTest_14(PC,D0.L),D0
0000268E  4EFB 0002 4176          jmp       MemoryTest_14(PC,D0.W)
                    4177   MemoryTest_14:
00002692  0008      4178          dc.w      MemoryTest_15-MemoryTest_14
00002694  000C      4179          dc.w      MemoryTest_16-MemoryTest_14
00002696  0014      4180          dc.w      MemoryTest_17-MemoryTest_14
00002698  001C      4181          dc.w      MemoryTest_18-MemoryTest_14
                    4182   MemoryTest_15:
                    4183   ; case(0):
                    4184   ; dataPattern = 0x0000; break;
0000269A  4282      4185          clr.l     D2
0000269C  6016      4186          bra.s     MemoryTest_13
                    4187   MemoryTest_16:
                    4188   ; case(1):
                    4189   ; dataPattern = 0x1234; break;
0000269E  243C 0000 4190          move.l    #4660,D2
000026A2  1234      
000026A4  600E      4191          bra.s     MemoryTest_13
                    4192   MemoryTest_17:
                    4193   ; case(2):
                    4194   ; dataPattern = 0xA1B2; break;
000026A6  243C 0000 4195          move.l    #41394,D2
000026AA  A1B2      
000026AC  6006      4196          bra.s     MemoryTest_13
                    4197   MemoryTest_18:
                    4198   ; case(3):
                    4199   ; dataPattern = 0xC3D4; break;
000026AE  243C 0000 4200          move.l    #50132,D2
000026B2  C3D4      
                    4201   MemoryTest_13:
                    4202   ; }
                    4203   ; dataPattern &= 0xFFFF;
000026B4  C4BC 0000 4204          and.l     #65535,D2
000026B8  FFFF      
                    4205   ; byteLength = 2;
000026BA  7A02      4206          moveq     #2,D5
000026BC  6000 004E 4207          bra       MemoryTest_11
                    4208   MemoryTest_10:
                    4209   ; } else {
                    4210   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
000026C0  4879 0000 4211          pea       @m68kde~1_139.L
000026C4  50A6      
000026C6  4E92      4212          jsr       (A2)
000026C8  584F      4213          addq.w    #4,A7
                    4214   ; intBuffer = _getch() - 48;
000026CA  4E95      4215          jsr       (A5)
000026CC  0480 0000 4216          sub.l     #48,D0
000026D0  0030      
000026D2  2E00      4217          move.l    D0,D7
                    4218   ; switch (intBuffer) {
000026D4  2007      4219          move.l    D7,D0
000026D6  0C80 0000 4220          cmp.l     #4,D0
000026DA  0004      
000026DC  642C      4221          bhs.s     MemoryTest_20
000026DE  E380      4222          asl.l     #1,D0
000026E0  303B 0806 4223          move.w    MemoryTest_21(PC,D0.L),D0
000026E4  4EFB 0002 4224          jmp       MemoryTest_21(PC,D0.W)
                    4225   MemoryTest_21:
000026E8  0008      4226          dc.w      MemoryTest_22-MemoryTest_21
000026EA  000C      4227          dc.w      MemoryTest_23-MemoryTest_21
000026EC  0014      4228          dc.w      MemoryTest_24-MemoryTest_21
000026EE  001C      4229          dc.w      MemoryTest_25-MemoryTest_21
                    4230   MemoryTest_22:
                    4231   ; case(0):
                    4232   ; dataPattern = 0x00000000; break;
000026F0  4282      4233          clr.l     D2
000026F2  6016      4234          bra.s     MemoryTest_20
                    4235   MemoryTest_23:
                    4236   ; case(1):
                    4237   ; dataPattern = 0xAABBCCDD; break;
000026F4  243C AABB 4238          move.l    #-1430532899,D2
000026F8  CCDD      
000026FA  600E      4239          bra.s     MemoryTest_20
                    4240   MemoryTest_24:
                    4241   ; case(2):
                    4242   ; dataPattern = 0x11223344; break;
000026FC  243C 1122 4243          move.l    #287454020,D2
00002700  3344      
00002702  6006      4244          bra.s     MemoryTest_20
                    4245   MemoryTest_25:
                    4246   ; case(3):
                    4247   ; dataPattern = 0x76543210; break;
00002704  243C 7654 4248          move.l    #1985229328,D2
00002708  3210      
                    4249   MemoryTest_20:
                    4250   ; }
                    4251   ; byteLength = 4;
0000270A  7A04      4252          moveq     #4,D5
                    4253   MemoryTest_11:
                    4254   ; }
                    4255   ; while (startAddressPtr == NULL || 
                    4256   MemoryTest_26:
0000270C  4A83      4257          tst.l     D3
0000270E  672A      4258          beq.s     MemoryTest_29
00002710  2F03      4259          move.l    D3,-(A7)
00002712  4878 0002 4260          pea       2
00002716  4EB9 0000 4261          jsr       ULDIV
0000271A  2B7C      
0000271C  202F 0004 4262          move.l    4(A7),D0
00002720  504F      4263          addq.w    #8,A7
00002722  4A80      4264          tst.l     D0
00002724  6614      4265          bne.s     MemoryTest_29
00002726  0C83 0802 4266          cmp.l     #134348800,D3
0000272A  0000      
0000272C  650C      4267          blo.s     MemoryTest_29
0000272E  203C 0803 4268          move.l    #134414336,D0
00002732  0000      
00002734  9085      4269          sub.l     D5,D0
00002736  B680      4270          cmp.l     D0,D3
00002738  6316      4271          bls.s     MemoryTest_28
                    4272   MemoryTest_29:
                    4273   ; (unsigned int) startAddressPtr % 2 != 0 || 
                    4274   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    4275   ; (unsigned int) startAddressPtr > 0x08030000 - byteLength) {
                    4276   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
0000273A  4879 0000 4277          pea       @m68kde~1_140.L
0000273E  5124      
00002740  4E92      4278          jsr       (A2)
00002742  584F      4279          addq.w    #4,A7
                    4280   ; startAddressPtr =  Get8HexDigits(0);
00002744  42A7      4281          clr.l     -(A7)
00002746  4EB8 0CA4 4282          jsr       _Get8HexDigits
0000274A  584F      4283          addq.w    #4,A7
0000274C  2600      4284          move.l    D0,D3
0000274E  60BC      4285          bra       MemoryTest_26
                    4286   MemoryTest_28:
                    4287   ; // scanf("%x", &startAddress);
                    4288   ; }
                    4289   ; while (endAddressPtr == NULL || 
                    4290   MemoryTest_30:
00002750  4A86      4291          tst.l     D6
00002752  670A      4292          beq.s     MemoryTest_33
00002754  202E FFF0 4293          move.l    -16(A6),D0
00002758  D085      4294          add.l     D5,D0
0000275A  BC80      4295          cmp.l     D0,D6
0000275C  6416      4296          bhs.s     MemoryTest_32
                    4297   MemoryTest_33:
                    4298   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    4299   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
0000275E  4879 0000 4300          pea       @m68kde~1_141.L
00002762  515C      
00002764  4E92      4301          jsr       (A2)
00002766  584F      4302          addq.w    #4,A7
                    4303   ; endAddressPtr =  Get8HexDigits(0);
00002768  42A7      4304          clr.l     -(A7)
0000276A  4EB8 0CA4 4305          jsr       _Get8HexDigits
0000276E  584F      4306          addq.w    #4,A7
00002770  2C00      4307          move.l    D0,D6
00002772  60DC      4308          bra       MemoryTest_30
                    4309   MemoryTest_32:
                    4310   ; //scanf("%x", &endAddress);
                    4311   ; }
                    4312   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00002774  2F03      4313          move.l    D3,-(A7)
00002776  4879 0000 4314          pea       @m68kde~1_142.L
0000277A  5192      
0000277C  4E92      4315          jsr       (A2)
0000277E  504F      4316          addq.w    #8,A7
                    4317   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
00002780  2F06      4318          move.l    D6,-(A7)
00002782  4879 0000 4319          pea       @m68kde~1_143.L
00002786  51AA      
00002788  4E92      4320          jsr       (A2)
0000278A  504F      4321          addq.w    #8,A7
                    4322   ; addrCount = 0;
0000278C  42AE FFFC 4323          clr.l     -4(A6)
                    4324   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    4325   MemoryTest_34:
00002790  B686      4326          cmp.l     D6,D3
00002792  6400 0116 4327          bhs       MemoryTest_36
00002796  2006      4328          move.l    D6,D0
00002798  9083      4329          sub.l     D3,D0
0000279A  5280      4330          addq.l    #1,D0
0000279C  B085      4331          cmp.l     D5,D0
0000279E  6500 010A 4332          blo       MemoryTest_36
                    4333   ; longAddressPtr = startAddressPtr;
000027A2  2643      4334          move.l    D3,A3
                    4335   ; wordAddressPtr = startAddressPtr;
000027A4  2843      4336          move.l    D3,A4
                    4337   ; if (dataSize == 0) {
000027A6  4A84      4338          tst.l     D4
000027A8  6600 0034 4339          bne       MemoryTest_37
                    4340   ; *startAddressPtr = dataPattern;
000027AC  2043      4341          move.l    D3,A0
000027AE  1082      4342          move.b    D2,(A0)
                    4343   ; if ((*startAddressPtr) != dataPattern) {
000027B0  2043      4344          move.l    D3,A0
000027B2  1010      4345          move.b    (A0),D0
000027B4  C0BC 0000 4346          and.l     #255,D0
000027B8  00FF      
000027BA  B082      4347          cmp.l     D2,D0
000027BC  671C      4348          beq.s     MemoryTest_39
                    4349   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
000027BE  2F02      4350          move.l    D2,-(A7)
000027C0  2043      4351          move.l    D3,A0
000027C2  1210      4352          move.b    (A0),D1
000027C4  C2BC 0000 4353          and.l     #255,D1
000027C8  00FF      
000027CA  2F01      4354          move.l    D1,-(A7)
000027CC  2F03      4355          move.l    D3,-(A7)
000027CE  4879 0000 4356          pea       @m68kde~1_144.L
000027D2  51C0      
000027D4  4E92      4357          jsr       (A2)
000027D6  DEFC 0010 4358          add.w     #16,A7
                    4359   MemoryTest_39:
000027DA  6000 0058 4360          bra       MemoryTest_45
                    4361   MemoryTest_37:
                    4362   ; }
                    4363   ; } else if (dataSize == 1) {
000027DE  0C84 0000 4364          cmp.l     #1,D4
000027E2  0001      
000027E4  662C      4365          bne.s     MemoryTest_41
                    4366   ; *wordAddressPtr = dataPattern;
000027E6  3882      4367          move.w    D2,(A4)
                    4368   ; if ((*wordAddressPtr) != dataPattern) {
000027E8  3014      4369          move.w    (A4),D0
000027EA  C0BC 0000 4370          and.l     #65535,D0
000027EE  FFFF      
000027F0  B082      4371          cmp.l     D2,D0
000027F2  671C      4372          beq.s     MemoryTest_43
                    4373   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
000027F4  2F02      4374          move.l    D2,-(A7)
000027F6  2043      4375          move.l    D3,A0
000027F8  1210      4376          move.b    (A0),D1
000027FA  C2BC 0000 4377          and.l     #255,D1
000027FE  00FF      
00002800  2F01      4378          move.l    D1,-(A7)
00002802  2F03      4379          move.l    D3,-(A7)
00002804  4879 0000 4380          pea       @m68kde~1_144.L
00002808  51C0      
0000280A  4E92      4381          jsr       (A2)
0000280C  DEFC 0010 4382          add.w     #16,A7
                    4383   MemoryTest_43:
00002810  6022      4384          bra.s     MemoryTest_45
                    4385   MemoryTest_41:
                    4386   ; }
                    4387   ; } else {
                    4388   ; *longAddressPtr = dataPattern;
00002812  2682      4389          move.l    D2,(A3)
                    4390   ; if ((*longAddressPtr) != dataPattern) {
00002814  B493      4391          cmp.l     (A3),D2
00002816  671C      4392          beq.s     MemoryTest_45
                    4393   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002818  2F02      4394          move.l    D2,-(A7)
0000281A  2043      4395          move.l    D3,A0
0000281C  1210      4396          move.b    (A0),D1
0000281E  C2BC 0000 4397          and.l     #255,D1
00002822  00FF      
00002824  2F01      4398          move.l    D1,-(A7)
00002826  2F03      4399          move.l    D3,-(A7)
00002828  4879 0000 4400          pea       @m68kde~1_144.L
0000282C  51C0      
0000282E  4E92      4401          jsr       (A2)
00002830  DEFC 0010 4402          add.w     #16,A7
                    4403   MemoryTest_45:
                    4404   ; }
                    4405   ; }
                    4406   ; // if ((*startAddressPtr) != dataPattern) {
                    4407   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    4408   ; // }
                    4409   ; addrCount++;
00002834  52AE FFFC 4410          addq.l    #1,-4(A6)
                    4411   ; if (addrCount % 128 == 0) {
00002838  2F2E FFFC 4412          move.l    -4(A6),-(A7)
0000283C  4878 0080 4413          pea       128
00002840  4EB9 0000 4414          jsr       ULDIV
00002844  2B7C      
00002846  202F 0004 4415          move.l    4(A7),D0
0000284A  504F      4416          addq.w    #8,A7
0000284C  4A80      4417          tst.l     D0
0000284E  6600 0054 4418          bne       MemoryTest_52
                    4419   ; if (dataSize == 0) {
00002852  4A84      4420          tst.l     D4
00002854  661C      4421          bne.s     MemoryTest_49
                    4422   ; printf("Address: 0x%x Value: 0x%02X\n",
00002856  2043      4423          move.l    D3,A0
00002858  1210      4424          move.b    (A0),D1
0000285A  C2BC 0000 4425          and.l     #255,D1
0000285E  00FF      
00002860  2F01      4426          move.l    D1,-(A7)
00002862  2F03      4427          move.l    D3,-(A7)
00002864  4879 0000 4428          pea       @m68kde~1_145.L
00002868  5206      
0000286A  4E92      4429          jsr       (A2)
0000286C  DEFC 000C 4430          add.w     #12,A7
00002870  6032      4431          bra.s     MemoryTest_52
                    4432   MemoryTest_49:
                    4433   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    4434   ; }
                    4435   ; else if (dataSize == 1) {
00002872  0C84 0000 4436          cmp.l     #1,D4
00002876  0001      
00002878  661A      4437          bne.s     MemoryTest_51
                    4438   ; printf("Address: 0x%x Value: 0x%04X\n",
0000287A  3214      4439          move.w    (A4),D1
0000287C  C2BC 0000 4440          and.l     #65535,D1
00002880  FFFF      
00002882  2F01      4441          move.l    D1,-(A7)
00002884  2F0C      4442          move.l    A4,-(A7)
00002886  4879 0000 4443          pea       @m68kde~1_146.L
0000288A  5224      
0000288C  4E92      4444          jsr       (A2)
0000288E  DEFC 000C 4445          add.w     #12,A7
00002892  6010      4446          bra.s     MemoryTest_52
                    4447   MemoryTest_51:
                    4448   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    4449   ; }
                    4450   ; else {
                    4451   ; printf("Address: 0x%x Value: 0x%08X\n",
00002894  2F13      4452          move.l    (A3),-(A7)
00002896  2F0B      4453          move.l    A3,-(A7)
00002898  4879 0000 4454          pea       @m68kde~1_147.L
0000289C  5242      
0000289E  4E92      4455          jsr       (A2)
000028A0  DEFC 000C 4456          add.w     #12,A7
                    4457   MemoryTest_52:
                    4458   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    4459   ; }
                    4460   ; }
                    4461   ; startAddressPtr += byteLength;
000028A4  D685      4462          add.l     D5,D3
000028A6  6000 FEE8 4463          bra       MemoryTest_34
                    4464   MemoryTest_36:
000028AA  4CDF 3CFC 4465          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000028AE  4E5E      4466          unlk      A6
000028B0  4E75      4467          rts
                    4468   ; }
                    4469   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4470   ; }
                    4471   ; void main(void)
                    4472   ; {
                    4473   _main:
000028B2  4E56 FFF4 4474          link      A6,#-12
000028B6  48E7 3030 4475          movem.l   D2/D3/A2/A3,-(A7)
000028BA  45F8 0A30 4476          lea       _InstallExceptionHandler.L,A2
000028BE  47F9 0000 4477          lea       _printf.L,A3
000028C2  3616      
                    4478   ; char c ;
                    4479   ; int i, j ;
                    4480   ; char *BugMessage = "DE1-68k Bug V1.77";
000028C4  41F9 0000 4481          lea       @m68kde~1_148.L,A0
000028C8  5260      
000028CA  2608      4482          move.l    A0,D3
                    4483   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
000028CC  41F9 0000 4484          lea       @m68kde~1_149.L,A0
000028D0  5272      
000028D2  2D48 FFFC 4485          move.l    A0,-4(A6)
                    4486   ; KillAllBreakPoints() ;
000028D6  4EB8 1C1C 4487          jsr       _KillAllBreakPoints
                    4488   ; i = x = y = z = PortA_Count = 0;
000028DA  42B9 0803 4489          clr.l     _PortA_Count.L
000028DE  00D4      
000028E0  42B9 0803 4490          clr.l     _z.L
000028E4  00D0      
000028E6  42B9 0803 4491          clr.l     _y.L
000028EA  00CC      
000028EC  42B9 0803 4492          clr.l     _x.L
000028F0  00C8      
000028F2  4282      4493          clr.l     D2
                    4494   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
000028F4  42B9 0803 4495          clr.l     _GoFlag.L
000028F8  00DC      
000028FA  42B9 0803 4496          clr.l     _Trace.L
000028FE  00D8      
                    4497   ; Echo = 1 ;
00002900  23FC 0000 4498          move.l    #1,_Echo.L
00002904  0001 0803 
00002908  00E0      
                    4499   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
0000290A  42B9 0803 4500          clr.l     _d7.L
0000290E  0100      
00002910  42B9 0803 4501          clr.l     _d6.L
00002914  00FC      
00002916  42B9 0803 4502          clr.l     _d5.L
0000291A  00F8      
0000291C  42B9 0803 4503          clr.l     _d4.L
00002920  00F4      
00002922  42B9 0803 4504          clr.l     _d3.L
00002926  00F0      
00002928  42B9 0803 4505          clr.l     _d2.L
0000292C  00EC      
0000292E  42B9 0803 4506          clr.l     _d1.L
00002932  00E8      
00002934  42B9 0803 4507          clr.l     _d0.L
00002938  00E4      
                    4508   ; a0=a1=a2=a3=a4=a5=a6=0 ;
0000293A  42B9 0803 4509          clr.l     _a6.L
0000293E  011C      
00002940  42B9 0803 4510          clr.l     _a5.L
00002944  0118      
00002946  42B9 0803 4511          clr.l     _a4.L
0000294A  0114      
0000294C  42B9 0803 4512          clr.l     _a3.L
00002950  0110      
00002952  42B9 0803 4513          clr.l     _a2.L
00002956  010C      
00002958  42B9 0803 4514          clr.l     _a1.L
0000295C  0108      
0000295E  42B9 0803 4515          clr.l     _a0.L
00002962  0104      
                    4516   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002964  23FC 0800 4517          move.l    #134217728,_PC.L
00002968  0000 0803 
0000296C  0120      
0000296E  23FC 0804 4518          move.l    #134479872,_SSP.L
00002972  0000 0803 
00002976  0124      
00002978  23FC 0804 4519          move.l    #134479872,_USP.L
0000297C  0000 0803 
00002980  0128      
                    4520   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002982  33FC 2000 4521          move.w    #8192,_SR.L
00002986  0803 012C 
                    4522   ; // Initialise Breakpoint variables
                    4523   ; for(i = 0; i < 8; i++)  {
0000298A  4282      4524          clr.l     D2
                    4525   main_1:
0000298C  0C82 0000 4526          cmp.l     #8,D2
00002990  0008      
00002992  6C00 004C 4527          bge       main_3
                    4528   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002996  2002      4529          move.l    D2,D0
00002998  E588      4530          lsl.l     #2,D0
0000299A  41F9 0803 4531          lea       _BreakPointAddress.L,A0
0000299E  012E      
000029A0  42B0 0800 4532          clr.l     0(A0,D0.L)
                    4533   ; WatchPointAddress[i] = 0 ;
000029A4  2002      4534          move.l    D2,D0
000029A6  E588      4535          lsl.l     #2,D0
000029A8  41F9 0803 4536          lea       _WatchPointAddress.L,A0
000029AC  0182      
000029AE  42B0 0800 4537          clr.l     0(A0,D0.L)
                    4538   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
000029B2  2002      4539          move.l    D2,D0
000029B4  E388      4540          lsl.l     #1,D0
000029B6  41F9 0803 4541          lea       _BreakPointInstruction.L,A0
000029BA  014E      
000029BC  4270 0800 4542          clr.w     0(A0,D0.L)
                    4543   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
000029C0  2002      4544          move.l    D2,D0
000029C2  E588      4545          lsl.l     #2,D0
000029C4  41F9 0803 4546          lea       _BreakPointSetOrCleared.L,A0
000029C8  015E      
000029CA  42B0 0800 4547          clr.l     0(A0,D0.L)
                    4548   ; WatchPointSetOrCleared[i] = 0;
000029CE  2002      4549          move.l    D2,D0
000029D0  E588      4550          lsl.l     #2,D0
000029D2  41F9 0803 4551          lea       _WatchPointSetOrCleared.L,A0
000029D6  01A2      
000029D8  42B0 0800 4552          clr.l     0(A0,D0.L)
000029DC  5282      4553          addq.l    #1,D2
000029DE  60AC      4554          bra       main_1
                    4555   main_3:
                    4556   ; }
                    4557   ; Init_RS232() ;     // initialise the RS232 port
000029E0  4EB8 0B12 4558          jsr       _Init_RS232
                    4559   ; Init_LCD() ;
000029E4  4EB8 095E 4560          jsr       _Init_LCD
                    4561   ; for( i = 32; i < 48; i++)
000029E8  7420      4562          moveq     #32,D2
                    4563   main_4:
000029EA  0C82 0000 4564          cmp.l     #48,D2
000029EE  0030      
000029F0  6C0E      4565          bge.s     main_6
                    4566   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
000029F2  2F02      4567          move.l    D2,-(A7)
000029F4  4878 2494 4568          pea       _UnhandledTrap.L
000029F8  4E92      4569          jsr       (A2)
000029FA  504F      4570          addq.w    #8,A7
000029FC  5282      4571          addq.l    #1,D2
000029FE  60EA      4572          bra       main_4
                    4573   main_6:
                    4574   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002A00  4878 002F 4575          pea       47
00002A04  4878 216E 4576          pea       _menu.L
00002A08  4E92      4577          jsr       (A2)
00002A0A  504F      4578          addq.w    #8,A7
                    4579   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002A0C  4878 0019 4580          pea       25
00002A10  4878 243A 4581          pea       _UnhandledIRQ1.L
00002A14  4E92      4582          jsr       (A2)
00002A16  504F      4583          addq.w    #8,A7
                    4584   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002A18  4878 001A 4585          pea       26
00002A1C  4878 2446 4586          pea       _UnhandledIRQ2.L
00002A20  4E92      4587          jsr       (A2)
00002A22  504F      4588          addq.w    #8,A7
                    4589   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002A24  4878 001B 4590          pea       27
00002A28  4878 2452 4591          pea       _UnhandledIRQ3.L
00002A2C  4E92      4592          jsr       (A2)
00002A2E  504F      4593          addq.w    #8,A7
                    4594   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002A30  4878 001C 4595          pea       28
00002A34  4878 245E 4596          pea       _UnhandledIRQ4.L
00002A38  4E92      4597          jsr       (A2)
00002A3A  504F      4598          addq.w    #8,A7
                    4599   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002A3C  4878 001D 4600          pea       29
00002A40  4878 246A 4601          pea       _UnhandledIRQ5.L
00002A44  4E92      4602          jsr       (A2)
00002A46  504F      4603          addq.w    #8,A7
                    4604   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002A48  4878 001E 4605          pea       30
00002A4C  4878 2476 4606          pea       _UnhandledIRQ6.L
00002A50  4E92      4607          jsr       (A2)
00002A52  504F      4608          addq.w    #8,A7
                    4609   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002A54  4878 001F 4610          pea       31
00002A58  4878 2488 4611          pea       _UnhandledIRQ7.L
00002A5C  4E92      4612          jsr       (A2)
00002A5E  504F      4613          addq.w    #8,A7
                    4614   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002A60  4878 002E 4615          pea       46
00002A64  4878 1EAA 4616          pea       _HandleBreakPoint.L
00002A68  4E92      4617          jsr       (A2)
00002A6A  504F      4618          addq.w    #8,A7
                    4619   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002A6C  4878 001D 4620          pea       29
00002A70  4878 158A 4621          pea       _DumpRegistersandPause.L
00002A74  4E92      4622          jsr       (A2)
00002A76  504F      4623          addq.w    #8,A7
                    4624   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002A78  4878 0002 4625          pea       2
00002A7C  4878 24A2 4626          pea       _BusError.L
00002A80  4E92      4627          jsr       (A2)
00002A82  504F      4628          addq.w    #8,A7
                    4629   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002A84  4878 0003 4630          pea       3
00002A88  4878 24B0 4631          pea       _AddressError.L
00002A8C  4E92      4632          jsr       (A2)
00002A8E  504F      4633          addq.w    #8,A7
                    4634   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002A90  4878 0004 4635          pea       4
00002A94  4878 24BE 4636          pea       _IllegalInstruction.L
00002A98  4E92      4637          jsr       (A2)
00002A9A  504F      4638          addq.w    #8,A7
                    4639   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002A9C  4878 0005 4640          pea       5
00002AA0  4878 24CC 4641          pea       _Dividebyzero.L
00002AA4  4E92      4642          jsr       (A2)
00002AA6  504F      4643          addq.w    #8,A7
                    4644   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002AA8  4878 0006 4645          pea       6
00002AAC  4878 24DA 4646          pea       _Check.L
00002AB0  4E92      4647          jsr       (A2)
00002AB2  504F      4648          addq.w    #8,A7
                    4649   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002AB4  4878 0007 4650          pea       7
00002AB8  4878 24E8 4651          pea       _Trapv.L
00002ABC  4E92      4652          jsr       (A2)
00002ABE  504F      4653          addq.w    #8,A7
                    4654   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002AC0  4878 0008 4655          pea       8
00002AC4  4878 24F6 4656          pea       _PrivError.L
00002AC8  4E92      4657          jsr       (A2)
00002ACA  504F      4658          addq.w    #8,A7
                    4659   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002ACC  4878 000F 4660          pea       15
00002AD0  4878 2504 4661          pea       _UnitIRQ.L
00002AD4  4E92      4662          jsr       (A2)
00002AD6  504F      4663          addq.w    #8,A7
                    4664   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002AD8  4878 0018 4665          pea       24
00002ADC  4878 24DA 4666          pea       _Check.L
00002AE0  4E92      4667          jsr       (A2)
00002AE2  504F      4668          addq.w    #8,A7
                    4669   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002AE4  4EB8 0BA6 4670          jsr       _FlushKeyboard
                    4671   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002AE8  4239 0040 4672          clr.b     4194314
00002AEC  000A      
                    4673   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4674   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4675   main_7:
00002AEE  1039 0040 4676          move.b    4194306,D0
00002AF2  0002      
00002AF4  C03C 0002 4677          and.b     #2,D0
00002AF8  0C00 0002 4678          cmp.b     #2,D0
00002AFC  662A      4679          bne.s     main_9
                    4680   ; LoadFromFlashChip();
00002AFE  4EB8 10C6 4681          jsr       _LoadFromFlashChip
                    4682   ; printf("\r\nRunning.....") ;
00002B02  4879 0000 4683          pea       @m68kde~1_150.L
00002B06  5290      
00002B08  4E93      4684          jsr       (A3)
00002B0A  584F      4685          addq.w    #4,A7
                    4686   ; Oline1("Running.....") ;
00002B0C  4879 0000 4687          pea       @m68kde~1_151.L
00002B10  52A0      
00002B12  4EB8 0A02 4688          jsr       _Oline1
00002B16  584F      4689          addq.w    #4,A7
                    4690   ; GoFlag = 1;
00002B18  23FC 0000 4691          move.l    #1,_GoFlag.L
00002B1C  0001 0803 
00002B20  00DC      
                    4692   ; go() ;
00002B22  4EB8 08B8 4693          jsr       _go
00002B26  60C6      4694          bra       main_7
                    4695   main_9:
                    4696   ; }
                    4697   ; // otherwise start the debug monitor
                    4698   ; Oline0(BugMessage) ;
00002B28  2F03      4699          move.l    D3,-(A7)
00002B2A  4EB8 09D4 4700          jsr       _Oline0
00002B2E  584F      4701          addq.w    #4,A7
                    4702   ; Oline1("By: PJ Davies") ;
00002B30  4879 0000 4703          pea       @m68kde~1_152.L
00002B34  52AE      
00002B36  4EB8 0A02 4704          jsr       _Oline1
00002B3A  584F      4705          addq.w    #4,A7
                    4706   ; printf("\r\n%s", BugMessage) ;
00002B3C  2F03      4707          move.l    D3,-(A7)
00002B3E  4879 0000 4708          pea       @m68kde~1_153.L
00002B42  52BC      
00002B44  4E93      4709          jsr       (A3)
00002B46  504F      4710          addq.w    #8,A7
                    4711   ; printf("\r\n%s", CopyrightMessage) ;
00002B48  2F2E FFFC 4712          move.l    -4(A6),-(A7)
00002B4C  4879 0000 4713          pea       @m68kde~1_153.L
00002B50  52BC      
00002B52  4E93      4714          jsr       (A3)
00002B54  504F      4715          addq.w    #8,A7
                    4716   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00002B56  4879 0000 4717          pea       @m68kde~1_154.L
00002B5A  52C2      
00002B5C  4E93      4718          jsr       (A3)
00002B5E  584F      4719          addq.w    #4,A7
                    4720   ; menu();
00002B60  4EB8 216E 4721          jsr       _menu
00002B64  4CDF 0C0C 4722          movem.l   (A7)+,D2/D3/A2/A3
00002B68  4E5E      4723          unlk      A6
00002B6A  4E75      4724          rts
                    4725   ; }
                    4726   _strcpy:
00002B6C  206F 0004 4727          move.l    (4,A7),A0
00002B70  226F 0008 4728          move.l    (8,A7),A1
00002B74  2008      4729          move.l    A0,D0
                    4730   strcpy_1:
00002B76  10D9      4731          move.b    (A1)+,(A0)+
00002B78  66FC      4732          bne       strcpy_1
00002B7A  4E75      4733          rts
                    4734   ULDIV:
00002B7C  4E56 0000 4735          link    A6,#0
00002B80  48E7 C000 4736          movem.l D0/D1,-(A7)
00002B84  222E 0008 4737          move.l  8(A6),D1
00002B88  202E 000C 4738          move.l  12(A6),D0
00002B8C  6036      4739          bra.s   ldiv_3
                    4740   LDIV:
00002B8E  4E56 0000 4741          link    A6,#0
00002B92  48E7 C000 4742          movem.l D0/D1,-(A7)
00002B96  222E 0008 4743          move.l  8(A6),D1
00002B9A  202E 000C 4744          move.l  12(A6),D0
00002B9E  4A80      4745          tst.l   D0
00002BA0  6A0E      4746          bpl.s   ldiv_1
00002BA2  4480      4747          neg.l   D0
00002BA4  4A81      4748          tst.l   D1
00002BA6  6A14      4749          bpl.s   ldiv_2
00002BA8  4481      4750          neg.l   D1
00002BAA  612A      4751          bsr.s   dodiv
00002BAC  4481      4752          neg.l   D1
00002BAE  6016      4753          bra.s   ldiv_4
                    4754   ldiv_1:
00002BB0  4A81      4755          tst.l   D1
00002BB2  6A10      4756          bpl.s   ldiv_3
00002BB4  4481      4757          neg.l   D1
00002BB6  611E      4758          bsr.s   dodiv
00002BB8  4480      4759          neg.l   D0
00002BBA  600A      4760          bra.s   ldiv_4
                    4761   ldiv_2:
00002BBC  6118      4762          bsr.s   dodiv
00002BBE  4480      4763          neg.l   D0
00002BC0  4481      4764          neg.l   D1
00002BC2  6002      4765          bra.s   ldiv_4
                    4766   ldiv_3:
00002BC4  6110      4767          bsr.s   dodiv
                    4768   ldiv_4:
00002BC6  2D40 0008 4769          move.l  D0,8(A6)
00002BCA  2D41 000C 4770          move.l  D1,12(A6)
00002BCE  4CDF 0003 4771          movem.l (A7)+,D0/D1
00002BD2  4E5E      4772          unlk    A6
00002BD4  4E75      4773          rts
                    4774   dodiv:
00002BD6  0C81 0000 4775          cmpi.l  #$FFFF,D1
00002BDA  FFFF      
00002BDC  6236      4776          bhi.s   dodiv_2
00002BDE  0C80 0000 4777          cmpi.l  #$FFFF,D0
00002BE2  FFFF      
00002BE4  6210      4778          bhi.s   dodiv_1
00002BE6  80C1      4779          divu    D1,D0
00002BE8  2200      4780          move.l  D0,D1
00002BEA  4241      4781          clr.w   D1
00002BEC  4841      4782          swap    D1
00002BEE  0280 0000 4783          andi.l  #$FFFF,D0
00002BF2  FFFF      
00002BF4  4E75      4784          rts
                    4785   dodiv_1:
00002BF6  48A7 A000 4786          movem.w D0/D2,-(A7)
00002BFA  4240      4787          clr.w   D0
00002BFC  4840      4788          swap    D0
00002BFE  80C1      4789          divu    D1,D0
00002C00  3400      4790          move.w  D0,D2
00002C02  301F      4791          move.w  (A7)+,D0
00002C04  80C1      4792          divu    D1,D0
00002C06  4840      4793          swap    D0
00002C08  4281      4794          clr.l   D1
00002C0A  3200      4795          move.w  D0,D1
00002C0C  3002      4796          move.w  D2,D0
00002C0E  4840      4797          swap    D0
00002C10  341F      4798          move.w  (A7)+,D2
00002C12  4E75      4799          rts
                    4800   dodiv_2:
00002C14  48E7 3800 4801          movem.l D2/D3/D4,-(A7)
00002C18  2401      4802          move.l  D1,D2
00002C1A  4242      4803          clr.w   D2
00002C1C  4842      4804          swap    D2
00002C1E  5282      4805          addq.l  #1,D2
00002C20  2600      4806          move.l  D0,D3
00002C22  2801      4807          move.l  D1,D4
00002C24  2202      4808          move.l  D2,D1
00002C26  61CE      4809          bsr.s   dodiv_1
00002C28  2204      4810          move.l  D4,D1
00002C2A  82C2      4811          divu    D2,D1
00002C2C  80C1      4812          divu    D1,D0
00002C2E  0280 0000 4813          andi.l  #$FFFF,D0
00002C32  FFFF      
                    4814   dodiv_3:
00002C34  2204      4815          move.l  D4,D1
00002C36  2404      4816          move.l  D4,D2
00002C38  4842      4817          swap    D2
00002C3A  C2C0      4818          mulu    D0,D1
00002C3C  C4C0      4819          mulu    D0,D2
00002C3E  4842      4820          swap    D2
00002C40  D282      4821          add.l   D2,D1
00002C42  9283      4822          sub.l   D3,D1
00002C44  620A      4823          bhi.s   dodiv_4
00002C46  4481      4824          neg.l   D1
00002C48  B881      4825          cmp.l   D1,D4
00002C4A  6208      4826          bhi.s   dodiv_5
00002C4C  5280      4827          addq.l  #1,D0
00002C4E  60E4      4828          bra.s   dodiv_3
                    4829   dodiv_4:
00002C50  5380      4830          subq.l  #1,D0
00002C52  60E0      4831          bra.s   dodiv_3
                    4832   dodiv_5:
00002C54  4CDF 001C 4833          movem.l (A7)+,D2/D3/D4
00002C58  4E75      4834          rts
                    4835   _putch:
00002C5A  4E56 0000 4836          link      A6,#0
00002C5E  48E7 2000 4837          movem.l   D2,-(A7)
00002C62  242E 0008 4838          move.l    8(A6),D2
00002C66  0C82 0000 4839          cmp.l     #10,D2
00002C6A  000A      
00002C6C  660A      4840          bne.s     putch_1
00002C6E  4878 000D 4841          pea       13
00002C72  6100 DEC8 4842          bsr       __putch
00002C76  584F      4843          addq.w    #4,A7
                    4844   putch_1:
00002C78  2F02      4845          move.l    D2,-(A7)
00002C7A  6100 DEC0 4846          bsr       __putch
00002C7E  584F      4847          addq.w    #4,A7
00002C80  2002      4848          move.l    D2,D0
00002C82  4CDF 0004 4849          movem.l   (A7)+,D2
00002C86  4E5E      4850          unlk      A6
00002C88  4E75      4851          rts
                    4852   _getch:
00002C8A  48E7 2000 4853          movem.l   D2,-(A7)
00002C8E  2439 0803 4854          move.l    __ungetbuf,D2
00002C92  00C0      
00002C94  2039 0803 4855          move.l    __ungetbuf,D0
00002C98  00C0      
00002C9A  0C80 FFFF 4856          cmp.l     #-1,D0
00002C9E  FFFF      
00002CA0  670C      4857          beq.s     getch_1
00002CA2  23FC FFFF 4858          move.l    #-1,__ungetbuf
00002CA6  FFFF 0803 
00002CAA  00C0      
00002CAC  6010      4859          bra.s     getch_3
                    4860   getch_1:
00002CAE  6100 DEB8 4861          bsr       __getch
00002CB2  2400      4862          move.l    D0,D2
00002CB4  0C80 0000 4863          cmp.l     #13,D0
00002CB8  000D      
00002CBA  6602      4864          bne.s     getch_3
00002CBC  740A      4865          moveq     #10,D2
                    4866   getch_3:
00002CBE  2002      4867          move.l    D2,D0
00002CC0  4CDF 0004 4868          movem.l   (A7)+,D2
00002CC4  4E75      4869          rts
                    4870   _tolower:
00002CC6  4E56 0000 4871          link      A6,#0
00002CCA  48E7 2000 4872          movem.l   D2,-(A7)
00002CCE  242E 0008 4873          move.l    8(A6),D2
00002CD2  0C82 0000 4874          cmp.l     #65,D2
00002CD6  0041      
00002CD8  6D0E      4875          blt.s     tolower_1
00002CDA  0C82 0000 4876          cmp.l     #90,D2
00002CDE  005A      
00002CE0  6E06      4877          bgt.s     tolower_1
00002CE2  84BC 0000 4878          or.l      #32,D2
00002CE6  0020      
                    4879   tolower_1:
00002CE8  2002      4880          move.l    D2,D0
00002CEA  4CDF 0004 4881          movem.l   (A7)+,D2
00002CEE  4E5E      4882          unlk      A6
00002CF0  4E75      4883          rts
                    4884   _sprintf:
00002CF2  4E56 FFFC 4885          link      A6,#-4
00002CF6  48E7 2000 4886          movem.l   D2,-(A7)
00002CFA  41EE 000C 4887          lea       12(A6),A0
00002CFE  5848      4888          addq.w    #4,A0
00002D00  2408      4889          move.l    A0,D2
00002D02  2F02      4890          move.l    D2,-(A7)
00002D04  2F2E 000C 4891          move.l    12(A6),-(A7)
00002D08  2F2E 0008 4892          move.l    8(A6),-(A7)
00002D0C  6100 09EC 4893          bsr       _vsprintf
00002D10  DEFC 000C 4894          add.w     #12,A7
00002D14  2D40 FFFC 4895          move.l    D0,-4(A6)
00002D18  4282      4896          clr.l     D2
00002D1A  202E FFFC 4897          move.l    -4(A6),D0
00002D1E  4CDF 0004 4898          movem.l   (A7)+,D2
00002D22  4E5E      4899          unlk      A6
00002D24  4E75      4900          rts
                    4901   _memset:
00002D26  206F 0004 4902          move.l    (4,A7),A0
00002D2A  202F 0008 4903          move.l    (8,A7),D0
00002D2E  222F 000C 4904          move.l    (12,A7),D1
00002D32  2248      4905          move.l    A0,A1	
                    4906   memset_1:
00002D34  12C0      4907          move.b    D0,(A1)+
00002D36  5341      4908          subq      #1,D1
00002D38  66FA      4909          bne       memset_1
00002D3A  2008      4910          move.l    A0,D0
00002D3C  4E75      4911          rts
                    4912   _strcat:
00002D3E  206F 0004 4913          move.l    (4,A7),A0	
00002D42  226F 0008 4914          move.l    (8,A7),A1	
00002D46  2008      4915          move.l    A0,D0		
                    4916   strcat_0:
00002D48  4A18      4917          tst.b     (A0)+
00002D4A  66FC      4918          bne       strcat_0
00002D4C  5348      4919          subq      #1,A0
                    4920   strcat_1:
00002D4E  10D9      4921          move.b    (A1)+,(A0)+
00002D50  66FC      4922          bne       strcat_1
00002D52  4E75      4923          rts
                    4924   _toupper:
00002D54  4E56 0000 4925          link      A6,#0
00002D58  48E7 2000 4926          movem.l   D2,-(A7)
00002D5C  242E 0008 4927          move.l    8(A6),D2
00002D60  0C82 0000 4928          cmp.l     #97,D2
00002D64  0061      
00002D66  6D0E      4929          blt.s     toupper_1
00002D68  0C82 0000 4930          cmp.l     #122,D2
00002D6C  007A      
00002D6E  6E06      4931          bgt.s     toupper_1
00002D70  C4BC 0000 4932          and.l     #95,D2
00002D74  005F      
                    4933   toupper_1:
00002D76  2002      4934          move.l    D2,D0
00002D78  4CDF 0004 4935          movem.l   (A7)+,D2
00002D7C  4E5E      4936          unlk      A6
00002D7E  4E75      4937          rts
                    4938   @vsscanf_scanread:
00002D80  4E56 FFFC 4939          link      A6,#-4
00002D84  48E7 0020 4940          movem.l   A2,-(A7)
00002D88  45F9 0000 4941          lea       @vsscanf_bufx,A2
00002D8C  530A      
00002D8E  4AAE 0008 4942          tst.l     8(A6)
00002D92  6722      4943          beq.s     @vsscanf_scanread_1
00002D94  206E 0008 4944          move.l    8(A6),A0
00002D98  58AE 0008 4945          addq.l    #4,8(A6)
00002D9C  2050      4946          move.l    (A0),A0
00002D9E  1010      4947          move.b    (A0),D0
00002DA0  4880      4948          ext.w     D0
00002DA2  48C0      4949          ext.l     D0
00002DA4  2D40 FFFC 4950          move.l    D0,-4(A6)
00002DA8  6706      4951          beq.s     @vsscanf_scanread_3
00002DAA  202E FFFC 4952          move.l    -4(A6),D0
00002DAE  6002      4953          bra.s     @vsscanf_scanread_4
                    4954   @vsscanf_scanread_3:
00002DB0  70FF      4955          moveq     #-1,D0
                    4956   @vsscanf_scanread_4:
00002DB2  6000 0032 4957          bra       @vsscanf_scanread_5
                    4958   @vsscanf_scanread_1:
00002DB6  2052      4959          move.l    (A2),A0
00002DB8  1010      4960          move.b    (A0),D0
00002DBA  6620      4961          bne.s     @vsscanf_scanread_6
00002DBC  4879 0803 4962          pea       @vsscanf_buf
00002DC0  0546      
00002DC2  6100 1038 4963          bsr       _gets
00002DC6  584F      4964          addq.w    #4,A7
00002DC8  2480      4965          move.l    D0,(A2)
00002DCA  4879 0000 4966          pea       @vsscanf_1
00002DCE  530E      
00002DD0  4879 0803 4967          pea       @vsscanf_buf
00002DD4  0546      
00002DD6  6100 FF66 4968          bsr       _strcat
00002DDA  504F      4969          addq.w    #8,A7
                    4970   @vsscanf_scanread_6:
00002DDC  2052      4971          move.l    (A2),A0
00002DDE  5292      4972          addq.l    #1,(A2)
00002DE0  1010      4973          move.b    (A0),D0
00002DE2  4880      4974          ext.w     D0
00002DE4  48C0      4975          ext.l     D0
                    4976   @vsscanf_scanread_5:
00002DE6  4CDF 0400 4977          movem.l   (A7)+,A2
00002DEA  4E5E      4978          unlk      A6
00002DEC  4E75      4979          rts
                    4980   @vsscanf_scanputback:
00002DEE  4E56 0000 4981          link      A6,#0
00002DF2  48E7 3000 4982          movem.l   D2/D3,-(A7)
00002DF6  242E 000C 4983          move.l    12(A6),D2
00002DFA  262E 0008 4984          move.l    8(A6),D3
00002DFE  6718      4985          beq.s     @vsscanf_scanputback_1
00002E00  0C82 FFFF 4986          cmp.l     #-1,D2
00002E04  FFFF      
00002E06  670A      4987          beq.s     @vsscanf_scanputback_3
00002E08  5983      4988          subq.l    #4,D3
00002E0A  2043      4989          move.l    D3,A0
00002E0C  2050      4990          move.l    (A0),A0
00002E0E  1082      4991          move.b    D2,(A0)
00002E10  6004      4992          bra.s     @vsscanf_scanputback_4
                    4993   @vsscanf_scanputback_3:
00002E12  2043      4994          move.l    D3,A0
00002E14  5390      4995          subq.l    #1,(A0)
                    4996   @vsscanf_scanputback_4:
00002E16  602E      4997          bra.s     @vsscanf_scanputback_6
                    4998   @vsscanf_scanputback_1:
00002E18  41F9 0803 4999          lea       @vsscanf_buf,A0
00002E1C  0546      
00002E1E  2008      5000          move.l    A0,D0
00002E20  B0B9 0000 5001          cmp.l     @vsscanf_bufx,D0
00002E24  530A      
00002E26  6610      5002          bne.s     @vsscanf_scanputback_5
00002E28  4239 0803 5003          clr.b     @vsscanf_buf
00002E2C  0546      
00002E2E  2F02      5004          move.l    D2,-(A7)
00002E30  6100 103C 5005          bsr       _ungetch
00002E34  584F      5006          addq.w    #4,A7
00002E36  600E      5007          bra.s     @vsscanf_scanputback_6
                    5008   @vsscanf_scanputback_5:
00002E38  53B9 0000 5009          subq.l    #1,@vsscanf_bufx
00002E3C  530A      
00002E3E  2079 0000 5010          move.l    @vsscanf_bufx,A0
00002E42  530A      
00002E44  1082      5011          move.b    D2,(A0)
                    5012   @vsscanf_scanputback_6:
00002E46  2002      5013          move.l    D2,D0
00002E48  4CDF 000C 5014          movem.l   (A7)+,D2/D3
00002E4C  4E5E      5015          unlk      A6
00002E4E  4E75      5016          rts
                    5017   @vsscanf_scanspace:
00002E50  4E56 0000 5018          link      A6,#0
00002E54  48E7 2000 5019          movem.l   D2,-(A7)
                    5020   @vsscanf_scanspace_1:
00002E58  2F2E 0008 5021          move.l    8(A6),-(A7)
00002E5C  6100 FF22 5022          bsr       @vsscanf_scanread
00002E60  584F      5023          addq.w    #4,A7
00002E62  2400      5024          move.l    D0,D2
00002E64  206E 000C 5025          move.l    12(A6),A0
00002E68  5290      5026          addq.l    #1,(A0)
00002E6A  2042      5027          move.l    D2,A0
00002E6C  43F9 0000 5028          lea       __ctype,A1
00002E70  5310      
00002E72  1030 9801 5029          move.b    1(A0,A1.L),D0
00002E76  C03C 0010 5030          and.b     #16,D0
00002E7A  66DC      5031          bne       @vsscanf_scanspace_1
00002E7C  2002      5032          move.l    D2,D0
00002E7E  4CDF 0004 5033          movem.l   (A7)+,D2
00002E82  4E5E      5034          unlk      A6
00002E84  4E75      5035          rts
                    5036   @vsscanf_scanselect:
00002E86  4E56 0000 5037          link      A6,#0
00002E8A  48E7 3F20 5038          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00002E8E  262E 000C 5039          move.l    12(A6),D3
00002E92  2C2E 0018 5040          move.l    24(A6),D6
00002E96  2E2E 0014 5041          move.l    20(A6),D7
00002E9A  2043      5042          move.l    D3,A0
00002E9C  1010      5043          move.b    (A0),D0
00002E9E  4880      5044          ext.w     D0
00002EA0  48C0      5045          ext.l     D0
00002EA2  0C80 0000 5046          cmp.l     #94,D0
00002EA6  005E      
00002EA8  6608      5047          bne.s     @vsscanf_scanselect_1
00002EAA  347C 0001 5048          move.w    #1,A2
00002EAE  5283      5049          addq.l    #1,D3
00002EB0  6004      5050          bra.s     @vsscanf_scanselect_2
                    5051   @vsscanf_scanselect_1:
00002EB2  347C 0000 5052          move.w    #0,A2
                    5053   @vsscanf_scanselect_2:
00002EB6  202E 0010 5054          move.l    16(A6),D0
00002EBA  53AE 0010 5055          subq.l    #1,16(A6)
00002EBE  4A80      5056          tst.l     D0
00002EC0  6700 0108 5057          beq       @vsscanf_scanselect_5
00002EC4  2F2E 0008 5058          move.l    8(A6),-(A7)
00002EC8  6100 FEB6 5059          bsr       @vsscanf_scanread
00002ECC  584F      5060          addq.w    #4,A7
00002ECE  2800      5061          move.l    D0,D4
00002ED0  0C84 FFFF 5062          cmp.l     #-1,D4
00002ED4  FFFF      
00002ED6  6604      5063          bne.s     @vsscanf_scanselect_6
00002ED8  6000 00F0 5064          bra       @vsscanf_scanselect_5
                    5065   @vsscanf_scanselect_6:
00002EDC  206E 001C 5066          move.l    28(A6),A0
00002EE0  5290      5067          addq.l    #1,(A0)
00002EE2  4285      5068          clr.l     D5
00002EE4  4282      5069          clr.l     D2
                    5070   @vsscanf_scanselect_8:
00002EE6  2043      5071          move.l    D3,A0
00002EE8  1030 2800 5072          move.b    0(A0,D2.L),D0
00002EEC  4880      5073          ext.w     D0
00002EEE  48C0      5074          ext.l     D0
00002EF0  0C80 0000 5075          cmp.l     #93,D0
00002EF4  005D      
00002EF6  6700 008E 5076          beq       @vsscanf_scanselect_10
00002EFA  4A82      5077          tst.l     D2
00002EFC  6716      5078          beq.s     @vsscanf_scanselect_11
00002EFE  2043      5079          move.l    D3,A0
00002F00  1030 2800 5080          move.b    0(A0,D2.L),D0
00002F04  4880      5081          ext.w     D0
00002F06  48C0      5082          ext.l     D0
00002F08  0C80 0000 5083          cmp.l     #93,D0
00002F0C  005D      
00002F0E  6604      5084          bne.s     @vsscanf_scanselect_11
00002F10  6000 0074 5085          bra       @vsscanf_scanselect_10
                    5086   @vsscanf_scanselect_11:
00002F14  4A82      5087          tst.l     D2
00002F16  6700 0058 5088          beq       @vsscanf_scanselect_15
00002F1A  2043      5089          move.l    D3,A0
00002F1C  1030 2800 5090          move.b    0(A0,D2.L),D0
00002F20  4880      5091          ext.w     D0
00002F22  48C0      5092          ext.l     D0
00002F24  0C80 0000 5093          cmp.l     #45,D0
00002F28  002D      
00002F2A  6600 0044 5094          bne       @vsscanf_scanselect_15
00002F2E  2043      5095          move.l    D3,A0
00002F30  2002      5096          move.l    D2,D0
00002F32  5380      5097          subq.l    #1,D0
00002F34  2243      5098          move.l    D3,A1
00002F36  2F08      5099          move.l    A0,-(A7)
00002F38  2042      5100          move.l    D2,A0
00002F3A  1230 0800 5101          move.b    0(A0,D0.L),D1
00002F3E  B230 9801 5102          cmp.b     1(A0,A1.L),D1
00002F42  6C00 002C 5103          bge       @vsscanf_scanselect_15
00002F46  205F      5104          move.l    (A7)+,A0
00002F48  2043      5105          move.l    D3,A0
00002F4A  2002      5106          move.l    D2,D0
00002F4C  5380      5107          subq.l    #1,D0
00002F4E  1030 0800 5108          move.b    0(A0,D0.L),D0
00002F52  4880      5109          ext.w     D0
00002F54  48C0      5110          ext.l     D0
00002F56  B880      5111          cmp.l     D0,D4
00002F58  6D12      5112          blt.s     @vsscanf_scanselect_17
00002F5A  2043      5113          move.l    D3,A0
00002F5C  2242      5114          move.l    D2,A1
00002F5E  1031 8801 5115          move.b    1(A1,A0.L),D0
00002F62  4880      5116          ext.w     D0
00002F64  48C0      5117          ext.l     D0
00002F66  B880      5118          cmp.l     D0,D4
00002F68  6E02      5119          bgt.s     @vsscanf_scanselect_17
00002F6A  601A      5120          bra.s     @vsscanf_scanselect_10
                    5121   @vsscanf_scanselect_17:
00002F6C  5282      5122          addq.l    #1,D2
00002F6E  6010      5123          bra.s     @vsscanf_scanselect_19
                    5124   @vsscanf_scanselect_15:
00002F70  2043      5125          move.l    D3,A0
00002F72  1030 2800 5126          move.b    0(A0,D2.L),D0
00002F76  4880      5127          ext.w     D0
00002F78  48C0      5128          ext.l     D0
00002F7A  B880      5129          cmp.l     D0,D4
00002F7C  6602      5130          bne.s     @vsscanf_scanselect_19
00002F7E  6006      5131          bra.s     @vsscanf_scanselect_10
                    5132   @vsscanf_scanselect_19:
00002F80  5282      5133          addq.l    #1,D2
00002F82  6000 FF62 5134          bra       @vsscanf_scanselect_8
                    5135   @vsscanf_scanselect_10:
00002F86  4A82      5136          tst.l     D2
00002F88  6712      5137          beq.s     @vsscanf_scanselect_23
00002F8A  2043      5138          move.l    D3,A0
00002F8C  1030 2800 5139          move.b    0(A0,D2.L),D0
00002F90  4880      5140          ext.w     D0
00002F92  48C0      5141          ext.l     D0
00002F94  0C80 0000 5142          cmp.l     #93,D0
00002F98  005D      
00002F9A  6702      5143          beq.s     @vsscanf_scanselect_21
                    5144   @vsscanf_scanselect_23:
00002F9C  7A01      5145          moveq     #1,D5
                    5146   @vsscanf_scanselect_21:
00002F9E  200A      5147          move.l    A2,D0
00002FA0  6712      5148          beq.s     @vsscanf_scanselect_24
00002FA2  4A85      5149          tst.l     D5
00002FA4  660C      5150          bne.s     @vsscanf_scanselect_26
00002FA6  4A87      5151          tst.l     D7
00002FA8  6606      5152          bne.s     @vsscanf_scanselect_28
00002FAA  2046      5153          move.l    D6,A0
00002FAC  5286      5154          addq.l    #1,D6
00002FAE  1084      5155          move.b    D4,(A0)
                    5156   @vsscanf_scanselect_28:
00002FB0  6014      5157          bra.s     @vsscanf_scanselect_4
                    5158   @vsscanf_scanselect_26:
00002FB2  6016      5159          bra.s     @vsscanf_scanselect_5
                    5160   @vsscanf_scanselect_24:
00002FB4  4A85      5161          tst.l     D5
00002FB6  670C      5162          beq.s     @vsscanf_scanselect_30
00002FB8  4A87      5163          tst.l     D7
00002FBA  6606      5164          bne.s     @vsscanf_scanselect_32
00002FBC  2046      5165          move.l    D6,A0
00002FBE  5286      5166          addq.l    #1,D6
00002FC0  1084      5167          move.b    D4,(A0)
                    5168   @vsscanf_scanselect_32:
00002FC2  6002      5169          bra.s     @vsscanf_scanselect_4
                    5170   @vsscanf_scanselect_30:
00002FC4  6004      5171          bra.s     @vsscanf_scanselect_5
                    5172   @vsscanf_scanselect_4:
00002FC6  6000 FEEE 5173          bra       @vsscanf_scanselect_2
                    5174   @vsscanf_scanselect_5:
00002FCA  0C84 FFFF 5175          cmp.l     #-1,D4
00002FCE  FFFF      
00002FD0  6712      5176          beq.s     @vsscanf_scanselect_34
00002FD2  2F04      5177          move.l    D4,-(A7)
00002FD4  2F2E 0008 5178          move.l    8(A6),-(A7)
00002FD8  6100 FE14 5179          bsr       @vsscanf_scanputback
00002FDC  504F      5180          addq.w    #8,A7
00002FDE  206E 001C 5181          move.l    28(A6),A0
00002FE2  5390      5182          subq.l    #1,(A0)
                    5183   @vsscanf_scanselect_34:
00002FE4  4A87      5184          tst.l     D7
00002FE6  6604      5185          bne.s     @vsscanf_scanselect_36
00002FE8  2046      5186          move.l    D6,A0
00002FEA  4210      5187          clr.b     (A0)
                    5188   @vsscanf_scanselect_36:
00002FEC  5283      5189          addq.l    #1,D3
00002FEE  2043      5190          move.l    D3,A0
00002FF0  1010      5191          move.b    (A0),D0
00002FF2  4880      5192          ext.w     D0
00002FF4  48C0      5193          ext.l     D0
00002FF6  0C80 0000 5194          cmp.l     #93,D0
00002FFA  005D      
00002FFC  6702      5195          beq.s     @vsscanf_scanselect_40
00002FFE  60EC      5196          bra       @vsscanf_scanselect_36
                    5197   @vsscanf_scanselect_40:
00003000  5283      5198          addq.l    #1,D3
00003002  2003      5199          move.l    D3,D0
00003004  4CDF 04FC 5200          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003008  4E5E      5201          unlk      A6
0000300A  4E75      5202          rts
                    5203   _scanflush:
0000300C  41F9 0803 5204          lea       @vsscanf_buf,A0
00003010  0546      
00003012  23C8 0000 5205          move.l    A0,@vsscanf_bufx
00003016  530A      
00003018  4239 0803 5206          clr.b     @vsscanf_buf
0000301C  0546      
0000301E  4878 FFFF 5207          pea       -1
00003022  6100 0E4A 5208          bsr       _ungetch
00003026  584F      5209          addq.w    #4,A7
00003028  4E75      5210          rts
                    5211   _vsscanf:
0000302A  4E56 FF88 5212          link      A6,#-120
0000302E  48E7 3F3C 5213          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003032  47F8 2D80 5214          lea       @vsscanf_scanread,A3
00003036  4AAE 0008 5215          tst.l     8(A6)
0000303A  6706      5216          beq.s     vsscanf_1
0000303C  41EE 0008 5217          lea       8(A6),A0
00003040  6004      5218          bra.s     vsscanf_2
                    5219   vsscanf_1:
00003042  4280      5220          clr.l     D0
00003044  2040      5221          move.l    D0,A0
                    5222   vsscanf_2:
00003046  2A08      5223          move.l    A0,D5
00003048  42AE FFE4 5224          clr.l     -28(A6)
0000304C  4284      5225          clr.l     D4
                    5226   vsscanf_3:
0000304E  206E 000C 5227          move.l    12(A6),A0
00003052  52AE 000C 5228          addq.l    #1,12(A6)
00003056  1010      5229          move.b    (A0),D0
00003058  4880      5230          ext.w     D0
0000305A  48C0      5231          ext.l     D0
0000305C  2600      5232          move.l    D0,D3
0000305E  6700 05AC 5233          beq       vsscanf_5
00003062  4286      5234          clr.l     D6
00003064  387C 0000 5235          move.w    #0,A4
00003068  0C83 0000 5236          cmp.l     #32,D3
0000306C  0020      
0000306E  6712      5237          beq.s     vsscanf_8
00003070  0C83 0000 5238          cmp.l     #9,D3
00003074  0009      
00003076  670A      5239          beq.s     vsscanf_8
00003078  0C83 0000 5240          cmp.l     #10,D3
0000307C  000A      
0000307E  6600 0048 5241          bne       vsscanf_6
                    5242   vsscanf_8:
00003082  2F05      5243          move.l    D5,-(A7)
00003084  4E93      5244          jsr       (A3)
00003086  584F      5245          addq.w    #4,A7
00003088  2400      5246          move.l    D0,D2
0000308A  52AE FFE4 5247          addq.l    #1,-28(A6)
0000308E  0C82 FFFF 5248          cmp.l     #-1,D2
00003092  FFFF      
00003094  660E      5249          bne.s     vsscanf_11
00003096  4A84      5250          tst.l     D4
00003098  6704      5251          beq.s     vsscanf_13
0000309A  2004      5252          move.l    D4,D0
0000309C  6002      5253          bra.s     vsscanf_14
                    5254   vsscanf_13:
0000309E  70FF      5255          moveq     #-1,D0
                    5256   vsscanf_14:
000030A0  6000 056C 5257          bra       vsscanf_15
                    5258   vsscanf_11:
000030A4  2042      5259          move.l    D2,A0
000030A6  43F9 0000 5260          lea       __ctype,A1
000030AA  5310      
000030AC  1030 9801 5261          move.b    1(A0,A1.L),D0
000030B0  C03C 0010 5262          and.b     #16,D0
000030B4  66CC      5263          bne       vsscanf_8
000030B6  53AE FFE4 5264          subq.l    #1,-28(A6)
000030BA  2F02      5265          move.l    D2,-(A7)
000030BC  2F05      5266          move.l    D5,-(A7)
000030BE  6100 FD2E 5267          bsr       @vsscanf_scanputback
000030C2  504F      5268          addq.w    #8,A7
000030C4  6000 0542 5269          bra       vsscanf_139
                    5270   vsscanf_6:
000030C8  0C83 0000 5271          cmp.l     #37,D3
000030CC  0025      
000030CE  6600 0502 5272          bne       vsscanf_127
000030D2  206E 000C 5273          move.l    12(A6),A0
000030D6  52AE 000C 5274          addq.l    #1,12(A6)
000030DA  1010      5275          move.b    (A0),D0
000030DC  4880      5276          ext.w     D0
000030DE  48C0      5277          ext.l     D0
000030E0  2600      5278          move.l    D0,D3
000030E2  42AE FFEC 5279          clr.l     -20(A6)
000030E6  4286      5280          clr.l     D6
000030E8  42AE FFE8 5281          clr.l     -24(A6)
000030EC  347C 7FFF 5282          move.w    #32767,A2
000030F0  0C83 0000 5283          cmp.l     #42,D3
000030F4  002A      
000030F6  6612      5284          bne.s     vsscanf_18
000030F8  7C01      5285          moveq     #1,D6
000030FA  206E 000C 5286          move.l    12(A6),A0
000030FE  52AE 000C 5287          addq.l    #1,12(A6)
00003102  1010      5288          move.b    (A0),D0
00003104  4880      5289          ext.w     D0
00003106  48C0      5290          ext.l     D0
00003108  2600      5291          move.l    D0,D3
                    5292   vsscanf_18:
0000310A  2043      5293          move.l    D3,A0
0000310C  43F9 0000 5294          lea       __ctype,A1
00003110  5310      
00003112  1030 9801 5295          move.b    1(A0,A1.L),D0
00003116  C03C 0004 5296          and.b     #4,D0
0000311A  6700 004E 5297          beq       vsscanf_24
0000311E  2003      5298          move.l    D3,D0
00003120  0480 0000 5299          sub.l     #48,D0
00003124  0030      
00003126  2440      5300          move.l    D0,A2
                    5301   vsscanf_22:
00003128  206E 000C 5302          move.l    12(A6),A0
0000312C  52AE 000C 5303          addq.l    #1,12(A6)
00003130  1010      5304          move.b    (A0),D0
00003132  4880      5305          ext.w     D0
00003134  48C0      5306          ext.l     D0
00003136  2600      5307          move.l    D0,D3
00003138  2040      5308          move.l    D0,A0
0000313A  43F9 0000 5309          lea       __ctype,A1
0000313E  5310      
00003140  1030 9801 5310          move.b    1(A0,A1.L),D0
00003144  C0BC 0000 5311          and.l     #255,D0
00003148  00FF      
0000314A  C0BC 0000 5312          and.l     #4,D0
0000314E  0004      
00003150  6718      5313          beq.s     vsscanf_24
00003152  70D0      5314          moveq     #-48,D0
00003154  2F0A      5315          move.l    A2,-(A7)
00003156  4878 000A 5316          pea       10
0000315A  6100 0C12 5317          bsr       LMUL
0000315E  2217      5318          move.l    (A7),D1
00003160  504F      5319          addq.w    #8,A7
00003162  D283      5320          add.l     D3,D1
00003164  D081      5321          add.l     D1,D0
00003166  2440      5322          move.l    D0,A2
00003168  60BE      5323          bra       vsscanf_22
                    5324   vsscanf_24:
0000316A  0C83 0000 5325          cmp.l     #108,D3
0000316E  006C      
00003170  6708      5326          beq.s     vsscanf_27
00003172  0C83 0000 5327          cmp.l     #76,D3
00003176  004C      
00003178  661A      5328          bne.s     vsscanf_25
                    5329   vsscanf_27:
0000317A  2D7C 0000 5330          move.l    #1,-24(A6)
0000317E  0001 FFE8 
00003182  206E 000C 5331          move.l    12(A6),A0
00003186  52AE 000C 5332          addq.l    #1,12(A6)
0000318A  1010      5333          move.b    (A0),D0
0000318C  4880      5334          ext.w     D0
0000318E  48C0      5335          ext.l     D0
00003190  2600      5336          move.l    D0,D3
00003192  6020      5337          bra.s     vsscanf_28
                    5338   vsscanf_25:
00003194  0C83 0000 5339          cmp.l     #104,D3
00003198  0068      
0000319A  6618      5340          bne.s     vsscanf_28
0000319C  2D7C 0000 5341          move.l    #1,-20(A6)
000031A0  0001 FFEC 
000031A4  206E 000C 5342          move.l    12(A6),A0
000031A8  52AE 000C 5343          addq.l    #1,12(A6)
000031AC  1010      5344          move.b    (A0),D0
000031AE  4880      5345          ext.w     D0
000031B0  48C0      5346          ext.l     D0
000031B2  2600      5347          move.l    D0,D3
                    5348   vsscanf_28:
000031B4  0C83 0000 5349          cmp.l     #91,D3
000031B8  005B      
000031BA  6600 0036 5350          bne       vsscanf_30
000031BE  4A86      5351          tst.l     D6
000031C0  660A      5352          bne.s     vsscanf_32
000031C2  206E 0010 5353          move.l    16(A6),A0
000031C6  58AE 0010 5354          addq.l    #4,16(A6)
000031CA  2E10      5355          move.l    (A0),D7
                    5356   vsscanf_32:
000031CC  486E FFE4 5357          pea       -28(A6)
000031D0  2F07      5358          move.l    D7,-(A7)
000031D2  2F06      5359          move.l    D6,-(A7)
000031D4  2F0A      5360          move.l    A2,-(A7)
000031D6  2F2E 000C 5361          move.l    12(A6),-(A7)
000031DA  2F05      5362          move.l    D5,-(A7)
000031DC  6100 FCA8 5363          bsr       @vsscanf_scanselect
000031E0  DEFC 0018 5364          add.w     #24,A7
000031E4  2D40 000C 5365          move.l    D0,12(A6)
000031E8  4A86      5366          tst.l     D6
000031EA  6602      5367          bne.s     vsscanf_34
000031EC  5284      5368          addq.l    #1,D4
                    5369   vsscanf_34:
000031EE  6000 0418 5370          bra       vsscanf_139
                    5371   vsscanf_30:
000031F2  0C83 0000 5372          cmp.l     #110,D3
000031F6  006E      
000031F8  661A      5373          bne.s     vsscanf_36
000031FA  4A86      5374          tst.l     D6
000031FC  6612      5375          bne.s     vsscanf_38
000031FE  206E 0010 5376          move.l    16(A6),A0
00003202  58AE 0010 5377          addq.l    #4,16(A6)
00003206  2E10      5378          move.l    (A0),D7
00003208  2047      5379          move.l    D7,A0
0000320A  20AE FFE4 5380          move.l    -28(A6),(A0)
0000320E  5284      5381          addq.l    #1,D4
                    5382   vsscanf_38:
00003210  6000 03F6 5383          bra       vsscanf_139
                    5384   vsscanf_36:
00003214  0C83 0000 5385          cmp.l     #115,D3
00003218  0073      
0000321A  6600 00AC 5386          bne       vsscanf_40
0000321E  486E FFE4 5387          pea       -28(A6)
00003222  2F05      5388          move.l    D5,-(A7)
00003224  6100 FC2A 5389          bsr       @vsscanf_scanspace
00003228  504F      5390          addq.w    #8,A7
0000322A  2400      5391          move.l    D0,D2
0000322C  4A86      5392          tst.l     D6
0000322E  660A      5393          bne.s     vsscanf_42
00003230  206E 0010 5394          move.l    16(A6),A0
00003234  58AE 0010 5395          addq.l    #4,16(A6)
00003238  2E10      5396          move.l    (A0),D7
                    5397   vsscanf_42:
0000323A  52AE FFE4 5398          addq.l    #1,-28(A6)
                    5399   vsscanf_44:
0000323E  200A      5400          move.l    A2,D0
00003240  534A      5401          subq.w    #1,A2
00003242  4A80      5402          tst.l     D0
00003244  6700 0038 5403          beq       vsscanf_46
00003248  2042      5404          move.l    D2,A0
0000324A  43F9 0000 5405          lea       __ctype,A1
0000324E  5310      
00003250  1030 9801 5406          move.b    1(A0,A1.L),D0
00003254  C03C 0010 5407          and.b     #16,D0
00003258  6624      5408          bne.s     vsscanf_46
0000325A  0C82 FFFF 5409          cmp.l     #-1,D2
0000325E  FFFF      
00003260  671C      5410          beq.s     vsscanf_46
00003262  387C 0001 5411          move.w    #1,A4
00003266  4A86      5412          tst.l     D6
00003268  6606      5413          bne.s     vsscanf_47
0000326A  2047      5414          move.l    D7,A0
0000326C  5287      5415          addq.l    #1,D7
0000326E  1082      5416          move.b    D2,(A0)
                    5417   vsscanf_47:
00003270  2F05      5418          move.l    D5,-(A7)
00003272  4E93      5419          jsr       (A3)
00003274  584F      5420          addq.w    #4,A7
00003276  2400      5421          move.l    D0,D2
00003278  52AE FFE4 5422          addq.l    #1,-28(A6)
0000327C  60C0      5423          bra       vsscanf_44
                    5424   vsscanf_46:
0000327E  4A86      5425          tst.l     D6
00003280  660A      5426          bne.s     vsscanf_51
00003282  2047      5427          move.l    D7,A0
00003284  4210      5428          clr.b     (A0)
00003286  200C      5429          move.l    A4,D0
00003288  6702      5430          beq.s     vsscanf_51
0000328A  5284      5431          addq.l    #1,D4
                    5432   vsscanf_51:
0000328C  0C82 FFFF 5433          cmp.l     #-1,D2
00003290  FFFF      
00003292  6708      5434          beq.s     vsscanf_55
00003294  4A86      5435          tst.l     D6
00003296  661E      5436          bne.s     vsscanf_53
00003298  200C      5437          move.l    A4,D0
0000329A  661A      5438          bne.s     vsscanf_53
                    5439   vsscanf_55:
0000329C  4A84      5440          tst.l     D4
0000329E  6704      5441          beq.s     vsscanf_56
000032A0  2004      5442          move.l    D4,D0
000032A2  600E      5443          bra.s     vsscanf_59
                    5444   vsscanf_56:
000032A4  0C82 FFFF 5445          cmp.l     #-1,D2
000032A8  FFFF      
000032AA  6604      5446          bne.s     vsscanf_58
000032AC  70FF      5447          moveq     #-1,D0
000032AE  6002      5448          bra.s     vsscanf_59
                    5449   vsscanf_58:
000032B0  2004      5450          move.l    D4,D0
                    5451   vsscanf_59:
000032B2  6000 035A 5452          bra       vsscanf_15
                    5453   vsscanf_53:
000032B6  53AE FFE4 5454          subq.l    #1,-28(A6)
000032BA  2F02      5455          move.l    D2,-(A7)
000032BC  2F05      5456          move.l    D5,-(A7)
000032BE  6100 FB2E 5457          bsr       @vsscanf_scanputback
000032C2  504F      5458          addq.w    #8,A7
000032C4  6000 0342 5459          bra       vsscanf_139
                    5460   vsscanf_40:
000032C8  0C83 0000 5461          cmp.l     #99,D3
000032CC  0063      
000032CE  6600 008E 5462          bne       vsscanf_60
000032D2  4A86      5463          tst.l     D6
000032D4  660A      5464          bne.s     vsscanf_62
000032D6  206E 0010 5465          move.l    16(A6),A0
000032DA  58AE 0010 5466          addq.l    #4,16(A6)
000032DE  2E10      5467          move.l    (A0),D7
                    5468   vsscanf_62:
000032E0  2F05      5469          move.l    D5,-(A7)
000032E2  4E93      5470          jsr       (A3)
000032E4  584F      5471          addq.w    #4,A7
000032E6  2400      5472          move.l    D0,D2
000032E8  52AE FFE4 5473          addq.l    #1,-28(A6)
000032EC  200A      5474          move.l    A2,D0
000032EE  0C80 0000 5475          cmp.l     #32767,D0
000032F2  7FFF      
000032F4  6604      5476          bne.s     vsscanf_64
000032F6  347C 0001 5477          move.w    #1,A2
                    5478   vsscanf_64:
000032FA  0C82 FFFF 5479          cmp.l     #-1,D2
000032FE  FFFF      
00003300  6606      5480          bne.s     vsscanf_66
00003302  4A86      5481          tst.l     D6
00003304  6602      5482          bne.s     vsscanf_66
00003306  5384      5483          subq.l    #1,D4
                    5484   vsscanf_66:
00003308  200A      5485          move.l    A2,D0
0000330A  534A      5486          subq.w    #1,A2
0000330C  4A80      5487          tst.l     D0
0000330E  6720      5488          beq.s     vsscanf_70
00003310  0C82 FFFF 5489          cmp.l     #-1,D2
00003314  FFFF      
00003316  6718      5490          beq.s     vsscanf_70
00003318  4A86      5491          tst.l     D6
0000331A  6606      5492          bne.s     vsscanf_71
0000331C  2047      5493          move.l    D7,A0
0000331E  5287      5494          addq.l    #1,D7
00003320  1082      5495          move.b    D2,(A0)
                    5496   vsscanf_71:
00003322  2F05      5497          move.l    D5,-(A7)
00003324  4E93      5498          jsr       (A3)
00003326  584F      5499          addq.w    #4,A7
00003328  2400      5500          move.l    D0,D2
0000332A  52AE FFE4 5501          addq.l    #1,-28(A6)
0000332E  60D8      5502          bra       vsscanf_66
                    5503   vsscanf_70:
00003330  0C82 FFFF 5504          cmp.l     #-1,D2
00003334  FFFF      
00003336  660E      5505          bne.s     vsscanf_73
00003338  4A84      5506          tst.l     D4
0000333A  6704      5507          beq.s     vsscanf_75
0000333C  2004      5508          move.l    D4,D0
0000333E  6002      5509          bra.s     vsscanf_76
                    5510   vsscanf_75:
00003340  70FF      5511          moveq     #-1,D0
                    5512   vsscanf_76:
00003342  6000 02CA 5513          bra       vsscanf_15
                    5514   vsscanf_73:
00003346  4A86      5515          tst.l     D6
00003348  6602      5516          bne.s     vsscanf_77
0000334A  5284      5517          addq.l    #1,D4
                    5518   vsscanf_77:
0000334C  53AE FFE4 5519          subq.l    #1,-28(A6)
00003350  2F02      5520          move.l    D2,-(A7)
00003352  2F05      5521          move.l    D5,-(A7)
00003354  6100 FA98 5522          bsr       @vsscanf_scanputback
00003358  504F      5523          addq.w    #8,A7
0000335A  6000 02AC 5524          bra       vsscanf_139
                    5525   vsscanf_60:
0000335E  0C83 0000 5526          cmp.l     #105,D3
00003362  0069      
00003364  6600 0060 5527          bne       vsscanf_82
00003368  486E FFE4 5528          pea       -28(A6)
0000336C  2F05      5529          move.l    D5,-(A7)
0000336E  6100 FAE0 5530          bsr       @vsscanf_scanspace
00003372  504F      5531          addq.w    #8,A7
00003374  2400      5532          move.l    D0,D2
00003376  0C82 0000 5533          cmp.l     #48,D2
0000337A  0030      
0000337C  6600 0038 5534          bne       vsscanf_81
00003380  387C 0001 5535          move.w    #1,A4
00003384  2F05      5536          move.l    D5,-(A7)
00003386  4E93      5537          jsr       (A3)
00003388  584F      5538          addq.w    #4,A7
0000338A  2400      5539          move.l    D0,D2
0000338C  2F02      5540          move.l    D2,-(A7)
0000338E  6100 F936 5541          bsr       _tolower
00003392  584F      5542          addq.w    #4,A7
00003394  0C80 0000 5543          cmp.l     #120,D0
00003398  0078      
0000339A  6604      5544          bne.s     vsscanf_83
0000339C  7678      5545          moveq     #120,D3
0000339E  6010      5546          bra.s     vsscanf_84
                    5547   vsscanf_83:
000033A0  53AE FFE4 5548          subq.l    #1,-28(A6)
000033A4  2F02      5549          move.l    D2,-(A7)
000033A6  2F05      5550          move.l    D5,-(A7)
000033A8  6100 FA44 5551          bsr       @vsscanf_scanputback
000033AC  504F      5552          addq.w    #8,A7
000033AE  766F      5553          moveq     #111,D3
                    5554   vsscanf_84:
000033B0  52AE FFE4 5555          addq.l    #1,-28(A6)
000033B4  6010      5556          bra.s     vsscanf_82
                    5557   vsscanf_81:
000033B6  53AE FFE4 5558          subq.l    #1,-28(A6)
000033BA  2F02      5559          move.l    D2,-(A7)
000033BC  2F05      5560          move.l    D5,-(A7)
000033BE  6100 FA2E 5561          bsr       @vsscanf_scanputback
000033C2  504F      5562          addq.w    #8,A7
000033C4  7664      5563          moveq     #100,D3
                    5564   vsscanf_82:
000033C6  0C83 0000 5565          cmp.l     #100,D3
000033CA  0064      
000033CC  671A      5566          beq.s     vsscanf_87
000033CE  0C83 0000 5567          cmp.l     #117,D3
000033D2  0075      
000033D4  6712      5568          beq.s     vsscanf_87
000033D6  0C83 0000 5569          cmp.l     #120,D3
000033DA  0078      
000033DC  670A      5570          beq.s     vsscanf_87
000033DE  0C83 0000 5571          cmp.l     #111,D3
000033E2  006F      
000033E4  6600 01A4 5572          bne       vsscanf_85
                    5573   vsscanf_87:
000033E8  486E FFE4 5574          pea       -28(A6)
000033EC  2F05      5575          move.l    D5,-(A7)
000033EE  6100 FA60 5576          bsr       @vsscanf_scanspace
000033F2  504F      5577          addq.w    #8,A7
000033F4  2400      5578          move.l    D0,D2
000033F6  2D7C 0000 5579          move.l    #10,-4(A6)
000033FA  000A FFFC 
000033FE  0C83 0000 5580          cmp.l     #120,D3
00003402  0078      
00003404  6608      5581          bne.s     vsscanf_88
00003406  2D7C 0000 5582          move.l    #16,-4(A6)
0000340A  0010 FFFC 
                    5583   vsscanf_88:
0000340E  0C83 0000 5584          cmp.l     #111,D3
00003412  006F      
00003414  6608      5585          bne.s     vsscanf_90
00003416  2D7C 0000 5586          move.l    #8,-4(A6)
0000341A  0008 FFFC 
                    5587   vsscanf_90:
0000341E  4A86      5588          tst.l     D6
00003420  660A      5589          bne.s     vsscanf_92
00003422  206E 0010 5590          move.l    16(A6),A0
00003426  58AE 0010 5591          addq.l    #4,16(A6)
0000342A  2E10      5592          move.l    (A0),D7
                    5593   vsscanf_92:
0000342C  42AE FFE0 5594          clr.l     -32(A6)
00003430  52AE FFE4 5595          addq.l    #1,-28(A6)
00003434  0C83 0000 5596          cmp.l     #117,D3
00003438  0075      
0000343A  6720      5597          beq.s     vsscanf_94
0000343C  0C82 0000 5598          cmp.l     #45,D2
00003440  002D      
00003442  6618      5599          bne.s     vsscanf_94
00003444  2F05      5600          move.l    D5,-(A7)
00003446  4E93      5601          jsr       (A3)
00003448  584F      5602          addq.w    #4,A7
0000344A  2400      5603          move.l    D0,D2
0000344C  52AE FFE4 5604          addq.l    #1,-28(A6)
00003450  2D7C 0000 5605          move.l    #1,-32(A6)
00003454  0001 FFE0 
00003458  387C 0001 5606          move.w    #1,A4
                    5607   vsscanf_94:
0000345C  3A7C 0000 5608          move.w    #0,A5
00003460  0C82 FFFF 5609          cmp.l     #-1,D2
00003464  FFFF      
00003466  660E      5610          bne.s     vsscanf_96
00003468  4A84      5611          tst.l     D4
0000346A  6704      5612          beq.s     vsscanf_98
0000346C  2004      5613          move.l    D4,D0
0000346E  6002      5614          bra.s     vsscanf_99
                    5615   vsscanf_98:
00003470  70FF      5616          moveq     #-1,D0
                    5617   vsscanf_99:
00003472  6000 019A 5618          bra       vsscanf_15
                    5619   vsscanf_96:
00003476  200A      5620          move.l    A2,D0
00003478  534A      5621          subq.w    #1,A2
0000347A  4A80      5622          tst.l     D0
0000347C  6700 0090 5623          beq       vsscanf_102
00003480  0C83 0000 5624          cmp.l     #120,D3
00003484  0078      
00003486  6620      5625          bne.s     vsscanf_104
00003488  2F02      5626          move.l    D2,-(A7)
0000348A  6100 F8C8 5627          bsr       _toupper
0000348E  584F      5628          addq.w    #4,A7
00003490  0C80 0000 5629          cmp.l     #65,D0
00003494  0041      
00003496  6D10      5630          blt.s     vsscanf_104
00003498  2F02      5631          move.l    D2,-(A7)
0000349A  6100 F8B8 5632          bsr       _toupper
0000349E  584F      5633          addq.w    #4,A7
000034A0  0C80 0000 5634          cmp.l     #70,D0
000034A4  0046      
000034A6  6F14      5635          ble.s     vsscanf_103
                    5636   vsscanf_104:
000034A8  2042      5637          move.l    D2,A0
000034AA  43F9 0000 5638          lea       __ctype,A1
000034AE  5310      
000034B0  1030 9801 5639          move.b    1(A0,A1.L),D0
000034B4  C03C 0004 5640          and.b     #4,D0
000034B8  6700 0054 5641          beq       vsscanf_102
                    5642   vsscanf_103:
000034BC  2042      5643          move.l    D2,A0
000034BE  43F9 0000 5644          lea       __ctype,A1
000034C2  5310      
000034C4  1030 9801 5645          move.b    1(A0,A1.L),D0
000034C8  C03C 0004 5646          and.b     #4,D0
000034CC  6614      5647          bne.s     vsscanf_105
000034CE  70F9      5648          moveq     #-7,D0
000034D0  2F00      5649          move.l    D0,-(A7)
000034D2  2F02      5650          move.l    D2,-(A7)
000034D4  6100 F87E 5651          bsr       _toupper
000034D8  584F      5652          addq.w    #4,A7
000034DA  2200      5653          move.l    D0,D1
000034DC  201F      5654          move.l    (A7)+,D0
000034DE  D081      5655          add.l     D1,D0
000034E0  2400      5656          move.l    D0,D2
                    5657   vsscanf_105:
000034E2  2F0D      5658          move.l    A5,-(A7)
000034E4  2F2E FFFC 5659          move.l    -4(A6),-(A7)
000034E8  6100 0884 5660          bsr       LMUL
000034EC  2017      5661          move.l    (A7),D0
000034EE  504F      5662          addq.w    #8,A7
000034F0  D082      5663          add.l     D2,D0
000034F2  0480 0000 5664          sub.l     #48,D0
000034F6  0030      
000034F8  2A40      5665          move.l    D0,A5
000034FA  2F05      5666          move.l    D5,-(A7)
000034FC  4E93      5667          jsr       (A3)
000034FE  584F      5668          addq.w    #4,A7
00003500  2400      5669          move.l    D0,D2
00003502  52AE FFE4 5670          addq.l    #1,-28(A6)
00003506  387C 0001 5671          move.w    #1,A4
0000350A  6000 FF6A 5672          bra       vsscanf_96
                    5673   vsscanf_102:
0000350E  0C82 FFFF 5674          cmp.l     #-1,D2
00003512  FFFF      
00003514  671A      5675          beq.s     vsscanf_107
00003516  2F02      5676          move.l    D2,-(A7)
00003518  2F05      5677          move.l    D5,-(A7)
0000351A  6100 F8D2 5678          bsr       @vsscanf_scanputback
0000351E  504F      5679          addq.w    #8,A7
00003520  53AE FFE4 5680          subq.l    #1,-28(A6)
00003524  200C      5681          move.l    A4,D0
00003526  6606      5682          bne.s     vsscanf_109
00003528  2004      5683          move.l    D4,D0
0000352A  6000 00E2 5684          bra       vsscanf_15
                    5685   vsscanf_109:
0000352E  6012      5686          bra.s     vsscanf_111
                    5687   vsscanf_107:
00003530  200C      5688          move.l    A4,D0
00003532  660E      5689          bne.s     vsscanf_111
00003534  4A84      5690          tst.l     D4
00003536  6704      5691          beq.s     vsscanf_113
00003538  2004      5692          move.l    D4,D0
0000353A  6002      5693          bra.s     vsscanf_114
                    5694   vsscanf_113:
0000353C  70FF      5695          moveq     #-1,D0
                    5696   vsscanf_114:
0000353E  6000 00CE 5697          bra       vsscanf_15
                    5698   vsscanf_111:
00003542  4AAE FFE0 5699          tst.l     -32(A6)
00003546  6706      5700          beq.s     vsscanf_115
00003548  200D      5701          move.l    A5,D0
0000354A  4480      5702          neg.l     D0
0000354C  2A40      5703          move.l    D0,A5
                    5704   vsscanf_115:
0000354E  4A86      5705          tst.l     D6
00003550  661E      5706          bne.s     vsscanf_117
00003552  4AAE FFE8 5707          tst.l     -24(A6)
00003556  6706      5708          beq.s     vsscanf_119
00003558  2047      5709          move.l    D7,A0
0000355A  208D      5710          move.l    A5,(A0)
0000355C  6010      5711          bra.s     vsscanf_122
                    5712   vsscanf_119:
0000355E  4AAE FFEC 5713          tst.l     -20(A6)
00003562  6706      5714          beq.s     vsscanf_121
00003564  2047      5715          move.l    D7,A0
00003566  308D      5716          move.w    A5,(A0)
00003568  6004      5717          bra.s     vsscanf_122
                    5718   vsscanf_121:
0000356A  2047      5719          move.l    D7,A0
0000356C  208D      5720          move.l    A5,(A0)
                    5721   vsscanf_122:
0000356E  5284      5722          addq.l    #1,D4
                    5723   vsscanf_117:
00003570  0C82 FFFF 5724          cmp.l     #-1,D2
00003574  FFFF      
00003576  660E      5725          bne.s     vsscanf_123
00003578  4A84      5726          tst.l     D4
0000357A  6704      5727          beq.s     vsscanf_125
0000357C  2004      5728          move.l    D4,D0
0000357E  6002      5729          bra.s     vsscanf_126
                    5730   vsscanf_125:
00003580  70FF      5731          moveq     #-1,D0
                    5732   vsscanf_126:
00003582  6000 008A 5733          bra       vsscanf_15
                    5734   vsscanf_123:
00003586  6000 0080 5735          bra       vsscanf_139
                    5736   vsscanf_85:
0000358A  0C83 0000 5737          cmp.l     #37,D3
0000358E  0025      
00003590  6600 0040 5738          bne       vsscanf_127
00003594  2F05      5739          move.l    D5,-(A7)
00003596  4E93      5740          jsr       (A3)
00003598  584F      5741          addq.w    #4,A7
0000359A  2400      5742          move.l    D0,D2
0000359C  0C82 FFFF 5743          cmp.l     #-1,D2
000035A0  FFFF      
000035A2  660E      5744          bne.s     vsscanf_129
000035A4  4A84      5745          tst.l     D4
000035A6  6704      5746          beq.s     vsscanf_131
000035A8  2004      5747          move.l    D4,D0
000035AA  6002      5748          bra.s     vsscanf_132
                    5749   vsscanf_131:
000035AC  70FF      5750          moveq     #-1,D0
                    5751   vsscanf_132:
000035AE  6000 005E 5752          bra       vsscanf_15
                    5753   vsscanf_129:
000035B2  52AE FFE4 5754          addq.l    #1,-28(A6)
000035B6  B483      5755          cmp.l     D3,D2
000035B8  6714      5756          beq.s     vsscanf_133
000035BA  2F02      5757          move.l    D2,-(A7)
000035BC  2F05      5758          move.l    D5,-(A7)
000035BE  6100 F82E 5759          bsr       @vsscanf_scanputback
000035C2  504F      5760          addq.w    #8,A7
000035C4  53AE FFE4 5761          subq.l    #1,-28(A6)
000035C8  2004      5762          move.l    D4,D0
000035CA  6000 0042 5763          bra       vsscanf_15
                    5764   vsscanf_133:
000035CE  6000 0038 5765          bra       vsscanf_139
                    5766   vsscanf_127:
000035D2  2F05      5767          move.l    D5,-(A7)
000035D4  4E93      5768          jsr       (A3)
000035D6  584F      5769          addq.w    #4,A7
000035D8  2400      5770          move.l    D0,D2
000035DA  52AE FFE4 5771          addq.l    #1,-28(A6)
000035DE  0C82 FFFF 5772          cmp.l     #-1,D2
000035E2  FFFF      
000035E4  660C      5773          bne.s     vsscanf_135
000035E6  4A84      5774          tst.l     D4
000035E8  6704      5775          beq.s     vsscanf_137
000035EA  2004      5776          move.l    D4,D0
000035EC  6002      5777          bra.s     vsscanf_138
                    5778   vsscanf_137:
000035EE  70FF      5779          moveq     #-1,D0
                    5780   vsscanf_138:
000035F0  601C      5781          bra.s     vsscanf_15
                    5782   vsscanf_135:
000035F2  B483      5783          cmp.l     D3,D2
000035F4  6712      5784          beq.s     vsscanf_139
000035F6  2F02      5785          move.l    D2,-(A7)
000035F8  2F05      5786          move.l    D5,-(A7)
000035FA  6100 F7F2 5787          bsr       @vsscanf_scanputback
000035FE  504F      5788          addq.w    #8,A7
00003600  53AE FFE4 5789          subq.l    #1,-28(A6)
00003604  2004      5790          move.l    D4,D0
00003606  6006      5791          bra.s     vsscanf_15
                    5792   vsscanf_139:
00003608  6000 FA44 5793          bra       vsscanf_3
                    5794   vsscanf_5:
0000360C  2004      5795          move.l    D4,D0
                    5796   vsscanf_15:
0000360E  4CDF 3CFC 5797          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003612  4E5E      5798          unlk      A6
00003614  4E75      5799          rts
                    5800   _printf:
00003616  4E56 FFFC 5801          link      A6,#-4
0000361A  48E7 2000 5802          movem.l   D2,-(A7)
0000361E  41EE 0008 5803          lea       8(A6),A0
00003622  5848      5804          addq.w    #4,A0
00003624  2408      5805          move.l    A0,D2
00003626  2F02      5806          move.l    D2,-(A7)
00003628  2F2E 0008 5807          move.l    8(A6),-(A7)
0000362C  42A7      5808          clr.l     -(A7)
0000362E  6100 00CA 5809          bsr       _vsprintf
00003632  DEFC 000C 5810          add.w     #12,A7
00003636  2D40 FFFC 5811          move.l    D0,-4(A6)
0000363A  4282      5812          clr.l     D2
0000363C  202E FFFC 5813          move.l    -4(A6),D0
00003640  4CDF 0004 5814          movem.l   (A7)+,D2
00003644  4E5E      5815          unlk      A6
00003646  4E75      5816          rts
                    5817   @vsprintf_copy:
00003648  4E56 0000 5818          link      A6,#0
0000364C  206E 0008 5819          move.l    8(A6),A0
00003650  4A90      5820          tst.l     (A0)
00003652  6710      5821          beq.s     @vsprintf_copy_1
00003654  202E 000C 5822          move.l    12(A6),D0
00003658  206E 0008 5823          move.l    8(A6),A0
0000365C  2250      5824          move.l    (A0),A1
0000365E  5290      5825          addq.l    #1,(A0)
00003660  1280      5826          move.b    D0,(A1)
00003662  600A      5827          bra.s     @vsprintf_copy_2
                    5828   @vsprintf_copy_1:
00003664  2F2E 000C 5829          move.l    12(A6),-(A7)
00003668  6100 F5F0 5830          bsr       _putch
0000366C  584F      5831          addq.w    #4,A7
                    5832   @vsprintf_copy_2:
0000366E  4E5E      5833          unlk      A6
00003670  4E75      5834          rts
                    5835   @vsprintf_getval:
00003672  4E56 0000 5836          link      A6,#0
00003676  48E7 3000 5837          movem.l   D2/D3,-(A7)
0000367A  242E 0008 5838          move.l    8(A6),D2
0000367E  4283      5839          clr.l     D3
00003680  2042      5840          move.l    D2,A0
00003682  2050      5841          move.l    (A0),A0
00003684  1010      5842          move.b    (A0),D0
00003686  4880      5843          ext.w     D0
00003688  48C0      5844          ext.l     D0
0000368A  0C80 0000 5845          cmp.l     #42,D0
0000368E  002A      
00003690  6612      5846          bne.s     @vsprintf_getval_1
00003692  206E 000C 5847          move.l    12(A6),A0
00003696  2250      5848          move.l    (A0),A1
00003698  5890      5849          addq.l    #4,(A0)
0000369A  2611      5850          move.l    (A1),D3
0000369C  2042      5851          move.l    D2,A0
0000369E  5290      5852          addq.l    #1,(A0)
000036A0  6000 004E 5853          bra       @vsprintf_getval_5
                    5854   @vsprintf_getval_1:
000036A4  2042      5855          move.l    D2,A0
000036A6  2050      5856          move.l    (A0),A0
000036A8  1010      5857          move.b    (A0),D0
000036AA  4880      5858          ext.w     D0
000036AC  48C0      5859          ext.l     D0
000036AE  0C80 0000 5860          cmp.l     #48,D0
000036B2  0030      
000036B4  6D00 003A 5861          blt       @vsprintf_getval_5
000036B8  2042      5862          move.l    D2,A0
000036BA  2050      5863          move.l    (A0),A0
000036BC  1010      5864          move.b    (A0),D0
000036BE  4880      5865          ext.w     D0
000036C0  48C0      5866          ext.l     D0
000036C2  0C80 0000 5867          cmp.l     #57,D0
000036C6  0039      
000036C8  6E26      5868          bgt.s     @vsprintf_getval_5
000036CA  2F03      5869          move.l    D3,-(A7)
000036CC  4878 000A 5870          pea       10
000036D0  6100 069C 5871          bsr       LMUL
000036D4  2017      5872          move.l    (A7),D0
000036D6  504F      5873          addq.w    #8,A7
000036D8  2042      5874          move.l    D2,A0
000036DA  2250      5875          move.l    (A0),A1
000036DC  5290      5876          addq.l    #1,(A0)
000036DE  1211      5877          move.b    (A1),D1
000036E0  4881      5878          ext.w     D1
000036E2  48C1      5879          ext.l     D1
000036E4  D081      5880          add.l     D1,D0
000036E6  0480 0000 5881          sub.l     #48,D0
000036EA  0030      
000036EC  2600      5882          move.l    D0,D3
000036EE  60B4      5883          bra       @vsprintf_getval_1
                    5884   @vsprintf_getval_5:
000036F0  2003      5885          move.l    D3,D0
000036F2  4CDF 000C 5886          movem.l   (A7)+,D2/D3
000036F6  4E5E      5887          unlk      A6
000036F8  4E75      5888          rts
                    5889   _vsprintf:
000036FA  4E56 FFCC 5890          link      A6,#-52
000036FE  48E7 3F3C 5891          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003702  45EE 0008 5892          lea       8(A6),A2
00003706  47F8 3648 5893          lea       @vsprintf_copy,A3
0000370A  49F9 0000 5894          lea       _ultoa,A4
0000370E  3F78      
00003710  4286      5895          clr.l     D6
                    5896   vsprintf_1:
00003712  206E 000C 5897          move.l    12(A6),A0
00003716  4A10      5898          tst.b     (A0)
00003718  6700 0624 5899          beq       vsprintf_3
0000371C  206E 000C 5900          move.l    12(A6),A0
00003720  1010      5901          move.b    (A0),D0
00003722  4880      5902          ext.w     D0
00003724  48C0      5903          ext.l     D0
00003726  0C80 0000 5904          cmp.l     #37,D0
0000372A  0025      
0000372C  671C      5905          beq.s     vsprintf_4
0000372E  206E 000C 5906          move.l    12(A6),A0
00003732  52AE 000C 5907          addq.l    #1,12(A6)
00003736  1210      5908          move.b    (A0),D1
00003738  4881      5909          ext.w     D1
0000373A  48C1      5910          ext.l     D1
0000373C  2F01      5911          move.l    D1,-(A7)
0000373E  2F0A      5912          move.l    A2,-(A7)
00003740  4E93      5913          jsr       (A3)
00003742  504F      5914          addq.w    #8,A7
00003744  5286      5915          addq.l    #1,D6
00003746  6000 05F2 5916          bra       vsprintf_2
                    5917   vsprintf_4:
0000374A  52AE 000C 5918          addq.l    #1,12(A6)
0000374E  422E FFD3 5919          clr.b     -45(A6)
00003752  422E FFD2 5920          clr.b     -46(A6)
00003756  422E FFD0 5921          clr.b     -48(A6)
0000375A  422E FFCF 5922          clr.b     -49(A6)
0000375E  422E FFCE 5923          clr.b     -50(A6)
00003762  422E FFCD 5924          clr.b     -51(A6)
00003766  42AE FFFC 5925          clr.l     -4(A6)
0000376A  7AFF      5926          moveq     #-1,D5
0000376C  41EE FFDC 5927          lea       -36(A6),A0
00003770  2608      5928          move.l    A0,D3
00003772  2408      5929          move.l    A0,D2
                    5930   vsprintf_6:
00003774  206E 000C 5931          move.l    12(A6),A0
00003778  1010      5932          move.b    (A0),D0
0000377A  4880      5933          ext.w     D0
0000377C  48C0      5934          ext.l     D0
0000377E  0C80 0000 5935          cmp.l     #43,D0
00003782  002B      
00003784  6730      5936          beq.s     vsprintf_12
00003786  6E18      5937          bgt.s     vsprintf_15
00003788  0C80 0000 5938          cmp.l     #35,D0
0000378C  0023      
0000378E  6700 003E 5939          beq       vsprintf_14
00003792  6E00 0046 5940          bgt       vsprintf_9
00003796  0C80 0000 5941          cmp.l     #32,D0
0000379A  0020      
0000379C  6724      5942          beq.s     vsprintf_13
0000379E  603A      5943          bra.s     vsprintf_9
                    5944   vsprintf_15:
000037A0  0C80 0000 5945          cmp.l     #45,D0
000037A4  002D      
000037A6  6702      5946          beq.s     vsprintf_11
000037A8  6030      5947          bra.s     vsprintf_9
                    5948   vsprintf_11:
000037AA  1D7C 0001 5949          move.b    #1,-51(A6)
000037AE  FFCD      
000037B0  52AE 000C 5950          addq.l    #1,12(A6)
000037B4  6026      5951          bra.s     vsprintf_7
                    5952   vsprintf_12:
000037B6  1D7C 0001 5953          move.b    #1,-50(A6)
000037BA  FFCE      
000037BC  52AE 000C 5954          addq.l    #1,12(A6)
000037C0  601A      5955          bra.s     vsprintf_7
                    5956   vsprintf_13:
000037C2  1D7C 0001 5957          move.b    #1,-49(A6)
000037C6  FFCF      
000037C8  52AE 000C 5958          addq.l    #1,12(A6)
000037CC  600E      5959          bra.s     vsprintf_7
                    5960   vsprintf_14:
000037CE  1D7C 0001 5961          move.b    #1,-48(A6)
000037D2  FFD0      
000037D4  52AE 000C 5962          addq.l    #1,12(A6)
000037D8  6002      5963          bra.s     vsprintf_7
                    5964   vsprintf_9:
000037DA  6002      5965          bra.s     vsprintf_8
                    5966   vsprintf_7:
000037DC  6096      5967          bra       vsprintf_6
                    5968   vsprintf_8:
000037DE  206E 000C 5969          move.l    12(A6),A0
000037E2  1010      5970          move.b    (A0),D0
000037E4  4880      5971          ext.w     D0
000037E6  48C0      5972          ext.l     D0
000037E8  0C80 0000 5973          cmp.l     #48,D0
000037EC  0030      
000037EE  660A      5974          bne.s     vsprintf_16
000037F0  52AE 000C 5975          addq.l    #1,12(A6)
000037F4  1D7C 0001 5976          move.b    #1,-46(A6)
000037F8  FFD2      
                    5977   vsprintf_16:
000037FA  486E 0010 5978          pea       16(A6)
000037FE  486E 000C 5979          pea       12(A6)
00003802  6100 FE6E 5980          bsr       @vsprintf_getval
00003806  504F      5981          addq.w    #8,A7
00003808  2A40      5982          move.l    D0,A5
0000380A  206E 000C 5983          move.l    12(A6),A0
0000380E  1010      5984          move.b    (A0),D0
00003810  4880      5985          ext.w     D0
00003812  48C0      5986          ext.l     D0
00003814  0C80 0000 5987          cmp.l     #46,D0
00003818  002E      
0000381A  6614      5988          bne.s     vsprintf_18
0000381C  52AE 000C 5989          addq.l    #1,12(A6)
00003820  486E 0010 5990          pea       16(A6)
00003824  486E 000C 5991          pea       12(A6)
00003828  6100 FE48 5992          bsr       @vsprintf_getval
0000382C  504F      5993          addq.w    #8,A7
0000382E  2A00      5994          move.l    D0,D5
                    5995   vsprintf_18:
00003830  206E 000C 5996          move.l    12(A6),A0
00003834  1010      5997          move.b    (A0),D0
00003836  4880      5998          ext.w     D0
00003838  48C0      5999          ext.l     D0
0000383A  0C80 0000 6000          cmp.l     #108,D0
0000383E  006C      
00003840  660A      6001          bne.s     vsprintf_20
00003842  52AE 000C 6002          addq.l    #1,12(A6)
00003846  1D7C 0001 6003          move.b    #1,-45(A6)
0000384A  FFD3      
                    6004   vsprintf_20:
0000384C  206E 000C 6005          move.l    12(A6),A0
00003850  1010      6006          move.b    (A0),D0
00003852  4880      6007          ext.w     D0
00003854  48C0      6008          ext.l     D0
00003856  0C80 0000 6009          cmp.l     #111,D0
0000385A  006F      
0000385C  6700 00D4 6010          beq       vsprintf_27
00003860  6E34      6011          bgt.s     vsprintf_33
00003862  0C80 0000 6012          cmp.l     #100,D0
00003866  0064      
00003868  6700 0054 6013          beq       vsprintf_24
0000386C  6E1C      6014          bgt.s     vsprintf_34
0000386E  0C80 0000 6015          cmp.l     #99,D0
00003872  0063      
00003874  6700 012C 6016          beq       vsprintf_30
00003878  6E00 016A 6017          bgt       vsprintf_22
0000387C  0C80 0000 6018          cmp.l     #88,D0
00003880  0058      
00003882  6700 00E6 6019          beq       vsprintf_28
00003886  6000 015C 6020          bra       vsprintf_22
                    6021   vsprintf_34:
0000388A  0C80 0000 6022          cmp.l     #105,D0
0000388E  0069      
00003890  672C      6023          beq.s     vsprintf_24
00003892  6000 0150 6024          bra       vsprintf_22
                    6025   vsprintf_33:
00003896  0C80 0000 6026          cmp.l     #117,D0
0000389A  0075      
0000389C  6700 005C 6027          beq       vsprintf_26
000038A0  6E0E      6028          bgt.s     vsprintf_35
000038A2  0C80 0000 6029          cmp.l     #115,D0
000038A6  0073      
000038A8  6700 011C 6030          beq       vsprintf_31
000038AC  6000 0136 6031          bra       vsprintf_22
                    6032   vsprintf_35:
000038B0  0C80 0000 6033          cmp.l     #120,D0
000038B4  0078      
000038B6  6700 00B2 6034          beq       vsprintf_28
000038BA  6000 0128 6035          bra       vsprintf_22
                    6036   vsprintf_24:
000038BE  4A2E FFD3 6037          tst.b     -45(A6)
000038C2  671A      6038          beq.s     vsprintf_36
000038C4  4878 000A 6039          pea       10
000038C8  2F03      6040          move.l    D3,-(A7)
000038CA  206E 0010 6041          move.l    16(A6),A0
000038CE  58AE 0010 6042          addq.l    #4,16(A6)
000038D2  2F10      6043          move.l    (A0),-(A7)
000038D4  6100 061E 6044          bsr       _ltoa
000038D8  DEFC 000C 6045          add.w     #12,A7
000038DC  6018      6046          bra.s     vsprintf_37
                    6047   vsprintf_36:
000038DE  4878 000A 6048          pea       10
000038E2  2F03      6049          move.l    D3,-(A7)
000038E4  206E 0010 6050          move.l    16(A6),A0
000038E8  58AE 0010 6051          addq.l    #4,16(A6)
000038EC  2F10      6052          move.l    (A0),-(A7)
000038EE  6100 0604 6053          bsr       _ltoa
000038F2  DEFC 000C 6054          add.w     #12,A7
                    6055   vsprintf_37:
000038F6  6000 00FA 6056          bra       vsprintf_23
                    6057   vsprintf_26:
000038FA  4A2E FFD3 6058          tst.b     -45(A6)
000038FE  6718      6059          beq.s     vsprintf_38
00003900  4878 000A 6060          pea       10
00003904  2F03      6061          move.l    D3,-(A7)
00003906  206E 0010 6062          move.l    16(A6),A0
0000390A  58AE 0010 6063          addq.l    #4,16(A6)
0000390E  2F10      6064          move.l    (A0),-(A7)
00003910  4E94      6065          jsr       (A4)
00003912  DEFC 000C 6066          add.w     #12,A7
00003916  6016      6067          bra.s     vsprintf_39
                    6068   vsprintf_38:
00003918  4878 000A 6069          pea       10
0000391C  2F03      6070          move.l    D3,-(A7)
0000391E  206E 0010 6071          move.l    16(A6),A0
00003922  58AE 0010 6072          addq.l    #4,16(A6)
00003926  2F10      6073          move.l    (A0),-(A7)
00003928  4E94      6074          jsr       (A4)
0000392A  DEFC 000C 6075          add.w     #12,A7
                    6076   vsprintf_39:
0000392E  6000 00C2 6077          bra       vsprintf_23
                    6078   vsprintf_27:
00003932  4A2E FFD3 6079          tst.b     -45(A6)
00003936  6718      6080          beq.s     vsprintf_40
00003938  4878 0008 6081          pea       8
0000393C  2F03      6082          move.l    D3,-(A7)
0000393E  206E 0010 6083          move.l    16(A6),A0
00003942  58AE 0010 6084          addq.l    #4,16(A6)
00003946  2F10      6085          move.l    (A0),-(A7)
00003948  4E94      6086          jsr       (A4)
0000394A  DEFC 000C 6087          add.w     #12,A7
0000394E  6016      6088          bra.s     vsprintf_41
                    6089   vsprintf_40:
00003950  4878 0008 6090          pea       8
00003954  2F03      6091          move.l    D3,-(A7)
00003956  206E 0010 6092          move.l    16(A6),A0
0000395A  58AE 0010 6093          addq.l    #4,16(A6)
0000395E  2F10      6094          move.l    (A0),-(A7)
00003960  4E94      6095          jsr       (A4)
00003962  DEFC 000C 6096          add.w     #12,A7
                    6097   vsprintf_41:
00003966  6000 008A 6098          bra       vsprintf_23
                    6099   vsprintf_28:
0000396A  4A2E FFD3 6100          tst.b     -45(A6)
0000396E  6718      6101          beq.s     vsprintf_42
00003970  4878 0010 6102          pea       16
00003974  2F03      6103          move.l    D3,-(A7)
00003976  206E 0010 6104          move.l    16(A6),A0
0000397A  58AE 0010 6105          addq.l    #4,16(A6)
0000397E  2F10      6106          move.l    (A0),-(A7)
00003980  4E94      6107          jsr       (A4)
00003982  DEFC 000C 6108          add.w     #12,A7
00003986  6016      6109          bra.s     vsprintf_43
                    6110   vsprintf_42:
00003988  4878 0010 6111          pea       16
0000398C  2F03      6112          move.l    D3,-(A7)
0000398E  206E 0010 6113          move.l    16(A6),A0
00003992  58AE 0010 6114          addq.l    #4,16(A6)
00003996  2F10      6115          move.l    (A0),-(A7)
00003998  4E94      6116          jsr       (A4)
0000399A  DEFC 000C 6117          add.w     #12,A7
                    6118   vsprintf_43:
0000399E  6000 0052 6119          bra       vsprintf_23
                    6120   vsprintf_30:
000039A2  206E 0010 6121          move.l    16(A6),A0
000039A6  58AE 0010 6122          addq.l    #4,16(A6)
000039AA  2010      6123          move.l    (A0),D0
000039AC  2042      6124          move.l    D2,A0
000039AE  5282      6125          addq.l    #1,D2
000039B0  1080      6126          move.b    D0,(A0)
000039B2  2042      6127          move.l    D2,A0
000039B4  4210      6128          clr.b     (A0)
000039B6  200D      6129          move.l    A5,D0
000039B8  6704      6130          beq.s     vsprintf_44
000039BA  200D      6131          move.l    A5,D0
000039BC  6002      6132          bra.s     vsprintf_45
                    6133   vsprintf_44:
000039BE  7001      6134          moveq     #1,D0
                    6135   vsprintf_45:
000039C0  2A00      6136          move.l    D0,D5
000039C2  6000 002E 6137          bra       vsprintf_23
                    6138   vsprintf_31:
000039C6  206E 0010 6139          move.l    16(A6),A0
000039CA  58AE 0010 6140          addq.l    #4,16(A6)
000039CE  2610      6141          move.l    (A0),D3
000039D0  0C85 FFFF 6142          cmp.l     #-1,D5
000039D4  FFFF      
000039D6  660A      6143          bne.s     vsprintf_46
000039D8  2F03      6144          move.l    D3,-(A7)
000039DA  6100 05FE 6145          bsr       _strlen
000039DE  584F      6146          addq.w    #4,A7
000039E0  2A00      6147          move.l    D0,D5
                    6148   vsprintf_46:
000039E2  600E      6149          bra.s     vsprintf_23
                    6150   vsprintf_22:
000039E4  206E 000C 6151          move.l    12(A6),A0
000039E8  2242      6152          move.l    D2,A1
000039EA  5282      6153          addq.l    #1,D2
000039EC  1290      6154          move.b    (A0),(A1)
000039EE  2042      6155          move.l    D2,A0
000039F0  4210      6156          clr.b     (A0)
                    6157   vsprintf_23:
000039F2  2F03      6158          move.l    D3,-(A7)
000039F4  6100 05E4 6159          bsr       _strlen
000039F8  584F      6160          addq.w    #4,A7
000039FA  1800      6161          move.b    D0,D4
000039FC  206E 000C 6162          move.l    12(A6),A0
00003A00  1010      6163          move.b    (A0),D0
00003A02  4880      6164          ext.w     D0
00003A04  48C0      6165          ext.l     D0
00003A06  0C80 0000 6166          cmp.l     #115,D0
00003A0A  0073      
00003A0C  6618      6167          bne.s     vsprintf_48
00003A0E  0C85 0000 6168          cmp.l     #0,D5
00003A12  0000      
00003A14  6D10      6169          blt.s     vsprintf_48
00003A16  4884      6170          ext.w     D4
00003A18  48C4      6171          ext.l     D4
00003A1A  B885      6172          cmp.l     D5,D4
00003A1C  6F04      6173          ble.s     vsprintf_50
00003A1E  1005      6174          move.b    D5,D0
00003A20  6002      6175          bra.s     vsprintf_51
                    6176   vsprintf_50:
00003A22  1004      6177          move.b    D4,D0
                    6178   vsprintf_51:
00003A24  1800      6179          move.b    D0,D4
                    6180   vsprintf_48:
00003A26  206E 000C 6181          move.l    12(A6),A0
00003A2A  1010      6182          move.b    (A0),D0
00003A2C  4880      6183          ext.w     D0
00003A2E  48C0      6184          ext.l     D0
00003A30  0C80 0000 6185          cmp.l     #88,D0
00003A34  0058      
00003A36  6600 0026 6186          bne       vsprintf_56
00003A3A  41EE FFDC 6187          lea       -36(A6),A0
00003A3E  2408      6188          move.l    A0,D2
                    6189   vsprintf_54:
00003A40  2042      6190          move.l    D2,A0
00003A42  4A10      6191          tst.b     (A0)
00003A44  6718      6192          beq.s     vsprintf_56
00003A46  2042      6193          move.l    D2,A0
00003A48  1210      6194          move.b    (A0),D1
00003A4A  4881      6195          ext.w     D1
00003A4C  48C1      6196          ext.l     D1
00003A4E  2F01      6197          move.l    D1,-(A7)
00003A50  6100 F302 6198          bsr       _toupper
00003A54  584F      6199          addq.w    #4,A7
00003A56  2042      6200          move.l    D2,A0
00003A58  1080      6201          move.b    D0,(A0)
00003A5A  5282      6202          addq.l    #1,D2
00003A5C  60E2      6203          bra       vsprintf_54
                    6204   vsprintf_56:
00003A5E  7E00      6205          moveq     #0,D7
00003A60  41EE FFD4 6206          lea       -44(A6),A0
00003A64  2408      6207          move.l    A0,D2
00003A66  206E 000C 6208          move.l    12(A6),A0
00003A6A  1010      6209          move.b    (A0),D0
00003A6C  4880      6210          ext.w     D0
00003A6E  48C0      6211          ext.l     D0
00003A70  0C80 0000 6212          cmp.l     #100,D0
00003A74  0064      
00003A76  6714      6213          beq.s     vsprintf_59
00003A78  206E 000C 6214          move.l    12(A6),A0
00003A7C  1010      6215          move.b    (A0),D0
00003A7E  4880      6216          ext.w     D0
00003A80  48C0      6217          ext.l     D0
00003A82  0C80 0000 6218          cmp.l     #105,D0
00003A86  0069      
00003A88  6600 0076 6219          bne       vsprintf_65
                    6220   vsprintf_59:
00003A8C  4A2E FFCE 6221          tst.b     -50(A6)
00003A90  6612      6222          bne.s     vsprintf_62
00003A92  2043      6223          move.l    D3,A0
00003A94  1010      6224          move.b    (A0),D0
00003A96  4880      6225          ext.w     D0
00003A98  48C0      6226          ext.l     D0
00003A9A  0C80 0000 6227          cmp.l     #45,D0
00003A9E  002D      
00003AA0  6600 002E 6228          bne       vsprintf_60
                    6229   vsprintf_62:
00003AA4  2043      6230          move.l    D3,A0
00003AA6  1010      6231          move.b    (A0),D0
00003AA8  4880      6232          ext.w     D0
00003AAA  48C0      6233          ext.l     D0
00003AAC  0C80 0000 6234          cmp.l     #45,D0
00003AB0  002D      
00003AB2  660E      6235          bne.s     vsprintf_63
00003AB4  2043      6236          move.l    D3,A0
00003AB6  5283      6237          addq.l    #1,D3
00003AB8  2242      6238          move.l    D2,A1
00003ABA  5282      6239          addq.l    #1,D2
00003ABC  1290      6240          move.b    (A0),(A1)
00003ABE  5304      6241          subq.b    #1,D4
00003AC0  6008      6242          bra.s     vsprintf_64
                    6243   vsprintf_63:
00003AC2  2042      6244          move.l    D2,A0
00003AC4  5282      6245          addq.l    #1,D2
00003AC6  10BC 002B 6246          move.b    #43,(A0)
                    6247   vsprintf_64:
00003ACA  5287      6248          addq.l    #1,D7
00003ACC  6000 0032 6249          bra       vsprintf_65
                    6250   vsprintf_60:
00003AD0  4A2E FFCF 6251          tst.b     -49(A6)
00003AD4  6700 002A 6252          beq       vsprintf_65
00003AD8  2043      6253          move.l    D3,A0
00003ADA  1010      6254          move.b    (A0),D0
00003ADC  4880      6255          ext.w     D0
00003ADE  48C0      6256          ext.l     D0
00003AE0  0C80 0000 6257          cmp.l     #45,D0
00003AE4  002D      
00003AE6  660E      6258          bne.s     vsprintf_67
00003AE8  2043      6259          move.l    D3,A0
00003AEA  5283      6260          addq.l    #1,D3
00003AEC  2242      6261          move.l    D2,A1
00003AEE  5282      6262          addq.l    #1,D2
00003AF0  1290      6263          move.b    (A0),(A1)
00003AF2  5304      6264          subq.b    #1,D4
00003AF4  6008      6265          bra.s     vsprintf_68
                    6266   vsprintf_67:
00003AF6  2042      6267          move.l    D2,A0
00003AF8  5282      6268          addq.l    #1,D2
00003AFA  10BC 0020 6269          move.b    #32,(A0)
                    6270   vsprintf_68:
00003AFE  5287      6271          addq.l    #1,D7
                    6272   vsprintf_65:
00003B00  4A2E FFD0 6273          tst.b     -48(A6)
00003B04  6700 0066 6274          beq       vsprintf_77
00003B08  206E 000C 6275          move.l    12(A6),A0
00003B0C  1010      6276          move.b    (A0),D0
00003B0E  4880      6277          ext.w     D0
00003B10  48C0      6278          ext.l     D0
00003B12  0C80 0000 6279          cmp.l     #111,D0
00003B16  006F      
00003B18  671A      6280          beq.s     vsprintf_73
00003B1A  6E0C      6281          bgt.s     vsprintf_76
00003B1C  0C80 0000 6282          cmp.l     #88,D0
00003B20  0058      
00003B22  6710      6283          beq.s     vsprintf_73
00003B24  6000 0046 6284          bra       vsprintf_77
                    6285   vsprintf_76:
00003B28  0C80 0000 6286          cmp.l     #120,D0
00003B2C  0078      
00003B2E  6704      6287          beq.s     vsprintf_73
00003B30  6000 003A 6288          bra       vsprintf_77
                    6289   vsprintf_73:
00003B34  2042      6290          move.l    D2,A0
00003B36  5282      6291          addq.l    #1,D2
00003B38  10BC 0030 6292          move.b    #48,(A0)
00003B3C  5287      6293          addq.l    #1,D7
00003B3E  206E 000C 6294          move.l    12(A6),A0
00003B42  1010      6295          move.b    (A0),D0
00003B44  4880      6296          ext.w     D0
00003B46  48C0      6297          ext.l     D0
00003B48  0C80 0000 6298          cmp.l     #120,D0
00003B4C  0078      
00003B4E  6712      6299          beq.s     vsprintf_79
00003B50  206E 000C 6300          move.l    12(A6),A0
00003B54  1010      6301          move.b    (A0),D0
00003B56  4880      6302          ext.w     D0
00003B58  48C0      6303          ext.l     D0
00003B5A  0C80 0000 6304          cmp.l     #88,D0
00003B5E  0058      
00003B60  660A      6305          bne.s     vsprintf_77
                    6306   vsprintf_79:
00003B62  2042      6307          move.l    D2,A0
00003B64  5282      6308          addq.l    #1,D2
00003B66  10BC 0078 6309          move.b    #120,(A0)
00003B6A  5287      6310          addq.l    #1,D7
                    6311   vsprintf_77:
00003B6C  2042      6312          move.l    D2,A0
00003B6E  4210      6313          clr.b     (A0)
00003B70  206E 000C 6314          move.l    12(A6),A0
00003B74  1010      6315          move.b    (A0),D0
00003B76  4880      6316          ext.w     D0
00003B78  48C0      6317          ext.l     D0
00003B7A  0C80 0000 6318          cmp.l     #105,D0
00003B7E  0069      
00003B80  6700 0076 6319          beq       vsprintf_82
00003B84  6E42      6320          bgt.s     vsprintf_93
00003B86  0C80 0000 6321          cmp.l     #99,D0
00003B8A  0063      
00003B8C  6700 0084 6322          beq       vsprintf_96
00003B90  6E1C      6323          bgt.s     vsprintf_94
00003B92  0C80 0000 6324          cmp.l     #88,D0
00003B96  0058      
00003B98  6700 005E 6325          beq       vsprintf_82
00003B9C  6E00 0184 6326          bgt       vsprintf_80
00003BA0  0C80 0000 6327          cmp.l     #69,D0
00003BA4  0045      
00003BA6  6700 0050 6328          beq       vsprintf_82
00003BAA  6000 0176 6329          bra       vsprintf_80
                    6330   vsprintf_94:
00003BAE  0C80 0000 6331          cmp.l     #101,D0
00003BB2  0065      
00003BB4  6700 0042 6332          beq       vsprintf_82
00003BB8  6E00 0168 6333          bgt       vsprintf_80
00003BBC  0C80 0000 6334          cmp.l     #100,D0
00003BC0  0064      
00003BC2  6734      6335          beq.s     vsprintf_82
00003BC4  6000 015C 6336          bra       vsprintf_80
                    6337   vsprintf_93:
00003BC8  0C80 0000 6338          cmp.l     #117,D0
00003BCC  0075      
00003BCE  6728      6339          beq.s     vsprintf_82
00003BD0  6E1A      6340          bgt.s     vsprintf_95
00003BD2  0C80 0000 6341          cmp.l     #115,D0
00003BD6  0073      
00003BD8  6700 0038 6342          beq       vsprintf_96
00003BDC  6E00 0144 6343          bgt       vsprintf_80
00003BE0  0C80 0000 6344          cmp.l     #111,D0
00003BE4  006F      
00003BE6  6710      6345          beq.s     vsprintf_82
00003BE8  6000 0138 6346          bra       vsprintf_80
                    6347   vsprintf_95:
00003BEC  0C80 0000 6348          cmp.l     #120,D0
00003BF0  0078      
00003BF2  6704      6349          beq.s     vsprintf_82
00003BF4  6000 012C 6350          bra       vsprintf_80
                    6351   vsprintf_82:
00003BF8  4A2E FFD2 6352          tst.b     -46(A6)
00003BFC  6714      6353          beq.s     vsprintf_96
00003BFE  4A2E FFCD 6354          tst.b     -51(A6)
00003C02  660E      6355          bne.s     vsprintf_96
00003C04  200D      6356          move.l    A5,D0
00003C06  9087      6357          sub.l     D7,D0
00003C08  4884      6358          ext.w     D4
00003C0A  48C4      6359          ext.l     D4
00003C0C  9084      6360          sub.l     D4,D0
00003C0E  2D40 FFFC 6361          move.l    D0,-4(A6)
                    6362   vsprintf_96:
00003C12  202E FFFC 6363          move.l    -4(A6),D0
00003C16  0C80 0000 6364          cmp.l     #0,D0
00003C1A  0000      
00003C1C  6C04      6365          bge.s     vsprintf_98
00003C1E  42AE FFFC 6366          clr.l     -4(A6)
                    6367   vsprintf_98:
00003C22  4A2E FFCD 6368          tst.b     -51(A6)
00003C26  6600 0030 6369          bne       vsprintf_104
00003C2A  4884      6370          ext.w     D4
00003C2C  48C4      6371          ext.l     D4
00003C2E  2004      6372          move.l    D4,D0
00003C30  D0AE FFFC 6373          add.l     -4(A6),D0
00003C34  D087      6374          add.l     D7,D0
00003C36  1D40 FFD1 6375          move.b    D0,-47(A6)
                    6376   vsprintf_102:
00003C3A  102E FFD1 6377          move.b    -47(A6),D0
00003C3E  4880      6378          ext.w     D0
00003C40  48C0      6379          ext.l     D0
00003C42  220D      6380          move.l    A5,D1
00003C44  534D      6381          subq.w    #1,A5
00003C46  B081      6382          cmp.l     D1,D0
00003C48  6C0E      6383          bge.s     vsprintf_104
00003C4A  4878 0020 6384          pea       32
00003C4E  2F0A      6385          move.l    A2,-(A7)
00003C50  4E93      6386          jsr       (A3)
00003C52  504F      6387          addq.w    #8,A7
00003C54  5286      6388          addq.l    #1,D6
00003C56  60E2      6389          bra       vsprintf_102
                    6390   vsprintf_104:
00003C58  41EE FFD4 6391          lea       -44(A6),A0
00003C5C  2408      6392          move.l    A0,D2
                    6393   vsprintf_105:
00003C5E  2042      6394          move.l    D2,A0
00003C60  4A10      6395          tst.b     (A0)
00003C62  6716      6396          beq.s     vsprintf_107
00003C64  2042      6397          move.l    D2,A0
00003C66  5282      6398          addq.l    #1,D2
00003C68  1210      6399          move.b    (A0),D1
00003C6A  4881      6400          ext.w     D1
00003C6C  48C1      6401          ext.l     D1
00003C6E  2F01      6402          move.l    D1,-(A7)
00003C70  2F0A      6403          move.l    A2,-(A7)
00003C72  4E93      6404          jsr       (A3)
00003C74  504F      6405          addq.w    #8,A7
00003C76  5286      6406          addq.l    #1,D6
00003C78  60E4      6407          bra       vsprintf_105
                    6408   vsprintf_107:
00003C7A  202E FFFC 6409          move.l    -4(A6),D0
00003C7E  1D40 FFD1 6410          move.b    D0,-47(A6)
                    6411   vsprintf_108:
00003C82  102E FFD1 6412          move.b    -47(A6),D0
00003C86  532E FFD1 6413          subq.b    #1,-47(A6)
00003C8A  4A00      6414          tst.b     D0
00003C8C  670E      6415          beq.s     vsprintf_110
00003C8E  4878 0030 6416          pea       48
00003C92  2F0A      6417          move.l    A2,-(A7)
00003C94  4E93      6418          jsr       (A3)
00003C96  504F      6419          addq.w    #8,A7
00003C98  5286      6420          addq.l    #1,D6
00003C9A  60E6      6421          bra       vsprintf_108
                    6422   vsprintf_110:
00003C9C  2043      6423          move.l    D3,A0
00003C9E  4A10      6424          tst.b     (A0)
00003CA0  6700 0048 6425          beq       vsprintf_113
00003CA4  206E 000C 6426          move.l    12(A6),A0
00003CA8  1010      6427          move.b    (A0),D0
00003CAA  4880      6428          ext.w     D0
00003CAC  48C0      6429          ext.l     D0
00003CAE  0C80 0000 6430          cmp.l     #115,D0
00003CB2  0073      
00003CB4  670C      6431          beq.s     vsprintf_116
00003CB6  6E18      6432          bgt.s     vsprintf_119
00003CB8  0C80 0000 6433          cmp.l     #99,D0
00003CBC  0063      
00003CBE  6702      6434          beq.s     vsprintf_116
00003CC0  600E      6435          bra.s     vsprintf_119
                    6436   vsprintf_116:
00003CC2  2005      6437          move.l    D5,D0
00003CC4  5385      6438          subq.l    #1,D5
00003CC6  0C80 0000 6439          cmp.l     #0,D0
00003CCA  0000      
00003CCC  6E02      6440          bgt.s     vsprintf_119
00003CCE  6016      6441          bra.s     vsprintf_115
                    6442   vsprintf_119:
00003CD0  2043      6443          move.l    D3,A0
00003CD2  5283      6444          addq.l    #1,D3
00003CD4  1210      6445          move.b    (A0),D1
00003CD6  4881      6446          ext.w     D1
00003CD8  48C1      6447          ext.l     D1
00003CDA  2F01      6448          move.l    D1,-(A7)
00003CDC  2F0A      6449          move.l    A2,-(A7)
00003CDE  4E93      6450          jsr       (A3)
00003CE0  504F      6451          addq.w    #8,A7
00003CE2  5286      6452          addq.l    #1,D6
00003CE4  6002      6453          bra.s     vsprintf_112
                    6454   vsprintf_115:
00003CE6  6002      6455          bra.s     vsprintf_113
                    6456   vsprintf_112:
00003CE8  60B2      6457          bra       vsprintf_110
                    6458   vsprintf_113:
00003CEA  4A2E FFCD 6459          tst.b     -51(A6)
00003CEE  6700 0030 6460          beq       vsprintf_125
00003CF2  4884      6461          ext.w     D4
00003CF4  48C4      6462          ext.l     D4
00003CF6  2004      6463          move.l    D4,D0
00003CF8  D0AE FFFC 6464          add.l     -4(A6),D0
00003CFC  D087      6465          add.l     D7,D0
00003CFE  1D40 FFD1 6466          move.b    D0,-47(A6)
                    6467   vsprintf_123:
00003D02  102E FFD1 6468          move.b    -47(A6),D0
00003D06  4880      6469          ext.w     D0
00003D08  48C0      6470          ext.l     D0
00003D0A  220D      6471          move.l    A5,D1
00003D0C  534D      6472          subq.w    #1,A5
00003D0E  B081      6473          cmp.l     D1,D0
00003D10  6C0E      6474          bge.s     vsprintf_125
00003D12  4878 0020 6475          pea       32
00003D16  2F0A      6476          move.l    A2,-(A7)
00003D18  4E93      6477          jsr       (A3)
00003D1A  504F      6478          addq.w    #8,A7
00003D1C  5386      6479          subq.l    #1,D6
00003D1E  60E2      6480          bra       vsprintf_123
                    6481   vsprintf_125:
00003D20  6014      6482          bra.s     vsprintf_81
                    6483   vsprintf_80:
00003D22  206E 000C 6484          move.l    12(A6),A0
00003D26  1210      6485          move.b    (A0),D1
00003D28  4881      6486          ext.w     D1
00003D2A  48C1      6487          ext.l     D1
00003D2C  2F01      6488          move.l    D1,-(A7)
00003D2E  2F0A      6489          move.l    A2,-(A7)
00003D30  4E93      6490          jsr       (A3)
00003D32  504F      6491          addq.w    #8,A7
00003D34  5286      6492          addq.l    #1,D6
                    6493   vsprintf_81:
00003D36  52AE 000C 6494          addq.l    #1,12(A6)
                    6495   vsprintf_2:
00003D3A  6000 F9D6 6496          bra       vsprintf_1
                    6497   vsprintf_3:
00003D3E  4A92      6498          tst.l     (A2)
00003D40  6710      6499          beq.s     vsprintf_126
00003D42  4201      6500          clr.b     D1
00003D44  C2BC 0000 6501          and.l     #255,D1
00003D48  00FF      
00003D4A  2F01      6502          move.l    D1,-(A7)
00003D4C  2F0A      6503          move.l    A2,-(A7)
00003D4E  4E93      6504          jsr       (A3)
00003D50  504F      6505          addq.w    #8,A7
                    6506   vsprintf_126:
00003D52  2006      6507          move.l    D6,D0
00003D54  4CDF 3CFC 6508          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003D58  4E5E      6509          unlk      A6
00003D5A  4E75      6510          rts
                    6511   ULMUL:
00003D5C  4E56 0000 6512          link    A6,#0
00003D60  48E7 C000 6513          movem.l D0/D1,-(A7)
00003D64  222E 0008 6514          move.l  8(A6),D1
00003D68  202E 000C 6515          move.l  12(A6),D0
00003D6C  602C      6516          bra.s   lmul_3
                    6517   LMUL:
00003D6E  4E56 0000 6518          link    A6,#0
00003D72  48E7 C000 6519          movem.l D0/D1,-(A7)
00003D76  222E 0008 6520          move.l  8(A6),D1
00003D7A  202E 000C 6521          move.l  12(A6),D0
00003D7E  4A80      6522          tst.l   D0
00003D80  6A0A      6523          bpl.s   lmul_1
00003D82  4480      6524          neg.l   D0
00003D84  4A81      6525          tst.l   D1
00003D86  6A0A      6526          bpl.s   lmul_2
00003D88  4481      6527          neg.l   D1
00003D8A  600E      6528          bra.s   lmul_3
                    6529   lmul_1:
00003D8C  4A81      6530          tst.l   D1
00003D8E  6A0A      6531          bpl.s   lmul_3
00003D90  4481      6532          neg.l   D1
                    6533   lmul_2:
00003D92  6114      6534          bsr.s   domul
00003D94  4481      6535          neg.l   D1
00003D96  4080      6536          negx.l  D0
00003D98  6002      6537          bra.s   lmul_4
                    6538   lmul_3:
00003D9A  610C      6539          bsr.s   domul
                    6540   lmul_4:
00003D9C  2D41 0008 6541          move.l  D1,8(A6)
00003DA0  4CDF 0003 6542          movem.l (A7)+,D0/D1
00003DA4  4E5E      6543          unlk    A6
00003DA6  4E75      6544          rts
                    6545   domul:
00003DA8  0C81 0000 6546          cmpi.l  #$FFFF,D1
00003DAC  FFFF      
00003DAE  620C      6547          bhi.s   domul_1
00003DB0  0C80 0000 6548          cmpi.l  #$FFFF,D0
00003DB4  FFFF      
00003DB6  620E      6549          bhi.s   domul_2
00003DB8  C2C0      6550          mulu    D0,D1
00003DBA  4E75      6551          rts
                    6552   domul_1:
00003DBC  0C80 0000 6553          cmpi.l  #$FFFF,D0
00003DC0  FFFF      
00003DC2  6218      6554          bhi.s   domul_4
00003DC4  6002      6555          bra.s   domul_3
                    6556   domul_2
00003DC6  C141      6557          exg     D0,D1
                    6558   domul_3:
00003DC8  2F02      6559          move.l  D2,-(A7)
00003DCA  2401      6560          move.l  D1,D2
00003DCC  4842      6561          swap    D2
00003DCE  C2C0      6562          mulu    D0,D1
00003DD0  C4C0      6563          mulu    D0,D2
00003DD2  4842      6564          swap    D2
00003DD4  4242      6565          clr.w   D2
00003DD6  D282      6566          add.l   D2,D1
00003DD8  241F      6567          move.l  (A7)+,D2
00003DDA  4E75      6568          rts
                    6569   domul_4:
00003DDC  48E7 3000 6570          movem.l D2/D3,-(A7)
00003DE0  2401      6571          move.l  D1,D2
00003DE2  2601      6572          move.l  D1,D3
00003DE4  C2C0      6573          mulu    D0,D1
00003DE6  4842      6574          swap    D2
00003DE8  C4C0      6575          mulu    D0,D2
00003DEA  4840      6576          swap    D0
00003DEC  C6C0      6577          mulu    D0,D3
00003DEE  D483      6578          add.l   D3,D2
00003DF0  4842      6579          swap    D2
00003DF2  4242      6580          clr.w   D2
00003DF4  D282      6581          add.l   D2,D1
00003DF6  4CDF 000C 6582          movem.l (A7)+,D2/D3
00003DFA  4E75      6583          rts
                    6584   _gets:
00003DFC  4E56 0000 6585          link      A6,#0
00003E00  48E7 3820 6586          movem.l   D2/D3/D4/A2,-(A7)
00003E04  45F8 2C5A 6587          lea       _putch,A2
00003E08  282E 0008 6588          move.l    8(A6),D4
00003E0C  2404      6589          move.l    D4,D2
                    6590   gets_1:
00003E0E  6100 EE7A 6591          bsr       _getch
00003E12  2600      6592          move.l    D0,D3
00003E14  0C80 0000 6593          cmp.l     #10,D0
00003E18  000A      
00003E1A  6700 003C 6594          beq       gets_3
00003E1E  0C83 0000 6595          cmp.l     #8,D3
00003E22  0008      
00003E24  6712      6596          beq.s     gets_4
00003E26  2042      6597          move.l    D2,A0
00003E28  5282      6598          addq.l    #1,D2
00003E2A  1083      6599          move.b    D3,(A0)
00003E2C  4883      6600          ext.w     D3
00003E2E  48C3      6601          ext.l     D3
00003E30  2F03      6602          move.l    D3,-(A7)
00003E32  4E92      6603          jsr       (A2)
00003E34  584F      6604          addq.w    #4,A7
00003E36  601E      6605          bra.s     gets_6
                    6606   gets_4:
00003E38  B484      6607          cmp.l     D4,D2
00003E3A  631A      6608          bls.s     gets_6
00003E3C  4878 0008 6609          pea       8
00003E40  4E92      6610          jsr       (A2)
00003E42  584F      6611          addq.w    #4,A7
00003E44  4878 0020 6612          pea       32
00003E48  4E92      6613          jsr       (A2)
00003E4A  584F      6614          addq.w    #4,A7
00003E4C  4878 0008 6615          pea       8
00003E50  4E92      6616          jsr       (A2)
00003E52  584F      6617          addq.w    #4,A7
00003E54  5382      6618          subq.l    #1,D2
                    6619   gets_6:
00003E56  60B6      6620          bra       gets_1
                    6621   gets_3:
00003E58  4878 000A 6622          pea       10
00003E5C  4E92      6623          jsr       (A2)
00003E5E  584F      6624          addq.w    #4,A7
00003E60  2042      6625          move.l    D2,A0
00003E62  4210      6626          clr.b     (A0)
00003E64  2004      6627          move.l    D4,D0
00003E66  4CDF 041C 6628          movem.l   (A7)+,D2/D3/D4/A2
00003E6A  4E5E      6629          unlk      A6
00003E6C  4E75      6630          rts
                    6631   _ungetch:
00003E6E  4E56 0000 6632          link      A6,#0
00003E72  23EE 0008 6633          move.l    8(A6),__ungetbuf
00003E76  0803 00C0 
00003E7A  202E 0008 6634          move.l    8(A6),D0
00003E7E  4E5E      6635          unlk      A6
00003E80  4E75      6636          rts
                    6637   @itoa_convert:
00003E82  4E56 0000 6638          link      A6,#0
00003E86  48E7 3C00 6639          movem.l   D2/D3/D4/D5,-(A7)
00003E8A  242E 0008 6640          move.l    8(A6),D2
00003E8E  262E 0010 6641          move.l    16(A6),D3
00003E92  2A2E 000C 6642          move.l    12(A6),D5
00003E96  2F05      6643          move.l    D5,-(A7)
00003E98  2F03      6644          move.l    D3,-(A7)
00003E9A  6100 ECE0 6645          bsr       ULDIV
00003E9E  202F 0004 6646          move.l    4(A7),D0
00003EA2  504F      6647          addq.w    #8,A7
00003EA4  2800      6648          move.l    D0,D4
00003EA6  BA83      6649          cmp.l     D3,D5
00003EA8  651A      6650          blo.s     @itoa_convert_1
00003EAA  2F03      6651          move.l    D3,-(A7)
00003EAC  2F05      6652          move.l    D5,-(A7)
00003EAE  2F03      6653          move.l    D3,-(A7)
00003EB0  6100 ECCA 6654          bsr       ULDIV
00003EB4  2217      6655          move.l    (A7),D1
00003EB6  504F      6656          addq.w    #8,A7
00003EB8  2F01      6657          move.l    D1,-(A7)
00003EBA  2F02      6658          move.l    D2,-(A7)
00003EBC  61C4      6659          bsr       @itoa_convert
00003EBE  DEFC 000C 6660          add.w     #12,A7
00003EC2  2400      6661          move.l    D0,D2
                    6662   @itoa_convert_1:
00003EC4  0C84 0000 6663          cmp.l     #9,D4
00003EC8  0009      
00003ECA  6E0A      6664          bgt.s     @itoa_convert_3
00003ECC  2004      6665          move.l    D4,D0
00003ECE  0680 0000 6666          add.l     #48,D0
00003ED2  0030      
00003ED4  600E      6667          bra.s     @itoa_convert_4
                    6668   @itoa_convert_3:
00003ED6  2004      6669          move.l    D4,D0
00003ED8  0680 0000 6670          add.l     #97,D0
00003EDC  0061      
00003EDE  0480 0000 6671          sub.l     #10,D0
00003EE2  000A      
                    6672   @itoa_convert_4:
00003EE4  2042      6673          move.l    D2,A0
00003EE6  1080      6674          move.b    D0,(A0)
00003EE8  2002      6675          move.l    D2,D0
00003EEA  5280      6676          addq.l    #1,D0
00003EEC  4CDF 003C 6677          movem.l   (A7)+,D2/D3/D4/D5
00003EF0  4E5E      6678          unlk      A6
00003EF2  4E75      6679          rts
                    6680   _ltoa:
00003EF4  4E56 0000 6681          link      A6,#0
00003EF8  48E7 3C00 6682          movem.l   D2/D3/D4/D5,-(A7)
00003EFC  242E 0008 6683          move.l    8(A6),D2
00003F00  262E 000C 6684          move.l    12(A6),D3
00003F04  2A2E 0010 6685          move.l    16(A6),D5
00003F08  2803      6686          move.l    D3,D4
00003F0A  0C85 0000 6687          cmp.l     #2,D5
00003F0E  0002      
00003F10  6D08      6688          blt.s     ltoa_3
00003F12  0C85 0000 6689          cmp.l     #36,D5
00003F16  0024      
00003F18  6F06      6690          ble.s     ltoa_1
                    6691   ltoa_3:
00003F1A  2003      6692          move.l    D3,D0
00003F1C  6000 0052 6693          bra       ltoa_4
                    6694   ltoa_1:
00003F20  0C85 0000 6695          cmp.l     #10,D5
00003F24  000A      
00003F26  6600 0032 6696          bne       ltoa_5
00003F2A  0C82 0000 6697          cmp.l     #0,D2
00003F2E  0000      
00003F30  6C28      6698          bge.s     ltoa_5
00003F32  2002      6699          move.l    D2,D0
00003F34  4480      6700          neg.l     D0
00003F36  2400      6701          move.l    D0,D2
00003F38  0C82 0000 6702          cmp.l     #0,D2
00003F3C  0000      
00003F3E  6C12      6703          bge.s     ltoa_7
00003F40  4879 0000 6704          pea       @itoa_1
00003F44  5412      
00003F46  2F03      6705          move.l    D3,-(A7)
00003F48  6100 EC22 6706          bsr       _strcpy
00003F4C  504F      6707          addq.w    #8,A7
00003F4E  2003      6708          move.l    D3,D0
00003F50  601E      6709          bra.s     ltoa_4
                    6710   ltoa_7:
00003F52  2044      6711          move.l    D4,A0
00003F54  5284      6712          addq.l    #1,D4
00003F56  10BC 002D 6713          move.b    #45,(A0)
                    6714   ltoa_5:
00003F5A  2F05      6715          move.l    D5,-(A7)
00003F5C  2F02      6716          move.l    D2,-(A7)
00003F5E  2F04      6717          move.l    D4,-(A7)
00003F60  6100 FF20 6718          bsr       @itoa_convert
00003F64  DEFC 000C 6719          add.w     #12,A7
00003F68  2800      6720          move.l    D0,D4
00003F6A  2044      6721          move.l    D4,A0
00003F6C  4210      6722          clr.b     (A0)
00003F6E  2003      6723          move.l    D3,D0
                    6724   ltoa_4:
00003F70  4CDF 003C 6725          movem.l   (A7)+,D2/D3/D4/D5
00003F74  4E5E      6726          unlk      A6
00003F76  4E75      6727          rts
                    6728   _ultoa:
00003F78  4E56 0000 6729          link      A6,#0
00003F7C  48E7 3800 6730          movem.l   D2/D3/D4,-(A7)
00003F80  262E 0010 6731          move.l    16(A6),D3
00003F84  282E 000C 6732          move.l    12(A6),D4
00003F88  2404      6733          move.l    D4,D2
00003F8A  0C83 0000 6734          cmp.l     #2,D3
00003F8E  0002      
00003F90  6D08      6735          blt.s     ultoa_3
00003F92  0C83 0000 6736          cmp.l     #36,D3
00003F96  0024      
00003F98  6F04      6737          ble.s     ultoa_1
                    6738   ultoa_3:
00003F9A  2004      6739          move.l    D4,D0
00003F9C  6018      6740          bra.s     ultoa_4
                    6741   ultoa_1:
00003F9E  2F03      6742          move.l    D3,-(A7)
00003FA0  2F2E 0008 6743          move.l    8(A6),-(A7)
00003FA4  2F02      6744          move.l    D2,-(A7)
00003FA6  6100 FEDA 6745          bsr       @itoa_convert
00003FAA  DEFC 000C 6746          add.w     #12,A7
00003FAE  2400      6747          move.l    D0,D2
00003FB0  2042      6748          move.l    D2,A0
00003FB2  4210      6749          clr.b     (A0)
00003FB4  2004      6750          move.l    D4,D0
                    6751   ultoa_4:
00003FB6  4CDF 001C 6752          movem.l   (A7)+,D2/D3/D4
00003FBA  4E5E      6753          unlk      A6
00003FBC  4E75      6754          rts
                    6755   _itoa:
00003FBE  4E56 0000 6756          link      A6,#0
00003FC2  2F2E 0010 6757          move.l    16(A6),-(A7)
00003FC6  2F2E 000C 6758          move.l    12(A6),-(A7)
00003FCA  2F2E 0008 6759          move.l    8(A6),-(A7)
00003FCE  6100 FF24 6760          bsr       _ltoa
00003FD2  DEFC 000C 6761          add.w     #12,A7
00003FD6  4E5E      6762          unlk      A6
00003FD8  4E75      6763          rts
                    6764   _strlen:
00003FDA  206F 0004 6765          move.l    (4,A7),A0
00003FDE  2248      6766          move.l    A0,A1
                    6767   strlen_1:
00003FE0  4A19      6768          tst.b     (A1)+
00003FE2  66FC      6769          bne       strlen_1
00003FE4  2009      6770          move.l    A1,D0
00003FE6  9088      6771          sub.l     A0,D0
00003FE8  5380      6772          subq.l    #1,D0
00003FEA  4E75      6773          rts
                    6774          section   const
                    6775   
                    6776   @m68kde~1_1:
00003FEC  0D0A 00   6777          dc.b      13,10,0
                    6778   @m68kde~1_2:
00003FF0  0D53 7769 6779          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003FF4  7463 6865 
00003FF8  7320 5357 
00003FFC  5B        
00003FFD  372D 305D 6780          dc.b      55,45,48,93,32,61,32,0
00004001  203D 2000 
                    6781   @m68kde~1_3:
00004006  3000      6782          dc.b      48,0
                    6783   @m68kde~1_4:
00004008  3100      6784          dc.b      49,0
                    6785   @m68kde~1_5:
0000400A  0D0A 4475 6786          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
0000400E  6D70 204D 
00004012  656D 6F72 
00004016  79        
00004017  2042 6C6F 6787          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
0000401B  636B 3A20 
0000401F  3C45 5343 
00004023  3E20      
00004025  746F 2041 6788          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004029  626F 7274 
0000402D  2C20 3C53 
00004031  50        
00004032  4143 453E 6789          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004036  2074 6F20 
0000403A  436F 6E74 
0000403E  69        
0000403F  6E75 6500 6790          dc.b      110,117,101,0
                    6791   @m68kde~1_6:
00004044  0D0A 456E 6792          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004048  7465 7220 
0000404C  5374 6172 
00004050  74        
00004051  2041 6464 6793          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004055  7265 7373 
00004059  3A20 00   
                    6794   @m68kde~1_7:
0000405C  0D0A 2530 6795          dc.b      13,10,37,48,56,120,32,0
00004060  3878 2000 
                    6796   @m68kde~1_8:
00004064  2530 3258 6797          dc.b      37,48,50,88,0
00004068  00        
                    6798   @m68kde~1_9:
0000406A  2020 00   6799          dc.b      32,32,0
                    6800   @m68kde~1_10:
0000406E  0D0A 4669 6801          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004072  6C6C 204D 
00004076  656D 6F72 
0000407A  79        
0000407B  2042 6C6F 6802          dc.b      32,66,108,111,99,107,0
0000407F  636B 00   
                    6803   @m68kde~1_11:
00004082  0D0A 456E 6804          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004086  7465 7220 
0000408A  456E 6420 
0000408E  41        
0000408F  6464 7265 6805          dc.b      100,100,114,101,115,115,58,32,0
00004093  7373 3A20 
00004097  00        
                    6806   @m68kde~1_12:
00004098  0D0A 456E 6807          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
0000409C  7465 7220 
000040A0  4669 6C6C 
000040A4  20        
000040A5  4461 7461 6808          dc.b      68,97,116,97,58,32,0
000040A9  3A20 00   
                    6809   @m68kde~1_13:
000040AC  0D0A 4669 6810          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000040B0  6C6C 696E 
000040B4  6720 4164 
000040B8  64        
000040B9  7265 7373 6811          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000040BD  6573 205B 
000040C1  2425 3038 
000040C5  58        
000040C6  202D 2024 6812          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000040CA  2530 3858 
000040CE  5D20 7769 
000040D2  7468      
000040D4  2024 2530 6813          dc.b      32,36,37,48,50,88,0
000040D8  3258 00   
                    6814   @m68kde~1_14:
000040DC  0D0A 5573 6815          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000040E0  6520 4879 
000040E4  7065 7254 
000040E8  65        
000040E9  726D 696E 6816          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000040ED  616C 2074 
000040F1  6F20 5365 
000040F5  6E64 2054 6817          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000040F9  6578 7420 
000040FD  4669 6C65 
00004101  2028 2E68 6818          dc.b      32,40,46,104,101,120,41,13,10,0
00004105  6578 290D 
00004109  0A00      
                    6819   @m68kde~1_15:
0000410C  0D0A 4C6F 6820          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004110  6164 2046 
00004114  6169 6C65 
00004118  64        
00004119  2061 7420 6821          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000411D  4164 6472 
00004121  6573 7320 
00004125  3D        
00004126  205B 2425 6822          dc.b      32,91,36,37,48,56,88,93,13,10,0
0000412A  3038 585D 
0000412E  0D0A 00   
                    6823   @m68kde~1_16:
00004132  0D0A 5375 6824          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004136  6363 6573 
0000413A  733A 2044 
0000413E  6F        
0000413F  776E 6C6F 6825          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004143  6164 6564 
00004147  2025 6420 
0000414B  6279 7465 6826          dc.b      98,121,116,101,115,13,10,0
0000414F  730D 0A00 
                    6827   @m68kde~1_17:
00004154  0D0A 4578 6828          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004158  616D 696E 
0000415C  6520 616E 
00004160  64        
00004161  2043 6861 6829          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004165  6E67 6520 
00004169  4D65 6D6F 
0000416D  72        
0000416E  7900      6830          dc.b      121,0
                    6831   @m68kde~1_18:
00004170  0D0A 3C45 6832          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004174  5343 3E20 
00004178  746F 2053 
0000417C  746F      
0000417E  702C 203C 6833          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004182  5350 4143 
00004186  453E 2074 
0000418A  6F20      
0000418C  4164 7661 6834          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00004190  6E63 652C 
00004194  2027 2D27 
00004198  2074      
0000419A  6F20 476F 6835          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
0000419E  2042 6163 
000041A2  6B2C 203C 
000041A6  4441      
000041A8  5441 3E20 6836          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000041AC  746F 2063 
000041B0  6861 6E67 
000041B4  65        
000041B5  00        6837          dc.b      0
                    6838   @m68kde~1_19:
000041B6  0D0A 456E 6839          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000041BA  7465 7220 
000041BE  4164 6472 
000041C2  65        
000041C3  7373 3A20 6840          dc.b      115,115,58,32,0
000041C7  00        
                    6841   @m68kde~1_20:
000041C8  0D0A 5B25 6842          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000041CC  3038 785D 
000041D0  203A 2025 
000041D4  3032 78   
000041D7  2020 00   6843          dc.b      32,32,0
                    6844   @m68kde~1_21:
000041DA  0D0A 5761 6845          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000041DE  726E 696E 
000041E2  6720 4368 
000041E6  61        
000041E7  6E67 6520 6846          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000041EB  4661 696C 
000041EF  6564 3A20 
000041F3  57        
000041F4  726F 7465 6847          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000041F8  205B 2530 
000041FC  3278 5D2C 
00004200  20        
00004201  5265 6164 6848          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004205  205B 2530 
00004209  3278 5D00 
                    6849   @m68kde~1_22:
0000420E  0D0A 4C6F 6850          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00004212  6164 696E 
00004216  6720 5072 
0000421A  6F        
0000421B  6772 616D 6851          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
0000421F  2046 726F 
00004223  6D20 5350 
00004227  49        
00004228  2046 6C61 6852          dc.b      32,70,108,97,115,104,46,46,46,46,0
0000422C  7368 2E2E 
00004230  2E2E 00   
                    6853   @m68kde~1_23:
00004234  2425 3038 6854          dc.b      36,37,48,56,88,32,32,0
00004238  5820 2000 
                    6855   @m68kde~1_24:
0000423C  2000      6856          dc.b      32,0
                    6857   @m68kde~1_25:
0000423E  2E00      6858          dc.b      46,0
                    6859   @m68kde~1_26:
00004240  2563 00   6860          dc.b      37,99,0
                    6861   @m68kde~1_27:
00004244  00        6862          dc.b      0
                    6863   @m68kde~1_28:
00004246  0D0A 0D0A 6864          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
0000424A  2044 3020 
0000424E  3D20 2425 
00004252  3038 58   
00004255  2020 4130 6865          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004259  203D 2024 
0000425D  2530 3858 
00004261  00        
                    6866   @m68kde~1_29:
00004262  0D0A 2044 6867          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004266  3120 3D20 
0000426A  2425 3038 
0000426E  5820 20   
00004271  4131 203D 6868          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004275  2024 2530 
00004279  3858 00   
                    6869   @m68kde~1_30:
0000427C  0D0A 2044 6870          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004280  3220 3D20 
00004284  2425 3038 
00004288  5820 20   
0000428B  4132 203D 6871          dc.b      65,50,32,61,32,36,37,48,56,88,0
0000428F  2024 2530 
00004293  3858 00   
                    6872   @m68kde~1_31:
00004296  0D0A 2044 6873          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
0000429A  3320 3D20 
0000429E  2425 3038 
000042A2  5820 20   
000042A5  4133 203D 6874          dc.b      65,51,32,61,32,36,37,48,56,88,0
000042A9  2024 2530 
000042AD  3858 00   
                    6875   @m68kde~1_32:
000042B0  0D0A 2044 6876          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000042B4  3420 3D20 
000042B8  2425 3038 
000042BC  5820 20   
000042BF  4134 203D 6877          dc.b      65,52,32,61,32,36,37,48,56,88,0
000042C3  2024 2530 
000042C7  3858 00   
                    6878   @m68kde~1_33:
000042CA  0D0A 2044 6879          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000042CE  3520 3D20 
000042D2  2425 3038 
000042D6  5820 20   
000042D9  4135 203D 6880          dc.b      65,53,32,61,32,36,37,48,56,88,0
000042DD  2024 2530 
000042E1  3858 00   
                    6881   @m68kde~1_34:
000042E4  0D0A 2044 6882          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000042E8  3620 3D20 
000042EC  2425 3038 
000042F0  5820 20   
000042F3  4136 203D 6883          dc.b      65,54,32,61,32,36,37,48,56,88,0
000042F7  2024 2530 
000042FB  3858 00   
                    6884   @m68kde~1_35:
000042FE  0D0A 2044 6885          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004302  3720 3D20 
00004306  2425 3038 
0000430A  5820 20   
0000430D  4137 203D 6886          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004311  2024 2530 
00004315  3858 00   
                    6887   @m68kde~1_36:
00004318  0D0A 0D0A 6888          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
0000431C  5553 5020 
00004320  3D20 2425 
00004324  3038 58   
00004327  2020 2841 6889          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
0000432B  3729 2055 
0000432F  7365 7220 
00004333  5350      
00004335  00        6890          dc.b      0
                    6891   @m68kde~1_37:
00004336  0D0A 5353 6892          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
0000433A  5020 3D20 
0000433E  2425 3038 
00004342  5820 20   
00004345  2841 3729 6893          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004349  2053 7570 
0000434D  6572 7669 
00004351  73        
00004352  6F72 2053 6894          dc.b      111,114,32,83,80,0
00004356  5000      
                    6895   @m68kde~1_38:
00004358  0D0A 2053 6896          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
0000435C  5220 3D20 
00004360  2425 3034 
00004364  5820 20   
00004367  2000      6897          dc.b      32,0
                    6898   @m68kde~1_39:
0000436A  2020 205B 6899          dc.b      32,32,32,91,0
0000436E  00        
                    6900   @m68kde~1_40:
00004370  0D0A 2050 6901          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004374  4320 3D20 
00004378  2425 3038 
0000437C  5820 20   
0000437F  00        6902          dc.b      0
                    6903   @m68kde~1_41:
00004380  5B40 2042 6904          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004384  5245 414B 
00004388  504F 494E 
0000438C  545D 00   
                    6905   @m68kde~1_42:
00004390  0D0A 5750 6906          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004394  2564 203D 
00004398  2025 7300 
                    6907   @m68kde~1_43:
0000439C  0D0A 0D0A 6908          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000043A0  0D0A 0D0A 
000043A4  0D0A 0D0A 
000043A8  5369 6E   
000043AB  676C 6520 6909          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000043AF  5374 6570 
000043B3  2020 3A5B 
000043B7  4F        
000043B8  4E5D 00   6910          dc.b      78,93,0
                    6911   @m68kde~1_44:
000043BC  0D0A 4272 6912          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000043C0  6561 6B20 
000043C4  506F 696E 
000043C8  74        
000043C9  7320 3A5B 6913          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000043CD  4469 7361 
000043D1  626C 6564 
000043D5  5D        
000043D6  00        6914          dc.b      0
                    6915   @m68kde~1_45:
000043D8  0D0A 5072 6916          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000043DC  6573 7320 
000043E0  3C53 5041 
000043E4  4345      
000043E6  3E20 746F 6917          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000043EA  2045 7865 
000043EE  6375 7465 
000043F2  20        
000043F3  4E65 7874 6918          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000043F7  2049 6E73 
000043FB  7472 7563 
000043FF  7469 6F6E 6919          dc.b      116,105,111,110,0
00004403  00        
                    6920   @m68kde~1_46:
00004404  0D0A 5072 6921          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004408  6573 7320 
0000440C  3C45 5343 
00004410  3E20      
00004412  746F 2052 6922          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004416  6573 756D 
0000441A  6520 5072 
0000441E  6F67 7261 6923          dc.b      111,103,114,97,109,0
00004422  6D00      
                    6924   @m68kde~1_47:
00004424  0D0A 496C 6925          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004428  6C65 6761 
0000442C  6C20 4461 
00004430  74        
00004431  6120 5265 6926          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004435  6769 7374 
00004439  6572 203A 
0000443D  20        
0000443E  5573 6520 6927          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004442  4430 2D44 
00004446  372E 2E2E 
0000444A  2E2E      
0000444C  0D0A 00   6928          dc.b      13,10,0
                    6929   @m68kde~1_48:
00004450  0D0A 4425 6930          dc.b      13,10,68,37,99,32,61,32,0
00004454  6320 3D20 
00004458  00        
                    6931   @m68kde~1_49:
0000445A  0D0A 496C 6932          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
0000445E  6C65 6761 
00004462  6C20 4164 
00004466  64        
00004467  7265 7373 6933          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
0000446B  2052 6567 
0000446F  6973 7465 
00004473  7220 3A20 6934          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004477  5573 6520 
0000447B  4130 2D41 
0000447F  372E      
00004481  2E2E 2E2E 6935          dc.b      46,46,46,46,13,10,0
00004485  0D0A 00   
                    6936   @m68kde~1_50:
00004488  0D0A 4125 6937          dc.b      13,10,65,37,99,32,61,32,0
0000448C  6320 3D20 
00004490  00        
                    6938   @m68kde~1_51:
00004492  0D0A 5573 6939          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004496  6572 2053 
0000449A  5020 3D20 
0000449E  00        
                    6940   @m68kde~1_52:
000044A0  0D0A 496C 6941          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000044A4  6C65 6761 
000044A8  6C20 5265 
000044AC  67        
000044AD  6973 7465 6942          dc.b      105,115,116,101,114,46,46,46,46,0
000044B1  722E 2E2E 
000044B5  2E00      
                    6943   @m68kde~1_53:
000044B8  0D0A 5379 6944          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000044BC  7374 656D 
000044C0  2053 5020 
000044C4  3D        
000044C5  2000      6945          dc.b      32,0
                    6946   @m68kde~1_54:
000044C8  0D0A 5043 6947          dc.b      13,10,80,67,32,61,32,0
000044CC  203D 2000 
                    6948   @m68kde~1_55:
000044D0  0D0A 5352 6949          dc.b      13,10,83,82,32,61,32,0
000044D4  203D 2000 
                    6950   @m68kde~1_56:
000044D8  0D0A 496C 6951          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000044DC  6C65 6761 
000044E0  6C20 5265 
000044E4  67        
000044E5  6973 7465 6952          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000044E9  723A 2055 
000044ED  7365 2041 
000044F1  30        
000044F2  2D41 372C 6953          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000044F6  2044 302D 
000044FA  4437 2C20 
000044FE  5353 50   
00004501  2C20 5553 6954          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004505  502C 2050 
00004509  4320 6F72 
0000450D  2053      
0000450F  520D 0A00 6955          dc.b      82,13,10,0
                    6956   @m68kde~1_57:
00004514  0D0A 0D0A 6957          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004518  4E75 6D20 
0000451C  2020 2020 
00004520  4164      
00004522  6472 6573 6958          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004526  7320 2020 
0000452A  2020 2049 
0000452E  6E        
0000452F  7374 7275 6959          dc.b      115,116,114,117,99,116,105,111,110,0
00004533  6374 696F 
00004537  6E00      
                    6960   @m68kde~1_58:
0000453A  0D0A 2D2D 6961          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000453E  2D20 2020 
00004542  2020 2D2D 
00004546  2D2D 2D   
00004549  2D2D 2D2D 6962          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
0000454D  2020 2020 
00004551  2D2D 2D2D 
00004555  2D2D 2D   
00004558  2D2D 2D2D 6963          dc.b      45,45,45,45,0
0000455C  00        
                    6964   @m68kde~1_59:
0000455E  0D0A 4E6F 6965          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004562  2042 7265 
00004566  616B 506F 
0000456A  69        
0000456B  6E74 7320 6966          dc.b      110,116,115,32,83,101,116,0
0000456F  5365 7400 
                    6967   @m68kde~1_60:
00004574  0D0A 2533 6968          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004578  6420 2020 
0000457C  2020 2425 
00004580  3038 78   
00004583  00        6969          dc.b      0
                    6970   @m68kde~1_61:
00004584  0D0A 4E75 6971          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004588  6D20 2020 
0000458C  2020 4164 
00004590  6472      
00004592  6573 7300 6972          dc.b      101,115,115,0
                    6973   @m68kde~1_62:
00004596  0D0A 2D2D 6974          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000459A  2D20 2020 
0000459E  2020 2D2D 
000045A2  2D2D 2D   
000045A5  2D2D 2D2D 6975          dc.b      45,45,45,45,0
000045A9  00        
                    6976   @m68kde~1_63:
000045AA  0D0A 4E6F 6977          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000045AE  2057 6174 
000045B2  6368 506F 
000045B6  69        
000045B7  6E74 7320 6978          dc.b      110,116,115,32,83,101,116,0
000045BB  5365 7400 
                    6979   @m68kde~1_64:
000045C0  0D0A 456E 6980          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000045C4  7465 7220 
000045C8  4272 6561 
000045CC  6B        
000045CD  2050 6F69 6981          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000045D1  6E74 204E 
000045D5  756D 6265 
000045D9  72        
000045DA  3A20 00   6982          dc.b      58,32,0
                    6983   @m68kde~1_65:
000045DE  0D0A 496C 6984          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000045E2  6C65 6761 
000045E6  6C20 5261 
000045EA  6E        
000045EB  6765 203A 6985          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000045EF  2055 7365 
000045F3  2030 202D 
000045F7  2037      
000045F9  00        6986          dc.b      0
                    6987   @m68kde~1_66:
000045FA  0D0A 4272 6988          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000045FE  6561 6B20 
00004602  506F 696E 
00004606  74        
00004607  2043 6C65 6989          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000460B  6172 6564 
0000460F  2E2E 2E2E 
00004613  2E        
00004614  0D0A 00   6990          dc.b      13,10,0
                    6991   @m68kde~1_67:
00004618  0D0A 4272 6992          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000461C  6561 6B20 
00004620  506F 696E 
00004624  74        
00004625  2077 6173 6993          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004629  6E27 7420 
0000462D  5365 742E 
00004631  2E        
00004632  2E2E 2E00 6994          dc.b      46,46,46,0
                    6995   @m68kde~1_68:
00004636  0D0A 456E 6996          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
0000463A  7465 7220 
0000463E  5761 7463 
00004642  68        
00004643  2050 6F69 6997          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004647  6E74 204E 
0000464B  756D 6265 
0000464F  72        
00004650  3A20 00   6998          dc.b      58,32,0
                    6999   @m68kde~1_69:
00004654  0D0A 5761 7000          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004658  7463 6820 
0000465C  506F 696E 
00004660  74        
00004661  2043 6C65 7001          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004665  6172 6564 
00004669  2E2E 2E2E 
0000466D  2E        
0000466E  0D0A 00   7002          dc.b      13,10,0
                    7003   @m68kde~1_70:
00004672  0D0A 5761 7004          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004676  7463 6820 
0000467A  506F 696E 
0000467E  74        
0000467F  2057 6173 7005          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004683  206E 6F74 
00004687  2053 6574 
0000468B  2E        
0000468C  2E2E 2E2E 7006          dc.b      46,46,46,46,0
00004690  00        
                    7007   @m68kde~1_71:
00004692  0D0A 4E6F 7008          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004696  2046 5245 
0000469A  4520 4272 
0000469E  6561      
000046A0  6B20 506F 7009          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000046A4  696E 7473 
000046A8  2E2E 2E2E 
000046AC  2E        
000046AD  00        7010          dc.b      0
                    7011   @m68kde~1_72:
000046AE  0D0A 4272 7012          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000046B2  6561 6B20 
000046B6  506F 696E 
000046BA  74        
000046BB  2041 6464 7013          dc.b      32,65,100,100,114,101,115,115,58,32,0
000046BF  7265 7373 
000046C3  3A20 00   
                    7014   @m68kde~1_73:
000046C6  0D0A 4572 7015          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000046CA  726F 7220 
000046CE  3A20 4272 
000046D2  65        
000046D3  616B 2050 7016          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000046D7  6F69 6E74 
000046DB  7320 4341 
000046DF  4E        
000046E0  4E4F 5420 7017          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000046E4  6265 2073 
000046E8  6574 2061 
000046EC  74        
000046ED  204F 4444 7018          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000046F1  2061 6464 
000046F5  7265 7373 
000046F9  65        
000046FA  7300      7019          dc.b      115,0
                    7020   @m68kde~1_74:
000046FC  0D0A 4572 7021          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004700  726F 7220 
00004704  3A20 4272 
00004708  65        
00004709  616B 2050 7022          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000470D  6F69 6E74 
00004711  7320 4341 
00004715  4E        
00004716  4E4F 5420 7023          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
0000471A  6265 2073 
0000471E  6574 2066 
00004722  6F        
00004723  7220 524F 7024          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004727  4D20 696E 
0000472B  2052 616E 
0000472F  67        
00004730  6520 3A20 7025          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004734  5B24 302D 
00004738  2430 3030 
0000473C  3037 46   
0000473F  4646 5D00 7026          dc.b      70,70,93,0
                    7027   @m68kde~1_75:
00004744  0D0A 4572 7028          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004748  726F 723A 
0000474C  2042 7265 
00004750  61        
00004751  6B20 506F 7029          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004755  696E 7420 
00004759  416C 7265 
0000475D  6164 7920 7030          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004761  4578 6973 
00004765  7473 2061 
00004769  74        
0000476A  2041 6464 7031          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
0000476E  7265 7373 
00004772  203A 2025 
00004776  30        
00004777  3878 0D0A 7032          dc.b      56,120,13,10,0
0000477B  00        
                    7033   @m68kde~1_76:
0000477C  0D0A 4272 7034          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004780  6561 6B20 
00004784  506F 696E 
00004788  74        
00004789  2053 6574 7035          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000478D  2061 7420 
00004791  4164 6472 
00004795  65        
00004796  7373 3A20 7036          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
0000479A  5B24 2530 
0000479E  3878 5D00 
                    7037   @m68kde~1_77:
000047A2  0D0A 4E6F 7038          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000047A6  2046 5245 
000047AA  4520 5761 
000047AE  7463      
000047B0  6820 506F 7039          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
000047B4  696E 7473 
000047B8  2E2E 2E2E 
000047BC  2E        
000047BD  00        7040          dc.b      0
                    7041   @m68kde~1_78:
000047BE  0D0A 5761 7042          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000047C2  7463 6820 
000047C6  506F 696E 
000047CA  74        
000047CB  2041 6464 7043          dc.b      32,65,100,100,114,101,115,115,58,32,0
000047CF  7265 7373 
000047D3  3A20 00   
                    7044   @m68kde~1_79:
000047D6  0D0A 4572 7045          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000047DA  726F 723A 
000047DE  2057 6174 
000047E2  63        
000047E3  6820 506F 7046          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000047E7  696E 7420 
000047EB  416C 7265 
000047EF  6164 7920 7047          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000047F3  5365 7420 
000047F7  6174 2041 
000047FB  64        
000047FC  6472 6573 7048          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004800  7320 3A20 
00004804  2530 3878 
00004808  0D        
00004809  0A00      7049          dc.b      10,0
                    7050   @m68kde~1_80:
0000480C  0D0A 5761 7051          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004810  7463 6820 
00004814  506F 696E 
00004818  74        
00004819  2053 6574 7052          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000481D  2061 7420 
00004821  4164 6472 
00004825  65        
00004826  7373 3A20 7053          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
0000482A  5B24 2530 
0000482E  3878 5D00 
                    7054   @m68kde~1_81:
00004832  0D0A 0D0A 7055          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004836  0D0A 0D0A 
0000483A  4042 5245 
0000483E  414B 50   
00004841  4F49 4E54 7056          dc.b      79,73,78,84,0
00004845  00        
                    7057   @m68kde~1_82:
00004846  0D0A 5369 7058          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000484A  6E67 6C65 
0000484E  2053 7465 
00004852  70        
00004853  203A 205B 7059          dc.b      32,58,32,91,79,78,93,0
00004857  4F4E 5D00 
                    7060   @m68kde~1_83:
0000485C  0D0A 4272 7061          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004860  6561 6B50 
00004864  6F69 6E74 
00004868  73        
00004869  203A 205B 7062          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
0000486D  456E 6162 
00004871  6C65 645D 
00004875  00        
                    7063   @m68kde~1_84:
00004876  0D0A 5072 7064          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000487A  6573 7320 
0000487E  3C45 5343 
00004882  3E20      
00004884  746F 2052 7065          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004888  6573 756D 
0000488C  6520 5573 
00004890  6572 2050 7066          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004894  726F 6772 
00004898  616D 0D0A 
0000489C  00        
                    7067   @m68kde~1_85:
0000489E  0D0A 556E 7068          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000048A2  6B6E 6F77 
000048A6  6E20 436F 
000048AA  6D        
000048AB  6D61 6E64 7069          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
000048AF  2E2E 2E2E 
000048B3  2E0D 0A00 
                    7070   @m68kde~1_86:
000048B8  0D0A 5072 7071          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000048BC  6F67 7261 
000048C0  6D20 456E 
000048C4  64        
000048C5  6564 2028 7072          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000048C9  5452 4150 
000048CD  2023 3135 
000048D1  292E      
000048D3  2E2E 2E00 7073          dc.b      46,46,46,0
                    7074   @m68kde~1_87:
000048D8  0D0A 4B69 7075          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000048DC  6C6C 2041 
000048E0  6C6C 2042 
000048E4  72        
000048E5  6561 6B20 7076          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000048E9  506F 696E 
000048ED  7473 2E2E 
000048F1  2E        
000048F2  2879 2F6E 7077          dc.b      40,121,47,110,41,63,0
000048F6  293F 00   
                    7078   @m68kde~1_88:
000048FA  0D0A 4B69 7079          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000048FE  6C6C 2041 
00004902  6C6C 2057 
00004906  61        
00004907  7463 6820 7080          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
0000490B  506F 696E 
0000490F  7473 2E2E 
00004913  2E        
00004914  2879 2F6E 7081          dc.b      40,121,47,110,41,63,0
00004918  293F 00   
                    7082   @m68kde~1_89:
0000491C  0D0A 2D2D 7083          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004920  2D2D 2D2D 
00004924  2D2D 2D2D 
00004928  2D2D 2D   
0000492B  2D2D 2D2D 7084          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000492F  2D2D 2D2D 
00004933  2D2D 2D2D 
00004937  2D2D 2D   
0000493A  2D2D 2D2D 7085          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000493E  2D2D 2D2D 
00004942  2D2D 2D2D 
00004946  2D2D 2D   
00004949  2D2D 2D2D 7086          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000494D  2D2D 2D2D 
00004951  2D2D 2D2D 
00004955  2D2D 2D   
00004958  2D2D 2D2D 7087          dc.b      45,45,45,45,45,45,0
0000495C  2D2D 00   
                    7088   @m68kde~1_90:
00004960  0D0A 2020 7089          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004964  4465 6275 
00004968  6767 6572 
0000496C  20        
0000496D  436F 6D6D 7090          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004971  616E 6420 
00004975  5375 6D6D 
00004979  6172 7900 7091          dc.b      97,114,121,0
                    7092   @m68kde~1_91:
0000497E  0D0A 2020 7093          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004982  2E28 7265 
00004986  6729 2020 
0000498A  2020      
0000498C  2020 202D 7094          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004990  2043 6861 
00004994  6E67 6520 
00004998  5265      
0000499A  6769 7374 7095          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
0000499E  6572 733A 
000049A2  2065 2E67 
000049A6  2041 302D 7096          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
000049AA  4137 2C44 
000049AE  302D 4437 
000049B2  2C50 43   
000049B5  2C53 5350 7097          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
000049B9  2C55 5350 
000049BD  2C53 5200 
                    7098   @m68kde~1_92:
000049C2  0D0A 2020 7099          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
000049C6  4244 2F42 
000049CA  532F 4243 
000049CE  2F42 4B   
000049D1  2020 2D20 7100          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000049D5  4272 6561 
000049D9  6B20 506F 
000049DD  69        
000049DE  6E74 3A20 7101          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000049E2  4469 7370 
000049E6  6C61 792F 
000049EA  53        
000049EB  6574 2F43 7102          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000049EF  6C65 6172 
000049F3  2F4B 696C 
000049F7  6C        
000049F8  00        7103          dc.b      0
                    7104   @m68kde~1_93:
000049FA  0D0A 2020 7105          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000049FE  4320 2020 
00004A02  2020 2020 
00004A06  2020 20   
00004A09  2020 2D20 7106          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004A0D  436F 7079 
00004A11  2050 726F 
00004A15  67        
00004A16  7261 6D20 7107          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004A1A  6672 6F6D 
00004A1E  2046 6C61 
00004A22  73        
00004A23  6820 746F 7108          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004A27  204D 6169 
00004A2B  6E20 4D65 
00004A2F  6D        
00004A30  6F72 7900 7109          dc.b      111,114,121,0
                    7110   @m68kde~1_94:
00004A34  0D0A 2020 7111          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004A38  4420 2020 
00004A3C  2020 2020 
00004A40  2020 20   
00004A43  2020 2D20 7112          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004A47  4475 6D70 
00004A4B  204D 656D 
00004A4F  6F        
00004A50  7279 2043 7113          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004A54  6F6E 7465 
00004A58  6E74 7320 
00004A5C  746F 2053 7114          dc.b      116,111,32,83,99,114,101,101,110,0
00004A60  6372 6565 
00004A64  6E00      
                    7115   @m68kde~1_95:
00004A66  0D0A 2020 7116          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004A6A  4520 2020 
00004A6E  2020 2020 
00004A72  2020 20   
00004A75  2020 2D20 7117          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004A79  456E 7465 
00004A7D  7220 5374 
00004A81  72        
00004A82  696E 6720 7118          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004A86  696E 746F 
00004A8A  204D 656D 
00004A8E  6F72 7900 7119          dc.b      111,114,121,0
                    7120   @m68kde~1_96:
00004A92  0D0A 2020 7121          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004A96  4620 2020 
00004A9A  2020 2020 
00004A9E  2020 20   
00004AA1  2020 2D20 7122          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004AA5  4669 6C6C 
00004AA9  204D 656D 
00004AAD  6F        
00004AAE  7279 2077 7123          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004AB2  6974 6820 
00004AB6  4461 7461 
00004ABA  00        
                    7124   @m68kde~1_97:
00004ABC  0D0A 2020 7125          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004AC0  4720 2020 
00004AC4  2020 2020 
00004AC8  2020 20   
00004ACB  2020 2D20 7126          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004ACF  476F 2050 
00004AD3  726F 6772 
00004AD7  61        
00004AD8  6D20 5374 7127          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004ADC  6172 7469 
00004AE0  6E67 2061 
00004AE4  74        
00004AE5  2041 6464 7128          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004AE9  7265 7373 
00004AED  3A20 2425 
00004AF1  30        
00004AF2  3858 00   7129          dc.b      56,88,0
                    7130   @m68kde~1_98:
00004AF6  0D0A 2020 7131          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004AFA  4C20 2020 
00004AFE  2020 2020 
00004B02  2020 20   
00004B05  2020 2D20 7132          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004B09  4C6F 6164 
00004B0D  2050 726F 
00004B11  67        
00004B12  7261 6D20 7133          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004B16  282E 4845 
00004B1A  5820 6669 
00004B1E  6C        
00004B1F  6529 2066 7134          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004B23  726F 6D20 
00004B27  4C61 7074 
00004B2B  6F        
00004B2C  7000      7135          dc.b      112,0
                    7136   @m68kde~1_99:
00004B2E  0D0A 2020 7137          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004B32  4D20 2020 
00004B36  2020 2020 
00004B3A  2020 20   
00004B3D  2020 2D20 7138          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004B41  4D65 6D6F 
00004B45  7279 2045 
00004B49  78        
00004B4A  616D 696E 7139          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004B4E  6520 616E 
00004B52  6420 4368 
00004B56  61        
00004B57  6E67 6500 7140          dc.b      110,103,101,0
                    7141   @m68kde~1_100:
00004B5C  0D0A 2020 7142          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004B60  5020 2020 
00004B64  2020 2020 
00004B68  2020 20   
00004B6B  2020 2D20 7143          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004B6F  5072 6F67 
00004B73  7261 6D20 
00004B77  46        
00004B78  6C61 7368 7144          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004B7C  204D 656D 
00004B80  6F72 7920 
00004B84  7769 7468 7145          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004B88  2055 7365 
00004B8C  7220 5072 
00004B90  6F67 7261 7146          dc.b      111,103,114,97,109,0
00004B94  6D00      
                    7147   @m68kde~1_101:
00004B96  0D0A 2020 7148          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004B9A  5220 2020 
00004B9E  2020 2020 
00004BA2  2020 20   
00004BA5  2020 2D20 7149          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004BA9  4469 7370 
00004BAD  6C61 7920 
00004BB1  36        
00004BB2  3830 3030 7150          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004BB6  2052 6567 
00004BBA  6973 7465 
00004BBE  72        
00004BBF  7300      7151          dc.b      115,0
                    7152   @m68kde~1_102:
00004BC2  0D0A 2020 7153          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004BC6  5320 2020 
00004BCA  2020 2020 
00004BCE  2020 20   
00004BD1  2020 2D20 7154          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004BD5  546F 6767 
00004BD9  6C65 204F 
00004BDD  4E        
00004BDE  2F4F 4646 7155          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004BE2  2053 696E 
00004BE6  676C 6520 
00004BEA  53        
00004BEB  7465 7020 7156          dc.b      116,101,112,32,77,111,100,101,0
00004BEF  4D6F 6465 
00004BF3  00        
                    7157   @m68kde~1_103:
00004BF4  0D0A 2020 7158          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004BF8  544D 2020 
00004BFC  2020 2020 
00004C00  2020 20   
00004C03  2020 2D20 7159          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004C07  5465 7374 
00004C0B  204D 656D 
00004C0F  6F        
00004C10  7279 00   7160          dc.b      114,121,0
                    7161   @m68kde~1_104:
00004C14  0D0A 2020 7162          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004C18  5453 2020 
00004C1C  2020 2020 
00004C20  2020 20   
00004C23  2020 2D20 7163          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004C27  5465 7374 
00004C2B  2053 7769 
00004C2F  74        
00004C30  6368 6573 7164          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004C34  3A20 5357 
00004C38  372D 3000 
                    7165   @m68kde~1_105:
00004C3C  0D0A 2020 7166          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004C40  5444 2020 
00004C44  2020 2020 
00004C48  2020 20   
00004C4B  2020 2D20 7167          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004C4F  5465 7374 
00004C53  2044 6973 
00004C57  70        
00004C58  6C61 7973 7168          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004C5C  3A20 4C45 
00004C60  4473 2061 
00004C64  6E        
00004C65  6420 372D 7169          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004C69  5365 676D 
00004C6D  656E 7400 
                    7170   @m68kde~1_106:
00004C72  0D0A 2020 7171          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004C76  5744 2F57 
00004C7A  532F 5743 
00004C7E  2F57 4B   
00004C81  2020 2D20 7172          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004C85  5761 7463 
00004C89  6820 506F 
00004C8D  696E      
00004C8F  743A 2044 7173          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004C93  6973 706C 
00004C97  6179 2F53 
00004C9B  65        
00004C9C  742F 436C 7174          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004CA0  6561 722F 
00004CA4  4B69 6C6C 
00004CA8  00        
                    7175   @m68kde~1_107:
00004CAA  0D0A 2300 7176          dc.b      13,10,35,0
                    7177   @m68kde~1_108:
00004CAE  0D0A 5072 7178          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004CB2  6F67 7261 
00004CB6  6D20 5275 
00004CBA  6E        
00004CBB  6E69 6E67 7179          dc.b      110,105,110,103,46,46,46,46,46,0
00004CBF  2E2E 2E2E 
00004CC3  2E00      
                    7180   @m68kde~1_109:
00004CC6  0D0A 5072 7181          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004CCA  6573 7320 
00004CCE  3C52 4553 
00004CD2  4554      
00004CD4  3E20 6275 7182          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004CD8  7474 6F6E 
00004CDC  203C 4B65 
00004CE0  79        
00004CE1  303E 206F 7183          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004CE5  6E20 4445 
00004CE9  3120 746F 
00004CED  2073      
00004CEF  746F 7000 7184          dc.b      116,111,112,0
                    7185   @m68kde~1_110:
00004CF4  0D0A 4572 7186          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004CF8  726F 723A 
00004CFC  2050 7265 
00004D00  73        
00004D01  7320 2747 7187          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004D05  2720 6669 
00004D09  7273 7420 
00004D0D  74        
00004D0E  6F20 7374 7188          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004D12  6172 7420 
00004D16  7072 6F67 
00004D1A  7261 6D00 7189          dc.b      114,97,109,0
                    7190   @m68kde~1_111:
00004D1E  0D0A 5369 7191          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004D22  6E67 6C65 
00004D26  2053 7465 
00004D2A  70        
00004D2B  2020 3A5B 7192          dc.b      32,32,58,91,79,78,93,0
00004D2F  4F4E 5D00 
                    7193   @m68kde~1_112:
00004D34  0D0A 5072 7194          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004D38  6573 7320 
00004D3C  2747 2720 
00004D40  74        
00004D41  6F20 5472 7195          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004D45  6163 6520 
00004D49  5072 6F67 
00004D4D  72        
00004D4E  616D 2066 7196          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004D52  726F 6D20 
00004D56  6164 6472 
00004D5A  6573 7320 7197          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004D5E  2425 582E 
00004D62  2E2E 2E2E 
00004D66  00        
                    7198   @m68kde~1_113:
00004D68  0D0A 5075 7199          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004D6C  7368 203C 
00004D70  5245 5345 
00004D74  5420      
00004D76  4275 7474 7200          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00004D7A  6F6E 3E20 
00004D7E  746F 2053 
00004D82  74        
00004D83  6F70 2E2E 7201          dc.b      111,112,46,46,46,46,46,0
00004D87  2E2E 2E00 
                    7202   @m68kde~1_114:
00004D8C  0D0A 5369 7203          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004D90  6E67 6C65 
00004D94  2053 7465 
00004D98  70        
00004D99  203A 205B 7204          dc.b      32,58,32,91,79,70,70,93,0
00004D9D  4F46 465D 
00004DA1  00        
                    7205   @m68kde~1_115:
00004DA2  0D0A 4272 7206          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004DA6  6561 6B20 
00004DAA  506F 696E 
00004DAE  74        
00004DAF  7320 3A5B 7207          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004DB3  456E 6162 
00004DB7  6C65 645D 
00004DBB  00        
                    7208   @m68kde~1_116:
00004DBC  0D0A 5072 7209          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004DC0  6573 7320 
00004DC4  3C45 5343 
00004DC8  3E20      
00004DCA  746F 2052 7210          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004DCE  6573 756D 
00004DD2  6520 5573 
00004DD6  6572 2050 7211          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004DDA  726F 6772 
00004DDE  616D 2E2E 
00004DE2  2E        
00004DE3  2E2E 00   7212          dc.b      46,46,0
                    7213   @m68kde~1_117:
00004DE6  0D0A 5369 7214          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004DEA  6E67 6C65 
00004DEE  2053 7465 
00004DF2  70        
00004DF3  2020 3A5B 7215          dc.b      32,32,58,91,79,70,70,93,0
00004DF7  4F46 465D 
00004DFB  00        
                    7216   @m68kde~1_118:
00004DFC  0D0A 0D0A 7217          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004E00  5072 6F67 
00004E04  7261 6D20 
00004E08  41        
00004E09  424F 5254 7218          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004E0D  2021 2121 
00004E11  2121 210D 
00004E15  0A00      
                    7219   @m68kde~1_119:
00004E18  2573 0D0A 7220          dc.b      37,115,13,10,0
00004E1C  00        
                    7221   @m68kde~1_120:
00004E1E  0D0A 0D0A 7222          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004E22  5072 6F67 
00004E26  7261 6D20 
00004E2A  41        
00004E2B  424F 5254 7223          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004E2F  2021 2121 
00004E33  2121 00   
                    7224   @m68kde~1_121:
00004E36  0D0A 556E 7225          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004E3A  6861 6E64 
00004E3E  6C65 6420 
00004E42  49        
00004E43  6E74 6572 7226          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004E47  7275 7074 
00004E4B  3A20 4952 
00004E4F  5125 6420 7227          dc.b      81,37,100,32,33,33,33,33,33,0
00004E53  2121 2121 
00004E57  2100      
                    7228   @m68kde~1_122:
00004E5A  4144 4452 7229          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004E5E  4553 5320 
00004E62  4552 524F 
00004E66  523A 20   
00004E69  3136 206F 7230          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004E6D  7220 3332 
00004E71  2042 6974 
00004E75  2054      
00004E77  7261 6E73 7231          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004E7B  6665 7220 
00004E7F  746F 2F66 
00004E83  726F 6D20 7232          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004E87  616E 204F 
00004E8B  4444 2041 
00004E8F  64        
00004E90  6472 6573 7233          dc.b      100,114,101,115,115,46,46,46,46,0
00004E94  732E 2E2E 
00004E98  2E00      
                    7234   @m68kde~1_123:
00004E9A  556E 6861 7235          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004E9E  6E64 6C65 
00004EA2  6420 5472 
00004EA6  6170 2021 7236          dc.b      97,112,32,33,33,33,33,33,0
00004EAA  2121 2121 
00004EAE  00        
                    7237   @m68kde~1_124:
00004EB0  4255 5320 7238          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004EB4  4572 726F 
00004EB8  7221 00   
                    7239   @m68kde~1_125:
00004EBC  4144 4452 7240          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004EC0  4553 5320 
00004EC4  4572 726F 
00004EC8  7221      
00004ECA  00        7241          dc.b      0
                    7242   @m68kde~1_126:
00004ECC  494C 4C45 7243          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004ED0  4741 4C20 
00004ED4  494E 5354 
00004ED8  5255 43   
00004EDB  5449 4F4E 7244          dc.b      84,73,79,78,0
00004EDF  00        
                    7245   @m68kde~1_127:
00004EE0  4449 5649 7246          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004EE4  4445 2042 
00004EE8  5920 5A45 
00004EEC  524F 00   
                    7247   @m68kde~1_128:
00004EF0  2743 484B 7248          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004EF4  2720 494E 
00004EF8  5354 5255 
00004EFC  4354 49   
00004EFF  4F4E 00   7249          dc.b      79,78,0
                    7250   @m68kde~1_129:
00004F02  5452 4150 7251          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004F06  5620 494E 
00004F0A  5354 5255 
00004F0E  4354 49   
00004F11  4F4E 00   7252          dc.b      79,78,0
                    7253   @m68kde~1_130:
00004F14  5052 4956 7254          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004F18  494C 4547 
00004F1C  4520 5649 
00004F20  4F4C 41   
00004F23  5449 4F4E 7255          dc.b      84,73,79,78,0
00004F27  00        
                    7256   @m68kde~1_131:
00004F28  554E 494E 7257          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004F2C  4954 4941 
00004F30  4C49 5345 
00004F34  4420 49   
00004F37  5251 00   7258          dc.b      82,81,0
                    7259   @m68kde~1_132:
00004F3A  5350 5552 7260          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004F3E  494F 5553 
00004F42  2049 5251 
00004F46  00        
                    7261   @m68kde~1_133:
00004F48  0D0A 5374 7262          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004F4C  6172 7420 
00004F50  4164 6472 
00004F54  65        
00004F55  7373 2069 7263          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004F59  6E20 4D65 
00004F5D  6D6F 7279 
00004F61  3A20 00   7264          dc.b      58,32,0
                    7265   @m68kde~1_134:
00004F64  0D0A 456E 7266          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004F68  7465 7220 
00004F6C  5374 7269 
00004F70  6E        
00004F71  6720 2845 7267          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004F75  5343 2074 
00004F79  6F20 656E 
00004F7D  64        
00004F7E  2920 3A00 7268          dc.b      41,32,58,0
                    7269   @m68kde~1_135:
00004F82  0A45 6E74 7270          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
00004F86  6572 2077 
00004F8A  6861 7420 
00004F8E  73        
00004F8F  697A 6520 7271          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
00004F93  6F66 206D 
00004F97  656D 6F72 
00004F9B  7920 796F 7272          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
00004F9F  7520 7761 
00004FA3  6E74 2074 
00004FA7  6F20 7265 7273          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00004FAB  6164 2F77 
00004FAF  7269 7465 
00004FB3  0A20 4279 7274          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
00004FB7  7465 203D 
00004FBB  2030 0A20 
00004FBF  576F      
00004FC1  7264 203D 7275          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
00004FC5  2031 0A20 
00004FC9  4C6F 6E67 
00004FCD  20        
00004FCE  576F 7264 7276          dc.b      87,111,114,100,32,61,32,50,10,0
00004FD2  203D 2032 
00004FD6  0A00      
                    7277   @m68kde~1_136:
00004FD8  0A00      7278          dc.b      10,0
                    7279   @m68kde~1_137:
00004FDA  0A45 6E74 7280          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00004FDE  6572 2077 
00004FE2  6869 6368 
00004FE6  2064 6174 7281          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00004FEA  6120 7061 
00004FEE  7474 6572 
00004FF2  6E        
00004FF3  2079 6F75 7282          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00004FF7  2077 616E 
00004FFB  7420 746F 
00004FFF  2077 7269 7283          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005003  7465 2069 
00005007  6E74 6F20 
0000500B  6D65 6D6F 7284          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
0000500F  7279 0A20 
00005013  3078 3030 
00005017  20        
00005018  3D20 300A 7285          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
0000501C  2030 7842 
00005020  3220 3D20 
00005024  310A 20   
00005027  3078 4333 7286          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
0000502B  203D 2032 
0000502F  0A20 3078 
00005033  4434      
00005035  203D 2033 7287          dc.b      32,61,32,51,10,0
00005039  0A00      
                    7288   @m68kde~1_138:
0000503C  0A45 6E74 7289          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005040  6572 2077 
00005044  6869 6368 
00005048  2064 6174 7290          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
0000504C  6120 7061 
00005050  7474 6572 
00005054  6E        
00005055  2079 6F75 7291          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005059  2077 616E 
0000505D  7420 746F 
00005061  2077 7269 7292          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005065  7465 2069 
00005069  6E74 6F20 
0000506D  6D65 6D6F 7293          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005071  7279 0A20 
00005075  3078 3030 
00005079  30        
0000507A  3020 3D20 7294          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
0000507E  300A 2030 
00005082  7831 3233 
00005086  3420 3D   
00005089  2031 0A20 7295          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
0000508D  3078 4131 
00005091  4232 203D 
00005095  2032 0A   
00005098  2030 7843 7296          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
0000509C  3344 3420 
000050A0  3D20 330A 
000050A4  00        
                    7297   @m68kde~1_139:
000050A6  0A45 6E74 7298          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000050AA  6572 2077 
000050AE  6869 6368 
000050B2  2064 6174 7299          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000050B6  6120 7061 
000050BA  7474 6572 
000050BE  6E        
000050BF  2079 6F75 7300          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000050C3  2077 616E 
000050C7  7420 746F 
000050CB  2077 7269 7301          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000050CF  7465 2069 
000050D3  6E74 6F20 
000050D7  6D65 6D6F 7302          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000050DB  7279 0A20 
000050DF  3078 3030 
000050E3  30        
000050E4  305F 3030 7303          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
000050E8  3030 203D 
000050EC  2030 0A20 
000050F0  3078 41   
000050F3  4142 425F 7304          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
000050F7  4343 4444 
000050FB  203D 2031 
000050FF  0A20 30   
00005102  7831 3132 7305          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
00005106  325F 3333 
0000510A  3434 203D 
0000510E  2032 0A   
00005111  2030 7837 7306          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
00005115  3635 345F 
00005119  3332 3130 
0000511D  203D 20   
00005120  330A 00   7307          dc.b      51,10,0
                    7308   @m68kde~1_140:
00005124  0A50 726F 7309          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
00005128  7669 6465 
0000512C  2053 7461 
00005130  72        
00005131  7420 4164 7310          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
00005135  6472 6573 
00005139  7320 696E 
0000513D  2068 6578 7311          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
00005141  2028 646F 
00005145  206E 6F74 
00005149  2075 7365 7312          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
0000514D  2030 7820 
00005151  7072 6566 
00005155  6978 290A 7313          dc.b      105,120,41,10,48,120,0
00005159  3078 00   
                    7314   @m68kde~1_141:
0000515C  0A50 726F 7315          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
00005160  7669 6465 
00005164  2045 6E64 
00005168  2041 6464 7316          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
0000516C  7265 7373 
00005170  2069 6E20 
00005174  6865 7820 7317          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
00005178  2864 6F20 
0000517C  6E6F 7420 
00005180  7573 6520 7318          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
00005184  3078 2070 
00005188  7265 6669 
0000518C  7829 0A30 7319          dc.b      120,41,10,48,120,0
00005190  7800      
                    7320   @m68kde~1_142:
00005192  0A53 7461 7321          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
00005196  7274 2041 
0000519A  6464 7265 
0000519E  73        
0000519F  7320 3078 7322          dc.b      115,32,48,120,37,48,56,120,10,0
000051A3  2530 3878 
000051A7  0A00      
                    7323   @m68kde~1_143:
000051AA  0A45 6E64 7324          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
000051AE  2041 6464 
000051B2  7265 7373 
000051B6  3A20 3078 7325          dc.b      58,32,48,120,37,48,56,120,10,0
000051BA  2530 3878 
000051BE  0A00      
                    7326   @m68kde~1_144:
000051C0  4552 524F 7327          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
000051C4  522E 2E2E 
000051C8  2056 616C 
000051CC  7565      
000051CE  2077 7269 7328          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
000051D2  7474 656E 
000051D6  2074 6F20 
000051DA  6164 6472 7329          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
000051DE  6573 7320 
000051E2  3078 2578 
000051E6  203D 3D20 7330          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
000051EA  3078 2578 
000051EE  2E20 5661 
000051F2  6C75      
000051F4  6520 4578 7331          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
000051F8  7065 6374 
000051FC  6564 3A20 
00005200  30        
00005201  7825 780A 7332          dc.b      120,37,120,10,0
00005205  00        
                    7333   @m68kde~1_145:
00005206  4164 6472 7334          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
0000520A  6573 733A 
0000520E  2030 7825 
00005212  78        
00005213  2056 616C 7335          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
00005217  7565 3A20 
0000521B  3078 2530 
0000521F  3258      
00005221  0A00      7336          dc.b      10,0
                    7337   @m68kde~1_146:
00005224  4164 6472 7338          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005228  6573 733A 
0000522C  2030 7825 
00005230  78        
00005231  2056 616C 7339          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
00005235  7565 3A20 
00005239  3078 2530 
0000523D  3458      
0000523F  0A00      7340          dc.b      10,0
                    7341   @m68kde~1_147:
00005242  4164 6472 7342          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005246  6573 733A 
0000524A  2030 7825 
0000524E  78        
0000524F  2056 616C 7343          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
00005253  7565 3A20 
00005257  3078 2530 
0000525B  3858      
0000525D  0A00      7344          dc.b      10,0
                    7345   @m68kde~1_148:
00005260  4445 312D 7346          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00005264  3638 6B20 
00005268  4275 6720 
0000526C  5631      
0000526E  2E37 3700 7347          dc.b      46,55,55,0
                    7348   @m68kde~1_149:
00005272  436F 7079 7349          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00005276  7269 6768 
0000527A  7420 2843 
0000527E  2920 504A 7350          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00005282  2044 6176 
00005286  6965 7320 
0000528A  3230      
0000528C  3136 00   7351          dc.b      49,54,0
                    7352   @m68kde~1_150:
00005290  0D0A 5275 7353          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00005294  6E6E 696E 
00005298  672E 2E2E 
0000529C  2E        
0000529D  2E00      7354          dc.b      46,0
                    7355   @m68kde~1_151:
000052A0  5275 6E6E 7356          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000052A4  696E 672E 
000052A8  2E2E 2E2E 
000052AC  00        
                    7357   @m68kde~1_152:
000052AE  4279 3A20 7358          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000052B2  504A 2044 
000052B6  6176 6965 
000052BA  73        
000052BB  00        7359          dc.b      0
                    7360   @m68kde~1_153:
000052BC  0D0A 2573 7361          dc.b      13,10,37,115,0
000052C0  00        
                    7362   @m68kde~1_154:
000052C2  0A20 5374 7363          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
000052C6  7564 656E 
000052CA  7420 4E61 
000052CE  6D        
000052CF  6573 3A0A 7364          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
000052D3  205A 6163 
000052D7  6861 7269 
000052DB  61        
000052DC  6820 4A6F 7365          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
000052E0  7365 7068 
000052E4  3A20 3435 
000052E8  35        
000052E9  3030 3035 7366          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
000052ED  3520 0A20 
000052F1  556D 6169 
000052F5  7220      
000052F7  4D61 7A68 7367          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
000052FB  6172 3A20 
000052FF  3230 3333 
00005303  3333      
00005305  3038 0A00 7368          dc.b      48,56,10,0
                    7369          section   data
0000530A            7370                   align
          0000 530A 7371   DataStart       equ       *
                    7372   
                    7373   *********************************************************************************************************
                    7374   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7375   * to ram as part of the CStart routine in this file
                    7376   *********************************************************************************************************
                    7377   
                    7378   @vsscanf_bufx:
0000530A  0803 0546 7379          dc.l      @vsscanf_buf
                    7380   @vsscanf_1:
0000530E  0A00      7381          dc.b      10,0
                    7382   __ctype:
00005310  0040 4040 7383          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005314  4040 4040 
00005318  4040 5050 
0000531C  5050 50   
0000531F  4040 4040 7384          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00005323  4040 4040 
00005327  4040 4040 
0000532B  4040 40   
0000532E  4040 40D0 7385          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005332  A0A0 A0A0 
00005336  A0A0 A0A0 
0000533A  A0A0 A0A0 7386          dc.b      160,160,160,160,160,160,160,140,140,140,140
0000533E  A0A0 A08C 
00005342  8C8C 8C   
00005345  8C8C 8C8C 7387          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005349  8C8C A0A0 
0000534D  A0A0 A0   
00005350  A0A0 8A8A 7388          dc.b      160,160,138,138,138,138,138,138,130,130,130
00005354  8A8A 8A8A 
00005358  8282 82   
0000535B  8282 8282 7389          dc.b      130,130,130,130,130,130,130,130,130,130,130
0000535F  8282 8282 
00005363  8282 82   
00005366  8282 8282 7390          dc.b      130,130,130,130,130,130,160,160,160,160,160
0000536A  8282 A0A0 
0000536E  A0A0 A0   
00005371  A089 8989 7391          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005375  8989 8981 
00005379  8181 81   
0000537C  8181 8181 7392          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005380  8181 8181 
00005384  8181 81   
00005387  8181 8181 7393          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
0000538B  81A0 A0A0 
0000538F  A040 0000 
00005393  00        
00005394  0000 0000 7394          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005398  0000 0000 
0000539C  0000 0000 
000053A0  0000 0000 
000053A4  0000 0000 
000053A8  0000      
000053AA  0000 0000 7395          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000053AE  0000 0000 
000053B2  0000 0000 
000053B6  0000 0000 
000053BA  0000 0000 
000053BE  0000      
000053C0  0000 0000 7396          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000053C4  0000 0000 
000053C8  0000 0000 
000053CC  0000 0000 
000053D0  0000 0000 
000053D4  0000      
000053D6  0000 0000 7397          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000053DA  0000 0000 
000053DE  0000 0000 
000053E2  0000 0000 
000053E6  0000 0000 
000053EA  0000      
000053EC  0000 0000 7398          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000053F0  0000 0000 
000053F4  0000 0000 
000053F8  0000 0000 
000053FC  0000 0000 
00005400  0000      
00005402  0000 0000 7399          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005406  0000 0000 
0000540A  0000 0000 
0000540E  0000 00   
                    7400   @itoa_1:
00005412  2D32 3134 7401          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005416  3734 3833 
0000541A  3634 3800 
                    7402          section   bss
0000541E            7403                   align
          0000 541E 7404   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7405   
                    7406   *********************************************************************************************************
                    7407   * Section for Uninitialised Data held in ROM as constants
                    7408   *********************************************************************************************************
                    7409   
08030000            7410                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 7411   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7412   
                    7413   
08030000            7414   bss             org       bss
                    7415   
                    7416   *********************************************************************************************************
                    7417   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7418   * install the exception handler using the C function InstallExceptionHandler()
                    7419   *********************************************************************************************************
                    7420   
                    7421   
                    7422   
08030000            7423   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            7424   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            7425   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            7426   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            7427   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            7428   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            7429   VCheck           ds.l    1      ditto
0803001C            7430   VTrapV           ds.l    1      ditto
08030020            7431   VPrivilege       ds.l    1      ditto
08030024            7432   VTrace           ds.l    1
08030028            7433   VLine1010emul    ds.l    1
0803002C            7434   VLine1111emul    ds.l    1
08030030            7435   VUnassigned1     ds.l    1
08030034            7436   VUnassigned2     ds.l    1
08030038            7437   VUnassigned3     ds.l    1
0803003C            7438   VUninit_IRQ      ds.l    1
08030040            7439   VUnassigned4     ds.l    1
08030044            7440   VUnassigned5     ds.l    1
08030048            7441   VUnassigned6     ds.l    1
0803004C            7442   VUnassigned7     ds.l    1
08030050            7443   VUnassigned8     ds.l    1
08030054            7444   VUnassigned9     ds.l    1
08030058            7445   VUnassigned10    ds.l    1
0803005C            7446   VUnassigned11    ds.l    1
08030060            7447   VSpuriousIRQ     ds.l    1
                    7448   
                    7449   * Interrupt handlers Vector 25-31
08030064            7450   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            7451   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            7452   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            7453   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            7454   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            7455   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            7456   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7457   
                    7458   * Trap Handler vectors 32-47
08030080            7459   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            7460   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            7461   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            7462   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            7463   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            7464   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            7465   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            7466   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            7467   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            7468   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            7469   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            7470   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            7471   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            7472   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            7473   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            7474   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7475   
                    7476   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7477   
                    7478   ***********************************************************************************************************
                    7479   * Other Variables
                    7480   ***********************************************************************************************************
                    7481   *__DebugA5       ds.l    1
                    7482   *__UserA5        ds.l    1
                    7483   
                    7484   ***********************************************************************************************************
080300C0            7485   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            7486   __allocp:       ds.l    0       ; start of allocation units
080300C4            7487   __heap:         ds.l    0       ; pointers for malloc functions
                    7488   
                    7489   *__himem:       ds.l    himem            ; highest memory location + 1
                    7490   *__stklen:      ds.l    stklen           ; default stack size
                    7491   
                    7492   *********************************************************************************************************
                    7493   * Section for Heap
                    7494   *********************************************************************************************************
                    7495   
                    7496   _i:
080300C4            7497          ds.b      4
                    7498   _x:
080300C8            7499          ds.b      4
                    7500   _y:
080300CC            7501          ds.b      4
                    7502   _z:
080300D0            7503          ds.b      4
                    7504   _PortA_Count:
080300D4            7505          ds.b      4
                    7506   _Trace:
080300D8            7507          ds.b      4
                    7508   _GoFlag:
080300DC            7509          ds.b      4
                    7510   _Echo:
080300E0            7511          ds.b      4
                    7512   _d0:
080300E4            7513          ds.b      4
                    7514   _d1:
080300E8            7515          ds.b      4
                    7516   _d2:
080300EC            7517          ds.b      4
                    7518   _d3:
080300F0            7519          ds.b      4
                    7520   _d4:
080300F4            7521          ds.b      4
                    7522   _d5:
080300F8            7523          ds.b      4
                    7524   _d6:
080300FC            7525          ds.b      4
                    7526   _d7:
08030100            7527          ds.b      4
                    7528   _a0:
08030104            7529          ds.b      4
                    7530   _a1:
08030108            7531          ds.b      4
                    7532   _a2:
0803010C            7533          ds.b      4
                    7534   _a3:
08030110            7535          ds.b      4
                    7536   _a4:
08030114            7537          ds.b      4
                    7538   _a5:
08030118            7539          ds.b      4
                    7540   _a6:
0803011C            7541          ds.b      4
                    7542   _PC:
08030120            7543          ds.b      4
                    7544   _SSP:
08030124            7545          ds.b      4
                    7546   _USP:
08030128            7547          ds.b      4
                    7548   _SR:
0803012C            7549          ds.b      2
                    7550   _BreakPointAddress:
0803012E            7551          ds.b      32
                    7552   _BreakPointInstruction:
0803014E            7553          ds.b      16
                    7554   _BreakPointSetOrCleared:
0803015E            7555          ds.b      32
                    7556   _InstructionSize:
0803017E            7557          ds.b      4
                    7558   _WatchPointAddress:
08030182            7559          ds.b      32
                    7560   _WatchPointSetOrCleared:
080301A2            7561          ds.b      32
                    7562   _WatchPointString:
080301C2            7563          ds.b      800
                    7564   _TempString:
080304E2            7565          ds.b      100
                    7566   @vsscanf_buf:
08030546            7567          ds.b      80
                    7568          section   heap
08030596            7569                   align
          0803 0596 7570   bssEnd          equ *                   end of storage space for unitialised variables
                    7571   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0596 7572   heap   equ       *
08030596            7573                    align
          0000 0000

Assembly errors: 0
