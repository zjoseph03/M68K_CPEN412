680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 22 Jan 2025      Time: 21:55:11          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  28BE      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1F86      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; #define StartOfExceptionVectorTable 0x08030000
                     473   ; //#define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; #define TopOfStack 0x08040000
                     476   ; //#define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  672          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3654      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  402A      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  402E      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4044      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  4046      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0803  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3654      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2C66      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  4048      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4082      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  409A      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  40A2      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  40A8      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  402A      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3654      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  40AC      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  4082      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  40C0      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  40D6      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  40EA      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3654      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0803 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  411A      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  2D60      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2B9A      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2C66      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  414A      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4170      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0803 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3654      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4192      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  41AE      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  41F4      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  4206      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  2CD2      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  4218      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /*******************************************************************
                    1547   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1548   ; ********************************************************************/
                    1549   ; void ProgramFlashChip(void)
                    1550   ; {
                    1551   _ProgramFlashChip:
000010C4  4E75      1552          rts
                    1553   ; //
                    1554   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1555   ; // TODO : then verify by reading it back and comparing to memory
                    1556   ; //
                    1557   ; }
                    1558   ; /*************************************************************************
                    1559   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1560   ; **************************************************************************/
                    1561   ; void LoadFromFlashChip(void)
                    1562   ; {
                    1563   _LoadFromFlashChip:
                    1564   ; printf("\r\nLoading Program From SPI Flash....") ;
000010C6  4879 0000 1565          pea       @m68kde~1_22.L
000010CA  424C      
000010CC  4EB9 0000 1566          jsr       _printf
000010D0  3654      
000010D2  584F      1567          addq.w    #4,A7
000010D4  4E75      1568          rts
                    1569   ; //
                    1570   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1571   ; //
                    1572   ; }
                    1573   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1574   ; // IMPORTANT
                    1575   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1576   ; // has to be done with an interrupt (IRQ Level 6)
                    1577   ; //
                    1578   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1579   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1580   ; //
                    1581   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1582   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1583   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1584   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1585   ; // program area
                    1586   ; //
                    1587   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1588   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1589   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1590   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1591   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1592   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1593   ; void DumpRegisters()
                    1594   ; {
                    1595   _DumpRegisters:
000010D6  48E7 3F3C 1596          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000010DA  45F9 0000 1597          lea       _putch.L,A2
000010DE  2C66      
000010E0  47F9 0000 1598          lea       _printf.L,A3
000010E4  3654      
000010E6  49F9 0803 1599          lea       _SR.L,A4
000010EA  012C      
000010EC  4BF9 0803 1600          lea       _WatchPointString.L,A5
000010F0  01C2      
                    1601   ; short i, x, j, k ;
                    1602   ; unsigned char c, *BytePointer;
                    1603   ; // buld up strings for displaying watchpoints
                    1604   ; for(x = 0; x < (short)(8); x++)
000010F2  4242      1605          clr.w     D2
                    1606   DumpRegisters_1:
000010F4  0C42 0008 1607          cmp.w     #8,D2
000010F8  6C00 01C6 1608          bge       DumpRegisters_3
                    1609   ; {
                    1610   ; if(WatchPointSetOrCleared[x] == 1)
000010FC  48C2      1611          ext.l     D2
000010FE  2002      1612          move.l    D2,D0
00001100  E588      1613          lsl.l     #2,D0
00001102  41F9 0803 1614          lea       _WatchPointSetOrCleared.L,A0
00001106  01A2      
00001108  2030 0800 1615          move.l    0(A0,D0.L),D0
0000110C  0C80 0000 1616          cmp.l     #1,D0
00001110  0001      
00001112  6600 0186 1617          bne       DumpRegisters_4
                    1618   ; {
                    1619   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001116  48C2      1620          ext.l     D2
00001118  2202      1621          move.l    D2,D1
0000111A  E589      1622          lsl.l     #2,D1
0000111C  41F9 0803 1623          lea       _WatchPointAddress.L,A0
00001120  0182      
00001122  2F30 1800 1624          move.l    0(A0,D1.L),-(A7)
00001126  4879 0000 1625          pea       @m68kde~1_23.L
0000112A  4272      
0000112C  220D      1626          move.l    A5,D1
0000112E  48C2      1627          ext.l     D2
00001130  2F00      1628          move.l    D0,-(A7)
00001132  2002      1629          move.l    D2,D0
00001134  C1FC 0064 1630          muls      #100,D0
00001138  D280      1631          add.l     D0,D1
0000113A  201F      1632          move.l    (A7)+,D0
0000113C  2F01      1633          move.l    D1,-(A7)
0000113E  4EB9 0000 1634          jsr       _sprintf
00001142  2CFE      
00001144  DEFC 000C 1635          add.w     #12,A7
                    1636   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001148  48C2      1637          ext.l     D2
0000114A  2002      1638          move.l    D2,D0
0000114C  E588      1639          lsl.l     #2,D0
0000114E  41F9 0803 1640          lea       _WatchPointAddress.L,A0
00001152  0182      
00001154  2A30 0800 1641          move.l    0(A0,D0.L),D5
                    1642   ; for(j = 0; j < (short)(16); j+=2)
00001158  4243      1643          clr.w     D3
                    1644   DumpRegisters_6:
0000115A  0C43 0010 1645          cmp.w     #16,D3
0000115E  6C00 0082 1646          bge       DumpRegisters_8
                    1647   ; {
                    1648   ; for(k = 0; k < (short)(2); k++)
00001162  4246      1649          clr.w     D6
                    1650   DumpRegisters_9:
00001164  0C46 0002 1651          cmp.w     #2,D6
00001168  6C00 0052 1652          bge       DumpRegisters_11
                    1653   ; {
                    1654   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000116C  2045      1655          move.l    D5,A0
0000116E  48C3      1656          ext.l     D3
00001170  2203      1657          move.l    D3,D1
00001172  48C6      1658          ext.l     D6
00001174  D286      1659          add.l     D6,D1
00001176  1230 1800 1660          move.b    0(A0,D1.L),D1
0000117A  C2BC 0000 1661          and.l     #255,D1
0000117E  00FF      
00001180  2F01      1662          move.l    D1,-(A7)
00001182  4879 0000 1663          pea       @m68kde~1_8.L
00001186  40A2      
00001188  4879 0803 1664          pea       _TempString.L
0000118C  04E2      
0000118E  4EB9 0000 1665          jsr       _sprintf
00001192  2CFE      
00001194  DEFC 000C 1666          add.w     #12,A7
                    1667   ; strcat(WatchPointString[x], TempString) ;
00001198  4879 0803 1668          pea       _TempString.L
0000119C  04E2      
0000119E  220D      1669          move.l    A5,D1
000011A0  48C2      1670          ext.l     D2
000011A2  2F00      1671          move.l    D0,-(A7)
000011A4  2002      1672          move.l    D2,D0
000011A6  C1FC 0064 1673          muls      #100,D0
000011AA  D280      1674          add.l     D0,D1
000011AC  201F      1675          move.l    (A7)+,D0
000011AE  2F01      1676          move.l    D1,-(A7)
000011B0  4EB9 0000 1677          jsr       _strcat
000011B4  2D4A      
000011B6  504F      1678          addq.w    #8,A7
000011B8  5246      1679          addq.w    #1,D6
000011BA  60A8      1680          bra       DumpRegisters_9
                    1681   DumpRegisters_11:
                    1682   ; }
                    1683   ; strcat(WatchPointString[x]," ") ;
000011BC  4879 0000 1684          pea       @m68kde~1_24.L
000011C0  427A      
000011C2  220D      1685          move.l    A5,D1
000011C4  48C2      1686          ext.l     D2
000011C6  2F00      1687          move.l    D0,-(A7)
000011C8  2002      1688          move.l    D2,D0
000011CA  C1FC 0064 1689          muls      #100,D0
000011CE  D280      1690          add.l     D0,D1
000011D0  201F      1691          move.l    (A7)+,D0
000011D2  2F01      1692          move.l    D1,-(A7)
000011D4  4EB9 0000 1693          jsr       _strcat
000011D8  2D4A      
000011DA  504F      1694          addq.w    #8,A7
000011DC  5443      1695          addq.w    #2,D3
000011DE  6000 FF7A 1696          bra       DumpRegisters_6
                    1697   DumpRegisters_8:
                    1698   ; }
                    1699   ; strcat(WatchPointString[x], "  ") ;
000011E2  4879 0000 1700          pea       @m68kde~1_9.L
000011E6  40A8      
000011E8  220D      1701          move.l    A5,D1
000011EA  48C2      1702          ext.l     D2
000011EC  2F00      1703          move.l    D0,-(A7)
000011EE  2002      1704          move.l    D2,D0
000011F0  C1FC 0064 1705          muls      #100,D0
000011F4  D280      1706          add.l     D0,D1
000011F6  201F      1707          move.l    (A7)+,D0
000011F8  2F01      1708          move.l    D1,-(A7)
000011FA  4EB9 0000 1709          jsr       _strcat
000011FE  2D4A      
00001200  504F      1710          addq.w    #8,A7
                    1711   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001202  48C2      1712          ext.l     D2
00001204  2002      1713          move.l    D2,D0
00001206  E588      1714          lsl.l     #2,D0
00001208  41F9 0803 1715          lea       _WatchPointAddress.L,A0
0000120C  0182      
0000120E  2A30 0800 1716          move.l    0(A0,D0.L),D5
                    1717   ; for(j = 0; j < (short)(16); j++)
00001212  4243      1718          clr.w     D3
                    1719   DumpRegisters_12:
00001214  0C43 0010 1720          cmp.w     #16,D3
00001218  6C00 007E 1721          bge       DumpRegisters_14
                    1722   ; {
                    1723   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000121C  2045      1724          move.l    D5,A0
0000121E  48C3      1725          ext.l     D3
00001220  1030 3800 1726          move.b    0(A0,D3.L),D0
00001224  C03C 007F 1727          and.b     #127,D0
00001228  1E00      1728          move.b    D0,D7
                    1729   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000122A  0C07 007F 1730          cmp.b     #127,D7
0000122E  6206      1731          bhi.s     DumpRegisters_17
00001230  0C07 0020 1732          cmp.b     #32,D7
00001234  6416      1733          bhs.s     DumpRegisters_15
                    1734   DumpRegisters_17:
                    1735   ; sprintf(TempString, ".") ;
00001236  4879 0000 1736          pea       @m68kde~1_25.L
0000123A  427C      
0000123C  4879 0803 1737          pea       _TempString.L
00001240  04E2      
00001242  4EB9 0000 1738          jsr       _sprintf
00001246  2CFE      
00001248  504F      1739          addq.w    #8,A7
0000124A  6026      1740          bra.s     DumpRegisters_16
                    1741   DumpRegisters_15:
                    1742   ; else
                    1743   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000124C  2045      1744          move.l    D5,A0
0000124E  48C3      1745          ext.l     D3
00001250  1230 3800 1746          move.b    0(A0,D3.L),D1
00001254  C2BC 0000 1747          and.l     #255,D1
00001258  00FF      
0000125A  2F01      1748          move.l    D1,-(A7)
0000125C  4879 0000 1749          pea       @m68kde~1_26.L
00001260  427E      
00001262  4879 0803 1750          pea       _TempString.L
00001266  04E2      
00001268  4EB9 0000 1751          jsr       _sprintf
0000126C  2CFE      
0000126E  DEFC 000C 1752          add.w     #12,A7
                    1753   DumpRegisters_16:
                    1754   ; strcat(WatchPointString[x], TempString) ;
00001272  4879 0803 1755          pea       _TempString.L
00001276  04E2      
00001278  220D      1756          move.l    A5,D1
0000127A  48C2      1757          ext.l     D2
0000127C  2F00      1758          move.l    D0,-(A7)
0000127E  2002      1759          move.l    D2,D0
00001280  C1FC 0064 1760          muls      #100,D0
00001284  D280      1761          add.l     D0,D1
00001286  201F      1762          move.l    (A7)+,D0
00001288  2F01      1763          move.l    D1,-(A7)
0000128A  4EB9 0000 1764          jsr       _strcat
0000128E  2D4A      
00001290  504F      1765          addq.w    #8,A7
00001292  5243      1766          addq.w    #1,D3
00001294  6000 FF7E 1767          bra       DumpRegisters_12
                    1768   DumpRegisters_14:
00001298  6020      1769          bra.s     DumpRegisters_5
                    1770   DumpRegisters_4:
                    1771   ; }
                    1772   ; }
                    1773   ; else
                    1774   ; strcpy(WatchPointString[x], "") ;
0000129A  4879 0000 1775          pea       @m68kde~1_27.L
0000129E  4282      
000012A0  220D      1776          move.l    A5,D1
000012A2  48C2      1777          ext.l     D2
000012A4  2F00      1778          move.l    D0,-(A7)
000012A6  2002      1779          move.l    D2,D0
000012A8  C1FC 0064 1780          muls      #100,D0
000012AC  D280      1781          add.l     D0,D1
000012AE  201F      1782          move.l    (A7)+,D0
000012B0  2F01      1783          move.l    D1,-(A7)
000012B2  4EB9 0000 1784          jsr       _strcpy
000012B6  2B78      
000012B8  504F      1785          addq.w    #8,A7
                    1786   DumpRegisters_5:
000012BA  5242      1787          addq.w    #1,D2
000012BC  6000 FE36 1788          bra       DumpRegisters_1
                    1789   DumpRegisters_3:
                    1790   ; }
                    1791   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000012C0  2F39 0803 1792          move.l    _a0.L,-(A7)
000012C4  0104      
000012C6  2F39 0803 1793          move.l    _d0.L,-(A7)
000012CA  00E4      
000012CC  4879 0000 1794          pea       @m68kde~1_28.L
000012D0  4284      
000012D2  4E93      1795          jsr       (A3)
000012D4  DEFC 000C 1796          add.w     #12,A7
                    1797   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000012D8  2F39 0803 1798          move.l    _a1.L,-(A7)
000012DC  0108      
000012DE  2F39 0803 1799          move.l    _d1.L,-(A7)
000012E2  00E8      
000012E4  4879 0000 1800          pea       @m68kde~1_29.L
000012E8  42A0      
000012EA  4E93      1801          jsr       (A3)
000012EC  DEFC 000C 1802          add.w     #12,A7
                    1803   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000012F0  2F39 0803 1804          move.l    _a2.L,-(A7)
000012F4  010C      
000012F6  2F39 0803 1805          move.l    _d2.L,-(A7)
000012FA  00EC      
000012FC  4879 0000 1806          pea       @m68kde~1_30.L
00001300  42BA      
00001302  4E93      1807          jsr       (A3)
00001304  DEFC 000C 1808          add.w     #12,A7
                    1809   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001308  2F39 0803 1810          move.l    _a3.L,-(A7)
0000130C  0110      
0000130E  2F39 0803 1811          move.l    _d3.L,-(A7)
00001312  00F0      
00001314  4879 0000 1812          pea       @m68kde~1_31.L
00001318  42D4      
0000131A  4E93      1813          jsr       (A3)
0000131C  DEFC 000C 1814          add.w     #12,A7
                    1815   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001320  2F39 0803 1816          move.l    _a4.L,-(A7)
00001324  0114      
00001326  2F39 0803 1817          move.l    _d4.L,-(A7)
0000132A  00F4      
0000132C  4879 0000 1818          pea       @m68kde~1_32.L
00001330  42EE      
00001332  4E93      1819          jsr       (A3)
00001334  DEFC 000C 1820          add.w     #12,A7
                    1821   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001338  2F39 0803 1822          move.l    _a5.L,-(A7)
0000133C  0118      
0000133E  2F39 0803 1823          move.l    _d5.L,-(A7)
00001342  00F8      
00001344  4879 0000 1824          pea       @m68kde~1_33.L
00001348  4308      
0000134A  4E93      1825          jsr       (A3)
0000134C  DEFC 000C 1826          add.w     #12,A7
                    1827   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001350  2F39 0803 1828          move.l    _a6.L,-(A7)
00001354  011C      
00001356  2F39 0803 1829          move.l    _d6.L,-(A7)
0000135A  00FC      
0000135C  4879 0000 1830          pea       @m68kde~1_34.L
00001360  4322      
00001362  4E93      1831          jsr       (A3)
00001364  DEFC 000C 1832          add.w     #12,A7
                    1833   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001368  3214      1834          move.w    (A4),D1
0000136A  C27C 2000 1835          and.w     #8192,D1
0000136E  0C41 2000 1836          cmp.w     #8192,D1
00001372  6608      1837          bne.s     DumpRegisters_18
00001374  2239 0803 1838          move.l    _SSP.L,D1
00001378  0124      
0000137A  6006      1839          bra.s     DumpRegisters_19
                    1840   DumpRegisters_18:
0000137C  2239 0803 1841          move.l    _USP.L,D1
00001380  0128      
                    1842   DumpRegisters_19:
00001382  2F01      1843          move.l    D1,-(A7)
00001384  2F39 0803 1844          move.l    _d7.L,-(A7)
00001388  0100      
0000138A  4879 0000 1845          pea       @m68kde~1_35.L
0000138E  433C      
00001390  4E93      1846          jsr       (A3)
00001392  DEFC 000C 1847          add.w     #12,A7
                    1848   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001396  2F39 0803 1849          move.l    _USP.L,-(A7)
0000139A  0128      
0000139C  4879 0000 1850          pea       @m68kde~1_36.L
000013A0  4356      
000013A2  4E93      1851          jsr       (A3)
000013A4  504F      1852          addq.w    #8,A7
                    1853   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013A6  2F39 0803 1854          move.l    _SSP.L,-(A7)
000013AA  0124      
000013AC  4879 0000 1855          pea       @m68kde~1_37.L
000013B0  4374      
000013B2  4E93      1856          jsr       (A3)
000013B4  504F      1857          addq.w    #8,A7
                    1858   ; printf("\r\n SR = $%04X   ",SR) ;
000013B6  3214      1859          move.w    (A4),D1
000013B8  C2BC 0000 1860          and.l     #65535,D1
000013BC  FFFF      
000013BE  2F01      1861          move.l    D1,-(A7)
000013C0  4879 0000 1862          pea       @m68kde~1_38.L
000013C4  4396      
000013C6  4E93      1863          jsr       (A3)
000013C8  504F      1864          addq.w    #8,A7
                    1865   ; // display the status word in characters etc.
                    1866   ; printf("   [") ;
000013CA  4879 0000 1867          pea       @m68kde~1_39.L
000013CE  43A8      
000013D0  4E93      1868          jsr       (A3)
000013D2  584F      1869          addq.w    #4,A7
                    1870   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000013D4  3014      1871          move.w    (A4),D0
000013D6  C07C 8000 1872          and.w     #32768,D0
000013DA  0C40 8000 1873          cmp.w     #32768,D0
000013DE  660A      1874          bne.s     DumpRegisters_20
000013E0  4878 0054 1875          pea       84
000013E4  4E92      1876          jsr       (A2)
000013E6  584F      1877          addq.w    #4,A7
000013E8  6008      1878          bra.s     DumpRegisters_21
                    1879   DumpRegisters_20:
000013EA  4878 002D 1880          pea       45
000013EE  4E92      1881          jsr       (A2)
000013F0  584F      1882          addq.w    #4,A7
                    1883   DumpRegisters_21:
                    1884   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000013F2  3014      1885          move.w    (A4),D0
000013F4  C07C 2000 1886          and.w     #8192,D0
000013F8  0C40 2000 1887          cmp.w     #8192,D0
000013FC  660A      1888          bne.s     DumpRegisters_22
000013FE  4878 0053 1889          pea       83
00001402  4E92      1890          jsr       (A2)
00001404  584F      1891          addq.w    #4,A7
00001406  6008      1892          bra.s     DumpRegisters_23
                    1893   DumpRegisters_22:
00001408  4878 0055 1894          pea       85
0000140C  4E92      1895          jsr       (A2)
0000140E  584F      1896          addq.w    #4,A7
                    1897   DumpRegisters_23:
                    1898   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001410  3014      1899          move.w    (A4),D0
00001412  C07C 0400 1900          and.w     #1024,D0
00001416  0C40 0400 1901          cmp.w     #1024,D0
0000141A  660A      1902          bne.s     DumpRegisters_24
0000141C  4878 0031 1903          pea       49
00001420  4E92      1904          jsr       (A2)
00001422  584F      1905          addq.w    #4,A7
00001424  6008      1906          bra.s     DumpRegisters_25
                    1907   DumpRegisters_24:
00001426  4878 0030 1908          pea       48
0000142A  4E92      1909          jsr       (A2)
0000142C  584F      1910          addq.w    #4,A7
                    1911   DumpRegisters_25:
                    1912   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000142E  3014      1913          move.w    (A4),D0
00001430  C07C 0200 1914          and.w     #512,D0
00001434  0C40 0200 1915          cmp.w     #512,D0
00001438  660A      1916          bne.s     DumpRegisters_26
0000143A  4878 0031 1917          pea       49
0000143E  4E92      1918          jsr       (A2)
00001440  584F      1919          addq.w    #4,A7
00001442  6008      1920          bra.s     DumpRegisters_27
                    1921   DumpRegisters_26:
00001444  4878 0030 1922          pea       48
00001448  4E92      1923          jsr       (A2)
0000144A  584F      1924          addq.w    #4,A7
                    1925   DumpRegisters_27:
                    1926   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000144C  3014      1927          move.w    (A4),D0
0000144E  C07C 0100 1928          and.w     #256,D0
00001452  0C40 0100 1929          cmp.w     #256,D0
00001456  660A      1930          bne.s     DumpRegisters_28
00001458  4878 0031 1931          pea       49
0000145C  4E92      1932          jsr       (A2)
0000145E  584F      1933          addq.w    #4,A7
00001460  6008      1934          bra.s     DumpRegisters_29
                    1935   DumpRegisters_28:
00001462  4878 0030 1936          pea       48
00001466  4E92      1937          jsr       (A2)
00001468  584F      1938          addq.w    #4,A7
                    1939   DumpRegisters_29:
                    1940   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000146A  3014      1941          move.w    (A4),D0
0000146C  C07C 0010 1942          and.w     #16,D0
00001470  0C40 0010 1943          cmp.w     #16,D0
00001474  660A      1944          bne.s     DumpRegisters_30
00001476  4878 0058 1945          pea       88
0000147A  4E92      1946          jsr       (A2)
0000147C  584F      1947          addq.w    #4,A7
0000147E  6008      1948          bra.s     DumpRegisters_31
                    1949   DumpRegisters_30:
00001480  4878 002D 1950          pea       45
00001484  4E92      1951          jsr       (A2)
00001486  584F      1952          addq.w    #4,A7
                    1953   DumpRegisters_31:
                    1954   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001488  3014      1955          move.w    (A4),D0
0000148A  C07C 0008 1956          and.w     #8,D0
0000148E  0C40 0008 1957          cmp.w     #8,D0
00001492  660A      1958          bne.s     DumpRegisters_32
00001494  4878 004E 1959          pea       78
00001498  4E92      1960          jsr       (A2)
0000149A  584F      1961          addq.w    #4,A7
0000149C  6008      1962          bra.s     DumpRegisters_33
                    1963   DumpRegisters_32:
0000149E  4878 002D 1964          pea       45
000014A2  4E92      1965          jsr       (A2)
000014A4  584F      1966          addq.w    #4,A7
                    1967   DumpRegisters_33:
                    1968   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014A6  3014      1969          move.w    (A4),D0
000014A8  C07C 0004 1970          and.w     #4,D0
000014AC  0C40 0004 1971          cmp.w     #4,D0
000014B0  660A      1972          bne.s     DumpRegisters_34
000014B2  4878 005A 1973          pea       90
000014B6  4E92      1974          jsr       (A2)
000014B8  584F      1975          addq.w    #4,A7
000014BA  6008      1976          bra.s     DumpRegisters_35
                    1977   DumpRegisters_34:
000014BC  4878 002D 1978          pea       45
000014C0  4E92      1979          jsr       (A2)
000014C2  584F      1980          addq.w    #4,A7
                    1981   DumpRegisters_35:
                    1982   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000014C4  3014      1983          move.w    (A4),D0
000014C6  C07C 0002 1984          and.w     #2,D0
000014CA  0C40 0002 1985          cmp.w     #2,D0
000014CE  660A      1986          bne.s     DumpRegisters_36
000014D0  4878 0056 1987          pea       86
000014D4  4E92      1988          jsr       (A2)
000014D6  584F      1989          addq.w    #4,A7
000014D8  6008      1990          bra.s     DumpRegisters_37
                    1991   DumpRegisters_36:
000014DA  4878 002D 1992          pea       45
000014DE  4E92      1993          jsr       (A2)
000014E0  584F      1994          addq.w    #4,A7
                    1995   DumpRegisters_37:
                    1996   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000014E2  3014      1997          move.w    (A4),D0
000014E4  C07C 0001 1998          and.w     #1,D0
000014E8  0C40 0001 1999          cmp.w     #1,D0
000014EC  660A      2000          bne.s     DumpRegisters_38
000014EE  4878 0043 2001          pea       67
000014F2  4E92      2002          jsr       (A2)
000014F4  584F      2003          addq.w    #4,A7
000014F6  6008      2004          bra.s     DumpRegisters_39
                    2005   DumpRegisters_38:
000014F8  4878 002D 2006          pea       45
000014FC  4E92      2007          jsr       (A2)
000014FE  584F      2008          addq.w    #4,A7
                    2009   DumpRegisters_39:
                    2010   ; putchar(']') ;
00001500  4878 005D 2011          pea       93
00001504  4E92      2012          jsr       (A2)
00001506  584F      2013          addq.w    #4,A7
                    2014   ; printf("\r\n PC = $%08X  ", PC) ;
00001508  2F39 0803 2015          move.l    _PC.L,-(A7)
0000150C  0120      
0000150E  4879 0000 2016          pea       @m68kde~1_40.L
00001512  43AE      
00001514  4E93      2017          jsr       (A3)
00001516  504F      2018          addq.w    #8,A7
                    2019   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001518  2039 0803 2020          move.l    _PC.L,D0
0000151C  0120      
0000151E  2040      2021          move.l    D0,A0
00001520  3010      2022          move.w    (A0),D0
00001522  0C40 4E4E 2023          cmp.w     #20046,D0
00001526  660A      2024          bne.s     DumpRegisters_40
                    2025   ; printf("[@ BREAKPOINT]") ;
00001528  4879 0000 2026          pea       @m68kde~1_41.L
0000152C  43BE      
0000152E  4E93      2027          jsr       (A3)
00001530  584F      2028          addq.w    #4,A7
                    2029   DumpRegisters_40:
                    2030   ; printf("\r\n") ;
00001532  4879 0000 2031          pea       @m68kde~1_1.L
00001536  402A      
00001538  4E93      2032          jsr       (A3)
0000153A  584F      2033          addq.w    #4,A7
                    2034   ; for(i=0; i < 8; i++)    {
0000153C  4244      2035          clr.w     D4
                    2036   DumpRegisters_42:
0000153E  0C44 0008 2037          cmp.w     #8,D4
00001542  6C00 0040 2038          bge       DumpRegisters_44
                    2039   ; if(WatchPointSetOrCleared[i] == 1)
00001546  48C4      2040          ext.l     D4
00001548  2004      2041          move.l    D4,D0
0000154A  E588      2042          lsl.l     #2,D0
0000154C  41F9 0803 2043          lea       _WatchPointSetOrCleared.L,A0
00001550  01A2      
00001552  2030 0800 2044          move.l    0(A0,D0.L),D0
00001556  0C80 0000 2045          cmp.l     #1,D0
0000155A  0001      
0000155C  6622      2046          bne.s     DumpRegisters_45
                    2047   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000155E  220D      2048          move.l    A5,D1
00001560  48C4      2049          ext.l     D4
00001562  2F00      2050          move.l    D0,-(A7)
00001564  2004      2051          move.l    D4,D0
00001566  C1FC 0064 2052          muls      #100,D0
0000156A  D280      2053          add.l     D0,D1
0000156C  201F      2054          move.l    (A7)+,D0
0000156E  2F01      2055          move.l    D1,-(A7)
00001570  48C4      2056          ext.l     D4
00001572  2F04      2057          move.l    D4,-(A7)
00001574  4879 0000 2058          pea       @m68kde~1_42.L
00001578  43CE      
0000157A  4E93      2059          jsr       (A3)
0000157C  DEFC 000C 2060          add.w     #12,A7
                    2061   DumpRegisters_45:
00001580  5244      2062          addq.w    #1,D4
00001582  60BA      2063          bra       DumpRegisters_42
                    2064   DumpRegisters_44:
00001584  4CDF 3CFC 2065          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001588  4E75      2066          rts
                    2067   ; }
                    2068   ; }
                    2069   ; // Trace Exception Handler
                    2070   ; void DumpRegistersandPause(void)
                    2071   ; {
                    2072   _DumpRegistersandPause:
0000158A  2F0A      2073          move.l    A2,-(A7)
0000158C  45F9 0000 2074          lea       _printf.L,A2
00001590  3654      
                    2075   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001592  4879 0000 2076          pea       @m68kde~1_43.L
00001596  43DA      
00001598  4E92      2077          jsr       (A2)
0000159A  584F      2078          addq.w    #4,A7
                    2079   ; printf("\r\nBreak Points :[Disabled]") ;
0000159C  4879 0000 2080          pea       @m68kde~1_44.L
000015A0  43FA      
000015A2  4E92      2081          jsr       (A2)
000015A4  584F      2082          addq.w    #4,A7
                    2083   ; DumpRegisters() ;
000015A6  4EB8 10D6 2084          jsr       _DumpRegisters
                    2085   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015AA  4879 0000 2086          pea       @m68kde~1_45.L
000015AE  4416      
000015B0  4E92      2087          jsr       (A2)
000015B2  584F      2088          addq.w    #4,A7
                    2089   ; printf("\r\nPress <ESC> to Resume Program") ;
000015B4  4879 0000 2090          pea       @m68kde~1_46.L
000015B8  4442      
000015BA  4E92      2091          jsr       (A2)
000015BC  584F      2092          addq.w    #4,A7
                    2093   ; menu() ;
000015BE  4EB9 0000 2094          jsr       _menu
000015C2  216E      
000015C4  245F      2095          move.l    (A7)+,A2
000015C6  4E75      2096          rts
                    2097   ; }
                    2098   ; void ChangeRegisters(void)
                    2099   ; {
                    2100   _ChangeRegisters:
000015C8  4E56 FFFC 2101          link      A6,#-4
000015CC  48E7 303C 2102          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000015D0  45F9 0000 2103          lea       _printf.L,A2
000015D4  3654      
000015D6  47EE FFFC 2104          lea       -4(A6),A3
000015DA  49F8 0CA4 2105          lea       _Get8HexDigits.L,A4
000015DE  4BF8 0B68 2106          lea       __getch.L,A5
                    2107   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2108   ; int reg_val ;
                    2109   ; char c, reg[3] ;
                    2110   ; reg[0] = tolower(_getch()) ;
000015E2  2F00      2111          move.l    D0,-(A7)
000015E4  4E95      2112          jsr       (A5)
000015E6  2200      2113          move.l    D0,D1
000015E8  201F      2114          move.l    (A7)+,D0
000015EA  2F01      2115          move.l    D1,-(A7)
000015EC  4EB9 0000 2116          jsr       _tolower
000015F0  2CD2      
000015F2  584F      2117          addq.w    #4,A7
000015F4  1680      2118          move.b    D0,(A3)
                    2119   ; reg[1] = c = tolower(_getch()) ;
000015F6  2F00      2120          move.l    D0,-(A7)
000015F8  4E95      2121          jsr       (A5)
000015FA  2200      2122          move.l    D0,D1
000015FC  201F      2123          move.l    (A7)+,D0
000015FE  2F01      2124          move.l    D1,-(A7)
00001600  4EB9 0000 2125          jsr       _tolower
00001604  2CD2      
00001606  584F      2126          addq.w    #4,A7
00001608  1400      2127          move.b    D0,D2
0000160A  1740 0001 2128          move.b    D0,1(A3)
                    2129   ; if(reg[0] == (char)('d'))  {    // change data register
0000160E  1013      2130          move.b    (A3),D0
00001610  0C00 0064 2131          cmp.b     #100,D0
00001614  6600 00AE 2132          bne       ChangeRegisters_1
                    2133   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001618  102B 0001 2134          move.b    1(A3),D0
0000161C  0C00 0037 2135          cmp.b     #55,D0
00001620  6E0A      2136          bgt.s     ChangeRegisters_5
00001622  102B 0001 2137          move.b    1(A3),D0
00001626  0C00 0030 2138          cmp.b     #48,D0
0000162A  6C0E      2139          bge.s     ChangeRegisters_3
                    2140   ChangeRegisters_5:
                    2141   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000162C  4879 0000 2142          pea       @m68kde~1_47.L
00001630  4462      
00001632  4E92      2143          jsr       (A2)
00001634  584F      2144          addq.w    #4,A7
                    2145   ; return ;
00001636  6000 0244 2146          bra       ChangeRegisters_6
                    2147   ChangeRegisters_3:
                    2148   ; }
                    2149   ; else {
                    2150   ; printf("\r\nD%c = ", c) ;
0000163A  4882      2151          ext.w     D2
0000163C  48C2      2152          ext.l     D2
0000163E  2F02      2153          move.l    D2,-(A7)
00001640  4879 0000 2154          pea       @m68kde~1_48.L
00001644  448E      
00001646  4E92      2155          jsr       (A2)
00001648  504F      2156          addq.w    #8,A7
                    2157   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000164A  42A7      2158          clr.l     -(A7)
0000164C  4E94      2159          jsr       (A4)
0000164E  584F      2160          addq.w    #4,A7
00001650  2600      2161          move.l    D0,D3
                    2162   ; }
                    2163   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2164   ; if(c == (char)('0'))
00001652  0C02 0030 2165          cmp.b     #48,D2
00001656  660A      2166          bne.s     ChangeRegisters_7
                    2167   ; d0 = reg_val ;
00001658  23C3 0803 2168          move.l    D3,_d0.L
0000165C  00E4      
0000165E  6000 0060 2169          bra       ChangeRegisters_20
                    2170   ChangeRegisters_7:
                    2171   ; else if(c == (char)('1'))
00001662  0C02 0031 2172          cmp.b     #49,D2
00001666  660A      2173          bne.s     ChangeRegisters_9
                    2174   ; d1 = reg_val ;
00001668  23C3 0803 2175          move.l    D3,_d1.L
0000166C  00E8      
0000166E  6000 0050 2176          bra       ChangeRegisters_20
                    2177   ChangeRegisters_9:
                    2178   ; else if(c == (char)('2'))
00001672  0C02 0032 2179          cmp.b     #50,D2
00001676  660A      2180          bne.s     ChangeRegisters_11
                    2181   ; d2 = reg_val ;
00001678  23C3 0803 2182          move.l    D3,_d2.L
0000167C  00EC      
0000167E  6000 0040 2183          bra       ChangeRegisters_20
                    2184   ChangeRegisters_11:
                    2185   ; else if(c == (char)('3'))
00001682  0C02 0033 2186          cmp.b     #51,D2
00001686  6608      2187          bne.s     ChangeRegisters_13
                    2188   ; d3 = reg_val ;
00001688  23C3 0803 2189          move.l    D3,_d3.L
0000168C  00F0      
0000168E  6030      2190          bra.s     ChangeRegisters_20
                    2191   ChangeRegisters_13:
                    2192   ; else if(c == (char)('4'))
00001690  0C02 0034 2193          cmp.b     #52,D2
00001694  6608      2194          bne.s     ChangeRegisters_15
                    2195   ; d4 = reg_val ;
00001696  23C3 0803 2196          move.l    D3,_d4.L
0000169A  00F4      
0000169C  6022      2197          bra.s     ChangeRegisters_20
                    2198   ChangeRegisters_15:
                    2199   ; else if(c == (char)('5'))
0000169E  0C02 0035 2200          cmp.b     #53,D2
000016A2  6608      2201          bne.s     ChangeRegisters_17
                    2202   ; d5 = reg_val ;
000016A4  23C3 0803 2203          move.l    D3,_d5.L
000016A8  00F8      
000016AA  6014      2204          bra.s     ChangeRegisters_20
                    2205   ChangeRegisters_17:
                    2206   ; else if(c == (char)('6'))
000016AC  0C02 0036 2207          cmp.b     #54,D2
000016B0  6608      2208          bne.s     ChangeRegisters_19
                    2209   ; d6 = reg_val ;
000016B2  23C3 0803 2210          move.l    D3,_d6.L
000016B6  00FC      
000016B8  6006      2211          bra.s     ChangeRegisters_20
                    2212   ChangeRegisters_19:
                    2213   ; else
                    2214   ; d7 = reg_val ;
000016BA  23C3 0803 2215          move.l    D3,_d7.L
000016BE  0100      
                    2216   ChangeRegisters_20:
000016C0  6000 01B6 2217          bra       ChangeRegisters_51
                    2218   ChangeRegisters_1:
                    2219   ; }
                    2220   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000016C4  1013      2221          move.b    (A3),D0
000016C6  0C00 0061 2222          cmp.b     #97,D0
000016CA  6600 00A6 2223          bne       ChangeRegisters_21
                    2224   ; if((c > (char)('7')) || (c < (char)('0'))) {
000016CE  0C02 0037 2225          cmp.b     #55,D2
000016D2  6E06      2226          bgt.s     ChangeRegisters_25
000016D4  0C02 0030 2227          cmp.b     #48,D2
000016D8  6C0E      2228          bge.s     ChangeRegisters_23
                    2229   ChangeRegisters_25:
                    2230   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000016DA  4879 0000 2231          pea       @m68kde~1_49.L
000016DE  4498      
000016E0  4E92      2232          jsr       (A2)
000016E2  584F      2233          addq.w    #4,A7
                    2234   ; return ;
000016E4  6000 0196 2235          bra       ChangeRegisters_6
                    2236   ChangeRegisters_23:
                    2237   ; }
                    2238   ; else {
                    2239   ; printf("\r\nA%c = ", c) ;
000016E8  4882      2240          ext.w     D2
000016EA  48C2      2241          ext.l     D2
000016EC  2F02      2242          move.l    D2,-(A7)
000016EE  4879 0000 2243          pea       @m68kde~1_50.L
000016F2  44C6      
000016F4  4E92      2244          jsr       (A2)
000016F6  504F      2245          addq.w    #8,A7
                    2246   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016F8  42A7      2247          clr.l     -(A7)
000016FA  4E94      2248          jsr       (A4)
000016FC  584F      2249          addq.w    #4,A7
000016FE  2600      2250          move.l    D0,D3
                    2251   ; }
                    2252   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2253   ; if(c == (char)('0'))
00001700  0C02 0030 2254          cmp.b     #48,D2
00001704  660A      2255          bne.s     ChangeRegisters_26
                    2256   ; a0 = reg_val ;
00001706  23C3 0803 2257          move.l    D3,_a0.L
0000170A  0104      
0000170C  6000 0060 2258          bra       ChangeRegisters_39
                    2259   ChangeRegisters_26:
                    2260   ; else if(c == (char)('1'))
00001710  0C02 0031 2261          cmp.b     #49,D2
00001714  660A      2262          bne.s     ChangeRegisters_28
                    2263   ; a1 = reg_val ;
00001716  23C3 0803 2264          move.l    D3,_a1.L
0000171A  0108      
0000171C  6000 0050 2265          bra       ChangeRegisters_39
                    2266   ChangeRegisters_28:
                    2267   ; else if(c == (char)('2'))
00001720  0C02 0032 2268          cmp.b     #50,D2
00001724  660A      2269          bne.s     ChangeRegisters_30
                    2270   ; a2 = reg_val ;
00001726  23C3 0803 2271          move.l    D3,_a2.L
0000172A  010C      
0000172C  6000 0040 2272          bra       ChangeRegisters_39
                    2273   ChangeRegisters_30:
                    2274   ; else if(c == (char)('3'))
00001730  0C02 0033 2275          cmp.b     #51,D2
00001734  6608      2276          bne.s     ChangeRegisters_32
                    2277   ; a3 = reg_val ;
00001736  23C3 0803 2278          move.l    D3,_a3.L
0000173A  0110      
0000173C  6030      2279          bra.s     ChangeRegisters_39
                    2280   ChangeRegisters_32:
                    2281   ; else if(c == (char)('4'))
0000173E  0C02 0034 2282          cmp.b     #52,D2
00001742  6608      2283          bne.s     ChangeRegisters_34
                    2284   ; a4 = reg_val ;
00001744  23C3 0803 2285          move.l    D3,_a4.L
00001748  0114      
0000174A  6022      2286          bra.s     ChangeRegisters_39
                    2287   ChangeRegisters_34:
                    2288   ; else if(c == (char)('5'))
0000174C  0C02 0035 2289          cmp.b     #53,D2
00001750  6608      2290          bne.s     ChangeRegisters_36
                    2291   ; a5 = reg_val ;
00001752  23C3 0803 2292          move.l    D3,_a5.L
00001756  0118      
00001758  6014      2293          bra.s     ChangeRegisters_39
                    2294   ChangeRegisters_36:
                    2295   ; else if(c == (char)('6'))
0000175A  0C02 0036 2296          cmp.b     #54,D2
0000175E  6608      2297          bne.s     ChangeRegisters_38
                    2298   ; a6 = reg_val ;
00001760  23C3 0803 2299          move.l    D3,_a6.L
00001764  011C      
00001766  6006      2300          bra.s     ChangeRegisters_39
                    2301   ChangeRegisters_38:
                    2302   ; else
                    2303   ; USP = reg_val ;
00001768  23C3 0803 2304          move.l    D3,_USP.L
0000176C  0128      
                    2305   ChangeRegisters_39:
0000176E  6000 0108 2306          bra       ChangeRegisters_51
                    2307   ChangeRegisters_21:
                    2308   ; }
                    2309   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001772  1013      2310          move.b    (A3),D0
00001774  0C00 0075 2311          cmp.b     #117,D0
00001778  6600 004E 2312          bne       ChangeRegisters_40
0000177C  0C02 0073 2313          cmp.b     #115,D2
00001780  6600 0046 2314          bne       ChangeRegisters_40
                    2315   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001784  2F00      2316          move.l    D0,-(A7)
00001786  4E95      2317          jsr       (A5)
00001788  2200      2318          move.l    D0,D1
0000178A  201F      2319          move.l    (A7)+,D0
0000178C  2F01      2320          move.l    D1,-(A7)
0000178E  4EB9 0000 2321          jsr       _tolower
00001792  2CD2      
00001794  584F      2322          addq.w    #4,A7
00001796  0C80 0000 2323          cmp.l     #112,D0
0000179A  0070      
0000179C  6618      2324          bne.s     ChangeRegisters_42
                    2325   ; printf("\r\nUser SP = ") ;
0000179E  4879 0000 2326          pea       @m68kde~1_51.L
000017A2  44D0      
000017A4  4E92      2327          jsr       (A2)
000017A6  584F      2328          addq.w    #4,A7
                    2329   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017A8  42A7      2330          clr.l     -(A7)
000017AA  4E94      2331          jsr       (A4)
000017AC  584F      2332          addq.w    #4,A7
000017AE  23C0 0803 2333          move.l    D0,_USP.L
000017B2  0128      
000017B4  600E      2334          bra.s     ChangeRegisters_43
                    2335   ChangeRegisters_42:
                    2336   ; }
                    2337   ; else {
                    2338   ; printf("\r\nIllegal Register....") ;
000017B6  4879 0000 2339          pea       @m68kde~1_52.L
000017BA  44DE      
000017BC  4E92      2340          jsr       (A2)
000017BE  584F      2341          addq.w    #4,A7
                    2342   ; return ;
000017C0  6000 00BA 2343          bra       ChangeRegisters_6
                    2344   ChangeRegisters_43:
000017C4  6000 00B2 2345          bra       ChangeRegisters_51
                    2346   ChangeRegisters_40:
                    2347   ; }
                    2348   ; }
                    2349   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000017C8  1013      2350          move.b    (A3),D0
000017CA  0C00 0073 2351          cmp.b     #115,D0
000017CE  6600 004E 2352          bne       ChangeRegisters_44
000017D2  0C02 0073 2353          cmp.b     #115,D2
000017D6  6600 0046 2354          bne       ChangeRegisters_44
                    2355   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000017DA  2F00      2356          move.l    D0,-(A7)
000017DC  4E95      2357          jsr       (A5)
000017DE  2200      2358          move.l    D0,D1
000017E0  201F      2359          move.l    (A7)+,D0
000017E2  2F01      2360          move.l    D1,-(A7)
000017E4  4EB9 0000 2361          jsr       _tolower
000017E8  2CD2      
000017EA  584F      2362          addq.w    #4,A7
000017EC  0C80 0000 2363          cmp.l     #112,D0
000017F0  0070      
000017F2  6618      2364          bne.s     ChangeRegisters_46
                    2365   ; printf("\r\nSystem SP = ") ;
000017F4  4879 0000 2366          pea       @m68kde~1_53.L
000017F8  44F6      
000017FA  4E92      2367          jsr       (A2)
000017FC  584F      2368          addq.w    #4,A7
                    2369   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017FE  42A7      2370          clr.l     -(A7)
00001800  4E94      2371          jsr       (A4)
00001802  584F      2372          addq.w    #4,A7
00001804  23C0 0803 2373          move.l    D0,_SSP.L
00001808  0124      
0000180A  600E      2374          bra.s     ChangeRegisters_47
                    2375   ChangeRegisters_46:
                    2376   ; }
                    2377   ; else {
                    2378   ; printf("\r\nIllegal Register....") ;
0000180C  4879 0000 2379          pea       @m68kde~1_52.L
00001810  44DE      
00001812  4E92      2380          jsr       (A2)
00001814  584F      2381          addq.w    #4,A7
                    2382   ; return ;
00001816  6000 0064 2383          bra       ChangeRegisters_6
                    2384   ChangeRegisters_47:
0000181A  6000 005C 2385          bra       ChangeRegisters_51
                    2386   ChangeRegisters_44:
                    2387   ; }
                    2388   ; }
                    2389   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
0000181E  1013      2390          move.b    (A3),D0
00001820  0C00 0070 2391          cmp.b     #112,D0
00001824  6620      2392          bne.s     ChangeRegisters_48
00001826  0C02 0063 2393          cmp.b     #99,D2
0000182A  661A      2394          bne.s     ChangeRegisters_48
                    2395   ; printf("\r\nPC = ") ;
0000182C  4879 0000 2396          pea       @m68kde~1_54.L
00001830  4506      
00001832  4E92      2397          jsr       (A2)
00001834  584F      2398          addq.w    #4,A7
                    2399   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001836  42A7      2400          clr.l     -(A7)
00001838  4E94      2401          jsr       (A4)
0000183A  584F      2402          addq.w    #4,A7
0000183C  23C0 0803 2403          move.l    D0,_PC.L
00001840  0120      
00001842  6000 0034 2404          bra       ChangeRegisters_51
                    2405   ChangeRegisters_48:
                    2406   ; }
                    2407   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001846  1013      2408          move.b    (A3),D0
00001848  0C00 0073 2409          cmp.b     #115,D0
0000184C  6620      2410          bne.s     ChangeRegisters_50
0000184E  0C02 0072 2411          cmp.b     #114,D2
00001852  661A      2412          bne.s     ChangeRegisters_50
                    2413   ; printf("\r\nSR = ") ;
00001854  4879 0000 2414          pea       @m68kde~1_55.L
00001858  450E      
0000185A  4E92      2415          jsr       (A2)
0000185C  584F      2416          addq.w    #4,A7
                    2417   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000185E  42A7      2418          clr.l     -(A7)
00001860  4EB8 0C58 2419          jsr       _Get4HexDigits
00001864  584F      2420          addq.w    #4,A7
00001866  33C0 0803 2421          move.w    D0,_SR.L
0000186A  012C      
0000186C  600A      2422          bra.s     ChangeRegisters_51
                    2423   ChangeRegisters_50:
                    2424   ; }
                    2425   ; else
                    2426   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000186E  4879 0000 2427          pea       @m68kde~1_56.L
00001872  4516      
00001874  4E92      2428          jsr       (A2)
00001876  584F      2429          addq.w    #4,A7
                    2430   ChangeRegisters_51:
                    2431   ; DumpRegisters() ;
00001878  4EB8 10D6 2432          jsr       _DumpRegisters
                    2433   ChangeRegisters_6:
0000187C  4CDF 3C0C 2434          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001880  4E5E      2435          unlk      A6
00001882  4E75      2436          rts
                    2437   ; }
                    2438   ; void BreakPointDisplay(void)
                    2439   ; {
                    2440   _BreakPointDisplay:
00001884  48E7 3030 2441          movem.l   D2/D3/A2/A3,-(A7)
00001888  45F9 0000 2442          lea       _printf.L,A2
0000188C  3654      
0000188E  47F9 0803 2443          lea       _BreakPointAddress.L,A3
00001892  012E      
                    2444   ; int i, BreakPointsSet = 0 ;
00001894  4283      2445          clr.l     D3
                    2446   ; // any break points  set
                    2447   ; for(i = 0; i < 8; i++)  {
00001896  4282      2448          clr.l     D2
                    2449   BreakPointDisplay_1:
00001898  0C82 0000 2450          cmp.l     #8,D2
0000189C  0008      
0000189E  6C1C      2451          bge.s     BreakPointDisplay_3
                    2452   ; if(BreakPointSetOrCleared[i] == 1)
000018A0  2002      2453          move.l    D2,D0
000018A2  E588      2454          lsl.l     #2,D0
000018A4  41F9 0803 2455          lea       _BreakPointSetOrCleared.L,A0
000018A8  015E      
000018AA  2030 0800 2456          move.l    0(A0,D0.L),D0
000018AE  0C80 0000 2457          cmp.l     #1,D0
000018B2  0001      
000018B4  6602      2458          bne.s     BreakPointDisplay_4
                    2459   ; BreakPointsSet = 1;
000018B6  7601      2460          moveq     #1,D3
                    2461   BreakPointDisplay_4:
000018B8  5282      2462          addq.l    #1,D2
000018BA  60DC      2463          bra       BreakPointDisplay_1
                    2464   BreakPointDisplay_3:
                    2465   ; }
                    2466   ; if(BreakPointsSet == 1) {
000018BC  0C83 0000 2467          cmp.l     #1,D3
000018C0  0001      
000018C2  6616      2468          bne.s     BreakPointDisplay_6
                    2469   ; printf("\r\n\r\nNum     Address      Instruction") ;
000018C4  4879 0000 2470          pea       @m68kde~1_57.L
000018C8  4552      
000018CA  4E92      2471          jsr       (A2)
000018CC  584F      2472          addq.w    #4,A7
                    2473   ; printf("\r\n---     ---------    -----------") ;
000018CE  4879 0000 2474          pea       @m68kde~1_58.L
000018D2  4578      
000018D4  4E92      2475          jsr       (A2)
000018D6  584F      2476          addq.w    #4,A7
000018D8  600A      2477          bra.s     BreakPointDisplay_7
                    2478   BreakPointDisplay_6:
                    2479   ; }
                    2480   ; else
                    2481   ; printf("\r\nNo BreakPoints Set") ;
000018DA  4879 0000 2482          pea       @m68kde~1_59.L
000018DE  459C      
000018E0  4E92      2483          jsr       (A2)
000018E2  584F      2484          addq.w    #4,A7
                    2485   BreakPointDisplay_7:
                    2486   ; for(i = 0; i < 8; i++)  {
000018E4  4282      2487          clr.l     D2
                    2488   BreakPointDisplay_8:
000018E6  0C82 0000 2489          cmp.l     #8,D2
000018EA  0008      
000018EC  6C00 005A 2490          bge       BreakPointDisplay_10
                    2491   ; // put opcode back, then put break point back
                    2492   ; if(BreakPointSetOrCleared[i] == 1)  {
000018F0  2002      2493          move.l    D2,D0
000018F2  E588      2494          lsl.l     #2,D0
000018F4  41F9 0803 2495          lea       _BreakPointSetOrCleared.L,A0
000018F8  015E      
000018FA  2030 0800 2496          move.l    0(A0,D0.L),D0
000018FE  0C80 0000 2497          cmp.l     #1,D0
00001902  0001      
00001904  6600 003E 2498          bne       BreakPointDisplay_11
                    2499   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001908  2002      2500          move.l    D2,D0
0000190A  E388      2501          lsl.l     #1,D0
0000190C  41F9 0803 2502          lea       _BreakPointInstruction.L,A0
00001910  014E      
00001912  2202      2503          move.l    D2,D1
00001914  E589      2504          lsl.l     #2,D1
00001916  2233 1800 2505          move.l    0(A3,D1.L),D1
0000191A  2241      2506          move.l    D1,A1
0000191C  32B0 0800 2507          move.w    0(A0,D0.L),(A1)
                    2508   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001920  2002      2509          move.l    D2,D0
00001922  E588      2510          lsl.l     #2,D0
00001924  2033 0800 2511          move.l    0(A3,D0.L),D0
00001928  2040      2512          move.l    D0,A0
0000192A  30BC 4E4E 2513          move.w    #20046,(A0)
                    2514   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
0000192E  2202      2515          move.l    D2,D1
00001930  E589      2516          lsl.l     #2,D1
00001932  2F33 1800 2517          move.l    0(A3,D1.L),-(A7)
00001936  2F02      2518          move.l    D2,-(A7)
00001938  4879 0000 2519          pea       @m68kde~1_60.L
0000193C  45B2      
0000193E  4E92      2520          jsr       (A2)
00001940  DEFC 000C 2521          add.w     #12,A7
                    2522   BreakPointDisplay_11:
00001944  5282      2523          addq.l    #1,D2
00001946  609E      2524          bra       BreakPointDisplay_8
                    2525   BreakPointDisplay_10:
                    2526   ; }
                    2527   ; }
                    2528   ; printf("\r\n") ;
00001948  4879 0000 2529          pea       @m68kde~1_1.L
0000194C  402A      
0000194E  4E92      2530          jsr       (A2)
00001950  584F      2531          addq.w    #4,A7
00001952  4CDF 0C0C 2532          movem.l   (A7)+,D2/D3/A2/A3
00001956  4E75      2533          rts
                    2534   ; }
                    2535   ; void WatchPointDisplay(void)
                    2536   ; {
                    2537   _WatchPointDisplay:
00001958  48E7 3020 2538          movem.l   D2/D3/A2,-(A7)
0000195C  45F9 0000 2539          lea       _printf.L,A2
00001960  3654      
                    2540   ; int i ;
                    2541   ; int WatchPointsSet = 0 ;
00001962  4283      2542          clr.l     D3
                    2543   ; // any watchpoints set
                    2544   ; for(i = 0; i < 8; i++)  {
00001964  4282      2545          clr.l     D2
                    2546   WatchPointDisplay_1:
00001966  0C82 0000 2547          cmp.l     #8,D2
0000196A  0008      
0000196C  6C1C      2548          bge.s     WatchPointDisplay_3
                    2549   ; if(WatchPointSetOrCleared[i] == 1)
0000196E  2002      2550          move.l    D2,D0
00001970  E588      2551          lsl.l     #2,D0
00001972  41F9 0803 2552          lea       _WatchPointSetOrCleared.L,A0
00001976  01A2      
00001978  2030 0800 2553          move.l    0(A0,D0.L),D0
0000197C  0C80 0000 2554          cmp.l     #1,D0
00001980  0001      
00001982  6602      2555          bne.s     WatchPointDisplay_4
                    2556   ; WatchPointsSet = 1;
00001984  7601      2557          moveq     #1,D3
                    2558   WatchPointDisplay_4:
00001986  5282      2559          addq.l    #1,D2
00001988  60DC      2560          bra       WatchPointDisplay_1
                    2561   WatchPointDisplay_3:
                    2562   ; }
                    2563   ; if(WatchPointsSet == 1) {
0000198A  0C83 0000 2564          cmp.l     #1,D3
0000198E  0001      
00001990  6616      2565          bne.s     WatchPointDisplay_6
                    2566   ; printf("\r\nNum     Address") ;
00001992  4879 0000 2567          pea       @m68kde~1_61.L
00001996  45C2      
00001998  4E92      2568          jsr       (A2)
0000199A  584F      2569          addq.w    #4,A7
                    2570   ; printf("\r\n---     ---------") ;
0000199C  4879 0000 2571          pea       @m68kde~1_62.L
000019A0  45D4      
000019A2  4E92      2572          jsr       (A2)
000019A4  584F      2573          addq.w    #4,A7
000019A6  600A      2574          bra.s     WatchPointDisplay_7
                    2575   WatchPointDisplay_6:
                    2576   ; }
                    2577   ; else
                    2578   ; printf("\r\nNo WatchPoints Set") ;
000019A8  4879 0000 2579          pea       @m68kde~1_63.L
000019AC  45E8      
000019AE  4E92      2580          jsr       (A2)
000019B0  584F      2581          addq.w    #4,A7
                    2582   WatchPointDisplay_7:
                    2583   ; for(i = 0; i < 8; i++)  {
000019B2  4282      2584          clr.l     D2
                    2585   WatchPointDisplay_8:
000019B4  0C82 0000 2586          cmp.l     #8,D2
000019B8  0008      
000019BA  6C00 0038 2587          bge       WatchPointDisplay_10
                    2588   ; if(WatchPointSetOrCleared[i] == 1)
000019BE  2002      2589          move.l    D2,D0
000019C0  E588      2590          lsl.l     #2,D0
000019C2  41F9 0803 2591          lea       _WatchPointSetOrCleared.L,A0
000019C6  01A2      
000019C8  2030 0800 2592          move.l    0(A0,D0.L),D0
000019CC  0C80 0000 2593          cmp.l     #1,D0
000019D0  0001      
000019D2  661C      2594          bne.s     WatchPointDisplay_11
                    2595   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000019D4  2202      2596          move.l    D2,D1
000019D6  E589      2597          lsl.l     #2,D1
000019D8  41F9 0803 2598          lea       _WatchPointAddress.L,A0
000019DC  0182      
000019DE  2F30 1800 2599          move.l    0(A0,D1.L),-(A7)
000019E2  2F02      2600          move.l    D2,-(A7)
000019E4  4879 0000 2601          pea       @m68kde~1_60.L
000019E8  45B2      
000019EA  4E92      2602          jsr       (A2)
000019EC  DEFC 000C 2603          add.w     #12,A7
                    2604   WatchPointDisplay_11:
000019F0  5282      2605          addq.l    #1,D2
000019F2  60C0      2606          bra       WatchPointDisplay_8
                    2607   WatchPointDisplay_10:
                    2608   ; }
                    2609   ; printf("\r\n") ;
000019F4  4879 0000 2610          pea       @m68kde~1_1.L
000019F8  402A      
000019FA  4E92      2611          jsr       (A2)
000019FC  584F      2612          addq.w    #4,A7
000019FE  4CDF 040C 2613          movem.l   (A7)+,D2/D3/A2
00001A02  4E75      2614          rts
                    2615   ; }
                    2616   ; void BreakPointClear(void)
                    2617   ; {
                    2618   _BreakPointClear:
00001A04  4E56 FFFC 2619          link      A6,#-4
00001A08  48E7 2020 2620          movem.l   D2/A2,-(A7)
00001A0C  45F9 0000 2621          lea       _printf.L,A2
00001A10  3654      
                    2622   ; unsigned int i ;
                    2623   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2624   ; BreakPointDisplay() ;
00001A12  4EB8 1884 2625          jsr       _BreakPointDisplay
                    2626   ; printf("\r\nEnter Break Point Number: ") ;
00001A16  4879 0000 2627          pea       @m68kde~1_64.L
00001A1A  45FE      
00001A1C  4E92      2628          jsr       (A2)
00001A1E  584F      2629          addq.w    #4,A7
                    2630   ; i = xtod(_getch()) ;           // get break pointer number
00001A20  2F00      2631          move.l    D0,-(A7)
00001A22  4EB8 0B68 2632          jsr       __getch
00001A26  2200      2633          move.l    D0,D1
00001A28  201F      2634          move.l    (A7)+,D0
00001A2A  2F01      2635          move.l    D1,-(A7)
00001A2C  4EB8 0BD2 2636          jsr       _xtod
00001A30  584F      2637          addq.w    #4,A7
00001A32  C0BC 0000 2638          and.l     #255,D0
00001A36  00FF      
00001A38  2400      2639          move.l    D0,D2
                    2640   ; if((i < 0) || (i > 7))   {
00001A3A  0C82 0000 2641          cmp.l     #0,D2
00001A3E  0000      
00001A40  6508      2642          blo.s     BreakPointClear_3
00001A42  0C82 0000 2643          cmp.l     #7,D2
00001A46  0007      
00001A48  630E      2644          bls.s     BreakPointClear_1
                    2645   BreakPointClear_3:
                    2646   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A4A  4879 0000 2647          pea       @m68kde~1_65.L
00001A4E  461C      
00001A50  4E92      2648          jsr       (A2)
00001A52  584F      2649          addq.w    #4,A7
                    2650   ; return ;
00001A54  6000 0080 2651          bra       BreakPointClear_4
                    2652   BreakPointClear_1:
                    2653   ; }
                    2654   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001A58  2002      2655          move.l    D2,D0
00001A5A  E588      2656          lsl.l     #2,D0
00001A5C  41F9 0803 2657          lea       _BreakPointSetOrCleared.L,A0
00001A60  015E      
00001A62  2030 0800 2658          move.l    0(A0,D0.L),D0
00001A66  0C80 0000 2659          cmp.l     #1,D0
00001A6A  0001      
00001A6C  6600 005A 2660          bne       BreakPointClear_5
                    2661   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001A70  2002      2662          move.l    D2,D0
00001A72  E588      2663          lsl.l     #2,D0
00001A74  41F9 0803 2664          lea       _BreakPointAddress.L,A0
00001A78  012E      
00001A7A  2D70 0800 2665          move.l    0(A0,D0.L),-4(A6)
00001A7E  FFFC      
                    2666   ; BreakPointAddress[i] = 0 ;
00001A80  2002      2667          move.l    D2,D0
00001A82  E588      2668          lsl.l     #2,D0
00001A84  41F9 0803 2669          lea       _BreakPointAddress.L,A0
00001A88  012E      
00001A8A  42B0 0800 2670          clr.l     0(A0,D0.L)
                    2671   ; BreakPointSetOrCleared[i] = 0 ;
00001A8E  2002      2672          move.l    D2,D0
00001A90  E588      2673          lsl.l     #2,D0
00001A92  41F9 0803 2674          lea       _BreakPointSetOrCleared.L,A0
00001A96  015E      
00001A98  42B0 0800 2675          clr.l     0(A0,D0.L)
                    2676   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001A9C  2002      2677          move.l    D2,D0
00001A9E  E388      2678          lsl.l     #1,D0
00001AA0  41F9 0803 2679          lea       _BreakPointInstruction.L,A0
00001AA4  014E      
00001AA6  226E FFFC 2680          move.l    -4(A6),A1
00001AAA  32B0 0800 2681          move.w    0(A0,D0.L),(A1)
                    2682   ; BreakPointInstruction[i] = 0 ;
00001AAE  2002      2683          move.l    D2,D0
00001AB0  E388      2684          lsl.l     #1,D0
00001AB2  41F9 0803 2685          lea       _BreakPointInstruction.L,A0
00001AB6  014E      
00001AB8  4270 0800 2686          clr.w     0(A0,D0.L)
                    2687   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001ABC  4879 0000 2688          pea       @m68kde~1_66.L
00001AC0  4638      
00001AC2  4E92      2689          jsr       (A2)
00001AC4  584F      2690          addq.w    #4,A7
00001AC6  600A      2691          bra.s     BreakPointClear_6
                    2692   BreakPointClear_5:
                    2693   ; }
                    2694   ; else
                    2695   ; printf("\r\nBreak Point wasn't Set.....") ;
00001AC8  4879 0000 2696          pea       @m68kde~1_67.L
00001ACC  4656      
00001ACE  4E92      2697          jsr       (A2)
00001AD0  584F      2698          addq.w    #4,A7
                    2699   BreakPointClear_6:
                    2700   ; BreakPointDisplay() ;
00001AD2  4EB8 1884 2701          jsr       _BreakPointDisplay
                    2702   ; return ;
                    2703   BreakPointClear_4:
00001AD6  4CDF 0404 2704          movem.l   (A7)+,D2/A2
00001ADA  4E5E      2705          unlk      A6
00001ADC  4E75      2706          rts
                    2707   ; }
                    2708   ; void WatchPointClear(void)
                    2709   ; {
                    2710   _WatchPointClear:
00001ADE  48E7 2020 2711          movem.l   D2/A2,-(A7)
00001AE2  45F9 0000 2712          lea       _printf.L,A2
00001AE6  3654      
                    2713   ; unsigned int i ;
                    2714   ; WatchPointDisplay() ;
00001AE8  4EB8 1958 2715          jsr       _WatchPointDisplay
                    2716   ; printf("\r\nEnter Watch Point Number: ") ;
00001AEC  4879 0000 2717          pea       @m68kde~1_68.L
00001AF0  4674      
00001AF2  4E92      2718          jsr       (A2)
00001AF4  584F      2719          addq.w    #4,A7
                    2720   ; i = xtod(_getch()) ;           // get watch pointer number
00001AF6  2F00      2721          move.l    D0,-(A7)
00001AF8  4EB8 0B68 2722          jsr       __getch
00001AFC  2200      2723          move.l    D0,D1
00001AFE  201F      2724          move.l    (A7)+,D0
00001B00  2F01      2725          move.l    D1,-(A7)
00001B02  4EB8 0BD2 2726          jsr       _xtod
00001B06  584F      2727          addq.w    #4,A7
00001B08  C0BC 0000 2728          and.l     #255,D0
00001B0C  00FF      
00001B0E  2400      2729          move.l    D0,D2
                    2730   ; if((i < 0) || (i > 7))   {
00001B10  0C82 0000 2731          cmp.l     #0,D2
00001B14  0000      
00001B16  6508      2732          blo.s     WatchPointClear_3
00001B18  0C82 0000 2733          cmp.l     #7,D2
00001B1C  0007      
00001B1E  630E      2734          bls.s     WatchPointClear_1
                    2735   WatchPointClear_3:
                    2736   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B20  4879 0000 2737          pea       @m68kde~1_65.L
00001B24  461C      
00001B26  4E92      2738          jsr       (A2)
00001B28  584F      2739          addq.w    #4,A7
                    2740   ; return ;
00001B2A  6000 004E 2741          bra       WatchPointClear_4
                    2742   WatchPointClear_1:
                    2743   ; }
                    2744   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B2E  2002      2745          move.l    D2,D0
00001B30  E588      2746          lsl.l     #2,D0
00001B32  41F9 0803 2747          lea       _WatchPointSetOrCleared.L,A0
00001B36  01A2      
00001B38  2030 0800 2748          move.l    0(A0,D0.L),D0
00001B3C  0C80 0000 2749          cmp.l     #1,D0
00001B40  0001      
00001B42  6628      2750          bne.s     WatchPointClear_5
                    2751   ; WatchPointAddress[i] = 0 ;
00001B44  2002      2752          move.l    D2,D0
00001B46  E588      2753          lsl.l     #2,D0
00001B48  41F9 0803 2754          lea       _WatchPointAddress.L,A0
00001B4C  0182      
00001B4E  42B0 0800 2755          clr.l     0(A0,D0.L)
                    2756   ; WatchPointSetOrCleared[i] = 0 ;
00001B52  2002      2757          move.l    D2,D0
00001B54  E588      2758          lsl.l     #2,D0
00001B56  41F9 0803 2759          lea       _WatchPointSetOrCleared.L,A0
00001B5A  01A2      
00001B5C  42B0 0800 2760          clr.l     0(A0,D0.L)
                    2761   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001B60  4879 0000 2762          pea       @m68kde~1_69.L
00001B64  4692      
00001B66  4E92      2763          jsr       (A2)
00001B68  584F      2764          addq.w    #4,A7
00001B6A  600A      2765          bra.s     WatchPointClear_6
                    2766   WatchPointClear_5:
                    2767   ; }
                    2768   ; else
                    2769   ; printf("\r\nWatch Point Was not Set.....") ;
00001B6C  4879 0000 2770          pea       @m68kde~1_70.L
00001B70  46B0      
00001B72  4E92      2771          jsr       (A2)
00001B74  584F      2772          addq.w    #4,A7
                    2773   WatchPointClear_6:
                    2774   ; WatchPointDisplay() ;
00001B76  4EB8 1958 2775          jsr       _WatchPointDisplay
                    2776   ; return ;
                    2777   WatchPointClear_4:
00001B7A  4CDF 0404 2778          movem.l   (A7)+,D2/A2
00001B7E  4E75      2779          rts
                    2780   ; }
                    2781   ; void DisableBreakPoints(void)
                    2782   ; {
                    2783   _DisableBreakPoints:
00001B80  4E56 FFFC 2784          link      A6,#-4
00001B84  2F02      2785          move.l    D2,-(A7)
                    2786   ; int i ;
                    2787   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2788   ; for(i = 0; i < 8; i++)  {
00001B86  4282      2789          clr.l     D2
                    2790   DisableBreakPoints_1:
00001B88  0C82 0000 2791          cmp.l     #8,D2
00001B8C  0008      
00001B8E  6C00 003E 2792          bge       DisableBreakPoints_3
                    2793   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001B92  2002      2794          move.l    D2,D0
00001B94  E588      2795          lsl.l     #2,D0
00001B96  41F9 0803 2796          lea       _BreakPointSetOrCleared.L,A0
00001B9A  015E      
00001B9C  2030 0800 2797          move.l    0(A0,D0.L),D0
00001BA0  0C80 0000 2798          cmp.l     #1,D0
00001BA4  0001      
00001BA6  6622      2799          bne.s     DisableBreakPoints_4
                    2800   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BA8  2002      2801          move.l    D2,D0
00001BAA  E588      2802          lsl.l     #2,D0
00001BAC  41F9 0803 2803          lea       _BreakPointAddress.L,A0
00001BB0  012E      
00001BB2  2D70 0800 2804          move.l    0(A0,D0.L),-4(A6)
00001BB6  FFFC      
                    2805   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001BB8  2002      2806          move.l    D2,D0
00001BBA  E388      2807          lsl.l     #1,D0
00001BBC  41F9 0803 2808          lea       _BreakPointInstruction.L,A0
00001BC0  014E      
00001BC2  226E FFFC 2809          move.l    -4(A6),A1
00001BC6  32B0 0800 2810          move.w    0(A0,D0.L),(A1)
                    2811   DisableBreakPoints_4:
00001BCA  5282      2812          addq.l    #1,D2
00001BCC  60BA      2813          bra       DisableBreakPoints_1
                    2814   DisableBreakPoints_3:
00001BCE  241F      2815          move.l    (A7)+,D2
00001BD0  4E5E      2816          unlk      A6
00001BD2  4E75      2817          rts
                    2818   ; }
                    2819   ; }
                    2820   ; }
                    2821   ; void EnableBreakPoints(void)
                    2822   ; {
                    2823   _EnableBreakPoints:
00001BD4  4E56 FFFC 2824          link      A6,#-4
00001BD8  2F02      2825          move.l    D2,-(A7)
                    2826   ; int i ;
                    2827   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2828   ; for(i = 0; i < 8; i++)  {
00001BDA  4282      2829          clr.l     D2
                    2830   EnableBreakPoints_1:
00001BDC  0C82 0000 2831          cmp.l     #8,D2
00001BE0  0008      
00001BE2  6C32      2832          bge.s     EnableBreakPoints_3
                    2833   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001BE4  2002      2834          move.l    D2,D0
00001BE6  E588      2835          lsl.l     #2,D0
00001BE8  41F9 0803 2836          lea       _BreakPointSetOrCleared.L,A0
00001BEC  015E      
00001BEE  2030 0800 2837          move.l    0(A0,D0.L),D0
00001BF2  0C80 0000 2838          cmp.l     #1,D0
00001BF6  0001      
00001BF8  6618      2839          bne.s     EnableBreakPoints_4
                    2840   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BFA  2002      2841          move.l    D2,D0
00001BFC  E588      2842          lsl.l     #2,D0
00001BFE  41F9 0803 2843          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  2D70 0800 2844          move.l    0(A0,D0.L),-4(A6)
00001C08  FFFC      
                    2845   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C0A  206E FFFC 2846          move.l    -4(A6),A0
00001C0E  30BC 4E4E 2847          move.w    #20046,(A0)
                    2848   EnableBreakPoints_4:
00001C12  5282      2849          addq.l    #1,D2
00001C14  60C6      2850          bra       EnableBreakPoints_1
                    2851   EnableBreakPoints_3:
00001C16  241F      2852          move.l    (A7)+,D2
00001C18  4E5E      2853          unlk      A6
00001C1A  4E75      2854          rts
                    2855   ; }
                    2856   ; }
                    2857   ; }
                    2858   ; void KillAllBreakPoints(void)
                    2859   ; {
                    2860   _KillAllBreakPoints:
00001C1C  4E56 FFFC 2861          link      A6,#-4
00001C20  2F02      2862          move.l    D2,-(A7)
                    2863   ; int i ;
                    2864   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2865   ; for(i = 0; i < 8; i++)  {
00001C22  4282      2866          clr.l     D2
                    2867   KillAllBreakPoints_1:
00001C24  0C82 0000 2868          cmp.l     #8,D2
00001C28  0008      
00001C2A  6C00 0052 2869          bge       KillAllBreakPoints_3
                    2870   ; // clear BP
                    2871   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C2E  2002      2872          move.l    D2,D0
00001C30  E588      2873          lsl.l     #2,D0
00001C32  41F9 0803 2874          lea       _BreakPointAddress.L,A0
00001C36  012E      
00001C38  2D70 0800 2875          move.l    0(A0,D0.L),-4(A6)
00001C3C  FFFC      
                    2876   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C3E  2002      2877          move.l    D2,D0
00001C40  E388      2878          lsl.l     #1,D0
00001C42  41F9 0803 2879          lea       _BreakPointInstruction.L,A0
00001C46  014E      
00001C48  226E FFFC 2880          move.l    -4(A6),A1
00001C4C  32B0 0800 2881          move.w    0(A0,D0.L),(A1)
                    2882   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C50  2002      2883          move.l    D2,D0
00001C52  E588      2884          lsl.l     #2,D0
00001C54  41F9 0803 2885          lea       _BreakPointAddress.L,A0
00001C58  012E      
00001C5A  42B0 0800 2886          clr.l     0(A0,D0.L)
                    2887   ; BreakPointInstruction[i] = 0 ;
00001C5E  2002      2888          move.l    D2,D0
00001C60  E388      2889          lsl.l     #1,D0
00001C62  41F9 0803 2890          lea       _BreakPointInstruction.L,A0
00001C66  014E      
00001C68  4270 0800 2891          clr.w     0(A0,D0.L)
                    2892   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C6C  2002      2893          move.l    D2,D0
00001C6E  E588      2894          lsl.l     #2,D0
00001C70  41F9 0803 2895          lea       _BreakPointSetOrCleared.L,A0
00001C74  015E      
00001C76  42B0 0800 2896          clr.l     0(A0,D0.L)
00001C7A  5282      2897          addq.l    #1,D2
00001C7C  60A6      2898          bra       KillAllBreakPoints_1
                    2899   KillAllBreakPoints_3:
00001C7E  241F      2900          move.l    (A7)+,D2
00001C80  4E5E      2901          unlk      A6
00001C82  4E75      2902          rts
                    2903   ; }
                    2904   ; //BreakPointDisplay() ;       // display the break points
                    2905   ; }
                    2906   ; void KillAllWatchPoints(void)
                    2907   ; {
                    2908   _KillAllWatchPoints:
00001C84  2F02      2909          move.l    D2,-(A7)
                    2910   ; int i ;
                    2911   ; for(i = 0; i < 8; i++)  {
00001C86  4282      2912          clr.l     D2
                    2913   KillAllWatchPoints_1:
00001C88  0C82 0000 2914          cmp.l     #8,D2
00001C8C  0008      
00001C8E  6C20      2915          bge.s     KillAllWatchPoints_3
                    2916   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C90  2002      2917          move.l    D2,D0
00001C92  E588      2918          lsl.l     #2,D0
00001C94  41F9 0803 2919          lea       _WatchPointAddress.L,A0
00001C98  0182      
00001C9A  42B0 0800 2920          clr.l     0(A0,D0.L)
                    2921   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C9E  2002      2922          move.l    D2,D0
00001CA0  E588      2923          lsl.l     #2,D0
00001CA2  41F9 0803 2924          lea       _WatchPointSetOrCleared.L,A0
00001CA6  01A2      
00001CA8  42B0 0800 2925          clr.l     0(A0,D0.L)
00001CAC  5282      2926          addq.l    #1,D2
00001CAE  60D8      2927          bra       KillAllWatchPoints_1
                    2928   KillAllWatchPoints_3:
00001CB0  241F      2929          move.l    (A7)+,D2
00001CB2  4E75      2930          rts
                    2931   ; }
                    2932   ; //WatchPointDisplay() ;       // display the break points
                    2933   ; }
                    2934   ; void SetBreakPoint(void)
                    2935   ; {
                    2936   _SetBreakPoint:
00001CB4  4E56 FFFC 2937          link      A6,#-4
00001CB8  48E7 3830 2938          movem.l   D2/D3/D4/A2/A3,-(A7)
00001CBC  45F9 0000 2939          lea       _printf.L,A2
00001CC0  3654      
00001CC2  47F9 0803 2940          lea       _BreakPointSetOrCleared.L,A3
00001CC6  015E      
                    2941   ; int i ;
                    2942   ; int BPNumber;
                    2943   ; int BPAddress;
                    2944   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2945   ; // see if any free break points
                    2946   ; for(i = 0; i < 8; i ++) {
00001CC8  4282      2947          clr.l     D2
                    2948   SetBreakPoint_1:
00001CCA  0C82 0000 2949          cmp.l     #8,D2
00001CCE  0008      
00001CD0  6C10      2950          bge.s     SetBreakPoint_3
                    2951   ; if( BreakPointSetOrCleared[i] == 0)
00001CD2  2002      2952          move.l    D2,D0
00001CD4  E588      2953          lsl.l     #2,D0
00001CD6  2033 0800 2954          move.l    0(A3,D0.L),D0
00001CDA  6602      2955          bne.s     SetBreakPoint_4
                    2956   ; break ;         // if spare BP found allow user to set it
00001CDC  6004      2957          bra.s     SetBreakPoint_3
                    2958   SetBreakPoint_4:
00001CDE  5282      2959          addq.l    #1,D2
00001CE0  60E8      2960          bra       SetBreakPoint_1
                    2961   SetBreakPoint_3:
                    2962   ; }
                    2963   ; if(i == 8) {
00001CE2  0C82 0000 2964          cmp.l     #8,D2
00001CE6  0008      
00001CE8  660E      2965          bne.s     SetBreakPoint_6
                    2966   ; printf("\r\nNo FREE Break Points.....") ;
00001CEA  4879 0000 2967          pea       @m68kde~1_71.L
00001CEE  46D0      
00001CF0  4E92      2968          jsr       (A2)
00001CF2  584F      2969          addq.w    #4,A7
                    2970   ; return ;
00001CF4  6000 00D6 2971          bra       SetBreakPoint_15
                    2972   SetBreakPoint_6:
                    2973   ; }
                    2974   ; printf("\r\nBreak Point Address: ") ;
00001CF8  4879 0000 2975          pea       @m68kde~1_72.L
00001CFC  46EC      
00001CFE  4E92      2976          jsr       (A2)
00001D00  584F      2977          addq.w    #4,A7
                    2978   ; BPAddress = Get8HexDigits(0) ;
00001D02  42A7      2979          clr.l     -(A7)
00001D04  4EB8 0CA4 2980          jsr       _Get8HexDigits
00001D08  584F      2981          addq.w    #4,A7
00001D0A  2600      2982          move.l    D0,D3
                    2983   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D0C  2803      2984          move.l    D3,D4
                    2985   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D0E  2003      2986          move.l    D3,D0
00001D10  C0BC 0000 2987          and.l     #1,D0
00001D14  0001      
00001D16  0C80 0000 2988          cmp.l     #1,D0
00001D1A  0001      
00001D1C  660E      2989          bne.s     SetBreakPoint_9
                    2990   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D1E  4879 0000 2991          pea       @m68kde~1_73.L
00001D22  4704      
00001D24  4E92      2992          jsr       (A2)
00001D26  584F      2993          addq.w    #4,A7
                    2994   ; return ;
00001D28  6000 00A2 2995          bra       SetBreakPoint_15
                    2996   SetBreakPoint_9:
                    2997   ; }
                    2998   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D2C  0C83 0000 2999          cmp.l     #32768,D3
00001D30  8000      
00001D32  640E      3000          bhs.s     SetBreakPoint_11
                    3001   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D34  4879 0000 3002          pea       @m68kde~1_74.L
00001D38  473A      
00001D3A  4E92      3003          jsr       (A2)
00001D3C  584F      3004          addq.w    #4,A7
                    3005   ; return ;
00001D3E  6000 008C 3006          bra       SetBreakPoint_15
                    3007   SetBreakPoint_11:
                    3008   ; }
                    3009   ; // search for first free bp or existing same BP
                    3010   ; for(i = 0; i < 8; i++)  {
00001D42  4282      3011          clr.l     D2
                    3012   SetBreakPoint_13:
00001D44  0C82 0000 3013          cmp.l     #8,D2
00001D48  0008      
00001D4A  6C00 0080 3014          bge       SetBreakPoint_15
                    3015   ; if(BreakPointAddress[i] == BPAddress)   {
00001D4E  2002      3016          move.l    D2,D0
00001D50  E588      3017          lsl.l     #2,D0
00001D52  41F9 0803 3018          lea       _BreakPointAddress.L,A0
00001D56  012E      
00001D58  B6B0 0800 3019          cmp.l     0(A0,D0.L),D3
00001D5C  6610      3020          bne.s     SetBreakPoint_16
                    3021   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001D5E  2F03      3022          move.l    D3,-(A7)
00001D60  4879 0000 3023          pea       @m68kde~1_75.L
00001D64  4782      
00001D66  4E92      3024          jsr       (A2)
00001D68  504F      3025          addq.w    #8,A7
                    3026   ; return ;
00001D6A  6000 0060 3027          bra       SetBreakPoint_15
                    3028   SetBreakPoint_16:
                    3029   ; }
                    3030   ; if(BreakPointSetOrCleared[i] == 0) {
00001D6E  2002      3031          move.l    D2,D0
00001D70  E588      3032          lsl.l     #2,D0
00001D72  2033 0800 3033          move.l    0(A3,D0.L),D0
00001D76  6600 004E 3034          bne       SetBreakPoint_18
                    3035   ; // set BP here
                    3036   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001D7A  2002      3037          move.l    D2,D0
00001D7C  E588      3038          lsl.l     #2,D0
00001D7E  27BC 0000 3039          move.l    #1,0(A3,D0.L)
00001D82  0001 0800 
                    3040   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001D86  2044      3041          move.l    D4,A0
00001D88  2002      3042          move.l    D2,D0
00001D8A  E388      3043          lsl.l     #1,D0
00001D8C  43F9 0803 3044          lea       _BreakPointInstruction.L,A1
00001D90  014E      
00001D92  3390 0800 3045          move.w    (A0),0(A1,D0.L)
                    3046   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001D96  2F04      3047          move.l    D4,-(A7)
00001D98  4879 0000 3048          pea       @m68kde~1_76.L
00001D9C  47BA      
00001D9E  4E92      3049          jsr       (A2)
00001DA0  504F      3050          addq.w    #8,A7
                    3051   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DA2  2044      3052          move.l    D4,A0
00001DA4  30BC 4E4E 3053          move.w    #20046,(A0)
                    3054   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DA8  2002      3055          move.l    D2,D0
00001DAA  E588      3056          lsl.l     #2,D0
00001DAC  41F9 0803 3057          lea       _BreakPointAddress.L,A0
00001DB0  012E      
00001DB2  2183 0800 3058          move.l    D3,0(A0,D0.L)
                    3059   ; printf("\r\n") ;
00001DB6  4879 0000 3060          pea       @m68kde~1_1.L
00001DBA  402A      
00001DBC  4E92      3061          jsr       (A2)
00001DBE  584F      3062          addq.w    #4,A7
                    3063   ; BreakPointDisplay() ;       // display the break points
00001DC0  4EB8 1884 3064          jsr       _BreakPointDisplay
                    3065   ; return ;
00001DC4  6006      3066          bra.s     SetBreakPoint_15
                    3067   SetBreakPoint_18:
00001DC6  5282      3068          addq.l    #1,D2
00001DC8  6000 FF7A 3069          bra       SetBreakPoint_13
                    3070   SetBreakPoint_15:
00001DCC  4CDF 0C1C 3071          movem.l   (A7)+,D2/D3/D4/A2/A3
00001DD0  4E5E      3072          unlk      A6
00001DD2  4E75      3073          rts
                    3074   ; }
                    3075   ; }
                    3076   ; }
                    3077   ; void SetWatchPoint(void)
                    3078   ; {
                    3079   _SetWatchPoint:
00001DD4  4E56 FFF8 3080          link      A6,#-8
00001DD8  48E7 3030 3081          movem.l   D2/D3/A2/A3,-(A7)
00001DDC  45F9 0000 3082          lea       _printf.L,A2
00001DE0  3654      
00001DE2  47F9 0803 3083          lea       _WatchPointSetOrCleared.L,A3
00001DE6  01A2      
                    3084   ; int i ;
                    3085   ; int WPNumber;
                    3086   ; int WPAddress;
                    3087   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3088   ; // see if any free break points
                    3089   ; for(i = 0; i < 8; i ++) {
00001DE8  4282      3090          clr.l     D2
                    3091   SetWatchPoint_1:
00001DEA  0C82 0000 3092          cmp.l     #8,D2
00001DEE  0008      
00001DF0  6C10      3093          bge.s     SetWatchPoint_3
                    3094   ; if( WatchPointSetOrCleared[i] == 0)
00001DF2  2002      3095          move.l    D2,D0
00001DF4  E588      3096          lsl.l     #2,D0
00001DF6  2033 0800 3097          move.l    0(A3,D0.L),D0
00001DFA  6602      3098          bne.s     SetWatchPoint_4
                    3099   ; break ;         // if spare WP found allow user to set it
00001DFC  6004      3100          bra.s     SetWatchPoint_3
                    3101   SetWatchPoint_4:
00001DFE  5282      3102          addq.l    #1,D2
00001E00  60E8      3103          bra       SetWatchPoint_1
                    3104   SetWatchPoint_3:
                    3105   ; }
                    3106   ; if(i == 8) {
00001E02  0C82 0000 3107          cmp.l     #8,D2
00001E06  0008      
00001E08  660E      3108          bne.s     SetWatchPoint_6
                    3109   ; printf("\r\nNo FREE Watch Points.....") ;
00001E0A  4879 0000 3110          pea       @m68kde~1_77.L
00001E0E  47E0      
00001E10  4E92      3111          jsr       (A2)
00001E12  584F      3112          addq.w    #4,A7
                    3113   ; return ;
00001E14  6000 008C 3114          bra       SetWatchPoint_11
                    3115   SetWatchPoint_6:
                    3116   ; }
                    3117   ; printf("\r\nWatch Point Address: ") ;
00001E18  4879 0000 3118          pea       @m68kde~1_78.L
00001E1C  47FC      
00001E1E  4E92      3119          jsr       (A2)
00001E20  584F      3120          addq.w    #4,A7
                    3121   ; WPAddress = Get8HexDigits(0) ;
00001E22  42A7      3122          clr.l     -(A7)
00001E24  4EB8 0CA4 3123          jsr       _Get8HexDigits
00001E28  584F      3124          addq.w    #4,A7
00001E2A  2600      3125          move.l    D0,D3
                    3126   ; // search for first free wp or existing same wp
                    3127   ; for(i = 0; i < 8; i++)  {
00001E2C  4282      3128          clr.l     D2
                    3129   SetWatchPoint_9:
00001E2E  0C82 0000 3130          cmp.l     #8,D2
00001E32  0008      
00001E34  6C00 006C 3131          bge       SetWatchPoint_11
                    3132   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E38  2002      3133          move.l    D2,D0
00001E3A  E588      3134          lsl.l     #2,D0
00001E3C  41F9 0803 3135          lea       _WatchPointAddress.L,A0
00001E40  0182      
00001E42  B6B0 0800 3136          cmp.l     0(A0,D0.L),D3
00001E46  6614      3137          bne.s     SetWatchPoint_12
00001E48  4A83      3138          tst.l     D3
00001E4A  6710      3139          beq.s     SetWatchPoint_12
                    3140   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E4C  2F03      3141          move.l    D3,-(A7)
00001E4E  4879 0000 3142          pea       @m68kde~1_79.L
00001E52  4814      
00001E54  4E92      3143          jsr       (A2)
00001E56  504F      3144          addq.w    #8,A7
                    3145   ; return ;
00001E58  6000 0048 3146          bra       SetWatchPoint_11
                    3147   SetWatchPoint_12:
                    3148   ; }
                    3149   ; if(WatchPointSetOrCleared[i] == 0) {
00001E5C  2002      3150          move.l    D2,D0
00001E5E  E588      3151          lsl.l     #2,D0
00001E60  2033 0800 3152          move.l    0(A3,D0.L),D0
00001E64  6600 0038 3153          bne       SetWatchPoint_14
                    3154   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001E68  2002      3155          move.l    D2,D0
00001E6A  E588      3156          lsl.l     #2,D0
00001E6C  27BC 0000 3157          move.l    #1,0(A3,D0.L)
00001E70  0001 0800 
                    3158   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001E74  2F03      3159          move.l    D3,-(A7)
00001E76  4879 0000 3160          pea       @m68kde~1_80.L
00001E7A  484A      
00001E7C  4E92      3161          jsr       (A2)
00001E7E  504F      3162          addq.w    #8,A7
                    3163   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001E80  2002      3164          move.l    D2,D0
00001E82  E588      3165          lsl.l     #2,D0
00001E84  41F9 0803 3166          lea       _WatchPointAddress.L,A0
00001E88  0182      
00001E8A  2183 0800 3167          move.l    D3,0(A0,D0.L)
                    3168   ; printf("\r\n") ;
00001E8E  4879 0000 3169          pea       @m68kde~1_1.L
00001E92  402A      
00001E94  4E92      3170          jsr       (A2)
00001E96  584F      3171          addq.w    #4,A7
                    3172   ; WatchPointDisplay() ;       // display the break points
00001E98  4EB8 1958 3173          jsr       _WatchPointDisplay
                    3174   ; return ;
00001E9C  6004      3175          bra.s     SetWatchPoint_11
                    3176   SetWatchPoint_14:
00001E9E  5282      3177          addq.l    #1,D2
00001EA0  608C      3178          bra       SetWatchPoint_9
                    3179   SetWatchPoint_11:
00001EA2  4CDF 0C0C 3180          movem.l   (A7)+,D2/D3/A2/A3
00001EA6  4E5E      3181          unlk      A6
00001EA8  4E75      3182          rts
                    3183   ; }
                    3184   ; }
                    3185   ; }
                    3186   ; void HandleBreakPoint(void)
                    3187   ; {
                    3188   _HandleBreakPoint:
00001EAA  4E56 FFFC 3189          link      A6,#-4
00001EAE  48E7 0038 3190          movem.l   A2/A3/A4,-(A7)
00001EB2  45F9 0803 3191          lea       _i.L,A2
00001EB6  00C4      
00001EB8  47F9 0000 3192          lea       _printf.L,A3
00001EBC  3654      
00001EBE  49F9 0803 3193          lea       _PC.L,A4
00001EC2  0120      
                    3194   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3195   ; // now we have to put the break point back to run the instruction
                    3196   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3197   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001EC4  5594      3198          subq.l    #2,(A4)
                    3199   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001EC6  4879 0000 3200          pea       @m68kde~1_81.L
00001ECA  4870      
00001ECC  4E93      3201          jsr       (A3)
00001ECE  584F      3202          addq.w    #4,A7
                    3203   ; printf("\r\nSingle Step : [ON]") ;
00001ED0  4879 0000 3204          pea       @m68kde~1_82.L
00001ED4  4884      
00001ED6  4E93      3205          jsr       (A3)
00001ED8  584F      3206          addq.w    #4,A7
                    3207   ; printf("\r\nBreakPoints : [Enabled]") ;
00001EDA  4879 0000 3208          pea       @m68kde~1_83.L
00001EDE  489A      
00001EE0  4E93      3209          jsr       (A3)
00001EE2  584F      3210          addq.w    #4,A7
                    3211   ; // now clear the break point (put original instruction back)
                    3212   ; ProgramBreakPointAddress = PC ;
00001EE4  2D54 FFFC 3213          move.l    (A4),-4(A6)
                    3214   ; for(i = 0; i < 8; i ++) {
00001EE8  4292      3215          clr.l     (A2)
                    3216   HandleBreakPoint_1:
00001EEA  2012      3217          move.l    (A2),D0
00001EEC  0C80 0000 3218          cmp.l     #8,D0
00001EF0  0008      
00001EF2  6400 0056 3219          bhs       HandleBreakPoint_3
                    3220   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001EF6  2012      3221          move.l    (A2),D0
00001EF8  E588      3222          lsl.l     #2,D0
00001EFA  41F9 0803 3223          lea       _BreakPointAddress.L,A0
00001EFE  012E      
00001F00  2230 0800 3224          move.l    0(A0,D0.L),D1
00001F04  B294      3225          cmp.l     (A4),D1
00001F06  6600 003E 3226          bne       HandleBreakPoint_4
                    3227   ; BreakPointAddress[i] = 0 ;
00001F0A  2012      3228          move.l    (A2),D0
00001F0C  E588      3229          lsl.l     #2,D0
00001F0E  41F9 0803 3230          lea       _BreakPointAddress.L,A0
00001F12  012E      
00001F14  42B0 0800 3231          clr.l     0(A0,D0.L)
                    3232   ; BreakPointSetOrCleared[i] = 0 ;
00001F18  2012      3233          move.l    (A2),D0
00001F1A  E588      3234          lsl.l     #2,D0
00001F1C  41F9 0803 3235          lea       _BreakPointSetOrCleared.L,A0
00001F20  015E      
00001F22  42B0 0800 3236          clr.l     0(A0,D0.L)
                    3237   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F26  2012      3238          move.l    (A2),D0
00001F28  E388      3239          lsl.l     #1,D0
00001F2A  41F9 0803 3240          lea       _BreakPointInstruction.L,A0
00001F2E  014E      
00001F30  226E FFFC 3241          move.l    -4(A6),A1
00001F34  32B0 0800 3242          move.w    0(A0,D0.L),(A1)
                    3243   ; BreakPointInstruction[i] = 0 ;
00001F38  2012      3244          move.l    (A2),D0
00001F3A  E388      3245          lsl.l     #1,D0
00001F3C  41F9 0803 3246          lea       _BreakPointInstruction.L,A0
00001F40  014E      
00001F42  4270 0800 3247          clr.w     0(A0,D0.L)
                    3248   HandleBreakPoint_4:
00001F46  5292      3249          addq.l    #1,(A2)
00001F48  60A0      3250          bra       HandleBreakPoint_1
                    3251   HandleBreakPoint_3:
                    3252   ; }
                    3253   ; }
                    3254   ; DumpRegisters() ;
00001F4A  4EB8 10D6 3255          jsr       _DumpRegisters
                    3256   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F4E  4879 0000 3257          pea       @m68kde~1_45.L
00001F52  4416      
00001F54  4E93      3258          jsr       (A3)
00001F56  584F      3259          addq.w    #4,A7
                    3260   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001F58  4879 0000 3261          pea       @m68kde~1_84.L
00001F5C  48B4      
00001F5E  4E93      3262          jsr       (A3)
00001F60  584F      3263          addq.w    #4,A7
                    3264   ; menu() ;
00001F62  4EB9 0000 3265          jsr       _menu
00001F66  216E      
00001F68  4CDF 1C00 3266          movem.l   (A7)+,A2/A3/A4
00001F6C  4E5E      3267          unlk      A6
00001F6E  4E75      3268          rts
                    3269   ; }
                    3270   ; void UnknownCommand()
                    3271   ; {
                    3272   _UnknownCommand:
                    3273   ; printf("\r\nUnknown Command.....\r\n") ;
00001F70  4879 0000 3274          pea       @m68kde~1_85.L
00001F74  48DC      
00001F76  4EB9 0000 3275          jsr       _printf
00001F7A  3654      
00001F7C  584F      3276          addq.w    #4,A7
                    3277   ; Help() ;
00001F7E  4EB9 0000 3278          jsr       _Help
00001F82  2094      
00001F84  4E75      3279          rts
                    3280   ; }
                    3281   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3282   ; void CallDebugMonitor(void)
                    3283   ; {
                    3284   _CallDebugMonitor:
                    3285   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001F86  4879 0000 3286          pea       @m68kde~1_86.L
00001F8A  48F6      
00001F8C  4EB9 0000 3287          jsr       _printf
00001F90  3654      
00001F92  584F      3288          addq.w    #4,A7
                    3289   ; menu();
00001F94  4EB9 0000 3290          jsr       _menu
00001F98  216E      
00001F9A  4E75      3291          rts
                    3292   ; }
                    3293   ; void Breakpoint(void)
                    3294   ; {
                    3295   _Breakpoint:
00001F9C  2F02      3296          move.l    D2,-(A7)
                    3297   ; char c;
                    3298   ; c = toupper(_getch());
00001F9E  2F00      3299          move.l    D0,-(A7)
00001FA0  4EB8 0B68 3300          jsr       __getch
00001FA4  2200      3301          move.l    D0,D1
00001FA6  201F      3302          move.l    (A7)+,D0
00001FA8  2F01      3303          move.l    D1,-(A7)
00001FAA  4EB9 0000 3304          jsr       _toupper
00001FAE  2D60      
00001FB0  584F      3305          addq.w    #4,A7
00001FB2  1400      3306          move.b    D0,D2
                    3307   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FB4  0C02 0044 3308          cmp.b     #68,D2
00001FB8  6608      3309          bne.s     Breakpoint_1
                    3310   ; BreakPointDisplay() ;
00001FBA  4EB8 1884 3311          jsr       _BreakPointDisplay
00001FBE  6000 0054 3312          bra       Breakpoint_10
                    3313   Breakpoint_1:
                    3314   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001FC2  0C02 004B 3315          cmp.b     #75,D2
00001FC6  6630      3316          bne.s     Breakpoint_3
                    3317   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001FC8  4879 0000 3318          pea       @m68kde~1_87.L
00001FCC  4916      
00001FCE  4EB9 0000 3319          jsr       _printf
00001FD2  3654      
00001FD4  584F      3320          addq.w    #4,A7
                    3321   ; c = toupper(_getch());
00001FD6  2F00      3322          move.l    D0,-(A7)
00001FD8  4EB8 0B68 3323          jsr       __getch
00001FDC  2200      3324          move.l    D0,D1
00001FDE  201F      3325          move.l    (A7)+,D0
00001FE0  2F01      3326          move.l    D1,-(A7)
00001FE2  4EB9 0000 3327          jsr       _toupper
00001FE6  2D60      
00001FE8  584F      3328          addq.w    #4,A7
00001FEA  1400      3329          move.b    D0,D2
                    3330   ; if(c == (char)('Y'))
00001FEC  0C02 0059 3331          cmp.b     #89,D2
00001FF0  6604      3332          bne.s     Breakpoint_5
                    3333   ; KillAllBreakPoints() ;
00001FF2  4EB8 1C1C 3334          jsr       _KillAllBreakPoints
                    3335   Breakpoint_5:
00001FF6  601C      3336          bra.s     Breakpoint_10
                    3337   Breakpoint_3:
                    3338   ; }
                    3339   ; else if(c == (char)('S')) {
00001FF8  0C02 0053 3340          cmp.b     #83,D2
00001FFC  6606      3341          bne.s     Breakpoint_7
                    3342   ; SetBreakPoint() ;
00001FFE  4EB8 1CB4 3343          jsr       _SetBreakPoint
00002002  6010      3344          bra.s     Breakpoint_10
                    3345   Breakpoint_7:
                    3346   ; }
                    3347   ; else if(c == (char)('C')) {
00002004  0C02 0043 3348          cmp.b     #67,D2
00002008  6606      3349          bne.s     Breakpoint_9
                    3350   ; BreakPointClear() ;
0000200A  4EB8 1A04 3351          jsr       _BreakPointClear
0000200E  6004      3352          bra.s     Breakpoint_10
                    3353   Breakpoint_9:
                    3354   ; }
                    3355   ; else
                    3356   ; UnknownCommand() ;
00002010  4EB8 1F70 3357          jsr       _UnknownCommand
                    3358   Breakpoint_10:
00002014  241F      3359          move.l    (A7)+,D2
00002016  4E75      3360          rts
                    3361   ; }
                    3362   ; void Watchpoint(void)
                    3363   ; {
                    3364   _Watchpoint:
00002018  2F02      3365          move.l    D2,-(A7)
                    3366   ; char c;
                    3367   ; c = toupper(_getch());
0000201A  2F00      3368          move.l    D0,-(A7)
0000201C  4EB8 0B68 3369          jsr       __getch
00002020  2200      3370          move.l    D0,D1
00002022  201F      3371          move.l    (A7)+,D0
00002024  2F01      3372          move.l    D1,-(A7)
00002026  4EB9 0000 3373          jsr       _toupper
0000202A  2D60      
0000202C  584F      3374          addq.w    #4,A7
0000202E  1400      3375          move.b    D0,D2
                    3376   ; if( c == (char)('D'))                                      // WatchPoint Display
00002030  0C02 0044 3377          cmp.b     #68,D2
00002034  6608      3378          bne.s     Watchpoint_1
                    3379   ; WatchPointDisplay() ;
00002036  4EB8 1958 3380          jsr       _WatchPointDisplay
0000203A  6000 0054 3381          bra       Watchpoint_10
                    3382   Watchpoint_1:
                    3383   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000203E  0C02 004B 3384          cmp.b     #75,D2
00002042  6630      3385          bne.s     Watchpoint_3
                    3386   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002044  4879 0000 3387          pea       @m68kde~1_88.L
00002048  4938      
0000204A  4EB9 0000 3388          jsr       _printf
0000204E  3654      
00002050  584F      3389          addq.w    #4,A7
                    3390   ; c = toupper(_getch());
00002052  2F00      3391          move.l    D0,-(A7)
00002054  4EB8 0B68 3392          jsr       __getch
00002058  2200      3393          move.l    D0,D1
0000205A  201F      3394          move.l    (A7)+,D0
0000205C  2F01      3395          move.l    D1,-(A7)
0000205E  4EB9 0000 3396          jsr       _toupper
00002062  2D60      
00002064  584F      3397          addq.w    #4,A7
00002066  1400      3398          move.b    D0,D2
                    3399   ; if(c == (char)('Y'))
00002068  0C02 0059 3400          cmp.b     #89,D2
0000206C  6604      3401          bne.s     Watchpoint_5
                    3402   ; KillAllWatchPoints() ;
0000206E  4EB8 1C84 3403          jsr       _KillAllWatchPoints
                    3404   Watchpoint_5:
00002072  601C      3405          bra.s     Watchpoint_10
                    3406   Watchpoint_3:
                    3407   ; }
                    3408   ; else if(c == (char)('S')) {
00002074  0C02 0053 3409          cmp.b     #83,D2
00002078  6606      3410          bne.s     Watchpoint_7
                    3411   ; SetWatchPoint() ;
0000207A  4EB8 1DD4 3412          jsr       _SetWatchPoint
0000207E  6010      3413          bra.s     Watchpoint_10
                    3414   Watchpoint_7:
                    3415   ; }
                    3416   ; else if(c == (char)('C')) {
00002080  0C02 0043 3417          cmp.b     #67,D2
00002084  6606      3418          bne.s     Watchpoint_9
                    3419   ; WatchPointClear() ;
00002086  4EB8 1ADE 3420          jsr       _WatchPointClear
0000208A  6004      3421          bra.s     Watchpoint_10
                    3422   Watchpoint_9:
                    3423   ; }
                    3424   ; else
                    3425   ; UnknownCommand() ;
0000208C  4EB8 1F70 3426          jsr       _UnknownCommand
                    3427   Watchpoint_10:
00002090  241F      3428          move.l    (A7)+,D2
00002092  4E75      3429          rts
                    3430   ; }
                    3431   ; void Help(void)
                    3432   ; {
                    3433   _Help:
00002094  48E7 2020 3434          movem.l   D2/A2,-(A7)
00002098  45F9 0000 3435          lea       _printf.L,A2
0000209C  3654      
                    3436   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000209E  41F9 0000 3437          lea       @m68kde~1_89.L,A0
000020A2  495A      
000020A4  2408      3438          move.l    A0,D2
                    3439   ; printf(banner) ;
000020A6  2F02      3440          move.l    D2,-(A7)
000020A8  4E92      3441          jsr       (A2)
000020AA  584F      3442          addq.w    #4,A7
                    3443   ; printf("\r\n  Debugger Command Summary") ;
000020AC  4879 0000 3444          pea       @m68kde~1_90.L
000020B0  499E      
000020B2  4E92      3445          jsr       (A2)
000020B4  584F      3446          addq.w    #4,A7
                    3447   ; printf(banner) ;
000020B6  2F02      3448          move.l    D2,-(A7)
000020B8  4E92      3449          jsr       (A2)
000020BA  584F      3450          addq.w    #4,A7
                    3451   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000020BC  4879 0000 3452          pea       @m68kde~1_91.L
000020C0  49BC      
000020C2  4E92      3453          jsr       (A2)
000020C4  584F      3454          addq.w    #4,A7
                    3455   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000020C6  4879 0000 3456          pea       @m68kde~1_92.L
000020CA  4A00      
000020CC  4E92      3457          jsr       (A2)
000020CE  584F      3458          addq.w    #4,A7
                    3459   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000020D0  4879 0000 3460          pea       @m68kde~1_93.L
000020D4  4A38      
000020D6  4E92      3461          jsr       (A2)
000020D8  584F      3462          addq.w    #4,A7
                    3463   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000020DA  4879 0000 3464          pea       @m68kde~1_94.L
000020DE  4A72      
000020E0  4E92      3465          jsr       (A2)
000020E2  584F      3466          addq.w    #4,A7
                    3467   ; printf("\r\n  E            - Enter String into Memory") ;
000020E4  4879 0000 3468          pea       @m68kde~1_95.L
000020E8  4AA4      
000020EA  4E92      3469          jsr       (A2)
000020EC  584F      3470          addq.w    #4,A7
                    3471   ; printf("\r\n  F            - Fill Memory with Data") ;
000020EE  4879 0000 3472          pea       @m68kde~1_96.L
000020F2  4AD0      
000020F4  4E92      3473          jsr       (A2)
000020F6  584F      3474          addq.w    #4,A7
                    3475   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000020F8  2F39 0803 3476          move.l    _PC.L,-(A7)
000020FC  0120      
000020FE  4879 0000 3477          pea       @m68kde~1_97.L
00002102  4AFA      
00002104  4E92      3478          jsr       (A2)
00002106  504F      3479          addq.w    #8,A7
                    3480   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002108  4879 0000 3481          pea       @m68kde~1_98.L
0000210C  4B34      
0000210E  4E92      3482          jsr       (A2)
00002110  584F      3483          addq.w    #4,A7
                    3484   ; printf("\r\n  M            - Memory Examine and Change");
00002112  4879 0000 3485          pea       @m68kde~1_99.L
00002116  4B6C      
00002118  4E92      3486          jsr       (A2)
0000211A  584F      3487          addq.w    #4,A7
                    3488   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000211C  4879 0000 3489          pea       @m68kde~1_100.L
00002120  4B9A      
00002122  4E92      3490          jsr       (A2)
00002124  584F      3491          addq.w    #4,A7
                    3492   ; printf("\r\n  R            - Display 68000 Registers") ;
00002126  4879 0000 3493          pea       @m68kde~1_101.L
0000212A  4BD4      
0000212C  4E92      3494          jsr       (A2)
0000212E  584F      3495          addq.w    #4,A7
                    3496   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002130  4879 0000 3497          pea       @m68kde~1_102.L
00002134  4C00      
00002136  4E92      3498          jsr       (A2)
00002138  584F      3499          addq.w    #4,A7
                    3500   ; printf("\r\n  TM           - Test Memory") ;
0000213A  4879 0000 3501          pea       @m68kde~1_103.L
0000213E  4C32      
00002140  4E92      3502          jsr       (A2)
00002142  584F      3503          addq.w    #4,A7
                    3504   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002144  4879 0000 3505          pea       @m68kde~1_104.L
00002148  4C52      
0000214A  4E92      3506          jsr       (A2)
0000214C  584F      3507          addq.w    #4,A7
                    3508   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
0000214E  4879 0000 3509          pea       @m68kde~1_105.L
00002152  4C7A      
00002154  4E92      3510          jsr       (A2)
00002156  584F      3511          addq.w    #4,A7
                    3512   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002158  4879 0000 3513          pea       @m68kde~1_106.L
0000215C  4CB0      
0000215E  4E92      3514          jsr       (A2)
00002160  584F      3515          addq.w    #4,A7
                    3516   ; printf(banner) ;
00002162  2F02      3517          move.l    D2,-(A7)
00002164  4E92      3518          jsr       (A2)
00002166  584F      3519          addq.w    #4,A7
00002168  4CDF 0404 3520          movem.l   (A7)+,D2/A2
0000216C  4E75      3521          rts
                    3522   ; }
                    3523   ; void menu(void)
                    3524   ; {
                    3525   _menu:
0000216E  48E7 303C 3526          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002172  45F9 0000 3527          lea       _printf.L,A2
00002176  3654      
00002178  47F9 0803 3528          lea       _Trace.L,A3
0000217C  00D8      
0000217E  49F9 0803 3529          lea       _x.L,A4
00002182  00C8      
00002184  4BF9 0803 3530          lea       _SR.L,A5
00002188  012C      
                    3531   ; char c,c1 ;
                    3532   ; while(1)    {
                    3533   menu_1:
                    3534   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000218A  4EB8 0BA6 3535          jsr       _FlushKeyboard
                    3536   ; printf("\r\n#") ;
0000218E  4879 0000 3537          pea       @m68kde~1_107.L
00002192  4CE8      
00002194  4E92      3538          jsr       (A2)
00002196  584F      3539          addq.w    #4,A7
                    3540   ; c = toupper(_getch());
00002198  2F00      3541          move.l    D0,-(A7)
0000219A  4EB8 0B68 3542          jsr       __getch
0000219E  2200      3543          move.l    D0,D1
000021A0  201F      3544          move.l    (A7)+,D0
000021A2  2F01      3545          move.l    D1,-(A7)
000021A4  4EB9 0000 3546          jsr       _toupper
000021A8  2D60      
000021AA  584F      3547          addq.w    #4,A7
000021AC  1400      3548          move.b    D0,D2
                    3549   ; if( c == (char)('L'))                  // load s record file
000021AE  0C02 004C 3550          cmp.b     #76,D2
000021B2  6608      3551          bne.s     menu_4
                    3552   ; Load_SRecordFile() ;
000021B4  4EB8 0E36 3553          jsr       _Load_SRecordFile
000021B8  6000 021E 3554          bra       menu_46
                    3555   menu_4:
                    3556   ; else if( c == (char)('D'))             // dump memory
000021BC  0C02 0044 3557          cmp.b     #68,D2
000021C0  6608      3558          bne.s     menu_6
                    3559   ; DumpMemory() ;
000021C2  4EB8 0CCC 3560          jsr       _DumpMemory
000021C6  6000 0210 3561          bra       menu_46
                    3562   menu_6:
                    3563   ; else if( c == (char)('E'))             // Enter String into memory
000021CA  0C02 0045 3564          cmp.b     #69,D2
000021CE  660A      3565          bne.s     menu_8
                    3566   ; EnterString() ;
000021D0  4EB9 0000 3567          jsr       _EnterString
000021D4  2520      
000021D6  6000 0200 3568          bra       menu_46
                    3569   menu_8:
                    3570   ; else if( c == (char)('F'))             // fill memory
000021DA  0C02 0046 3571          cmp.b     #70,D2
000021DE  6608      3572          bne.s     menu_10
                    3573   ; FillMemory() ;
000021E0  4EB8 0DBC 3574          jsr       _FillMemory
000021E4  6000 01F2 3575          bra       menu_46
                    3576   menu_10:
                    3577   ; else if( c == (char)('G'))  {           // go user program
000021E8  0C02 0047 3578          cmp.b     #71,D2
000021EC  6626      3579          bne.s     menu_12
                    3580   ; printf("\r\nProgram Running.....") ;
000021EE  4879 0000 3581          pea       @m68kde~1_108.L
000021F2  4CEC      
000021F4  4E92      3582          jsr       (A2)
000021F6  584F      3583          addq.w    #4,A7
                    3584   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000021F8  4879 0000 3585          pea       @m68kde~1_109.L
000021FC  4D04      
000021FE  4E92      3586          jsr       (A2)
00002200  584F      3587          addq.w    #4,A7
                    3588   ; GoFlag = 1 ;
00002202  23FC 0000 3589          move.l    #1,_GoFlag.L
00002206  0001 0803 
0000220A  00DC      
                    3590   ; go() ;
0000220C  4EB8 08B8 3591          jsr       _go
00002210  6000 01C6 3592          bra       menu_46
                    3593   menu_12:
                    3594   ; }
                    3595   ; else if( c == (char)('M'))           // memory examine and modify
00002214  0C02 004D 3596          cmp.b     #77,D2
00002218  6608      3597          bne.s     menu_14
                    3598   ; MemoryChange() ;
0000221A  4EB8 0FC4 3599          jsr       _MemoryChange
0000221E  6000 01B8 3600          bra       menu_46
                    3601   menu_14:
                    3602   ; else if( c == (char)('P'))            // Program Flash Chip
00002222  0C02 0050 3603          cmp.b     #80,D2
00002226  6608      3604          bne.s     menu_16
                    3605   ; ProgramFlashChip() ;
00002228  4EB8 10C4 3606          jsr       _ProgramFlashChip
0000222C  6000 01AA 3607          bra       menu_46
                    3608   menu_16:
                    3609   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002230  0C02 0043 3610          cmp.b     #67,D2
00002234  6608      3611          bne.s     menu_18
                    3612   ; LoadFromFlashChip();
00002236  4EB8 10C6 3613          jsr       _LoadFromFlashChip
0000223A  6000 019C 3614          bra       menu_46
                    3615   menu_18:
                    3616   ; else if( c == (char)('R'))             // dump registers
0000223E  0C02 0052 3617          cmp.b     #82,D2
00002242  6608      3618          bne.s     menu_20
                    3619   ; DumpRegisters() ;
00002244  4EB8 10D6 3620          jsr       _DumpRegisters
00002248  6000 018E 3621          bra       menu_46
                    3622   menu_20:
                    3623   ; else if( c == (char)('.'))           // change registers
0000224C  0C02 002E 3624          cmp.b     #46,D2
00002250  6608      3625          bne.s     menu_22
                    3626   ; ChangeRegisters() ;
00002252  4EB8 15C8 3627          jsr       _ChangeRegisters
00002256  6000 0180 3628          bra       menu_46
                    3629   menu_22:
                    3630   ; else if( c == (char)('B'))              // breakpoint command
0000225A  0C02 0042 3631          cmp.b     #66,D2
0000225E  6608      3632          bne.s     menu_24
                    3633   ; Breakpoint() ;
00002260  4EB8 1F9C 3634          jsr       _Breakpoint
00002264  6000 0172 3635          bra       menu_46
                    3636   menu_24:
                    3637   ; else if( c == (char)('T'))  {          // Test command
00002268  0C02 0054 3638          cmp.b     #84,D2
0000226C  6600 0046 3639          bne       menu_26
                    3640   ; c1 = toupper(_getch()) ;
00002270  2F00      3641          move.l    D0,-(A7)
00002272  4EB8 0B68 3642          jsr       __getch
00002276  2200      3643          move.l    D0,D1
00002278  201F      3644          move.l    (A7)+,D0
0000227A  2F01      3645          move.l    D1,-(A7)
0000227C  4EB9 0000 3646          jsr       _toupper
00002280  2D60      
00002282  584F      3647          addq.w    #4,A7
00002284  1600      3648          move.b    D0,D3
                    3649   ; if(c1 == (char)('M'))                    // memory test
00002286  0C03 004D 3650          cmp.b     #77,D3
0000228A  6608      3651          bne.s     menu_28
                    3652   ; MemoryTest() ;
0000228C  4EB9 0000 3653          jsr       _MemoryTest
00002290  2598      
00002292  601C      3654          bra.s     menu_33
                    3655   menu_28:
                    3656   ; else if( c1 == (char)('S'))              // Switch Test command
00002294  0C03 0053 3657          cmp.b     #83,D3
00002298  6606      3658          bne.s     menu_30
                    3659   ; SwitchTest() ;
0000229A  4EB8 0AA4 3660          jsr       _SwitchTest
0000229E  6010      3661          bra.s     menu_33
                    3662   menu_30:
                    3663   ; else if( c1 == (char)('D'))              // display Test command
000022A0  0C03 0044 3664          cmp.b     #68,D3
000022A4  6606      3665          bne.s     menu_32
                    3666   ; TestLEDS() ;
000022A6  4EB8 0A50 3667          jsr       _TestLEDS
000022AA  6004      3668          bra.s     menu_33
                    3669   menu_32:
                    3670   ; else
                    3671   ; UnknownCommand() ;
000022AC  4EB8 1F70 3672          jsr       _UnknownCommand
                    3673   menu_33:
000022B0  6000 0126 3674          bra       menu_46
                    3675   menu_26:
                    3676   ; }
                    3677   ; else if( c == (char)(' ')) {             // Next instruction command
000022B4  0C02 0020 3678          cmp.b     #32,D2
000022B8  6636      3679          bne.s     menu_34
                    3680   ; DisableBreakPoints() ;
000022BA  4EB8 1B80 3681          jsr       _DisableBreakPoints
                    3682   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000022BE  2013      3683          move.l    (A3),D0
000022C0  0C80 0000 3684          cmp.l     #1,D0
000022C4  0001      
000022C6  661A      3685          bne.s     menu_36
000022C8  2039 0803 3686          move.l    _GoFlag.L,D0
000022CC  00DC      
000022CE  0C80 0000 3687          cmp.l     #1,D0
000022D2  0001      
000022D4  660C      3688          bne.s     menu_36
                    3689   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000022D6  13FC 0001 3690          move.b    #1,4194314
000022DA  0040 000A 
                    3691   ; return ;
000022DE  6000 00FC 3692          bra       menu_38
                    3693   menu_36:
                    3694   ; }
                    3695   ; else
                    3696   ; printf("\r\nError: Press 'G' first to start program") ;
000022E2  4879 0000 3697          pea       @m68kde~1_110.L
000022E6  4D32      
000022E8  4E92      3698          jsr       (A2)
000022EA  584F      3699          addq.w    #4,A7
000022EC  6000 00EA 3700          bra       menu_46
                    3701   menu_34:
                    3702   ; }
                    3703   ; else if( c == (char)('S')) {             // single step
000022F0  0C02 0053 3704          cmp.b     #83,D2
000022F4  6600 008C 3705          bne       menu_39
                    3706   ; if(Trace == 0) {
000022F8  2013      3707          move.l    (A3),D0
000022FA  6600 0050 3708          bne       menu_41
                    3709   ; DisableBreakPoints() ;
000022FE  4EB8 1B80 3710          jsr       _DisableBreakPoints
                    3711   ; printf("\r\nSingle Step  :[ON]") ;
00002302  4879 0000 3712          pea       @m68kde~1_111.L
00002306  4D5C      
00002308  4E92      3713          jsr       (A2)
0000230A  584F      3714          addq.w    #4,A7
                    3715   ; printf("\r\nBreak Points :[Disabled]") ;
0000230C  4879 0000 3716          pea       @m68kde~1_44.L
00002310  43FA      
00002312  4E92      3717          jsr       (A2)
00002314  584F      3718          addq.w    #4,A7
                    3719   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002316  0055 8000 3720          or.w      #32768,(A5)
                    3721   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000231A  2F39 0803 3722          move.l    _PC.L,-(A7)
0000231E  0120      
00002320  4879 0000 3723          pea       @m68kde~1_112.L
00002324  4D72      
00002326  4E92      3724          jsr       (A2)
00002328  504F      3725          addq.w    #8,A7
                    3726   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000232A  4879 0000 3727          pea       @m68kde~1_113.L
0000232E  4DA6      
00002330  4E92      3728          jsr       (A2)
00002332  584F      3729          addq.w    #4,A7
                    3730   ; DumpRegisters() ;
00002334  4EB8 10D6 3731          jsr       _DumpRegisters
                    3732   ; Trace = 1;
00002338  26BC 0000 3733          move.l    #1,(A3)
0000233C  0001      
                    3734   ; TraceException = 1;
0000233E  13FC 0001 3735          move.b    #1,4194314
00002342  0040 000A 
                    3736   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002346  28B8 0074 3737          move.l    116,(A4)
0000234A  6032      3738          bra.s     menu_42
                    3739   menu_41:
                    3740   ; }
                    3741   ; else {
                    3742   ; Trace = 0 ;
0000234C  4293      3743          clr.l     (A3)
                    3744   ; TraceException = 0 ;
0000234E  4239 0040 3745          clr.b     4194314
00002352  000A      
                    3746   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002354  28B8 0074 3747          move.l    116,(A4)
                    3748   ; EnableBreakPoints() ;
00002358  4EB8 1BD4 3749          jsr       _EnableBreakPoints
                    3750   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000235C  0255 7FFF 3751          and.w     #32767,(A5)
                    3752   ; printf("\r\nSingle Step : [OFF]") ;
00002360  4879 0000 3753          pea       @m68kde~1_114.L
00002364  4DCA      
00002366  4E92      3754          jsr       (A2)
00002368  584F      3755          addq.w    #4,A7
                    3756   ; printf("\r\nBreak Points :[Enabled]") ;
0000236A  4879 0000 3757          pea       @m68kde~1_115.L
0000236E  4DE0      
00002370  4E92      3758          jsr       (A2)
00002372  584F      3759          addq.w    #4,A7
                    3760   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002374  4879 0000 3761          pea       @m68kde~1_116.L
00002378  4DFA      
0000237A  4E92      3762          jsr       (A2)
0000237C  584F      3763          addq.w    #4,A7
                    3764   menu_42:
0000237E  6000 0058 3765          bra       menu_46
                    3766   menu_39:
                    3767   ; }
                    3768   ; }
                    3769   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002382  0C02 001B 3770          cmp.b     #27,D2
00002386  6600 0040 3771          bne       menu_43
                    3772   ; Trace = 0;
0000238A  4293      3773          clr.l     (A3)
                    3774   ; TraceException = 0;
0000238C  4239 0040 3775          clr.b     4194314
00002390  000A      
                    3776   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002392  28B8 0074 3777          move.l    116,(A4)
                    3778   ; EnableBreakPoints() ;
00002396  4EB8 1BD4 3779          jsr       _EnableBreakPoints
                    3780   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000239A  0255 7FFF 3781          and.w     #32767,(A5)
                    3782   ; printf("\r\nSingle Step  :[OFF]") ;
0000239E  4879 0000 3783          pea       @m68kde~1_117.L
000023A2  4E24      
000023A4  4E92      3784          jsr       (A2)
000023A6  584F      3785          addq.w    #4,A7
                    3786   ; printf("\r\nBreak Points :[Enabled]");
000023A8  4879 0000 3787          pea       @m68kde~1_115.L
000023AC  4DE0      
000023AE  4E92      3788          jsr       (A2)
000023B0  584F      3789          addq.w    #4,A7
                    3790   ; printf("\r\nProgram Running.....") ;
000023B2  4879 0000 3791          pea       @m68kde~1_108.L
000023B6  4CEC      
000023B8  4E92      3792          jsr       (A2)
000023BA  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023BC  4879 0000 3795          pea       @m68kde~1_109.L
000023C0  4D04      
000023C2  4E92      3796          jsr       (A2)
000023C4  584F      3797          addq.w    #4,A7
                    3798   ; return ;
000023C6  6014      3799          bra.s     menu_38
                    3800   menu_43:
                    3801   ; }
                    3802   ; else if( c == (char)('W'))              // Watchpoint command
000023C8  0C02 0057 3803          cmp.b     #87,D2
000023CC  6606      3804          bne.s     menu_45
                    3805   ; Watchpoint() ;
000023CE  4EB8 2018 3806          jsr       _Watchpoint
000023D2  6004      3807          bra.s     menu_46
                    3808   menu_45:
                    3809   ; else
                    3810   ; UnknownCommand() ;
000023D4  4EB8 1F70 3811          jsr       _UnknownCommand
                    3812   menu_46:
000023D8  6000 FDB0 3813          bra       menu_1
                    3814   menu_38:
000023DC  4CDF 3C0C 3815          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000023E0  4E75      3816          rts
                    3817   ; }
                    3818   ; }
                    3819   ; void PrintErrorMessageandAbort(char *string) {
                    3820   _PrintErrorMessageandAbort:
000023E2  4E56 0000 3821          link      A6,#0
                    3822   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000023E6  4879 0000 3823          pea       @m68kde~1_118.L
000023EA  4E3A      
000023EC  4EB9 0000 3824          jsr       _printf
000023F0  3654      
000023F2  584F      3825          addq.w    #4,A7
                    3826   ; printf("%s\r\n", string) ;
000023F4  2F2E 0008 3827          move.l    8(A6),-(A7)
000023F8  4879 0000 3828          pea       @m68kde~1_119.L
000023FC  4E56      
000023FE  4EB9 0000 3829          jsr       _printf
00002402  3654      
00002404  504F      3830          addq.w    #8,A7
                    3831   ; menu() ;
00002406  4EB8 216E 3832          jsr       _menu
0000240A  4E5E      3833          unlk      A6
0000240C  4E75      3834          rts
                    3835   ; }
                    3836   ; void IRQMessage(int level) {
                    3837   _IRQMessage:
0000240E  4E56 0000 3838          link      A6,#0
                    3839   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002412  4879 0000 3840          pea       @m68kde~1_120.L
00002416  4E5C      
00002418  4EB9 0000 3841          jsr       _printf
0000241C  3654      
0000241E  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002420  2F2E 0008 3844          move.l    8(A6),-(A7)
00002424  4879 0000 3845          pea       @m68kde~1_121.L
00002428  4E74      
0000242A  4EB9 0000 3846          jsr       _printf
0000242E  3654      
00002430  504F      3847          addq.w    #8,A7
                    3848   ; menu() ;
00002432  4EB8 216E 3849          jsr       _menu
00002436  4E5E      3850          unlk      A6
00002438  4E75      3851          rts
                    3852   ; }
                    3853   ; void UnhandledIRQ1(void) {
                    3854   _UnhandledIRQ1:
                    3855   ; IRQMessage(1);
0000243A  4878 0001 3856          pea       1
0000243E  4EB8 240E 3857          jsr       _IRQMessage
00002442  584F      3858          addq.w    #4,A7
00002444  4E75      3859          rts
                    3860   ; }
                    3861   ; void UnhandledIRQ2(void) {
                    3862   _UnhandledIRQ2:
                    3863   ; IRQMessage(2);
00002446  4878 0002 3864          pea       2
0000244A  4EB8 240E 3865          jsr       _IRQMessage
0000244E  584F      3866          addq.w    #4,A7
00002450  4E75      3867          rts
                    3868   ; }
                    3869   ; void UnhandledIRQ3(void){
                    3870   _UnhandledIRQ3:
                    3871   ; IRQMessage(3);
00002452  4878 0003 3872          pea       3
00002456  4EB8 240E 3873          jsr       _IRQMessage
0000245A  584F      3874          addq.w    #4,A7
0000245C  4E75      3875          rts
                    3876   ; }
                    3877   ; void UnhandledIRQ4(void) {
                    3878   _UnhandledIRQ4:
                    3879   ; IRQMessage(4);
0000245E  4878 0004 3880          pea       4
00002462  4EB8 240E 3881          jsr       _IRQMessage
00002466  584F      3882          addq.w    #4,A7
00002468  4E75      3883          rts
                    3884   ; }
                    3885   ; void UnhandledIRQ5(void) {
                    3886   _UnhandledIRQ5:
                    3887   ; IRQMessage(5);
0000246A  4878 0005 3888          pea       5
0000246E  4EB8 240E 3889          jsr       _IRQMessage
00002472  584F      3890          addq.w    #4,A7
00002474  4E75      3891          rts
                    3892   ; }
                    3893   ; void UnhandledIRQ6(void) {
                    3894   _UnhandledIRQ6:
                    3895   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002476  4879 0000 3896          pea       @m68kde~1_122.L
0000247A  4E98      
0000247C  4EB8 23E2 3897          jsr       _PrintErrorMessageandAbort
00002480  584F      3898          addq.w    #4,A7
                    3899   ; menu() ;
00002482  4EB8 216E 3900          jsr       _menu
00002486  4E75      3901          rts
                    3902   ; }
                    3903   ; void UnhandledIRQ7(void) {
                    3904   _UnhandledIRQ7:
                    3905   ; IRQMessage(7);
00002488  4878 0007 3906          pea       7
0000248C  4EB8 240E 3907          jsr       _IRQMessage
00002490  584F      3908          addq.w    #4,A7
00002492  4E75      3909          rts
                    3910   ; }
                    3911   ; void UnhandledTrap(void) {
                    3912   _UnhandledTrap:
                    3913   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002494  4879 0000 3914          pea       @m68kde~1_123.L
00002498  4ED8      
0000249A  4EB8 23E2 3915          jsr       _PrintErrorMessageandAbort
0000249E  584F      3916          addq.w    #4,A7
000024A0  4E75      3917          rts
                    3918   ; }
                    3919   ; void BusError() {
                    3920   _BusError:
                    3921   ; PrintErrorMessageandAbort("BUS Error!") ;
000024A2  4879 0000 3922          pea       @m68kde~1_124.L
000024A6  4EEE      
000024A8  4EB8 23E2 3923          jsr       _PrintErrorMessageandAbort
000024AC  584F      3924          addq.w    #4,A7
000024AE  4E75      3925          rts
                    3926   ; }
                    3927   ; void AddressError() {
                    3928   _AddressError:
                    3929   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000024B0  4879 0000 3930          pea       @m68kde~1_125.L
000024B4  4EFA      
000024B6  4EB8 23E2 3931          jsr       _PrintErrorMessageandAbort
000024BA  584F      3932          addq.w    #4,A7
000024BC  4E75      3933          rts
                    3934   ; }
                    3935   ; void IllegalInstruction() {
                    3936   _IllegalInstruction:
                    3937   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000024BE  4879 0000 3938          pea       @m68kde~1_126.L
000024C2  4F0A      
000024C4  4EB8 23E2 3939          jsr       _PrintErrorMessageandAbort
000024C8  584F      3940          addq.w    #4,A7
000024CA  4E75      3941          rts
                    3942   ; }
                    3943   ; void Dividebyzero() {
                    3944   _Dividebyzero:
                    3945   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000024CC  4879 0000 3946          pea       @m68kde~1_127.L
000024D0  4F1E      
000024D2  4EB8 23E2 3947          jsr       _PrintErrorMessageandAbort
000024D6  584F      3948          addq.w    #4,A7
000024D8  4E75      3949          rts
                    3950   ; }
                    3951   ; void Check() {
                    3952   _Check:
                    3953   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000024DA  4879 0000 3954          pea       @m68kde~1_128.L
000024DE  4F2E      
000024E0  4EB8 23E2 3955          jsr       _PrintErrorMessageandAbort
000024E4  584F      3956          addq.w    #4,A7
000024E6  4E75      3957          rts
                    3958   ; }
                    3959   ; void Trapv() {
                    3960   _Trapv:
                    3961   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000024E8  4879 0000 3962          pea       @m68kde~1_129.L
000024EC  4F40      
000024EE  4EB8 23E2 3963          jsr       _PrintErrorMessageandAbort
000024F2  584F      3964          addq.w    #4,A7
000024F4  4E75      3965          rts
                    3966   ; }
                    3967   ; void PrivError() {
                    3968   _PrivError:
                    3969   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000024F6  4879 0000 3970          pea       @m68kde~1_130.L
000024FA  4F52      
000024FC  4EB8 23E2 3971          jsr       _PrintErrorMessageandAbort
00002500  584F      3972          addq.w    #4,A7
00002502  4E75      3973          rts
                    3974   ; }
                    3975   ; void UnitIRQ() {
                    3976   _UnitIRQ:
                    3977   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002504  4879 0000 3978          pea       @m68kde~1_131.L
00002508  4F66      
0000250A  4EB8 23E2 3979          jsr       _PrintErrorMessageandAbort
0000250E  584F      3980          addq.w    #4,A7
00002510  4E75      3981          rts
                    3982   ; }
                    3983   ; void Spurious() {
                    3984   _Spurious:
                    3985   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002512  4879 0000 3986          pea       @m68kde~1_132.L
00002516  4F78      
00002518  4EB8 23E2 3987          jsr       _PrintErrorMessageandAbort
0000251C  584F      3988          addq.w    #4,A7
0000251E  4E75      3989          rts
                    3990   ; }
                    3991   ; void EnterString(void)
                    3992   ; {
                    3993   _EnterString:
00002520  4E56 FFFC 3994          link      A6,#-4
00002524  2F02      3995          move.l    D2,-(A7)
                    3996   ; unsigned char *Start;
                    3997   ; unsigned char c;
                    3998   ; printf("\r\nStart Address in Memory: ") ;
00002526  4879 0000 3999          pea       @m68kde~1_133.L
0000252A  4F86      
0000252C  4EB9 0000 4000          jsr       _printf
00002530  3654      
00002532  584F      4001          addq.w    #4,A7
                    4002   ; Start = Get8HexDigits(0) ;
00002534  42A7      4003          clr.l     -(A7)
00002536  4EB8 0CA4 4004          jsr       _Get8HexDigits
0000253A  584F      4005          addq.w    #4,A7
0000253C  2400      4006          move.l    D0,D2
                    4007   ; printf("\r\nEnter String (ESC to end) :") ;
0000253E  4879 0000 4008          pea       @m68kde~1_134.L
00002542  4FA2      
00002544  4EB9 0000 4009          jsr       _printf
00002548  3654      
0000254A  584F      4010          addq.w    #4,A7
                    4011   ; while((c = getchar()) != 0x1b)
                    4012   EnterString_1:
0000254C  4EB9 0000 4013          jsr       _getch
00002550  2C96      
00002552  1D40 FFFF 4014          move.b    D0,-1(A6)
00002556  0C00 001B 4015          cmp.b     #27,D0
0000255A  670A      4016          beq.s     EnterString_3
                    4017   ; *Start++ = c ;
0000255C  2042      4018          move.l    D2,A0
0000255E  5282      4019          addq.l    #1,D2
00002560  10AE FFFF 4020          move.b    -1(A6),(A0)
00002564  60E6      4021          bra       EnterString_1
                    4022   EnterString_3:
                    4023   ; *Start = 0x00;  // terminate with a null
00002566  2042      4024          move.l    D2,A0
00002568  4210      4025          clr.b     (A0)
0000256A  241F      4026          move.l    (A7)+,D2
0000256C  4E5E      4027          unlk      A6
0000256E  4E75      4028          rts
                    4029   ; }
                    4030   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4031   ; void clearInputBuffer() {
                    4032   _clearInputBuffer:
00002570  4E56 FFFC 4033          link      A6,#-4
                    4034   ; int c;
                    4035   ; while ((c = getchar()) != '\n' && c != EOF);
                    4036   clearInputBuffer_1:
00002574  4EB9 0000 4037          jsr       _getch
00002578  2C96      
0000257A  2D40 FFFC 4038          move.l    D0,-4(A6)
0000257E  0C80 0000 4039          cmp.l     #10,D0
00002582  000A      
00002584  670E      4040          beq.s     clearInputBuffer_3
00002586  202E FFFC 4041          move.l    -4(A6),D0
0000258A  0C80 FFFF 4042          cmp.l     #-1,D0
0000258E  FFFF      
00002590  6702      4043          beq.s     clearInputBuffer_3
00002592  60E0      4044          bra       clearInputBuffer_1
                    4045   clearInputBuffer_3:
00002594  4E5E      4046          unlk      A6
00002596  4E75      4047          rts
                    4048   ; }
                    4049   ; void MemoryTest(void)
                    4050   ; {
                    4051   _MemoryTest:
00002598  4E56 FF44 4052          link      A6,#-188
0000259C  48E7 3E3C 4053          movem.l   D2/D3/D4/D5/D6/A2/A3/A4/A5,-(A7)
000025A0  45F9 0000 4054          lea       _printf.L,A2
000025A4  3654      
000025A6  47F9 0000 4055          lea       _scanf.L,A3
000025AA  2D8C      
000025AC  49F8 0946 4056          lea       _Wait3ms.L,A4
000025B0  4BEE FFFC 4057          lea       -4(A6),A5
                    4058   ; unsigned int *RamPtr, counter1=1 ;
000025B4  2D7C 0000 4059          move.l    #1,-184(A6)
000025B8  0001 FF48 
                    4060   ; register unsigned int i ;
                    4061   ; unsigned int Start, End ;
                    4062   ; char c, text[150];
                    4063   ; unsigned int* addressPointer;
                    4064   ; unsigned int startAddress = NULL;
000025BC  42AE FFF0 4065          clr.l     -16(A6)
                    4066   ; unsigned int endAddress = NULL;
000025C0  42AE FFF4 4067          clr.l     -12(A6)
                    4068   ; unsigned int bitLength;
                    4069   ; unsigned int dataSize = 0;
000025C4  42AE FFF8 4070          clr.l     -8(A6)
                    4071   ; unsigned int dataPattern = 0;
000025C8  4282      4072          clr.l     D2
                    4073   ; unsigned int currAddress;
                    4074   ; unsigned int addrCount;
                    4075   ; unsigned int intBuffer = NULL;
000025CA  4295      4076          clr.l     (A5)
                    4077   ; // printf("\r\nStart Address: ") ;
                    4078   ; // Start = Get8HexDigits(0) ;
                    4079   ; // printf("\r\nEnd Address: ") ;
                    4080   ; // End = Get8HexDigits(0) ;
                    4081   ; // TODO
                    4082   ; scanflush();
000025CC  4EB9 0000 4083          jsr       _scanflush
000025D0  304A      
                    4084   ; memset(text, 0, sizeof(text));  // fills with zeros
000025D2  4878 0096 4085          pea       150
000025D6  42A7      4086          clr.l     -(A7)
000025D8  486E FF5A 4087          pea       -166(A6)
000025DC  4EB9 0000 4088          jsr       _memset
000025E0  2D32      
000025E2  DEFC 000C 4089          add.w     #12,A7
                    4090   ; printf("Enter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
000025E6  4879 0000 4091          pea       @m68kde~1_135.L
000025EA  4FC0      
000025EC  4E92      4092          jsr       (A2)
000025EE  584F      4093          addq.w    #4,A7
                    4094   ; scanf("%c", &dataSize);
000025F0  486E FFF8 4095          pea       -8(A6)
000025F4  4879 0000 4096          pea       @m68kde~1_26.L
000025F8  427E      
000025FA  4E93      4097          jsr       (A3)
000025FC  504F      4098          addq.w    #8,A7
                    4099   ; Wait3ms();
000025FE  4E94      4100          jsr       (A4)
                    4101   ; if (dataSize == '0') {
00002600  202E FFF8 4102          move.l    -8(A6),D0
00002604  0C80 0000 4103          cmp.l     #48,D0
00002608  0030      
0000260A  6600 0064 4104          bne       MemoryTest_1
                    4105   ; printf("Enter which data pattern you want to write into memory\n 0xA1 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
0000260E  4879 0000 4106          pea       @m68kde~1_136.L
00002612  5016      
00002614  4E92      4107          jsr       (A2)
00002616  584F      4108          addq.w    #4,A7
                    4109   ; scanf("%c", &intBuffer);
00002618  2F0D      4110          move.l    A5,-(A7)
0000261A  4879 0000 4111          pea       @m68kde~1_26.L
0000261E  427E      
00002620  4E93      4112          jsr       (A3)
00002622  504F      4113          addq.w    #8,A7
                    4114   ; Wait3ms();
00002624  4E94      4115          jsr       (A4)
                    4116   ; switch (intBuffer) {
00002626  2015      4117          move.l    (A5),D0
00002628  0480 0000 4118          sub.l     #48,D0
0000262C  0030      
0000262E  6500 003A 4119          blo       MemoryTest_4
00002632  0C80 0000 4120          cmp.l     #4,D0
00002636  0004      
00002638  6430      4121          bhs.s     MemoryTest_4
0000263A  E380      4122          asl.l     #1,D0
0000263C  303B 0806 4123          move.w    MemoryTest_5(PC,D0.L),D0
00002640  4EFB 0002 4124          jmp       MemoryTest_5(PC,D0.W)
                    4125   MemoryTest_5:
00002644  0008      4126          dc.w      MemoryTest_6-MemoryTest_5
00002646  0010      4127          dc.w      MemoryTest_7-MemoryTest_5
00002648  0018      4128          dc.w      MemoryTest_8-MemoryTest_5
0000264A  0020      4129          dc.w      MemoryTest_9-MemoryTest_5
                    4130   MemoryTest_6:
                    4131   ; case('0'):
                    4132   ; dataPattern = 0xA1;
0000264C  243C 0000 4133          move.l    #161,D2
00002650  00A1      
                    4134   ; break;
00002652  6016      4135          bra.s     MemoryTest_4
                    4136   MemoryTest_7:
                    4137   ; case('1'):
                    4138   ; dataPattern = 0xB2;
00002654  243C 0000 4139          move.l    #178,D2
00002658  00B2      
                    4140   ; break;
0000265A  600E      4141          bra.s     MemoryTest_4
                    4142   MemoryTest_8:
                    4143   ; case('2'):
                    4144   ; dataPattern = 0xC3;
0000265C  243C 0000 4145          move.l    #195,D2
00002660  00C3      
                    4146   ; break;
00002662  6006      4147          bra.s     MemoryTest_4
                    4148   MemoryTest_9:
                    4149   ; case('3'):
                    4150   ; dataPattern = 0xD4;
00002664  243C 0000 4151          move.l    #212,D2
00002668  00D4      
                    4152   ; break;
                    4153   MemoryTest_4:
                    4154   ; }
                    4155   ; bitLength = 8;
0000266A  7808      4156          moveq     #8,D4
0000266C  6000 00D0 4157          bra       MemoryTest_11
                    4158   MemoryTest_1:
                    4159   ; } else if (dataSize == '1') {
00002670  202E FFF8 4160          move.l    -8(A6),D0
00002674  0C80 0000 4161          cmp.l     #49,D0
00002678  0031      
0000267A  6600 0064 4162          bne       MemoryTest_10
                    4163   ; printf("Enter which data pattern you want to write into memory\n 0xABCD = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
0000267E  4879 0000 4164          pea       @m68kde~1_137.L
00002682  5076      
00002684  4E92      4165          jsr       (A2)
00002686  584F      4166          addq.w    #4,A7
                    4167   ; scanf("%d", &intBuffer);
00002688  2F0D      4168          move.l    A5,-(A7)
0000268A  4879 0000 4169          pea       @m68kde~1_138.L
0000268E  50DE      
00002690  4E93      4170          jsr       (A3)
00002692  504F      4171          addq.w    #8,A7
                    4172   ; Wait3ms();
00002694  4E94      4173          jsr       (A4)
                    4174   ; switch (intBuffer) {
00002696  2015      4175          move.l    (A5),D0
00002698  0480 0000 4176          sub.l     #48,D0
0000269C  0030      
0000269E  6500 003A 4177          blo       MemoryTest_13
000026A2  0C80 0000 4178          cmp.l     #4,D0
000026A6  0004      
000026A8  6430      4179          bhs.s     MemoryTest_13
000026AA  E380      4180          asl.l     #1,D0
000026AC  303B 0806 4181          move.w    MemoryTest_14(PC,D0.L),D0
000026B0  4EFB 0002 4182          jmp       MemoryTest_14(PC,D0.W)
                    4183   MemoryTest_14:
000026B4  0008      4184          dc.w      MemoryTest_15-MemoryTest_14
000026B6  0010      4185          dc.w      MemoryTest_16-MemoryTest_14
000026B8  0018      4186          dc.w      MemoryTest_17-MemoryTest_14
000026BA  0020      4187          dc.w      MemoryTest_18-MemoryTest_14
                    4188   MemoryTest_15:
                    4189   ; case('0'):
                    4190   ; dataPattern = 0xABCD;
000026BC  243C 0000 4191          move.l    #43981,D2
000026C0  ABCD      
                    4192   ; break;
000026C2  6016      4193          bra.s     MemoryTest_13
                    4194   MemoryTest_16:
                    4195   ; case('1'):
                    4196   ; dataPattern = 0x1234;
000026C4  243C 0000 4197          move.l    #4660,D2
000026C8  1234      
                    4198   ; break;
000026CA  600E      4199          bra.s     MemoryTest_13
                    4200   MemoryTest_17:
                    4201   ; case('2'):
                    4202   ; dataPattern = 0xA1B2;
000026CC  243C 0000 4203          move.l    #41394,D2
000026D0  A1B2      
                    4204   ; break;
000026D2  6006      4205          bra.s     MemoryTest_13
                    4206   MemoryTest_18:
                    4207   ; case('3'):
                    4208   ; dataPattern = 0xC3D4;
000026D4  243C 0000 4209          move.l    #50132,D2
000026D8  C3D4      
                    4210   ; break;
                    4211   MemoryTest_13:
                    4212   ; }
                    4213   ; bitLength = 16;
000026DA  7810      4214          moveq     #16,D4
000026DC  6000 0060 4215          bra       MemoryTest_11
                    4216   MemoryTest_10:
                    4217   ; } else {
                    4218   ; printf("Enter which data pattern you want to write into memory\n 0xABCD_1234 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
000026E0  4879 0000 4219          pea       @m68kde~1_139.L
000026E4  50E2      
000026E6  4E92      4220          jsr       (A2)
000026E8  584F      4221          addq.w    #4,A7
                    4222   ; scanf("%d", &intBuffer);
000026EA  2F0D      4223          move.l    A5,-(A7)
000026EC  4879 0000 4224          pea       @m68kde~1_138.L
000026F0  50DE      
000026F2  4E93      4225          jsr       (A3)
000026F4  504F      4226          addq.w    #8,A7
                    4227   ; Wait3ms();
000026F6  4E94      4228          jsr       (A4)
                    4229   ; switch (intBuffer) {
000026F8  2015      4230          move.l    (A5),D0
000026FA  0480 0000 4231          sub.l     #48,D0
000026FE  0030      
00002700  6500 003A 4232          blo       MemoryTest_20
00002704  0C80 0000 4233          cmp.l     #4,D0
00002708  0004      
0000270A  6430      4234          bhs.s     MemoryTest_20
0000270C  E380      4235          asl.l     #1,D0
0000270E  303B 0806 4236          move.w    MemoryTest_21(PC,D0.L),D0
00002712  4EFB 0002 4237          jmp       MemoryTest_21(PC,D0.W)
                    4238   MemoryTest_21:
00002716  0008      4239          dc.w      MemoryTest_22-MemoryTest_21
00002718  0010      4240          dc.w      MemoryTest_23-MemoryTest_21
0000271A  0018      4241          dc.w      MemoryTest_24-MemoryTest_21
0000271C  0020      4242          dc.w      MemoryTest_25-MemoryTest_21
                    4243   MemoryTest_22:
                    4244   ; case('0'):
                    4245   ; dataPattern = 0xABCD1234;
0000271E  243C ABCD 4246          move.l    #-1412623820,D2
00002722  1234      
                    4247   ; break;
00002724  6016      4248          bra.s     MemoryTest_20
                    4249   MemoryTest_23:
                    4250   ; case('1'):
                    4251   ; dataPattern = 0xAABBCCDD;
00002726  243C AABB 4252          move.l    #-1430532899,D2
0000272A  CCDD      
                    4253   ; break;
0000272C  600E      4254          bra.s     MemoryTest_20
                    4255   MemoryTest_24:
                    4256   ; case('2'):
                    4257   ; dataPattern = 0x11223344;
0000272E  243C 1122 4258          move.l    #287454020,D2
00002732  3344      
                    4259   ; break;
00002734  6006      4260          bra.s     MemoryTest_20
                    4261   MemoryTest_25:
                    4262   ; case('3'):
                    4263   ; dataPattern = 0x76543210;
00002736  243C 7654 4264          move.l    #1985229328,D2
0000273A  3210      
                    4265   ; break;
                    4266   MemoryTest_20:
                    4267   ; }
                    4268   ; bitLength = 32;
0000273C  7820      4269          moveq     #32,D4
                    4270   MemoryTest_11:
                    4271   ; }
                    4272   ; while (startAddress == NULL || 
                    4273   MemoryTest_26:
0000273E  202E FFF0 4274          move.l    -16(A6),D0
00002742  6730      4275          beq.s     MemoryTest_29
00002744  2F2E FFF0 4276          move.l    -16(A6),-(A7)
00002748  2F04      4277          move.l    D4,-(A7)
0000274A  4EB9 0000 4278          jsr       ULDIV
0000274E  2B88      
00002750  202F 0004 4279          move.l    4(A7),D0
00002754  504F      4280          addq.w    #8,A7
00002756  4A80      4281          tst.l     D0
00002758  661A      4282          bne.s     MemoryTest_29
0000275A  202E FFF0 4283          move.l    -16(A6),D0
0000275E  0C80 0802 4284          cmp.l     #134348800,D0
00002762  0000      
00002764  650E      4285          blo.s     MemoryTest_29
00002766  203C 0803 4286          move.l    #134414336,D0
0000276A  0000      
0000276C  9084      4287          sub.l     D4,D0
0000276E  B0AE FFF0 4288          cmp.l     -16(A6),D0
00002772  641A      4289          bhs.s     MemoryTest_28
                    4290   MemoryTest_29:
                    4291   ; startAddress % bitLength != 0 || 
                    4292   ; startAddress < 0x08020000 || 
                    4293   ; startAddress > 0x08030000 - bitLength) {
                    4294   ; printf("Provide Start Address in hex (do not use 0x prefix)\n0x");
00002774  4879 0000 4295          pea       @m68kde~1_140.L
00002778  515E      
0000277A  4E92      4296          jsr       (A2)
0000277C  584F      4297          addq.w    #4,A7
                    4298   ; scanf("%x", &startAddress);
0000277E  486E FFF0 4299          pea       -16(A6)
00002782  4879 0000 4300          pea       @m68kde~1_141.L
00002786  5196      
00002788  4E93      4301          jsr       (A3)
0000278A  504F      4302          addq.w    #8,A7
0000278C  60B0      4303          bra       MemoryTest_26
                    4304   MemoryTest_28:
                    4305   ; }
                    4306   ; while (endAddress == NULL || 
                    4307   MemoryTest_30:
0000278E  202E FFF4 4308          move.l    -12(A6),D0
00002792  6730      4309          beq.s     MemoryTest_33
00002794  2F2E FFF4 4310          move.l    -12(A6),-(A7)
00002798  2F04      4311          move.l    D4,-(A7)
0000279A  4EB9 0000 4312          jsr       ULDIV
0000279E  2B88      
000027A0  202F 0004 4313          move.l    4(A7),D0
000027A4  504F      4314          addq.w    #8,A7
000027A6  4A80      4315          tst.l     D0
000027A8  661A      4316          bne.s     MemoryTest_33
000027AA  203C 0803 4317          move.l    #134414336,D0
000027AE  0000      
000027B0  9084      4318          sub.l     D4,D0
000027B2  B0AE FFF4 4319          cmp.l     -12(A6),D0
000027B6  650C      4320          blo.s     MemoryTest_33
000027B8  202E FFF0 4321          move.l    -16(A6),D0
000027BC  D084      4322          add.l     D4,D0
000027BE  B0AE FFF4 4323          cmp.l     -12(A6),D0
000027C2  631A      4324          bls.s     MemoryTest_32
                    4325   MemoryTest_33:
                    4326   ; endAddress % bitLength != 0 || 
                    4327   ; endAddress > 0x08030000 - bitLength || 
                    4328   ; endAddress < startAddress + bitLength) {
                    4329   ; printf("Provide End Address in hex (do not use 0x prefix)\n0x");
000027C4  4879 0000 4330          pea       @m68kde~1_142.L
000027C8  519A      
000027CA  4E92      4331          jsr       (A2)
000027CC  584F      4332          addq.w    #4,A7
                    4333   ; scanf("%x", &endAddress);
000027CE  486E FFF4 4334          pea       -12(A6)
000027D2  4879 0000 4335          pea       @m68kde~1_141.L
000027D6  5196      
000027D8  4E93      4336          jsr       (A3)
000027DA  504F      4337          addq.w    #8,A7
000027DC  60B0      4338          bra       MemoryTest_30
                    4339   MemoryTest_32:
                    4340   ; }
                    4341   ; printf("Start Address 0x%08x\n", startAddress);
000027DE  2F2E FFF0 4342          move.l    -16(A6),-(A7)
000027E2  4879 0000 4343          pea       @m68kde~1_143.L
000027E6  51D0      
000027E8  4E92      4344          jsr       (A2)
000027EA  504F      4345          addq.w    #8,A7
                    4346   ; printf("End Address: 0x%08x\n", endAddress);
000027EC  2F2E FFF4 4347          move.l    -12(A6),-(A7)
000027F0  4879 0000 4348          pea       @m68kde~1_144.L
000027F4  51E6      
000027F6  4E92      4349          jsr       (A2)
000027F8  504F      4350          addq.w    #8,A7
                    4351   ; addrCount = 0;
000027FA  4286      4352          clr.l     D6
                    4353   ; for (currAddress = startAddress; currAddress < endAddress; currAddress += bitLength) {
000027FC  2A2E FFF0 4354          move.l    -16(A6),D5
                    4355   MemoryTest_34:
00002800  BAAE FFF4 4356          cmp.l     -12(A6),D5
00002804  6400 00B0 4357          bhs       MemoryTest_36
                    4358   ; if (endAddress - currAddress >= bitLength) {
00002808  202E FFF4 4359          move.l    -12(A6),D0
0000280C  9085      4360          sub.l     D5,D0
0000280E  B084      4361          cmp.l     D4,D0
00002810  6500 008C 4362          blo       MemoryTest_37
                    4363   ; addressPointer = (int*)(currAddress);
00002814  2605      4364          move.l    D5,D3
                    4365   ; *addressPointer = dataPattern;
00002816  2043      4366          move.l    D3,A0
00002818  2082      4367          move.l    D2,(A0)
                    4368   ; if (*addressPointer != dataPattern) {
0000281A  2043      4369          move.l    D3,A0
0000281C  B490      4370          cmp.l     (A0),D2
0000281E  6714      4371          beq.s     MemoryTest_39
                    4372   ; printf("ERROR... Value written to location 0x%x == 0x%x. Value Expected: 0x%x", (void*)addressPointer, *addressPointer, dataPattern);
00002820  2F02      4373          move.l    D2,-(A7)
00002822  2043      4374          move.l    D3,A0
00002824  2F10      4375          move.l    (A0),-(A7)
00002826  2F03      4376          move.l    D3,-(A7)
00002828  4879 0000 4377          pea       @m68kde~1_145.L
0000282C  51FC      
0000282E  4E92      4378          jsr       (A2)
00002830  DEFC 0010 4379          add.w     #16,A7
                    4380   MemoryTest_39:
                    4381   ; }
                    4382   ; addrCount++;
00002834  5286      4383          addq.l    #1,D6
                    4384   ; if (addrCount % 100 == 0) {
00002836  2F06      4385          move.l    D6,-(A7)
00002838  4878 0064 4386          pea       100
0000283C  4EB9 0000 4387          jsr       ULDIV
00002840  2B88      
00002842  202F 0004 4388          move.l    4(A7),D0
00002846  504F      4389          addq.w    #8,A7
00002848  4A80      4390          tst.l     D0
0000284A  6600 0050 4391          bne       MemoryTest_46
                    4392   ; if (dataSize == 0) {
0000284E  202E FFF8 4393          move.l    -8(A6),D0
00002852  6616      4394          bne.s     MemoryTest_43
                    4395   ; printf("Address: 0x%x Value: 0x%02X\n",
00002854  2043      4396          move.l    D3,A0
00002856  2F10      4397          move.l    (A0),-(A7)
00002858  2F03      4398          move.l    D3,-(A7)
0000285A  4879 0000 4399          pea       @m68kde~1_146.L
0000285E  5242      
00002860  4E92      4400          jsr       (A2)
00002862  DEFC 000C 4401          add.w     #12,A7
00002866  6000 0034 4402          bra       MemoryTest_46
                    4403   MemoryTest_43:
                    4404   ; (unsigned int)addressPointer, *addressPointer);
                    4405   ; }
                    4406   ; else if (dataSize == 1) {
0000286A  202E FFF8 4407          move.l    -8(A6),D0
0000286E  0C80 0000 4408          cmp.l     #1,D0
00002872  0001      
00002874  6614      4409          bne.s     MemoryTest_45
                    4410   ; printf("Address: 0x%x Value: 0x%04X\n",
00002876  2043      4411          move.l    D3,A0
00002878  2F10      4412          move.l    (A0),-(A7)
0000287A  2F03      4413          move.l    D3,-(A7)
0000287C  4879 0000 4414          pea       @m68kde~1_147.L
00002880  5260      
00002882  4E92      4415          jsr       (A2)
00002884  DEFC 000C 4416          add.w     #12,A7
00002888  6012      4417          bra.s     MemoryTest_46
                    4418   MemoryTest_45:
                    4419   ; (unsigned int)addressPointer, *addressPointer);
                    4420   ; }
                    4421   ; else {
                    4422   ; printf("Address: 0x%x Value: 0x%08X\n",
0000288A  2043      4423          move.l    D3,A0
0000288C  2F10      4424          move.l    (A0),-(A7)
0000288E  2F03      4425          move.l    D3,-(A7)
00002890  4879 0000 4426          pea       @m68kde~1_148.L
00002894  527E      
00002896  4E92      4427          jsr       (A2)
00002898  DEFC 000C 4428          add.w     #12,A7
                    4429   MemoryTest_46:
0000289C  6012      4430          bra.s     MemoryTest_38
                    4431   MemoryTest_37:
                    4432   ; (unsigned int)addressPointer, *addressPointer);
                    4433   ; }
                    4434   ; }
                    4435   ; } else {
                    4436   ; printf("Current Address: 0x%x, No room to write to memory to fit within end address 0x%x", currAddress, endAddress);
0000289E  2F2E FFF4 4437          move.l    -12(A6),-(A7)
000028A2  2F05      4438          move.l    D5,-(A7)
000028A4  4879 0000 4439          pea       @m68kde~1_149.L
000028A8  529C      
000028AA  4E92      4440          jsr       (A2)
000028AC  DEFC 000C 4441          add.w     #12,A7
                    4442   MemoryTest_38:
000028B0  DA84      4443          add.l     D4,D5
000028B2  6000 FF4C 4444          bra       MemoryTest_34
                    4445   MemoryTest_36:
000028B6  4CDF 3C7C 4446          movem.l   (A7)+,D2/D3/D4/D5/D6/A2/A3/A4/A5
000028BA  4E5E      4447          unlk      A6
000028BC  4E75      4448          rts
                    4449   ; }
                    4450   ; }
                    4451   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4452   ; }
                    4453   ; void main(void)
                    4454   ; {
                    4455   _main:
000028BE  4E56 FFF4 4456          link      A6,#-12
000028C2  48E7 3030 4457          movem.l   D2/D3/A2/A3,-(A7)
000028C6  45F8 0A30 4458          lea       _InstallExceptionHandler.L,A2
000028CA  47F9 0000 4459          lea       _printf.L,A3
000028CE  3654      
                    4460   ; char c ;
                    4461   ; int i, j ;
                    4462   ; char *BugMessage = "DE1-68k Bug V1.77";
000028D0  41F9 0000 4463          lea       @m68kde~1_150.L,A0
000028D4  52EE      
000028D6  2608      4464          move.l    A0,D3
                    4465   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
000028D8  41F9 0000 4466          lea       @m68kde~1_151.L,A0
000028DC  5300      
000028DE  2D48 FFFC 4467          move.l    A0,-4(A6)
                    4468   ; KillAllBreakPoints() ;
000028E2  4EB8 1C1C 4469          jsr       _KillAllBreakPoints
                    4470   ; i = x = y = z = PortA_Count = 0;
000028E6  42B9 0803 4471          clr.l     _PortA_Count.L
000028EA  00D4      
000028EC  42B9 0803 4472          clr.l     _z.L
000028F0  00D0      
000028F2  42B9 0803 4473          clr.l     _y.L
000028F6  00CC      
000028F8  42B9 0803 4474          clr.l     _x.L
000028FC  00C8      
000028FE  4282      4475          clr.l     D2
                    4476   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002900  42B9 0803 4477          clr.l     _GoFlag.L
00002904  00DC      
00002906  42B9 0803 4478          clr.l     _Trace.L
0000290A  00D8      
                    4479   ; Echo = 1 ;
0000290C  23FC 0000 4480          move.l    #1,_Echo.L
00002910  0001 0803 
00002914  00E0      
                    4481   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002916  42B9 0803 4482          clr.l     _d7.L
0000291A  0100      
0000291C  42B9 0803 4483          clr.l     _d6.L
00002920  00FC      
00002922  42B9 0803 4484          clr.l     _d5.L
00002926  00F8      
00002928  42B9 0803 4485          clr.l     _d4.L
0000292C  00F4      
0000292E  42B9 0803 4486          clr.l     _d3.L
00002932  00F0      
00002934  42B9 0803 4487          clr.l     _d2.L
00002938  00EC      
0000293A  42B9 0803 4488          clr.l     _d1.L
0000293E  00E8      
00002940  42B9 0803 4489          clr.l     _d0.L
00002944  00E4      
                    4490   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002946  42B9 0803 4491          clr.l     _a6.L
0000294A  011C      
0000294C  42B9 0803 4492          clr.l     _a5.L
00002950  0118      
00002952  42B9 0803 4493          clr.l     _a4.L
00002956  0114      
00002958  42B9 0803 4494          clr.l     _a3.L
0000295C  0110      
0000295E  42B9 0803 4495          clr.l     _a2.L
00002962  010C      
00002964  42B9 0803 4496          clr.l     _a1.L
00002968  0108      
0000296A  42B9 0803 4497          clr.l     _a0.L
0000296E  0104      
                    4498   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002970  23FC 0800 4499          move.l    #134217728,_PC.L
00002974  0000 0803 
00002978  0120      
0000297A  23FC 0804 4500          move.l    #134479872,_SSP.L
0000297E  0000 0803 
00002982  0124      
00002984  23FC 0804 4501          move.l    #134479872,_USP.L
00002988  0000 0803 
0000298C  0128      
                    4502   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
0000298E  33FC 2000 4503          move.w    #8192,_SR.L
00002992  0803 012C 
                    4504   ; // Initialise Breakpoint variables
                    4505   ; for(i = 0; i < 8; i++)  {
00002996  4282      4506          clr.l     D2
                    4507   main_1:
00002998  0C82 0000 4508          cmp.l     #8,D2
0000299C  0008      
0000299E  6C00 004C 4509          bge       main_3
                    4510   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000029A2  2002      4511          move.l    D2,D0
000029A4  E588      4512          lsl.l     #2,D0
000029A6  41F9 0803 4513          lea       _BreakPointAddress.L,A0
000029AA  012E      
000029AC  42B0 0800 4514          clr.l     0(A0,D0.L)
                    4515   ; WatchPointAddress[i] = 0 ;
000029B0  2002      4516          move.l    D2,D0
000029B2  E588      4517          lsl.l     #2,D0
000029B4  41F9 0803 4518          lea       _WatchPointAddress.L,A0
000029B8  0182      
000029BA  42B0 0800 4519          clr.l     0(A0,D0.L)
                    4520   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
000029BE  2002      4521          move.l    D2,D0
000029C0  E388      4522          lsl.l     #1,D0
000029C2  41F9 0803 4523          lea       _BreakPointInstruction.L,A0
000029C6  014E      
000029C8  4270 0800 4524          clr.w     0(A0,D0.L)
                    4525   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
000029CC  2002      4526          move.l    D2,D0
000029CE  E588      4527          lsl.l     #2,D0
000029D0  41F9 0803 4528          lea       _BreakPointSetOrCleared.L,A0
000029D4  015E      
000029D6  42B0 0800 4529          clr.l     0(A0,D0.L)
                    4530   ; WatchPointSetOrCleared[i] = 0;
000029DA  2002      4531          move.l    D2,D0
000029DC  E588      4532          lsl.l     #2,D0
000029DE  41F9 0803 4533          lea       _WatchPointSetOrCleared.L,A0
000029E2  01A2      
000029E4  42B0 0800 4534          clr.l     0(A0,D0.L)
000029E8  5282      4535          addq.l    #1,D2
000029EA  60AC      4536          bra       main_1
                    4537   main_3:
                    4538   ; }
                    4539   ; Init_RS232() ;     // initialise the RS232 port
000029EC  4EB8 0B12 4540          jsr       _Init_RS232
                    4541   ; Init_LCD() ;
000029F0  4EB8 095E 4542          jsr       _Init_LCD
                    4543   ; for( i = 32; i < 48; i++)
000029F4  7420      4544          moveq     #32,D2
                    4545   main_4:
000029F6  0C82 0000 4546          cmp.l     #48,D2
000029FA  0030      
000029FC  6C0E      4547          bge.s     main_6
                    4548   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
000029FE  2F02      4549          move.l    D2,-(A7)
00002A00  4878 2494 4550          pea       _UnhandledTrap.L
00002A04  4E92      4551          jsr       (A2)
00002A06  504F      4552          addq.w    #8,A7
00002A08  5282      4553          addq.l    #1,D2
00002A0A  60EA      4554          bra       main_4
                    4555   main_6:
                    4556   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002A0C  4878 002F 4557          pea       47
00002A10  4878 216E 4558          pea       _menu.L
00002A14  4E92      4559          jsr       (A2)
00002A16  504F      4560          addq.w    #8,A7
                    4561   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002A18  4878 0019 4562          pea       25
00002A1C  4878 243A 4563          pea       _UnhandledIRQ1.L
00002A20  4E92      4564          jsr       (A2)
00002A22  504F      4565          addq.w    #8,A7
                    4566   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002A24  4878 001A 4567          pea       26
00002A28  4878 2446 4568          pea       _UnhandledIRQ2.L
00002A2C  4E92      4569          jsr       (A2)
00002A2E  504F      4570          addq.w    #8,A7
                    4571   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002A30  4878 001B 4572          pea       27
00002A34  4878 2452 4573          pea       _UnhandledIRQ3.L
00002A38  4E92      4574          jsr       (A2)
00002A3A  504F      4575          addq.w    #8,A7
                    4576   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002A3C  4878 001C 4577          pea       28
00002A40  4878 245E 4578          pea       _UnhandledIRQ4.L
00002A44  4E92      4579          jsr       (A2)
00002A46  504F      4580          addq.w    #8,A7
                    4581   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002A48  4878 001D 4582          pea       29
00002A4C  4878 246A 4583          pea       _UnhandledIRQ5.L
00002A50  4E92      4584          jsr       (A2)
00002A52  504F      4585          addq.w    #8,A7
                    4586   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002A54  4878 001E 4587          pea       30
00002A58  4878 2476 4588          pea       _UnhandledIRQ6.L
00002A5C  4E92      4589          jsr       (A2)
00002A5E  504F      4590          addq.w    #8,A7
                    4591   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002A60  4878 001F 4592          pea       31
00002A64  4878 2488 4593          pea       _UnhandledIRQ7.L
00002A68  4E92      4594          jsr       (A2)
00002A6A  504F      4595          addq.w    #8,A7
                    4596   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002A6C  4878 002E 4597          pea       46
00002A70  4878 1EAA 4598          pea       _HandleBreakPoint.L
00002A74  4E92      4599          jsr       (A2)
00002A76  504F      4600          addq.w    #8,A7
                    4601   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002A78  4878 001D 4602          pea       29
00002A7C  4878 158A 4603          pea       _DumpRegistersandPause.L
00002A80  4E92      4604          jsr       (A2)
00002A82  504F      4605          addq.w    #8,A7
                    4606   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002A84  4878 0002 4607          pea       2
00002A88  4878 24A2 4608          pea       _BusError.L
00002A8C  4E92      4609          jsr       (A2)
00002A8E  504F      4610          addq.w    #8,A7
                    4611   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002A90  4878 0003 4612          pea       3
00002A94  4878 24B0 4613          pea       _AddressError.L
00002A98  4E92      4614          jsr       (A2)
00002A9A  504F      4615          addq.w    #8,A7
                    4616   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002A9C  4878 0004 4617          pea       4
00002AA0  4878 24BE 4618          pea       _IllegalInstruction.L
00002AA4  4E92      4619          jsr       (A2)
00002AA6  504F      4620          addq.w    #8,A7
                    4621   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002AA8  4878 0005 4622          pea       5
00002AAC  4878 24CC 4623          pea       _Dividebyzero.L
00002AB0  4E92      4624          jsr       (A2)
00002AB2  504F      4625          addq.w    #8,A7
                    4626   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002AB4  4878 0006 4627          pea       6
00002AB8  4878 24DA 4628          pea       _Check.L
00002ABC  4E92      4629          jsr       (A2)
00002ABE  504F      4630          addq.w    #8,A7
                    4631   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002AC0  4878 0007 4632          pea       7
00002AC4  4878 24E8 4633          pea       _Trapv.L
00002AC8  4E92      4634          jsr       (A2)
00002ACA  504F      4635          addq.w    #8,A7
                    4636   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002ACC  4878 0008 4637          pea       8
00002AD0  4878 24F6 4638          pea       _PrivError.L
00002AD4  4E92      4639          jsr       (A2)
00002AD6  504F      4640          addq.w    #8,A7
                    4641   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002AD8  4878 000F 4642          pea       15
00002ADC  4878 2504 4643          pea       _UnitIRQ.L
00002AE0  4E92      4644          jsr       (A2)
00002AE2  504F      4645          addq.w    #8,A7
                    4646   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002AE4  4878 0018 4647          pea       24
00002AE8  4878 24DA 4648          pea       _Check.L
00002AEC  4E92      4649          jsr       (A2)
00002AEE  504F      4650          addq.w    #8,A7
                    4651   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002AF0  4EB8 0BA6 4652          jsr       _FlushKeyboard
                    4653   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002AF4  4239 0040 4654          clr.b     4194314
00002AF8  000A      
                    4655   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4656   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4657   main_7:
00002AFA  1039 0040 4658          move.b    4194306,D0
00002AFE  0002      
00002B00  C03C 0002 4659          and.b     #2,D0
00002B04  0C00 0002 4660          cmp.b     #2,D0
00002B08  662A      4661          bne.s     main_9
                    4662   ; LoadFromFlashChip();
00002B0A  4EB8 10C6 4663          jsr       _LoadFromFlashChip
                    4664   ; printf("\r\nRunning.....") ;
00002B0E  4879 0000 4665          pea       @m68kde~1_152.L
00002B12  531E      
00002B14  4E93      4666          jsr       (A3)
00002B16  584F      4667          addq.w    #4,A7
                    4668   ; Oline1("Running.....") ;
00002B18  4879 0000 4669          pea       @m68kde~1_153.L
00002B1C  532E      
00002B1E  4EB8 0A02 4670          jsr       _Oline1
00002B22  584F      4671          addq.w    #4,A7
                    4672   ; GoFlag = 1;
00002B24  23FC 0000 4673          move.l    #1,_GoFlag.L
00002B28  0001 0803 
00002B2C  00DC      
                    4674   ; go() ;
00002B2E  4EB8 08B8 4675          jsr       _go
00002B32  60C6      4676          bra       main_7
                    4677   main_9:
                    4678   ; }
                    4679   ; // otherwise start the debug monitor
                    4680   ; Oline0(BugMessage) ;
00002B34  2F03      4681          move.l    D3,-(A7)
00002B36  4EB8 09D4 4682          jsr       _Oline0
00002B3A  584F      4683          addq.w    #4,A7
                    4684   ; Oline1("By: PJ Davies") ;
00002B3C  4879 0000 4685          pea       @m68kde~1_154.L
00002B40  533C      
00002B42  4EB8 0A02 4686          jsr       _Oline1
00002B46  584F      4687          addq.w    #4,A7
                    4688   ; printf("\r\n%s", BugMessage) ;
00002B48  2F03      4689          move.l    D3,-(A7)
00002B4A  4879 0000 4690          pea       @m68kde~1_155.L
00002B4E  534A      
00002B50  4E93      4691          jsr       (A3)
00002B52  504F      4692          addq.w    #8,A7
                    4693   ; printf("\r\n%s", CopyrightMessage) ;
00002B54  2F2E FFFC 4694          move.l    -4(A6),-(A7)
00002B58  4879 0000 4695          pea       @m68kde~1_155.L
00002B5C  534A      
00002B5E  4E93      4696          jsr       (A3)
00002B60  504F      4697          addq.w    #8,A7
                    4698   ; printf("Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00002B62  4879 0000 4699          pea       @m68kde~1_156.L
00002B66  5350      
00002B68  4E93      4700          jsr       (A3)
00002B6A  584F      4701          addq.w    #4,A7
                    4702   ; menu();
00002B6C  4EB8 216E 4703          jsr       _menu
00002B70  4CDF 0C0C 4704          movem.l   (A7)+,D2/D3/A2/A3
00002B74  4E5E      4705          unlk      A6
00002B76  4E75      4706          rts
                    4707   ; }
                    4708   _strcpy:
00002B78  206F 0004 4709          move.l    (4,A7),A0
00002B7C  226F 0008 4710          move.l    (8,A7),A1
00002B80  2008      4711          move.l    A0,D0
                    4712   strcpy_1:
00002B82  10D9      4713          move.b    (A1)+,(A0)+
00002B84  66FC      4714          bne       strcpy_1
00002B86  4E75      4715          rts
                    4716   ULDIV:
00002B88  4E56 0000 4717          link    A6,#0
00002B8C  48E7 C000 4718          movem.l D0/D1,-(A7)
00002B90  222E 0008 4719          move.l  8(A6),D1
00002B94  202E 000C 4720          move.l  12(A6),D0
00002B98  6036      4721          bra.s   ldiv_3
                    4722   LDIV:
00002B9A  4E56 0000 4723          link    A6,#0
00002B9E  48E7 C000 4724          movem.l D0/D1,-(A7)
00002BA2  222E 0008 4725          move.l  8(A6),D1
00002BA6  202E 000C 4726          move.l  12(A6),D0
00002BAA  4A80      4727          tst.l   D0
00002BAC  6A0E      4728          bpl.s   ldiv_1
00002BAE  4480      4729          neg.l   D0
00002BB0  4A81      4730          tst.l   D1
00002BB2  6A14      4731          bpl.s   ldiv_2
00002BB4  4481      4732          neg.l   D1
00002BB6  612A      4733          bsr.s   dodiv
00002BB8  4481      4734          neg.l   D1
00002BBA  6016      4735          bra.s   ldiv_4
                    4736   ldiv_1:
00002BBC  4A81      4737          tst.l   D1
00002BBE  6A10      4738          bpl.s   ldiv_3
00002BC0  4481      4739          neg.l   D1
00002BC2  611E      4740          bsr.s   dodiv
00002BC4  4480      4741          neg.l   D0
00002BC6  600A      4742          bra.s   ldiv_4
                    4743   ldiv_2:
00002BC8  6118      4744          bsr.s   dodiv
00002BCA  4480      4745          neg.l   D0
00002BCC  4481      4746          neg.l   D1
00002BCE  6002      4747          bra.s   ldiv_4
                    4748   ldiv_3:
00002BD0  6110      4749          bsr.s   dodiv
                    4750   ldiv_4:
00002BD2  2D40 0008 4751          move.l  D0,8(A6)
00002BD6  2D41 000C 4752          move.l  D1,12(A6)
00002BDA  4CDF 0003 4753          movem.l (A7)+,D0/D1
00002BDE  4E5E      4754          unlk    A6
00002BE0  4E75      4755          rts
                    4756   dodiv:
00002BE2  0C81 0000 4757          cmpi.l  #$FFFF,D1
00002BE6  FFFF      
00002BE8  6236      4758          bhi.s   dodiv_2
00002BEA  0C80 0000 4759          cmpi.l  #$FFFF,D0
00002BEE  FFFF      
00002BF0  6210      4760          bhi.s   dodiv_1
00002BF2  80C1      4761          divu    D1,D0
00002BF4  2200      4762          move.l  D0,D1
00002BF6  4241      4763          clr.w   D1
00002BF8  4841      4764          swap    D1
00002BFA  0280 0000 4765          andi.l  #$FFFF,D0
00002BFE  FFFF      
00002C00  4E75      4766          rts
                    4767   dodiv_1:
00002C02  48A7 A000 4768          movem.w D0/D2,-(A7)
00002C06  4240      4769          clr.w   D0
00002C08  4840      4770          swap    D0
00002C0A  80C1      4771          divu    D1,D0
00002C0C  3400      4772          move.w  D0,D2
00002C0E  301F      4773          move.w  (A7)+,D0
00002C10  80C1      4774          divu    D1,D0
00002C12  4840      4775          swap    D0
00002C14  4281      4776          clr.l   D1
00002C16  3200      4777          move.w  D0,D1
00002C18  3002      4778          move.w  D2,D0
00002C1A  4840      4779          swap    D0
00002C1C  341F      4780          move.w  (A7)+,D2
00002C1E  4E75      4781          rts
                    4782   dodiv_2:
00002C20  48E7 3800 4783          movem.l D2/D3/D4,-(A7)
00002C24  2401      4784          move.l  D1,D2
00002C26  4242      4785          clr.w   D2
00002C28  4842      4786          swap    D2
00002C2A  5282      4787          addq.l  #1,D2
00002C2C  2600      4788          move.l  D0,D3
00002C2E  2801      4789          move.l  D1,D4
00002C30  2202      4790          move.l  D2,D1
00002C32  61CE      4791          bsr.s   dodiv_1
00002C34  2204      4792          move.l  D4,D1
00002C36  82C2      4793          divu    D2,D1
00002C38  80C1      4794          divu    D1,D0
00002C3A  0280 0000 4795          andi.l  #$FFFF,D0
00002C3E  FFFF      
                    4796   dodiv_3:
00002C40  2204      4797          move.l  D4,D1
00002C42  2404      4798          move.l  D4,D2
00002C44  4842      4799          swap    D2
00002C46  C2C0      4800          mulu    D0,D1
00002C48  C4C0      4801          mulu    D0,D2
00002C4A  4842      4802          swap    D2
00002C4C  D282      4803          add.l   D2,D1
00002C4E  9283      4804          sub.l   D3,D1
00002C50  620A      4805          bhi.s   dodiv_4
00002C52  4481      4806          neg.l   D1
00002C54  B881      4807          cmp.l   D1,D4
00002C56  6208      4808          bhi.s   dodiv_5
00002C58  5280      4809          addq.l  #1,D0
00002C5A  60E4      4810          bra.s   dodiv_3
                    4811   dodiv_4:
00002C5C  5380      4812          subq.l  #1,D0
00002C5E  60E0      4813          bra.s   dodiv_3
                    4814   dodiv_5:
00002C60  4CDF 001C 4815          movem.l (A7)+,D2/D3/D4
00002C64  4E75      4816          rts
                    4817   _putch:
00002C66  4E56 0000 4818          link      A6,#0
00002C6A  48E7 2000 4819          movem.l   D2,-(A7)
00002C6E  242E 0008 4820          move.l    8(A6),D2
00002C72  0C82 0000 4821          cmp.l     #10,D2
00002C76  000A      
00002C78  660A      4822          bne.s     putch_1
00002C7A  4878 000D 4823          pea       13
00002C7E  6100 DEBC 4824          bsr       __putch
00002C82  584F      4825          addq.w    #4,A7
                    4826   putch_1:
00002C84  2F02      4827          move.l    D2,-(A7)
00002C86  6100 DEB4 4828          bsr       __putch
00002C8A  584F      4829          addq.w    #4,A7
00002C8C  2002      4830          move.l    D2,D0
00002C8E  4CDF 0004 4831          movem.l   (A7)+,D2
00002C92  4E5E      4832          unlk      A6
00002C94  4E75      4833          rts
                    4834   _getch:
00002C96  48E7 2000 4835          movem.l   D2,-(A7)
00002C9A  2439 0803 4836          move.l    __ungetbuf,D2
00002C9E  00C0      
00002CA0  2039 0803 4837          move.l    __ungetbuf,D0
00002CA4  00C0      
00002CA6  0C80 FFFF 4838          cmp.l     #-1,D0
00002CAA  FFFF      
00002CAC  670C      4839          beq.s     getch_1
00002CAE  23FC FFFF 4840          move.l    #-1,__ungetbuf
00002CB2  FFFF 0803 
00002CB6  00C0      
00002CB8  6010      4841          bra.s     getch_3
                    4842   getch_1:
00002CBA  6100 DEAC 4843          bsr       __getch
00002CBE  2400      4844          move.l    D0,D2
00002CC0  0C80 0000 4845          cmp.l     #13,D0
00002CC4  000D      
00002CC6  6602      4846          bne.s     getch_3
00002CC8  740A      4847          moveq     #10,D2
                    4848   getch_3:
00002CCA  2002      4849          move.l    D2,D0
00002CCC  4CDF 0004 4850          movem.l   (A7)+,D2
00002CD0  4E75      4851          rts
                    4852   _tolower:
00002CD2  4E56 0000 4853          link      A6,#0
00002CD6  48E7 2000 4854          movem.l   D2,-(A7)
00002CDA  242E 0008 4855          move.l    8(A6),D2
00002CDE  0C82 0000 4856          cmp.l     #65,D2
00002CE2  0041      
00002CE4  6D0E      4857          blt.s     tolower_1
00002CE6  0C82 0000 4858          cmp.l     #90,D2
00002CEA  005A      
00002CEC  6E06      4859          bgt.s     tolower_1
00002CEE  84BC 0000 4860          or.l      #32,D2
00002CF2  0020      
                    4861   tolower_1:
00002CF4  2002      4862          move.l    D2,D0
00002CF6  4CDF 0004 4863          movem.l   (A7)+,D2
00002CFA  4E5E      4864          unlk      A6
00002CFC  4E75      4865          rts
                    4866   _sprintf:
00002CFE  4E56 FFFC 4867          link      A6,#-4
00002D02  48E7 2000 4868          movem.l   D2,-(A7)
00002D06  41EE 000C 4869          lea       12(A6),A0
00002D0A  5848      4870          addq.w    #4,A0
00002D0C  2408      4871          move.l    A0,D2
00002D0E  2F02      4872          move.l    D2,-(A7)
00002D10  2F2E 000C 4873          move.l    12(A6),-(A7)
00002D14  2F2E 0008 4874          move.l    8(A6),-(A7)
00002D18  6100 0A1E 4875          bsr       _vsprintf
00002D1C  DEFC 000C 4876          add.w     #12,A7
00002D20  2D40 FFFC 4877          move.l    D0,-4(A6)
00002D24  4282      4878          clr.l     D2
00002D26  202E FFFC 4879          move.l    -4(A6),D0
00002D2A  4CDF 0004 4880          movem.l   (A7)+,D2
00002D2E  4E5E      4881          unlk      A6
00002D30  4E75      4882          rts
                    4883   _memset:
00002D32  206F 0004 4884          move.l    (4,A7),A0
00002D36  202F 0008 4885          move.l    (8,A7),D0
00002D3A  222F 000C 4886          move.l    (12,A7),D1
00002D3E  2248      4887          move.l    A0,A1	
                    4888   memset_1:
00002D40  12C0      4889          move.b    D0,(A1)+
00002D42  5341      4890          subq      #1,D1
00002D44  66FA      4891          bne       memset_1
00002D46  2008      4892          move.l    A0,D0
00002D48  4E75      4893          rts
                    4894   _strcat:
00002D4A  206F 0004 4895          move.l    (4,A7),A0	
00002D4E  226F 0008 4896          move.l    (8,A7),A1	
00002D52  2008      4897          move.l    A0,D0		
                    4898   strcat_0:
00002D54  4A18      4899          tst.b     (A0)+
00002D56  66FC      4900          bne       strcat_0
00002D58  5348      4901          subq      #1,A0
                    4902   strcat_1:
00002D5A  10D9      4903          move.b    (A1)+,(A0)+
00002D5C  66FC      4904          bne       strcat_1
00002D5E  4E75      4905          rts
                    4906   _toupper:
00002D60  4E56 0000 4907          link      A6,#0
00002D64  48E7 2000 4908          movem.l   D2,-(A7)
00002D68  242E 0008 4909          move.l    8(A6),D2
00002D6C  0C82 0000 4910          cmp.l     #97,D2
00002D70  0061      
00002D72  6D0E      4911          blt.s     toupper_1
00002D74  0C82 0000 4912          cmp.l     #122,D2
00002D78  007A      
00002D7A  6E06      4913          bgt.s     toupper_1
00002D7C  C4BC 0000 4914          and.l     #95,D2
00002D80  005F      
                    4915   toupper_1:
00002D82  2002      4916          move.l    D2,D0
00002D84  4CDF 0004 4917          movem.l   (A7)+,D2
00002D88  4E5E      4918          unlk      A6
00002D8A  4E75      4919          rts
                    4920   _scanf:
00002D8C  4E56 FFFC 4921          link      A6,#-4
00002D90  48E7 2000 4922          movem.l   D2,-(A7)
00002D94  41EE 0008 4923          lea       8(A6),A0
00002D98  5848      4924          addq.w    #4,A0
00002D9A  2408      4925          move.l    A0,D2
00002D9C  2F02      4926          move.l    D2,-(A7)
00002D9E  2F2E 0008 4927          move.l    8(A6),-(A7)
00002DA2  42A7      4928          clr.l     -(A7)
00002DA4  6100 02C2 4929          bsr       _vsscanf
00002DA8  DEFC 000C 4930          add.w     #12,A7
00002DAC  2D40 FFFC 4931          move.l    D0,-4(A6)
00002DB0  4282      4932          clr.l     D2
00002DB2  202E FFFC 4933          move.l    -4(A6),D0
00002DB6  4CDF 0004 4934          movem.l   (A7)+,D2
00002DBA  4E5E      4935          unlk      A6
00002DBC  4E75      4936          rts
                    4937   @vsscanf_scanread:
00002DBE  4E56 FFFC 4938          link      A6,#-4
00002DC2  48E7 0020 4939          movem.l   A2,-(A7)
00002DC6  45F9 0000 4940          lea       @vsscanf_bufx,A2
00002DCA  538E      
00002DCC  4AAE 0008 4941          tst.l     8(A6)
00002DD0  6722      4942          beq.s     @vsscanf_scanread_1
00002DD2  206E 0008 4943          move.l    8(A6),A0
00002DD6  58AE 0008 4944          addq.l    #4,8(A6)
00002DDA  2050      4945          move.l    (A0),A0
00002DDC  1010      4946          move.b    (A0),D0
00002DDE  4880      4947          ext.w     D0
00002DE0  48C0      4948          ext.l     D0
00002DE2  2D40 FFFC 4949          move.l    D0,-4(A6)
00002DE6  6706      4950          beq.s     @vsscanf_scanread_3
00002DE8  202E FFFC 4951          move.l    -4(A6),D0
00002DEC  6002      4952          bra.s     @vsscanf_scanread_4
                    4953   @vsscanf_scanread_3:
00002DEE  70FF      4954          moveq     #-1,D0
                    4955   @vsscanf_scanread_4:
00002DF0  6000 0032 4956          bra       @vsscanf_scanread_5
                    4957   @vsscanf_scanread_1:
00002DF4  2052      4958          move.l    (A2),A0
00002DF6  1010      4959          move.b    (A0),D0
00002DF8  6620      4960          bne.s     @vsscanf_scanread_6
00002DFA  4879 0803 4961          pea       @vsscanf_buf
00002DFE  0546      
00002E00  6100 1038 4962          bsr       _gets
00002E04  584F      4963          addq.w    #4,A7
00002E06  2480      4964          move.l    D0,(A2)
00002E08  4879 0000 4965          pea       @vsscanf_1
00002E0C  5392      
00002E0E  4879 0803 4966          pea       @vsscanf_buf
00002E12  0546      
00002E14  6100 FF34 4967          bsr       _strcat
00002E18  504F      4968          addq.w    #8,A7
                    4969   @vsscanf_scanread_6:
00002E1A  2052      4970          move.l    (A2),A0
00002E1C  5292      4971          addq.l    #1,(A2)
00002E1E  1010      4972          move.b    (A0),D0
00002E20  4880      4973          ext.w     D0
00002E22  48C0      4974          ext.l     D0
                    4975   @vsscanf_scanread_5:
00002E24  4CDF 0400 4976          movem.l   (A7)+,A2
00002E28  4E5E      4977          unlk      A6
00002E2A  4E75      4978          rts
                    4979   @vsscanf_scanputback:
00002E2C  4E56 0000 4980          link      A6,#0
00002E30  48E7 3000 4981          movem.l   D2/D3,-(A7)
00002E34  242E 000C 4982          move.l    12(A6),D2
00002E38  262E 0008 4983          move.l    8(A6),D3
00002E3C  6718      4984          beq.s     @vsscanf_scanputback_1
00002E3E  0C82 FFFF 4985          cmp.l     #-1,D2
00002E42  FFFF      
00002E44  670A      4986          beq.s     @vsscanf_scanputback_3
00002E46  5983      4987          subq.l    #4,D3
00002E48  2043      4988          move.l    D3,A0
00002E4A  2050      4989          move.l    (A0),A0
00002E4C  1082      4990          move.b    D2,(A0)
00002E4E  6004      4991          bra.s     @vsscanf_scanputback_4
                    4992   @vsscanf_scanputback_3:
00002E50  2043      4993          move.l    D3,A0
00002E52  5390      4994          subq.l    #1,(A0)
                    4995   @vsscanf_scanputback_4:
00002E54  602E      4996          bra.s     @vsscanf_scanputback_6
                    4997   @vsscanf_scanputback_1:
00002E56  41F9 0803 4998          lea       @vsscanf_buf,A0
00002E5A  0546      
00002E5C  2008      4999          move.l    A0,D0
00002E5E  B0B9 0000 5000          cmp.l     @vsscanf_bufx,D0
00002E62  538E      
00002E64  6610      5001          bne.s     @vsscanf_scanputback_5
00002E66  4239 0803 5002          clr.b     @vsscanf_buf
00002E6A  0546      
00002E6C  2F02      5003          move.l    D2,-(A7)
00002E6E  6100 103C 5004          bsr       _ungetch
00002E72  584F      5005          addq.w    #4,A7
00002E74  600E      5006          bra.s     @vsscanf_scanputback_6
                    5007   @vsscanf_scanputback_5:
00002E76  53B9 0000 5008          subq.l    #1,@vsscanf_bufx
00002E7A  538E      
00002E7C  2079 0000 5009          move.l    @vsscanf_bufx,A0
00002E80  538E      
00002E82  1082      5010          move.b    D2,(A0)
                    5011   @vsscanf_scanputback_6:
00002E84  2002      5012          move.l    D2,D0
00002E86  4CDF 000C 5013          movem.l   (A7)+,D2/D3
00002E8A  4E5E      5014          unlk      A6
00002E8C  4E75      5015          rts
                    5016   @vsscanf_scanspace:
00002E8E  4E56 0000 5017          link      A6,#0
00002E92  48E7 2000 5018          movem.l   D2,-(A7)
                    5019   @vsscanf_scanspace_1:
00002E96  2F2E 0008 5020          move.l    8(A6),-(A7)
00002E9A  6100 FF22 5021          bsr       @vsscanf_scanread
00002E9E  584F      5022          addq.w    #4,A7
00002EA0  2400      5023          move.l    D0,D2
00002EA2  206E 000C 5024          move.l    12(A6),A0
00002EA6  5290      5025          addq.l    #1,(A0)
00002EA8  2042      5026          move.l    D2,A0
00002EAA  43F9 0000 5027          lea       __ctype,A1
00002EAE  5394      
00002EB0  1030 9801 5028          move.b    1(A0,A1.L),D0
00002EB4  C03C 0010 5029          and.b     #16,D0
00002EB8  66DC      5030          bne       @vsscanf_scanspace_1
00002EBA  2002      5031          move.l    D2,D0
00002EBC  4CDF 0004 5032          movem.l   (A7)+,D2
00002EC0  4E5E      5033          unlk      A6
00002EC2  4E75      5034          rts
                    5035   @vsscanf_scanselect:
00002EC4  4E56 0000 5036          link      A6,#0
00002EC8  48E7 3F20 5037          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00002ECC  262E 000C 5038          move.l    12(A6),D3
00002ED0  2C2E 0018 5039          move.l    24(A6),D6
00002ED4  2E2E 0014 5040          move.l    20(A6),D7
00002ED8  2043      5041          move.l    D3,A0
00002EDA  1010      5042          move.b    (A0),D0
00002EDC  4880      5043          ext.w     D0
00002EDE  48C0      5044          ext.l     D0
00002EE0  0C80 0000 5045          cmp.l     #94,D0
00002EE4  005E      
00002EE6  6608      5046          bne.s     @vsscanf_scanselect_1
00002EE8  347C 0001 5047          move.w    #1,A2
00002EEC  5283      5048          addq.l    #1,D3
00002EEE  6004      5049          bra.s     @vsscanf_scanselect_2
                    5050   @vsscanf_scanselect_1:
00002EF0  347C 0000 5051          move.w    #0,A2
                    5052   @vsscanf_scanselect_2:
00002EF4  202E 0010 5053          move.l    16(A6),D0
00002EF8  53AE 0010 5054          subq.l    #1,16(A6)
00002EFC  4A80      5055          tst.l     D0
00002EFE  6700 0108 5056          beq       @vsscanf_scanselect_5
00002F02  2F2E 0008 5057          move.l    8(A6),-(A7)
00002F06  6100 FEB6 5058          bsr       @vsscanf_scanread
00002F0A  584F      5059          addq.w    #4,A7
00002F0C  2800      5060          move.l    D0,D4
00002F0E  0C84 FFFF 5061          cmp.l     #-1,D4
00002F12  FFFF      
00002F14  6604      5062          bne.s     @vsscanf_scanselect_6
00002F16  6000 00F0 5063          bra       @vsscanf_scanselect_5
                    5064   @vsscanf_scanselect_6:
00002F1A  206E 001C 5065          move.l    28(A6),A0
00002F1E  5290      5066          addq.l    #1,(A0)
00002F20  4285      5067          clr.l     D5
00002F22  4282      5068          clr.l     D2
                    5069   @vsscanf_scanselect_8:
00002F24  2043      5070          move.l    D3,A0
00002F26  1030 2800 5071          move.b    0(A0,D2.L),D0
00002F2A  4880      5072          ext.w     D0
00002F2C  48C0      5073          ext.l     D0
00002F2E  0C80 0000 5074          cmp.l     #93,D0
00002F32  005D      
00002F34  6700 008E 5075          beq       @vsscanf_scanselect_10
00002F38  4A82      5076          tst.l     D2
00002F3A  6716      5077          beq.s     @vsscanf_scanselect_11
00002F3C  2043      5078          move.l    D3,A0
00002F3E  1030 2800 5079          move.b    0(A0,D2.L),D0
00002F42  4880      5080          ext.w     D0
00002F44  48C0      5081          ext.l     D0
00002F46  0C80 0000 5082          cmp.l     #93,D0
00002F4A  005D      
00002F4C  6604      5083          bne.s     @vsscanf_scanselect_11
00002F4E  6000 0074 5084          bra       @vsscanf_scanselect_10
                    5085   @vsscanf_scanselect_11:
00002F52  4A82      5086          tst.l     D2
00002F54  6700 0058 5087          beq       @vsscanf_scanselect_15
00002F58  2043      5088          move.l    D3,A0
00002F5A  1030 2800 5089          move.b    0(A0,D2.L),D0
00002F5E  4880      5090          ext.w     D0
00002F60  48C0      5091          ext.l     D0
00002F62  0C80 0000 5092          cmp.l     #45,D0
00002F66  002D      
00002F68  6600 0044 5093          bne       @vsscanf_scanselect_15
00002F6C  2043      5094          move.l    D3,A0
00002F6E  2002      5095          move.l    D2,D0
00002F70  5380      5096          subq.l    #1,D0
00002F72  2243      5097          move.l    D3,A1
00002F74  2F08      5098          move.l    A0,-(A7)
00002F76  2042      5099          move.l    D2,A0
00002F78  1230 0800 5100          move.b    0(A0,D0.L),D1
00002F7C  B230 9801 5101          cmp.b     1(A0,A1.L),D1
00002F80  6C00 002C 5102          bge       @vsscanf_scanselect_15
00002F84  205F      5103          move.l    (A7)+,A0
00002F86  2043      5104          move.l    D3,A0
00002F88  2002      5105          move.l    D2,D0
00002F8A  5380      5106          subq.l    #1,D0
00002F8C  1030 0800 5107          move.b    0(A0,D0.L),D0
00002F90  4880      5108          ext.w     D0
00002F92  48C0      5109          ext.l     D0
00002F94  B880      5110          cmp.l     D0,D4
00002F96  6D12      5111          blt.s     @vsscanf_scanselect_17
00002F98  2043      5112          move.l    D3,A0
00002F9A  2242      5113          move.l    D2,A1
00002F9C  1031 8801 5114          move.b    1(A1,A0.L),D0
00002FA0  4880      5115          ext.w     D0
00002FA2  48C0      5116          ext.l     D0
00002FA4  B880      5117          cmp.l     D0,D4
00002FA6  6E02      5118          bgt.s     @vsscanf_scanselect_17
00002FA8  601A      5119          bra.s     @vsscanf_scanselect_10
                    5120   @vsscanf_scanselect_17:
00002FAA  5282      5121          addq.l    #1,D2
00002FAC  6010      5122          bra.s     @vsscanf_scanselect_19
                    5123   @vsscanf_scanselect_15:
00002FAE  2043      5124          move.l    D3,A0
00002FB0  1030 2800 5125          move.b    0(A0,D2.L),D0
00002FB4  4880      5126          ext.w     D0
00002FB6  48C0      5127          ext.l     D0
00002FB8  B880      5128          cmp.l     D0,D4
00002FBA  6602      5129          bne.s     @vsscanf_scanselect_19
00002FBC  6006      5130          bra.s     @vsscanf_scanselect_10
                    5131   @vsscanf_scanselect_19:
00002FBE  5282      5132          addq.l    #1,D2
00002FC0  6000 FF62 5133          bra       @vsscanf_scanselect_8
                    5134   @vsscanf_scanselect_10:
00002FC4  4A82      5135          tst.l     D2
00002FC6  6712      5136          beq.s     @vsscanf_scanselect_23
00002FC8  2043      5137          move.l    D3,A0
00002FCA  1030 2800 5138          move.b    0(A0,D2.L),D0
00002FCE  4880      5139          ext.w     D0
00002FD0  48C0      5140          ext.l     D0
00002FD2  0C80 0000 5141          cmp.l     #93,D0
00002FD6  005D      
00002FD8  6702      5142          beq.s     @vsscanf_scanselect_21
                    5143   @vsscanf_scanselect_23:
00002FDA  7A01      5144          moveq     #1,D5
                    5145   @vsscanf_scanselect_21:
00002FDC  200A      5146          move.l    A2,D0
00002FDE  6712      5147          beq.s     @vsscanf_scanselect_24
00002FE0  4A85      5148          tst.l     D5
00002FE2  660C      5149          bne.s     @vsscanf_scanselect_26
00002FE4  4A87      5150          tst.l     D7
00002FE6  6606      5151          bne.s     @vsscanf_scanselect_28
00002FE8  2046      5152          move.l    D6,A0
00002FEA  5286      5153          addq.l    #1,D6
00002FEC  1084      5154          move.b    D4,(A0)
                    5155   @vsscanf_scanselect_28:
00002FEE  6014      5156          bra.s     @vsscanf_scanselect_4
                    5157   @vsscanf_scanselect_26:
00002FF0  6016      5158          bra.s     @vsscanf_scanselect_5
                    5159   @vsscanf_scanselect_24:
00002FF2  4A85      5160          tst.l     D5
00002FF4  670C      5161          beq.s     @vsscanf_scanselect_30
00002FF6  4A87      5162          tst.l     D7
00002FF8  6606      5163          bne.s     @vsscanf_scanselect_32
00002FFA  2046      5164          move.l    D6,A0
00002FFC  5286      5165          addq.l    #1,D6
00002FFE  1084      5166          move.b    D4,(A0)
                    5167   @vsscanf_scanselect_32:
00003000  6002      5168          bra.s     @vsscanf_scanselect_4
                    5169   @vsscanf_scanselect_30:
00003002  6004      5170          bra.s     @vsscanf_scanselect_5
                    5171   @vsscanf_scanselect_4:
00003004  6000 FEEE 5172          bra       @vsscanf_scanselect_2
                    5173   @vsscanf_scanselect_5:
00003008  0C84 FFFF 5174          cmp.l     #-1,D4
0000300C  FFFF      
0000300E  6712      5175          beq.s     @vsscanf_scanselect_34
00003010  2F04      5176          move.l    D4,-(A7)
00003012  2F2E 0008 5177          move.l    8(A6),-(A7)
00003016  6100 FE14 5178          bsr       @vsscanf_scanputback
0000301A  504F      5179          addq.w    #8,A7
0000301C  206E 001C 5180          move.l    28(A6),A0
00003020  5390      5181          subq.l    #1,(A0)
                    5182   @vsscanf_scanselect_34:
00003022  4A87      5183          tst.l     D7
00003024  6604      5184          bne.s     @vsscanf_scanselect_36
00003026  2046      5185          move.l    D6,A0
00003028  4210      5186          clr.b     (A0)
                    5187   @vsscanf_scanselect_36:
0000302A  5283      5188          addq.l    #1,D3
0000302C  2043      5189          move.l    D3,A0
0000302E  1010      5190          move.b    (A0),D0
00003030  4880      5191          ext.w     D0
00003032  48C0      5192          ext.l     D0
00003034  0C80 0000 5193          cmp.l     #93,D0
00003038  005D      
0000303A  6702      5194          beq.s     @vsscanf_scanselect_40
0000303C  60EC      5195          bra       @vsscanf_scanselect_36
                    5196   @vsscanf_scanselect_40:
0000303E  5283      5197          addq.l    #1,D3
00003040  2003      5198          move.l    D3,D0
00003042  4CDF 04FC 5199          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003046  4E5E      5200          unlk      A6
00003048  4E75      5201          rts
                    5202   _scanflush:
0000304A  41F9 0803 5203          lea       @vsscanf_buf,A0
0000304E  0546      
00003050  23C8 0000 5204          move.l    A0,@vsscanf_bufx
00003054  538E      
00003056  4239 0803 5205          clr.b     @vsscanf_buf
0000305A  0546      
0000305C  4878 FFFF 5206          pea       -1
00003060  6100 0E4A 5207          bsr       _ungetch
00003064  584F      5208          addq.w    #4,A7
00003066  4E75      5209          rts
                    5210   _vsscanf:
00003068  4E56 FF88 5211          link      A6,#-120
0000306C  48E7 3F3C 5212          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003070  47F8 2DBE 5213          lea       @vsscanf_scanread,A3
00003074  4AAE 0008 5214          tst.l     8(A6)
00003078  6706      5215          beq.s     vsscanf_1
0000307A  41EE 0008 5216          lea       8(A6),A0
0000307E  6004      5217          bra.s     vsscanf_2
                    5218   vsscanf_1:
00003080  4280      5219          clr.l     D0
00003082  2040      5220          move.l    D0,A0
                    5221   vsscanf_2:
00003084  2A08      5222          move.l    A0,D5
00003086  42AE FFE4 5223          clr.l     -28(A6)
0000308A  4284      5224          clr.l     D4
                    5225   vsscanf_3:
0000308C  206E 000C 5226          move.l    12(A6),A0
00003090  52AE 000C 5227          addq.l    #1,12(A6)
00003094  1010      5228          move.b    (A0),D0
00003096  4880      5229          ext.w     D0
00003098  48C0      5230          ext.l     D0
0000309A  2600      5231          move.l    D0,D3
0000309C  6700 05AC 5232          beq       vsscanf_5
000030A0  4286      5233          clr.l     D6
000030A2  387C 0000 5234          move.w    #0,A4
000030A6  0C83 0000 5235          cmp.l     #32,D3
000030AA  0020      
000030AC  6712      5236          beq.s     vsscanf_8
000030AE  0C83 0000 5237          cmp.l     #9,D3
000030B2  0009      
000030B4  670A      5238          beq.s     vsscanf_8
000030B6  0C83 0000 5239          cmp.l     #10,D3
000030BA  000A      
000030BC  6600 0048 5240          bne       vsscanf_6
                    5241   vsscanf_8:
000030C0  2F05      5242          move.l    D5,-(A7)
000030C2  4E93      5243          jsr       (A3)
000030C4  584F      5244          addq.w    #4,A7
000030C6  2400      5245          move.l    D0,D2
000030C8  52AE FFE4 5246          addq.l    #1,-28(A6)
000030CC  0C82 FFFF 5247          cmp.l     #-1,D2
000030D0  FFFF      
000030D2  660E      5248          bne.s     vsscanf_11
000030D4  4A84      5249          tst.l     D4
000030D6  6704      5250          beq.s     vsscanf_13
000030D8  2004      5251          move.l    D4,D0
000030DA  6002      5252          bra.s     vsscanf_14
                    5253   vsscanf_13:
000030DC  70FF      5254          moveq     #-1,D0
                    5255   vsscanf_14:
000030DE  6000 056C 5256          bra       vsscanf_15
                    5257   vsscanf_11:
000030E2  2042      5258          move.l    D2,A0
000030E4  43F9 0000 5259          lea       __ctype,A1
000030E8  5394      
000030EA  1030 9801 5260          move.b    1(A0,A1.L),D0
000030EE  C03C 0010 5261          and.b     #16,D0
000030F2  66CC      5262          bne       vsscanf_8
000030F4  53AE FFE4 5263          subq.l    #1,-28(A6)
000030F8  2F02      5264          move.l    D2,-(A7)
000030FA  2F05      5265          move.l    D5,-(A7)
000030FC  6100 FD2E 5266          bsr       @vsscanf_scanputback
00003100  504F      5267          addq.w    #8,A7
00003102  6000 0542 5268          bra       vsscanf_139
                    5269   vsscanf_6:
00003106  0C83 0000 5270          cmp.l     #37,D3
0000310A  0025      
0000310C  6600 0502 5271          bne       vsscanf_127
00003110  206E 000C 5272          move.l    12(A6),A0
00003114  52AE 000C 5273          addq.l    #1,12(A6)
00003118  1010      5274          move.b    (A0),D0
0000311A  4880      5275          ext.w     D0
0000311C  48C0      5276          ext.l     D0
0000311E  2600      5277          move.l    D0,D3
00003120  42AE FFEC 5278          clr.l     -20(A6)
00003124  4286      5279          clr.l     D6
00003126  42AE FFE8 5280          clr.l     -24(A6)
0000312A  347C 7FFF 5281          move.w    #32767,A2
0000312E  0C83 0000 5282          cmp.l     #42,D3
00003132  002A      
00003134  6612      5283          bne.s     vsscanf_18
00003136  7C01      5284          moveq     #1,D6
00003138  206E 000C 5285          move.l    12(A6),A0
0000313C  52AE 000C 5286          addq.l    #1,12(A6)
00003140  1010      5287          move.b    (A0),D0
00003142  4880      5288          ext.w     D0
00003144  48C0      5289          ext.l     D0
00003146  2600      5290          move.l    D0,D3
                    5291   vsscanf_18:
00003148  2043      5292          move.l    D3,A0
0000314A  43F9 0000 5293          lea       __ctype,A1
0000314E  5394      
00003150  1030 9801 5294          move.b    1(A0,A1.L),D0
00003154  C03C 0004 5295          and.b     #4,D0
00003158  6700 004E 5296          beq       vsscanf_24
0000315C  2003      5297          move.l    D3,D0
0000315E  0480 0000 5298          sub.l     #48,D0
00003162  0030      
00003164  2440      5299          move.l    D0,A2
                    5300   vsscanf_22:
00003166  206E 000C 5301          move.l    12(A6),A0
0000316A  52AE 000C 5302          addq.l    #1,12(A6)
0000316E  1010      5303          move.b    (A0),D0
00003170  4880      5304          ext.w     D0
00003172  48C0      5305          ext.l     D0
00003174  2600      5306          move.l    D0,D3
00003176  2040      5307          move.l    D0,A0
00003178  43F9 0000 5308          lea       __ctype,A1
0000317C  5394      
0000317E  1030 9801 5309          move.b    1(A0,A1.L),D0
00003182  C0BC 0000 5310          and.l     #255,D0
00003186  00FF      
00003188  C0BC 0000 5311          and.l     #4,D0
0000318C  0004      
0000318E  6718      5312          beq.s     vsscanf_24
00003190  70D0      5313          moveq     #-48,D0
00003192  2F0A      5314          move.l    A2,-(A7)
00003194  4878 000A 5315          pea       10
00003198  6100 0C12 5316          bsr       LMUL
0000319C  2217      5317          move.l    (A7),D1
0000319E  504F      5318          addq.w    #8,A7
000031A0  D283      5319          add.l     D3,D1
000031A2  D081      5320          add.l     D1,D0
000031A4  2440      5321          move.l    D0,A2
000031A6  60BE      5322          bra       vsscanf_22
                    5323   vsscanf_24:
000031A8  0C83 0000 5324          cmp.l     #108,D3
000031AC  006C      
000031AE  6708      5325          beq.s     vsscanf_27
000031B0  0C83 0000 5326          cmp.l     #76,D3
000031B4  004C      
000031B6  661A      5327          bne.s     vsscanf_25
                    5328   vsscanf_27:
000031B8  2D7C 0000 5329          move.l    #1,-24(A6)
000031BC  0001 FFE8 
000031C0  206E 000C 5330          move.l    12(A6),A0
000031C4  52AE 000C 5331          addq.l    #1,12(A6)
000031C8  1010      5332          move.b    (A0),D0
000031CA  4880      5333          ext.w     D0
000031CC  48C0      5334          ext.l     D0
000031CE  2600      5335          move.l    D0,D3
000031D0  6020      5336          bra.s     vsscanf_28
                    5337   vsscanf_25:
000031D2  0C83 0000 5338          cmp.l     #104,D3
000031D6  0068      
000031D8  6618      5339          bne.s     vsscanf_28
000031DA  2D7C 0000 5340          move.l    #1,-20(A6)
000031DE  0001 FFEC 
000031E2  206E 000C 5341          move.l    12(A6),A0
000031E6  52AE 000C 5342          addq.l    #1,12(A6)
000031EA  1010      5343          move.b    (A0),D0
000031EC  4880      5344          ext.w     D0
000031EE  48C0      5345          ext.l     D0
000031F0  2600      5346          move.l    D0,D3
                    5347   vsscanf_28:
000031F2  0C83 0000 5348          cmp.l     #91,D3
000031F6  005B      
000031F8  6600 0036 5349          bne       vsscanf_30
000031FC  4A86      5350          tst.l     D6
000031FE  660A      5351          bne.s     vsscanf_32
00003200  206E 0010 5352          move.l    16(A6),A0
00003204  58AE 0010 5353          addq.l    #4,16(A6)
00003208  2E10      5354          move.l    (A0),D7
                    5355   vsscanf_32:
0000320A  486E FFE4 5356          pea       -28(A6)
0000320E  2F07      5357          move.l    D7,-(A7)
00003210  2F06      5358          move.l    D6,-(A7)
00003212  2F0A      5359          move.l    A2,-(A7)
00003214  2F2E 000C 5360          move.l    12(A6),-(A7)
00003218  2F05      5361          move.l    D5,-(A7)
0000321A  6100 FCA8 5362          bsr       @vsscanf_scanselect
0000321E  DEFC 0018 5363          add.w     #24,A7
00003222  2D40 000C 5364          move.l    D0,12(A6)
00003226  4A86      5365          tst.l     D6
00003228  6602      5366          bne.s     vsscanf_34
0000322A  5284      5367          addq.l    #1,D4
                    5368   vsscanf_34:
0000322C  6000 0418 5369          bra       vsscanf_139
                    5370   vsscanf_30:
00003230  0C83 0000 5371          cmp.l     #110,D3
00003234  006E      
00003236  661A      5372          bne.s     vsscanf_36
00003238  4A86      5373          tst.l     D6
0000323A  6612      5374          bne.s     vsscanf_38
0000323C  206E 0010 5375          move.l    16(A6),A0
00003240  58AE 0010 5376          addq.l    #4,16(A6)
00003244  2E10      5377          move.l    (A0),D7
00003246  2047      5378          move.l    D7,A0
00003248  20AE FFE4 5379          move.l    -28(A6),(A0)
0000324C  5284      5380          addq.l    #1,D4
                    5381   vsscanf_38:
0000324E  6000 03F6 5382          bra       vsscanf_139
                    5383   vsscanf_36:
00003252  0C83 0000 5384          cmp.l     #115,D3
00003256  0073      
00003258  6600 00AC 5385          bne       vsscanf_40
0000325C  486E FFE4 5386          pea       -28(A6)
00003260  2F05      5387          move.l    D5,-(A7)
00003262  6100 FC2A 5388          bsr       @vsscanf_scanspace
00003266  504F      5389          addq.w    #8,A7
00003268  2400      5390          move.l    D0,D2
0000326A  4A86      5391          tst.l     D6
0000326C  660A      5392          bne.s     vsscanf_42
0000326E  206E 0010 5393          move.l    16(A6),A0
00003272  58AE 0010 5394          addq.l    #4,16(A6)
00003276  2E10      5395          move.l    (A0),D7
                    5396   vsscanf_42:
00003278  52AE FFE4 5397          addq.l    #1,-28(A6)
                    5398   vsscanf_44:
0000327C  200A      5399          move.l    A2,D0
0000327E  534A      5400          subq.w    #1,A2
00003280  4A80      5401          tst.l     D0
00003282  6700 0038 5402          beq       vsscanf_46
00003286  2042      5403          move.l    D2,A0
00003288  43F9 0000 5404          lea       __ctype,A1
0000328C  5394      
0000328E  1030 9801 5405          move.b    1(A0,A1.L),D0
00003292  C03C 0010 5406          and.b     #16,D0
00003296  6624      5407          bne.s     vsscanf_46
00003298  0C82 FFFF 5408          cmp.l     #-1,D2
0000329C  FFFF      
0000329E  671C      5409          beq.s     vsscanf_46
000032A0  387C 0001 5410          move.w    #1,A4
000032A4  4A86      5411          tst.l     D6
000032A6  6606      5412          bne.s     vsscanf_47
000032A8  2047      5413          move.l    D7,A0
000032AA  5287      5414          addq.l    #1,D7
000032AC  1082      5415          move.b    D2,(A0)
                    5416   vsscanf_47:
000032AE  2F05      5417          move.l    D5,-(A7)
000032B0  4E93      5418          jsr       (A3)
000032B2  584F      5419          addq.w    #4,A7
000032B4  2400      5420          move.l    D0,D2
000032B6  52AE FFE4 5421          addq.l    #1,-28(A6)
000032BA  60C0      5422          bra       vsscanf_44
                    5423   vsscanf_46:
000032BC  4A86      5424          tst.l     D6
000032BE  660A      5425          bne.s     vsscanf_51
000032C0  2047      5426          move.l    D7,A0
000032C2  4210      5427          clr.b     (A0)
000032C4  200C      5428          move.l    A4,D0
000032C6  6702      5429          beq.s     vsscanf_51
000032C8  5284      5430          addq.l    #1,D4
                    5431   vsscanf_51:
000032CA  0C82 FFFF 5432          cmp.l     #-1,D2
000032CE  FFFF      
000032D0  6708      5433          beq.s     vsscanf_55
000032D2  4A86      5434          tst.l     D6
000032D4  661E      5435          bne.s     vsscanf_53
000032D6  200C      5436          move.l    A4,D0
000032D8  661A      5437          bne.s     vsscanf_53
                    5438   vsscanf_55:
000032DA  4A84      5439          tst.l     D4
000032DC  6704      5440          beq.s     vsscanf_56
000032DE  2004      5441          move.l    D4,D0
000032E0  600E      5442          bra.s     vsscanf_59
                    5443   vsscanf_56:
000032E2  0C82 FFFF 5444          cmp.l     #-1,D2
000032E6  FFFF      
000032E8  6604      5445          bne.s     vsscanf_58
000032EA  70FF      5446          moveq     #-1,D0
000032EC  6002      5447          bra.s     vsscanf_59
                    5448   vsscanf_58:
000032EE  2004      5449          move.l    D4,D0
                    5450   vsscanf_59:
000032F0  6000 035A 5451          bra       vsscanf_15
                    5452   vsscanf_53:
000032F4  53AE FFE4 5453          subq.l    #1,-28(A6)
000032F8  2F02      5454          move.l    D2,-(A7)
000032FA  2F05      5455          move.l    D5,-(A7)
000032FC  6100 FB2E 5456          bsr       @vsscanf_scanputback
00003300  504F      5457          addq.w    #8,A7
00003302  6000 0342 5458          bra       vsscanf_139
                    5459   vsscanf_40:
00003306  0C83 0000 5460          cmp.l     #99,D3
0000330A  0063      
0000330C  6600 008E 5461          bne       vsscanf_60
00003310  4A86      5462          tst.l     D6
00003312  660A      5463          bne.s     vsscanf_62
00003314  206E 0010 5464          move.l    16(A6),A0
00003318  58AE 0010 5465          addq.l    #4,16(A6)
0000331C  2E10      5466          move.l    (A0),D7
                    5467   vsscanf_62:
0000331E  2F05      5468          move.l    D5,-(A7)
00003320  4E93      5469          jsr       (A3)
00003322  584F      5470          addq.w    #4,A7
00003324  2400      5471          move.l    D0,D2
00003326  52AE FFE4 5472          addq.l    #1,-28(A6)
0000332A  200A      5473          move.l    A2,D0
0000332C  0C80 0000 5474          cmp.l     #32767,D0
00003330  7FFF      
00003332  6604      5475          bne.s     vsscanf_64
00003334  347C 0001 5476          move.w    #1,A2
                    5477   vsscanf_64:
00003338  0C82 FFFF 5478          cmp.l     #-1,D2
0000333C  FFFF      
0000333E  6606      5479          bne.s     vsscanf_66
00003340  4A86      5480          tst.l     D6
00003342  6602      5481          bne.s     vsscanf_66
00003344  5384      5482          subq.l    #1,D4
                    5483   vsscanf_66:
00003346  200A      5484          move.l    A2,D0
00003348  534A      5485          subq.w    #1,A2
0000334A  4A80      5486          tst.l     D0
0000334C  6720      5487          beq.s     vsscanf_70
0000334E  0C82 FFFF 5488          cmp.l     #-1,D2
00003352  FFFF      
00003354  6718      5489          beq.s     vsscanf_70
00003356  4A86      5490          tst.l     D6
00003358  6606      5491          bne.s     vsscanf_71
0000335A  2047      5492          move.l    D7,A0
0000335C  5287      5493          addq.l    #1,D7
0000335E  1082      5494          move.b    D2,(A0)
                    5495   vsscanf_71:
00003360  2F05      5496          move.l    D5,-(A7)
00003362  4E93      5497          jsr       (A3)
00003364  584F      5498          addq.w    #4,A7
00003366  2400      5499          move.l    D0,D2
00003368  52AE FFE4 5500          addq.l    #1,-28(A6)
0000336C  60D8      5501          bra       vsscanf_66
                    5502   vsscanf_70:
0000336E  0C82 FFFF 5503          cmp.l     #-1,D2
00003372  FFFF      
00003374  660E      5504          bne.s     vsscanf_73
00003376  4A84      5505          tst.l     D4
00003378  6704      5506          beq.s     vsscanf_75
0000337A  2004      5507          move.l    D4,D0
0000337C  6002      5508          bra.s     vsscanf_76
                    5509   vsscanf_75:
0000337E  70FF      5510          moveq     #-1,D0
                    5511   vsscanf_76:
00003380  6000 02CA 5512          bra       vsscanf_15
                    5513   vsscanf_73:
00003384  4A86      5514          tst.l     D6
00003386  6602      5515          bne.s     vsscanf_77
00003388  5284      5516          addq.l    #1,D4
                    5517   vsscanf_77:
0000338A  53AE FFE4 5518          subq.l    #1,-28(A6)
0000338E  2F02      5519          move.l    D2,-(A7)
00003390  2F05      5520          move.l    D5,-(A7)
00003392  6100 FA98 5521          bsr       @vsscanf_scanputback
00003396  504F      5522          addq.w    #8,A7
00003398  6000 02AC 5523          bra       vsscanf_139
                    5524   vsscanf_60:
0000339C  0C83 0000 5525          cmp.l     #105,D3
000033A0  0069      
000033A2  6600 0060 5526          bne       vsscanf_82
000033A6  486E FFE4 5527          pea       -28(A6)
000033AA  2F05      5528          move.l    D5,-(A7)
000033AC  6100 FAE0 5529          bsr       @vsscanf_scanspace
000033B0  504F      5530          addq.w    #8,A7
000033B2  2400      5531          move.l    D0,D2
000033B4  0C82 0000 5532          cmp.l     #48,D2
000033B8  0030      
000033BA  6600 0038 5533          bne       vsscanf_81
000033BE  387C 0001 5534          move.w    #1,A4
000033C2  2F05      5535          move.l    D5,-(A7)
000033C4  4E93      5536          jsr       (A3)
000033C6  584F      5537          addq.w    #4,A7
000033C8  2400      5538          move.l    D0,D2
000033CA  2F02      5539          move.l    D2,-(A7)
000033CC  6100 F904 5540          bsr       _tolower
000033D0  584F      5541          addq.w    #4,A7
000033D2  0C80 0000 5542          cmp.l     #120,D0
000033D6  0078      
000033D8  6604      5543          bne.s     vsscanf_83
000033DA  7678      5544          moveq     #120,D3
000033DC  6010      5545          bra.s     vsscanf_84
                    5546   vsscanf_83:
000033DE  53AE FFE4 5547          subq.l    #1,-28(A6)
000033E2  2F02      5548          move.l    D2,-(A7)
000033E4  2F05      5549          move.l    D5,-(A7)
000033E6  6100 FA44 5550          bsr       @vsscanf_scanputback
000033EA  504F      5551          addq.w    #8,A7
000033EC  766F      5552          moveq     #111,D3
                    5553   vsscanf_84:
000033EE  52AE FFE4 5554          addq.l    #1,-28(A6)
000033F2  6010      5555          bra.s     vsscanf_82
                    5556   vsscanf_81:
000033F4  53AE FFE4 5557          subq.l    #1,-28(A6)
000033F8  2F02      5558          move.l    D2,-(A7)
000033FA  2F05      5559          move.l    D5,-(A7)
000033FC  6100 FA2E 5560          bsr       @vsscanf_scanputback
00003400  504F      5561          addq.w    #8,A7
00003402  7664      5562          moveq     #100,D3
                    5563   vsscanf_82:
00003404  0C83 0000 5564          cmp.l     #100,D3
00003408  0064      
0000340A  671A      5565          beq.s     vsscanf_87
0000340C  0C83 0000 5566          cmp.l     #117,D3
00003410  0075      
00003412  6712      5567          beq.s     vsscanf_87
00003414  0C83 0000 5568          cmp.l     #120,D3
00003418  0078      
0000341A  670A      5569          beq.s     vsscanf_87
0000341C  0C83 0000 5570          cmp.l     #111,D3
00003420  006F      
00003422  6600 01A4 5571          bne       vsscanf_85
                    5572   vsscanf_87:
00003426  486E FFE4 5573          pea       -28(A6)
0000342A  2F05      5574          move.l    D5,-(A7)
0000342C  6100 FA60 5575          bsr       @vsscanf_scanspace
00003430  504F      5576          addq.w    #8,A7
00003432  2400      5577          move.l    D0,D2
00003434  2D7C 0000 5578          move.l    #10,-4(A6)
00003438  000A FFFC 
0000343C  0C83 0000 5579          cmp.l     #120,D3
00003440  0078      
00003442  6608      5580          bne.s     vsscanf_88
00003444  2D7C 0000 5581          move.l    #16,-4(A6)
00003448  0010 FFFC 
                    5582   vsscanf_88:
0000344C  0C83 0000 5583          cmp.l     #111,D3
00003450  006F      
00003452  6608      5584          bne.s     vsscanf_90
00003454  2D7C 0000 5585          move.l    #8,-4(A6)
00003458  0008 FFFC 
                    5586   vsscanf_90:
0000345C  4A86      5587          tst.l     D6
0000345E  660A      5588          bne.s     vsscanf_92
00003460  206E 0010 5589          move.l    16(A6),A0
00003464  58AE 0010 5590          addq.l    #4,16(A6)
00003468  2E10      5591          move.l    (A0),D7
                    5592   vsscanf_92:
0000346A  42AE FFE0 5593          clr.l     -32(A6)
0000346E  52AE FFE4 5594          addq.l    #1,-28(A6)
00003472  0C83 0000 5595          cmp.l     #117,D3
00003476  0075      
00003478  6720      5596          beq.s     vsscanf_94
0000347A  0C82 0000 5597          cmp.l     #45,D2
0000347E  002D      
00003480  6618      5598          bne.s     vsscanf_94
00003482  2F05      5599          move.l    D5,-(A7)
00003484  4E93      5600          jsr       (A3)
00003486  584F      5601          addq.w    #4,A7
00003488  2400      5602          move.l    D0,D2
0000348A  52AE FFE4 5603          addq.l    #1,-28(A6)
0000348E  2D7C 0000 5604          move.l    #1,-32(A6)
00003492  0001 FFE0 
00003496  387C 0001 5605          move.w    #1,A4
                    5606   vsscanf_94:
0000349A  3A7C 0000 5607          move.w    #0,A5
0000349E  0C82 FFFF 5608          cmp.l     #-1,D2
000034A2  FFFF      
000034A4  660E      5609          bne.s     vsscanf_96
000034A6  4A84      5610          tst.l     D4
000034A8  6704      5611          beq.s     vsscanf_98
000034AA  2004      5612          move.l    D4,D0
000034AC  6002      5613          bra.s     vsscanf_99
                    5614   vsscanf_98:
000034AE  70FF      5615          moveq     #-1,D0
                    5616   vsscanf_99:
000034B0  6000 019A 5617          bra       vsscanf_15
                    5618   vsscanf_96:
000034B4  200A      5619          move.l    A2,D0
000034B6  534A      5620          subq.w    #1,A2
000034B8  4A80      5621          tst.l     D0
000034BA  6700 0090 5622          beq       vsscanf_102
000034BE  0C83 0000 5623          cmp.l     #120,D3
000034C2  0078      
000034C4  6620      5624          bne.s     vsscanf_104
000034C6  2F02      5625          move.l    D2,-(A7)
000034C8  6100 F896 5626          bsr       _toupper
000034CC  584F      5627          addq.w    #4,A7
000034CE  0C80 0000 5628          cmp.l     #65,D0
000034D2  0041      
000034D4  6D10      5629          blt.s     vsscanf_104
000034D6  2F02      5630          move.l    D2,-(A7)
000034D8  6100 F886 5631          bsr       _toupper
000034DC  584F      5632          addq.w    #4,A7
000034DE  0C80 0000 5633          cmp.l     #70,D0
000034E2  0046      
000034E4  6F14      5634          ble.s     vsscanf_103
                    5635   vsscanf_104:
000034E6  2042      5636          move.l    D2,A0
000034E8  43F9 0000 5637          lea       __ctype,A1
000034EC  5394      
000034EE  1030 9801 5638          move.b    1(A0,A1.L),D0
000034F2  C03C 0004 5639          and.b     #4,D0
000034F6  6700 0054 5640          beq       vsscanf_102
                    5641   vsscanf_103:
000034FA  2042      5642          move.l    D2,A0
000034FC  43F9 0000 5643          lea       __ctype,A1
00003500  5394      
00003502  1030 9801 5644          move.b    1(A0,A1.L),D0
00003506  C03C 0004 5645          and.b     #4,D0
0000350A  6614      5646          bne.s     vsscanf_105
0000350C  70F9      5647          moveq     #-7,D0
0000350E  2F00      5648          move.l    D0,-(A7)
00003510  2F02      5649          move.l    D2,-(A7)
00003512  6100 F84C 5650          bsr       _toupper
00003516  584F      5651          addq.w    #4,A7
00003518  2200      5652          move.l    D0,D1
0000351A  201F      5653          move.l    (A7)+,D0
0000351C  D081      5654          add.l     D1,D0
0000351E  2400      5655          move.l    D0,D2
                    5656   vsscanf_105:
00003520  2F0D      5657          move.l    A5,-(A7)
00003522  2F2E FFFC 5658          move.l    -4(A6),-(A7)
00003526  6100 0884 5659          bsr       LMUL
0000352A  2017      5660          move.l    (A7),D0
0000352C  504F      5661          addq.w    #8,A7
0000352E  D082      5662          add.l     D2,D0
00003530  0480 0000 5663          sub.l     #48,D0
00003534  0030      
00003536  2A40      5664          move.l    D0,A5
00003538  2F05      5665          move.l    D5,-(A7)
0000353A  4E93      5666          jsr       (A3)
0000353C  584F      5667          addq.w    #4,A7
0000353E  2400      5668          move.l    D0,D2
00003540  52AE FFE4 5669          addq.l    #1,-28(A6)
00003544  387C 0001 5670          move.w    #1,A4
00003548  6000 FF6A 5671          bra       vsscanf_96
                    5672   vsscanf_102:
0000354C  0C82 FFFF 5673          cmp.l     #-1,D2
00003550  FFFF      
00003552  671A      5674          beq.s     vsscanf_107
00003554  2F02      5675          move.l    D2,-(A7)
00003556  2F05      5676          move.l    D5,-(A7)
00003558  6100 F8D2 5677          bsr       @vsscanf_scanputback
0000355C  504F      5678          addq.w    #8,A7
0000355E  53AE FFE4 5679          subq.l    #1,-28(A6)
00003562  200C      5680          move.l    A4,D0
00003564  6606      5681          bne.s     vsscanf_109
00003566  2004      5682          move.l    D4,D0
00003568  6000 00E2 5683          bra       vsscanf_15
                    5684   vsscanf_109:
0000356C  6012      5685          bra.s     vsscanf_111
                    5686   vsscanf_107:
0000356E  200C      5687          move.l    A4,D0
00003570  660E      5688          bne.s     vsscanf_111
00003572  4A84      5689          tst.l     D4
00003574  6704      5690          beq.s     vsscanf_113
00003576  2004      5691          move.l    D4,D0
00003578  6002      5692          bra.s     vsscanf_114
                    5693   vsscanf_113:
0000357A  70FF      5694          moveq     #-1,D0
                    5695   vsscanf_114:
0000357C  6000 00CE 5696          bra       vsscanf_15
                    5697   vsscanf_111:
00003580  4AAE FFE0 5698          tst.l     -32(A6)
00003584  6706      5699          beq.s     vsscanf_115
00003586  200D      5700          move.l    A5,D0
00003588  4480      5701          neg.l     D0
0000358A  2A40      5702          move.l    D0,A5
                    5703   vsscanf_115:
0000358C  4A86      5704          tst.l     D6
0000358E  661E      5705          bne.s     vsscanf_117
00003590  4AAE FFE8 5706          tst.l     -24(A6)
00003594  6706      5707          beq.s     vsscanf_119
00003596  2047      5708          move.l    D7,A0
00003598  208D      5709          move.l    A5,(A0)
0000359A  6010      5710          bra.s     vsscanf_122
                    5711   vsscanf_119:
0000359C  4AAE FFEC 5712          tst.l     -20(A6)
000035A0  6706      5713          beq.s     vsscanf_121
000035A2  2047      5714          move.l    D7,A0
000035A4  308D      5715          move.w    A5,(A0)
000035A6  6004      5716          bra.s     vsscanf_122
                    5717   vsscanf_121:
000035A8  2047      5718          move.l    D7,A0
000035AA  208D      5719          move.l    A5,(A0)
                    5720   vsscanf_122:
000035AC  5284      5721          addq.l    #1,D4
                    5722   vsscanf_117:
000035AE  0C82 FFFF 5723          cmp.l     #-1,D2
000035B2  FFFF      
000035B4  660E      5724          bne.s     vsscanf_123
000035B6  4A84      5725          tst.l     D4
000035B8  6704      5726          beq.s     vsscanf_125
000035BA  2004      5727          move.l    D4,D0
000035BC  6002      5728          bra.s     vsscanf_126
                    5729   vsscanf_125:
000035BE  70FF      5730          moveq     #-1,D0
                    5731   vsscanf_126:
000035C0  6000 008A 5732          bra       vsscanf_15
                    5733   vsscanf_123:
000035C4  6000 0080 5734          bra       vsscanf_139
                    5735   vsscanf_85:
000035C8  0C83 0000 5736          cmp.l     #37,D3
000035CC  0025      
000035CE  6600 0040 5737          bne       vsscanf_127
000035D2  2F05      5738          move.l    D5,-(A7)
000035D4  4E93      5739          jsr       (A3)
000035D6  584F      5740          addq.w    #4,A7
000035D8  2400      5741          move.l    D0,D2
000035DA  0C82 FFFF 5742          cmp.l     #-1,D2
000035DE  FFFF      
000035E0  660E      5743          bne.s     vsscanf_129
000035E2  4A84      5744          tst.l     D4
000035E4  6704      5745          beq.s     vsscanf_131
000035E6  2004      5746          move.l    D4,D0
000035E8  6002      5747          bra.s     vsscanf_132
                    5748   vsscanf_131:
000035EA  70FF      5749          moveq     #-1,D0
                    5750   vsscanf_132:
000035EC  6000 005E 5751          bra       vsscanf_15
                    5752   vsscanf_129:
000035F0  52AE FFE4 5753          addq.l    #1,-28(A6)
000035F4  B483      5754          cmp.l     D3,D2
000035F6  6714      5755          beq.s     vsscanf_133
000035F8  2F02      5756          move.l    D2,-(A7)
000035FA  2F05      5757          move.l    D5,-(A7)
000035FC  6100 F82E 5758          bsr       @vsscanf_scanputback
00003600  504F      5759          addq.w    #8,A7
00003602  53AE FFE4 5760          subq.l    #1,-28(A6)
00003606  2004      5761          move.l    D4,D0
00003608  6000 0042 5762          bra       vsscanf_15
                    5763   vsscanf_133:
0000360C  6000 0038 5764          bra       vsscanf_139
                    5765   vsscanf_127:
00003610  2F05      5766          move.l    D5,-(A7)
00003612  4E93      5767          jsr       (A3)
00003614  584F      5768          addq.w    #4,A7
00003616  2400      5769          move.l    D0,D2
00003618  52AE FFE4 5770          addq.l    #1,-28(A6)
0000361C  0C82 FFFF 5771          cmp.l     #-1,D2
00003620  FFFF      
00003622  660C      5772          bne.s     vsscanf_135
00003624  4A84      5773          tst.l     D4
00003626  6704      5774          beq.s     vsscanf_137
00003628  2004      5775          move.l    D4,D0
0000362A  6002      5776          bra.s     vsscanf_138
                    5777   vsscanf_137:
0000362C  70FF      5778          moveq     #-1,D0
                    5779   vsscanf_138:
0000362E  601C      5780          bra.s     vsscanf_15
                    5781   vsscanf_135:
00003630  B483      5782          cmp.l     D3,D2
00003632  6712      5783          beq.s     vsscanf_139
00003634  2F02      5784          move.l    D2,-(A7)
00003636  2F05      5785          move.l    D5,-(A7)
00003638  6100 F7F2 5786          bsr       @vsscanf_scanputback
0000363C  504F      5787          addq.w    #8,A7
0000363E  53AE FFE4 5788          subq.l    #1,-28(A6)
00003642  2004      5789          move.l    D4,D0
00003644  6006      5790          bra.s     vsscanf_15
                    5791   vsscanf_139:
00003646  6000 FA44 5792          bra       vsscanf_3
                    5793   vsscanf_5:
0000364A  2004      5794          move.l    D4,D0
                    5795   vsscanf_15:
0000364C  4CDF 3CFC 5796          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003650  4E5E      5797          unlk      A6
00003652  4E75      5798          rts
                    5799   _printf:
00003654  4E56 FFFC 5800          link      A6,#-4
00003658  48E7 2000 5801          movem.l   D2,-(A7)
0000365C  41EE 0008 5802          lea       8(A6),A0
00003660  5848      5803          addq.w    #4,A0
00003662  2408      5804          move.l    A0,D2
00003664  2F02      5805          move.l    D2,-(A7)
00003666  2F2E 0008 5806          move.l    8(A6),-(A7)
0000366A  42A7      5807          clr.l     -(A7)
0000366C  6100 00CA 5808          bsr       _vsprintf
00003670  DEFC 000C 5809          add.w     #12,A7
00003674  2D40 FFFC 5810          move.l    D0,-4(A6)
00003678  4282      5811          clr.l     D2
0000367A  202E FFFC 5812          move.l    -4(A6),D0
0000367E  4CDF 0004 5813          movem.l   (A7)+,D2
00003682  4E5E      5814          unlk      A6
00003684  4E75      5815          rts
                    5816   @vsprintf_copy:
00003686  4E56 0000 5817          link      A6,#0
0000368A  206E 0008 5818          move.l    8(A6),A0
0000368E  4A90      5819          tst.l     (A0)
00003690  6710      5820          beq.s     @vsprintf_copy_1
00003692  202E 000C 5821          move.l    12(A6),D0
00003696  206E 0008 5822          move.l    8(A6),A0
0000369A  2250      5823          move.l    (A0),A1
0000369C  5290      5824          addq.l    #1,(A0)
0000369E  1280      5825          move.b    D0,(A1)
000036A0  600A      5826          bra.s     @vsprintf_copy_2
                    5827   @vsprintf_copy_1:
000036A2  2F2E 000C 5828          move.l    12(A6),-(A7)
000036A6  6100 F5BE 5829          bsr       _putch
000036AA  584F      5830          addq.w    #4,A7
                    5831   @vsprintf_copy_2:
000036AC  4E5E      5832          unlk      A6
000036AE  4E75      5833          rts
                    5834   @vsprintf_getval:
000036B0  4E56 0000 5835          link      A6,#0
000036B4  48E7 3000 5836          movem.l   D2/D3,-(A7)
000036B8  242E 0008 5837          move.l    8(A6),D2
000036BC  4283      5838          clr.l     D3
000036BE  2042      5839          move.l    D2,A0
000036C0  2050      5840          move.l    (A0),A0
000036C2  1010      5841          move.b    (A0),D0
000036C4  4880      5842          ext.w     D0
000036C6  48C0      5843          ext.l     D0
000036C8  0C80 0000 5844          cmp.l     #42,D0
000036CC  002A      
000036CE  6612      5845          bne.s     @vsprintf_getval_1
000036D0  206E 000C 5846          move.l    12(A6),A0
000036D4  2250      5847          move.l    (A0),A1
000036D6  5890      5848          addq.l    #4,(A0)
000036D8  2611      5849          move.l    (A1),D3
000036DA  2042      5850          move.l    D2,A0
000036DC  5290      5851          addq.l    #1,(A0)
000036DE  6000 004E 5852          bra       @vsprintf_getval_5
                    5853   @vsprintf_getval_1:
000036E2  2042      5854          move.l    D2,A0
000036E4  2050      5855          move.l    (A0),A0
000036E6  1010      5856          move.b    (A0),D0
000036E8  4880      5857          ext.w     D0
000036EA  48C0      5858          ext.l     D0
000036EC  0C80 0000 5859          cmp.l     #48,D0
000036F0  0030      
000036F2  6D00 003A 5860          blt       @vsprintf_getval_5
000036F6  2042      5861          move.l    D2,A0
000036F8  2050      5862          move.l    (A0),A0
000036FA  1010      5863          move.b    (A0),D0
000036FC  4880      5864          ext.w     D0
000036FE  48C0      5865          ext.l     D0
00003700  0C80 0000 5866          cmp.l     #57,D0
00003704  0039      
00003706  6E26      5867          bgt.s     @vsprintf_getval_5
00003708  2F03      5868          move.l    D3,-(A7)
0000370A  4878 000A 5869          pea       10
0000370E  6100 069C 5870          bsr       LMUL
00003712  2017      5871          move.l    (A7),D0
00003714  504F      5872          addq.w    #8,A7
00003716  2042      5873          move.l    D2,A0
00003718  2250      5874          move.l    (A0),A1
0000371A  5290      5875          addq.l    #1,(A0)
0000371C  1211      5876          move.b    (A1),D1
0000371E  4881      5877          ext.w     D1
00003720  48C1      5878          ext.l     D1
00003722  D081      5879          add.l     D1,D0
00003724  0480 0000 5880          sub.l     #48,D0
00003728  0030      
0000372A  2600      5881          move.l    D0,D3
0000372C  60B4      5882          bra       @vsprintf_getval_1
                    5883   @vsprintf_getval_5:
0000372E  2003      5884          move.l    D3,D0
00003730  4CDF 000C 5885          movem.l   (A7)+,D2/D3
00003734  4E5E      5886          unlk      A6
00003736  4E75      5887          rts
                    5888   _vsprintf:
00003738  4E56 FFCC 5889          link      A6,#-52
0000373C  48E7 3F3C 5890          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003740  45EE 0008 5891          lea       8(A6),A2
00003744  47F8 3686 5892          lea       @vsprintf_copy,A3
00003748  49F9 0000 5893          lea       _ultoa,A4
0000374C  3FB6      
0000374E  4286      5894          clr.l     D6
                    5895   vsprintf_1:
00003750  206E 000C 5896          move.l    12(A6),A0
00003754  4A10      5897          tst.b     (A0)
00003756  6700 0624 5898          beq       vsprintf_3
0000375A  206E 000C 5899          move.l    12(A6),A0
0000375E  1010      5900          move.b    (A0),D0
00003760  4880      5901          ext.w     D0
00003762  48C0      5902          ext.l     D0
00003764  0C80 0000 5903          cmp.l     #37,D0
00003768  0025      
0000376A  671C      5904          beq.s     vsprintf_4
0000376C  206E 000C 5905          move.l    12(A6),A0
00003770  52AE 000C 5906          addq.l    #1,12(A6)
00003774  1210      5907          move.b    (A0),D1
00003776  4881      5908          ext.w     D1
00003778  48C1      5909          ext.l     D1
0000377A  2F01      5910          move.l    D1,-(A7)
0000377C  2F0A      5911          move.l    A2,-(A7)
0000377E  4E93      5912          jsr       (A3)
00003780  504F      5913          addq.w    #8,A7
00003782  5286      5914          addq.l    #1,D6
00003784  6000 05F2 5915          bra       vsprintf_2
                    5916   vsprintf_4:
00003788  52AE 000C 5917          addq.l    #1,12(A6)
0000378C  422E FFD3 5918          clr.b     -45(A6)
00003790  422E FFD2 5919          clr.b     -46(A6)
00003794  422E FFD0 5920          clr.b     -48(A6)
00003798  422E FFCF 5921          clr.b     -49(A6)
0000379C  422E FFCE 5922          clr.b     -50(A6)
000037A0  422E FFCD 5923          clr.b     -51(A6)
000037A4  42AE FFFC 5924          clr.l     -4(A6)
000037A8  7AFF      5925          moveq     #-1,D5
000037AA  41EE FFDC 5926          lea       -36(A6),A0
000037AE  2608      5927          move.l    A0,D3
000037B0  2408      5928          move.l    A0,D2
                    5929   vsprintf_6:
000037B2  206E 000C 5930          move.l    12(A6),A0
000037B6  1010      5931          move.b    (A0),D0
000037B8  4880      5932          ext.w     D0
000037BA  48C0      5933          ext.l     D0
000037BC  0C80 0000 5934          cmp.l     #43,D0
000037C0  002B      
000037C2  6730      5935          beq.s     vsprintf_12
000037C4  6E18      5936          bgt.s     vsprintf_15
000037C6  0C80 0000 5937          cmp.l     #35,D0
000037CA  0023      
000037CC  6700 003E 5938          beq       vsprintf_14
000037D0  6E00 0046 5939          bgt       vsprintf_9
000037D4  0C80 0000 5940          cmp.l     #32,D0
000037D8  0020      
000037DA  6724      5941          beq.s     vsprintf_13
000037DC  603A      5942          bra.s     vsprintf_9
                    5943   vsprintf_15:
000037DE  0C80 0000 5944          cmp.l     #45,D0
000037E2  002D      
000037E4  6702      5945          beq.s     vsprintf_11
000037E6  6030      5946          bra.s     vsprintf_9
                    5947   vsprintf_11:
000037E8  1D7C 0001 5948          move.b    #1,-51(A6)
000037EC  FFCD      
000037EE  52AE 000C 5949          addq.l    #1,12(A6)
000037F2  6026      5950          bra.s     vsprintf_7
                    5951   vsprintf_12:
000037F4  1D7C 0001 5952          move.b    #1,-50(A6)
000037F8  FFCE      
000037FA  52AE 000C 5953          addq.l    #1,12(A6)
000037FE  601A      5954          bra.s     vsprintf_7
                    5955   vsprintf_13:
00003800  1D7C 0001 5956          move.b    #1,-49(A6)
00003804  FFCF      
00003806  52AE 000C 5957          addq.l    #1,12(A6)
0000380A  600E      5958          bra.s     vsprintf_7
                    5959   vsprintf_14:
0000380C  1D7C 0001 5960          move.b    #1,-48(A6)
00003810  FFD0      
00003812  52AE 000C 5961          addq.l    #1,12(A6)
00003816  6002      5962          bra.s     vsprintf_7
                    5963   vsprintf_9:
00003818  6002      5964          bra.s     vsprintf_8
                    5965   vsprintf_7:
0000381A  6096      5966          bra       vsprintf_6
                    5967   vsprintf_8:
0000381C  206E 000C 5968          move.l    12(A6),A0
00003820  1010      5969          move.b    (A0),D0
00003822  4880      5970          ext.w     D0
00003824  48C0      5971          ext.l     D0
00003826  0C80 0000 5972          cmp.l     #48,D0
0000382A  0030      
0000382C  660A      5973          bne.s     vsprintf_16
0000382E  52AE 000C 5974          addq.l    #1,12(A6)
00003832  1D7C 0001 5975          move.b    #1,-46(A6)
00003836  FFD2      
                    5976   vsprintf_16:
00003838  486E 0010 5977          pea       16(A6)
0000383C  486E 000C 5978          pea       12(A6)
00003840  6100 FE6E 5979          bsr       @vsprintf_getval
00003844  504F      5980          addq.w    #8,A7
00003846  2A40      5981          move.l    D0,A5
00003848  206E 000C 5982          move.l    12(A6),A0
0000384C  1010      5983          move.b    (A0),D0
0000384E  4880      5984          ext.w     D0
00003850  48C0      5985          ext.l     D0
00003852  0C80 0000 5986          cmp.l     #46,D0
00003856  002E      
00003858  6614      5987          bne.s     vsprintf_18
0000385A  52AE 000C 5988          addq.l    #1,12(A6)
0000385E  486E 0010 5989          pea       16(A6)
00003862  486E 000C 5990          pea       12(A6)
00003866  6100 FE48 5991          bsr       @vsprintf_getval
0000386A  504F      5992          addq.w    #8,A7
0000386C  2A00      5993          move.l    D0,D5
                    5994   vsprintf_18:
0000386E  206E 000C 5995          move.l    12(A6),A0
00003872  1010      5996          move.b    (A0),D0
00003874  4880      5997          ext.w     D0
00003876  48C0      5998          ext.l     D0
00003878  0C80 0000 5999          cmp.l     #108,D0
0000387C  006C      
0000387E  660A      6000          bne.s     vsprintf_20
00003880  52AE 000C 6001          addq.l    #1,12(A6)
00003884  1D7C 0001 6002          move.b    #1,-45(A6)
00003888  FFD3      
                    6003   vsprintf_20:
0000388A  206E 000C 6004          move.l    12(A6),A0
0000388E  1010      6005          move.b    (A0),D0
00003890  4880      6006          ext.w     D0
00003892  48C0      6007          ext.l     D0
00003894  0C80 0000 6008          cmp.l     #111,D0
00003898  006F      
0000389A  6700 00D4 6009          beq       vsprintf_27
0000389E  6E34      6010          bgt.s     vsprintf_33
000038A0  0C80 0000 6011          cmp.l     #100,D0
000038A4  0064      
000038A6  6700 0054 6012          beq       vsprintf_24
000038AA  6E1C      6013          bgt.s     vsprintf_34
000038AC  0C80 0000 6014          cmp.l     #99,D0
000038B0  0063      
000038B2  6700 012C 6015          beq       vsprintf_30
000038B6  6E00 016A 6016          bgt       vsprintf_22
000038BA  0C80 0000 6017          cmp.l     #88,D0
000038BE  0058      
000038C0  6700 00E6 6018          beq       vsprintf_28
000038C4  6000 015C 6019          bra       vsprintf_22
                    6020   vsprintf_34:
000038C8  0C80 0000 6021          cmp.l     #105,D0
000038CC  0069      
000038CE  672C      6022          beq.s     vsprintf_24
000038D0  6000 0150 6023          bra       vsprintf_22
                    6024   vsprintf_33:
000038D4  0C80 0000 6025          cmp.l     #117,D0
000038D8  0075      
000038DA  6700 005C 6026          beq       vsprintf_26
000038DE  6E0E      6027          bgt.s     vsprintf_35
000038E0  0C80 0000 6028          cmp.l     #115,D0
000038E4  0073      
000038E6  6700 011C 6029          beq       vsprintf_31
000038EA  6000 0136 6030          bra       vsprintf_22
                    6031   vsprintf_35:
000038EE  0C80 0000 6032          cmp.l     #120,D0
000038F2  0078      
000038F4  6700 00B2 6033          beq       vsprintf_28
000038F8  6000 0128 6034          bra       vsprintf_22
                    6035   vsprintf_24:
000038FC  4A2E FFD3 6036          tst.b     -45(A6)
00003900  671A      6037          beq.s     vsprintf_36
00003902  4878 000A 6038          pea       10
00003906  2F03      6039          move.l    D3,-(A7)
00003908  206E 0010 6040          move.l    16(A6),A0
0000390C  58AE 0010 6041          addq.l    #4,16(A6)
00003910  2F10      6042          move.l    (A0),-(A7)
00003912  6100 061E 6043          bsr       _ltoa
00003916  DEFC 000C 6044          add.w     #12,A7
0000391A  6018      6045          bra.s     vsprintf_37
                    6046   vsprintf_36:
0000391C  4878 000A 6047          pea       10
00003920  2F03      6048          move.l    D3,-(A7)
00003922  206E 0010 6049          move.l    16(A6),A0
00003926  58AE 0010 6050          addq.l    #4,16(A6)
0000392A  2F10      6051          move.l    (A0),-(A7)
0000392C  6100 0604 6052          bsr       _ltoa
00003930  DEFC 000C 6053          add.w     #12,A7
                    6054   vsprintf_37:
00003934  6000 00FA 6055          bra       vsprintf_23
                    6056   vsprintf_26:
00003938  4A2E FFD3 6057          tst.b     -45(A6)
0000393C  6718      6058          beq.s     vsprintf_38
0000393E  4878 000A 6059          pea       10
00003942  2F03      6060          move.l    D3,-(A7)
00003944  206E 0010 6061          move.l    16(A6),A0
00003948  58AE 0010 6062          addq.l    #4,16(A6)
0000394C  2F10      6063          move.l    (A0),-(A7)
0000394E  4E94      6064          jsr       (A4)
00003950  DEFC 000C 6065          add.w     #12,A7
00003954  6016      6066          bra.s     vsprintf_39
                    6067   vsprintf_38:
00003956  4878 000A 6068          pea       10
0000395A  2F03      6069          move.l    D3,-(A7)
0000395C  206E 0010 6070          move.l    16(A6),A0
00003960  58AE 0010 6071          addq.l    #4,16(A6)
00003964  2F10      6072          move.l    (A0),-(A7)
00003966  4E94      6073          jsr       (A4)
00003968  DEFC 000C 6074          add.w     #12,A7
                    6075   vsprintf_39:
0000396C  6000 00C2 6076          bra       vsprintf_23
                    6077   vsprintf_27:
00003970  4A2E FFD3 6078          tst.b     -45(A6)
00003974  6718      6079          beq.s     vsprintf_40
00003976  4878 0008 6080          pea       8
0000397A  2F03      6081          move.l    D3,-(A7)
0000397C  206E 0010 6082          move.l    16(A6),A0
00003980  58AE 0010 6083          addq.l    #4,16(A6)
00003984  2F10      6084          move.l    (A0),-(A7)
00003986  4E94      6085          jsr       (A4)
00003988  DEFC 000C 6086          add.w     #12,A7
0000398C  6016      6087          bra.s     vsprintf_41
                    6088   vsprintf_40:
0000398E  4878 0008 6089          pea       8
00003992  2F03      6090          move.l    D3,-(A7)
00003994  206E 0010 6091          move.l    16(A6),A0
00003998  58AE 0010 6092          addq.l    #4,16(A6)
0000399C  2F10      6093          move.l    (A0),-(A7)
0000399E  4E94      6094          jsr       (A4)
000039A0  DEFC 000C 6095          add.w     #12,A7
                    6096   vsprintf_41:
000039A4  6000 008A 6097          bra       vsprintf_23
                    6098   vsprintf_28:
000039A8  4A2E FFD3 6099          tst.b     -45(A6)
000039AC  6718      6100          beq.s     vsprintf_42
000039AE  4878 0010 6101          pea       16
000039B2  2F03      6102          move.l    D3,-(A7)
000039B4  206E 0010 6103          move.l    16(A6),A0
000039B8  58AE 0010 6104          addq.l    #4,16(A6)
000039BC  2F10      6105          move.l    (A0),-(A7)
000039BE  4E94      6106          jsr       (A4)
000039C0  DEFC 000C 6107          add.w     #12,A7
000039C4  6016      6108          bra.s     vsprintf_43
                    6109   vsprintf_42:
000039C6  4878 0010 6110          pea       16
000039CA  2F03      6111          move.l    D3,-(A7)
000039CC  206E 0010 6112          move.l    16(A6),A0
000039D0  58AE 0010 6113          addq.l    #4,16(A6)
000039D4  2F10      6114          move.l    (A0),-(A7)
000039D6  4E94      6115          jsr       (A4)
000039D8  DEFC 000C 6116          add.w     #12,A7
                    6117   vsprintf_43:
000039DC  6000 0052 6118          bra       vsprintf_23
                    6119   vsprintf_30:
000039E0  206E 0010 6120          move.l    16(A6),A0
000039E4  58AE 0010 6121          addq.l    #4,16(A6)
000039E8  2010      6122          move.l    (A0),D0
000039EA  2042      6123          move.l    D2,A0
000039EC  5282      6124          addq.l    #1,D2
000039EE  1080      6125          move.b    D0,(A0)
000039F0  2042      6126          move.l    D2,A0
000039F2  4210      6127          clr.b     (A0)
000039F4  200D      6128          move.l    A5,D0
000039F6  6704      6129          beq.s     vsprintf_44
000039F8  200D      6130          move.l    A5,D0
000039FA  6002      6131          bra.s     vsprintf_45
                    6132   vsprintf_44:
000039FC  7001      6133          moveq     #1,D0
                    6134   vsprintf_45:
000039FE  2A00      6135          move.l    D0,D5
00003A00  6000 002E 6136          bra       vsprintf_23
                    6137   vsprintf_31:
00003A04  206E 0010 6138          move.l    16(A6),A0
00003A08  58AE 0010 6139          addq.l    #4,16(A6)
00003A0C  2610      6140          move.l    (A0),D3
00003A0E  0C85 FFFF 6141          cmp.l     #-1,D5
00003A12  FFFF      
00003A14  660A      6142          bne.s     vsprintf_46
00003A16  2F03      6143          move.l    D3,-(A7)
00003A18  6100 05FE 6144          bsr       _strlen
00003A1C  584F      6145          addq.w    #4,A7
00003A1E  2A00      6146          move.l    D0,D5
                    6147   vsprintf_46:
00003A20  600E      6148          bra.s     vsprintf_23
                    6149   vsprintf_22:
00003A22  206E 000C 6150          move.l    12(A6),A0
00003A26  2242      6151          move.l    D2,A1
00003A28  5282      6152          addq.l    #1,D2
00003A2A  1290      6153          move.b    (A0),(A1)
00003A2C  2042      6154          move.l    D2,A0
00003A2E  4210      6155          clr.b     (A0)
                    6156   vsprintf_23:
00003A30  2F03      6157          move.l    D3,-(A7)
00003A32  6100 05E4 6158          bsr       _strlen
00003A36  584F      6159          addq.w    #4,A7
00003A38  1800      6160          move.b    D0,D4
00003A3A  206E 000C 6161          move.l    12(A6),A0
00003A3E  1010      6162          move.b    (A0),D0
00003A40  4880      6163          ext.w     D0
00003A42  48C0      6164          ext.l     D0
00003A44  0C80 0000 6165          cmp.l     #115,D0
00003A48  0073      
00003A4A  6618      6166          bne.s     vsprintf_48
00003A4C  0C85 0000 6167          cmp.l     #0,D5
00003A50  0000      
00003A52  6D10      6168          blt.s     vsprintf_48
00003A54  4884      6169          ext.w     D4
00003A56  48C4      6170          ext.l     D4
00003A58  B885      6171          cmp.l     D5,D4
00003A5A  6F04      6172          ble.s     vsprintf_50
00003A5C  1005      6173          move.b    D5,D0
00003A5E  6002      6174          bra.s     vsprintf_51
                    6175   vsprintf_50:
00003A60  1004      6176          move.b    D4,D0
                    6177   vsprintf_51:
00003A62  1800      6178          move.b    D0,D4
                    6179   vsprintf_48:
00003A64  206E 000C 6180          move.l    12(A6),A0
00003A68  1010      6181          move.b    (A0),D0
00003A6A  4880      6182          ext.w     D0
00003A6C  48C0      6183          ext.l     D0
00003A6E  0C80 0000 6184          cmp.l     #88,D0
00003A72  0058      
00003A74  6600 0026 6185          bne       vsprintf_56
00003A78  41EE FFDC 6186          lea       -36(A6),A0
00003A7C  2408      6187          move.l    A0,D2
                    6188   vsprintf_54:
00003A7E  2042      6189          move.l    D2,A0
00003A80  4A10      6190          tst.b     (A0)
00003A82  6718      6191          beq.s     vsprintf_56
00003A84  2042      6192          move.l    D2,A0
00003A86  1210      6193          move.b    (A0),D1
00003A88  4881      6194          ext.w     D1
00003A8A  48C1      6195          ext.l     D1
00003A8C  2F01      6196          move.l    D1,-(A7)
00003A8E  6100 F2D0 6197          bsr       _toupper
00003A92  584F      6198          addq.w    #4,A7
00003A94  2042      6199          move.l    D2,A0
00003A96  1080      6200          move.b    D0,(A0)
00003A98  5282      6201          addq.l    #1,D2
00003A9A  60E2      6202          bra       vsprintf_54
                    6203   vsprintf_56:
00003A9C  7E00      6204          moveq     #0,D7
00003A9E  41EE FFD4 6205          lea       -44(A6),A0
00003AA2  2408      6206          move.l    A0,D2
00003AA4  206E 000C 6207          move.l    12(A6),A0
00003AA8  1010      6208          move.b    (A0),D0
00003AAA  4880      6209          ext.w     D0
00003AAC  48C0      6210          ext.l     D0
00003AAE  0C80 0000 6211          cmp.l     #100,D0
00003AB2  0064      
00003AB4  6714      6212          beq.s     vsprintf_59
00003AB6  206E 000C 6213          move.l    12(A6),A0
00003ABA  1010      6214          move.b    (A0),D0
00003ABC  4880      6215          ext.w     D0
00003ABE  48C0      6216          ext.l     D0
00003AC0  0C80 0000 6217          cmp.l     #105,D0
00003AC4  0069      
00003AC6  6600 0076 6218          bne       vsprintf_65
                    6219   vsprintf_59:
00003ACA  4A2E FFCE 6220          tst.b     -50(A6)
00003ACE  6612      6221          bne.s     vsprintf_62
00003AD0  2043      6222          move.l    D3,A0
00003AD2  1010      6223          move.b    (A0),D0
00003AD4  4880      6224          ext.w     D0
00003AD6  48C0      6225          ext.l     D0
00003AD8  0C80 0000 6226          cmp.l     #45,D0
00003ADC  002D      
00003ADE  6600 002E 6227          bne       vsprintf_60
                    6228   vsprintf_62:
00003AE2  2043      6229          move.l    D3,A0
00003AE4  1010      6230          move.b    (A0),D0
00003AE6  4880      6231          ext.w     D0
00003AE8  48C0      6232          ext.l     D0
00003AEA  0C80 0000 6233          cmp.l     #45,D0
00003AEE  002D      
00003AF0  660E      6234          bne.s     vsprintf_63
00003AF2  2043      6235          move.l    D3,A0
00003AF4  5283      6236          addq.l    #1,D3
00003AF6  2242      6237          move.l    D2,A1
00003AF8  5282      6238          addq.l    #1,D2
00003AFA  1290      6239          move.b    (A0),(A1)
00003AFC  5304      6240          subq.b    #1,D4
00003AFE  6008      6241          bra.s     vsprintf_64
                    6242   vsprintf_63:
00003B00  2042      6243          move.l    D2,A0
00003B02  5282      6244          addq.l    #1,D2
00003B04  10BC 002B 6245          move.b    #43,(A0)
                    6246   vsprintf_64:
00003B08  5287      6247          addq.l    #1,D7
00003B0A  6000 0032 6248          bra       vsprintf_65
                    6249   vsprintf_60:
00003B0E  4A2E FFCF 6250          tst.b     -49(A6)
00003B12  6700 002A 6251          beq       vsprintf_65
00003B16  2043      6252          move.l    D3,A0
00003B18  1010      6253          move.b    (A0),D0
00003B1A  4880      6254          ext.w     D0
00003B1C  48C0      6255          ext.l     D0
00003B1E  0C80 0000 6256          cmp.l     #45,D0
00003B22  002D      
00003B24  660E      6257          bne.s     vsprintf_67
00003B26  2043      6258          move.l    D3,A0
00003B28  5283      6259          addq.l    #1,D3
00003B2A  2242      6260          move.l    D2,A1
00003B2C  5282      6261          addq.l    #1,D2
00003B2E  1290      6262          move.b    (A0),(A1)
00003B30  5304      6263          subq.b    #1,D4
00003B32  6008      6264          bra.s     vsprintf_68
                    6265   vsprintf_67:
00003B34  2042      6266          move.l    D2,A0
00003B36  5282      6267          addq.l    #1,D2
00003B38  10BC 0020 6268          move.b    #32,(A0)
                    6269   vsprintf_68:
00003B3C  5287      6270          addq.l    #1,D7
                    6271   vsprintf_65:
00003B3E  4A2E FFD0 6272          tst.b     -48(A6)
00003B42  6700 0066 6273          beq       vsprintf_77
00003B46  206E 000C 6274          move.l    12(A6),A0
00003B4A  1010      6275          move.b    (A0),D0
00003B4C  4880      6276          ext.w     D0
00003B4E  48C0      6277          ext.l     D0
00003B50  0C80 0000 6278          cmp.l     #111,D0
00003B54  006F      
00003B56  671A      6279          beq.s     vsprintf_73
00003B58  6E0C      6280          bgt.s     vsprintf_76
00003B5A  0C80 0000 6281          cmp.l     #88,D0
00003B5E  0058      
00003B60  6710      6282          beq.s     vsprintf_73
00003B62  6000 0046 6283          bra       vsprintf_77
                    6284   vsprintf_76:
00003B66  0C80 0000 6285          cmp.l     #120,D0
00003B6A  0078      
00003B6C  6704      6286          beq.s     vsprintf_73
00003B6E  6000 003A 6287          bra       vsprintf_77
                    6288   vsprintf_73:
00003B72  2042      6289          move.l    D2,A0
00003B74  5282      6290          addq.l    #1,D2
00003B76  10BC 0030 6291          move.b    #48,(A0)
00003B7A  5287      6292          addq.l    #1,D7
00003B7C  206E 000C 6293          move.l    12(A6),A0
00003B80  1010      6294          move.b    (A0),D0
00003B82  4880      6295          ext.w     D0
00003B84  48C0      6296          ext.l     D0
00003B86  0C80 0000 6297          cmp.l     #120,D0
00003B8A  0078      
00003B8C  6712      6298          beq.s     vsprintf_79
00003B8E  206E 000C 6299          move.l    12(A6),A0
00003B92  1010      6300          move.b    (A0),D0
00003B94  4880      6301          ext.w     D0
00003B96  48C0      6302          ext.l     D0
00003B98  0C80 0000 6303          cmp.l     #88,D0
00003B9C  0058      
00003B9E  660A      6304          bne.s     vsprintf_77
                    6305   vsprintf_79:
00003BA0  2042      6306          move.l    D2,A0
00003BA2  5282      6307          addq.l    #1,D2
00003BA4  10BC 0078 6308          move.b    #120,(A0)
00003BA8  5287      6309          addq.l    #1,D7
                    6310   vsprintf_77:
00003BAA  2042      6311          move.l    D2,A0
00003BAC  4210      6312          clr.b     (A0)
00003BAE  206E 000C 6313          move.l    12(A6),A0
00003BB2  1010      6314          move.b    (A0),D0
00003BB4  4880      6315          ext.w     D0
00003BB6  48C0      6316          ext.l     D0
00003BB8  0C80 0000 6317          cmp.l     #105,D0
00003BBC  0069      
00003BBE  6700 0076 6318          beq       vsprintf_82
00003BC2  6E42      6319          bgt.s     vsprintf_93
00003BC4  0C80 0000 6320          cmp.l     #99,D0
00003BC8  0063      
00003BCA  6700 0084 6321          beq       vsprintf_96
00003BCE  6E1C      6322          bgt.s     vsprintf_94
00003BD0  0C80 0000 6323          cmp.l     #88,D0
00003BD4  0058      
00003BD6  6700 005E 6324          beq       vsprintf_82
00003BDA  6E00 0184 6325          bgt       vsprintf_80
00003BDE  0C80 0000 6326          cmp.l     #69,D0
00003BE2  0045      
00003BE4  6700 0050 6327          beq       vsprintf_82
00003BE8  6000 0176 6328          bra       vsprintf_80
                    6329   vsprintf_94:
00003BEC  0C80 0000 6330          cmp.l     #101,D0
00003BF0  0065      
00003BF2  6700 0042 6331          beq       vsprintf_82
00003BF6  6E00 0168 6332          bgt       vsprintf_80
00003BFA  0C80 0000 6333          cmp.l     #100,D0
00003BFE  0064      
00003C00  6734      6334          beq.s     vsprintf_82
00003C02  6000 015C 6335          bra       vsprintf_80
                    6336   vsprintf_93:
00003C06  0C80 0000 6337          cmp.l     #117,D0
00003C0A  0075      
00003C0C  6728      6338          beq.s     vsprintf_82
00003C0E  6E1A      6339          bgt.s     vsprintf_95
00003C10  0C80 0000 6340          cmp.l     #115,D0
00003C14  0073      
00003C16  6700 0038 6341          beq       vsprintf_96
00003C1A  6E00 0144 6342          bgt       vsprintf_80
00003C1E  0C80 0000 6343          cmp.l     #111,D0
00003C22  006F      
00003C24  6710      6344          beq.s     vsprintf_82
00003C26  6000 0138 6345          bra       vsprintf_80
                    6346   vsprintf_95:
00003C2A  0C80 0000 6347          cmp.l     #120,D0
00003C2E  0078      
00003C30  6704      6348          beq.s     vsprintf_82
00003C32  6000 012C 6349          bra       vsprintf_80
                    6350   vsprintf_82:
00003C36  4A2E FFD2 6351          tst.b     -46(A6)
00003C3A  6714      6352          beq.s     vsprintf_96
00003C3C  4A2E FFCD 6353          tst.b     -51(A6)
00003C40  660E      6354          bne.s     vsprintf_96
00003C42  200D      6355          move.l    A5,D0
00003C44  9087      6356          sub.l     D7,D0
00003C46  4884      6357          ext.w     D4
00003C48  48C4      6358          ext.l     D4
00003C4A  9084      6359          sub.l     D4,D0
00003C4C  2D40 FFFC 6360          move.l    D0,-4(A6)
                    6361   vsprintf_96:
00003C50  202E FFFC 6362          move.l    -4(A6),D0
00003C54  0C80 0000 6363          cmp.l     #0,D0
00003C58  0000      
00003C5A  6C04      6364          bge.s     vsprintf_98
00003C5C  42AE FFFC 6365          clr.l     -4(A6)
                    6366   vsprintf_98:
00003C60  4A2E FFCD 6367          tst.b     -51(A6)
00003C64  6600 0030 6368          bne       vsprintf_104
00003C68  4884      6369          ext.w     D4
00003C6A  48C4      6370          ext.l     D4
00003C6C  2004      6371          move.l    D4,D0
00003C6E  D0AE FFFC 6372          add.l     -4(A6),D0
00003C72  D087      6373          add.l     D7,D0
00003C74  1D40 FFD1 6374          move.b    D0,-47(A6)
                    6375   vsprintf_102:
00003C78  102E FFD1 6376          move.b    -47(A6),D0
00003C7C  4880      6377          ext.w     D0
00003C7E  48C0      6378          ext.l     D0
00003C80  220D      6379          move.l    A5,D1
00003C82  534D      6380          subq.w    #1,A5
00003C84  B081      6381          cmp.l     D1,D0
00003C86  6C0E      6382          bge.s     vsprintf_104
00003C88  4878 0020 6383          pea       32
00003C8C  2F0A      6384          move.l    A2,-(A7)
00003C8E  4E93      6385          jsr       (A3)
00003C90  504F      6386          addq.w    #8,A7
00003C92  5286      6387          addq.l    #1,D6
00003C94  60E2      6388          bra       vsprintf_102
                    6389   vsprintf_104:
00003C96  41EE FFD4 6390          lea       -44(A6),A0
00003C9A  2408      6391          move.l    A0,D2
                    6392   vsprintf_105:
00003C9C  2042      6393          move.l    D2,A0
00003C9E  4A10      6394          tst.b     (A0)
00003CA0  6716      6395          beq.s     vsprintf_107
00003CA2  2042      6396          move.l    D2,A0
00003CA4  5282      6397          addq.l    #1,D2
00003CA6  1210      6398          move.b    (A0),D1
00003CA8  4881      6399          ext.w     D1
00003CAA  48C1      6400          ext.l     D1
00003CAC  2F01      6401          move.l    D1,-(A7)
00003CAE  2F0A      6402          move.l    A2,-(A7)
00003CB0  4E93      6403          jsr       (A3)
00003CB2  504F      6404          addq.w    #8,A7
00003CB4  5286      6405          addq.l    #1,D6
00003CB6  60E4      6406          bra       vsprintf_105
                    6407   vsprintf_107:
00003CB8  202E FFFC 6408          move.l    -4(A6),D0
00003CBC  1D40 FFD1 6409          move.b    D0,-47(A6)
                    6410   vsprintf_108:
00003CC0  102E FFD1 6411          move.b    -47(A6),D0
00003CC4  532E FFD1 6412          subq.b    #1,-47(A6)
00003CC8  4A00      6413          tst.b     D0
00003CCA  670E      6414          beq.s     vsprintf_110
00003CCC  4878 0030 6415          pea       48
00003CD0  2F0A      6416          move.l    A2,-(A7)
00003CD2  4E93      6417          jsr       (A3)
00003CD4  504F      6418          addq.w    #8,A7
00003CD6  5286      6419          addq.l    #1,D6
00003CD8  60E6      6420          bra       vsprintf_108
                    6421   vsprintf_110:
00003CDA  2043      6422          move.l    D3,A0
00003CDC  4A10      6423          tst.b     (A0)
00003CDE  6700 0048 6424          beq       vsprintf_113
00003CE2  206E 000C 6425          move.l    12(A6),A0
00003CE6  1010      6426          move.b    (A0),D0
00003CE8  4880      6427          ext.w     D0
00003CEA  48C0      6428          ext.l     D0
00003CEC  0C80 0000 6429          cmp.l     #115,D0
00003CF0  0073      
00003CF2  670C      6430          beq.s     vsprintf_116
00003CF4  6E18      6431          bgt.s     vsprintf_119
00003CF6  0C80 0000 6432          cmp.l     #99,D0
00003CFA  0063      
00003CFC  6702      6433          beq.s     vsprintf_116
00003CFE  600E      6434          bra.s     vsprintf_119
                    6435   vsprintf_116:
00003D00  2005      6436          move.l    D5,D0
00003D02  5385      6437          subq.l    #1,D5
00003D04  0C80 0000 6438          cmp.l     #0,D0
00003D08  0000      
00003D0A  6E02      6439          bgt.s     vsprintf_119
00003D0C  6016      6440          bra.s     vsprintf_115
                    6441   vsprintf_119:
00003D0E  2043      6442          move.l    D3,A0
00003D10  5283      6443          addq.l    #1,D3
00003D12  1210      6444          move.b    (A0),D1
00003D14  4881      6445          ext.w     D1
00003D16  48C1      6446          ext.l     D1
00003D18  2F01      6447          move.l    D1,-(A7)
00003D1A  2F0A      6448          move.l    A2,-(A7)
00003D1C  4E93      6449          jsr       (A3)
00003D1E  504F      6450          addq.w    #8,A7
00003D20  5286      6451          addq.l    #1,D6
00003D22  6002      6452          bra.s     vsprintf_112
                    6453   vsprintf_115:
00003D24  6002      6454          bra.s     vsprintf_113
                    6455   vsprintf_112:
00003D26  60B2      6456          bra       vsprintf_110
                    6457   vsprintf_113:
00003D28  4A2E FFCD 6458          tst.b     -51(A6)
00003D2C  6700 0030 6459          beq       vsprintf_125
00003D30  4884      6460          ext.w     D4
00003D32  48C4      6461          ext.l     D4
00003D34  2004      6462          move.l    D4,D0
00003D36  D0AE FFFC 6463          add.l     -4(A6),D0
00003D3A  D087      6464          add.l     D7,D0
00003D3C  1D40 FFD1 6465          move.b    D0,-47(A6)
                    6466   vsprintf_123:
00003D40  102E FFD1 6467          move.b    -47(A6),D0
00003D44  4880      6468          ext.w     D0
00003D46  48C0      6469          ext.l     D0
00003D48  220D      6470          move.l    A5,D1
00003D4A  534D      6471          subq.w    #1,A5
00003D4C  B081      6472          cmp.l     D1,D0
00003D4E  6C0E      6473          bge.s     vsprintf_125
00003D50  4878 0020 6474          pea       32
00003D54  2F0A      6475          move.l    A2,-(A7)
00003D56  4E93      6476          jsr       (A3)
00003D58  504F      6477          addq.w    #8,A7
00003D5A  5386      6478          subq.l    #1,D6
00003D5C  60E2      6479          bra       vsprintf_123
                    6480   vsprintf_125:
00003D5E  6014      6481          bra.s     vsprintf_81
                    6482   vsprintf_80:
00003D60  206E 000C 6483          move.l    12(A6),A0
00003D64  1210      6484          move.b    (A0),D1
00003D66  4881      6485          ext.w     D1
00003D68  48C1      6486          ext.l     D1
00003D6A  2F01      6487          move.l    D1,-(A7)
00003D6C  2F0A      6488          move.l    A2,-(A7)
00003D6E  4E93      6489          jsr       (A3)
00003D70  504F      6490          addq.w    #8,A7
00003D72  5286      6491          addq.l    #1,D6
                    6492   vsprintf_81:
00003D74  52AE 000C 6493          addq.l    #1,12(A6)
                    6494   vsprintf_2:
00003D78  6000 F9D6 6495          bra       vsprintf_1
                    6496   vsprintf_3:
00003D7C  4A92      6497          tst.l     (A2)
00003D7E  6710      6498          beq.s     vsprintf_126
00003D80  4201      6499          clr.b     D1
00003D82  C2BC 0000 6500          and.l     #255,D1
00003D86  00FF      
00003D88  2F01      6501          move.l    D1,-(A7)
00003D8A  2F0A      6502          move.l    A2,-(A7)
00003D8C  4E93      6503          jsr       (A3)
00003D8E  504F      6504          addq.w    #8,A7
                    6505   vsprintf_126:
00003D90  2006      6506          move.l    D6,D0
00003D92  4CDF 3CFC 6507          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003D96  4E5E      6508          unlk      A6
00003D98  4E75      6509          rts
                    6510   ULMUL:
00003D9A  4E56 0000 6511          link    A6,#0
00003D9E  48E7 C000 6512          movem.l D0/D1,-(A7)
00003DA2  222E 0008 6513          move.l  8(A6),D1
00003DA6  202E 000C 6514          move.l  12(A6),D0
00003DAA  602C      6515          bra.s   lmul_3
                    6516   LMUL:
00003DAC  4E56 0000 6517          link    A6,#0
00003DB0  48E7 C000 6518          movem.l D0/D1,-(A7)
00003DB4  222E 0008 6519          move.l  8(A6),D1
00003DB8  202E 000C 6520          move.l  12(A6),D0
00003DBC  4A80      6521          tst.l   D0
00003DBE  6A0A      6522          bpl.s   lmul_1
00003DC0  4480      6523          neg.l   D0
00003DC2  4A81      6524          tst.l   D1
00003DC4  6A0A      6525          bpl.s   lmul_2
00003DC6  4481      6526          neg.l   D1
00003DC8  600E      6527          bra.s   lmul_3
                    6528   lmul_1:
00003DCA  4A81      6529          tst.l   D1
00003DCC  6A0A      6530          bpl.s   lmul_3
00003DCE  4481      6531          neg.l   D1
                    6532   lmul_2:
00003DD0  6114      6533          bsr.s   domul
00003DD2  4481      6534          neg.l   D1
00003DD4  4080      6535          negx.l  D0
00003DD6  6002      6536          bra.s   lmul_4
                    6537   lmul_3:
00003DD8  610C      6538          bsr.s   domul
                    6539   lmul_4:
00003DDA  2D41 0008 6540          move.l  D1,8(A6)
00003DDE  4CDF 0003 6541          movem.l (A7)+,D0/D1
00003DE2  4E5E      6542          unlk    A6
00003DE4  4E75      6543          rts
                    6544   domul:
00003DE6  0C81 0000 6545          cmpi.l  #$FFFF,D1
00003DEA  FFFF      
00003DEC  620C      6546          bhi.s   domul_1
00003DEE  0C80 0000 6547          cmpi.l  #$FFFF,D0
00003DF2  FFFF      
00003DF4  620E      6548          bhi.s   domul_2
00003DF6  C2C0      6549          mulu    D0,D1
00003DF8  4E75      6550          rts
                    6551   domul_1:
00003DFA  0C80 0000 6552          cmpi.l  #$FFFF,D0
00003DFE  FFFF      
00003E00  6218      6553          bhi.s   domul_4
00003E02  6002      6554          bra.s   domul_3
                    6555   domul_2
00003E04  C141      6556          exg     D0,D1
                    6557   domul_3:
00003E06  2F02      6558          move.l  D2,-(A7)
00003E08  2401      6559          move.l  D1,D2
00003E0A  4842      6560          swap    D2
00003E0C  C2C0      6561          mulu    D0,D1
00003E0E  C4C0      6562          mulu    D0,D2
00003E10  4842      6563          swap    D2
00003E12  4242      6564          clr.w   D2
00003E14  D282      6565          add.l   D2,D1
00003E16  241F      6566          move.l  (A7)+,D2
00003E18  4E75      6567          rts
                    6568   domul_4:
00003E1A  48E7 3000 6569          movem.l D2/D3,-(A7)
00003E1E  2401      6570          move.l  D1,D2
00003E20  2601      6571          move.l  D1,D3
00003E22  C2C0      6572          mulu    D0,D1
00003E24  4842      6573          swap    D2
00003E26  C4C0      6574          mulu    D0,D2
00003E28  4840      6575          swap    D0
00003E2A  C6C0      6576          mulu    D0,D3
00003E2C  D483      6577          add.l   D3,D2
00003E2E  4842      6578          swap    D2
00003E30  4242      6579          clr.w   D2
00003E32  D282      6580          add.l   D2,D1
00003E34  4CDF 000C 6581          movem.l (A7)+,D2/D3
00003E38  4E75      6582          rts
                    6583   _gets:
00003E3A  4E56 0000 6584          link      A6,#0
00003E3E  48E7 3820 6585          movem.l   D2/D3/D4/A2,-(A7)
00003E42  45F8 2C66 6586          lea       _putch,A2
00003E46  282E 0008 6587          move.l    8(A6),D4
00003E4A  2404      6588          move.l    D4,D2
                    6589   gets_1:
00003E4C  6100 EE48 6590          bsr       _getch
00003E50  2600      6591          move.l    D0,D3
00003E52  0C80 0000 6592          cmp.l     #10,D0
00003E56  000A      
00003E58  6700 003C 6593          beq       gets_3
00003E5C  0C83 0000 6594          cmp.l     #8,D3
00003E60  0008      
00003E62  6712      6595          beq.s     gets_4
00003E64  2042      6596          move.l    D2,A0
00003E66  5282      6597          addq.l    #1,D2
00003E68  1083      6598          move.b    D3,(A0)
00003E6A  4883      6599          ext.w     D3
00003E6C  48C3      6600          ext.l     D3
00003E6E  2F03      6601          move.l    D3,-(A7)
00003E70  4E92      6602          jsr       (A2)
00003E72  584F      6603          addq.w    #4,A7
00003E74  601E      6604          bra.s     gets_6
                    6605   gets_4:
00003E76  B484      6606          cmp.l     D4,D2
00003E78  631A      6607          bls.s     gets_6
00003E7A  4878 0008 6608          pea       8
00003E7E  4E92      6609          jsr       (A2)
00003E80  584F      6610          addq.w    #4,A7
00003E82  4878 0020 6611          pea       32
00003E86  4E92      6612          jsr       (A2)
00003E88  584F      6613          addq.w    #4,A7
00003E8A  4878 0008 6614          pea       8
00003E8E  4E92      6615          jsr       (A2)
00003E90  584F      6616          addq.w    #4,A7
00003E92  5382      6617          subq.l    #1,D2
                    6618   gets_6:
00003E94  60B6      6619          bra       gets_1
                    6620   gets_3:
00003E96  4878 000A 6621          pea       10
00003E9A  4E92      6622          jsr       (A2)
00003E9C  584F      6623          addq.w    #4,A7
00003E9E  2042      6624          move.l    D2,A0
00003EA0  4210      6625          clr.b     (A0)
00003EA2  2004      6626          move.l    D4,D0
00003EA4  4CDF 041C 6627          movem.l   (A7)+,D2/D3/D4/A2
00003EA8  4E5E      6628          unlk      A6
00003EAA  4E75      6629          rts
                    6630   _ungetch:
00003EAC  4E56 0000 6631          link      A6,#0
00003EB0  23EE 0008 6632          move.l    8(A6),__ungetbuf
00003EB4  0803 00C0 
00003EB8  202E 0008 6633          move.l    8(A6),D0
00003EBC  4E5E      6634          unlk      A6
00003EBE  4E75      6635          rts
                    6636   @itoa_convert:
00003EC0  4E56 0000 6637          link      A6,#0
00003EC4  48E7 3C00 6638          movem.l   D2/D3/D4/D5,-(A7)
00003EC8  242E 0008 6639          move.l    8(A6),D2
00003ECC  262E 0010 6640          move.l    16(A6),D3
00003ED0  2A2E 000C 6641          move.l    12(A6),D5
00003ED4  2F05      6642          move.l    D5,-(A7)
00003ED6  2F03      6643          move.l    D3,-(A7)
00003ED8  6100 ECAE 6644          bsr       ULDIV
00003EDC  202F 0004 6645          move.l    4(A7),D0
00003EE0  504F      6646          addq.w    #8,A7
00003EE2  2800      6647          move.l    D0,D4
00003EE4  BA83      6648          cmp.l     D3,D5
00003EE6  651A      6649          blo.s     @itoa_convert_1
00003EE8  2F03      6650          move.l    D3,-(A7)
00003EEA  2F05      6651          move.l    D5,-(A7)
00003EEC  2F03      6652          move.l    D3,-(A7)
00003EEE  6100 EC98 6653          bsr       ULDIV
00003EF2  2217      6654          move.l    (A7),D1
00003EF4  504F      6655          addq.w    #8,A7
00003EF6  2F01      6656          move.l    D1,-(A7)
00003EF8  2F02      6657          move.l    D2,-(A7)
00003EFA  61C4      6658          bsr       @itoa_convert
00003EFC  DEFC 000C 6659          add.w     #12,A7
00003F00  2400      6660          move.l    D0,D2
                    6661   @itoa_convert_1:
00003F02  0C84 0000 6662          cmp.l     #9,D4
00003F06  0009      
00003F08  6E0A      6663          bgt.s     @itoa_convert_3
00003F0A  2004      6664          move.l    D4,D0
00003F0C  0680 0000 6665          add.l     #48,D0
00003F10  0030      
00003F12  600E      6666          bra.s     @itoa_convert_4
                    6667   @itoa_convert_3:
00003F14  2004      6668          move.l    D4,D0
00003F16  0680 0000 6669          add.l     #97,D0
00003F1A  0061      
00003F1C  0480 0000 6670          sub.l     #10,D0
00003F20  000A      
                    6671   @itoa_convert_4:
00003F22  2042      6672          move.l    D2,A0
00003F24  1080      6673          move.b    D0,(A0)
00003F26  2002      6674          move.l    D2,D0
00003F28  5280      6675          addq.l    #1,D0
00003F2A  4CDF 003C 6676          movem.l   (A7)+,D2/D3/D4/D5
00003F2E  4E5E      6677          unlk      A6
00003F30  4E75      6678          rts
                    6679   _ltoa:
00003F32  4E56 0000 6680          link      A6,#0
00003F36  48E7 3C00 6681          movem.l   D2/D3/D4/D5,-(A7)
00003F3A  242E 0008 6682          move.l    8(A6),D2
00003F3E  262E 000C 6683          move.l    12(A6),D3
00003F42  2A2E 0010 6684          move.l    16(A6),D5
00003F46  2803      6685          move.l    D3,D4
00003F48  0C85 0000 6686          cmp.l     #2,D5
00003F4C  0002      
00003F4E  6D08      6687          blt.s     ltoa_3
00003F50  0C85 0000 6688          cmp.l     #36,D5
00003F54  0024      
00003F56  6F06      6689          ble.s     ltoa_1
                    6690   ltoa_3:
00003F58  2003      6691          move.l    D3,D0
00003F5A  6000 0052 6692          bra       ltoa_4
                    6693   ltoa_1:
00003F5E  0C85 0000 6694          cmp.l     #10,D5
00003F62  000A      
00003F64  6600 0032 6695          bne       ltoa_5
00003F68  0C82 0000 6696          cmp.l     #0,D2
00003F6C  0000      
00003F6E  6C28      6697          bge.s     ltoa_5
00003F70  2002      6698          move.l    D2,D0
00003F72  4480      6699          neg.l     D0
00003F74  2400      6700          move.l    D0,D2
00003F76  0C82 0000 6701          cmp.l     #0,D2
00003F7A  0000      
00003F7C  6C12      6702          bge.s     ltoa_7
00003F7E  4879 0000 6703          pea       @itoa_1
00003F82  5496      
00003F84  2F03      6704          move.l    D3,-(A7)
00003F86  6100 EBF0 6705          bsr       _strcpy
00003F8A  504F      6706          addq.w    #8,A7
00003F8C  2003      6707          move.l    D3,D0
00003F8E  601E      6708          bra.s     ltoa_4
                    6709   ltoa_7:
00003F90  2044      6710          move.l    D4,A0
00003F92  5284      6711          addq.l    #1,D4
00003F94  10BC 002D 6712          move.b    #45,(A0)
                    6713   ltoa_5:
00003F98  2F05      6714          move.l    D5,-(A7)
00003F9A  2F02      6715          move.l    D2,-(A7)
00003F9C  2F04      6716          move.l    D4,-(A7)
00003F9E  6100 FF20 6717          bsr       @itoa_convert
00003FA2  DEFC 000C 6718          add.w     #12,A7
00003FA6  2800      6719          move.l    D0,D4
00003FA8  2044      6720          move.l    D4,A0
00003FAA  4210      6721          clr.b     (A0)
00003FAC  2003      6722          move.l    D3,D0
                    6723   ltoa_4:
00003FAE  4CDF 003C 6724          movem.l   (A7)+,D2/D3/D4/D5
00003FB2  4E5E      6725          unlk      A6
00003FB4  4E75      6726          rts
                    6727   _ultoa:
00003FB6  4E56 0000 6728          link      A6,#0
00003FBA  48E7 3800 6729          movem.l   D2/D3/D4,-(A7)
00003FBE  262E 0010 6730          move.l    16(A6),D3
00003FC2  282E 000C 6731          move.l    12(A6),D4
00003FC6  2404      6732          move.l    D4,D2
00003FC8  0C83 0000 6733          cmp.l     #2,D3
00003FCC  0002      
00003FCE  6D08      6734          blt.s     ultoa_3
00003FD0  0C83 0000 6735          cmp.l     #36,D3
00003FD4  0024      
00003FD6  6F04      6736          ble.s     ultoa_1
                    6737   ultoa_3:
00003FD8  2004      6738          move.l    D4,D0
00003FDA  6018      6739          bra.s     ultoa_4
                    6740   ultoa_1:
00003FDC  2F03      6741          move.l    D3,-(A7)
00003FDE  2F2E 0008 6742          move.l    8(A6),-(A7)
00003FE2  2F02      6743          move.l    D2,-(A7)
00003FE4  6100 FEDA 6744          bsr       @itoa_convert
00003FE8  DEFC 000C 6745          add.w     #12,A7
00003FEC  2400      6746          move.l    D0,D2
00003FEE  2042      6747          move.l    D2,A0
00003FF0  4210      6748          clr.b     (A0)
00003FF2  2004      6749          move.l    D4,D0
                    6750   ultoa_4:
00003FF4  4CDF 001C 6751          movem.l   (A7)+,D2/D3/D4
00003FF8  4E5E      6752          unlk      A6
00003FFA  4E75      6753          rts
                    6754   _itoa:
00003FFC  4E56 0000 6755          link      A6,#0
00004000  2F2E 0010 6756          move.l    16(A6),-(A7)
00004004  2F2E 000C 6757          move.l    12(A6),-(A7)
00004008  2F2E 0008 6758          move.l    8(A6),-(A7)
0000400C  6100 FF24 6759          bsr       _ltoa
00004010  DEFC 000C 6760          add.w     #12,A7
00004014  4E5E      6761          unlk      A6
00004016  4E75      6762          rts
                    6763   _strlen:
00004018  206F 0004 6764          move.l    (4,A7),A0
0000401C  2248      6765          move.l    A0,A1
                    6766   strlen_1:
0000401E  4A19      6767          tst.b     (A1)+
00004020  66FC      6768          bne       strlen_1
00004022  2009      6769          move.l    A1,D0
00004024  9088      6770          sub.l     A0,D0
00004026  5380      6771          subq.l    #1,D0
00004028  4E75      6772          rts
                    6773          section   const
                    6774   
                    6775   @m68kde~1_1:
0000402A  0D0A 00   6776          dc.b      13,10,0
                    6777   @m68kde~1_2:
0000402E  0D53 7769 6778          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004032  7463 6865 
00004036  7320 5357 
0000403A  5B        
0000403B  372D 305D 6779          dc.b      55,45,48,93,32,61,32,0
0000403F  203D 2000 
                    6780   @m68kde~1_3:
00004044  3000      6781          dc.b      48,0
                    6782   @m68kde~1_4:
00004046  3100      6783          dc.b      49,0
                    6784   @m68kde~1_5:
00004048  0D0A 4475 6785          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
0000404C  6D70 204D 
00004050  656D 6F72 
00004054  79        
00004055  2042 6C6F 6786          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004059  636B 3A20 
0000405D  3C45 5343 
00004061  3E20      
00004063  746F 2041 6787          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004067  626F 7274 
0000406B  2C20 3C53 
0000406F  50        
00004070  4143 453E 6788          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004074  2074 6F20 
00004078  436F 6E74 
0000407C  69        
0000407D  6E75 6500 6789          dc.b      110,117,101,0
                    6790   @m68kde~1_6:
00004082  0D0A 456E 6791          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004086  7465 7220 
0000408A  5374 6172 
0000408E  74        
0000408F  2041 6464 6792          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004093  7265 7373 
00004097  3A20 00   
                    6793   @m68kde~1_7:
0000409A  0D0A 2530 6794          dc.b      13,10,37,48,56,120,32,0
0000409E  3878 2000 
                    6795   @m68kde~1_8:
000040A2  2530 3258 6796          dc.b      37,48,50,88,0
000040A6  00        
                    6797   @m68kde~1_9:
000040A8  2020 00   6798          dc.b      32,32,0
                    6799   @m68kde~1_10:
000040AC  0D0A 4669 6800          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
000040B0  6C6C 204D 
000040B4  656D 6F72 
000040B8  79        
000040B9  2042 6C6F 6801          dc.b      32,66,108,111,99,107,0
000040BD  636B 00   
                    6802   @m68kde~1_11:
000040C0  0D0A 456E 6803          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000040C4  7465 7220 
000040C8  456E 6420 
000040CC  41        
000040CD  6464 7265 6804          dc.b      100,100,114,101,115,115,58,32,0
000040D1  7373 3A20 
000040D5  00        
                    6805   @m68kde~1_12:
000040D6  0D0A 456E 6806          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000040DA  7465 7220 
000040DE  4669 6C6C 
000040E2  20        
000040E3  4461 7461 6807          dc.b      68,97,116,97,58,32,0
000040E7  3A20 00   
                    6808   @m68kde~1_13:
000040EA  0D0A 4669 6809          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000040EE  6C6C 696E 
000040F2  6720 4164 
000040F6  64        
000040F7  7265 7373 6810          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000040FB  6573 205B 
000040FF  2425 3038 
00004103  58        
00004104  202D 2024 6811          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00004108  2530 3858 
0000410C  5D20 7769 
00004110  7468      
00004112  2024 2530 6812          dc.b      32,36,37,48,50,88,0
00004116  3258 00   
                    6813   @m68kde~1_14:
0000411A  0D0A 5573 6814          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
0000411E  6520 4879 
00004122  7065 7254 
00004126  65        
00004127  726D 696E 6815          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
0000412B  616C 2074 
0000412F  6F20 5365 
00004133  6E64 2054 6816          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004137  6578 7420 
0000413B  4669 6C65 
0000413F  2028 2E68 6817          dc.b      32,40,46,104,101,120,41,13,10,0
00004143  6578 290D 
00004147  0A00      
                    6818   @m68kde~1_15:
0000414A  0D0A 4C6F 6819          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
0000414E  6164 2046 
00004152  6169 6C65 
00004156  64        
00004157  2061 7420 6820          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000415B  4164 6472 
0000415F  6573 7320 
00004163  3D        
00004164  205B 2425 6821          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004168  3038 585D 
0000416C  0D0A 00   
                    6822   @m68kde~1_16:
00004170  0D0A 5375 6823          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004174  6363 6573 
00004178  733A 2044 
0000417C  6F        
0000417D  776E 6C6F 6824          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004181  6164 6564 
00004185  2025 6420 
00004189  6279 7465 6825          dc.b      98,121,116,101,115,13,10,0
0000418D  730D 0A00 
                    6826   @m68kde~1_17:
00004192  0D0A 4578 6827          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004196  616D 696E 
0000419A  6520 616E 
0000419E  64        
0000419F  2043 6861 6828          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
000041A3  6E67 6520 
000041A7  4D65 6D6F 
000041AB  72        
000041AC  7900      6829          dc.b      121,0
                    6830   @m68kde~1_18:
000041AE  0D0A 3C45 6831          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
000041B2  5343 3E20 
000041B6  746F 2053 
000041BA  746F      
000041BC  702C 203C 6832          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000041C0  5350 4143 
000041C4  453E 2074 
000041C8  6F20      
000041CA  4164 7661 6833          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000041CE  6E63 652C 
000041D2  2027 2D27 
000041D6  2074      
000041D8  6F20 476F 6834          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000041DC  2042 6163 
000041E0  6B2C 203C 
000041E4  4441      
000041E6  5441 3E20 6835          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000041EA  746F 2063 
000041EE  6861 6E67 
000041F2  65        
000041F3  00        6836          dc.b      0
                    6837   @m68kde~1_19:
000041F4  0D0A 456E 6838          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000041F8  7465 7220 
000041FC  4164 6472 
00004200  65        
00004201  7373 3A20 6839          dc.b      115,115,58,32,0
00004205  00        
                    6840   @m68kde~1_20:
00004206  0D0A 5B25 6841          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
0000420A  3038 785D 
0000420E  203A 2025 
00004212  3032 78   
00004215  2020 00   6842          dc.b      32,32,0
                    6843   @m68kde~1_21:
00004218  0D0A 5761 6844          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
0000421C  726E 696E 
00004220  6720 4368 
00004224  61        
00004225  6E67 6520 6845          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004229  4661 696C 
0000422D  6564 3A20 
00004231  57        
00004232  726F 7465 6846          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004236  205B 2530 
0000423A  3278 5D2C 
0000423E  20        
0000423F  5265 6164 6847          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004243  205B 2530 
00004247  3278 5D00 
                    6848   @m68kde~1_22:
0000424C  0D0A 4C6F 6849          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00004250  6164 696E 
00004254  6720 5072 
00004258  6F        
00004259  6772 616D 6850          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
0000425D  2046 726F 
00004261  6D20 5350 
00004265  49        
00004266  2046 6C61 6851          dc.b      32,70,108,97,115,104,46,46,46,46,0
0000426A  7368 2E2E 
0000426E  2E2E 00   
                    6852   @m68kde~1_23:
00004272  2425 3038 6853          dc.b      36,37,48,56,88,32,32,0
00004276  5820 2000 
                    6854   @m68kde~1_24:
0000427A  2000      6855          dc.b      32,0
                    6856   @m68kde~1_25:
0000427C  2E00      6857          dc.b      46,0
                    6858   @m68kde~1_26:
0000427E  2563 00   6859          dc.b      37,99,0
                    6860   @m68kde~1_27:
00004282  00        6861          dc.b      0
                    6862   @m68kde~1_28:
00004284  0D0A 0D0A 6863          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004288  2044 3020 
0000428C  3D20 2425 
00004290  3038 58   
00004293  2020 4130 6864          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004297  203D 2024 
0000429B  2530 3858 
0000429F  00        
                    6865   @m68kde~1_29:
000042A0  0D0A 2044 6866          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000042A4  3120 3D20 
000042A8  2425 3038 
000042AC  5820 20   
000042AF  4131 203D 6867          dc.b      65,49,32,61,32,36,37,48,56,88,0
000042B3  2024 2530 
000042B7  3858 00   
                    6868   @m68kde~1_30:
000042BA  0D0A 2044 6869          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000042BE  3220 3D20 
000042C2  2425 3038 
000042C6  5820 20   
000042C9  4132 203D 6870          dc.b      65,50,32,61,32,36,37,48,56,88,0
000042CD  2024 2530 
000042D1  3858 00   
                    6871   @m68kde~1_31:
000042D4  0D0A 2044 6872          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
000042D8  3320 3D20 
000042DC  2425 3038 
000042E0  5820 20   
000042E3  4133 203D 6873          dc.b      65,51,32,61,32,36,37,48,56,88,0
000042E7  2024 2530 
000042EB  3858 00   
                    6874   @m68kde~1_32:
000042EE  0D0A 2044 6875          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000042F2  3420 3D20 
000042F6  2425 3038 
000042FA  5820 20   
000042FD  4134 203D 6876          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004301  2024 2530 
00004305  3858 00   
                    6877   @m68kde~1_33:
00004308  0D0A 2044 6878          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
0000430C  3520 3D20 
00004310  2425 3038 
00004314  5820 20   
00004317  4135 203D 6879          dc.b      65,53,32,61,32,36,37,48,56,88,0
0000431B  2024 2530 
0000431F  3858 00   
                    6880   @m68kde~1_34:
00004322  0D0A 2044 6881          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004326  3620 3D20 
0000432A  2425 3038 
0000432E  5820 20   
00004331  4136 203D 6882          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004335  2024 2530 
00004339  3858 00   
                    6883   @m68kde~1_35:
0000433C  0D0A 2044 6884          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004340  3720 3D20 
00004344  2425 3038 
00004348  5820 20   
0000434B  4137 203D 6885          dc.b      65,55,32,61,32,36,37,48,56,88,0
0000434F  2024 2530 
00004353  3858 00   
                    6886   @m68kde~1_36:
00004356  0D0A 0D0A 6887          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
0000435A  5553 5020 
0000435E  3D20 2425 
00004362  3038 58   
00004365  2020 2841 6888          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004369  3729 2055 
0000436D  7365 7220 
00004371  5350      
00004373  00        6889          dc.b      0
                    6890   @m68kde~1_37:
00004374  0D0A 5353 6891          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004378  5020 3D20 
0000437C  2425 3038 
00004380  5820 20   
00004383  2841 3729 6892          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004387  2053 7570 
0000438B  6572 7669 
0000438F  73        
00004390  6F72 2053 6893          dc.b      111,114,32,83,80,0
00004394  5000      
                    6894   @m68kde~1_38:
00004396  0D0A 2053 6895          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
0000439A  5220 3D20 
0000439E  2425 3034 
000043A2  5820 20   
000043A5  2000      6896          dc.b      32,0
                    6897   @m68kde~1_39:
000043A8  2020 205B 6898          dc.b      32,32,32,91,0
000043AC  00        
                    6899   @m68kde~1_40:
000043AE  0D0A 2050 6900          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000043B2  4320 3D20 
000043B6  2425 3038 
000043BA  5820 20   
000043BD  00        6901          dc.b      0
                    6902   @m68kde~1_41:
000043BE  5B40 2042 6903          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
000043C2  5245 414B 
000043C6  504F 494E 
000043CA  545D 00   
                    6904   @m68kde~1_42:
000043CE  0D0A 5750 6905          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000043D2  2564 203D 
000043D6  2025 7300 
                    6906   @m68kde~1_43:
000043DA  0D0A 0D0A 6907          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000043DE  0D0A 0D0A 
000043E2  0D0A 0D0A 
000043E6  5369 6E   
000043E9  676C 6520 6908          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000043ED  5374 6570 
000043F1  2020 3A5B 
000043F5  4F        
000043F6  4E5D 00   6909          dc.b      78,93,0
                    6910   @m68kde~1_44:
000043FA  0D0A 4272 6911          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000043FE  6561 6B20 
00004402  506F 696E 
00004406  74        
00004407  7320 3A5B 6912          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
0000440B  4469 7361 
0000440F  626C 6564 
00004413  5D        
00004414  00        6913          dc.b      0
                    6914   @m68kde~1_45:
00004416  0D0A 5072 6915          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
0000441A  6573 7320 
0000441E  3C53 5041 
00004422  4345      
00004424  3E20 746F 6916          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004428  2045 7865 
0000442C  6375 7465 
00004430  20        
00004431  4E65 7874 6917          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004435  2049 6E73 
00004439  7472 7563 
0000443D  7469 6F6E 6918          dc.b      116,105,111,110,0
00004441  00        
                    6919   @m68kde~1_46:
00004442  0D0A 5072 6920          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004446  6573 7320 
0000444A  3C45 5343 
0000444E  3E20      
00004450  746F 2052 6921          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004454  6573 756D 
00004458  6520 5072 
0000445C  6F67 7261 6922          dc.b      111,103,114,97,109,0
00004460  6D00      
                    6923   @m68kde~1_47:
00004462  0D0A 496C 6924          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004466  6C65 6761 
0000446A  6C20 4461 
0000446E  74        
0000446F  6120 5265 6925          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004473  6769 7374 
00004477  6572 203A 
0000447B  20        
0000447C  5573 6520 6926          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004480  4430 2D44 
00004484  372E 2E2E 
00004488  2E2E      
0000448A  0D0A 00   6927          dc.b      13,10,0
                    6928   @m68kde~1_48:
0000448E  0D0A 4425 6929          dc.b      13,10,68,37,99,32,61,32,0
00004492  6320 3D20 
00004496  00        
                    6930   @m68kde~1_49:
00004498  0D0A 496C 6931          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
0000449C  6C65 6761 
000044A0  6C20 4164 
000044A4  64        
000044A5  7265 7373 6932          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000044A9  2052 6567 
000044AD  6973 7465 
000044B1  7220 3A20 6933          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000044B5  5573 6520 
000044B9  4130 2D41 
000044BD  372E      
000044BF  2E2E 2E2E 6934          dc.b      46,46,46,46,13,10,0
000044C3  0D0A 00   
                    6935   @m68kde~1_50:
000044C6  0D0A 4125 6936          dc.b      13,10,65,37,99,32,61,32,0
000044CA  6320 3D20 
000044CE  00        
                    6937   @m68kde~1_51:
000044D0  0D0A 5573 6938          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000044D4  6572 2053 
000044D8  5020 3D20 
000044DC  00        
                    6939   @m68kde~1_52:
000044DE  0D0A 496C 6940          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000044E2  6C65 6761 
000044E6  6C20 5265 
000044EA  67        
000044EB  6973 7465 6941          dc.b      105,115,116,101,114,46,46,46,46,0
000044EF  722E 2E2E 
000044F3  2E00      
                    6942   @m68kde~1_53:
000044F6  0D0A 5379 6943          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000044FA  7374 656D 
000044FE  2053 5020 
00004502  3D        
00004503  2000      6944          dc.b      32,0
                    6945   @m68kde~1_54:
00004506  0D0A 5043 6946          dc.b      13,10,80,67,32,61,32,0
0000450A  203D 2000 
                    6947   @m68kde~1_55:
0000450E  0D0A 5352 6948          dc.b      13,10,83,82,32,61,32,0
00004512  203D 2000 
                    6949   @m68kde~1_56:
00004516  0D0A 496C 6950          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000451A  6C65 6761 
0000451E  6C20 5265 
00004522  67        
00004523  6973 7465 6951          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004527  723A 2055 
0000452B  7365 2041 
0000452F  30        
00004530  2D41 372C 6952          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004534  2044 302D 
00004538  4437 2C20 
0000453C  5353 50   
0000453F  2C20 5553 6953          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004543  502C 2050 
00004547  4320 6F72 
0000454B  2053      
0000454D  520D 0A00 6954          dc.b      82,13,10,0
                    6955   @m68kde~1_57:
00004552  0D0A 0D0A 6956          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004556  4E75 6D20 
0000455A  2020 2020 
0000455E  4164      
00004560  6472 6573 6957          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004564  7320 2020 
00004568  2020 2049 
0000456C  6E        
0000456D  7374 7275 6958          dc.b      115,116,114,117,99,116,105,111,110,0
00004571  6374 696F 
00004575  6E00      
                    6959   @m68kde~1_58:
00004578  0D0A 2D2D 6960          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000457C  2D20 2020 
00004580  2020 2D2D 
00004584  2D2D 2D   
00004587  2D2D 2D2D 6961          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
0000458B  2020 2020 
0000458F  2D2D 2D2D 
00004593  2D2D 2D   
00004596  2D2D 2D2D 6962          dc.b      45,45,45,45,0
0000459A  00        
                    6963   @m68kde~1_59:
0000459C  0D0A 4E6F 6964          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000045A0  2042 7265 
000045A4  616B 506F 
000045A8  69        
000045A9  6E74 7320 6965          dc.b      110,116,115,32,83,101,116,0
000045AD  5365 7400 
                    6966   @m68kde~1_60:
000045B2  0D0A 2533 6967          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000045B6  6420 2020 
000045BA  2020 2425 
000045BE  3038 78   
000045C1  00        6968          dc.b      0
                    6969   @m68kde~1_61:
000045C2  0D0A 4E75 6970          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000045C6  6D20 2020 
000045CA  2020 4164 
000045CE  6472      
000045D0  6573 7300 6971          dc.b      101,115,115,0
                    6972   @m68kde~1_62:
000045D4  0D0A 2D2D 6973          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000045D8  2D20 2020 
000045DC  2020 2D2D 
000045E0  2D2D 2D   
000045E3  2D2D 2D2D 6974          dc.b      45,45,45,45,0
000045E7  00        
                    6975   @m68kde~1_63:
000045E8  0D0A 4E6F 6976          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000045EC  2057 6174 
000045F0  6368 506F 
000045F4  69        
000045F5  6E74 7320 6977          dc.b      110,116,115,32,83,101,116,0
000045F9  5365 7400 
                    6978   @m68kde~1_64:
000045FE  0D0A 456E 6979          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004602  7465 7220 
00004606  4272 6561 
0000460A  6B        
0000460B  2050 6F69 6980          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000460F  6E74 204E 
00004613  756D 6265 
00004617  72        
00004618  3A20 00   6981          dc.b      58,32,0
                    6982   @m68kde~1_65:
0000461C  0D0A 496C 6983          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004620  6C65 6761 
00004624  6C20 5261 
00004628  6E        
00004629  6765 203A 6984          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
0000462D  2055 7365 
00004631  2030 202D 
00004635  2037      
00004637  00        6985          dc.b      0
                    6986   @m68kde~1_66:
00004638  0D0A 4272 6987          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000463C  6561 6B20 
00004640  506F 696E 
00004644  74        
00004645  2043 6C65 6988          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004649  6172 6564 
0000464D  2E2E 2E2E 
00004651  2E        
00004652  0D0A 00   6989          dc.b      13,10,0
                    6990   @m68kde~1_67:
00004656  0D0A 4272 6991          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000465A  6561 6B20 
0000465E  506F 696E 
00004662  74        
00004663  2077 6173 6992          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004667  6E27 7420 
0000466B  5365 742E 
0000466F  2E        
00004670  2E2E 2E00 6993          dc.b      46,46,46,0
                    6994   @m68kde~1_68:
00004674  0D0A 456E 6995          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004678  7465 7220 
0000467C  5761 7463 
00004680  68        
00004681  2050 6F69 6996          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004685  6E74 204E 
00004689  756D 6265 
0000468D  72        
0000468E  3A20 00   6997          dc.b      58,32,0
                    6998   @m68kde~1_69:
00004692  0D0A 5761 6999          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004696  7463 6820 
0000469A  506F 696E 
0000469E  74        
0000469F  2043 6C65 7000          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000046A3  6172 6564 
000046A7  2E2E 2E2E 
000046AB  2E        
000046AC  0D0A 00   7001          dc.b      13,10,0
                    7002   @m68kde~1_70:
000046B0  0D0A 5761 7003          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000046B4  7463 6820 
000046B8  506F 696E 
000046BC  74        
000046BD  2057 6173 7004          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000046C1  206E 6F74 
000046C5  2053 6574 
000046C9  2E        
000046CA  2E2E 2E2E 7005          dc.b      46,46,46,46,0
000046CE  00        
                    7006   @m68kde~1_71:
000046D0  0D0A 4E6F 7007          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000046D4  2046 5245 
000046D8  4520 4272 
000046DC  6561      
000046DE  6B20 506F 7008          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000046E2  696E 7473 
000046E6  2E2E 2E2E 
000046EA  2E        
000046EB  00        7009          dc.b      0
                    7010   @m68kde~1_72:
000046EC  0D0A 4272 7011          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000046F0  6561 6B20 
000046F4  506F 696E 
000046F8  74        
000046F9  2041 6464 7012          dc.b      32,65,100,100,114,101,115,115,58,32,0
000046FD  7265 7373 
00004701  3A20 00   
                    7013   @m68kde~1_73:
00004704  0D0A 4572 7014          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004708  726F 7220 
0000470C  3A20 4272 
00004710  65        
00004711  616B 2050 7015          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004715  6F69 6E74 
00004719  7320 4341 
0000471D  4E        
0000471E  4E4F 5420 7016          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004722  6265 2073 
00004726  6574 2061 
0000472A  74        
0000472B  204F 4444 7017          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
0000472F  2061 6464 
00004733  7265 7373 
00004737  65        
00004738  7300      7018          dc.b      115,0
                    7019   @m68kde~1_74:
0000473A  0D0A 4572 7020          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000473E  726F 7220 
00004742  3A20 4272 
00004746  65        
00004747  616B 2050 7021          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000474B  6F69 6E74 
0000474F  7320 4341 
00004753  4E        
00004754  4E4F 5420 7022          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004758  6265 2073 
0000475C  6574 2066 
00004760  6F        
00004761  7220 524F 7023          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004765  4D20 696E 
00004769  2052 616E 
0000476D  67        
0000476E  6520 3A20 7024          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004772  5B24 302D 
00004776  2430 3030 
0000477A  3037 46   
0000477D  4646 5D00 7025          dc.b      70,70,93,0
                    7026   @m68kde~1_75:
00004782  0D0A 4572 7027          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004786  726F 723A 
0000478A  2042 7265 
0000478E  61        
0000478F  6B20 506F 7028          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004793  696E 7420 
00004797  416C 7265 
0000479B  6164 7920 7029          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
0000479F  4578 6973 
000047A3  7473 2061 
000047A7  74        
000047A8  2041 6464 7030          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000047AC  7265 7373 
000047B0  203A 2025 
000047B4  30        
000047B5  3878 0D0A 7031          dc.b      56,120,13,10,0
000047B9  00        
                    7032   @m68kde~1_76:
000047BA  0D0A 4272 7033          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000047BE  6561 6B20 
000047C2  506F 696E 
000047C6  74        
000047C7  2053 6574 7034          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000047CB  2061 7420 
000047CF  4164 6472 
000047D3  65        
000047D4  7373 3A20 7035          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000047D8  5B24 2530 
000047DC  3878 5D00 
                    7036   @m68kde~1_77:
000047E0  0D0A 4E6F 7037          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000047E4  2046 5245 
000047E8  4520 5761 
000047EC  7463      
000047EE  6820 506F 7038          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
000047F2  696E 7473 
000047F6  2E2E 2E2E 
000047FA  2E        
000047FB  00        7039          dc.b      0
                    7040   @m68kde~1_78:
000047FC  0D0A 5761 7041          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004800  7463 6820 
00004804  506F 696E 
00004808  74        
00004809  2041 6464 7042          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000480D  7265 7373 
00004811  3A20 00   
                    7043   @m68kde~1_79:
00004814  0D0A 4572 7044          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004818  726F 723A 
0000481C  2057 6174 
00004820  63        
00004821  6820 506F 7045          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004825  696E 7420 
00004829  416C 7265 
0000482D  6164 7920 7046          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004831  5365 7420 
00004835  6174 2041 
00004839  64        
0000483A  6472 6573 7047          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
0000483E  7320 3A20 
00004842  2530 3878 
00004846  0D        
00004847  0A00      7048          dc.b      10,0
                    7049   @m68kde~1_80:
0000484A  0D0A 5761 7050          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000484E  7463 6820 
00004852  506F 696E 
00004856  74        
00004857  2053 6574 7051          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000485B  2061 7420 
0000485F  4164 6472 
00004863  65        
00004864  7373 3A20 7052          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004868  5B24 2530 
0000486C  3878 5D00 
                    7053   @m68kde~1_81:
00004870  0D0A 0D0A 7054          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004874  0D0A 0D0A 
00004878  4042 5245 
0000487C  414B 50   
0000487F  4F49 4E54 7055          dc.b      79,73,78,84,0
00004883  00        
                    7056   @m68kde~1_82:
00004884  0D0A 5369 7057          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004888  6E67 6C65 
0000488C  2053 7465 
00004890  70        
00004891  203A 205B 7058          dc.b      32,58,32,91,79,78,93,0
00004895  4F4E 5D00 
                    7059   @m68kde~1_83:
0000489A  0D0A 4272 7060          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
0000489E  6561 6B50 
000048A2  6F69 6E74 
000048A6  73        
000048A7  203A 205B 7061          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000048AB  456E 6162 
000048AF  6C65 645D 
000048B3  00        
                    7062   @m68kde~1_84:
000048B4  0D0A 5072 7063          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000048B8  6573 7320 
000048BC  3C45 5343 
000048C0  3E20      
000048C2  746F 2052 7064          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000048C6  6573 756D 
000048CA  6520 5573 
000048CE  6572 2050 7065          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
000048D2  726F 6772 
000048D6  616D 0D0A 
000048DA  00        
                    7066   @m68kde~1_85:
000048DC  0D0A 556E 7067          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000048E0  6B6E 6F77 
000048E4  6E20 436F 
000048E8  6D        
000048E9  6D61 6E64 7068          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
000048ED  2E2E 2E2E 
000048F1  2E0D 0A00 
                    7069   @m68kde~1_86:
000048F6  0D0A 5072 7070          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000048FA  6F67 7261 
000048FE  6D20 456E 
00004902  64        
00004903  6564 2028 7071          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004907  5452 4150 
0000490B  2023 3135 
0000490F  292E      
00004911  2E2E 2E00 7072          dc.b      46,46,46,0
                    7073   @m68kde~1_87:
00004916  0D0A 4B69 7074          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
0000491A  6C6C 2041 
0000491E  6C6C 2042 
00004922  72        
00004923  6561 6B20 7075          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004927  506F 696E 
0000492B  7473 2E2E 
0000492F  2E        
00004930  2879 2F6E 7076          dc.b      40,121,47,110,41,63,0
00004934  293F 00   
                    7077   @m68kde~1_88:
00004938  0D0A 4B69 7078          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
0000493C  6C6C 2041 
00004940  6C6C 2057 
00004944  61        
00004945  7463 6820 7079          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004949  506F 696E 
0000494D  7473 2E2E 
00004951  2E        
00004952  2879 2F6E 7080          dc.b      40,121,47,110,41,63,0
00004956  293F 00   
                    7081   @m68kde~1_89:
0000495A  0D0A 2D2D 7082          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000495E  2D2D 2D2D 
00004962  2D2D 2D2D 
00004966  2D2D 2D   
00004969  2D2D 2D2D 7083          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000496D  2D2D 2D2D 
00004971  2D2D 2D2D 
00004975  2D2D 2D   
00004978  2D2D 2D2D 7084          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000497C  2D2D 2D2D 
00004980  2D2D 2D2D 
00004984  2D2D 2D   
00004987  2D2D 2D2D 7085          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000498B  2D2D 2D2D 
0000498F  2D2D 2D2D 
00004993  2D2D 2D   
00004996  2D2D 2D2D 7086          dc.b      45,45,45,45,45,45,0
0000499A  2D2D 00   
                    7087   @m68kde~1_90:
0000499E  0D0A 2020 7088          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000049A2  4465 6275 
000049A6  6767 6572 
000049AA  20        
000049AB  436F 6D6D 7089          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
000049AF  616E 6420 
000049B3  5375 6D6D 
000049B7  6172 7900 7090          dc.b      97,114,121,0
                    7091   @m68kde~1_91:
000049BC  0D0A 2020 7092          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
000049C0  2E28 7265 
000049C4  6729 2020 
000049C8  2020      
000049CA  2020 202D 7093          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
000049CE  2043 6861 
000049D2  6E67 6520 
000049D6  5265      
000049D8  6769 7374 7094          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
000049DC  6572 733A 
000049E0  2065 2E67 
000049E4  2041 302D 7095          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
000049E8  4137 2C44 
000049EC  302D 4437 
000049F0  2C50 43   
000049F3  2C53 5350 7096          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
000049F7  2C55 5350 
000049FB  2C53 5200 
                    7097   @m68kde~1_92:
00004A00  0D0A 2020 7098          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004A04  4244 2F42 
00004A08  532F 4243 
00004A0C  2F42 4B   
00004A0F  2020 2D20 7099          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004A13  4272 6561 
00004A17  6B20 506F 
00004A1B  69        
00004A1C  6E74 3A20 7100          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004A20  4469 7370 
00004A24  6C61 792F 
00004A28  53        
00004A29  6574 2F43 7101          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004A2D  6C65 6172 
00004A31  2F4B 696C 
00004A35  6C        
00004A36  00        7102          dc.b      0
                    7103   @m68kde~1_93:
00004A38  0D0A 2020 7104          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004A3C  4320 2020 
00004A40  2020 2020 
00004A44  2020 20   
00004A47  2020 2D20 7105          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004A4B  436F 7079 
00004A4F  2050 726F 
00004A53  67        
00004A54  7261 6D20 7106          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004A58  6672 6F6D 
00004A5C  2046 6C61 
00004A60  73        
00004A61  6820 746F 7107          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004A65  204D 6169 
00004A69  6E20 4D65 
00004A6D  6D        
00004A6E  6F72 7900 7108          dc.b      111,114,121,0
                    7109   @m68kde~1_94:
00004A72  0D0A 2020 7110          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004A76  4420 2020 
00004A7A  2020 2020 
00004A7E  2020 20   
00004A81  2020 2D20 7111          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004A85  4475 6D70 
00004A89  204D 656D 
00004A8D  6F        
00004A8E  7279 2043 7112          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004A92  6F6E 7465 
00004A96  6E74 7320 
00004A9A  746F 2053 7113          dc.b      116,111,32,83,99,114,101,101,110,0
00004A9E  6372 6565 
00004AA2  6E00      
                    7114   @m68kde~1_95:
00004AA4  0D0A 2020 7115          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004AA8  4520 2020 
00004AAC  2020 2020 
00004AB0  2020 20   
00004AB3  2020 2D20 7116          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004AB7  456E 7465 
00004ABB  7220 5374 
00004ABF  72        
00004AC0  696E 6720 7117          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004AC4  696E 746F 
00004AC8  204D 656D 
00004ACC  6F72 7900 7118          dc.b      111,114,121,0
                    7119   @m68kde~1_96:
00004AD0  0D0A 2020 7120          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004AD4  4620 2020 
00004AD8  2020 2020 
00004ADC  2020 20   
00004ADF  2020 2D20 7121          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004AE3  4669 6C6C 
00004AE7  204D 656D 
00004AEB  6F        
00004AEC  7279 2077 7122          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004AF0  6974 6820 
00004AF4  4461 7461 
00004AF8  00        
                    7123   @m68kde~1_97:
00004AFA  0D0A 2020 7124          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004AFE  4720 2020 
00004B02  2020 2020 
00004B06  2020 20   
00004B09  2020 2D20 7125          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004B0D  476F 2050 
00004B11  726F 6772 
00004B15  61        
00004B16  6D20 5374 7126          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004B1A  6172 7469 
00004B1E  6E67 2061 
00004B22  74        
00004B23  2041 6464 7127          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004B27  7265 7373 
00004B2B  3A20 2425 
00004B2F  30        
00004B30  3858 00   7128          dc.b      56,88,0
                    7129   @m68kde~1_98:
00004B34  0D0A 2020 7130          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004B38  4C20 2020 
00004B3C  2020 2020 
00004B40  2020 20   
00004B43  2020 2D20 7131          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004B47  4C6F 6164 
00004B4B  2050 726F 
00004B4F  67        
00004B50  7261 6D20 7132          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004B54  282E 4845 
00004B58  5820 6669 
00004B5C  6C        
00004B5D  6529 2066 7133          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004B61  726F 6D20 
00004B65  4C61 7074 
00004B69  6F        
00004B6A  7000      7134          dc.b      112,0
                    7135   @m68kde~1_99:
00004B6C  0D0A 2020 7136          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004B70  4D20 2020 
00004B74  2020 2020 
00004B78  2020 20   
00004B7B  2020 2D20 7137          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004B7F  4D65 6D6F 
00004B83  7279 2045 
00004B87  78        
00004B88  616D 696E 7138          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004B8C  6520 616E 
00004B90  6420 4368 
00004B94  61        
00004B95  6E67 6500 7139          dc.b      110,103,101,0
                    7140   @m68kde~1_100:
00004B9A  0D0A 2020 7141          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004B9E  5020 2020 
00004BA2  2020 2020 
00004BA6  2020 20   
00004BA9  2020 2D20 7142          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004BAD  5072 6F67 
00004BB1  7261 6D20 
00004BB5  46        
00004BB6  6C61 7368 7143          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004BBA  204D 656D 
00004BBE  6F72 7920 
00004BC2  7769 7468 7144          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004BC6  2055 7365 
00004BCA  7220 5072 
00004BCE  6F67 7261 7145          dc.b      111,103,114,97,109,0
00004BD2  6D00      
                    7146   @m68kde~1_101:
00004BD4  0D0A 2020 7147          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004BD8  5220 2020 
00004BDC  2020 2020 
00004BE0  2020 20   
00004BE3  2020 2D20 7148          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004BE7  4469 7370 
00004BEB  6C61 7920 
00004BEF  36        
00004BF0  3830 3030 7149          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004BF4  2052 6567 
00004BF8  6973 7465 
00004BFC  72        
00004BFD  7300      7150          dc.b      115,0
                    7151   @m68kde~1_102:
00004C00  0D0A 2020 7152          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004C04  5320 2020 
00004C08  2020 2020 
00004C0C  2020 20   
00004C0F  2020 2D20 7153          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004C13  546F 6767 
00004C17  6C65 204F 
00004C1B  4E        
00004C1C  2F4F 4646 7154          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004C20  2053 696E 
00004C24  676C 6520 
00004C28  53        
00004C29  7465 7020 7155          dc.b      116,101,112,32,77,111,100,101,0
00004C2D  4D6F 6465 
00004C31  00        
                    7156   @m68kde~1_103:
00004C32  0D0A 2020 7157          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004C36  544D 2020 
00004C3A  2020 2020 
00004C3E  2020 20   
00004C41  2020 2D20 7158          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004C45  5465 7374 
00004C49  204D 656D 
00004C4D  6F        
00004C4E  7279 00   7159          dc.b      114,121,0
                    7160   @m68kde~1_104:
00004C52  0D0A 2020 7161          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004C56  5453 2020 
00004C5A  2020 2020 
00004C5E  2020 20   
00004C61  2020 2D20 7162          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004C65  5465 7374 
00004C69  2053 7769 
00004C6D  74        
00004C6E  6368 6573 7163          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004C72  3A20 5357 
00004C76  372D 3000 
                    7164   @m68kde~1_105:
00004C7A  0D0A 2020 7165          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004C7E  5444 2020 
00004C82  2020 2020 
00004C86  2020 20   
00004C89  2020 2D20 7166          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004C8D  5465 7374 
00004C91  2044 6973 
00004C95  70        
00004C96  6C61 7973 7167          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004C9A  3A20 4C45 
00004C9E  4473 2061 
00004CA2  6E        
00004CA3  6420 372D 7168          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004CA7  5365 676D 
00004CAB  656E 7400 
                    7169   @m68kde~1_106:
00004CB0  0D0A 2020 7170          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004CB4  5744 2F57 
00004CB8  532F 5743 
00004CBC  2F57 4B   
00004CBF  2020 2D20 7171          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004CC3  5761 7463 
00004CC7  6820 506F 
00004CCB  696E      
00004CCD  743A 2044 7172          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004CD1  6973 706C 
00004CD5  6179 2F53 
00004CD9  65        
00004CDA  742F 436C 7173          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004CDE  6561 722F 
00004CE2  4B69 6C6C 
00004CE6  00        
                    7174   @m68kde~1_107:
00004CE8  0D0A 2300 7175          dc.b      13,10,35,0
                    7176   @m68kde~1_108:
00004CEC  0D0A 5072 7177          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004CF0  6F67 7261 
00004CF4  6D20 5275 
00004CF8  6E        
00004CF9  6E69 6E67 7178          dc.b      110,105,110,103,46,46,46,46,46,0
00004CFD  2E2E 2E2E 
00004D01  2E00      
                    7179   @m68kde~1_109:
00004D04  0D0A 5072 7180          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004D08  6573 7320 
00004D0C  3C52 4553 
00004D10  4554      
00004D12  3E20 6275 7181          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004D16  7474 6F6E 
00004D1A  203C 4B65 
00004D1E  79        
00004D1F  303E 206F 7182          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004D23  6E20 4445 
00004D27  3120 746F 
00004D2B  2073      
00004D2D  746F 7000 7183          dc.b      116,111,112,0
                    7184   @m68kde~1_110:
00004D32  0D0A 4572 7185          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004D36  726F 723A 
00004D3A  2050 7265 
00004D3E  73        
00004D3F  7320 2747 7186          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004D43  2720 6669 
00004D47  7273 7420 
00004D4B  74        
00004D4C  6F20 7374 7187          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004D50  6172 7420 
00004D54  7072 6F67 
00004D58  7261 6D00 7188          dc.b      114,97,109,0
                    7189   @m68kde~1_111:
00004D5C  0D0A 5369 7190          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004D60  6E67 6C65 
00004D64  2053 7465 
00004D68  70        
00004D69  2020 3A5B 7191          dc.b      32,32,58,91,79,78,93,0
00004D6D  4F4E 5D00 
                    7192   @m68kde~1_112:
00004D72  0D0A 5072 7193          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004D76  6573 7320 
00004D7A  2747 2720 
00004D7E  74        
00004D7F  6F20 5472 7194          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004D83  6163 6520 
00004D87  5072 6F67 
00004D8B  72        
00004D8C  616D 2066 7195          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004D90  726F 6D20 
00004D94  6164 6472 
00004D98  6573 7320 7196          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004D9C  2425 582E 
00004DA0  2E2E 2E2E 
00004DA4  00        
                    7197   @m68kde~1_113:
00004DA6  0D0A 5075 7198          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004DAA  7368 203C 
00004DAE  5245 5345 
00004DB2  5420      
00004DB4  4275 7474 7199          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00004DB8  6F6E 3E20 
00004DBC  746F 2053 
00004DC0  74        
00004DC1  6F70 2E2E 7200          dc.b      111,112,46,46,46,46,46,0
00004DC5  2E2E 2E00 
                    7201   @m68kde~1_114:
00004DCA  0D0A 5369 7202          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004DCE  6E67 6C65 
00004DD2  2053 7465 
00004DD6  70        
00004DD7  203A 205B 7203          dc.b      32,58,32,91,79,70,70,93,0
00004DDB  4F46 465D 
00004DDF  00        
                    7204   @m68kde~1_115:
00004DE0  0D0A 4272 7205          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004DE4  6561 6B20 
00004DE8  506F 696E 
00004DEC  74        
00004DED  7320 3A5B 7206          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004DF1  456E 6162 
00004DF5  6C65 645D 
00004DF9  00        
                    7207   @m68kde~1_116:
00004DFA  0D0A 5072 7208          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004DFE  6573 7320 
00004E02  3C45 5343 
00004E06  3E20      
00004E08  746F 2052 7209          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004E0C  6573 756D 
00004E10  6520 5573 
00004E14  6572 2050 7210          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004E18  726F 6772 
00004E1C  616D 2E2E 
00004E20  2E        
00004E21  2E2E 00   7211          dc.b      46,46,0
                    7212   @m68kde~1_117:
00004E24  0D0A 5369 7213          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004E28  6E67 6C65 
00004E2C  2053 7465 
00004E30  70        
00004E31  2020 3A5B 7214          dc.b      32,32,58,91,79,70,70,93,0
00004E35  4F46 465D 
00004E39  00        
                    7215   @m68kde~1_118:
00004E3A  0D0A 0D0A 7216          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004E3E  5072 6F67 
00004E42  7261 6D20 
00004E46  41        
00004E47  424F 5254 7217          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004E4B  2021 2121 
00004E4F  2121 210D 
00004E53  0A00      
                    7218   @m68kde~1_119:
00004E56  2573 0D0A 7219          dc.b      37,115,13,10,0
00004E5A  00        
                    7220   @m68kde~1_120:
00004E5C  0D0A 0D0A 7221          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004E60  5072 6F67 
00004E64  7261 6D20 
00004E68  41        
00004E69  424F 5254 7222          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004E6D  2021 2121 
00004E71  2121 00   
                    7223   @m68kde~1_121:
00004E74  0D0A 556E 7224          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004E78  6861 6E64 
00004E7C  6C65 6420 
00004E80  49        
00004E81  6E74 6572 7225          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004E85  7275 7074 
00004E89  3A20 4952 
00004E8D  5125 6420 7226          dc.b      81,37,100,32,33,33,33,33,33,0
00004E91  2121 2121 
00004E95  2100      
                    7227   @m68kde~1_122:
00004E98  4144 4452 7228          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004E9C  4553 5320 
00004EA0  4552 524F 
00004EA4  523A 20   
00004EA7  3136 206F 7229          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004EAB  7220 3332 
00004EAF  2042 6974 
00004EB3  2054      
00004EB5  7261 6E73 7230          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004EB9  6665 7220 
00004EBD  746F 2F66 
00004EC1  726F 6D20 7231          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004EC5  616E 204F 
00004EC9  4444 2041 
00004ECD  64        
00004ECE  6472 6573 7232          dc.b      100,114,101,115,115,46,46,46,46,0
00004ED2  732E 2E2E 
00004ED6  2E00      
                    7233   @m68kde~1_123:
00004ED8  556E 6861 7234          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004EDC  6E64 6C65 
00004EE0  6420 5472 
00004EE4  6170 2021 7235          dc.b      97,112,32,33,33,33,33,33,0
00004EE8  2121 2121 
00004EEC  00        
                    7236   @m68kde~1_124:
00004EEE  4255 5320 7237          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004EF2  4572 726F 
00004EF6  7221 00   
                    7238   @m68kde~1_125:
00004EFA  4144 4452 7239          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004EFE  4553 5320 
00004F02  4572 726F 
00004F06  7221      
00004F08  00        7240          dc.b      0
                    7241   @m68kde~1_126:
00004F0A  494C 4C45 7242          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004F0E  4741 4C20 
00004F12  494E 5354 
00004F16  5255 43   
00004F19  5449 4F4E 7243          dc.b      84,73,79,78,0
00004F1D  00        
                    7244   @m68kde~1_127:
00004F1E  4449 5649 7245          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004F22  4445 2042 
00004F26  5920 5A45 
00004F2A  524F 00   
                    7246   @m68kde~1_128:
00004F2E  2743 484B 7247          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004F32  2720 494E 
00004F36  5354 5255 
00004F3A  4354 49   
00004F3D  4F4E 00   7248          dc.b      79,78,0
                    7249   @m68kde~1_129:
00004F40  5452 4150 7250          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004F44  5620 494E 
00004F48  5354 5255 
00004F4C  4354 49   
00004F4F  4F4E 00   7251          dc.b      79,78,0
                    7252   @m68kde~1_130:
00004F52  5052 4956 7253          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004F56  494C 4547 
00004F5A  4520 5649 
00004F5E  4F4C 41   
00004F61  5449 4F4E 7254          dc.b      84,73,79,78,0
00004F65  00        
                    7255   @m68kde~1_131:
00004F66  554E 494E 7256          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004F6A  4954 4941 
00004F6E  4C49 5345 
00004F72  4420 49   
00004F75  5251 00   7257          dc.b      82,81,0
                    7258   @m68kde~1_132:
00004F78  5350 5552 7259          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004F7C  494F 5553 
00004F80  2049 5251 
00004F84  00        
                    7260   @m68kde~1_133:
00004F86  0D0A 5374 7261          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004F8A  6172 7420 
00004F8E  4164 6472 
00004F92  65        
00004F93  7373 2069 7262          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004F97  6E20 4D65 
00004F9B  6D6F 7279 
00004F9F  3A20 00   7263          dc.b      58,32,0
                    7264   @m68kde~1_134:
00004FA2  0D0A 456E 7265          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004FA6  7465 7220 
00004FAA  5374 7269 
00004FAE  6E        
00004FAF  6720 2845 7266          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004FB3  5343 2074 
00004FB7  6F20 656E 
00004FBB  64        
00004FBC  2920 3A00 7267          dc.b      41,32,58,0
                    7268   @m68kde~1_135:
00004FC0  456E 7465 7269          dc.b      69,110,116,101,114,32,119,104,97,116,32,115
00004FC4  7220 7768 
00004FC8  6174 2073 
00004FCC  697A 6520 7270          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
00004FD0  6F66 206D 
00004FD4  656D 6F72 
00004FD8  7920 796F 7271          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
00004FDC  7520 7761 
00004FE0  6E74 2074 
00004FE4  6F20 7265 7272          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00004FE8  6164 2F77 
00004FEC  7269 7465 
00004FF0  0A20 4279 7273          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
00004FF4  7465 203D 
00004FF8  2030 0A20 
00004FFC  576F      
00004FFE  7264 203D 7274          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
00005002  2031 0A20 
00005006  4C6F 6E67 
0000500A  20        
0000500B  576F 7264 7275          dc.b      87,111,114,100,32,61,32,50,10,0
0000500F  203D 2032 
00005013  0A00      
                    7276   @m68kde~1_136:
00005016  456E 7465 7277          dc.b      69,110,116,101,114,32,119,104,105,99,104,32
0000501A  7220 7768 
0000501E  6963 6820 
00005022  6461 7461 7278          dc.b      100,97,116,97,32,112,97,116,116,101,114,110
00005026  2070 6174 
0000502A  7465 726E 
0000502E  2079 6F75 7279          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005032  2077 616E 
00005036  7420 746F 
0000503A  2077 7269 7280          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000503E  7465 2069 
00005042  6E74 6F20 
00005046  6D65 6D6F 7281          dc.b      109,101,109,111,114,121,10,32,48,120,65,49,32
0000504A  7279 0A20 
0000504E  3078 4131 
00005052  20        
00005053  3D20 300A 7282          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
00005057  2030 7842 
0000505B  3220 3D20 
0000505F  310A 20   
00005062  3078 4333 7283          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
00005066  203D 2032 
0000506A  0A20 3078 
0000506E  4434      
00005070  203D 2033 7284          dc.b      32,61,32,51,10,0
00005074  0A00      
                    7285   @m68kde~1_137:
00005076  456E 7465 7286          dc.b      69,110,116,101,114,32,119,104,105,99,104,32
0000507A  7220 7768 
0000507E  6963 6820 
00005082  6461 7461 7287          dc.b      100,97,116,97,32,112,97,116,116,101,114,110
00005086  2070 6174 
0000508A  7465 726E 
0000508E  2079 6F75 7288          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005092  2077 616E 
00005096  7420 746F 
0000509A  2077 7269 7289          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000509E  7465 2069 
000050A2  6E74 6F20 
000050A6  6D65 6D6F 7290          dc.b      109,101,109,111,114,121,10,32,48,120,65,66,67
000050AA  7279 0A20 
000050AE  3078 4142 
000050B2  43        
000050B3  4420 3D20 7291          dc.b      68,32,61,32,48,10,32,48,120,49,50,51,52,32,61
000050B7  300A 2030 
000050BB  7831 3233 
000050BF  3420 3D   
000050C2  2031 0A20 7292          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
000050C6  3078 4131 
000050CA  4232 203D 
000050CE  2032 0A   
000050D1  2030 7843 7293          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
000050D5  3344 3420 
000050D9  3D20 330A 
000050DD  00        
                    7294   @m68kde~1_138:
000050DE  2564 00   7295          dc.b      37,100,0
                    7296   @m68kde~1_139:
000050E2  456E 7465 7297          dc.b      69,110,116,101,114,32,119,104,105,99,104,32
000050E6  7220 7768 
000050EA  6963 6820 
000050EE  6461 7461 7298          dc.b      100,97,116,97,32,112,97,116,116,101,114,110
000050F2  2070 6174 
000050F6  7465 726E 
000050FA  2079 6F75 7299          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000050FE  2077 616E 
00005102  7420 746F 
00005106  2077 7269 7300          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000510A  7465 2069 
0000510E  6E74 6F20 
00005112  6D65 6D6F 7301          dc.b      109,101,109,111,114,121,10,32,48,120,65,66,67
00005116  7279 0A20 
0000511A  3078 4142 
0000511E  43        
0000511F  445F 3132 7302          dc.b      68,95,49,50,51,52,32,61,32,48,10,32,48,120,65
00005123  3334 203D 
00005127  2030 0A20 
0000512B  3078 41   
0000512E  4142 425F 7303          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
00005132  4343 4444 
00005136  203D 2031 
0000513A  0A20 30   
0000513D  7831 3132 7304          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
00005141  325F 3333 
00005145  3434 203D 
00005149  2032 0A   
0000514C  2030 7837 7305          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
00005150  3635 345F 
00005154  3332 3130 
00005158  203D 20   
0000515B  330A 00   7306          dc.b      51,10,0
                    7307   @m68kde~1_140:
0000515E  5072 6F76 7308          dc.b      80,114,111,118,105,100,101,32,83,116,97,114
00005162  6964 6520 
00005166  5374 6172 
0000516A  7420 4164 7309          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
0000516E  6472 6573 
00005172  7320 696E 
00005176  2068 6578 7310          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
0000517A  2028 646F 
0000517E  206E 6F74 
00005182  2075 7365 7311          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
00005186  2030 7820 
0000518A  7072 6566 
0000518E  6978 290A 7312          dc.b      105,120,41,10,48,120,0
00005192  3078 00   
                    7313   @m68kde~1_141:
00005196  2578 00   7314          dc.b      37,120,0
                    7315   @m68kde~1_142:
0000519A  5072 6F76 7316          dc.b      80,114,111,118,105,100,101,32,69,110,100,32
0000519E  6964 6520 
000051A2  456E 6420 
000051A6  4164 6472 7317          dc.b      65,100,100,114,101,115,115,32,105,110,32,104
000051AA  6573 7320 
000051AE  696E 2068 
000051B2  6578 2028 7318          dc.b      101,120,32,40,100,111,32,110,111,116,32,117
000051B6  646F 206E 
000051BA  6F74 2075 
000051BE  7365 2030 7319          dc.b      115,101,32,48,120,32,112,114,101,102,105,120
000051C2  7820 7072 
000051C6  6566 6978 
000051CA  290A 3078 7320          dc.b      41,10,48,120,0
000051CE  00        
                    7321   @m68kde~1_143:
000051D0  5374 6172 7322          dc.b      83,116,97,114,116,32,65,100,100,114,101,115
000051D4  7420 4164 
000051D8  6472 6573 
000051DC  7320 3078 7323          dc.b      115,32,48,120,37,48,56,120,10,0
000051E0  2530 3878 
000051E4  0A00      
                    7324   @m68kde~1_144:
000051E6  456E 6420 7325          dc.b      69,110,100,32,65,100,100,114,101,115,115,58
000051EA  4164 6472 
000051EE  6573 733A 
000051F2  2030 7825 7326          dc.b      32,48,120,37,48,56,120,10,0
000051F6  3038 780A 
000051FA  00        
                    7327   @m68kde~1_145:
000051FC  4552 524F 7328          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
00005200  522E 2E2E 
00005204  2056 616C 
00005208  7565      
0000520A  2077 7269 7329          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
0000520E  7474 656E 
00005212  2074 6F20 
00005216  6C6F 6361 7330          dc.b      108,111,99,97,116,105,111,110,32,48,120,37,120
0000521A  7469 6F6E 
0000521E  2030 7825 
00005222  78        
00005223  203D 3D20 7331          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00005227  3078 2578 
0000522B  2E20 5661 
0000522F  6C75      
00005231  6520 4578 7332          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
00005235  7065 6374 
00005239  6564 3A20 
0000523D  30        
0000523E  7825 7800 7333          dc.b      120,37,120,0
                    7334   @m68kde~1_146:
00005242  4164 6472 7335          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005246  6573 733A 
0000524A  2030 7825 
0000524E  78        
0000524F  2056 616C 7336          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
00005253  7565 3A20 
00005257  3078 2530 
0000525B  3258      
0000525D  0A00      7337          dc.b      10,0
                    7338   @m68kde~1_147:
00005260  4164 6472 7339          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005264  6573 733A 
00005268  2030 7825 
0000526C  78        
0000526D  2056 616C 7340          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
00005271  7565 3A20 
00005275  3078 2530 
00005279  3458      
0000527B  0A00      7341          dc.b      10,0
                    7342   @m68kde~1_148:
0000527E  4164 6472 7343          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005282  6573 733A 
00005286  2030 7825 
0000528A  78        
0000528B  2056 616C 7344          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
0000528F  7565 3A20 
00005293  3078 2530 
00005297  3858      
00005299  0A00      7345          dc.b      10,0
                    7346   @m68kde~1_149:
0000529C  4375 7272 7347          dc.b      67,117,114,114,101,110,116,32,65,100,100,114
000052A0  656E 7420 
000052A4  4164 6472 
000052A8  6573 733A 7348          dc.b      101,115,115,58,32,48,120,37,120,44,32,78,111
000052AC  2030 7825 
000052B0  782C 204E 
000052B4  6F        
000052B5  2072 6F6F 7349          dc.b      32,114,111,111,109,32,116,111,32,119,114,105
000052B9  6D20 746F 
000052BD  2077 7269 
000052C1  7465 2074 7350          dc.b      116,101,32,116,111,32,109,101,109,111,114,121
000052C5  6F20 6D65 
000052C9  6D6F 7279 
000052CD  2074 6F20 7351          dc.b      32,116,111,32,102,105,116,32,119,105,116,104
000052D1  6669 7420 
000052D5  7769 7468 
000052D9  696E 2065 7352          dc.b      105,110,32,101,110,100,32,97,100,100,114,101
000052DD  6E64 2061 
000052E1  6464 7265 
000052E5  7373 2030 7353          dc.b      115,115,32,48,120,37,120,0
000052E9  7825 7800 
                    7354   @m68kde~1_150:
000052EE  4445 312D 7355          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000052F2  3638 6B20 
000052F6  4275 6720 
000052FA  5631      
000052FC  2E37 3700 7356          dc.b      46,55,55,0
                    7357   @m68kde~1_151:
00005300  436F 7079 7358          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00005304  7269 6768 
00005308  7420 2843 
0000530C  2920 504A 7359          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00005310  2044 6176 
00005314  6965 7320 
00005318  3230      
0000531A  3136 00   7360          dc.b      49,54,0
                    7361   @m68kde~1_152:
0000531E  0D0A 5275 7362          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00005322  6E6E 696E 
00005326  672E 2E2E 
0000532A  2E        
0000532B  2E00      7363          dc.b      46,0
                    7364   @m68kde~1_153:
0000532E  5275 6E6E 7365          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005332  696E 672E 
00005336  2E2E 2E2E 
0000533A  00        
                    7366   @m68kde~1_154:
0000533C  4279 3A20 7367          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005340  504A 2044 
00005344  6176 6965 
00005348  73        
00005349  00        7368          dc.b      0
                    7369   @m68kde~1_155:
0000534A  0D0A 2573 7370          dc.b      13,10,37,115,0
0000534E  00        
                    7371   @m68kde~1_156:
00005350  4E61 6D65 7372          dc.b      78,97,109,101,115,58,10,32,90,97,99,104,97,114
00005354  733A 0A20 
00005358  5A61 6368 
0000535C  6172      
0000535E  6961 6820 7373          dc.b      105,97,104,32,74,111,115,101,112,104,58,32,52
00005362  4A6F 7365 
00005366  7068 3A20 
0000536A  34        
0000536B  3535 3030 7374          dc.b      53,53,48,48,48,53,53,32,10,32,85,109,97,105
0000536F  3035 3520 
00005373  0A20 556D 
00005377  6169      
00005379  7220 4D61 7375          dc.b      114,32,77,97,122,104,97,114,58,32,50,48,51,51
0000537D  7A68 6172 
00005381  3A20 3230 
00005385  3333      
00005387  3333 3038 7376          dc.b      51,51,48,56,10,0
0000538B  0A00      
                    7377          section   data
0000538E            7378                   align
          0000 538E 7379   DataStart       equ       *
                    7380   
                    7381   *********************************************************************************************************
                    7382   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7383   * to ram as part of the CStart routine in this file
                    7384   *********************************************************************************************************
                    7385   
                    7386   @vsscanf_bufx:
0000538E  0803 0546 7387          dc.l      @vsscanf_buf
                    7388   @vsscanf_1:
00005392  0A00      7389          dc.b      10,0
                    7390   __ctype:
00005394  0040 4040 7391          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005398  4040 4040 
0000539C  4040 5050 
000053A0  5050 50   
000053A3  4040 4040 7392          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000053A7  4040 4040 
000053AB  4040 4040 
000053AF  4040 40   
000053B2  4040 40D0 7393          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000053B6  A0A0 A0A0 
000053BA  A0A0 A0A0 
000053BE  A0A0 A0A0 7394          dc.b      160,160,160,160,160,160,160,140,140,140,140
000053C2  A0A0 A08C 
000053C6  8C8C 8C   
000053C9  8C8C 8C8C 7395          dc.b      140,140,140,140,140,140,160,160,160,160,160
000053CD  8C8C A0A0 
000053D1  A0A0 A0   
000053D4  A0A0 8A8A 7396          dc.b      160,160,138,138,138,138,138,138,130,130,130
000053D8  8A8A 8A8A 
000053DC  8282 82   
000053DF  8282 8282 7397          dc.b      130,130,130,130,130,130,130,130,130,130,130
000053E3  8282 8282 
000053E7  8282 82   
000053EA  8282 8282 7398          dc.b      130,130,130,130,130,130,160,160,160,160,160
000053EE  8282 A0A0 
000053F2  A0A0 A0   
000053F5  A089 8989 7399          dc.b      160,137,137,137,137,137,137,129,129,129,129
000053F9  8989 8981 
000053FD  8181 81   
00005400  8181 8181 7400          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005404  8181 8181 
00005408  8181 81   
0000540B  8181 8181 7401          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
0000540F  81A0 A0A0 
00005413  A040 0000 
00005417  00        
00005418  0000 0000 7402          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000541C  0000 0000 
00005420  0000 0000 
00005424  0000 0000 
00005428  0000 0000 
0000542C  0000      
0000542E  0000 0000 7403          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005432  0000 0000 
00005436  0000 0000 
0000543A  0000 0000 
0000543E  0000 0000 
00005442  0000      
00005444  0000 0000 7404          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005448  0000 0000 
0000544C  0000 0000 
00005450  0000 0000 
00005454  0000 0000 
00005458  0000      
0000545A  0000 0000 7405          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000545E  0000 0000 
00005462  0000 0000 
00005466  0000 0000 
0000546A  0000 0000 
0000546E  0000      
00005470  0000 0000 7406          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005474  0000 0000 
00005478  0000 0000 
0000547C  0000 0000 
00005480  0000 0000 
00005484  0000      
00005486  0000 0000 7407          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000548A  0000 0000 
0000548E  0000 0000 
00005492  0000 00   
                    7408   @itoa_1:
00005496  2D32 3134 7409          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0000549A  3734 3833 
0000549E  3634 3800 
                    7410          section   bss
000054A2            7411                   align
          0000 54A2 7412   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7413   
                    7414   *********************************************************************************************************
                    7415   * Section for Uninitialised Data held in ROM as constants
                    7416   *********************************************************************************************************
                    7417   
08030000            7418                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 7419   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7420   
                    7421   
08030000            7422   bss             org       bss
                    7423   
                    7424   *********************************************************************************************************
                    7425   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7426   * install the exception handler using the C function InstallExceptionHandler()
                    7427   *********************************************************************************************************
                    7428   
                    7429   
                    7430   
08030000            7431   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            7432   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            7433   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            7434   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            7435   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            7436   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            7437   VCheck           ds.l    1      ditto
0803001C            7438   VTrapV           ds.l    1      ditto
08030020            7439   VPrivilege       ds.l    1      ditto
08030024            7440   VTrace           ds.l    1
08030028            7441   VLine1010emul    ds.l    1
0803002C            7442   VLine1111emul    ds.l    1
08030030            7443   VUnassigned1     ds.l    1
08030034            7444   VUnassigned2     ds.l    1
08030038            7445   VUnassigned3     ds.l    1
0803003C            7446   VUninit_IRQ      ds.l    1
08030040            7447   VUnassigned4     ds.l    1
08030044            7448   VUnassigned5     ds.l    1
08030048            7449   VUnassigned6     ds.l    1
0803004C            7450   VUnassigned7     ds.l    1
08030050            7451   VUnassigned8     ds.l    1
08030054            7452   VUnassigned9     ds.l    1
08030058            7453   VUnassigned10    ds.l    1
0803005C            7454   VUnassigned11    ds.l    1
08030060            7455   VSpuriousIRQ     ds.l    1
                    7456   
                    7457   * Interrupt handlers Vector 25-31
08030064            7458   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            7459   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            7460   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            7461   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            7462   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            7463   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            7464   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7465   
                    7466   * Trap Handler vectors 32-47
08030080            7467   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            7468   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            7469   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            7470   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            7471   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            7472   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            7473   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            7474   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            7475   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            7476   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            7477   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            7478   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            7479   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            7480   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            7481   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            7482   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7483   
                    7484   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7485   
                    7486   ***********************************************************************************************************
                    7487   * Other Variables
                    7488   ***********************************************************************************************************
                    7489   *__DebugA5       ds.l    1
                    7490   *__UserA5        ds.l    1
                    7491   
                    7492   ***********************************************************************************************************
080300C0            7493   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            7494   __allocp:       ds.l    0       ; start of allocation units
080300C4            7495   __heap:         ds.l    0       ; pointers for malloc functions
                    7496   
                    7497   *__himem:       ds.l    himem            ; highest memory location + 1
                    7498   *__stklen:      ds.l    stklen           ; default stack size
                    7499   
                    7500   *********************************************************************************************************
                    7501   * Section for Heap
                    7502   *********************************************************************************************************
                    7503   
                    7504   _i:
080300C4            7505          ds.b      4
                    7506   _x:
080300C8            7507          ds.b      4
                    7508   _y:
080300CC            7509          ds.b      4
                    7510   _z:
080300D0            7511          ds.b      4
                    7512   _PortA_Count:
080300D4            7513          ds.b      4
                    7514   _Trace:
080300D8            7515          ds.b      4
                    7516   _GoFlag:
080300DC            7517          ds.b      4
                    7518   _Echo:
080300E0            7519          ds.b      4
                    7520   _d0:
080300E4            7521          ds.b      4
                    7522   _d1:
080300E8            7523          ds.b      4
                    7524   _d2:
080300EC            7525          ds.b      4
                    7526   _d3:
080300F0            7527          ds.b      4
                    7528   _d4:
080300F4            7529          ds.b      4
                    7530   _d5:
080300F8            7531          ds.b      4
                    7532   _d6:
080300FC            7533          ds.b      4
                    7534   _d7:
08030100            7535          ds.b      4
                    7536   _a0:
08030104            7537          ds.b      4
                    7538   _a1:
08030108            7539          ds.b      4
                    7540   _a2:
0803010C            7541          ds.b      4
                    7542   _a3:
08030110            7543          ds.b      4
                    7544   _a4:
08030114            7545          ds.b      4
                    7546   _a5:
08030118            7547          ds.b      4
                    7548   _a6:
0803011C            7549          ds.b      4
                    7550   _PC:
08030120            7551          ds.b      4
                    7552   _SSP:
08030124            7553          ds.b      4
                    7554   _USP:
08030128            7555          ds.b      4
                    7556   _SR:
0803012C            7557          ds.b      2
                    7558   _BreakPointAddress:
0803012E            7559          ds.b      32
                    7560   _BreakPointInstruction:
0803014E            7561          ds.b      16
                    7562   _BreakPointSetOrCleared:
0803015E            7563          ds.b      32
                    7564   _InstructionSize:
0803017E            7565          ds.b      4
                    7566   _WatchPointAddress:
08030182            7567          ds.b      32
                    7568   _WatchPointSetOrCleared:
080301A2            7569          ds.b      32
                    7570   _WatchPointString:
080301C2            7571          ds.b      800
                    7572   _TempString:
080304E2            7573          ds.b      100
                    7574   @vsscanf_buf:
08030546            7575          ds.b      80
                    7576          section   heap
08030596            7577                   align
          0803 0596 7578   bssEnd          equ *                   end of storage space for unitialised variables
                    7579   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0596 7580   heap   equ       *
08030596            7581                    align
          0000 0000

Assembly errors: 0
