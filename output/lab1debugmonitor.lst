680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 06 Feb 2025      Time: 15:09:07          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  28EE      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1F86      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3684      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  405A      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  405E      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4074      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  4076      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3684      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2C96      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  4078      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  40B2      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  40CA      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  40D2      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  40D8      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  405A      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3684      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  40DC      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  40B2      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  40F0      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  4106      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  411A      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3684      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  414A      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  2D90      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2BCA      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2C96      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  417A      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  41A0      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3684      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  41C2      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  41DE      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  4224      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  4236      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  2D02      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  4248      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /*******************************************************************
                    1547   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1548   ; ********************************************************************/
                    1549   ; void ProgramFlashChip(void)
                    1550   ; {
                    1551   _ProgramFlashChip:
000010C4  4E75      1552          rts
                    1553   ; //
                    1554   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1555   ; // TODO : then verify by reading it back and comparing to memory
                    1556   ; //
                    1557   ; }
                    1558   ; /*************************************************************************
                    1559   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1560   ; **************************************************************************/
                    1561   ; void LoadFromFlashChip(void)
                    1562   ; {
                    1563   _LoadFromFlashChip:
                    1564   ; printf("\r\nLoading Program From SPI Flash....") ;
000010C6  4879 0000 1565          pea       @m68kde~1_22.L
000010CA  427C      
000010CC  4EB9 0000 1566          jsr       _printf
000010D0  3684      
000010D2  584F      1567          addq.w    #4,A7
000010D4  4E75      1568          rts
                    1569   ; //
                    1570   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1571   ; //
                    1572   ; }
                    1573   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1574   ; // IMPORTANT
                    1575   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1576   ; // has to be done with an interrupt (IRQ Level 6)
                    1577   ; //
                    1578   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1579   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1580   ; //
                    1581   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1582   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1583   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1584   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1585   ; // program area
                    1586   ; //
                    1587   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1588   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1589   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1590   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1591   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1592   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1593   ; void DumpRegisters()
                    1594   ; {
                    1595   _DumpRegisters:
000010D6  48E7 3F3C 1596          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000010DA  45F9 0000 1597          lea       _putch.L,A2
000010DE  2C96      
000010E0  47F9 0000 1598          lea       _printf.L,A3
000010E4  3684      
000010E6  49F9 0B00 1599          lea       _SR.L,A4
000010EA  012C      
000010EC  4BF9 0B00 1600          lea       _WatchPointString.L,A5
000010F0  01C2      
                    1601   ; short i, x, j, k ;
                    1602   ; unsigned char c, *BytePointer;
                    1603   ; // buld up strings for displaying watchpoints
                    1604   ; for(x = 0; x < (short)(8); x++)
000010F2  4242      1605          clr.w     D2
                    1606   DumpRegisters_1:
000010F4  0C42 0008 1607          cmp.w     #8,D2
000010F8  6C00 01C6 1608          bge       DumpRegisters_3
                    1609   ; {
                    1610   ; if(WatchPointSetOrCleared[x] == 1)
000010FC  48C2      1611          ext.l     D2
000010FE  2002      1612          move.l    D2,D0
00001100  E588      1613          lsl.l     #2,D0
00001102  41F9 0B00 1614          lea       _WatchPointSetOrCleared.L,A0
00001106  01A2      
00001108  2030 0800 1615          move.l    0(A0,D0.L),D0
0000110C  0C80 0000 1616          cmp.l     #1,D0
00001110  0001      
00001112  6600 0186 1617          bne       DumpRegisters_4
                    1618   ; {
                    1619   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001116  48C2      1620          ext.l     D2
00001118  2202      1621          move.l    D2,D1
0000111A  E589      1622          lsl.l     #2,D1
0000111C  41F9 0B00 1623          lea       _WatchPointAddress.L,A0
00001120  0182      
00001122  2F30 1800 1624          move.l    0(A0,D1.L),-(A7)
00001126  4879 0000 1625          pea       @m68kde~1_23.L
0000112A  42A2      
0000112C  220D      1626          move.l    A5,D1
0000112E  48C2      1627          ext.l     D2
00001130  2F00      1628          move.l    D0,-(A7)
00001132  2002      1629          move.l    D2,D0
00001134  C1FC 0064 1630          muls      #100,D0
00001138  D280      1631          add.l     D0,D1
0000113A  201F      1632          move.l    (A7)+,D0
0000113C  2F01      1633          move.l    D1,-(A7)
0000113E  4EB9 0000 1634          jsr       _sprintf
00001142  2D2E      
00001144  DEFC 000C 1635          add.w     #12,A7
                    1636   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001148  48C2      1637          ext.l     D2
0000114A  2002      1638          move.l    D2,D0
0000114C  E588      1639          lsl.l     #2,D0
0000114E  41F9 0B00 1640          lea       _WatchPointAddress.L,A0
00001152  0182      
00001154  2A30 0800 1641          move.l    0(A0,D0.L),D5
                    1642   ; for(j = 0; j < (short)(16); j+=2)
00001158  4243      1643          clr.w     D3
                    1644   DumpRegisters_6:
0000115A  0C43 0010 1645          cmp.w     #16,D3
0000115E  6C00 0082 1646          bge       DumpRegisters_8
                    1647   ; {
                    1648   ; for(k = 0; k < (short)(2); k++)
00001162  4246      1649          clr.w     D6
                    1650   DumpRegisters_9:
00001164  0C46 0002 1651          cmp.w     #2,D6
00001168  6C00 0052 1652          bge       DumpRegisters_11
                    1653   ; {
                    1654   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000116C  2045      1655          move.l    D5,A0
0000116E  48C3      1656          ext.l     D3
00001170  2203      1657          move.l    D3,D1
00001172  48C6      1658          ext.l     D6
00001174  D286      1659          add.l     D6,D1
00001176  1230 1800 1660          move.b    0(A0,D1.L),D1
0000117A  C2BC 0000 1661          and.l     #255,D1
0000117E  00FF      
00001180  2F01      1662          move.l    D1,-(A7)
00001182  4879 0000 1663          pea       @m68kde~1_8.L
00001186  40D2      
00001188  4879 0B00 1664          pea       _TempString.L
0000118C  04E2      
0000118E  4EB9 0000 1665          jsr       _sprintf
00001192  2D2E      
00001194  DEFC 000C 1666          add.w     #12,A7
                    1667   ; strcat(WatchPointString[x], TempString) ;
00001198  4879 0B00 1668          pea       _TempString.L
0000119C  04E2      
0000119E  220D      1669          move.l    A5,D1
000011A0  48C2      1670          ext.l     D2
000011A2  2F00      1671          move.l    D0,-(A7)
000011A4  2002      1672          move.l    D2,D0
000011A6  C1FC 0064 1673          muls      #100,D0
000011AA  D280      1674          add.l     D0,D1
000011AC  201F      1675          move.l    (A7)+,D0
000011AE  2F01      1676          move.l    D1,-(A7)
000011B0  4EB9 0000 1677          jsr       _strcat
000011B4  2D7A      
000011B6  504F      1678          addq.w    #8,A7
000011B8  5246      1679          addq.w    #1,D6
000011BA  60A8      1680          bra       DumpRegisters_9
                    1681   DumpRegisters_11:
                    1682   ; }
                    1683   ; strcat(WatchPointString[x]," ") ;
000011BC  4879 0000 1684          pea       @m68kde~1_24.L
000011C0  42AA      
000011C2  220D      1685          move.l    A5,D1
000011C4  48C2      1686          ext.l     D2
000011C6  2F00      1687          move.l    D0,-(A7)
000011C8  2002      1688          move.l    D2,D0
000011CA  C1FC 0064 1689          muls      #100,D0
000011CE  D280      1690          add.l     D0,D1
000011D0  201F      1691          move.l    (A7)+,D0
000011D2  2F01      1692          move.l    D1,-(A7)
000011D4  4EB9 0000 1693          jsr       _strcat
000011D8  2D7A      
000011DA  504F      1694          addq.w    #8,A7
000011DC  5443      1695          addq.w    #2,D3
000011DE  6000 FF7A 1696          bra       DumpRegisters_6
                    1697   DumpRegisters_8:
                    1698   ; }
                    1699   ; strcat(WatchPointString[x], "  ") ;
000011E2  4879 0000 1700          pea       @m68kde~1_9.L
000011E6  40D8      
000011E8  220D      1701          move.l    A5,D1
000011EA  48C2      1702          ext.l     D2
000011EC  2F00      1703          move.l    D0,-(A7)
000011EE  2002      1704          move.l    D2,D0
000011F0  C1FC 0064 1705          muls      #100,D0
000011F4  D280      1706          add.l     D0,D1
000011F6  201F      1707          move.l    (A7)+,D0
000011F8  2F01      1708          move.l    D1,-(A7)
000011FA  4EB9 0000 1709          jsr       _strcat
000011FE  2D7A      
00001200  504F      1710          addq.w    #8,A7
                    1711   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001202  48C2      1712          ext.l     D2
00001204  2002      1713          move.l    D2,D0
00001206  E588      1714          lsl.l     #2,D0
00001208  41F9 0B00 1715          lea       _WatchPointAddress.L,A0
0000120C  0182      
0000120E  2A30 0800 1716          move.l    0(A0,D0.L),D5
                    1717   ; for(j = 0; j < (short)(16); j++)
00001212  4243      1718          clr.w     D3
                    1719   DumpRegisters_12:
00001214  0C43 0010 1720          cmp.w     #16,D3
00001218  6C00 007E 1721          bge       DumpRegisters_14
                    1722   ; {
                    1723   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000121C  2045      1724          move.l    D5,A0
0000121E  48C3      1725          ext.l     D3
00001220  1030 3800 1726          move.b    0(A0,D3.L),D0
00001224  C03C 007F 1727          and.b     #127,D0
00001228  1E00      1728          move.b    D0,D7
                    1729   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000122A  0C07 007F 1730          cmp.b     #127,D7
0000122E  6206      1731          bhi.s     DumpRegisters_17
00001230  0C07 0020 1732          cmp.b     #32,D7
00001234  6416      1733          bhs.s     DumpRegisters_15
                    1734   DumpRegisters_17:
                    1735   ; sprintf(TempString, ".") ;
00001236  4879 0000 1736          pea       @m68kde~1_25.L
0000123A  42AC      
0000123C  4879 0B00 1737          pea       _TempString.L
00001240  04E2      
00001242  4EB9 0000 1738          jsr       _sprintf
00001246  2D2E      
00001248  504F      1739          addq.w    #8,A7
0000124A  6026      1740          bra.s     DumpRegisters_16
                    1741   DumpRegisters_15:
                    1742   ; else
                    1743   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000124C  2045      1744          move.l    D5,A0
0000124E  48C3      1745          ext.l     D3
00001250  1230 3800 1746          move.b    0(A0,D3.L),D1
00001254  C2BC 0000 1747          and.l     #255,D1
00001258  00FF      
0000125A  2F01      1748          move.l    D1,-(A7)
0000125C  4879 0000 1749          pea       @m68kde~1_26.L
00001260  42AE      
00001262  4879 0B00 1750          pea       _TempString.L
00001266  04E2      
00001268  4EB9 0000 1751          jsr       _sprintf
0000126C  2D2E      
0000126E  DEFC 000C 1752          add.w     #12,A7
                    1753   DumpRegisters_16:
                    1754   ; strcat(WatchPointString[x], TempString) ;
00001272  4879 0B00 1755          pea       _TempString.L
00001276  04E2      
00001278  220D      1756          move.l    A5,D1
0000127A  48C2      1757          ext.l     D2
0000127C  2F00      1758          move.l    D0,-(A7)
0000127E  2002      1759          move.l    D2,D0
00001280  C1FC 0064 1760          muls      #100,D0
00001284  D280      1761          add.l     D0,D1
00001286  201F      1762          move.l    (A7)+,D0
00001288  2F01      1763          move.l    D1,-(A7)
0000128A  4EB9 0000 1764          jsr       _strcat
0000128E  2D7A      
00001290  504F      1765          addq.w    #8,A7
00001292  5243      1766          addq.w    #1,D3
00001294  6000 FF7E 1767          bra       DumpRegisters_12
                    1768   DumpRegisters_14:
00001298  6020      1769          bra.s     DumpRegisters_5
                    1770   DumpRegisters_4:
                    1771   ; }
                    1772   ; }
                    1773   ; else
                    1774   ; strcpy(WatchPointString[x], "") ;
0000129A  4879 0000 1775          pea       @m68kde~1_27.L
0000129E  42B2      
000012A0  220D      1776          move.l    A5,D1
000012A2  48C2      1777          ext.l     D2
000012A4  2F00      1778          move.l    D0,-(A7)
000012A6  2002      1779          move.l    D2,D0
000012A8  C1FC 0064 1780          muls      #100,D0
000012AC  D280      1781          add.l     D0,D1
000012AE  201F      1782          move.l    (A7)+,D0
000012B0  2F01      1783          move.l    D1,-(A7)
000012B2  4EB9 0000 1784          jsr       _strcpy
000012B6  2BA8      
000012B8  504F      1785          addq.w    #8,A7
                    1786   DumpRegisters_5:
000012BA  5242      1787          addq.w    #1,D2
000012BC  6000 FE36 1788          bra       DumpRegisters_1
                    1789   DumpRegisters_3:
                    1790   ; }
                    1791   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000012C0  2F39 0B00 1792          move.l    _a0.L,-(A7)
000012C4  0104      
000012C6  2F39 0B00 1793          move.l    _d0.L,-(A7)
000012CA  00E4      
000012CC  4879 0000 1794          pea       @m68kde~1_28.L
000012D0  42B4      
000012D2  4E93      1795          jsr       (A3)
000012D4  DEFC 000C 1796          add.w     #12,A7
                    1797   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000012D8  2F39 0B00 1798          move.l    _a1.L,-(A7)
000012DC  0108      
000012DE  2F39 0B00 1799          move.l    _d1.L,-(A7)
000012E2  00E8      
000012E4  4879 0000 1800          pea       @m68kde~1_29.L
000012E8  42D0      
000012EA  4E93      1801          jsr       (A3)
000012EC  DEFC 000C 1802          add.w     #12,A7
                    1803   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000012F0  2F39 0B00 1804          move.l    _a2.L,-(A7)
000012F4  010C      
000012F6  2F39 0B00 1805          move.l    _d2.L,-(A7)
000012FA  00EC      
000012FC  4879 0000 1806          pea       @m68kde~1_30.L
00001300  42EA      
00001302  4E93      1807          jsr       (A3)
00001304  DEFC 000C 1808          add.w     #12,A7
                    1809   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001308  2F39 0B00 1810          move.l    _a3.L,-(A7)
0000130C  0110      
0000130E  2F39 0B00 1811          move.l    _d3.L,-(A7)
00001312  00F0      
00001314  4879 0000 1812          pea       @m68kde~1_31.L
00001318  4304      
0000131A  4E93      1813          jsr       (A3)
0000131C  DEFC 000C 1814          add.w     #12,A7
                    1815   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001320  2F39 0B00 1816          move.l    _a4.L,-(A7)
00001324  0114      
00001326  2F39 0B00 1817          move.l    _d4.L,-(A7)
0000132A  00F4      
0000132C  4879 0000 1818          pea       @m68kde~1_32.L
00001330  431E      
00001332  4E93      1819          jsr       (A3)
00001334  DEFC 000C 1820          add.w     #12,A7
                    1821   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001338  2F39 0B00 1822          move.l    _a5.L,-(A7)
0000133C  0118      
0000133E  2F39 0B00 1823          move.l    _d5.L,-(A7)
00001342  00F8      
00001344  4879 0000 1824          pea       @m68kde~1_33.L
00001348  4338      
0000134A  4E93      1825          jsr       (A3)
0000134C  DEFC 000C 1826          add.w     #12,A7
                    1827   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001350  2F39 0B00 1828          move.l    _a6.L,-(A7)
00001354  011C      
00001356  2F39 0B00 1829          move.l    _d6.L,-(A7)
0000135A  00FC      
0000135C  4879 0000 1830          pea       @m68kde~1_34.L
00001360  4352      
00001362  4E93      1831          jsr       (A3)
00001364  DEFC 000C 1832          add.w     #12,A7
                    1833   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001368  3214      1834          move.w    (A4),D1
0000136A  C27C 2000 1835          and.w     #8192,D1
0000136E  0C41 2000 1836          cmp.w     #8192,D1
00001372  6608      1837          bne.s     DumpRegisters_18
00001374  2239 0B00 1838          move.l    _SSP.L,D1
00001378  0124      
0000137A  6006      1839          bra.s     DumpRegisters_19
                    1840   DumpRegisters_18:
0000137C  2239 0B00 1841          move.l    _USP.L,D1
00001380  0128      
                    1842   DumpRegisters_19:
00001382  2F01      1843          move.l    D1,-(A7)
00001384  2F39 0B00 1844          move.l    _d7.L,-(A7)
00001388  0100      
0000138A  4879 0000 1845          pea       @m68kde~1_35.L
0000138E  436C      
00001390  4E93      1846          jsr       (A3)
00001392  DEFC 000C 1847          add.w     #12,A7
                    1848   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001396  2F39 0B00 1849          move.l    _USP.L,-(A7)
0000139A  0128      
0000139C  4879 0000 1850          pea       @m68kde~1_36.L
000013A0  4386      
000013A2  4E93      1851          jsr       (A3)
000013A4  504F      1852          addq.w    #8,A7
                    1853   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013A6  2F39 0B00 1854          move.l    _SSP.L,-(A7)
000013AA  0124      
000013AC  4879 0000 1855          pea       @m68kde~1_37.L
000013B0  43A4      
000013B2  4E93      1856          jsr       (A3)
000013B4  504F      1857          addq.w    #8,A7
                    1858   ; printf("\r\n SR = $%04X   ",SR) ;
000013B6  3214      1859          move.w    (A4),D1
000013B8  C2BC 0000 1860          and.l     #65535,D1
000013BC  FFFF      
000013BE  2F01      1861          move.l    D1,-(A7)
000013C0  4879 0000 1862          pea       @m68kde~1_38.L
000013C4  43C6      
000013C6  4E93      1863          jsr       (A3)
000013C8  504F      1864          addq.w    #8,A7
                    1865   ; // display the status word in characters etc.
                    1866   ; printf("   [") ;
000013CA  4879 0000 1867          pea       @m68kde~1_39.L
000013CE  43D8      
000013D0  4E93      1868          jsr       (A3)
000013D2  584F      1869          addq.w    #4,A7
                    1870   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000013D4  3014      1871          move.w    (A4),D0
000013D6  C07C 8000 1872          and.w     #32768,D0
000013DA  0C40 8000 1873          cmp.w     #32768,D0
000013DE  660A      1874          bne.s     DumpRegisters_20
000013E0  4878 0054 1875          pea       84
000013E4  4E92      1876          jsr       (A2)
000013E6  584F      1877          addq.w    #4,A7
000013E8  6008      1878          bra.s     DumpRegisters_21
                    1879   DumpRegisters_20:
000013EA  4878 002D 1880          pea       45
000013EE  4E92      1881          jsr       (A2)
000013F0  584F      1882          addq.w    #4,A7
                    1883   DumpRegisters_21:
                    1884   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000013F2  3014      1885          move.w    (A4),D0
000013F4  C07C 2000 1886          and.w     #8192,D0
000013F8  0C40 2000 1887          cmp.w     #8192,D0
000013FC  660A      1888          bne.s     DumpRegisters_22
000013FE  4878 0053 1889          pea       83
00001402  4E92      1890          jsr       (A2)
00001404  584F      1891          addq.w    #4,A7
00001406  6008      1892          bra.s     DumpRegisters_23
                    1893   DumpRegisters_22:
00001408  4878 0055 1894          pea       85
0000140C  4E92      1895          jsr       (A2)
0000140E  584F      1896          addq.w    #4,A7
                    1897   DumpRegisters_23:
                    1898   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001410  3014      1899          move.w    (A4),D0
00001412  C07C 0400 1900          and.w     #1024,D0
00001416  0C40 0400 1901          cmp.w     #1024,D0
0000141A  660A      1902          bne.s     DumpRegisters_24
0000141C  4878 0031 1903          pea       49
00001420  4E92      1904          jsr       (A2)
00001422  584F      1905          addq.w    #4,A7
00001424  6008      1906          bra.s     DumpRegisters_25
                    1907   DumpRegisters_24:
00001426  4878 0030 1908          pea       48
0000142A  4E92      1909          jsr       (A2)
0000142C  584F      1910          addq.w    #4,A7
                    1911   DumpRegisters_25:
                    1912   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000142E  3014      1913          move.w    (A4),D0
00001430  C07C 0200 1914          and.w     #512,D0
00001434  0C40 0200 1915          cmp.w     #512,D0
00001438  660A      1916          bne.s     DumpRegisters_26
0000143A  4878 0031 1917          pea       49
0000143E  4E92      1918          jsr       (A2)
00001440  584F      1919          addq.w    #4,A7
00001442  6008      1920          bra.s     DumpRegisters_27
                    1921   DumpRegisters_26:
00001444  4878 0030 1922          pea       48
00001448  4E92      1923          jsr       (A2)
0000144A  584F      1924          addq.w    #4,A7
                    1925   DumpRegisters_27:
                    1926   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000144C  3014      1927          move.w    (A4),D0
0000144E  C07C 0100 1928          and.w     #256,D0
00001452  0C40 0100 1929          cmp.w     #256,D0
00001456  660A      1930          bne.s     DumpRegisters_28
00001458  4878 0031 1931          pea       49
0000145C  4E92      1932          jsr       (A2)
0000145E  584F      1933          addq.w    #4,A7
00001460  6008      1934          bra.s     DumpRegisters_29
                    1935   DumpRegisters_28:
00001462  4878 0030 1936          pea       48
00001466  4E92      1937          jsr       (A2)
00001468  584F      1938          addq.w    #4,A7
                    1939   DumpRegisters_29:
                    1940   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000146A  3014      1941          move.w    (A4),D0
0000146C  C07C 0010 1942          and.w     #16,D0
00001470  0C40 0010 1943          cmp.w     #16,D0
00001474  660A      1944          bne.s     DumpRegisters_30
00001476  4878 0058 1945          pea       88
0000147A  4E92      1946          jsr       (A2)
0000147C  584F      1947          addq.w    #4,A7
0000147E  6008      1948          bra.s     DumpRegisters_31
                    1949   DumpRegisters_30:
00001480  4878 002D 1950          pea       45
00001484  4E92      1951          jsr       (A2)
00001486  584F      1952          addq.w    #4,A7
                    1953   DumpRegisters_31:
                    1954   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001488  3014      1955          move.w    (A4),D0
0000148A  C07C 0008 1956          and.w     #8,D0
0000148E  0C40 0008 1957          cmp.w     #8,D0
00001492  660A      1958          bne.s     DumpRegisters_32
00001494  4878 004E 1959          pea       78
00001498  4E92      1960          jsr       (A2)
0000149A  584F      1961          addq.w    #4,A7
0000149C  6008      1962          bra.s     DumpRegisters_33
                    1963   DumpRegisters_32:
0000149E  4878 002D 1964          pea       45
000014A2  4E92      1965          jsr       (A2)
000014A4  584F      1966          addq.w    #4,A7
                    1967   DumpRegisters_33:
                    1968   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014A6  3014      1969          move.w    (A4),D0
000014A8  C07C 0004 1970          and.w     #4,D0
000014AC  0C40 0004 1971          cmp.w     #4,D0
000014B0  660A      1972          bne.s     DumpRegisters_34
000014B2  4878 005A 1973          pea       90
000014B6  4E92      1974          jsr       (A2)
000014B8  584F      1975          addq.w    #4,A7
000014BA  6008      1976          bra.s     DumpRegisters_35
                    1977   DumpRegisters_34:
000014BC  4878 002D 1978          pea       45
000014C0  4E92      1979          jsr       (A2)
000014C2  584F      1980          addq.w    #4,A7
                    1981   DumpRegisters_35:
                    1982   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000014C4  3014      1983          move.w    (A4),D0
000014C6  C07C 0002 1984          and.w     #2,D0
000014CA  0C40 0002 1985          cmp.w     #2,D0
000014CE  660A      1986          bne.s     DumpRegisters_36
000014D0  4878 0056 1987          pea       86
000014D4  4E92      1988          jsr       (A2)
000014D6  584F      1989          addq.w    #4,A7
000014D8  6008      1990          bra.s     DumpRegisters_37
                    1991   DumpRegisters_36:
000014DA  4878 002D 1992          pea       45
000014DE  4E92      1993          jsr       (A2)
000014E0  584F      1994          addq.w    #4,A7
                    1995   DumpRegisters_37:
                    1996   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000014E2  3014      1997          move.w    (A4),D0
000014E4  C07C 0001 1998          and.w     #1,D0
000014E8  0C40 0001 1999          cmp.w     #1,D0
000014EC  660A      2000          bne.s     DumpRegisters_38
000014EE  4878 0043 2001          pea       67
000014F2  4E92      2002          jsr       (A2)
000014F4  584F      2003          addq.w    #4,A7
000014F6  6008      2004          bra.s     DumpRegisters_39
                    2005   DumpRegisters_38:
000014F8  4878 002D 2006          pea       45
000014FC  4E92      2007          jsr       (A2)
000014FE  584F      2008          addq.w    #4,A7
                    2009   DumpRegisters_39:
                    2010   ; putchar(']') ;
00001500  4878 005D 2011          pea       93
00001504  4E92      2012          jsr       (A2)
00001506  584F      2013          addq.w    #4,A7
                    2014   ; printf("\r\n PC = $%08X  ", PC) ;
00001508  2F39 0B00 2015          move.l    _PC.L,-(A7)
0000150C  0120      
0000150E  4879 0000 2016          pea       @m68kde~1_40.L
00001512  43DE      
00001514  4E93      2017          jsr       (A3)
00001516  504F      2018          addq.w    #8,A7
                    2019   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001518  2039 0B00 2020          move.l    _PC.L,D0
0000151C  0120      
0000151E  2040      2021          move.l    D0,A0
00001520  3010      2022          move.w    (A0),D0
00001522  0C40 4E4E 2023          cmp.w     #20046,D0
00001526  660A      2024          bne.s     DumpRegisters_40
                    2025   ; printf("[@ BREAKPOINT]") ;
00001528  4879 0000 2026          pea       @m68kde~1_41.L
0000152C  43EE      
0000152E  4E93      2027          jsr       (A3)
00001530  584F      2028          addq.w    #4,A7
                    2029   DumpRegisters_40:
                    2030   ; printf("\r\n") ;
00001532  4879 0000 2031          pea       @m68kde~1_1.L
00001536  405A      
00001538  4E93      2032          jsr       (A3)
0000153A  584F      2033          addq.w    #4,A7
                    2034   ; for(i=0; i < 8; i++)    {
0000153C  4244      2035          clr.w     D4
                    2036   DumpRegisters_42:
0000153E  0C44 0008 2037          cmp.w     #8,D4
00001542  6C00 0040 2038          bge       DumpRegisters_44
                    2039   ; if(WatchPointSetOrCleared[i] == 1)
00001546  48C4      2040          ext.l     D4
00001548  2004      2041          move.l    D4,D0
0000154A  E588      2042          lsl.l     #2,D0
0000154C  41F9 0B00 2043          lea       _WatchPointSetOrCleared.L,A0
00001550  01A2      
00001552  2030 0800 2044          move.l    0(A0,D0.L),D0
00001556  0C80 0000 2045          cmp.l     #1,D0
0000155A  0001      
0000155C  6622      2046          bne.s     DumpRegisters_45
                    2047   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000155E  220D      2048          move.l    A5,D1
00001560  48C4      2049          ext.l     D4
00001562  2F00      2050          move.l    D0,-(A7)
00001564  2004      2051          move.l    D4,D0
00001566  C1FC 0064 2052          muls      #100,D0
0000156A  D280      2053          add.l     D0,D1
0000156C  201F      2054          move.l    (A7)+,D0
0000156E  2F01      2055          move.l    D1,-(A7)
00001570  48C4      2056          ext.l     D4
00001572  2F04      2057          move.l    D4,-(A7)
00001574  4879 0000 2058          pea       @m68kde~1_42.L
00001578  43FE      
0000157A  4E93      2059          jsr       (A3)
0000157C  DEFC 000C 2060          add.w     #12,A7
                    2061   DumpRegisters_45:
00001580  5244      2062          addq.w    #1,D4
00001582  60BA      2063          bra       DumpRegisters_42
                    2064   DumpRegisters_44:
00001584  4CDF 3CFC 2065          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001588  4E75      2066          rts
                    2067   ; }
                    2068   ; }
                    2069   ; // Trace Exception Handler
                    2070   ; void DumpRegistersandPause(void)
                    2071   ; {
                    2072   _DumpRegistersandPause:
0000158A  2F0A      2073          move.l    A2,-(A7)
0000158C  45F9 0000 2074          lea       _printf.L,A2
00001590  3684      
                    2075   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001592  4879 0000 2076          pea       @m68kde~1_43.L
00001596  440A      
00001598  4E92      2077          jsr       (A2)
0000159A  584F      2078          addq.w    #4,A7
                    2079   ; printf("\r\nBreak Points :[Disabled]") ;
0000159C  4879 0000 2080          pea       @m68kde~1_44.L
000015A0  442A      
000015A2  4E92      2081          jsr       (A2)
000015A4  584F      2082          addq.w    #4,A7
                    2083   ; DumpRegisters() ;
000015A6  4EB8 10D6 2084          jsr       _DumpRegisters
                    2085   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015AA  4879 0000 2086          pea       @m68kde~1_45.L
000015AE  4446      
000015B0  4E92      2087          jsr       (A2)
000015B2  584F      2088          addq.w    #4,A7
                    2089   ; printf("\r\nPress <ESC> to Resume Program") ;
000015B4  4879 0000 2090          pea       @m68kde~1_46.L
000015B8  4472      
000015BA  4E92      2091          jsr       (A2)
000015BC  584F      2092          addq.w    #4,A7
                    2093   ; menu() ;
000015BE  4EB9 0000 2094          jsr       _menu
000015C2  216E      
000015C4  245F      2095          move.l    (A7)+,A2
000015C6  4E75      2096          rts
                    2097   ; }
                    2098   ; void ChangeRegisters(void)
                    2099   ; {
                    2100   _ChangeRegisters:
000015C8  4E56 FFFC 2101          link      A6,#-4
000015CC  48E7 303C 2102          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000015D0  45F9 0000 2103          lea       _printf.L,A2
000015D4  3684      
000015D6  47EE FFFC 2104          lea       -4(A6),A3
000015DA  49F8 0CA4 2105          lea       _Get8HexDigits.L,A4
000015DE  4BF8 0B68 2106          lea       __getch.L,A5
                    2107   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2108   ; int reg_val ;
                    2109   ; char c, reg[3] ;
                    2110   ; reg[0] = tolower(_getch()) ;
000015E2  2F00      2111          move.l    D0,-(A7)
000015E4  4E95      2112          jsr       (A5)
000015E6  2200      2113          move.l    D0,D1
000015E8  201F      2114          move.l    (A7)+,D0
000015EA  2F01      2115          move.l    D1,-(A7)
000015EC  4EB9 0000 2116          jsr       _tolower
000015F0  2D02      
000015F2  584F      2117          addq.w    #4,A7
000015F4  1680      2118          move.b    D0,(A3)
                    2119   ; reg[1] = c = tolower(_getch()) ;
000015F6  2F00      2120          move.l    D0,-(A7)
000015F8  4E95      2121          jsr       (A5)
000015FA  2200      2122          move.l    D0,D1
000015FC  201F      2123          move.l    (A7)+,D0
000015FE  2F01      2124          move.l    D1,-(A7)
00001600  4EB9 0000 2125          jsr       _tolower
00001604  2D02      
00001606  584F      2126          addq.w    #4,A7
00001608  1400      2127          move.b    D0,D2
0000160A  1740 0001 2128          move.b    D0,1(A3)
                    2129   ; if(reg[0] == (char)('d'))  {    // change data register
0000160E  1013      2130          move.b    (A3),D0
00001610  0C00 0064 2131          cmp.b     #100,D0
00001614  6600 00AE 2132          bne       ChangeRegisters_1
                    2133   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001618  102B 0001 2134          move.b    1(A3),D0
0000161C  0C00 0037 2135          cmp.b     #55,D0
00001620  6E0A      2136          bgt.s     ChangeRegisters_5
00001622  102B 0001 2137          move.b    1(A3),D0
00001626  0C00 0030 2138          cmp.b     #48,D0
0000162A  6C0E      2139          bge.s     ChangeRegisters_3
                    2140   ChangeRegisters_5:
                    2141   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000162C  4879 0000 2142          pea       @m68kde~1_47.L
00001630  4492      
00001632  4E92      2143          jsr       (A2)
00001634  584F      2144          addq.w    #4,A7
                    2145   ; return ;
00001636  6000 0244 2146          bra       ChangeRegisters_6
                    2147   ChangeRegisters_3:
                    2148   ; }
                    2149   ; else {
                    2150   ; printf("\r\nD%c = ", c) ;
0000163A  4882      2151          ext.w     D2
0000163C  48C2      2152          ext.l     D2
0000163E  2F02      2153          move.l    D2,-(A7)
00001640  4879 0000 2154          pea       @m68kde~1_48.L
00001644  44BE      
00001646  4E92      2155          jsr       (A2)
00001648  504F      2156          addq.w    #8,A7
                    2157   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000164A  42A7      2158          clr.l     -(A7)
0000164C  4E94      2159          jsr       (A4)
0000164E  584F      2160          addq.w    #4,A7
00001650  2600      2161          move.l    D0,D3
                    2162   ; }
                    2163   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2164   ; if(c == (char)('0'))
00001652  0C02 0030 2165          cmp.b     #48,D2
00001656  660A      2166          bne.s     ChangeRegisters_7
                    2167   ; d0 = reg_val ;
00001658  23C3 0B00 2168          move.l    D3,_d0.L
0000165C  00E4      
0000165E  6000 0060 2169          bra       ChangeRegisters_20
                    2170   ChangeRegisters_7:
                    2171   ; else if(c == (char)('1'))
00001662  0C02 0031 2172          cmp.b     #49,D2
00001666  660A      2173          bne.s     ChangeRegisters_9
                    2174   ; d1 = reg_val ;
00001668  23C3 0B00 2175          move.l    D3,_d1.L
0000166C  00E8      
0000166E  6000 0050 2176          bra       ChangeRegisters_20
                    2177   ChangeRegisters_9:
                    2178   ; else if(c == (char)('2'))
00001672  0C02 0032 2179          cmp.b     #50,D2
00001676  660A      2180          bne.s     ChangeRegisters_11
                    2181   ; d2 = reg_val ;
00001678  23C3 0B00 2182          move.l    D3,_d2.L
0000167C  00EC      
0000167E  6000 0040 2183          bra       ChangeRegisters_20
                    2184   ChangeRegisters_11:
                    2185   ; else if(c == (char)('3'))
00001682  0C02 0033 2186          cmp.b     #51,D2
00001686  6608      2187          bne.s     ChangeRegisters_13
                    2188   ; d3 = reg_val ;
00001688  23C3 0B00 2189          move.l    D3,_d3.L
0000168C  00F0      
0000168E  6030      2190          bra.s     ChangeRegisters_20
                    2191   ChangeRegisters_13:
                    2192   ; else if(c == (char)('4'))
00001690  0C02 0034 2193          cmp.b     #52,D2
00001694  6608      2194          bne.s     ChangeRegisters_15
                    2195   ; d4 = reg_val ;
00001696  23C3 0B00 2196          move.l    D3,_d4.L
0000169A  00F4      
0000169C  6022      2197          bra.s     ChangeRegisters_20
                    2198   ChangeRegisters_15:
                    2199   ; else if(c == (char)('5'))
0000169E  0C02 0035 2200          cmp.b     #53,D2
000016A2  6608      2201          bne.s     ChangeRegisters_17
                    2202   ; d5 = reg_val ;
000016A4  23C3 0B00 2203          move.l    D3,_d5.L
000016A8  00F8      
000016AA  6014      2204          bra.s     ChangeRegisters_20
                    2205   ChangeRegisters_17:
                    2206   ; else if(c == (char)('6'))
000016AC  0C02 0036 2207          cmp.b     #54,D2
000016B0  6608      2208          bne.s     ChangeRegisters_19
                    2209   ; d6 = reg_val ;
000016B2  23C3 0B00 2210          move.l    D3,_d6.L
000016B6  00FC      
000016B8  6006      2211          bra.s     ChangeRegisters_20
                    2212   ChangeRegisters_19:
                    2213   ; else
                    2214   ; d7 = reg_val ;
000016BA  23C3 0B00 2215          move.l    D3,_d7.L
000016BE  0100      
                    2216   ChangeRegisters_20:
000016C0  6000 01B6 2217          bra       ChangeRegisters_51
                    2218   ChangeRegisters_1:
                    2219   ; }
                    2220   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000016C4  1013      2221          move.b    (A3),D0
000016C6  0C00 0061 2222          cmp.b     #97,D0
000016CA  6600 00A6 2223          bne       ChangeRegisters_21
                    2224   ; if((c > (char)('7')) || (c < (char)('0'))) {
000016CE  0C02 0037 2225          cmp.b     #55,D2
000016D2  6E06      2226          bgt.s     ChangeRegisters_25
000016D4  0C02 0030 2227          cmp.b     #48,D2
000016D8  6C0E      2228          bge.s     ChangeRegisters_23
                    2229   ChangeRegisters_25:
                    2230   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000016DA  4879 0000 2231          pea       @m68kde~1_49.L
000016DE  44C8      
000016E0  4E92      2232          jsr       (A2)
000016E2  584F      2233          addq.w    #4,A7
                    2234   ; return ;
000016E4  6000 0196 2235          bra       ChangeRegisters_6
                    2236   ChangeRegisters_23:
                    2237   ; }
                    2238   ; else {
                    2239   ; printf("\r\nA%c = ", c) ;
000016E8  4882      2240          ext.w     D2
000016EA  48C2      2241          ext.l     D2
000016EC  2F02      2242          move.l    D2,-(A7)
000016EE  4879 0000 2243          pea       @m68kde~1_50.L
000016F2  44F6      
000016F4  4E92      2244          jsr       (A2)
000016F6  504F      2245          addq.w    #8,A7
                    2246   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016F8  42A7      2247          clr.l     -(A7)
000016FA  4E94      2248          jsr       (A4)
000016FC  584F      2249          addq.w    #4,A7
000016FE  2600      2250          move.l    D0,D3
                    2251   ; }
                    2252   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2253   ; if(c == (char)('0'))
00001700  0C02 0030 2254          cmp.b     #48,D2
00001704  660A      2255          bne.s     ChangeRegisters_26
                    2256   ; a0 = reg_val ;
00001706  23C3 0B00 2257          move.l    D3,_a0.L
0000170A  0104      
0000170C  6000 0060 2258          bra       ChangeRegisters_39
                    2259   ChangeRegisters_26:
                    2260   ; else if(c == (char)('1'))
00001710  0C02 0031 2261          cmp.b     #49,D2
00001714  660A      2262          bne.s     ChangeRegisters_28
                    2263   ; a1 = reg_val ;
00001716  23C3 0B00 2264          move.l    D3,_a1.L
0000171A  0108      
0000171C  6000 0050 2265          bra       ChangeRegisters_39
                    2266   ChangeRegisters_28:
                    2267   ; else if(c == (char)('2'))
00001720  0C02 0032 2268          cmp.b     #50,D2
00001724  660A      2269          bne.s     ChangeRegisters_30
                    2270   ; a2 = reg_val ;
00001726  23C3 0B00 2271          move.l    D3,_a2.L
0000172A  010C      
0000172C  6000 0040 2272          bra       ChangeRegisters_39
                    2273   ChangeRegisters_30:
                    2274   ; else if(c == (char)('3'))
00001730  0C02 0033 2275          cmp.b     #51,D2
00001734  6608      2276          bne.s     ChangeRegisters_32
                    2277   ; a3 = reg_val ;
00001736  23C3 0B00 2278          move.l    D3,_a3.L
0000173A  0110      
0000173C  6030      2279          bra.s     ChangeRegisters_39
                    2280   ChangeRegisters_32:
                    2281   ; else if(c == (char)('4'))
0000173E  0C02 0034 2282          cmp.b     #52,D2
00001742  6608      2283          bne.s     ChangeRegisters_34
                    2284   ; a4 = reg_val ;
00001744  23C3 0B00 2285          move.l    D3,_a4.L
00001748  0114      
0000174A  6022      2286          bra.s     ChangeRegisters_39
                    2287   ChangeRegisters_34:
                    2288   ; else if(c == (char)('5'))
0000174C  0C02 0035 2289          cmp.b     #53,D2
00001750  6608      2290          bne.s     ChangeRegisters_36
                    2291   ; a5 = reg_val ;
00001752  23C3 0B00 2292          move.l    D3,_a5.L
00001756  0118      
00001758  6014      2293          bra.s     ChangeRegisters_39
                    2294   ChangeRegisters_36:
                    2295   ; else if(c == (char)('6'))
0000175A  0C02 0036 2296          cmp.b     #54,D2
0000175E  6608      2297          bne.s     ChangeRegisters_38
                    2298   ; a6 = reg_val ;
00001760  23C3 0B00 2299          move.l    D3,_a6.L
00001764  011C      
00001766  6006      2300          bra.s     ChangeRegisters_39
                    2301   ChangeRegisters_38:
                    2302   ; else
                    2303   ; USP = reg_val ;
00001768  23C3 0B00 2304          move.l    D3,_USP.L
0000176C  0128      
                    2305   ChangeRegisters_39:
0000176E  6000 0108 2306          bra       ChangeRegisters_51
                    2307   ChangeRegisters_21:
                    2308   ; }
                    2309   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001772  1013      2310          move.b    (A3),D0
00001774  0C00 0075 2311          cmp.b     #117,D0
00001778  6600 004E 2312          bne       ChangeRegisters_40
0000177C  0C02 0073 2313          cmp.b     #115,D2
00001780  6600 0046 2314          bne       ChangeRegisters_40
                    2315   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001784  2F00      2316          move.l    D0,-(A7)
00001786  4E95      2317          jsr       (A5)
00001788  2200      2318          move.l    D0,D1
0000178A  201F      2319          move.l    (A7)+,D0
0000178C  2F01      2320          move.l    D1,-(A7)
0000178E  4EB9 0000 2321          jsr       _tolower
00001792  2D02      
00001794  584F      2322          addq.w    #4,A7
00001796  0C80 0000 2323          cmp.l     #112,D0
0000179A  0070      
0000179C  6618      2324          bne.s     ChangeRegisters_42
                    2325   ; printf("\r\nUser SP = ") ;
0000179E  4879 0000 2326          pea       @m68kde~1_51.L
000017A2  4500      
000017A4  4E92      2327          jsr       (A2)
000017A6  584F      2328          addq.w    #4,A7
                    2329   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017A8  42A7      2330          clr.l     -(A7)
000017AA  4E94      2331          jsr       (A4)
000017AC  584F      2332          addq.w    #4,A7
000017AE  23C0 0B00 2333          move.l    D0,_USP.L
000017B2  0128      
000017B4  600E      2334          bra.s     ChangeRegisters_43
                    2335   ChangeRegisters_42:
                    2336   ; }
                    2337   ; else {
                    2338   ; printf("\r\nIllegal Register....") ;
000017B6  4879 0000 2339          pea       @m68kde~1_52.L
000017BA  450E      
000017BC  4E92      2340          jsr       (A2)
000017BE  584F      2341          addq.w    #4,A7
                    2342   ; return ;
000017C0  6000 00BA 2343          bra       ChangeRegisters_6
                    2344   ChangeRegisters_43:
000017C4  6000 00B2 2345          bra       ChangeRegisters_51
                    2346   ChangeRegisters_40:
                    2347   ; }
                    2348   ; }
                    2349   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000017C8  1013      2350          move.b    (A3),D0
000017CA  0C00 0073 2351          cmp.b     #115,D0
000017CE  6600 004E 2352          bne       ChangeRegisters_44
000017D2  0C02 0073 2353          cmp.b     #115,D2
000017D6  6600 0046 2354          bne       ChangeRegisters_44
                    2355   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000017DA  2F00      2356          move.l    D0,-(A7)
000017DC  4E95      2357          jsr       (A5)
000017DE  2200      2358          move.l    D0,D1
000017E0  201F      2359          move.l    (A7)+,D0
000017E2  2F01      2360          move.l    D1,-(A7)
000017E4  4EB9 0000 2361          jsr       _tolower
000017E8  2D02      
000017EA  584F      2362          addq.w    #4,A7
000017EC  0C80 0000 2363          cmp.l     #112,D0
000017F0  0070      
000017F2  6618      2364          bne.s     ChangeRegisters_46
                    2365   ; printf("\r\nSystem SP = ") ;
000017F4  4879 0000 2366          pea       @m68kde~1_53.L
000017F8  4526      
000017FA  4E92      2367          jsr       (A2)
000017FC  584F      2368          addq.w    #4,A7
                    2369   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017FE  42A7      2370          clr.l     -(A7)
00001800  4E94      2371          jsr       (A4)
00001802  584F      2372          addq.w    #4,A7
00001804  23C0 0B00 2373          move.l    D0,_SSP.L
00001808  0124      
0000180A  600E      2374          bra.s     ChangeRegisters_47
                    2375   ChangeRegisters_46:
                    2376   ; }
                    2377   ; else {
                    2378   ; printf("\r\nIllegal Register....") ;
0000180C  4879 0000 2379          pea       @m68kde~1_52.L
00001810  450E      
00001812  4E92      2380          jsr       (A2)
00001814  584F      2381          addq.w    #4,A7
                    2382   ; return ;
00001816  6000 0064 2383          bra       ChangeRegisters_6
                    2384   ChangeRegisters_47:
0000181A  6000 005C 2385          bra       ChangeRegisters_51
                    2386   ChangeRegisters_44:
                    2387   ; }
                    2388   ; }
                    2389   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
0000181E  1013      2390          move.b    (A3),D0
00001820  0C00 0070 2391          cmp.b     #112,D0
00001824  6620      2392          bne.s     ChangeRegisters_48
00001826  0C02 0063 2393          cmp.b     #99,D2
0000182A  661A      2394          bne.s     ChangeRegisters_48
                    2395   ; printf("\r\nPC = ") ;
0000182C  4879 0000 2396          pea       @m68kde~1_54.L
00001830  4536      
00001832  4E92      2397          jsr       (A2)
00001834  584F      2398          addq.w    #4,A7
                    2399   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001836  42A7      2400          clr.l     -(A7)
00001838  4E94      2401          jsr       (A4)
0000183A  584F      2402          addq.w    #4,A7
0000183C  23C0 0B00 2403          move.l    D0,_PC.L
00001840  0120      
00001842  6000 0034 2404          bra       ChangeRegisters_51
                    2405   ChangeRegisters_48:
                    2406   ; }
                    2407   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001846  1013      2408          move.b    (A3),D0
00001848  0C00 0073 2409          cmp.b     #115,D0
0000184C  6620      2410          bne.s     ChangeRegisters_50
0000184E  0C02 0072 2411          cmp.b     #114,D2
00001852  661A      2412          bne.s     ChangeRegisters_50
                    2413   ; printf("\r\nSR = ") ;
00001854  4879 0000 2414          pea       @m68kde~1_55.L
00001858  453E      
0000185A  4E92      2415          jsr       (A2)
0000185C  584F      2416          addq.w    #4,A7
                    2417   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000185E  42A7      2418          clr.l     -(A7)
00001860  4EB8 0C58 2419          jsr       _Get4HexDigits
00001864  584F      2420          addq.w    #4,A7
00001866  33C0 0B00 2421          move.w    D0,_SR.L
0000186A  012C      
0000186C  600A      2422          bra.s     ChangeRegisters_51
                    2423   ChangeRegisters_50:
                    2424   ; }
                    2425   ; else
                    2426   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000186E  4879 0000 2427          pea       @m68kde~1_56.L
00001872  4546      
00001874  4E92      2428          jsr       (A2)
00001876  584F      2429          addq.w    #4,A7
                    2430   ChangeRegisters_51:
                    2431   ; DumpRegisters() ;
00001878  4EB8 10D6 2432          jsr       _DumpRegisters
                    2433   ChangeRegisters_6:
0000187C  4CDF 3C0C 2434          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001880  4E5E      2435          unlk      A6
00001882  4E75      2436          rts
                    2437   ; }
                    2438   ; void BreakPointDisplay(void)
                    2439   ; {
                    2440   _BreakPointDisplay:
00001884  48E7 3030 2441          movem.l   D2/D3/A2/A3,-(A7)
00001888  45F9 0000 2442          lea       _printf.L,A2
0000188C  3684      
0000188E  47F9 0B00 2443          lea       _BreakPointAddress.L,A3
00001892  012E      
                    2444   ; int i, BreakPointsSet = 0 ;
00001894  4283      2445          clr.l     D3
                    2446   ; // any break points  set
                    2447   ; for(i = 0; i < 8; i++)  {
00001896  4282      2448          clr.l     D2
                    2449   BreakPointDisplay_1:
00001898  0C82 0000 2450          cmp.l     #8,D2
0000189C  0008      
0000189E  6C1C      2451          bge.s     BreakPointDisplay_3
                    2452   ; if(BreakPointSetOrCleared[i] == 1)
000018A0  2002      2453          move.l    D2,D0
000018A2  E588      2454          lsl.l     #2,D0
000018A4  41F9 0B00 2455          lea       _BreakPointSetOrCleared.L,A0
000018A8  015E      
000018AA  2030 0800 2456          move.l    0(A0,D0.L),D0
000018AE  0C80 0000 2457          cmp.l     #1,D0
000018B2  0001      
000018B4  6602      2458          bne.s     BreakPointDisplay_4
                    2459   ; BreakPointsSet = 1;
000018B6  7601      2460          moveq     #1,D3
                    2461   BreakPointDisplay_4:
000018B8  5282      2462          addq.l    #1,D2
000018BA  60DC      2463          bra       BreakPointDisplay_1
                    2464   BreakPointDisplay_3:
                    2465   ; }
                    2466   ; if(BreakPointsSet == 1) {
000018BC  0C83 0000 2467          cmp.l     #1,D3
000018C0  0001      
000018C2  6616      2468          bne.s     BreakPointDisplay_6
                    2469   ; printf("\r\n\r\nNum     Address      Instruction") ;
000018C4  4879 0000 2470          pea       @m68kde~1_57.L
000018C8  4582      
000018CA  4E92      2471          jsr       (A2)
000018CC  584F      2472          addq.w    #4,A7
                    2473   ; printf("\r\n---     ---------    -----------") ;
000018CE  4879 0000 2474          pea       @m68kde~1_58.L
000018D2  45A8      
000018D4  4E92      2475          jsr       (A2)
000018D6  584F      2476          addq.w    #4,A7
000018D8  600A      2477          bra.s     BreakPointDisplay_7
                    2478   BreakPointDisplay_6:
                    2479   ; }
                    2480   ; else
                    2481   ; printf("\r\nNo BreakPoints Set") ;
000018DA  4879 0000 2482          pea       @m68kde~1_59.L
000018DE  45CC      
000018E0  4E92      2483          jsr       (A2)
000018E2  584F      2484          addq.w    #4,A7
                    2485   BreakPointDisplay_7:
                    2486   ; for(i = 0; i < 8; i++)  {
000018E4  4282      2487          clr.l     D2
                    2488   BreakPointDisplay_8:
000018E6  0C82 0000 2489          cmp.l     #8,D2
000018EA  0008      
000018EC  6C00 005A 2490          bge       BreakPointDisplay_10
                    2491   ; // put opcode back, then put break point back
                    2492   ; if(BreakPointSetOrCleared[i] == 1)  {
000018F0  2002      2493          move.l    D2,D0
000018F2  E588      2494          lsl.l     #2,D0
000018F4  41F9 0B00 2495          lea       _BreakPointSetOrCleared.L,A0
000018F8  015E      
000018FA  2030 0800 2496          move.l    0(A0,D0.L),D0
000018FE  0C80 0000 2497          cmp.l     #1,D0
00001902  0001      
00001904  6600 003E 2498          bne       BreakPointDisplay_11
                    2499   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001908  2002      2500          move.l    D2,D0
0000190A  E388      2501          lsl.l     #1,D0
0000190C  41F9 0B00 2502          lea       _BreakPointInstruction.L,A0
00001910  014E      
00001912  2202      2503          move.l    D2,D1
00001914  E589      2504          lsl.l     #2,D1
00001916  2233 1800 2505          move.l    0(A3,D1.L),D1
0000191A  2241      2506          move.l    D1,A1
0000191C  32B0 0800 2507          move.w    0(A0,D0.L),(A1)
                    2508   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001920  2002      2509          move.l    D2,D0
00001922  E588      2510          lsl.l     #2,D0
00001924  2033 0800 2511          move.l    0(A3,D0.L),D0
00001928  2040      2512          move.l    D0,A0
0000192A  30BC 4E4E 2513          move.w    #20046,(A0)
                    2514   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
0000192E  2202      2515          move.l    D2,D1
00001930  E589      2516          lsl.l     #2,D1
00001932  2F33 1800 2517          move.l    0(A3,D1.L),-(A7)
00001936  2F02      2518          move.l    D2,-(A7)
00001938  4879 0000 2519          pea       @m68kde~1_60.L
0000193C  45E2      
0000193E  4E92      2520          jsr       (A2)
00001940  DEFC 000C 2521          add.w     #12,A7
                    2522   BreakPointDisplay_11:
00001944  5282      2523          addq.l    #1,D2
00001946  609E      2524          bra       BreakPointDisplay_8
                    2525   BreakPointDisplay_10:
                    2526   ; }
                    2527   ; }
                    2528   ; printf("\r\n") ;
00001948  4879 0000 2529          pea       @m68kde~1_1.L
0000194C  405A      
0000194E  4E92      2530          jsr       (A2)
00001950  584F      2531          addq.w    #4,A7
00001952  4CDF 0C0C 2532          movem.l   (A7)+,D2/D3/A2/A3
00001956  4E75      2533          rts
                    2534   ; }
                    2535   ; void WatchPointDisplay(void)
                    2536   ; {
                    2537   _WatchPointDisplay:
00001958  48E7 3020 2538          movem.l   D2/D3/A2,-(A7)
0000195C  45F9 0000 2539          lea       _printf.L,A2
00001960  3684      
                    2540   ; int i ;
                    2541   ; int WatchPointsSet = 0 ;
00001962  4283      2542          clr.l     D3
                    2543   ; // any watchpoints set
                    2544   ; for(i = 0; i < 8; i++)  {
00001964  4282      2545          clr.l     D2
                    2546   WatchPointDisplay_1:
00001966  0C82 0000 2547          cmp.l     #8,D2
0000196A  0008      
0000196C  6C1C      2548          bge.s     WatchPointDisplay_3
                    2549   ; if(WatchPointSetOrCleared[i] == 1)
0000196E  2002      2550          move.l    D2,D0
00001970  E588      2551          lsl.l     #2,D0
00001972  41F9 0B00 2552          lea       _WatchPointSetOrCleared.L,A0
00001976  01A2      
00001978  2030 0800 2553          move.l    0(A0,D0.L),D0
0000197C  0C80 0000 2554          cmp.l     #1,D0
00001980  0001      
00001982  6602      2555          bne.s     WatchPointDisplay_4
                    2556   ; WatchPointsSet = 1;
00001984  7601      2557          moveq     #1,D3
                    2558   WatchPointDisplay_4:
00001986  5282      2559          addq.l    #1,D2
00001988  60DC      2560          bra       WatchPointDisplay_1
                    2561   WatchPointDisplay_3:
                    2562   ; }
                    2563   ; if(WatchPointsSet == 1) {
0000198A  0C83 0000 2564          cmp.l     #1,D3
0000198E  0001      
00001990  6616      2565          bne.s     WatchPointDisplay_6
                    2566   ; printf("\r\nNum     Address") ;
00001992  4879 0000 2567          pea       @m68kde~1_61.L
00001996  45F2      
00001998  4E92      2568          jsr       (A2)
0000199A  584F      2569          addq.w    #4,A7
                    2570   ; printf("\r\n---     ---------") ;
0000199C  4879 0000 2571          pea       @m68kde~1_62.L
000019A0  4604      
000019A2  4E92      2572          jsr       (A2)
000019A4  584F      2573          addq.w    #4,A7
000019A6  600A      2574          bra.s     WatchPointDisplay_7
                    2575   WatchPointDisplay_6:
                    2576   ; }
                    2577   ; else
                    2578   ; printf("\r\nNo WatchPoints Set") ;
000019A8  4879 0000 2579          pea       @m68kde~1_63.L
000019AC  4618      
000019AE  4E92      2580          jsr       (A2)
000019B0  584F      2581          addq.w    #4,A7
                    2582   WatchPointDisplay_7:
                    2583   ; for(i = 0; i < 8; i++)  {
000019B2  4282      2584          clr.l     D2
                    2585   WatchPointDisplay_8:
000019B4  0C82 0000 2586          cmp.l     #8,D2
000019B8  0008      
000019BA  6C00 0038 2587          bge       WatchPointDisplay_10
                    2588   ; if(WatchPointSetOrCleared[i] == 1)
000019BE  2002      2589          move.l    D2,D0
000019C0  E588      2590          lsl.l     #2,D0
000019C2  41F9 0B00 2591          lea       _WatchPointSetOrCleared.L,A0
000019C6  01A2      
000019C8  2030 0800 2592          move.l    0(A0,D0.L),D0
000019CC  0C80 0000 2593          cmp.l     #1,D0
000019D0  0001      
000019D2  661C      2594          bne.s     WatchPointDisplay_11
                    2595   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000019D4  2202      2596          move.l    D2,D1
000019D6  E589      2597          lsl.l     #2,D1
000019D8  41F9 0B00 2598          lea       _WatchPointAddress.L,A0
000019DC  0182      
000019DE  2F30 1800 2599          move.l    0(A0,D1.L),-(A7)
000019E2  2F02      2600          move.l    D2,-(A7)
000019E4  4879 0000 2601          pea       @m68kde~1_60.L
000019E8  45E2      
000019EA  4E92      2602          jsr       (A2)
000019EC  DEFC 000C 2603          add.w     #12,A7
                    2604   WatchPointDisplay_11:
000019F0  5282      2605          addq.l    #1,D2
000019F2  60C0      2606          bra       WatchPointDisplay_8
                    2607   WatchPointDisplay_10:
                    2608   ; }
                    2609   ; printf("\r\n") ;
000019F4  4879 0000 2610          pea       @m68kde~1_1.L
000019F8  405A      
000019FA  4E92      2611          jsr       (A2)
000019FC  584F      2612          addq.w    #4,A7
000019FE  4CDF 040C 2613          movem.l   (A7)+,D2/D3/A2
00001A02  4E75      2614          rts
                    2615   ; }
                    2616   ; void BreakPointClear(void)
                    2617   ; {
                    2618   _BreakPointClear:
00001A04  4E56 FFFC 2619          link      A6,#-4
00001A08  48E7 2020 2620          movem.l   D2/A2,-(A7)
00001A0C  45F9 0000 2621          lea       _printf.L,A2
00001A10  3684      
                    2622   ; unsigned int i ;
                    2623   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2624   ; BreakPointDisplay() ;
00001A12  4EB8 1884 2625          jsr       _BreakPointDisplay
                    2626   ; printf("\r\nEnter Break Point Number: ") ;
00001A16  4879 0000 2627          pea       @m68kde~1_64.L
00001A1A  462E      
00001A1C  4E92      2628          jsr       (A2)
00001A1E  584F      2629          addq.w    #4,A7
                    2630   ; i = xtod(_getch()) ;           // get break pointer number
00001A20  2F00      2631          move.l    D0,-(A7)
00001A22  4EB8 0B68 2632          jsr       __getch
00001A26  2200      2633          move.l    D0,D1
00001A28  201F      2634          move.l    (A7)+,D0
00001A2A  2F01      2635          move.l    D1,-(A7)
00001A2C  4EB8 0BD2 2636          jsr       _xtod
00001A30  584F      2637          addq.w    #4,A7
00001A32  C0BC 0000 2638          and.l     #255,D0
00001A36  00FF      
00001A38  2400      2639          move.l    D0,D2
                    2640   ; if((i < 0) || (i > 7))   {
00001A3A  0C82 0000 2641          cmp.l     #0,D2
00001A3E  0000      
00001A40  6508      2642          blo.s     BreakPointClear_3
00001A42  0C82 0000 2643          cmp.l     #7,D2
00001A46  0007      
00001A48  630E      2644          bls.s     BreakPointClear_1
                    2645   BreakPointClear_3:
                    2646   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A4A  4879 0000 2647          pea       @m68kde~1_65.L
00001A4E  464C      
00001A50  4E92      2648          jsr       (A2)
00001A52  584F      2649          addq.w    #4,A7
                    2650   ; return ;
00001A54  6000 0080 2651          bra       BreakPointClear_4
                    2652   BreakPointClear_1:
                    2653   ; }
                    2654   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001A58  2002      2655          move.l    D2,D0
00001A5A  E588      2656          lsl.l     #2,D0
00001A5C  41F9 0B00 2657          lea       _BreakPointSetOrCleared.L,A0
00001A60  015E      
00001A62  2030 0800 2658          move.l    0(A0,D0.L),D0
00001A66  0C80 0000 2659          cmp.l     #1,D0
00001A6A  0001      
00001A6C  6600 005A 2660          bne       BreakPointClear_5
                    2661   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001A70  2002      2662          move.l    D2,D0
00001A72  E588      2663          lsl.l     #2,D0
00001A74  41F9 0B00 2664          lea       _BreakPointAddress.L,A0
00001A78  012E      
00001A7A  2D70 0800 2665          move.l    0(A0,D0.L),-4(A6)
00001A7E  FFFC      
                    2666   ; BreakPointAddress[i] = 0 ;
00001A80  2002      2667          move.l    D2,D0
00001A82  E588      2668          lsl.l     #2,D0
00001A84  41F9 0B00 2669          lea       _BreakPointAddress.L,A0
00001A88  012E      
00001A8A  42B0 0800 2670          clr.l     0(A0,D0.L)
                    2671   ; BreakPointSetOrCleared[i] = 0 ;
00001A8E  2002      2672          move.l    D2,D0
00001A90  E588      2673          lsl.l     #2,D0
00001A92  41F9 0B00 2674          lea       _BreakPointSetOrCleared.L,A0
00001A96  015E      
00001A98  42B0 0800 2675          clr.l     0(A0,D0.L)
                    2676   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001A9C  2002      2677          move.l    D2,D0
00001A9E  E388      2678          lsl.l     #1,D0
00001AA0  41F9 0B00 2679          lea       _BreakPointInstruction.L,A0
00001AA4  014E      
00001AA6  226E FFFC 2680          move.l    -4(A6),A1
00001AAA  32B0 0800 2681          move.w    0(A0,D0.L),(A1)
                    2682   ; BreakPointInstruction[i] = 0 ;
00001AAE  2002      2683          move.l    D2,D0
00001AB0  E388      2684          lsl.l     #1,D0
00001AB2  41F9 0B00 2685          lea       _BreakPointInstruction.L,A0
00001AB6  014E      
00001AB8  4270 0800 2686          clr.w     0(A0,D0.L)
                    2687   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001ABC  4879 0000 2688          pea       @m68kde~1_66.L
00001AC0  4668      
00001AC2  4E92      2689          jsr       (A2)
00001AC4  584F      2690          addq.w    #4,A7
00001AC6  600A      2691          bra.s     BreakPointClear_6
                    2692   BreakPointClear_5:
                    2693   ; }
                    2694   ; else
                    2695   ; printf("\r\nBreak Point wasn't Set.....") ;
00001AC8  4879 0000 2696          pea       @m68kde~1_67.L
00001ACC  4686      
00001ACE  4E92      2697          jsr       (A2)
00001AD0  584F      2698          addq.w    #4,A7
                    2699   BreakPointClear_6:
                    2700   ; BreakPointDisplay() ;
00001AD2  4EB8 1884 2701          jsr       _BreakPointDisplay
                    2702   ; return ;
                    2703   BreakPointClear_4:
00001AD6  4CDF 0404 2704          movem.l   (A7)+,D2/A2
00001ADA  4E5E      2705          unlk      A6
00001ADC  4E75      2706          rts
                    2707   ; }
                    2708   ; void WatchPointClear(void)
                    2709   ; {
                    2710   _WatchPointClear:
00001ADE  48E7 2020 2711          movem.l   D2/A2,-(A7)
00001AE2  45F9 0000 2712          lea       _printf.L,A2
00001AE6  3684      
                    2713   ; unsigned int i ;
                    2714   ; WatchPointDisplay() ;
00001AE8  4EB8 1958 2715          jsr       _WatchPointDisplay
                    2716   ; printf("\r\nEnter Watch Point Number: ") ;
00001AEC  4879 0000 2717          pea       @m68kde~1_68.L
00001AF0  46A4      
00001AF2  4E92      2718          jsr       (A2)
00001AF4  584F      2719          addq.w    #4,A7
                    2720   ; i = xtod(_getch()) ;           // get watch pointer number
00001AF6  2F00      2721          move.l    D0,-(A7)
00001AF8  4EB8 0B68 2722          jsr       __getch
00001AFC  2200      2723          move.l    D0,D1
00001AFE  201F      2724          move.l    (A7)+,D0
00001B00  2F01      2725          move.l    D1,-(A7)
00001B02  4EB8 0BD2 2726          jsr       _xtod
00001B06  584F      2727          addq.w    #4,A7
00001B08  C0BC 0000 2728          and.l     #255,D0
00001B0C  00FF      
00001B0E  2400      2729          move.l    D0,D2
                    2730   ; if((i < 0) || (i > 7))   {
00001B10  0C82 0000 2731          cmp.l     #0,D2
00001B14  0000      
00001B16  6508      2732          blo.s     WatchPointClear_3
00001B18  0C82 0000 2733          cmp.l     #7,D2
00001B1C  0007      
00001B1E  630E      2734          bls.s     WatchPointClear_1
                    2735   WatchPointClear_3:
                    2736   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B20  4879 0000 2737          pea       @m68kde~1_65.L
00001B24  464C      
00001B26  4E92      2738          jsr       (A2)
00001B28  584F      2739          addq.w    #4,A7
                    2740   ; return ;
00001B2A  6000 004E 2741          bra       WatchPointClear_4
                    2742   WatchPointClear_1:
                    2743   ; }
                    2744   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B2E  2002      2745          move.l    D2,D0
00001B30  E588      2746          lsl.l     #2,D0
00001B32  41F9 0B00 2747          lea       _WatchPointSetOrCleared.L,A0
00001B36  01A2      
00001B38  2030 0800 2748          move.l    0(A0,D0.L),D0
00001B3C  0C80 0000 2749          cmp.l     #1,D0
00001B40  0001      
00001B42  6628      2750          bne.s     WatchPointClear_5
                    2751   ; WatchPointAddress[i] = 0 ;
00001B44  2002      2752          move.l    D2,D0
00001B46  E588      2753          lsl.l     #2,D0
00001B48  41F9 0B00 2754          lea       _WatchPointAddress.L,A0
00001B4C  0182      
00001B4E  42B0 0800 2755          clr.l     0(A0,D0.L)
                    2756   ; WatchPointSetOrCleared[i] = 0 ;
00001B52  2002      2757          move.l    D2,D0
00001B54  E588      2758          lsl.l     #2,D0
00001B56  41F9 0B00 2759          lea       _WatchPointSetOrCleared.L,A0
00001B5A  01A2      
00001B5C  42B0 0800 2760          clr.l     0(A0,D0.L)
                    2761   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001B60  4879 0000 2762          pea       @m68kde~1_69.L
00001B64  46C2      
00001B66  4E92      2763          jsr       (A2)
00001B68  584F      2764          addq.w    #4,A7
00001B6A  600A      2765          bra.s     WatchPointClear_6
                    2766   WatchPointClear_5:
                    2767   ; }
                    2768   ; else
                    2769   ; printf("\r\nWatch Point Was not Set.....") ;
00001B6C  4879 0000 2770          pea       @m68kde~1_70.L
00001B70  46E0      
00001B72  4E92      2771          jsr       (A2)
00001B74  584F      2772          addq.w    #4,A7
                    2773   WatchPointClear_6:
                    2774   ; WatchPointDisplay() ;
00001B76  4EB8 1958 2775          jsr       _WatchPointDisplay
                    2776   ; return ;
                    2777   WatchPointClear_4:
00001B7A  4CDF 0404 2778          movem.l   (A7)+,D2/A2
00001B7E  4E75      2779          rts
                    2780   ; }
                    2781   ; void DisableBreakPoints(void)
                    2782   ; {
                    2783   _DisableBreakPoints:
00001B80  4E56 FFFC 2784          link      A6,#-4
00001B84  2F02      2785          move.l    D2,-(A7)
                    2786   ; int i ;
                    2787   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2788   ; for(i = 0; i < 8; i++)  {
00001B86  4282      2789          clr.l     D2
                    2790   DisableBreakPoints_1:
00001B88  0C82 0000 2791          cmp.l     #8,D2
00001B8C  0008      
00001B8E  6C00 003E 2792          bge       DisableBreakPoints_3
                    2793   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001B92  2002      2794          move.l    D2,D0
00001B94  E588      2795          lsl.l     #2,D0
00001B96  41F9 0B00 2796          lea       _BreakPointSetOrCleared.L,A0
00001B9A  015E      
00001B9C  2030 0800 2797          move.l    0(A0,D0.L),D0
00001BA0  0C80 0000 2798          cmp.l     #1,D0
00001BA4  0001      
00001BA6  6622      2799          bne.s     DisableBreakPoints_4
                    2800   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BA8  2002      2801          move.l    D2,D0
00001BAA  E588      2802          lsl.l     #2,D0
00001BAC  41F9 0B00 2803          lea       _BreakPointAddress.L,A0
00001BB0  012E      
00001BB2  2D70 0800 2804          move.l    0(A0,D0.L),-4(A6)
00001BB6  FFFC      
                    2805   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001BB8  2002      2806          move.l    D2,D0
00001BBA  E388      2807          lsl.l     #1,D0
00001BBC  41F9 0B00 2808          lea       _BreakPointInstruction.L,A0
00001BC0  014E      
00001BC2  226E FFFC 2809          move.l    -4(A6),A1
00001BC6  32B0 0800 2810          move.w    0(A0,D0.L),(A1)
                    2811   DisableBreakPoints_4:
00001BCA  5282      2812          addq.l    #1,D2
00001BCC  60BA      2813          bra       DisableBreakPoints_1
                    2814   DisableBreakPoints_3:
00001BCE  241F      2815          move.l    (A7)+,D2
00001BD0  4E5E      2816          unlk      A6
00001BD2  4E75      2817          rts
                    2818   ; }
                    2819   ; }
                    2820   ; }
                    2821   ; void EnableBreakPoints(void)
                    2822   ; {
                    2823   _EnableBreakPoints:
00001BD4  4E56 FFFC 2824          link      A6,#-4
00001BD8  2F02      2825          move.l    D2,-(A7)
                    2826   ; int i ;
                    2827   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2828   ; for(i = 0; i < 8; i++)  {
00001BDA  4282      2829          clr.l     D2
                    2830   EnableBreakPoints_1:
00001BDC  0C82 0000 2831          cmp.l     #8,D2
00001BE0  0008      
00001BE2  6C32      2832          bge.s     EnableBreakPoints_3
                    2833   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001BE4  2002      2834          move.l    D2,D0
00001BE6  E588      2835          lsl.l     #2,D0
00001BE8  41F9 0B00 2836          lea       _BreakPointSetOrCleared.L,A0
00001BEC  015E      
00001BEE  2030 0800 2837          move.l    0(A0,D0.L),D0
00001BF2  0C80 0000 2838          cmp.l     #1,D0
00001BF6  0001      
00001BF8  6618      2839          bne.s     EnableBreakPoints_4
                    2840   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BFA  2002      2841          move.l    D2,D0
00001BFC  E588      2842          lsl.l     #2,D0
00001BFE  41F9 0B00 2843          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  2D70 0800 2844          move.l    0(A0,D0.L),-4(A6)
00001C08  FFFC      
                    2845   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C0A  206E FFFC 2846          move.l    -4(A6),A0
00001C0E  30BC 4E4E 2847          move.w    #20046,(A0)
                    2848   EnableBreakPoints_4:
00001C12  5282      2849          addq.l    #1,D2
00001C14  60C6      2850          bra       EnableBreakPoints_1
                    2851   EnableBreakPoints_3:
00001C16  241F      2852          move.l    (A7)+,D2
00001C18  4E5E      2853          unlk      A6
00001C1A  4E75      2854          rts
                    2855   ; }
                    2856   ; }
                    2857   ; }
                    2858   ; void KillAllBreakPoints(void)
                    2859   ; {
                    2860   _KillAllBreakPoints:
00001C1C  4E56 FFFC 2861          link      A6,#-4
00001C20  2F02      2862          move.l    D2,-(A7)
                    2863   ; int i ;
                    2864   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2865   ; for(i = 0; i < 8; i++)  {
00001C22  4282      2866          clr.l     D2
                    2867   KillAllBreakPoints_1:
00001C24  0C82 0000 2868          cmp.l     #8,D2
00001C28  0008      
00001C2A  6C00 0052 2869          bge       KillAllBreakPoints_3
                    2870   ; // clear BP
                    2871   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C2E  2002      2872          move.l    D2,D0
00001C30  E588      2873          lsl.l     #2,D0
00001C32  41F9 0B00 2874          lea       _BreakPointAddress.L,A0
00001C36  012E      
00001C38  2D70 0800 2875          move.l    0(A0,D0.L),-4(A6)
00001C3C  FFFC      
                    2876   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C3E  2002      2877          move.l    D2,D0
00001C40  E388      2878          lsl.l     #1,D0
00001C42  41F9 0B00 2879          lea       _BreakPointInstruction.L,A0
00001C46  014E      
00001C48  226E FFFC 2880          move.l    -4(A6),A1
00001C4C  32B0 0800 2881          move.w    0(A0,D0.L),(A1)
                    2882   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C50  2002      2883          move.l    D2,D0
00001C52  E588      2884          lsl.l     #2,D0
00001C54  41F9 0B00 2885          lea       _BreakPointAddress.L,A0
00001C58  012E      
00001C5A  42B0 0800 2886          clr.l     0(A0,D0.L)
                    2887   ; BreakPointInstruction[i] = 0 ;
00001C5E  2002      2888          move.l    D2,D0
00001C60  E388      2889          lsl.l     #1,D0
00001C62  41F9 0B00 2890          lea       _BreakPointInstruction.L,A0
00001C66  014E      
00001C68  4270 0800 2891          clr.w     0(A0,D0.L)
                    2892   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C6C  2002      2893          move.l    D2,D0
00001C6E  E588      2894          lsl.l     #2,D0
00001C70  41F9 0B00 2895          lea       _BreakPointSetOrCleared.L,A0
00001C74  015E      
00001C76  42B0 0800 2896          clr.l     0(A0,D0.L)
00001C7A  5282      2897          addq.l    #1,D2
00001C7C  60A6      2898          bra       KillAllBreakPoints_1
                    2899   KillAllBreakPoints_3:
00001C7E  241F      2900          move.l    (A7)+,D2
00001C80  4E5E      2901          unlk      A6
00001C82  4E75      2902          rts
                    2903   ; }
                    2904   ; //BreakPointDisplay() ;       // display the break points
                    2905   ; }
                    2906   ; void KillAllWatchPoints(void)
                    2907   ; {
                    2908   _KillAllWatchPoints:
00001C84  2F02      2909          move.l    D2,-(A7)
                    2910   ; int i ;
                    2911   ; for(i = 0; i < 8; i++)  {
00001C86  4282      2912          clr.l     D2
                    2913   KillAllWatchPoints_1:
00001C88  0C82 0000 2914          cmp.l     #8,D2
00001C8C  0008      
00001C8E  6C20      2915          bge.s     KillAllWatchPoints_3
                    2916   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C90  2002      2917          move.l    D2,D0
00001C92  E588      2918          lsl.l     #2,D0
00001C94  41F9 0B00 2919          lea       _WatchPointAddress.L,A0
00001C98  0182      
00001C9A  42B0 0800 2920          clr.l     0(A0,D0.L)
                    2921   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C9E  2002      2922          move.l    D2,D0
00001CA0  E588      2923          lsl.l     #2,D0
00001CA2  41F9 0B00 2924          lea       _WatchPointSetOrCleared.L,A0
00001CA6  01A2      
00001CA8  42B0 0800 2925          clr.l     0(A0,D0.L)
00001CAC  5282      2926          addq.l    #1,D2
00001CAE  60D8      2927          bra       KillAllWatchPoints_1
                    2928   KillAllWatchPoints_3:
00001CB0  241F      2929          move.l    (A7)+,D2
00001CB2  4E75      2930          rts
                    2931   ; }
                    2932   ; //WatchPointDisplay() ;       // display the break points
                    2933   ; }
                    2934   ; void SetBreakPoint(void)
                    2935   ; {
                    2936   _SetBreakPoint:
00001CB4  4E56 FFFC 2937          link      A6,#-4
00001CB8  48E7 3830 2938          movem.l   D2/D3/D4/A2/A3,-(A7)
00001CBC  45F9 0000 2939          lea       _printf.L,A2
00001CC0  3684      
00001CC2  47F9 0B00 2940          lea       _BreakPointSetOrCleared.L,A3
00001CC6  015E      
                    2941   ; int i ;
                    2942   ; int BPNumber;
                    2943   ; int BPAddress;
                    2944   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2945   ; // see if any free break points
                    2946   ; for(i = 0; i < 8; i ++) {
00001CC8  4282      2947          clr.l     D2
                    2948   SetBreakPoint_1:
00001CCA  0C82 0000 2949          cmp.l     #8,D2
00001CCE  0008      
00001CD0  6C10      2950          bge.s     SetBreakPoint_3
                    2951   ; if( BreakPointSetOrCleared[i] == 0)
00001CD2  2002      2952          move.l    D2,D0
00001CD4  E588      2953          lsl.l     #2,D0
00001CD6  2033 0800 2954          move.l    0(A3,D0.L),D0
00001CDA  6602      2955          bne.s     SetBreakPoint_4
                    2956   ; break ;         // if spare BP found allow user to set it
00001CDC  6004      2957          bra.s     SetBreakPoint_3
                    2958   SetBreakPoint_4:
00001CDE  5282      2959          addq.l    #1,D2
00001CE0  60E8      2960          bra       SetBreakPoint_1
                    2961   SetBreakPoint_3:
                    2962   ; }
                    2963   ; if(i == 8) {
00001CE2  0C82 0000 2964          cmp.l     #8,D2
00001CE6  0008      
00001CE8  660E      2965          bne.s     SetBreakPoint_6
                    2966   ; printf("\r\nNo FREE Break Points.....") ;
00001CEA  4879 0000 2967          pea       @m68kde~1_71.L
00001CEE  4700      
00001CF0  4E92      2968          jsr       (A2)
00001CF2  584F      2969          addq.w    #4,A7
                    2970   ; return ;
00001CF4  6000 00D6 2971          bra       SetBreakPoint_15
                    2972   SetBreakPoint_6:
                    2973   ; }
                    2974   ; printf("\r\nBreak Point Address: ") ;
00001CF8  4879 0000 2975          pea       @m68kde~1_72.L
00001CFC  471C      
00001CFE  4E92      2976          jsr       (A2)
00001D00  584F      2977          addq.w    #4,A7
                    2978   ; BPAddress = Get8HexDigits(0) ;
00001D02  42A7      2979          clr.l     -(A7)
00001D04  4EB8 0CA4 2980          jsr       _Get8HexDigits
00001D08  584F      2981          addq.w    #4,A7
00001D0A  2600      2982          move.l    D0,D3
                    2983   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D0C  2803      2984          move.l    D3,D4
                    2985   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D0E  2003      2986          move.l    D3,D0
00001D10  C0BC 0000 2987          and.l     #1,D0
00001D14  0001      
00001D16  0C80 0000 2988          cmp.l     #1,D0
00001D1A  0001      
00001D1C  660E      2989          bne.s     SetBreakPoint_9
                    2990   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D1E  4879 0000 2991          pea       @m68kde~1_73.L
00001D22  4734      
00001D24  4E92      2992          jsr       (A2)
00001D26  584F      2993          addq.w    #4,A7
                    2994   ; return ;
00001D28  6000 00A2 2995          bra       SetBreakPoint_15
                    2996   SetBreakPoint_9:
                    2997   ; }
                    2998   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D2C  0C83 0000 2999          cmp.l     #32768,D3
00001D30  8000      
00001D32  640E      3000          bhs.s     SetBreakPoint_11
                    3001   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D34  4879 0000 3002          pea       @m68kde~1_74.L
00001D38  476A      
00001D3A  4E92      3003          jsr       (A2)
00001D3C  584F      3004          addq.w    #4,A7
                    3005   ; return ;
00001D3E  6000 008C 3006          bra       SetBreakPoint_15
                    3007   SetBreakPoint_11:
                    3008   ; }
                    3009   ; // search for first free bp or existing same BP
                    3010   ; for(i = 0; i < 8; i++)  {
00001D42  4282      3011          clr.l     D2
                    3012   SetBreakPoint_13:
00001D44  0C82 0000 3013          cmp.l     #8,D2
00001D48  0008      
00001D4A  6C00 0080 3014          bge       SetBreakPoint_15
                    3015   ; if(BreakPointAddress[i] == BPAddress)   {
00001D4E  2002      3016          move.l    D2,D0
00001D50  E588      3017          lsl.l     #2,D0
00001D52  41F9 0B00 3018          lea       _BreakPointAddress.L,A0
00001D56  012E      
00001D58  B6B0 0800 3019          cmp.l     0(A0,D0.L),D3
00001D5C  6610      3020          bne.s     SetBreakPoint_16
                    3021   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001D5E  2F03      3022          move.l    D3,-(A7)
00001D60  4879 0000 3023          pea       @m68kde~1_75.L
00001D64  47B2      
00001D66  4E92      3024          jsr       (A2)
00001D68  504F      3025          addq.w    #8,A7
                    3026   ; return ;
00001D6A  6000 0060 3027          bra       SetBreakPoint_15
                    3028   SetBreakPoint_16:
                    3029   ; }
                    3030   ; if(BreakPointSetOrCleared[i] == 0) {
00001D6E  2002      3031          move.l    D2,D0
00001D70  E588      3032          lsl.l     #2,D0
00001D72  2033 0800 3033          move.l    0(A3,D0.L),D0
00001D76  6600 004E 3034          bne       SetBreakPoint_18
                    3035   ; // set BP here
                    3036   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001D7A  2002      3037          move.l    D2,D0
00001D7C  E588      3038          lsl.l     #2,D0
00001D7E  27BC 0000 3039          move.l    #1,0(A3,D0.L)
00001D82  0001 0800 
                    3040   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001D86  2044      3041          move.l    D4,A0
00001D88  2002      3042          move.l    D2,D0
00001D8A  E388      3043          lsl.l     #1,D0
00001D8C  43F9 0B00 3044          lea       _BreakPointInstruction.L,A1
00001D90  014E      
00001D92  3390 0800 3045          move.w    (A0),0(A1,D0.L)
                    3046   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001D96  2F04      3047          move.l    D4,-(A7)
00001D98  4879 0000 3048          pea       @m68kde~1_76.L
00001D9C  47EA      
00001D9E  4E92      3049          jsr       (A2)
00001DA0  504F      3050          addq.w    #8,A7
                    3051   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DA2  2044      3052          move.l    D4,A0
00001DA4  30BC 4E4E 3053          move.w    #20046,(A0)
                    3054   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DA8  2002      3055          move.l    D2,D0
00001DAA  E588      3056          lsl.l     #2,D0
00001DAC  41F9 0B00 3057          lea       _BreakPointAddress.L,A0
00001DB0  012E      
00001DB2  2183 0800 3058          move.l    D3,0(A0,D0.L)
                    3059   ; printf("\r\n") ;
00001DB6  4879 0000 3060          pea       @m68kde~1_1.L
00001DBA  405A      
00001DBC  4E92      3061          jsr       (A2)
00001DBE  584F      3062          addq.w    #4,A7
                    3063   ; BreakPointDisplay() ;       // display the break points
00001DC0  4EB8 1884 3064          jsr       _BreakPointDisplay
                    3065   ; return ;
00001DC4  6006      3066          bra.s     SetBreakPoint_15
                    3067   SetBreakPoint_18:
00001DC6  5282      3068          addq.l    #1,D2
00001DC8  6000 FF7A 3069          bra       SetBreakPoint_13
                    3070   SetBreakPoint_15:
00001DCC  4CDF 0C1C 3071          movem.l   (A7)+,D2/D3/D4/A2/A3
00001DD0  4E5E      3072          unlk      A6
00001DD2  4E75      3073          rts
                    3074   ; }
                    3075   ; }
                    3076   ; }
                    3077   ; void SetWatchPoint(void)
                    3078   ; {
                    3079   _SetWatchPoint:
00001DD4  4E56 FFF8 3080          link      A6,#-8
00001DD8  48E7 3030 3081          movem.l   D2/D3/A2/A3,-(A7)
00001DDC  45F9 0000 3082          lea       _printf.L,A2
00001DE0  3684      
00001DE2  47F9 0B00 3083          lea       _WatchPointSetOrCleared.L,A3
00001DE6  01A2      
                    3084   ; int i ;
                    3085   ; int WPNumber;
                    3086   ; int WPAddress;
                    3087   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3088   ; // see if any free break points
                    3089   ; for(i = 0; i < 8; i ++) {
00001DE8  4282      3090          clr.l     D2
                    3091   SetWatchPoint_1:
00001DEA  0C82 0000 3092          cmp.l     #8,D2
00001DEE  0008      
00001DF0  6C10      3093          bge.s     SetWatchPoint_3
                    3094   ; if( WatchPointSetOrCleared[i] == 0)
00001DF2  2002      3095          move.l    D2,D0
00001DF4  E588      3096          lsl.l     #2,D0
00001DF6  2033 0800 3097          move.l    0(A3,D0.L),D0
00001DFA  6602      3098          bne.s     SetWatchPoint_4
                    3099   ; break ;         // if spare WP found allow user to set it
00001DFC  6004      3100          bra.s     SetWatchPoint_3
                    3101   SetWatchPoint_4:
00001DFE  5282      3102          addq.l    #1,D2
00001E00  60E8      3103          bra       SetWatchPoint_1
                    3104   SetWatchPoint_3:
                    3105   ; }
                    3106   ; if(i == 8) {
00001E02  0C82 0000 3107          cmp.l     #8,D2
00001E06  0008      
00001E08  660E      3108          bne.s     SetWatchPoint_6
                    3109   ; printf("\r\nNo FREE Watch Points.....") ;
00001E0A  4879 0000 3110          pea       @m68kde~1_77.L
00001E0E  4810      
00001E10  4E92      3111          jsr       (A2)
00001E12  584F      3112          addq.w    #4,A7
                    3113   ; return ;
00001E14  6000 008C 3114          bra       SetWatchPoint_11
                    3115   SetWatchPoint_6:
                    3116   ; }
                    3117   ; printf("\r\nWatch Point Address: ") ;
00001E18  4879 0000 3118          pea       @m68kde~1_78.L
00001E1C  482C      
00001E1E  4E92      3119          jsr       (A2)
00001E20  584F      3120          addq.w    #4,A7
                    3121   ; WPAddress = Get8HexDigits(0) ;
00001E22  42A7      3122          clr.l     -(A7)
00001E24  4EB8 0CA4 3123          jsr       _Get8HexDigits
00001E28  584F      3124          addq.w    #4,A7
00001E2A  2600      3125          move.l    D0,D3
                    3126   ; // search for first free wp or existing same wp
                    3127   ; for(i = 0; i < 8; i++)  {
00001E2C  4282      3128          clr.l     D2
                    3129   SetWatchPoint_9:
00001E2E  0C82 0000 3130          cmp.l     #8,D2
00001E32  0008      
00001E34  6C00 006C 3131          bge       SetWatchPoint_11
                    3132   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E38  2002      3133          move.l    D2,D0
00001E3A  E588      3134          lsl.l     #2,D0
00001E3C  41F9 0B00 3135          lea       _WatchPointAddress.L,A0
00001E40  0182      
00001E42  B6B0 0800 3136          cmp.l     0(A0,D0.L),D3
00001E46  6614      3137          bne.s     SetWatchPoint_12
00001E48  4A83      3138          tst.l     D3
00001E4A  6710      3139          beq.s     SetWatchPoint_12
                    3140   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E4C  2F03      3141          move.l    D3,-(A7)
00001E4E  4879 0000 3142          pea       @m68kde~1_79.L
00001E52  4844      
00001E54  4E92      3143          jsr       (A2)
00001E56  504F      3144          addq.w    #8,A7
                    3145   ; return ;
00001E58  6000 0048 3146          bra       SetWatchPoint_11
                    3147   SetWatchPoint_12:
                    3148   ; }
                    3149   ; if(WatchPointSetOrCleared[i] == 0) {
00001E5C  2002      3150          move.l    D2,D0
00001E5E  E588      3151          lsl.l     #2,D0
00001E60  2033 0800 3152          move.l    0(A3,D0.L),D0
00001E64  6600 0038 3153          bne       SetWatchPoint_14
                    3154   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001E68  2002      3155          move.l    D2,D0
00001E6A  E588      3156          lsl.l     #2,D0
00001E6C  27BC 0000 3157          move.l    #1,0(A3,D0.L)
00001E70  0001 0800 
                    3158   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001E74  2F03      3159          move.l    D3,-(A7)
00001E76  4879 0000 3160          pea       @m68kde~1_80.L
00001E7A  487A      
00001E7C  4E92      3161          jsr       (A2)
00001E7E  504F      3162          addq.w    #8,A7
                    3163   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001E80  2002      3164          move.l    D2,D0
00001E82  E588      3165          lsl.l     #2,D0
00001E84  41F9 0B00 3166          lea       _WatchPointAddress.L,A0
00001E88  0182      
00001E8A  2183 0800 3167          move.l    D3,0(A0,D0.L)
                    3168   ; printf("\r\n") ;
00001E8E  4879 0000 3169          pea       @m68kde~1_1.L
00001E92  405A      
00001E94  4E92      3170          jsr       (A2)
00001E96  584F      3171          addq.w    #4,A7
                    3172   ; WatchPointDisplay() ;       // display the break points
00001E98  4EB8 1958 3173          jsr       _WatchPointDisplay
                    3174   ; return ;
00001E9C  6004      3175          bra.s     SetWatchPoint_11
                    3176   SetWatchPoint_14:
00001E9E  5282      3177          addq.l    #1,D2
00001EA0  608C      3178          bra       SetWatchPoint_9
                    3179   SetWatchPoint_11:
00001EA2  4CDF 0C0C 3180          movem.l   (A7)+,D2/D3/A2/A3
00001EA6  4E5E      3181          unlk      A6
00001EA8  4E75      3182          rts
                    3183   ; }
                    3184   ; }
                    3185   ; }
                    3186   ; void HandleBreakPoint(void)
                    3187   ; {
                    3188   _HandleBreakPoint:
00001EAA  4E56 FFFC 3189          link      A6,#-4
00001EAE  48E7 0038 3190          movem.l   A2/A3/A4,-(A7)
00001EB2  45F9 0B00 3191          lea       _i.L,A2
00001EB6  00C4      
00001EB8  47F9 0000 3192          lea       _printf.L,A3
00001EBC  3684      
00001EBE  49F9 0B00 3193          lea       _PC.L,A4
00001EC2  0120      
                    3194   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3195   ; // now we have to put the break point back to run the instruction
                    3196   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3197   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001EC4  5594      3198          subq.l    #2,(A4)
                    3199   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001EC6  4879 0000 3200          pea       @m68kde~1_81.L
00001ECA  48A0      
00001ECC  4E93      3201          jsr       (A3)
00001ECE  584F      3202          addq.w    #4,A7
                    3203   ; printf("\r\nSingle Step : [ON]") ;
00001ED0  4879 0000 3204          pea       @m68kde~1_82.L
00001ED4  48B4      
00001ED6  4E93      3205          jsr       (A3)
00001ED8  584F      3206          addq.w    #4,A7
                    3207   ; printf("\r\nBreakPoints : [Enabled]") ;
00001EDA  4879 0000 3208          pea       @m68kde~1_83.L
00001EDE  48CA      
00001EE0  4E93      3209          jsr       (A3)
00001EE2  584F      3210          addq.w    #4,A7
                    3211   ; // now clear the break point (put original instruction back)
                    3212   ; ProgramBreakPointAddress = PC ;
00001EE4  2D54 FFFC 3213          move.l    (A4),-4(A6)
                    3214   ; for(i = 0; i < 8; i ++) {
00001EE8  4292      3215          clr.l     (A2)
                    3216   HandleBreakPoint_1:
00001EEA  2012      3217          move.l    (A2),D0
00001EEC  0C80 0000 3218          cmp.l     #8,D0
00001EF0  0008      
00001EF2  6400 0056 3219          bhs       HandleBreakPoint_3
                    3220   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001EF6  2012      3221          move.l    (A2),D0
00001EF8  E588      3222          lsl.l     #2,D0
00001EFA  41F9 0B00 3223          lea       _BreakPointAddress.L,A0
00001EFE  012E      
00001F00  2230 0800 3224          move.l    0(A0,D0.L),D1
00001F04  B294      3225          cmp.l     (A4),D1
00001F06  6600 003E 3226          bne       HandleBreakPoint_4
                    3227   ; BreakPointAddress[i] = 0 ;
00001F0A  2012      3228          move.l    (A2),D0
00001F0C  E588      3229          lsl.l     #2,D0
00001F0E  41F9 0B00 3230          lea       _BreakPointAddress.L,A0
00001F12  012E      
00001F14  42B0 0800 3231          clr.l     0(A0,D0.L)
                    3232   ; BreakPointSetOrCleared[i] = 0 ;
00001F18  2012      3233          move.l    (A2),D0
00001F1A  E588      3234          lsl.l     #2,D0
00001F1C  41F9 0B00 3235          lea       _BreakPointSetOrCleared.L,A0
00001F20  015E      
00001F22  42B0 0800 3236          clr.l     0(A0,D0.L)
                    3237   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F26  2012      3238          move.l    (A2),D0
00001F28  E388      3239          lsl.l     #1,D0
00001F2A  41F9 0B00 3240          lea       _BreakPointInstruction.L,A0
00001F2E  014E      
00001F30  226E FFFC 3241          move.l    -4(A6),A1
00001F34  32B0 0800 3242          move.w    0(A0,D0.L),(A1)
                    3243   ; BreakPointInstruction[i] = 0 ;
00001F38  2012      3244          move.l    (A2),D0
00001F3A  E388      3245          lsl.l     #1,D0
00001F3C  41F9 0B00 3246          lea       _BreakPointInstruction.L,A0
00001F40  014E      
00001F42  4270 0800 3247          clr.w     0(A0,D0.L)
                    3248   HandleBreakPoint_4:
00001F46  5292      3249          addq.l    #1,(A2)
00001F48  60A0      3250          bra       HandleBreakPoint_1
                    3251   HandleBreakPoint_3:
                    3252   ; }
                    3253   ; }
                    3254   ; DumpRegisters() ;
00001F4A  4EB8 10D6 3255          jsr       _DumpRegisters
                    3256   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F4E  4879 0000 3257          pea       @m68kde~1_45.L
00001F52  4446      
00001F54  4E93      3258          jsr       (A3)
00001F56  584F      3259          addq.w    #4,A7
                    3260   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001F58  4879 0000 3261          pea       @m68kde~1_84.L
00001F5C  48E4      
00001F5E  4E93      3262          jsr       (A3)
00001F60  584F      3263          addq.w    #4,A7
                    3264   ; menu() ;
00001F62  4EB9 0000 3265          jsr       _menu
00001F66  216E      
00001F68  4CDF 1C00 3266          movem.l   (A7)+,A2/A3/A4
00001F6C  4E5E      3267          unlk      A6
00001F6E  4E75      3268          rts
                    3269   ; }
                    3270   ; void UnknownCommand()
                    3271   ; {
                    3272   _UnknownCommand:
                    3273   ; printf("\r\nUnknown Command.....\r\n") ;
00001F70  4879 0000 3274          pea       @m68kde~1_85.L
00001F74  490C      
00001F76  4EB9 0000 3275          jsr       _printf
00001F7A  3684      
00001F7C  584F      3276          addq.w    #4,A7
                    3277   ; Help() ;
00001F7E  4EB9 0000 3278          jsr       _Help
00001F82  2094      
00001F84  4E75      3279          rts
                    3280   ; }
                    3281   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3282   ; void CallDebugMonitor(void)
                    3283   ; {
                    3284   _CallDebugMonitor:
                    3285   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001F86  4879 0000 3286          pea       @m68kde~1_86.L
00001F8A  4926      
00001F8C  4EB9 0000 3287          jsr       _printf
00001F90  3684      
00001F92  584F      3288          addq.w    #4,A7
                    3289   ; menu();
00001F94  4EB9 0000 3290          jsr       _menu
00001F98  216E      
00001F9A  4E75      3291          rts
                    3292   ; }
                    3293   ; void Breakpoint(void)
                    3294   ; {
                    3295   _Breakpoint:
00001F9C  2F02      3296          move.l    D2,-(A7)
                    3297   ; char c;
                    3298   ; c = toupper(_getch());
00001F9E  2F00      3299          move.l    D0,-(A7)
00001FA0  4EB8 0B68 3300          jsr       __getch
00001FA4  2200      3301          move.l    D0,D1
00001FA6  201F      3302          move.l    (A7)+,D0
00001FA8  2F01      3303          move.l    D1,-(A7)
00001FAA  4EB9 0000 3304          jsr       _toupper
00001FAE  2D90      
00001FB0  584F      3305          addq.w    #4,A7
00001FB2  1400      3306          move.b    D0,D2
                    3307   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FB4  0C02 0044 3308          cmp.b     #68,D2
00001FB8  6608      3309          bne.s     Breakpoint_1
                    3310   ; BreakPointDisplay() ;
00001FBA  4EB8 1884 3311          jsr       _BreakPointDisplay
00001FBE  6000 0054 3312          bra       Breakpoint_10
                    3313   Breakpoint_1:
                    3314   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001FC2  0C02 004B 3315          cmp.b     #75,D2
00001FC6  6630      3316          bne.s     Breakpoint_3
                    3317   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001FC8  4879 0000 3318          pea       @m68kde~1_87.L
00001FCC  4946      
00001FCE  4EB9 0000 3319          jsr       _printf
00001FD2  3684      
00001FD4  584F      3320          addq.w    #4,A7
                    3321   ; c = toupper(_getch());
00001FD6  2F00      3322          move.l    D0,-(A7)
00001FD8  4EB8 0B68 3323          jsr       __getch
00001FDC  2200      3324          move.l    D0,D1
00001FDE  201F      3325          move.l    (A7)+,D0
00001FE0  2F01      3326          move.l    D1,-(A7)
00001FE2  4EB9 0000 3327          jsr       _toupper
00001FE6  2D90      
00001FE8  584F      3328          addq.w    #4,A7
00001FEA  1400      3329          move.b    D0,D2
                    3330   ; if(c == (char)('Y'))
00001FEC  0C02 0059 3331          cmp.b     #89,D2
00001FF0  6604      3332          bne.s     Breakpoint_5
                    3333   ; KillAllBreakPoints() ;
00001FF2  4EB8 1C1C 3334          jsr       _KillAllBreakPoints
                    3335   Breakpoint_5:
00001FF6  601C      3336          bra.s     Breakpoint_10
                    3337   Breakpoint_3:
                    3338   ; }
                    3339   ; else if(c == (char)('S')) {
00001FF8  0C02 0053 3340          cmp.b     #83,D2
00001FFC  6606      3341          bne.s     Breakpoint_7
                    3342   ; SetBreakPoint() ;
00001FFE  4EB8 1CB4 3343          jsr       _SetBreakPoint
00002002  6010      3344          bra.s     Breakpoint_10
                    3345   Breakpoint_7:
                    3346   ; }
                    3347   ; else if(c == (char)('C')) {
00002004  0C02 0043 3348          cmp.b     #67,D2
00002008  6606      3349          bne.s     Breakpoint_9
                    3350   ; BreakPointClear() ;
0000200A  4EB8 1A04 3351          jsr       _BreakPointClear
0000200E  6004      3352          bra.s     Breakpoint_10
                    3353   Breakpoint_9:
                    3354   ; }
                    3355   ; else
                    3356   ; UnknownCommand() ;
00002010  4EB8 1F70 3357          jsr       _UnknownCommand
                    3358   Breakpoint_10:
00002014  241F      3359          move.l    (A7)+,D2
00002016  4E75      3360          rts
                    3361   ; }
                    3362   ; void Watchpoint(void)
                    3363   ; {
                    3364   _Watchpoint:
00002018  2F02      3365          move.l    D2,-(A7)
                    3366   ; char c;
                    3367   ; c = toupper(_getch());
0000201A  2F00      3368          move.l    D0,-(A7)
0000201C  4EB8 0B68 3369          jsr       __getch
00002020  2200      3370          move.l    D0,D1
00002022  201F      3371          move.l    (A7)+,D0
00002024  2F01      3372          move.l    D1,-(A7)
00002026  4EB9 0000 3373          jsr       _toupper
0000202A  2D90      
0000202C  584F      3374          addq.w    #4,A7
0000202E  1400      3375          move.b    D0,D2
                    3376   ; if( c == (char)('D'))                                      // WatchPoint Display
00002030  0C02 0044 3377          cmp.b     #68,D2
00002034  6608      3378          bne.s     Watchpoint_1
                    3379   ; WatchPointDisplay() ;
00002036  4EB8 1958 3380          jsr       _WatchPointDisplay
0000203A  6000 0054 3381          bra       Watchpoint_10
                    3382   Watchpoint_1:
                    3383   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000203E  0C02 004B 3384          cmp.b     #75,D2
00002042  6630      3385          bne.s     Watchpoint_3
                    3386   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002044  4879 0000 3387          pea       @m68kde~1_88.L
00002048  4968      
0000204A  4EB9 0000 3388          jsr       _printf
0000204E  3684      
00002050  584F      3389          addq.w    #4,A7
                    3390   ; c = toupper(_getch());
00002052  2F00      3391          move.l    D0,-(A7)
00002054  4EB8 0B68 3392          jsr       __getch
00002058  2200      3393          move.l    D0,D1
0000205A  201F      3394          move.l    (A7)+,D0
0000205C  2F01      3395          move.l    D1,-(A7)
0000205E  4EB9 0000 3396          jsr       _toupper
00002062  2D90      
00002064  584F      3397          addq.w    #4,A7
00002066  1400      3398          move.b    D0,D2
                    3399   ; if(c == (char)('Y'))
00002068  0C02 0059 3400          cmp.b     #89,D2
0000206C  6604      3401          bne.s     Watchpoint_5
                    3402   ; KillAllWatchPoints() ;
0000206E  4EB8 1C84 3403          jsr       _KillAllWatchPoints
                    3404   Watchpoint_5:
00002072  601C      3405          bra.s     Watchpoint_10
                    3406   Watchpoint_3:
                    3407   ; }
                    3408   ; else if(c == (char)('S')) {
00002074  0C02 0053 3409          cmp.b     #83,D2
00002078  6606      3410          bne.s     Watchpoint_7
                    3411   ; SetWatchPoint() ;
0000207A  4EB8 1DD4 3412          jsr       _SetWatchPoint
0000207E  6010      3413          bra.s     Watchpoint_10
                    3414   Watchpoint_7:
                    3415   ; }
                    3416   ; else if(c == (char)('C')) {
00002080  0C02 0043 3417          cmp.b     #67,D2
00002084  6606      3418          bne.s     Watchpoint_9
                    3419   ; WatchPointClear() ;
00002086  4EB8 1ADE 3420          jsr       _WatchPointClear
0000208A  6004      3421          bra.s     Watchpoint_10
                    3422   Watchpoint_9:
                    3423   ; }
                    3424   ; else
                    3425   ; UnknownCommand() ;
0000208C  4EB8 1F70 3426          jsr       _UnknownCommand
                    3427   Watchpoint_10:
00002090  241F      3428          move.l    (A7)+,D2
00002092  4E75      3429          rts
                    3430   ; }
                    3431   ; void Help(void)
                    3432   ; {
                    3433   _Help:
00002094  48E7 2020 3434          movem.l   D2/A2,-(A7)
00002098  45F9 0000 3435          lea       _printf.L,A2
0000209C  3684      
                    3436   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000209E  41F9 0000 3437          lea       @m68kde~1_89.L,A0
000020A2  498A      
000020A4  2408      3438          move.l    A0,D2
                    3439   ; printf(banner) ;
000020A6  2F02      3440          move.l    D2,-(A7)
000020A8  4E92      3441          jsr       (A2)
000020AA  584F      3442          addq.w    #4,A7
                    3443   ; printf("\r\n  Debugger Command Summary") ;
000020AC  4879 0000 3444          pea       @m68kde~1_90.L
000020B0  49CE      
000020B2  4E92      3445          jsr       (A2)
000020B4  584F      3446          addq.w    #4,A7
                    3447   ; printf(banner) ;
000020B6  2F02      3448          move.l    D2,-(A7)
000020B8  4E92      3449          jsr       (A2)
000020BA  584F      3450          addq.w    #4,A7
                    3451   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000020BC  4879 0000 3452          pea       @m68kde~1_91.L
000020C0  49EC      
000020C2  4E92      3453          jsr       (A2)
000020C4  584F      3454          addq.w    #4,A7
                    3455   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000020C6  4879 0000 3456          pea       @m68kde~1_92.L
000020CA  4A30      
000020CC  4E92      3457          jsr       (A2)
000020CE  584F      3458          addq.w    #4,A7
                    3459   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000020D0  4879 0000 3460          pea       @m68kde~1_93.L
000020D4  4A68      
000020D6  4E92      3461          jsr       (A2)
000020D8  584F      3462          addq.w    #4,A7
                    3463   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000020DA  4879 0000 3464          pea       @m68kde~1_94.L
000020DE  4AA2      
000020E0  4E92      3465          jsr       (A2)
000020E2  584F      3466          addq.w    #4,A7
                    3467   ; printf("\r\n  E            - Enter String into Memory") ;
000020E4  4879 0000 3468          pea       @m68kde~1_95.L
000020E8  4AD4      
000020EA  4E92      3469          jsr       (A2)
000020EC  584F      3470          addq.w    #4,A7
                    3471   ; printf("\r\n  F            - Fill Memory with Data") ;
000020EE  4879 0000 3472          pea       @m68kde~1_96.L
000020F2  4B00      
000020F4  4E92      3473          jsr       (A2)
000020F6  584F      3474          addq.w    #4,A7
                    3475   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000020F8  2F39 0B00 3476          move.l    _PC.L,-(A7)
000020FC  0120      
000020FE  4879 0000 3477          pea       @m68kde~1_97.L
00002102  4B2A      
00002104  4E92      3478          jsr       (A2)
00002106  504F      3479          addq.w    #8,A7
                    3480   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002108  4879 0000 3481          pea       @m68kde~1_98.L
0000210C  4B64      
0000210E  4E92      3482          jsr       (A2)
00002110  584F      3483          addq.w    #4,A7
                    3484   ; printf("\r\n  M            - Memory Examine and Change");
00002112  4879 0000 3485          pea       @m68kde~1_99.L
00002116  4B9C      
00002118  4E92      3486          jsr       (A2)
0000211A  584F      3487          addq.w    #4,A7
                    3488   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000211C  4879 0000 3489          pea       @m68kde~1_100.L
00002120  4BCA      
00002122  4E92      3490          jsr       (A2)
00002124  584F      3491          addq.w    #4,A7
                    3492   ; printf("\r\n  R            - Display 68000 Registers") ;
00002126  4879 0000 3493          pea       @m68kde~1_101.L
0000212A  4C04      
0000212C  4E92      3494          jsr       (A2)
0000212E  584F      3495          addq.w    #4,A7
                    3496   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002130  4879 0000 3497          pea       @m68kde~1_102.L
00002134  4C30      
00002136  4E92      3498          jsr       (A2)
00002138  584F      3499          addq.w    #4,A7
                    3500   ; printf("\r\n  TM           - Test Memory") ;
0000213A  4879 0000 3501          pea       @m68kde~1_103.L
0000213E  4C62      
00002140  4E92      3502          jsr       (A2)
00002142  584F      3503          addq.w    #4,A7
                    3504   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002144  4879 0000 3505          pea       @m68kde~1_104.L
00002148  4C82      
0000214A  4E92      3506          jsr       (A2)
0000214C  584F      3507          addq.w    #4,A7
                    3508   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
0000214E  4879 0000 3509          pea       @m68kde~1_105.L
00002152  4CAA      
00002154  4E92      3510          jsr       (A2)
00002156  584F      3511          addq.w    #4,A7
                    3512   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002158  4879 0000 3513          pea       @m68kde~1_106.L
0000215C  4CE0      
0000215E  4E92      3514          jsr       (A2)
00002160  584F      3515          addq.w    #4,A7
                    3516   ; printf(banner) ;
00002162  2F02      3517          move.l    D2,-(A7)
00002164  4E92      3518          jsr       (A2)
00002166  584F      3519          addq.w    #4,A7
00002168  4CDF 0404 3520          movem.l   (A7)+,D2/A2
0000216C  4E75      3521          rts
                    3522   ; }
                    3523   ; void menu(void)
                    3524   ; {
                    3525   _menu:
0000216E  48E7 303C 3526          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002172  45F9 0000 3527          lea       _printf.L,A2
00002176  3684      
00002178  47F9 0B00 3528          lea       _Trace.L,A3
0000217C  00D8      
0000217E  49F9 0B00 3529          lea       _x.L,A4
00002182  00C8      
00002184  4BF9 0B00 3530          lea       _SR.L,A5
00002188  012C      
                    3531   ; char c,c1 ;
                    3532   ; while(1)    {
                    3533   menu_1:
                    3534   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000218A  4EB8 0BA6 3535          jsr       _FlushKeyboard
                    3536   ; printf("\r\n#") ;
0000218E  4879 0000 3537          pea       @m68kde~1_107.L
00002192  4D18      
00002194  4E92      3538          jsr       (A2)
00002196  584F      3539          addq.w    #4,A7
                    3540   ; c = toupper(_getch());
00002198  2F00      3541          move.l    D0,-(A7)
0000219A  4EB8 0B68 3542          jsr       __getch
0000219E  2200      3543          move.l    D0,D1
000021A0  201F      3544          move.l    (A7)+,D0
000021A2  2F01      3545          move.l    D1,-(A7)
000021A4  4EB9 0000 3546          jsr       _toupper
000021A8  2D90      
000021AA  584F      3547          addq.w    #4,A7
000021AC  1400      3548          move.b    D0,D2
                    3549   ; if( c == (char)('L'))                  // load s record file
000021AE  0C02 004C 3550          cmp.b     #76,D2
000021B2  6608      3551          bne.s     menu_4
                    3552   ; Load_SRecordFile() ;
000021B4  4EB8 0E36 3553          jsr       _Load_SRecordFile
000021B8  6000 021E 3554          bra       menu_46
                    3555   menu_4:
                    3556   ; else if( c == (char)('D'))             // dump memory
000021BC  0C02 0044 3557          cmp.b     #68,D2
000021C0  6608      3558          bne.s     menu_6
                    3559   ; DumpMemory() ;
000021C2  4EB8 0CCC 3560          jsr       _DumpMemory
000021C6  6000 0210 3561          bra       menu_46
                    3562   menu_6:
                    3563   ; else if( c == (char)('E'))             // Enter String into memory
000021CA  0C02 0045 3564          cmp.b     #69,D2
000021CE  660A      3565          bne.s     menu_8
                    3566   ; EnterString() ;
000021D0  4EB9 0000 3567          jsr       _EnterString
000021D4  2520      
000021D6  6000 0200 3568          bra       menu_46
                    3569   menu_8:
                    3570   ; else if( c == (char)('F'))             // fill memory
000021DA  0C02 0046 3571          cmp.b     #70,D2
000021DE  6608      3572          bne.s     menu_10
                    3573   ; FillMemory() ;
000021E0  4EB8 0DBC 3574          jsr       _FillMemory
000021E4  6000 01F2 3575          bra       menu_46
                    3576   menu_10:
                    3577   ; else if( c == (char)('G'))  {           // go user program
000021E8  0C02 0047 3578          cmp.b     #71,D2
000021EC  6626      3579          bne.s     menu_12
                    3580   ; printf("\r\nProgram Running.....") ;
000021EE  4879 0000 3581          pea       @m68kde~1_108.L
000021F2  4D1C      
000021F4  4E92      3582          jsr       (A2)
000021F6  584F      3583          addq.w    #4,A7
                    3584   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000021F8  4879 0000 3585          pea       @m68kde~1_109.L
000021FC  4D34      
000021FE  4E92      3586          jsr       (A2)
00002200  584F      3587          addq.w    #4,A7
                    3588   ; GoFlag = 1 ;
00002202  23FC 0000 3589          move.l    #1,_GoFlag.L
00002206  0001 0B00 
0000220A  00DC      
                    3590   ; go() ;
0000220C  4EB8 08B8 3591          jsr       _go
00002210  6000 01C6 3592          bra       menu_46
                    3593   menu_12:
                    3594   ; }
                    3595   ; else if( c == (char)('M'))           // memory examine and modify
00002214  0C02 004D 3596          cmp.b     #77,D2
00002218  6608      3597          bne.s     menu_14
                    3598   ; MemoryChange() ;
0000221A  4EB8 0FC4 3599          jsr       _MemoryChange
0000221E  6000 01B8 3600          bra       menu_46
                    3601   menu_14:
                    3602   ; else if( c == (char)('P'))            // Program Flash Chip
00002222  0C02 0050 3603          cmp.b     #80,D2
00002226  6608      3604          bne.s     menu_16
                    3605   ; ProgramFlashChip() ;
00002228  4EB8 10C4 3606          jsr       _ProgramFlashChip
0000222C  6000 01AA 3607          bra       menu_46
                    3608   menu_16:
                    3609   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002230  0C02 0043 3610          cmp.b     #67,D2
00002234  6608      3611          bne.s     menu_18
                    3612   ; LoadFromFlashChip();
00002236  4EB8 10C6 3613          jsr       _LoadFromFlashChip
0000223A  6000 019C 3614          bra       menu_46
                    3615   menu_18:
                    3616   ; else if( c == (char)('R'))             // dump registers
0000223E  0C02 0052 3617          cmp.b     #82,D2
00002242  6608      3618          bne.s     menu_20
                    3619   ; DumpRegisters() ;
00002244  4EB8 10D6 3620          jsr       _DumpRegisters
00002248  6000 018E 3621          bra       menu_46
                    3622   menu_20:
                    3623   ; else if( c == (char)('.'))           // change registers
0000224C  0C02 002E 3624          cmp.b     #46,D2
00002250  6608      3625          bne.s     menu_22
                    3626   ; ChangeRegisters() ;
00002252  4EB8 15C8 3627          jsr       _ChangeRegisters
00002256  6000 0180 3628          bra       menu_46
                    3629   menu_22:
                    3630   ; else if( c == (char)('B'))              // breakpoint command
0000225A  0C02 0042 3631          cmp.b     #66,D2
0000225E  6608      3632          bne.s     menu_24
                    3633   ; Breakpoint() ;
00002260  4EB8 1F9C 3634          jsr       _Breakpoint
00002264  6000 0172 3635          bra       menu_46
                    3636   menu_24:
                    3637   ; else if( c == (char)('T'))  {          // Test command
00002268  0C02 0054 3638          cmp.b     #84,D2
0000226C  6600 0046 3639          bne       menu_26
                    3640   ; c1 = toupper(_getch()) ;
00002270  2F00      3641          move.l    D0,-(A7)
00002272  4EB8 0B68 3642          jsr       __getch
00002276  2200      3643          move.l    D0,D1
00002278  201F      3644          move.l    (A7)+,D0
0000227A  2F01      3645          move.l    D1,-(A7)
0000227C  4EB9 0000 3646          jsr       _toupper
00002280  2D90      
00002282  584F      3647          addq.w    #4,A7
00002284  1600      3648          move.b    D0,D3
                    3649   ; if(c1 == (char)('M'))                    // memory test
00002286  0C03 004D 3650          cmp.b     #77,D3
0000228A  6608      3651          bne.s     menu_28
                    3652   ; MemoryTest() ;
0000228C  4EB9 0000 3653          jsr       _MemoryTest
00002290  2598      
00002292  601C      3654          bra.s     menu_33
                    3655   menu_28:
                    3656   ; else if( c1 == (char)('S'))              // Switch Test command
00002294  0C03 0053 3657          cmp.b     #83,D3
00002298  6606      3658          bne.s     menu_30
                    3659   ; SwitchTest() ;
0000229A  4EB8 0AA4 3660          jsr       _SwitchTest
0000229E  6010      3661          bra.s     menu_33
                    3662   menu_30:
                    3663   ; else if( c1 == (char)('D'))              // display Test command
000022A0  0C03 0044 3664          cmp.b     #68,D3
000022A4  6606      3665          bne.s     menu_32
                    3666   ; TestLEDS() ;
000022A6  4EB8 0A50 3667          jsr       _TestLEDS
000022AA  6004      3668          bra.s     menu_33
                    3669   menu_32:
                    3670   ; else
                    3671   ; UnknownCommand() ;
000022AC  4EB8 1F70 3672          jsr       _UnknownCommand
                    3673   menu_33:
000022B0  6000 0126 3674          bra       menu_46
                    3675   menu_26:
                    3676   ; }
                    3677   ; else if( c == (char)(' ')) {             // Next instruction command
000022B4  0C02 0020 3678          cmp.b     #32,D2
000022B8  6636      3679          bne.s     menu_34
                    3680   ; DisableBreakPoints() ;
000022BA  4EB8 1B80 3681          jsr       _DisableBreakPoints
                    3682   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000022BE  2013      3683          move.l    (A3),D0
000022C0  0C80 0000 3684          cmp.l     #1,D0
000022C4  0001      
000022C6  661A      3685          bne.s     menu_36
000022C8  2039 0B00 3686          move.l    _GoFlag.L,D0
000022CC  00DC      
000022CE  0C80 0000 3687          cmp.l     #1,D0
000022D2  0001      
000022D4  660C      3688          bne.s     menu_36
                    3689   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000022D6  13FC 0001 3690          move.b    #1,4194314
000022DA  0040 000A 
                    3691   ; return ;
000022DE  6000 00FC 3692          bra       menu_38
                    3693   menu_36:
                    3694   ; }
                    3695   ; else
                    3696   ; printf("\r\nError: Press 'G' first to start program") ;
000022E2  4879 0000 3697          pea       @m68kde~1_110.L
000022E6  4D62      
000022E8  4E92      3698          jsr       (A2)
000022EA  584F      3699          addq.w    #4,A7
000022EC  6000 00EA 3700          bra       menu_46
                    3701   menu_34:
                    3702   ; }
                    3703   ; else if( c == (char)('S')) {             // single step
000022F0  0C02 0053 3704          cmp.b     #83,D2
000022F4  6600 008C 3705          bne       menu_39
                    3706   ; if(Trace == 0) {
000022F8  2013      3707          move.l    (A3),D0
000022FA  6600 0050 3708          bne       menu_41
                    3709   ; DisableBreakPoints() ;
000022FE  4EB8 1B80 3710          jsr       _DisableBreakPoints
                    3711   ; printf("\r\nSingle Step  :[ON]") ;
00002302  4879 0000 3712          pea       @m68kde~1_111.L
00002306  4D8C      
00002308  4E92      3713          jsr       (A2)
0000230A  584F      3714          addq.w    #4,A7
                    3715   ; printf("\r\nBreak Points :[Disabled]") ;
0000230C  4879 0000 3716          pea       @m68kde~1_44.L
00002310  442A      
00002312  4E92      3717          jsr       (A2)
00002314  584F      3718          addq.w    #4,A7
                    3719   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002316  0055 8000 3720          or.w      #32768,(A5)
                    3721   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000231A  2F39 0B00 3722          move.l    _PC.L,-(A7)
0000231E  0120      
00002320  4879 0000 3723          pea       @m68kde~1_112.L
00002324  4DA2      
00002326  4E92      3724          jsr       (A2)
00002328  504F      3725          addq.w    #8,A7
                    3726   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000232A  4879 0000 3727          pea       @m68kde~1_113.L
0000232E  4DD6      
00002330  4E92      3728          jsr       (A2)
00002332  584F      3729          addq.w    #4,A7
                    3730   ; DumpRegisters() ;
00002334  4EB8 10D6 3731          jsr       _DumpRegisters
                    3732   ; Trace = 1;
00002338  26BC 0000 3733          move.l    #1,(A3)
0000233C  0001      
                    3734   ; TraceException = 1;
0000233E  13FC 0001 3735          move.b    #1,4194314
00002342  0040 000A 
                    3736   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002346  28B8 0074 3737          move.l    116,(A4)
0000234A  6032      3738          bra.s     menu_42
                    3739   menu_41:
                    3740   ; }
                    3741   ; else {
                    3742   ; Trace = 0 ;
0000234C  4293      3743          clr.l     (A3)
                    3744   ; TraceException = 0 ;
0000234E  4239 0040 3745          clr.b     4194314
00002352  000A      
                    3746   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002354  28B8 0074 3747          move.l    116,(A4)
                    3748   ; EnableBreakPoints() ;
00002358  4EB8 1BD4 3749          jsr       _EnableBreakPoints
                    3750   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000235C  0255 7FFF 3751          and.w     #32767,(A5)
                    3752   ; printf("\r\nSingle Step : [OFF]") ;
00002360  4879 0000 3753          pea       @m68kde~1_114.L
00002364  4DFA      
00002366  4E92      3754          jsr       (A2)
00002368  584F      3755          addq.w    #4,A7
                    3756   ; printf("\r\nBreak Points :[Enabled]") ;
0000236A  4879 0000 3757          pea       @m68kde~1_115.L
0000236E  4E10      
00002370  4E92      3758          jsr       (A2)
00002372  584F      3759          addq.w    #4,A7
                    3760   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002374  4879 0000 3761          pea       @m68kde~1_116.L
00002378  4E2A      
0000237A  4E92      3762          jsr       (A2)
0000237C  584F      3763          addq.w    #4,A7
                    3764   menu_42:
0000237E  6000 0058 3765          bra       menu_46
                    3766   menu_39:
                    3767   ; }
                    3768   ; }
                    3769   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002382  0C02 001B 3770          cmp.b     #27,D2
00002386  6600 0040 3771          bne       menu_43
                    3772   ; Trace = 0;
0000238A  4293      3773          clr.l     (A3)
                    3774   ; TraceException = 0;
0000238C  4239 0040 3775          clr.b     4194314
00002390  000A      
                    3776   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002392  28B8 0074 3777          move.l    116,(A4)
                    3778   ; EnableBreakPoints() ;
00002396  4EB8 1BD4 3779          jsr       _EnableBreakPoints
                    3780   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000239A  0255 7FFF 3781          and.w     #32767,(A5)
                    3782   ; printf("\r\nSingle Step  :[OFF]") ;
0000239E  4879 0000 3783          pea       @m68kde~1_117.L
000023A2  4E54      
000023A4  4E92      3784          jsr       (A2)
000023A6  584F      3785          addq.w    #4,A7
                    3786   ; printf("\r\nBreak Points :[Enabled]");
000023A8  4879 0000 3787          pea       @m68kde~1_115.L
000023AC  4E10      
000023AE  4E92      3788          jsr       (A2)
000023B0  584F      3789          addq.w    #4,A7
                    3790   ; printf("\r\nProgram Running.....") ;
000023B2  4879 0000 3791          pea       @m68kde~1_108.L
000023B6  4D1C      
000023B8  4E92      3792          jsr       (A2)
000023BA  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023BC  4879 0000 3795          pea       @m68kde~1_109.L
000023C0  4D34      
000023C2  4E92      3796          jsr       (A2)
000023C4  584F      3797          addq.w    #4,A7
                    3798   ; return ;
000023C6  6014      3799          bra.s     menu_38
                    3800   menu_43:
                    3801   ; }
                    3802   ; else if( c == (char)('W'))              // Watchpoint command
000023C8  0C02 0057 3803          cmp.b     #87,D2
000023CC  6606      3804          bne.s     menu_45
                    3805   ; Watchpoint() ;
000023CE  4EB8 2018 3806          jsr       _Watchpoint
000023D2  6004      3807          bra.s     menu_46
                    3808   menu_45:
                    3809   ; else
                    3810   ; UnknownCommand() ;
000023D4  4EB8 1F70 3811          jsr       _UnknownCommand
                    3812   menu_46:
000023D8  6000 FDB0 3813          bra       menu_1
                    3814   menu_38:
000023DC  4CDF 3C0C 3815          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000023E0  4E75      3816          rts
                    3817   ; }
                    3818   ; }
                    3819   ; void PrintErrorMessageandAbort(char *string) {
                    3820   _PrintErrorMessageandAbort:
000023E2  4E56 0000 3821          link      A6,#0
                    3822   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000023E6  4879 0000 3823          pea       @m68kde~1_118.L
000023EA  4E6A      
000023EC  4EB9 0000 3824          jsr       _printf
000023F0  3684      
000023F2  584F      3825          addq.w    #4,A7
                    3826   ; printf("%s\r\n", string) ;
000023F4  2F2E 0008 3827          move.l    8(A6),-(A7)
000023F8  4879 0000 3828          pea       @m68kde~1_119.L
000023FC  4E86      
000023FE  4EB9 0000 3829          jsr       _printf
00002402  3684      
00002404  504F      3830          addq.w    #8,A7
                    3831   ; menu() ;
00002406  4EB8 216E 3832          jsr       _menu
0000240A  4E5E      3833          unlk      A6
0000240C  4E75      3834          rts
                    3835   ; }
                    3836   ; void IRQMessage(int level) {
                    3837   _IRQMessage:
0000240E  4E56 0000 3838          link      A6,#0
                    3839   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002412  4879 0000 3840          pea       @m68kde~1_120.L
00002416  4E8C      
00002418  4EB9 0000 3841          jsr       _printf
0000241C  3684      
0000241E  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002420  2F2E 0008 3844          move.l    8(A6),-(A7)
00002424  4879 0000 3845          pea       @m68kde~1_121.L
00002428  4EA4      
0000242A  4EB9 0000 3846          jsr       _printf
0000242E  3684      
00002430  504F      3847          addq.w    #8,A7
                    3848   ; menu() ;
00002432  4EB8 216E 3849          jsr       _menu
00002436  4E5E      3850          unlk      A6
00002438  4E75      3851          rts
                    3852   ; }
                    3853   ; void UnhandledIRQ1(void) {
                    3854   _UnhandledIRQ1:
                    3855   ; IRQMessage(1);
0000243A  4878 0001 3856          pea       1
0000243E  4EB8 240E 3857          jsr       _IRQMessage
00002442  584F      3858          addq.w    #4,A7
00002444  4E75      3859          rts
                    3860   ; }
                    3861   ; void UnhandledIRQ2(void) {
                    3862   _UnhandledIRQ2:
                    3863   ; IRQMessage(2);
00002446  4878 0002 3864          pea       2
0000244A  4EB8 240E 3865          jsr       _IRQMessage
0000244E  584F      3866          addq.w    #4,A7
00002450  4E75      3867          rts
                    3868   ; }
                    3869   ; void UnhandledIRQ3(void){
                    3870   _UnhandledIRQ3:
                    3871   ; IRQMessage(3);
00002452  4878 0003 3872          pea       3
00002456  4EB8 240E 3873          jsr       _IRQMessage
0000245A  584F      3874          addq.w    #4,A7
0000245C  4E75      3875          rts
                    3876   ; }
                    3877   ; void UnhandledIRQ4(void) {
                    3878   _UnhandledIRQ4:
                    3879   ; IRQMessage(4);
0000245E  4878 0004 3880          pea       4
00002462  4EB8 240E 3881          jsr       _IRQMessage
00002466  584F      3882          addq.w    #4,A7
00002468  4E75      3883          rts
                    3884   ; }
                    3885   ; void UnhandledIRQ5(void) {
                    3886   _UnhandledIRQ5:
                    3887   ; IRQMessage(5);
0000246A  4878 0005 3888          pea       5
0000246E  4EB8 240E 3889          jsr       _IRQMessage
00002472  584F      3890          addq.w    #4,A7
00002474  4E75      3891          rts
                    3892   ; }
                    3893   ; void UnhandledIRQ6(void) {
                    3894   _UnhandledIRQ6:
                    3895   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002476  4879 0000 3896          pea       @m68kde~1_122.L
0000247A  4EC8      
0000247C  4EB8 23E2 3897          jsr       _PrintErrorMessageandAbort
00002480  584F      3898          addq.w    #4,A7
                    3899   ; menu() ;
00002482  4EB8 216E 3900          jsr       _menu
00002486  4E75      3901          rts
                    3902   ; }
                    3903   ; void UnhandledIRQ7(void) {
                    3904   _UnhandledIRQ7:
                    3905   ; IRQMessage(7);
00002488  4878 0007 3906          pea       7
0000248C  4EB8 240E 3907          jsr       _IRQMessage
00002490  584F      3908          addq.w    #4,A7
00002492  4E75      3909          rts
                    3910   ; }
                    3911   ; void UnhandledTrap(void) {
                    3912   _UnhandledTrap:
                    3913   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002494  4879 0000 3914          pea       @m68kde~1_123.L
00002498  4F08      
0000249A  4EB8 23E2 3915          jsr       _PrintErrorMessageandAbort
0000249E  584F      3916          addq.w    #4,A7
000024A0  4E75      3917          rts
                    3918   ; }
                    3919   ; void BusError() {
                    3920   _BusError:
                    3921   ; PrintErrorMessageandAbort("BUS Error!") ;
000024A2  4879 0000 3922          pea       @m68kde~1_124.L
000024A6  4F1E      
000024A8  4EB8 23E2 3923          jsr       _PrintErrorMessageandAbort
000024AC  584F      3924          addq.w    #4,A7
000024AE  4E75      3925          rts
                    3926   ; }
                    3927   ; void AddressError() {
                    3928   _AddressError:
                    3929   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000024B0  4879 0000 3930          pea       @m68kde~1_125.L
000024B4  4F2A      
000024B6  4EB8 23E2 3931          jsr       _PrintErrorMessageandAbort
000024BA  584F      3932          addq.w    #4,A7
000024BC  4E75      3933          rts
                    3934   ; }
                    3935   ; void IllegalInstruction() {
                    3936   _IllegalInstruction:
                    3937   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000024BE  4879 0000 3938          pea       @m68kde~1_126.L
000024C2  4F3A      
000024C4  4EB8 23E2 3939          jsr       _PrintErrorMessageandAbort
000024C8  584F      3940          addq.w    #4,A7
000024CA  4E75      3941          rts
                    3942   ; }
                    3943   ; void Dividebyzero() {
                    3944   _Dividebyzero:
                    3945   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000024CC  4879 0000 3946          pea       @m68kde~1_127.L
000024D0  4F4E      
000024D2  4EB8 23E2 3947          jsr       _PrintErrorMessageandAbort
000024D6  584F      3948          addq.w    #4,A7
000024D8  4E75      3949          rts
                    3950   ; }
                    3951   ; void Check() {
                    3952   _Check:
                    3953   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000024DA  4879 0000 3954          pea       @m68kde~1_128.L
000024DE  4F5E      
000024E0  4EB8 23E2 3955          jsr       _PrintErrorMessageandAbort
000024E4  584F      3956          addq.w    #4,A7
000024E6  4E75      3957          rts
                    3958   ; }
                    3959   ; void Trapv() {
                    3960   _Trapv:
                    3961   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000024E8  4879 0000 3962          pea       @m68kde~1_129.L
000024EC  4F70      
000024EE  4EB8 23E2 3963          jsr       _PrintErrorMessageandAbort
000024F2  584F      3964          addq.w    #4,A7
000024F4  4E75      3965          rts
                    3966   ; }
                    3967   ; void PrivError() {
                    3968   _PrivError:
                    3969   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000024F6  4879 0000 3970          pea       @m68kde~1_130.L
000024FA  4F82      
000024FC  4EB8 23E2 3971          jsr       _PrintErrorMessageandAbort
00002500  584F      3972          addq.w    #4,A7
00002502  4E75      3973          rts
                    3974   ; }
                    3975   ; void UnitIRQ() {
                    3976   _UnitIRQ:
                    3977   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002504  4879 0000 3978          pea       @m68kde~1_131.L
00002508  4F96      
0000250A  4EB8 23E2 3979          jsr       _PrintErrorMessageandAbort
0000250E  584F      3980          addq.w    #4,A7
00002510  4E75      3981          rts
                    3982   ; }
                    3983   ; void Spurious() {
                    3984   _Spurious:
                    3985   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002512  4879 0000 3986          pea       @m68kde~1_132.L
00002516  4FA8      
00002518  4EB8 23E2 3987          jsr       _PrintErrorMessageandAbort
0000251C  584F      3988          addq.w    #4,A7
0000251E  4E75      3989          rts
                    3990   ; }
                    3991   ; void EnterString(void)
                    3992   ; {
                    3993   _EnterString:
00002520  4E56 FFFC 3994          link      A6,#-4
00002524  2F02      3995          move.l    D2,-(A7)
                    3996   ; unsigned char *Start;
                    3997   ; unsigned char c;
                    3998   ; printf("\r\nStart Address in Memory: ") ;
00002526  4879 0000 3999          pea       @m68kde~1_133.L
0000252A  4FB6      
0000252C  4EB9 0000 4000          jsr       _printf
00002530  3684      
00002532  584F      4001          addq.w    #4,A7
                    4002   ; Start = Get8HexDigits(0) ;
00002534  42A7      4003          clr.l     -(A7)
00002536  4EB8 0CA4 4004          jsr       _Get8HexDigits
0000253A  584F      4005          addq.w    #4,A7
0000253C  2400      4006          move.l    D0,D2
                    4007   ; printf("\r\nEnter String (ESC to end) :") ;
0000253E  4879 0000 4008          pea       @m68kde~1_134.L
00002542  4FD2      
00002544  4EB9 0000 4009          jsr       _printf
00002548  3684      
0000254A  584F      4010          addq.w    #4,A7
                    4011   ; while((c = getchar()) != 0x1b)
                    4012   EnterString_1:
0000254C  4EB9 0000 4013          jsr       _getch
00002550  2CC6      
00002552  1D40 FFFF 4014          move.b    D0,-1(A6)
00002556  0C00 001B 4015          cmp.b     #27,D0
0000255A  670A      4016          beq.s     EnterString_3
                    4017   ; *Start++ = c ;
0000255C  2042      4018          move.l    D2,A0
0000255E  5282      4019          addq.l    #1,D2
00002560  10AE FFFF 4020          move.b    -1(A6),(A0)
00002564  60E6      4021          bra       EnterString_1
                    4022   EnterString_3:
                    4023   ; *Start = 0x00;  // terminate with a null
00002566  2042      4024          move.l    D2,A0
00002568  4210      4025          clr.b     (A0)
0000256A  241F      4026          move.l    (A7)+,D2
0000256C  4E5E      4027          unlk      A6
0000256E  4E75      4028          rts
                    4029   ; }
                    4030   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4031   ; void clearInputBuffer() {
                    4032   _clearInputBuffer:
00002570  4E56 FFFC 4033          link      A6,#-4
                    4034   ; int c;
                    4035   ; while ((c = getchar()) != '\n' && c != EOF);
                    4036   clearInputBuffer_1:
00002574  4EB9 0000 4037          jsr       _getch
00002578  2CC6      
0000257A  2D40 FFFC 4038          move.l    D0,-4(A6)
0000257E  0C80 0000 4039          cmp.l     #10,D0
00002582  000A      
00002584  670E      4040          beq.s     clearInputBuffer_3
00002586  202E FFFC 4041          move.l    -4(A6),D0
0000258A  0C80 FFFF 4042          cmp.l     #-1,D0
0000258E  FFFF      
00002590  6702      4043          beq.s     clearInputBuffer_3
00002592  60E0      4044          bra       clearInputBuffer_1
                    4045   clearInputBuffer_3:
00002594  4E5E      4046          unlk      A6
00002596  4E75      4047          rts
                    4048   ; }
                    4049   ; void MemoryTest(void)
                    4050   ; {
                    4051   _MemoryTest:
00002598  4E56 FF40 4052          link      A6,#-192
0000259C  48E7 3F3C 4053          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000025A0  45F9 0000 4054          lea       _printf.L,A2
000025A4  3684      
000025A6  4BF8 0B68 4055          lea       __getch.L,A5
                    4056   ; unsigned int *RamPtr, counter1=1 ;
000025AA  2D7C 0000 4057          move.l    #1,-188(A6)
000025AE  0001 FF44 
                    4058   ; register unsigned int i ;
                    4059   ; unsigned int Start, End ;
                    4060   ; char c, text[150];
                    4061   ; unsigned int* addressPointer;
                    4062   ; unsigned int startAddress = NULL;
000025B2  42AE FFF0 4063          clr.l     -16(A6)
                    4064   ; unsigned int endAddress = NULL;
000025B6  42AE FFF4 4065          clr.l     -12(A6)
                    4066   ; unsigned int byteLength;
                    4067   ; unsigned int dataSize = 0;
000025BA  4284      4068          clr.l     D4
                    4069   ; unsigned int dataPattern = 0;
000025BC  4283      4070          clr.l     D3
                    4071   ; unsigned int currAddress;
                    4072   ; unsigned int addrCount;
                    4073   ; unsigned int intBuffer = NULL;
000025BE  7E00      4074          moveq     #0,D7
                    4075   ; unsigned char *startAddressPtr = NULL;
000025C0  4282      4076          clr.l     D2
                    4077   ; unsigned char *endAddressPtr = NULL;
000025C2  4286      4078          clr.l     D6
                    4079   ; unsigned short int *wordAddressPtr = NULL;
000025C4  387C 0000 4080          move.w    #0,A4
                    4081   ; unsigned int *longAddressPtr = NULL;
000025C8  367C 0000 4082          move.w    #0,A3
                    4083   ; // IMPROVEMENTS TO BE MADE:
                    4084   ; // Suppossed to be able to write an odd address as a byte
                    4085   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    4086   ; // printf("\r\nStart Address: ") ;
                    4087   ; // Start = Get8HexDigits(0) ;
                    4088   ; // printf("\r\nEnd Address: ") ;
                    4089   ; // End = Get8HexDigits(0) ;
                    4090   ; // TODO
                    4091   ; scanflush();
000025CC  4EB9 0000 4092          jsr       _scanflush
000025D0  307A      
                    4093   ; memset(text, 0, sizeof(text));  // fills with zeros
000025D2  4878 0096 4094          pea       150
000025D6  42A7      4095          clr.l     -(A7)
000025D8  486E FF56 4096          pea       -170(A6)
000025DC  4EB9 0000 4097          jsr       _memset
000025E0  2D62      
000025E2  DEFC 000C 4098          add.w     #12,A7
                    4099   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
000025E6  4879 0000 4100          pea       @m68kde~1_135.L
000025EA  4FF0      
000025EC  4E92      4101          jsr       (A2)
000025EE  584F      4102          addq.w    #4,A7
                    4103   ; dataSize = _getch() - 48;
000025F0  4E95      4104          jsr       (A5)
000025F2  0480 0000 4105          sub.l     #48,D0
000025F6  0030      
000025F8  2800      4106          move.l    D0,D4
                    4107   ; printf("\n");
000025FA  4879 0000 4108          pea       @m68kde~1_136.L
000025FE  5046      
00002600  4E92      4109          jsr       (A2)
00002602  584F      4110          addq.w    #4,A7
                    4111   ; if (dataSize == 0) {
00002604  4A84      4112          tst.l     D4
00002606  6600 0058 4113          bne       MemoryTest_1
                    4114   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
0000260A  4879 0000 4115          pea       @m68kde~1_137.L
0000260E  5048      
00002610  4E92      4116          jsr       (A2)
00002612  584F      4117          addq.w    #4,A7
                    4118   ; intBuffer = _getch() - 48;
00002614  4E95      4119          jsr       (A5)
00002616  0480 0000 4120          sub.l     #48,D0
0000261A  0030      
0000261C  2E00      4121          move.l    D0,D7
                    4122   ; // scanf("%d", &intBuffer);
                    4123   ; switch (intBuffer) {
0000261E  2007      4124          move.l    D7,D0
00002620  0C80 0000 4125          cmp.l     #4,D0
00002624  0004      
00002626  642C      4126          bhs.s     MemoryTest_4
00002628  E380      4127          asl.l     #1,D0
0000262A  303B 0806 4128          move.w    MemoryTest_5(PC,D0.L),D0
0000262E  4EFB 0002 4129          jmp       MemoryTest_5(PC,D0.W)
                    4130   MemoryTest_5:
00002632  0008      4131          dc.w      MemoryTest_6-MemoryTest_5
00002634  000C      4132          dc.w      MemoryTest_7-MemoryTest_5
00002636  0014      4133          dc.w      MemoryTest_8-MemoryTest_5
00002638  001C      4134          dc.w      MemoryTest_9-MemoryTest_5
                    4135   MemoryTest_6:
                    4136   ; case(0):
                    4137   ; dataPattern = 0x00; break;
0000263A  4283      4138          clr.l     D3
0000263C  6016      4139          bra.s     MemoryTest_4
                    4140   MemoryTest_7:
                    4141   ; case(1):
                    4142   ; dataPattern = 0xB2; break;
0000263E  263C 0000 4143          move.l    #178,D3
00002642  00B2      
00002644  600E      4144          bra.s     MemoryTest_4
                    4145   MemoryTest_8:
                    4146   ; case(2):
                    4147   ; dataPattern = 0xC3; break;
00002646  263C 0000 4148          move.l    #195,D3
0000264A  00C3      
0000264C  6006      4149          bra.s     MemoryTest_4
                    4150   MemoryTest_9:
                    4151   ; case(3):
                    4152   ; dataPattern = 0xD4; break;
0000264E  263C 0000 4153          move.l    #212,D3
00002652  00D4      
                    4154   MemoryTest_4:
                    4155   ; }
                    4156   ; dataPattern &= 0xFF;
00002654  C6BC 0000 4157          and.l     #255,D3
00002658  00FF      
                    4158   ; byteLength = 1;
0000265A  7A01      4159          moveq     #1,D5
0000265C  6000 00AE 4160          bra       MemoryTest_11
                    4161   MemoryTest_1:
                    4162   ; } else if (dataSize == 1) {
00002660  0C84 0000 4163          cmp.l     #1,D4
00002664  0001      
00002666  6600 0058 4164          bne       MemoryTest_10
                    4165   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
0000266A  4879 0000 4166          pea       @m68kde~1_138.L
0000266E  50AA      
00002670  4E92      4167          jsr       (A2)
00002672  584F      4168          addq.w    #4,A7
                    4169   ; intBuffer = _getch() - 48;
00002674  4E95      4170          jsr       (A5)
00002676  0480 0000 4171          sub.l     #48,D0
0000267A  0030      
0000267C  2E00      4172          move.l    D0,D7
                    4173   ; switch (intBuffer) {
0000267E  2007      4174          move.l    D7,D0
00002680  0C80 0000 4175          cmp.l     #4,D0
00002684  0004      
00002686  642C      4176          bhs.s     MemoryTest_13
00002688  E380      4177          asl.l     #1,D0
0000268A  303B 0806 4178          move.w    MemoryTest_14(PC,D0.L),D0
0000268E  4EFB 0002 4179          jmp       MemoryTest_14(PC,D0.W)
                    4180   MemoryTest_14:
00002692  0008      4181          dc.w      MemoryTest_15-MemoryTest_14
00002694  000C      4182          dc.w      MemoryTest_16-MemoryTest_14
00002696  0014      4183          dc.w      MemoryTest_17-MemoryTest_14
00002698  001C      4184          dc.w      MemoryTest_18-MemoryTest_14
                    4185   MemoryTest_15:
                    4186   ; case(0):
                    4187   ; dataPattern = 0x0000; break;
0000269A  4283      4188          clr.l     D3
0000269C  6016      4189          bra.s     MemoryTest_13
                    4190   MemoryTest_16:
                    4191   ; case(1):
                    4192   ; dataPattern = 0x1234; break;
0000269E  263C 0000 4193          move.l    #4660,D3
000026A2  1234      
000026A4  600E      4194          bra.s     MemoryTest_13
                    4195   MemoryTest_17:
                    4196   ; case(2):
                    4197   ; dataPattern = 0xA1B2; break;
000026A6  263C 0000 4198          move.l    #41394,D3
000026AA  A1B2      
000026AC  6006      4199          bra.s     MemoryTest_13
                    4200   MemoryTest_18:
                    4201   ; case(3):
                    4202   ; dataPattern = 0xC3D4; break;
000026AE  263C 0000 4203          move.l    #50132,D3
000026B2  C3D4      
                    4204   MemoryTest_13:
                    4205   ; }
                    4206   ; dataPattern &= 0xFFFF;
000026B4  C6BC 0000 4207          and.l     #65535,D3
000026B8  FFFF      
                    4208   ; byteLength = 2;
000026BA  7A02      4209          moveq     #2,D5
000026BC  6000 004E 4210          bra       MemoryTest_11
                    4211   MemoryTest_10:
                    4212   ; } else {
                    4213   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
000026C0  4879 0000 4214          pea       @m68kde~1_139.L
000026C4  5114      
000026C6  4E92      4215          jsr       (A2)
000026C8  584F      4216          addq.w    #4,A7
                    4217   ; intBuffer = _getch() - 48;
000026CA  4E95      4218          jsr       (A5)
000026CC  0480 0000 4219          sub.l     #48,D0
000026D0  0030      
000026D2  2E00      4220          move.l    D0,D7
                    4221   ; switch (intBuffer) {
000026D4  2007      4222          move.l    D7,D0
000026D6  0C80 0000 4223          cmp.l     #4,D0
000026DA  0004      
000026DC  642C      4224          bhs.s     MemoryTest_20
000026DE  E380      4225          asl.l     #1,D0
000026E0  303B 0806 4226          move.w    MemoryTest_21(PC,D0.L),D0
000026E4  4EFB 0002 4227          jmp       MemoryTest_21(PC,D0.W)
                    4228   MemoryTest_21:
000026E8  0008      4229          dc.w      MemoryTest_22-MemoryTest_21
000026EA  000C      4230          dc.w      MemoryTest_23-MemoryTest_21
000026EC  0014      4231          dc.w      MemoryTest_24-MemoryTest_21
000026EE  001C      4232          dc.w      MemoryTest_25-MemoryTest_21
                    4233   MemoryTest_22:
                    4234   ; case(0):
                    4235   ; dataPattern = 0x00000000; break;
000026F0  4283      4236          clr.l     D3
000026F2  6016      4237          bra.s     MemoryTest_20
                    4238   MemoryTest_23:
                    4239   ; case(1):
                    4240   ; dataPattern = 0xAABBCCDD; break;
000026F4  263C AABB 4241          move.l    #-1430532899,D3
000026F8  CCDD      
000026FA  600E      4242          bra.s     MemoryTest_20
                    4243   MemoryTest_24:
                    4244   ; case(2):
                    4245   ; dataPattern = 0x11223344; break;
000026FC  263C 1122 4246          move.l    #287454020,D3
00002700  3344      
00002702  6006      4247          bra.s     MemoryTest_20
                    4248   MemoryTest_25:
                    4249   ; case(3):
                    4250   ; dataPattern = 0x76543210; break;
00002704  263C 7654 4251          move.l    #1985229328,D3
00002708  3210      
                    4252   MemoryTest_20:
                    4253   ; }
                    4254   ; byteLength = 4;
0000270A  7A04      4255          moveq     #4,D5
                    4256   MemoryTest_11:
                    4257   ; }
                    4258   ; while (startAddressPtr == NULL || 
                    4259   MemoryTest_26:
0000270C  4A82      4260          tst.l     D2
0000270E  672A      4261          beq.s     MemoryTest_29
00002710  2F02      4262          move.l    D2,-(A7)
00002712  4878 0002 4263          pea       2
00002716  4EB9 0000 4264          jsr       ULDIV
0000271A  2BB8      
0000271C  202F 0004 4265          move.l    4(A7),D0
00002720  504F      4266          addq.w    #8,A7
00002722  4A80      4267          tst.l     D0
00002724  6614      4268          bne.s     MemoryTest_29
00002726  0C82 0802 4269          cmp.l     #134348800,D2
0000272A  0000      
0000272C  650C      4270          blo.s     MemoryTest_29
0000272E  203C 0B00 4271          move.l    #184549376,D0
00002732  0000      
00002734  9085      4272          sub.l     D5,D0
00002736  B480      4273          cmp.l     D0,D2
00002738  6328      4274          bls.s     MemoryTest_28
                    4275   MemoryTest_29:
                    4276   ; (unsigned int) startAddressPtr % 2 != 0 || 
                    4277   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    4278   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    4279   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
0000273A  4879 0000 4280          pea       @m68kde~1_140.L
0000273E  5192      
00002740  4E92      4281          jsr       (A2)
00002742  584F      4282          addq.w    #4,A7
                    4283   ; startAddressPtr =  Get8HexDigits(0);
00002744  42A7      4284          clr.l     -(A7)
00002746  4EB8 0CA4 4285          jsr       _Get8HexDigits
0000274A  584F      4286          addq.w    #4,A7
0000274C  2400      4287          move.l    D0,D2
                    4288   ; scanf("%x", &startAddress);
0000274E  486E FFF0 4289          pea       -16(A6)
00002752  4879 0000 4290          pea       @m68kde~1_141.L
00002756  51CA      
00002758  4EB9 0000 4291          jsr       _scanf
0000275C  2DBC      
0000275E  504F      4292          addq.w    #8,A7
00002760  60AA      4293          bra       MemoryTest_26
                    4294   MemoryTest_28:
                    4295   ; }
                    4296   ; while (endAddressPtr == NULL || 
                    4297   MemoryTest_30:
00002762  4A86      4298          tst.l     D6
00002764  670A      4299          beq.s     MemoryTest_33
00002766  202E FFF0 4300          move.l    -16(A6),D0
0000276A  D085      4301          add.l     D5,D0
0000276C  BC80      4302          cmp.l     D0,D6
0000276E  6428      4303          bhs.s     MemoryTest_32
                    4304   MemoryTest_33:
                    4305   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    4306   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00002770  4879 0000 4307          pea       @m68kde~1_142.L
00002774  51CE      
00002776  4E92      4308          jsr       (A2)
00002778  584F      4309          addq.w    #4,A7
                    4310   ; endAddressPtr =  Get8HexDigits(0);
0000277A  42A7      4311          clr.l     -(A7)
0000277C  4EB8 0CA4 4312          jsr       _Get8HexDigits
00002780  584F      4313          addq.w    #4,A7
00002782  2C00      4314          move.l    D0,D6
                    4315   ; scanf("%x", &endAddress);
00002784  486E FFF4 4316          pea       -12(A6)
00002788  4879 0000 4317          pea       @m68kde~1_141.L
0000278C  51CA      
0000278E  4EB9 0000 4318          jsr       _scanf
00002792  2DBC      
00002794  504F      4319          addq.w    #8,A7
00002796  60CA      4320          bra       MemoryTest_30
                    4321   MemoryTest_32:
                    4322   ; }
                    4323   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00002798  2F02      4324          move.l    D2,-(A7)
0000279A  4879 0000 4325          pea       @m68kde~1_143.L
0000279E  5204      
000027A0  4E92      4326          jsr       (A2)
000027A2  504F      4327          addq.w    #8,A7
                    4328   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
000027A4  2F06      4329          move.l    D6,-(A7)
000027A6  4879 0000 4330          pea       @m68kde~1_144.L
000027AA  521C      
000027AC  4E92      4331          jsr       (A2)
000027AE  504F      4332          addq.w    #8,A7
                    4333   ; addrCount = 0;
000027B0  42AE FFFC 4334          clr.l     -4(A6)
                    4335   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    4336   MemoryTest_34:
000027B4  B486      4337          cmp.l     D6,D2
000027B6  6400 012E 4338          bhs       MemoryTest_36
000027BA  2006      4339          move.l    D6,D0
000027BC  9082      4340          sub.l     D2,D0
000027BE  5280      4341          addq.l    #1,D0
000027C0  B085      4342          cmp.l     D5,D0
000027C2  6500 0122 4343          blo       MemoryTest_36
                    4344   ; // If address goes beyond 0x0B00_0000 then break
                    4345   ; if ((unsigned int)startAddressPtr >= 0x0B000000) {
000027C6  0C82 0B00 4346          cmp.l     #184549376,D2
000027CA  0000      
000027CC  6510      4347          blo.s     MemoryTest_37
                    4348   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
000027CE  2F02      4349          move.l    D2,-(A7)
000027D0  4879 0000 4350          pea       @m68kde~1_145.L
000027D4  5232      
000027D6  4E92      4351          jsr       (A2)
000027D8  504F      4352          addq.w    #8,A7
                    4353   ; break;
000027DA  6000 010A 4354          bra       MemoryTest_36
                    4355   MemoryTest_37:
                    4356   ; }
                    4357   ; longAddressPtr = startAddressPtr;
000027DE  2642      4358          move.l    D2,A3
                    4359   ; wordAddressPtr = startAddressPtr;
000027E0  2842      4360          move.l    D2,A4
                    4361   ; if (dataSize == 0) {
000027E2  4A84      4362          tst.l     D4
000027E4  6600 0034 4363          bne       MemoryTest_39
                    4364   ; *startAddressPtr = dataPattern;
000027E8  2042      4365          move.l    D2,A0
000027EA  1083      4366          move.b    D3,(A0)
                    4367   ; if ((*startAddressPtr) != dataPattern) {
000027EC  2042      4368          move.l    D2,A0
000027EE  1010      4369          move.b    (A0),D0
000027F0  C0BC 0000 4370          and.l     #255,D0
000027F4  00FF      
000027F6  B083      4371          cmp.l     D3,D0
000027F8  671C      4372          beq.s     MemoryTest_41
                    4373   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
000027FA  2F03      4374          move.l    D3,-(A7)
000027FC  2042      4375          move.l    D2,A0
000027FE  1210      4376          move.b    (A0),D1
00002800  C2BC 0000 4377          and.l     #255,D1
00002804  00FF      
00002806  2F01      4378          move.l    D1,-(A7)
00002808  2F02      4379          move.l    D2,-(A7)
0000280A  4879 0000 4380          pea       @m68kde~1_146.L
0000280E  5264      
00002810  4E92      4381          jsr       (A2)
00002812  DEFC 0010 4382          add.w     #16,A7
                    4383   MemoryTest_41:
00002816  6000 0058 4384          bra       MemoryTest_47
                    4385   MemoryTest_39:
                    4386   ; }
                    4387   ; } else if (dataSize == 1) {
0000281A  0C84 0000 4388          cmp.l     #1,D4
0000281E  0001      
00002820  662C      4389          bne.s     MemoryTest_43
                    4390   ; *wordAddressPtr = dataPattern;
00002822  3883      4391          move.w    D3,(A4)
                    4392   ; if ((*wordAddressPtr) != dataPattern) {
00002824  3014      4393          move.w    (A4),D0
00002826  C0BC 0000 4394          and.l     #65535,D0
0000282A  FFFF      
0000282C  B083      4395          cmp.l     D3,D0
0000282E  671C      4396          beq.s     MemoryTest_45
                    4397   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002830  2F03      4398          move.l    D3,-(A7)
00002832  2042      4399          move.l    D2,A0
00002834  1210      4400          move.b    (A0),D1
00002836  C2BC 0000 4401          and.l     #255,D1
0000283A  00FF      
0000283C  2F01      4402          move.l    D1,-(A7)
0000283E  2F02      4403          move.l    D2,-(A7)
00002840  4879 0000 4404          pea       @m68kde~1_146.L
00002844  5264      
00002846  4E92      4405          jsr       (A2)
00002848  DEFC 0010 4406          add.w     #16,A7
                    4407   MemoryTest_45:
0000284C  6022      4408          bra.s     MemoryTest_47
                    4409   MemoryTest_43:
                    4410   ; }
                    4411   ; } else {
                    4412   ; *longAddressPtr = dataPattern;
0000284E  2683      4413          move.l    D3,(A3)
                    4414   ; if ((*longAddressPtr) != dataPattern) {
00002850  B693      4415          cmp.l     (A3),D3
00002852  671C      4416          beq.s     MemoryTest_47
                    4417   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002854  2F03      4418          move.l    D3,-(A7)
00002856  2042      4419          move.l    D2,A0
00002858  1210      4420          move.b    (A0),D1
0000285A  C2BC 0000 4421          and.l     #255,D1
0000285E  00FF      
00002860  2F01      4422          move.l    D1,-(A7)
00002862  2F02      4423          move.l    D2,-(A7)
00002864  4879 0000 4424          pea       @m68kde~1_146.L
00002868  5264      
0000286A  4E92      4425          jsr       (A2)
0000286C  DEFC 0010 4426          add.w     #16,A7
                    4427   MemoryTest_47:
                    4428   ; }
                    4429   ; }
                    4430   ; // if ((*startAddressPtr) != dataPattern) {
                    4431   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    4432   ; // }
                    4433   ; addrCount++;
00002870  52AE FFFC 4434          addq.l    #1,-4(A6)
                    4435   ; if (addrCount % 128 == 0) {
00002874  2F2E FFFC 4436          move.l    -4(A6),-(A7)
00002878  4878 0080 4437          pea       128
0000287C  4EB9 0000 4438          jsr       ULDIV
00002880  2BB8      
00002882  202F 0004 4439          move.l    4(A7),D0
00002886  504F      4440          addq.w    #8,A7
00002888  4A80      4441          tst.l     D0
0000288A  6600 0054 4442          bne       MemoryTest_54
                    4443   ; if (dataSize == 0) {
0000288E  4A84      4444          tst.l     D4
00002890  661C      4445          bne.s     MemoryTest_51
                    4446   ; printf("Address: 0x%x Value: 0x%02X\n",
00002892  2042      4447          move.l    D2,A0
00002894  1210      4448          move.b    (A0),D1
00002896  C2BC 0000 4449          and.l     #255,D1
0000289A  00FF      
0000289C  2F01      4450          move.l    D1,-(A7)
0000289E  2F02      4451          move.l    D2,-(A7)
000028A0  4879 0000 4452          pea       @m68kde~1_147.L
000028A4  52AA      
000028A6  4E92      4453          jsr       (A2)
000028A8  DEFC 000C 4454          add.w     #12,A7
000028AC  6032      4455          bra.s     MemoryTest_54
                    4456   MemoryTest_51:
                    4457   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    4458   ; }
                    4459   ; else if (dataSize == 1) {
000028AE  0C84 0000 4460          cmp.l     #1,D4
000028B2  0001      
000028B4  661A      4461          bne.s     MemoryTest_53
                    4462   ; printf("Address: 0x%x Value: 0x%04X\n",
000028B6  3214      4463          move.w    (A4),D1
000028B8  C2BC 0000 4464          and.l     #65535,D1
000028BC  FFFF      
000028BE  2F01      4465          move.l    D1,-(A7)
000028C0  2F0C      4466          move.l    A4,-(A7)
000028C2  4879 0000 4467          pea       @m68kde~1_148.L
000028C6  52C8      
000028C8  4E92      4468          jsr       (A2)
000028CA  DEFC 000C 4469          add.w     #12,A7
000028CE  6010      4470          bra.s     MemoryTest_54
                    4471   MemoryTest_53:
                    4472   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    4473   ; }
                    4474   ; else {
                    4475   ; printf("Address: 0x%x Value: 0x%08X\n",
000028D0  2F13      4476          move.l    (A3),-(A7)
000028D2  2F0B      4477          move.l    A3,-(A7)
000028D4  4879 0000 4478          pea       @m68kde~1_149.L
000028D8  52E6      
000028DA  4E92      4479          jsr       (A2)
000028DC  DEFC 000C 4480          add.w     #12,A7
                    4481   MemoryTest_54:
                    4482   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    4483   ; }
                    4484   ; }
                    4485   ; startAddressPtr += byteLength;
000028E0  D485      4486          add.l     D5,D2
000028E2  6000 FED0 4487          bra       MemoryTest_34
                    4488   MemoryTest_36:
000028E6  4CDF 3CFC 4489          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000028EA  4E5E      4490          unlk      A6
000028EC  4E75      4491          rts
                    4492   ; }
                    4493   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4494   ; }
                    4495   ; void main(void)
                    4496   ; {
                    4497   _main:
000028EE  4E56 FFF4 4498          link      A6,#-12
000028F2  48E7 3030 4499          movem.l   D2/D3/A2/A3,-(A7)
000028F6  45F8 0A30 4500          lea       _InstallExceptionHandler.L,A2
000028FA  47F9 0000 4501          lea       _printf.L,A3
000028FE  3684      
                    4502   ; char c ;
                    4503   ; int i, j ;
                    4504   ; char *BugMessage = "DE1-68k Bug V1.77";
00002900  41F9 0000 4505          lea       @m68kde~1_150.L,A0
00002904  5304      
00002906  2608      4506          move.l    A0,D3
                    4507   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002908  41F9 0000 4508          lea       @m68kde~1_151.L,A0
0000290C  5316      
0000290E  2D48 FFFC 4509          move.l    A0,-4(A6)
                    4510   ; KillAllBreakPoints() ;
00002912  4EB8 1C1C 4511          jsr       _KillAllBreakPoints
                    4512   ; i = x = y = z = PortA_Count = 0;
00002916  42B9 0B00 4513          clr.l     _PortA_Count.L
0000291A  00D4      
0000291C  42B9 0B00 4514          clr.l     _z.L
00002920  00D0      
00002922  42B9 0B00 4515          clr.l     _y.L
00002926  00CC      
00002928  42B9 0B00 4516          clr.l     _x.L
0000292C  00C8      
0000292E  4282      4517          clr.l     D2
                    4518   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002930  42B9 0B00 4519          clr.l     _GoFlag.L
00002934  00DC      
00002936  42B9 0B00 4520          clr.l     _Trace.L
0000293A  00D8      
                    4521   ; Echo = 1 ;
0000293C  23FC 0000 4522          move.l    #1,_Echo.L
00002940  0001 0B00 
00002944  00E0      
                    4523   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002946  42B9 0B00 4524          clr.l     _d7.L
0000294A  0100      
0000294C  42B9 0B00 4525          clr.l     _d6.L
00002950  00FC      
00002952  42B9 0B00 4526          clr.l     _d5.L
00002956  00F8      
00002958  42B9 0B00 4527          clr.l     _d4.L
0000295C  00F4      
0000295E  42B9 0B00 4528          clr.l     _d3.L
00002962  00F0      
00002964  42B9 0B00 4529          clr.l     _d2.L
00002968  00EC      
0000296A  42B9 0B00 4530          clr.l     _d1.L
0000296E  00E8      
00002970  42B9 0B00 4531          clr.l     _d0.L
00002974  00E4      
                    4532   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002976  42B9 0B00 4533          clr.l     _a6.L
0000297A  011C      
0000297C  42B9 0B00 4534          clr.l     _a5.L
00002980  0118      
00002982  42B9 0B00 4535          clr.l     _a4.L
00002986  0114      
00002988  42B9 0B00 4536          clr.l     _a3.L
0000298C  0110      
0000298E  42B9 0B00 4537          clr.l     _a2.L
00002992  010C      
00002994  42B9 0B00 4538          clr.l     _a1.L
00002998  0108      
0000299A  42B9 0B00 4539          clr.l     _a0.L
0000299E  0104      
                    4540   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
000029A0  23FC 0800 4541          move.l    #134217728,_PC.L
000029A4  0000 0B00 
000029A8  0120      
000029AA  23FC 0C00 4542          move.l    #201326592,_SSP.L
000029AE  0000 0B00 
000029B2  0124      
000029B4  23FC 0C00 4543          move.l    #201326592,_USP.L
000029B8  0000 0B00 
000029BC  0128      
                    4544   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
000029BE  33FC 2000 4545          move.w    #8192,_SR.L
000029C2  0B00 012C 
                    4546   ; // Initialise Breakpoint variables
                    4547   ; for(i = 0; i < 8; i++)  {
000029C6  4282      4548          clr.l     D2
                    4549   main_1:
000029C8  0C82 0000 4550          cmp.l     #8,D2
000029CC  0008      
000029CE  6C00 004C 4551          bge       main_3
                    4552   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000029D2  2002      4553          move.l    D2,D0
000029D4  E588      4554          lsl.l     #2,D0
000029D6  41F9 0B00 4555          lea       _BreakPointAddress.L,A0
000029DA  012E      
000029DC  42B0 0800 4556          clr.l     0(A0,D0.L)
                    4557   ; WatchPointAddress[i] = 0 ;
000029E0  2002      4558          move.l    D2,D0
000029E2  E588      4559          lsl.l     #2,D0
000029E4  41F9 0B00 4560          lea       _WatchPointAddress.L,A0
000029E8  0182      
000029EA  42B0 0800 4561          clr.l     0(A0,D0.L)
                    4562   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
000029EE  2002      4563          move.l    D2,D0
000029F0  E388      4564          lsl.l     #1,D0
000029F2  41F9 0B00 4565          lea       _BreakPointInstruction.L,A0
000029F6  014E      
000029F8  4270 0800 4566          clr.w     0(A0,D0.L)
                    4567   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
000029FC  2002      4568          move.l    D2,D0
000029FE  E588      4569          lsl.l     #2,D0
00002A00  41F9 0B00 4570          lea       _BreakPointSetOrCleared.L,A0
00002A04  015E      
00002A06  42B0 0800 4571          clr.l     0(A0,D0.L)
                    4572   ; WatchPointSetOrCleared[i] = 0;
00002A0A  2002      4573          move.l    D2,D0
00002A0C  E588      4574          lsl.l     #2,D0
00002A0E  41F9 0B00 4575          lea       _WatchPointSetOrCleared.L,A0
00002A12  01A2      
00002A14  42B0 0800 4576          clr.l     0(A0,D0.L)
00002A18  5282      4577          addq.l    #1,D2
00002A1A  60AC      4578          bra       main_1
                    4579   main_3:
                    4580   ; }
                    4581   ; Init_RS232() ;     // initialise the RS232 port
00002A1C  4EB8 0B12 4582          jsr       _Init_RS232
                    4583   ; Init_LCD() ;
00002A20  4EB8 095E 4584          jsr       _Init_LCD
                    4585   ; for( i = 32; i < 48; i++)
00002A24  7420      4586          moveq     #32,D2
                    4587   main_4:
00002A26  0C82 0000 4588          cmp.l     #48,D2
00002A2A  0030      
00002A2C  6C0E      4589          bge.s     main_6
                    4590   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002A2E  2F02      4591          move.l    D2,-(A7)
00002A30  4878 2494 4592          pea       _UnhandledTrap.L
00002A34  4E92      4593          jsr       (A2)
00002A36  504F      4594          addq.w    #8,A7
00002A38  5282      4595          addq.l    #1,D2
00002A3A  60EA      4596          bra       main_4
                    4597   main_6:
                    4598   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002A3C  4878 002F 4599          pea       47
00002A40  4878 216E 4600          pea       _menu.L
00002A44  4E92      4601          jsr       (A2)
00002A46  504F      4602          addq.w    #8,A7
                    4603   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002A48  4878 0019 4604          pea       25
00002A4C  4878 243A 4605          pea       _UnhandledIRQ1.L
00002A50  4E92      4606          jsr       (A2)
00002A52  504F      4607          addq.w    #8,A7
                    4608   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002A54  4878 001A 4609          pea       26
00002A58  4878 2446 4610          pea       _UnhandledIRQ2.L
00002A5C  4E92      4611          jsr       (A2)
00002A5E  504F      4612          addq.w    #8,A7
                    4613   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002A60  4878 001B 4614          pea       27
00002A64  4878 2452 4615          pea       _UnhandledIRQ3.L
00002A68  4E92      4616          jsr       (A2)
00002A6A  504F      4617          addq.w    #8,A7
                    4618   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002A6C  4878 001C 4619          pea       28
00002A70  4878 245E 4620          pea       _UnhandledIRQ4.L
00002A74  4E92      4621          jsr       (A2)
00002A76  504F      4622          addq.w    #8,A7
                    4623   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002A78  4878 001D 4624          pea       29
00002A7C  4878 246A 4625          pea       _UnhandledIRQ5.L
00002A80  4E92      4626          jsr       (A2)
00002A82  504F      4627          addq.w    #8,A7
                    4628   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002A84  4878 001E 4629          pea       30
00002A88  4878 2476 4630          pea       _UnhandledIRQ6.L
00002A8C  4E92      4631          jsr       (A2)
00002A8E  504F      4632          addq.w    #8,A7
                    4633   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002A90  4878 001F 4634          pea       31
00002A94  4878 2488 4635          pea       _UnhandledIRQ7.L
00002A98  4E92      4636          jsr       (A2)
00002A9A  504F      4637          addq.w    #8,A7
                    4638   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002A9C  4878 002E 4639          pea       46
00002AA0  4878 1EAA 4640          pea       _HandleBreakPoint.L
00002AA4  4E92      4641          jsr       (A2)
00002AA6  504F      4642          addq.w    #8,A7
                    4643   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002AA8  4878 001D 4644          pea       29
00002AAC  4878 158A 4645          pea       _DumpRegistersandPause.L
00002AB0  4E92      4646          jsr       (A2)
00002AB2  504F      4647          addq.w    #8,A7
                    4648   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002AB4  4878 0002 4649          pea       2
00002AB8  4878 24A2 4650          pea       _BusError.L
00002ABC  4E92      4651          jsr       (A2)
00002ABE  504F      4652          addq.w    #8,A7
                    4653   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002AC0  4878 0003 4654          pea       3
00002AC4  4878 24B0 4655          pea       _AddressError.L
00002AC8  4E92      4656          jsr       (A2)
00002ACA  504F      4657          addq.w    #8,A7
                    4658   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002ACC  4878 0004 4659          pea       4
00002AD0  4878 24BE 4660          pea       _IllegalInstruction.L
00002AD4  4E92      4661          jsr       (A2)
00002AD6  504F      4662          addq.w    #8,A7
                    4663   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002AD8  4878 0005 4664          pea       5
00002ADC  4878 24CC 4665          pea       _Dividebyzero.L
00002AE0  4E92      4666          jsr       (A2)
00002AE2  504F      4667          addq.w    #8,A7
                    4668   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002AE4  4878 0006 4669          pea       6
00002AE8  4878 24DA 4670          pea       _Check.L
00002AEC  4E92      4671          jsr       (A2)
00002AEE  504F      4672          addq.w    #8,A7
                    4673   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002AF0  4878 0007 4674          pea       7
00002AF4  4878 24E8 4675          pea       _Trapv.L
00002AF8  4E92      4676          jsr       (A2)
00002AFA  504F      4677          addq.w    #8,A7
                    4678   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002AFC  4878 0008 4679          pea       8
00002B00  4878 24F6 4680          pea       _PrivError.L
00002B04  4E92      4681          jsr       (A2)
00002B06  504F      4682          addq.w    #8,A7
                    4683   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002B08  4878 000F 4684          pea       15
00002B0C  4878 2504 4685          pea       _UnitIRQ.L
00002B10  4E92      4686          jsr       (A2)
00002B12  504F      4687          addq.w    #8,A7
                    4688   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002B14  4878 0018 4689          pea       24
00002B18  4878 24DA 4690          pea       _Check.L
00002B1C  4E92      4691          jsr       (A2)
00002B1E  504F      4692          addq.w    #8,A7
                    4693   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002B20  4EB8 0BA6 4694          jsr       _FlushKeyboard
                    4695   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002B24  4239 0040 4696          clr.b     4194314
00002B28  000A      
                    4697   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4698   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4699   main_7:
00002B2A  1039 0040 4700          move.b    4194306,D0
00002B2E  0002      
00002B30  C03C 0002 4701          and.b     #2,D0
00002B34  0C00 0002 4702          cmp.b     #2,D0
00002B38  662A      4703          bne.s     main_9
                    4704   ; LoadFromFlashChip();
00002B3A  4EB8 10C6 4705          jsr       _LoadFromFlashChip
                    4706   ; printf("\r\nRunning.....") ;
00002B3E  4879 0000 4707          pea       @m68kde~1_152.L
00002B42  5334      
00002B44  4E93      4708          jsr       (A3)
00002B46  584F      4709          addq.w    #4,A7
                    4710   ; Oline1("Running.....") ;
00002B48  4879 0000 4711          pea       @m68kde~1_153.L
00002B4C  5344      
00002B4E  4EB8 0A02 4712          jsr       _Oline1
00002B52  584F      4713          addq.w    #4,A7
                    4714   ; GoFlag = 1;
00002B54  23FC 0000 4715          move.l    #1,_GoFlag.L
00002B58  0001 0B00 
00002B5C  00DC      
                    4716   ; go() ;
00002B5E  4EB8 08B8 4717          jsr       _go
00002B62  60C6      4718          bra       main_7
                    4719   main_9:
                    4720   ; }
                    4721   ; // otherwise start the debug monitor
                    4722   ; Oline0(BugMessage) ;
00002B64  2F03      4723          move.l    D3,-(A7)
00002B66  4EB8 09D4 4724          jsr       _Oline0
00002B6A  584F      4725          addq.w    #4,A7
                    4726   ; Oline1("By: PJ Davies") ;
00002B6C  4879 0000 4727          pea       @m68kde~1_154.L
00002B70  5352      
00002B72  4EB8 0A02 4728          jsr       _Oline1
00002B76  584F      4729          addq.w    #4,A7
                    4730   ; printf("\r\n%s", BugMessage) ;
00002B78  2F03      4731          move.l    D3,-(A7)
00002B7A  4879 0000 4732          pea       @m68kde~1_155.L
00002B7E  5360      
00002B80  4E93      4733          jsr       (A3)
00002B82  504F      4734          addq.w    #8,A7
                    4735   ; printf("\r\n%s", CopyrightMessage) ;
00002B84  2F2E FFFC 4736          move.l    -4(A6),-(A7)
00002B88  4879 0000 4737          pea       @m68kde~1_155.L
00002B8C  5360      
00002B8E  4E93      4738          jsr       (A3)
00002B90  504F      4739          addq.w    #8,A7
                    4740   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00002B92  4879 0000 4741          pea       @m68kde~1_156.L
00002B96  5366      
00002B98  4E93      4742          jsr       (A3)
00002B9A  584F      4743          addq.w    #4,A7
                    4744   ; menu();
00002B9C  4EB8 216E 4745          jsr       _menu
00002BA0  4CDF 0C0C 4746          movem.l   (A7)+,D2/D3/A2/A3
00002BA4  4E5E      4747          unlk      A6
00002BA6  4E75      4748          rts
                    4749   ; }
                    4750   _strcpy:
00002BA8  206F 0004 4751          move.l    (4,A7),A0
00002BAC  226F 0008 4752          move.l    (8,A7),A1
00002BB0  2008      4753          move.l    A0,D0
                    4754   strcpy_1:
00002BB2  10D9      4755          move.b    (A1)+,(A0)+
00002BB4  66FC      4756          bne       strcpy_1
00002BB6  4E75      4757          rts
                    4758   ULDIV:
00002BB8  4E56 0000 4759          link    A6,#0
00002BBC  48E7 C000 4760          movem.l D0/D1,-(A7)
00002BC0  222E 0008 4761          move.l  8(A6),D1
00002BC4  202E 000C 4762          move.l  12(A6),D0
00002BC8  6036      4763          bra.s   ldiv_3
                    4764   LDIV:
00002BCA  4E56 0000 4765          link    A6,#0
00002BCE  48E7 C000 4766          movem.l D0/D1,-(A7)
00002BD2  222E 0008 4767          move.l  8(A6),D1
00002BD6  202E 000C 4768          move.l  12(A6),D0
00002BDA  4A80      4769          tst.l   D0
00002BDC  6A0E      4770          bpl.s   ldiv_1
00002BDE  4480      4771          neg.l   D0
00002BE0  4A81      4772          tst.l   D1
00002BE2  6A14      4773          bpl.s   ldiv_2
00002BE4  4481      4774          neg.l   D1
00002BE6  612A      4775          bsr.s   dodiv
00002BE8  4481      4776          neg.l   D1
00002BEA  6016      4777          bra.s   ldiv_4
                    4778   ldiv_1:
00002BEC  4A81      4779          tst.l   D1
00002BEE  6A10      4780          bpl.s   ldiv_3
00002BF0  4481      4781          neg.l   D1
00002BF2  611E      4782          bsr.s   dodiv
00002BF4  4480      4783          neg.l   D0
00002BF6  600A      4784          bra.s   ldiv_4
                    4785   ldiv_2:
00002BF8  6118      4786          bsr.s   dodiv
00002BFA  4480      4787          neg.l   D0
00002BFC  4481      4788          neg.l   D1
00002BFE  6002      4789          bra.s   ldiv_4
                    4790   ldiv_3:
00002C00  6110      4791          bsr.s   dodiv
                    4792   ldiv_4:
00002C02  2D40 0008 4793          move.l  D0,8(A6)
00002C06  2D41 000C 4794          move.l  D1,12(A6)
00002C0A  4CDF 0003 4795          movem.l (A7)+,D0/D1
00002C0E  4E5E      4796          unlk    A6
00002C10  4E75      4797          rts
                    4798   dodiv:
00002C12  0C81 0000 4799          cmpi.l  #$FFFF,D1
00002C16  FFFF      
00002C18  6236      4800          bhi.s   dodiv_2
00002C1A  0C80 0000 4801          cmpi.l  #$FFFF,D0
00002C1E  FFFF      
00002C20  6210      4802          bhi.s   dodiv_1
00002C22  80C1      4803          divu    D1,D0
00002C24  2200      4804          move.l  D0,D1
00002C26  4241      4805          clr.w   D1
00002C28  4841      4806          swap    D1
00002C2A  0280 0000 4807          andi.l  #$FFFF,D0
00002C2E  FFFF      
00002C30  4E75      4808          rts
                    4809   dodiv_1:
00002C32  48A7 A000 4810          movem.w D0/D2,-(A7)
00002C36  4240      4811          clr.w   D0
00002C38  4840      4812          swap    D0
00002C3A  80C1      4813          divu    D1,D0
00002C3C  3400      4814          move.w  D0,D2
00002C3E  301F      4815          move.w  (A7)+,D0
00002C40  80C1      4816          divu    D1,D0
00002C42  4840      4817          swap    D0
00002C44  4281      4818          clr.l   D1
00002C46  3200      4819          move.w  D0,D1
00002C48  3002      4820          move.w  D2,D0
00002C4A  4840      4821          swap    D0
00002C4C  341F      4822          move.w  (A7)+,D2
00002C4E  4E75      4823          rts
                    4824   dodiv_2:
00002C50  48E7 3800 4825          movem.l D2/D3/D4,-(A7)
00002C54  2401      4826          move.l  D1,D2
00002C56  4242      4827          clr.w   D2
00002C58  4842      4828          swap    D2
00002C5A  5282      4829          addq.l  #1,D2
00002C5C  2600      4830          move.l  D0,D3
00002C5E  2801      4831          move.l  D1,D4
00002C60  2202      4832          move.l  D2,D1
00002C62  61CE      4833          bsr.s   dodiv_1
00002C64  2204      4834          move.l  D4,D1
00002C66  82C2      4835          divu    D2,D1
00002C68  80C1      4836          divu    D1,D0
00002C6A  0280 0000 4837          andi.l  #$FFFF,D0
00002C6E  FFFF      
                    4838   dodiv_3:
00002C70  2204      4839          move.l  D4,D1
00002C72  2404      4840          move.l  D4,D2
00002C74  4842      4841          swap    D2
00002C76  C2C0      4842          mulu    D0,D1
00002C78  C4C0      4843          mulu    D0,D2
00002C7A  4842      4844          swap    D2
00002C7C  D282      4845          add.l   D2,D1
00002C7E  9283      4846          sub.l   D3,D1
00002C80  620A      4847          bhi.s   dodiv_4
00002C82  4481      4848          neg.l   D1
00002C84  B881      4849          cmp.l   D1,D4
00002C86  6208      4850          bhi.s   dodiv_5
00002C88  5280      4851          addq.l  #1,D0
00002C8A  60E4      4852          bra.s   dodiv_3
                    4853   dodiv_4:
00002C8C  5380      4854          subq.l  #1,D0
00002C8E  60E0      4855          bra.s   dodiv_3
                    4856   dodiv_5:
00002C90  4CDF 001C 4857          movem.l (A7)+,D2/D3/D4
00002C94  4E75      4858          rts
                    4859   _putch:
00002C96  4E56 0000 4860          link      A6,#0
00002C9A  48E7 2000 4861          movem.l   D2,-(A7)
00002C9E  242E 0008 4862          move.l    8(A6),D2
00002CA2  0C82 0000 4863          cmp.l     #10,D2
00002CA6  000A      
00002CA8  660A      4864          bne.s     putch_1
00002CAA  4878 000D 4865          pea       13
00002CAE  6100 DE8C 4866          bsr       __putch
00002CB2  584F      4867          addq.w    #4,A7
                    4868   putch_1:
00002CB4  2F02      4869          move.l    D2,-(A7)
00002CB6  6100 DE84 4870          bsr       __putch
00002CBA  584F      4871          addq.w    #4,A7
00002CBC  2002      4872          move.l    D2,D0
00002CBE  4CDF 0004 4873          movem.l   (A7)+,D2
00002CC2  4E5E      4874          unlk      A6
00002CC4  4E75      4875          rts
                    4876   _getch:
00002CC6  48E7 2000 4877          movem.l   D2,-(A7)
00002CCA  2439 0B00 4878          move.l    __ungetbuf,D2
00002CCE  00C0      
00002CD0  2039 0B00 4879          move.l    __ungetbuf,D0
00002CD4  00C0      
00002CD6  0C80 FFFF 4880          cmp.l     #-1,D0
00002CDA  FFFF      
00002CDC  670C      4881          beq.s     getch_1
00002CDE  23FC FFFF 4882          move.l    #-1,__ungetbuf
00002CE2  FFFF 0B00 
00002CE6  00C0      
00002CE8  6010      4883          bra.s     getch_3
                    4884   getch_1:
00002CEA  6100 DE7C 4885          bsr       __getch
00002CEE  2400      4886          move.l    D0,D2
00002CF0  0C80 0000 4887          cmp.l     #13,D0
00002CF4  000D      
00002CF6  6602      4888          bne.s     getch_3
00002CF8  740A      4889          moveq     #10,D2
                    4890   getch_3:
00002CFA  2002      4891          move.l    D2,D0
00002CFC  4CDF 0004 4892          movem.l   (A7)+,D2
00002D00  4E75      4893          rts
                    4894   _tolower:
00002D02  4E56 0000 4895          link      A6,#0
00002D06  48E7 2000 4896          movem.l   D2,-(A7)
00002D0A  242E 0008 4897          move.l    8(A6),D2
00002D0E  0C82 0000 4898          cmp.l     #65,D2
00002D12  0041      
00002D14  6D0E      4899          blt.s     tolower_1
00002D16  0C82 0000 4900          cmp.l     #90,D2
00002D1A  005A      
00002D1C  6E06      4901          bgt.s     tolower_1
00002D1E  84BC 0000 4902          or.l      #32,D2
00002D22  0020      
                    4903   tolower_1:
00002D24  2002      4904          move.l    D2,D0
00002D26  4CDF 0004 4905          movem.l   (A7)+,D2
00002D2A  4E5E      4906          unlk      A6
00002D2C  4E75      4907          rts
                    4908   _sprintf:
00002D2E  4E56 FFFC 4909          link      A6,#-4
00002D32  48E7 2000 4910          movem.l   D2,-(A7)
00002D36  41EE 000C 4911          lea       12(A6),A0
00002D3A  5848      4912          addq.w    #4,A0
00002D3C  2408      4913          move.l    A0,D2
00002D3E  2F02      4914          move.l    D2,-(A7)
00002D40  2F2E 000C 4915          move.l    12(A6),-(A7)
00002D44  2F2E 0008 4916          move.l    8(A6),-(A7)
00002D48  6100 0A1E 4917          bsr       _vsprintf
00002D4C  DEFC 000C 4918          add.w     #12,A7
00002D50  2D40 FFFC 4919          move.l    D0,-4(A6)
00002D54  4282      4920          clr.l     D2
00002D56  202E FFFC 4921          move.l    -4(A6),D0
00002D5A  4CDF 0004 4922          movem.l   (A7)+,D2
00002D5E  4E5E      4923          unlk      A6
00002D60  4E75      4924          rts
                    4925   _memset:
00002D62  206F 0004 4926          move.l    (4,A7),A0
00002D66  202F 0008 4927          move.l    (8,A7),D0
00002D6A  222F 000C 4928          move.l    (12,A7),D1
00002D6E  2248      4929          move.l    A0,A1	
                    4930   memset_1:
00002D70  12C0      4931          move.b    D0,(A1)+
00002D72  5341      4932          subq      #1,D1
00002D74  66FA      4933          bne       memset_1
00002D76  2008      4934          move.l    A0,D0
00002D78  4E75      4935          rts
                    4936   _strcat:
00002D7A  206F 0004 4937          move.l    (4,A7),A0	
00002D7E  226F 0008 4938          move.l    (8,A7),A1	
00002D82  2008      4939          move.l    A0,D0		
                    4940   strcat_0:
00002D84  4A18      4941          tst.b     (A0)+
00002D86  66FC      4942          bne       strcat_0
00002D88  5348      4943          subq      #1,A0
                    4944   strcat_1:
00002D8A  10D9      4945          move.b    (A1)+,(A0)+
00002D8C  66FC      4946          bne       strcat_1
00002D8E  4E75      4947          rts
                    4948   _toupper:
00002D90  4E56 0000 4949          link      A6,#0
00002D94  48E7 2000 4950          movem.l   D2,-(A7)
00002D98  242E 0008 4951          move.l    8(A6),D2
00002D9C  0C82 0000 4952          cmp.l     #97,D2
00002DA0  0061      
00002DA2  6D0E      4953          blt.s     toupper_1
00002DA4  0C82 0000 4954          cmp.l     #122,D2
00002DA8  007A      
00002DAA  6E06      4955          bgt.s     toupper_1
00002DAC  C4BC 0000 4956          and.l     #95,D2
00002DB0  005F      
                    4957   toupper_1:
00002DB2  2002      4958          move.l    D2,D0
00002DB4  4CDF 0004 4959          movem.l   (A7)+,D2
00002DB8  4E5E      4960          unlk      A6
00002DBA  4E75      4961          rts
                    4962   _scanf:
00002DBC  4E56 FFFC 4963          link      A6,#-4
00002DC0  48E7 2000 4964          movem.l   D2,-(A7)
00002DC4  41EE 0008 4965          lea       8(A6),A0
00002DC8  5848      4966          addq.w    #4,A0
00002DCA  2408      4967          move.l    A0,D2
00002DCC  2F02      4968          move.l    D2,-(A7)
00002DCE  2F2E 0008 4969          move.l    8(A6),-(A7)
00002DD2  42A7      4970          clr.l     -(A7)
00002DD4  6100 02C2 4971          bsr       _vsscanf
00002DD8  DEFC 000C 4972          add.w     #12,A7
00002DDC  2D40 FFFC 4973          move.l    D0,-4(A6)
00002DE0  4282      4974          clr.l     D2
00002DE2  202E FFFC 4975          move.l    -4(A6),D0
00002DE6  4CDF 0004 4976          movem.l   (A7)+,D2
00002DEA  4E5E      4977          unlk      A6
00002DEC  4E75      4978          rts
                    4979   @vsscanf_scanread:
00002DEE  4E56 FFFC 4980          link      A6,#-4
00002DF2  48E7 0020 4981          movem.l   A2,-(A7)
00002DF6  45F9 0000 4982          lea       @vsscanf_bufx,A2
00002DFA  53AE      
00002DFC  4AAE 0008 4983          tst.l     8(A6)
00002E00  6722      4984          beq.s     @vsscanf_scanread_1
00002E02  206E 0008 4985          move.l    8(A6),A0
00002E06  58AE 0008 4986          addq.l    #4,8(A6)
00002E0A  2050      4987          move.l    (A0),A0
00002E0C  1010      4988          move.b    (A0),D0
00002E0E  4880      4989          ext.w     D0
00002E10  48C0      4990          ext.l     D0
00002E12  2D40 FFFC 4991          move.l    D0,-4(A6)
00002E16  6706      4992          beq.s     @vsscanf_scanread_3
00002E18  202E FFFC 4993          move.l    -4(A6),D0
00002E1C  6002      4994          bra.s     @vsscanf_scanread_4
                    4995   @vsscanf_scanread_3:
00002E1E  70FF      4996          moveq     #-1,D0
                    4997   @vsscanf_scanread_4:
00002E20  6000 0032 4998          bra       @vsscanf_scanread_5
                    4999   @vsscanf_scanread_1:
00002E24  2052      5000          move.l    (A2),A0
00002E26  1010      5001          move.b    (A0),D0
00002E28  6620      5002          bne.s     @vsscanf_scanread_6
00002E2A  4879 0B00 5003          pea       @vsscanf_buf
00002E2E  0546      
00002E30  6100 1038 5004          bsr       _gets
00002E34  584F      5005          addq.w    #4,A7
00002E36  2480      5006          move.l    D0,(A2)
00002E38  4879 0000 5007          pea       @vsscanf_1
00002E3C  53B2      
00002E3E  4879 0B00 5008          pea       @vsscanf_buf
00002E42  0546      
00002E44  6100 FF34 5009          bsr       _strcat
00002E48  504F      5010          addq.w    #8,A7
                    5011   @vsscanf_scanread_6:
00002E4A  2052      5012          move.l    (A2),A0
00002E4C  5292      5013          addq.l    #1,(A2)
00002E4E  1010      5014          move.b    (A0),D0
00002E50  4880      5015          ext.w     D0
00002E52  48C0      5016          ext.l     D0
                    5017   @vsscanf_scanread_5:
00002E54  4CDF 0400 5018          movem.l   (A7)+,A2
00002E58  4E5E      5019          unlk      A6
00002E5A  4E75      5020          rts
                    5021   @vsscanf_scanputback:
00002E5C  4E56 0000 5022          link      A6,#0
00002E60  48E7 3000 5023          movem.l   D2/D3,-(A7)
00002E64  242E 000C 5024          move.l    12(A6),D2
00002E68  262E 0008 5025          move.l    8(A6),D3
00002E6C  6718      5026          beq.s     @vsscanf_scanputback_1
00002E6E  0C82 FFFF 5027          cmp.l     #-1,D2
00002E72  FFFF      
00002E74  670A      5028          beq.s     @vsscanf_scanputback_3
00002E76  5983      5029          subq.l    #4,D3
00002E78  2043      5030          move.l    D3,A0
00002E7A  2050      5031          move.l    (A0),A0
00002E7C  1082      5032          move.b    D2,(A0)
00002E7E  6004      5033          bra.s     @vsscanf_scanputback_4
                    5034   @vsscanf_scanputback_3:
00002E80  2043      5035          move.l    D3,A0
00002E82  5390      5036          subq.l    #1,(A0)
                    5037   @vsscanf_scanputback_4:
00002E84  602E      5038          bra.s     @vsscanf_scanputback_6
                    5039   @vsscanf_scanputback_1:
00002E86  41F9 0B00 5040          lea       @vsscanf_buf,A0
00002E8A  0546      
00002E8C  2008      5041          move.l    A0,D0
00002E8E  B0B9 0000 5042          cmp.l     @vsscanf_bufx,D0
00002E92  53AE      
00002E94  6610      5043          bne.s     @vsscanf_scanputback_5
00002E96  4239 0B00 5044          clr.b     @vsscanf_buf
00002E9A  0546      
00002E9C  2F02      5045          move.l    D2,-(A7)
00002E9E  6100 103C 5046          bsr       _ungetch
00002EA2  584F      5047          addq.w    #4,A7
00002EA4  600E      5048          bra.s     @vsscanf_scanputback_6
                    5049   @vsscanf_scanputback_5:
00002EA6  53B9 0000 5050          subq.l    #1,@vsscanf_bufx
00002EAA  53AE      
00002EAC  2079 0000 5051          move.l    @vsscanf_bufx,A0
00002EB0  53AE      
00002EB2  1082      5052          move.b    D2,(A0)
                    5053   @vsscanf_scanputback_6:
00002EB4  2002      5054          move.l    D2,D0
00002EB6  4CDF 000C 5055          movem.l   (A7)+,D2/D3
00002EBA  4E5E      5056          unlk      A6
00002EBC  4E75      5057          rts
                    5058   @vsscanf_scanspace:
00002EBE  4E56 0000 5059          link      A6,#0
00002EC2  48E7 2000 5060          movem.l   D2,-(A7)
                    5061   @vsscanf_scanspace_1:
00002EC6  2F2E 0008 5062          move.l    8(A6),-(A7)
00002ECA  6100 FF22 5063          bsr       @vsscanf_scanread
00002ECE  584F      5064          addq.w    #4,A7
00002ED0  2400      5065          move.l    D0,D2
00002ED2  206E 000C 5066          move.l    12(A6),A0
00002ED6  5290      5067          addq.l    #1,(A0)
00002ED8  2042      5068          move.l    D2,A0
00002EDA  43F9 0000 5069          lea       __ctype,A1
00002EDE  53B4      
00002EE0  1030 9801 5070          move.b    1(A0,A1.L),D0
00002EE4  C03C 0010 5071          and.b     #16,D0
00002EE8  66DC      5072          bne       @vsscanf_scanspace_1
00002EEA  2002      5073          move.l    D2,D0
00002EEC  4CDF 0004 5074          movem.l   (A7)+,D2
00002EF0  4E5E      5075          unlk      A6
00002EF2  4E75      5076          rts
                    5077   @vsscanf_scanselect:
00002EF4  4E56 0000 5078          link      A6,#0
00002EF8  48E7 3F20 5079          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00002EFC  262E 000C 5080          move.l    12(A6),D3
00002F00  2C2E 0018 5081          move.l    24(A6),D6
00002F04  2E2E 0014 5082          move.l    20(A6),D7
00002F08  2043      5083          move.l    D3,A0
00002F0A  1010      5084          move.b    (A0),D0
00002F0C  4880      5085          ext.w     D0
00002F0E  48C0      5086          ext.l     D0
00002F10  0C80 0000 5087          cmp.l     #94,D0
00002F14  005E      
00002F16  6608      5088          bne.s     @vsscanf_scanselect_1
00002F18  347C 0001 5089          move.w    #1,A2
00002F1C  5283      5090          addq.l    #1,D3
00002F1E  6004      5091          bra.s     @vsscanf_scanselect_2
                    5092   @vsscanf_scanselect_1:
00002F20  347C 0000 5093          move.w    #0,A2
                    5094   @vsscanf_scanselect_2:
00002F24  202E 0010 5095          move.l    16(A6),D0
00002F28  53AE 0010 5096          subq.l    #1,16(A6)
00002F2C  4A80      5097          tst.l     D0
00002F2E  6700 0108 5098          beq       @vsscanf_scanselect_5
00002F32  2F2E 0008 5099          move.l    8(A6),-(A7)
00002F36  6100 FEB6 5100          bsr       @vsscanf_scanread
00002F3A  584F      5101          addq.w    #4,A7
00002F3C  2800      5102          move.l    D0,D4
00002F3E  0C84 FFFF 5103          cmp.l     #-1,D4
00002F42  FFFF      
00002F44  6604      5104          bne.s     @vsscanf_scanselect_6
00002F46  6000 00F0 5105          bra       @vsscanf_scanselect_5
                    5106   @vsscanf_scanselect_6:
00002F4A  206E 001C 5107          move.l    28(A6),A0
00002F4E  5290      5108          addq.l    #1,(A0)
00002F50  4285      5109          clr.l     D5
00002F52  4282      5110          clr.l     D2
                    5111   @vsscanf_scanselect_8:
00002F54  2043      5112          move.l    D3,A0
00002F56  1030 2800 5113          move.b    0(A0,D2.L),D0
00002F5A  4880      5114          ext.w     D0
00002F5C  48C0      5115          ext.l     D0
00002F5E  0C80 0000 5116          cmp.l     #93,D0
00002F62  005D      
00002F64  6700 008E 5117          beq       @vsscanf_scanselect_10
00002F68  4A82      5118          tst.l     D2
00002F6A  6716      5119          beq.s     @vsscanf_scanselect_11
00002F6C  2043      5120          move.l    D3,A0
00002F6E  1030 2800 5121          move.b    0(A0,D2.L),D0
00002F72  4880      5122          ext.w     D0
00002F74  48C0      5123          ext.l     D0
00002F76  0C80 0000 5124          cmp.l     #93,D0
00002F7A  005D      
00002F7C  6604      5125          bne.s     @vsscanf_scanselect_11
00002F7E  6000 0074 5126          bra       @vsscanf_scanselect_10
                    5127   @vsscanf_scanselect_11:
00002F82  4A82      5128          tst.l     D2
00002F84  6700 0058 5129          beq       @vsscanf_scanselect_15
00002F88  2043      5130          move.l    D3,A0
00002F8A  1030 2800 5131          move.b    0(A0,D2.L),D0
00002F8E  4880      5132          ext.w     D0
00002F90  48C0      5133          ext.l     D0
00002F92  0C80 0000 5134          cmp.l     #45,D0
00002F96  002D      
00002F98  6600 0044 5135          bne       @vsscanf_scanselect_15
00002F9C  2043      5136          move.l    D3,A0
00002F9E  2002      5137          move.l    D2,D0
00002FA0  5380      5138          subq.l    #1,D0
00002FA2  2243      5139          move.l    D3,A1
00002FA4  2F08      5140          move.l    A0,-(A7)
00002FA6  2042      5141          move.l    D2,A0
00002FA8  1230 0800 5142          move.b    0(A0,D0.L),D1
00002FAC  B230 9801 5143          cmp.b     1(A0,A1.L),D1
00002FB0  6C00 002C 5144          bge       @vsscanf_scanselect_15
00002FB4  205F      5145          move.l    (A7)+,A0
00002FB6  2043      5146          move.l    D3,A0
00002FB8  2002      5147          move.l    D2,D0
00002FBA  5380      5148          subq.l    #1,D0
00002FBC  1030 0800 5149          move.b    0(A0,D0.L),D0
00002FC0  4880      5150          ext.w     D0
00002FC2  48C0      5151          ext.l     D0
00002FC4  B880      5152          cmp.l     D0,D4
00002FC6  6D12      5153          blt.s     @vsscanf_scanselect_17
00002FC8  2043      5154          move.l    D3,A0
00002FCA  2242      5155          move.l    D2,A1
00002FCC  1031 8801 5156          move.b    1(A1,A0.L),D0
00002FD0  4880      5157          ext.w     D0
00002FD2  48C0      5158          ext.l     D0
00002FD4  B880      5159          cmp.l     D0,D4
00002FD6  6E02      5160          bgt.s     @vsscanf_scanselect_17
00002FD8  601A      5161          bra.s     @vsscanf_scanselect_10
                    5162   @vsscanf_scanselect_17:
00002FDA  5282      5163          addq.l    #1,D2
00002FDC  6010      5164          bra.s     @vsscanf_scanselect_19
                    5165   @vsscanf_scanselect_15:
00002FDE  2043      5166          move.l    D3,A0
00002FE0  1030 2800 5167          move.b    0(A0,D2.L),D0
00002FE4  4880      5168          ext.w     D0
00002FE6  48C0      5169          ext.l     D0
00002FE8  B880      5170          cmp.l     D0,D4
00002FEA  6602      5171          bne.s     @vsscanf_scanselect_19
00002FEC  6006      5172          bra.s     @vsscanf_scanselect_10
                    5173   @vsscanf_scanselect_19:
00002FEE  5282      5174          addq.l    #1,D2
00002FF0  6000 FF62 5175          bra       @vsscanf_scanselect_8
                    5176   @vsscanf_scanselect_10:
00002FF4  4A82      5177          tst.l     D2
00002FF6  6712      5178          beq.s     @vsscanf_scanselect_23
00002FF8  2043      5179          move.l    D3,A0
00002FFA  1030 2800 5180          move.b    0(A0,D2.L),D0
00002FFE  4880      5181          ext.w     D0
00003000  48C0      5182          ext.l     D0
00003002  0C80 0000 5183          cmp.l     #93,D0
00003006  005D      
00003008  6702      5184          beq.s     @vsscanf_scanselect_21
                    5185   @vsscanf_scanselect_23:
0000300A  7A01      5186          moveq     #1,D5
                    5187   @vsscanf_scanselect_21:
0000300C  200A      5188          move.l    A2,D0
0000300E  6712      5189          beq.s     @vsscanf_scanselect_24
00003010  4A85      5190          tst.l     D5
00003012  660C      5191          bne.s     @vsscanf_scanselect_26
00003014  4A87      5192          tst.l     D7
00003016  6606      5193          bne.s     @vsscanf_scanselect_28
00003018  2046      5194          move.l    D6,A0
0000301A  5286      5195          addq.l    #1,D6
0000301C  1084      5196          move.b    D4,(A0)
                    5197   @vsscanf_scanselect_28:
0000301E  6014      5198          bra.s     @vsscanf_scanselect_4
                    5199   @vsscanf_scanselect_26:
00003020  6016      5200          bra.s     @vsscanf_scanselect_5
                    5201   @vsscanf_scanselect_24:
00003022  4A85      5202          tst.l     D5
00003024  670C      5203          beq.s     @vsscanf_scanselect_30
00003026  4A87      5204          tst.l     D7
00003028  6606      5205          bne.s     @vsscanf_scanselect_32
0000302A  2046      5206          move.l    D6,A0
0000302C  5286      5207          addq.l    #1,D6
0000302E  1084      5208          move.b    D4,(A0)
                    5209   @vsscanf_scanselect_32:
00003030  6002      5210          bra.s     @vsscanf_scanselect_4
                    5211   @vsscanf_scanselect_30:
00003032  6004      5212          bra.s     @vsscanf_scanselect_5
                    5213   @vsscanf_scanselect_4:
00003034  6000 FEEE 5214          bra       @vsscanf_scanselect_2
                    5215   @vsscanf_scanselect_5:
00003038  0C84 FFFF 5216          cmp.l     #-1,D4
0000303C  FFFF      
0000303E  6712      5217          beq.s     @vsscanf_scanselect_34
00003040  2F04      5218          move.l    D4,-(A7)
00003042  2F2E 0008 5219          move.l    8(A6),-(A7)
00003046  6100 FE14 5220          bsr       @vsscanf_scanputback
0000304A  504F      5221          addq.w    #8,A7
0000304C  206E 001C 5222          move.l    28(A6),A0
00003050  5390      5223          subq.l    #1,(A0)
                    5224   @vsscanf_scanselect_34:
00003052  4A87      5225          tst.l     D7
00003054  6604      5226          bne.s     @vsscanf_scanselect_36
00003056  2046      5227          move.l    D6,A0
00003058  4210      5228          clr.b     (A0)
                    5229   @vsscanf_scanselect_36:
0000305A  5283      5230          addq.l    #1,D3
0000305C  2043      5231          move.l    D3,A0
0000305E  1010      5232          move.b    (A0),D0
00003060  4880      5233          ext.w     D0
00003062  48C0      5234          ext.l     D0
00003064  0C80 0000 5235          cmp.l     #93,D0
00003068  005D      
0000306A  6702      5236          beq.s     @vsscanf_scanselect_40
0000306C  60EC      5237          bra       @vsscanf_scanselect_36
                    5238   @vsscanf_scanselect_40:
0000306E  5283      5239          addq.l    #1,D3
00003070  2003      5240          move.l    D3,D0
00003072  4CDF 04FC 5241          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003076  4E5E      5242          unlk      A6
00003078  4E75      5243          rts
                    5244   _scanflush:
0000307A  41F9 0B00 5245          lea       @vsscanf_buf,A0
0000307E  0546      
00003080  23C8 0000 5246          move.l    A0,@vsscanf_bufx
00003084  53AE      
00003086  4239 0B00 5247          clr.b     @vsscanf_buf
0000308A  0546      
0000308C  4878 FFFF 5248          pea       -1
00003090  6100 0E4A 5249          bsr       _ungetch
00003094  584F      5250          addq.w    #4,A7
00003096  4E75      5251          rts
                    5252   _vsscanf:
00003098  4E56 FF88 5253          link      A6,#-120
0000309C  48E7 3F3C 5254          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000030A0  47F8 2DEE 5255          lea       @vsscanf_scanread,A3
000030A4  4AAE 0008 5256          tst.l     8(A6)
000030A8  6706      5257          beq.s     vsscanf_1
000030AA  41EE 0008 5258          lea       8(A6),A0
000030AE  6004      5259          bra.s     vsscanf_2
                    5260   vsscanf_1:
000030B0  4280      5261          clr.l     D0
000030B2  2040      5262          move.l    D0,A0
                    5263   vsscanf_2:
000030B4  2A08      5264          move.l    A0,D5
000030B6  42AE FFE4 5265          clr.l     -28(A6)
000030BA  4284      5266          clr.l     D4
                    5267   vsscanf_3:
000030BC  206E 000C 5268          move.l    12(A6),A0
000030C0  52AE 000C 5269          addq.l    #1,12(A6)
000030C4  1010      5270          move.b    (A0),D0
000030C6  4880      5271          ext.w     D0
000030C8  48C0      5272          ext.l     D0
000030CA  2600      5273          move.l    D0,D3
000030CC  6700 05AC 5274          beq       vsscanf_5
000030D0  4286      5275          clr.l     D6
000030D2  387C 0000 5276          move.w    #0,A4
000030D6  0C83 0000 5277          cmp.l     #32,D3
000030DA  0020      
000030DC  6712      5278          beq.s     vsscanf_8
000030DE  0C83 0000 5279          cmp.l     #9,D3
000030E2  0009      
000030E4  670A      5280          beq.s     vsscanf_8
000030E6  0C83 0000 5281          cmp.l     #10,D3
000030EA  000A      
000030EC  6600 0048 5282          bne       vsscanf_6
                    5283   vsscanf_8:
000030F0  2F05      5284          move.l    D5,-(A7)
000030F2  4E93      5285          jsr       (A3)
000030F4  584F      5286          addq.w    #4,A7
000030F6  2400      5287          move.l    D0,D2
000030F8  52AE FFE4 5288          addq.l    #1,-28(A6)
000030FC  0C82 FFFF 5289          cmp.l     #-1,D2
00003100  FFFF      
00003102  660E      5290          bne.s     vsscanf_11
00003104  4A84      5291          tst.l     D4
00003106  6704      5292          beq.s     vsscanf_13
00003108  2004      5293          move.l    D4,D0
0000310A  6002      5294          bra.s     vsscanf_14
                    5295   vsscanf_13:
0000310C  70FF      5296          moveq     #-1,D0
                    5297   vsscanf_14:
0000310E  6000 056C 5298          bra       vsscanf_15
                    5299   vsscanf_11:
00003112  2042      5300          move.l    D2,A0
00003114  43F9 0000 5301          lea       __ctype,A1
00003118  53B4      
0000311A  1030 9801 5302          move.b    1(A0,A1.L),D0
0000311E  C03C 0010 5303          and.b     #16,D0
00003122  66CC      5304          bne       vsscanf_8
00003124  53AE FFE4 5305          subq.l    #1,-28(A6)
00003128  2F02      5306          move.l    D2,-(A7)
0000312A  2F05      5307          move.l    D5,-(A7)
0000312C  6100 FD2E 5308          bsr       @vsscanf_scanputback
00003130  504F      5309          addq.w    #8,A7
00003132  6000 0542 5310          bra       vsscanf_139
                    5311   vsscanf_6:
00003136  0C83 0000 5312          cmp.l     #37,D3
0000313A  0025      
0000313C  6600 0502 5313          bne       vsscanf_127
00003140  206E 000C 5314          move.l    12(A6),A0
00003144  52AE 000C 5315          addq.l    #1,12(A6)
00003148  1010      5316          move.b    (A0),D0
0000314A  4880      5317          ext.w     D0
0000314C  48C0      5318          ext.l     D0
0000314E  2600      5319          move.l    D0,D3
00003150  42AE FFEC 5320          clr.l     -20(A6)
00003154  4286      5321          clr.l     D6
00003156  42AE FFE8 5322          clr.l     -24(A6)
0000315A  347C 7FFF 5323          move.w    #32767,A2
0000315E  0C83 0000 5324          cmp.l     #42,D3
00003162  002A      
00003164  6612      5325          bne.s     vsscanf_18
00003166  7C01      5326          moveq     #1,D6
00003168  206E 000C 5327          move.l    12(A6),A0
0000316C  52AE 000C 5328          addq.l    #1,12(A6)
00003170  1010      5329          move.b    (A0),D0
00003172  4880      5330          ext.w     D0
00003174  48C0      5331          ext.l     D0
00003176  2600      5332          move.l    D0,D3
                    5333   vsscanf_18:
00003178  2043      5334          move.l    D3,A0
0000317A  43F9 0000 5335          lea       __ctype,A1
0000317E  53B4      
00003180  1030 9801 5336          move.b    1(A0,A1.L),D0
00003184  C03C 0004 5337          and.b     #4,D0
00003188  6700 004E 5338          beq       vsscanf_24
0000318C  2003      5339          move.l    D3,D0
0000318E  0480 0000 5340          sub.l     #48,D0
00003192  0030      
00003194  2440      5341          move.l    D0,A2
                    5342   vsscanf_22:
00003196  206E 000C 5343          move.l    12(A6),A0
0000319A  52AE 000C 5344          addq.l    #1,12(A6)
0000319E  1010      5345          move.b    (A0),D0
000031A0  4880      5346          ext.w     D0
000031A2  48C0      5347          ext.l     D0
000031A4  2600      5348          move.l    D0,D3
000031A6  2040      5349          move.l    D0,A0
000031A8  43F9 0000 5350          lea       __ctype,A1
000031AC  53B4      
000031AE  1030 9801 5351          move.b    1(A0,A1.L),D0
000031B2  C0BC 0000 5352          and.l     #255,D0
000031B6  00FF      
000031B8  C0BC 0000 5353          and.l     #4,D0
000031BC  0004      
000031BE  6718      5354          beq.s     vsscanf_24
000031C0  70D0      5355          moveq     #-48,D0
000031C2  2F0A      5356          move.l    A2,-(A7)
000031C4  4878 000A 5357          pea       10
000031C8  6100 0C12 5358          bsr       LMUL
000031CC  2217      5359          move.l    (A7),D1
000031CE  504F      5360          addq.w    #8,A7
000031D0  D283      5361          add.l     D3,D1
000031D2  D081      5362          add.l     D1,D0
000031D4  2440      5363          move.l    D0,A2
000031D6  60BE      5364          bra       vsscanf_22
                    5365   vsscanf_24:
000031D8  0C83 0000 5366          cmp.l     #108,D3
000031DC  006C      
000031DE  6708      5367          beq.s     vsscanf_27
000031E0  0C83 0000 5368          cmp.l     #76,D3
000031E4  004C      
000031E6  661A      5369          bne.s     vsscanf_25
                    5370   vsscanf_27:
000031E8  2D7C 0000 5371          move.l    #1,-24(A6)
000031EC  0001 FFE8 
000031F0  206E 000C 5372          move.l    12(A6),A0
000031F4  52AE 000C 5373          addq.l    #1,12(A6)
000031F8  1010      5374          move.b    (A0),D0
000031FA  4880      5375          ext.w     D0
000031FC  48C0      5376          ext.l     D0
000031FE  2600      5377          move.l    D0,D3
00003200  6020      5378          bra.s     vsscanf_28
                    5379   vsscanf_25:
00003202  0C83 0000 5380          cmp.l     #104,D3
00003206  0068      
00003208  6618      5381          bne.s     vsscanf_28
0000320A  2D7C 0000 5382          move.l    #1,-20(A6)
0000320E  0001 FFEC 
00003212  206E 000C 5383          move.l    12(A6),A0
00003216  52AE 000C 5384          addq.l    #1,12(A6)
0000321A  1010      5385          move.b    (A0),D0
0000321C  4880      5386          ext.w     D0
0000321E  48C0      5387          ext.l     D0
00003220  2600      5388          move.l    D0,D3
                    5389   vsscanf_28:
00003222  0C83 0000 5390          cmp.l     #91,D3
00003226  005B      
00003228  6600 0036 5391          bne       vsscanf_30
0000322C  4A86      5392          tst.l     D6
0000322E  660A      5393          bne.s     vsscanf_32
00003230  206E 0010 5394          move.l    16(A6),A0
00003234  58AE 0010 5395          addq.l    #4,16(A6)
00003238  2E10      5396          move.l    (A0),D7
                    5397   vsscanf_32:
0000323A  486E FFE4 5398          pea       -28(A6)
0000323E  2F07      5399          move.l    D7,-(A7)
00003240  2F06      5400          move.l    D6,-(A7)
00003242  2F0A      5401          move.l    A2,-(A7)
00003244  2F2E 000C 5402          move.l    12(A6),-(A7)
00003248  2F05      5403          move.l    D5,-(A7)
0000324A  6100 FCA8 5404          bsr       @vsscanf_scanselect
0000324E  DEFC 0018 5405          add.w     #24,A7
00003252  2D40 000C 5406          move.l    D0,12(A6)
00003256  4A86      5407          tst.l     D6
00003258  6602      5408          bne.s     vsscanf_34
0000325A  5284      5409          addq.l    #1,D4
                    5410   vsscanf_34:
0000325C  6000 0418 5411          bra       vsscanf_139
                    5412   vsscanf_30:
00003260  0C83 0000 5413          cmp.l     #110,D3
00003264  006E      
00003266  661A      5414          bne.s     vsscanf_36
00003268  4A86      5415          tst.l     D6
0000326A  6612      5416          bne.s     vsscanf_38
0000326C  206E 0010 5417          move.l    16(A6),A0
00003270  58AE 0010 5418          addq.l    #4,16(A6)
00003274  2E10      5419          move.l    (A0),D7
00003276  2047      5420          move.l    D7,A0
00003278  20AE FFE4 5421          move.l    -28(A6),(A0)
0000327C  5284      5422          addq.l    #1,D4
                    5423   vsscanf_38:
0000327E  6000 03F6 5424          bra       vsscanf_139
                    5425   vsscanf_36:
00003282  0C83 0000 5426          cmp.l     #115,D3
00003286  0073      
00003288  6600 00AC 5427          bne       vsscanf_40
0000328C  486E FFE4 5428          pea       -28(A6)
00003290  2F05      5429          move.l    D5,-(A7)
00003292  6100 FC2A 5430          bsr       @vsscanf_scanspace
00003296  504F      5431          addq.w    #8,A7
00003298  2400      5432          move.l    D0,D2
0000329A  4A86      5433          tst.l     D6
0000329C  660A      5434          bne.s     vsscanf_42
0000329E  206E 0010 5435          move.l    16(A6),A0
000032A2  58AE 0010 5436          addq.l    #4,16(A6)
000032A6  2E10      5437          move.l    (A0),D7
                    5438   vsscanf_42:
000032A8  52AE FFE4 5439          addq.l    #1,-28(A6)
                    5440   vsscanf_44:
000032AC  200A      5441          move.l    A2,D0
000032AE  534A      5442          subq.w    #1,A2
000032B0  4A80      5443          tst.l     D0
000032B2  6700 0038 5444          beq       vsscanf_46
000032B6  2042      5445          move.l    D2,A0
000032B8  43F9 0000 5446          lea       __ctype,A1
000032BC  53B4      
000032BE  1030 9801 5447          move.b    1(A0,A1.L),D0
000032C2  C03C 0010 5448          and.b     #16,D0
000032C6  6624      5449          bne.s     vsscanf_46
000032C8  0C82 FFFF 5450          cmp.l     #-1,D2
000032CC  FFFF      
000032CE  671C      5451          beq.s     vsscanf_46
000032D0  387C 0001 5452          move.w    #1,A4
000032D4  4A86      5453          tst.l     D6
000032D6  6606      5454          bne.s     vsscanf_47
000032D8  2047      5455          move.l    D7,A0
000032DA  5287      5456          addq.l    #1,D7
000032DC  1082      5457          move.b    D2,(A0)
                    5458   vsscanf_47:
000032DE  2F05      5459          move.l    D5,-(A7)
000032E0  4E93      5460          jsr       (A3)
000032E2  584F      5461          addq.w    #4,A7
000032E4  2400      5462          move.l    D0,D2
000032E6  52AE FFE4 5463          addq.l    #1,-28(A6)
000032EA  60C0      5464          bra       vsscanf_44
                    5465   vsscanf_46:
000032EC  4A86      5466          tst.l     D6
000032EE  660A      5467          bne.s     vsscanf_51
000032F0  2047      5468          move.l    D7,A0
000032F2  4210      5469          clr.b     (A0)
000032F4  200C      5470          move.l    A4,D0
000032F6  6702      5471          beq.s     vsscanf_51
000032F8  5284      5472          addq.l    #1,D4
                    5473   vsscanf_51:
000032FA  0C82 FFFF 5474          cmp.l     #-1,D2
000032FE  FFFF      
00003300  6708      5475          beq.s     vsscanf_55
00003302  4A86      5476          tst.l     D6
00003304  661E      5477          bne.s     vsscanf_53
00003306  200C      5478          move.l    A4,D0
00003308  661A      5479          bne.s     vsscanf_53
                    5480   vsscanf_55:
0000330A  4A84      5481          tst.l     D4
0000330C  6704      5482          beq.s     vsscanf_56
0000330E  2004      5483          move.l    D4,D0
00003310  600E      5484          bra.s     vsscanf_59
                    5485   vsscanf_56:
00003312  0C82 FFFF 5486          cmp.l     #-1,D2
00003316  FFFF      
00003318  6604      5487          bne.s     vsscanf_58
0000331A  70FF      5488          moveq     #-1,D0
0000331C  6002      5489          bra.s     vsscanf_59
                    5490   vsscanf_58:
0000331E  2004      5491          move.l    D4,D0
                    5492   vsscanf_59:
00003320  6000 035A 5493          bra       vsscanf_15
                    5494   vsscanf_53:
00003324  53AE FFE4 5495          subq.l    #1,-28(A6)
00003328  2F02      5496          move.l    D2,-(A7)
0000332A  2F05      5497          move.l    D5,-(A7)
0000332C  6100 FB2E 5498          bsr       @vsscanf_scanputback
00003330  504F      5499          addq.w    #8,A7
00003332  6000 0342 5500          bra       vsscanf_139
                    5501   vsscanf_40:
00003336  0C83 0000 5502          cmp.l     #99,D3
0000333A  0063      
0000333C  6600 008E 5503          bne       vsscanf_60
00003340  4A86      5504          tst.l     D6
00003342  660A      5505          bne.s     vsscanf_62
00003344  206E 0010 5506          move.l    16(A6),A0
00003348  58AE 0010 5507          addq.l    #4,16(A6)
0000334C  2E10      5508          move.l    (A0),D7
                    5509   vsscanf_62:
0000334E  2F05      5510          move.l    D5,-(A7)
00003350  4E93      5511          jsr       (A3)
00003352  584F      5512          addq.w    #4,A7
00003354  2400      5513          move.l    D0,D2
00003356  52AE FFE4 5514          addq.l    #1,-28(A6)
0000335A  200A      5515          move.l    A2,D0
0000335C  0C80 0000 5516          cmp.l     #32767,D0
00003360  7FFF      
00003362  6604      5517          bne.s     vsscanf_64
00003364  347C 0001 5518          move.w    #1,A2
                    5519   vsscanf_64:
00003368  0C82 FFFF 5520          cmp.l     #-1,D2
0000336C  FFFF      
0000336E  6606      5521          bne.s     vsscanf_66
00003370  4A86      5522          tst.l     D6
00003372  6602      5523          bne.s     vsscanf_66
00003374  5384      5524          subq.l    #1,D4
                    5525   vsscanf_66:
00003376  200A      5526          move.l    A2,D0
00003378  534A      5527          subq.w    #1,A2
0000337A  4A80      5528          tst.l     D0
0000337C  6720      5529          beq.s     vsscanf_70
0000337E  0C82 FFFF 5530          cmp.l     #-1,D2
00003382  FFFF      
00003384  6718      5531          beq.s     vsscanf_70
00003386  4A86      5532          tst.l     D6
00003388  6606      5533          bne.s     vsscanf_71
0000338A  2047      5534          move.l    D7,A0
0000338C  5287      5535          addq.l    #1,D7
0000338E  1082      5536          move.b    D2,(A0)
                    5537   vsscanf_71:
00003390  2F05      5538          move.l    D5,-(A7)
00003392  4E93      5539          jsr       (A3)
00003394  584F      5540          addq.w    #4,A7
00003396  2400      5541          move.l    D0,D2
00003398  52AE FFE4 5542          addq.l    #1,-28(A6)
0000339C  60D8      5543          bra       vsscanf_66
                    5544   vsscanf_70:
0000339E  0C82 FFFF 5545          cmp.l     #-1,D2
000033A2  FFFF      
000033A4  660E      5546          bne.s     vsscanf_73
000033A6  4A84      5547          tst.l     D4
000033A8  6704      5548          beq.s     vsscanf_75
000033AA  2004      5549          move.l    D4,D0
000033AC  6002      5550          bra.s     vsscanf_76
                    5551   vsscanf_75:
000033AE  70FF      5552          moveq     #-1,D0
                    5553   vsscanf_76:
000033B0  6000 02CA 5554          bra       vsscanf_15
                    5555   vsscanf_73:
000033B4  4A86      5556          tst.l     D6
000033B6  6602      5557          bne.s     vsscanf_77
000033B8  5284      5558          addq.l    #1,D4
                    5559   vsscanf_77:
000033BA  53AE FFE4 5560          subq.l    #1,-28(A6)
000033BE  2F02      5561          move.l    D2,-(A7)
000033C0  2F05      5562          move.l    D5,-(A7)
000033C2  6100 FA98 5563          bsr       @vsscanf_scanputback
000033C6  504F      5564          addq.w    #8,A7
000033C8  6000 02AC 5565          bra       vsscanf_139
                    5566   vsscanf_60:
000033CC  0C83 0000 5567          cmp.l     #105,D3
000033D0  0069      
000033D2  6600 0060 5568          bne       vsscanf_82
000033D6  486E FFE4 5569          pea       -28(A6)
000033DA  2F05      5570          move.l    D5,-(A7)
000033DC  6100 FAE0 5571          bsr       @vsscanf_scanspace
000033E0  504F      5572          addq.w    #8,A7
000033E2  2400      5573          move.l    D0,D2
000033E4  0C82 0000 5574          cmp.l     #48,D2
000033E8  0030      
000033EA  6600 0038 5575          bne       vsscanf_81
000033EE  387C 0001 5576          move.w    #1,A4
000033F2  2F05      5577          move.l    D5,-(A7)
000033F4  4E93      5578          jsr       (A3)
000033F6  584F      5579          addq.w    #4,A7
000033F8  2400      5580          move.l    D0,D2
000033FA  2F02      5581          move.l    D2,-(A7)
000033FC  6100 F904 5582          bsr       _tolower
00003400  584F      5583          addq.w    #4,A7
00003402  0C80 0000 5584          cmp.l     #120,D0
00003406  0078      
00003408  6604      5585          bne.s     vsscanf_83
0000340A  7678      5586          moveq     #120,D3
0000340C  6010      5587          bra.s     vsscanf_84
                    5588   vsscanf_83:
0000340E  53AE FFE4 5589          subq.l    #1,-28(A6)
00003412  2F02      5590          move.l    D2,-(A7)
00003414  2F05      5591          move.l    D5,-(A7)
00003416  6100 FA44 5592          bsr       @vsscanf_scanputback
0000341A  504F      5593          addq.w    #8,A7
0000341C  766F      5594          moveq     #111,D3
                    5595   vsscanf_84:
0000341E  52AE FFE4 5596          addq.l    #1,-28(A6)
00003422  6010      5597          bra.s     vsscanf_82
                    5598   vsscanf_81:
00003424  53AE FFE4 5599          subq.l    #1,-28(A6)
00003428  2F02      5600          move.l    D2,-(A7)
0000342A  2F05      5601          move.l    D5,-(A7)
0000342C  6100 FA2E 5602          bsr       @vsscanf_scanputback
00003430  504F      5603          addq.w    #8,A7
00003432  7664      5604          moveq     #100,D3
                    5605   vsscanf_82:
00003434  0C83 0000 5606          cmp.l     #100,D3
00003438  0064      
0000343A  671A      5607          beq.s     vsscanf_87
0000343C  0C83 0000 5608          cmp.l     #117,D3
00003440  0075      
00003442  6712      5609          beq.s     vsscanf_87
00003444  0C83 0000 5610          cmp.l     #120,D3
00003448  0078      
0000344A  670A      5611          beq.s     vsscanf_87
0000344C  0C83 0000 5612          cmp.l     #111,D3
00003450  006F      
00003452  6600 01A4 5613          bne       vsscanf_85
                    5614   vsscanf_87:
00003456  486E FFE4 5615          pea       -28(A6)
0000345A  2F05      5616          move.l    D5,-(A7)
0000345C  6100 FA60 5617          bsr       @vsscanf_scanspace
00003460  504F      5618          addq.w    #8,A7
00003462  2400      5619          move.l    D0,D2
00003464  2D7C 0000 5620          move.l    #10,-4(A6)
00003468  000A FFFC 
0000346C  0C83 0000 5621          cmp.l     #120,D3
00003470  0078      
00003472  6608      5622          bne.s     vsscanf_88
00003474  2D7C 0000 5623          move.l    #16,-4(A6)
00003478  0010 FFFC 
                    5624   vsscanf_88:
0000347C  0C83 0000 5625          cmp.l     #111,D3
00003480  006F      
00003482  6608      5626          bne.s     vsscanf_90
00003484  2D7C 0000 5627          move.l    #8,-4(A6)
00003488  0008 FFFC 
                    5628   vsscanf_90:
0000348C  4A86      5629          tst.l     D6
0000348E  660A      5630          bne.s     vsscanf_92
00003490  206E 0010 5631          move.l    16(A6),A0
00003494  58AE 0010 5632          addq.l    #4,16(A6)
00003498  2E10      5633          move.l    (A0),D7
                    5634   vsscanf_92:
0000349A  42AE FFE0 5635          clr.l     -32(A6)
0000349E  52AE FFE4 5636          addq.l    #1,-28(A6)
000034A2  0C83 0000 5637          cmp.l     #117,D3
000034A6  0075      
000034A8  6720      5638          beq.s     vsscanf_94
000034AA  0C82 0000 5639          cmp.l     #45,D2
000034AE  002D      
000034B0  6618      5640          bne.s     vsscanf_94
000034B2  2F05      5641          move.l    D5,-(A7)
000034B4  4E93      5642          jsr       (A3)
000034B6  584F      5643          addq.w    #4,A7
000034B8  2400      5644          move.l    D0,D2
000034BA  52AE FFE4 5645          addq.l    #1,-28(A6)
000034BE  2D7C 0000 5646          move.l    #1,-32(A6)
000034C2  0001 FFE0 
000034C6  387C 0001 5647          move.w    #1,A4
                    5648   vsscanf_94:
000034CA  3A7C 0000 5649          move.w    #0,A5
000034CE  0C82 FFFF 5650          cmp.l     #-1,D2
000034D2  FFFF      
000034D4  660E      5651          bne.s     vsscanf_96
000034D6  4A84      5652          tst.l     D4
000034D8  6704      5653          beq.s     vsscanf_98
000034DA  2004      5654          move.l    D4,D0
000034DC  6002      5655          bra.s     vsscanf_99
                    5656   vsscanf_98:
000034DE  70FF      5657          moveq     #-1,D0
                    5658   vsscanf_99:
000034E0  6000 019A 5659          bra       vsscanf_15
                    5660   vsscanf_96:
000034E4  200A      5661          move.l    A2,D0
000034E6  534A      5662          subq.w    #1,A2
000034E8  4A80      5663          tst.l     D0
000034EA  6700 0090 5664          beq       vsscanf_102
000034EE  0C83 0000 5665          cmp.l     #120,D3
000034F2  0078      
000034F4  6620      5666          bne.s     vsscanf_104
000034F6  2F02      5667          move.l    D2,-(A7)
000034F8  6100 F896 5668          bsr       _toupper
000034FC  584F      5669          addq.w    #4,A7
000034FE  0C80 0000 5670          cmp.l     #65,D0
00003502  0041      
00003504  6D10      5671          blt.s     vsscanf_104
00003506  2F02      5672          move.l    D2,-(A7)
00003508  6100 F886 5673          bsr       _toupper
0000350C  584F      5674          addq.w    #4,A7
0000350E  0C80 0000 5675          cmp.l     #70,D0
00003512  0046      
00003514  6F14      5676          ble.s     vsscanf_103
                    5677   vsscanf_104:
00003516  2042      5678          move.l    D2,A0
00003518  43F9 0000 5679          lea       __ctype,A1
0000351C  53B4      
0000351E  1030 9801 5680          move.b    1(A0,A1.L),D0
00003522  C03C 0004 5681          and.b     #4,D0
00003526  6700 0054 5682          beq       vsscanf_102
                    5683   vsscanf_103:
0000352A  2042      5684          move.l    D2,A0
0000352C  43F9 0000 5685          lea       __ctype,A1
00003530  53B4      
00003532  1030 9801 5686          move.b    1(A0,A1.L),D0
00003536  C03C 0004 5687          and.b     #4,D0
0000353A  6614      5688          bne.s     vsscanf_105
0000353C  70F9      5689          moveq     #-7,D0
0000353E  2F00      5690          move.l    D0,-(A7)
00003540  2F02      5691          move.l    D2,-(A7)
00003542  6100 F84C 5692          bsr       _toupper
00003546  584F      5693          addq.w    #4,A7
00003548  2200      5694          move.l    D0,D1
0000354A  201F      5695          move.l    (A7)+,D0
0000354C  D081      5696          add.l     D1,D0
0000354E  2400      5697          move.l    D0,D2
                    5698   vsscanf_105:
00003550  2F0D      5699          move.l    A5,-(A7)
00003552  2F2E FFFC 5700          move.l    -4(A6),-(A7)
00003556  6100 0884 5701          bsr       LMUL
0000355A  2017      5702          move.l    (A7),D0
0000355C  504F      5703          addq.w    #8,A7
0000355E  D082      5704          add.l     D2,D0
00003560  0480 0000 5705          sub.l     #48,D0
00003564  0030      
00003566  2A40      5706          move.l    D0,A5
00003568  2F05      5707          move.l    D5,-(A7)
0000356A  4E93      5708          jsr       (A3)
0000356C  584F      5709          addq.w    #4,A7
0000356E  2400      5710          move.l    D0,D2
00003570  52AE FFE4 5711          addq.l    #1,-28(A6)
00003574  387C 0001 5712          move.w    #1,A4
00003578  6000 FF6A 5713          bra       vsscanf_96
                    5714   vsscanf_102:
0000357C  0C82 FFFF 5715          cmp.l     #-1,D2
00003580  FFFF      
00003582  671A      5716          beq.s     vsscanf_107
00003584  2F02      5717          move.l    D2,-(A7)
00003586  2F05      5718          move.l    D5,-(A7)
00003588  6100 F8D2 5719          bsr       @vsscanf_scanputback
0000358C  504F      5720          addq.w    #8,A7
0000358E  53AE FFE4 5721          subq.l    #1,-28(A6)
00003592  200C      5722          move.l    A4,D0
00003594  6606      5723          bne.s     vsscanf_109
00003596  2004      5724          move.l    D4,D0
00003598  6000 00E2 5725          bra       vsscanf_15
                    5726   vsscanf_109:
0000359C  6012      5727          bra.s     vsscanf_111
                    5728   vsscanf_107:
0000359E  200C      5729          move.l    A4,D0
000035A0  660E      5730          bne.s     vsscanf_111
000035A2  4A84      5731          tst.l     D4
000035A4  6704      5732          beq.s     vsscanf_113
000035A6  2004      5733          move.l    D4,D0
000035A8  6002      5734          bra.s     vsscanf_114
                    5735   vsscanf_113:
000035AA  70FF      5736          moveq     #-1,D0
                    5737   vsscanf_114:
000035AC  6000 00CE 5738          bra       vsscanf_15
                    5739   vsscanf_111:
000035B0  4AAE FFE0 5740          tst.l     -32(A6)
000035B4  6706      5741          beq.s     vsscanf_115
000035B6  200D      5742          move.l    A5,D0
000035B8  4480      5743          neg.l     D0
000035BA  2A40      5744          move.l    D0,A5
                    5745   vsscanf_115:
000035BC  4A86      5746          tst.l     D6
000035BE  661E      5747          bne.s     vsscanf_117
000035C0  4AAE FFE8 5748          tst.l     -24(A6)
000035C4  6706      5749          beq.s     vsscanf_119
000035C6  2047      5750          move.l    D7,A0
000035C8  208D      5751          move.l    A5,(A0)
000035CA  6010      5752          bra.s     vsscanf_122
                    5753   vsscanf_119:
000035CC  4AAE FFEC 5754          tst.l     -20(A6)
000035D0  6706      5755          beq.s     vsscanf_121
000035D2  2047      5756          move.l    D7,A0
000035D4  308D      5757          move.w    A5,(A0)
000035D6  6004      5758          bra.s     vsscanf_122
                    5759   vsscanf_121:
000035D8  2047      5760          move.l    D7,A0
000035DA  208D      5761          move.l    A5,(A0)
                    5762   vsscanf_122:
000035DC  5284      5763          addq.l    #1,D4
                    5764   vsscanf_117:
000035DE  0C82 FFFF 5765          cmp.l     #-1,D2
000035E2  FFFF      
000035E4  660E      5766          bne.s     vsscanf_123
000035E6  4A84      5767          tst.l     D4
000035E8  6704      5768          beq.s     vsscanf_125
000035EA  2004      5769          move.l    D4,D0
000035EC  6002      5770          bra.s     vsscanf_126
                    5771   vsscanf_125:
000035EE  70FF      5772          moveq     #-1,D0
                    5773   vsscanf_126:
000035F0  6000 008A 5774          bra       vsscanf_15
                    5775   vsscanf_123:
000035F4  6000 0080 5776          bra       vsscanf_139
                    5777   vsscanf_85:
000035F8  0C83 0000 5778          cmp.l     #37,D3
000035FC  0025      
000035FE  6600 0040 5779          bne       vsscanf_127
00003602  2F05      5780          move.l    D5,-(A7)
00003604  4E93      5781          jsr       (A3)
00003606  584F      5782          addq.w    #4,A7
00003608  2400      5783          move.l    D0,D2
0000360A  0C82 FFFF 5784          cmp.l     #-1,D2
0000360E  FFFF      
00003610  660E      5785          bne.s     vsscanf_129
00003612  4A84      5786          tst.l     D4
00003614  6704      5787          beq.s     vsscanf_131
00003616  2004      5788          move.l    D4,D0
00003618  6002      5789          bra.s     vsscanf_132
                    5790   vsscanf_131:
0000361A  70FF      5791          moveq     #-1,D0
                    5792   vsscanf_132:
0000361C  6000 005E 5793          bra       vsscanf_15
                    5794   vsscanf_129:
00003620  52AE FFE4 5795          addq.l    #1,-28(A6)
00003624  B483      5796          cmp.l     D3,D2
00003626  6714      5797          beq.s     vsscanf_133
00003628  2F02      5798          move.l    D2,-(A7)
0000362A  2F05      5799          move.l    D5,-(A7)
0000362C  6100 F82E 5800          bsr       @vsscanf_scanputback
00003630  504F      5801          addq.w    #8,A7
00003632  53AE FFE4 5802          subq.l    #1,-28(A6)
00003636  2004      5803          move.l    D4,D0
00003638  6000 0042 5804          bra       vsscanf_15
                    5805   vsscanf_133:
0000363C  6000 0038 5806          bra       vsscanf_139
                    5807   vsscanf_127:
00003640  2F05      5808          move.l    D5,-(A7)
00003642  4E93      5809          jsr       (A3)
00003644  584F      5810          addq.w    #4,A7
00003646  2400      5811          move.l    D0,D2
00003648  52AE FFE4 5812          addq.l    #1,-28(A6)
0000364C  0C82 FFFF 5813          cmp.l     #-1,D2
00003650  FFFF      
00003652  660C      5814          bne.s     vsscanf_135
00003654  4A84      5815          tst.l     D4
00003656  6704      5816          beq.s     vsscanf_137
00003658  2004      5817          move.l    D4,D0
0000365A  6002      5818          bra.s     vsscanf_138
                    5819   vsscanf_137:
0000365C  70FF      5820          moveq     #-1,D0
                    5821   vsscanf_138:
0000365E  601C      5822          bra.s     vsscanf_15
                    5823   vsscanf_135:
00003660  B483      5824          cmp.l     D3,D2
00003662  6712      5825          beq.s     vsscanf_139
00003664  2F02      5826          move.l    D2,-(A7)
00003666  2F05      5827          move.l    D5,-(A7)
00003668  6100 F7F2 5828          bsr       @vsscanf_scanputback
0000366C  504F      5829          addq.w    #8,A7
0000366E  53AE FFE4 5830          subq.l    #1,-28(A6)
00003672  2004      5831          move.l    D4,D0
00003674  6006      5832          bra.s     vsscanf_15
                    5833   vsscanf_139:
00003676  6000 FA44 5834          bra       vsscanf_3
                    5835   vsscanf_5:
0000367A  2004      5836          move.l    D4,D0
                    5837   vsscanf_15:
0000367C  4CDF 3CFC 5838          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003680  4E5E      5839          unlk      A6
00003682  4E75      5840          rts
                    5841   _printf:
00003684  4E56 FFFC 5842          link      A6,#-4
00003688  48E7 2000 5843          movem.l   D2,-(A7)
0000368C  41EE 0008 5844          lea       8(A6),A0
00003690  5848      5845          addq.w    #4,A0
00003692  2408      5846          move.l    A0,D2
00003694  2F02      5847          move.l    D2,-(A7)
00003696  2F2E 0008 5848          move.l    8(A6),-(A7)
0000369A  42A7      5849          clr.l     -(A7)
0000369C  6100 00CA 5850          bsr       _vsprintf
000036A0  DEFC 000C 5851          add.w     #12,A7
000036A4  2D40 FFFC 5852          move.l    D0,-4(A6)
000036A8  4282      5853          clr.l     D2
000036AA  202E FFFC 5854          move.l    -4(A6),D0
000036AE  4CDF 0004 5855          movem.l   (A7)+,D2
000036B2  4E5E      5856          unlk      A6
000036B4  4E75      5857          rts
                    5858   @vsprintf_copy:
000036B6  4E56 0000 5859          link      A6,#0
000036BA  206E 0008 5860          move.l    8(A6),A0
000036BE  4A90      5861          tst.l     (A0)
000036C0  6710      5862          beq.s     @vsprintf_copy_1
000036C2  202E 000C 5863          move.l    12(A6),D0
000036C6  206E 0008 5864          move.l    8(A6),A0
000036CA  2250      5865          move.l    (A0),A1
000036CC  5290      5866          addq.l    #1,(A0)
000036CE  1280      5867          move.b    D0,(A1)
000036D0  600A      5868          bra.s     @vsprintf_copy_2
                    5869   @vsprintf_copy_1:
000036D2  2F2E 000C 5870          move.l    12(A6),-(A7)
000036D6  6100 F5BE 5871          bsr       _putch
000036DA  584F      5872          addq.w    #4,A7
                    5873   @vsprintf_copy_2:
000036DC  4E5E      5874          unlk      A6
000036DE  4E75      5875          rts
                    5876   @vsprintf_getval:
000036E0  4E56 0000 5877          link      A6,#0
000036E4  48E7 3000 5878          movem.l   D2/D3,-(A7)
000036E8  242E 0008 5879          move.l    8(A6),D2
000036EC  4283      5880          clr.l     D3
000036EE  2042      5881          move.l    D2,A0
000036F0  2050      5882          move.l    (A0),A0
000036F2  1010      5883          move.b    (A0),D0
000036F4  4880      5884          ext.w     D0
000036F6  48C0      5885          ext.l     D0
000036F8  0C80 0000 5886          cmp.l     #42,D0
000036FC  002A      
000036FE  6612      5887          bne.s     @vsprintf_getval_1
00003700  206E 000C 5888          move.l    12(A6),A0
00003704  2250      5889          move.l    (A0),A1
00003706  5890      5890          addq.l    #4,(A0)
00003708  2611      5891          move.l    (A1),D3
0000370A  2042      5892          move.l    D2,A0
0000370C  5290      5893          addq.l    #1,(A0)
0000370E  6000 004E 5894          bra       @vsprintf_getval_5
                    5895   @vsprintf_getval_1:
00003712  2042      5896          move.l    D2,A0
00003714  2050      5897          move.l    (A0),A0
00003716  1010      5898          move.b    (A0),D0
00003718  4880      5899          ext.w     D0
0000371A  48C0      5900          ext.l     D0
0000371C  0C80 0000 5901          cmp.l     #48,D0
00003720  0030      
00003722  6D00 003A 5902          blt       @vsprintf_getval_5
00003726  2042      5903          move.l    D2,A0
00003728  2050      5904          move.l    (A0),A0
0000372A  1010      5905          move.b    (A0),D0
0000372C  4880      5906          ext.w     D0
0000372E  48C0      5907          ext.l     D0
00003730  0C80 0000 5908          cmp.l     #57,D0
00003734  0039      
00003736  6E26      5909          bgt.s     @vsprintf_getval_5
00003738  2F03      5910          move.l    D3,-(A7)
0000373A  4878 000A 5911          pea       10
0000373E  6100 069C 5912          bsr       LMUL
00003742  2017      5913          move.l    (A7),D0
00003744  504F      5914          addq.w    #8,A7
00003746  2042      5915          move.l    D2,A0
00003748  2250      5916          move.l    (A0),A1
0000374A  5290      5917          addq.l    #1,(A0)
0000374C  1211      5918          move.b    (A1),D1
0000374E  4881      5919          ext.w     D1
00003750  48C1      5920          ext.l     D1
00003752  D081      5921          add.l     D1,D0
00003754  0480 0000 5922          sub.l     #48,D0
00003758  0030      
0000375A  2600      5923          move.l    D0,D3
0000375C  60B4      5924          bra       @vsprintf_getval_1
                    5925   @vsprintf_getval_5:
0000375E  2003      5926          move.l    D3,D0
00003760  4CDF 000C 5927          movem.l   (A7)+,D2/D3
00003764  4E5E      5928          unlk      A6
00003766  4E75      5929          rts
                    5930   _vsprintf:
00003768  4E56 FFCC 5931          link      A6,#-52
0000376C  48E7 3F3C 5932          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003770  45EE 0008 5933          lea       8(A6),A2
00003774  47F8 36B6 5934          lea       @vsprintf_copy,A3
00003778  49F9 0000 5935          lea       _ultoa,A4
0000377C  3FE6      
0000377E  4286      5936          clr.l     D6
                    5937   vsprintf_1:
00003780  206E 000C 5938          move.l    12(A6),A0
00003784  4A10      5939          tst.b     (A0)
00003786  6700 0624 5940          beq       vsprintf_3
0000378A  206E 000C 5941          move.l    12(A6),A0
0000378E  1010      5942          move.b    (A0),D0
00003790  4880      5943          ext.w     D0
00003792  48C0      5944          ext.l     D0
00003794  0C80 0000 5945          cmp.l     #37,D0
00003798  0025      
0000379A  671C      5946          beq.s     vsprintf_4
0000379C  206E 000C 5947          move.l    12(A6),A0
000037A0  52AE 000C 5948          addq.l    #1,12(A6)
000037A4  1210      5949          move.b    (A0),D1
000037A6  4881      5950          ext.w     D1
000037A8  48C1      5951          ext.l     D1
000037AA  2F01      5952          move.l    D1,-(A7)
000037AC  2F0A      5953          move.l    A2,-(A7)
000037AE  4E93      5954          jsr       (A3)
000037B0  504F      5955          addq.w    #8,A7
000037B2  5286      5956          addq.l    #1,D6
000037B4  6000 05F2 5957          bra       vsprintf_2
                    5958   vsprintf_4:
000037B8  52AE 000C 5959          addq.l    #1,12(A6)
000037BC  422E FFD3 5960          clr.b     -45(A6)
000037C0  422E FFD2 5961          clr.b     -46(A6)
000037C4  422E FFD0 5962          clr.b     -48(A6)
000037C8  422E FFCF 5963          clr.b     -49(A6)
000037CC  422E FFCE 5964          clr.b     -50(A6)
000037D0  422E FFCD 5965          clr.b     -51(A6)
000037D4  42AE FFFC 5966          clr.l     -4(A6)
000037D8  7AFF      5967          moveq     #-1,D5
000037DA  41EE FFDC 5968          lea       -36(A6),A0
000037DE  2608      5969          move.l    A0,D3
000037E0  2408      5970          move.l    A0,D2
                    5971   vsprintf_6:
000037E2  206E 000C 5972          move.l    12(A6),A0
000037E6  1010      5973          move.b    (A0),D0
000037E8  4880      5974          ext.w     D0
000037EA  48C0      5975          ext.l     D0
000037EC  0C80 0000 5976          cmp.l     #43,D0
000037F0  002B      
000037F2  6730      5977          beq.s     vsprintf_12
000037F4  6E18      5978          bgt.s     vsprintf_15
000037F6  0C80 0000 5979          cmp.l     #35,D0
000037FA  0023      
000037FC  6700 003E 5980          beq       vsprintf_14
00003800  6E00 0046 5981          bgt       vsprintf_9
00003804  0C80 0000 5982          cmp.l     #32,D0
00003808  0020      
0000380A  6724      5983          beq.s     vsprintf_13
0000380C  603A      5984          bra.s     vsprintf_9
                    5985   vsprintf_15:
0000380E  0C80 0000 5986          cmp.l     #45,D0
00003812  002D      
00003814  6702      5987          beq.s     vsprintf_11
00003816  6030      5988          bra.s     vsprintf_9
                    5989   vsprintf_11:
00003818  1D7C 0001 5990          move.b    #1,-51(A6)
0000381C  FFCD      
0000381E  52AE 000C 5991          addq.l    #1,12(A6)
00003822  6026      5992          bra.s     vsprintf_7
                    5993   vsprintf_12:
00003824  1D7C 0001 5994          move.b    #1,-50(A6)
00003828  FFCE      
0000382A  52AE 000C 5995          addq.l    #1,12(A6)
0000382E  601A      5996          bra.s     vsprintf_7
                    5997   vsprintf_13:
00003830  1D7C 0001 5998          move.b    #1,-49(A6)
00003834  FFCF      
00003836  52AE 000C 5999          addq.l    #1,12(A6)
0000383A  600E      6000          bra.s     vsprintf_7
                    6001   vsprintf_14:
0000383C  1D7C 0001 6002          move.b    #1,-48(A6)
00003840  FFD0      
00003842  52AE 000C 6003          addq.l    #1,12(A6)
00003846  6002      6004          bra.s     vsprintf_7
                    6005   vsprintf_9:
00003848  6002      6006          bra.s     vsprintf_8
                    6007   vsprintf_7:
0000384A  6096      6008          bra       vsprintf_6
                    6009   vsprintf_8:
0000384C  206E 000C 6010          move.l    12(A6),A0
00003850  1010      6011          move.b    (A0),D0
00003852  4880      6012          ext.w     D0
00003854  48C0      6013          ext.l     D0
00003856  0C80 0000 6014          cmp.l     #48,D0
0000385A  0030      
0000385C  660A      6015          bne.s     vsprintf_16
0000385E  52AE 000C 6016          addq.l    #1,12(A6)
00003862  1D7C 0001 6017          move.b    #1,-46(A6)
00003866  FFD2      
                    6018   vsprintf_16:
00003868  486E 0010 6019          pea       16(A6)
0000386C  486E 000C 6020          pea       12(A6)
00003870  6100 FE6E 6021          bsr       @vsprintf_getval
00003874  504F      6022          addq.w    #8,A7
00003876  2A40      6023          move.l    D0,A5
00003878  206E 000C 6024          move.l    12(A6),A0
0000387C  1010      6025          move.b    (A0),D0
0000387E  4880      6026          ext.w     D0
00003880  48C0      6027          ext.l     D0
00003882  0C80 0000 6028          cmp.l     #46,D0
00003886  002E      
00003888  6614      6029          bne.s     vsprintf_18
0000388A  52AE 000C 6030          addq.l    #1,12(A6)
0000388E  486E 0010 6031          pea       16(A6)
00003892  486E 000C 6032          pea       12(A6)
00003896  6100 FE48 6033          bsr       @vsprintf_getval
0000389A  504F      6034          addq.w    #8,A7
0000389C  2A00      6035          move.l    D0,D5
                    6036   vsprintf_18:
0000389E  206E 000C 6037          move.l    12(A6),A0
000038A2  1010      6038          move.b    (A0),D0
000038A4  4880      6039          ext.w     D0
000038A6  48C0      6040          ext.l     D0
000038A8  0C80 0000 6041          cmp.l     #108,D0
000038AC  006C      
000038AE  660A      6042          bne.s     vsprintf_20
000038B0  52AE 000C 6043          addq.l    #1,12(A6)
000038B4  1D7C 0001 6044          move.b    #1,-45(A6)
000038B8  FFD3      
                    6045   vsprintf_20:
000038BA  206E 000C 6046          move.l    12(A6),A0
000038BE  1010      6047          move.b    (A0),D0
000038C0  4880      6048          ext.w     D0
000038C2  48C0      6049          ext.l     D0
000038C4  0C80 0000 6050          cmp.l     #111,D0
000038C8  006F      
000038CA  6700 00D4 6051          beq       vsprintf_27
000038CE  6E34      6052          bgt.s     vsprintf_33
000038D0  0C80 0000 6053          cmp.l     #100,D0
000038D4  0064      
000038D6  6700 0054 6054          beq       vsprintf_24
000038DA  6E1C      6055          bgt.s     vsprintf_34
000038DC  0C80 0000 6056          cmp.l     #99,D0
000038E0  0063      
000038E2  6700 012C 6057          beq       vsprintf_30
000038E6  6E00 016A 6058          bgt       vsprintf_22
000038EA  0C80 0000 6059          cmp.l     #88,D0
000038EE  0058      
000038F0  6700 00E6 6060          beq       vsprintf_28
000038F4  6000 015C 6061          bra       vsprintf_22
                    6062   vsprintf_34:
000038F8  0C80 0000 6063          cmp.l     #105,D0
000038FC  0069      
000038FE  672C      6064          beq.s     vsprintf_24
00003900  6000 0150 6065          bra       vsprintf_22
                    6066   vsprintf_33:
00003904  0C80 0000 6067          cmp.l     #117,D0
00003908  0075      
0000390A  6700 005C 6068          beq       vsprintf_26
0000390E  6E0E      6069          bgt.s     vsprintf_35
00003910  0C80 0000 6070          cmp.l     #115,D0
00003914  0073      
00003916  6700 011C 6071          beq       vsprintf_31
0000391A  6000 0136 6072          bra       vsprintf_22
                    6073   vsprintf_35:
0000391E  0C80 0000 6074          cmp.l     #120,D0
00003922  0078      
00003924  6700 00B2 6075          beq       vsprintf_28
00003928  6000 0128 6076          bra       vsprintf_22
                    6077   vsprintf_24:
0000392C  4A2E FFD3 6078          tst.b     -45(A6)
00003930  671A      6079          beq.s     vsprintf_36
00003932  4878 000A 6080          pea       10
00003936  2F03      6081          move.l    D3,-(A7)
00003938  206E 0010 6082          move.l    16(A6),A0
0000393C  58AE 0010 6083          addq.l    #4,16(A6)
00003940  2F10      6084          move.l    (A0),-(A7)
00003942  6100 061E 6085          bsr       _ltoa
00003946  DEFC 000C 6086          add.w     #12,A7
0000394A  6018      6087          bra.s     vsprintf_37
                    6088   vsprintf_36:
0000394C  4878 000A 6089          pea       10
00003950  2F03      6090          move.l    D3,-(A7)
00003952  206E 0010 6091          move.l    16(A6),A0
00003956  58AE 0010 6092          addq.l    #4,16(A6)
0000395A  2F10      6093          move.l    (A0),-(A7)
0000395C  6100 0604 6094          bsr       _ltoa
00003960  DEFC 000C 6095          add.w     #12,A7
                    6096   vsprintf_37:
00003964  6000 00FA 6097          bra       vsprintf_23
                    6098   vsprintf_26:
00003968  4A2E FFD3 6099          tst.b     -45(A6)
0000396C  6718      6100          beq.s     vsprintf_38
0000396E  4878 000A 6101          pea       10
00003972  2F03      6102          move.l    D3,-(A7)
00003974  206E 0010 6103          move.l    16(A6),A0
00003978  58AE 0010 6104          addq.l    #4,16(A6)
0000397C  2F10      6105          move.l    (A0),-(A7)
0000397E  4E94      6106          jsr       (A4)
00003980  DEFC 000C 6107          add.w     #12,A7
00003984  6016      6108          bra.s     vsprintf_39
                    6109   vsprintf_38:
00003986  4878 000A 6110          pea       10
0000398A  2F03      6111          move.l    D3,-(A7)
0000398C  206E 0010 6112          move.l    16(A6),A0
00003990  58AE 0010 6113          addq.l    #4,16(A6)
00003994  2F10      6114          move.l    (A0),-(A7)
00003996  4E94      6115          jsr       (A4)
00003998  DEFC 000C 6116          add.w     #12,A7
                    6117   vsprintf_39:
0000399C  6000 00C2 6118          bra       vsprintf_23
                    6119   vsprintf_27:
000039A0  4A2E FFD3 6120          tst.b     -45(A6)
000039A4  6718      6121          beq.s     vsprintf_40
000039A6  4878 0008 6122          pea       8
000039AA  2F03      6123          move.l    D3,-(A7)
000039AC  206E 0010 6124          move.l    16(A6),A0
000039B0  58AE 0010 6125          addq.l    #4,16(A6)
000039B4  2F10      6126          move.l    (A0),-(A7)
000039B6  4E94      6127          jsr       (A4)
000039B8  DEFC 000C 6128          add.w     #12,A7
000039BC  6016      6129          bra.s     vsprintf_41
                    6130   vsprintf_40:
000039BE  4878 0008 6131          pea       8
000039C2  2F03      6132          move.l    D3,-(A7)
000039C4  206E 0010 6133          move.l    16(A6),A0
000039C8  58AE 0010 6134          addq.l    #4,16(A6)
000039CC  2F10      6135          move.l    (A0),-(A7)
000039CE  4E94      6136          jsr       (A4)
000039D0  DEFC 000C 6137          add.w     #12,A7
                    6138   vsprintf_41:
000039D4  6000 008A 6139          bra       vsprintf_23
                    6140   vsprintf_28:
000039D8  4A2E FFD3 6141          tst.b     -45(A6)
000039DC  6718      6142          beq.s     vsprintf_42
000039DE  4878 0010 6143          pea       16
000039E2  2F03      6144          move.l    D3,-(A7)
000039E4  206E 0010 6145          move.l    16(A6),A0
000039E8  58AE 0010 6146          addq.l    #4,16(A6)
000039EC  2F10      6147          move.l    (A0),-(A7)
000039EE  4E94      6148          jsr       (A4)
000039F0  DEFC 000C 6149          add.w     #12,A7
000039F4  6016      6150          bra.s     vsprintf_43
                    6151   vsprintf_42:
000039F6  4878 0010 6152          pea       16
000039FA  2F03      6153          move.l    D3,-(A7)
000039FC  206E 0010 6154          move.l    16(A6),A0
00003A00  58AE 0010 6155          addq.l    #4,16(A6)
00003A04  2F10      6156          move.l    (A0),-(A7)
00003A06  4E94      6157          jsr       (A4)
00003A08  DEFC 000C 6158          add.w     #12,A7
                    6159   vsprintf_43:
00003A0C  6000 0052 6160          bra       vsprintf_23
                    6161   vsprintf_30:
00003A10  206E 0010 6162          move.l    16(A6),A0
00003A14  58AE 0010 6163          addq.l    #4,16(A6)
00003A18  2010      6164          move.l    (A0),D0
00003A1A  2042      6165          move.l    D2,A0
00003A1C  5282      6166          addq.l    #1,D2
00003A1E  1080      6167          move.b    D0,(A0)
00003A20  2042      6168          move.l    D2,A0
00003A22  4210      6169          clr.b     (A0)
00003A24  200D      6170          move.l    A5,D0
00003A26  6704      6171          beq.s     vsprintf_44
00003A28  200D      6172          move.l    A5,D0
00003A2A  6002      6173          bra.s     vsprintf_45
                    6174   vsprintf_44:
00003A2C  7001      6175          moveq     #1,D0
                    6176   vsprintf_45:
00003A2E  2A00      6177          move.l    D0,D5
00003A30  6000 002E 6178          bra       vsprintf_23
                    6179   vsprintf_31:
00003A34  206E 0010 6180          move.l    16(A6),A0
00003A38  58AE 0010 6181          addq.l    #4,16(A6)
00003A3C  2610      6182          move.l    (A0),D3
00003A3E  0C85 FFFF 6183          cmp.l     #-1,D5
00003A42  FFFF      
00003A44  660A      6184          bne.s     vsprintf_46
00003A46  2F03      6185          move.l    D3,-(A7)
00003A48  6100 05FE 6186          bsr       _strlen
00003A4C  584F      6187          addq.w    #4,A7
00003A4E  2A00      6188          move.l    D0,D5
                    6189   vsprintf_46:
00003A50  600E      6190          bra.s     vsprintf_23
                    6191   vsprintf_22:
00003A52  206E 000C 6192          move.l    12(A6),A0
00003A56  2242      6193          move.l    D2,A1
00003A58  5282      6194          addq.l    #1,D2
00003A5A  1290      6195          move.b    (A0),(A1)
00003A5C  2042      6196          move.l    D2,A0
00003A5E  4210      6197          clr.b     (A0)
                    6198   vsprintf_23:
00003A60  2F03      6199          move.l    D3,-(A7)
00003A62  6100 05E4 6200          bsr       _strlen
00003A66  584F      6201          addq.w    #4,A7
00003A68  1800      6202          move.b    D0,D4
00003A6A  206E 000C 6203          move.l    12(A6),A0
00003A6E  1010      6204          move.b    (A0),D0
00003A70  4880      6205          ext.w     D0
00003A72  48C0      6206          ext.l     D0
00003A74  0C80 0000 6207          cmp.l     #115,D0
00003A78  0073      
00003A7A  6618      6208          bne.s     vsprintf_48
00003A7C  0C85 0000 6209          cmp.l     #0,D5
00003A80  0000      
00003A82  6D10      6210          blt.s     vsprintf_48
00003A84  4884      6211          ext.w     D4
00003A86  48C4      6212          ext.l     D4
00003A88  B885      6213          cmp.l     D5,D4
00003A8A  6F04      6214          ble.s     vsprintf_50
00003A8C  1005      6215          move.b    D5,D0
00003A8E  6002      6216          bra.s     vsprintf_51
                    6217   vsprintf_50:
00003A90  1004      6218          move.b    D4,D0
                    6219   vsprintf_51:
00003A92  1800      6220          move.b    D0,D4
                    6221   vsprintf_48:
00003A94  206E 000C 6222          move.l    12(A6),A0
00003A98  1010      6223          move.b    (A0),D0
00003A9A  4880      6224          ext.w     D0
00003A9C  48C0      6225          ext.l     D0
00003A9E  0C80 0000 6226          cmp.l     #88,D0
00003AA2  0058      
00003AA4  6600 0026 6227          bne       vsprintf_56
00003AA8  41EE FFDC 6228          lea       -36(A6),A0
00003AAC  2408      6229          move.l    A0,D2
                    6230   vsprintf_54:
00003AAE  2042      6231          move.l    D2,A0
00003AB0  4A10      6232          tst.b     (A0)
00003AB2  6718      6233          beq.s     vsprintf_56
00003AB4  2042      6234          move.l    D2,A0
00003AB6  1210      6235          move.b    (A0),D1
00003AB8  4881      6236          ext.w     D1
00003ABA  48C1      6237          ext.l     D1
00003ABC  2F01      6238          move.l    D1,-(A7)
00003ABE  6100 F2D0 6239          bsr       _toupper
00003AC2  584F      6240          addq.w    #4,A7
00003AC4  2042      6241          move.l    D2,A0
00003AC6  1080      6242          move.b    D0,(A0)
00003AC8  5282      6243          addq.l    #1,D2
00003ACA  60E2      6244          bra       vsprintf_54
                    6245   vsprintf_56:
00003ACC  7E00      6246          moveq     #0,D7
00003ACE  41EE FFD4 6247          lea       -44(A6),A0
00003AD2  2408      6248          move.l    A0,D2
00003AD4  206E 000C 6249          move.l    12(A6),A0
00003AD8  1010      6250          move.b    (A0),D0
00003ADA  4880      6251          ext.w     D0
00003ADC  48C0      6252          ext.l     D0
00003ADE  0C80 0000 6253          cmp.l     #100,D0
00003AE2  0064      
00003AE4  6714      6254          beq.s     vsprintf_59
00003AE6  206E 000C 6255          move.l    12(A6),A0
00003AEA  1010      6256          move.b    (A0),D0
00003AEC  4880      6257          ext.w     D0
00003AEE  48C0      6258          ext.l     D0
00003AF0  0C80 0000 6259          cmp.l     #105,D0
00003AF4  0069      
00003AF6  6600 0076 6260          bne       vsprintf_65
                    6261   vsprintf_59:
00003AFA  4A2E FFCE 6262          tst.b     -50(A6)
00003AFE  6612      6263          bne.s     vsprintf_62
00003B00  2043      6264          move.l    D3,A0
00003B02  1010      6265          move.b    (A0),D0
00003B04  4880      6266          ext.w     D0
00003B06  48C0      6267          ext.l     D0
00003B08  0C80 0000 6268          cmp.l     #45,D0
00003B0C  002D      
00003B0E  6600 002E 6269          bne       vsprintf_60
                    6270   vsprintf_62:
00003B12  2043      6271          move.l    D3,A0
00003B14  1010      6272          move.b    (A0),D0
00003B16  4880      6273          ext.w     D0
00003B18  48C0      6274          ext.l     D0
00003B1A  0C80 0000 6275          cmp.l     #45,D0
00003B1E  002D      
00003B20  660E      6276          bne.s     vsprintf_63
00003B22  2043      6277          move.l    D3,A0
00003B24  5283      6278          addq.l    #1,D3
00003B26  2242      6279          move.l    D2,A1
00003B28  5282      6280          addq.l    #1,D2
00003B2A  1290      6281          move.b    (A0),(A1)
00003B2C  5304      6282          subq.b    #1,D4
00003B2E  6008      6283          bra.s     vsprintf_64
                    6284   vsprintf_63:
00003B30  2042      6285          move.l    D2,A0
00003B32  5282      6286          addq.l    #1,D2
00003B34  10BC 002B 6287          move.b    #43,(A0)
                    6288   vsprintf_64:
00003B38  5287      6289          addq.l    #1,D7
00003B3A  6000 0032 6290          bra       vsprintf_65
                    6291   vsprintf_60:
00003B3E  4A2E FFCF 6292          tst.b     -49(A6)
00003B42  6700 002A 6293          beq       vsprintf_65
00003B46  2043      6294          move.l    D3,A0
00003B48  1010      6295          move.b    (A0),D0
00003B4A  4880      6296          ext.w     D0
00003B4C  48C0      6297          ext.l     D0
00003B4E  0C80 0000 6298          cmp.l     #45,D0
00003B52  002D      
00003B54  660E      6299          bne.s     vsprintf_67
00003B56  2043      6300          move.l    D3,A0
00003B58  5283      6301          addq.l    #1,D3
00003B5A  2242      6302          move.l    D2,A1
00003B5C  5282      6303          addq.l    #1,D2
00003B5E  1290      6304          move.b    (A0),(A1)
00003B60  5304      6305          subq.b    #1,D4
00003B62  6008      6306          bra.s     vsprintf_68
                    6307   vsprintf_67:
00003B64  2042      6308          move.l    D2,A0
00003B66  5282      6309          addq.l    #1,D2
00003B68  10BC 0020 6310          move.b    #32,(A0)
                    6311   vsprintf_68:
00003B6C  5287      6312          addq.l    #1,D7
                    6313   vsprintf_65:
00003B6E  4A2E FFD0 6314          tst.b     -48(A6)
00003B72  6700 0066 6315          beq       vsprintf_77
00003B76  206E 000C 6316          move.l    12(A6),A0
00003B7A  1010      6317          move.b    (A0),D0
00003B7C  4880      6318          ext.w     D0
00003B7E  48C0      6319          ext.l     D0
00003B80  0C80 0000 6320          cmp.l     #111,D0
00003B84  006F      
00003B86  671A      6321          beq.s     vsprintf_73
00003B88  6E0C      6322          bgt.s     vsprintf_76
00003B8A  0C80 0000 6323          cmp.l     #88,D0
00003B8E  0058      
00003B90  6710      6324          beq.s     vsprintf_73
00003B92  6000 0046 6325          bra       vsprintf_77
                    6326   vsprintf_76:
00003B96  0C80 0000 6327          cmp.l     #120,D0
00003B9A  0078      
00003B9C  6704      6328          beq.s     vsprintf_73
00003B9E  6000 003A 6329          bra       vsprintf_77
                    6330   vsprintf_73:
00003BA2  2042      6331          move.l    D2,A0
00003BA4  5282      6332          addq.l    #1,D2
00003BA6  10BC 0030 6333          move.b    #48,(A0)
00003BAA  5287      6334          addq.l    #1,D7
00003BAC  206E 000C 6335          move.l    12(A6),A0
00003BB0  1010      6336          move.b    (A0),D0
00003BB2  4880      6337          ext.w     D0
00003BB4  48C0      6338          ext.l     D0
00003BB6  0C80 0000 6339          cmp.l     #120,D0
00003BBA  0078      
00003BBC  6712      6340          beq.s     vsprintf_79
00003BBE  206E 000C 6341          move.l    12(A6),A0
00003BC2  1010      6342          move.b    (A0),D0
00003BC4  4880      6343          ext.w     D0
00003BC6  48C0      6344          ext.l     D0
00003BC8  0C80 0000 6345          cmp.l     #88,D0
00003BCC  0058      
00003BCE  660A      6346          bne.s     vsprintf_77
                    6347   vsprintf_79:
00003BD0  2042      6348          move.l    D2,A0
00003BD2  5282      6349          addq.l    #1,D2
00003BD4  10BC 0078 6350          move.b    #120,(A0)
00003BD8  5287      6351          addq.l    #1,D7
                    6352   vsprintf_77:
00003BDA  2042      6353          move.l    D2,A0
00003BDC  4210      6354          clr.b     (A0)
00003BDE  206E 000C 6355          move.l    12(A6),A0
00003BE2  1010      6356          move.b    (A0),D0
00003BE4  4880      6357          ext.w     D0
00003BE6  48C0      6358          ext.l     D0
00003BE8  0C80 0000 6359          cmp.l     #105,D0
00003BEC  0069      
00003BEE  6700 0076 6360          beq       vsprintf_82
00003BF2  6E42      6361          bgt.s     vsprintf_93
00003BF4  0C80 0000 6362          cmp.l     #99,D0
00003BF8  0063      
00003BFA  6700 0084 6363          beq       vsprintf_96
00003BFE  6E1C      6364          bgt.s     vsprintf_94
00003C00  0C80 0000 6365          cmp.l     #88,D0
00003C04  0058      
00003C06  6700 005E 6366          beq       vsprintf_82
00003C0A  6E00 0184 6367          bgt       vsprintf_80
00003C0E  0C80 0000 6368          cmp.l     #69,D0
00003C12  0045      
00003C14  6700 0050 6369          beq       vsprintf_82
00003C18  6000 0176 6370          bra       vsprintf_80
                    6371   vsprintf_94:
00003C1C  0C80 0000 6372          cmp.l     #101,D0
00003C20  0065      
00003C22  6700 0042 6373          beq       vsprintf_82
00003C26  6E00 0168 6374          bgt       vsprintf_80
00003C2A  0C80 0000 6375          cmp.l     #100,D0
00003C2E  0064      
00003C30  6734      6376          beq.s     vsprintf_82
00003C32  6000 015C 6377          bra       vsprintf_80
                    6378   vsprintf_93:
00003C36  0C80 0000 6379          cmp.l     #117,D0
00003C3A  0075      
00003C3C  6728      6380          beq.s     vsprintf_82
00003C3E  6E1A      6381          bgt.s     vsprintf_95
00003C40  0C80 0000 6382          cmp.l     #115,D0
00003C44  0073      
00003C46  6700 0038 6383          beq       vsprintf_96
00003C4A  6E00 0144 6384          bgt       vsprintf_80
00003C4E  0C80 0000 6385          cmp.l     #111,D0
00003C52  006F      
00003C54  6710      6386          beq.s     vsprintf_82
00003C56  6000 0138 6387          bra       vsprintf_80
                    6388   vsprintf_95:
00003C5A  0C80 0000 6389          cmp.l     #120,D0
00003C5E  0078      
00003C60  6704      6390          beq.s     vsprintf_82
00003C62  6000 012C 6391          bra       vsprintf_80
                    6392   vsprintf_82:
00003C66  4A2E FFD2 6393          tst.b     -46(A6)
00003C6A  6714      6394          beq.s     vsprintf_96
00003C6C  4A2E FFCD 6395          tst.b     -51(A6)
00003C70  660E      6396          bne.s     vsprintf_96
00003C72  200D      6397          move.l    A5,D0
00003C74  9087      6398          sub.l     D7,D0
00003C76  4884      6399          ext.w     D4
00003C78  48C4      6400          ext.l     D4
00003C7A  9084      6401          sub.l     D4,D0
00003C7C  2D40 FFFC 6402          move.l    D0,-4(A6)
                    6403   vsprintf_96:
00003C80  202E FFFC 6404          move.l    -4(A6),D0
00003C84  0C80 0000 6405          cmp.l     #0,D0
00003C88  0000      
00003C8A  6C04      6406          bge.s     vsprintf_98
00003C8C  42AE FFFC 6407          clr.l     -4(A6)
                    6408   vsprintf_98:
00003C90  4A2E FFCD 6409          tst.b     -51(A6)
00003C94  6600 0030 6410          bne       vsprintf_104
00003C98  4884      6411          ext.w     D4
00003C9A  48C4      6412          ext.l     D4
00003C9C  2004      6413          move.l    D4,D0
00003C9E  D0AE FFFC 6414          add.l     -4(A6),D0
00003CA2  D087      6415          add.l     D7,D0
00003CA4  1D40 FFD1 6416          move.b    D0,-47(A6)
                    6417   vsprintf_102:
00003CA8  102E FFD1 6418          move.b    -47(A6),D0
00003CAC  4880      6419          ext.w     D0
00003CAE  48C0      6420          ext.l     D0
00003CB0  220D      6421          move.l    A5,D1
00003CB2  534D      6422          subq.w    #1,A5
00003CB4  B081      6423          cmp.l     D1,D0
00003CB6  6C0E      6424          bge.s     vsprintf_104
00003CB8  4878 0020 6425          pea       32
00003CBC  2F0A      6426          move.l    A2,-(A7)
00003CBE  4E93      6427          jsr       (A3)
00003CC0  504F      6428          addq.w    #8,A7
00003CC2  5286      6429          addq.l    #1,D6
00003CC4  60E2      6430          bra       vsprintf_102
                    6431   vsprintf_104:
00003CC6  41EE FFD4 6432          lea       -44(A6),A0
00003CCA  2408      6433          move.l    A0,D2
                    6434   vsprintf_105:
00003CCC  2042      6435          move.l    D2,A0
00003CCE  4A10      6436          tst.b     (A0)
00003CD0  6716      6437          beq.s     vsprintf_107
00003CD2  2042      6438          move.l    D2,A0
00003CD4  5282      6439          addq.l    #1,D2
00003CD6  1210      6440          move.b    (A0),D1
00003CD8  4881      6441          ext.w     D1
00003CDA  48C1      6442          ext.l     D1
00003CDC  2F01      6443          move.l    D1,-(A7)
00003CDE  2F0A      6444          move.l    A2,-(A7)
00003CE0  4E93      6445          jsr       (A3)
00003CE2  504F      6446          addq.w    #8,A7
00003CE4  5286      6447          addq.l    #1,D6
00003CE6  60E4      6448          bra       vsprintf_105
                    6449   vsprintf_107:
00003CE8  202E FFFC 6450          move.l    -4(A6),D0
00003CEC  1D40 FFD1 6451          move.b    D0,-47(A6)
                    6452   vsprintf_108:
00003CF0  102E FFD1 6453          move.b    -47(A6),D0
00003CF4  532E FFD1 6454          subq.b    #1,-47(A6)
00003CF8  4A00      6455          tst.b     D0
00003CFA  670E      6456          beq.s     vsprintf_110
00003CFC  4878 0030 6457          pea       48
00003D00  2F0A      6458          move.l    A2,-(A7)
00003D02  4E93      6459          jsr       (A3)
00003D04  504F      6460          addq.w    #8,A7
00003D06  5286      6461          addq.l    #1,D6
00003D08  60E6      6462          bra       vsprintf_108
                    6463   vsprintf_110:
00003D0A  2043      6464          move.l    D3,A0
00003D0C  4A10      6465          tst.b     (A0)
00003D0E  6700 0048 6466          beq       vsprintf_113
00003D12  206E 000C 6467          move.l    12(A6),A0
00003D16  1010      6468          move.b    (A0),D0
00003D18  4880      6469          ext.w     D0
00003D1A  48C0      6470          ext.l     D0
00003D1C  0C80 0000 6471          cmp.l     #115,D0
00003D20  0073      
00003D22  670C      6472          beq.s     vsprintf_116
00003D24  6E18      6473          bgt.s     vsprintf_119
00003D26  0C80 0000 6474          cmp.l     #99,D0
00003D2A  0063      
00003D2C  6702      6475          beq.s     vsprintf_116
00003D2E  600E      6476          bra.s     vsprintf_119
                    6477   vsprintf_116:
00003D30  2005      6478          move.l    D5,D0
00003D32  5385      6479          subq.l    #1,D5
00003D34  0C80 0000 6480          cmp.l     #0,D0
00003D38  0000      
00003D3A  6E02      6481          bgt.s     vsprintf_119
00003D3C  6016      6482          bra.s     vsprintf_115
                    6483   vsprintf_119:
00003D3E  2043      6484          move.l    D3,A0
00003D40  5283      6485          addq.l    #1,D3
00003D42  1210      6486          move.b    (A0),D1
00003D44  4881      6487          ext.w     D1
00003D46  48C1      6488          ext.l     D1
00003D48  2F01      6489          move.l    D1,-(A7)
00003D4A  2F0A      6490          move.l    A2,-(A7)
00003D4C  4E93      6491          jsr       (A3)
00003D4E  504F      6492          addq.w    #8,A7
00003D50  5286      6493          addq.l    #1,D6
00003D52  6002      6494          bra.s     vsprintf_112
                    6495   vsprintf_115:
00003D54  6002      6496          bra.s     vsprintf_113
                    6497   vsprintf_112:
00003D56  60B2      6498          bra       vsprintf_110
                    6499   vsprintf_113:
00003D58  4A2E FFCD 6500          tst.b     -51(A6)
00003D5C  6700 0030 6501          beq       vsprintf_125
00003D60  4884      6502          ext.w     D4
00003D62  48C4      6503          ext.l     D4
00003D64  2004      6504          move.l    D4,D0
00003D66  D0AE FFFC 6505          add.l     -4(A6),D0
00003D6A  D087      6506          add.l     D7,D0
00003D6C  1D40 FFD1 6507          move.b    D0,-47(A6)
                    6508   vsprintf_123:
00003D70  102E FFD1 6509          move.b    -47(A6),D0
00003D74  4880      6510          ext.w     D0
00003D76  48C0      6511          ext.l     D0
00003D78  220D      6512          move.l    A5,D1
00003D7A  534D      6513          subq.w    #1,A5
00003D7C  B081      6514          cmp.l     D1,D0
00003D7E  6C0E      6515          bge.s     vsprintf_125
00003D80  4878 0020 6516          pea       32
00003D84  2F0A      6517          move.l    A2,-(A7)
00003D86  4E93      6518          jsr       (A3)
00003D88  504F      6519          addq.w    #8,A7
00003D8A  5386      6520          subq.l    #1,D6
00003D8C  60E2      6521          bra       vsprintf_123
                    6522   vsprintf_125:
00003D8E  6014      6523          bra.s     vsprintf_81
                    6524   vsprintf_80:
00003D90  206E 000C 6525          move.l    12(A6),A0
00003D94  1210      6526          move.b    (A0),D1
00003D96  4881      6527          ext.w     D1
00003D98  48C1      6528          ext.l     D1
00003D9A  2F01      6529          move.l    D1,-(A7)
00003D9C  2F0A      6530          move.l    A2,-(A7)
00003D9E  4E93      6531          jsr       (A3)
00003DA0  504F      6532          addq.w    #8,A7
00003DA2  5286      6533          addq.l    #1,D6
                    6534   vsprintf_81:
00003DA4  52AE 000C 6535          addq.l    #1,12(A6)
                    6536   vsprintf_2:
00003DA8  6000 F9D6 6537          bra       vsprintf_1
                    6538   vsprintf_3:
00003DAC  4A92      6539          tst.l     (A2)
00003DAE  6710      6540          beq.s     vsprintf_126
00003DB0  4201      6541          clr.b     D1
00003DB2  C2BC 0000 6542          and.l     #255,D1
00003DB6  00FF      
00003DB8  2F01      6543          move.l    D1,-(A7)
00003DBA  2F0A      6544          move.l    A2,-(A7)
00003DBC  4E93      6545          jsr       (A3)
00003DBE  504F      6546          addq.w    #8,A7
                    6547   vsprintf_126:
00003DC0  2006      6548          move.l    D6,D0
00003DC2  4CDF 3CFC 6549          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003DC6  4E5E      6550          unlk      A6
00003DC8  4E75      6551          rts
                    6552   ULMUL:
00003DCA  4E56 0000 6553          link    A6,#0
00003DCE  48E7 C000 6554          movem.l D0/D1,-(A7)
00003DD2  222E 0008 6555          move.l  8(A6),D1
00003DD6  202E 000C 6556          move.l  12(A6),D0
00003DDA  602C      6557          bra.s   lmul_3
                    6558   LMUL:
00003DDC  4E56 0000 6559          link    A6,#0
00003DE0  48E7 C000 6560          movem.l D0/D1,-(A7)
00003DE4  222E 0008 6561          move.l  8(A6),D1
00003DE8  202E 000C 6562          move.l  12(A6),D0
00003DEC  4A80      6563          tst.l   D0
00003DEE  6A0A      6564          bpl.s   lmul_1
00003DF0  4480      6565          neg.l   D0
00003DF2  4A81      6566          tst.l   D1
00003DF4  6A0A      6567          bpl.s   lmul_2
00003DF6  4481      6568          neg.l   D1
00003DF8  600E      6569          bra.s   lmul_3
                    6570   lmul_1:
00003DFA  4A81      6571          tst.l   D1
00003DFC  6A0A      6572          bpl.s   lmul_3
00003DFE  4481      6573          neg.l   D1
                    6574   lmul_2:
00003E00  6114      6575          bsr.s   domul
00003E02  4481      6576          neg.l   D1
00003E04  4080      6577          negx.l  D0
00003E06  6002      6578          bra.s   lmul_4
                    6579   lmul_3:
00003E08  610C      6580          bsr.s   domul
                    6581   lmul_4:
00003E0A  2D41 0008 6582          move.l  D1,8(A6)
00003E0E  4CDF 0003 6583          movem.l (A7)+,D0/D1
00003E12  4E5E      6584          unlk    A6
00003E14  4E75      6585          rts
                    6586   domul:
00003E16  0C81 0000 6587          cmpi.l  #$FFFF,D1
00003E1A  FFFF      
00003E1C  620C      6588          bhi.s   domul_1
00003E1E  0C80 0000 6589          cmpi.l  #$FFFF,D0
00003E22  FFFF      
00003E24  620E      6590          bhi.s   domul_2
00003E26  C2C0      6591          mulu    D0,D1
00003E28  4E75      6592          rts
                    6593   domul_1:
00003E2A  0C80 0000 6594          cmpi.l  #$FFFF,D0
00003E2E  FFFF      
00003E30  6218      6595          bhi.s   domul_4
00003E32  6002      6596          bra.s   domul_3
                    6597   domul_2
00003E34  C141      6598          exg     D0,D1
                    6599   domul_3:
00003E36  2F02      6600          move.l  D2,-(A7)
00003E38  2401      6601          move.l  D1,D2
00003E3A  4842      6602          swap    D2
00003E3C  C2C0      6603          mulu    D0,D1
00003E3E  C4C0      6604          mulu    D0,D2
00003E40  4842      6605          swap    D2
00003E42  4242      6606          clr.w   D2
00003E44  D282      6607          add.l   D2,D1
00003E46  241F      6608          move.l  (A7)+,D2
00003E48  4E75      6609          rts
                    6610   domul_4:
00003E4A  48E7 3000 6611          movem.l D2/D3,-(A7)
00003E4E  2401      6612          move.l  D1,D2
00003E50  2601      6613          move.l  D1,D3
00003E52  C2C0      6614          mulu    D0,D1
00003E54  4842      6615          swap    D2
00003E56  C4C0      6616          mulu    D0,D2
00003E58  4840      6617          swap    D0
00003E5A  C6C0      6618          mulu    D0,D3
00003E5C  D483      6619          add.l   D3,D2
00003E5E  4842      6620          swap    D2
00003E60  4242      6621          clr.w   D2
00003E62  D282      6622          add.l   D2,D1
00003E64  4CDF 000C 6623          movem.l (A7)+,D2/D3
00003E68  4E75      6624          rts
                    6625   _gets:
00003E6A  4E56 0000 6626          link      A6,#0
00003E6E  48E7 3820 6627          movem.l   D2/D3/D4/A2,-(A7)
00003E72  45F8 2C96 6628          lea       _putch,A2
00003E76  282E 0008 6629          move.l    8(A6),D4
00003E7A  2404      6630          move.l    D4,D2
                    6631   gets_1:
00003E7C  6100 EE48 6632          bsr       _getch
00003E80  2600      6633          move.l    D0,D3
00003E82  0C80 0000 6634          cmp.l     #10,D0
00003E86  000A      
00003E88  6700 003C 6635          beq       gets_3
00003E8C  0C83 0000 6636          cmp.l     #8,D3
00003E90  0008      
00003E92  6712      6637          beq.s     gets_4
00003E94  2042      6638          move.l    D2,A0
00003E96  5282      6639          addq.l    #1,D2
00003E98  1083      6640          move.b    D3,(A0)
00003E9A  4883      6641          ext.w     D3
00003E9C  48C3      6642          ext.l     D3
00003E9E  2F03      6643          move.l    D3,-(A7)
00003EA0  4E92      6644          jsr       (A2)
00003EA2  584F      6645          addq.w    #4,A7
00003EA4  601E      6646          bra.s     gets_6
                    6647   gets_4:
00003EA6  B484      6648          cmp.l     D4,D2
00003EA8  631A      6649          bls.s     gets_6
00003EAA  4878 0008 6650          pea       8
00003EAE  4E92      6651          jsr       (A2)
00003EB0  584F      6652          addq.w    #4,A7
00003EB2  4878 0020 6653          pea       32
00003EB6  4E92      6654          jsr       (A2)
00003EB8  584F      6655          addq.w    #4,A7
00003EBA  4878 0008 6656          pea       8
00003EBE  4E92      6657          jsr       (A2)
00003EC0  584F      6658          addq.w    #4,A7
00003EC2  5382      6659          subq.l    #1,D2
                    6660   gets_6:
00003EC4  60B6      6661          bra       gets_1
                    6662   gets_3:
00003EC6  4878 000A 6663          pea       10
00003ECA  4E92      6664          jsr       (A2)
00003ECC  584F      6665          addq.w    #4,A7
00003ECE  2042      6666          move.l    D2,A0
00003ED0  4210      6667          clr.b     (A0)
00003ED2  2004      6668          move.l    D4,D0
00003ED4  4CDF 041C 6669          movem.l   (A7)+,D2/D3/D4/A2
00003ED8  4E5E      6670          unlk      A6
00003EDA  4E75      6671          rts
                    6672   _ungetch:
00003EDC  4E56 0000 6673          link      A6,#0
00003EE0  23EE 0008 6674          move.l    8(A6),__ungetbuf
00003EE4  0B00 00C0 
00003EE8  202E 0008 6675          move.l    8(A6),D0
00003EEC  4E5E      6676          unlk      A6
00003EEE  4E75      6677          rts
                    6678   @itoa_convert:
00003EF0  4E56 0000 6679          link      A6,#0
00003EF4  48E7 3C00 6680          movem.l   D2/D3/D4/D5,-(A7)
00003EF8  242E 0008 6681          move.l    8(A6),D2
00003EFC  262E 0010 6682          move.l    16(A6),D3
00003F00  2A2E 000C 6683          move.l    12(A6),D5
00003F04  2F05      6684          move.l    D5,-(A7)
00003F06  2F03      6685          move.l    D3,-(A7)
00003F08  6100 ECAE 6686          bsr       ULDIV
00003F0C  202F 0004 6687          move.l    4(A7),D0
00003F10  504F      6688          addq.w    #8,A7
00003F12  2800      6689          move.l    D0,D4
00003F14  BA83      6690          cmp.l     D3,D5
00003F16  651A      6691          blo.s     @itoa_convert_1
00003F18  2F03      6692          move.l    D3,-(A7)
00003F1A  2F05      6693          move.l    D5,-(A7)
00003F1C  2F03      6694          move.l    D3,-(A7)
00003F1E  6100 EC98 6695          bsr       ULDIV
00003F22  2217      6696          move.l    (A7),D1
00003F24  504F      6697          addq.w    #8,A7
00003F26  2F01      6698          move.l    D1,-(A7)
00003F28  2F02      6699          move.l    D2,-(A7)
00003F2A  61C4      6700          bsr       @itoa_convert
00003F2C  DEFC 000C 6701          add.w     #12,A7
00003F30  2400      6702          move.l    D0,D2
                    6703   @itoa_convert_1:
00003F32  0C84 0000 6704          cmp.l     #9,D4
00003F36  0009      
00003F38  6E0A      6705          bgt.s     @itoa_convert_3
00003F3A  2004      6706          move.l    D4,D0
00003F3C  0680 0000 6707          add.l     #48,D0
00003F40  0030      
00003F42  600E      6708          bra.s     @itoa_convert_4
                    6709   @itoa_convert_3:
00003F44  2004      6710          move.l    D4,D0
00003F46  0680 0000 6711          add.l     #97,D0
00003F4A  0061      
00003F4C  0480 0000 6712          sub.l     #10,D0
00003F50  000A      
                    6713   @itoa_convert_4:
00003F52  2042      6714          move.l    D2,A0
00003F54  1080      6715          move.b    D0,(A0)
00003F56  2002      6716          move.l    D2,D0
00003F58  5280      6717          addq.l    #1,D0
00003F5A  4CDF 003C 6718          movem.l   (A7)+,D2/D3/D4/D5
00003F5E  4E5E      6719          unlk      A6
00003F60  4E75      6720          rts
                    6721   _ltoa:
00003F62  4E56 0000 6722          link      A6,#0
00003F66  48E7 3C00 6723          movem.l   D2/D3/D4/D5,-(A7)
00003F6A  242E 0008 6724          move.l    8(A6),D2
00003F6E  262E 000C 6725          move.l    12(A6),D3
00003F72  2A2E 0010 6726          move.l    16(A6),D5
00003F76  2803      6727          move.l    D3,D4
00003F78  0C85 0000 6728          cmp.l     #2,D5
00003F7C  0002      
00003F7E  6D08      6729          blt.s     ltoa_3
00003F80  0C85 0000 6730          cmp.l     #36,D5
00003F84  0024      
00003F86  6F06      6731          ble.s     ltoa_1
                    6732   ltoa_3:
00003F88  2003      6733          move.l    D3,D0
00003F8A  6000 0052 6734          bra       ltoa_4
                    6735   ltoa_1:
00003F8E  0C85 0000 6736          cmp.l     #10,D5
00003F92  000A      
00003F94  6600 0032 6737          bne       ltoa_5
00003F98  0C82 0000 6738          cmp.l     #0,D2
00003F9C  0000      
00003F9E  6C28      6739          bge.s     ltoa_5
00003FA0  2002      6740          move.l    D2,D0
00003FA2  4480      6741          neg.l     D0
00003FA4  2400      6742          move.l    D0,D2
00003FA6  0C82 0000 6743          cmp.l     #0,D2
00003FAA  0000      
00003FAC  6C12      6744          bge.s     ltoa_7
00003FAE  4879 0000 6745          pea       @itoa_1
00003FB2  54B6      
00003FB4  2F03      6746          move.l    D3,-(A7)
00003FB6  6100 EBF0 6747          bsr       _strcpy
00003FBA  504F      6748          addq.w    #8,A7
00003FBC  2003      6749          move.l    D3,D0
00003FBE  601E      6750          bra.s     ltoa_4
                    6751   ltoa_7:
00003FC0  2044      6752          move.l    D4,A0
00003FC2  5284      6753          addq.l    #1,D4
00003FC4  10BC 002D 6754          move.b    #45,(A0)
                    6755   ltoa_5:
00003FC8  2F05      6756          move.l    D5,-(A7)
00003FCA  2F02      6757          move.l    D2,-(A7)
00003FCC  2F04      6758          move.l    D4,-(A7)
00003FCE  6100 FF20 6759          bsr       @itoa_convert
00003FD2  DEFC 000C 6760          add.w     #12,A7
00003FD6  2800      6761          move.l    D0,D4
00003FD8  2044      6762          move.l    D4,A0
00003FDA  4210      6763          clr.b     (A0)
00003FDC  2003      6764          move.l    D3,D0
                    6765   ltoa_4:
00003FDE  4CDF 003C 6766          movem.l   (A7)+,D2/D3/D4/D5
00003FE2  4E5E      6767          unlk      A6
00003FE4  4E75      6768          rts
                    6769   _ultoa:
00003FE6  4E56 0000 6770          link      A6,#0
00003FEA  48E7 3800 6771          movem.l   D2/D3/D4,-(A7)
00003FEE  262E 0010 6772          move.l    16(A6),D3
00003FF2  282E 000C 6773          move.l    12(A6),D4
00003FF6  2404      6774          move.l    D4,D2
00003FF8  0C83 0000 6775          cmp.l     #2,D3
00003FFC  0002      
00003FFE  6D08      6776          blt.s     ultoa_3
00004000  0C83 0000 6777          cmp.l     #36,D3
00004004  0024      
00004006  6F04      6778          ble.s     ultoa_1
                    6779   ultoa_3:
00004008  2004      6780          move.l    D4,D0
0000400A  6018      6781          bra.s     ultoa_4
                    6782   ultoa_1:
0000400C  2F03      6783          move.l    D3,-(A7)
0000400E  2F2E 0008 6784          move.l    8(A6),-(A7)
00004012  2F02      6785          move.l    D2,-(A7)
00004014  6100 FEDA 6786          bsr       @itoa_convert
00004018  DEFC 000C 6787          add.w     #12,A7
0000401C  2400      6788          move.l    D0,D2
0000401E  2042      6789          move.l    D2,A0
00004020  4210      6790          clr.b     (A0)
00004022  2004      6791          move.l    D4,D0
                    6792   ultoa_4:
00004024  4CDF 001C 6793          movem.l   (A7)+,D2/D3/D4
00004028  4E5E      6794          unlk      A6
0000402A  4E75      6795          rts
                    6796   _itoa:
0000402C  4E56 0000 6797          link      A6,#0
00004030  2F2E 0010 6798          move.l    16(A6),-(A7)
00004034  2F2E 000C 6799          move.l    12(A6),-(A7)
00004038  2F2E 0008 6800          move.l    8(A6),-(A7)
0000403C  6100 FF24 6801          bsr       _ltoa
00004040  DEFC 000C 6802          add.w     #12,A7
00004044  4E5E      6803          unlk      A6
00004046  4E75      6804          rts
                    6805   _strlen:
00004048  206F 0004 6806          move.l    (4,A7),A0
0000404C  2248      6807          move.l    A0,A1
                    6808   strlen_1:
0000404E  4A19      6809          tst.b     (A1)+
00004050  66FC      6810          bne       strlen_1
00004052  2009      6811          move.l    A1,D0
00004054  9088      6812          sub.l     A0,D0
00004056  5380      6813          subq.l    #1,D0
00004058  4E75      6814          rts
                    6815          section   const
                    6816   
                    6817   @m68kde~1_1:
0000405A  0D0A 00   6818          dc.b      13,10,0
                    6819   @m68kde~1_2:
0000405E  0D53 7769 6820          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004062  7463 6865 
00004066  7320 5357 
0000406A  5B        
0000406B  372D 305D 6821          dc.b      55,45,48,93,32,61,32,0
0000406F  203D 2000 
                    6822   @m68kde~1_3:
00004074  3000      6823          dc.b      48,0
                    6824   @m68kde~1_4:
00004076  3100      6825          dc.b      49,0
                    6826   @m68kde~1_5:
00004078  0D0A 4475 6827          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
0000407C  6D70 204D 
00004080  656D 6F72 
00004084  79        
00004085  2042 6C6F 6828          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004089  636B 3A20 
0000408D  3C45 5343 
00004091  3E20      
00004093  746F 2041 6829          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004097  626F 7274 
0000409B  2C20 3C53 
0000409F  50        
000040A0  4143 453E 6830          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
000040A4  2074 6F20 
000040A8  436F 6E74 
000040AC  69        
000040AD  6E75 6500 6831          dc.b      110,117,101,0
                    6832   @m68kde~1_6:
000040B2  0D0A 456E 6833          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000040B6  7465 7220 
000040BA  5374 6172 
000040BE  74        
000040BF  2041 6464 6834          dc.b      32,65,100,100,114,101,115,115,58,32,0
000040C3  7265 7373 
000040C7  3A20 00   
                    6835   @m68kde~1_7:
000040CA  0D0A 2530 6836          dc.b      13,10,37,48,56,120,32,0
000040CE  3878 2000 
                    6837   @m68kde~1_8:
000040D2  2530 3258 6838          dc.b      37,48,50,88,0
000040D6  00        
                    6839   @m68kde~1_9:
000040D8  2020 00   6840          dc.b      32,32,0
                    6841   @m68kde~1_10:
000040DC  0D0A 4669 6842          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
000040E0  6C6C 204D 
000040E4  656D 6F72 
000040E8  79        
000040E9  2042 6C6F 6843          dc.b      32,66,108,111,99,107,0
000040ED  636B 00   
                    6844   @m68kde~1_11:
000040F0  0D0A 456E 6845          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000040F4  7465 7220 
000040F8  456E 6420 
000040FC  41        
000040FD  6464 7265 6846          dc.b      100,100,114,101,115,115,58,32,0
00004101  7373 3A20 
00004105  00        
                    6847   @m68kde~1_12:
00004106  0D0A 456E 6848          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
0000410A  7465 7220 
0000410E  4669 6C6C 
00004112  20        
00004113  4461 7461 6849          dc.b      68,97,116,97,58,32,0
00004117  3A20 00   
                    6850   @m68kde~1_13:
0000411A  0D0A 4669 6851          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
0000411E  6C6C 696E 
00004122  6720 4164 
00004126  64        
00004127  7265 7373 6852          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000412B  6573 205B 
0000412F  2425 3038 
00004133  58        
00004134  202D 2024 6853          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00004138  2530 3858 
0000413C  5D20 7769 
00004140  7468      
00004142  2024 2530 6854          dc.b      32,36,37,48,50,88,0
00004146  3258 00   
                    6855   @m68kde~1_14:
0000414A  0D0A 5573 6856          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
0000414E  6520 4879 
00004152  7065 7254 
00004156  65        
00004157  726D 696E 6857          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
0000415B  616C 2074 
0000415F  6F20 5365 
00004163  6E64 2054 6858          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004167  6578 7420 
0000416B  4669 6C65 
0000416F  2028 2E68 6859          dc.b      32,40,46,104,101,120,41,13,10,0
00004173  6578 290D 
00004177  0A00      
                    6860   @m68kde~1_15:
0000417A  0D0A 4C6F 6861          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
0000417E  6164 2046 
00004182  6169 6C65 
00004186  64        
00004187  2061 7420 6862          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000418B  4164 6472 
0000418F  6573 7320 
00004193  3D        
00004194  205B 2425 6863          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004198  3038 585D 
0000419C  0D0A 00   
                    6864   @m68kde~1_16:
000041A0  0D0A 5375 6865          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
000041A4  6363 6573 
000041A8  733A 2044 
000041AC  6F        
000041AD  776E 6C6F 6866          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
000041B1  6164 6564 
000041B5  2025 6420 
000041B9  6279 7465 6867          dc.b      98,121,116,101,115,13,10,0
000041BD  730D 0A00 
                    6868   @m68kde~1_17:
000041C2  0D0A 4578 6869          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
000041C6  616D 696E 
000041CA  6520 616E 
000041CE  64        
000041CF  2043 6861 6870          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
000041D3  6E67 6520 
000041D7  4D65 6D6F 
000041DB  72        
000041DC  7900      6871          dc.b      121,0
                    6872   @m68kde~1_18:
000041DE  0D0A 3C45 6873          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
000041E2  5343 3E20 
000041E6  746F 2053 
000041EA  746F      
000041EC  702C 203C 6874          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000041F0  5350 4143 
000041F4  453E 2074 
000041F8  6F20      
000041FA  4164 7661 6875          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000041FE  6E63 652C 
00004202  2027 2D27 
00004206  2074      
00004208  6F20 476F 6876          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
0000420C  2042 6163 
00004210  6B2C 203C 
00004214  4441      
00004216  5441 3E20 6877          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
0000421A  746F 2063 
0000421E  6861 6E67 
00004222  65        
00004223  00        6878          dc.b      0
                    6879   @m68kde~1_19:
00004224  0D0A 456E 6880          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004228  7465 7220 
0000422C  4164 6472 
00004230  65        
00004231  7373 3A20 6881          dc.b      115,115,58,32,0
00004235  00        
                    6882   @m68kde~1_20:
00004236  0D0A 5B25 6883          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
0000423A  3038 785D 
0000423E  203A 2025 
00004242  3032 78   
00004245  2020 00   6884          dc.b      32,32,0
                    6885   @m68kde~1_21:
00004248  0D0A 5761 6886          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
0000424C  726E 696E 
00004250  6720 4368 
00004254  61        
00004255  6E67 6520 6887          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004259  4661 696C 
0000425D  6564 3A20 
00004261  57        
00004262  726F 7465 6888          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004266  205B 2530 
0000426A  3278 5D2C 
0000426E  20        
0000426F  5265 6164 6889          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004273  205B 2530 
00004277  3278 5D00 
                    6890   @m68kde~1_22:
0000427C  0D0A 4C6F 6891          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00004280  6164 696E 
00004284  6720 5072 
00004288  6F        
00004289  6772 616D 6892          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
0000428D  2046 726F 
00004291  6D20 5350 
00004295  49        
00004296  2046 6C61 6893          dc.b      32,70,108,97,115,104,46,46,46,46,0
0000429A  7368 2E2E 
0000429E  2E2E 00   
                    6894   @m68kde~1_23:
000042A2  2425 3038 6895          dc.b      36,37,48,56,88,32,32,0
000042A6  5820 2000 
                    6896   @m68kde~1_24:
000042AA  2000      6897          dc.b      32,0
                    6898   @m68kde~1_25:
000042AC  2E00      6899          dc.b      46,0
                    6900   @m68kde~1_26:
000042AE  2563 00   6901          dc.b      37,99,0
                    6902   @m68kde~1_27:
000042B2  00        6903          dc.b      0
                    6904   @m68kde~1_28:
000042B4  0D0A 0D0A 6905          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000042B8  2044 3020 
000042BC  3D20 2425 
000042C0  3038 58   
000042C3  2020 4130 6906          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000042C7  203D 2024 
000042CB  2530 3858 
000042CF  00        
                    6907   @m68kde~1_29:
000042D0  0D0A 2044 6908          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000042D4  3120 3D20 
000042D8  2425 3038 
000042DC  5820 20   
000042DF  4131 203D 6909          dc.b      65,49,32,61,32,36,37,48,56,88,0
000042E3  2024 2530 
000042E7  3858 00   
                    6910   @m68kde~1_30:
000042EA  0D0A 2044 6911          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000042EE  3220 3D20 
000042F2  2425 3038 
000042F6  5820 20   
000042F9  4132 203D 6912          dc.b      65,50,32,61,32,36,37,48,56,88,0
000042FD  2024 2530 
00004301  3858 00   
                    6913   @m68kde~1_31:
00004304  0D0A 2044 6914          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004308  3320 3D20 
0000430C  2425 3038 
00004310  5820 20   
00004313  4133 203D 6915          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004317  2024 2530 
0000431B  3858 00   
                    6916   @m68kde~1_32:
0000431E  0D0A 2044 6917          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004322  3420 3D20 
00004326  2425 3038 
0000432A  5820 20   
0000432D  4134 203D 6918          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004331  2024 2530 
00004335  3858 00   
                    6919   @m68kde~1_33:
00004338  0D0A 2044 6920          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
0000433C  3520 3D20 
00004340  2425 3038 
00004344  5820 20   
00004347  4135 203D 6921          dc.b      65,53,32,61,32,36,37,48,56,88,0
0000434B  2024 2530 
0000434F  3858 00   
                    6922   @m68kde~1_34:
00004352  0D0A 2044 6923          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004356  3620 3D20 
0000435A  2425 3038 
0000435E  5820 20   
00004361  4136 203D 6924          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004365  2024 2530 
00004369  3858 00   
                    6925   @m68kde~1_35:
0000436C  0D0A 2044 6926          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004370  3720 3D20 
00004374  2425 3038 
00004378  5820 20   
0000437B  4137 203D 6927          dc.b      65,55,32,61,32,36,37,48,56,88,0
0000437F  2024 2530 
00004383  3858 00   
                    6928   @m68kde~1_36:
00004386  0D0A 0D0A 6929          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
0000438A  5553 5020 
0000438E  3D20 2425 
00004392  3038 58   
00004395  2020 2841 6930          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004399  3729 2055 
0000439D  7365 7220 
000043A1  5350      
000043A3  00        6931          dc.b      0
                    6932   @m68kde~1_37:
000043A4  0D0A 5353 6933          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000043A8  5020 3D20 
000043AC  2425 3038 
000043B0  5820 20   
000043B3  2841 3729 6934          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000043B7  2053 7570 
000043BB  6572 7669 
000043BF  73        
000043C0  6F72 2053 6935          dc.b      111,114,32,83,80,0
000043C4  5000      
                    6936   @m68kde~1_38:
000043C6  0D0A 2053 6937          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000043CA  5220 3D20 
000043CE  2425 3034 
000043D2  5820 20   
000043D5  2000      6938          dc.b      32,0
                    6939   @m68kde~1_39:
000043D8  2020 205B 6940          dc.b      32,32,32,91,0
000043DC  00        
                    6941   @m68kde~1_40:
000043DE  0D0A 2050 6942          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000043E2  4320 3D20 
000043E6  2425 3038 
000043EA  5820 20   
000043ED  00        6943          dc.b      0
                    6944   @m68kde~1_41:
000043EE  5B40 2042 6945          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
000043F2  5245 414B 
000043F6  504F 494E 
000043FA  545D 00   
                    6946   @m68kde~1_42:
000043FE  0D0A 5750 6947          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004402  2564 203D 
00004406  2025 7300 
                    6948   @m68kde~1_43:
0000440A  0D0A 0D0A 6949          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000440E  0D0A 0D0A 
00004412  0D0A 0D0A 
00004416  5369 6E   
00004419  676C 6520 6950          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
0000441D  5374 6570 
00004421  2020 3A5B 
00004425  4F        
00004426  4E5D 00   6951          dc.b      78,93,0
                    6952   @m68kde~1_44:
0000442A  0D0A 4272 6953          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000442E  6561 6B20 
00004432  506F 696E 
00004436  74        
00004437  7320 3A5B 6954          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
0000443B  4469 7361 
0000443F  626C 6564 
00004443  5D        
00004444  00        6955          dc.b      0
                    6956   @m68kde~1_45:
00004446  0D0A 5072 6957          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
0000444A  6573 7320 
0000444E  3C53 5041 
00004452  4345      
00004454  3E20 746F 6958          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004458  2045 7865 
0000445C  6375 7465 
00004460  20        
00004461  4E65 7874 6959          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004465  2049 6E73 
00004469  7472 7563 
0000446D  7469 6F6E 6960          dc.b      116,105,111,110,0
00004471  00        
                    6961   @m68kde~1_46:
00004472  0D0A 5072 6962          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004476  6573 7320 
0000447A  3C45 5343 
0000447E  3E20      
00004480  746F 2052 6963          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004484  6573 756D 
00004488  6520 5072 
0000448C  6F67 7261 6964          dc.b      111,103,114,97,109,0
00004490  6D00      
                    6965   @m68kde~1_47:
00004492  0D0A 496C 6966          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004496  6C65 6761 
0000449A  6C20 4461 
0000449E  74        
0000449F  6120 5265 6967          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000044A3  6769 7374 
000044A7  6572 203A 
000044AB  20        
000044AC  5573 6520 6968          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000044B0  4430 2D44 
000044B4  372E 2E2E 
000044B8  2E2E      
000044BA  0D0A 00   6969          dc.b      13,10,0
                    6970   @m68kde~1_48:
000044BE  0D0A 4425 6971          dc.b      13,10,68,37,99,32,61,32,0
000044C2  6320 3D20 
000044C6  00        
                    6972   @m68kde~1_49:
000044C8  0D0A 496C 6973          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000044CC  6C65 6761 
000044D0  6C20 4164 
000044D4  64        
000044D5  7265 7373 6974          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000044D9  2052 6567 
000044DD  6973 7465 
000044E1  7220 3A20 6975          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000044E5  5573 6520 
000044E9  4130 2D41 
000044ED  372E      
000044EF  2E2E 2E2E 6976          dc.b      46,46,46,46,13,10,0
000044F3  0D0A 00   
                    6977   @m68kde~1_50:
000044F6  0D0A 4125 6978          dc.b      13,10,65,37,99,32,61,32,0
000044FA  6320 3D20 
000044FE  00        
                    6979   @m68kde~1_51:
00004500  0D0A 5573 6980          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004504  6572 2053 
00004508  5020 3D20 
0000450C  00        
                    6981   @m68kde~1_52:
0000450E  0D0A 496C 6982          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004512  6C65 6761 
00004516  6C20 5265 
0000451A  67        
0000451B  6973 7465 6983          dc.b      105,115,116,101,114,46,46,46,46,0
0000451F  722E 2E2E 
00004523  2E00      
                    6984   @m68kde~1_53:
00004526  0D0A 5379 6985          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
0000452A  7374 656D 
0000452E  2053 5020 
00004532  3D        
00004533  2000      6986          dc.b      32,0
                    6987   @m68kde~1_54:
00004536  0D0A 5043 6988          dc.b      13,10,80,67,32,61,32,0
0000453A  203D 2000 
                    6989   @m68kde~1_55:
0000453E  0D0A 5352 6990          dc.b      13,10,83,82,32,61,32,0
00004542  203D 2000 
                    6991   @m68kde~1_56:
00004546  0D0A 496C 6992          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000454A  6C65 6761 
0000454E  6C20 5265 
00004552  67        
00004553  6973 7465 6993          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004557  723A 2055 
0000455B  7365 2041 
0000455F  30        
00004560  2D41 372C 6994          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004564  2044 302D 
00004568  4437 2C20 
0000456C  5353 50   
0000456F  2C20 5553 6995          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004573  502C 2050 
00004577  4320 6F72 
0000457B  2053      
0000457D  520D 0A00 6996          dc.b      82,13,10,0
                    6997   @m68kde~1_57:
00004582  0D0A 0D0A 6998          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004586  4E75 6D20 
0000458A  2020 2020 
0000458E  4164      
00004590  6472 6573 6999          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004594  7320 2020 
00004598  2020 2049 
0000459C  6E        
0000459D  7374 7275 7000          dc.b      115,116,114,117,99,116,105,111,110,0
000045A1  6374 696F 
000045A5  6E00      
                    7001   @m68kde~1_58:
000045A8  0D0A 2D2D 7002          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000045AC  2D20 2020 
000045B0  2020 2D2D 
000045B4  2D2D 2D   
000045B7  2D2D 2D2D 7003          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000045BB  2020 2020 
000045BF  2D2D 2D2D 
000045C3  2D2D 2D   
000045C6  2D2D 2D2D 7004          dc.b      45,45,45,45,0
000045CA  00        
                    7005   @m68kde~1_59:
000045CC  0D0A 4E6F 7006          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000045D0  2042 7265 
000045D4  616B 506F 
000045D8  69        
000045D9  6E74 7320 7007          dc.b      110,116,115,32,83,101,116,0
000045DD  5365 7400 
                    7008   @m68kde~1_60:
000045E2  0D0A 2533 7009          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000045E6  6420 2020 
000045EA  2020 2425 
000045EE  3038 78   
000045F1  00        7010          dc.b      0
                    7011   @m68kde~1_61:
000045F2  0D0A 4E75 7012          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000045F6  6D20 2020 
000045FA  2020 4164 
000045FE  6472      
00004600  6573 7300 7013          dc.b      101,115,115,0
                    7014   @m68kde~1_62:
00004604  0D0A 2D2D 7015          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004608  2D20 2020 
0000460C  2020 2D2D 
00004610  2D2D 2D   
00004613  2D2D 2D2D 7016          dc.b      45,45,45,45,0
00004617  00        
                    7017   @m68kde~1_63:
00004618  0D0A 4E6F 7018          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
0000461C  2057 6174 
00004620  6368 506F 
00004624  69        
00004625  6E74 7320 7019          dc.b      110,116,115,32,83,101,116,0
00004629  5365 7400 
                    7020   @m68kde~1_64:
0000462E  0D0A 456E 7021          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004632  7465 7220 
00004636  4272 6561 
0000463A  6B        
0000463B  2050 6F69 7022          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000463F  6E74 204E 
00004643  756D 6265 
00004647  72        
00004648  3A20 00   7023          dc.b      58,32,0
                    7024   @m68kde~1_65:
0000464C  0D0A 496C 7025          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004650  6C65 6761 
00004654  6C20 5261 
00004658  6E        
00004659  6765 203A 7026          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
0000465D  2055 7365 
00004661  2030 202D 
00004665  2037      
00004667  00        7027          dc.b      0
                    7028   @m68kde~1_66:
00004668  0D0A 4272 7029          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000466C  6561 6B20 
00004670  506F 696E 
00004674  74        
00004675  2043 6C65 7030          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004679  6172 6564 
0000467D  2E2E 2E2E 
00004681  2E        
00004682  0D0A 00   7031          dc.b      13,10,0
                    7032   @m68kde~1_67:
00004686  0D0A 4272 7033          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000468A  6561 6B20 
0000468E  506F 696E 
00004692  74        
00004693  2077 6173 7034          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004697  6E27 7420 
0000469B  5365 742E 
0000469F  2E        
000046A0  2E2E 2E00 7035          dc.b      46,46,46,0
                    7036   @m68kde~1_68:
000046A4  0D0A 456E 7037          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000046A8  7465 7220 
000046AC  5761 7463 
000046B0  68        
000046B1  2050 6F69 7038          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000046B5  6E74 204E 
000046B9  756D 6265 
000046BD  72        
000046BE  3A20 00   7039          dc.b      58,32,0
                    7040   @m68kde~1_69:
000046C2  0D0A 5761 7041          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000046C6  7463 6820 
000046CA  506F 696E 
000046CE  74        
000046CF  2043 6C65 7042          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000046D3  6172 6564 
000046D7  2E2E 2E2E 
000046DB  2E        
000046DC  0D0A 00   7043          dc.b      13,10,0
                    7044   @m68kde~1_70:
000046E0  0D0A 5761 7045          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000046E4  7463 6820 
000046E8  506F 696E 
000046EC  74        
000046ED  2057 6173 7046          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000046F1  206E 6F74 
000046F5  2053 6574 
000046F9  2E        
000046FA  2E2E 2E2E 7047          dc.b      46,46,46,46,0
000046FE  00        
                    7048   @m68kde~1_71:
00004700  0D0A 4E6F 7049          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004704  2046 5245 
00004708  4520 4272 
0000470C  6561      
0000470E  6B20 506F 7050          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004712  696E 7473 
00004716  2E2E 2E2E 
0000471A  2E        
0000471B  00        7051          dc.b      0
                    7052   @m68kde~1_72:
0000471C  0D0A 4272 7053          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004720  6561 6B20 
00004724  506F 696E 
00004728  74        
00004729  2041 6464 7054          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000472D  7265 7373 
00004731  3A20 00   
                    7055   @m68kde~1_73:
00004734  0D0A 4572 7056          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004738  726F 7220 
0000473C  3A20 4272 
00004740  65        
00004741  616B 2050 7057          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004745  6F69 6E74 
00004749  7320 4341 
0000474D  4E        
0000474E  4E4F 5420 7058          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004752  6265 2073 
00004756  6574 2061 
0000475A  74        
0000475B  204F 4444 7059          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
0000475F  2061 6464 
00004763  7265 7373 
00004767  65        
00004768  7300      7060          dc.b      115,0
                    7061   @m68kde~1_74:
0000476A  0D0A 4572 7062          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000476E  726F 7220 
00004772  3A20 4272 
00004776  65        
00004777  616B 2050 7063          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000477B  6F69 6E74 
0000477F  7320 4341 
00004783  4E        
00004784  4E4F 5420 7064          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004788  6265 2073 
0000478C  6574 2066 
00004790  6F        
00004791  7220 524F 7065          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004795  4D20 696E 
00004799  2052 616E 
0000479D  67        
0000479E  6520 3A20 7066          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000047A2  5B24 302D 
000047A6  2430 3030 
000047AA  3037 46   
000047AD  4646 5D00 7067          dc.b      70,70,93,0
                    7068   @m68kde~1_75:
000047B2  0D0A 4572 7069          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000047B6  726F 723A 
000047BA  2042 7265 
000047BE  61        
000047BF  6B20 506F 7070          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000047C3  696E 7420 
000047C7  416C 7265 
000047CB  6164 7920 7071          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000047CF  4578 6973 
000047D3  7473 2061 
000047D7  74        
000047D8  2041 6464 7072          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000047DC  7265 7373 
000047E0  203A 2025 
000047E4  30        
000047E5  3878 0D0A 7073          dc.b      56,120,13,10,0
000047E9  00        
                    7074   @m68kde~1_76:
000047EA  0D0A 4272 7075          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000047EE  6561 6B20 
000047F2  506F 696E 
000047F6  74        
000047F7  2053 6574 7076          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000047FB  2061 7420 
000047FF  4164 6472 
00004803  65        
00004804  7373 3A20 7077          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004808  5B24 2530 
0000480C  3878 5D00 
                    7078   @m68kde~1_77:
00004810  0D0A 4E6F 7079          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004814  2046 5245 
00004818  4520 5761 
0000481C  7463      
0000481E  6820 506F 7080          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004822  696E 7473 
00004826  2E2E 2E2E 
0000482A  2E        
0000482B  00        7081          dc.b      0
                    7082   @m68kde~1_78:
0000482C  0D0A 5761 7083          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004830  7463 6820 
00004834  506F 696E 
00004838  74        
00004839  2041 6464 7084          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000483D  7265 7373 
00004841  3A20 00   
                    7085   @m68kde~1_79:
00004844  0D0A 4572 7086          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004848  726F 723A 
0000484C  2057 6174 
00004850  63        
00004851  6820 506F 7087          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004855  696E 7420 
00004859  416C 7265 
0000485D  6164 7920 7088          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004861  5365 7420 
00004865  6174 2041 
00004869  64        
0000486A  6472 6573 7089          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
0000486E  7320 3A20 
00004872  2530 3878 
00004876  0D        
00004877  0A00      7090          dc.b      10,0
                    7091   @m68kde~1_80:
0000487A  0D0A 5761 7092          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000487E  7463 6820 
00004882  506F 696E 
00004886  74        
00004887  2053 6574 7093          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000488B  2061 7420 
0000488F  4164 6472 
00004893  65        
00004894  7373 3A20 7094          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004898  5B24 2530 
0000489C  3878 5D00 
                    7095   @m68kde~1_81:
000048A0  0D0A 0D0A 7096          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
000048A4  0D0A 0D0A 
000048A8  4042 5245 
000048AC  414B 50   
000048AF  4F49 4E54 7097          dc.b      79,73,78,84,0
000048B3  00        
                    7098   @m68kde~1_82:
000048B4  0D0A 5369 7099          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000048B8  6E67 6C65 
000048BC  2053 7465 
000048C0  70        
000048C1  203A 205B 7100          dc.b      32,58,32,91,79,78,93,0
000048C5  4F4E 5D00 
                    7101   @m68kde~1_83:
000048CA  0D0A 4272 7102          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000048CE  6561 6B50 
000048D2  6F69 6E74 
000048D6  73        
000048D7  203A 205B 7103          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000048DB  456E 6162 
000048DF  6C65 645D 
000048E3  00        
                    7104   @m68kde~1_84:
000048E4  0D0A 5072 7105          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000048E8  6573 7320 
000048EC  3C45 5343 
000048F0  3E20      
000048F2  746F 2052 7106          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000048F6  6573 756D 
000048FA  6520 5573 
000048FE  6572 2050 7107          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004902  726F 6772 
00004906  616D 0D0A 
0000490A  00        
                    7108   @m68kde~1_85:
0000490C  0D0A 556E 7109          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004910  6B6E 6F77 
00004914  6E20 436F 
00004918  6D        
00004919  6D61 6E64 7110          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
0000491D  2E2E 2E2E 
00004921  2E0D 0A00 
                    7111   @m68kde~1_86:
00004926  0D0A 5072 7112          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
0000492A  6F67 7261 
0000492E  6D20 456E 
00004932  64        
00004933  6564 2028 7113          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004937  5452 4150 
0000493B  2023 3135 
0000493F  292E      
00004941  2E2E 2E00 7114          dc.b      46,46,46,0
                    7115   @m68kde~1_87:
00004946  0D0A 4B69 7116          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
0000494A  6C6C 2041 
0000494E  6C6C 2042 
00004952  72        
00004953  6561 6B20 7117          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004957  506F 696E 
0000495B  7473 2E2E 
0000495F  2E        
00004960  2879 2F6E 7118          dc.b      40,121,47,110,41,63,0
00004964  293F 00   
                    7119   @m68kde~1_88:
00004968  0D0A 4B69 7120          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
0000496C  6C6C 2041 
00004970  6C6C 2057 
00004974  61        
00004975  7463 6820 7121          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004979  506F 696E 
0000497D  7473 2E2E 
00004981  2E        
00004982  2879 2F6E 7122          dc.b      40,121,47,110,41,63,0
00004986  293F 00   
                    7123   @m68kde~1_89:
0000498A  0D0A 2D2D 7124          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000498E  2D2D 2D2D 
00004992  2D2D 2D2D 
00004996  2D2D 2D   
00004999  2D2D 2D2D 7125          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000499D  2D2D 2D2D 
000049A1  2D2D 2D2D 
000049A5  2D2D 2D   
000049A8  2D2D 2D2D 7126          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000049AC  2D2D 2D2D 
000049B0  2D2D 2D2D 
000049B4  2D2D 2D   
000049B7  2D2D 2D2D 7127          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000049BB  2D2D 2D2D 
000049BF  2D2D 2D2D 
000049C3  2D2D 2D   
000049C6  2D2D 2D2D 7128          dc.b      45,45,45,45,45,45,0
000049CA  2D2D 00   
                    7129   @m68kde~1_90:
000049CE  0D0A 2020 7130          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000049D2  4465 6275 
000049D6  6767 6572 
000049DA  20        
000049DB  436F 6D6D 7131          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
000049DF  616E 6420 
000049E3  5375 6D6D 
000049E7  6172 7900 7132          dc.b      97,114,121,0
                    7133   @m68kde~1_91:
000049EC  0D0A 2020 7134          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
000049F0  2E28 7265 
000049F4  6729 2020 
000049F8  2020      
000049FA  2020 202D 7135          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
000049FE  2043 6861 
00004A02  6E67 6520 
00004A06  5265      
00004A08  6769 7374 7136          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004A0C  6572 733A 
00004A10  2065 2E67 
00004A14  2041 302D 7137          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004A18  4137 2C44 
00004A1C  302D 4437 
00004A20  2C50 43   
00004A23  2C53 5350 7138          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004A27  2C55 5350 
00004A2B  2C53 5200 
                    7139   @m68kde~1_92:
00004A30  0D0A 2020 7140          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004A34  4244 2F42 
00004A38  532F 4243 
00004A3C  2F42 4B   
00004A3F  2020 2D20 7141          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004A43  4272 6561 
00004A47  6B20 506F 
00004A4B  69        
00004A4C  6E74 3A20 7142          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004A50  4469 7370 
00004A54  6C61 792F 
00004A58  53        
00004A59  6574 2F43 7143          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004A5D  6C65 6172 
00004A61  2F4B 696C 
00004A65  6C        
00004A66  00        7144          dc.b      0
                    7145   @m68kde~1_93:
00004A68  0D0A 2020 7146          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004A6C  4320 2020 
00004A70  2020 2020 
00004A74  2020 20   
00004A77  2020 2D20 7147          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004A7B  436F 7079 
00004A7F  2050 726F 
00004A83  67        
00004A84  7261 6D20 7148          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004A88  6672 6F6D 
00004A8C  2046 6C61 
00004A90  73        
00004A91  6820 746F 7149          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004A95  204D 6169 
00004A99  6E20 4D65 
00004A9D  6D        
00004A9E  6F72 7900 7150          dc.b      111,114,121,0
                    7151   @m68kde~1_94:
00004AA2  0D0A 2020 7152          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004AA6  4420 2020 
00004AAA  2020 2020 
00004AAE  2020 20   
00004AB1  2020 2D20 7153          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004AB5  4475 6D70 
00004AB9  204D 656D 
00004ABD  6F        
00004ABE  7279 2043 7154          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004AC2  6F6E 7465 
00004AC6  6E74 7320 
00004ACA  746F 2053 7155          dc.b      116,111,32,83,99,114,101,101,110,0
00004ACE  6372 6565 
00004AD2  6E00      
                    7156   @m68kde~1_95:
00004AD4  0D0A 2020 7157          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004AD8  4520 2020 
00004ADC  2020 2020 
00004AE0  2020 20   
00004AE3  2020 2D20 7158          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004AE7  456E 7465 
00004AEB  7220 5374 
00004AEF  72        
00004AF0  696E 6720 7159          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004AF4  696E 746F 
00004AF8  204D 656D 
00004AFC  6F72 7900 7160          dc.b      111,114,121,0
                    7161   @m68kde~1_96:
00004B00  0D0A 2020 7162          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004B04  4620 2020 
00004B08  2020 2020 
00004B0C  2020 20   
00004B0F  2020 2D20 7163          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004B13  4669 6C6C 
00004B17  204D 656D 
00004B1B  6F        
00004B1C  7279 2077 7164          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004B20  6974 6820 
00004B24  4461 7461 
00004B28  00        
                    7165   @m68kde~1_97:
00004B2A  0D0A 2020 7166          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004B2E  4720 2020 
00004B32  2020 2020 
00004B36  2020 20   
00004B39  2020 2D20 7167          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004B3D  476F 2050 
00004B41  726F 6772 
00004B45  61        
00004B46  6D20 5374 7168          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004B4A  6172 7469 
00004B4E  6E67 2061 
00004B52  74        
00004B53  2041 6464 7169          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004B57  7265 7373 
00004B5B  3A20 2425 
00004B5F  30        
00004B60  3858 00   7170          dc.b      56,88,0
                    7171   @m68kde~1_98:
00004B64  0D0A 2020 7172          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004B68  4C20 2020 
00004B6C  2020 2020 
00004B70  2020 20   
00004B73  2020 2D20 7173          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004B77  4C6F 6164 
00004B7B  2050 726F 
00004B7F  67        
00004B80  7261 6D20 7174          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004B84  282E 4845 
00004B88  5820 6669 
00004B8C  6C        
00004B8D  6529 2066 7175          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004B91  726F 6D20 
00004B95  4C61 7074 
00004B99  6F        
00004B9A  7000      7176          dc.b      112,0
                    7177   @m68kde~1_99:
00004B9C  0D0A 2020 7178          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004BA0  4D20 2020 
00004BA4  2020 2020 
00004BA8  2020 20   
00004BAB  2020 2D20 7179          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004BAF  4D65 6D6F 
00004BB3  7279 2045 
00004BB7  78        
00004BB8  616D 696E 7180          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004BBC  6520 616E 
00004BC0  6420 4368 
00004BC4  61        
00004BC5  6E67 6500 7181          dc.b      110,103,101,0
                    7182   @m68kde~1_100:
00004BCA  0D0A 2020 7183          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004BCE  5020 2020 
00004BD2  2020 2020 
00004BD6  2020 20   
00004BD9  2020 2D20 7184          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004BDD  5072 6F67 
00004BE1  7261 6D20 
00004BE5  46        
00004BE6  6C61 7368 7185          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004BEA  204D 656D 
00004BEE  6F72 7920 
00004BF2  7769 7468 7186          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004BF6  2055 7365 
00004BFA  7220 5072 
00004BFE  6F67 7261 7187          dc.b      111,103,114,97,109,0
00004C02  6D00      
                    7188   @m68kde~1_101:
00004C04  0D0A 2020 7189          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004C08  5220 2020 
00004C0C  2020 2020 
00004C10  2020 20   
00004C13  2020 2D20 7190          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004C17  4469 7370 
00004C1B  6C61 7920 
00004C1F  36        
00004C20  3830 3030 7191          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004C24  2052 6567 
00004C28  6973 7465 
00004C2C  72        
00004C2D  7300      7192          dc.b      115,0
                    7193   @m68kde~1_102:
00004C30  0D0A 2020 7194          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004C34  5320 2020 
00004C38  2020 2020 
00004C3C  2020 20   
00004C3F  2020 2D20 7195          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004C43  546F 6767 
00004C47  6C65 204F 
00004C4B  4E        
00004C4C  2F4F 4646 7196          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004C50  2053 696E 
00004C54  676C 6520 
00004C58  53        
00004C59  7465 7020 7197          dc.b      116,101,112,32,77,111,100,101,0
00004C5D  4D6F 6465 
00004C61  00        
                    7198   @m68kde~1_103:
00004C62  0D0A 2020 7199          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004C66  544D 2020 
00004C6A  2020 2020 
00004C6E  2020 20   
00004C71  2020 2D20 7200          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004C75  5465 7374 
00004C79  204D 656D 
00004C7D  6F        
00004C7E  7279 00   7201          dc.b      114,121,0
                    7202   @m68kde~1_104:
00004C82  0D0A 2020 7203          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004C86  5453 2020 
00004C8A  2020 2020 
00004C8E  2020 20   
00004C91  2020 2D20 7204          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004C95  5465 7374 
00004C99  2053 7769 
00004C9D  74        
00004C9E  6368 6573 7205          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004CA2  3A20 5357 
00004CA6  372D 3000 
                    7206   @m68kde~1_105:
00004CAA  0D0A 2020 7207          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004CAE  5444 2020 
00004CB2  2020 2020 
00004CB6  2020 20   
00004CB9  2020 2D20 7208          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004CBD  5465 7374 
00004CC1  2044 6973 
00004CC5  70        
00004CC6  6C61 7973 7209          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004CCA  3A20 4C45 
00004CCE  4473 2061 
00004CD2  6E        
00004CD3  6420 372D 7210          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004CD7  5365 676D 
00004CDB  656E 7400 
                    7211   @m68kde~1_106:
00004CE0  0D0A 2020 7212          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004CE4  5744 2F57 
00004CE8  532F 5743 
00004CEC  2F57 4B   
00004CEF  2020 2D20 7213          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004CF3  5761 7463 
00004CF7  6820 506F 
00004CFB  696E      
00004CFD  743A 2044 7214          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004D01  6973 706C 
00004D05  6179 2F53 
00004D09  65        
00004D0A  742F 436C 7215          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004D0E  6561 722F 
00004D12  4B69 6C6C 
00004D16  00        
                    7216   @m68kde~1_107:
00004D18  0D0A 2300 7217          dc.b      13,10,35,0
                    7218   @m68kde~1_108:
00004D1C  0D0A 5072 7219          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004D20  6F67 7261 
00004D24  6D20 5275 
00004D28  6E        
00004D29  6E69 6E67 7220          dc.b      110,105,110,103,46,46,46,46,46,0
00004D2D  2E2E 2E2E 
00004D31  2E00      
                    7221   @m68kde~1_109:
00004D34  0D0A 5072 7222          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004D38  6573 7320 
00004D3C  3C52 4553 
00004D40  4554      
00004D42  3E20 6275 7223          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004D46  7474 6F6E 
00004D4A  203C 4B65 
00004D4E  79        
00004D4F  303E 206F 7224          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004D53  6E20 4445 
00004D57  3120 746F 
00004D5B  2073      
00004D5D  746F 7000 7225          dc.b      116,111,112,0
                    7226   @m68kde~1_110:
00004D62  0D0A 4572 7227          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004D66  726F 723A 
00004D6A  2050 7265 
00004D6E  73        
00004D6F  7320 2747 7228          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004D73  2720 6669 
00004D77  7273 7420 
00004D7B  74        
00004D7C  6F20 7374 7229          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004D80  6172 7420 
00004D84  7072 6F67 
00004D88  7261 6D00 7230          dc.b      114,97,109,0
                    7231   @m68kde~1_111:
00004D8C  0D0A 5369 7232          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004D90  6E67 6C65 
00004D94  2053 7465 
00004D98  70        
00004D99  2020 3A5B 7233          dc.b      32,32,58,91,79,78,93,0
00004D9D  4F4E 5D00 
                    7234   @m68kde~1_112:
00004DA2  0D0A 5072 7235          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004DA6  6573 7320 
00004DAA  2747 2720 
00004DAE  74        
00004DAF  6F20 5472 7236          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004DB3  6163 6520 
00004DB7  5072 6F67 
00004DBB  72        
00004DBC  616D 2066 7237          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004DC0  726F 6D20 
00004DC4  6164 6472 
00004DC8  6573 7320 7238          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004DCC  2425 582E 
00004DD0  2E2E 2E2E 
00004DD4  00        
                    7239   @m68kde~1_113:
00004DD6  0D0A 5075 7240          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004DDA  7368 203C 
00004DDE  5245 5345 
00004DE2  5420      
00004DE4  4275 7474 7241          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00004DE8  6F6E 3E20 
00004DEC  746F 2053 
00004DF0  74        
00004DF1  6F70 2E2E 7242          dc.b      111,112,46,46,46,46,46,0
00004DF5  2E2E 2E00 
                    7243   @m68kde~1_114:
00004DFA  0D0A 5369 7244          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004DFE  6E67 6C65 
00004E02  2053 7465 
00004E06  70        
00004E07  203A 205B 7245          dc.b      32,58,32,91,79,70,70,93,0
00004E0B  4F46 465D 
00004E0F  00        
                    7246   @m68kde~1_115:
00004E10  0D0A 4272 7247          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004E14  6561 6B20 
00004E18  506F 696E 
00004E1C  74        
00004E1D  7320 3A5B 7248          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004E21  456E 6162 
00004E25  6C65 645D 
00004E29  00        
                    7249   @m68kde~1_116:
00004E2A  0D0A 5072 7250          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004E2E  6573 7320 
00004E32  3C45 5343 
00004E36  3E20      
00004E38  746F 2052 7251          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004E3C  6573 756D 
00004E40  6520 5573 
00004E44  6572 2050 7252          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004E48  726F 6772 
00004E4C  616D 2E2E 
00004E50  2E        
00004E51  2E2E 00   7253          dc.b      46,46,0
                    7254   @m68kde~1_117:
00004E54  0D0A 5369 7255          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004E58  6E67 6C65 
00004E5C  2053 7465 
00004E60  70        
00004E61  2020 3A5B 7256          dc.b      32,32,58,91,79,70,70,93,0
00004E65  4F46 465D 
00004E69  00        
                    7257   @m68kde~1_118:
00004E6A  0D0A 0D0A 7258          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004E6E  5072 6F67 
00004E72  7261 6D20 
00004E76  41        
00004E77  424F 5254 7259          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004E7B  2021 2121 
00004E7F  2121 210D 
00004E83  0A00      
                    7260   @m68kde~1_119:
00004E86  2573 0D0A 7261          dc.b      37,115,13,10,0
00004E8A  00        
                    7262   @m68kde~1_120:
00004E8C  0D0A 0D0A 7263          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004E90  5072 6F67 
00004E94  7261 6D20 
00004E98  41        
00004E99  424F 5254 7264          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004E9D  2021 2121 
00004EA1  2121 00   
                    7265   @m68kde~1_121:
00004EA4  0D0A 556E 7266          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004EA8  6861 6E64 
00004EAC  6C65 6420 
00004EB0  49        
00004EB1  6E74 6572 7267          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004EB5  7275 7074 
00004EB9  3A20 4952 
00004EBD  5125 6420 7268          dc.b      81,37,100,32,33,33,33,33,33,0
00004EC1  2121 2121 
00004EC5  2100      
                    7269   @m68kde~1_122:
00004EC8  4144 4452 7270          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004ECC  4553 5320 
00004ED0  4552 524F 
00004ED4  523A 20   
00004ED7  3136 206F 7271          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004EDB  7220 3332 
00004EDF  2042 6974 
00004EE3  2054      
00004EE5  7261 6E73 7272          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004EE9  6665 7220 
00004EED  746F 2F66 
00004EF1  726F 6D20 7273          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004EF5  616E 204F 
00004EF9  4444 2041 
00004EFD  64        
00004EFE  6472 6573 7274          dc.b      100,114,101,115,115,46,46,46,46,0
00004F02  732E 2E2E 
00004F06  2E00      
                    7275   @m68kde~1_123:
00004F08  556E 6861 7276          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004F0C  6E64 6C65 
00004F10  6420 5472 
00004F14  6170 2021 7277          dc.b      97,112,32,33,33,33,33,33,0
00004F18  2121 2121 
00004F1C  00        
                    7278   @m68kde~1_124:
00004F1E  4255 5320 7279          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004F22  4572 726F 
00004F26  7221 00   
                    7280   @m68kde~1_125:
00004F2A  4144 4452 7281          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004F2E  4553 5320 
00004F32  4572 726F 
00004F36  7221      
00004F38  00        7282          dc.b      0
                    7283   @m68kde~1_126:
00004F3A  494C 4C45 7284          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004F3E  4741 4C20 
00004F42  494E 5354 
00004F46  5255 43   
00004F49  5449 4F4E 7285          dc.b      84,73,79,78,0
00004F4D  00        
                    7286   @m68kde~1_127:
00004F4E  4449 5649 7287          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004F52  4445 2042 
00004F56  5920 5A45 
00004F5A  524F 00   
                    7288   @m68kde~1_128:
00004F5E  2743 484B 7289          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004F62  2720 494E 
00004F66  5354 5255 
00004F6A  4354 49   
00004F6D  4F4E 00   7290          dc.b      79,78,0
                    7291   @m68kde~1_129:
00004F70  5452 4150 7292          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004F74  5620 494E 
00004F78  5354 5255 
00004F7C  4354 49   
00004F7F  4F4E 00   7293          dc.b      79,78,0
                    7294   @m68kde~1_130:
00004F82  5052 4956 7295          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004F86  494C 4547 
00004F8A  4520 5649 
00004F8E  4F4C 41   
00004F91  5449 4F4E 7296          dc.b      84,73,79,78,0
00004F95  00        
                    7297   @m68kde~1_131:
00004F96  554E 494E 7298          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004F9A  4954 4941 
00004F9E  4C49 5345 
00004FA2  4420 49   
00004FA5  5251 00   7299          dc.b      82,81,0
                    7300   @m68kde~1_132:
00004FA8  5350 5552 7301          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004FAC  494F 5553 
00004FB0  2049 5251 
00004FB4  00        
                    7302   @m68kde~1_133:
00004FB6  0D0A 5374 7303          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004FBA  6172 7420 
00004FBE  4164 6472 
00004FC2  65        
00004FC3  7373 2069 7304          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004FC7  6E20 4D65 
00004FCB  6D6F 7279 
00004FCF  3A20 00   7305          dc.b      58,32,0
                    7306   @m68kde~1_134:
00004FD2  0D0A 456E 7307          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004FD6  7465 7220 
00004FDA  5374 7269 
00004FDE  6E        
00004FDF  6720 2845 7308          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004FE3  5343 2074 
00004FE7  6F20 656E 
00004FEB  64        
00004FEC  2920 3A00 7309          dc.b      41,32,58,0
                    7310   @m68kde~1_135:
00004FF0  0A45 6E74 7311          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
00004FF4  6572 2077 
00004FF8  6861 7420 
00004FFC  73        
00004FFD  697A 6520 7312          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
00005001  6F66 206D 
00005005  656D 6F72 
00005009  7920 796F 7313          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
0000500D  7520 7761 
00005011  6E74 2074 
00005015  6F20 7265 7314          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
00005019  6164 2F77 
0000501D  7269 7465 
00005021  0A20 4279 7315          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
00005025  7465 203D 
00005029  2030 0A20 
0000502D  576F      
0000502F  7264 203D 7316          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
00005033  2031 0A20 
00005037  4C6F 6E67 
0000503B  20        
0000503C  576F 7264 7317          dc.b      87,111,114,100,32,61,32,50,10,0
00005040  203D 2032 
00005044  0A00      
                    7318   @m68kde~1_136:
00005046  0A00      7319          dc.b      10,0
                    7320   @m68kde~1_137:
00005048  0A45 6E74 7321          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
0000504C  6572 2077 
00005050  6869 6368 
00005054  2064 6174 7322          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005058  6120 7061 
0000505C  7474 6572 
00005060  6E        
00005061  2079 6F75 7323          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005065  2077 616E 
00005069  7420 746F 
0000506D  2077 7269 7324          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
00005071  7465 2069 
00005075  6E74 6F20 
00005079  6D65 6D6F 7325          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
0000507D  7279 0A20 
00005081  3078 3030 
00005085  20        
00005086  3D20 300A 7326          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
0000508A  2030 7842 
0000508E  3220 3D20 
00005092  310A 20   
00005095  3078 4333 7327          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
00005099  203D 2032 
0000509D  0A20 3078 
000050A1  4434      
000050A3  203D 2033 7328          dc.b      32,61,32,51,10,0
000050A7  0A00      
                    7329   @m68kde~1_138:
000050AA  0A45 6E74 7330          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000050AE  6572 2077 
000050B2  6869 6368 
000050B6  2064 6174 7331          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
000050BA  6120 7061 
000050BE  7474 6572 
000050C2  6E        
000050C3  2079 6F75 7332          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000050C7  2077 616E 
000050CB  7420 746F 
000050CF  2077 7269 7333          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000050D3  7465 2069 
000050D7  6E74 6F20 
000050DB  6D65 6D6F 7334          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000050DF  7279 0A20 
000050E3  3078 3030 
000050E7  30        
000050E8  3020 3D20 7335          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
000050EC  300A 2030 
000050F0  7831 3233 
000050F4  3420 3D   
000050F7  2031 0A20 7336          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
000050FB  3078 4131 
000050FF  4232 203D 
00005103  2032 0A   
00005106  2030 7843 7337          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
0000510A  3344 3420 
0000510E  3D20 330A 
00005112  00        
                    7338   @m68kde~1_139:
00005114  0A45 6E74 7339          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
00005118  6572 2077 
0000511C  6869 6368 
00005120  2064 6174 7340          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005124  6120 7061 
00005128  7474 6572 
0000512C  6E        
0000512D  2079 6F75 7341          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005131  2077 616E 
00005135  7420 746F 
00005139  2077 7269 7342          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000513D  7465 2069 
00005141  6E74 6F20 
00005145  6D65 6D6F 7343          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005149  7279 0A20 
0000514D  3078 3030 
00005151  30        
00005152  305F 3030 7344          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
00005156  3030 203D 
0000515A  2030 0A20 
0000515E  3078 41   
00005161  4142 425F 7345          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
00005165  4343 4444 
00005169  203D 2031 
0000516D  0A20 30   
00005170  7831 3132 7346          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
00005174  325F 3333 
00005178  3434 203D 
0000517C  2032 0A   
0000517F  2030 7837 7347          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
00005183  3635 345F 
00005187  3332 3130 
0000518B  203D 20   
0000518E  330A 00   7348          dc.b      51,10,0
                    7349   @m68kde~1_140:
00005192  0A50 726F 7350          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
00005196  7669 6465 
0000519A  2053 7461 
0000519E  72        
0000519F  7420 4164 7351          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
000051A3  6472 6573 
000051A7  7320 696E 
000051AB  2068 6578 7352          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
000051AF  2028 646F 
000051B3  206E 6F74 
000051B7  2075 7365 7353          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
000051BB  2030 7820 
000051BF  7072 6566 
000051C3  6978 290A 7354          dc.b      105,120,41,10,48,120,0
000051C7  3078 00   
                    7355   @m68kde~1_141:
000051CA  2578 00   7356          dc.b      37,120,0
                    7357   @m68kde~1_142:
000051CE  0A50 726F 7358          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
000051D2  7669 6465 
000051D6  2045 6E64 
000051DA  2041 6464 7359          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
000051DE  7265 7373 
000051E2  2069 6E20 
000051E6  6865 7820 7360          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
000051EA  2864 6F20 
000051EE  6E6F 7420 
000051F2  7573 6520 7361          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
000051F6  3078 2070 
000051FA  7265 6669 
000051FE  7829 0A30 7362          dc.b      120,41,10,48,120,0
00005202  7800      
                    7363   @m68kde~1_143:
00005204  0A53 7461 7364          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
00005208  7274 2041 
0000520C  6464 7265 
00005210  73        
00005211  7320 3078 7365          dc.b      115,32,48,120,37,48,56,120,10,0
00005215  2530 3878 
00005219  0A00      
                    7366   @m68kde~1_144:
0000521C  0A45 6E64 7367          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
00005220  2041 6464 
00005224  7265 7373 
00005228  3A20 3078 7368          dc.b      58,32,48,120,37,48,56,120,10,0
0000522C  2530 3878 
00005230  0A00      
                    7369   @m68kde~1_145:
00005232  4552 524F 7370          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
00005236  522E 2E2E 
0000523A  2041 6464 
0000523E  7265      
00005240  7373 2030 7371          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
00005244  7825 7820 
00005248  6973 2062 
0000524C  65        
0000524D  796F 6E64 7372          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
00005251  2074 6865 
00005255  206D 656D 
00005259  6F72 7920 7373          dc.b      111,114,121,32,114,97,110,103,101,10,0
0000525D  7261 6E67 
00005261  650A 00   
                    7374   @m68kde~1_146:
00005264  4552 524F 7375          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
00005268  522E 2E2E 
0000526C  2056 616C 
00005270  7565      
00005272  2077 7269 7376          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
00005276  7474 656E 
0000527A  2074 6F20 
0000527E  6164 6472 7377          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
00005282  6573 7320 
00005286  3078 2578 
0000528A  203D 3D20 7378          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
0000528E  3078 2578 
00005292  2E20 5661 
00005296  6C75      
00005298  6520 4578 7379          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
0000529C  7065 6374 
000052A0  6564 3A20 
000052A4  30        
000052A5  7825 780A 7380          dc.b      120,37,120,10,0
000052A9  00        
                    7381   @m68kde~1_147:
000052AA  4164 6472 7382          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000052AE  6573 733A 
000052B2  2030 7825 
000052B6  78        
000052B7  2056 616C 7383          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
000052BB  7565 3A20 
000052BF  3078 2530 
000052C3  3258      
000052C5  0A00      7384          dc.b      10,0
                    7385   @m68kde~1_148:
000052C8  4164 6472 7386          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000052CC  6573 733A 
000052D0  2030 7825 
000052D4  78        
000052D5  2056 616C 7387          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
000052D9  7565 3A20 
000052DD  3078 2530 
000052E1  3458      
000052E3  0A00      7388          dc.b      10,0
                    7389   @m68kde~1_149:
000052E6  4164 6472 7390          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000052EA  6573 733A 
000052EE  2030 7825 
000052F2  78        
000052F3  2056 616C 7391          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
000052F7  7565 3A20 
000052FB  3078 2530 
000052FF  3858      
00005301  0A00      7392          dc.b      10,0
                    7393   @m68kde~1_150:
00005304  4445 312D 7394          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00005308  3638 6B20 
0000530C  4275 6720 
00005310  5631      
00005312  2E37 3700 7395          dc.b      46,55,55,0
                    7396   @m68kde~1_151:
00005316  436F 7079 7397          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
0000531A  7269 6768 
0000531E  7420 2843 
00005322  2920 504A 7398          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00005326  2044 6176 
0000532A  6965 7320 
0000532E  3230      
00005330  3136 00   7399          dc.b      49,54,0
                    7400   @m68kde~1_152:
00005334  0D0A 5275 7401          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00005338  6E6E 696E 
0000533C  672E 2E2E 
00005340  2E        
00005341  2E00      7402          dc.b      46,0
                    7403   @m68kde~1_153:
00005344  5275 6E6E 7404          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005348  696E 672E 
0000534C  2E2E 2E2E 
00005350  00        
                    7405   @m68kde~1_154:
00005352  4279 3A20 7406          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005356  504A 2044 
0000535A  6176 6965 
0000535E  73        
0000535F  00        7407          dc.b      0
                    7408   @m68kde~1_155:
00005360  0D0A 2573 7409          dc.b      13,10,37,115,0
00005364  00        
                    7410   @m68kde~1_156:
00005366  0A20 5374 7411          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
0000536A  7564 656E 
0000536E  7420 4E61 
00005372  6D        
00005373  6573 3A0A 7412          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
00005377  205A 6163 
0000537B  6861 7269 
0000537F  61        
00005380  6820 4A6F 7413          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
00005384  7365 7068 
00005388  3A20 3435 
0000538C  35        
0000538D  3030 3035 7414          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
00005391  3520 0A20 
00005395  556D 6169 
00005399  7220      
0000539B  4D61 7A68 7415          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
0000539F  6172 3A20 
000053A3  3230 3333 
000053A7  3333      
000053A9  3038 0A00 7416          dc.b      48,56,10,0
                    7417          section   data
000053AE            7418                   align
          0000 53AE 7419   DataStart       equ       *
                    7420   
                    7421   *********************************************************************************************************
                    7422   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7423   * to ram as part of the CStart routine in this file
                    7424   *********************************************************************************************************
                    7425   
                    7426   @vsscanf_bufx:
000053AE  0B00 0546 7427          dc.l      @vsscanf_buf
                    7428   @vsscanf_1:
000053B2  0A00      7429          dc.b      10,0
                    7430   __ctype:
000053B4  0040 4040 7431          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
000053B8  4040 4040 
000053BC  4040 5050 
000053C0  5050 50   
000053C3  4040 4040 7432          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000053C7  4040 4040 
000053CB  4040 4040 
000053CF  4040 40   
000053D2  4040 40D0 7433          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000053D6  A0A0 A0A0 
000053DA  A0A0 A0A0 
000053DE  A0A0 A0A0 7434          dc.b      160,160,160,160,160,160,160,140,140,140,140
000053E2  A0A0 A08C 
000053E6  8C8C 8C   
000053E9  8C8C 8C8C 7435          dc.b      140,140,140,140,140,140,160,160,160,160,160
000053ED  8C8C A0A0 
000053F1  A0A0 A0   
000053F4  A0A0 8A8A 7436          dc.b      160,160,138,138,138,138,138,138,130,130,130
000053F8  8A8A 8A8A 
000053FC  8282 82   
000053FF  8282 8282 7437          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005403  8282 8282 
00005407  8282 82   
0000540A  8282 8282 7438          dc.b      130,130,130,130,130,130,160,160,160,160,160
0000540E  8282 A0A0 
00005412  A0A0 A0   
00005415  A089 8989 7439          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005419  8989 8981 
0000541D  8181 81   
00005420  8181 8181 7440          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005424  8181 8181 
00005428  8181 81   
0000542B  8181 8181 7441          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
0000542F  81A0 A0A0 
00005433  A040 0000 
00005437  00        
00005438  0000 0000 7442          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000543C  0000 0000 
00005440  0000 0000 
00005444  0000 0000 
00005448  0000 0000 
0000544C  0000      
0000544E  0000 0000 7443          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005452  0000 0000 
00005456  0000 0000 
0000545A  0000 0000 
0000545E  0000 0000 
00005462  0000      
00005464  0000 0000 7444          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005468  0000 0000 
0000546C  0000 0000 
00005470  0000 0000 
00005474  0000 0000 
00005478  0000      
0000547A  0000 0000 7445          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000547E  0000 0000 
00005482  0000 0000 
00005486  0000 0000 
0000548A  0000 0000 
0000548E  0000      
00005490  0000 0000 7446          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005494  0000 0000 
00005498  0000 0000 
0000549C  0000 0000 
000054A0  0000 0000 
000054A4  0000      
000054A6  0000 0000 7447          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000054AA  0000 0000 
000054AE  0000 0000 
000054B2  0000 00   
                    7448   @itoa_1:
000054B6  2D32 3134 7449          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000054BA  3734 3833 
000054BE  3634 3800 
                    7450          section   bss
000054C2            7451                   align
          0000 54C2 7452   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7453   
                    7454   *********************************************************************************************************
                    7455   * Section for Uninitialised Data held in ROM as constants
                    7456   *********************************************************************************************************
                    7457   
0B000000            7458                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 7459   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7460   
                    7461   
0B000000            7462   bss             org       bss
                    7463   
                    7464   *********************************************************************************************************
                    7465   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7466   * install the exception handler using the C function InstallExceptionHandler()
                    7467   *********************************************************************************************************
                    7468   
                    7469   
                    7470   
0B000000            7471   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7472   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7473   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7474   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7475   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7476   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7477   VCheck           ds.l    1      ditto
0B00001C            7478   VTrapV           ds.l    1      ditto
0B000020            7479   VPrivilege       ds.l    1      ditto
0B000024            7480   VTrace           ds.l    1
0B000028            7481   VLine1010emul    ds.l    1
0B00002C            7482   VLine1111emul    ds.l    1
0B000030            7483   VUnassigned1     ds.l    1
0B000034            7484   VUnassigned2     ds.l    1
0B000038            7485   VUnassigned3     ds.l    1
0B00003C            7486   VUninit_IRQ      ds.l    1
0B000040            7487   VUnassigned4     ds.l    1
0B000044            7488   VUnassigned5     ds.l    1
0B000048            7489   VUnassigned6     ds.l    1
0B00004C            7490   VUnassigned7     ds.l    1
0B000050            7491   VUnassigned8     ds.l    1
0B000054            7492   VUnassigned9     ds.l    1
0B000058            7493   VUnassigned10    ds.l    1
0B00005C            7494   VUnassigned11    ds.l    1
0B000060            7495   VSpuriousIRQ     ds.l    1
                    7496   
                    7497   * Interrupt handlers Vector 25-31
0B000064            7498   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7499   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7500   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7501   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7502   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7503   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7504   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7505   
                    7506   * Trap Handler vectors 32-47
0B000080            7507   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7508   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7509   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7510   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7511   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7512   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7513   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7514   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7515   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7516   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7517   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7518   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7519   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7520   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7521   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7522   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7523   
                    7524   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7525   
                    7526   ***********************************************************************************************************
                    7527   * Other Variables
                    7528   ***********************************************************************************************************
                    7529   *__DebugA5       ds.l    1
                    7530   *__UserA5        ds.l    1
                    7531   
                    7532   ***********************************************************************************************************
0B0000C0            7533   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7534   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7535   __heap:         ds.l    0       ; pointers for malloc functions
                    7536   
                    7537   *__himem:       ds.l    himem            ; highest memory location + 1
                    7538   *__stklen:      ds.l    stklen           ; default stack size
                    7539   
                    7540   *********************************************************************************************************
                    7541   * Section for Heap
                    7542   *********************************************************************************************************
                    7543   
                    7544   _i:
0B0000C4            7545          ds.b      4
                    7546   _x:
0B0000C8            7547          ds.b      4
                    7548   _y:
0B0000CC            7549          ds.b      4
                    7550   _z:
0B0000D0            7551          ds.b      4
                    7552   _PortA_Count:
0B0000D4            7553          ds.b      4
                    7554   _Trace:
0B0000D8            7555          ds.b      4
                    7556   _GoFlag:
0B0000DC            7557          ds.b      4
                    7558   _Echo:
0B0000E0            7559          ds.b      4
                    7560   _d0:
0B0000E4            7561          ds.b      4
                    7562   _d1:
0B0000E8            7563          ds.b      4
                    7564   _d2:
0B0000EC            7565          ds.b      4
                    7566   _d3:
0B0000F0            7567          ds.b      4
                    7568   _d4:
0B0000F4            7569          ds.b      4
                    7570   _d5:
0B0000F8            7571          ds.b      4
                    7572   _d6:
0B0000FC            7573          ds.b      4
                    7574   _d7:
0B000100            7575          ds.b      4
                    7576   _a0:
0B000104            7577          ds.b      4
                    7578   _a1:
0B000108            7579          ds.b      4
                    7580   _a2:
0B00010C            7581          ds.b      4
                    7582   _a3:
0B000110            7583          ds.b      4
                    7584   _a4:
0B000114            7585          ds.b      4
                    7586   _a5:
0B000118            7587          ds.b      4
                    7588   _a6:
0B00011C            7589          ds.b      4
                    7590   _PC:
0B000120            7591          ds.b      4
                    7592   _SSP:
0B000124            7593          ds.b      4
                    7594   _USP:
0B000128            7595          ds.b      4
                    7596   _SR:
0B00012C            7597          ds.b      2
                    7598   _BreakPointAddress:
0B00012E            7599          ds.b      32
                    7600   _BreakPointInstruction:
0B00014E            7601          ds.b      16
                    7602   _BreakPointSetOrCleared:
0B00015E            7603          ds.b      32
                    7604   _InstructionSize:
0B00017E            7605          ds.b      4
                    7606   _WatchPointAddress:
0B000182            7607          ds.b      32
                    7608   _WatchPointSetOrCleared:
0B0001A2            7609          ds.b      32
                    7610   _WatchPointString:
0B0001C2            7611          ds.b      800
                    7612   _TempString:
0B0004E2            7613          ds.b      100
                    7614   @vsscanf_buf:
0B000546            7615          ds.b      80
                    7616          section   heap
0B000596            7617                   align
          0B00 0596 7618   bssEnd          equ *                   end of storage space for unitialised variables
                    7619   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 7620   heap   equ       *
0B000596            7621                    align
          0000 0000

Assembly errors: 0
