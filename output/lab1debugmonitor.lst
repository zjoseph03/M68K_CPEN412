680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 27 Feb 2025      Time: 21:31:40          Source: C:\M68KV6.0 - 800BY480\OUTPUT\LAB1DEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ; StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2BBE      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  226E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3924      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  42FA      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  42FE      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  4314      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  4316      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3924      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2F68      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  4318      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4352      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  436A      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  4372      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  4378      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  42FA      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3924      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  437C      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  4352      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  4390      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  43A6      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  43BA      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3924      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  43EA      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  3062      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2E9C      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2F68      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  441A      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4440      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3924      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4462      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  447E      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  44C4      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  44D6      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  2FD4      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  44E8      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /******************************************************************************************
                    1547   ; ** The following code is for the SPI controller
                    1548   ; *******************************************************************************************/
                    1549   ; int SPISafeWrite(unsigned char data) {
                    1550   _SPISafeWrite:
000010C4  4E56 FFFC 1551          link      A6,#-4
                    1552   ; unsigned char returnVal;
                    1553   ; // Wait while Write FIFO is full by checking WFFULL bit
                    1554   ; // while((SPI_Status & 0x08) == 0x08);
                    1555   ; SPI_Data = data;
000010C8  13EE 000B 1556          move.b    11(A6),4227108
000010CC  0040 8024 
                    1557   ; WaitForSPITransmitComplete();
000010D0  4EB9 0000 1558          jsr       _WaitForSPITransmitComplete
000010D4  111C      
                    1559   ; returnVal = SPI_Data;
000010D6  1D79 0040 1560          move.b    4227108,-1(A6)
000010DA  8024 FFFF 
                    1561   ; return returnVal;
000010DE  102E FFFF 1562          move.b    -1(A6),D0
000010E2  C0BC 0000 1563          and.l     #255,D0
000010E6  00FF      
000010E8  4E5E      1564          unlk      A6
000010EA  4E75      1565          rts
                    1566   ; }
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void) {
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (SPI_Status >> 7);
000010EC  1039 0040 1573          move.b    4227106,D0
000010F0  8022      
000010F2  C0BC 0000 1574          and.l     #255,D0
000010F6  00FF      
000010F8  EE88      1575          lsr.l     #7,D0
000010FA  4E75      1576          rts
                    1577   ; }
                    1578   ; /************************************************************************************
                    1579   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1580   ; ************************************************************************************/
                    1581   ; void SPI_Init(void)
                    1582   ; {
                    1583   _SPI_Init:
                    1584   ; // TODO
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 (b'11) = approx 700Khz
                    1591   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; SPI_Control = 0x50; // 0101_0011 // This might need to be 0x53
000010FC  13FC 0050 1595          move.b    #80,4227104
00001100  0040 8020 
                    1596   ; SPI_Ext     = 0x0;  // 00_0000_00
00001104  4239 0040 1597          clr.b     4227110
00001108  8026      
                    1598   ; SPI_CS      = 0xFF; // 1111_1111 // Set all CS inactive by default. We should set CS active when we want to write/read
0000110A  13FC 00FF 1599          move.b    #255,4227112
0000110E  0040 8028 
                    1600   ; SPI_Status  = 0xC0; // 1100_0000 // Everything other than bits [7:6] are read only
00001112  13FC 00C0 1601          move.b    #192,4227106
00001116  0040 8022 
0000111A  4E75      1602          rts
                    1603   ; }
                    1604   ; /************************************************************************************
                    1605   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1606   ; ************************************************************************************/
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while (TestForSPITransmitDataComplete() == 0);
                    1614   WaitForSPITransmitComplete_1:
0000111C  4EB8 10EC 1615          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1616          tst.l     D0
00001122  6602      1617          bne.s     WaitForSPITransmitComplete_3
00001124  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;
00001126  0039 00C0 1621          or.b      #192,4227106
0000112A  0040 8022 
0000112E  4E75      1622          rts
                    1623   ; }
                    1624   ; // Clear read FIFO by reading from SPI_Data until FIFO is empty
                    1625   ; void ClearSPIReadFIFO(void) {
                    1626   _ClearSPIReadFIFO:
00001130  4E56 FFFC 1627          link      A6,#-4
                    1628   ; volatile unsigned char dummy;
                    1629   ; while((SPI_Status & 0x01) == 0) {
                    1630   ClearSPIReadFIFO_1:
00001134  1039 0040 1631          move.b    4227106,D0
00001138  8022      
0000113A  C03C 0001 1632          and.b     #1,D0
0000113E  660A      1633          bne.s     ClearSPIReadFIFO_3
                    1634   ; dummy = SPI_Data;
00001140  1D79 0040 1635          move.b    4227108,-1(A6)
00001144  8024 FFFF 
00001148  60EA      1636          bra       ClearSPIReadFIFO_1
                    1637   ClearSPIReadFIFO_3:
0000114A  4E5E      1638          unlk      A6
0000114C  4E75      1639          rts
                    1640   ; }
                    1641   ; }
                    1642   ; void SPIFlashPollStatusWLE(void) {
                    1643   _SPIFlashPollStatusWLE:
0000114E  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char status;
                    1646   ; unsigned char dummy;
                    1647   ; do {
                    1648   SPIFlashPollStatusWLE_1:
                    1649   ; // Start a new read status register command each time
                    1650   ; SPI_CS = 0xFE;
00001152  13FC 00FE 1651          move.b    #254,4227112
00001156  0040 8028 
                    1652   ; SPISafeWrite(0x05);  // Send Read Status Register command
0000115A  4878 0005 1653          pea       5
0000115E  4EB8 10C4 1654          jsr       _SPISafeWrite
00001162  584F      1655          addq.w    #4,A7
                    1656   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
00001164  4878 00FF 1657          pea       255
00001168  4EB8 10C4 1658          jsr       _SPISafeWrite
0000116C  584F      1659          addq.w    #4,A7
0000116E  1D40 FFFE 1660          move.b    D0,-2(A6)
                    1661   ; SPI_CS = 0xFF;           
00001172  13FC 00FF 1662          move.b    #255,4227112
00001176  0040 8028 
0000117A  102E FFFE 1663          move.b    -2(A6),D0
0000117E  C03C 0002 1664          and.b     #2,D0
00001182  67CE      1665          beq       SPIFlashPollStatusWLE_1
00001184  4E5E      1666          unlk      A6
00001186  4E75      1667          rts
                    1668   ; // printf("\r\n WLE Status: %02x \n", status);
                    1669   ; } while ((status & 0x02) == 0);  // Continue polling until WEL bit (bit 1) is set and BUSY is not active
                    1670   ; }
                    1671   ; void SPIFlashPollStatusBusy(void) {
                    1672   _SPIFlashPollStatusBusy:
00001188  4E56 FFFC 1673          link      A6,#-4
                    1674   ; unsigned char status;
                    1675   ; unsigned char dummy;
                    1676   ; do {
                    1677   SPIFlashPollStatusBusy_1:
                    1678   ; // Start a new read status register command each time
                    1679   ; SPI_CS = 0xFE;
0000118C  13FC 00FE 1680          move.b    #254,4227112
00001190  0040 8028 
                    1681   ; SPISafeWrite(0x05);  // Send Read Status Register command
00001194  4878 0005 1682          pea       5
00001198  4EB8 10C4 1683          jsr       _SPISafeWrite
0000119C  584F      1684          addq.w    #4,A7
                    1685   ; status = SPISafeWrite(0xFF);  // Dummy write to clock in data
0000119E  4878 00FF 1686          pea       255
000011A2  4EB8 10C4 1687          jsr       _SPISafeWrite
000011A6  584F      1688          addq.w    #4,A7
000011A8  1D40 FFFE 1689          move.b    D0,-2(A6)
                    1690   ; SPI_CS = 0xFF;
000011AC  13FC 00FF 1691          move.b    #255,4227112
000011B0  0040 8028 
000011B4  102E FFFE 1692          move.b    -2(A6),D0
000011B8  C03C 0001 1693          and.b     #1,D0
000011BC  66CE      1694          bne       SPIFlashPollStatusBusy_1
000011BE  4E5E      1695          unlk      A6
000011C0  4E75      1696          rts
                    1697   ; // printf("\r\n Busy Status: %02x \n", status);
                    1698   ; } while (status & 0x01);  // Continue polling until BUSY bit (bit 0) is cleared
                    1699   ; }
                    1700   ; /************************************************************************************
                    1701   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1702   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1703   ; ************************************************************************************/
                    1704   ; int WriteSPIChar(int c)
                    1705   ; {
                    1706   _WriteSPIChar:
000011C2  4E56 0000 1707          link      A6,#0
                    1708   ; SPISafeWrite((unsigned char)c);
000011C6  222E 0008 1709          move.l    8(A6),D1
000011CA  C2BC 0000 1710          and.l     #255,D1
000011CE  00FF      
000011D0  2F01      1711          move.l    D1,-(A7)
000011D2  4EB8 10C4 1712          jsr       _SPISafeWrite
000011D6  584F      1713          addq.w    #4,A7
                    1714   ; return SPI_Data;
000011D8  1039 0040 1715          move.b    4227108,D0
000011DC  8024      
000011DE  C0BC 0000 1716          and.l     #255,D0
000011E2  00FF      
000011E4  4E5E      1717          unlk      A6
000011E6  4E75      1718          rts
                    1719   ; }
                    1720   ; void SPIFlashWriteEnable() {
                    1721   _SPIFlashWriteEnable:
                    1722   ; SPI_CS = 0xFE;
000011E8  13FC 00FE 1723          move.b    #254,4227112
000011EC  0040 8028 
                    1724   ; SPISafeWrite(0x06);
000011F0  4878 0006 1725          pea       6
000011F4  4EB8 10C4 1726          jsr       _SPISafeWrite
000011F8  584F      1727          addq.w    #4,A7
                    1728   ; SPI_CS = 0xFF;
000011FA  13FC 00FF 1729          move.b    #255,4227112
000011FE  0040 8028 
                    1730   ; // Read and Poll for the write enable latch (WEL) to wait until we finished write enable to exit this isntruction
                    1731   ; SPIFlashPollStatusWLE();
00001202  4EB8 114E 1732          jsr       _SPIFlashPollStatusWLE
00001206  4E75      1733          rts
                    1734   ; }
                    1735   ; void SPISendAddress(int c) {
                    1736   _SPISendAddress:
00001208  4E56 0000 1737          link      A6,#0
0000120C  48E7 2020 1738          movem.l   D2/A2,-(A7)
00001210  242E 0008 1739          move.l    8(A6),D2
00001214  45F8 10C4 1740          lea       _SPISafeWrite.L,A2
                    1741   ; SPISafeWrite((c >> 16) & 0xFF);     // First byte
00001218  2202      1742          move.l    D2,D1
0000121A  E081      1743          asr.l     #8,D1
0000121C  E081      1744          asr.l     #8,D1
0000121E  C2BC 0000 1745          and.l     #255,D1
00001222  00FF      
00001224  C2BC 0000 1746          and.l     #255,D1
00001228  00FF      
0000122A  2F01      1747          move.l    D1,-(A7)
0000122C  4E92      1748          jsr       (A2)
0000122E  584F      1749          addq.w    #4,A7
                    1750   ; SPISafeWrite((c >> 8) & 0xFF);      // second byte
00001230  2202      1751          move.l    D2,D1
00001232  E081      1752          asr.l     #8,D1
00001234  C2BC 0000 1753          and.l     #255,D1
00001238  00FF      
0000123A  C2BC 0000 1754          and.l     #255,D1
0000123E  00FF      
00001240  2F01      1755          move.l    D1,-(A7)
00001242  4E92      1756          jsr       (A2)
00001244  584F      1757          addq.w    #4,A7
                    1758   ; SPISafeWrite(c & 0xFF);             // third byte
00001246  2202      1759          move.l    D2,D1
00001248  C2BC 0000 1760          and.l     #255,D1
0000124C  00FF      
0000124E  C2BC 0000 1761          and.l     #255,D1
00001252  00FF      
00001254  2F01      1762          move.l    D1,-(A7)
00001256  4E92      1763          jsr       (A2)
00001258  584F      1764          addq.w    #4,A7
0000125A  4CDF 0404 1765          movem.l   (A7)+,D2/A2
0000125E  4E5E      1766          unlk      A6
00001260  4E75      1767          rts
                    1768   ; }
                    1769   ; void SPIFlashPageProgram(int addr) {
                    1770   _SPIFlashPageProgram:
00001262  4E56 FFF8 1771          link      A6,#-8
00001266  2F02      1772          move.l    D2,-(A7)
                    1773   ; unsigned char *sramMemoryPtr;
                    1774   ; int flashAddr = addr - 0x08000000;
00001268  202E 0008 1775          move.l    8(A6),D0
0000126C  0480 0800 1776          sub.l     #134217728,D0
00001270  0000      
00001272  2D40 FFFC 1777          move.l    D0,-4(A6)
                    1778   ; int i;
                    1779   ; SPI_CS = 0xFE;
00001276  13FC 00FE 1780          move.b    #254,4227112
0000127A  0040 8028 
                    1781   ; SPISafeWrite(0x02); // Write command so that we wait for write FIFO to not be full before giving a byte
0000127E  4878 0002 1782          pea       2
00001282  4EB8 10C4 1783          jsr       _SPISafeWrite
00001286  584F      1784          addq.w    #4,A7
                    1785   ; SPISendAddress(flashAddr);
00001288  2F2E FFFC 1786          move.l    -4(A6),-(A7)
0000128C  4EB8 1208 1787          jsr       _SPISendAddress
00001290  584F      1788          addq.w    #4,A7
                    1789   ; for (i = 0; i < 256; i++) {
00001292  4282      1790          clr.l     D2
                    1791   SPIFlashPageProgram_1:
00001294  0C82 0000 1792          cmp.l     #256,D2
00001298  0100      
0000129A  6C22      1793          bge.s     SPIFlashPageProgram_3
                    1794   ; sramMemoryPtr = (unsigned char*) (addr + i);
0000129C  202E 0008 1795          move.l    8(A6),D0
000012A0  D082      1796          add.l     D2,D0
000012A2  2D40 FFF8 1797          move.l    D0,-8(A6)
                    1798   ; WriteSPIChar(*sramMemoryPtr); // Random value for testing purposes
000012A6  206E FFF8 1799          move.l    -8(A6),A0
000012AA  1210      1800          move.b    (A0),D1
000012AC  C2BC 0000 1801          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1802          move.l    D1,-(A7)
000012B4  4EB8 11C2 1803          jsr       _WriteSPIChar
000012B8  584F      1804          addq.w    #4,A7
000012BA  5282      1805          addq.l    #1,D2
000012BC  60D6      1806          bra       SPIFlashPageProgram_1
                    1807   SPIFlashPageProgram_3:
                    1808   ; // printf("%02x ", *sramMemoryPtr);
                    1809   ; }
                    1810   ; SPI_CS = 0xFF;
000012BE  13FC 00FF 1811          move.b    #255,4227112
000012C2  0040 8028 
                    1812   ; // Poll the status register to see when the flash write is finished before exiting this command fully
                    1813   ; SPIFlashPollStatusBusy();
000012C6  4EB8 1188 1814          jsr       _SPIFlashPollStatusBusy
000012CA  241F      1815          move.l    (A7)+,D2
000012CC  4E5E      1816          unlk      A6
000012CE  4E75      1817          rts
                    1818   ; }
                    1819   ; void SPIFlashErase(void) {
                    1820   _SPIFlashErase:
                    1821   ; // TODO: Give a parameter for the sector to erase instead of hardcode
                    1822   ; printf("\nErasing...\n");
000012D0  4879 0000 1823          pea       @m68kde~1_22.L
000012D4  451C      
000012D6  4EB9 0000 1824          jsr       _printf
000012DA  3924      
000012DC  584F      1825          addq.w    #4,A7
                    1826   ; SPI_CS = 0xFE;
000012DE  13FC 00FE 1827          move.b    #254,4227112
000012E2  0040 8028 
                    1828   ; SPISafeWrite(0xC7);
000012E6  4878 00C7 1829          pea       199
000012EA  4EB8 10C4 1830          jsr       _SPISafeWrite
000012EE  584F      1831          addq.w    #4,A7
                    1832   ; SPI_CS = 0xFF;
000012F0  13FC 00FF 1833          move.b    #255,4227112
000012F4  0040 8028 
                    1834   ; SPIFlashPollStatusBusy();
000012F8  4EB8 1188 1835          jsr       _SPIFlashPollStatusBusy
000012FC  4E75      1836          rts
                    1837   ; }
                    1838   ; int SPIFlashRead() {
                    1839   _SPIFlashRead:
000012FE  4E56 FFFC 1840          link      A6,#-4
00001302  48E7 3000 1841          movem.l   D2/D3,-(A7)
                    1842   ; unsigned char readData;
                    1843   ; unsigned char *sramMemoryPtr;
                    1844   ; int addr;
                    1845   ; ClearSPIReadFIFO();
00001306  4EB8 1130 1846          jsr       _ClearSPIReadFIFO
                    1847   ; SPI_CS = 0xFE;
0000130A  13FC 00FE 1848          move.b    #254,4227112
0000130E  0040 8028 
                    1849   ; SPISafeWrite(0x03);
00001312  4878 0003 1850          pea       3
00001316  4EB8 10C4 1851          jsr       _SPISafeWrite
0000131A  584F      1852          addq.w    #4,A7
                    1853   ; SPISendAddress(0x0);
0000131C  42A7      1854          clr.l     -(A7)
0000131E  4EB8 1208 1855          jsr       _SPISendAddress
00001322  584F      1856          addq.w    #4,A7
                    1857   ; for (addr = 0x08000000; addr < (0x08040000); addr ++) {
00001324  243C 0800 1858          move.l    #134217728,D2
00001328  0000      
                    1859   SPIFlashRead_1:
0000132A  0C82 0804 1860          cmp.l     #134479872,D2
0000132E  0000      
00001330  6C1A      1861          bge.s     SPIFlashRead_3
                    1862   ; sramMemoryPtr = (unsigned char*) addr;
00001332  2D42 FFFC 1863          move.l    D2,-4(A6)
                    1864   ; readData = SPISafeWrite(0xFF); // Dummy byte (1 dummy byte == 1 byte read)
00001336  4878 00FF 1865          pea       255
0000133A  4EB8 10C4 1866          jsr       _SPISafeWrite
0000133E  584F      1867          addq.w    #4,A7
00001340  1600      1868          move.b    D0,D3
                    1869   ; *sramMemoryPtr = readData;
00001342  206E FFFC 1870          move.l    -4(A6),A0
00001346  1083      1871          move.b    D3,(A0)
00001348  5282      1872          addq.l    #1,D2
0000134A  60DE      1873          bra       SPIFlashRead_1
                    1874   SPIFlashRead_3:
                    1875   ; }
                    1876   ; SPI_CS = 0xFF;
0000134C  13FC 00FF 1877          move.b    #255,4227112
00001350  0040 8028 
                    1878   ; SPIFlashPollStatusBusy();
00001354  4EB8 1188 1879          jsr       _SPIFlashPollStatusBusy
                    1880   ; return readData;
00001358  C6BC 0000 1881          and.l     #255,D3
0000135C  00FF      
0000135E  2003      1882          move.l    D3,D0
00001360  4CDF 000C 1883          movem.l   (A7)+,D2/D3
00001364  4E5E      1884          unlk      A6
00001366  4E75      1885          rts
                    1886   ; }
                    1887   ; /*******************************************************************
                    1888   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1889   ; ********************************************************************/
                    1890   ; void ProgramFlashChip(void)
                    1891   ; {
                    1892   _ProgramFlashChip:
00001368  4E56 FFFC 1893          link      A6,#-4
                    1894   ; int addr;
                    1895   ; SPIFlashPollStatusBusy();
0000136C  4EB8 1188 1896          jsr       _SPIFlashPollStatusBusy
                    1897   ; SPIFlashWriteEnable();
00001370  4EB8 11E8 1898          jsr       _SPIFlashWriteEnable
                    1899   ; SPIFlashErase();
00001374  4EB8 12D0 1900          jsr       _SPIFlashErase
                    1901   ; // 256KB = 262144 bytes (0x40000)
                    1902   ; // We need to write one page at a time (256 bytes at a time)
                    1903   ; // This code writes the user program from DRAM to FLASH
                    1904   ; // printf("\r\n Starting Programming...");
                    1905   ; // for (addr = 0x08000000; addr < (0x08040000); addr += 256) {
                    1906   ; //     SPIFlashWriteEnable(); 
                    1907   ; //     // printf("\r\n Addr: %08x \n", addr);
                    1908   ; //     SPIFlashPageProgram(addr);
                    1909   ; // }
                    1910   ; printf("\r\n Programming Complete!");
00001378  4879 0000 1911          pea       @m68kde~1_23.L
0000137C  452A      
0000137E  4EB9 0000 1912          jsr       _printf
00001382  3924      
00001384  584F      1913          addq.w    #4,A7
00001386  4E5E      1914          unlk      A6
00001388  4E75      1915          rts
                    1916   ; }
                    1917   ; /*************************************************************************
                    1918   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1919   ; **************************************************************************/
                    1920   ; void LoadFromFlashChip(void)
                    1921   ; {
                    1922   _LoadFromFlashChip:
0000138A  4E56 FFFC 1923          link      A6,#-4
                    1924   ; int readData;
                    1925   ; printf("\r\n Loading Program From SPI Flash....") ;
0000138E  4879 0000 1926          pea       @m68kde~1_24.L
00001392  4544      
00001394  4EB9 0000 1927          jsr       _printf
00001398  3924      
0000139A  584F      1928          addq.w    #4,A7
                    1929   ; SPIFlashPollStatusBusy();
0000139C  4EB8 1188 1930          jsr       _SPIFlashPollStatusBusy
                    1931   ; readData = SPIFlashRead();
000013A0  4EB8 12FE 1932          jsr       _SPIFlashRead
000013A4  2D40 FFFC 1933          move.l    D0,-4(A6)
                    1934   ; printf("\r\n Read Data: %08x \n", readData);
000013A8  2F2E FFFC 1935          move.l    -4(A6),-(A7)
000013AC  4879 0000 1936          pea       @m68kde~1_25.L
000013B0  456A      
000013B2  4EB9 0000 1937          jsr       _printf
000013B6  3924      
000013B8  504F      1938          addq.w    #8,A7
000013BA  4E5E      1939          unlk      A6
000013BC  4E75      1940          rts
                    1941   ; }
                    1942   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1943   ; // IMPORTANT
                    1944   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1945   ; // has to be done with an interrupt (IRQ Level 6)
                    1946   ; //
                    1947   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1948   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1949   ; //
                    1950   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1951   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1952   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1953   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1954   ; // program area
                    1955   ; //
                    1956   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1957   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1958   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1959   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1960   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1961   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1962   ; void DumpRegisters()
                    1963   ; {
                    1964   _DumpRegisters:
000013BE  48E7 3F3C 1965          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000013C2  45F9 0000 1966          lea       _putch.L,A2
000013C6  2F68      
000013C8  47F9 0000 1967          lea       _printf.L,A3
000013CC  3924      
000013CE  49F9 0B00 1968          lea       _SR.L,A4
000013D2  012C      
000013D4  4BF9 0B00 1969          lea       _WatchPointString.L,A5
000013D8  01C2      
                    1970   ; short i, x, j, k ;
                    1971   ; unsigned char c, *BytePointer;
                    1972   ; // buld up strings for displaying watchpoints
                    1973   ; for(x = 0; x < (short)(8); x++)
000013DA  4242      1974          clr.w     D2
                    1975   DumpRegisters_1:
000013DC  0C42 0008 1976          cmp.w     #8,D2
000013E0  6C00 01C6 1977          bge       DumpRegisters_3
                    1978   ; {
                    1979   ; if(WatchPointSetOrCleared[x] == 1)
000013E4  48C2      1980          ext.l     D2
000013E6  2002      1981          move.l    D2,D0
000013E8  E588      1982          lsl.l     #2,D0
000013EA  41F9 0B00 1983          lea       _WatchPointSetOrCleared.L,A0
000013EE  01A2      
000013F0  2030 0800 1984          move.l    0(A0,D0.L),D0
000013F4  0C80 0000 1985          cmp.l     #1,D0
000013F8  0001      
000013FA  6600 0186 1986          bne       DumpRegisters_4
                    1987   ; {
                    1988   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
000013FE  48C2      1989          ext.l     D2
00001400  2202      1990          move.l    D2,D1
00001402  E589      1991          lsl.l     #2,D1
00001404  41F9 0B00 1992          lea       _WatchPointAddress.L,A0
00001408  0182      
0000140A  2F30 1800 1993          move.l    0(A0,D1.L),-(A7)
0000140E  4879 0000 1994          pea       @m68kde~1_26.L
00001412  4580      
00001414  220D      1995          move.l    A5,D1
00001416  48C2      1996          ext.l     D2
00001418  2F00      1997          move.l    D0,-(A7)
0000141A  2002      1998          move.l    D2,D0
0000141C  C1FC 0064 1999          muls      #100,D0
00001420  D280      2000          add.l     D0,D1
00001422  201F      2001          move.l    (A7)+,D0
00001424  2F01      2002          move.l    D1,-(A7)
00001426  4EB9 0000 2003          jsr       _sprintf
0000142A  3000      
0000142C  DEFC 000C 2004          add.w     #12,A7
                    2005   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001430  48C2      2006          ext.l     D2
00001432  2002      2007          move.l    D2,D0
00001434  E588      2008          lsl.l     #2,D0
00001436  41F9 0B00 2009          lea       _WatchPointAddress.L,A0
0000143A  0182      
0000143C  2A30 0800 2010          move.l    0(A0,D0.L),D5
                    2011   ; for(j = 0; j < (short)(16); j+=2)
00001440  4243      2012          clr.w     D3
                    2013   DumpRegisters_6:
00001442  0C43 0010 2014          cmp.w     #16,D3
00001446  6C00 0082 2015          bge       DumpRegisters_8
                    2016   ; {
                    2017   ; for(k = 0; k < (short)(2); k++)
0000144A  4246      2018          clr.w     D6
                    2019   DumpRegisters_9:
0000144C  0C46 0002 2020          cmp.w     #2,D6
00001450  6C00 0052 2021          bge       DumpRegisters_11
                    2022   ; {
                    2023   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001454  2045      2024          move.l    D5,A0
00001456  48C3      2025          ext.l     D3
00001458  2203      2026          move.l    D3,D1
0000145A  48C6      2027          ext.l     D6
0000145C  D286      2028          add.l     D6,D1
0000145E  1230 1800 2029          move.b    0(A0,D1.L),D1
00001462  C2BC 0000 2030          and.l     #255,D1
00001466  00FF      
00001468  2F01      2031          move.l    D1,-(A7)
0000146A  4879 0000 2032          pea       @m68kde~1_8.L
0000146E  4372      
00001470  4879 0B00 2033          pea       _TempString.L
00001474  04E2      
00001476  4EB9 0000 2034          jsr       _sprintf
0000147A  3000      
0000147C  DEFC 000C 2035          add.w     #12,A7
                    2036   ; strcat(WatchPointString[x], TempString) ;
00001480  4879 0B00 2037          pea       _TempString.L
00001484  04E2      
00001486  220D      2038          move.l    A5,D1
00001488  48C2      2039          ext.l     D2
0000148A  2F00      2040          move.l    D0,-(A7)
0000148C  2002      2041          move.l    D2,D0
0000148E  C1FC 0064 2042          muls      #100,D0
00001492  D280      2043          add.l     D0,D1
00001494  201F      2044          move.l    (A7)+,D0
00001496  2F01      2045          move.l    D1,-(A7)
00001498  4EB9 0000 2046          jsr       _strcat
0000149C  304C      
0000149E  504F      2047          addq.w    #8,A7
000014A0  5246      2048          addq.w    #1,D6
000014A2  60A8      2049          bra       DumpRegisters_9
                    2050   DumpRegisters_11:
                    2051   ; }
                    2052   ; strcat(WatchPointString[x]," ") ;
000014A4  4879 0000 2053          pea       @m68kde~1_27.L
000014A8  4588      
000014AA  220D      2054          move.l    A5,D1
000014AC  48C2      2055          ext.l     D2
000014AE  2F00      2056          move.l    D0,-(A7)
000014B0  2002      2057          move.l    D2,D0
000014B2  C1FC 0064 2058          muls      #100,D0
000014B6  D280      2059          add.l     D0,D1
000014B8  201F      2060          move.l    (A7)+,D0
000014BA  2F01      2061          move.l    D1,-(A7)
000014BC  4EB9 0000 2062          jsr       _strcat
000014C0  304C      
000014C2  504F      2063          addq.w    #8,A7
000014C4  5443      2064          addq.w    #2,D3
000014C6  6000 FF7A 2065          bra       DumpRegisters_6
                    2066   DumpRegisters_8:
                    2067   ; }
                    2068   ; strcat(WatchPointString[x], "  ") ;
000014CA  4879 0000 2069          pea       @m68kde~1_9.L
000014CE  4378      
000014D0  220D      2070          move.l    A5,D1
000014D2  48C2      2071          ext.l     D2
000014D4  2F00      2072          move.l    D0,-(A7)
000014D6  2002      2073          move.l    D2,D0
000014D8  C1FC 0064 2074          muls      #100,D0
000014DC  D280      2075          add.l     D0,D1
000014DE  201F      2076          move.l    (A7)+,D0
000014E0  2F01      2077          move.l    D1,-(A7)
000014E2  4EB9 0000 2078          jsr       _strcat
000014E6  304C      
000014E8  504F      2079          addq.w    #8,A7
                    2080   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000014EA  48C2      2081          ext.l     D2
000014EC  2002      2082          move.l    D2,D0
000014EE  E588      2083          lsl.l     #2,D0
000014F0  41F9 0B00 2084          lea       _WatchPointAddress.L,A0
000014F4  0182      
000014F6  2A30 0800 2085          move.l    0(A0,D0.L),D5
                    2086   ; for(j = 0; j < (short)(16); j++)
000014FA  4243      2087          clr.w     D3
                    2088   DumpRegisters_12:
000014FC  0C43 0010 2089          cmp.w     #16,D3
00001500  6C00 007E 2090          bge       DumpRegisters_14
                    2091   ; {
                    2092   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001504  2045      2093          move.l    D5,A0
00001506  48C3      2094          ext.l     D3
00001508  1030 3800 2095          move.b    0(A0,D3.L),D0
0000150C  C03C 007F 2096          and.b     #127,D0
00001510  1E00      2097          move.b    D0,D7
                    2098   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001512  0C07 007F 2099          cmp.b     #127,D7
00001516  6206      2100          bhi.s     DumpRegisters_17
00001518  0C07 0020 2101          cmp.b     #32,D7
0000151C  6416      2102          bhs.s     DumpRegisters_15
                    2103   DumpRegisters_17:
                    2104   ; sprintf(TempString, ".") ;
0000151E  4879 0000 2105          pea       @m68kde~1_28.L
00001522  458A      
00001524  4879 0B00 2106          pea       _TempString.L
00001528  04E2      
0000152A  4EB9 0000 2107          jsr       _sprintf
0000152E  3000      
00001530  504F      2108          addq.w    #8,A7
00001532  6026      2109          bra.s     DumpRegisters_16
                    2110   DumpRegisters_15:
                    2111   ; else
                    2112   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001534  2045      2113          move.l    D5,A0
00001536  48C3      2114          ext.l     D3
00001538  1230 3800 2115          move.b    0(A0,D3.L),D1
0000153C  C2BC 0000 2116          and.l     #255,D1
00001540  00FF      
00001542  2F01      2117          move.l    D1,-(A7)
00001544  4879 0000 2118          pea       @m68kde~1_29.L
00001548  458C      
0000154A  4879 0B00 2119          pea       _TempString.L
0000154E  04E2      
00001550  4EB9 0000 2120          jsr       _sprintf
00001554  3000      
00001556  DEFC 000C 2121          add.w     #12,A7
                    2122   DumpRegisters_16:
                    2123   ; strcat(WatchPointString[x], TempString) ;
0000155A  4879 0B00 2124          pea       _TempString.L
0000155E  04E2      
00001560  220D      2125          move.l    A5,D1
00001562  48C2      2126          ext.l     D2
00001564  2F00      2127          move.l    D0,-(A7)
00001566  2002      2128          move.l    D2,D0
00001568  C1FC 0064 2129          muls      #100,D0
0000156C  D280      2130          add.l     D0,D1
0000156E  201F      2131          move.l    (A7)+,D0
00001570  2F01      2132          move.l    D1,-(A7)
00001572  4EB9 0000 2133          jsr       _strcat
00001576  304C      
00001578  504F      2134          addq.w    #8,A7
0000157A  5243      2135          addq.w    #1,D3
0000157C  6000 FF7E 2136          bra       DumpRegisters_12
                    2137   DumpRegisters_14:
00001580  6020      2138          bra.s     DumpRegisters_5
                    2139   DumpRegisters_4:
                    2140   ; }
                    2141   ; }
                    2142   ; else
                    2143   ; strcpy(WatchPointString[x], "") ;
00001582  4879 0000 2144          pea       @m68kde~1_30.L
00001586  4590      
00001588  220D      2145          move.l    A5,D1
0000158A  48C2      2146          ext.l     D2
0000158C  2F00      2147          move.l    D0,-(A7)
0000158E  2002      2148          move.l    D2,D0
00001590  C1FC 0064 2149          muls      #100,D0
00001594  D280      2150          add.l     D0,D1
00001596  201F      2151          move.l    (A7)+,D0
00001598  2F01      2152          move.l    D1,-(A7)
0000159A  4EB9 0000 2153          jsr       _strcpy
0000159E  2E7A      
000015A0  504F      2154          addq.w    #8,A7
                    2155   DumpRegisters_5:
000015A2  5242      2156          addq.w    #1,D2
000015A4  6000 FE36 2157          bra       DumpRegisters_1
                    2158   DumpRegisters_3:
                    2159   ; }
                    2160   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000015A8  2F39 0B00 2161          move.l    _a0.L,-(A7)
000015AC  0104      
000015AE  2F39 0B00 2162          move.l    _d0.L,-(A7)
000015B2  00E4      
000015B4  4879 0000 2163          pea       @m68kde~1_31.L
000015B8  4592      
000015BA  4E93      2164          jsr       (A3)
000015BC  DEFC 000C 2165          add.w     #12,A7
                    2166   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000015C0  2F39 0B00 2167          move.l    _a1.L,-(A7)
000015C4  0108      
000015C6  2F39 0B00 2168          move.l    _d1.L,-(A7)
000015CA  00E8      
000015CC  4879 0000 2169          pea       @m68kde~1_32.L
000015D0  45AE      
000015D2  4E93      2170          jsr       (A3)
000015D4  DEFC 000C 2171          add.w     #12,A7
                    2172   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000015D8  2F39 0B00 2173          move.l    _a2.L,-(A7)
000015DC  010C      
000015DE  2F39 0B00 2174          move.l    _d2.L,-(A7)
000015E2  00EC      
000015E4  4879 0000 2175          pea       @m68kde~1_33.L
000015E8  45C8      
000015EA  4E93      2176          jsr       (A3)
000015EC  DEFC 000C 2177          add.w     #12,A7
                    2178   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000015F0  2F39 0B00 2179          move.l    _a3.L,-(A7)
000015F4  0110      
000015F6  2F39 0B00 2180          move.l    _d3.L,-(A7)
000015FA  00F0      
000015FC  4879 0000 2181          pea       @m68kde~1_34.L
00001600  45E2      
00001602  4E93      2182          jsr       (A3)
00001604  DEFC 000C 2183          add.w     #12,A7
                    2184   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001608  2F39 0B00 2185          move.l    _a4.L,-(A7)
0000160C  0114      
0000160E  2F39 0B00 2186          move.l    _d4.L,-(A7)
00001612  00F4      
00001614  4879 0000 2187          pea       @m68kde~1_35.L
00001618  45FC      
0000161A  4E93      2188          jsr       (A3)
0000161C  DEFC 000C 2189          add.w     #12,A7
                    2190   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001620  2F39 0B00 2191          move.l    _a5.L,-(A7)
00001624  0118      
00001626  2F39 0B00 2192          move.l    _d5.L,-(A7)
0000162A  00F8      
0000162C  4879 0000 2193          pea       @m68kde~1_36.L
00001630  4616      
00001632  4E93      2194          jsr       (A3)
00001634  DEFC 000C 2195          add.w     #12,A7
                    2196   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001638  2F39 0B00 2197          move.l    _a6.L,-(A7)
0000163C  011C      
0000163E  2F39 0B00 2198          move.l    _d6.L,-(A7)
00001642  00FC      
00001644  4879 0000 2199          pea       @m68kde~1_37.L
00001648  4630      
0000164A  4E93      2200          jsr       (A3)
0000164C  DEFC 000C 2201          add.w     #12,A7
                    2202   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001650  3214      2203          move.w    (A4),D1
00001652  C27C 2000 2204          and.w     #8192,D1
00001656  0C41 2000 2205          cmp.w     #8192,D1
0000165A  6608      2206          bne.s     DumpRegisters_18
0000165C  2239 0B00 2207          move.l    _SSP.L,D1
00001660  0124      
00001662  6006      2208          bra.s     DumpRegisters_19
                    2209   DumpRegisters_18:
00001664  2239 0B00 2210          move.l    _USP.L,D1
00001668  0128      
                    2211   DumpRegisters_19:
0000166A  2F01      2212          move.l    D1,-(A7)
0000166C  2F39 0B00 2213          move.l    _d7.L,-(A7)
00001670  0100      
00001672  4879 0000 2214          pea       @m68kde~1_38.L
00001676  464A      
00001678  4E93      2215          jsr       (A3)
0000167A  DEFC 000C 2216          add.w     #12,A7
                    2217   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000167E  2F39 0B00 2218          move.l    _USP.L,-(A7)
00001682  0128      
00001684  4879 0000 2219          pea       @m68kde~1_39.L
00001688  4664      
0000168A  4E93      2220          jsr       (A3)
0000168C  504F      2221          addq.w    #8,A7
                    2222   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000168E  2F39 0B00 2223          move.l    _SSP.L,-(A7)
00001692  0124      
00001694  4879 0000 2224          pea       @m68kde~1_40.L
00001698  4682      
0000169A  4E93      2225          jsr       (A3)
0000169C  504F      2226          addq.w    #8,A7
                    2227   ; printf("\r\n SR = $%04X   ",SR) ;
0000169E  3214      2228          move.w    (A4),D1
000016A0  C2BC 0000 2229          and.l     #65535,D1
000016A4  FFFF      
000016A6  2F01      2230          move.l    D1,-(A7)
000016A8  4879 0000 2231          pea       @m68kde~1_41.L
000016AC  46A4      
000016AE  4E93      2232          jsr       (A3)
000016B0  504F      2233          addq.w    #8,A7
                    2234   ; // display the status word in characters etc.
                    2235   ; printf("   [") ;
000016B2  4879 0000 2236          pea       @m68kde~1_42.L
000016B6  46B6      
000016B8  4E93      2237          jsr       (A3)
000016BA  584F      2238          addq.w    #4,A7
                    2239   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000016BC  3014      2240          move.w    (A4),D0
000016BE  C07C 8000 2241          and.w     #32768,D0
000016C2  0C40 8000 2242          cmp.w     #32768,D0
000016C6  660A      2243          bne.s     DumpRegisters_20
000016C8  4878 0054 2244          pea       84
000016CC  4E92      2245          jsr       (A2)
000016CE  584F      2246          addq.w    #4,A7
000016D0  6008      2247          bra.s     DumpRegisters_21
                    2248   DumpRegisters_20:
000016D2  4878 002D 2249          pea       45
000016D6  4E92      2250          jsr       (A2)
000016D8  584F      2251          addq.w    #4,A7
                    2252   DumpRegisters_21:
                    2253   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000016DA  3014      2254          move.w    (A4),D0
000016DC  C07C 2000 2255          and.w     #8192,D0
000016E0  0C40 2000 2256          cmp.w     #8192,D0
000016E4  660A      2257          bne.s     DumpRegisters_22
000016E6  4878 0053 2258          pea       83
000016EA  4E92      2259          jsr       (A2)
000016EC  584F      2260          addq.w    #4,A7
000016EE  6008      2261          bra.s     DumpRegisters_23
                    2262   DumpRegisters_22:
000016F0  4878 0055 2263          pea       85
000016F4  4E92      2264          jsr       (A2)
000016F6  584F      2265          addq.w    #4,A7
                    2266   DumpRegisters_23:
                    2267   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000016F8  3014      2268          move.w    (A4),D0
000016FA  C07C 0400 2269          and.w     #1024,D0
000016FE  0C40 0400 2270          cmp.w     #1024,D0
00001702  660A      2271          bne.s     DumpRegisters_24
00001704  4878 0031 2272          pea       49
00001708  4E92      2273          jsr       (A2)
0000170A  584F      2274          addq.w    #4,A7
0000170C  6008      2275          bra.s     DumpRegisters_25
                    2276   DumpRegisters_24:
0000170E  4878 0030 2277          pea       48
00001712  4E92      2278          jsr       (A2)
00001714  584F      2279          addq.w    #4,A7
                    2280   DumpRegisters_25:
                    2281   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001716  3014      2282          move.w    (A4),D0
00001718  C07C 0200 2283          and.w     #512,D0
0000171C  0C40 0200 2284          cmp.w     #512,D0
00001720  660A      2285          bne.s     DumpRegisters_26
00001722  4878 0031 2286          pea       49
00001726  4E92      2287          jsr       (A2)
00001728  584F      2288          addq.w    #4,A7
0000172A  6008      2289          bra.s     DumpRegisters_27
                    2290   DumpRegisters_26:
0000172C  4878 0030 2291          pea       48
00001730  4E92      2292          jsr       (A2)
00001732  584F      2293          addq.w    #4,A7
                    2294   DumpRegisters_27:
                    2295   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001734  3014      2296          move.w    (A4),D0
00001736  C07C 0100 2297          and.w     #256,D0
0000173A  0C40 0100 2298          cmp.w     #256,D0
0000173E  660A      2299          bne.s     DumpRegisters_28
00001740  4878 0031 2300          pea       49
00001744  4E92      2301          jsr       (A2)
00001746  584F      2302          addq.w    #4,A7
00001748  6008      2303          bra.s     DumpRegisters_29
                    2304   DumpRegisters_28:
0000174A  4878 0030 2305          pea       48
0000174E  4E92      2306          jsr       (A2)
00001750  584F      2307          addq.w    #4,A7
                    2308   DumpRegisters_29:
                    2309   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001752  3014      2310          move.w    (A4),D0
00001754  C07C 0010 2311          and.w     #16,D0
00001758  0C40 0010 2312          cmp.w     #16,D0
0000175C  660A      2313          bne.s     DumpRegisters_30
0000175E  4878 0058 2314          pea       88
00001762  4E92      2315          jsr       (A2)
00001764  584F      2316          addq.w    #4,A7
00001766  6008      2317          bra.s     DumpRegisters_31
                    2318   DumpRegisters_30:
00001768  4878 002D 2319          pea       45
0000176C  4E92      2320          jsr       (A2)
0000176E  584F      2321          addq.w    #4,A7
                    2322   DumpRegisters_31:
                    2323   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001770  3014      2324          move.w    (A4),D0
00001772  C07C 0008 2325          and.w     #8,D0
00001776  0C40 0008 2326          cmp.w     #8,D0
0000177A  660A      2327          bne.s     DumpRegisters_32
0000177C  4878 004E 2328          pea       78
00001780  4E92      2329          jsr       (A2)
00001782  584F      2330          addq.w    #4,A7
00001784  6008      2331          bra.s     DumpRegisters_33
                    2332   DumpRegisters_32:
00001786  4878 002D 2333          pea       45
0000178A  4E92      2334          jsr       (A2)
0000178C  584F      2335          addq.w    #4,A7
                    2336   DumpRegisters_33:
                    2337   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000178E  3014      2338          move.w    (A4),D0
00001790  C07C 0004 2339          and.w     #4,D0
00001794  0C40 0004 2340          cmp.w     #4,D0
00001798  660A      2341          bne.s     DumpRegisters_34
0000179A  4878 005A 2342          pea       90
0000179E  4E92      2343          jsr       (A2)
000017A0  584F      2344          addq.w    #4,A7
000017A2  6008      2345          bra.s     DumpRegisters_35
                    2346   DumpRegisters_34:
000017A4  4878 002D 2347          pea       45
000017A8  4E92      2348          jsr       (A2)
000017AA  584F      2349          addq.w    #4,A7
                    2350   DumpRegisters_35:
                    2351   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000017AC  3014      2352          move.w    (A4),D0
000017AE  C07C 0002 2353          and.w     #2,D0
000017B2  0C40 0002 2354          cmp.w     #2,D0
000017B6  660A      2355          bne.s     DumpRegisters_36
000017B8  4878 0056 2356          pea       86
000017BC  4E92      2357          jsr       (A2)
000017BE  584F      2358          addq.w    #4,A7
000017C0  6008      2359          bra.s     DumpRegisters_37
                    2360   DumpRegisters_36:
000017C2  4878 002D 2361          pea       45
000017C6  4E92      2362          jsr       (A2)
000017C8  584F      2363          addq.w    #4,A7
                    2364   DumpRegisters_37:
                    2365   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000017CA  3014      2366          move.w    (A4),D0
000017CC  C07C 0001 2367          and.w     #1,D0
000017D0  0C40 0001 2368          cmp.w     #1,D0
000017D4  660A      2369          bne.s     DumpRegisters_38
000017D6  4878 0043 2370          pea       67
000017DA  4E92      2371          jsr       (A2)
000017DC  584F      2372          addq.w    #4,A7
000017DE  6008      2373          bra.s     DumpRegisters_39
                    2374   DumpRegisters_38:
000017E0  4878 002D 2375          pea       45
000017E4  4E92      2376          jsr       (A2)
000017E6  584F      2377          addq.w    #4,A7
                    2378   DumpRegisters_39:
                    2379   ; putchar(']') ;
000017E8  4878 005D 2380          pea       93
000017EC  4E92      2381          jsr       (A2)
000017EE  584F      2382          addq.w    #4,A7
                    2383   ; printf("\r\n PC = $%08X  ", PC) ;
000017F0  2F39 0B00 2384          move.l    _PC.L,-(A7)
000017F4  0120      
000017F6  4879 0000 2385          pea       @m68kde~1_43.L
000017FA  46BC      
000017FC  4E93      2386          jsr       (A3)
000017FE  504F      2387          addq.w    #8,A7
                    2388   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001800  2039 0B00 2389          move.l    _PC.L,D0
00001804  0120      
00001806  2040      2390          move.l    D0,A0
00001808  3010      2391          move.w    (A0),D0
0000180A  0C40 4E4E 2392          cmp.w     #20046,D0
0000180E  660A      2393          bne.s     DumpRegisters_40
                    2394   ; printf("[@ BREAKPOINT]") ;
00001810  4879 0000 2395          pea       @m68kde~1_44.L
00001814  46CC      
00001816  4E93      2396          jsr       (A3)
00001818  584F      2397          addq.w    #4,A7
                    2398   DumpRegisters_40:
                    2399   ; printf("\r\n") ;
0000181A  4879 0000 2400          pea       @m68kde~1_1.L
0000181E  42FA      
00001820  4E93      2401          jsr       (A3)
00001822  584F      2402          addq.w    #4,A7
                    2403   ; for(i=0; i < 8; i++)    {
00001824  4244      2404          clr.w     D4
                    2405   DumpRegisters_42:
00001826  0C44 0008 2406          cmp.w     #8,D4
0000182A  6C00 0040 2407          bge       DumpRegisters_44
                    2408   ; if(WatchPointSetOrCleared[i] == 1)
0000182E  48C4      2409          ext.l     D4
00001830  2004      2410          move.l    D4,D0
00001832  E588      2411          lsl.l     #2,D0
00001834  41F9 0B00 2412          lea       _WatchPointSetOrCleared.L,A0
00001838  01A2      
0000183A  2030 0800 2413          move.l    0(A0,D0.L),D0
0000183E  0C80 0000 2414          cmp.l     #1,D0
00001842  0001      
00001844  6622      2415          bne.s     DumpRegisters_45
                    2416   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001846  220D      2417          move.l    A5,D1
00001848  48C4      2418          ext.l     D4
0000184A  2F00      2419          move.l    D0,-(A7)
0000184C  2004      2420          move.l    D4,D0
0000184E  C1FC 0064 2421          muls      #100,D0
00001852  D280      2422          add.l     D0,D1
00001854  201F      2423          move.l    (A7)+,D0
00001856  2F01      2424          move.l    D1,-(A7)
00001858  48C4      2425          ext.l     D4
0000185A  2F04      2426          move.l    D4,-(A7)
0000185C  4879 0000 2427          pea       @m68kde~1_45.L
00001860  46DC      
00001862  4E93      2428          jsr       (A3)
00001864  DEFC 000C 2429          add.w     #12,A7
                    2430   DumpRegisters_45:
00001868  5244      2431          addq.w    #1,D4
0000186A  60BA      2432          bra       DumpRegisters_42
                    2433   DumpRegisters_44:
0000186C  4CDF 3CFC 2434          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001870  4E75      2435          rts
                    2436   ; }
                    2437   ; }
                    2438   ; // Trace Exception Handler
                    2439   ; void DumpRegistersandPause(void)
                    2440   ; {
                    2441   _DumpRegistersandPause:
00001872  2F0A      2442          move.l    A2,-(A7)
00001874  45F9 0000 2443          lea       _printf.L,A2
00001878  3924      
                    2444   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000187A  4879 0000 2445          pea       @m68kde~1_46.L
0000187E  46E8      
00001880  4E92      2446          jsr       (A2)
00001882  584F      2447          addq.w    #4,A7
                    2448   ; printf("\r\nBreak Points :[Disabled]") ;
00001884  4879 0000 2449          pea       @m68kde~1_47.L
00001888  4708      
0000188A  4E92      2450          jsr       (A2)
0000188C  584F      2451          addq.w    #4,A7
                    2452   ; DumpRegisters() ;
0000188E  4EB8 13BE 2453          jsr       _DumpRegisters
                    2454   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001892  4879 0000 2455          pea       @m68kde~1_48.L
00001896  4724      
00001898  4E92      2456          jsr       (A2)
0000189A  584F      2457          addq.w    #4,A7
                    2458   ; printf("\r\nPress <ESC> to Resume Program") ;
0000189C  4879 0000 2459          pea       @m68kde~1_49.L
000018A0  4750      
000018A2  4E92      2460          jsr       (A2)
000018A4  584F      2461          addq.w    #4,A7
                    2462   ; menu() ;
000018A6  4EB9 0000 2463          jsr       _menu
000018AA  2456      
000018AC  245F      2464          move.l    (A7)+,A2
000018AE  4E75      2465          rts
                    2466   ; }
                    2467   ; void ChangeRegisters(void)
                    2468   ; {
                    2469   _ChangeRegisters:
000018B0  4E56 FFFC 2470          link      A6,#-4
000018B4  48E7 303C 2471          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000018B8  45F9 0000 2472          lea       _printf.L,A2
000018BC  3924      
000018BE  47EE FFFC 2473          lea       -4(A6),A3
000018C2  49F8 0CA4 2474          lea       _Get8HexDigits.L,A4
000018C6  4BF8 0B68 2475          lea       __getch.L,A5
                    2476   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2477   ; int reg_val ;
                    2478   ; char c, reg[3] ;
                    2479   ; reg[0] = tolower(_getch()) ;
000018CA  2F00      2480          move.l    D0,-(A7)
000018CC  4E95      2481          jsr       (A5)
000018CE  2200      2482          move.l    D0,D1
000018D0  201F      2483          move.l    (A7)+,D0
000018D2  2F01      2484          move.l    D1,-(A7)
000018D4  4EB9 0000 2485          jsr       _tolower
000018D8  2FD4      
000018DA  584F      2486          addq.w    #4,A7
000018DC  1680      2487          move.b    D0,(A3)
                    2488   ; reg[1] = c = tolower(_getch()) ;
000018DE  2F00      2489          move.l    D0,-(A7)
000018E0  4E95      2490          jsr       (A5)
000018E2  2200      2491          move.l    D0,D1
000018E4  201F      2492          move.l    (A7)+,D0
000018E6  2F01      2493          move.l    D1,-(A7)
000018E8  4EB9 0000 2494          jsr       _tolower
000018EC  2FD4      
000018EE  584F      2495          addq.w    #4,A7
000018F0  1400      2496          move.b    D0,D2
000018F2  1740 0001 2497          move.b    D0,1(A3)
                    2498   ; if(reg[0] == (char)('d'))  {    // change data register
000018F6  1013      2499          move.b    (A3),D0
000018F8  0C00 0064 2500          cmp.b     #100,D0
000018FC  6600 00AE 2501          bne       ChangeRegisters_1
                    2502   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001900  102B 0001 2503          move.b    1(A3),D0
00001904  0C00 0037 2504          cmp.b     #55,D0
00001908  6E0A      2505          bgt.s     ChangeRegisters_5
0000190A  102B 0001 2506          move.b    1(A3),D0
0000190E  0C00 0030 2507          cmp.b     #48,D0
00001912  6C0E      2508          bge.s     ChangeRegisters_3
                    2509   ChangeRegisters_5:
                    2510   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001914  4879 0000 2511          pea       @m68kde~1_50.L
00001918  4770      
0000191A  4E92      2512          jsr       (A2)
0000191C  584F      2513          addq.w    #4,A7
                    2514   ; return ;
0000191E  6000 0244 2515          bra       ChangeRegisters_6
                    2516   ChangeRegisters_3:
                    2517   ; }
                    2518   ; else {
                    2519   ; printf("\r\nD%c = ", c) ;
00001922  4882      2520          ext.w     D2
00001924  48C2      2521          ext.l     D2
00001926  2F02      2522          move.l    D2,-(A7)
00001928  4879 0000 2523          pea       @m68kde~1_51.L
0000192C  479C      
0000192E  4E92      2524          jsr       (A2)
00001930  504F      2525          addq.w    #8,A7
                    2526   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001932  42A7      2527          clr.l     -(A7)
00001934  4E94      2528          jsr       (A4)
00001936  584F      2529          addq.w    #4,A7
00001938  2600      2530          move.l    D0,D3
                    2531   ; }
                    2532   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2533   ; if(c == (char)('0'))
0000193A  0C02 0030 2534          cmp.b     #48,D2
0000193E  660A      2535          bne.s     ChangeRegisters_7
                    2536   ; d0 = reg_val ;
00001940  23C3 0B00 2537          move.l    D3,_d0.L
00001944  00E4      
00001946  6000 0060 2538          bra       ChangeRegisters_20
                    2539   ChangeRegisters_7:
                    2540   ; else if(c == (char)('1'))
0000194A  0C02 0031 2541          cmp.b     #49,D2
0000194E  660A      2542          bne.s     ChangeRegisters_9
                    2543   ; d1 = reg_val ;
00001950  23C3 0B00 2544          move.l    D3,_d1.L
00001954  00E8      
00001956  6000 0050 2545          bra       ChangeRegisters_20
                    2546   ChangeRegisters_9:
                    2547   ; else if(c == (char)('2'))
0000195A  0C02 0032 2548          cmp.b     #50,D2
0000195E  660A      2549          bne.s     ChangeRegisters_11
                    2550   ; d2 = reg_val ;
00001960  23C3 0B00 2551          move.l    D3,_d2.L
00001964  00EC      
00001966  6000 0040 2552          bra       ChangeRegisters_20
                    2553   ChangeRegisters_11:
                    2554   ; else if(c == (char)('3'))
0000196A  0C02 0033 2555          cmp.b     #51,D2
0000196E  6608      2556          bne.s     ChangeRegisters_13
                    2557   ; d3 = reg_val ;
00001970  23C3 0B00 2558          move.l    D3,_d3.L
00001974  00F0      
00001976  6030      2559          bra.s     ChangeRegisters_20
                    2560   ChangeRegisters_13:
                    2561   ; else if(c == (char)('4'))
00001978  0C02 0034 2562          cmp.b     #52,D2
0000197C  6608      2563          bne.s     ChangeRegisters_15
                    2564   ; d4 = reg_val ;
0000197E  23C3 0B00 2565          move.l    D3,_d4.L
00001982  00F4      
00001984  6022      2566          bra.s     ChangeRegisters_20
                    2567   ChangeRegisters_15:
                    2568   ; else if(c == (char)('5'))
00001986  0C02 0035 2569          cmp.b     #53,D2
0000198A  6608      2570          bne.s     ChangeRegisters_17
                    2571   ; d5 = reg_val ;
0000198C  23C3 0B00 2572          move.l    D3,_d5.L
00001990  00F8      
00001992  6014      2573          bra.s     ChangeRegisters_20
                    2574   ChangeRegisters_17:
                    2575   ; else if(c == (char)('6'))
00001994  0C02 0036 2576          cmp.b     #54,D2
00001998  6608      2577          bne.s     ChangeRegisters_19
                    2578   ; d6 = reg_val ;
0000199A  23C3 0B00 2579          move.l    D3,_d6.L
0000199E  00FC      
000019A0  6006      2580          bra.s     ChangeRegisters_20
                    2581   ChangeRegisters_19:
                    2582   ; else
                    2583   ; d7 = reg_val ;
000019A2  23C3 0B00 2584          move.l    D3,_d7.L
000019A6  0100      
                    2585   ChangeRegisters_20:
000019A8  6000 01B6 2586          bra       ChangeRegisters_51
                    2587   ChangeRegisters_1:
                    2588   ; }
                    2589   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000019AC  1013      2590          move.b    (A3),D0
000019AE  0C00 0061 2591          cmp.b     #97,D0
000019B2  6600 00A6 2592          bne       ChangeRegisters_21
                    2593   ; if((c > (char)('7')) || (c < (char)('0'))) {
000019B6  0C02 0037 2594          cmp.b     #55,D2
000019BA  6E06      2595          bgt.s     ChangeRegisters_25
000019BC  0C02 0030 2596          cmp.b     #48,D2
000019C0  6C0E      2597          bge.s     ChangeRegisters_23
                    2598   ChangeRegisters_25:
                    2599   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000019C2  4879 0000 2600          pea       @m68kde~1_52.L
000019C6  47A6      
000019C8  4E92      2601          jsr       (A2)
000019CA  584F      2602          addq.w    #4,A7
                    2603   ; return ;
000019CC  6000 0196 2604          bra       ChangeRegisters_6
                    2605   ChangeRegisters_23:
                    2606   ; }
                    2607   ; else {
                    2608   ; printf("\r\nA%c = ", c) ;
000019D0  4882      2609          ext.w     D2
000019D2  48C2      2610          ext.l     D2
000019D4  2F02      2611          move.l    D2,-(A7)
000019D6  4879 0000 2612          pea       @m68kde~1_53.L
000019DA  47D4      
000019DC  4E92      2613          jsr       (A2)
000019DE  504F      2614          addq.w    #8,A7
                    2615   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019E0  42A7      2616          clr.l     -(A7)
000019E2  4E94      2617          jsr       (A4)
000019E4  584F      2618          addq.w    #4,A7
000019E6  2600      2619          move.l    D0,D3
                    2620   ; }
                    2621   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2622   ; if(c == (char)('0'))
000019E8  0C02 0030 2623          cmp.b     #48,D2
000019EC  660A      2624          bne.s     ChangeRegisters_26
                    2625   ; a0 = reg_val ;
000019EE  23C3 0B00 2626          move.l    D3,_a0.L
000019F2  0104      
000019F4  6000 0060 2627          bra       ChangeRegisters_39
                    2628   ChangeRegisters_26:
                    2629   ; else if(c == (char)('1'))
000019F8  0C02 0031 2630          cmp.b     #49,D2
000019FC  660A      2631          bne.s     ChangeRegisters_28
                    2632   ; a1 = reg_val ;
000019FE  23C3 0B00 2633          move.l    D3,_a1.L
00001A02  0108      
00001A04  6000 0050 2634          bra       ChangeRegisters_39
                    2635   ChangeRegisters_28:
                    2636   ; else if(c == (char)('2'))
00001A08  0C02 0032 2637          cmp.b     #50,D2
00001A0C  660A      2638          bne.s     ChangeRegisters_30
                    2639   ; a2 = reg_val ;
00001A0E  23C3 0B00 2640          move.l    D3,_a2.L
00001A12  010C      
00001A14  6000 0040 2641          bra       ChangeRegisters_39
                    2642   ChangeRegisters_30:
                    2643   ; else if(c == (char)('3'))
00001A18  0C02 0033 2644          cmp.b     #51,D2
00001A1C  6608      2645          bne.s     ChangeRegisters_32
                    2646   ; a3 = reg_val ;
00001A1E  23C3 0B00 2647          move.l    D3,_a3.L
00001A22  0110      
00001A24  6030      2648          bra.s     ChangeRegisters_39
                    2649   ChangeRegisters_32:
                    2650   ; else if(c == (char)('4'))
00001A26  0C02 0034 2651          cmp.b     #52,D2
00001A2A  6608      2652          bne.s     ChangeRegisters_34
                    2653   ; a4 = reg_val ;
00001A2C  23C3 0B00 2654          move.l    D3,_a4.L
00001A30  0114      
00001A32  6022      2655          bra.s     ChangeRegisters_39
                    2656   ChangeRegisters_34:
                    2657   ; else if(c == (char)('5'))
00001A34  0C02 0035 2658          cmp.b     #53,D2
00001A38  6608      2659          bne.s     ChangeRegisters_36
                    2660   ; a5 = reg_val ;
00001A3A  23C3 0B00 2661          move.l    D3,_a5.L
00001A3E  0118      
00001A40  6014      2662          bra.s     ChangeRegisters_39
                    2663   ChangeRegisters_36:
                    2664   ; else if(c == (char)('6'))
00001A42  0C02 0036 2665          cmp.b     #54,D2
00001A46  6608      2666          bne.s     ChangeRegisters_38
                    2667   ; a6 = reg_val ;
00001A48  23C3 0B00 2668          move.l    D3,_a6.L
00001A4C  011C      
00001A4E  6006      2669          bra.s     ChangeRegisters_39
                    2670   ChangeRegisters_38:
                    2671   ; else
                    2672   ; USP = reg_val ;
00001A50  23C3 0B00 2673          move.l    D3,_USP.L
00001A54  0128      
                    2674   ChangeRegisters_39:
00001A56  6000 0108 2675          bra       ChangeRegisters_51
                    2676   ChangeRegisters_21:
                    2677   ; }
                    2678   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A5A  1013      2679          move.b    (A3),D0
00001A5C  0C00 0075 2680          cmp.b     #117,D0
00001A60  6600 004E 2681          bne       ChangeRegisters_40
00001A64  0C02 0073 2682          cmp.b     #115,D2
00001A68  6600 0046 2683          bne       ChangeRegisters_40
                    2684   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A6C  2F00      2685          move.l    D0,-(A7)
00001A6E  4E95      2686          jsr       (A5)
00001A70  2200      2687          move.l    D0,D1
00001A72  201F      2688          move.l    (A7)+,D0
00001A74  2F01      2689          move.l    D1,-(A7)
00001A76  4EB9 0000 2690          jsr       _tolower
00001A7A  2FD4      
00001A7C  584F      2691          addq.w    #4,A7
00001A7E  0C80 0000 2692          cmp.l     #112,D0
00001A82  0070      
00001A84  6618      2693          bne.s     ChangeRegisters_42
                    2694   ; printf("\r\nUser SP = ") ;
00001A86  4879 0000 2695          pea       @m68kde~1_54.L
00001A8A  47DE      
00001A8C  4E92      2696          jsr       (A2)
00001A8E  584F      2697          addq.w    #4,A7
                    2698   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A90  42A7      2699          clr.l     -(A7)
00001A92  4E94      2700          jsr       (A4)
00001A94  584F      2701          addq.w    #4,A7
00001A96  23C0 0B00 2702          move.l    D0,_USP.L
00001A9A  0128      
00001A9C  600E      2703          bra.s     ChangeRegisters_43
                    2704   ChangeRegisters_42:
                    2705   ; }
                    2706   ; else {
                    2707   ; printf("\r\nIllegal Register....") ;
00001A9E  4879 0000 2708          pea       @m68kde~1_55.L
00001AA2  47EC      
00001AA4  4E92      2709          jsr       (A2)
00001AA6  584F      2710          addq.w    #4,A7
                    2711   ; return ;
00001AA8  6000 00BA 2712          bra       ChangeRegisters_6
                    2713   ChangeRegisters_43:
00001AAC  6000 00B2 2714          bra       ChangeRegisters_51
                    2715   ChangeRegisters_40:
                    2716   ; }
                    2717   ; }
                    2718   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001AB0  1013      2719          move.b    (A3),D0
00001AB2  0C00 0073 2720          cmp.b     #115,D0
00001AB6  6600 004E 2721          bne       ChangeRegisters_44
00001ABA  0C02 0073 2722          cmp.b     #115,D2
00001ABE  6600 0046 2723          bne       ChangeRegisters_44
                    2724   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001AC2  2F00      2725          move.l    D0,-(A7)
00001AC4  4E95      2726          jsr       (A5)
00001AC6  2200      2727          move.l    D0,D1
00001AC8  201F      2728          move.l    (A7)+,D0
00001ACA  2F01      2729          move.l    D1,-(A7)
00001ACC  4EB9 0000 2730          jsr       _tolower
00001AD0  2FD4      
00001AD2  584F      2731          addq.w    #4,A7
00001AD4  0C80 0000 2732          cmp.l     #112,D0
00001AD8  0070      
00001ADA  6618      2733          bne.s     ChangeRegisters_46
                    2734   ; printf("\r\nSystem SP = ") ;
00001ADC  4879 0000 2735          pea       @m68kde~1_56.L
00001AE0  4804      
00001AE2  4E92      2736          jsr       (A2)
00001AE4  584F      2737          addq.w    #4,A7
                    2738   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AE6  42A7      2739          clr.l     -(A7)
00001AE8  4E94      2740          jsr       (A4)
00001AEA  584F      2741          addq.w    #4,A7
00001AEC  23C0 0B00 2742          move.l    D0,_SSP.L
00001AF0  0124      
00001AF2  600E      2743          bra.s     ChangeRegisters_47
                    2744   ChangeRegisters_46:
                    2745   ; }
                    2746   ; else {
                    2747   ; printf("\r\nIllegal Register....") ;
00001AF4  4879 0000 2748          pea       @m68kde~1_55.L
00001AF8  47EC      
00001AFA  4E92      2749          jsr       (A2)
00001AFC  584F      2750          addq.w    #4,A7
                    2751   ; return ;
00001AFE  6000 0064 2752          bra       ChangeRegisters_6
                    2753   ChangeRegisters_47:
00001B02  6000 005C 2754          bra       ChangeRegisters_51
                    2755   ChangeRegisters_44:
                    2756   ; }
                    2757   ; }
                    2758   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001B06  1013      2759          move.b    (A3),D0
00001B08  0C00 0070 2760          cmp.b     #112,D0
00001B0C  6620      2761          bne.s     ChangeRegisters_48
00001B0E  0C02 0063 2762          cmp.b     #99,D2
00001B12  661A      2763          bne.s     ChangeRegisters_48
                    2764   ; printf("\r\nPC = ") ;
00001B14  4879 0000 2765          pea       @m68kde~1_57.L
00001B18  4814      
00001B1A  4E92      2766          jsr       (A2)
00001B1C  584F      2767          addq.w    #4,A7
                    2768   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001B1E  42A7      2769          clr.l     -(A7)
00001B20  4E94      2770          jsr       (A4)
00001B22  584F      2771          addq.w    #4,A7
00001B24  23C0 0B00 2772          move.l    D0,_PC.L
00001B28  0120      
00001B2A  6000 0034 2773          bra       ChangeRegisters_51
                    2774   ChangeRegisters_48:
                    2775   ; }
                    2776   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001B2E  1013      2777          move.b    (A3),D0
00001B30  0C00 0073 2778          cmp.b     #115,D0
00001B34  6620      2779          bne.s     ChangeRegisters_50
00001B36  0C02 0072 2780          cmp.b     #114,D2
00001B3A  661A      2781          bne.s     ChangeRegisters_50
                    2782   ; printf("\r\nSR = ") ;
00001B3C  4879 0000 2783          pea       @m68kde~1_58.L
00001B40  481C      
00001B42  4E92      2784          jsr       (A2)
00001B44  584F      2785          addq.w    #4,A7
                    2786   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B46  42A7      2787          clr.l     -(A7)
00001B48  4EB8 0C58 2788          jsr       _Get4HexDigits
00001B4C  584F      2789          addq.w    #4,A7
00001B4E  33C0 0B00 2790          move.w    D0,_SR.L
00001B52  012C      
00001B54  600A      2791          bra.s     ChangeRegisters_51
                    2792   ChangeRegisters_50:
                    2793   ; }
                    2794   ; else
                    2795   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B56  4879 0000 2796          pea       @m68kde~1_59.L
00001B5A  4824      
00001B5C  4E92      2797          jsr       (A2)
00001B5E  584F      2798          addq.w    #4,A7
                    2799   ChangeRegisters_51:
                    2800   ; DumpRegisters() ;
00001B60  4EB8 13BE 2801          jsr       _DumpRegisters
                    2802   ChangeRegisters_6:
00001B64  4CDF 3C0C 2803          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B68  4E5E      2804          unlk      A6
00001B6A  4E75      2805          rts
                    2806   ; }
                    2807   ; void BreakPointDisplay(void)
                    2808   ; {
                    2809   _BreakPointDisplay:
00001B6C  48E7 3030 2810          movem.l   D2/D3/A2/A3,-(A7)
00001B70  45F9 0000 2811          lea       _printf.L,A2
00001B74  3924      
00001B76  47F9 0B00 2812          lea       _BreakPointAddress.L,A3
00001B7A  012E      
                    2813   ; int i, BreakPointsSet = 0 ;
00001B7C  4283      2814          clr.l     D3
                    2815   ; // any break points  set
                    2816   ; for(i = 0; i < 8; i++)  {
00001B7E  4282      2817          clr.l     D2
                    2818   BreakPointDisplay_1:
00001B80  0C82 0000 2819          cmp.l     #8,D2
00001B84  0008      
00001B86  6C1C      2820          bge.s     BreakPointDisplay_3
                    2821   ; if(BreakPointSetOrCleared[i] == 1)
00001B88  2002      2822          move.l    D2,D0
00001B8A  E588      2823          lsl.l     #2,D0
00001B8C  41F9 0B00 2824          lea       _BreakPointSetOrCleared.L,A0
00001B90  015E      
00001B92  2030 0800 2825          move.l    0(A0,D0.L),D0
00001B96  0C80 0000 2826          cmp.l     #1,D0
00001B9A  0001      
00001B9C  6602      2827          bne.s     BreakPointDisplay_4
                    2828   ; BreakPointsSet = 1;
00001B9E  7601      2829          moveq     #1,D3
                    2830   BreakPointDisplay_4:
00001BA0  5282      2831          addq.l    #1,D2
00001BA2  60DC      2832          bra       BreakPointDisplay_1
                    2833   BreakPointDisplay_3:
                    2834   ; }
                    2835   ; if(BreakPointsSet == 1) {
00001BA4  0C83 0000 2836          cmp.l     #1,D3
00001BA8  0001      
00001BAA  6616      2837          bne.s     BreakPointDisplay_6
                    2838   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001BAC  4879 0000 2839          pea       @m68kde~1_60.L
00001BB0  4860      
00001BB2  4E92      2840          jsr       (A2)
00001BB4  584F      2841          addq.w    #4,A7
                    2842   ; printf("\r\n---     ---------    -----------") ;
00001BB6  4879 0000 2843          pea       @m68kde~1_61.L
00001BBA  4886      
00001BBC  4E92      2844          jsr       (A2)
00001BBE  584F      2845          addq.w    #4,A7
00001BC0  600A      2846          bra.s     BreakPointDisplay_7
                    2847   BreakPointDisplay_6:
                    2848   ; }
                    2849   ; else
                    2850   ; printf("\r\nNo BreakPoints Set") ;
00001BC2  4879 0000 2851          pea       @m68kde~1_62.L
00001BC6  48AA      
00001BC8  4E92      2852          jsr       (A2)
00001BCA  584F      2853          addq.w    #4,A7
                    2854   BreakPointDisplay_7:
                    2855   ; for(i = 0; i < 8; i++)  {
00001BCC  4282      2856          clr.l     D2
                    2857   BreakPointDisplay_8:
00001BCE  0C82 0000 2858          cmp.l     #8,D2
00001BD2  0008      
00001BD4  6C00 005A 2859          bge       BreakPointDisplay_10
                    2860   ; // put opcode back, then put break point back
                    2861   ; if(BreakPointSetOrCleared[i] == 1)  {
00001BD8  2002      2862          move.l    D2,D0
00001BDA  E588      2863          lsl.l     #2,D0
00001BDC  41F9 0B00 2864          lea       _BreakPointSetOrCleared.L,A0
00001BE0  015E      
00001BE2  2030 0800 2865          move.l    0(A0,D0.L),D0
00001BE6  0C80 0000 2866          cmp.l     #1,D0
00001BEA  0001      
00001BEC  6600 003E 2867          bne       BreakPointDisplay_11
                    2868   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BF0  2002      2869          move.l    D2,D0
00001BF2  E388      2870          lsl.l     #1,D0
00001BF4  41F9 0B00 2871          lea       _BreakPointInstruction.L,A0
00001BF8  014E      
00001BFA  2202      2872          move.l    D2,D1
00001BFC  E589      2873          lsl.l     #2,D1
00001BFE  2233 1800 2874          move.l    0(A3,D1.L),D1
00001C02  2241      2875          move.l    D1,A1
00001C04  32B0 0800 2876          move.w    0(A0,D0.L),(A1)
                    2877   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001C08  2002      2878          move.l    D2,D0
00001C0A  E588      2879          lsl.l     #2,D0
00001C0C  2033 0800 2880          move.l    0(A3,D0.L),D0
00001C10  2040      2881          move.l    D0,A0
00001C12  30BC 4E4E 2882          move.w    #20046,(A0)
                    2883   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001C16  2202      2884          move.l    D2,D1
00001C18  E589      2885          lsl.l     #2,D1
00001C1A  2F33 1800 2886          move.l    0(A3,D1.L),-(A7)
00001C1E  2F02      2887          move.l    D2,-(A7)
00001C20  4879 0000 2888          pea       @m68kde~1_63.L
00001C24  48C0      
00001C26  4E92      2889          jsr       (A2)
00001C28  DEFC 000C 2890          add.w     #12,A7
                    2891   BreakPointDisplay_11:
00001C2C  5282      2892          addq.l    #1,D2
00001C2E  609E      2893          bra       BreakPointDisplay_8
                    2894   BreakPointDisplay_10:
                    2895   ; }
                    2896   ; }
                    2897   ; printf("\r\n") ;
00001C30  4879 0000 2898          pea       @m68kde~1_1.L
00001C34  42FA      
00001C36  4E92      2899          jsr       (A2)
00001C38  584F      2900          addq.w    #4,A7
00001C3A  4CDF 0C0C 2901          movem.l   (A7)+,D2/D3/A2/A3
00001C3E  4E75      2902          rts
                    2903   ; }
                    2904   ; void WatchPointDisplay(void)
                    2905   ; {
                    2906   _WatchPointDisplay:
00001C40  48E7 3020 2907          movem.l   D2/D3/A2,-(A7)
00001C44  45F9 0000 2908          lea       _printf.L,A2
00001C48  3924      
                    2909   ; int i ;
                    2910   ; int WatchPointsSet = 0 ;
00001C4A  4283      2911          clr.l     D3
                    2912   ; // any watchpoints set
                    2913   ; for(i = 0; i < 8; i++)  {
00001C4C  4282      2914          clr.l     D2
                    2915   WatchPointDisplay_1:
00001C4E  0C82 0000 2916          cmp.l     #8,D2
00001C52  0008      
00001C54  6C1C      2917          bge.s     WatchPointDisplay_3
                    2918   ; if(WatchPointSetOrCleared[i] == 1)
00001C56  2002      2919          move.l    D2,D0
00001C58  E588      2920          lsl.l     #2,D0
00001C5A  41F9 0B00 2921          lea       _WatchPointSetOrCleared.L,A0
00001C5E  01A2      
00001C60  2030 0800 2922          move.l    0(A0,D0.L),D0
00001C64  0C80 0000 2923          cmp.l     #1,D0
00001C68  0001      
00001C6A  6602      2924          bne.s     WatchPointDisplay_4
                    2925   ; WatchPointsSet = 1;
00001C6C  7601      2926          moveq     #1,D3
                    2927   WatchPointDisplay_4:
00001C6E  5282      2928          addq.l    #1,D2
00001C70  60DC      2929          bra       WatchPointDisplay_1
                    2930   WatchPointDisplay_3:
                    2931   ; }
                    2932   ; if(WatchPointsSet == 1) {
00001C72  0C83 0000 2933          cmp.l     #1,D3
00001C76  0001      
00001C78  6616      2934          bne.s     WatchPointDisplay_6
                    2935   ; printf("\r\nNum     Address") ;
00001C7A  4879 0000 2936          pea       @m68kde~1_64.L
00001C7E  48D0      
00001C80  4E92      2937          jsr       (A2)
00001C82  584F      2938          addq.w    #4,A7
                    2939   ; printf("\r\n---     ---------") ;
00001C84  4879 0000 2940          pea       @m68kde~1_65.L
00001C88  48E2      
00001C8A  4E92      2941          jsr       (A2)
00001C8C  584F      2942          addq.w    #4,A7
00001C8E  600A      2943          bra.s     WatchPointDisplay_7
                    2944   WatchPointDisplay_6:
                    2945   ; }
                    2946   ; else
                    2947   ; printf("\r\nNo WatchPoints Set") ;
00001C90  4879 0000 2948          pea       @m68kde~1_66.L
00001C94  48F6      
00001C96  4E92      2949          jsr       (A2)
00001C98  584F      2950          addq.w    #4,A7
                    2951   WatchPointDisplay_7:
                    2952   ; for(i = 0; i < 8; i++)  {
00001C9A  4282      2953          clr.l     D2
                    2954   WatchPointDisplay_8:
00001C9C  0C82 0000 2955          cmp.l     #8,D2
00001CA0  0008      
00001CA2  6C00 0038 2956          bge       WatchPointDisplay_10
                    2957   ; if(WatchPointSetOrCleared[i] == 1)
00001CA6  2002      2958          move.l    D2,D0
00001CA8  E588      2959          lsl.l     #2,D0
00001CAA  41F9 0B00 2960          lea       _WatchPointSetOrCleared.L,A0
00001CAE  01A2      
00001CB0  2030 0800 2961          move.l    0(A0,D0.L),D0
00001CB4  0C80 0000 2962          cmp.l     #1,D0
00001CB8  0001      
00001CBA  661C      2963          bne.s     WatchPointDisplay_11
                    2964   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CBC  2202      2965          move.l    D2,D1
00001CBE  E589      2966          lsl.l     #2,D1
00001CC0  41F9 0B00 2967          lea       _WatchPointAddress.L,A0
00001CC4  0182      
00001CC6  2F30 1800 2968          move.l    0(A0,D1.L),-(A7)
00001CCA  2F02      2969          move.l    D2,-(A7)
00001CCC  4879 0000 2970          pea       @m68kde~1_63.L
00001CD0  48C0      
00001CD2  4E92      2971          jsr       (A2)
00001CD4  DEFC 000C 2972          add.w     #12,A7
                    2973   WatchPointDisplay_11:
00001CD8  5282      2974          addq.l    #1,D2
00001CDA  60C0      2975          bra       WatchPointDisplay_8
                    2976   WatchPointDisplay_10:
                    2977   ; }
                    2978   ; printf("\r\n") ;
00001CDC  4879 0000 2979          pea       @m68kde~1_1.L
00001CE0  42FA      
00001CE2  4E92      2980          jsr       (A2)
00001CE4  584F      2981          addq.w    #4,A7
00001CE6  4CDF 040C 2982          movem.l   (A7)+,D2/D3/A2
00001CEA  4E75      2983          rts
                    2984   ; }
                    2985   ; void BreakPointClear(void)
                    2986   ; {
                    2987   _BreakPointClear:
00001CEC  4E56 FFFC 2988          link      A6,#-4
00001CF0  48E7 2020 2989          movem.l   D2/A2,-(A7)
00001CF4  45F9 0000 2990          lea       _printf.L,A2
00001CF8  3924      
                    2991   ; unsigned int i ;
                    2992   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2993   ; BreakPointDisplay() ;
00001CFA  4EB8 1B6C 2994          jsr       _BreakPointDisplay
                    2995   ; printf("\r\nEnter Break Point Number: ") ;
00001CFE  4879 0000 2996          pea       @m68kde~1_67.L
00001D02  490C      
00001D04  4E92      2997          jsr       (A2)
00001D06  584F      2998          addq.w    #4,A7
                    2999   ; i = xtod(_getch()) ;           // get break pointer number
00001D08  2F00      3000          move.l    D0,-(A7)
00001D0A  4EB8 0B68 3001          jsr       __getch
00001D0E  2200      3002          move.l    D0,D1
00001D10  201F      3003          move.l    (A7)+,D0
00001D12  2F01      3004          move.l    D1,-(A7)
00001D14  4EB8 0BD2 3005          jsr       _xtod
00001D18  584F      3006          addq.w    #4,A7
00001D1A  C0BC 0000 3007          and.l     #255,D0
00001D1E  00FF      
00001D20  2400      3008          move.l    D0,D2
                    3009   ; if((i < 0) || (i > 7))   {
00001D22  0C82 0000 3010          cmp.l     #0,D2
00001D26  0000      
00001D28  6508      3011          blo.s     BreakPointClear_3
00001D2A  0C82 0000 3012          cmp.l     #7,D2
00001D2E  0007      
00001D30  630E      3013          bls.s     BreakPointClear_1
                    3014   BreakPointClear_3:
                    3015   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D32  4879 0000 3016          pea       @m68kde~1_68.L
00001D36  492A      
00001D38  4E92      3017          jsr       (A2)
00001D3A  584F      3018          addq.w    #4,A7
                    3019   ; return ;
00001D3C  6000 0080 3020          bra       BreakPointClear_4
                    3021   BreakPointClear_1:
                    3022   ; }
                    3023   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D40  2002      3024          move.l    D2,D0
00001D42  E588      3025          lsl.l     #2,D0
00001D44  41F9 0B00 3026          lea       _BreakPointSetOrCleared.L,A0
00001D48  015E      
00001D4A  2030 0800 3027          move.l    0(A0,D0.L),D0
00001D4E  0C80 0000 3028          cmp.l     #1,D0
00001D52  0001      
00001D54  6600 005A 3029          bne       BreakPointClear_5
                    3030   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D58  2002      3031          move.l    D2,D0
00001D5A  E588      3032          lsl.l     #2,D0
00001D5C  41F9 0B00 3033          lea       _BreakPointAddress.L,A0
00001D60  012E      
00001D62  2D70 0800 3034          move.l    0(A0,D0.L),-4(A6)
00001D66  FFFC      
                    3035   ; BreakPointAddress[i] = 0 ;
00001D68  2002      3036          move.l    D2,D0
00001D6A  E588      3037          lsl.l     #2,D0
00001D6C  41F9 0B00 3038          lea       _BreakPointAddress.L,A0
00001D70  012E      
00001D72  42B0 0800 3039          clr.l     0(A0,D0.L)
                    3040   ; BreakPointSetOrCleared[i] = 0 ;
00001D76  2002      3041          move.l    D2,D0
00001D78  E588      3042          lsl.l     #2,D0
00001D7A  41F9 0B00 3043          lea       _BreakPointSetOrCleared.L,A0
00001D7E  015E      
00001D80  42B0 0800 3044          clr.l     0(A0,D0.L)
                    3045   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D84  2002      3046          move.l    D2,D0
00001D86  E388      3047          lsl.l     #1,D0
00001D88  41F9 0B00 3048          lea       _BreakPointInstruction.L,A0
00001D8C  014E      
00001D8E  226E FFFC 3049          move.l    -4(A6),A1
00001D92  32B0 0800 3050          move.w    0(A0,D0.L),(A1)
                    3051   ; BreakPointInstruction[i] = 0 ;
00001D96  2002      3052          move.l    D2,D0
00001D98  E388      3053          lsl.l     #1,D0
00001D9A  41F9 0B00 3054          lea       _BreakPointInstruction.L,A0
00001D9E  014E      
00001DA0  4270 0800 3055          clr.w     0(A0,D0.L)
                    3056   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001DA4  4879 0000 3057          pea       @m68kde~1_69.L
00001DA8  4946      
00001DAA  4E92      3058          jsr       (A2)
00001DAC  584F      3059          addq.w    #4,A7
00001DAE  600A      3060          bra.s     BreakPointClear_6
                    3061   BreakPointClear_5:
                    3062   ; }
                    3063   ; else
                    3064   ; printf("\r\nBreak Point wasn't Set.....") ;
00001DB0  4879 0000 3065          pea       @m68kde~1_70.L
00001DB4  4964      
00001DB6  4E92      3066          jsr       (A2)
00001DB8  584F      3067          addq.w    #4,A7
                    3068   BreakPointClear_6:
                    3069   ; BreakPointDisplay() ;
00001DBA  4EB8 1B6C 3070          jsr       _BreakPointDisplay
                    3071   ; return ;
                    3072   BreakPointClear_4:
00001DBE  4CDF 0404 3073          movem.l   (A7)+,D2/A2
00001DC2  4E5E      3074          unlk      A6
00001DC4  4E75      3075          rts
                    3076   ; }
                    3077   ; void WatchPointClear(void)
                    3078   ; {
                    3079   _WatchPointClear:
00001DC6  48E7 2020 3080          movem.l   D2/A2,-(A7)
00001DCA  45F9 0000 3081          lea       _printf.L,A2
00001DCE  3924      
                    3082   ; unsigned int i ;
                    3083   ; WatchPointDisplay() ;
00001DD0  4EB8 1C40 3084          jsr       _WatchPointDisplay
                    3085   ; printf("\r\nEnter Watch Point Number: ") ;
00001DD4  4879 0000 3086          pea       @m68kde~1_71.L
00001DD8  4982      
00001DDA  4E92      3087          jsr       (A2)
00001DDC  584F      3088          addq.w    #4,A7
                    3089   ; i = xtod(_getch()) ;           // get watch pointer number
00001DDE  2F00      3090          move.l    D0,-(A7)
00001DE0  4EB8 0B68 3091          jsr       __getch
00001DE4  2200      3092          move.l    D0,D1
00001DE6  201F      3093          move.l    (A7)+,D0
00001DE8  2F01      3094          move.l    D1,-(A7)
00001DEA  4EB8 0BD2 3095          jsr       _xtod
00001DEE  584F      3096          addq.w    #4,A7
00001DF0  C0BC 0000 3097          and.l     #255,D0
00001DF4  00FF      
00001DF6  2400      3098          move.l    D0,D2
                    3099   ; if((i < 0) || (i > 7))   {
00001DF8  0C82 0000 3100          cmp.l     #0,D2
00001DFC  0000      
00001DFE  6508      3101          blo.s     WatchPointClear_3
00001E00  0C82 0000 3102          cmp.l     #7,D2
00001E04  0007      
00001E06  630E      3103          bls.s     WatchPointClear_1
                    3104   WatchPointClear_3:
                    3105   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001E08  4879 0000 3106          pea       @m68kde~1_68.L
00001E0C  492A      
00001E0E  4E92      3107          jsr       (A2)
00001E10  584F      3108          addq.w    #4,A7
                    3109   ; return ;
00001E12  6000 004E 3110          bra       WatchPointClear_4
                    3111   WatchPointClear_1:
                    3112   ; }
                    3113   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E16  2002      3114          move.l    D2,D0
00001E18  E588      3115          lsl.l     #2,D0
00001E1A  41F9 0B00 3116          lea       _WatchPointSetOrCleared.L,A0
00001E1E  01A2      
00001E20  2030 0800 3117          move.l    0(A0,D0.L),D0
00001E24  0C80 0000 3118          cmp.l     #1,D0
00001E28  0001      
00001E2A  6628      3119          bne.s     WatchPointClear_5
                    3120   ; WatchPointAddress[i] = 0 ;
00001E2C  2002      3121          move.l    D2,D0
00001E2E  E588      3122          lsl.l     #2,D0
00001E30  41F9 0B00 3123          lea       _WatchPointAddress.L,A0
00001E34  0182      
00001E36  42B0 0800 3124          clr.l     0(A0,D0.L)
                    3125   ; WatchPointSetOrCleared[i] = 0 ;
00001E3A  2002      3126          move.l    D2,D0
00001E3C  E588      3127          lsl.l     #2,D0
00001E3E  41F9 0B00 3128          lea       _WatchPointSetOrCleared.L,A0
00001E42  01A2      
00001E44  42B0 0800 3129          clr.l     0(A0,D0.L)
                    3130   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E48  4879 0000 3131          pea       @m68kde~1_72.L
00001E4C  49A0      
00001E4E  4E92      3132          jsr       (A2)
00001E50  584F      3133          addq.w    #4,A7
00001E52  600A      3134          bra.s     WatchPointClear_6
                    3135   WatchPointClear_5:
                    3136   ; }
                    3137   ; else
                    3138   ; printf("\r\nWatch Point Was not Set.....") ;
00001E54  4879 0000 3139          pea       @m68kde~1_73.L
00001E58  49BE      
00001E5A  4E92      3140          jsr       (A2)
00001E5C  584F      3141          addq.w    #4,A7
                    3142   WatchPointClear_6:
                    3143   ; WatchPointDisplay() ;
00001E5E  4EB8 1C40 3144          jsr       _WatchPointDisplay
                    3145   ; return ;
                    3146   WatchPointClear_4:
00001E62  4CDF 0404 3147          movem.l   (A7)+,D2/A2
00001E66  4E75      3148          rts
                    3149   ; }
                    3150   ; void DisableBreakPoints(void)
                    3151   ; {
                    3152   _DisableBreakPoints:
00001E68  4E56 FFFC 3153          link      A6,#-4
00001E6C  2F02      3154          move.l    D2,-(A7)
                    3155   ; int i ;
                    3156   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3157   ; for(i = 0; i < 8; i++)  {
00001E6E  4282      3158          clr.l     D2
                    3159   DisableBreakPoints_1:
00001E70  0C82 0000 3160          cmp.l     #8,D2
00001E74  0008      
00001E76  6C00 003E 3161          bge       DisableBreakPoints_3
                    3162   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E7A  2002      3163          move.l    D2,D0
00001E7C  E588      3164          lsl.l     #2,D0
00001E7E  41F9 0B00 3165          lea       _BreakPointSetOrCleared.L,A0
00001E82  015E      
00001E84  2030 0800 3166          move.l    0(A0,D0.L),D0
00001E88  0C80 0000 3167          cmp.l     #1,D0
00001E8C  0001      
00001E8E  6622      3168          bne.s     DisableBreakPoints_4
                    3169   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E90  2002      3170          move.l    D2,D0
00001E92  E588      3171          lsl.l     #2,D0
00001E94  41F9 0B00 3172          lea       _BreakPointAddress.L,A0
00001E98  012E      
00001E9A  2D70 0800 3173          move.l    0(A0,D0.L),-4(A6)
00001E9E  FFFC      
                    3174   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001EA0  2002      3175          move.l    D2,D0
00001EA2  E388      3176          lsl.l     #1,D0
00001EA4  41F9 0B00 3177          lea       _BreakPointInstruction.L,A0
00001EA8  014E      
00001EAA  226E FFFC 3178          move.l    -4(A6),A1
00001EAE  32B0 0800 3179          move.w    0(A0,D0.L),(A1)
                    3180   DisableBreakPoints_4:
00001EB2  5282      3181          addq.l    #1,D2
00001EB4  60BA      3182          bra       DisableBreakPoints_1
                    3183   DisableBreakPoints_3:
00001EB6  241F      3184          move.l    (A7)+,D2
00001EB8  4E5E      3185          unlk      A6
00001EBA  4E75      3186          rts
                    3187   ; }
                    3188   ; }
                    3189   ; }
                    3190   ; void EnableBreakPoints(void)
                    3191   ; {
                    3192   _EnableBreakPoints:
00001EBC  4E56 FFFC 3193          link      A6,#-4
00001EC0  2F02      3194          move.l    D2,-(A7)
                    3195   ; int i ;
                    3196   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3197   ; for(i = 0; i < 8; i++)  {
00001EC2  4282      3198          clr.l     D2
                    3199   EnableBreakPoints_1:
00001EC4  0C82 0000 3200          cmp.l     #8,D2
00001EC8  0008      
00001ECA  6C32      3201          bge.s     EnableBreakPoints_3
                    3202   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001ECC  2002      3203          move.l    D2,D0
00001ECE  E588      3204          lsl.l     #2,D0
00001ED0  41F9 0B00 3205          lea       _BreakPointSetOrCleared.L,A0
00001ED4  015E      
00001ED6  2030 0800 3206          move.l    0(A0,D0.L),D0
00001EDA  0C80 0000 3207          cmp.l     #1,D0
00001EDE  0001      
00001EE0  6618      3208          bne.s     EnableBreakPoints_4
                    3209   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001EE2  2002      3210          move.l    D2,D0
00001EE4  E588      3211          lsl.l     #2,D0
00001EE6  41F9 0B00 3212          lea       _BreakPointAddress.L,A0
00001EEA  012E      
00001EEC  2D70 0800 3213          move.l    0(A0,D0.L),-4(A6)
00001EF0  FFFC      
                    3214   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EF2  206E FFFC 3215          move.l    -4(A6),A0
00001EF6  30BC 4E4E 3216          move.w    #20046,(A0)
                    3217   EnableBreakPoints_4:
00001EFA  5282      3218          addq.l    #1,D2
00001EFC  60C6      3219          bra       EnableBreakPoints_1
                    3220   EnableBreakPoints_3:
00001EFE  241F      3221          move.l    (A7)+,D2
00001F00  4E5E      3222          unlk      A6
00001F02  4E75      3223          rts
                    3224   ; }
                    3225   ; }
                    3226   ; }
                    3227   ; void KillAllBreakPoints(void)
                    3228   ; {
                    3229   _KillAllBreakPoints:
00001F04  4E56 FFFC 3230          link      A6,#-4
00001F08  2F02      3231          move.l    D2,-(A7)
                    3232   ; int i ;
                    3233   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3234   ; for(i = 0; i < 8; i++)  {
00001F0A  4282      3235          clr.l     D2
                    3236   KillAllBreakPoints_1:
00001F0C  0C82 0000 3237          cmp.l     #8,D2
00001F10  0008      
00001F12  6C00 0052 3238          bge       KillAllBreakPoints_3
                    3239   ; // clear BP
                    3240   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F16  2002      3241          move.l    D2,D0
00001F18  E588      3242          lsl.l     #2,D0
00001F1A  41F9 0B00 3243          lea       _BreakPointAddress.L,A0
00001F1E  012E      
00001F20  2D70 0800 3244          move.l    0(A0,D0.L),-4(A6)
00001F24  FFFC      
                    3245   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F26  2002      3246          move.l    D2,D0
00001F28  E388      3247          lsl.l     #1,D0
00001F2A  41F9 0B00 3248          lea       _BreakPointInstruction.L,A0
00001F2E  014E      
00001F30  226E FFFC 3249          move.l    -4(A6),A1
00001F34  32B0 0800 3250          move.w    0(A0,D0.L),(A1)
                    3251   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F38  2002      3252          move.l    D2,D0
00001F3A  E588      3253          lsl.l     #2,D0
00001F3C  41F9 0B00 3254          lea       _BreakPointAddress.L,A0
00001F40  012E      
00001F42  42B0 0800 3255          clr.l     0(A0,D0.L)
                    3256   ; BreakPointInstruction[i] = 0 ;
00001F46  2002      3257          move.l    D2,D0
00001F48  E388      3258          lsl.l     #1,D0
00001F4A  41F9 0B00 3259          lea       _BreakPointInstruction.L,A0
00001F4E  014E      
00001F50  4270 0800 3260          clr.w     0(A0,D0.L)
                    3261   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F54  2002      3262          move.l    D2,D0
00001F56  E588      3263          lsl.l     #2,D0
00001F58  41F9 0B00 3264          lea       _BreakPointSetOrCleared.L,A0
00001F5C  015E      
00001F5E  42B0 0800 3265          clr.l     0(A0,D0.L)
00001F62  5282      3266          addq.l    #1,D2
00001F64  60A6      3267          bra       KillAllBreakPoints_1
                    3268   KillAllBreakPoints_3:
00001F66  241F      3269          move.l    (A7)+,D2
00001F68  4E5E      3270          unlk      A6
00001F6A  4E75      3271          rts
                    3272   ; }
                    3273   ; //BreakPointDisplay() ;       // display the break points
                    3274   ; }
                    3275   ; void KillAllWatchPoints(void)
                    3276   ; {
                    3277   _KillAllWatchPoints:
00001F6C  2F02      3278          move.l    D2,-(A7)
                    3279   ; int i ;
                    3280   ; for(i = 0; i < 8; i++)  {
00001F6E  4282      3281          clr.l     D2
                    3282   KillAllWatchPoints_1:
00001F70  0C82 0000 3283          cmp.l     #8,D2
00001F74  0008      
00001F76  6C20      3284          bge.s     KillAllWatchPoints_3
                    3285   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F78  2002      3286          move.l    D2,D0
00001F7A  E588      3287          lsl.l     #2,D0
00001F7C  41F9 0B00 3288          lea       _WatchPointAddress.L,A0
00001F80  0182      
00001F82  42B0 0800 3289          clr.l     0(A0,D0.L)
                    3290   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F86  2002      3291          move.l    D2,D0
00001F88  E588      3292          lsl.l     #2,D0
00001F8A  41F9 0B00 3293          lea       _WatchPointSetOrCleared.L,A0
00001F8E  01A2      
00001F90  42B0 0800 3294          clr.l     0(A0,D0.L)
00001F94  5282      3295          addq.l    #1,D2
00001F96  60D8      3296          bra       KillAllWatchPoints_1
                    3297   KillAllWatchPoints_3:
00001F98  241F      3298          move.l    (A7)+,D2
00001F9A  4E75      3299          rts
                    3300   ; }
                    3301   ; //WatchPointDisplay() ;       // display the break points
                    3302   ; }
                    3303   ; void SetBreakPoint(void)
                    3304   ; {
                    3305   _SetBreakPoint:
00001F9C  4E56 FFFC 3306          link      A6,#-4
00001FA0  48E7 3830 3307          movem.l   D2/D3/D4/A2/A3,-(A7)
00001FA4  45F9 0000 3308          lea       _printf.L,A2
00001FA8  3924      
00001FAA  47F9 0B00 3309          lea       _BreakPointSetOrCleared.L,A3
00001FAE  015E      
                    3310   ; int i ;
                    3311   ; int BPNumber;
                    3312   ; int BPAddress;
                    3313   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3314   ; // see if any free break points
                    3315   ; for(i = 0; i < 8; i ++) {
00001FB0  4282      3316          clr.l     D2
                    3317   SetBreakPoint_1:
00001FB2  0C82 0000 3318          cmp.l     #8,D2
00001FB6  0008      
00001FB8  6C10      3319          bge.s     SetBreakPoint_3
                    3320   ; if( BreakPointSetOrCleared[i] == 0)
00001FBA  2002      3321          move.l    D2,D0
00001FBC  E588      3322          lsl.l     #2,D0
00001FBE  2033 0800 3323          move.l    0(A3,D0.L),D0
00001FC2  6602      3324          bne.s     SetBreakPoint_4
                    3325   ; break ;         // if spare BP found allow user to set it
00001FC4  6004      3326          bra.s     SetBreakPoint_3
                    3327   SetBreakPoint_4:
00001FC6  5282      3328          addq.l    #1,D2
00001FC8  60E8      3329          bra       SetBreakPoint_1
                    3330   SetBreakPoint_3:
                    3331   ; }
                    3332   ; if(i == 8) {
00001FCA  0C82 0000 3333          cmp.l     #8,D2
00001FCE  0008      
00001FD0  660E      3334          bne.s     SetBreakPoint_6
                    3335   ; printf("\r\nNo FREE Break Points.....") ;
00001FD2  4879 0000 3336          pea       @m68kde~1_74.L
00001FD6  49DE      
00001FD8  4E92      3337          jsr       (A2)
00001FDA  584F      3338          addq.w    #4,A7
                    3339   ; return ;
00001FDC  6000 00D6 3340          bra       SetBreakPoint_15
                    3341   SetBreakPoint_6:
                    3342   ; }
                    3343   ; printf("\r\nBreak Point Address: ") ;
00001FE0  4879 0000 3344          pea       @m68kde~1_75.L
00001FE4  49FA      
00001FE6  4E92      3345          jsr       (A2)
00001FE8  584F      3346          addq.w    #4,A7
                    3347   ; BPAddress = Get8HexDigits(0) ;
00001FEA  42A7      3348          clr.l     -(A7)
00001FEC  4EB8 0CA4 3349          jsr       _Get8HexDigits
00001FF0  584F      3350          addq.w    #4,A7
00001FF2  2600      3351          move.l    D0,D3
                    3352   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FF4  2803      3353          move.l    D3,D4
                    3354   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FF6  2003      3355          move.l    D3,D0
00001FF8  C0BC 0000 3356          and.l     #1,D0
00001FFC  0001      
00001FFE  0C80 0000 3357          cmp.l     #1,D0
00002002  0001      
00002004  660E      3358          bne.s     SetBreakPoint_9
                    3359   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002006  4879 0000 3360          pea       @m68kde~1_76.L
0000200A  4A12      
0000200C  4E92      3361          jsr       (A2)
0000200E  584F      3362          addq.w    #4,A7
                    3363   ; return ;
00002010  6000 00A2 3364          bra       SetBreakPoint_15
                    3365   SetBreakPoint_9:
                    3366   ; }
                    3367   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002014  0C83 0000 3368          cmp.l     #32768,D3
00002018  8000      
0000201A  640E      3369          bhs.s     SetBreakPoint_11
                    3370   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000201C  4879 0000 3371          pea       @m68kde~1_77.L
00002020  4A48      
00002022  4E92      3372          jsr       (A2)
00002024  584F      3373          addq.w    #4,A7
                    3374   ; return ;
00002026  6000 008C 3375          bra       SetBreakPoint_15
                    3376   SetBreakPoint_11:
                    3377   ; }
                    3378   ; // search for first free bp or existing same BP
                    3379   ; for(i = 0; i < 8; i++)  {
0000202A  4282      3380          clr.l     D2
                    3381   SetBreakPoint_13:
0000202C  0C82 0000 3382          cmp.l     #8,D2
00002030  0008      
00002032  6C00 0080 3383          bge       SetBreakPoint_15
                    3384   ; if(BreakPointAddress[i] == BPAddress)   {
00002036  2002      3385          move.l    D2,D0
00002038  E588      3386          lsl.l     #2,D0
0000203A  41F9 0B00 3387          lea       _BreakPointAddress.L,A0
0000203E  012E      
00002040  B6B0 0800 3388          cmp.l     0(A0,D0.L),D3
00002044  6610      3389          bne.s     SetBreakPoint_16
                    3390   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002046  2F03      3391          move.l    D3,-(A7)
00002048  4879 0000 3392          pea       @m68kde~1_78.L
0000204C  4A90      
0000204E  4E92      3393          jsr       (A2)
00002050  504F      3394          addq.w    #8,A7
                    3395   ; return ;
00002052  6000 0060 3396          bra       SetBreakPoint_15
                    3397   SetBreakPoint_16:
                    3398   ; }
                    3399   ; if(BreakPointSetOrCleared[i] == 0) {
00002056  2002      3400          move.l    D2,D0
00002058  E588      3401          lsl.l     #2,D0
0000205A  2033 0800 3402          move.l    0(A3,D0.L),D0
0000205E  6600 004E 3403          bne       SetBreakPoint_18
                    3404   ; // set BP here
                    3405   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002062  2002      3406          move.l    D2,D0
00002064  E588      3407          lsl.l     #2,D0
00002066  27BC 0000 3408          move.l    #1,0(A3,D0.L)
0000206A  0001 0800 
                    3409   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
0000206E  2044      3410          move.l    D4,A0
00002070  2002      3411          move.l    D2,D0
00002072  E388      3412          lsl.l     #1,D0
00002074  43F9 0B00 3413          lea       _BreakPointInstruction.L,A1
00002078  014E      
0000207A  3390 0800 3414          move.w    (A0),0(A1,D0.L)
                    3415   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
0000207E  2F04      3416          move.l    D4,-(A7)
00002080  4879 0000 3417          pea       @m68kde~1_79.L
00002084  4AC8      
00002086  4E92      3418          jsr       (A2)
00002088  504F      3419          addq.w    #8,A7
                    3420   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000208A  2044      3421          move.l    D4,A0
0000208C  30BC 4E4E 3422          move.w    #20046,(A0)
                    3423   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002090  2002      3424          move.l    D2,D0
00002092  E588      3425          lsl.l     #2,D0
00002094  41F9 0B00 3426          lea       _BreakPointAddress.L,A0
00002098  012E      
0000209A  2183 0800 3427          move.l    D3,0(A0,D0.L)
                    3428   ; printf("\r\n") ;
0000209E  4879 0000 3429          pea       @m68kde~1_1.L
000020A2  42FA      
000020A4  4E92      3430          jsr       (A2)
000020A6  584F      3431          addq.w    #4,A7
                    3432   ; BreakPointDisplay() ;       // display the break points
000020A8  4EB8 1B6C 3433          jsr       _BreakPointDisplay
                    3434   ; return ;
000020AC  6006      3435          bra.s     SetBreakPoint_15
                    3436   SetBreakPoint_18:
000020AE  5282      3437          addq.l    #1,D2
000020B0  6000 FF7A 3438          bra       SetBreakPoint_13
                    3439   SetBreakPoint_15:
000020B4  4CDF 0C1C 3440          movem.l   (A7)+,D2/D3/D4/A2/A3
000020B8  4E5E      3441          unlk      A6
000020BA  4E75      3442          rts
                    3443   ; }
                    3444   ; }
                    3445   ; }
                    3446   ; void SetWatchPoint(void)
                    3447   ; {
                    3448   _SetWatchPoint:
000020BC  4E56 FFF8 3449          link      A6,#-8
000020C0  48E7 3030 3450          movem.l   D2/D3/A2/A3,-(A7)
000020C4  45F9 0000 3451          lea       _printf.L,A2
000020C8  3924      
000020CA  47F9 0B00 3452          lea       _WatchPointSetOrCleared.L,A3
000020CE  01A2      
                    3453   ; int i ;
                    3454   ; int WPNumber;
                    3455   ; int WPAddress;
                    3456   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3457   ; // see if any free break points
                    3458   ; for(i = 0; i < 8; i ++) {
000020D0  4282      3459          clr.l     D2
                    3460   SetWatchPoint_1:
000020D2  0C82 0000 3461          cmp.l     #8,D2
000020D6  0008      
000020D8  6C10      3462          bge.s     SetWatchPoint_3
                    3463   ; if( WatchPointSetOrCleared[i] == 0)
000020DA  2002      3464          move.l    D2,D0
000020DC  E588      3465          lsl.l     #2,D0
000020DE  2033 0800 3466          move.l    0(A3,D0.L),D0
000020E2  6602      3467          bne.s     SetWatchPoint_4
                    3468   ; break ;         // if spare WP found allow user to set it
000020E4  6004      3469          bra.s     SetWatchPoint_3
                    3470   SetWatchPoint_4:
000020E6  5282      3471          addq.l    #1,D2
000020E8  60E8      3472          bra       SetWatchPoint_1
                    3473   SetWatchPoint_3:
                    3474   ; }
                    3475   ; if(i == 8) {
000020EA  0C82 0000 3476          cmp.l     #8,D2
000020EE  0008      
000020F0  660E      3477          bne.s     SetWatchPoint_6
                    3478   ; printf("\r\nNo FREE Watch Points.....") ;
000020F2  4879 0000 3479          pea       @m68kde~1_80.L
000020F6  4AEE      
000020F8  4E92      3480          jsr       (A2)
000020FA  584F      3481          addq.w    #4,A7
                    3482   ; return ;
000020FC  6000 008C 3483          bra       SetWatchPoint_11
                    3484   SetWatchPoint_6:
                    3485   ; }
                    3486   ; printf("\r\nWatch Point Address: ") ;
00002100  4879 0000 3487          pea       @m68kde~1_81.L
00002104  4B0A      
00002106  4E92      3488          jsr       (A2)
00002108  584F      3489          addq.w    #4,A7
                    3490   ; WPAddress = Get8HexDigits(0) ;
0000210A  42A7      3491          clr.l     -(A7)
0000210C  4EB8 0CA4 3492          jsr       _Get8HexDigits
00002110  584F      3493          addq.w    #4,A7
00002112  2600      3494          move.l    D0,D3
                    3495   ; // search for first free wp or existing same wp
                    3496   ; for(i = 0; i < 8; i++)  {
00002114  4282      3497          clr.l     D2
                    3498   SetWatchPoint_9:
00002116  0C82 0000 3499          cmp.l     #8,D2
0000211A  0008      
0000211C  6C00 006C 3500          bge       SetWatchPoint_11
                    3501   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002120  2002      3502          move.l    D2,D0
00002122  E588      3503          lsl.l     #2,D0
00002124  41F9 0B00 3504          lea       _WatchPointAddress.L,A0
00002128  0182      
0000212A  B6B0 0800 3505          cmp.l     0(A0,D0.L),D3
0000212E  6614      3506          bne.s     SetWatchPoint_12
00002130  4A83      3507          tst.l     D3
00002132  6710      3508          beq.s     SetWatchPoint_12
                    3509   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002134  2F03      3510          move.l    D3,-(A7)
00002136  4879 0000 3511          pea       @m68kde~1_82.L
0000213A  4B22      
0000213C  4E92      3512          jsr       (A2)
0000213E  504F      3513          addq.w    #8,A7
                    3514   ; return ;
00002140  6000 0048 3515          bra       SetWatchPoint_11
                    3516   SetWatchPoint_12:
                    3517   ; }
                    3518   ; if(WatchPointSetOrCleared[i] == 0) {
00002144  2002      3519          move.l    D2,D0
00002146  E588      3520          lsl.l     #2,D0
00002148  2033 0800 3521          move.l    0(A3,D0.L),D0
0000214C  6600 0038 3522          bne       SetWatchPoint_14
                    3523   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002150  2002      3524          move.l    D2,D0
00002152  E588      3525          lsl.l     #2,D0
00002154  27BC 0000 3526          move.l    #1,0(A3,D0.L)
00002158  0001 0800 
                    3527   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000215C  2F03      3528          move.l    D3,-(A7)
0000215E  4879 0000 3529          pea       @m68kde~1_83.L
00002162  4B58      
00002164  4E92      3530          jsr       (A2)
00002166  504F      3531          addq.w    #8,A7
                    3532   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002168  2002      3533          move.l    D2,D0
0000216A  E588      3534          lsl.l     #2,D0
0000216C  41F9 0B00 3535          lea       _WatchPointAddress.L,A0
00002170  0182      
00002172  2183 0800 3536          move.l    D3,0(A0,D0.L)
                    3537   ; printf("\r\n") ;
00002176  4879 0000 3538          pea       @m68kde~1_1.L
0000217A  42FA      
0000217C  4E92      3539          jsr       (A2)
0000217E  584F      3540          addq.w    #4,A7
                    3541   ; WatchPointDisplay() ;       // display the break points
00002180  4EB8 1C40 3542          jsr       _WatchPointDisplay
                    3543   ; return ;
00002184  6004      3544          bra.s     SetWatchPoint_11
                    3545   SetWatchPoint_14:
00002186  5282      3546          addq.l    #1,D2
00002188  608C      3547          bra       SetWatchPoint_9
                    3548   SetWatchPoint_11:
0000218A  4CDF 0C0C 3549          movem.l   (A7)+,D2/D3/A2/A3
0000218E  4E5E      3550          unlk      A6
00002190  4E75      3551          rts
                    3552   ; }
                    3553   ; }
                    3554   ; }
                    3555   ; void HandleBreakPoint(void)
                    3556   ; {
                    3557   _HandleBreakPoint:
00002192  4E56 FFFC 3558          link      A6,#-4
00002196  48E7 0038 3559          movem.l   A2/A3/A4,-(A7)
0000219A  45F9 0B00 3560          lea       _i.L,A2
0000219E  00C4      
000021A0  47F9 0000 3561          lea       _printf.L,A3
000021A4  3924      
000021A6  49F9 0B00 3562          lea       _PC.L,A4
000021AA  0120      
                    3563   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3564   ; // now we have to put the break point back to run the instruction
                    3565   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3566   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021AC  5594      3567          subq.l    #2,(A4)
                    3568   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021AE  4879 0000 3569          pea       @m68kde~1_84.L
000021B2  4B7E      
000021B4  4E93      3570          jsr       (A3)
000021B6  584F      3571          addq.w    #4,A7
                    3572   ; printf("\r\nSingle Step : [ON]") ;
000021B8  4879 0000 3573          pea       @m68kde~1_85.L
000021BC  4B92      
000021BE  4E93      3574          jsr       (A3)
000021C0  584F      3575          addq.w    #4,A7
                    3576   ; printf("\r\nBreakPoints : [Enabled]") ;
000021C2  4879 0000 3577          pea       @m68kde~1_86.L
000021C6  4BA8      
000021C8  4E93      3578          jsr       (A3)
000021CA  584F      3579          addq.w    #4,A7
                    3580   ; // now clear the break point (put original instruction back)
                    3581   ; ProgramBreakPointAddress = PC ;
000021CC  2D54 FFFC 3582          move.l    (A4),-4(A6)
                    3583   ; for(i = 0; i < 8; i ++) {
000021D0  4292      3584          clr.l     (A2)
                    3585   HandleBreakPoint_1:
000021D2  2012      3586          move.l    (A2),D0
000021D4  0C80 0000 3587          cmp.l     #8,D0
000021D8  0008      
000021DA  6400 0056 3588          bhs       HandleBreakPoint_3
                    3589   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021DE  2012      3590          move.l    (A2),D0
000021E0  E588      3591          lsl.l     #2,D0
000021E2  41F9 0B00 3592          lea       _BreakPointAddress.L,A0
000021E6  012E      
000021E8  2230 0800 3593          move.l    0(A0,D0.L),D1
000021EC  B294      3594          cmp.l     (A4),D1
000021EE  6600 003E 3595          bne       HandleBreakPoint_4
                    3596   ; BreakPointAddress[i] = 0 ;
000021F2  2012      3597          move.l    (A2),D0
000021F4  E588      3598          lsl.l     #2,D0
000021F6  41F9 0B00 3599          lea       _BreakPointAddress.L,A0
000021FA  012E      
000021FC  42B0 0800 3600          clr.l     0(A0,D0.L)
                    3601   ; BreakPointSetOrCleared[i] = 0 ;
00002200  2012      3602          move.l    (A2),D0
00002202  E588      3603          lsl.l     #2,D0
00002204  41F9 0B00 3604          lea       _BreakPointSetOrCleared.L,A0
00002208  015E      
0000220A  42B0 0800 3605          clr.l     0(A0,D0.L)
                    3606   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000220E  2012      3607          move.l    (A2),D0
00002210  E388      3608          lsl.l     #1,D0
00002212  41F9 0B00 3609          lea       _BreakPointInstruction.L,A0
00002216  014E      
00002218  226E FFFC 3610          move.l    -4(A6),A1
0000221C  32B0 0800 3611          move.w    0(A0,D0.L),(A1)
                    3612   ; BreakPointInstruction[i] = 0 ;
00002220  2012      3613          move.l    (A2),D0
00002222  E388      3614          lsl.l     #1,D0
00002224  41F9 0B00 3615          lea       _BreakPointInstruction.L,A0
00002228  014E      
0000222A  4270 0800 3616          clr.w     0(A0,D0.L)
                    3617   HandleBreakPoint_4:
0000222E  5292      3618          addq.l    #1,(A2)
00002230  60A0      3619          bra       HandleBreakPoint_1
                    3620   HandleBreakPoint_3:
                    3621   ; }
                    3622   ; }
                    3623   ; DumpRegisters() ;
00002232  4EB8 13BE 3624          jsr       _DumpRegisters
                    3625   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002236  4879 0000 3626          pea       @m68kde~1_48.L
0000223A  4724      
0000223C  4E93      3627          jsr       (A3)
0000223E  584F      3628          addq.w    #4,A7
                    3629   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002240  4879 0000 3630          pea       @m68kde~1_87.L
00002244  4BC2      
00002246  4E93      3631          jsr       (A3)
00002248  584F      3632          addq.w    #4,A7
                    3633   ; menu() ;
0000224A  4EB9 0000 3634          jsr       _menu
0000224E  2456      
00002250  4CDF 1C00 3635          movem.l   (A7)+,A2/A3/A4
00002254  4E5E      3636          unlk      A6
00002256  4E75      3637          rts
                    3638   ; }
                    3639   ; void UnknownCommand()
                    3640   ; {
                    3641   _UnknownCommand:
                    3642   ; printf("\r\nUnknown Command.....\r\n") ;
00002258  4879 0000 3643          pea       @m68kde~1_88.L
0000225C  4BEA      
0000225E  4EB9 0000 3644          jsr       _printf
00002262  3924      
00002264  584F      3645          addq.w    #4,A7
                    3646   ; Help() ;
00002266  4EB9 0000 3647          jsr       _Help
0000226A  237C      
0000226C  4E75      3648          rts
                    3649   ; }
                    3650   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3651   ; void CallDebugMonitor(void)
                    3652   ; {
                    3653   _CallDebugMonitor:
                    3654   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000226E  4879 0000 3655          pea       @m68kde~1_89.L
00002272  4C04      
00002274  4EB9 0000 3656          jsr       _printf
00002278  3924      
0000227A  584F      3657          addq.w    #4,A7
                    3658   ; menu();
0000227C  4EB9 0000 3659          jsr       _menu
00002280  2456      
00002282  4E75      3660          rts
                    3661   ; }
                    3662   ; void Breakpoint(void)
                    3663   ; {
                    3664   _Breakpoint:
00002284  2F02      3665          move.l    D2,-(A7)
                    3666   ; char c;
                    3667   ; c = toupper(_getch());
00002286  2F00      3668          move.l    D0,-(A7)
00002288  4EB8 0B68 3669          jsr       __getch
0000228C  2200      3670          move.l    D0,D1
0000228E  201F      3671          move.l    (A7)+,D0
00002290  2F01      3672          move.l    D1,-(A7)
00002292  4EB9 0000 3673          jsr       _toupper
00002296  3062      
00002298  584F      3674          addq.w    #4,A7
0000229A  1400      3675          move.b    D0,D2
                    3676   ; if( c == (char)('D'))                                      // BreakPoint Display
0000229C  0C02 0044 3677          cmp.b     #68,D2
000022A0  6608      3678          bne.s     Breakpoint_1
                    3679   ; BreakPointDisplay() ;
000022A2  4EB8 1B6C 3680          jsr       _BreakPointDisplay
000022A6  6000 0054 3681          bra       Breakpoint_10
                    3682   Breakpoint_1:
                    3683   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022AA  0C02 004B 3684          cmp.b     #75,D2
000022AE  6630      3685          bne.s     Breakpoint_3
                    3686   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022B0  4879 0000 3687          pea       @m68kde~1_90.L
000022B4  4C24      
000022B6  4EB9 0000 3688          jsr       _printf
000022BA  3924      
000022BC  584F      3689          addq.w    #4,A7
                    3690   ; c = toupper(_getch());
000022BE  2F00      3691          move.l    D0,-(A7)
000022C0  4EB8 0B68 3692          jsr       __getch
000022C4  2200      3693          move.l    D0,D1
000022C6  201F      3694          move.l    (A7)+,D0
000022C8  2F01      3695          move.l    D1,-(A7)
000022CA  4EB9 0000 3696          jsr       _toupper
000022CE  3062      
000022D0  584F      3697          addq.w    #4,A7
000022D2  1400      3698          move.b    D0,D2
                    3699   ; if(c == (char)('Y'))
000022D4  0C02 0059 3700          cmp.b     #89,D2
000022D8  6604      3701          bne.s     Breakpoint_5
                    3702   ; KillAllBreakPoints() ;
000022DA  4EB8 1F04 3703          jsr       _KillAllBreakPoints
                    3704   Breakpoint_5:
000022DE  601C      3705          bra.s     Breakpoint_10
                    3706   Breakpoint_3:
                    3707   ; }
                    3708   ; else if(c == (char)('S')) {
000022E0  0C02 0053 3709          cmp.b     #83,D2
000022E4  6606      3710          bne.s     Breakpoint_7
                    3711   ; SetBreakPoint() ;
000022E6  4EB8 1F9C 3712          jsr       _SetBreakPoint
000022EA  6010      3713          bra.s     Breakpoint_10
                    3714   Breakpoint_7:
                    3715   ; }
                    3716   ; else if(c == (char)('C')) {
000022EC  0C02 0043 3717          cmp.b     #67,D2
000022F0  6606      3718          bne.s     Breakpoint_9
                    3719   ; BreakPointClear() ;
000022F2  4EB8 1CEC 3720          jsr       _BreakPointClear
000022F6  6004      3721          bra.s     Breakpoint_10
                    3722   Breakpoint_9:
                    3723   ; }
                    3724   ; else
                    3725   ; UnknownCommand() ;
000022F8  4EB8 2258 3726          jsr       _UnknownCommand
                    3727   Breakpoint_10:
000022FC  241F      3728          move.l    (A7)+,D2
000022FE  4E75      3729          rts
                    3730   ; }
                    3731   ; void Watchpoint(void)
                    3732   ; {
                    3733   _Watchpoint:
00002300  2F02      3734          move.l    D2,-(A7)
                    3735   ; char c;
                    3736   ; c = toupper(_getch());
00002302  2F00      3737          move.l    D0,-(A7)
00002304  4EB8 0B68 3738          jsr       __getch
00002308  2200      3739          move.l    D0,D1
0000230A  201F      3740          move.l    (A7)+,D0
0000230C  2F01      3741          move.l    D1,-(A7)
0000230E  4EB9 0000 3742          jsr       _toupper
00002312  3062      
00002314  584F      3743          addq.w    #4,A7
00002316  1400      3744          move.b    D0,D2
                    3745   ; if( c == (char)('D'))                                      // WatchPoint Display
00002318  0C02 0044 3746          cmp.b     #68,D2
0000231C  6608      3747          bne.s     Watchpoint_1
                    3748   ; WatchPointDisplay() ;
0000231E  4EB8 1C40 3749          jsr       _WatchPointDisplay
00002322  6000 0054 3750          bra       Watchpoint_10
                    3751   Watchpoint_1:
                    3752   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002326  0C02 004B 3753          cmp.b     #75,D2
0000232A  6630      3754          bne.s     Watchpoint_3
                    3755   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000232C  4879 0000 3756          pea       @m68kde~1_91.L
00002330  4C46      
00002332  4EB9 0000 3757          jsr       _printf
00002336  3924      
00002338  584F      3758          addq.w    #4,A7
                    3759   ; c = toupper(_getch());
0000233A  2F00      3760          move.l    D0,-(A7)
0000233C  4EB8 0B68 3761          jsr       __getch
00002340  2200      3762          move.l    D0,D1
00002342  201F      3763          move.l    (A7)+,D0
00002344  2F01      3764          move.l    D1,-(A7)
00002346  4EB9 0000 3765          jsr       _toupper
0000234A  3062      
0000234C  584F      3766          addq.w    #4,A7
0000234E  1400      3767          move.b    D0,D2
                    3768   ; if(c == (char)('Y'))
00002350  0C02 0059 3769          cmp.b     #89,D2
00002354  6604      3770          bne.s     Watchpoint_5
                    3771   ; KillAllWatchPoints() ;
00002356  4EB8 1F6C 3772          jsr       _KillAllWatchPoints
                    3773   Watchpoint_5:
0000235A  601C      3774          bra.s     Watchpoint_10
                    3775   Watchpoint_3:
                    3776   ; }
                    3777   ; else if(c == (char)('S')) {
0000235C  0C02 0053 3778          cmp.b     #83,D2
00002360  6606      3779          bne.s     Watchpoint_7
                    3780   ; SetWatchPoint() ;
00002362  4EB8 20BC 3781          jsr       _SetWatchPoint
00002366  6010      3782          bra.s     Watchpoint_10
                    3783   Watchpoint_7:
                    3784   ; }
                    3785   ; else if(c == (char)('C')) {
00002368  0C02 0043 3786          cmp.b     #67,D2
0000236C  6606      3787          bne.s     Watchpoint_9
                    3788   ; WatchPointClear() ;
0000236E  4EB8 1DC6 3789          jsr       _WatchPointClear
00002372  6004      3790          bra.s     Watchpoint_10
                    3791   Watchpoint_9:
                    3792   ; }
                    3793   ; else
                    3794   ; UnknownCommand() ;
00002374  4EB8 2258 3795          jsr       _UnknownCommand
                    3796   Watchpoint_10:
00002378  241F      3797          move.l    (A7)+,D2
0000237A  4E75      3798          rts
                    3799   ; }
                    3800   ; void Help(void)
                    3801   ; {
                    3802   _Help:
0000237C  48E7 2020 3803          movem.l   D2/A2,-(A7)
00002380  45F9 0000 3804          lea       _printf.L,A2
00002384  3924      
                    3805   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002386  41F9 0000 3806          lea       @m68kde~1_92.L,A0
0000238A  4C68      
0000238C  2408      3807          move.l    A0,D2
                    3808   ; printf(banner) ;
0000238E  2F02      3809          move.l    D2,-(A7)
00002390  4E92      3810          jsr       (A2)
00002392  584F      3811          addq.w    #4,A7
                    3812   ; printf("\r\n  Debugger Command Summary") ;
00002394  4879 0000 3813          pea       @m68kde~1_93.L
00002398  4CAC      
0000239A  4E92      3814          jsr       (A2)
0000239C  584F      3815          addq.w    #4,A7
                    3816   ; printf(banner) ;
0000239E  2F02      3817          move.l    D2,-(A7)
000023A0  4E92      3818          jsr       (A2)
000023A2  584F      3819          addq.w    #4,A7
                    3820   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023A4  4879 0000 3821          pea       @m68kde~1_94.L
000023A8  4CCA      
000023AA  4E92      3822          jsr       (A2)
000023AC  584F      3823          addq.w    #4,A7
                    3824   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000023AE  4879 0000 3825          pea       @m68kde~1_95.L
000023B2  4D0E      
000023B4  4E92      3826          jsr       (A2)
000023B6  584F      3827          addq.w    #4,A7
                    3828   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000023B8  4879 0000 3829          pea       @m68kde~1_96.L
000023BC  4D46      
000023BE  4E92      3830          jsr       (A2)
000023C0  584F      3831          addq.w    #4,A7
                    3832   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000023C2  4879 0000 3833          pea       @m68kde~1_97.L
000023C6  4D80      
000023C8  4E92      3834          jsr       (A2)
000023CA  584F      3835          addq.w    #4,A7
                    3836   ; printf("\r\n  E            - Enter String into Memory") ;
000023CC  4879 0000 3837          pea       @m68kde~1_98.L
000023D0  4DB2      
000023D2  4E92      3838          jsr       (A2)
000023D4  584F      3839          addq.w    #4,A7
                    3840   ; printf("\r\n  F            - Fill Memory with Data") ;
000023D6  4879 0000 3841          pea       @m68kde~1_99.L
000023DA  4DDE      
000023DC  4E92      3842          jsr       (A2)
000023DE  584F      3843          addq.w    #4,A7
                    3844   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000023E0  2F39 0B00 3845          move.l    _PC.L,-(A7)
000023E4  0120      
000023E6  4879 0000 3846          pea       @m68kde~1_100.L
000023EA  4E08      
000023EC  4E92      3847          jsr       (A2)
000023EE  504F      3848          addq.w    #8,A7
                    3849   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
000023F0  4879 0000 3850          pea       @m68kde~1_101.L
000023F4  4E42      
000023F6  4E92      3851          jsr       (A2)
000023F8  584F      3852          addq.w    #4,A7
                    3853   ; printf("\r\n  M            - Memory Examine and Change");
000023FA  4879 0000 3854          pea       @m68kde~1_102.L
000023FE  4E7A      
00002400  4E92      3855          jsr       (A2)
00002402  584F      3856          addq.w    #4,A7
                    3857   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002404  4879 0000 3858          pea       @m68kde~1_103.L
00002408  4EA8      
0000240A  4E92      3859          jsr       (A2)
0000240C  584F      3860          addq.w    #4,A7
                    3861   ; printf("\r\n  R            - Display 68000 Registers") ;
0000240E  4879 0000 3862          pea       @m68kde~1_104.L
00002412  4EE2      
00002414  4E92      3863          jsr       (A2)
00002416  584F      3864          addq.w    #4,A7
                    3865   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002418  4879 0000 3866          pea       @m68kde~1_105.L
0000241C  4F0E      
0000241E  4E92      3867          jsr       (A2)
00002420  584F      3868          addq.w    #4,A7
                    3869   ; printf("\r\n  TM           - Test Memory") ;
00002422  4879 0000 3870          pea       @m68kde~1_106.L
00002426  4F40      
00002428  4E92      3871          jsr       (A2)
0000242A  584F      3872          addq.w    #4,A7
                    3873   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000242C  4879 0000 3874          pea       @m68kde~1_107.L
00002430  4F60      
00002432  4E92      3875          jsr       (A2)
00002434  584F      3876          addq.w    #4,A7
                    3877   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002436  4879 0000 3878          pea       @m68kde~1_108.L
0000243A  4F88      
0000243C  4E92      3879          jsr       (A2)
0000243E  584F      3880          addq.w    #4,A7
                    3881   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002440  4879 0000 3882          pea       @m68kde~1_109.L
00002444  4FBE      
00002446  4E92      3883          jsr       (A2)
00002448  584F      3884          addq.w    #4,A7
                    3885   ; printf(banner) ;
0000244A  2F02      3886          move.l    D2,-(A7)
0000244C  4E92      3887          jsr       (A2)
0000244E  584F      3888          addq.w    #4,A7
00002450  4CDF 0404 3889          movem.l   (A7)+,D2/A2
00002454  4E75      3890          rts
                    3891   ; }
                    3892   ; void menu(void)
                    3893   ; {
                    3894   _menu:
00002456  48E7 303C 3895          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000245A  45F9 0000 3896          lea       _printf.L,A2
0000245E  3924      
00002460  47F9 0B00 3897          lea       _Trace.L,A3
00002464  00D8      
00002466  49F9 0B00 3898          lea       _x.L,A4
0000246A  00C8      
0000246C  4BF9 0B00 3899          lea       _SR.L,A5
00002470  012C      
                    3900   ; char c,c1 ;
                    3901   ; while(1)    {
                    3902   menu_1:
                    3903   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002472  4EB8 0BA6 3904          jsr       _FlushKeyboard
                    3905   ; printf("\r\n#") ;
00002476  4879 0000 3906          pea       @m68kde~1_110.L
0000247A  4FF6      
0000247C  4E92      3907          jsr       (A2)
0000247E  584F      3908          addq.w    #4,A7
                    3909   ; c = toupper(_getch());
00002480  2F00      3910          move.l    D0,-(A7)
00002482  4EB8 0B68 3911          jsr       __getch
00002486  2200      3912          move.l    D0,D1
00002488  201F      3913          move.l    (A7)+,D0
0000248A  2F01      3914          move.l    D1,-(A7)
0000248C  4EB9 0000 3915          jsr       _toupper
00002490  3062      
00002492  584F      3916          addq.w    #4,A7
00002494  1400      3917          move.b    D0,D2
                    3918   ; if( c == (char)('L'))                  // load s record file
00002496  0C02 004C 3919          cmp.b     #76,D2
0000249A  6608      3920          bne.s     menu_4
                    3921   ; Load_SRecordFile() ;
0000249C  4EB8 0E36 3922          jsr       _Load_SRecordFile
000024A0  6000 021E 3923          bra       menu_46
                    3924   menu_4:
                    3925   ; else if( c == (char)('D'))             // dump memory
000024A4  0C02 0044 3926          cmp.b     #68,D2
000024A8  6608      3927          bne.s     menu_6
                    3928   ; DumpMemory() ;
000024AA  4EB8 0CCC 3929          jsr       _DumpMemory
000024AE  6000 0210 3930          bra       menu_46
                    3931   menu_6:
                    3932   ; else if( c == (char)('E'))             // Enter String into memory
000024B2  0C02 0045 3933          cmp.b     #69,D2
000024B6  660A      3934          bne.s     menu_8
                    3935   ; EnterString() ;
000024B8  4EB9 0000 3936          jsr       _EnterString
000024BC  2808      
000024BE  6000 0200 3937          bra       menu_46
                    3938   menu_8:
                    3939   ; else if( c == (char)('F'))             // fill memory
000024C2  0C02 0046 3940          cmp.b     #70,D2
000024C6  6608      3941          bne.s     menu_10
                    3942   ; FillMemory() ;
000024C8  4EB8 0DBC 3943          jsr       _FillMemory
000024CC  6000 01F2 3944          bra       menu_46
                    3945   menu_10:
                    3946   ; else if( c == (char)('G'))  {           // go user program
000024D0  0C02 0047 3947          cmp.b     #71,D2
000024D4  6626      3948          bne.s     menu_12
                    3949   ; printf("\r\nProgram Running.....") ;
000024D6  4879 0000 3950          pea       @m68kde~1_111.L
000024DA  4FFA      
000024DC  4E92      3951          jsr       (A2)
000024DE  584F      3952          addq.w    #4,A7
                    3953   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000024E0  4879 0000 3954          pea       @m68kde~1_112.L
000024E4  5012      
000024E6  4E92      3955          jsr       (A2)
000024E8  584F      3956          addq.w    #4,A7
                    3957   ; GoFlag = 1 ;
000024EA  23FC 0000 3958          move.l    #1,_GoFlag.L
000024EE  0001 0B00 
000024F2  00DC      
                    3959   ; go() ;
000024F4  4EB8 08B8 3960          jsr       _go
000024F8  6000 01C6 3961          bra       menu_46
                    3962   menu_12:
                    3963   ; }
                    3964   ; else if( c == (char)('M'))           // memory examine and modify
000024FC  0C02 004D 3965          cmp.b     #77,D2
00002500  6608      3966          bne.s     menu_14
                    3967   ; MemoryChange() ;
00002502  4EB8 0FC4 3968          jsr       _MemoryChange
00002506  6000 01B8 3969          bra       menu_46
                    3970   menu_14:
                    3971   ; else if( c == (char)('P'))            // Program Flash Chip
0000250A  0C02 0050 3972          cmp.b     #80,D2
0000250E  6608      3973          bne.s     menu_16
                    3974   ; ProgramFlashChip() ;
00002510  4EB8 1368 3975          jsr       _ProgramFlashChip
00002514  6000 01AA 3976          bra       menu_46
                    3977   menu_16:
                    3978   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002518  0C02 0043 3979          cmp.b     #67,D2
0000251C  6608      3980          bne.s     menu_18
                    3981   ; LoadFromFlashChip();
0000251E  4EB8 138A 3982          jsr       _LoadFromFlashChip
00002522  6000 019C 3983          bra       menu_46
                    3984   menu_18:
                    3985   ; else if( c == (char)('R'))             // dump registers
00002526  0C02 0052 3986          cmp.b     #82,D2
0000252A  6608      3987          bne.s     menu_20
                    3988   ; DumpRegisters() ;
0000252C  4EB8 13BE 3989          jsr       _DumpRegisters
00002530  6000 018E 3990          bra       menu_46
                    3991   menu_20:
                    3992   ; else if( c == (char)('.'))           // change registers
00002534  0C02 002E 3993          cmp.b     #46,D2
00002538  6608      3994          bne.s     menu_22
                    3995   ; ChangeRegisters() ;
0000253A  4EB8 18B0 3996          jsr       _ChangeRegisters
0000253E  6000 0180 3997          bra       menu_46
                    3998   menu_22:
                    3999   ; else if( c == (char)('B'))              // breakpoint command
00002542  0C02 0042 4000          cmp.b     #66,D2
00002546  6608      4001          bne.s     menu_24
                    4002   ; Breakpoint() ;
00002548  4EB8 2284 4003          jsr       _Breakpoint
0000254C  6000 0172 4004          bra       menu_46
                    4005   menu_24:
                    4006   ; else if( c == (char)('T'))  {          // Test command
00002550  0C02 0054 4007          cmp.b     #84,D2
00002554  6600 0046 4008          bne       menu_26
                    4009   ; c1 = toupper(_getch()) ;
00002558  2F00      4010          move.l    D0,-(A7)
0000255A  4EB8 0B68 4011          jsr       __getch
0000255E  2200      4012          move.l    D0,D1
00002560  201F      4013          move.l    (A7)+,D0
00002562  2F01      4014          move.l    D1,-(A7)
00002564  4EB9 0000 4015          jsr       _toupper
00002568  3062      
0000256A  584F      4016          addq.w    #4,A7
0000256C  1600      4017          move.b    D0,D3
                    4018   ; if(c1 == (char)('M'))                    // memory test
0000256E  0C03 004D 4019          cmp.b     #77,D3
00002572  6608      4020          bne.s     menu_28
                    4021   ; MemoryTest() ;
00002574  4EB9 0000 4022          jsr       _MemoryTest
00002578  2880      
0000257A  601C      4023          bra.s     menu_33
                    4024   menu_28:
                    4025   ; else if( c1 == (char)('S'))              // Switch Test command
0000257C  0C03 0053 4026          cmp.b     #83,D3
00002580  6606      4027          bne.s     menu_30
                    4028   ; SwitchTest() ;
00002582  4EB8 0AA4 4029          jsr       _SwitchTest
00002586  6010      4030          bra.s     menu_33
                    4031   menu_30:
                    4032   ; else if( c1 == (char)('D'))              // display Test command
00002588  0C03 0044 4033          cmp.b     #68,D3
0000258C  6606      4034          bne.s     menu_32
                    4035   ; TestLEDS() ;
0000258E  4EB8 0A50 4036          jsr       _TestLEDS
00002592  6004      4037          bra.s     menu_33
                    4038   menu_32:
                    4039   ; else
                    4040   ; UnknownCommand() ;
00002594  4EB8 2258 4041          jsr       _UnknownCommand
                    4042   menu_33:
00002598  6000 0126 4043          bra       menu_46
                    4044   menu_26:
                    4045   ; }
                    4046   ; else if( c == (char)(' ')) {             // Next instruction command
0000259C  0C02 0020 4047          cmp.b     #32,D2
000025A0  6636      4048          bne.s     menu_34
                    4049   ; DisableBreakPoints() ;
000025A2  4EB8 1E68 4050          jsr       _DisableBreakPoints
                    4051   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000025A6  2013      4052          move.l    (A3),D0
000025A8  0C80 0000 4053          cmp.l     #1,D0
000025AC  0001      
000025AE  661A      4054          bne.s     menu_36
000025B0  2039 0B00 4055          move.l    _GoFlag.L,D0
000025B4  00DC      
000025B6  0C80 0000 4056          cmp.l     #1,D0
000025BA  0001      
000025BC  660C      4057          bne.s     menu_36
                    4058   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000025BE  13FC 0001 4059          move.b    #1,4194314
000025C2  0040 000A 
                    4060   ; return ;
000025C6  6000 00FC 4061          bra       menu_38
                    4062   menu_36:
                    4063   ; }
                    4064   ; else
                    4065   ; printf("\r\nError: Press 'G' first to start program") ;
000025CA  4879 0000 4066          pea       @m68kde~1_113.L
000025CE  5040      
000025D0  4E92      4067          jsr       (A2)
000025D2  584F      4068          addq.w    #4,A7
000025D4  6000 00EA 4069          bra       menu_46
                    4070   menu_34:
                    4071   ; }
                    4072   ; else if( c == (char)('S')) {             // single step
000025D8  0C02 0053 4073          cmp.b     #83,D2
000025DC  6600 008C 4074          bne       menu_39
                    4075   ; if(Trace == 0) {
000025E0  2013      4076          move.l    (A3),D0
000025E2  6600 0050 4077          bne       menu_41
                    4078   ; DisableBreakPoints() ;
000025E6  4EB8 1E68 4079          jsr       _DisableBreakPoints
                    4080   ; printf("\r\nSingle Step  :[ON]") ;
000025EA  4879 0000 4081          pea       @m68kde~1_114.L
000025EE  506A      
000025F0  4E92      4082          jsr       (A2)
000025F2  584F      4083          addq.w    #4,A7
                    4084   ; printf("\r\nBreak Points :[Disabled]") ;
000025F4  4879 0000 4085          pea       @m68kde~1_47.L
000025F8  4708      
000025FA  4E92      4086          jsr       (A2)
000025FC  584F      4087          addq.w    #4,A7
                    4088   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
000025FE  0055 8000 4089          or.w      #32768,(A5)
                    4090   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002602  2F39 0B00 4091          move.l    _PC.L,-(A7)
00002606  0120      
00002608  4879 0000 4092          pea       @m68kde~1_115.L
0000260C  5080      
0000260E  4E92      4093          jsr       (A2)
00002610  504F      4094          addq.w    #8,A7
                    4095   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002612  4879 0000 4096          pea       @m68kde~1_116.L
00002616  50B4      
00002618  4E92      4097          jsr       (A2)
0000261A  584F      4098          addq.w    #4,A7
                    4099   ; DumpRegisters() ;
0000261C  4EB8 13BE 4100          jsr       _DumpRegisters
                    4101   ; Trace = 1;
00002620  26BC 0000 4102          move.l    #1,(A3)
00002624  0001      
                    4103   ; TraceException = 1;
00002626  13FC 0001 4104          move.b    #1,4194314
0000262A  0040 000A 
                    4105   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000262E  28B8 0074 4106          move.l    116,(A4)
00002632  6032      4107          bra.s     menu_42
                    4108   menu_41:
                    4109   ; }
                    4110   ; else {
                    4111   ; Trace = 0 ;
00002634  4293      4112          clr.l     (A3)
                    4113   ; TraceException = 0 ;
00002636  4239 0040 4114          clr.b     4194314
0000263A  000A      
                    4115   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000263C  28B8 0074 4116          move.l    116,(A4)
                    4117   ; EnableBreakPoints() ;
00002640  4EB8 1EBC 4118          jsr       _EnableBreakPoints
                    4119   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002644  0255 7FFF 4120          and.w     #32767,(A5)
                    4121   ; printf("\r\nSingle Step : [OFF]") ;
00002648  4879 0000 4122          pea       @m68kde~1_117.L
0000264C  50D8      
0000264E  4E92      4123          jsr       (A2)
00002650  584F      4124          addq.w    #4,A7
                    4125   ; printf("\r\nBreak Points :[Enabled]") ;
00002652  4879 0000 4126          pea       @m68kde~1_118.L
00002656  50EE      
00002658  4E92      4127          jsr       (A2)
0000265A  584F      4128          addq.w    #4,A7
                    4129   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
0000265C  4879 0000 4130          pea       @m68kde~1_119.L
00002660  5108      
00002662  4E92      4131          jsr       (A2)
00002664  584F      4132          addq.w    #4,A7
                    4133   menu_42:
00002666  6000 0058 4134          bra       menu_46
                    4135   menu_39:
                    4136   ; }
                    4137   ; }
                    4138   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
0000266A  0C02 001B 4139          cmp.b     #27,D2
0000266E  6600 0040 4140          bne       menu_43
                    4141   ; Trace = 0;
00002672  4293      4142          clr.l     (A3)
                    4143   ; TraceException = 0;
00002674  4239 0040 4144          clr.b     4194314
00002678  000A      
                    4145   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
0000267A  28B8 0074 4146          move.l    116,(A4)
                    4147   ; EnableBreakPoints() ;
0000267E  4EB8 1EBC 4148          jsr       _EnableBreakPoints
                    4149   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002682  0255 7FFF 4150          and.w     #32767,(A5)
                    4151   ; printf("\r\nSingle Step  :[OFF]") ;
00002686  4879 0000 4152          pea       @m68kde~1_120.L
0000268A  5132      
0000268C  4E92      4153          jsr       (A2)
0000268E  584F      4154          addq.w    #4,A7
                    4155   ; printf("\r\nBreak Points :[Enabled]");
00002690  4879 0000 4156          pea       @m68kde~1_118.L
00002694  50EE      
00002696  4E92      4157          jsr       (A2)
00002698  584F      4158          addq.w    #4,A7
                    4159   ; printf("\r\nProgram Running.....") ;
0000269A  4879 0000 4160          pea       @m68kde~1_111.L
0000269E  4FFA      
000026A0  4E92      4161          jsr       (A2)
000026A2  584F      4162          addq.w    #4,A7
                    4163   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000026A4  4879 0000 4164          pea       @m68kde~1_112.L
000026A8  5012      
000026AA  4E92      4165          jsr       (A2)
000026AC  584F      4166          addq.w    #4,A7
                    4167   ; return ;
000026AE  6014      4168          bra.s     menu_38
                    4169   menu_43:
                    4170   ; }
                    4171   ; else if( c == (char)('W'))              // Watchpoint command
000026B0  0C02 0057 4172          cmp.b     #87,D2
000026B4  6606      4173          bne.s     menu_45
                    4174   ; Watchpoint() ;
000026B6  4EB8 2300 4175          jsr       _Watchpoint
000026BA  6004      4176          bra.s     menu_46
                    4177   menu_45:
                    4178   ; else
                    4179   ; UnknownCommand() ;
000026BC  4EB8 2258 4180          jsr       _UnknownCommand
                    4181   menu_46:
000026C0  6000 FDB0 4182          bra       menu_1
                    4183   menu_38:
000026C4  4CDF 3C0C 4184          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000026C8  4E75      4185          rts
                    4186   ; }
                    4187   ; }
                    4188   ; void PrintErrorMessageandAbort(char *string) {
                    4189   _PrintErrorMessageandAbort:
000026CA  4E56 0000 4190          link      A6,#0
                    4191   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000026CE  4879 0000 4192          pea       @m68kde~1_121.L
000026D2  5148      
000026D4  4EB9 0000 4193          jsr       _printf
000026D8  3924      
000026DA  584F      4194          addq.w    #4,A7
                    4195   ; printf("%s\r\n", string) ;
000026DC  2F2E 0008 4196          move.l    8(A6),-(A7)
000026E0  4879 0000 4197          pea       @m68kde~1_122.L
000026E4  5164      
000026E6  4EB9 0000 4198          jsr       _printf
000026EA  3924      
000026EC  504F      4199          addq.w    #8,A7
                    4200   ; menu() ;
000026EE  4EB8 2456 4201          jsr       _menu
000026F2  4E5E      4202          unlk      A6
000026F4  4E75      4203          rts
                    4204   ; }
                    4205   ; void IRQMessage(int level) {
                    4206   _IRQMessage:
000026F6  4E56 0000 4207          link      A6,#0
                    4208   ; printf("\r\n\r\nProgram ABORT !!!!!");
000026FA  4879 0000 4209          pea       @m68kde~1_123.L
000026FE  516A      
00002700  4EB9 0000 4210          jsr       _printf
00002704  3924      
00002706  584F      4211          addq.w    #4,A7
                    4212   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002708  2F2E 0008 4213          move.l    8(A6),-(A7)
0000270C  4879 0000 4214          pea       @m68kde~1_124.L
00002710  5182      
00002712  4EB9 0000 4215          jsr       _printf
00002716  3924      
00002718  504F      4216          addq.w    #8,A7
                    4217   ; menu() ;
0000271A  4EB8 2456 4218          jsr       _menu
0000271E  4E5E      4219          unlk      A6
00002720  4E75      4220          rts
                    4221   ; }
                    4222   ; void UnhandledIRQ1(void) {
                    4223   _UnhandledIRQ1:
                    4224   ; IRQMessage(1);
00002722  4878 0001 4225          pea       1
00002726  4EB8 26F6 4226          jsr       _IRQMessage
0000272A  584F      4227          addq.w    #4,A7
0000272C  4E75      4228          rts
                    4229   ; }
                    4230   ; void UnhandledIRQ2(void) {
                    4231   _UnhandledIRQ2:
                    4232   ; IRQMessage(2);
0000272E  4878 0002 4233          pea       2
00002732  4EB8 26F6 4234          jsr       _IRQMessage
00002736  584F      4235          addq.w    #4,A7
00002738  4E75      4236          rts
                    4237   ; }
                    4238   ; void UnhandledIRQ3(void){
                    4239   _UnhandledIRQ3:
                    4240   ; IRQMessage(3);
0000273A  4878 0003 4241          pea       3
0000273E  4EB8 26F6 4242          jsr       _IRQMessage
00002742  584F      4243          addq.w    #4,A7
00002744  4E75      4244          rts
                    4245   ; }
                    4246   ; void UnhandledIRQ4(void) {
                    4247   _UnhandledIRQ4:
                    4248   ; IRQMessage(4);
00002746  4878 0004 4249          pea       4
0000274A  4EB8 26F6 4250          jsr       _IRQMessage
0000274E  584F      4251          addq.w    #4,A7
00002750  4E75      4252          rts
                    4253   ; }
                    4254   ; void UnhandledIRQ5(void) {
                    4255   _UnhandledIRQ5:
                    4256   ; IRQMessage(5);
00002752  4878 0005 4257          pea       5
00002756  4EB8 26F6 4258          jsr       _IRQMessage
0000275A  584F      4259          addq.w    #4,A7
0000275C  4E75      4260          rts
                    4261   ; }
                    4262   ; void UnhandledIRQ6(void) {
                    4263   _UnhandledIRQ6:
                    4264   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
0000275E  4879 0000 4265          pea       @m68kde~1_125.L
00002762  51A6      
00002764  4EB8 26CA 4266          jsr       _PrintErrorMessageandAbort
00002768  584F      4267          addq.w    #4,A7
                    4268   ; menu() ;
0000276A  4EB8 2456 4269          jsr       _menu
0000276E  4E75      4270          rts
                    4271   ; }
                    4272   ; void UnhandledIRQ7(void) {
                    4273   _UnhandledIRQ7:
                    4274   ; IRQMessage(7);
00002770  4878 0007 4275          pea       7
00002774  4EB8 26F6 4276          jsr       _IRQMessage
00002778  584F      4277          addq.w    #4,A7
0000277A  4E75      4278          rts
                    4279   ; }
                    4280   ; void UnhandledTrap(void) {
                    4281   _UnhandledTrap:
                    4282   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
0000277C  4879 0000 4283          pea       @m68kde~1_126.L
00002780  51E6      
00002782  4EB8 26CA 4284          jsr       _PrintErrorMessageandAbort
00002786  584F      4285          addq.w    #4,A7
00002788  4E75      4286          rts
                    4287   ; }
                    4288   ; void BusError() {
                    4289   _BusError:
                    4290   ; PrintErrorMessageandAbort("BUS Error!") ;
0000278A  4879 0000 4291          pea       @m68kde~1_127.L
0000278E  51FC      
00002790  4EB8 26CA 4292          jsr       _PrintErrorMessageandAbort
00002794  584F      4293          addq.w    #4,A7
00002796  4E75      4294          rts
                    4295   ; }
                    4296   ; void AddressError() {
                    4297   _AddressError:
                    4298   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002798  4879 0000 4299          pea       @m68kde~1_128.L
0000279C  5208      
0000279E  4EB8 26CA 4300          jsr       _PrintErrorMessageandAbort
000027A2  584F      4301          addq.w    #4,A7
000027A4  4E75      4302          rts
                    4303   ; }
                    4304   ; void IllegalInstruction() {
                    4305   _IllegalInstruction:
                    4306   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000027A6  4879 0000 4307          pea       @m68kde~1_129.L
000027AA  5218      
000027AC  4EB8 26CA 4308          jsr       _PrintErrorMessageandAbort
000027B0  584F      4309          addq.w    #4,A7
000027B2  4E75      4310          rts
                    4311   ; }
                    4312   ; void Dividebyzero() {
                    4313   _Dividebyzero:
                    4314   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000027B4  4879 0000 4315          pea       @m68kde~1_130.L
000027B8  522C      
000027BA  4EB8 26CA 4316          jsr       _PrintErrorMessageandAbort
000027BE  584F      4317          addq.w    #4,A7
000027C0  4E75      4318          rts
                    4319   ; }
                    4320   ; void Check() {
                    4321   _Check:
                    4322   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000027C2  4879 0000 4323          pea       @m68kde~1_131.L
000027C6  523C      
000027C8  4EB8 26CA 4324          jsr       _PrintErrorMessageandAbort
000027CC  584F      4325          addq.w    #4,A7
000027CE  4E75      4326          rts
                    4327   ; }
                    4328   ; void Trapv() {
                    4329   _Trapv:
                    4330   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000027D0  4879 0000 4331          pea       @m68kde~1_132.L
000027D4  524E      
000027D6  4EB8 26CA 4332          jsr       _PrintErrorMessageandAbort
000027DA  584F      4333          addq.w    #4,A7
000027DC  4E75      4334          rts
                    4335   ; }
                    4336   ; void PrivError() {
                    4337   _PrivError:
                    4338   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000027DE  4879 0000 4339          pea       @m68kde~1_133.L
000027E2  5260      
000027E4  4EB8 26CA 4340          jsr       _PrintErrorMessageandAbort
000027E8  584F      4341          addq.w    #4,A7
000027EA  4E75      4342          rts
                    4343   ; }
                    4344   ; void UnitIRQ() {
                    4345   _UnitIRQ:
                    4346   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
000027EC  4879 0000 4347          pea       @m68kde~1_134.L
000027F0  5274      
000027F2  4EB8 26CA 4348          jsr       _PrintErrorMessageandAbort
000027F6  584F      4349          addq.w    #4,A7
000027F8  4E75      4350          rts
                    4351   ; }
                    4352   ; void Spurious() {
                    4353   _Spurious:
                    4354   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
000027FA  4879 0000 4355          pea       @m68kde~1_135.L
000027FE  5286      
00002800  4EB8 26CA 4356          jsr       _PrintErrorMessageandAbort
00002804  584F      4357          addq.w    #4,A7
00002806  4E75      4358          rts
                    4359   ; }
                    4360   ; void EnterString(void)
                    4361   ; {
                    4362   _EnterString:
00002808  4E56 FFFC 4363          link      A6,#-4
0000280C  2F02      4364          move.l    D2,-(A7)
                    4365   ; unsigned char *Start;
                    4366   ; unsigned char c;
                    4367   ; printf("\r\nStart Address in Memory: ") ;
0000280E  4879 0000 4368          pea       @m68kde~1_136.L
00002812  5294      
00002814  4EB9 0000 4369          jsr       _printf
00002818  3924      
0000281A  584F      4370          addq.w    #4,A7
                    4371   ; Start = Get8HexDigits(0) ;
0000281C  42A7      4372          clr.l     -(A7)
0000281E  4EB8 0CA4 4373          jsr       _Get8HexDigits
00002822  584F      4374          addq.w    #4,A7
00002824  2400      4375          move.l    D0,D2
                    4376   ; printf("\r\nEnter String (ESC to end) :") ;
00002826  4879 0000 4377          pea       @m68kde~1_137.L
0000282A  52B0      
0000282C  4EB9 0000 4378          jsr       _printf
00002830  3924      
00002832  584F      4379          addq.w    #4,A7
                    4380   ; while((c = getchar()) != 0x1b)
                    4381   EnterString_1:
00002834  4EB9 0000 4382          jsr       _getch
00002838  2F98      
0000283A  1D40 FFFF 4383          move.b    D0,-1(A6)
0000283E  0C00 001B 4384          cmp.b     #27,D0
00002842  670A      4385          beq.s     EnterString_3
                    4386   ; *Start++ = c ;
00002844  2042      4387          move.l    D2,A0
00002846  5282      4388          addq.l    #1,D2
00002848  10AE FFFF 4389          move.b    -1(A6),(A0)
0000284C  60E6      4390          bra       EnterString_1
                    4391   EnterString_3:
                    4392   ; *Start = 0x00;  // terminate with a null
0000284E  2042      4393          move.l    D2,A0
00002850  4210      4394          clr.b     (A0)
00002852  241F      4395          move.l    (A7)+,D2
00002854  4E5E      4396          unlk      A6
00002856  4E75      4397          rts
                    4398   ; }
                    4399   ; // Sourced from this stack overflow post: https://stackoverflow.com/questions/7898215/how-can-i-clear-an-input-buffer-in-c
                    4400   ; void clearInputBuffer() {
                    4401   _clearInputBuffer:
00002858  4E56 FFFC 4402          link      A6,#-4
                    4403   ; int c;
                    4404   ; while ((c = getchar()) != '\n' && c != EOF);
                    4405   clearInputBuffer_1:
0000285C  4EB9 0000 4406          jsr       _getch
00002860  2F98      
00002862  2D40 FFFC 4407          move.l    D0,-4(A6)
00002866  0C80 0000 4408          cmp.l     #10,D0
0000286A  000A      
0000286C  670E      4409          beq.s     clearInputBuffer_3
0000286E  202E FFFC 4410          move.l    -4(A6),D0
00002872  0C80 FFFF 4411          cmp.l     #-1,D0
00002876  FFFF      
00002878  6702      4412          beq.s     clearInputBuffer_3
0000287A  60E0      4413          bra       clearInputBuffer_1
                    4414   clearInputBuffer_3:
0000287C  4E5E      4415          unlk      A6
0000287E  4E75      4416          rts
                    4417   ; }
                    4418   ; void MemoryTest(void)
                    4419   ; {
                    4420   _MemoryTest:
00002880  4E56 FF40 4421          link      A6,#-192
00002884  48E7 3F3C 4422          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002888  45F9 0000 4423          lea       _printf.L,A2
0000288C  3924      
0000288E  4BF8 0B68 4424          lea       __getch.L,A5
                    4425   ; unsigned int *RamPtr, counter1=1 ;
00002892  2D7C 0000 4426          move.l    #1,-188(A6)
00002896  0001 FF44 
                    4427   ; register unsigned int i ;
                    4428   ; unsigned int Start, End ;
                    4429   ; char c, text[150];
                    4430   ; unsigned int* addressPointer;
                    4431   ; unsigned int startAddress = NULL;
0000289A  42AE FFF0 4432          clr.l     -16(A6)
                    4433   ; unsigned int endAddress = NULL;
0000289E  42AE FFF4 4434          clr.l     -12(A6)
                    4435   ; unsigned int byteLength;
                    4436   ; unsigned int dataSize = 0;
000028A2  4285      4437          clr.l     D5
                    4438   ; unsigned int dataPattern = 0;
000028A4  4283      4439          clr.l     D3
                    4440   ; unsigned int currAddress;
                    4441   ; unsigned int addrCount;
                    4442   ; unsigned int intBuffer = NULL;
000028A6  7E00      4443          moveq     #0,D7
                    4444   ; unsigned char *startAddressPtr = NULL;
000028A8  4282      4445          clr.l     D2
                    4446   ; unsigned char *endAddressPtr = NULL;
000028AA  4286      4447          clr.l     D6
                    4448   ; unsigned short int *wordAddressPtr = NULL;
000028AC  387C 0000 4449          move.w    #0,A4
                    4450   ; unsigned int *longAddressPtr = NULL;
000028B0  367C 0000 4451          move.w    #0,A3
                    4452   ; // IMPROVEMENTS TO BE MADE:
                    4453   ; // Suppossed to be able to write an odd address as a byte
                    4454   ; // We should be blocking certian thresholds from getting written according to SRAM and DRAM reqs. 
                    4455   ; // printf("\r\nStart Address: ") ;
                    4456   ; // Start = Get8HexDigits(0) ;
                    4457   ; // printf("\r\nEnd Address: ") ;
                    4458   ; // End = Get8HexDigits(0) ;
                    4459   ; // TODO
                    4460   ; scanflush();
000028B4  4EB9 0000 4461          jsr       _scanflush
000028B8  331A      
                    4462   ; memset(text, 0, sizeof(text));  // fills with zeros
000028BA  4878 0096 4463          pea       150
000028BE  42A7      4464          clr.l     -(A7)
000028C0  486E FF56 4465          pea       -170(A6)
000028C4  4EB9 0000 4466          jsr       _memset
000028C8  3034      
000028CA  DEFC 000C 4467          add.w     #12,A7
                    4468   ; printf("\nEnter what size of memory you want to read/write\n Byte = 0\n Word = 1\n Long Word = 2\n");
000028CE  4879 0000 4469          pea       @m68kde~1_138.L
000028D2  52CE      
000028D4  4E92      4470          jsr       (A2)
000028D6  584F      4471          addq.w    #4,A7
                    4472   ; dataSize = _getch() - 48;
000028D8  4E95      4473          jsr       (A5)
000028DA  0480 0000 4474          sub.l     #48,D0
000028DE  0030      
000028E0  2A00      4475          move.l    D0,D5
                    4476   ; printf("\n");
000028E2  4879 0000 4477          pea       @m68kde~1_139.L
000028E6  5324      
000028E8  4E92      4478          jsr       (A2)
000028EA  584F      4479          addq.w    #4,A7
                    4480   ; if (dataSize == 0) {
000028EC  4A85      4481          tst.l     D5
000028EE  6600 0058 4482          bne       MemoryTest_1
                    4483   ; printf("\nEnter which data pattern you want to write into memory\n 0x00 = 0\n 0xB2 = 1\n 0xC3 = 2\n 0xD4 = 3\n");
000028F2  4879 0000 4484          pea       @m68kde~1_140.L
000028F6  5326      
000028F8  4E92      4485          jsr       (A2)
000028FA  584F      4486          addq.w    #4,A7
                    4487   ; intBuffer = _getch() - 48;
000028FC  4E95      4488          jsr       (A5)
000028FE  0480 0000 4489          sub.l     #48,D0
00002902  0030      
00002904  2E00      4490          move.l    D0,D7
                    4491   ; // scanf("%d", &intBuffer);
                    4492   ; switch (intBuffer) {
00002906  2007      4493          move.l    D7,D0
00002908  0C80 0000 4494          cmp.l     #4,D0
0000290C  0004      
0000290E  642C      4495          bhs.s     MemoryTest_4
00002910  E380      4496          asl.l     #1,D0
00002912  303B 0806 4497          move.w    MemoryTest_5(PC,D0.L),D0
00002916  4EFB 0002 4498          jmp       MemoryTest_5(PC,D0.W)
                    4499   MemoryTest_5:
0000291A  0008      4500          dc.w      MemoryTest_6-MemoryTest_5
0000291C  000C      4501          dc.w      MemoryTest_7-MemoryTest_5
0000291E  0014      4502          dc.w      MemoryTest_8-MemoryTest_5
00002920  001C      4503          dc.w      MemoryTest_9-MemoryTest_5
                    4504   MemoryTest_6:
                    4505   ; case(0):
                    4506   ; dataPattern = 0x00; break;
00002922  4283      4507          clr.l     D3
00002924  6016      4508          bra.s     MemoryTest_4
                    4509   MemoryTest_7:
                    4510   ; case(1):
                    4511   ; dataPattern = 0xB2; break;
00002926  263C 0000 4512          move.l    #178,D3
0000292A  00B2      
0000292C  600E      4513          bra.s     MemoryTest_4
                    4514   MemoryTest_8:
                    4515   ; case(2):
                    4516   ; dataPattern = 0xC3; break;
0000292E  263C 0000 4517          move.l    #195,D3
00002932  00C3      
00002934  6006      4518          bra.s     MemoryTest_4
                    4519   MemoryTest_9:
                    4520   ; case(3):
                    4521   ; dataPattern = 0xD4; break;
00002936  263C 0000 4522          move.l    #212,D3
0000293A  00D4      
                    4523   MemoryTest_4:
                    4524   ; }
                    4525   ; dataPattern &= 0xFF;
0000293C  C6BC 0000 4526          and.l     #255,D3
00002940  00FF      
                    4527   ; byteLength = 1;
00002942  7801      4528          moveq     #1,D4
00002944  6000 00AE 4529          bra       MemoryTest_11
                    4530   MemoryTest_1:
                    4531   ; } else if (dataSize == 1) {
00002948  0C85 0000 4532          cmp.l     #1,D5
0000294C  0001      
0000294E  6600 0058 4533          bne       MemoryTest_10
                    4534   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000 = 0\n 0x1234 = 1\n 0xA1B2 = 2\n 0xC3D4 = 3\n");
00002952  4879 0000 4535          pea       @m68kde~1_141.L
00002956  5388      
00002958  4E92      4536          jsr       (A2)
0000295A  584F      4537          addq.w    #4,A7
                    4538   ; intBuffer = _getch() - 48;
0000295C  4E95      4539          jsr       (A5)
0000295E  0480 0000 4540          sub.l     #48,D0
00002962  0030      
00002964  2E00      4541          move.l    D0,D7
                    4542   ; switch (intBuffer) {
00002966  2007      4543          move.l    D7,D0
00002968  0C80 0000 4544          cmp.l     #4,D0
0000296C  0004      
0000296E  642C      4545          bhs.s     MemoryTest_13
00002970  E380      4546          asl.l     #1,D0
00002972  303B 0806 4547          move.w    MemoryTest_14(PC,D0.L),D0
00002976  4EFB 0002 4548          jmp       MemoryTest_14(PC,D0.W)
                    4549   MemoryTest_14:
0000297A  0008      4550          dc.w      MemoryTest_15-MemoryTest_14
0000297C  000C      4551          dc.w      MemoryTest_16-MemoryTest_14
0000297E  0014      4552          dc.w      MemoryTest_17-MemoryTest_14
00002980  001C      4553          dc.w      MemoryTest_18-MemoryTest_14
                    4554   MemoryTest_15:
                    4555   ; case(0):
                    4556   ; dataPattern = 0x0000; break;
00002982  4283      4557          clr.l     D3
00002984  6016      4558          bra.s     MemoryTest_13
                    4559   MemoryTest_16:
                    4560   ; case(1):
                    4561   ; dataPattern = 0x1234; break;
00002986  263C 0000 4562          move.l    #4660,D3
0000298A  1234      
0000298C  600E      4563          bra.s     MemoryTest_13
                    4564   MemoryTest_17:
                    4565   ; case(2):
                    4566   ; dataPattern = 0xA1B2; break;
0000298E  263C 0000 4567          move.l    #41394,D3
00002992  A1B2      
00002994  6006      4568          bra.s     MemoryTest_13
                    4569   MemoryTest_18:
                    4570   ; case(3):
                    4571   ; dataPattern = 0xC3D4; break;
00002996  263C 0000 4572          move.l    #50132,D3
0000299A  C3D4      
                    4573   MemoryTest_13:
                    4574   ; }
                    4575   ; dataPattern &= 0xFFFF;
0000299C  C6BC 0000 4576          and.l     #65535,D3
000029A0  FFFF      
                    4577   ; byteLength = 2;
000029A2  7802      4578          moveq     #2,D4
000029A4  6000 004E 4579          bra       MemoryTest_11
                    4580   MemoryTest_10:
                    4581   ; } else {
                    4582   ; printf("\nEnter which data pattern you want to write into memory\n 0x0000_0000 = 0\n 0xAABB_CCDD = 1\n 0x1122_3344 = 2\n 0x7654_3210 = 3\n");
000029A8  4879 0000 4583          pea       @m68kde~1_142.L
000029AC  53F2      
000029AE  4E92      4584          jsr       (A2)
000029B0  584F      4585          addq.w    #4,A7
                    4586   ; intBuffer = _getch() - 48;
000029B2  4E95      4587          jsr       (A5)
000029B4  0480 0000 4588          sub.l     #48,D0
000029B8  0030      
000029BA  2E00      4589          move.l    D0,D7
                    4590   ; switch (intBuffer) {
000029BC  2007      4591          move.l    D7,D0
000029BE  0C80 0000 4592          cmp.l     #4,D0
000029C2  0004      
000029C4  642C      4593          bhs.s     MemoryTest_20
000029C6  E380      4594          asl.l     #1,D0
000029C8  303B 0806 4595          move.w    MemoryTest_21(PC,D0.L),D0
000029CC  4EFB 0002 4596          jmp       MemoryTest_21(PC,D0.W)
                    4597   MemoryTest_21:
000029D0  0008      4598          dc.w      MemoryTest_22-MemoryTest_21
000029D2  000C      4599          dc.w      MemoryTest_23-MemoryTest_21
000029D4  0014      4600          dc.w      MemoryTest_24-MemoryTest_21
000029D6  001C      4601          dc.w      MemoryTest_25-MemoryTest_21
                    4602   MemoryTest_22:
                    4603   ; case(0):
                    4604   ; dataPattern = 0x00000000; break;
000029D8  4283      4605          clr.l     D3
000029DA  6016      4606          bra.s     MemoryTest_20
                    4607   MemoryTest_23:
                    4608   ; case(1):
                    4609   ; dataPattern = 0xAABBCCDD; break;
000029DC  263C AABB 4610          move.l    #-1430532899,D3
000029E0  CCDD      
000029E2  600E      4611          bra.s     MemoryTest_20
                    4612   MemoryTest_24:
                    4613   ; case(2):
                    4614   ; dataPattern = 0x11223344; break;
000029E4  263C 1122 4615          move.l    #287454020,D3
000029E8  3344      
000029EA  6006      4616          bra.s     MemoryTest_20
                    4617   MemoryTest_25:
                    4618   ; case(3):
                    4619   ; dataPattern = 0x76543210; break;
000029EC  263C 7654 4620          move.l    #1985229328,D3
000029F0  3210      
                    4621   MemoryTest_20:
                    4622   ; }
                    4623   ; byteLength = 4;
000029F2  7804      4624          moveq     #4,D4
                    4625   MemoryTest_11:
                    4626   ; }
                    4627   ; // Tests the DRAM range memory from 0x0802_0000 to 0x0B00_0000
                    4628   ; while (startAddressPtr == NULL || 
                    4629   MemoryTest_26:
000029F4  4A82      4630          tst.l     D2
000029F6  6732      4631          beq.s     MemoryTest_29
000029F8  0C84 0000 4632          cmp.l     #1,D4
000029FC  0001      
000029FE  6316      4633          bls.s     MemoryTest_30
00002A00  2F02      4634          move.l    D2,-(A7)
00002A02  4878 0002 4635          pea       2
00002A06  4EB9 0000 4636          jsr       ULDIV
00002A0A  2E8A      
00002A0C  202F 0004 4637          move.l    4(A7),D0
00002A10  504F      4638          addq.w    #8,A7
00002A12  4A80      4639          tst.l     D0
00002A14  6614      4640          bne.s     MemoryTest_29
                    4641   MemoryTest_30:
00002A16  0C82 0802 4642          cmp.l     #134348800,D2
00002A1A  0000      
00002A1C  650C      4643          blo.s     MemoryTest_29
00002A1E  203C 0B00 4644          move.l    #184549376,D0
00002A22  0000      
00002A24  9084      4645          sub.l     D4,D0
00002A26  B480      4646          cmp.l     D0,D2
00002A28  6316      4647          bls.s     MemoryTest_28
                    4648   MemoryTest_29:
                    4649   ; (byteLength > 1 && (unsigned int) startAddressPtr % 2 != 0) || 
                    4650   ; (unsigned int) startAddressPtr < 0x08020000 || 
                    4651   ; (unsigned int) startAddressPtr > 0x0B000000 - byteLength) {
                    4652   ; printf("\nProvide Start Address in hex (do not use 0x prefix)\n0x");
00002A2A  4879 0000 4653          pea       @m68kde~1_143.L
00002A2E  5470      
00002A30  4E92      4654          jsr       (A2)
00002A32  584F      4655          addq.w    #4,A7
                    4656   ; startAddressPtr =  Get8HexDigits(0);
00002A34  42A7      4657          clr.l     -(A7)
00002A36  4EB8 0CA4 4658          jsr       _Get8HexDigits
00002A3A  584F      4659          addq.w    #4,A7
00002A3C  2400      4660          move.l    D0,D2
00002A3E  60B4      4661          bra       MemoryTest_26
                    4662   MemoryTest_28:
                    4663   ; }
                    4664   ; while (endAddressPtr == NULL || 
                    4665   MemoryTest_31:
00002A40  4A86      4666          tst.l     D6
00002A42  670A      4667          beq.s     MemoryTest_34
00002A44  202E FFF0 4668          move.l    -16(A6),D0
00002A48  D084      4669          add.l     D4,D0
00002A4A  BC80      4670          cmp.l     D0,D6
00002A4C  6416      4671          bhs.s     MemoryTest_33
                    4672   MemoryTest_34:
                    4673   ; (unsigned int) endAddressPtr < startAddress + byteLength) {
                    4674   ; printf("\nProvide End Address in hex (do not use 0x prefix)\n0x");
00002A4E  4879 0000 4675          pea       @m68kde~1_144.L
00002A52  54A8      
00002A54  4E92      4676          jsr       (A2)
00002A56  584F      4677          addq.w    #4,A7
                    4678   ; endAddressPtr =  Get8HexDigits(0);
00002A58  42A7      4679          clr.l     -(A7)
00002A5A  4EB8 0CA4 4680          jsr       _Get8HexDigits
00002A5E  584F      4681          addq.w    #4,A7
00002A60  2C00      4682          move.l    D0,D6
00002A62  60DC      4683          bra       MemoryTest_31
                    4684   MemoryTest_33:
                    4685   ; }
                    4686   ; printf("\nStart Address 0x%08x\n", (unsigned int) startAddressPtr);
00002A64  2F02      4687          move.l    D2,-(A7)
00002A66  4879 0000 4688          pea       @m68kde~1_145.L
00002A6A  54DE      
00002A6C  4E92      4689          jsr       (A2)
00002A6E  504F      4690          addq.w    #8,A7
                    4691   ; printf("\nEnd Address: 0x%08x\n",(unsigned int) endAddressPtr);
00002A70  2F06      4692          move.l    D6,-(A7)
00002A72  4879 0000 4693          pea       @m68kde~1_146.L
00002A76  54F6      
00002A78  4E92      4694          jsr       (A2)
00002A7A  504F      4695          addq.w    #8,A7
                    4696   ; addrCount = 0;
00002A7C  42AE FFFC 4697          clr.l     -4(A6)
                    4698   ; while (startAddressPtr < endAddressPtr && ((unsigned int)endAddressPtr - (unsigned int)startAddressPtr + 1) >= (byteLength)) {
                    4699   MemoryTest_35:
00002A80  B486      4700          cmp.l     D6,D2
00002A82  6400 0132 4701          bhs       MemoryTest_37
00002A86  2006      4702          move.l    D6,D0
00002A88  9082      4703          sub.l     D2,D0
00002A8A  5280      4704          addq.l    #1,D0
00002A8C  B084      4705          cmp.l     D4,D0
00002A8E  6500 0126 4706          blo       MemoryTest_37
                    4707   ; // If address goes beyond 0x0B00_0000 then break
                    4708   ; if ((unsigned int)startAddressPtr > 0x0B000000 - byteLength) {
00002A92  203C 0B00 4709          move.l    #184549376,D0
00002A96  0000      
00002A98  9084      4710          sub.l     D4,D0
00002A9A  B480      4711          cmp.l     D0,D2
00002A9C  6310      4712          bls.s     MemoryTest_38
                    4713   ; printf("ERROR... Address 0x%x is beyond the memory range\n", (void*)startAddressPtr);
00002A9E  2F02      4714          move.l    D2,-(A7)
00002AA0  4879 0000 4715          pea       @m68kde~1_147.L
00002AA4  550C      
00002AA6  4E92      4716          jsr       (A2)
00002AA8  504F      4717          addq.w    #8,A7
                    4718   ; break;
00002AAA  6000 010A 4719          bra       MemoryTest_37
                    4720   MemoryTest_38:
                    4721   ; }
                    4722   ; longAddressPtr = startAddressPtr;
00002AAE  2642      4723          move.l    D2,A3
                    4724   ; wordAddressPtr = startAddressPtr;
00002AB0  2842      4725          move.l    D2,A4
                    4726   ; if (dataSize == 0) {
00002AB2  4A85      4727          tst.l     D5
00002AB4  6600 0034 4728          bne       MemoryTest_40
                    4729   ; *startAddressPtr = dataPattern;
00002AB8  2042      4730          move.l    D2,A0
00002ABA  1083      4731          move.b    D3,(A0)
                    4732   ; if ((*startAddressPtr) != dataPattern) {
00002ABC  2042      4733          move.l    D2,A0
00002ABE  1010      4734          move.b    (A0),D0
00002AC0  C0BC 0000 4735          and.l     #255,D0
00002AC4  00FF      
00002AC6  B083      4736          cmp.l     D3,D0
00002AC8  671C      4737          beq.s     MemoryTest_42
                    4738   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002ACA  2F03      4739          move.l    D3,-(A7)
00002ACC  2042      4740          move.l    D2,A0
00002ACE  1210      4741          move.b    (A0),D1
00002AD0  C2BC 0000 4742          and.l     #255,D1
00002AD4  00FF      
00002AD6  2F01      4743          move.l    D1,-(A7)
00002AD8  2F02      4744          move.l    D2,-(A7)
00002ADA  4879 0000 4745          pea       @m68kde~1_148.L
00002ADE  553E      
00002AE0  4E92      4746          jsr       (A2)
00002AE2  DEFC 0010 4747          add.w     #16,A7
                    4748   MemoryTest_42:
00002AE6  6000 0058 4749          bra       MemoryTest_48
                    4750   MemoryTest_40:
                    4751   ; }
                    4752   ; } else if (dataSize == 1) {
00002AEA  0C85 0000 4753          cmp.l     #1,D5
00002AEE  0001      
00002AF0  662C      4754          bne.s     MemoryTest_44
                    4755   ; *wordAddressPtr = dataPattern;
00002AF2  3883      4756          move.w    D3,(A4)
                    4757   ; if ((*wordAddressPtr) != dataPattern) {
00002AF4  3014      4758          move.w    (A4),D0
00002AF6  C0BC 0000 4759          and.l     #65535,D0
00002AFA  FFFF      
00002AFC  B083      4760          cmp.l     D3,D0
00002AFE  671C      4761          beq.s     MemoryTest_46
                    4762   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002B00  2F03      4763          move.l    D3,-(A7)
00002B02  2042      4764          move.l    D2,A0
00002B04  1210      4765          move.b    (A0),D1
00002B06  C2BC 0000 4766          and.l     #255,D1
00002B0A  00FF      
00002B0C  2F01      4767          move.l    D1,-(A7)
00002B0E  2F02      4768          move.l    D2,-(A7)
00002B10  4879 0000 4769          pea       @m68kde~1_148.L
00002B14  553E      
00002B16  4E92      4770          jsr       (A2)
00002B18  DEFC 0010 4771          add.w     #16,A7
                    4772   MemoryTest_46:
00002B1C  6022      4773          bra.s     MemoryTest_48
                    4774   MemoryTest_44:
                    4775   ; }
                    4776   ; } else {
                    4777   ; *longAddressPtr = dataPattern;
00002B1E  2683      4778          move.l    D3,(A3)
                    4779   ; if ((*longAddressPtr) != dataPattern) {
00002B20  B693      4780          cmp.l     (A3),D3
00002B22  671C      4781          beq.s     MemoryTest_48
                    4782   ; printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
00002B24  2F03      4783          move.l    D3,-(A7)
00002B26  2042      4784          move.l    D2,A0
00002B28  1210      4785          move.b    (A0),D1
00002B2A  C2BC 0000 4786          and.l     #255,D1
00002B2E  00FF      
00002B30  2F01      4787          move.l    D1,-(A7)
00002B32  2F02      4788          move.l    D2,-(A7)
00002B34  4879 0000 4789          pea       @m68kde~1_148.L
00002B38  553E      
00002B3A  4E92      4790          jsr       (A2)
00002B3C  DEFC 0010 4791          add.w     #16,A7
                    4792   MemoryTest_48:
                    4793   ; }
                    4794   ; }
                    4795   ; // if ((*startAddressPtr) != dataPattern) {
                    4796   ; //     printf("ERROR... Value written to address 0x%x == 0x%x. Value Expected: 0x%x\n", (void*)startAddressPtr, *startAddressPtr, dataPattern);
                    4797   ; // }
                    4798   ; addrCount++;
00002B40  52AE FFFC 4799          addq.l    #1,-4(A6)
                    4800   ; if (addrCount % 128 == 0) {
00002B44  2F2E FFFC 4801          move.l    -4(A6),-(A7)
00002B48  4878 0080 4802          pea       128
00002B4C  4EB9 0000 4803          jsr       ULDIV
00002B50  2E8A      
00002B52  202F 0004 4804          move.l    4(A7),D0
00002B56  504F      4805          addq.w    #8,A7
00002B58  4A80      4806          tst.l     D0
00002B5A  6600 0054 4807          bne       MemoryTest_55
                    4808   ; if (dataSize == 0) {
00002B5E  4A85      4809          tst.l     D5
00002B60  661C      4810          bne.s     MemoryTest_52
                    4811   ; printf("Address: 0x%x Value: 0x%02X\n",
00002B62  2042      4812          move.l    D2,A0
00002B64  1210      4813          move.b    (A0),D1
00002B66  C2BC 0000 4814          and.l     #255,D1
00002B6A  00FF      
00002B6C  2F01      4815          move.l    D1,-(A7)
00002B6E  2F02      4816          move.l    D2,-(A7)
00002B70  4879 0000 4817          pea       @m68kde~1_149.L
00002B74  5584      
00002B76  4E92      4818          jsr       (A2)
00002B78  DEFC 000C 4819          add.w     #12,A7
00002B7C  6032      4820          bra.s     MemoryTest_55
                    4821   MemoryTest_52:
                    4822   ; (unsigned int)startAddressPtr, *startAddressPtr);
                    4823   ; }
                    4824   ; else if (dataSize == 1) {
00002B7E  0C85 0000 4825          cmp.l     #1,D5
00002B82  0001      
00002B84  661A      4826          bne.s     MemoryTest_54
                    4827   ; printf("Address: 0x%x Value: 0x%04X\n",
00002B86  3214      4828          move.w    (A4),D1
00002B88  C2BC 0000 4829          and.l     #65535,D1
00002B8C  FFFF      
00002B8E  2F01      4830          move.l    D1,-(A7)
00002B90  2F0C      4831          move.l    A4,-(A7)
00002B92  4879 0000 4832          pea       @m68kde~1_150.L
00002B96  55A2      
00002B98  4E92      4833          jsr       (A2)
00002B9A  DEFC 000C 4834          add.w     #12,A7
00002B9E  6010      4835          bra.s     MemoryTest_55
                    4836   MemoryTest_54:
                    4837   ; (unsigned int)wordAddressPtr, *wordAddressPtr);
                    4838   ; }
                    4839   ; else {
                    4840   ; printf("Address: 0x%x Value: 0x%08X\n",
00002BA0  2F13      4841          move.l    (A3),-(A7)
00002BA2  2F0B      4842          move.l    A3,-(A7)
00002BA4  4879 0000 4843          pea       @m68kde~1_151.L
00002BA8  55C0      
00002BAA  4E92      4844          jsr       (A2)
00002BAC  DEFC 000C 4845          add.w     #12,A7
                    4846   MemoryTest_55:
                    4847   ; (unsigned int)longAddressPtr, *longAddressPtr);
                    4848   ; }
                    4849   ; }
                    4850   ; startAddressPtr += byteLength;
00002BB0  D484      4851          add.l     D4,D2
00002BB2  6000 FECC 4852          bra       MemoryTest_35
                    4853   MemoryTest_37:
00002BB6  4CDF 3CFC 4854          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002BBA  4E5E      4855          unlk      A6
00002BBC  4E75      4856          rts
                    4857   ; }
                    4858   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4859   ; }
                    4860   ; void main(void)
                    4861   ; {
                    4862   _main:
00002BBE  4E56 FFF4 4863          link      A6,#-12
00002BC2  48E7 3030 4864          movem.l   D2/D3/A2/A3,-(A7)
00002BC6  45F8 0A30 4865          lea       _InstallExceptionHandler.L,A2
00002BCA  47F9 0000 4866          lea       _printf.L,A3
00002BCE  3924      
                    4867   ; char c ;
                    4868   ; int i, j ;
                    4869   ; char *BugMessage = "DE1-68k Bug V1.77";
00002BD0  41F9 0000 4870          lea       @m68kde~1_152.L,A0
00002BD4  55DE      
00002BD6  2608      4871          move.l    A0,D3
                    4872   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002BD8  41F9 0000 4873          lea       @m68kde~1_153.L,A0
00002BDC  55F0      
00002BDE  2D48 FFFC 4874          move.l    A0,-4(A6)
                    4875   ; KillAllBreakPoints() ;
00002BE2  4EB8 1F04 4876          jsr       _KillAllBreakPoints
                    4877   ; i = x = y = z = PortA_Count = 0;
00002BE6  42B9 0B00 4878          clr.l     _PortA_Count.L
00002BEA  00D4      
00002BEC  42B9 0B00 4879          clr.l     _z.L
00002BF0  00D0      
00002BF2  42B9 0B00 4880          clr.l     _y.L
00002BF6  00CC      
00002BF8  42B9 0B00 4881          clr.l     _x.L
00002BFC  00C8      
00002BFE  4282      4882          clr.l     D2
                    4883   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002C00  42B9 0B00 4884          clr.l     _GoFlag.L
00002C04  00DC      
00002C06  42B9 0B00 4885          clr.l     _Trace.L
00002C0A  00D8      
                    4886   ; Echo = 1 ;
00002C0C  23FC 0000 4887          move.l    #1,_Echo.L
00002C10  0001 0B00 
00002C14  00E0      
                    4888   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002C16  42B9 0B00 4889          clr.l     _d7.L
00002C1A  0100      
00002C1C  42B9 0B00 4890          clr.l     _d6.L
00002C20  00FC      
00002C22  42B9 0B00 4891          clr.l     _d5.L
00002C26  00F8      
00002C28  42B9 0B00 4892          clr.l     _d4.L
00002C2C  00F4      
00002C2E  42B9 0B00 4893          clr.l     _d3.L
00002C32  00F0      
00002C34  42B9 0B00 4894          clr.l     _d2.L
00002C38  00EC      
00002C3A  42B9 0B00 4895          clr.l     _d1.L
00002C3E  00E8      
00002C40  42B9 0B00 4896          clr.l     _d0.L
00002C44  00E4      
                    4897   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002C46  42B9 0B00 4898          clr.l     _a6.L
00002C4A  011C      
00002C4C  42B9 0B00 4899          clr.l     _a5.L
00002C50  0118      
00002C52  42B9 0B00 4900          clr.l     _a4.L
00002C56  0114      
00002C58  42B9 0B00 4901          clr.l     _a3.L
00002C5C  0110      
00002C5E  42B9 0B00 4902          clr.l     _a2.L
00002C62  010C      
00002C64  42B9 0B00 4903          clr.l     _a1.L
00002C68  0108      
00002C6A  42B9 0B00 4904          clr.l     _a0.L
00002C6E  0104      
                    4905   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002C70  23FC 0800 4906          move.l    #134217728,_PC.L
00002C74  0000 0B00 
00002C78  0120      
00002C7A  23FC 0C00 4907          move.l    #201326592,_SSP.L
00002C7E  0000 0B00 
00002C82  0124      
00002C84  23FC 0C00 4908          move.l    #201326592,_USP.L
00002C88  0000 0B00 
00002C8C  0128      
                    4909   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002C8E  33FC 2000 4910          move.w    #8192,_SR.L
00002C92  0B00 012C 
                    4911   ; // Initialise Breakpoint variables
                    4912   ; for(i = 0; i < 8; i++)  {
00002C96  4282      4913          clr.l     D2
                    4914   main_1:
00002C98  0C82 0000 4915          cmp.l     #8,D2
00002C9C  0008      
00002C9E  6C00 004C 4916          bge       main_3
                    4917   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002CA2  2002      4918          move.l    D2,D0
00002CA4  E588      4919          lsl.l     #2,D0
00002CA6  41F9 0B00 4920          lea       _BreakPointAddress.L,A0
00002CAA  012E      
00002CAC  42B0 0800 4921          clr.l     0(A0,D0.L)
                    4922   ; WatchPointAddress[i] = 0 ;
00002CB0  2002      4923          move.l    D2,D0
00002CB2  E588      4924          lsl.l     #2,D0
00002CB4  41F9 0B00 4925          lea       _WatchPointAddress.L,A0
00002CB8  0182      
00002CBA  42B0 0800 4926          clr.l     0(A0,D0.L)
                    4927   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002CBE  2002      4928          move.l    D2,D0
00002CC0  E388      4929          lsl.l     #1,D0
00002CC2  41F9 0B00 4930          lea       _BreakPointInstruction.L,A0
00002CC6  014E      
00002CC8  4270 0800 4931          clr.w     0(A0,D0.L)
                    4932   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002CCC  2002      4933          move.l    D2,D0
00002CCE  E588      4934          lsl.l     #2,D0
00002CD0  41F9 0B00 4935          lea       _BreakPointSetOrCleared.L,A0
00002CD4  015E      
00002CD6  42B0 0800 4936          clr.l     0(A0,D0.L)
                    4937   ; WatchPointSetOrCleared[i] = 0;
00002CDA  2002      4938          move.l    D2,D0
00002CDC  E588      4939          lsl.l     #2,D0
00002CDE  41F9 0B00 4940          lea       _WatchPointSetOrCleared.L,A0
00002CE2  01A2      
00002CE4  42B0 0800 4941          clr.l     0(A0,D0.L)
00002CE8  5282      4942          addq.l    #1,D2
00002CEA  60AC      4943          bra       main_1
                    4944   main_3:
                    4945   ; }
                    4946   ; Init_RS232() ;     // initialise the RS232 port
00002CEC  4EB8 0B12 4947          jsr       _Init_RS232
                    4948   ; Init_LCD() ;
00002CF0  4EB8 095E 4949          jsr       _Init_LCD
                    4950   ; SPI_Init();
00002CF4  4EB8 10FC 4951          jsr       _SPI_Init
                    4952   ; for( i = 32; i < 48; i++)
00002CF8  7420      4953          moveq     #32,D2
                    4954   main_4:
00002CFA  0C82 0000 4955          cmp.l     #48,D2
00002CFE  0030      
00002D00  6C0E      4956          bge.s     main_6
                    4957   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002D02  2F02      4958          move.l    D2,-(A7)
00002D04  4878 277C 4959          pea       _UnhandledTrap.L
00002D08  4E92      4960          jsr       (A2)
00002D0A  504F      4961          addq.w    #8,A7
00002D0C  5282      4962          addq.l    #1,D2
00002D0E  60EA      4963          bra       main_4
                    4964   main_6:
                    4965   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002D10  4878 002F 4966          pea       47
00002D14  4878 2456 4967          pea       _menu.L
00002D18  4E92      4968          jsr       (A2)
00002D1A  504F      4969          addq.w    #8,A7
                    4970   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002D1C  4878 0019 4971          pea       25
00002D20  4878 2722 4972          pea       _UnhandledIRQ1.L
00002D24  4E92      4973          jsr       (A2)
00002D26  504F      4974          addq.w    #8,A7
                    4975   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002D28  4878 001A 4976          pea       26
00002D2C  4878 272E 4977          pea       _UnhandledIRQ2.L
00002D30  4E92      4978          jsr       (A2)
00002D32  504F      4979          addq.w    #8,A7
                    4980   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002D34  4878 001B 4981          pea       27
00002D38  4878 273A 4982          pea       _UnhandledIRQ3.L
00002D3C  4E92      4983          jsr       (A2)
00002D3E  504F      4984          addq.w    #8,A7
                    4985   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002D40  4878 001C 4986          pea       28
00002D44  4878 2746 4987          pea       _UnhandledIRQ4.L
00002D48  4E92      4988          jsr       (A2)
00002D4A  504F      4989          addq.w    #8,A7
                    4990   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002D4C  4878 001D 4991          pea       29
00002D50  4878 2752 4992          pea       _UnhandledIRQ5.L
00002D54  4E92      4993          jsr       (A2)
00002D56  504F      4994          addq.w    #8,A7
                    4995   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002D58  4878 001E 4996          pea       30
00002D5C  4878 275E 4997          pea       _UnhandledIRQ6.L
00002D60  4E92      4998          jsr       (A2)
00002D62  504F      4999          addq.w    #8,A7
                    5000   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002D64  4878 001F 5001          pea       31
00002D68  4878 2770 5002          pea       _UnhandledIRQ7.L
00002D6C  4E92      5003          jsr       (A2)
00002D6E  504F      5004          addq.w    #8,A7
                    5005   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002D70  4878 002E 5006          pea       46
00002D74  4878 2192 5007          pea       _HandleBreakPoint.L
00002D78  4E92      5008          jsr       (A2)
00002D7A  504F      5009          addq.w    #8,A7
                    5010   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002D7C  4878 001D 5011          pea       29
00002D80  4878 1872 5012          pea       _DumpRegistersandPause.L
00002D84  4E92      5013          jsr       (A2)
00002D86  504F      5014          addq.w    #8,A7
                    5015   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002D88  4878 0002 5016          pea       2
00002D8C  4878 278A 5017          pea       _BusError.L
00002D90  4E92      5018          jsr       (A2)
00002D92  504F      5019          addq.w    #8,A7
                    5020   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002D94  4878 0003 5021          pea       3
00002D98  4878 2798 5022          pea       _AddressError.L
00002D9C  4E92      5023          jsr       (A2)
00002D9E  504F      5024          addq.w    #8,A7
                    5025   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002DA0  4878 0004 5026          pea       4
00002DA4  4878 27A6 5027          pea       _IllegalInstruction.L
00002DA8  4E92      5028          jsr       (A2)
00002DAA  504F      5029          addq.w    #8,A7
                    5030   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002DAC  4878 0005 5031          pea       5
00002DB0  4878 27B4 5032          pea       _Dividebyzero.L
00002DB4  4E92      5033          jsr       (A2)
00002DB6  504F      5034          addq.w    #8,A7
                    5035   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002DB8  4878 0006 5036          pea       6
00002DBC  4878 27C2 5037          pea       _Check.L
00002DC0  4E92      5038          jsr       (A2)
00002DC2  504F      5039          addq.w    #8,A7
                    5040   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002DC4  4878 0007 5041          pea       7
00002DC8  4878 27D0 5042          pea       _Trapv.L
00002DCC  4E92      5043          jsr       (A2)
00002DCE  504F      5044          addq.w    #8,A7
                    5045   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002DD0  4878 0008 5046          pea       8
00002DD4  4878 27DE 5047          pea       _PrivError.L
00002DD8  4E92      5048          jsr       (A2)
00002DDA  504F      5049          addq.w    #8,A7
                    5050   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002DDC  4878 000F 5051          pea       15
00002DE0  4878 27EC 5052          pea       _UnitIRQ.L
00002DE4  4E92      5053          jsr       (A2)
00002DE6  504F      5054          addq.w    #8,A7
                    5055   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002DE8  4878 0018 5056          pea       24
00002DEC  4878 27C2 5057          pea       _Check.L
00002DF0  4E92      5058          jsr       (A2)
00002DF2  504F      5059          addq.w    #8,A7
                    5060   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002DF4  4EB8 0BA6 5061          jsr       _FlushKeyboard
                    5062   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002DF8  4239 0040 5063          clr.b     4194314
00002DFC  000A      
                    5064   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5065   ; if (((char)(PortB & 0x02)) == (char)(0x02))    {
00002DFE  1039 0040 5066          move.b    4194306,D0
00002E02  0002      
00002E04  C03C 0002 5067          and.b     #2,D0
00002E08  0C00 0002 5068          cmp.b     #2,D0
00002E0C  6628      5069          bne.s     main_7
                    5070   ; LoadFromFlashChip();
00002E0E  4EB8 138A 5071          jsr       _LoadFromFlashChip
                    5072   ; printf("\r\nRunning.....") ;
00002E12  4879 0000 5073          pea       @m68kde~1_154.L
00002E16  560E      
00002E18  4E93      5074          jsr       (A3)
00002E1A  584F      5075          addq.w    #4,A7
                    5076   ; Oline1("Running.....") ;
00002E1C  4879 0000 5077          pea       @m68kde~1_155.L
00002E20  561E      
00002E22  4EB8 0A02 5078          jsr       _Oline1
00002E26  584F      5079          addq.w    #4,A7
                    5080   ; GoFlag = 1;
00002E28  23FC 0000 5081          move.l    #1,_GoFlag.L
00002E2C  0001 0B00 
00002E30  00DC      
                    5082   ; go() ;
00002E32  4EB8 08B8 5083          jsr       _go
                    5084   main_7:
                    5085   ; }
                    5086   ; // otherwise start the debug monitor
                    5087   ; Oline0(BugMessage) ;
00002E36  2F03      5088          move.l    D3,-(A7)
00002E38  4EB8 09D4 5089          jsr       _Oline0
00002E3C  584F      5090          addq.w    #4,A7
                    5091   ; Oline1("By: PJ Davies") ;
00002E3E  4879 0000 5092          pea       @m68kde~1_156.L
00002E42  562C      
00002E44  4EB8 0A02 5093          jsr       _Oline1
00002E48  584F      5094          addq.w    #4,A7
                    5095   ; printf("\r\n%s", BugMessage) ;
00002E4A  2F03      5096          move.l    D3,-(A7)
00002E4C  4879 0000 5097          pea       @m68kde~1_157.L
00002E50  563A      
00002E52  4E93      5098          jsr       (A3)
00002E54  504F      5099          addq.w    #8,A7
                    5100   ; printf("\r\n%s", CopyrightMessage) ;
00002E56  2F2E FFFC 5101          move.l    -4(A6),-(A7)
00002E5A  4879 0000 5102          pea       @m68kde~1_157.L
00002E5E  563A      
00002E60  4E93      5103          jsr       (A3)
00002E62  504F      5104          addq.w    #8,A7
                    5105   ; printf("\n Student Names:\n Zachariah Joseph: 45500055 \n Umair Mazhar: 20333308\n");
00002E64  4879 0000 5106          pea       @m68kde~1_158.L
00002E68  5640      
00002E6A  4E93      5107          jsr       (A3)
00002E6C  584F      5108          addq.w    #4,A7
                    5109   ; menu();
00002E6E  4EB8 2456 5110          jsr       _menu
00002E72  4CDF 0C0C 5111          movem.l   (A7)+,D2/D3/A2/A3
00002E76  4E5E      5112          unlk      A6
00002E78  4E75      5113          rts
                    5114   ; }
                    5115   _strcpy:
00002E7A  206F 0004 5116          move.l    (4,A7),A0
00002E7E  226F 0008 5117          move.l    (8,A7),A1
00002E82  2008      5118          move.l    A0,D0
                    5119   strcpy_1:
00002E84  10D9      5120          move.b    (A1)+,(A0)+
00002E86  66FC      5121          bne       strcpy_1
00002E88  4E75      5122          rts
                    5123   ULDIV:
00002E8A  4E56 0000 5124          link    A6,#0
00002E8E  48E7 C000 5125          movem.l D0/D1,-(A7)
00002E92  222E 0008 5126          move.l  8(A6),D1
00002E96  202E 000C 5127          move.l  12(A6),D0
00002E9A  6036      5128          bra.s   ldiv_3
                    5129   LDIV:
00002E9C  4E56 0000 5130          link    A6,#0
00002EA0  48E7 C000 5131          movem.l D0/D1,-(A7)
00002EA4  222E 0008 5132          move.l  8(A6),D1
00002EA8  202E 000C 5133          move.l  12(A6),D0
00002EAC  4A80      5134          tst.l   D0
00002EAE  6A0E      5135          bpl.s   ldiv_1
00002EB0  4480      5136          neg.l   D0
00002EB2  4A81      5137          tst.l   D1
00002EB4  6A14      5138          bpl.s   ldiv_2
00002EB6  4481      5139          neg.l   D1
00002EB8  612A      5140          bsr.s   dodiv
00002EBA  4481      5141          neg.l   D1
00002EBC  6016      5142          bra.s   ldiv_4
                    5143   ldiv_1:
00002EBE  4A81      5144          tst.l   D1
00002EC0  6A10      5145          bpl.s   ldiv_3
00002EC2  4481      5146          neg.l   D1
00002EC4  611E      5147          bsr.s   dodiv
00002EC6  4480      5148          neg.l   D0
00002EC8  600A      5149          bra.s   ldiv_4
                    5150   ldiv_2:
00002ECA  6118      5151          bsr.s   dodiv
00002ECC  4480      5152          neg.l   D0
00002ECE  4481      5153          neg.l   D1
00002ED0  6002      5154          bra.s   ldiv_4
                    5155   ldiv_3:
00002ED2  6110      5156          bsr.s   dodiv
                    5157   ldiv_4:
00002ED4  2D40 0008 5158          move.l  D0,8(A6)
00002ED8  2D41 000C 5159          move.l  D1,12(A6)
00002EDC  4CDF 0003 5160          movem.l (A7)+,D0/D1
00002EE0  4E5E      5161          unlk    A6
00002EE2  4E75      5162          rts
                    5163   dodiv:
00002EE4  0C81 0000 5164          cmpi.l  #$FFFF,D1
00002EE8  FFFF      
00002EEA  6236      5165          bhi.s   dodiv_2
00002EEC  0C80 0000 5166          cmpi.l  #$FFFF,D0
00002EF0  FFFF      
00002EF2  6210      5167          bhi.s   dodiv_1
00002EF4  80C1      5168          divu    D1,D0
00002EF6  2200      5169          move.l  D0,D1
00002EF8  4241      5170          clr.w   D1
00002EFA  4841      5171          swap    D1
00002EFC  0280 0000 5172          andi.l  #$FFFF,D0
00002F00  FFFF      
00002F02  4E75      5173          rts
                    5174   dodiv_1:
00002F04  48A7 A000 5175          movem.w D0/D2,-(A7)
00002F08  4240      5176          clr.w   D0
00002F0A  4840      5177          swap    D0
00002F0C  80C1      5178          divu    D1,D0
00002F0E  3400      5179          move.w  D0,D2
00002F10  301F      5180          move.w  (A7)+,D0
00002F12  80C1      5181          divu    D1,D0
00002F14  4840      5182          swap    D0
00002F16  4281      5183          clr.l   D1
00002F18  3200      5184          move.w  D0,D1
00002F1A  3002      5185          move.w  D2,D0
00002F1C  4840      5186          swap    D0
00002F1E  341F      5187          move.w  (A7)+,D2
00002F20  4E75      5188          rts
                    5189   dodiv_2:
00002F22  48E7 3800 5190          movem.l D2/D3/D4,-(A7)
00002F26  2401      5191          move.l  D1,D2
00002F28  4242      5192          clr.w   D2
00002F2A  4842      5193          swap    D2
00002F2C  5282      5194          addq.l  #1,D2
00002F2E  2600      5195          move.l  D0,D3
00002F30  2801      5196          move.l  D1,D4
00002F32  2202      5197          move.l  D2,D1
00002F34  61CE      5198          bsr.s   dodiv_1
00002F36  2204      5199          move.l  D4,D1
00002F38  82C2      5200          divu    D2,D1
00002F3A  80C1      5201          divu    D1,D0
00002F3C  0280 0000 5202          andi.l  #$FFFF,D0
00002F40  FFFF      
                    5203   dodiv_3:
00002F42  2204      5204          move.l  D4,D1
00002F44  2404      5205          move.l  D4,D2
00002F46  4842      5206          swap    D2
00002F48  C2C0      5207          mulu    D0,D1
00002F4A  C4C0      5208          mulu    D0,D2
00002F4C  4842      5209          swap    D2
00002F4E  D282      5210          add.l   D2,D1
00002F50  9283      5211          sub.l   D3,D1
00002F52  620A      5212          bhi.s   dodiv_4
00002F54  4481      5213          neg.l   D1
00002F56  B881      5214          cmp.l   D1,D4
00002F58  6208      5215          bhi.s   dodiv_5
00002F5A  5280      5216          addq.l  #1,D0
00002F5C  60E4      5217          bra.s   dodiv_3
                    5218   dodiv_4:
00002F5E  5380      5219          subq.l  #1,D0
00002F60  60E0      5220          bra.s   dodiv_3
                    5221   dodiv_5:
00002F62  4CDF 001C 5222          movem.l (A7)+,D2/D3/D4
00002F66  4E75      5223          rts
                    5224   _putch:
00002F68  4E56 0000 5225          link      A6,#0
00002F6C  48E7 2000 5226          movem.l   D2,-(A7)
00002F70  242E 0008 5227          move.l    8(A6),D2
00002F74  0C82 0000 5228          cmp.l     #10,D2
00002F78  000A      
00002F7A  660A      5229          bne.s     putch_1
00002F7C  4878 000D 5230          pea       13
00002F80  6100 DBBA 5231          bsr       __putch
00002F84  584F      5232          addq.w    #4,A7
                    5233   putch_1:
00002F86  2F02      5234          move.l    D2,-(A7)
00002F88  6100 DBB2 5235          bsr       __putch
00002F8C  584F      5236          addq.w    #4,A7
00002F8E  2002      5237          move.l    D2,D0
00002F90  4CDF 0004 5238          movem.l   (A7)+,D2
00002F94  4E5E      5239          unlk      A6
00002F96  4E75      5240          rts
                    5241   _getch:
00002F98  48E7 2000 5242          movem.l   D2,-(A7)
00002F9C  2439 0B00 5243          move.l    __ungetbuf,D2
00002FA0  00C0      
00002FA2  2039 0B00 5244          move.l    __ungetbuf,D0
00002FA6  00C0      
00002FA8  0C80 FFFF 5245          cmp.l     #-1,D0
00002FAC  FFFF      
00002FAE  670C      5246          beq.s     getch_1
00002FB0  23FC FFFF 5247          move.l    #-1,__ungetbuf
00002FB4  FFFF 0B00 
00002FB8  00C0      
00002FBA  6010      5248          bra.s     getch_3
                    5249   getch_1:
00002FBC  6100 DBAA 5250          bsr       __getch
00002FC0  2400      5251          move.l    D0,D2
00002FC2  0C80 0000 5252          cmp.l     #13,D0
00002FC6  000D      
00002FC8  6602      5253          bne.s     getch_3
00002FCA  740A      5254          moveq     #10,D2
                    5255   getch_3:
00002FCC  2002      5256          move.l    D2,D0
00002FCE  4CDF 0004 5257          movem.l   (A7)+,D2
00002FD2  4E75      5258          rts
                    5259   _tolower:
00002FD4  4E56 0000 5260          link      A6,#0
00002FD8  48E7 2000 5261          movem.l   D2,-(A7)
00002FDC  242E 0008 5262          move.l    8(A6),D2
00002FE0  0C82 0000 5263          cmp.l     #65,D2
00002FE4  0041      
00002FE6  6D0E      5264          blt.s     tolower_1
00002FE8  0C82 0000 5265          cmp.l     #90,D2
00002FEC  005A      
00002FEE  6E06      5266          bgt.s     tolower_1
00002FF0  84BC 0000 5267          or.l      #32,D2
00002FF4  0020      
                    5268   tolower_1:
00002FF6  2002      5269          move.l    D2,D0
00002FF8  4CDF 0004 5270          movem.l   (A7)+,D2
00002FFC  4E5E      5271          unlk      A6
00002FFE  4E75      5272          rts
                    5273   _sprintf:
00003000  4E56 FFFC 5274          link      A6,#-4
00003004  48E7 2000 5275          movem.l   D2,-(A7)
00003008  41EE 000C 5276          lea       12(A6),A0
0000300C  5848      5277          addq.w    #4,A0
0000300E  2408      5278          move.l    A0,D2
00003010  2F02      5279          move.l    D2,-(A7)
00003012  2F2E 000C 5280          move.l    12(A6),-(A7)
00003016  2F2E 0008 5281          move.l    8(A6),-(A7)
0000301A  6100 09EC 5282          bsr       _vsprintf
0000301E  DEFC 000C 5283          add.w     #12,A7
00003022  2D40 FFFC 5284          move.l    D0,-4(A6)
00003026  4282      5285          clr.l     D2
00003028  202E FFFC 5286          move.l    -4(A6),D0
0000302C  4CDF 0004 5287          movem.l   (A7)+,D2
00003030  4E5E      5288          unlk      A6
00003032  4E75      5289          rts
                    5290   _memset:
00003034  206F 0004 5291          move.l    (4,A7),A0
00003038  202F 0008 5292          move.l    (8,A7),D0
0000303C  222F 000C 5293          move.l    (12,A7),D1
00003040  2248      5294          move.l    A0,A1	
                    5295   memset_1:
00003042  12C0      5296          move.b    D0,(A1)+
00003044  5341      5297          subq      #1,D1
00003046  66FA      5298          bne       memset_1
00003048  2008      5299          move.l    A0,D0
0000304A  4E75      5300          rts
                    5301   _strcat:
0000304C  206F 0004 5302          move.l    (4,A7),A0	
00003050  226F 0008 5303          move.l    (8,A7),A1	
00003054  2008      5304          move.l    A0,D0		
                    5305   strcat_0:
00003056  4A18      5306          tst.b     (A0)+
00003058  66FC      5307          bne       strcat_0
0000305A  5348      5308          subq      #1,A0
                    5309   strcat_1:
0000305C  10D9      5310          move.b    (A1)+,(A0)+
0000305E  66FC      5311          bne       strcat_1
00003060  4E75      5312          rts
                    5313   _toupper:
00003062  4E56 0000 5314          link      A6,#0
00003066  48E7 2000 5315          movem.l   D2,-(A7)
0000306A  242E 0008 5316          move.l    8(A6),D2
0000306E  0C82 0000 5317          cmp.l     #97,D2
00003072  0061      
00003074  6D0E      5318          blt.s     toupper_1
00003076  0C82 0000 5319          cmp.l     #122,D2
0000307A  007A      
0000307C  6E06      5320          bgt.s     toupper_1
0000307E  C4BC 0000 5321          and.l     #95,D2
00003082  005F      
                    5322   toupper_1:
00003084  2002      5323          move.l    D2,D0
00003086  4CDF 0004 5324          movem.l   (A7)+,D2
0000308A  4E5E      5325          unlk      A6
0000308C  4E75      5326          rts
                    5327   @vsscanf_scanread:
0000308E  4E56 FFFC 5328          link      A6,#-4
00003092  48E7 0020 5329          movem.l   A2,-(A7)
00003096  45F9 0000 5330          lea       @vsscanf_bufx,A2
0000309A  5688      
0000309C  4AAE 0008 5331          tst.l     8(A6)
000030A0  6722      5332          beq.s     @vsscanf_scanread_1
000030A2  206E 0008 5333          move.l    8(A6),A0
000030A6  58AE 0008 5334          addq.l    #4,8(A6)
000030AA  2050      5335          move.l    (A0),A0
000030AC  1010      5336          move.b    (A0),D0
000030AE  4880      5337          ext.w     D0
000030B0  48C0      5338          ext.l     D0
000030B2  2D40 FFFC 5339          move.l    D0,-4(A6)
000030B6  6706      5340          beq.s     @vsscanf_scanread_3
000030B8  202E FFFC 5341          move.l    -4(A6),D0
000030BC  6002      5342          bra.s     @vsscanf_scanread_4
                    5343   @vsscanf_scanread_3:
000030BE  70FF      5344          moveq     #-1,D0
                    5345   @vsscanf_scanread_4:
000030C0  6000 0032 5346          bra       @vsscanf_scanread_5
                    5347   @vsscanf_scanread_1:
000030C4  2052      5348          move.l    (A2),A0
000030C6  1010      5349          move.b    (A0),D0
000030C8  6620      5350          bne.s     @vsscanf_scanread_6
000030CA  4879 0B00 5351          pea       @vsscanf_buf
000030CE  0546      
000030D0  6100 1038 5352          bsr       _gets
000030D4  584F      5353          addq.w    #4,A7
000030D6  2480      5354          move.l    D0,(A2)
000030D8  4879 0000 5355          pea       @vsscanf_1
000030DC  568C      
000030DE  4879 0B00 5356          pea       @vsscanf_buf
000030E2  0546      
000030E4  6100 FF66 5357          bsr       _strcat
000030E8  504F      5358          addq.w    #8,A7
                    5359   @vsscanf_scanread_6:
000030EA  2052      5360          move.l    (A2),A0
000030EC  5292      5361          addq.l    #1,(A2)
000030EE  1010      5362          move.b    (A0),D0
000030F0  4880      5363          ext.w     D0
000030F2  48C0      5364          ext.l     D0
                    5365   @vsscanf_scanread_5:
000030F4  4CDF 0400 5366          movem.l   (A7)+,A2
000030F8  4E5E      5367          unlk      A6
000030FA  4E75      5368          rts
                    5369   @vsscanf_scanputback:
000030FC  4E56 0000 5370          link      A6,#0
00003100  48E7 3000 5371          movem.l   D2/D3,-(A7)
00003104  242E 000C 5372          move.l    12(A6),D2
00003108  262E 0008 5373          move.l    8(A6),D3
0000310C  6718      5374          beq.s     @vsscanf_scanputback_1
0000310E  0C82 FFFF 5375          cmp.l     #-1,D2
00003112  FFFF      
00003114  670A      5376          beq.s     @vsscanf_scanputback_3
00003116  5983      5377          subq.l    #4,D3
00003118  2043      5378          move.l    D3,A0
0000311A  2050      5379          move.l    (A0),A0
0000311C  1082      5380          move.b    D2,(A0)
0000311E  6004      5381          bra.s     @vsscanf_scanputback_4
                    5382   @vsscanf_scanputback_3:
00003120  2043      5383          move.l    D3,A0
00003122  5390      5384          subq.l    #1,(A0)
                    5385   @vsscanf_scanputback_4:
00003124  602E      5386          bra.s     @vsscanf_scanputback_6
                    5387   @vsscanf_scanputback_1:
00003126  41F9 0B00 5388          lea       @vsscanf_buf,A0
0000312A  0546      
0000312C  2008      5389          move.l    A0,D0
0000312E  B0B9 0000 5390          cmp.l     @vsscanf_bufx,D0
00003132  5688      
00003134  6610      5391          bne.s     @vsscanf_scanputback_5
00003136  4239 0B00 5392          clr.b     @vsscanf_buf
0000313A  0546      
0000313C  2F02      5393          move.l    D2,-(A7)
0000313E  6100 103C 5394          bsr       _ungetch
00003142  584F      5395          addq.w    #4,A7
00003144  600E      5396          bra.s     @vsscanf_scanputback_6
                    5397   @vsscanf_scanputback_5:
00003146  53B9 0000 5398          subq.l    #1,@vsscanf_bufx
0000314A  5688      
0000314C  2079 0000 5399          move.l    @vsscanf_bufx,A0
00003150  5688      
00003152  1082      5400          move.b    D2,(A0)
                    5401   @vsscanf_scanputback_6:
00003154  2002      5402          move.l    D2,D0
00003156  4CDF 000C 5403          movem.l   (A7)+,D2/D3
0000315A  4E5E      5404          unlk      A6
0000315C  4E75      5405          rts
                    5406   @vsscanf_scanspace:
0000315E  4E56 0000 5407          link      A6,#0
00003162  48E7 2000 5408          movem.l   D2,-(A7)
                    5409   @vsscanf_scanspace_1:
00003166  2F2E 0008 5410          move.l    8(A6),-(A7)
0000316A  6100 FF22 5411          bsr       @vsscanf_scanread
0000316E  584F      5412          addq.w    #4,A7
00003170  2400      5413          move.l    D0,D2
00003172  206E 000C 5414          move.l    12(A6),A0
00003176  5290      5415          addq.l    #1,(A0)
00003178  2042      5416          move.l    D2,A0
0000317A  43F9 0000 5417          lea       __ctype,A1
0000317E  568E      
00003180  1030 9801 5418          move.b    1(A0,A1.L),D0
00003184  C03C 0010 5419          and.b     #16,D0
00003188  66DC      5420          bne       @vsscanf_scanspace_1
0000318A  2002      5421          move.l    D2,D0
0000318C  4CDF 0004 5422          movem.l   (A7)+,D2
00003190  4E5E      5423          unlk      A6
00003192  4E75      5424          rts
                    5425   @vsscanf_scanselect:
00003194  4E56 0000 5426          link      A6,#0
00003198  48E7 3F20 5427          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
0000319C  262E 000C 5428          move.l    12(A6),D3
000031A0  2C2E 0018 5429          move.l    24(A6),D6
000031A4  2E2E 0014 5430          move.l    20(A6),D7
000031A8  2043      5431          move.l    D3,A0
000031AA  1010      5432          move.b    (A0),D0
000031AC  4880      5433          ext.w     D0
000031AE  48C0      5434          ext.l     D0
000031B0  0C80 0000 5435          cmp.l     #94,D0
000031B4  005E      
000031B6  6608      5436          bne.s     @vsscanf_scanselect_1
000031B8  347C 0001 5437          move.w    #1,A2
000031BC  5283      5438          addq.l    #1,D3
000031BE  6004      5439          bra.s     @vsscanf_scanselect_2
                    5440   @vsscanf_scanselect_1:
000031C0  347C 0000 5441          move.w    #0,A2
                    5442   @vsscanf_scanselect_2:
000031C4  202E 0010 5443          move.l    16(A6),D0
000031C8  53AE 0010 5444          subq.l    #1,16(A6)
000031CC  4A80      5445          tst.l     D0
000031CE  6700 0108 5446          beq       @vsscanf_scanselect_5
000031D2  2F2E 0008 5447          move.l    8(A6),-(A7)
000031D6  6100 FEB6 5448          bsr       @vsscanf_scanread
000031DA  584F      5449          addq.w    #4,A7
000031DC  2800      5450          move.l    D0,D4
000031DE  0C84 FFFF 5451          cmp.l     #-1,D4
000031E2  FFFF      
000031E4  6604      5452          bne.s     @vsscanf_scanselect_6
000031E6  6000 00F0 5453          bra       @vsscanf_scanselect_5
                    5454   @vsscanf_scanselect_6:
000031EA  206E 001C 5455          move.l    28(A6),A0
000031EE  5290      5456          addq.l    #1,(A0)
000031F0  4285      5457          clr.l     D5
000031F2  4282      5458          clr.l     D2
                    5459   @vsscanf_scanselect_8:
000031F4  2043      5460          move.l    D3,A0
000031F6  1030 2800 5461          move.b    0(A0,D2.L),D0
000031FA  4880      5462          ext.w     D0
000031FC  48C0      5463          ext.l     D0
000031FE  0C80 0000 5464          cmp.l     #93,D0
00003202  005D      
00003204  6700 008E 5465          beq       @vsscanf_scanselect_10
00003208  4A82      5466          tst.l     D2
0000320A  6716      5467          beq.s     @vsscanf_scanselect_11
0000320C  2043      5468          move.l    D3,A0
0000320E  1030 2800 5469          move.b    0(A0,D2.L),D0
00003212  4880      5470          ext.w     D0
00003214  48C0      5471          ext.l     D0
00003216  0C80 0000 5472          cmp.l     #93,D0
0000321A  005D      
0000321C  6604      5473          bne.s     @vsscanf_scanselect_11
0000321E  6000 0074 5474          bra       @vsscanf_scanselect_10
                    5475   @vsscanf_scanselect_11:
00003222  4A82      5476          tst.l     D2
00003224  6700 0058 5477          beq       @vsscanf_scanselect_15
00003228  2043      5478          move.l    D3,A0
0000322A  1030 2800 5479          move.b    0(A0,D2.L),D0
0000322E  4880      5480          ext.w     D0
00003230  48C0      5481          ext.l     D0
00003232  0C80 0000 5482          cmp.l     #45,D0
00003236  002D      
00003238  6600 0044 5483          bne       @vsscanf_scanselect_15
0000323C  2043      5484          move.l    D3,A0
0000323E  2002      5485          move.l    D2,D0
00003240  5380      5486          subq.l    #1,D0
00003242  2243      5487          move.l    D3,A1
00003244  2F08      5488          move.l    A0,-(A7)
00003246  2042      5489          move.l    D2,A0
00003248  1230 0800 5490          move.b    0(A0,D0.L),D1
0000324C  B230 9801 5491          cmp.b     1(A0,A1.L),D1
00003250  6C00 002C 5492          bge       @vsscanf_scanselect_15
00003254  205F      5493          move.l    (A7)+,A0
00003256  2043      5494          move.l    D3,A0
00003258  2002      5495          move.l    D2,D0
0000325A  5380      5496          subq.l    #1,D0
0000325C  1030 0800 5497          move.b    0(A0,D0.L),D0
00003260  4880      5498          ext.w     D0
00003262  48C0      5499          ext.l     D0
00003264  B880      5500          cmp.l     D0,D4
00003266  6D12      5501          blt.s     @vsscanf_scanselect_17
00003268  2043      5502          move.l    D3,A0
0000326A  2242      5503          move.l    D2,A1
0000326C  1031 8801 5504          move.b    1(A1,A0.L),D0
00003270  4880      5505          ext.w     D0
00003272  48C0      5506          ext.l     D0
00003274  B880      5507          cmp.l     D0,D4
00003276  6E02      5508          bgt.s     @vsscanf_scanselect_17
00003278  601A      5509          bra.s     @vsscanf_scanselect_10
                    5510   @vsscanf_scanselect_17:
0000327A  5282      5511          addq.l    #1,D2
0000327C  6010      5512          bra.s     @vsscanf_scanselect_19
                    5513   @vsscanf_scanselect_15:
0000327E  2043      5514          move.l    D3,A0
00003280  1030 2800 5515          move.b    0(A0,D2.L),D0
00003284  4880      5516          ext.w     D0
00003286  48C0      5517          ext.l     D0
00003288  B880      5518          cmp.l     D0,D4
0000328A  6602      5519          bne.s     @vsscanf_scanselect_19
0000328C  6006      5520          bra.s     @vsscanf_scanselect_10
                    5521   @vsscanf_scanselect_19:
0000328E  5282      5522          addq.l    #1,D2
00003290  6000 FF62 5523          bra       @vsscanf_scanselect_8
                    5524   @vsscanf_scanselect_10:
00003294  4A82      5525          tst.l     D2
00003296  6712      5526          beq.s     @vsscanf_scanselect_23
00003298  2043      5527          move.l    D3,A0
0000329A  1030 2800 5528          move.b    0(A0,D2.L),D0
0000329E  4880      5529          ext.w     D0
000032A0  48C0      5530          ext.l     D0
000032A2  0C80 0000 5531          cmp.l     #93,D0
000032A6  005D      
000032A8  6702      5532          beq.s     @vsscanf_scanselect_21
                    5533   @vsscanf_scanselect_23:
000032AA  7A01      5534          moveq     #1,D5
                    5535   @vsscanf_scanselect_21:
000032AC  200A      5536          move.l    A2,D0
000032AE  6712      5537          beq.s     @vsscanf_scanselect_24
000032B0  4A85      5538          tst.l     D5
000032B2  660C      5539          bne.s     @vsscanf_scanselect_26
000032B4  4A87      5540          tst.l     D7
000032B6  6606      5541          bne.s     @vsscanf_scanselect_28
000032B8  2046      5542          move.l    D6,A0
000032BA  5286      5543          addq.l    #1,D6
000032BC  1084      5544          move.b    D4,(A0)
                    5545   @vsscanf_scanselect_28:
000032BE  6014      5546          bra.s     @vsscanf_scanselect_4
                    5547   @vsscanf_scanselect_26:
000032C0  6016      5548          bra.s     @vsscanf_scanselect_5
                    5549   @vsscanf_scanselect_24:
000032C2  4A85      5550          tst.l     D5
000032C4  670C      5551          beq.s     @vsscanf_scanselect_30
000032C6  4A87      5552          tst.l     D7
000032C8  6606      5553          bne.s     @vsscanf_scanselect_32
000032CA  2046      5554          move.l    D6,A0
000032CC  5286      5555          addq.l    #1,D6
000032CE  1084      5556          move.b    D4,(A0)
                    5557   @vsscanf_scanselect_32:
000032D0  6002      5558          bra.s     @vsscanf_scanselect_4
                    5559   @vsscanf_scanselect_30:
000032D2  6004      5560          bra.s     @vsscanf_scanselect_5
                    5561   @vsscanf_scanselect_4:
000032D4  6000 FEEE 5562          bra       @vsscanf_scanselect_2
                    5563   @vsscanf_scanselect_5:
000032D8  0C84 FFFF 5564          cmp.l     #-1,D4
000032DC  FFFF      
000032DE  6712      5565          beq.s     @vsscanf_scanselect_34
000032E0  2F04      5566          move.l    D4,-(A7)
000032E2  2F2E 0008 5567          move.l    8(A6),-(A7)
000032E6  6100 FE14 5568          bsr       @vsscanf_scanputback
000032EA  504F      5569          addq.w    #8,A7
000032EC  206E 001C 5570          move.l    28(A6),A0
000032F0  5390      5571          subq.l    #1,(A0)
                    5572   @vsscanf_scanselect_34:
000032F2  4A87      5573          tst.l     D7
000032F4  6604      5574          bne.s     @vsscanf_scanselect_36
000032F6  2046      5575          move.l    D6,A0
000032F8  4210      5576          clr.b     (A0)
                    5577   @vsscanf_scanselect_36:
000032FA  5283      5578          addq.l    #1,D3
000032FC  2043      5579          move.l    D3,A0
000032FE  1010      5580          move.b    (A0),D0
00003300  4880      5581          ext.w     D0
00003302  48C0      5582          ext.l     D0
00003304  0C80 0000 5583          cmp.l     #93,D0
00003308  005D      
0000330A  6702      5584          beq.s     @vsscanf_scanselect_40
0000330C  60EC      5585          bra       @vsscanf_scanselect_36
                    5586   @vsscanf_scanselect_40:
0000330E  5283      5587          addq.l    #1,D3
00003310  2003      5588          move.l    D3,D0
00003312  4CDF 04FC 5589          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003316  4E5E      5590          unlk      A6
00003318  4E75      5591          rts
                    5592   _scanflush:
0000331A  41F9 0B00 5593          lea       @vsscanf_buf,A0
0000331E  0546      
00003320  23C8 0000 5594          move.l    A0,@vsscanf_bufx
00003324  5688      
00003326  4239 0B00 5595          clr.b     @vsscanf_buf
0000332A  0546      
0000332C  4878 FFFF 5596          pea       -1
00003330  6100 0E4A 5597          bsr       _ungetch
00003334  584F      5598          addq.w    #4,A7
00003336  4E75      5599          rts
                    5600   _vsscanf:
00003338  4E56 FF88 5601          link      A6,#-120
0000333C  48E7 3F3C 5602          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003340  47F8 308E 5603          lea       @vsscanf_scanread,A3
00003344  4AAE 0008 5604          tst.l     8(A6)
00003348  6706      5605          beq.s     vsscanf_1
0000334A  41EE 0008 5606          lea       8(A6),A0
0000334E  6004      5607          bra.s     vsscanf_2
                    5608   vsscanf_1:
00003350  4280      5609          clr.l     D0
00003352  2040      5610          move.l    D0,A0
                    5611   vsscanf_2:
00003354  2A08      5612          move.l    A0,D5
00003356  42AE FFE4 5613          clr.l     -28(A6)
0000335A  4284      5614          clr.l     D4
                    5615   vsscanf_3:
0000335C  206E 000C 5616          move.l    12(A6),A0
00003360  52AE 000C 5617          addq.l    #1,12(A6)
00003364  1010      5618          move.b    (A0),D0
00003366  4880      5619          ext.w     D0
00003368  48C0      5620          ext.l     D0
0000336A  2600      5621          move.l    D0,D3
0000336C  6700 05AC 5622          beq       vsscanf_5
00003370  4286      5623          clr.l     D6
00003372  387C 0000 5624          move.w    #0,A4
00003376  0C83 0000 5625          cmp.l     #32,D3
0000337A  0020      
0000337C  6712      5626          beq.s     vsscanf_8
0000337E  0C83 0000 5627          cmp.l     #9,D3
00003382  0009      
00003384  670A      5628          beq.s     vsscanf_8
00003386  0C83 0000 5629          cmp.l     #10,D3
0000338A  000A      
0000338C  6600 0048 5630          bne       vsscanf_6
                    5631   vsscanf_8:
00003390  2F05      5632          move.l    D5,-(A7)
00003392  4E93      5633          jsr       (A3)
00003394  584F      5634          addq.w    #4,A7
00003396  2400      5635          move.l    D0,D2
00003398  52AE FFE4 5636          addq.l    #1,-28(A6)
0000339C  0C82 FFFF 5637          cmp.l     #-1,D2
000033A0  FFFF      
000033A2  660E      5638          bne.s     vsscanf_11
000033A4  4A84      5639          tst.l     D4
000033A6  6704      5640          beq.s     vsscanf_13
000033A8  2004      5641          move.l    D4,D0
000033AA  6002      5642          bra.s     vsscanf_14
                    5643   vsscanf_13:
000033AC  70FF      5644          moveq     #-1,D0
                    5645   vsscanf_14:
000033AE  6000 056C 5646          bra       vsscanf_15
                    5647   vsscanf_11:
000033B2  2042      5648          move.l    D2,A0
000033B4  43F9 0000 5649          lea       __ctype,A1
000033B8  568E      
000033BA  1030 9801 5650          move.b    1(A0,A1.L),D0
000033BE  C03C 0010 5651          and.b     #16,D0
000033C2  66CC      5652          bne       vsscanf_8
000033C4  53AE FFE4 5653          subq.l    #1,-28(A6)
000033C8  2F02      5654          move.l    D2,-(A7)
000033CA  2F05      5655          move.l    D5,-(A7)
000033CC  6100 FD2E 5656          bsr       @vsscanf_scanputback
000033D0  504F      5657          addq.w    #8,A7
000033D2  6000 0542 5658          bra       vsscanf_139
                    5659   vsscanf_6:
000033D6  0C83 0000 5660          cmp.l     #37,D3
000033DA  0025      
000033DC  6600 0502 5661          bne       vsscanf_127
000033E0  206E 000C 5662          move.l    12(A6),A0
000033E4  52AE 000C 5663          addq.l    #1,12(A6)
000033E8  1010      5664          move.b    (A0),D0
000033EA  4880      5665          ext.w     D0
000033EC  48C0      5666          ext.l     D0
000033EE  2600      5667          move.l    D0,D3
000033F0  42AE FFEC 5668          clr.l     -20(A6)
000033F4  4286      5669          clr.l     D6
000033F6  42AE FFE8 5670          clr.l     -24(A6)
000033FA  347C 7FFF 5671          move.w    #32767,A2
000033FE  0C83 0000 5672          cmp.l     #42,D3
00003402  002A      
00003404  6612      5673          bne.s     vsscanf_18
00003406  7C01      5674          moveq     #1,D6
00003408  206E 000C 5675          move.l    12(A6),A0
0000340C  52AE 000C 5676          addq.l    #1,12(A6)
00003410  1010      5677          move.b    (A0),D0
00003412  4880      5678          ext.w     D0
00003414  48C0      5679          ext.l     D0
00003416  2600      5680          move.l    D0,D3
                    5681   vsscanf_18:
00003418  2043      5682          move.l    D3,A0
0000341A  43F9 0000 5683          lea       __ctype,A1
0000341E  568E      
00003420  1030 9801 5684          move.b    1(A0,A1.L),D0
00003424  C03C 0004 5685          and.b     #4,D0
00003428  6700 004E 5686          beq       vsscanf_24
0000342C  2003      5687          move.l    D3,D0
0000342E  0480 0000 5688          sub.l     #48,D0
00003432  0030      
00003434  2440      5689          move.l    D0,A2
                    5690   vsscanf_22:
00003436  206E 000C 5691          move.l    12(A6),A0
0000343A  52AE 000C 5692          addq.l    #1,12(A6)
0000343E  1010      5693          move.b    (A0),D0
00003440  4880      5694          ext.w     D0
00003442  48C0      5695          ext.l     D0
00003444  2600      5696          move.l    D0,D3
00003446  2040      5697          move.l    D0,A0
00003448  43F9 0000 5698          lea       __ctype,A1
0000344C  568E      
0000344E  1030 9801 5699          move.b    1(A0,A1.L),D0
00003452  C0BC 0000 5700          and.l     #255,D0
00003456  00FF      
00003458  C0BC 0000 5701          and.l     #4,D0
0000345C  0004      
0000345E  6718      5702          beq.s     vsscanf_24
00003460  70D0      5703          moveq     #-48,D0
00003462  2F0A      5704          move.l    A2,-(A7)
00003464  4878 000A 5705          pea       10
00003468  6100 0C12 5706          bsr       LMUL
0000346C  2217      5707          move.l    (A7),D1
0000346E  504F      5708          addq.w    #8,A7
00003470  D283      5709          add.l     D3,D1
00003472  D081      5710          add.l     D1,D0
00003474  2440      5711          move.l    D0,A2
00003476  60BE      5712          bra       vsscanf_22
                    5713   vsscanf_24:
00003478  0C83 0000 5714          cmp.l     #108,D3
0000347C  006C      
0000347E  6708      5715          beq.s     vsscanf_27
00003480  0C83 0000 5716          cmp.l     #76,D3
00003484  004C      
00003486  661A      5717          bne.s     vsscanf_25
                    5718   vsscanf_27:
00003488  2D7C 0000 5719          move.l    #1,-24(A6)
0000348C  0001 FFE8 
00003490  206E 000C 5720          move.l    12(A6),A0
00003494  52AE 000C 5721          addq.l    #1,12(A6)
00003498  1010      5722          move.b    (A0),D0
0000349A  4880      5723          ext.w     D0
0000349C  48C0      5724          ext.l     D0
0000349E  2600      5725          move.l    D0,D3
000034A0  6020      5726          bra.s     vsscanf_28
                    5727   vsscanf_25:
000034A2  0C83 0000 5728          cmp.l     #104,D3
000034A6  0068      
000034A8  6618      5729          bne.s     vsscanf_28
000034AA  2D7C 0000 5730          move.l    #1,-20(A6)
000034AE  0001 FFEC 
000034B2  206E 000C 5731          move.l    12(A6),A0
000034B6  52AE 000C 5732          addq.l    #1,12(A6)
000034BA  1010      5733          move.b    (A0),D0
000034BC  4880      5734          ext.w     D0
000034BE  48C0      5735          ext.l     D0
000034C0  2600      5736          move.l    D0,D3
                    5737   vsscanf_28:
000034C2  0C83 0000 5738          cmp.l     #91,D3
000034C6  005B      
000034C8  6600 0036 5739          bne       vsscanf_30
000034CC  4A86      5740          tst.l     D6
000034CE  660A      5741          bne.s     vsscanf_32
000034D0  206E 0010 5742          move.l    16(A6),A0
000034D4  58AE 0010 5743          addq.l    #4,16(A6)
000034D8  2E10      5744          move.l    (A0),D7
                    5745   vsscanf_32:
000034DA  486E FFE4 5746          pea       -28(A6)
000034DE  2F07      5747          move.l    D7,-(A7)
000034E0  2F06      5748          move.l    D6,-(A7)
000034E2  2F0A      5749          move.l    A2,-(A7)
000034E4  2F2E 000C 5750          move.l    12(A6),-(A7)
000034E8  2F05      5751          move.l    D5,-(A7)
000034EA  6100 FCA8 5752          bsr       @vsscanf_scanselect
000034EE  DEFC 0018 5753          add.w     #24,A7
000034F2  2D40 000C 5754          move.l    D0,12(A6)
000034F6  4A86      5755          tst.l     D6
000034F8  6602      5756          bne.s     vsscanf_34
000034FA  5284      5757          addq.l    #1,D4
                    5758   vsscanf_34:
000034FC  6000 0418 5759          bra       vsscanf_139
                    5760   vsscanf_30:
00003500  0C83 0000 5761          cmp.l     #110,D3
00003504  006E      
00003506  661A      5762          bne.s     vsscanf_36
00003508  4A86      5763          tst.l     D6
0000350A  6612      5764          bne.s     vsscanf_38
0000350C  206E 0010 5765          move.l    16(A6),A0
00003510  58AE 0010 5766          addq.l    #4,16(A6)
00003514  2E10      5767          move.l    (A0),D7
00003516  2047      5768          move.l    D7,A0
00003518  20AE FFE4 5769          move.l    -28(A6),(A0)
0000351C  5284      5770          addq.l    #1,D4
                    5771   vsscanf_38:
0000351E  6000 03F6 5772          bra       vsscanf_139
                    5773   vsscanf_36:
00003522  0C83 0000 5774          cmp.l     #115,D3
00003526  0073      
00003528  6600 00AC 5775          bne       vsscanf_40
0000352C  486E FFE4 5776          pea       -28(A6)
00003530  2F05      5777          move.l    D5,-(A7)
00003532  6100 FC2A 5778          bsr       @vsscanf_scanspace
00003536  504F      5779          addq.w    #8,A7
00003538  2400      5780          move.l    D0,D2
0000353A  4A86      5781          tst.l     D6
0000353C  660A      5782          bne.s     vsscanf_42
0000353E  206E 0010 5783          move.l    16(A6),A0
00003542  58AE 0010 5784          addq.l    #4,16(A6)
00003546  2E10      5785          move.l    (A0),D7
                    5786   vsscanf_42:
00003548  52AE FFE4 5787          addq.l    #1,-28(A6)
                    5788   vsscanf_44:
0000354C  200A      5789          move.l    A2,D0
0000354E  534A      5790          subq.w    #1,A2
00003550  4A80      5791          tst.l     D0
00003552  6700 0038 5792          beq       vsscanf_46
00003556  2042      5793          move.l    D2,A0
00003558  43F9 0000 5794          lea       __ctype,A1
0000355C  568E      
0000355E  1030 9801 5795          move.b    1(A0,A1.L),D0
00003562  C03C 0010 5796          and.b     #16,D0
00003566  6624      5797          bne.s     vsscanf_46
00003568  0C82 FFFF 5798          cmp.l     #-1,D2
0000356C  FFFF      
0000356E  671C      5799          beq.s     vsscanf_46
00003570  387C 0001 5800          move.w    #1,A4
00003574  4A86      5801          tst.l     D6
00003576  6606      5802          bne.s     vsscanf_47
00003578  2047      5803          move.l    D7,A0
0000357A  5287      5804          addq.l    #1,D7
0000357C  1082      5805          move.b    D2,(A0)
                    5806   vsscanf_47:
0000357E  2F05      5807          move.l    D5,-(A7)
00003580  4E93      5808          jsr       (A3)
00003582  584F      5809          addq.w    #4,A7
00003584  2400      5810          move.l    D0,D2
00003586  52AE FFE4 5811          addq.l    #1,-28(A6)
0000358A  60C0      5812          bra       vsscanf_44
                    5813   vsscanf_46:
0000358C  4A86      5814          tst.l     D6
0000358E  660A      5815          bne.s     vsscanf_51
00003590  2047      5816          move.l    D7,A0
00003592  4210      5817          clr.b     (A0)
00003594  200C      5818          move.l    A4,D0
00003596  6702      5819          beq.s     vsscanf_51
00003598  5284      5820          addq.l    #1,D4
                    5821   vsscanf_51:
0000359A  0C82 FFFF 5822          cmp.l     #-1,D2
0000359E  FFFF      
000035A0  6708      5823          beq.s     vsscanf_55
000035A2  4A86      5824          tst.l     D6
000035A4  661E      5825          bne.s     vsscanf_53
000035A6  200C      5826          move.l    A4,D0
000035A8  661A      5827          bne.s     vsscanf_53
                    5828   vsscanf_55:
000035AA  4A84      5829          tst.l     D4
000035AC  6704      5830          beq.s     vsscanf_56
000035AE  2004      5831          move.l    D4,D0
000035B0  600E      5832          bra.s     vsscanf_59
                    5833   vsscanf_56:
000035B2  0C82 FFFF 5834          cmp.l     #-1,D2
000035B6  FFFF      
000035B8  6604      5835          bne.s     vsscanf_58
000035BA  70FF      5836          moveq     #-1,D0
000035BC  6002      5837          bra.s     vsscanf_59
                    5838   vsscanf_58:
000035BE  2004      5839          move.l    D4,D0
                    5840   vsscanf_59:
000035C0  6000 035A 5841          bra       vsscanf_15
                    5842   vsscanf_53:
000035C4  53AE FFE4 5843          subq.l    #1,-28(A6)
000035C8  2F02      5844          move.l    D2,-(A7)
000035CA  2F05      5845          move.l    D5,-(A7)
000035CC  6100 FB2E 5846          bsr       @vsscanf_scanputback
000035D0  504F      5847          addq.w    #8,A7
000035D2  6000 0342 5848          bra       vsscanf_139
                    5849   vsscanf_40:
000035D6  0C83 0000 5850          cmp.l     #99,D3
000035DA  0063      
000035DC  6600 008E 5851          bne       vsscanf_60
000035E0  4A86      5852          tst.l     D6
000035E2  660A      5853          bne.s     vsscanf_62
000035E4  206E 0010 5854          move.l    16(A6),A0
000035E8  58AE 0010 5855          addq.l    #4,16(A6)
000035EC  2E10      5856          move.l    (A0),D7
                    5857   vsscanf_62:
000035EE  2F05      5858          move.l    D5,-(A7)
000035F0  4E93      5859          jsr       (A3)
000035F2  584F      5860          addq.w    #4,A7
000035F4  2400      5861          move.l    D0,D2
000035F6  52AE FFE4 5862          addq.l    #1,-28(A6)
000035FA  200A      5863          move.l    A2,D0
000035FC  0C80 0000 5864          cmp.l     #32767,D0
00003600  7FFF      
00003602  6604      5865          bne.s     vsscanf_64
00003604  347C 0001 5866          move.w    #1,A2
                    5867   vsscanf_64:
00003608  0C82 FFFF 5868          cmp.l     #-1,D2
0000360C  FFFF      
0000360E  6606      5869          bne.s     vsscanf_66
00003610  4A86      5870          tst.l     D6
00003612  6602      5871          bne.s     vsscanf_66
00003614  5384      5872          subq.l    #1,D4
                    5873   vsscanf_66:
00003616  200A      5874          move.l    A2,D0
00003618  534A      5875          subq.w    #1,A2
0000361A  4A80      5876          tst.l     D0
0000361C  6720      5877          beq.s     vsscanf_70
0000361E  0C82 FFFF 5878          cmp.l     #-1,D2
00003622  FFFF      
00003624  6718      5879          beq.s     vsscanf_70
00003626  4A86      5880          tst.l     D6
00003628  6606      5881          bne.s     vsscanf_71
0000362A  2047      5882          move.l    D7,A0
0000362C  5287      5883          addq.l    #1,D7
0000362E  1082      5884          move.b    D2,(A0)
                    5885   vsscanf_71:
00003630  2F05      5886          move.l    D5,-(A7)
00003632  4E93      5887          jsr       (A3)
00003634  584F      5888          addq.w    #4,A7
00003636  2400      5889          move.l    D0,D2
00003638  52AE FFE4 5890          addq.l    #1,-28(A6)
0000363C  60D8      5891          bra       vsscanf_66
                    5892   vsscanf_70:
0000363E  0C82 FFFF 5893          cmp.l     #-1,D2
00003642  FFFF      
00003644  660E      5894          bne.s     vsscanf_73
00003646  4A84      5895          tst.l     D4
00003648  6704      5896          beq.s     vsscanf_75
0000364A  2004      5897          move.l    D4,D0
0000364C  6002      5898          bra.s     vsscanf_76
                    5899   vsscanf_75:
0000364E  70FF      5900          moveq     #-1,D0
                    5901   vsscanf_76:
00003650  6000 02CA 5902          bra       vsscanf_15
                    5903   vsscanf_73:
00003654  4A86      5904          tst.l     D6
00003656  6602      5905          bne.s     vsscanf_77
00003658  5284      5906          addq.l    #1,D4
                    5907   vsscanf_77:
0000365A  53AE FFE4 5908          subq.l    #1,-28(A6)
0000365E  2F02      5909          move.l    D2,-(A7)
00003660  2F05      5910          move.l    D5,-(A7)
00003662  6100 FA98 5911          bsr       @vsscanf_scanputback
00003666  504F      5912          addq.w    #8,A7
00003668  6000 02AC 5913          bra       vsscanf_139
                    5914   vsscanf_60:
0000366C  0C83 0000 5915          cmp.l     #105,D3
00003670  0069      
00003672  6600 0060 5916          bne       vsscanf_82
00003676  486E FFE4 5917          pea       -28(A6)
0000367A  2F05      5918          move.l    D5,-(A7)
0000367C  6100 FAE0 5919          bsr       @vsscanf_scanspace
00003680  504F      5920          addq.w    #8,A7
00003682  2400      5921          move.l    D0,D2
00003684  0C82 0000 5922          cmp.l     #48,D2
00003688  0030      
0000368A  6600 0038 5923          bne       vsscanf_81
0000368E  387C 0001 5924          move.w    #1,A4
00003692  2F05      5925          move.l    D5,-(A7)
00003694  4E93      5926          jsr       (A3)
00003696  584F      5927          addq.w    #4,A7
00003698  2400      5928          move.l    D0,D2
0000369A  2F02      5929          move.l    D2,-(A7)
0000369C  6100 F936 5930          bsr       _tolower
000036A0  584F      5931          addq.w    #4,A7
000036A2  0C80 0000 5932          cmp.l     #120,D0
000036A6  0078      
000036A8  6604      5933          bne.s     vsscanf_83
000036AA  7678      5934          moveq     #120,D3
000036AC  6010      5935          bra.s     vsscanf_84
                    5936   vsscanf_83:
000036AE  53AE FFE4 5937          subq.l    #1,-28(A6)
000036B2  2F02      5938          move.l    D2,-(A7)
000036B4  2F05      5939          move.l    D5,-(A7)
000036B6  6100 FA44 5940          bsr       @vsscanf_scanputback
000036BA  504F      5941          addq.w    #8,A7
000036BC  766F      5942          moveq     #111,D3
                    5943   vsscanf_84:
000036BE  52AE FFE4 5944          addq.l    #1,-28(A6)
000036C2  6010      5945          bra.s     vsscanf_82
                    5946   vsscanf_81:
000036C4  53AE FFE4 5947          subq.l    #1,-28(A6)
000036C8  2F02      5948          move.l    D2,-(A7)
000036CA  2F05      5949          move.l    D5,-(A7)
000036CC  6100 FA2E 5950          bsr       @vsscanf_scanputback
000036D0  504F      5951          addq.w    #8,A7
000036D2  7664      5952          moveq     #100,D3
                    5953   vsscanf_82:
000036D4  0C83 0000 5954          cmp.l     #100,D3
000036D8  0064      
000036DA  671A      5955          beq.s     vsscanf_87
000036DC  0C83 0000 5956          cmp.l     #117,D3
000036E0  0075      
000036E2  6712      5957          beq.s     vsscanf_87
000036E4  0C83 0000 5958          cmp.l     #120,D3
000036E8  0078      
000036EA  670A      5959          beq.s     vsscanf_87
000036EC  0C83 0000 5960          cmp.l     #111,D3
000036F0  006F      
000036F2  6600 01A4 5961          bne       vsscanf_85
                    5962   vsscanf_87:
000036F6  486E FFE4 5963          pea       -28(A6)
000036FA  2F05      5964          move.l    D5,-(A7)
000036FC  6100 FA60 5965          bsr       @vsscanf_scanspace
00003700  504F      5966          addq.w    #8,A7
00003702  2400      5967          move.l    D0,D2
00003704  2D7C 0000 5968          move.l    #10,-4(A6)
00003708  000A FFFC 
0000370C  0C83 0000 5969          cmp.l     #120,D3
00003710  0078      
00003712  6608      5970          bne.s     vsscanf_88
00003714  2D7C 0000 5971          move.l    #16,-4(A6)
00003718  0010 FFFC 
                    5972   vsscanf_88:
0000371C  0C83 0000 5973          cmp.l     #111,D3
00003720  006F      
00003722  6608      5974          bne.s     vsscanf_90
00003724  2D7C 0000 5975          move.l    #8,-4(A6)
00003728  0008 FFFC 
                    5976   vsscanf_90:
0000372C  4A86      5977          tst.l     D6
0000372E  660A      5978          bne.s     vsscanf_92
00003730  206E 0010 5979          move.l    16(A6),A0
00003734  58AE 0010 5980          addq.l    #4,16(A6)
00003738  2E10      5981          move.l    (A0),D7
                    5982   vsscanf_92:
0000373A  42AE FFE0 5983          clr.l     -32(A6)
0000373E  52AE FFE4 5984          addq.l    #1,-28(A6)
00003742  0C83 0000 5985          cmp.l     #117,D3
00003746  0075      
00003748  6720      5986          beq.s     vsscanf_94
0000374A  0C82 0000 5987          cmp.l     #45,D2
0000374E  002D      
00003750  6618      5988          bne.s     vsscanf_94
00003752  2F05      5989          move.l    D5,-(A7)
00003754  4E93      5990          jsr       (A3)
00003756  584F      5991          addq.w    #4,A7
00003758  2400      5992          move.l    D0,D2
0000375A  52AE FFE4 5993          addq.l    #1,-28(A6)
0000375E  2D7C 0000 5994          move.l    #1,-32(A6)
00003762  0001 FFE0 
00003766  387C 0001 5995          move.w    #1,A4
                    5996   vsscanf_94:
0000376A  3A7C 0000 5997          move.w    #0,A5
0000376E  0C82 FFFF 5998          cmp.l     #-1,D2
00003772  FFFF      
00003774  660E      5999          bne.s     vsscanf_96
00003776  4A84      6000          tst.l     D4
00003778  6704      6001          beq.s     vsscanf_98
0000377A  2004      6002          move.l    D4,D0
0000377C  6002      6003          bra.s     vsscanf_99
                    6004   vsscanf_98:
0000377E  70FF      6005          moveq     #-1,D0
                    6006   vsscanf_99:
00003780  6000 019A 6007          bra       vsscanf_15
                    6008   vsscanf_96:
00003784  200A      6009          move.l    A2,D0
00003786  534A      6010          subq.w    #1,A2
00003788  4A80      6011          tst.l     D0
0000378A  6700 0090 6012          beq       vsscanf_102
0000378E  0C83 0000 6013          cmp.l     #120,D3
00003792  0078      
00003794  6620      6014          bne.s     vsscanf_104
00003796  2F02      6015          move.l    D2,-(A7)
00003798  6100 F8C8 6016          bsr       _toupper
0000379C  584F      6017          addq.w    #4,A7
0000379E  0C80 0000 6018          cmp.l     #65,D0
000037A2  0041      
000037A4  6D10      6019          blt.s     vsscanf_104
000037A6  2F02      6020          move.l    D2,-(A7)
000037A8  6100 F8B8 6021          bsr       _toupper
000037AC  584F      6022          addq.w    #4,A7
000037AE  0C80 0000 6023          cmp.l     #70,D0
000037B2  0046      
000037B4  6F14      6024          ble.s     vsscanf_103
                    6025   vsscanf_104:
000037B6  2042      6026          move.l    D2,A0
000037B8  43F9 0000 6027          lea       __ctype,A1
000037BC  568E      
000037BE  1030 9801 6028          move.b    1(A0,A1.L),D0
000037C2  C03C 0004 6029          and.b     #4,D0
000037C6  6700 0054 6030          beq       vsscanf_102
                    6031   vsscanf_103:
000037CA  2042      6032          move.l    D2,A0
000037CC  43F9 0000 6033          lea       __ctype,A1
000037D0  568E      
000037D2  1030 9801 6034          move.b    1(A0,A1.L),D0
000037D6  C03C 0004 6035          and.b     #4,D0
000037DA  6614      6036          bne.s     vsscanf_105
000037DC  70F9      6037          moveq     #-7,D0
000037DE  2F00      6038          move.l    D0,-(A7)
000037E0  2F02      6039          move.l    D2,-(A7)
000037E2  6100 F87E 6040          bsr       _toupper
000037E6  584F      6041          addq.w    #4,A7
000037E8  2200      6042          move.l    D0,D1
000037EA  201F      6043          move.l    (A7)+,D0
000037EC  D081      6044          add.l     D1,D0
000037EE  2400      6045          move.l    D0,D2
                    6046   vsscanf_105:
000037F0  2F0D      6047          move.l    A5,-(A7)
000037F2  2F2E FFFC 6048          move.l    -4(A6),-(A7)
000037F6  6100 0884 6049          bsr       LMUL
000037FA  2017      6050          move.l    (A7),D0
000037FC  504F      6051          addq.w    #8,A7
000037FE  D082      6052          add.l     D2,D0
00003800  0480 0000 6053          sub.l     #48,D0
00003804  0030      
00003806  2A40      6054          move.l    D0,A5
00003808  2F05      6055          move.l    D5,-(A7)
0000380A  4E93      6056          jsr       (A3)
0000380C  584F      6057          addq.w    #4,A7
0000380E  2400      6058          move.l    D0,D2
00003810  52AE FFE4 6059          addq.l    #1,-28(A6)
00003814  387C 0001 6060          move.w    #1,A4
00003818  6000 FF6A 6061          bra       vsscanf_96
                    6062   vsscanf_102:
0000381C  0C82 FFFF 6063          cmp.l     #-1,D2
00003820  FFFF      
00003822  671A      6064          beq.s     vsscanf_107
00003824  2F02      6065          move.l    D2,-(A7)
00003826  2F05      6066          move.l    D5,-(A7)
00003828  6100 F8D2 6067          bsr       @vsscanf_scanputback
0000382C  504F      6068          addq.w    #8,A7
0000382E  53AE FFE4 6069          subq.l    #1,-28(A6)
00003832  200C      6070          move.l    A4,D0
00003834  6606      6071          bne.s     vsscanf_109
00003836  2004      6072          move.l    D4,D0
00003838  6000 00E2 6073          bra       vsscanf_15
                    6074   vsscanf_109:
0000383C  6012      6075          bra.s     vsscanf_111
                    6076   vsscanf_107:
0000383E  200C      6077          move.l    A4,D0
00003840  660E      6078          bne.s     vsscanf_111
00003842  4A84      6079          tst.l     D4
00003844  6704      6080          beq.s     vsscanf_113
00003846  2004      6081          move.l    D4,D0
00003848  6002      6082          bra.s     vsscanf_114
                    6083   vsscanf_113:
0000384A  70FF      6084          moveq     #-1,D0
                    6085   vsscanf_114:
0000384C  6000 00CE 6086          bra       vsscanf_15
                    6087   vsscanf_111:
00003850  4AAE FFE0 6088          tst.l     -32(A6)
00003854  6706      6089          beq.s     vsscanf_115
00003856  200D      6090          move.l    A5,D0
00003858  4480      6091          neg.l     D0
0000385A  2A40      6092          move.l    D0,A5
                    6093   vsscanf_115:
0000385C  4A86      6094          tst.l     D6
0000385E  661E      6095          bne.s     vsscanf_117
00003860  4AAE FFE8 6096          tst.l     -24(A6)
00003864  6706      6097          beq.s     vsscanf_119
00003866  2047      6098          move.l    D7,A0
00003868  208D      6099          move.l    A5,(A0)
0000386A  6010      6100          bra.s     vsscanf_122
                    6101   vsscanf_119:
0000386C  4AAE FFEC 6102          tst.l     -20(A6)
00003870  6706      6103          beq.s     vsscanf_121
00003872  2047      6104          move.l    D7,A0
00003874  308D      6105          move.w    A5,(A0)
00003876  6004      6106          bra.s     vsscanf_122
                    6107   vsscanf_121:
00003878  2047      6108          move.l    D7,A0
0000387A  208D      6109          move.l    A5,(A0)
                    6110   vsscanf_122:
0000387C  5284      6111          addq.l    #1,D4
                    6112   vsscanf_117:
0000387E  0C82 FFFF 6113          cmp.l     #-1,D2
00003882  FFFF      
00003884  660E      6114          bne.s     vsscanf_123
00003886  4A84      6115          tst.l     D4
00003888  6704      6116          beq.s     vsscanf_125
0000388A  2004      6117          move.l    D4,D0
0000388C  6002      6118          bra.s     vsscanf_126
                    6119   vsscanf_125:
0000388E  70FF      6120          moveq     #-1,D0
                    6121   vsscanf_126:
00003890  6000 008A 6122          bra       vsscanf_15
                    6123   vsscanf_123:
00003894  6000 0080 6124          bra       vsscanf_139
                    6125   vsscanf_85:
00003898  0C83 0000 6126          cmp.l     #37,D3
0000389C  0025      
0000389E  6600 0040 6127          bne       vsscanf_127
000038A2  2F05      6128          move.l    D5,-(A7)
000038A4  4E93      6129          jsr       (A3)
000038A6  584F      6130          addq.w    #4,A7
000038A8  2400      6131          move.l    D0,D2
000038AA  0C82 FFFF 6132          cmp.l     #-1,D2
000038AE  FFFF      
000038B0  660E      6133          bne.s     vsscanf_129
000038B2  4A84      6134          tst.l     D4
000038B4  6704      6135          beq.s     vsscanf_131
000038B6  2004      6136          move.l    D4,D0
000038B8  6002      6137          bra.s     vsscanf_132
                    6138   vsscanf_131:
000038BA  70FF      6139          moveq     #-1,D0
                    6140   vsscanf_132:
000038BC  6000 005E 6141          bra       vsscanf_15
                    6142   vsscanf_129:
000038C0  52AE FFE4 6143          addq.l    #1,-28(A6)
000038C4  B483      6144          cmp.l     D3,D2
000038C6  6714      6145          beq.s     vsscanf_133
000038C8  2F02      6146          move.l    D2,-(A7)
000038CA  2F05      6147          move.l    D5,-(A7)
000038CC  6100 F82E 6148          bsr       @vsscanf_scanputback
000038D0  504F      6149          addq.w    #8,A7
000038D2  53AE FFE4 6150          subq.l    #1,-28(A6)
000038D6  2004      6151          move.l    D4,D0
000038D8  6000 0042 6152          bra       vsscanf_15
                    6153   vsscanf_133:
000038DC  6000 0038 6154          bra       vsscanf_139
                    6155   vsscanf_127:
000038E0  2F05      6156          move.l    D5,-(A7)
000038E2  4E93      6157          jsr       (A3)
000038E4  584F      6158          addq.w    #4,A7
000038E6  2400      6159          move.l    D0,D2
000038E8  52AE FFE4 6160          addq.l    #1,-28(A6)
000038EC  0C82 FFFF 6161          cmp.l     #-1,D2
000038F0  FFFF      
000038F2  660C      6162          bne.s     vsscanf_135
000038F4  4A84      6163          tst.l     D4
000038F6  6704      6164          beq.s     vsscanf_137
000038F8  2004      6165          move.l    D4,D0
000038FA  6002      6166          bra.s     vsscanf_138
                    6167   vsscanf_137:
000038FC  70FF      6168          moveq     #-1,D0
                    6169   vsscanf_138:
000038FE  601C      6170          bra.s     vsscanf_15
                    6171   vsscanf_135:
00003900  B483      6172          cmp.l     D3,D2
00003902  6712      6173          beq.s     vsscanf_139
00003904  2F02      6174          move.l    D2,-(A7)
00003906  2F05      6175          move.l    D5,-(A7)
00003908  6100 F7F2 6176          bsr       @vsscanf_scanputback
0000390C  504F      6177          addq.w    #8,A7
0000390E  53AE FFE4 6178          subq.l    #1,-28(A6)
00003912  2004      6179          move.l    D4,D0
00003914  6006      6180          bra.s     vsscanf_15
                    6181   vsscanf_139:
00003916  6000 FA44 6182          bra       vsscanf_3
                    6183   vsscanf_5:
0000391A  2004      6184          move.l    D4,D0
                    6185   vsscanf_15:
0000391C  4CDF 3CFC 6186          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003920  4E5E      6187          unlk      A6
00003922  4E75      6188          rts
                    6189   _printf:
00003924  4E56 FFFC 6190          link      A6,#-4
00003928  48E7 2000 6191          movem.l   D2,-(A7)
0000392C  41EE 0008 6192          lea       8(A6),A0
00003930  5848      6193          addq.w    #4,A0
00003932  2408      6194          move.l    A0,D2
00003934  2F02      6195          move.l    D2,-(A7)
00003936  2F2E 0008 6196          move.l    8(A6),-(A7)
0000393A  42A7      6197          clr.l     -(A7)
0000393C  6100 00CA 6198          bsr       _vsprintf
00003940  DEFC 000C 6199          add.w     #12,A7
00003944  2D40 FFFC 6200          move.l    D0,-4(A6)
00003948  4282      6201          clr.l     D2
0000394A  202E FFFC 6202          move.l    -4(A6),D0
0000394E  4CDF 0004 6203          movem.l   (A7)+,D2
00003952  4E5E      6204          unlk      A6
00003954  4E75      6205          rts
                    6206   @vsprintf_copy:
00003956  4E56 0000 6207          link      A6,#0
0000395A  206E 0008 6208          move.l    8(A6),A0
0000395E  4A90      6209          tst.l     (A0)
00003960  6710      6210          beq.s     @vsprintf_copy_1
00003962  202E 000C 6211          move.l    12(A6),D0
00003966  206E 0008 6212          move.l    8(A6),A0
0000396A  2250      6213          move.l    (A0),A1
0000396C  5290      6214          addq.l    #1,(A0)
0000396E  1280      6215          move.b    D0,(A1)
00003970  600A      6216          bra.s     @vsprintf_copy_2
                    6217   @vsprintf_copy_1:
00003972  2F2E 000C 6218          move.l    12(A6),-(A7)
00003976  6100 F5F0 6219          bsr       _putch
0000397A  584F      6220          addq.w    #4,A7
                    6221   @vsprintf_copy_2:
0000397C  4E5E      6222          unlk      A6
0000397E  4E75      6223          rts
                    6224   @vsprintf_getval:
00003980  4E56 0000 6225          link      A6,#0
00003984  48E7 3000 6226          movem.l   D2/D3,-(A7)
00003988  242E 0008 6227          move.l    8(A6),D2
0000398C  4283      6228          clr.l     D3
0000398E  2042      6229          move.l    D2,A0
00003990  2050      6230          move.l    (A0),A0
00003992  1010      6231          move.b    (A0),D0
00003994  4880      6232          ext.w     D0
00003996  48C0      6233          ext.l     D0
00003998  0C80 0000 6234          cmp.l     #42,D0
0000399C  002A      
0000399E  6612      6235          bne.s     @vsprintf_getval_1
000039A0  206E 000C 6236          move.l    12(A6),A0
000039A4  2250      6237          move.l    (A0),A1
000039A6  5890      6238          addq.l    #4,(A0)
000039A8  2611      6239          move.l    (A1),D3
000039AA  2042      6240          move.l    D2,A0
000039AC  5290      6241          addq.l    #1,(A0)
000039AE  6000 004E 6242          bra       @vsprintf_getval_5
                    6243   @vsprintf_getval_1:
000039B2  2042      6244          move.l    D2,A0
000039B4  2050      6245          move.l    (A0),A0
000039B6  1010      6246          move.b    (A0),D0
000039B8  4880      6247          ext.w     D0
000039BA  48C0      6248          ext.l     D0
000039BC  0C80 0000 6249          cmp.l     #48,D0
000039C0  0030      
000039C2  6D00 003A 6250          blt       @vsprintf_getval_5
000039C6  2042      6251          move.l    D2,A0
000039C8  2050      6252          move.l    (A0),A0
000039CA  1010      6253          move.b    (A0),D0
000039CC  4880      6254          ext.w     D0
000039CE  48C0      6255          ext.l     D0
000039D0  0C80 0000 6256          cmp.l     #57,D0
000039D4  0039      
000039D6  6E26      6257          bgt.s     @vsprintf_getval_5
000039D8  2F03      6258          move.l    D3,-(A7)
000039DA  4878 000A 6259          pea       10
000039DE  6100 069C 6260          bsr       LMUL
000039E2  2017      6261          move.l    (A7),D0
000039E4  504F      6262          addq.w    #8,A7
000039E6  2042      6263          move.l    D2,A0
000039E8  2250      6264          move.l    (A0),A1
000039EA  5290      6265          addq.l    #1,(A0)
000039EC  1211      6266          move.b    (A1),D1
000039EE  4881      6267          ext.w     D1
000039F0  48C1      6268          ext.l     D1
000039F2  D081      6269          add.l     D1,D0
000039F4  0480 0000 6270          sub.l     #48,D0
000039F8  0030      
000039FA  2600      6271          move.l    D0,D3
000039FC  60B4      6272          bra       @vsprintf_getval_1
                    6273   @vsprintf_getval_5:
000039FE  2003      6274          move.l    D3,D0
00003A00  4CDF 000C 6275          movem.l   (A7)+,D2/D3
00003A04  4E5E      6276          unlk      A6
00003A06  4E75      6277          rts
                    6278   _vsprintf:
00003A08  4E56 FFCC 6279          link      A6,#-52
00003A0C  48E7 3F3C 6280          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003A10  45EE 0008 6281          lea       8(A6),A2
00003A14  47F8 3956 6282          lea       @vsprintf_copy,A3
00003A18  49F9 0000 6283          lea       _ultoa,A4
00003A1C  4286      
00003A1E  4286      6284          clr.l     D6
                    6285   vsprintf_1:
00003A20  206E 000C 6286          move.l    12(A6),A0
00003A24  4A10      6287          tst.b     (A0)
00003A26  6700 0624 6288          beq       vsprintf_3
00003A2A  206E 000C 6289          move.l    12(A6),A0
00003A2E  1010      6290          move.b    (A0),D0
00003A30  4880      6291          ext.w     D0
00003A32  48C0      6292          ext.l     D0
00003A34  0C80 0000 6293          cmp.l     #37,D0
00003A38  0025      
00003A3A  671C      6294          beq.s     vsprintf_4
00003A3C  206E 000C 6295          move.l    12(A6),A0
00003A40  52AE 000C 6296          addq.l    #1,12(A6)
00003A44  1210      6297          move.b    (A0),D1
00003A46  4881      6298          ext.w     D1
00003A48  48C1      6299          ext.l     D1
00003A4A  2F01      6300          move.l    D1,-(A7)
00003A4C  2F0A      6301          move.l    A2,-(A7)
00003A4E  4E93      6302          jsr       (A3)
00003A50  504F      6303          addq.w    #8,A7
00003A52  5286      6304          addq.l    #1,D6
00003A54  6000 05F2 6305          bra       vsprintf_2
                    6306   vsprintf_4:
00003A58  52AE 000C 6307          addq.l    #1,12(A6)
00003A5C  422E FFD3 6308          clr.b     -45(A6)
00003A60  422E FFD2 6309          clr.b     -46(A6)
00003A64  422E FFD0 6310          clr.b     -48(A6)
00003A68  422E FFCF 6311          clr.b     -49(A6)
00003A6C  422E FFCE 6312          clr.b     -50(A6)
00003A70  422E FFCD 6313          clr.b     -51(A6)
00003A74  42AE FFFC 6314          clr.l     -4(A6)
00003A78  7AFF      6315          moveq     #-1,D5
00003A7A  41EE FFDC 6316          lea       -36(A6),A0
00003A7E  2608      6317          move.l    A0,D3
00003A80  2408      6318          move.l    A0,D2
                    6319   vsprintf_6:
00003A82  206E 000C 6320          move.l    12(A6),A0
00003A86  1010      6321          move.b    (A0),D0
00003A88  4880      6322          ext.w     D0
00003A8A  48C0      6323          ext.l     D0
00003A8C  0C80 0000 6324          cmp.l     #43,D0
00003A90  002B      
00003A92  6730      6325          beq.s     vsprintf_12
00003A94  6E18      6326          bgt.s     vsprintf_15
00003A96  0C80 0000 6327          cmp.l     #35,D0
00003A9A  0023      
00003A9C  6700 003E 6328          beq       vsprintf_14
00003AA0  6E00 0046 6329          bgt       vsprintf_9
00003AA4  0C80 0000 6330          cmp.l     #32,D0
00003AA8  0020      
00003AAA  6724      6331          beq.s     vsprintf_13
00003AAC  603A      6332          bra.s     vsprintf_9
                    6333   vsprintf_15:
00003AAE  0C80 0000 6334          cmp.l     #45,D0
00003AB2  002D      
00003AB4  6702      6335          beq.s     vsprintf_11
00003AB6  6030      6336          bra.s     vsprintf_9
                    6337   vsprintf_11:
00003AB8  1D7C 0001 6338          move.b    #1,-51(A6)
00003ABC  FFCD      
00003ABE  52AE 000C 6339          addq.l    #1,12(A6)
00003AC2  6026      6340          bra.s     vsprintf_7
                    6341   vsprintf_12:
00003AC4  1D7C 0001 6342          move.b    #1,-50(A6)
00003AC8  FFCE      
00003ACA  52AE 000C 6343          addq.l    #1,12(A6)
00003ACE  601A      6344          bra.s     vsprintf_7
                    6345   vsprintf_13:
00003AD0  1D7C 0001 6346          move.b    #1,-49(A6)
00003AD4  FFCF      
00003AD6  52AE 000C 6347          addq.l    #1,12(A6)
00003ADA  600E      6348          bra.s     vsprintf_7
                    6349   vsprintf_14:
00003ADC  1D7C 0001 6350          move.b    #1,-48(A6)
00003AE0  FFD0      
00003AE2  52AE 000C 6351          addq.l    #1,12(A6)
00003AE6  6002      6352          bra.s     vsprintf_7
                    6353   vsprintf_9:
00003AE8  6002      6354          bra.s     vsprintf_8
                    6355   vsprintf_7:
00003AEA  6096      6356          bra       vsprintf_6
                    6357   vsprintf_8:
00003AEC  206E 000C 6358          move.l    12(A6),A0
00003AF0  1010      6359          move.b    (A0),D0
00003AF2  4880      6360          ext.w     D0
00003AF4  48C0      6361          ext.l     D0
00003AF6  0C80 0000 6362          cmp.l     #48,D0
00003AFA  0030      
00003AFC  660A      6363          bne.s     vsprintf_16
00003AFE  52AE 000C 6364          addq.l    #1,12(A6)
00003B02  1D7C 0001 6365          move.b    #1,-46(A6)
00003B06  FFD2      
                    6366   vsprintf_16:
00003B08  486E 0010 6367          pea       16(A6)
00003B0C  486E 000C 6368          pea       12(A6)
00003B10  6100 FE6E 6369          bsr       @vsprintf_getval
00003B14  504F      6370          addq.w    #8,A7
00003B16  2A40      6371          move.l    D0,A5
00003B18  206E 000C 6372          move.l    12(A6),A0
00003B1C  1010      6373          move.b    (A0),D0
00003B1E  4880      6374          ext.w     D0
00003B20  48C0      6375          ext.l     D0
00003B22  0C80 0000 6376          cmp.l     #46,D0
00003B26  002E      
00003B28  6614      6377          bne.s     vsprintf_18
00003B2A  52AE 000C 6378          addq.l    #1,12(A6)
00003B2E  486E 0010 6379          pea       16(A6)
00003B32  486E 000C 6380          pea       12(A6)
00003B36  6100 FE48 6381          bsr       @vsprintf_getval
00003B3A  504F      6382          addq.w    #8,A7
00003B3C  2A00      6383          move.l    D0,D5
                    6384   vsprintf_18:
00003B3E  206E 000C 6385          move.l    12(A6),A0
00003B42  1010      6386          move.b    (A0),D0
00003B44  4880      6387          ext.w     D0
00003B46  48C0      6388          ext.l     D0
00003B48  0C80 0000 6389          cmp.l     #108,D0
00003B4C  006C      
00003B4E  660A      6390          bne.s     vsprintf_20
00003B50  52AE 000C 6391          addq.l    #1,12(A6)
00003B54  1D7C 0001 6392          move.b    #1,-45(A6)
00003B58  FFD3      
                    6393   vsprintf_20:
00003B5A  206E 000C 6394          move.l    12(A6),A0
00003B5E  1010      6395          move.b    (A0),D0
00003B60  4880      6396          ext.w     D0
00003B62  48C0      6397          ext.l     D0
00003B64  0C80 0000 6398          cmp.l     #111,D0
00003B68  006F      
00003B6A  6700 00D4 6399          beq       vsprintf_27
00003B6E  6E34      6400          bgt.s     vsprintf_33
00003B70  0C80 0000 6401          cmp.l     #100,D0
00003B74  0064      
00003B76  6700 0054 6402          beq       vsprintf_24
00003B7A  6E1C      6403          bgt.s     vsprintf_34
00003B7C  0C80 0000 6404          cmp.l     #99,D0
00003B80  0063      
00003B82  6700 012C 6405          beq       vsprintf_30
00003B86  6E00 016A 6406          bgt       vsprintf_22
00003B8A  0C80 0000 6407          cmp.l     #88,D0
00003B8E  0058      
00003B90  6700 00E6 6408          beq       vsprintf_28
00003B94  6000 015C 6409          bra       vsprintf_22
                    6410   vsprintf_34:
00003B98  0C80 0000 6411          cmp.l     #105,D0
00003B9C  0069      
00003B9E  672C      6412          beq.s     vsprintf_24
00003BA0  6000 0150 6413          bra       vsprintf_22
                    6414   vsprintf_33:
00003BA4  0C80 0000 6415          cmp.l     #117,D0
00003BA8  0075      
00003BAA  6700 005C 6416          beq       vsprintf_26
00003BAE  6E0E      6417          bgt.s     vsprintf_35
00003BB0  0C80 0000 6418          cmp.l     #115,D0
00003BB4  0073      
00003BB6  6700 011C 6419          beq       vsprintf_31
00003BBA  6000 0136 6420          bra       vsprintf_22
                    6421   vsprintf_35:
00003BBE  0C80 0000 6422          cmp.l     #120,D0
00003BC2  0078      
00003BC4  6700 00B2 6423          beq       vsprintf_28
00003BC8  6000 0128 6424          bra       vsprintf_22
                    6425   vsprintf_24:
00003BCC  4A2E FFD3 6426          tst.b     -45(A6)
00003BD0  671A      6427          beq.s     vsprintf_36
00003BD2  4878 000A 6428          pea       10
00003BD6  2F03      6429          move.l    D3,-(A7)
00003BD8  206E 0010 6430          move.l    16(A6),A0
00003BDC  58AE 0010 6431          addq.l    #4,16(A6)
00003BE0  2F10      6432          move.l    (A0),-(A7)
00003BE2  6100 061E 6433          bsr       _ltoa
00003BE6  DEFC 000C 6434          add.w     #12,A7
00003BEA  6018      6435          bra.s     vsprintf_37
                    6436   vsprintf_36:
00003BEC  4878 000A 6437          pea       10
00003BF0  2F03      6438          move.l    D3,-(A7)
00003BF2  206E 0010 6439          move.l    16(A6),A0
00003BF6  58AE 0010 6440          addq.l    #4,16(A6)
00003BFA  2F10      6441          move.l    (A0),-(A7)
00003BFC  6100 0604 6442          bsr       _ltoa
00003C00  DEFC 000C 6443          add.w     #12,A7
                    6444   vsprintf_37:
00003C04  6000 00FA 6445          bra       vsprintf_23
                    6446   vsprintf_26:
00003C08  4A2E FFD3 6447          tst.b     -45(A6)
00003C0C  6718      6448          beq.s     vsprintf_38
00003C0E  4878 000A 6449          pea       10
00003C12  2F03      6450          move.l    D3,-(A7)
00003C14  206E 0010 6451          move.l    16(A6),A0
00003C18  58AE 0010 6452          addq.l    #4,16(A6)
00003C1C  2F10      6453          move.l    (A0),-(A7)
00003C1E  4E94      6454          jsr       (A4)
00003C20  DEFC 000C 6455          add.w     #12,A7
00003C24  6016      6456          bra.s     vsprintf_39
                    6457   vsprintf_38:
00003C26  4878 000A 6458          pea       10
00003C2A  2F03      6459          move.l    D3,-(A7)
00003C2C  206E 0010 6460          move.l    16(A6),A0
00003C30  58AE 0010 6461          addq.l    #4,16(A6)
00003C34  2F10      6462          move.l    (A0),-(A7)
00003C36  4E94      6463          jsr       (A4)
00003C38  DEFC 000C 6464          add.w     #12,A7
                    6465   vsprintf_39:
00003C3C  6000 00C2 6466          bra       vsprintf_23
                    6467   vsprintf_27:
00003C40  4A2E FFD3 6468          tst.b     -45(A6)
00003C44  6718      6469          beq.s     vsprintf_40
00003C46  4878 0008 6470          pea       8
00003C4A  2F03      6471          move.l    D3,-(A7)
00003C4C  206E 0010 6472          move.l    16(A6),A0
00003C50  58AE 0010 6473          addq.l    #4,16(A6)
00003C54  2F10      6474          move.l    (A0),-(A7)
00003C56  4E94      6475          jsr       (A4)
00003C58  DEFC 000C 6476          add.w     #12,A7
00003C5C  6016      6477          bra.s     vsprintf_41
                    6478   vsprintf_40:
00003C5E  4878 0008 6479          pea       8
00003C62  2F03      6480          move.l    D3,-(A7)
00003C64  206E 0010 6481          move.l    16(A6),A0
00003C68  58AE 0010 6482          addq.l    #4,16(A6)
00003C6C  2F10      6483          move.l    (A0),-(A7)
00003C6E  4E94      6484          jsr       (A4)
00003C70  DEFC 000C 6485          add.w     #12,A7
                    6486   vsprintf_41:
00003C74  6000 008A 6487          bra       vsprintf_23
                    6488   vsprintf_28:
00003C78  4A2E FFD3 6489          tst.b     -45(A6)
00003C7C  6718      6490          beq.s     vsprintf_42
00003C7E  4878 0010 6491          pea       16
00003C82  2F03      6492          move.l    D3,-(A7)
00003C84  206E 0010 6493          move.l    16(A6),A0
00003C88  58AE 0010 6494          addq.l    #4,16(A6)
00003C8C  2F10      6495          move.l    (A0),-(A7)
00003C8E  4E94      6496          jsr       (A4)
00003C90  DEFC 000C 6497          add.w     #12,A7
00003C94  6016      6498          bra.s     vsprintf_43
                    6499   vsprintf_42:
00003C96  4878 0010 6500          pea       16
00003C9A  2F03      6501          move.l    D3,-(A7)
00003C9C  206E 0010 6502          move.l    16(A6),A0
00003CA0  58AE 0010 6503          addq.l    #4,16(A6)
00003CA4  2F10      6504          move.l    (A0),-(A7)
00003CA6  4E94      6505          jsr       (A4)
00003CA8  DEFC 000C 6506          add.w     #12,A7
                    6507   vsprintf_43:
00003CAC  6000 0052 6508          bra       vsprintf_23
                    6509   vsprintf_30:
00003CB0  206E 0010 6510          move.l    16(A6),A0
00003CB4  58AE 0010 6511          addq.l    #4,16(A6)
00003CB8  2010      6512          move.l    (A0),D0
00003CBA  2042      6513          move.l    D2,A0
00003CBC  5282      6514          addq.l    #1,D2
00003CBE  1080      6515          move.b    D0,(A0)
00003CC0  2042      6516          move.l    D2,A0
00003CC2  4210      6517          clr.b     (A0)
00003CC4  200D      6518          move.l    A5,D0
00003CC6  6704      6519          beq.s     vsprintf_44
00003CC8  200D      6520          move.l    A5,D0
00003CCA  6002      6521          bra.s     vsprintf_45
                    6522   vsprintf_44:
00003CCC  7001      6523          moveq     #1,D0
                    6524   vsprintf_45:
00003CCE  2A00      6525          move.l    D0,D5
00003CD0  6000 002E 6526          bra       vsprintf_23
                    6527   vsprintf_31:
00003CD4  206E 0010 6528          move.l    16(A6),A0
00003CD8  58AE 0010 6529          addq.l    #4,16(A6)
00003CDC  2610      6530          move.l    (A0),D3
00003CDE  0C85 FFFF 6531          cmp.l     #-1,D5
00003CE2  FFFF      
00003CE4  660A      6532          bne.s     vsprintf_46
00003CE6  2F03      6533          move.l    D3,-(A7)
00003CE8  6100 05FE 6534          bsr       _strlen
00003CEC  584F      6535          addq.w    #4,A7
00003CEE  2A00      6536          move.l    D0,D5
                    6537   vsprintf_46:
00003CF0  600E      6538          bra.s     vsprintf_23
                    6539   vsprintf_22:
00003CF2  206E 000C 6540          move.l    12(A6),A0
00003CF6  2242      6541          move.l    D2,A1
00003CF8  5282      6542          addq.l    #1,D2
00003CFA  1290      6543          move.b    (A0),(A1)
00003CFC  2042      6544          move.l    D2,A0
00003CFE  4210      6545          clr.b     (A0)
                    6546   vsprintf_23:
00003D00  2F03      6547          move.l    D3,-(A7)
00003D02  6100 05E4 6548          bsr       _strlen
00003D06  584F      6549          addq.w    #4,A7
00003D08  1800      6550          move.b    D0,D4
00003D0A  206E 000C 6551          move.l    12(A6),A0
00003D0E  1010      6552          move.b    (A0),D0
00003D10  4880      6553          ext.w     D0
00003D12  48C0      6554          ext.l     D0
00003D14  0C80 0000 6555          cmp.l     #115,D0
00003D18  0073      
00003D1A  6618      6556          bne.s     vsprintf_48
00003D1C  0C85 0000 6557          cmp.l     #0,D5
00003D20  0000      
00003D22  6D10      6558          blt.s     vsprintf_48
00003D24  4884      6559          ext.w     D4
00003D26  48C4      6560          ext.l     D4
00003D28  B885      6561          cmp.l     D5,D4
00003D2A  6F04      6562          ble.s     vsprintf_50
00003D2C  1005      6563          move.b    D5,D0
00003D2E  6002      6564          bra.s     vsprintf_51
                    6565   vsprintf_50:
00003D30  1004      6566          move.b    D4,D0
                    6567   vsprintf_51:
00003D32  1800      6568          move.b    D0,D4
                    6569   vsprintf_48:
00003D34  206E 000C 6570          move.l    12(A6),A0
00003D38  1010      6571          move.b    (A0),D0
00003D3A  4880      6572          ext.w     D0
00003D3C  48C0      6573          ext.l     D0
00003D3E  0C80 0000 6574          cmp.l     #88,D0
00003D42  0058      
00003D44  6600 0026 6575          bne       vsprintf_56
00003D48  41EE FFDC 6576          lea       -36(A6),A0
00003D4C  2408      6577          move.l    A0,D2
                    6578   vsprintf_54:
00003D4E  2042      6579          move.l    D2,A0
00003D50  4A10      6580          tst.b     (A0)
00003D52  6718      6581          beq.s     vsprintf_56
00003D54  2042      6582          move.l    D2,A0
00003D56  1210      6583          move.b    (A0),D1
00003D58  4881      6584          ext.w     D1
00003D5A  48C1      6585          ext.l     D1
00003D5C  2F01      6586          move.l    D1,-(A7)
00003D5E  6100 F302 6587          bsr       _toupper
00003D62  584F      6588          addq.w    #4,A7
00003D64  2042      6589          move.l    D2,A0
00003D66  1080      6590          move.b    D0,(A0)
00003D68  5282      6591          addq.l    #1,D2
00003D6A  60E2      6592          bra       vsprintf_54
                    6593   vsprintf_56:
00003D6C  7E00      6594          moveq     #0,D7
00003D6E  41EE FFD4 6595          lea       -44(A6),A0
00003D72  2408      6596          move.l    A0,D2
00003D74  206E 000C 6597          move.l    12(A6),A0
00003D78  1010      6598          move.b    (A0),D0
00003D7A  4880      6599          ext.w     D0
00003D7C  48C0      6600          ext.l     D0
00003D7E  0C80 0000 6601          cmp.l     #100,D0
00003D82  0064      
00003D84  6714      6602          beq.s     vsprintf_59
00003D86  206E 000C 6603          move.l    12(A6),A0
00003D8A  1010      6604          move.b    (A0),D0
00003D8C  4880      6605          ext.w     D0
00003D8E  48C0      6606          ext.l     D0
00003D90  0C80 0000 6607          cmp.l     #105,D0
00003D94  0069      
00003D96  6600 0076 6608          bne       vsprintf_65
                    6609   vsprintf_59:
00003D9A  4A2E FFCE 6610          tst.b     -50(A6)
00003D9E  6612      6611          bne.s     vsprintf_62
00003DA0  2043      6612          move.l    D3,A0
00003DA2  1010      6613          move.b    (A0),D0
00003DA4  4880      6614          ext.w     D0
00003DA6  48C0      6615          ext.l     D0
00003DA8  0C80 0000 6616          cmp.l     #45,D0
00003DAC  002D      
00003DAE  6600 002E 6617          bne       vsprintf_60
                    6618   vsprintf_62:
00003DB2  2043      6619          move.l    D3,A0
00003DB4  1010      6620          move.b    (A0),D0
00003DB6  4880      6621          ext.w     D0
00003DB8  48C0      6622          ext.l     D0
00003DBA  0C80 0000 6623          cmp.l     #45,D0
00003DBE  002D      
00003DC0  660E      6624          bne.s     vsprintf_63
00003DC2  2043      6625          move.l    D3,A0
00003DC4  5283      6626          addq.l    #1,D3
00003DC6  2242      6627          move.l    D2,A1
00003DC8  5282      6628          addq.l    #1,D2
00003DCA  1290      6629          move.b    (A0),(A1)
00003DCC  5304      6630          subq.b    #1,D4
00003DCE  6008      6631          bra.s     vsprintf_64
                    6632   vsprintf_63:
00003DD0  2042      6633          move.l    D2,A0
00003DD2  5282      6634          addq.l    #1,D2
00003DD4  10BC 002B 6635          move.b    #43,(A0)
                    6636   vsprintf_64:
00003DD8  5287      6637          addq.l    #1,D7
00003DDA  6000 0032 6638          bra       vsprintf_65
                    6639   vsprintf_60:
00003DDE  4A2E FFCF 6640          tst.b     -49(A6)
00003DE2  6700 002A 6641          beq       vsprintf_65
00003DE6  2043      6642          move.l    D3,A0
00003DE8  1010      6643          move.b    (A0),D0
00003DEA  4880      6644          ext.w     D0
00003DEC  48C0      6645          ext.l     D0
00003DEE  0C80 0000 6646          cmp.l     #45,D0
00003DF2  002D      
00003DF4  660E      6647          bne.s     vsprintf_67
00003DF6  2043      6648          move.l    D3,A0
00003DF8  5283      6649          addq.l    #1,D3
00003DFA  2242      6650          move.l    D2,A1
00003DFC  5282      6651          addq.l    #1,D2
00003DFE  1290      6652          move.b    (A0),(A1)
00003E00  5304      6653          subq.b    #1,D4
00003E02  6008      6654          bra.s     vsprintf_68
                    6655   vsprintf_67:
00003E04  2042      6656          move.l    D2,A0
00003E06  5282      6657          addq.l    #1,D2
00003E08  10BC 0020 6658          move.b    #32,(A0)
                    6659   vsprintf_68:
00003E0C  5287      6660          addq.l    #1,D7
                    6661   vsprintf_65:
00003E0E  4A2E FFD0 6662          tst.b     -48(A6)
00003E12  6700 0066 6663          beq       vsprintf_77
00003E16  206E 000C 6664          move.l    12(A6),A0
00003E1A  1010      6665          move.b    (A0),D0
00003E1C  4880      6666          ext.w     D0
00003E1E  48C0      6667          ext.l     D0
00003E20  0C80 0000 6668          cmp.l     #111,D0
00003E24  006F      
00003E26  671A      6669          beq.s     vsprintf_73
00003E28  6E0C      6670          bgt.s     vsprintf_76
00003E2A  0C80 0000 6671          cmp.l     #88,D0
00003E2E  0058      
00003E30  6710      6672          beq.s     vsprintf_73
00003E32  6000 0046 6673          bra       vsprintf_77
                    6674   vsprintf_76:
00003E36  0C80 0000 6675          cmp.l     #120,D0
00003E3A  0078      
00003E3C  6704      6676          beq.s     vsprintf_73
00003E3E  6000 003A 6677          bra       vsprintf_77
                    6678   vsprintf_73:
00003E42  2042      6679          move.l    D2,A0
00003E44  5282      6680          addq.l    #1,D2
00003E46  10BC 0030 6681          move.b    #48,(A0)
00003E4A  5287      6682          addq.l    #1,D7
00003E4C  206E 000C 6683          move.l    12(A6),A0
00003E50  1010      6684          move.b    (A0),D0
00003E52  4880      6685          ext.w     D0
00003E54  48C0      6686          ext.l     D0
00003E56  0C80 0000 6687          cmp.l     #120,D0
00003E5A  0078      
00003E5C  6712      6688          beq.s     vsprintf_79
00003E5E  206E 000C 6689          move.l    12(A6),A0
00003E62  1010      6690          move.b    (A0),D0
00003E64  4880      6691          ext.w     D0
00003E66  48C0      6692          ext.l     D0
00003E68  0C80 0000 6693          cmp.l     #88,D0
00003E6C  0058      
00003E6E  660A      6694          bne.s     vsprintf_77
                    6695   vsprintf_79:
00003E70  2042      6696          move.l    D2,A0
00003E72  5282      6697          addq.l    #1,D2
00003E74  10BC 0078 6698          move.b    #120,(A0)
00003E78  5287      6699          addq.l    #1,D7
                    6700   vsprintf_77:
00003E7A  2042      6701          move.l    D2,A0
00003E7C  4210      6702          clr.b     (A0)
00003E7E  206E 000C 6703          move.l    12(A6),A0
00003E82  1010      6704          move.b    (A0),D0
00003E84  4880      6705          ext.w     D0
00003E86  48C0      6706          ext.l     D0
00003E88  0C80 0000 6707          cmp.l     #105,D0
00003E8C  0069      
00003E8E  6700 0076 6708          beq       vsprintf_82
00003E92  6E42      6709          bgt.s     vsprintf_93
00003E94  0C80 0000 6710          cmp.l     #99,D0
00003E98  0063      
00003E9A  6700 0084 6711          beq       vsprintf_96
00003E9E  6E1C      6712          bgt.s     vsprintf_94
00003EA0  0C80 0000 6713          cmp.l     #88,D0
00003EA4  0058      
00003EA6  6700 005E 6714          beq       vsprintf_82
00003EAA  6E00 0184 6715          bgt       vsprintf_80
00003EAE  0C80 0000 6716          cmp.l     #69,D0
00003EB2  0045      
00003EB4  6700 0050 6717          beq       vsprintf_82
00003EB8  6000 0176 6718          bra       vsprintf_80
                    6719   vsprintf_94:
00003EBC  0C80 0000 6720          cmp.l     #101,D0
00003EC0  0065      
00003EC2  6700 0042 6721          beq       vsprintf_82
00003EC6  6E00 0168 6722          bgt       vsprintf_80
00003ECA  0C80 0000 6723          cmp.l     #100,D0
00003ECE  0064      
00003ED0  6734      6724          beq.s     vsprintf_82
00003ED2  6000 015C 6725          bra       vsprintf_80
                    6726   vsprintf_93:
00003ED6  0C80 0000 6727          cmp.l     #117,D0
00003EDA  0075      
00003EDC  6728      6728          beq.s     vsprintf_82
00003EDE  6E1A      6729          bgt.s     vsprintf_95
00003EE0  0C80 0000 6730          cmp.l     #115,D0
00003EE4  0073      
00003EE6  6700 0038 6731          beq       vsprintf_96
00003EEA  6E00 0144 6732          bgt       vsprintf_80
00003EEE  0C80 0000 6733          cmp.l     #111,D0
00003EF2  006F      
00003EF4  6710      6734          beq.s     vsprintf_82
00003EF6  6000 0138 6735          bra       vsprintf_80
                    6736   vsprintf_95:
00003EFA  0C80 0000 6737          cmp.l     #120,D0
00003EFE  0078      
00003F00  6704      6738          beq.s     vsprintf_82
00003F02  6000 012C 6739          bra       vsprintf_80
                    6740   vsprintf_82:
00003F06  4A2E FFD2 6741          tst.b     -46(A6)
00003F0A  6714      6742          beq.s     vsprintf_96
00003F0C  4A2E FFCD 6743          tst.b     -51(A6)
00003F10  660E      6744          bne.s     vsprintf_96
00003F12  200D      6745          move.l    A5,D0
00003F14  9087      6746          sub.l     D7,D0
00003F16  4884      6747          ext.w     D4
00003F18  48C4      6748          ext.l     D4
00003F1A  9084      6749          sub.l     D4,D0
00003F1C  2D40 FFFC 6750          move.l    D0,-4(A6)
                    6751   vsprintf_96:
00003F20  202E FFFC 6752          move.l    -4(A6),D0
00003F24  0C80 0000 6753          cmp.l     #0,D0
00003F28  0000      
00003F2A  6C04      6754          bge.s     vsprintf_98
00003F2C  42AE FFFC 6755          clr.l     -4(A6)
                    6756   vsprintf_98:
00003F30  4A2E FFCD 6757          tst.b     -51(A6)
00003F34  6600 0030 6758          bne       vsprintf_104
00003F38  4884      6759          ext.w     D4
00003F3A  48C4      6760          ext.l     D4
00003F3C  2004      6761          move.l    D4,D0
00003F3E  D0AE FFFC 6762          add.l     -4(A6),D0
00003F42  D087      6763          add.l     D7,D0
00003F44  1D40 FFD1 6764          move.b    D0,-47(A6)
                    6765   vsprintf_102:
00003F48  102E FFD1 6766          move.b    -47(A6),D0
00003F4C  4880      6767          ext.w     D0
00003F4E  48C0      6768          ext.l     D0
00003F50  220D      6769          move.l    A5,D1
00003F52  534D      6770          subq.w    #1,A5
00003F54  B081      6771          cmp.l     D1,D0
00003F56  6C0E      6772          bge.s     vsprintf_104
00003F58  4878 0020 6773          pea       32
00003F5C  2F0A      6774          move.l    A2,-(A7)
00003F5E  4E93      6775          jsr       (A3)
00003F60  504F      6776          addq.w    #8,A7
00003F62  5286      6777          addq.l    #1,D6
00003F64  60E2      6778          bra       vsprintf_102
                    6779   vsprintf_104:
00003F66  41EE FFD4 6780          lea       -44(A6),A0
00003F6A  2408      6781          move.l    A0,D2
                    6782   vsprintf_105:
00003F6C  2042      6783          move.l    D2,A0
00003F6E  4A10      6784          tst.b     (A0)
00003F70  6716      6785          beq.s     vsprintf_107
00003F72  2042      6786          move.l    D2,A0
00003F74  5282      6787          addq.l    #1,D2
00003F76  1210      6788          move.b    (A0),D1
00003F78  4881      6789          ext.w     D1
00003F7A  48C1      6790          ext.l     D1
00003F7C  2F01      6791          move.l    D1,-(A7)
00003F7E  2F0A      6792          move.l    A2,-(A7)
00003F80  4E93      6793          jsr       (A3)
00003F82  504F      6794          addq.w    #8,A7
00003F84  5286      6795          addq.l    #1,D6
00003F86  60E4      6796          bra       vsprintf_105
                    6797   vsprintf_107:
00003F88  202E FFFC 6798          move.l    -4(A6),D0
00003F8C  1D40 FFD1 6799          move.b    D0,-47(A6)
                    6800   vsprintf_108:
00003F90  102E FFD1 6801          move.b    -47(A6),D0
00003F94  532E FFD1 6802          subq.b    #1,-47(A6)
00003F98  4A00      6803          tst.b     D0
00003F9A  670E      6804          beq.s     vsprintf_110
00003F9C  4878 0030 6805          pea       48
00003FA0  2F0A      6806          move.l    A2,-(A7)
00003FA2  4E93      6807          jsr       (A3)
00003FA4  504F      6808          addq.w    #8,A7
00003FA6  5286      6809          addq.l    #1,D6
00003FA8  60E6      6810          bra       vsprintf_108
                    6811   vsprintf_110:
00003FAA  2043      6812          move.l    D3,A0
00003FAC  4A10      6813          tst.b     (A0)
00003FAE  6700 0048 6814          beq       vsprintf_113
00003FB2  206E 000C 6815          move.l    12(A6),A0
00003FB6  1010      6816          move.b    (A0),D0
00003FB8  4880      6817          ext.w     D0
00003FBA  48C0      6818          ext.l     D0
00003FBC  0C80 0000 6819          cmp.l     #115,D0
00003FC0  0073      
00003FC2  670C      6820          beq.s     vsprintf_116
00003FC4  6E18      6821          bgt.s     vsprintf_119
00003FC6  0C80 0000 6822          cmp.l     #99,D0
00003FCA  0063      
00003FCC  6702      6823          beq.s     vsprintf_116
00003FCE  600E      6824          bra.s     vsprintf_119
                    6825   vsprintf_116:
00003FD0  2005      6826          move.l    D5,D0
00003FD2  5385      6827          subq.l    #1,D5
00003FD4  0C80 0000 6828          cmp.l     #0,D0
00003FD8  0000      
00003FDA  6E02      6829          bgt.s     vsprintf_119
00003FDC  6016      6830          bra.s     vsprintf_115
                    6831   vsprintf_119:
00003FDE  2043      6832          move.l    D3,A0
00003FE0  5283      6833          addq.l    #1,D3
00003FE2  1210      6834          move.b    (A0),D1
00003FE4  4881      6835          ext.w     D1
00003FE6  48C1      6836          ext.l     D1
00003FE8  2F01      6837          move.l    D1,-(A7)
00003FEA  2F0A      6838          move.l    A2,-(A7)
00003FEC  4E93      6839          jsr       (A3)
00003FEE  504F      6840          addq.w    #8,A7
00003FF0  5286      6841          addq.l    #1,D6
00003FF2  6002      6842          bra.s     vsprintf_112
                    6843   vsprintf_115:
00003FF4  6002      6844          bra.s     vsprintf_113
                    6845   vsprintf_112:
00003FF6  60B2      6846          bra       vsprintf_110
                    6847   vsprintf_113:
00003FF8  4A2E FFCD 6848          tst.b     -51(A6)
00003FFC  6700 0030 6849          beq       vsprintf_125
00004000  4884      6850          ext.w     D4
00004002  48C4      6851          ext.l     D4
00004004  2004      6852          move.l    D4,D0
00004006  D0AE FFFC 6853          add.l     -4(A6),D0
0000400A  D087      6854          add.l     D7,D0
0000400C  1D40 FFD1 6855          move.b    D0,-47(A6)
                    6856   vsprintf_123:
00004010  102E FFD1 6857          move.b    -47(A6),D0
00004014  4880      6858          ext.w     D0
00004016  48C0      6859          ext.l     D0
00004018  220D      6860          move.l    A5,D1
0000401A  534D      6861          subq.w    #1,A5
0000401C  B081      6862          cmp.l     D1,D0
0000401E  6C0E      6863          bge.s     vsprintf_125
00004020  4878 0020 6864          pea       32
00004024  2F0A      6865          move.l    A2,-(A7)
00004026  4E93      6866          jsr       (A3)
00004028  504F      6867          addq.w    #8,A7
0000402A  5386      6868          subq.l    #1,D6
0000402C  60E2      6869          bra       vsprintf_123
                    6870   vsprintf_125:
0000402E  6014      6871          bra.s     vsprintf_81
                    6872   vsprintf_80:
00004030  206E 000C 6873          move.l    12(A6),A0
00004034  1210      6874          move.b    (A0),D1
00004036  4881      6875          ext.w     D1
00004038  48C1      6876          ext.l     D1
0000403A  2F01      6877          move.l    D1,-(A7)
0000403C  2F0A      6878          move.l    A2,-(A7)
0000403E  4E93      6879          jsr       (A3)
00004040  504F      6880          addq.w    #8,A7
00004042  5286      6881          addq.l    #1,D6
                    6882   vsprintf_81:
00004044  52AE 000C 6883          addq.l    #1,12(A6)
                    6884   vsprintf_2:
00004048  6000 F9D6 6885          bra       vsprintf_1
                    6886   vsprintf_3:
0000404C  4A92      6887          tst.l     (A2)
0000404E  6710      6888          beq.s     vsprintf_126
00004050  4201      6889          clr.b     D1
00004052  C2BC 0000 6890          and.l     #255,D1
00004056  00FF      
00004058  2F01      6891          move.l    D1,-(A7)
0000405A  2F0A      6892          move.l    A2,-(A7)
0000405C  4E93      6893          jsr       (A3)
0000405E  504F      6894          addq.w    #8,A7
                    6895   vsprintf_126:
00004060  2006      6896          move.l    D6,D0
00004062  4CDF 3CFC 6897          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004066  4E5E      6898          unlk      A6
00004068  4E75      6899          rts
                    6900   ULMUL:
0000406A  4E56 0000 6901          link    A6,#0
0000406E  48E7 C000 6902          movem.l D0/D1,-(A7)
00004072  222E 0008 6903          move.l  8(A6),D1
00004076  202E 000C 6904          move.l  12(A6),D0
0000407A  602C      6905          bra.s   lmul_3
                    6906   LMUL:
0000407C  4E56 0000 6907          link    A6,#0
00004080  48E7 C000 6908          movem.l D0/D1,-(A7)
00004084  222E 0008 6909          move.l  8(A6),D1
00004088  202E 000C 6910          move.l  12(A6),D0
0000408C  4A80      6911          tst.l   D0
0000408E  6A0A      6912          bpl.s   lmul_1
00004090  4480      6913          neg.l   D0
00004092  4A81      6914          tst.l   D1
00004094  6A0A      6915          bpl.s   lmul_2
00004096  4481      6916          neg.l   D1
00004098  600E      6917          bra.s   lmul_3
                    6918   lmul_1:
0000409A  4A81      6919          tst.l   D1
0000409C  6A0A      6920          bpl.s   lmul_3
0000409E  4481      6921          neg.l   D1
                    6922   lmul_2:
000040A0  6114      6923          bsr.s   domul
000040A2  4481      6924          neg.l   D1
000040A4  4080      6925          negx.l  D0
000040A6  6002      6926          bra.s   lmul_4
                    6927   lmul_3:
000040A8  610C      6928          bsr.s   domul
                    6929   lmul_4:
000040AA  2D41 0008 6930          move.l  D1,8(A6)
000040AE  4CDF 0003 6931          movem.l (A7)+,D0/D1
000040B2  4E5E      6932          unlk    A6
000040B4  4E75      6933          rts
                    6934   domul:
000040B6  0C81 0000 6935          cmpi.l  #$FFFF,D1
000040BA  FFFF      
000040BC  620C      6936          bhi.s   domul_1
000040BE  0C80 0000 6937          cmpi.l  #$FFFF,D0
000040C2  FFFF      
000040C4  620E      6938          bhi.s   domul_2
000040C6  C2C0      6939          mulu    D0,D1
000040C8  4E75      6940          rts
                    6941   domul_1:
000040CA  0C80 0000 6942          cmpi.l  #$FFFF,D0
000040CE  FFFF      
000040D0  6218      6943          bhi.s   domul_4
000040D2  6002      6944          bra.s   domul_3
                    6945   domul_2
000040D4  C141      6946          exg     D0,D1
                    6947   domul_3:
000040D6  2F02      6948          move.l  D2,-(A7)
000040D8  2401      6949          move.l  D1,D2
000040DA  4842      6950          swap    D2
000040DC  C2C0      6951          mulu    D0,D1
000040DE  C4C0      6952          mulu    D0,D2
000040E0  4842      6953          swap    D2
000040E2  4242      6954          clr.w   D2
000040E4  D282      6955          add.l   D2,D1
000040E6  241F      6956          move.l  (A7)+,D2
000040E8  4E75      6957          rts
                    6958   domul_4:
000040EA  48E7 3000 6959          movem.l D2/D3,-(A7)
000040EE  2401      6960          move.l  D1,D2
000040F0  2601      6961          move.l  D1,D3
000040F2  C2C0      6962          mulu    D0,D1
000040F4  4842      6963          swap    D2
000040F6  C4C0      6964          mulu    D0,D2
000040F8  4840      6965          swap    D0
000040FA  C6C0      6966          mulu    D0,D3
000040FC  D483      6967          add.l   D3,D2
000040FE  4842      6968          swap    D2
00004100  4242      6969          clr.w   D2
00004102  D282      6970          add.l   D2,D1
00004104  4CDF 000C 6971          movem.l (A7)+,D2/D3
00004108  4E75      6972          rts
                    6973   _gets:
0000410A  4E56 0000 6974          link      A6,#0
0000410E  48E7 3820 6975          movem.l   D2/D3/D4/A2,-(A7)
00004112  45F8 2F68 6976          lea       _putch,A2
00004116  282E 0008 6977          move.l    8(A6),D4
0000411A  2404      6978          move.l    D4,D2
                    6979   gets_1:
0000411C  6100 EE7A 6980          bsr       _getch
00004120  2600      6981          move.l    D0,D3
00004122  0C80 0000 6982          cmp.l     #10,D0
00004126  000A      
00004128  6700 003C 6983          beq       gets_3
0000412C  0C83 0000 6984          cmp.l     #8,D3
00004130  0008      
00004132  6712      6985          beq.s     gets_4
00004134  2042      6986          move.l    D2,A0
00004136  5282      6987          addq.l    #1,D2
00004138  1083      6988          move.b    D3,(A0)
0000413A  4883      6989          ext.w     D3
0000413C  48C3      6990          ext.l     D3
0000413E  2F03      6991          move.l    D3,-(A7)
00004140  4E92      6992          jsr       (A2)
00004142  584F      6993          addq.w    #4,A7
00004144  601E      6994          bra.s     gets_6
                    6995   gets_4:
00004146  B484      6996          cmp.l     D4,D2
00004148  631A      6997          bls.s     gets_6
0000414A  4878 0008 6998          pea       8
0000414E  4E92      6999          jsr       (A2)
00004150  584F      7000          addq.w    #4,A7
00004152  4878 0020 7001          pea       32
00004156  4E92      7002          jsr       (A2)
00004158  584F      7003          addq.w    #4,A7
0000415A  4878 0008 7004          pea       8
0000415E  4E92      7005          jsr       (A2)
00004160  584F      7006          addq.w    #4,A7
00004162  5382      7007          subq.l    #1,D2
                    7008   gets_6:
00004164  60B6      7009          bra       gets_1
                    7010   gets_3:
00004166  4878 000A 7011          pea       10
0000416A  4E92      7012          jsr       (A2)
0000416C  584F      7013          addq.w    #4,A7
0000416E  2042      7014          move.l    D2,A0
00004170  4210      7015          clr.b     (A0)
00004172  2004      7016          move.l    D4,D0
00004174  4CDF 041C 7017          movem.l   (A7)+,D2/D3/D4/A2
00004178  4E5E      7018          unlk      A6
0000417A  4E75      7019          rts
                    7020   _ungetch:
0000417C  4E56 0000 7021          link      A6,#0
00004180  23EE 0008 7022          move.l    8(A6),__ungetbuf
00004184  0B00 00C0 
00004188  202E 0008 7023          move.l    8(A6),D0
0000418C  4E5E      7024          unlk      A6
0000418E  4E75      7025          rts
                    7026   @itoa_convert:
00004190  4E56 0000 7027          link      A6,#0
00004194  48E7 3C00 7028          movem.l   D2/D3/D4/D5,-(A7)
00004198  242E 0008 7029          move.l    8(A6),D2
0000419C  262E 0010 7030          move.l    16(A6),D3
000041A0  2A2E 000C 7031          move.l    12(A6),D5
000041A4  2F05      7032          move.l    D5,-(A7)
000041A6  2F03      7033          move.l    D3,-(A7)
000041A8  6100 ECE0 7034          bsr       ULDIV
000041AC  202F 0004 7035          move.l    4(A7),D0
000041B0  504F      7036          addq.w    #8,A7
000041B2  2800      7037          move.l    D0,D4
000041B4  BA83      7038          cmp.l     D3,D5
000041B6  651A      7039          blo.s     @itoa_convert_1
000041B8  2F03      7040          move.l    D3,-(A7)
000041BA  2F05      7041          move.l    D5,-(A7)
000041BC  2F03      7042          move.l    D3,-(A7)
000041BE  6100 ECCA 7043          bsr       ULDIV
000041C2  2217      7044          move.l    (A7),D1
000041C4  504F      7045          addq.w    #8,A7
000041C6  2F01      7046          move.l    D1,-(A7)
000041C8  2F02      7047          move.l    D2,-(A7)
000041CA  61C4      7048          bsr       @itoa_convert
000041CC  DEFC 000C 7049          add.w     #12,A7
000041D0  2400      7050          move.l    D0,D2
                    7051   @itoa_convert_1:
000041D2  0C84 0000 7052          cmp.l     #9,D4
000041D6  0009      
000041D8  6E0A      7053          bgt.s     @itoa_convert_3
000041DA  2004      7054          move.l    D4,D0
000041DC  0680 0000 7055          add.l     #48,D0
000041E0  0030      
000041E2  600E      7056          bra.s     @itoa_convert_4
                    7057   @itoa_convert_3:
000041E4  2004      7058          move.l    D4,D0
000041E6  0680 0000 7059          add.l     #97,D0
000041EA  0061      
000041EC  0480 0000 7060          sub.l     #10,D0
000041F0  000A      
                    7061   @itoa_convert_4:
000041F2  2042      7062          move.l    D2,A0
000041F4  1080      7063          move.b    D0,(A0)
000041F6  2002      7064          move.l    D2,D0
000041F8  5280      7065          addq.l    #1,D0
000041FA  4CDF 003C 7066          movem.l   (A7)+,D2/D3/D4/D5
000041FE  4E5E      7067          unlk      A6
00004200  4E75      7068          rts
                    7069   _ltoa:
00004202  4E56 0000 7070          link      A6,#0
00004206  48E7 3C00 7071          movem.l   D2/D3/D4/D5,-(A7)
0000420A  242E 0008 7072          move.l    8(A6),D2
0000420E  262E 000C 7073          move.l    12(A6),D3
00004212  2A2E 0010 7074          move.l    16(A6),D5
00004216  2803      7075          move.l    D3,D4
00004218  0C85 0000 7076          cmp.l     #2,D5
0000421C  0002      
0000421E  6D08      7077          blt.s     ltoa_3
00004220  0C85 0000 7078          cmp.l     #36,D5
00004224  0024      
00004226  6F06      7079          ble.s     ltoa_1
                    7080   ltoa_3:
00004228  2003      7081          move.l    D3,D0
0000422A  6000 0052 7082          bra       ltoa_4
                    7083   ltoa_1:
0000422E  0C85 0000 7084          cmp.l     #10,D5
00004232  000A      
00004234  6600 0032 7085          bne       ltoa_5
00004238  0C82 0000 7086          cmp.l     #0,D2
0000423C  0000      
0000423E  6C28      7087          bge.s     ltoa_5
00004240  2002      7088          move.l    D2,D0
00004242  4480      7089          neg.l     D0
00004244  2400      7090          move.l    D0,D2
00004246  0C82 0000 7091          cmp.l     #0,D2
0000424A  0000      
0000424C  6C12      7092          bge.s     ltoa_7
0000424E  4879 0000 7093          pea       @itoa_1
00004252  5790      
00004254  2F03      7094          move.l    D3,-(A7)
00004256  6100 EC22 7095          bsr       _strcpy
0000425A  504F      7096          addq.w    #8,A7
0000425C  2003      7097          move.l    D3,D0
0000425E  601E      7098          bra.s     ltoa_4
                    7099   ltoa_7:
00004260  2044      7100          move.l    D4,A0
00004262  5284      7101          addq.l    #1,D4
00004264  10BC 002D 7102          move.b    #45,(A0)
                    7103   ltoa_5:
00004268  2F05      7104          move.l    D5,-(A7)
0000426A  2F02      7105          move.l    D2,-(A7)
0000426C  2F04      7106          move.l    D4,-(A7)
0000426E  6100 FF20 7107          bsr       @itoa_convert
00004272  DEFC 000C 7108          add.w     #12,A7
00004276  2800      7109          move.l    D0,D4
00004278  2044      7110          move.l    D4,A0
0000427A  4210      7111          clr.b     (A0)
0000427C  2003      7112          move.l    D3,D0
                    7113   ltoa_4:
0000427E  4CDF 003C 7114          movem.l   (A7)+,D2/D3/D4/D5
00004282  4E5E      7115          unlk      A6
00004284  4E75      7116          rts
                    7117   _ultoa:
00004286  4E56 0000 7118          link      A6,#0
0000428A  48E7 3800 7119          movem.l   D2/D3/D4,-(A7)
0000428E  262E 0010 7120          move.l    16(A6),D3
00004292  282E 000C 7121          move.l    12(A6),D4
00004296  2404      7122          move.l    D4,D2
00004298  0C83 0000 7123          cmp.l     #2,D3
0000429C  0002      
0000429E  6D08      7124          blt.s     ultoa_3
000042A0  0C83 0000 7125          cmp.l     #36,D3
000042A4  0024      
000042A6  6F04      7126          ble.s     ultoa_1
                    7127   ultoa_3:
000042A8  2004      7128          move.l    D4,D0
000042AA  6018      7129          bra.s     ultoa_4
                    7130   ultoa_1:
000042AC  2F03      7131          move.l    D3,-(A7)
000042AE  2F2E 0008 7132          move.l    8(A6),-(A7)
000042B2  2F02      7133          move.l    D2,-(A7)
000042B4  6100 FEDA 7134          bsr       @itoa_convert
000042B8  DEFC 000C 7135          add.w     #12,A7
000042BC  2400      7136          move.l    D0,D2
000042BE  2042      7137          move.l    D2,A0
000042C0  4210      7138          clr.b     (A0)
000042C2  2004      7139          move.l    D4,D0
                    7140   ultoa_4:
000042C4  4CDF 001C 7141          movem.l   (A7)+,D2/D3/D4
000042C8  4E5E      7142          unlk      A6
000042CA  4E75      7143          rts
                    7144   _itoa:
000042CC  4E56 0000 7145          link      A6,#0
000042D0  2F2E 0010 7146          move.l    16(A6),-(A7)
000042D4  2F2E 000C 7147          move.l    12(A6),-(A7)
000042D8  2F2E 0008 7148          move.l    8(A6),-(A7)
000042DC  6100 FF24 7149          bsr       _ltoa
000042E0  DEFC 000C 7150          add.w     #12,A7
000042E4  4E5E      7151          unlk      A6
000042E6  4E75      7152          rts
                    7153   _strlen:
000042E8  206F 0004 7154          move.l    (4,A7),A0
000042EC  2248      7155          move.l    A0,A1
                    7156   strlen_1:
000042EE  4A19      7157          tst.b     (A1)+
000042F0  66FC      7158          bne       strlen_1
000042F2  2009      7159          move.l    A1,D0
000042F4  9088      7160          sub.l     A0,D0
000042F6  5380      7161          subq.l    #1,D0
000042F8  4E75      7162          rts
                    7163          section   const
                    7164   
                    7165   @m68kde~1_1:
000042FA  0D0A 00   7166          dc.b      13,10,0
                    7167   @m68kde~1_2:
000042FE  0D53 7769 7168          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004302  7463 6865 
00004306  7320 5357 
0000430A  5B        
0000430B  372D 305D 7169          dc.b      55,45,48,93,32,61,32,0
0000430F  203D 2000 
                    7170   @m68kde~1_3:
00004314  3000      7171          dc.b      48,0
                    7172   @m68kde~1_4:
00004316  3100      7173          dc.b      49,0
                    7174   @m68kde~1_5:
00004318  0D0A 4475 7175          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
0000431C  6D70 204D 
00004320  656D 6F72 
00004324  79        
00004325  2042 6C6F 7176          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004329  636B 3A20 
0000432D  3C45 5343 
00004331  3E20      
00004333  746F 2041 7177          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004337  626F 7274 
0000433B  2C20 3C53 
0000433F  50        
00004340  4143 453E 7178          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004344  2074 6F20 
00004348  436F 6E74 
0000434C  69        
0000434D  6E75 6500 7179          dc.b      110,117,101,0
                    7180   @m68kde~1_6:
00004352  0D0A 456E 7181          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004356  7465 7220 
0000435A  5374 6172 
0000435E  74        
0000435F  2041 6464 7182          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004363  7265 7373 
00004367  3A20 00   
                    7183   @m68kde~1_7:
0000436A  0D0A 2530 7184          dc.b      13,10,37,48,56,120,32,0
0000436E  3878 2000 
                    7185   @m68kde~1_8:
00004372  2530 3258 7186          dc.b      37,48,50,88,0
00004376  00        
                    7187   @m68kde~1_9:
00004378  2020 00   7188          dc.b      32,32,0
                    7189   @m68kde~1_10:
0000437C  0D0A 4669 7190          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004380  6C6C 204D 
00004384  656D 6F72 
00004388  79        
00004389  2042 6C6F 7191          dc.b      32,66,108,111,99,107,0
0000438D  636B 00   
                    7192   @m68kde~1_11:
00004390  0D0A 456E 7193          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004394  7465 7220 
00004398  456E 6420 
0000439C  41        
0000439D  6464 7265 7194          dc.b      100,100,114,101,115,115,58,32,0
000043A1  7373 3A20 
000043A5  00        
                    7195   @m68kde~1_12:
000043A6  0D0A 456E 7196          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000043AA  7465 7220 
000043AE  4669 6C6C 
000043B2  20        
000043B3  4461 7461 7197          dc.b      68,97,116,97,58,32,0
000043B7  3A20 00   
                    7198   @m68kde~1_13:
000043BA  0D0A 4669 7199          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000043BE  6C6C 696E 
000043C2  6720 4164 
000043C6  64        
000043C7  7265 7373 7200          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000043CB  6573 205B 
000043CF  2425 3038 
000043D3  58        
000043D4  202D 2024 7201          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000043D8  2530 3858 
000043DC  5D20 7769 
000043E0  7468      
000043E2  2024 2530 7202          dc.b      32,36,37,48,50,88,0
000043E6  3258 00   
                    7203   @m68kde~1_14:
000043EA  0D0A 5573 7204          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000043EE  6520 4879 
000043F2  7065 7254 
000043F6  65        
000043F7  726D 696E 7205          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000043FB  616C 2074 
000043FF  6F20 5365 
00004403  6E64 2054 7206          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004407  6578 7420 
0000440B  4669 6C65 
0000440F  2028 2E68 7207          dc.b      32,40,46,104,101,120,41,13,10,0
00004413  6578 290D 
00004417  0A00      
                    7208   @m68kde~1_15:
0000441A  0D0A 4C6F 7209          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
0000441E  6164 2046 
00004422  6169 6C65 
00004426  64        
00004427  2061 7420 7210          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000442B  4164 6472 
0000442F  6573 7320 
00004433  3D        
00004434  205B 2425 7211          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004438  3038 585D 
0000443C  0D0A 00   
                    7212   @m68kde~1_16:
00004440  0D0A 5375 7213          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004444  6363 6573 
00004448  733A 2044 
0000444C  6F        
0000444D  776E 6C6F 7214          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004451  6164 6564 
00004455  2025 6420 
00004459  6279 7465 7215          dc.b      98,121,116,101,115,13,10,0
0000445D  730D 0A00 
                    7216   @m68kde~1_17:
00004462  0D0A 4578 7217          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004466  616D 696E 
0000446A  6520 616E 
0000446E  64        
0000446F  2043 6861 7218          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004473  6E67 6520 
00004477  4D65 6D6F 
0000447B  72        
0000447C  7900      7219          dc.b      121,0
                    7220   @m68kde~1_18:
0000447E  0D0A 3C45 7221          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004482  5343 3E20 
00004486  746F 2053 
0000448A  746F      
0000448C  702C 203C 7222          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004490  5350 4143 
00004494  453E 2074 
00004498  6F20      
0000449A  4164 7661 7223          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000449E  6E63 652C 
000044A2  2027 2D27 
000044A6  2074      
000044A8  6F20 476F 7224          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000044AC  2042 6163 
000044B0  6B2C 203C 
000044B4  4441      
000044B6  5441 3E20 7225          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000044BA  746F 2063 
000044BE  6861 6E67 
000044C2  65        
000044C3  00        7226          dc.b      0
                    7227   @m68kde~1_19:
000044C4  0D0A 456E 7228          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000044C8  7465 7220 
000044CC  4164 6472 
000044D0  65        
000044D1  7373 3A20 7229          dc.b      115,115,58,32,0
000044D5  00        
                    7230   @m68kde~1_20:
000044D6  0D0A 5B25 7231          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000044DA  3038 785D 
000044DE  203A 2025 
000044E2  3032 78   
000044E5  2020 00   7232          dc.b      32,32,0
                    7233   @m68kde~1_21:
000044E8  0D0A 5761 7234          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000044EC  726E 696E 
000044F0  6720 4368 
000044F4  61        
000044F5  6E67 6520 7235          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000044F9  4661 696C 
000044FD  6564 3A20 
00004501  57        
00004502  726F 7465 7236          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004506  205B 2530 
0000450A  3278 5D2C 
0000450E  20        
0000450F  5265 6164 7237          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004513  205B 2530 
00004517  3278 5D00 
                    7238   @m68kde~1_22:
0000451C  0A45 7261 7239          dc.b      10,69,114,97,115,105,110,103,46,46,46,10,0
00004520  7369 6E67 
00004524  2E2E 2E0A 
00004528  00        
                    7240   @m68kde~1_23:
0000452A  0D0A 2050 7241          dc.b      13,10,32,80,114,111,103,114,97,109,109,105,110
0000452E  726F 6772 
00004532  616D 6D69 
00004536  6E        
00004537  6720 436F 7242          dc.b      103,32,67,111,109,112,108,101,116,101,33,0
0000453B  6D70 6C65 
0000453F  7465 2100 
                    7243   @m68kde~1_24:
00004544  0D0A 204C 7244          dc.b      13,10,32,76,111,97,100,105,110,103,32,80,114
00004548  6F61 6469 
0000454C  6E67 2050 
00004550  72        
00004551  6F67 7261 7245          dc.b      111,103,114,97,109,32,70,114,111,109,32,83,80
00004555  6D20 4672 
00004559  6F6D 2053 
0000455D  50        
0000455E  4920 466C 7246          dc.b      73,32,70,108,97,115,104,46,46,46,46,0
00004562  6173 682E 
00004566  2E2E 2E00 
                    7247   @m68kde~1_25:
0000456A  0D0A 2052 7248          dc.b      13,10,32,82,101,97,100,32,68,97,116,97,58,32
0000456E  6561 6420 
00004572  4461 7461 
00004576  3A20      
00004578  2530 3878 7249          dc.b      37,48,56,120,32,10,0
0000457C  200A 00   
                    7250   @m68kde~1_26:
00004580  2425 3038 7251          dc.b      36,37,48,56,88,32,32,0
00004584  5820 2000 
                    7252   @m68kde~1_27:
00004588  2000      7253          dc.b      32,0
                    7254   @m68kde~1_28:
0000458A  2E00      7255          dc.b      46,0
                    7256   @m68kde~1_29:
0000458C  2563 00   7257          dc.b      37,99,0
                    7258   @m68kde~1_30:
00004590  00        7259          dc.b      0
                    7260   @m68kde~1_31:
00004592  0D0A 0D0A 7261          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004596  2044 3020 
0000459A  3D20 2425 
0000459E  3038 58   
000045A1  2020 4130 7262          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000045A5  203D 2024 
000045A9  2530 3858 
000045AD  00        
                    7263   @m68kde~1_32:
000045AE  0D0A 2044 7264          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000045B2  3120 3D20 
000045B6  2425 3038 
000045BA  5820 20   
000045BD  4131 203D 7265          dc.b      65,49,32,61,32,36,37,48,56,88,0
000045C1  2024 2530 
000045C5  3858 00   
                    7266   @m68kde~1_33:
000045C8  0D0A 2044 7267          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000045CC  3220 3D20 
000045D0  2425 3038 
000045D4  5820 20   
000045D7  4132 203D 7268          dc.b      65,50,32,61,32,36,37,48,56,88,0
000045DB  2024 2530 
000045DF  3858 00   
                    7269   @m68kde~1_34:
000045E2  0D0A 2044 7270          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
000045E6  3320 3D20 
000045EA  2425 3038 
000045EE  5820 20   
000045F1  4133 203D 7271          dc.b      65,51,32,61,32,36,37,48,56,88,0
000045F5  2024 2530 
000045F9  3858 00   
                    7272   @m68kde~1_35:
000045FC  0D0A 2044 7273          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004600  3420 3D20 
00004604  2425 3038 
00004608  5820 20   
0000460B  4134 203D 7274          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000460F  2024 2530 
00004613  3858 00   
                    7275   @m68kde~1_36:
00004616  0D0A 2044 7276          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
0000461A  3520 3D20 
0000461E  2425 3038 
00004622  5820 20   
00004625  4135 203D 7277          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004629  2024 2530 
0000462D  3858 00   
                    7278   @m68kde~1_37:
00004630  0D0A 2044 7279          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004634  3620 3D20 
00004638  2425 3038 
0000463C  5820 20   
0000463F  4136 203D 7280          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004643  2024 2530 
00004647  3858 00   
                    7281   @m68kde~1_38:
0000464A  0D0A 2044 7282          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
0000464E  3720 3D20 
00004652  2425 3038 
00004656  5820 20   
00004659  4137 203D 7283          dc.b      65,55,32,61,32,36,37,48,56,88,0
0000465D  2024 2530 
00004661  3858 00   
                    7284   @m68kde~1_39:
00004664  0D0A 0D0A 7285          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004668  5553 5020 
0000466C  3D20 2425 
00004670  3038 58   
00004673  2020 2841 7286          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004677  3729 2055 
0000467B  7365 7220 
0000467F  5350      
00004681  00        7287          dc.b      0
                    7288   @m68kde~1_40:
00004682  0D0A 5353 7289          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004686  5020 3D20 
0000468A  2425 3038 
0000468E  5820 20   
00004691  2841 3729 7290          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004695  2053 7570 
00004699  6572 7669 
0000469D  73        
0000469E  6F72 2053 7291          dc.b      111,114,32,83,80,0
000046A2  5000      
                    7292   @m68kde~1_41:
000046A4  0D0A 2053 7293          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000046A8  5220 3D20 
000046AC  2425 3034 
000046B0  5820 20   
000046B3  2000      7294          dc.b      32,0
                    7295   @m68kde~1_42:
000046B6  2020 205B 7296          dc.b      32,32,32,91,0
000046BA  00        
                    7297   @m68kde~1_43:
000046BC  0D0A 2050 7298          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000046C0  4320 3D20 
000046C4  2425 3038 
000046C8  5820 20   
000046CB  00        7299          dc.b      0
                    7300   @m68kde~1_44:
000046CC  5B40 2042 7301          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
000046D0  5245 414B 
000046D4  504F 494E 
000046D8  545D 00   
                    7302   @m68kde~1_45:
000046DC  0D0A 5750 7303          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000046E0  2564 203D 
000046E4  2025 7300 
                    7304   @m68kde~1_46:
000046E8  0D0A 0D0A 7305          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000046EC  0D0A 0D0A 
000046F0  0D0A 0D0A 
000046F4  5369 6E   
000046F7  676C 6520 7306          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000046FB  5374 6570 
000046FF  2020 3A5B 
00004703  4F        
00004704  4E5D 00   7307          dc.b      78,93,0
                    7308   @m68kde~1_47:
00004708  0D0A 4272 7309          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000470C  6561 6B20 
00004710  506F 696E 
00004714  74        
00004715  7320 3A5B 7310          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004719  4469 7361 
0000471D  626C 6564 
00004721  5D        
00004722  00        7311          dc.b      0
                    7312   @m68kde~1_48:
00004724  0D0A 5072 7313          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004728  6573 7320 
0000472C  3C53 5041 
00004730  4345      
00004732  3E20 746F 7314          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004736  2045 7865 
0000473A  6375 7465 
0000473E  20        
0000473F  4E65 7874 7315          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004743  2049 6E73 
00004747  7472 7563 
0000474B  7469 6F6E 7316          dc.b      116,105,111,110,0
0000474F  00        
                    7317   @m68kde~1_49:
00004750  0D0A 5072 7318          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004754  6573 7320 
00004758  3C45 5343 
0000475C  3E20      
0000475E  746F 2052 7319          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004762  6573 756D 
00004766  6520 5072 
0000476A  6F67 7261 7320          dc.b      111,103,114,97,109,0
0000476E  6D00      
                    7321   @m68kde~1_50:
00004770  0D0A 496C 7322          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004774  6C65 6761 
00004778  6C20 4461 
0000477C  74        
0000477D  6120 5265 7323          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004781  6769 7374 
00004785  6572 203A 
00004789  20        
0000478A  5573 6520 7324          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
0000478E  4430 2D44 
00004792  372E 2E2E 
00004796  2E2E      
00004798  0D0A 00   7325          dc.b      13,10,0
                    7326   @m68kde~1_51:
0000479C  0D0A 4425 7327          dc.b      13,10,68,37,99,32,61,32,0
000047A0  6320 3D20 
000047A4  00        
                    7328   @m68kde~1_52:
000047A6  0D0A 496C 7329          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000047AA  6C65 6761 
000047AE  6C20 4164 
000047B2  64        
000047B3  7265 7373 7330          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000047B7  2052 6567 
000047BB  6973 7465 
000047BF  7220 3A20 7331          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000047C3  5573 6520 
000047C7  4130 2D41 
000047CB  372E      
000047CD  2E2E 2E2E 7332          dc.b      46,46,46,46,13,10,0
000047D1  0D0A 00   
                    7333   @m68kde~1_53:
000047D4  0D0A 4125 7334          dc.b      13,10,65,37,99,32,61,32,0
000047D8  6320 3D20 
000047DC  00        
                    7335   @m68kde~1_54:
000047DE  0D0A 5573 7336          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000047E2  6572 2053 
000047E6  5020 3D20 
000047EA  00        
                    7337   @m68kde~1_55:
000047EC  0D0A 496C 7338          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000047F0  6C65 6761 
000047F4  6C20 5265 
000047F8  67        
000047F9  6973 7465 7339          dc.b      105,115,116,101,114,46,46,46,46,0
000047FD  722E 2E2E 
00004801  2E00      
                    7340   @m68kde~1_56:
00004804  0D0A 5379 7341          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004808  7374 656D 
0000480C  2053 5020 
00004810  3D        
00004811  2000      7342          dc.b      32,0
                    7343   @m68kde~1_57:
00004814  0D0A 5043 7344          dc.b      13,10,80,67,32,61,32,0
00004818  203D 2000 
                    7345   @m68kde~1_58:
0000481C  0D0A 5352 7346          dc.b      13,10,83,82,32,61,32,0
00004820  203D 2000 
                    7347   @m68kde~1_59:
00004824  0D0A 496C 7348          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004828  6C65 6761 
0000482C  6C20 5265 
00004830  67        
00004831  6973 7465 7349          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004835  723A 2055 
00004839  7365 2041 
0000483D  30        
0000483E  2D41 372C 7350          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004842  2044 302D 
00004846  4437 2C20 
0000484A  5353 50   
0000484D  2C20 5553 7351          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004851  502C 2050 
00004855  4320 6F72 
00004859  2053      
0000485B  520D 0A00 7352          dc.b      82,13,10,0
                    7353   @m68kde~1_60:
00004860  0D0A 0D0A 7354          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004864  4E75 6D20 
00004868  2020 2020 
0000486C  4164      
0000486E  6472 6573 7355          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004872  7320 2020 
00004876  2020 2049 
0000487A  6E        
0000487B  7374 7275 7356          dc.b      115,116,114,117,99,116,105,111,110,0
0000487F  6374 696F 
00004883  6E00      
                    7357   @m68kde~1_61:
00004886  0D0A 2D2D 7358          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000488A  2D20 2020 
0000488E  2020 2D2D 
00004892  2D2D 2D   
00004895  2D2D 2D2D 7359          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004899  2020 2020 
0000489D  2D2D 2D2D 
000048A1  2D2D 2D   
000048A4  2D2D 2D2D 7360          dc.b      45,45,45,45,0
000048A8  00        
                    7361   @m68kde~1_62:
000048AA  0D0A 4E6F 7362          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000048AE  2042 7265 
000048B2  616B 506F 
000048B6  69        
000048B7  6E74 7320 7363          dc.b      110,116,115,32,83,101,116,0
000048BB  5365 7400 
                    7364   @m68kde~1_63:
000048C0  0D0A 2533 7365          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000048C4  6420 2020 
000048C8  2020 2425 
000048CC  3038 78   
000048CF  00        7366          dc.b      0
                    7367   @m68kde~1_64:
000048D0  0D0A 4E75 7368          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000048D4  6D20 2020 
000048D8  2020 4164 
000048DC  6472      
000048DE  6573 7300 7369          dc.b      101,115,115,0
                    7370   @m68kde~1_65:
000048E2  0D0A 2D2D 7371          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000048E6  2D20 2020 
000048EA  2020 2D2D 
000048EE  2D2D 2D   
000048F1  2D2D 2D2D 7372          dc.b      45,45,45,45,0
000048F5  00        
                    7373   @m68kde~1_66:
000048F6  0D0A 4E6F 7374          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000048FA  2057 6174 
000048FE  6368 506F 
00004902  69        
00004903  6E74 7320 7375          dc.b      110,116,115,32,83,101,116,0
00004907  5365 7400 
                    7376   @m68kde~1_67:
0000490C  0D0A 456E 7377          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004910  7465 7220 
00004914  4272 6561 
00004918  6B        
00004919  2050 6F69 7378          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000491D  6E74 204E 
00004921  756D 6265 
00004925  72        
00004926  3A20 00   7379          dc.b      58,32,0
                    7380   @m68kde~1_68:
0000492A  0D0A 496C 7381          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
0000492E  6C65 6761 
00004932  6C20 5261 
00004936  6E        
00004937  6765 203A 7382          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
0000493B  2055 7365 
0000493F  2030 202D 
00004943  2037      
00004945  00        7383          dc.b      0
                    7384   @m68kde~1_69:
00004946  0D0A 4272 7385          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000494A  6561 6B20 
0000494E  506F 696E 
00004952  74        
00004953  2043 6C65 7386          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004957  6172 6564 
0000495B  2E2E 2E2E 
0000495F  2E        
00004960  0D0A 00   7387          dc.b      13,10,0
                    7388   @m68kde~1_70:
00004964  0D0A 4272 7389          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004968  6561 6B20 
0000496C  506F 696E 
00004970  74        
00004971  2077 6173 7390          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004975  6E27 7420 
00004979  5365 742E 
0000497D  2E        
0000497E  2E2E 2E00 7391          dc.b      46,46,46,0
                    7392   @m68kde~1_71:
00004982  0D0A 456E 7393          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004986  7465 7220 
0000498A  5761 7463 
0000498E  68        
0000498F  2050 6F69 7394          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004993  6E74 204E 
00004997  756D 6265 
0000499B  72        
0000499C  3A20 00   7395          dc.b      58,32,0
                    7396   @m68kde~1_72:
000049A0  0D0A 5761 7397          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000049A4  7463 6820 
000049A8  506F 696E 
000049AC  74        
000049AD  2043 6C65 7398          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000049B1  6172 6564 
000049B5  2E2E 2E2E 
000049B9  2E        
000049BA  0D0A 00   7399          dc.b      13,10,0
                    7400   @m68kde~1_73:
000049BE  0D0A 5761 7401          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000049C2  7463 6820 
000049C6  506F 696E 
000049CA  74        
000049CB  2057 6173 7402          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000049CF  206E 6F74 
000049D3  2053 6574 
000049D7  2E        
000049D8  2E2E 2E2E 7403          dc.b      46,46,46,46,0
000049DC  00        
                    7404   @m68kde~1_74:
000049DE  0D0A 4E6F 7405          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000049E2  2046 5245 
000049E6  4520 4272 
000049EA  6561      
000049EC  6B20 506F 7406          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000049F0  696E 7473 
000049F4  2E2E 2E2E 
000049F8  2E        
000049F9  00        7407          dc.b      0
                    7408   @m68kde~1_75:
000049FA  0D0A 4272 7409          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000049FE  6561 6B20 
00004A02  506F 696E 
00004A06  74        
00004A07  2041 6464 7410          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004A0B  7265 7373 
00004A0F  3A20 00   
                    7411   @m68kde~1_76:
00004A12  0D0A 4572 7412          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004A16  726F 7220 
00004A1A  3A20 4272 
00004A1E  65        
00004A1F  616B 2050 7413          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004A23  6F69 6E74 
00004A27  7320 4341 
00004A2B  4E        
00004A2C  4E4F 5420 7414          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004A30  6265 2073 
00004A34  6574 2061 
00004A38  74        
00004A39  204F 4444 7415          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004A3D  2061 6464 
00004A41  7265 7373 
00004A45  65        
00004A46  7300      7416          dc.b      115,0
                    7417   @m68kde~1_77:
00004A48  0D0A 4572 7418          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004A4C  726F 7220 
00004A50  3A20 4272 
00004A54  65        
00004A55  616B 2050 7419          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004A59  6F69 6E74 
00004A5D  7320 4341 
00004A61  4E        
00004A62  4E4F 5420 7420          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004A66  6265 2073 
00004A6A  6574 2066 
00004A6E  6F        
00004A6F  7220 524F 7421          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004A73  4D20 696E 
00004A77  2052 616E 
00004A7B  67        
00004A7C  6520 3A20 7422          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004A80  5B24 302D 
00004A84  2430 3030 
00004A88  3037 46   
00004A8B  4646 5D00 7423          dc.b      70,70,93,0
                    7424   @m68kde~1_78:
00004A90  0D0A 4572 7425          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004A94  726F 723A 
00004A98  2042 7265 
00004A9C  61        
00004A9D  6B20 506F 7426          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004AA1  696E 7420 
00004AA5  416C 7265 
00004AA9  6164 7920 7427          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004AAD  4578 6973 
00004AB1  7473 2061 
00004AB5  74        
00004AB6  2041 6464 7428          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004ABA  7265 7373 
00004ABE  203A 2025 
00004AC2  30        
00004AC3  3878 0D0A 7429          dc.b      56,120,13,10,0
00004AC7  00        
                    7430   @m68kde~1_79:
00004AC8  0D0A 4272 7431          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004ACC  6561 6B20 
00004AD0  506F 696E 
00004AD4  74        
00004AD5  2053 6574 7432          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004AD9  2061 7420 
00004ADD  4164 6472 
00004AE1  65        
00004AE2  7373 3A20 7433          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004AE6  5B24 2530 
00004AEA  3878 5D00 
                    7434   @m68kde~1_80:
00004AEE  0D0A 4E6F 7435          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004AF2  2046 5245 
00004AF6  4520 5761 
00004AFA  7463      
00004AFC  6820 506F 7436          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004B00  696E 7473 
00004B04  2E2E 2E2E 
00004B08  2E        
00004B09  00        7437          dc.b      0
                    7438   @m68kde~1_81:
00004B0A  0D0A 5761 7439          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004B0E  7463 6820 
00004B12  506F 696E 
00004B16  74        
00004B17  2041 6464 7440          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004B1B  7265 7373 
00004B1F  3A20 00   
                    7441   @m68kde~1_82:
00004B22  0D0A 4572 7442          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004B26  726F 723A 
00004B2A  2057 6174 
00004B2E  63        
00004B2F  6820 506F 7443          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004B33  696E 7420 
00004B37  416C 7265 
00004B3B  6164 7920 7444          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004B3F  5365 7420 
00004B43  6174 2041 
00004B47  64        
00004B48  6472 6573 7445          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004B4C  7320 3A20 
00004B50  2530 3878 
00004B54  0D        
00004B55  0A00      7446          dc.b      10,0
                    7447   @m68kde~1_83:
00004B58  0D0A 5761 7448          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004B5C  7463 6820 
00004B60  506F 696E 
00004B64  74        
00004B65  2053 6574 7449          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004B69  2061 7420 
00004B6D  4164 6472 
00004B71  65        
00004B72  7373 3A20 7450          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004B76  5B24 2530 
00004B7A  3878 5D00 
                    7451   @m68kde~1_84:
00004B7E  0D0A 0D0A 7452          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004B82  0D0A 0D0A 
00004B86  4042 5245 
00004B8A  414B 50   
00004B8D  4F49 4E54 7453          dc.b      79,73,78,84,0
00004B91  00        
                    7454   @m68kde~1_85:
00004B92  0D0A 5369 7455          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004B96  6E67 6C65 
00004B9A  2053 7465 
00004B9E  70        
00004B9F  203A 205B 7456          dc.b      32,58,32,91,79,78,93,0
00004BA3  4F4E 5D00 
                    7457   @m68kde~1_86:
00004BA8  0D0A 4272 7458          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004BAC  6561 6B50 
00004BB0  6F69 6E74 
00004BB4  73        
00004BB5  203A 205B 7459          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004BB9  456E 6162 
00004BBD  6C65 645D 
00004BC1  00        
                    7460   @m68kde~1_87:
00004BC2  0D0A 5072 7461          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004BC6  6573 7320 
00004BCA  3C45 5343 
00004BCE  3E20      
00004BD0  746F 2052 7462          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004BD4  6573 756D 
00004BD8  6520 5573 
00004BDC  6572 2050 7463          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004BE0  726F 6772 
00004BE4  616D 0D0A 
00004BE8  00        
                    7464   @m68kde~1_88:
00004BEA  0D0A 556E 7465          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004BEE  6B6E 6F77 
00004BF2  6E20 436F 
00004BF6  6D        
00004BF7  6D61 6E64 7466          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004BFB  2E2E 2E2E 
00004BFF  2E0D 0A00 
                    7467   @m68kde~1_89:
00004C04  0D0A 5072 7468          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004C08  6F67 7261 
00004C0C  6D20 456E 
00004C10  64        
00004C11  6564 2028 7469          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004C15  5452 4150 
00004C19  2023 3135 
00004C1D  292E      
00004C1F  2E2E 2E00 7470          dc.b      46,46,46,0
                    7471   @m68kde~1_90:
00004C24  0D0A 4B69 7472          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004C28  6C6C 2041 
00004C2C  6C6C 2042 
00004C30  72        
00004C31  6561 6B20 7473          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004C35  506F 696E 
00004C39  7473 2E2E 
00004C3D  2E        
00004C3E  2879 2F6E 7474          dc.b      40,121,47,110,41,63,0
00004C42  293F 00   
                    7475   @m68kde~1_91:
00004C46  0D0A 4B69 7476          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004C4A  6C6C 2041 
00004C4E  6C6C 2057 
00004C52  61        
00004C53  7463 6820 7477          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004C57  506F 696E 
00004C5B  7473 2E2E 
00004C5F  2E        
00004C60  2879 2F6E 7478          dc.b      40,121,47,110,41,63,0
00004C64  293F 00   
                    7479   @m68kde~1_92:
00004C68  0D0A 2D2D 7480          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C6C  2D2D 2D2D 
00004C70  2D2D 2D2D 
00004C74  2D2D 2D   
00004C77  2D2D 2D2D 7481          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C7B  2D2D 2D2D 
00004C7F  2D2D 2D2D 
00004C83  2D2D 2D   
00004C86  2D2D 2D2D 7482          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C8A  2D2D 2D2D 
00004C8E  2D2D 2D2D 
00004C92  2D2D 2D   
00004C95  2D2D 2D2D 7483          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004C99  2D2D 2D2D 
00004C9D  2D2D 2D2D 
00004CA1  2D2D 2D   
00004CA4  2D2D 2D2D 7484          dc.b      45,45,45,45,45,45,0
00004CA8  2D2D 00   
                    7485   @m68kde~1_93:
00004CAC  0D0A 2020 7486          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004CB0  4465 6275 
00004CB4  6767 6572 
00004CB8  20        
00004CB9  436F 6D6D 7487          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004CBD  616E 6420 
00004CC1  5375 6D6D 
00004CC5  6172 7900 7488          dc.b      97,114,121,0
                    7489   @m68kde~1_94:
00004CCA  0D0A 2020 7490          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004CCE  2E28 7265 
00004CD2  6729 2020 
00004CD6  2020      
00004CD8  2020 202D 7491          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004CDC  2043 6861 
00004CE0  6E67 6520 
00004CE4  5265      
00004CE6  6769 7374 7492          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004CEA  6572 733A 
00004CEE  2065 2E67 
00004CF2  2041 302D 7493          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004CF6  4137 2C44 
00004CFA  302D 4437 
00004CFE  2C50 43   
00004D01  2C53 5350 7494          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004D05  2C55 5350 
00004D09  2C53 5200 
                    7495   @m68kde~1_95:
00004D0E  0D0A 2020 7496          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004D12  4244 2F42 
00004D16  532F 4243 
00004D1A  2F42 4B   
00004D1D  2020 2D20 7497          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004D21  4272 6561 
00004D25  6B20 506F 
00004D29  69        
00004D2A  6E74 3A20 7498          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004D2E  4469 7370 
00004D32  6C61 792F 
00004D36  53        
00004D37  6574 2F43 7499          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004D3B  6C65 6172 
00004D3F  2F4B 696C 
00004D43  6C        
00004D44  00        7500          dc.b      0
                    7501   @m68kde~1_96:
00004D46  0D0A 2020 7502          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004D4A  4320 2020 
00004D4E  2020 2020 
00004D52  2020 20   
00004D55  2020 2D20 7503          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004D59  436F 7079 
00004D5D  2050 726F 
00004D61  67        
00004D62  7261 6D20 7504          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004D66  6672 6F6D 
00004D6A  2046 6C61 
00004D6E  73        
00004D6F  6820 746F 7505          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004D73  204D 6169 
00004D77  6E20 4D65 
00004D7B  6D        
00004D7C  6F72 7900 7506          dc.b      111,114,121,0
                    7507   @m68kde~1_97:
00004D80  0D0A 2020 7508          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004D84  4420 2020 
00004D88  2020 2020 
00004D8C  2020 20   
00004D8F  2020 2D20 7509          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004D93  4475 6D70 
00004D97  204D 656D 
00004D9B  6F        
00004D9C  7279 2043 7510          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004DA0  6F6E 7465 
00004DA4  6E74 7320 
00004DA8  746F 2053 7511          dc.b      116,111,32,83,99,114,101,101,110,0
00004DAC  6372 6565 
00004DB0  6E00      
                    7512   @m68kde~1_98:
00004DB2  0D0A 2020 7513          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004DB6  4520 2020 
00004DBA  2020 2020 
00004DBE  2020 20   
00004DC1  2020 2D20 7514          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004DC5  456E 7465 
00004DC9  7220 5374 
00004DCD  72        
00004DCE  696E 6720 7515          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004DD2  696E 746F 
00004DD6  204D 656D 
00004DDA  6F72 7900 7516          dc.b      111,114,121,0
                    7517   @m68kde~1_99:
00004DDE  0D0A 2020 7518          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004DE2  4620 2020 
00004DE6  2020 2020 
00004DEA  2020 20   
00004DED  2020 2D20 7519          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004DF1  4669 6C6C 
00004DF5  204D 656D 
00004DF9  6F        
00004DFA  7279 2077 7520          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004DFE  6974 6820 
00004E02  4461 7461 
00004E06  00        
                    7521   @m68kde~1_100:
00004E08  0D0A 2020 7522          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004E0C  4720 2020 
00004E10  2020 2020 
00004E14  2020 20   
00004E17  2020 2D20 7523          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004E1B  476F 2050 
00004E1F  726F 6772 
00004E23  61        
00004E24  6D20 5374 7524          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004E28  6172 7469 
00004E2C  6E67 2061 
00004E30  74        
00004E31  2041 6464 7525          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004E35  7265 7373 
00004E39  3A20 2425 
00004E3D  30        
00004E3E  3858 00   7526          dc.b      56,88,0
                    7527   @m68kde~1_101:
00004E42  0D0A 2020 7528          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004E46  4C20 2020 
00004E4A  2020 2020 
00004E4E  2020 20   
00004E51  2020 2D20 7529          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004E55  4C6F 6164 
00004E59  2050 726F 
00004E5D  67        
00004E5E  7261 6D20 7530          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004E62  282E 4845 
00004E66  5820 6669 
00004E6A  6C        
00004E6B  6529 2066 7531          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004E6F  726F 6D20 
00004E73  4C61 7074 
00004E77  6F        
00004E78  7000      7532          dc.b      112,0
                    7533   @m68kde~1_102:
00004E7A  0D0A 2020 7534          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004E7E  4D20 2020 
00004E82  2020 2020 
00004E86  2020 20   
00004E89  2020 2D20 7535          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004E8D  4D65 6D6F 
00004E91  7279 2045 
00004E95  78        
00004E96  616D 696E 7536          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004E9A  6520 616E 
00004E9E  6420 4368 
00004EA2  61        
00004EA3  6E67 6500 7537          dc.b      110,103,101,0
                    7538   @m68kde~1_103:
00004EA8  0D0A 2020 7539          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004EAC  5020 2020 
00004EB0  2020 2020 
00004EB4  2020 20   
00004EB7  2020 2D20 7540          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004EBB  5072 6F67 
00004EBF  7261 6D20 
00004EC3  46        
00004EC4  6C61 7368 7541          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004EC8  204D 656D 
00004ECC  6F72 7920 
00004ED0  7769 7468 7542          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004ED4  2055 7365 
00004ED8  7220 5072 
00004EDC  6F67 7261 7543          dc.b      111,103,114,97,109,0
00004EE0  6D00      
                    7544   @m68kde~1_104:
00004EE2  0D0A 2020 7545          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004EE6  5220 2020 
00004EEA  2020 2020 
00004EEE  2020 20   
00004EF1  2020 2D20 7546          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004EF5  4469 7370 
00004EF9  6C61 7920 
00004EFD  36        
00004EFE  3830 3030 7547          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004F02  2052 6567 
00004F06  6973 7465 
00004F0A  72        
00004F0B  7300      7548          dc.b      115,0
                    7549   @m68kde~1_105:
00004F0E  0D0A 2020 7550          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004F12  5320 2020 
00004F16  2020 2020 
00004F1A  2020 20   
00004F1D  2020 2D20 7551          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004F21  546F 6767 
00004F25  6C65 204F 
00004F29  4E        
00004F2A  2F4F 4646 7552          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004F2E  2053 696E 
00004F32  676C 6520 
00004F36  53        
00004F37  7465 7020 7553          dc.b      116,101,112,32,77,111,100,101,0
00004F3B  4D6F 6465 
00004F3F  00        
                    7554   @m68kde~1_106:
00004F40  0D0A 2020 7555          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004F44  544D 2020 
00004F48  2020 2020 
00004F4C  2020 20   
00004F4F  2020 2D20 7556          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004F53  5465 7374 
00004F57  204D 656D 
00004F5B  6F        
00004F5C  7279 00   7557          dc.b      114,121,0
                    7558   @m68kde~1_107:
00004F60  0D0A 2020 7559          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004F64  5453 2020 
00004F68  2020 2020 
00004F6C  2020 20   
00004F6F  2020 2D20 7560          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004F73  5465 7374 
00004F77  2053 7769 
00004F7B  74        
00004F7C  6368 6573 7561          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004F80  3A20 5357 
00004F84  372D 3000 
                    7562   @m68kde~1_108:
00004F88  0D0A 2020 7563          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004F8C  5444 2020 
00004F90  2020 2020 
00004F94  2020 20   
00004F97  2020 2D20 7564          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004F9B  5465 7374 
00004F9F  2044 6973 
00004FA3  70        
00004FA4  6C61 7973 7565          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004FA8  3A20 4C45 
00004FAC  4473 2061 
00004FB0  6E        
00004FB1  6420 372D 7566          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004FB5  5365 676D 
00004FB9  656E 7400 
                    7567   @m68kde~1_109:
00004FBE  0D0A 2020 7568          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004FC2  5744 2F57 
00004FC6  532F 5743 
00004FCA  2F57 4B   
00004FCD  2020 2D20 7569          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004FD1  5761 7463 
00004FD5  6820 506F 
00004FD9  696E      
00004FDB  743A 2044 7570          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004FDF  6973 706C 
00004FE3  6179 2F53 
00004FE7  65        
00004FE8  742F 436C 7571          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004FEC  6561 722F 
00004FF0  4B69 6C6C 
00004FF4  00        
                    7572   @m68kde~1_110:
00004FF6  0D0A 2300 7573          dc.b      13,10,35,0
                    7574   @m68kde~1_111:
00004FFA  0D0A 5072 7575          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004FFE  6F67 7261 
00005002  6D20 5275 
00005006  6E        
00005007  6E69 6E67 7576          dc.b      110,105,110,103,46,46,46,46,46,0
0000500B  2E2E 2E2E 
0000500F  2E00      
                    7577   @m68kde~1_112:
00005012  0D0A 5072 7578          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00005016  6573 7320 
0000501A  3C52 4553 
0000501E  4554      
00005020  3E20 6275 7579          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00005024  7474 6F6E 
00005028  203C 4B65 
0000502C  79        
0000502D  303E 206F 7580          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00005031  6E20 4445 
00005035  3120 746F 
00005039  2073      
0000503B  746F 7000 7581          dc.b      116,111,112,0
                    7582   @m68kde~1_113:
00005040  0D0A 4572 7583          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00005044  726F 723A 
00005048  2050 7265 
0000504C  73        
0000504D  7320 2747 7584          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00005051  2720 6669 
00005055  7273 7420 
00005059  74        
0000505A  6F20 7374 7585          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
0000505E  6172 7420 
00005062  7072 6F67 
00005066  7261 6D00 7586          dc.b      114,97,109,0
                    7587   @m68kde~1_114:
0000506A  0D0A 5369 7588          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000506E  6E67 6C65 
00005072  2053 7465 
00005076  70        
00005077  2020 3A5B 7589          dc.b      32,32,58,91,79,78,93,0
0000507B  4F4E 5D00 
                    7590   @m68kde~1_115:
00005080  0D0A 5072 7591          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00005084  6573 7320 
00005088  2747 2720 
0000508C  74        
0000508D  6F20 5472 7592          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00005091  6163 6520 
00005095  5072 6F67 
00005099  72        
0000509A  616D 2066 7593          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
0000509E  726F 6D20 
000050A2  6164 6472 
000050A6  6573 7320 7594          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000050AA  2425 582E 
000050AE  2E2E 2E2E 
000050B2  00        
                    7595   @m68kde~1_116:
000050B4  0D0A 5075 7596          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
000050B8  7368 203C 
000050BC  5245 5345 
000050C0  5420      
000050C2  4275 7474 7597          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
000050C6  6F6E 3E20 
000050CA  746F 2053 
000050CE  74        
000050CF  6F70 2E2E 7598          dc.b      111,112,46,46,46,46,46,0
000050D3  2E2E 2E00 
                    7599   @m68kde~1_117:
000050D8  0D0A 5369 7600          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000050DC  6E67 6C65 
000050E0  2053 7465 
000050E4  70        
000050E5  203A 205B 7601          dc.b      32,58,32,91,79,70,70,93,0
000050E9  4F46 465D 
000050ED  00        
                    7602   @m68kde~1_118:
000050EE  0D0A 4272 7603          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000050F2  6561 6B20 
000050F6  506F 696E 
000050FA  74        
000050FB  7320 3A5B 7604          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
000050FF  456E 6162 
00005103  6C65 645D 
00005107  00        
                    7605   @m68kde~1_119:
00005108  0D0A 5072 7606          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000510C  6573 7320 
00005110  3C45 5343 
00005114  3E20      
00005116  746F 2052 7607          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000511A  6573 756D 
0000511E  6520 5573 
00005122  6572 2050 7608          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00005126  726F 6772 
0000512A  616D 2E2E 
0000512E  2E        
0000512F  2E2E 00   7609          dc.b      46,46,0
                    7610   @m68kde~1_120:
00005132  0D0A 5369 7611          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005136  6E67 6C65 
0000513A  2053 7465 
0000513E  70        
0000513F  2020 3A5B 7612          dc.b      32,32,58,91,79,70,70,93,0
00005143  4F46 465D 
00005147  00        
                    7613   @m68kde~1_121:
00005148  0D0A 0D0A 7614          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000514C  5072 6F67 
00005150  7261 6D20 
00005154  41        
00005155  424F 5254 7615          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00005159  2021 2121 
0000515D  2121 210D 
00005161  0A00      
                    7616   @m68kde~1_122:
00005164  2573 0D0A 7617          dc.b      37,115,13,10,0
00005168  00        
                    7618   @m68kde~1_123:
0000516A  0D0A 0D0A 7619          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000516E  5072 6F67 
00005172  7261 6D20 
00005176  41        
00005177  424F 5254 7620          dc.b      66,79,82,84,32,33,33,33,33,33,0
0000517B  2021 2121 
0000517F  2121 00   
                    7621   @m68kde~1_124:
00005182  0D0A 556E 7622          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005186  6861 6E64 
0000518A  6C65 6420 
0000518E  49        
0000518F  6E74 6572 7623          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00005193  7275 7074 
00005197  3A20 4952 
0000519B  5125 6420 7624          dc.b      81,37,100,32,33,33,33,33,33,0
0000519F  2121 2121 
000051A3  2100      
                    7625   @m68kde~1_125:
000051A6  4144 4452 7626          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000051AA  4553 5320 
000051AE  4552 524F 
000051B2  523A 20   
000051B5  3136 206F 7627          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000051B9  7220 3332 
000051BD  2042 6974 
000051C1  2054      
000051C3  7261 6E73 7628          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
000051C7  6665 7220 
000051CB  746F 2F66 
000051CF  726F 6D20 7629          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000051D3  616E 204F 
000051D7  4444 2041 
000051DB  64        
000051DC  6472 6573 7630          dc.b      100,114,101,115,115,46,46,46,46,0
000051E0  732E 2E2E 
000051E4  2E00      
                    7631   @m68kde~1_126:
000051E6  556E 6861 7632          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000051EA  6E64 6C65 
000051EE  6420 5472 
000051F2  6170 2021 7633          dc.b      97,112,32,33,33,33,33,33,0
000051F6  2121 2121 
000051FA  00        
                    7634   @m68kde~1_127:
000051FC  4255 5320 7635          dc.b      66,85,83,32,69,114,114,111,114,33,0
00005200  4572 726F 
00005204  7221 00   
                    7636   @m68kde~1_128:
00005208  4144 4452 7637          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000520C  4553 5320 
00005210  4572 726F 
00005214  7221      
00005216  00        7638          dc.b      0
                    7639   @m68kde~1_129:
00005218  494C 4C45 7640          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000521C  4741 4C20 
00005220  494E 5354 
00005224  5255 43   
00005227  5449 4F4E 7641          dc.b      84,73,79,78,0
0000522B  00        
                    7642   @m68kde~1_130:
0000522C  4449 5649 7643          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00005230  4445 2042 
00005234  5920 5A45 
00005238  524F 00   
                    7644   @m68kde~1_131:
0000523C  2743 484B 7645          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00005240  2720 494E 
00005244  5354 5255 
00005248  4354 49   
0000524B  4F4E 00   7646          dc.b      79,78,0
                    7647   @m68kde~1_132:
0000524E  5452 4150 7648          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00005252  5620 494E 
00005256  5354 5255 
0000525A  4354 49   
0000525D  4F4E 00   7649          dc.b      79,78,0
                    7650   @m68kde~1_133:
00005260  5052 4956 7651          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00005264  494C 4547 
00005268  4520 5649 
0000526C  4F4C 41   
0000526F  5449 4F4E 7652          dc.b      84,73,79,78,0
00005273  00        
                    7653   @m68kde~1_134:
00005274  554E 494E 7654          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005278  4954 4941 
0000527C  4C49 5345 
00005280  4420 49   
00005283  5251 00   7655          dc.b      82,81,0
                    7656   @m68kde~1_135:
00005286  5350 5552 7657          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
0000528A  494F 5553 
0000528E  2049 5251 
00005292  00        
                    7658   @m68kde~1_136:
00005294  0D0A 5374 7659          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005298  6172 7420 
0000529C  4164 6472 
000052A0  65        
000052A1  7373 2069 7660          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000052A5  6E20 4D65 
000052A9  6D6F 7279 
000052AD  3A20 00   7661          dc.b      58,32,0
                    7662   @m68kde~1_137:
000052B0  0D0A 456E 7663          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000052B4  7465 7220 
000052B8  5374 7269 
000052BC  6E        
000052BD  6720 2845 7664          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000052C1  5343 2074 
000052C5  6F20 656E 
000052C9  64        
000052CA  2920 3A00 7665          dc.b      41,32,58,0
                    7666   @m68kde~1_138:
000052CE  0A45 6E74 7667          dc.b      10,69,110,116,101,114,32,119,104,97,116,32,115
000052D2  6572 2077 
000052D6  6861 7420 
000052DA  73        
000052DB  697A 6520 7668          dc.b      105,122,101,32,111,102,32,109,101,109,111,114
000052DF  6F66 206D 
000052E3  656D 6F72 
000052E7  7920 796F 7669          dc.b      121,32,121,111,117,32,119,97,110,116,32,116
000052EB  7520 7761 
000052EF  6E74 2074 
000052F3  6F20 7265 7670          dc.b      111,32,114,101,97,100,47,119,114,105,116,101
000052F7  6164 2F77 
000052FB  7269 7465 
000052FF  0A20 4279 7671          dc.b      10,32,66,121,116,101,32,61,32,48,10,32,87,111
00005303  7465 203D 
00005307  2030 0A20 
0000530B  576F      
0000530D  7264 203D 7672          dc.b      114,100,32,61,32,49,10,32,76,111,110,103,32
00005311  2031 0A20 
00005315  4C6F 6E67 
00005319  20        
0000531A  576F 7264 7673          dc.b      87,111,114,100,32,61,32,50,10,0
0000531E  203D 2032 
00005322  0A00      
                    7674   @m68kde~1_139:
00005324  0A00      7675          dc.b      10,0
                    7676   @m68kde~1_140:
00005326  0A45 6E74 7677          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
0000532A  6572 2077 
0000532E  6869 6368 
00005332  2064 6174 7678          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005336  6120 7061 
0000533A  7474 6572 
0000533E  6E        
0000533F  2079 6F75 7679          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00005343  2077 616E 
00005347  7420 746F 
0000534B  2077 7269 7680          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000534F  7465 2069 
00005353  6E74 6F20 
00005357  6D65 6D6F 7681          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,32
0000535B  7279 0A20 
0000535F  3078 3030 
00005363  20        
00005364  3D20 300A 7682          dc.b      61,32,48,10,32,48,120,66,50,32,61,32,49,10,32
00005368  2030 7842 
0000536C  3220 3D20 
00005370  310A 20   
00005373  3078 4333 7683          dc.b      48,120,67,51,32,61,32,50,10,32,48,120,68,52
00005377  203D 2032 
0000537B  0A20 3078 
0000537F  4434      
00005381  203D 2033 7684          dc.b      32,61,32,51,10,0
00005385  0A00      
                    7685   @m68kde~1_141:
00005388  0A45 6E74 7686          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
0000538C  6572 2077 
00005390  6869 6368 
00005394  2064 6174 7687          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005398  6120 7061 
0000539C  7474 6572 
000053A0  6E        
000053A1  2079 6F75 7688          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
000053A5  2077 616E 
000053A9  7420 746F 
000053AD  2077 7269 7689          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
000053B1  7465 2069 
000053B5  6E74 6F20 
000053B9  6D65 6D6F 7690          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
000053BD  7279 0A20 
000053C1  3078 3030 
000053C5  30        
000053C6  3020 3D20 7691          dc.b      48,32,61,32,48,10,32,48,120,49,50,51,52,32,61
000053CA  300A 2030 
000053CE  7831 3233 
000053D2  3420 3D   
000053D5  2031 0A20 7692          dc.b      32,49,10,32,48,120,65,49,66,50,32,61,32,50,10
000053D9  3078 4131 
000053DD  4232 203D 
000053E1  2032 0A   
000053E4  2030 7843 7693          dc.b      32,48,120,67,51,68,52,32,61,32,51,10,0
000053E8  3344 3420 
000053EC  3D20 330A 
000053F0  00        
                    7694   @m68kde~1_142:
000053F2  0A45 6E74 7695          dc.b      10,69,110,116,101,114,32,119,104,105,99,104
000053F6  6572 2077 
000053FA  6869 6368 
000053FE  2064 6174 7696          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00005402  6120 7061 
00005406  7474 6572 
0000540A  6E        
0000540B  2079 6F75 7697          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
0000540F  2077 616E 
00005413  7420 746F 
00005417  2077 7269 7698          dc.b      32,119,114,105,116,101,32,105,110,116,111,32
0000541B  7465 2069 
0000541F  6E74 6F20 
00005423  6D65 6D6F 7699          dc.b      109,101,109,111,114,121,10,32,48,120,48,48,48
00005427  7279 0A20 
0000542B  3078 3030 
0000542F  30        
00005430  305F 3030 7700          dc.b      48,95,48,48,48,48,32,61,32,48,10,32,48,120,65
00005434  3030 203D 
00005438  2030 0A20 
0000543C  3078 41   
0000543F  4142 425F 7701          dc.b      65,66,66,95,67,67,68,68,32,61,32,49,10,32,48
00005443  4343 4444 
00005447  203D 2031 
0000544B  0A20 30   
0000544E  7831 3132 7702          dc.b      120,49,49,50,50,95,51,51,52,52,32,61,32,50,10
00005452  325F 3333 
00005456  3434 203D 
0000545A  2032 0A   
0000545D  2030 7837 7703          dc.b      32,48,120,55,54,53,52,95,51,50,49,48,32,61,32
00005461  3635 345F 
00005465  3332 3130 
00005469  203D 20   
0000546C  330A 00   7704          dc.b      51,10,0
                    7705   @m68kde~1_143:
00005470  0A50 726F 7706          dc.b      10,80,114,111,118,105,100,101,32,83,116,97,114
00005474  7669 6465 
00005478  2053 7461 
0000547C  72        
0000547D  7420 4164 7707          dc.b      116,32,65,100,100,114,101,115,115,32,105,110
00005481  6472 6573 
00005485  7320 696E 
00005489  2068 6578 7708          dc.b      32,104,101,120,32,40,100,111,32,110,111,116
0000548D  2028 646F 
00005491  206E 6F74 
00005495  2075 7365 7709          dc.b      32,117,115,101,32,48,120,32,112,114,101,102
00005499  2030 7820 
0000549D  7072 6566 
000054A1  6978 290A 7710          dc.b      105,120,41,10,48,120,0
000054A5  3078 00   
                    7711   @m68kde~1_144:
000054A8  0A50 726F 7712          dc.b      10,80,114,111,118,105,100,101,32,69,110,100
000054AC  7669 6465 
000054B0  2045 6E64 
000054B4  2041 6464 7713          dc.b      32,65,100,100,114,101,115,115,32,105,110,32
000054B8  7265 7373 
000054BC  2069 6E20 
000054C0  6865 7820 7714          dc.b      104,101,120,32,40,100,111,32,110,111,116,32
000054C4  2864 6F20 
000054C8  6E6F 7420 
000054CC  7573 6520 7715          dc.b      117,115,101,32,48,120,32,112,114,101,102,105
000054D0  3078 2070 
000054D4  7265 6669 
000054D8  7829 0A30 7716          dc.b      120,41,10,48,120,0
000054DC  7800      
                    7717   @m68kde~1_145:
000054DE  0A53 7461 7718          dc.b      10,83,116,97,114,116,32,65,100,100,114,101,115
000054E2  7274 2041 
000054E6  6464 7265 
000054EA  73        
000054EB  7320 3078 7719          dc.b      115,32,48,120,37,48,56,120,10,0
000054EF  2530 3878 
000054F3  0A00      
                    7720   @m68kde~1_146:
000054F6  0A45 6E64 7721          dc.b      10,69,110,100,32,65,100,100,114,101,115,115
000054FA  2041 6464 
000054FE  7265 7373 
00005502  3A20 3078 7722          dc.b      58,32,48,120,37,48,56,120,10,0
00005506  2530 3878 
0000550A  0A00      
                    7723   @m68kde~1_147:
0000550C  4552 524F 7724          dc.b      69,82,82,79,82,46,46,46,32,65,100,100,114,101
00005510  522E 2E2E 
00005514  2041 6464 
00005518  7265      
0000551A  7373 2030 7725          dc.b      115,115,32,48,120,37,120,32,105,115,32,98,101
0000551E  7825 7820 
00005522  6973 2062 
00005526  65        
00005527  796F 6E64 7726          dc.b      121,111,110,100,32,116,104,101,32,109,101,109
0000552B  2074 6865 
0000552F  206D 656D 
00005533  6F72 7920 7727          dc.b      111,114,121,32,114,97,110,103,101,10,0
00005537  7261 6E67 
0000553B  650A 00   
                    7728   @m68kde~1_148:
0000553E  4552 524F 7729          dc.b      69,82,82,79,82,46,46,46,32,86,97,108,117,101
00005542  522E 2E2E 
00005546  2056 616C 
0000554A  7565      
0000554C  2077 7269 7730          dc.b      32,119,114,105,116,116,101,110,32,116,111,32
00005550  7474 656E 
00005554  2074 6F20 
00005558  6164 6472 7731          dc.b      97,100,100,114,101,115,115,32,48,120,37,120
0000555C  6573 7320 
00005560  3078 2578 
00005564  203D 3D20 7732          dc.b      32,61,61,32,48,120,37,120,46,32,86,97,108,117
00005568  3078 2578 
0000556C  2E20 5661 
00005570  6C75      
00005572  6520 4578 7733          dc.b      101,32,69,120,112,101,99,116,101,100,58,32,48
00005576  7065 6374 
0000557A  6564 3A20 
0000557E  30        
0000557F  7825 780A 7734          dc.b      120,37,120,10,0
00005583  00        
                    7735   @m68kde~1_149:
00005584  4164 6472 7736          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
00005588  6573 733A 
0000558C  2030 7825 
00005590  78        
00005591  2056 616C 7737          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,50,88
00005595  7565 3A20 
00005599  3078 2530 
0000559D  3258      
0000559F  0A00      7738          dc.b      10,0
                    7739   @m68kde~1_150:
000055A2  4164 6472 7740          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000055A6  6573 733A 
000055AA  2030 7825 
000055AE  78        
000055AF  2056 616C 7741          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,52,88
000055B3  7565 3A20 
000055B7  3078 2530 
000055BB  3458      
000055BD  0A00      7742          dc.b      10,0
                    7743   @m68kde~1_151:
000055C0  4164 6472 7744          dc.b      65,100,100,114,101,115,115,58,32,48,120,37,120
000055C4  6573 733A 
000055C8  2030 7825 
000055CC  78        
000055CD  2056 616C 7745          dc.b      32,86,97,108,117,101,58,32,48,120,37,48,56,88
000055D1  7565 3A20 
000055D5  3078 2530 
000055D9  3858      
000055DB  0A00      7746          dc.b      10,0
                    7747   @m68kde~1_152:
000055DE  4445 312D 7748          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000055E2  3638 6B20 
000055E6  4275 6720 
000055EA  5631      
000055EC  2E37 3700 7749          dc.b      46,55,55,0
                    7750   @m68kde~1_153:
000055F0  436F 7079 7751          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000055F4  7269 6768 
000055F8  7420 2843 
000055FC  2920 504A 7752          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00005600  2044 6176 
00005604  6965 7320 
00005608  3230      
0000560A  3136 00   7753          dc.b      49,54,0
                    7754   @m68kde~1_154:
0000560E  0D0A 5275 7755          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00005612  6E6E 696E 
00005616  672E 2E2E 
0000561A  2E        
0000561B  2E00      7756          dc.b      46,0
                    7757   @m68kde~1_155:
0000561E  5275 6E6E 7758          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005622  696E 672E 
00005626  2E2E 2E2E 
0000562A  00        
                    7759   @m68kde~1_156:
0000562C  4279 3A20 7760          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005630  504A 2044 
00005634  6176 6965 
00005638  73        
00005639  00        7761          dc.b      0
                    7762   @m68kde~1_157:
0000563A  0D0A 2573 7763          dc.b      13,10,37,115,0
0000563E  00        
                    7764   @m68kde~1_158:
00005640  0A20 5374 7765          dc.b      10,32,83,116,117,100,101,110,116,32,78,97,109
00005644  7564 656E 
00005648  7420 4E61 
0000564C  6D        
0000564D  6573 3A0A 7766          dc.b      101,115,58,10,32,90,97,99,104,97,114,105,97
00005651  205A 6163 
00005655  6861 7269 
00005659  61        
0000565A  6820 4A6F 7767          dc.b      104,32,74,111,115,101,112,104,58,32,52,53,53
0000565E  7365 7068 
00005662  3A20 3435 
00005666  35        
00005667  3030 3035 7768          dc.b      48,48,48,53,53,32,10,32,85,109,97,105,114,32
0000566B  3520 0A20 
0000566F  556D 6169 
00005673  7220      
00005675  4D61 7A68 7769          dc.b      77,97,122,104,97,114,58,32,50,48,51,51,51,51
00005679  6172 3A20 
0000567D  3230 3333 
00005681  3333      
00005683  3038 0A00 7770          dc.b      48,56,10,0
                    7771          section   data
00005688            7772                   align
          0000 5688 7773   DataStart       equ       *
                    7774   
                    7775   *********************************************************************************************************
                    7776   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7777   * to ram as part of the CStart routine in this file
                    7778   *********************************************************************************************************
                    7779   
                    7780   @vsscanf_bufx:
00005688  0B00 0546 7781          dc.l      @vsscanf_buf
                    7782   @vsscanf_1:
0000568C  0A00      7783          dc.b      10,0
                    7784   __ctype:
0000568E  0040 4040 7785          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005692  4040 4040 
00005696  4040 5050 
0000569A  5050 50   
0000569D  4040 4040 7786          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000056A1  4040 4040 
000056A5  4040 4040 
000056A9  4040 40   
000056AC  4040 40D0 7787          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000056B0  A0A0 A0A0 
000056B4  A0A0 A0A0 
000056B8  A0A0 A0A0 7788          dc.b      160,160,160,160,160,160,160,140,140,140,140
000056BC  A0A0 A08C 
000056C0  8C8C 8C   
000056C3  8C8C 8C8C 7789          dc.b      140,140,140,140,140,140,160,160,160,160,160
000056C7  8C8C A0A0 
000056CB  A0A0 A0   
000056CE  A0A0 8A8A 7790          dc.b      160,160,138,138,138,138,138,138,130,130,130
000056D2  8A8A 8A8A 
000056D6  8282 82   
000056D9  8282 8282 7791          dc.b      130,130,130,130,130,130,130,130,130,130,130
000056DD  8282 8282 
000056E1  8282 82   
000056E4  8282 8282 7792          dc.b      130,130,130,130,130,130,160,160,160,160,160
000056E8  8282 A0A0 
000056EC  A0A0 A0   
000056EF  A089 8989 7793          dc.b      160,137,137,137,137,137,137,129,129,129,129
000056F3  8989 8981 
000056F7  8181 81   
000056FA  8181 8181 7794          dc.b      129,129,129,129,129,129,129,129,129,129,129
000056FE  8181 8181 
00005702  8181 81   
00005705  8181 8181 7795          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005709  81A0 A0A0 
0000570D  A040 0000 
00005711  00        
00005712  0000 0000 7796          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005716  0000 0000 
0000571A  0000 0000 
0000571E  0000 0000 
00005722  0000 0000 
00005726  0000      
00005728  0000 0000 7797          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000572C  0000 0000 
00005730  0000 0000 
00005734  0000 0000 
00005738  0000 0000 
0000573C  0000      
0000573E  0000 0000 7798          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005742  0000 0000 
00005746  0000 0000 
0000574A  0000 0000 
0000574E  0000 0000 
00005752  0000      
00005754  0000 0000 7799          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005758  0000 0000 
0000575C  0000 0000 
00005760  0000 0000 
00005764  0000 0000 
00005768  0000      
0000576A  0000 0000 7800          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000576E  0000 0000 
00005772  0000 0000 
00005776  0000 0000 
0000577A  0000 0000 
0000577E  0000      
00005780  0000 0000 7801          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005784  0000 0000 
00005788  0000 0000 
0000578C  0000 00   
                    7802   @itoa_1:
00005790  2D32 3134 7803          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005794  3734 3833 
00005798  3634 3800 
                    7804          section   bss
0000579C            7805                   align
          0000 579C 7806   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7807   
                    7808   *********************************************************************************************************
                    7809   * Section for Uninitialised Data held in ROM as constants
                    7810   *********************************************************************************************************
                    7811   
0B000000            7812                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 7813   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7814   
                    7815   
0B000000            7816   bss             org       bss
                    7817   
                    7818   *********************************************************************************************************
                    7819   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7820   * install the exception handler using the C function InstallExceptionHandler()
                    7821   *********************************************************************************************************
                    7822   
                    7823   
                    7824   
0B000000            7825   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7826   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7827   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7828   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7829   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7830   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7831   VCheck           ds.l    1      ditto
0B00001C            7832   VTrapV           ds.l    1      ditto
0B000020            7833   VPrivilege       ds.l    1      ditto
0B000024            7834   VTrace           ds.l    1
0B000028            7835   VLine1010emul    ds.l    1
0B00002C            7836   VLine1111emul    ds.l    1
0B000030            7837   VUnassigned1     ds.l    1
0B000034            7838   VUnassigned2     ds.l    1
0B000038            7839   VUnassigned3     ds.l    1
0B00003C            7840   VUninit_IRQ      ds.l    1
0B000040            7841   VUnassigned4     ds.l    1
0B000044            7842   VUnassigned5     ds.l    1
0B000048            7843   VUnassigned6     ds.l    1
0B00004C            7844   VUnassigned7     ds.l    1
0B000050            7845   VUnassigned8     ds.l    1
0B000054            7846   VUnassigned9     ds.l    1
0B000058            7847   VUnassigned10    ds.l    1
0B00005C            7848   VUnassigned11    ds.l    1
0B000060            7849   VSpuriousIRQ     ds.l    1
                    7850   
                    7851   * Interrupt handlers Vector 25-31
0B000064            7852   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7853   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7854   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7855   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7856   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7857   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7858   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7859   
                    7860   * Trap Handler vectors 32-47
0B000080            7861   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7862   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7863   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7864   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7865   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7866   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7867   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7868   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7869   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7870   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7871   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7872   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7873   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7874   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7875   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7876   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7877   
                    7878   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7879   
                    7880   ***********************************************************************************************************
                    7881   * Other Variables
                    7882   ***********************************************************************************************************
                    7883   *__DebugA5       ds.l    1
                    7884   *__UserA5        ds.l    1
                    7885   
                    7886   ***********************************************************************************************************
0B0000C0            7887   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7888   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7889   __heap:         ds.l    0       ; pointers for malloc functions
                    7890   
                    7891   *__himem:       ds.l    himem            ; highest memory location + 1
                    7892   *__stklen:      ds.l    stklen           ; default stack size
                    7893   
                    7894   *********************************************************************************************************
                    7895   * Section for Heap
                    7896   *********************************************************************************************************
                    7897   
                    7898   _i:
0B0000C4            7899          ds.b      4
                    7900   _x:
0B0000C8            7901          ds.b      4
                    7902   _y:
0B0000CC            7903          ds.b      4
                    7904   _z:
0B0000D0            7905          ds.b      4
                    7906   _PortA_Count:
0B0000D4            7907          ds.b      4
                    7908   _Trace:
0B0000D8            7909          ds.b      4
                    7910   _GoFlag:
0B0000DC            7911          ds.b      4
                    7912   _Echo:
0B0000E0            7913          ds.b      4
                    7914   _d0:
0B0000E4            7915          ds.b      4
                    7916   _d1:
0B0000E8            7917          ds.b      4
                    7918   _d2:
0B0000EC            7919          ds.b      4
                    7920   _d3:
0B0000F0            7921          ds.b      4
                    7922   _d4:
0B0000F4            7923          ds.b      4
                    7924   _d5:
0B0000F8            7925          ds.b      4
                    7926   _d6:
0B0000FC            7927          ds.b      4
                    7928   _d7:
0B000100            7929          ds.b      4
                    7930   _a0:
0B000104            7931          ds.b      4
                    7932   _a1:
0B000108            7933          ds.b      4
                    7934   _a2:
0B00010C            7935          ds.b      4
                    7936   _a3:
0B000110            7937          ds.b      4
                    7938   _a4:
0B000114            7939          ds.b      4
                    7940   _a5:
0B000118            7941          ds.b      4
                    7942   _a6:
0B00011C            7943          ds.b      4
                    7944   _PC:
0B000120            7945          ds.b      4
                    7946   _SSP:
0B000124            7947          ds.b      4
                    7948   _USP:
0B000128            7949          ds.b      4
                    7950   _SR:
0B00012C            7951          ds.b      2
                    7952   _BreakPointAddress:
0B00012E            7953          ds.b      32
                    7954   _BreakPointInstruction:
0B00014E            7955          ds.b      16
                    7956   _BreakPointSetOrCleared:
0B00015E            7957          ds.b      32
                    7958   _InstructionSize:
0B00017E            7959          ds.b      4
                    7960   _WatchPointAddress:
0B000182            7961          ds.b      32
                    7962   _WatchPointSetOrCleared:
0B0001A2            7963          ds.b      32
                    7964   _WatchPointString:
0B0001C2            7965          ds.b      800
                    7966   _TempString:
0B0004E2            7967          ds.b      100
                    7968   @vsscanf_buf:
0B000546            7969          ds.b      80
                    7970          section   heap
0B000596            7971                   align
          0B00 0596 7972   bssEnd          equ *                   end of storage space for unitialised variables
                    7973   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 7974   heap   equ       *
0B000596            7975                    align
          0000 0000

Assembly errors: 0
