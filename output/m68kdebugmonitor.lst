680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 03 Apr 2025      Time: 19:40:12          Source: C:\M68KV6.0 - 800BY480\OUTPUT\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0796   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 07A8   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 07BA   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 07CC   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 07DE   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 07F0   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 0802   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0814   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0826   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 0838   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 084A   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 084A   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 084A   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 084A   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 084A   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 084A   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 084A   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 084A   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 084A   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 084A   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 084A   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 084A   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 084A   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 042E   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 0440   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 0452   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 0464   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 0476   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 0580   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 0592   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 05A4   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 05B6   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 05C8   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 05DA   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 05EC   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 05FE   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 0610   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 0622   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 0634   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 0646   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 0658   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 066A   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 067C   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 068E   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 06A0   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 0790   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             ;set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; some important initialisation do not modify
00000404  23FC FFFF   89                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000408  FFFF 0803 
0000040C  00C0      
0000040E  23FC 0000   90                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000412  0000 0803 
00000416  00C4      
00000418  23FC 0803   91                   move.l    #heap,__heap    ; pointer to free memory
0000041C  0778 0803 
00000420  00C4      
00000422  46FC 2000   92                   move.w    #$2000,SR       ; enable interrupts
                      93   
00000426  4EB9 0000   94   mainloop        jsr       _main
0000042A  0CF2      
0000042C  60F8        95                   bra       mainloop
                      96   
                      97   *********************************************************************************************************
                      98   * Code to call Ram Based Interrupt handler and other exeception handler code
                      99   *********************************************************************************************************
0000042E  48E7 FFFE  100   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000432  2079 0803  101                   move.l    VL1IRQ,a0               get ram based address into a0
00000436  0064      
00000438  4E90       102                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000043A  4CDF 7FFF  103                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000043E  4E73       104                   rte
00000440  48E7 FFFE  105   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000444  2079 0803  106                   move.l    VL2IRQ,a0               get ram based address into a0
00000448  0068      
0000044A  4E90       107                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000044C  4CDF 7FFF  108                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000450  4E73       109                   rte
00000452  48E7 FFFE  110   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000456  2079 0803  111                   move.l    VL3IRQ,a0               get ram based address into a0
0000045A  006C      
0000045C  4E90       112                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000045E  4CDF 7FFF  113                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000462  4E73       114                   rte
00000464  48E7 FFFE  115   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000468  2079 0803  116                   move.l    VL4IRQ,a0               get ram based address into a0
0000046C  0070      
0000046E  4E90       117                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000470  4CDF 7FFF  118                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000474  4E73       119                   rte
                     120   
                     121   * Trace trap Handler
                     122   
                     123   Level5RamISR
                     124   *
                     125   **         Copy 68000 registers from debug monitor Variables,
                     126   *
                     127   *
00000476  23FC 0000  128                   move.l    #1,_Trace              switch on Trace Mode
0000047A  0001 0803 
0000047E  00D8      
00000480  13FC 0000  129                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
00000484  0040 000A 
00000488  33DF 0803  130                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
0000048C  012C      
0000048E  23DF 0803  131                   move.l    (sp)+,_PC              get at the users program counter and copy
00000492  0120      
                     132   *
00000494  23CF 0803  133                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000498  0124      
0000049A  23C0 0803  134                   move.l    d0,_d0
0000049E  00E4      
000004A0  23C1 0803  135                   move.l    d1,_d1
000004A4  00E8      
000004A6  23C2 0803  136                   move.l    d2,_d2
000004AA  00EC      
000004AC  23C3 0803  137                   move.l    d3,_d3
000004B0  00F0      
000004B2  23C4 0803  138                   move.l    d4,_d4
000004B6  00F4      
000004B8  23C5 0803  139                   move.l    d5,_d5
000004BC  00F8      
000004BE  23C6 0803  140                   move.l    d6,_d6
000004C2  00FC      
000004C4  23C7 0803  141                   move.l    d7,_d7
000004C8  0100      
                     142   *
000004CA  23C8 0803  143                   move.l    a0,_a0
000004CE  0104      
000004D0  23C9 0803  144                   move.l    a1,_a1
000004D4  0108      
000004D6  23CA 0803  145                   move.l    a2,_a2
000004DA  010C      
000004DC  23CB 0803  146                   move.l    a3,_a3
000004E0  0110      
000004E2  23CC 0803  147                   move.l    a4,_a4
000004E6  0114      
000004E8  23CD 0803  148                   move.l    a5,_a5
000004EC  0118      
000004EE  23CE 0803  149                   move.l    a6,_a6
000004F2  011C      
000004F4  4E68       150                   move.l    usp,a0
000004F6  23C8 0803  151                   move.l    a0,_USP
000004FA  0128      
                     152   *
000004FC  2079 0803  153                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
00000500  0074      
00000502  4E90       154                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     155   
                     156   ** After trace, reload 68000 registers with new values before continuing
                     157   
00000504  2039 0803  158                   move.l   _d0,d0
00000508  00E4      
0000050A  2239 0803  159                   move.l   _d1,d1
0000050E  00E8      
00000510  2439 0803  160                   move.l   _d2,d2
00000514  00EC      
00000516  2639 0803  161                   move.l   _d3,d3
0000051A  00F0      
0000051C  2839 0803  162                   move.l   _d4,d4
00000520  00F4      
00000522  2A39 0803  163                   move.l   _d5,d5
00000526  00F8      
00000528  2C39 0803  164                   move.l   _d6,d6
0000052C  00FC      
0000052E  2E39 0803  165                   move.l   _d7,d7
00000532  0100      
                     166   
00000534  2079 0803  167                   move.l   _USP,a0
00000538  0128      
0000053A  4E60       168                   move.l   a0,USP                     load user stack pointer
0000053C  2079 0803  169                   move.l   _a0,a0
00000540  0104      
00000542  2279 0803  170                   move.l   _a1,a1
00000546  0108      
00000548  2479 0803  171                   move.l   _a2,a2
0000054C  010C      
0000054E  2679 0803  172                   move.l   _a3,a3
00000552  0110      
00000554  2879 0803  173                   move.l   _a4,a4
00000558  0114      
0000055A  2A79 0803  174                   move.l   _a5,a5
0000055E  0118      
00000560  2C79 0803  175                   move.l   _a6,a6
00000564  011C      
                     176   
00000566  2E79 0803  177                   move.l   _SSP,sp
0000056A  0124      
0000056C  2F39 0803  178                   move.l   _PC,-(sp)
00000570  0120      
00000572  3F39 0803  179                   move.w   _SR,-(sp)
00000576  012C      
00000578  11F8 0074  180                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
0000057C  0000      
0000057E  4E73       181                   rte
                     182   
                     183   * address trap handler
                     184   
00000580  48E7 FFFE  185   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000584  2079 0803  186                   move.l    VL6IRQ,a0               get ram based address into a0
00000588  0078      
0000058A  4E90       187                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000058C  4CDF 7FFF  188                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000590  4E73       189                   rte
                     190   
00000592  48E7 FFFE  191   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000596  2079 0803  192                   move.l    VL7IRQ,a0               get ram based address into a0
0000059A  007C      
0000059C  4E90       193                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000059E  4CDF 7FFF  194                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005A2  4E73       195                   rte
                     196   
                     197   
                     198   ********************************************************************************************************
                     199   * Ram based Trap handler and other exeception handler code
                     200   *********************************************************************************************************
                     201   
000005A4  48E7 FFFE  202   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005A8  2079 0803  203                   move.l    VTrap0,a0                get ram based address into a0
000005AC  0080      
000005AE  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005B0  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005B4  4E73       206                   rte
                     207   
000005B6  48E7 FFFE  208   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005BA  2079 0803  209                   move.l    VTrap1,a0                get ram based address into a0
000005BE  0084      
000005C0  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005C2  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005C6  4E73       212                   rte
                     213   
000005C8  48E7 FFFE  214   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005CC  2079 0803  215                   move.l    VTrap2,a0                get ram based address into a0
000005D0  0088      
000005D2  4E90       216                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005D4  4CDF 7FFF  217                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005D8  4E73       218                   rte
                     219   
000005DA  48E7 FFFE  220   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005DE  2079 0803  221                   move.l    VTrap3,a0                get ram based address into a0
000005E2  008C      
000005E4  4E90       222                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005E6  4CDF 7FFF  223                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005EA  4E73       224                   rte
                     225   
000005EC  48E7 FFFE  226   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  227                   move.l    VTrap4,a0                get ram based address into a0
000005F4  0090      
000005F6  4E90       228                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005F8  4CDF 7FFF  229                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       230                   rte
                     231   
000005FE  48E7 FFFE  232   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  233                   move.l    VTrap5,a0                get ram based address into a0
00000606  0094      
00000608  4E90       234                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000060A  4CDF 7FFF  235                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       236                   rte
                     237   
00000610  48E7 FFFE  238   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  239                   move.l    VTrap6,a0                get ram based address into a0
00000618  0098      
0000061A  4E90       240                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  241                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       242                   rte
                     243   
00000622  48E7 FFFE  244   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  245                   move.l    VTrap7,a0                get ram based address into a0
0000062A  009C      
0000062C  4E90       246                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  247                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       248                   rte
                     249   
00000634  48E7 FFFE  250   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  251                   move.l    VTrap8,a0                get ram based address into a0
0000063C  00A0      
0000063E  4E90       252                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  253                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       254                   rte
                     255   
00000646  48E7 FFFE  256   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  257                   move.l    VTrap9,a0                get ram based address into a0
0000064E  00A4      
00000650  4E90       258                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  259                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       260                   rte
                     261   
00000658  48E7 FFFE  262   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  263                   move.l    VTrap10,a0                get ram based address into a0
00000660  00A8      
00000662  4E90       264                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  265                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       266                   rte
                     267   
0000066A  48E7 FFFE  268   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  269                   move.l    VTrap11,a0                get ram based address into a0
00000672  00AC      
00000674  4E90       270                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  271                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       272                   rte
                     273   
0000067C  48E7 FFFE  274   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  275                   move.l    VTrap12,a0                get ram based address into a0
00000684  00B0      
00000686  4E90       276                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  277                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       278                   rte
                     279   
0000068E  48E7 FFFE  280   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  281                   move.l    VTrap13,a0                get ram based address into a0
00000696  00B4      
00000698  4E90       282                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  283                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       284                   rte
                     285   
                     286   Trap14RamISR    ;Break Point Handler
                     287   *
                     288   **         Copy 68000 registers from debug monitor Variables
                     289   *
000006A0  23FC 0000  290                   move.l    #1,_Trace      switch on Trace Mode
000006A4  0001 0803 
000006A8  00D8      
000006AA  33DF 0803  291                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
000006AE  012C      
000006B0  23DF 0803  292                   move.l    (sp)+,_PC      get at the users program counter and copy
000006B4  0120      
                     293   *
000006B6  23C0 0803  294                   move.l    d0,_d0
000006BA  00E4      
000006BC  23C1 0803  295                   move.l    d1,_d1
000006C0  00E8      
000006C2  23C2 0803  296                   move.l    d2,_d2
000006C6  00EC      
000006C8  23C3 0803  297                   move.l    d3,_d3
000006CC  00F0      
000006CE  23C4 0803  298                   move.l    d4,_d4
000006D2  00F4      
000006D4  23C5 0803  299                   move.l    d5,_d5
000006D8  00F8      
000006DA  23C6 0803  300                   move.l    d6,_d6
000006DE  00FC      
000006E0  23C7 0803  301                   move.l    d7,_d7
000006E4  0100      
                     302   *
000006E6  23C8 0803  303                   move.l    a0,_a0
000006EA  0104      
000006EC  23C9 0803  304                   move.l    a1,_a1
000006F0  0108      
000006F2  23CA 0803  305                   move.l    a2,_a2
000006F6  010C      
000006F8  23CB 0803  306                   move.l    a3,_a3
000006FC  0110      
000006FE  23CC 0803  307                   move.l    a4,_a4
00000702  0114      
00000704  23CD 0803  308                   move.l    a5,_a5
00000708  0118      
0000070A  23CE 0803  309                   move.l    a6,_a6
0000070E  011C      
00000710  4E68       310                   move.l    USP,a0
00000712  23C8 0803  311                   move.l    a0,_USP
00000716  0128      
                     312   *
00000718  2079 0803  313                   move.l    VTrap14,a0             get ram based address into a0
0000071C  00B8      
0000071E  4E90       314                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     315   
                     316   ** After breakpoint reload 68000 registers with new values before continuing
                     317   
                     318   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
00000720  2039 0803  319                   move.l   _d0,d0
00000724  00E4      
00000726  2239 0803  320                   move.l   _d1,d1
0000072A  00E8      
0000072C  2439 0803  321                   move.l   _d2,d2
00000730  00EC      
00000732  2639 0803  322                   move.l   _d3,d3
00000736  00F0      
00000738  2839 0803  323                   move.l   _d4,d4
0000073C  00F4      
0000073E  2A39 0803  324                   move.l   _d5,d5
00000742  00F8      
00000744  2C39 0803  325                   move.l   _d6,d6
00000748  00FC      
0000074A  2E39 0803  326                   move.l   _d7,d7
0000074E  0100      
                     327   
00000750  2079 0803  328                   move.l   _USP,a0
00000754  0128      
00000756  4E60       329                   move.l   a0,USP        load user stack pointer A7
00000758  2079 0803  330                   move.l   _a0,a0
0000075C  0104      
0000075E  2279 0803  331                   move.l   _a1,a1
00000762  0108      
00000764  2479 0803  332                   move.l   _a2,a2
00000768  010C      
0000076A  2679 0803  333                   move.l   _a3,a3
0000076E  0110      
00000770  2879 0803  334                   move.l   _a4,a4
00000774  0114      
00000776  2A79 0803  335                   move.l   _a5,a5
0000077A  0118      
0000077C  2C79 0803  336                   move.l   _a6,a6
00000780  011C      
                     337   
00000782  2F39 0803  338                   move.l   _PC,-(sp)
00000786  0120      
00000788  3F39 0803  339                   move.w   _SR,-(sp)
0000078C  012C      
0000078E  4E73       340                   rte
                     341   
00000790  4EF9 0000  342   Trap15RamISR    jmp     _CallDebugMonitor
00000794  0AB6      
                     343   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     344   *                move.l    VTrap15,a0                get ram based address into a0
                     345   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     346   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     347   *                rte
                     348   
                     349   *********************************************************************************************************
                     350   *Default exception handler for everything without a specific handler
                     351   *********************************************************************************************************
                     352   
                     353   *
                     354   **              Jump here for each unhandled exception
                     355   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     356   *
                     357   
00000796  48E7 FFFE  358   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000079A  2079 0803  359                   move.l    VBusError,a0            get ram based address into a0
0000079E  0008      
000007A0  4E90       360                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007A2  4CDF 7FFF  361                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007A6  4E73       362                   rte
000007A8  48E7 FFFE  363   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007AC  2079 0803  364                   move.l    VAddressError,a0        get ram based address into a0
000007B0  000C      
000007B2  4E90       365                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007B4  4CDF 7FFF  366                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007B8  4E73       367                   rte
000007BA  48E7 FFFE  368   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007BE  2079 0803  369                   move.l    VIllegalInstr,a0        get ram based address into a0
000007C2  0010      
000007C4  4E90       370                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007C6  4CDF 7FFF  371                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007CA  4E73       372                   rte
000007CC  48E7 FFFE  373   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007D0  2079 0803  374                   move.l    VDividebyZero,a0        get ram based address into a0
000007D4  0014      
000007D6  4E90       375                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007D8  4CDF 7FFF  376                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007DC  4E73       377                   rte
000007DE  48E7 FFFE  378   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007E2  2079 0803  379                   move.l    VCheck,a0               get ram based address into a0
000007E6  0018      
000007E8  4E90       380                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007EA  4CDF 7FFF  381                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007EE  4E73       382                   rte
000007F0  48E7 FFFE  383   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007F4  2079 0803  384                   move.l    VTrapV,a0               get ram based address into a0
000007F8  001C      
000007FA  4E90       385                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007FC  4CDF 7FFF  386                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000800  4E73       387                   rte
00000802  48E7 FFFE  388   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  389                   move.l    VPrivilege,a0           get ram based address into a0
0000080A  0020      
0000080C  4E90       390                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  391                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       392                   rte
00000814  48E7 FFFE  393   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  394                   move.l    VTrace,a0               get ram based address into a0
0000081C  0024      
0000081E  4E90       395                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  396                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       397                   rte
00000826  48E7 FFFE  398   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  399                   move.l    VLine1010emul,a0        get ram based address into a0
0000082E  0028      
00000830  4E90       400                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  401                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       402                   rte
00000838  48E7 FFFE  403   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  404                   move.l    VLine1111emul,a0        get ram based address into a0
00000840  002C      
00000842  4E90       405                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  406                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       407                   rte
                     408   E_Unnas1
                     409   E_Unnas2
                     410   E_Unnas3
                     411   E_UnitI
                     412   E_Unnas4
                     413   E_Unnas5
                     414   E_Unnas6
                     415   E_Unnas7
                     416   E_Unnas8
                     417   E_Unnas9
                     418   E_Unnas10
                     419   E_Unnas11
                     420   E_Spuri
0000084A  60FE       421   _stop            bra _stop                         stop
                     422   ***************************************************************************************************
                     423   * Go() function in debug monitor
                     424   ***************************************************************************************************
                     425   _go
0000084C  2E79 0803  426                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
00000850  0124      
00000852  2F39 0803  427                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
00000856  0120      
00000858  3F39 0803  428                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
0000085C  012C      
                     429   
0000085E  1038 0078  430                   move.b   $00000078,d0  remove any spurious address exception arising after power on
00000862  2039 0803  431                   move.l   _d0,d0
00000866  00E4      
00000868  2239 0803  432                   move.l   _d1,d1
0000086C  00E8      
0000086E  2439 0803  433                   move.l   _d2,d2
00000872  00EC      
00000874  2639 0803  434                   move.l   _d3,d3
00000878  00F0      
0000087A  2839 0803  435                   move.l   _d4,d4
0000087E  00F4      
00000880  2A39 0803  436                   move.l   _d5,d5
00000884  00F8      
00000886  2C39 0803  437                   move.l   _d6,d6
0000088A  00FC      
0000088C  2E39 0803  438                   move.l   _d7,d7
00000890  0100      
                     439   
00000892  2079 0803  440                   move.l   _USP,a0
00000896  0128      
00000898  4E60       441                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
0000089A  2079 0803  442                   move.l   _a0,a0
0000089E  0104      
000008A0  2279 0803  443                   move.l   _a1,a1
000008A4  0108      
000008A6  2479 0803  444                   move.l   _a2,a2
000008AA  010C      
000008AC  2679 0803  445                   move.l   _a3,a3
000008B0  0110      
000008B2  2879 0803  446                   move.l   _a4,a4
000008B6  0114      
000008B8  2A79 0803  447                   move.l   _a5,a5
000008BC  0118      
000008BE  2C79 0803  448                   move.l   _a6,a6
000008C2  011C      
000008C4  4E73       449                   rte                    load the status reg and PC from the stack and commence running
                     450                                          *used to be rte but this didn't load the status byte
                     451   
                     452   ; C:\COSMICIMPALASM68K\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     453   ; #include "DebugMonitor.h"
                     454   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     455   ; #define StartOfExceptionVectorTable 0x08030000
                     456   ; //#define StartOfExceptionVectorTable 0x0B000000
                     457   ; // use 0C000000 for dram or hex 08040000 for sram
                     458   ; #define TopOfStack 0x08040000
                     459   ; //#define TopOfStack 0x0C000000
                     460   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     461   ; unsigned int i, x, y, z, PortA_Count;
                     462   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     463   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     464   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     465   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     466   ; unsigned int PC, SSP, USP ;
                     467   ; unsigned short int SR;
                     468   ; // Breakpoint variables
                     469   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     470   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     471   ; unsigned int BreakPointSetOrCleared[8] ;
                     472   ; unsigned int InstructionSize ;
                     473   ; // watchpoint variables
                     474   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     475   ; unsigned int WatchPointSetOrCleared[8] ;
                     476   ; int clock_count_ms;
                     477   ; char    TempString[100] ;
                     478   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     479   ; {
                     480   _InstallExceptionHandler:
000008C6  4E56 FFFC  481          link      A6,#-4
                     482   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
000008CA  2D7C 0803  483          move.l    #134414336,-4(A6)
000008CE  0000 FFFC 
                     484   ; RamVectorAddress[level] = (long int *)(function_ptr);
000008D2  206E FFFC  485          move.l    -4(A6),A0
000008D6  202E 000C  486          move.l    12(A6),D0
000008DA  E588       487          lsl.l     #2,D0
000008DC  21AE 0008  488          move.l    8(A6),0(A0,D0.L)
000008E0  0800      
000008E2  4E5E       489          unlk      A6
000008E4  4E75       490          rts
                     491   ; }
                     492   ; /*********************************************************************************************
                     493   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     494   ; *********************************************************************************************/
                     495   ; void Init_RS232(void)
                     496   ; {
                     497   _Init_RS232:
                     498   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
000008E6  13FC 0015  499          move.b    #21,4194368
000008EA  0040 0040 
                     500   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
000008EE  13FC 0001  501          move.b    #1,4194372
000008F2  0040 0044 
000008F6  4E75       502          rts
                     503   ; }
                     504   ; int kbhit(void)
                     505   ; {
                     506   _kbhit:
                     507   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
000008F8  1039 0040  508          move.b    4194368,D0
000008FC  0040      
000008FE  C03C 0001  509          and.b     #1,D0
00000902  0C00 0001  510          cmp.b     #1,D0
00000906  6604       511          bne.s     kbhit_1
                     512   ; return 1 ;
00000908  7001       513          moveq     #1,D0
0000090A  6002       514          bra.s     kbhit_3
                     515   kbhit_1:
                     516   ; else
                     517   ; return 0 ;
0000090C  4280       518          clr.l     D0
                     519   kbhit_3:
0000090E  4E75       520          rts
                     521   ; }
                     522   ; /*********************************************************************************************************
                     523   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     524   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     525   ; **  to allow the board to communicate with HyperTerminal Program
                     526   ; **
                     527   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     528   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     529   ; **  call _putch() also
                     530   ; *********************************************************************************************************/
                     531   ; int _putch( int c)
                     532   ; {
                     533   __putch:
00000910  4E56 0000  534          link      A6,#0
                     535   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     536   _putch_1:
00000914  1039 0040  537          move.b    4194368,D0
00000918  0040      
0000091A  C03C 0002  538          and.b     #2,D0
0000091E  0C00 0002  539          cmp.b     #2,D0
00000922  6702       540          beq.s     _putch_3
00000924  60EE       541          bra       _putch_1
                     542   _putch_3:
                     543   ; ;
                     544   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000926  202E 0008  545          move.l    8(A6),D0
0000092A  C03C 007F  546          and.b     #127,D0
0000092E  13C0 0040  547          move.b    D0,4194370
00000932  0042      
                     548   ; return c ;                                              // putchar() expects the character to be returned
00000934  202E 0008  549          move.l    8(A6),D0
00000938  4E5E       550          unlk      A6
0000093A  4E75       551          rts
                     552   ; }
                     553   ; /*********************************************************************************************************
                     554   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     555   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     556   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     557   ; **
                     558   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     559   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     560   ; **  call _getch() also
                     561   ; *********************************************************************************************************/
                     562   ; int _getch( void )
                     563   ; {
                     564   __getch:
0000093C  2F02       565          move.l    D2,-(A7)
                     566   ; int c ;
                     567   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     568   _getch_1:
0000093E  1039 0040  569          move.b    4194368,D0
00000942  0040      
00000944  C03C 0001  570          and.b     #1,D0
00000948  0C00 0001  571          cmp.b     #1,D0
0000094C  6702       572          beq.s     _getch_3
0000094E  60EE       573          bra       _getch_1
                     574   _getch_3:
                     575   ; ;
                     576   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000950  1039 0040  577          move.b    4194370,D0
00000954  0042      
00000956  C0BC 0000  578          and.l     #255,D0
0000095A  00FF      
0000095C  C0BC 0000  579          and.l     #127,D0
00000960  007F      
00000962  2400       580          move.l    D0,D2
                     581   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     582   ; if(Echo)
00000964  4AB9 0803  583          tst.l     _Echo.L
00000968  00E0      
0000096A  6708       584          beq.s     _getch_4
                     585   ; _putch(c);
0000096C  2F02       586          move.l    D2,-(A7)
0000096E  4EB8 0910  587          jsr       __putch
00000972  584F       588          addq.w    #4,A7
                     589   _getch_4:
                     590   ; return c ;
00000974  2002       591          move.l    D2,D0
00000976  241F       592          move.l    (A7)+,D2
00000978  4E75       593          rts
                     594   ; }
                     595   ; // flush the input stream for any unread characters
                     596   ; void FlushKeyboard(void)
                     597   ; {
                     598   _FlushKeyboard:
0000097A  4E56 FFFC  599          link      A6,#-4
                     600   ; char c ;
                     601   ; while(1)    {
                     602   FlushKeyboard_1:
                     603   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
0000097E  1039 0040  604          move.b    4194368,D0
00000982  0040      
00000984  C03C 0001  605          and.b     #1,D0
00000988  0C00 0001  606          cmp.b     #1,D0
0000098C  6610       607          bne.s     FlushKeyboard_4
                     608   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
0000098E  1039 0040  609          move.b    4194370,D0
00000992  0042      
00000994  C03C 007F  610          and.b     #127,D0
00000998  1D40 FFFF  611          move.b    D0,-1(A6)
0000099C  6002       612          bra.s     FlushKeyboard_5
                     613   FlushKeyboard_4:
                     614   ; else
                     615   ; return ;
0000099E  6002       616          bra.s     FlushKeyboard_6
                     617   FlushKeyboard_5:
000009A0  60DC       618          bra       FlushKeyboard_1
                     619   FlushKeyboard_6:
000009A2  4E5E       620          unlk      A6
000009A4  4E75       621          rts
                     622   ; }
                     623   ; }
                     624   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     625   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     626   ; char xtod(int c)
                     627   ; {
                     628   _xtod:
000009A6  4E56 0000  629          link      A6,#0
000009AA  2F02       630          move.l    D2,-(A7)
000009AC  242E 0008  631          move.l    8(A6),D2
                     632   ; if ((char)(c) <= (char)('9'))
000009B0  0C02 0039  633          cmp.b     #57,D2
000009B4  6E08       634          bgt.s     xtod_1
                     635   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
000009B6  1002       636          move.b    D2,D0
000009B8  0400 0030  637          sub.b     #48,D0
000009BC  6014       638          bra.s     xtod_3
                     639   xtod_1:
                     640   ; else if((char)(c) > (char)('F'))    // assume lower case
000009BE  0C02 0046  641          cmp.b     #70,D2
000009C2  6F08       642          ble.s     xtod_4
                     643   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
000009C4  1002       644          move.b    D2,D0
000009C6  0400 0057  645          sub.b     #87,D0
000009CA  6006       646          bra.s     xtod_3
                     647   xtod_4:
                     648   ; else
                     649   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
000009CC  1002       650          move.b    D2,D0
000009CE  0400 0037  651          sub.b     #55,D0
                     652   xtod_3:
000009D2  241F       653          move.l    (A7)+,D2
000009D4  4E5E       654          unlk      A6
000009D6  4E75       655          rts
                     656   ; }
                     657   ; int Get2HexDigits(char *CheckSumPtr)
                     658   ; {
                     659   _Get2HexDigits:
000009D8  4E56 0000  660          link      A6,#0
000009DC  2F02       661          move.l    D2,-(A7)
                     662   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
000009DE  2F00       663          move.l    D0,-(A7)
000009E0  4EB8 093C  664          jsr       __getch
000009E4  2200       665          move.l    D0,D1
000009E6  201F       666          move.l    (A7)+,D0
000009E8  2F01       667          move.l    D1,-(A7)
000009EA  4EB8 09A6  668          jsr       _xtod
000009EE  584F       669          addq.w    #4,A7
000009F0  C0BC 0000  670          and.l     #255,D0
000009F4  00FF      
000009F6  E980       671          asl.l     #4,D0
000009F8  2F00       672          move.l    D0,-(A7)
000009FA  2F01       673          move.l    D1,-(A7)
000009FC  4EB8 093C  674          jsr       __getch
00000A00  221F       675          move.l    (A7)+,D1
00000A02  2F00       676          move.l    D0,-(A7)
00000A04  4EB8 09A6  677          jsr       _xtod
00000A08  584F       678          addq.w    #4,A7
00000A0A  2200       679          move.l    D0,D1
00000A0C  201F       680          move.l    (A7)+,D0
00000A0E  C2BC 0000  681          and.l     #255,D1
00000A12  00FF      
00000A14  8081       682          or.l      D1,D0
00000A16  2400       683          move.l    D0,D2
                     684   ; if(CheckSumPtr)
00000A18  4AAE 0008  685          tst.l     8(A6)
00000A1C  6706       686          beq.s     Get2HexDigits_1
                     687   ; *CheckSumPtr += i ;
00000A1E  206E 0008  688          move.l    8(A6),A0
00000A22  D510       689          add.b     D2,(A0)
                     690   Get2HexDigits_1:
                     691   ; return i ;
00000A24  2002       692          move.l    D2,D0
00000A26  241F       693          move.l    (A7)+,D2
00000A28  4E5E       694          unlk      A6
00000A2A  4E75       695          rts
                     696   ; }
                     697   ; int Get4HexDigits(char *CheckSumPtr)
                     698   ; {
                     699   _Get4HexDigits:
00000A2C  4E56 0000  700          link      A6,#0
                     701   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000A30  2F2E 0008  702          move.l    8(A6),-(A7)
00000A34  4EB8 09D8  703          jsr       _Get2HexDigits
00000A38  584F       704          addq.w    #4,A7
00000A3A  E180       705          asl.l     #8,D0
00000A3C  2F00       706          move.l    D0,-(A7)
00000A3E  2F2E 0008  707          move.l    8(A6),-(A7)
00000A42  4EB8 09D8  708          jsr       _Get2HexDigits
00000A46  584F       709          addq.w    #4,A7
00000A48  2200       710          move.l    D0,D1
00000A4A  201F       711          move.l    (A7)+,D0
00000A4C  8081       712          or.l      D1,D0
00000A4E  4E5E       713          unlk      A6
00000A50  4E75       714          rts
                     715   ; }
                     716   ; int Get6HexDigits(char *CheckSumPtr)
                     717   ; {
                     718   _Get6HexDigits:
00000A52  4E56 0000  719          link      A6,#0
                     720   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000A56  2F2E 0008  721          move.l    8(A6),-(A7)
00000A5A  4EB8 0A2C  722          jsr       _Get4HexDigits
00000A5E  584F       723          addq.w    #4,A7
00000A60  E180       724          asl.l     #8,D0
00000A62  2F00       725          move.l    D0,-(A7)
00000A64  2F2E 0008  726          move.l    8(A6),-(A7)
00000A68  4EB8 09D8  727          jsr       _Get2HexDigits
00000A6C  584F       728          addq.w    #4,A7
00000A6E  2200       729          move.l    D0,D1
00000A70  201F       730          move.l    (A7)+,D0
00000A72  8081       731          or.l      D1,D0
00000A74  4E5E       732          unlk      A6
00000A76  4E75       733          rts
                     734   ; }
                     735   ; int Get8HexDigits(char *CheckSumPtr)
                     736   ; {
                     737   _Get8HexDigits:
00000A78  4E56 0000  738          link      A6,#0
                     739   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000A7C  2F2E 0008  740          move.l    8(A6),-(A7)
00000A80  4EB8 0A2C  741          jsr       _Get4HexDigits
00000A84  584F       742          addq.w    #4,A7
00000A86  E180       743          asl.l     #8,D0
00000A88  E180       744          asl.l     #8,D0
00000A8A  2F00       745          move.l    D0,-(A7)
00000A8C  2F2E 0008  746          move.l    8(A6),-(A7)
00000A90  4EB8 0A2C  747          jsr       _Get4HexDigits
00000A94  584F       748          addq.w    #4,A7
00000A96  2200       749          move.l    D0,D1
00000A98  201F       750          move.l    (A7)+,D0
00000A9A  8081       751          or.l      D1,D0
00000A9C  4E5E       752          unlk      A6
00000A9E  4E75       753          rts
                     754   ; }
                     755   ; void UnknownCommand()
                     756   ; {
                     757   _UnknownCommand:
                     758   ; printf("\r\nUnknown Command.....\r\n") ;
00000AA0  4879 0000  759          pea       @m68kde~1_1.L
00000AA4  45CC      
00000AA6  4EB9 0000  760          jsr       _printf
00000AAA  3B38      
00000AAC  584F       761          addq.w    #4,A7
                     762   ; Help() ;
00000AAE  4EB9 0000  763          jsr       _Help
00000AB2  0ACC      
00000AB4  4E75       764          rts
                     765   ; }
                     766   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                     767   ; void CallDebugMonitor(void)
                     768   ; {
                     769   _CallDebugMonitor:
                     770   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00000AB6  4879 0000  771          pea       @m68kde~1_2.L
00000ABA  45E6      
00000ABC  4EB9 0000  772          jsr       _printf
00000AC0  3B38      
00000AC2  584F       773          addq.w    #4,A7
                     774   ; menu();
00000AC4  4EB9 0000  775          jsr       _menu
00000AC8  0B1A      
00000ACA  4E75       776          rts
                     777   ; }
                     778   ; void Help(void)
                     779   ; {
                     780   _Help:
00000ACC  48E7 2020  781          movem.l   D2/A2,-(A7)
00000AD0  45F9 0000  782          lea       _printf.L,A2
00000AD4  3B38      
                     783   ; char *banner = "\r\n----------------------------------------------------------------" ;
00000AD6  41F9 0000  784          lea       @m68kde~1_3.L,A0
00000ADA  4606      
00000ADC  2408       785          move.l    A0,D2
                     786   ; printf(banner) ;
00000ADE  2F02       787          move.l    D2,-(A7)
00000AE0  4E92       788          jsr       (A2)
00000AE2  584F       789          addq.w    #4,A7
                     790   ; printf("\r\n  Final Project") ;
00000AE4  4879 0000  791          pea       @m68kde~1_4.L
00000AE8  464A      
00000AEA  4E92       792          jsr       (A2)
00000AEC  584F       793          addq.w    #4,A7
                     794   ; printf(banner) ;
00000AEE  2F02       795          move.l    D2,-(A7)
00000AF0  4E92       796          jsr       (A2)
00000AF2  584F       797          addq.w    #4,A7
                     798   ; printf("\r\n  T    - Run Cosmic Impala Game") ;
00000AF4  4879 0000  799          pea       @m68kde~1_5.L
00000AF8  465C      
00000AFA  4E92       800          jsr       (A2)
00000AFC  584F       801          addq.w    #4,A7
                     802   ; printf(banner) ;
00000AFE  2F02       803          move.l    D2,-(A7)
00000B00  4E92       804          jsr       (A2)
00000B02  584F       805          addq.w    #4,A7
                     806   ; printf("\r\n  G    - Run Graphics Test") ;
00000B04  4879 0000  807          pea       @m68kde~1_6.L
00000B08  467E      
00000B0A  4E92       808          jsr       (A2)
00000B0C  584F       809          addq.w    #4,A7
                     810   ; printf(banner) ;
00000B0E  2F02       811          move.l    D2,-(A7)
00000B10  4E92       812          jsr       (A2)
00000B12  584F       813          addq.w    #4,A7
00000B14  4CDF 0404  814          movem.l   (A7)+,D2/A2
00000B18  4E75       815          rts
                     816   ; }
                     817   ; void menu(void)
                     818   ; {
                     819   _menu:
00000B1A  4E56 FFFC  820          link      A6,#-4
00000B1E  48E7 2020  821          movem.l   D2/A2,-(A7)
00000B22  45F9 0000  822          lea       _printf.L,A2
00000B26  3B38      
                     823   ; char c;
                     824   ; int c1 ;
                     825   ; while(1)    {
                     826   menu_1:
                     827   ; FlushKeyboard() ;               // dump unread characters from keyboard
00000B28  4EB8 097A  828          jsr       _FlushKeyboard
                     829   ; printf("\r\n#") ;
00000B2C  4879 0000  830          pea       @m68kde~1_7.L
00000B30  469C      
00000B32  4E92       831          jsr       (A2)
00000B34  584F       832          addq.w    #4,A7
                     833   ; c = toupper(_getch());
00000B36  2F00       834          move.l    D0,-(A7)
00000B38  4EB8 093C  835          jsr       __getch
00000B3C  2200       836          move.l    D0,D1
00000B3E  201F       837          move.l    (A7)+,D0
00000B40  2F01       838          move.l    D1,-(A7)
00000B42  4EB9 0000  839          jsr       _toupper
00000B46  3B0C      
00000B48  584F       840          addq.w    #4,A7
00000B4A  1400       841          move.b    D0,D2
                     842   ; if ( c == (char)('T'))  {
00000B4C  0C02 0054  843          cmp.b     #84,D2
00000B50  6612       844          bne.s     menu_4
                     845   ; printf("\nRunning Cosmic Impalas Game\n");
00000B52  4879 0000  846          pea       @m68kde~1_8.L
00000B56  46A0      
00000B58  4E92       847          jsr       (A2)
00000B5A  584F       848          addq.w    #4,A7
                     849   ; cosmic_impalas_main();
00000B5C  4EB9 0000  850          jsr       _cosmic_impalas_main
00000B60  3AE0      
                     851   ; continue;
00000B62  601C       852          bra.s     menu_2
                     853   menu_4:
                     854   ; } 
                     855   ; if ( c == (char)('G'))  {
00000B64  0C02 0047  856          cmp.b     #71,D2
00000B68  6612       857          bne.s     menu_6
                     858   ; printf("\nRunning Graphics Test\n");
00000B6A  4879 0000  859          pea       @m68kde~1_9.L
00000B6E  46BE      
00000B70  4E92       860          jsr       (A2)
00000B72  584F       861          addq.w    #4,A7
                     862   ; graphics_test_main();
00000B74  4EB9 0000  863          jsr       _graphics_test_main
00000B78  1B86      
                     864   ; continue;
00000B7A  6004       865          bra.s     menu_2
                     866   menu_6:
                     867   ; } 
                     868   ; UnknownCommand() ;
00000B7C  4EB8 0AA0  869          jsr       _UnknownCommand
                     870   menu_2:
00000B80  60A6       871          bra       menu_1
                     872   ; }
                     873   ; }
                     874   ; void PrintErrorMessageandAbort(char *string) {
                     875   _PrintErrorMessageandAbort:
00000B82  4E56 0000  876          link      A6,#0
                     877   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00000B86  4879 0000  878          pea       @m68kde~1_10.L
00000B8A  46D6      
00000B8C  4EB9 0000  879          jsr       _printf
00000B90  3B38      
00000B92  584F       880          addq.w    #4,A7
                     881   ; printf("%s\r\n", string) ;
00000B94  2F2E 0008  882          move.l    8(A6),-(A7)
00000B98  4879 0000  883          pea       @m68kde~1_11.L
00000B9C  46F2      
00000B9E  4EB9 0000  884          jsr       _printf
00000BA2  3B38      
00000BA4  504F       885          addq.w    #8,A7
                     886   ; menu() ;
00000BA6  4EB8 0B1A  887          jsr       _menu
00000BAA  4E5E       888          unlk      A6
00000BAC  4E75       889          rts
                     890   ; }
                     891   ; void IRQMessage(int level) {
                     892   _IRQMessage:
00000BAE  4E56 0000  893          link      A6,#0
                     894   ; printf("\r\n\r\nProgram ABORT !!!!!");
00000BB2  4879 0000  895          pea       @m68kde~1_12.L
00000BB6  46F8      
00000BB8  4EB9 0000  896          jsr       _printf
00000BBC  3B38      
00000BBE  584F       897          addq.w    #4,A7
                     898   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00000BC0  2F2E 0008  899          move.l    8(A6),-(A7)
00000BC4  4879 0000  900          pea       @m68kde~1_13.L
00000BC8  4710      
00000BCA  4EB9 0000  901          jsr       _printf
00000BCE  3B38      
00000BD0  504F       902          addq.w    #8,A7
                     903   ; menu() ;
00000BD2  4EB8 0B1A  904          jsr       _menu
00000BD6  4E5E       905          unlk      A6
00000BD8  4E75       906          rts
                     907   ; }
                     908   ; void UnhandledIRQ1(void) {
                     909   _UnhandledIRQ1:
                     910   ; IRQMessage(1);
00000BDA  4878 0001  911          pea       1
00000BDE  4EB8 0BAE  912          jsr       _IRQMessage
00000BE2  584F       913          addq.w    #4,A7
00000BE4  4E75       914          rts
                     915   ; }
                     916   ; void UnhandledIRQ2(void) {
                     917   _UnhandledIRQ2:
                     918   ; IRQMessage(2);
00000BE6  4878 0002  919          pea       2
00000BEA  4EB8 0BAE  920          jsr       _IRQMessage
00000BEE  584F       921          addq.w    #4,A7
00000BF0  4E75       922          rts
                     923   ; }
                     924   ; void UnhandledIRQ3(void){
                     925   _UnhandledIRQ3:
                     926   ; IRQMessage(3);
00000BF2  4878 0003  927          pea       3
00000BF6  4EB8 0BAE  928          jsr       _IRQMessage
00000BFA  584F       929          addq.w    #4,A7
00000BFC  4E75       930          rts
                     931   ; }
                     932   ; void UnhandledIRQ4(void) {
                     933   _UnhandledIRQ4:
                     934   ; IRQMessage(4);
00000BFE  4878 0004  935          pea       4
00000C02  4EB8 0BAE  936          jsr       _IRQMessage
00000C06  584F       937          addq.w    #4,A7
00000C08  4E75       938          rts
                     939   ; }
                     940   ; void UnhandledIRQ5(void) {
                     941   _UnhandledIRQ5:
                     942   ; IRQMessage(5);
00000C0A  4878 0005  943          pea       5
00000C0E  4EB8 0BAE  944          jsr       _IRQMessage
00000C12  584F       945          addq.w    #4,A7
00000C14  4E75       946          rts
                     947   ; }
                     948   ; void UnhandledIRQ6(void) {
                     949   _UnhandledIRQ6:
                     950   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00000C16  4879 0000  951          pea       @m68kde~1_14.L
00000C1A  4734      
00000C1C  4EB8 0B82  952          jsr       _PrintErrorMessageandAbort
00000C20  584F       953          addq.w    #4,A7
                     954   ; menu() ;
00000C22  4EB8 0B1A  955          jsr       _menu
00000C26  4E75       956          rts
                     957   ; }
                     958   ; void UnhandledIRQ7(void) {
                     959   _UnhandledIRQ7:
                     960   ; IRQMessage(7);
00000C28  4878 0007  961          pea       7
00000C2C  4EB8 0BAE  962          jsr       _IRQMessage
00000C30  584F       963          addq.w    #4,A7
00000C32  4E75       964          rts
                     965   ; }
                     966   ; void UnhandledTrap(void) {
                     967   _UnhandledTrap:
                     968   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00000C34  4879 0000  969          pea       @m68kde~1_15.L
00000C38  4774      
00000C3A  4EB8 0B82  970          jsr       _PrintErrorMessageandAbort
00000C3E  584F       971          addq.w    #4,A7
00000C40  4E75       972          rts
                     973   ; }
                     974   ; void BusError() {
                     975   _BusError:
                     976   ; PrintErrorMessageandAbort("BUS Error!") ;
00000C42  4879 0000  977          pea       @m68kde~1_16.L
00000C46  478A      
00000C48  4EB8 0B82  978          jsr       _PrintErrorMessageandAbort
00000C4C  584F       979          addq.w    #4,A7
00000C4E  4E75       980          rts
                     981   ; }
                     982   ; void AddressError() {
                     983   _AddressError:
                     984   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00000C50  4879 0000  985          pea       @m68kde~1_17.L
00000C54  4796      
00000C56  4EB8 0B82  986          jsr       _PrintErrorMessageandAbort
00000C5A  584F       987          addq.w    #4,A7
00000C5C  4E75       988          rts
                     989   ; }
                     990   ; void IllegalInstruction() {
                     991   _IllegalInstruction:
                     992   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00000C5E  4879 0000  993          pea       @m68kde~1_18.L
00000C62  47A6      
00000C64  4EB8 0B82  994          jsr       _PrintErrorMessageandAbort
00000C68  584F       995          addq.w    #4,A7
00000C6A  4E75       996          rts
                     997   ; }
                     998   ; void Dividebyzero() {
                     999   _Dividebyzero:
                    1000   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00000C6C  4879 0000 1001          pea       @m68kde~1_19.L
00000C70  47BA      
00000C72  4EB8 0B82 1002          jsr       _PrintErrorMessageandAbort
00000C76  584F      1003          addq.w    #4,A7
00000C78  4E75      1004          rts
                    1005   ; }
                    1006   ; void Check() {
                    1007   _Check:
                    1008   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00000C7A  4879 0000 1009          pea       @m68kde~1_20.L
00000C7E  47CA      
00000C80  4EB8 0B82 1010          jsr       _PrintErrorMessageandAbort
00000C84  584F      1011          addq.w    #4,A7
00000C86  4E75      1012          rts
                    1013   ; }
                    1014   ; void Trapv() {
                    1015   _Trapv:
                    1016   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00000C88  4879 0000 1017          pea       @m68kde~1_21.L
00000C8C  47DC      
00000C8E  4EB8 0B82 1018          jsr       _PrintErrorMessageandAbort
00000C92  584F      1019          addq.w    #4,A7
00000C94  4E75      1020          rts
                    1021   ; }
                    1022   ; void PrivError() {
                    1023   _PrivError:
                    1024   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00000C96  4879 0000 1025          pea       @m68kde~1_22.L
00000C9A  47EE      
00000C9C  4EB8 0B82 1026          jsr       _PrintErrorMessageandAbort
00000CA0  584F      1027          addq.w    #4,A7
00000CA2  4E75      1028          rts
                    1029   ; }
                    1030   ; void UnitIRQ() {
                    1031   _UnitIRQ:
                    1032   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00000CA4  4879 0000 1033          pea       @m68kde~1_23.L
00000CA8  4802      
00000CAA  4EB8 0B82 1034          jsr       _PrintErrorMessageandAbort
00000CAE  584F      1035          addq.w    #4,A7
00000CB0  4E75      1036          rts
                    1037   ; }
                    1038   ; void Spurious() {
                    1039   _Spurious:
                    1040   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00000CB2  4879 0000 1041          pea       @m68kde~1_24.L
00000CB6  4814      
00000CB8  4EB8 0B82 1042          jsr       _PrintErrorMessageandAbort
00000CBC  584F      1043          addq.w    #4,A7
00000CBE  4E75      1044          rts
                    1045   ; }
                    1046   ; /*********************************************************************************
                    1047   ; ** Timer ISR
                    1048   ; **********************************************************************************/
                    1049   ; void Timer_ISR(void)
                    1050   ; {
                    1051   _Timer_ISR:
                    1052   ; if(Timer1Status == 1) {       // Did Timer 1 produce the Interrupt?
00000CC0  1039 0040 1053          move.b    4194354,D0
00000CC4  0032      
00000CC6  0C00 0001 1054          cmp.b     #1,D0
00000CCA  6612      1055          bne.s     Timer_ISR_1
                    1056   ; clock_count_ms = clock_count_ms + 10; //100 HZ clock = 10ms per clock tick
00000CCC  06B9 0000 1057          add.l     #10,_clock_count_ms.L
00000CD0  000A 0803 
00000CD4  01C2      
                    1058   ; //printf("in timer isr, clock_count_ms = %d\n",clock_count_ms);
                    1059   ; Timer1Control = 3;      	// if so clear interrupt and restart timer
00000CD6  13FC 0003 1060          move.b    #3,4194354
00000CDA  0040 0032 
                    1061   Timer_ISR_1:
00000CDE  4E75      1062          rts
                    1063   ; }
                    1064   ; }
                    1065   ; /**********************************************************************************
                    1066   ; ** Timer Initialisation Routine
                    1067   ; **********************************************************************************/
                    1068   ; void Timer1_Init(void)
                    1069   ; {
                    1070   _Timer1_Init:
                    1071   ; Timer1Data = 0x03;		// program 100 hz time delay into timer 1.
00000CE0  13FC 0003 1072          move.b    #3,4194352
00000CE4  0040 0030 
                    1073   ; /*
                    1074   ; ** timer driven off 25Mhz clock so program value so that it counts down in 0.01 secs
                    1075   ; ** the example 0x03 above is loaded into top 8 bits of a 24 bit timer so reads as
                    1076   ; ** 0x03FFFF a value of 0x03 would be 262,143/25,000,000, so is close to 1/100th sec
                    1077   ; **
                    1078   ; **
                    1079   ; ** Now write binary 00000011 to timer control register:
                    1080   ; **	Bit0 = 1 (enable interrupt from that timer)
                    1081   ; **	Bit 1 = 1 enable counting
                    1082   ; */
                    1083   ; Timer1Control = 3;
00000CE8  13FC 0003 1084          move.b    #3,4194354
00000CEC  0040 0032 
00000CF0  4E75      1085          rts
                    1086   ; }
                    1087   ; void main(void)
                    1088   ; {
                    1089   _main:
00000CF2  4E56 FFF4 1090          link      A6,#-12
00000CF6  48E7 0038 1091          movem.l   A2/A3/A4,-(A7)
00000CFA  45F8 08C6 1092          lea       _InstallExceptionHandler.L,A2
00000CFE  47F8 0CC0 1093          lea       _Timer_ISR.L,A3
00000D02  49F9 0000 1094          lea       _printf.L,A4
00000D06  3B38      
                    1095   ; char *BugMessage = "DE1-68k 15/11/2024 14:44";
00000D08  41F9 0000 1096          lea       @m68kde~1_25.L,A0
00000D0C  4822      
00000D0E  2D48 FFF4 1097          move.l    A0,-12(A6)
                    1098   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00000D12  41F9 0000 1099          lea       @m68kde~1_26.L,A0
00000D16  483C      
00000D18  2D48 FFF8 1100          move.l    A0,-8(A6)
                    1101   ; char *nameAndStudentNumber = "Yair Linn";
00000D1C  41F9 0000 1102          lea       @m68kde~1_27.L,A0
00000D20  485A      
00000D22  2D48 FFFC 1103          move.l    A0,-4(A6)
                    1104   ; clock_count_ms = 0;
00000D26  42B9 0803 1105          clr.l     _clock_count_ms.L
00000D2A  01C2      
                    1106   ; Init_RS232() ;     // initialise the RS232 port
00000D2C  4EB8 08E6 1107          jsr       _Init_RS232
                    1108   ; InstallExceptionHandler(Timer_ISR, 25) ;		      // install handler for interrupts
00000D30  4878 0019 1109          pea       25
00000D34  2F0B      1110          move.l    A3,-(A7)
00000D36  4E92      1111          jsr       (A2)
00000D38  504F      1112          addq.w    #8,A7
                    1113   ; InstallExceptionHandler(Timer_ISR, 26) ;		      // install handler for interrupts
00000D3A  4878 001A 1114          pea       26
00000D3E  2F0B      1115          move.l    A3,-(A7)
00000D40  4E92      1116          jsr       (A2)
00000D42  504F      1117          addq.w    #8,A7
                    1118   ; InstallExceptionHandler(Timer_ISR, 27) ;		      // install handler for interrupts
00000D44  4878 001B 1119          pea       27
00000D48  2F0B      1120          move.l    A3,-(A7)
00000D4A  4E92      1121          jsr       (A2)
00000D4C  504F      1122          addq.w    #8,A7
                    1123   ; InstallExceptionHandler(Timer_ISR, 28) ;		      // install handler for interrupts
00000D4E  4878 001C 1124          pea       28
00000D52  2F0B      1125          move.l    A3,-(A7)
00000D54  4E92      1126          jsr       (A2)
00000D56  504F      1127          addq.w    #8,A7
                    1128   ; InstallExceptionHandler(Timer_ISR, 29) ;		      // install handler for interrupts
00000D58  4878 001D 1129          pea       29
00000D5C  2F0B      1130          move.l    A3,-(A7)
00000D5E  4E92      1131          jsr       (A2)
00000D60  504F      1132          addq.w    #8,A7
                    1133   ; InstallExceptionHandler(Timer_ISR, 30) ;		      // install handler for interrupts
00000D62  4878 001E 1134          pea       30
00000D66  2F0B      1135          move.l    A3,-(A7)
00000D68  4E92      1136          jsr       (A2)
00000D6A  504F      1137          addq.w    #8,A7
                    1138   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00000D6C  4878 001F 1139          pea       31
00000D70  4878 0C28 1140          pea       _UnhandledIRQ7.L
00000D74  4E92      1141          jsr       (A2)
00000D76  504F      1142          addq.w    #8,A7
                    1143   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00000D78  4878 0002 1144          pea       2
00000D7C  4878 0C42 1145          pea       _BusError.L
00000D80  4E92      1146          jsr       (A2)
00000D82  504F      1147          addq.w    #8,A7
                    1148   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00000D84  4878 0003 1149          pea       3
00000D88  4878 0C50 1150          pea       _AddressError.L
00000D8C  4E92      1151          jsr       (A2)
00000D8E  504F      1152          addq.w    #8,A7
                    1153   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00000D90  4878 0004 1154          pea       4
00000D94  4878 0C5E 1155          pea       _IllegalInstruction.L
00000D98  4E92      1156          jsr       (A2)
00000D9A  504F      1157          addq.w    #8,A7
                    1158   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00000D9C  4878 0005 1159          pea       5
00000DA0  4878 0C6C 1160          pea       _Dividebyzero.L
00000DA4  4E92      1161          jsr       (A2)
00000DA6  504F      1162          addq.w    #8,A7
                    1163   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00000DA8  4878 0006 1164          pea       6
00000DAC  4878 0C7A 1165          pea       _Check.L
00000DB0  4E92      1166          jsr       (A2)
00000DB2  504F      1167          addq.w    #8,A7
                    1168   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00000DB4  4878 0007 1169          pea       7
00000DB8  4878 0C88 1170          pea       _Trapv.L
00000DBC  4E92      1171          jsr       (A2)
00000DBE  504F      1172          addq.w    #8,A7
                    1173   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00000DC0  4878 0008 1174          pea       8
00000DC4  4878 0C96 1175          pea       _PrivError.L
00000DC8  4E92      1176          jsr       (A2)
00000DCA  504F      1177          addq.w    #8,A7
                    1178   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00000DCC  4878 000F 1179          pea       15
00000DD0  4878 0CA4 1180          pea       _UnitIRQ.L
00000DD4  4E92      1181          jsr       (A2)
00000DD6  504F      1182          addq.w    #8,A7
                    1183   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00000DD8  4878 0018 1184          pea       24
00000DDC  4878 0C7A 1185          pea       _Check.L
00000DE0  4E92      1186          jsr       (A2)
00000DE2  504F      1187          addq.w    #8,A7
                    1188   ; Timer1_Init();
00000DE4  4EB8 0CE0 1189          jsr       _Timer1_Init
                    1190   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00000DE8  4EB8 097A 1191          jsr       _FlushKeyboard
                    1192   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00000DEC  4239 0040 1193          clr.b     4194314
00000DF0  000A      
                    1194   ; printf("\r\n%s", BugMessage) ;
00000DF2  2F2E FFF4 1195          move.l    -12(A6),-(A7)
00000DF6  4879 0000 1196          pea       @m68kde~1_28.L
00000DFA  4864      
00000DFC  4E94      1197          jsr       (A4)
00000DFE  504F      1198          addq.w    #8,A7
                    1199   ; printf("\r\n%s", CopyrightMessage) ;
00000E00  2F2E FFF8 1200          move.l    -8(A6),-(A7)
00000E04  4879 0000 1201          pea       @m68kde~1_29.L
00000E08  486A      
00000E0A  4E94      1202          jsr       (A4)
00000E0C  504F      1203          addq.w    #8,A7
                    1204   ; printf("\r\n%s", nameAndStudentNumber);
00000E0E  2F2E FFFC 1205          move.l    -4(A6),-(A7)
00000E12  4879 0000 1206          pea       @m68kde~1_30.L
00000E16  4870      
00000E18  4E94      1207          jsr       (A4)
00000E1A  504F      1208          addq.w    #8,A7
                    1209   ; menu();
00000E1C  4EB8 0B1A 1210          jsr       _menu
00000E20  4CDF 1C00 1211          movem.l   (A7)+,A2/A3/A4
00000E24  4E5E      1212          unlk      A6
00000E26  4E75      1213          rts
                    1214   ; }
                    1215   ; C:\COSMICIMPALASM68K\PROGRAMS\DEBUGMONITORCODE\GRAPHICS_TEST.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    1216   ; #include <string.h>
                    1217   ; #define PIXEL_BUFFER_VGA_BASEADDRESS   (0x01000000)
                    1218   ; #define VIDMEM_DIM1_W_BLANK_EDGES (256)
                    1219   ; #define VIDMEM_DIM1 (224)
                    1220   ; #define VIDMEM_DIM2 (32)
                    1221   ; #define VIDEOMEM_ADDR(x,y) ((volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x)))
                    1222   ; #define VIDMEM(x,y) (*VIDEOMEM_ADDR(x,y))
                    1223   ; #define WRITE_VIDMEM(x,y,CH) ((*(volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x))) = CH)
                    1224   ; #define LOCHAR 0x20
                    1225   ; #define HICHAR 0x5e
                    1226   ; char graphics_font8x8[HICHAR-LOCHAR+1][8];
                    1227   ; void graphics_test_main();
                    1228   ; /// GRAPHICS FUNCTIONS
                    1229   ; void graphics_test_clrscr() {
                    1230   _graphics_test_clrscr:
00000E28  48E7 3000 1231          movem.l   D2/D3,-(A7)
                    1232   ; int a;
                    1233   ; int b;
                    1234   ; for (a = 0; a < VIDMEM_DIM1; a++) {
00000E2C  4283      1235          clr.l     D3
                    1236   graphics_test_clrscr_1:
00000E2E  0C83 0000 1237          cmp.l     #224,D3
00000E32  00E0      
00000E34  6C00 0032 1238          bge       graphics_test_clrscr_3
                    1239   ; for (b = 0; b < VIDMEM_DIM2; b++) {
00000E38  4282      1240          clr.l     D2
                    1241   graphics_test_clrscr_4:
00000E3A  0C82 0000 1242          cmp.l     #32,D2
00000E3E  0020      
00000E40  6C22      1243          bge.s     graphics_test_clrscr_6
                    1244   ; WRITE_VIDMEM(a,b,0 /*0xff*/);	   
00000E42  203C 0100 1245          move.l    #16777216,D0
00000E46  0000      
00000E48  2F02      1246          move.l    D2,-(A7)
00000E4A  4878 0100 1247          pea       256
00000E4E  4EB9 0000 1248          jsr       LMUL
00000E52  3B7C      
00000E54  2217      1249          move.l    (A7),D1
00000E56  504F      1250          addq.w    #8,A7
00000E58  D283      1251          add.l     D3,D1
00000E5A  D081      1252          add.l     D1,D0
00000E5C  2040      1253          move.l    D0,A0
00000E5E  4210      1254          clr.b     (A0)
00000E60  5282      1255          addq.l    #1,D2
00000E62  60D6      1256          bra       graphics_test_clrscr_4
                    1257   graphics_test_clrscr_6:
00000E64  5283      1258          addq.l    #1,D3
00000E66  60C6      1259          bra       graphics_test_clrscr_1
                    1260   graphics_test_clrscr_3:
00000E68  4CDF 000C 1261          movem.l   (A7)+,D2/D3
00000E6C  4E75      1262          rts
                    1263   ; }
                    1264   ; }
                    1265   ; }
                    1266   ; void graphics_xor_pixel(unsigned char x, unsigned char y) {
                    1267   _graphics_xor_pixel:
00000E6E  4E56 FFFC 1268          link      A6,#-4
                    1269   ; unsigned char* dest;
                    1270   ; dest =  VIDEOMEM_ADDR(x,y>>3);
00000E72  203C 0100 1271          move.l    #16777216,D0
00000E76  0000      
00000E78  122E 000F 1272          move.b    15(A6),D1
00000E7C  E609      1273          lsr.b     #3,D1
00000E7E  C27C 00FF 1274          and.w     #255,D1
00000E82  E141      1275          asl.w     #8,D1
00000E84  48C1      1276          ext.l     D1
00000E86  2F00      1277          move.l    D0,-(A7)
00000E88  102E 000B 1278          move.b    11(A6),D0
00000E8C  C0BC 0000 1279          and.l     #255,D0
00000E90  00FF      
00000E92  D280      1280          add.l     D0,D1
00000E94  201F      1281          move.l    (A7)+,D0
00000E96  D081      1282          add.l     D1,D0
00000E98  2D40 FFFC 1283          move.l    D0,-4(A6)
                    1284   ; *dest = (*dest) ^ (0x1 << (y&7));
00000E9C  206E FFFC 1285          move.l    -4(A6),A0
00000EA0  7001      1286          moveq     #1,D0
00000EA2  122E 000F 1287          move.b    15(A6),D1
00000EA6  C23C 0007 1288          and.b     #7,D1
00000EAA  E328      1289          lsl.b     D1,D0
00000EAC  B110      1290          eor.b     D0,(A0)
00000EAE  4E5E      1291          unlk      A6
00000EB0  4E75      1292          rts
                    1293   ; }
                    1294   ; void graphics_draw_vline(unsigned char x, unsigned char y1, unsigned char y2) {
                    1295   _graphics_draw_vline:
00000EB2  4E56 FFFC 1296          link      A6,#-4
00000EB6  48E7 3E00 1297          movem.l   D2/D3/D4/D5/D6,-(A7)
00000EBA  1A2E 0013 1298          move.b    19(A6),D5
00000EBE  CABC 0000 1299          and.l     #255,D5
00000EC2  00FF      
                    1300   ; unsigned char yb1;
                    1301   ; unsigned char yb2;
                    1302   ; unsigned char val;
                    1303   ; unsigned char* dest;
                    1304   ; int nchars;
                    1305   ; yb1 = y1>>3;
00000EC4  102E 000F 1306          move.b    15(A6),D0
00000EC8  E608      1307          lsr.b     #3,D0
00000ECA  1C00      1308          move.b    D0,D6
                    1309   ; yb2 = y2>>3;
00000ECC  1005      1310          move.b    D5,D0
00000ECE  E608      1311          lsr.b     #3,D0
00000ED0  1D40 FFFF 1312          move.b    D0,-1(A6)
                    1313   ; nchars  = (((unsigned int) yb2) & 0xff) - (((unsigned int) yb1) & 0xff);
00000ED4  102E FFFF 1314          move.b    -1(A6),D0
00000ED8  C0BC 0000 1315          and.l     #255,D0
00000EDC  00FF      
00000EDE  C0BC 0000 1316          and.l     #255,D0
00000EE2  00FF      
00000EE4  1206      1317          move.b    D6,D1
00000EE6  C2BC 0000 1318          and.l     #255,D1
00000EEA  00FF      
00000EEC  C2BC 0000 1319          and.l     #255,D1
00000EF0  00FF      
00000EF2  9081      1320          sub.l     D1,D0
00000EF4  2800      1321          move.l    D0,D4
                    1322   ; dest = VIDEOMEM_ADDR(x,yb1);
00000EF6  203C 0100 1323          move.l    #16777216,D0
00000EFA  0000      
00000EFC  1206      1324          move.b    D6,D1
00000EFE  C27C 00FF 1325          and.w     #255,D1
00000F02  E141      1326          asl.w     #8,D1
00000F04  48C1      1327          ext.l     D1
00000F06  2F00      1328          move.l    D0,-(A7)
00000F08  102E 000B 1329          move.b    11(A6),D0
00000F0C  C0BC 0000 1330          and.l     #255,D0
00000F10  00FF      
00000F12  D280      1331          add.l     D0,D1
00000F14  201F      1332          move.l    (A7)+,D0
00000F16  D081      1333          add.l     D1,D0
00000F18  2600      1334          move.l    D0,D3
                    1335   ; val = 0xff << (y1&7);
00000F1A  303C 00FF 1336          move.w    #255,D0
00000F1E  122E 000F 1337          move.b    15(A6),D1
00000F22  C23C 0007 1338          and.b     #7,D1
00000F26  C27C 00FF 1339          and.w     #255,D1
00000F2A  E360      1340          asl.w     D1,D0
00000F2C  1400      1341          move.b    D0,D2
                    1342   ; *dest ^= val;
00000F2E  2043      1343          move.l    D3,A0
00000F30  B510      1344          eor.b     D2,(A0)
                    1345   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;
00000F32  0683 0000 1346          add.l     #256,D3
00000F36  0100      
                    1347   ; if (nchars > 0) {
00000F38  0C84 0000 1348          cmp.l     #0,D4
00000F3C  0000      
00000F3E  6F00 0036 1349          ble       graphics_draw_vline_1
                    1350   ; while (--nchars > 0) {
                    1351   graphics_draw_vline_3:
00000F42  5384      1352          subq.l    #1,D4
00000F44  0C84 0000 1353          cmp.l     #0,D4
00000F48  0000      
00000F4A  6F10      1354          ble.s     graphics_draw_vline_5
                    1355   ; val =  0xff;
00000F4C  143C 00FF 1356          move.b    #255,D2
                    1357   ; *dest ^= val;
00000F50  2043      1358          move.l    D3,A0
00000F52  B510      1359          eor.b     D2,(A0)
                    1360   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;	  
00000F54  0683 0000 1361          add.l     #256,D3
00000F58  0100      
00000F5A  60E6      1362          bra       graphics_draw_vline_3
                    1363   graphics_draw_vline_5:
                    1364   ; }
                    1365   ; val = (0xff >> (~y2&7));
00000F5C  303C 00FF 1366          move.w    #255,D0
00000F60  1205      1367          move.b    D5,D1
00000F62  4601      1368          not.b     D1
00000F64  C23C 0007 1369          and.b     #7,D1
00000F68  C27C 00FF 1370          and.w     #255,D1
00000F6C  E260      1371          asr.w     D1,D0
00000F6E  1400      1372          move.b    D0,D2
                    1373   ; *dest ^= val;
00000F70  2043      1374          move.l    D3,A0
00000F72  B510      1375          eor.b     D2,(A0)
00000F74  601E      1376          bra.s     graphics_draw_vline_2
                    1377   graphics_draw_vline_1:
                    1378   ; } else {
                    1379   ; dest = dest-VIDMEM_DIM1_W_BLANK_EDGES; 
00000F76  0483 0000 1380          sub.l     #256,D3
00000F7A  0100      
                    1381   ; val = (0xff << ((y2+1)&7));
00000F7C  303C 00FF 1382          move.w    #255,D0
00000F80  1205      1383          move.b    D5,D1
00000F82  5201      1384          addq.b    #1,D1
00000F84  C23C 0007 1385          and.b     #7,D1
00000F88  C27C 00FF 1386          and.w     #255,D1
00000F8C  E360      1387          asl.w     D1,D0
00000F8E  1400      1388          move.b    D0,D2
                    1389   ; *dest ^= val;
00000F90  2043      1390          move.l    D3,A0
00000F92  B510      1391          eor.b     D2,(A0)
                    1392   graphics_draw_vline_2:
00000F94  4CDF 007C 1393          movem.l   (A7)+,D2/D3/D4/D5/D6
00000F98  4E5E      1394          unlk      A6
00000F9A  4E75      1395          rts
                    1396   ; }
                    1397   ; }
                    1398   ; void graphics_draw_char(unsigned char ch, unsigned char x, unsigned char y) {
                    1399   _graphics_draw_char:
00000F9C  4E56 0000 1400          link      A6,#0
00000FA0  48E7 3800 1401          movem.l   D2/D3/D4,-(A7)
                    1402   ; unsigned char i;
                    1403   ; unsigned char* src;
                    1404   ; unsigned char* dest;
                    1405   ; src  = &graphics_font8x8[(ch-LOCHAR)][0];
00000FA4  41F9 0803 1406          lea       _graphics_font8x8.L,A0
00000FA8  022A      
00000FAA  102E 000B 1407          move.b    11(A6),D0
00000FAE  C0BC 0000 1408          and.l     #255,D0
00000FB2  00FF      
00000FB4  0480 0000 1409          sub.l     #32,D0
00000FB8  0020      
00000FBA  E788      1410          lsl.l     #3,D0
00000FBC  D1C0      1411          add.l     D0,A0
00000FBE  2808      1412          move.l    A0,D4
                    1413   ; dest = VIDEOMEM_ADDR(x*8,y);
00000FC0  203C 0100 1414          move.l    #16777216,D0
00000FC4  0000      
00000FC6  122E 0013 1415          move.b    19(A6),D1
00000FCA  C27C 00FF 1416          and.w     #255,D1
00000FCE  E141      1417          asl.w     #8,D1
00000FD0  48C1      1418          ext.l     D1
00000FD2  2F00      1419          move.l    D0,-(A7)
00000FD4  102E 000F 1420          move.b    15(A6),D0
00000FD8  C07C 00FF 1421          and.w     #255,D0
00000FDC  C0FC 0008 1422          mulu.w    #8,D0
00000FE0  C0BC 0000 1423          and.l     #255,D0
00000FE4  00FF      
00000FE6  D280      1424          add.l     D0,D1
00000FE8  201F      1425          move.l    (A7)+,D0
00000FEA  D081      1426          add.l     D1,D0
00000FEC  2600      1427          move.l    D0,D3
                    1428   ; for (i=0; i<8; i++) {
00000FEE  4202      1429          clr.b     D2
                    1430   graphics_draw_char_1:
00000FF0  0C02 0008 1431          cmp.b     #8,D2
00000FF4  640E      1432          bhs.s     graphics_draw_char_3
                    1433   ; *dest = *src;
00000FF6  2044      1434          move.l    D4,A0
00000FF8  2243      1435          move.l    D3,A1
00000FFA  1290      1436          move.b    (A0),(A1)
                    1437   ; dest += 1;//32;
00000FFC  5283      1438          addq.l    #1,D3
                    1439   ; src += 1;
00000FFE  5284      1440          addq.l    #1,D4
00001000  5202      1441          addq.b    #1,D2
00001002  60EC      1442          bra       graphics_draw_char_1
                    1443   graphics_draw_char_3:
00001004  4CDF 001C 1444          movem.l   (A7)+,D2/D3/D4
00001008  4E5E      1445          unlk      A6
0000100A  4E75      1446          rts
                    1447   ; }
                    1448   ; }
                    1449   ; void graphics_draw_string(const char* str, unsigned char x, unsigned char y) {
                    1450   _graphics_draw_string:
0000100C  4E56 0000 1451          link      A6,#0
00001010  2F02      1452          move.l    D2,-(A7)
                    1453   ; do {
                    1454   graphics_draw_string_1:
                    1455   ; unsigned char ch;
                    1456   ; ch = *str++;
00001012  206E 0008 1457          move.l    8(A6),A0
00001016  52AE 0008 1458          addq.l    #1,8(A6)
0000101A  1410      1459          move.b    (A0),D2
                    1460   ; if (!ch) break;
0000101C  4A02      1461          tst.b     D2
0000101E  6602      1462          bne.s     graphics_draw_string_3
00001020  602E      1463          bra.s     graphics_draw_string_2
                    1464   graphics_draw_string_3:
                    1465   ; graphics_draw_char(ch, x, y);
00001022  122E 0013 1466          move.b    19(A6),D1
00001026  C2BC 0000 1467          and.l     #255,D1
0000102A  00FF      
0000102C  2F01      1468          move.l    D1,-(A7)
0000102E  122E 000F 1469          move.b    15(A6),D1
00001032  C2BC 0000 1470          and.l     #255,D1
00001036  00FF      
00001038  2F01      1471          move.l    D1,-(A7)
0000103A  C4BC 0000 1472          and.l     #255,D2
0000103E  00FF      
00001040  2F02      1473          move.l    D2,-(A7)
00001042  4EB8 0F9C 1474          jsr       _graphics_draw_char
00001046  DEFC 000C 1475          add.w     #12,A7
                    1476   ; x++;
0000104A  522E 000F 1477          addq.b    #1,15(A6)
0000104E  60C2      1478          bra       graphics_draw_string_1
                    1479   graphics_draw_string_2:
00001050  241F      1480          move.l    (A7)+,D2
00001052  4E5E      1481          unlk      A6
00001054  4E75      1482          rts
                    1483   ; } while (1);
                    1484   ; }
                    1485   ; void draw_font() {
                    1486   _draw_font:
00001056  2F02      1487          move.l    D2,-(A7)
                    1488   ; unsigned char i;
                    1489   ; i=LOCHAR;
00001058  7420      1490          moveq     #32,D2
                    1491   ; do {
                    1492   draw_font_1:
                    1493   ; graphics_draw_char(i, i&15, 31-(i>>4));
0000105A  721F      1494          moveq     #31,D1
0000105C  2F00      1495          move.l    D0,-(A7)
0000105E  1002      1496          move.b    D2,D0
00001060  E808      1497          lsr.b     #4,D0
00001062  9200      1498          sub.b     D0,D1
00001064  201F      1499          move.l    (A7)+,D0
00001066  C2BC 0000 1500          and.l     #255,D1
0000106A  00FF      
0000106C  2F01      1501          move.l    D1,-(A7)
0000106E  1202      1502          move.b    D2,D1
00001070  C23C 000F 1503          and.b     #15,D1
00001074  C2BC 0000 1504          and.l     #255,D1
00001078  00FF      
0000107A  2F01      1505          move.l    D1,-(A7)
0000107C  C4BC 0000 1506          and.l     #255,D2
00001080  00FF      
00001082  2F02      1507          move.l    D2,-(A7)
00001084  4EB8 0F9C 1508          jsr       _graphics_draw_char
00001088  DEFC 000C 1509          add.w     #12,A7
                    1510   ; graphics_draw_vline(i, i, i*2);
0000108C  1202      1511          move.b    D2,D1
0000108E  C27C 00FF 1512          and.w     #255,D1
00001092  C2FC 0002 1513          mulu.w    #2,D1
00001096  C2BC 0000 1514          and.l     #255,D1
0000109A  00FF      
0000109C  2F01      1515          move.l    D1,-(A7)
0000109E  C4BC 0000 1516          and.l     #255,D2
000010A2  00FF      
000010A4  2F02      1517          move.l    D2,-(A7)
000010A6  C4BC 0000 1518          and.l     #255,D2
000010AA  00FF      
000010AC  2F02      1519          move.l    D2,-(A7)
000010AE  4EB8 0EB2 1520          jsr       _graphics_draw_vline
000010B2  DEFC 000C 1521          add.w     #12,A7
                    1522   ; graphics_xor_pixel(i*15, i);
000010B6  C4BC 0000 1523          and.l     #255,D2
000010BA  00FF      
000010BC  2F02      1524          move.l    D2,-(A7)
000010BE  1202      1525          move.b    D2,D1
000010C0  C27C 00FF 1526          and.w     #255,D1
000010C4  C2FC 000F 1527          mulu.w    #15,D1
000010C8  C2BC 0000 1528          and.l     #255,D1
000010CC  00FF      
000010CE  2F01      1529          move.l    D1,-(A7)
000010D0  4EB8 0E6E 1530          jsr       _graphics_xor_pixel
000010D4  504F      1531          addq.w    #8,A7
000010D6  5202      1532          addq.b    #1,D2
000010D8  0C02 005E 1533          cmp.b     #94,D2
000010DC  6600 FF7C 1534          bne       draw_font_1
000010E0  241F      1535          move.l    (A7)+,D2
000010E2  4E75      1536          rts
                    1537   ; } while (++i != HICHAR);
                    1538   ; }
                    1539   ; void initialize_font() {
                    1540   _initialize_font:
000010E4  2F0A      1541          move.l    A2,-(A7)
000010E6  45F9 0803 1542          lea       _graphics_font8x8.L,A2
000010EA  022A      
                    1543   ; graphics_font8x8[0 ][0]=0x00;graphics_font8x8[0 ][1]=0x00;graphics_font8x8[0 ][2]=0x00;graphics_font8x8[0 ][3]=0x00;graphics_font8x8[0 ][4]=0x00;graphics_font8x8[0 ][5]=0x00;graphics_font8x8[0 ][6]=0x00;graphics_font8x8[0 ][7]=0x00;
000010EC  4212      1544          clr.b     (A2)
000010EE  422A 0001 1545          clr.b     1(A2)
000010F2  422A 0002 1546          clr.b     2(A2)
000010F6  422A 0003 1547          clr.b     3(A2)
000010FA  422A 0004 1548          clr.b     4(A2)
000010FE  422A 0005 1549          clr.b     5(A2)
00001102  422A 0006 1550          clr.b     6(A2)
00001106  422A 0007 1551          clr.b     7(A2)
                    1552   ; graphics_font8x8[1 ][0]=0x00;graphics_font8x8[1 ][1]=0x00;graphics_font8x8[1 ][2]=0x00;graphics_font8x8[1 ][3]=0x79;graphics_font8x8[1 ][4]=0x79;graphics_font8x8[1 ][5]=0x00;graphics_font8x8[1 ][6]=0x00;graphics_font8x8[1 ][7]=0x00;
0000110A  422A 0008 1553          clr.b     8(A2)
0000110E  422A 0009 1554          clr.b     8+1(A2)
00001112  422A 000A 1555          clr.b     8+2(A2)
00001116  157C 0079 1556          move.b    #121,8+3(A2)
0000111A  000B      
0000111C  157C 0079 1557          move.b    #121,8+4(A2)
00001120  000C      
00001122  422A 000D 1558          clr.b     8+5(A2)
00001126  422A 000E 1559          clr.b     8+6(A2)
0000112A  422A 000F 1560          clr.b     8+7(A2)
                    1561   ; graphics_font8x8[2 ][0]=0x00;graphics_font8x8[2 ][1]=0x70;graphics_font8x8[2 ][2]=0x70;graphics_font8x8[2 ][3]=0x00;graphics_font8x8[2 ][4]=0x00;graphics_font8x8[2 ][5]=0x70;graphics_font8x8[2 ][6]=0x70;graphics_font8x8[2 ][7]=0x00; 
0000112E  422A 0010 1562          clr.b     16(A2)
00001132  157C 0070 1563          move.b    #112,16+1(A2)
00001136  0011      
00001138  157C 0070 1564          move.b    #112,16+2(A2)
0000113C  0012      
0000113E  422A 0013 1565          clr.b     16+3(A2)
00001142  422A 0014 1566          clr.b     16+4(A2)
00001146  157C 0070 1567          move.b    #112,16+5(A2)
0000114A  0015      
0000114C  157C 0070 1568          move.b    #112,16+6(A2)
00001150  0016      
00001152  422A 0017 1569          clr.b     16+7(A2)
                    1570   ; graphics_font8x8[3 ][0]=0x14;graphics_font8x8[3 ][1]=0x7f;graphics_font8x8[3 ][2]=0x7f;graphics_font8x8[3 ][3]=0x14;graphics_font8x8[3 ][4]=0x14;graphics_font8x8[3 ][5]=0x7f;graphics_font8x8[3 ][6]=0x7f;graphics_font8x8[3 ][7]=0x14; 
00001156  157C 0014 1571          move.b    #20,24(A2)
0000115A  0018      
0000115C  157C 007F 1572          move.b    #127,24+1(A2)
00001160  0019      
00001162  157C 007F 1573          move.b    #127,24+2(A2)
00001166  001A      
00001168  157C 0014 1574          move.b    #20,24+3(A2)
0000116C  001B      
0000116E  157C 0014 1575          move.b    #20,24+4(A2)
00001172  001C      
00001174  157C 007F 1576          move.b    #127,24+5(A2)
00001178  001D      
0000117A  157C 007F 1577          move.b    #127,24+6(A2)
0000117E  001E      
00001180  157C 0014 1578          move.b    #20,24+7(A2)
00001184  001F      
                    1579   ; graphics_font8x8[4 ][0]=0x00;graphics_font8x8[4 ][1]=0x12;graphics_font8x8[4 ][2]=0x3a;graphics_font8x8[4 ][3]=0x6b;graphics_font8x8[4 ][4]=0x6b;graphics_font8x8[4 ][5]=0x2e;graphics_font8x8[4 ][6]=0x24;graphics_font8x8[4 ][7]=0x00;
00001186  422A 0020 1580          clr.b     32(A2)
0000118A  157C 0012 1581          move.b    #18,32+1(A2)
0000118E  0021      
00001190  157C 003A 1582          move.b    #58,32+2(A2)
00001194  0022      
00001196  157C 006B 1583          move.b    #107,32+3(A2)
0000119A  0023      
0000119C  157C 006B 1584          move.b    #107,32+4(A2)
000011A0  0024      
000011A2  157C 002E 1585          move.b    #46,32+5(A2)
000011A6  0025      
000011A8  157C 0024 1586          move.b    #36,32+6(A2)
000011AC  0026      
000011AE  422A 0027 1587          clr.b     32+7(A2)
                    1588   ; graphics_font8x8[5 ][0]=0x00;graphics_font8x8[5 ][1]=0x63;graphics_font8x8[5 ][2]=0x66;graphics_font8x8[5 ][3]=0x0c;graphics_font8x8[5 ][4]=0x18;graphics_font8x8[5 ][5]=0x33;graphics_font8x8[5 ][6]=0x63;graphics_font8x8[5 ][7]=0x00; 
000011B2  422A 0028 1589          clr.b     40(A2)
000011B6  157C 0063 1590          move.b    #99,40+1(A2)
000011BA  0029      
000011BC  157C 0066 1591          move.b    #102,40+2(A2)
000011C0  002A      
000011C2  157C 000C 1592          move.b    #12,40+3(A2)
000011C6  002B      
000011C8  157C 0018 1593          move.b    #24,40+4(A2)
000011CC  002C      
000011CE  157C 0033 1594          move.b    #51,40+5(A2)
000011D2  002D      
000011D4  157C 0063 1595          move.b    #99,40+6(A2)
000011D8  002E      
000011DA  422A 002F 1596          clr.b     40+7(A2)
                    1597   ; graphics_font8x8[6 ][0]=0x00;graphics_font8x8[6 ][1]=0x26;graphics_font8x8[6 ][2]=0x7f;graphics_font8x8[6 ][3]=0x59;graphics_font8x8[6 ][4]=0x59;graphics_font8x8[6 ][5]=0x77;graphics_font8x8[6 ][6]=0x27;graphics_font8x8[6 ][7]=0x05; 
000011DE  422A 0030 1598          clr.b     48(A2)
000011E2  157C 0026 1599          move.b    #38,48+1(A2)
000011E6  0031      
000011E8  157C 007F 1600          move.b    #127,48+2(A2)
000011EC  0032      
000011EE  157C 0059 1601          move.b    #89,48+3(A2)
000011F2  0033      
000011F4  157C 0059 1602          move.b    #89,48+4(A2)
000011F8  0034      
000011FA  157C 0077 1603          move.b    #119,48+5(A2)
000011FE  0035      
00001200  157C 0027 1604          move.b    #39,48+6(A2)
00001204  0036      
00001206  157C 0005 1605          move.b    #5,48+7(A2)
0000120A  0037      
                    1606   ; graphics_font8x8[7 ][0]=0x00;graphics_font8x8[7 ][1]=0x00;graphics_font8x8[7 ][2]=0x00;graphics_font8x8[7 ][3]=0x10;graphics_font8x8[7 ][4]=0x30;graphics_font8x8[7 ][5]=0x60;graphics_font8x8[7 ][6]=0x40;graphics_font8x8[7 ][7]=0x00; 
0000120C  422A 0038 1607          clr.b     56(A2)
00001210  422A 0039 1608          clr.b     56+1(A2)
00001214  422A 003A 1609          clr.b     56+2(A2)
00001218  157C 0010 1610          move.b    #16,56+3(A2)
0000121C  003B      
0000121E  157C 0030 1611          move.b    #48,56+4(A2)
00001222  003C      
00001224  157C 0060 1612          move.b    #96,56+5(A2)
00001228  003D      
0000122A  157C 0040 1613          move.b    #64,56+6(A2)
0000122E  003E      
00001230  422A 003F 1614          clr.b     56+7(A2)
                    1615   ; graphics_font8x8[8 ][0]=0x00;graphics_font8x8[8 ][1]=0x00;graphics_font8x8[8 ][2]=0x1c;graphics_font8x8[8 ][3]=0x3e;graphics_font8x8[8 ][4]=0x63;graphics_font8x8[8 ][5]=0x41;graphics_font8x8[8 ][6]=0x00;graphics_font8x8[8 ][7]=0x00; 
00001234  422A 0040 1616          clr.b     64(A2)
00001238  422A 0041 1617          clr.b     64+1(A2)
0000123C  157C 001C 1618          move.b    #28,64+2(A2)
00001240  0042      
00001242  157C 003E 1619          move.b    #62,64+3(A2)
00001246  0043      
00001248  157C 0063 1620          move.b    #99,64+4(A2)
0000124C  0044      
0000124E  157C 0041 1621          move.b    #65,64+5(A2)
00001252  0045      
00001254  422A 0046 1622          clr.b     64+6(A2)
00001258  422A 0047 1623          clr.b     64+7(A2)
                    1624   ; graphics_font8x8[9 ][0]=0x00;graphics_font8x8[9 ][1]=0x00;graphics_font8x8[9 ][2]=0x41;graphics_font8x8[9 ][3]=0x63;graphics_font8x8[9 ][4]=0x3e;graphics_font8x8[9 ][5]=0x1c;graphics_font8x8[9 ][6]=0x00;graphics_font8x8[9 ][7]=0x00; 
0000125C  422A 0048 1625          clr.b     72(A2)
00001260  422A 0049 1626          clr.b     72+1(A2)
00001264  157C 0041 1627          move.b    #65,72+2(A2)
00001268  004A      
0000126A  157C 0063 1628          move.b    #99,72+3(A2)
0000126E  004B      
00001270  157C 003E 1629          move.b    #62,72+4(A2)
00001274  004C      
00001276  157C 001C 1630          move.b    #28,72+5(A2)
0000127A  004D      
0000127C  422A 004E 1631          clr.b     72+6(A2)
00001280  422A 004F 1632          clr.b     72+7(A2)
                    1633   ; graphics_font8x8[10][0]=0x08;graphics_font8x8[10][1]=0x2a;graphics_font8x8[10][2]=0x3e;graphics_font8x8[10][3]=0x1c;graphics_font8x8[10][4]=0x1c;graphics_font8x8[10][5]=0x3e;graphics_font8x8[10][6]=0x2a;graphics_font8x8[10][7]=0x08; 
00001284  157C 0008 1634          move.b    #8,80(A2)
00001288  0050      
0000128A  157C 002A 1635          move.b    #42,80+1(A2)
0000128E  0051      
00001290  157C 003E 1636          move.b    #62,80+2(A2)
00001294  0052      
00001296  157C 001C 1637          move.b    #28,80+3(A2)
0000129A  0053      
0000129C  157C 001C 1638          move.b    #28,80+4(A2)
000012A0  0054      
000012A2  157C 003E 1639          move.b    #62,80+5(A2)
000012A6  0055      
000012A8  157C 002A 1640          move.b    #42,80+6(A2)
000012AC  0056      
000012AE  157C 0008 1641          move.b    #8,80+7(A2)
000012B2  0057      
                    1642   ; graphics_font8x8[11][0]=0x00;graphics_font8x8[11][1]=0x08;graphics_font8x8[11][2]=0x08;graphics_font8x8[11][3]=0x3e;graphics_font8x8[11][4]=0x3e;graphics_font8x8[11][5]=0x08;graphics_font8x8[11][6]=0x08;graphics_font8x8[11][7]=0x00; 
000012B4  422A 0058 1643          clr.b     88(A2)
000012B8  157C 0008 1644          move.b    #8,88+1(A2)
000012BC  0059      
000012BE  157C 0008 1645          move.b    #8,88+2(A2)
000012C2  005A      
000012C4  157C 003E 1646          move.b    #62,88+3(A2)
000012C8  005B      
000012CA  157C 003E 1647          move.b    #62,88+4(A2)
000012CE  005C      
000012D0  157C 0008 1648          move.b    #8,88+5(A2)
000012D4  005D      
000012D6  157C 0008 1649          move.b    #8,88+6(A2)
000012DA  005E      
000012DC  422A 005F 1650          clr.b     88+7(A2)
                    1651   ; graphics_font8x8[12][0]=0x00;graphics_font8x8[12][1]=0x00;graphics_font8x8[12][2]=0x00;graphics_font8x8[12][3]=0x03;graphics_font8x8[12][4]=0x03;graphics_font8x8[12][5]=0x00;graphics_font8x8[12][6]=0x00;graphics_font8x8[12][7]=0x00; 
000012E0  422A 0060 1652          clr.b     96(A2)
000012E4  422A 0061 1653          clr.b     96+1(A2)
000012E8  422A 0062 1654          clr.b     96+2(A2)
000012EC  157C 0003 1655          move.b    #3,96+3(A2)
000012F0  0063      
000012F2  157C 0003 1656          move.b    #3,96+4(A2)
000012F6  0064      
000012F8  422A 0065 1657          clr.b     96+5(A2)
000012FC  422A 0066 1658          clr.b     96+6(A2)
00001300  422A 0067 1659          clr.b     96+7(A2)
                    1660   ; graphics_font8x8[13][0]=0x00;graphics_font8x8[13][1]=0x08;graphics_font8x8[13][2]=0x08;graphics_font8x8[13][3]=0x08;graphics_font8x8[13][4]=0x08;graphics_font8x8[13][5]=0x08;graphics_font8x8[13][6]=0x08;graphics_font8x8[13][7]=0x00; 
00001304  422A 0068 1661          clr.b     104(A2)
00001308  157C 0008 1662          move.b    #8,104+1(A2)
0000130C  0069      
0000130E  157C 0008 1663          move.b    #8,104+2(A2)
00001312  006A      
00001314  157C 0008 1664          move.b    #8,104+3(A2)
00001318  006B      
0000131A  157C 0008 1665          move.b    #8,104+4(A2)
0000131E  006C      
00001320  157C 0008 1666          move.b    #8,104+5(A2)
00001324  006D      
00001326  157C 0008 1667          move.b    #8,104+6(A2)
0000132A  006E      
0000132C  422A 006F 1668          clr.b     104+7(A2)
                    1669   ; graphics_font8x8[14][0]=0x00;graphics_font8x8[14][1]=0x00;graphics_font8x8[14][2]=0x00;graphics_font8x8[14][3]=0x03;graphics_font8x8[14][4]=0x03;graphics_font8x8[14][5]=0x00;graphics_font8x8[14][6]=0x00;graphics_font8x8[14][7]=0x00; 
00001330  422A 0070 1670          clr.b     112(A2)
00001334  422A 0071 1671          clr.b     112+1(A2)
00001338  422A 0072 1672          clr.b     112+2(A2)
0000133C  157C 0003 1673          move.b    #3,112+3(A2)
00001340  0073      
00001342  157C 0003 1674          move.b    #3,112+4(A2)
00001346  0074      
00001348  422A 0075 1675          clr.b     112+5(A2)
0000134C  422A 0076 1676          clr.b     112+6(A2)
00001350  422A 0077 1677          clr.b     112+7(A2)
                    1678   ; graphics_font8x8[15][0]=0x00;graphics_font8x8[15][1]=0x01;graphics_font8x8[15][2]=0x03;graphics_font8x8[15][3]=0x06;graphics_font8x8[15][4]=0x0c;graphics_font8x8[15][5]=0x18;graphics_font8x8[15][6]=0x30;graphics_font8x8[15][7]=0x20; 
00001354  422A 0078 1679          clr.b     120(A2)
00001358  157C 0001 1680          move.b    #1,120+1(A2)
0000135C  0079      
0000135E  157C 0003 1681          move.b    #3,120+2(A2)
00001362  007A      
00001364  157C 0006 1682          move.b    #6,120+3(A2)
00001368  007B      
0000136A  157C 000C 1683          move.b    #12,120+4(A2)
0000136E  007C      
00001370  157C 0018 1684          move.b    #24,120+5(A2)
00001374  007D      
00001376  157C 0030 1685          move.b    #48,120+6(A2)
0000137A  007E      
0000137C  157C 0020 1686          move.b    #32,120+7(A2)
00001380  007F      
                    1687   ; graphics_font8x8[16][0]=0x00;graphics_font8x8[16][1]=0x3e;graphics_font8x8[16][2]=0x7f;graphics_font8x8[16][3]=0x49;graphics_font8x8[16][4]=0x51;graphics_font8x8[16][5]=0x7f;graphics_font8x8[16][6]=0x3e;graphics_font8x8[16][7]=0x00; 
00001382  422A 0080 1688          clr.b     128(A2)
00001386  157C 003E 1689          move.b    #62,128+1(A2)
0000138A  0081      
0000138C  157C 007F 1690          move.b    #127,128+2(A2)
00001390  0082      
00001392  157C 0049 1691          move.b    #73,128+3(A2)
00001396  0083      
00001398  157C 0051 1692          move.b    #81,128+4(A2)
0000139C  0084      
0000139E  157C 007F 1693          move.b    #127,128+5(A2)
000013A2  0085      
000013A4  157C 003E 1694          move.b    #62,128+6(A2)
000013A8  0086      
000013AA  422A 0087 1695          clr.b     128+7(A2)
                    1696   ; graphics_font8x8[17][0]=0x00;graphics_font8x8[17][1]=0x01;graphics_font8x8[17][2]=0x11;graphics_font8x8[17][3]=0x7f;graphics_font8x8[17][4]=0x7f;graphics_font8x8[17][5]=0x01;graphics_font8x8[17][6]=0x01;graphics_font8x8[17][7]=0x00; 
000013AE  422A 0088 1697          clr.b     136(A2)
000013B2  157C 0001 1698          move.b    #1,136+1(A2)
000013B6  0089      
000013B8  157C 0011 1699          move.b    #17,136+2(A2)
000013BC  008A      
000013BE  157C 007F 1700          move.b    #127,136+3(A2)
000013C2  008B      
000013C4  157C 007F 1701          move.b    #127,136+4(A2)
000013C8  008C      
000013CA  157C 0001 1702          move.b    #1,136+5(A2)
000013CE  008D      
000013D0  157C 0001 1703          move.b    #1,136+6(A2)
000013D4  008E      
000013D6  422A 008F 1704          clr.b     136+7(A2)
                    1705   ; graphics_font8x8[18][0]=0x00;graphics_font8x8[18][1]=0x23;graphics_font8x8[18][2]=0x67;graphics_font8x8[18][3]=0x45;graphics_font8x8[18][4]=0x49;graphics_font8x8[18][5]=0x79;graphics_font8x8[18][6]=0x31;graphics_font8x8[18][7]=0x00; 
000013DA  422A 0090 1706          clr.b     144(A2)
000013DE  157C 0023 1707          move.b    #35,144+1(A2)
000013E2  0091      
000013E4  157C 0067 1708          move.b    #103,144+2(A2)
000013E8  0092      
000013EA  157C 0045 1709          move.b    #69,144+3(A2)
000013EE  0093      
000013F0  157C 0049 1710          move.b    #73,144+4(A2)
000013F4  0094      
000013F6  157C 0079 1711          move.b    #121,144+5(A2)
000013FA  0095      
000013FC  157C 0031 1712          move.b    #49,144+6(A2)
00001400  0096      
00001402  422A 0097 1713          clr.b     144+7(A2)
                    1714   ; graphics_font8x8[19][0]=0x00;graphics_font8x8[19][1]=0x22;graphics_font8x8[19][2]=0x63;graphics_font8x8[19][3]=0x49;graphics_font8x8[19][4]=0x49;graphics_font8x8[19][5]=0x7f;graphics_font8x8[19][6]=0x36;graphics_font8x8[19][7]=0x00; 
00001406  422A 0098 1715          clr.b     152(A2)
0000140A  157C 0022 1716          move.b    #34,152+1(A2)
0000140E  0099      
00001410  157C 0063 1717          move.b    #99,152+2(A2)
00001414  009A      
00001416  157C 0049 1718          move.b    #73,152+3(A2)
0000141A  009B      
0000141C  157C 0049 1719          move.b    #73,152+4(A2)
00001420  009C      
00001422  157C 007F 1720          move.b    #127,152+5(A2)
00001426  009D      
00001428  157C 0036 1721          move.b    #54,152+6(A2)
0000142C  009E      
0000142E  422A 009F 1722          clr.b     152+7(A2)
                    1723   ; graphics_font8x8[20][0]=0x00;graphics_font8x8[20][1]=0x0c;graphics_font8x8[20][2]=0x0c;graphics_font8x8[20][3]=0x14;graphics_font8x8[20][4]=0x34;graphics_font8x8[20][5]=0x7f;graphics_font8x8[20][6]=0x7f;graphics_font8x8[20][7]=0x04; 
00001432  422A 00A0 1724          clr.b     160(A2)
00001436  157C 000C 1725          move.b    #12,160+1(A2)
0000143A  00A1      
0000143C  157C 000C 1726          move.b    #12,160+2(A2)
00001440  00A2      
00001442  157C 0014 1727          move.b    #20,160+3(A2)
00001446  00A3      
00001448  157C 0034 1728          move.b    #52,160+4(A2)
0000144C  00A4      
0000144E  157C 007F 1729          move.b    #127,160+5(A2)
00001452  00A5      
00001454  157C 007F 1730          move.b    #127,160+6(A2)
00001458  00A6      
0000145A  157C 0004 1731          move.b    #4,160+7(A2)
0000145E  00A7      
                    1732   ; graphics_font8x8[21][0]=0x00;graphics_font8x8[21][1]=0x72;graphics_font8x8[21][2]=0x73;graphics_font8x8[21][3]=0x51;graphics_font8x8[21][4]=0x51;graphics_font8x8[21][5]=0x5f;graphics_font8x8[21][6]=0x4e;graphics_font8x8[21][7]=0x00; 
00001460  422A 00A8 1733          clr.b     168(A2)
00001464  157C 0072 1734          move.b    #114,168+1(A2)
00001468  00A9      
0000146A  157C 0073 1735          move.b    #115,168+2(A2)
0000146E  00AA      
00001470  157C 0051 1736          move.b    #81,168+3(A2)
00001474  00AB      
00001476  157C 0051 1737          move.b    #81,168+4(A2)
0000147A  00AC      
0000147C  157C 005F 1738          move.b    #95,168+5(A2)
00001480  00AD      
00001482  157C 004E 1739          move.b    #78,168+6(A2)
00001486  00AE      
00001488  422A 00AF 1740          clr.b     168+7(A2)
                    1741   ; graphics_font8x8[22][0]=0x00;graphics_font8x8[22][1]=0x3e;graphics_font8x8[22][2]=0x7f;graphics_font8x8[22][3]=0x49;graphics_font8x8[22][4]=0x49;graphics_font8x8[22][5]=0x6f;graphics_font8x8[22][6]=0x26;graphics_font8x8[22][7]=0x00; 
0000148C  422A 00B0 1742          clr.b     176(A2)
00001490  157C 003E 1743          move.b    #62,176+1(A2)
00001494  00B1      
00001496  157C 007F 1744          move.b    #127,176+2(A2)
0000149A  00B2      
0000149C  157C 0049 1745          move.b    #73,176+3(A2)
000014A0  00B3      
000014A2  157C 0049 1746          move.b    #73,176+4(A2)
000014A6  00B4      
000014A8  157C 006F 1747          move.b    #111,176+5(A2)
000014AC  00B5      
000014AE  157C 0026 1748          move.b    #38,176+6(A2)
000014B2  00B6      
000014B4  422A 00B7 1749          clr.b     176+7(A2)
                    1750   ; graphics_font8x8[23][0]=0x00;graphics_font8x8[23][1]=0x60;graphics_font8x8[23][2]=0x60;graphics_font8x8[23][3]=0x4f;graphics_font8x8[23][4]=0x5f;graphics_font8x8[23][5]=0x70;graphics_font8x8[23][6]=0x60;graphics_font8x8[23][7]=0x00; 
000014B8  422A 00B8 1751          clr.b     184(A2)
000014BC  157C 0060 1752          move.b    #96,184+1(A2)
000014C0  00B9      
000014C2  157C 0060 1753          move.b    #96,184+2(A2)
000014C6  00BA      
000014C8  157C 004F 1754          move.b    #79,184+3(A2)
000014CC  00BB      
000014CE  157C 005F 1755          move.b    #95,184+4(A2)
000014D2  00BC      
000014D4  157C 0070 1756          move.b    #112,184+5(A2)
000014D8  00BD      
000014DA  157C 0060 1757          move.b    #96,184+6(A2)
000014DE  00BE      
000014E0  422A 00BF 1758          clr.b     184+7(A2)
                    1759   ; graphics_font8x8[24][0]=0x00;graphics_font8x8[24][1]=0x36;graphics_font8x8[24][2]=0x7f;graphics_font8x8[24][3]=0x49;graphics_font8x8[24][4]=0x49;graphics_font8x8[24][5]=0x7f;graphics_font8x8[24][6]=0x36;graphics_font8x8[24][7]=0x00; 
000014E4  422A 00C0 1760          clr.b     192(A2)
000014E8  157C 0036 1761          move.b    #54,192+1(A2)
000014EC  00C1      
000014EE  157C 007F 1762          move.b    #127,192+2(A2)
000014F2  00C2      
000014F4  157C 0049 1763          move.b    #73,192+3(A2)
000014F8  00C3      
000014FA  157C 0049 1764          move.b    #73,192+4(A2)
000014FE  00C4      
00001500  157C 007F 1765          move.b    #127,192+5(A2)
00001504  00C5      
00001506  157C 0036 1766          move.b    #54,192+6(A2)
0000150A  00C6      
0000150C  422A 00C7 1767          clr.b     192+7(A2)
                    1768   ; graphics_font8x8[25][0]=0x00;graphics_font8x8[25][1]=0x32;graphics_font8x8[25][2]=0x7b;graphics_font8x8[25][3]=0x49;graphics_font8x8[25][4]=0x49;graphics_font8x8[25][5]=0x7f;graphics_font8x8[25][6]=0x3e;graphics_font8x8[25][7]=0x00; 
00001510  422A 00C8 1769          clr.b     200(A2)
00001514  157C 0032 1770          move.b    #50,200+1(A2)
00001518  00C9      
0000151A  157C 007B 1771          move.b    #123,200+2(A2)
0000151E  00CA      
00001520  157C 0049 1772          move.b    #73,200+3(A2)
00001524  00CB      
00001526  157C 0049 1773          move.b    #73,200+4(A2)
0000152A  00CC      
0000152C  157C 007F 1774          move.b    #127,200+5(A2)
00001530  00CD      
00001532  157C 003E 1775          move.b    #62,200+6(A2)
00001536  00CE      
00001538  422A 00CF 1776          clr.b     200+7(A2)
                    1777   ; graphics_font8x8[26][0]=0x00;graphics_font8x8[26][1]=0x00;graphics_font8x8[26][2]=0x00;graphics_font8x8[26][3]=0x12;graphics_font8x8[26][4]=0x12;graphics_font8x8[26][5]=0x00;graphics_font8x8[26][6]=0x00;graphics_font8x8[26][7]=0x00; 
0000153C  422A 00D0 1778          clr.b     208(A2)
00001540  422A 00D1 1779          clr.b     208+1(A2)
00001544  422A 00D2 1780          clr.b     208+2(A2)
00001548  157C 0012 1781          move.b    #18,208+3(A2)
0000154C  00D3      
0000154E  157C 0012 1782          move.b    #18,208+4(A2)
00001552  00D4      
00001554  422A 00D5 1783          clr.b     208+5(A2)
00001558  422A 00D6 1784          clr.b     208+6(A2)
0000155C  422A 00D7 1785          clr.b     208+7(A2)
                    1786   ; graphics_font8x8[27][0]=0x00;graphics_font8x8[27][1]=0x00;graphics_font8x8[27][2]=0x00;graphics_font8x8[27][3]=0x13;graphics_font8x8[27][4]=0x13;graphics_font8x8[27][5]=0x00;graphics_font8x8[27][6]=0x00;graphics_font8x8[27][7]=0x00; 
00001560  422A 00D8 1787          clr.b     216(A2)
00001564  422A 00D9 1788          clr.b     216+1(A2)
00001568  422A 00DA 1789          clr.b     216+2(A2)
0000156C  157C 0013 1790          move.b    #19,216+3(A2)
00001570  00DB      
00001572  157C 0013 1791          move.b    #19,216+4(A2)
00001576  00DC      
00001578  422A 00DD 1792          clr.b     216+5(A2)
0000157C  422A 00DE 1793          clr.b     216+6(A2)
00001580  422A 00DF 1794          clr.b     216+7(A2)
                    1795   ; graphics_font8x8[28][0]=0x00;graphics_font8x8[28][1]=0x08;graphics_font8x8[28][2]=0x1c;graphics_font8x8[28][3]=0x36;graphics_font8x8[28][4]=0x63;graphics_font8x8[28][5]=0x41;graphics_font8x8[28][6]=0x41;graphics_font8x8[28][7]=0x00; 
00001584  422A 00E0 1796          clr.b     224(A2)
00001588  157C 0008 1797          move.b    #8,224+1(A2)
0000158C  00E1      
0000158E  157C 001C 1798          move.b    #28,224+2(A2)
00001592  00E2      
00001594  157C 0036 1799          move.b    #54,224+3(A2)
00001598  00E3      
0000159A  157C 0063 1800          move.b    #99,224+4(A2)
0000159E  00E4      
000015A0  157C 0041 1801          move.b    #65,224+5(A2)
000015A4  00E5      
000015A6  157C 0041 1802          move.b    #65,224+6(A2)
000015AA  00E6      
000015AC  422A 00E7 1803          clr.b     224+7(A2)
                    1804   ; graphics_font8x8[29][0]=0x00;graphics_font8x8[29][1]=0x14;graphics_font8x8[29][2]=0x14;graphics_font8x8[29][3]=0x14;graphics_font8x8[29][4]=0x14;graphics_font8x8[29][5]=0x14;graphics_font8x8[29][6]=0x14;graphics_font8x8[29][7]=0x00; 
000015B0  422A 00E8 1805          clr.b     232(A2)
000015B4  157C 0014 1806          move.b    #20,232+1(A2)
000015B8  00E9      
000015BA  157C 0014 1807          move.b    #20,232+2(A2)
000015BE  00EA      
000015C0  157C 0014 1808          move.b    #20,232+3(A2)
000015C4  00EB      
000015C6  157C 0014 1809          move.b    #20,232+4(A2)
000015CA  00EC      
000015CC  157C 0014 1810          move.b    #20,232+5(A2)
000015D0  00ED      
000015D2  157C 0014 1811          move.b    #20,232+6(A2)
000015D6  00EE      
000015D8  422A 00EF 1812          clr.b     232+7(A2)
                    1813   ; graphics_font8x8[30][0]=0x00;graphics_font8x8[30][1]=0x41;graphics_font8x8[30][2]=0x41;graphics_font8x8[30][3]=0x63;graphics_font8x8[30][4]=0x36;graphics_font8x8[30][5]=0x1c;graphics_font8x8[30][6]=0x08;graphics_font8x8[30][7]=0x00; 
000015DC  422A 00F0 1814          clr.b     240(A2)
000015E0  157C 0041 1815          move.b    #65,240+1(A2)
000015E4  00F1      
000015E6  157C 0041 1816          move.b    #65,240+2(A2)
000015EA  00F2      
000015EC  157C 0063 1817          move.b    #99,240+3(A2)
000015F0  00F3      
000015F2  157C 0036 1818          move.b    #54,240+4(A2)
000015F6  00F4      
000015F8  157C 001C 1819          move.b    #28,240+5(A2)
000015FC  00F5      
000015FE  157C 0008 1820          move.b    #8,240+6(A2)
00001602  00F6      
00001604  422A 00F7 1821          clr.b     240+7(A2)
                    1822   ; graphics_font8x8[31][0]=0x00;graphics_font8x8[31][1]=0x20;graphics_font8x8[31][2]=0x60;graphics_font8x8[31][3]=0x45;graphics_font8x8[31][4]=0x4d;graphics_font8x8[31][5]=0x78;graphics_font8x8[31][6]=0x30;graphics_font8x8[31][7]=0x00; 
00001608  422A 00F8 1823          clr.b     248(A2)
0000160C  157C 0020 1824          move.b    #32,248+1(A2)
00001610  00F9      
00001612  157C 0060 1825          move.b    #96,248+2(A2)
00001616  00FA      
00001618  157C 0045 1826          move.b    #69,248+3(A2)
0000161C  00FB      
0000161E  157C 004D 1827          move.b    #77,248+4(A2)
00001622  00FC      
00001624  157C 0078 1828          move.b    #120,248+5(A2)
00001628  00FD      
0000162A  157C 0030 1829          move.b    #48,248+6(A2)
0000162E  00FE      
00001630  422A 00FF 1830          clr.b     248+7(A2)
                    1831   ; graphics_font8x8[32][0]=0x00;graphics_font8x8[32][1]=0x3e;graphics_font8x8[32][2]=0x7f;graphics_font8x8[32][3]=0x41;graphics_font8x8[32][4]=0x59;graphics_font8x8[32][5]=0x79;graphics_font8x8[32][6]=0x3a;graphics_font8x8[32][7]=0x00; 
00001634  422A 0100 1832          clr.b     256(A2)
00001638  157C 003E 1833          move.b    #62,256+1(A2)
0000163C  0101      
0000163E  157C 007F 1834          move.b    #127,256+2(A2)
00001642  0102      
00001644  157C 0041 1835          move.b    #65,256+3(A2)
00001648  0103      
0000164A  157C 0059 1836          move.b    #89,256+4(A2)
0000164E  0104      
00001650  157C 0079 1837          move.b    #121,256+5(A2)
00001654  0105      
00001656  157C 003A 1838          move.b    #58,256+6(A2)
0000165A  0106      
0000165C  422A 0107 1839          clr.b     256+7(A2)
                    1840   ; graphics_font8x8[33][0]=0x00;graphics_font8x8[33][1]=0x1f;graphics_font8x8[33][2]=0x3f;graphics_font8x8[33][3]=0x68;graphics_font8x8[33][4]=0x68;graphics_font8x8[33][5]=0x3f;graphics_font8x8[33][6]=0x1f;graphics_font8x8[33][7]=0x00; 
00001660  422A 0108 1841          clr.b     264(A2)
00001664  157C 001F 1842          move.b    #31,264+1(A2)
00001668  0109      
0000166A  157C 003F 1843          move.b    #63,264+2(A2)
0000166E  010A      
00001670  157C 0068 1844          move.b    #104,264+3(A2)
00001674  010B      
00001676  157C 0068 1845          move.b    #104,264+4(A2)
0000167A  010C      
0000167C  157C 003F 1846          move.b    #63,264+5(A2)
00001680  010D      
00001682  157C 001F 1847          move.b    #31,264+6(A2)
00001686  010E      
00001688  422A 010F 1848          clr.b     264+7(A2)
                    1849   ; graphics_font8x8[34][0]=0x00;graphics_font8x8[34][1]=0x7f;graphics_font8x8[34][2]=0x7f;graphics_font8x8[34][3]=0x49;graphics_font8x8[34][4]=0x49;graphics_font8x8[34][5]=0x7f;graphics_font8x8[34][6]=0x36;graphics_font8x8[34][7]=0x00; 
0000168C  422A 0110 1850          clr.b     272(A2)
00001690  157C 007F 1851          move.b    #127,272+1(A2)
00001694  0111      
00001696  157C 007F 1852          move.b    #127,272+2(A2)
0000169A  0112      
0000169C  157C 0049 1853          move.b    #73,272+3(A2)
000016A0  0113      
000016A2  157C 0049 1854          move.b    #73,272+4(A2)
000016A6  0114      
000016A8  157C 007F 1855          move.b    #127,272+5(A2)
000016AC  0115      
000016AE  157C 0036 1856          move.b    #54,272+6(A2)
000016B2  0116      
000016B4  422A 0117 1857          clr.b     272+7(A2)
                    1858   ; graphics_font8x8[35][0]=0x00;graphics_font8x8[35][1]=0x3e;graphics_font8x8[35][2]=0x7f;graphics_font8x8[35][3]=0x41;graphics_font8x8[35][4]=0x41;graphics_font8x8[35][5]=0x63;graphics_font8x8[35][6]=0x22;graphics_font8x8[35][7]=0x00; 
000016B8  422A 0118 1859          clr.b     280(A2)
000016BC  157C 003E 1860          move.b    #62,280+1(A2)
000016C0  0119      
000016C2  157C 007F 1861          move.b    #127,280+2(A2)
000016C6  011A      
000016C8  157C 0041 1862          move.b    #65,280+3(A2)
000016CC  011B      
000016CE  157C 0041 1863          move.b    #65,280+4(A2)
000016D2  011C      
000016D4  157C 0063 1864          move.b    #99,280+5(A2)
000016D8  011D      
000016DA  157C 0022 1865          move.b    #34,280+6(A2)
000016DE  011E      
000016E0  422A 011F 1866          clr.b     280+7(A2)
                    1867   ; graphics_font8x8[36][0]=0x00;graphics_font8x8[36][1]=0x7f;graphics_font8x8[36][2]=0x7f;graphics_font8x8[36][3]=0x41;graphics_font8x8[36][4]=0x63;graphics_font8x8[36][5]=0x3e;graphics_font8x8[36][6]=0x1c;graphics_font8x8[36][7]=0x00; 
000016E4  422A 0120 1868          clr.b     288(A2)
000016E8  157C 007F 1869          move.b    #127,288+1(A2)
000016EC  0121      
000016EE  157C 007F 1870          move.b    #127,288+2(A2)
000016F2  0122      
000016F4  157C 0041 1871          move.b    #65,288+3(A2)
000016F8  0123      
000016FA  157C 0063 1872          move.b    #99,288+4(A2)
000016FE  0124      
00001700  157C 003E 1873          move.b    #62,288+5(A2)
00001704  0125      
00001706  157C 001C 1874          move.b    #28,288+6(A2)
0000170A  0126      
0000170C  422A 0127 1875          clr.b     288+7(A2)
                    1876   ; graphics_font8x8[37][0]=0x00;graphics_font8x8[37][1]=0x7f;graphics_font8x8[37][2]=0x7f;graphics_font8x8[37][3]=0x49;graphics_font8x8[37][4]=0x49;graphics_font8x8[37][5]=0x41;graphics_font8x8[37][6]=0x41;graphics_font8x8[37][7]=0x00; 
00001710  422A 0128 1877          clr.b     296(A2)
00001714  157C 007F 1878          move.b    #127,296+1(A2)
00001718  0129      
0000171A  157C 007F 1879          move.b    #127,296+2(A2)
0000171E  012A      
00001720  157C 0049 1880          move.b    #73,296+3(A2)
00001724  012B      
00001726  157C 0049 1881          move.b    #73,296+4(A2)
0000172A  012C      
0000172C  157C 0041 1882          move.b    #65,296+5(A2)
00001730  012D      
00001732  157C 0041 1883          move.b    #65,296+6(A2)
00001736  012E      
00001738  422A 012F 1884          clr.b     296+7(A2)
                    1885   ; graphics_font8x8[38][0]=0x00;graphics_font8x8[38][1]=0x7f;graphics_font8x8[38][2]=0x7f;graphics_font8x8[38][3]=0x48;graphics_font8x8[38][4]=0x48;graphics_font8x8[38][5]=0x40;graphics_font8x8[38][6]=0x40;graphics_font8x8[38][7]=0x00; 
0000173C  422A 0130 1886          clr.b     304(A2)
00001740  157C 007F 1887          move.b    #127,304+1(A2)
00001744  0131      
00001746  157C 007F 1888          move.b    #127,304+2(A2)
0000174A  0132      
0000174C  157C 0048 1889          move.b    #72,304+3(A2)
00001750  0133      
00001752  157C 0048 1890          move.b    #72,304+4(A2)
00001756  0134      
00001758  157C 0040 1891          move.b    #64,304+5(A2)
0000175C  0135      
0000175E  157C 0040 1892          move.b    #64,304+6(A2)
00001762  0136      
00001764  422A 0137 1893          clr.b     304+7(A2)
                    1894   ; graphics_font8x8[39][0]=0x00;graphics_font8x8[39][1]=0x3e;graphics_font8x8[39][2]=0x7f;graphics_font8x8[39][3]=0x41;graphics_font8x8[39][4]=0x49;graphics_font8x8[39][5]=0x6f;graphics_font8x8[39][6]=0x2e;graphics_font8x8[39][7]=0x00; 
00001768  422A 0138 1895          clr.b     312(A2)
0000176C  157C 003E 1896          move.b    #62,312+1(A2)
00001770  0139      
00001772  157C 007F 1897          move.b    #127,312+2(A2)
00001776  013A      
00001778  157C 0041 1898          move.b    #65,312+3(A2)
0000177C  013B      
0000177E  157C 0049 1899          move.b    #73,312+4(A2)
00001782  013C      
00001784  157C 006F 1900          move.b    #111,312+5(A2)
00001788  013D      
0000178A  157C 002E 1901          move.b    #46,312+6(A2)
0000178E  013E      
00001790  422A 013F 1902          clr.b     312+7(A2)
                    1903   ; graphics_font8x8[40][0]=0x00;graphics_font8x8[40][1]=0x7f;graphics_font8x8[40][2]=0x7f;graphics_font8x8[40][3]=0x08;graphics_font8x8[40][4]=0x08;graphics_font8x8[40][5]=0x7f;graphics_font8x8[40][6]=0x7f;graphics_font8x8[40][7]=0x00; 
00001794  422A 0140 1904          clr.b     320(A2)
00001798  157C 007F 1905          move.b    #127,320+1(A2)
0000179C  0141      
0000179E  157C 007F 1906          move.b    #127,320+2(A2)
000017A2  0142      
000017A4  157C 0008 1907          move.b    #8,320+3(A2)
000017A8  0143      
000017AA  157C 0008 1908          move.b    #8,320+4(A2)
000017AE  0144      
000017B0  157C 007F 1909          move.b    #127,320+5(A2)
000017B4  0145      
000017B6  157C 007F 1910          move.b    #127,320+6(A2)
000017BA  0146      
000017BC  422A 0147 1911          clr.b     320+7(A2)
                    1912   ; graphics_font8x8[41][0]=0x00;graphics_font8x8[41][1]=0x00;graphics_font8x8[41][2]=0x41;graphics_font8x8[41][3]=0x7f;graphics_font8x8[41][4]=0x7f;graphics_font8x8[41][5]=0x41;graphics_font8x8[41][6]=0x00;graphics_font8x8[41][7]=0x00; 
000017C0  422A 0148 1913          clr.b     328(A2)
000017C4  422A 0149 1914          clr.b     328+1(A2)
000017C8  157C 0041 1915          move.b    #65,328+2(A2)
000017CC  014A      
000017CE  157C 007F 1916          move.b    #127,328+3(A2)
000017D2  014B      
000017D4  157C 007F 1917          move.b    #127,328+4(A2)
000017D8  014C      
000017DA  157C 0041 1918          move.b    #65,328+5(A2)
000017DE  014D      
000017E0  422A 014E 1919          clr.b     328+6(A2)
000017E4  422A 014F 1920          clr.b     328+7(A2)
                    1921   ; graphics_font8x8[42][0]=0x00;graphics_font8x8[42][1]=0x02;graphics_font8x8[42][2]=0x03;graphics_font8x8[42][3]=0x41;graphics_font8x8[42][4]=0x7f;graphics_font8x8[42][5]=0x7e;graphics_font8x8[42][6]=0x40;graphics_font8x8[42][7]=0x00; 
000017E8  422A 0150 1922          clr.b     336(A2)
000017EC  157C 0002 1923          move.b    #2,336+1(A2)
000017F0  0151      
000017F2  157C 0003 1924          move.b    #3,336+2(A2)
000017F6  0152      
000017F8  157C 0041 1925          move.b    #65,336+3(A2)
000017FC  0153      
000017FE  157C 007F 1926          move.b    #127,336+4(A2)
00001802  0154      
00001804  157C 007E 1927          move.b    #126,336+5(A2)
00001808  0155      
0000180A  157C 0040 1928          move.b    #64,336+6(A2)
0000180E  0156      
00001810  422A 0157 1929          clr.b     336+7(A2)
                    1930   ; graphics_font8x8[43][0]=0x00;graphics_font8x8[43][1]=0x7f;graphics_font8x8[43][2]=0x7f;graphics_font8x8[43][3]=0x1c;graphics_font8x8[43][4]=0x36;graphics_font8x8[43][5]=0x63;graphics_font8x8[43][6]=0x41;graphics_font8x8[43][7]=0x00; 
00001814  422A 0158 1931          clr.b     344(A2)
00001818  157C 007F 1932          move.b    #127,344+1(A2)
0000181C  0159      
0000181E  157C 007F 1933          move.b    #127,344+2(A2)
00001822  015A      
00001824  157C 001C 1934          move.b    #28,344+3(A2)
00001828  015B      
0000182A  157C 0036 1935          move.b    #54,344+4(A2)
0000182E  015C      
00001830  157C 0063 1936          move.b    #99,344+5(A2)
00001834  015D      
00001836  157C 0041 1937          move.b    #65,344+6(A2)
0000183A  015E      
0000183C  422A 015F 1938          clr.b     344+7(A2)
                    1939   ; graphics_font8x8[44][0]=0x00;graphics_font8x8[44][1]=0x7f;graphics_font8x8[44][2]=0x7f;graphics_font8x8[44][3]=0x01;graphics_font8x8[44][4]=0x01;graphics_font8x8[44][5]=0x01;graphics_font8x8[44][6]=0x01;graphics_font8x8[44][7]=0x00; 
00001840  422A 0160 1940          clr.b     352(A2)
00001844  157C 007F 1941          move.b    #127,352+1(A2)
00001848  0161      
0000184A  157C 007F 1942          move.b    #127,352+2(A2)
0000184E  0162      
00001850  157C 0001 1943          move.b    #1,352+3(A2)
00001854  0163      
00001856  157C 0001 1944          move.b    #1,352+4(A2)
0000185A  0164      
0000185C  157C 0001 1945          move.b    #1,352+5(A2)
00001860  0165      
00001862  157C 0001 1946          move.b    #1,352+6(A2)
00001866  0166      
00001868  422A 0167 1947          clr.b     352+7(A2)
                    1948   ; graphics_font8x8[45][0]=0x00;graphics_font8x8[45][1]=0x7f;graphics_font8x8[45][2]=0x7f;graphics_font8x8[45][3]=0x30;graphics_font8x8[45][4]=0x18;graphics_font8x8[45][5]=0x30;graphics_font8x8[45][6]=0x7f;graphics_font8x8[45][7]=0x7f; 
0000186C  422A 0168 1949          clr.b     360(A2)
00001870  157C 007F 1950          move.b    #127,360+1(A2)
00001874  0169      
00001876  157C 007F 1951          move.b    #127,360+2(A2)
0000187A  016A      
0000187C  157C 0030 1952          move.b    #48,360+3(A2)
00001880  016B      
00001882  157C 0018 1953          move.b    #24,360+4(A2)
00001886  016C      
00001888  157C 0030 1954          move.b    #48,360+5(A2)
0000188C  016D      
0000188E  157C 007F 1955          move.b    #127,360+6(A2)
00001892  016E      
00001894  157C 007F 1956          move.b    #127,360+7(A2)
00001898  016F      
                    1957   ; graphics_font8x8[46][0]=0x00;graphics_font8x8[46][1]=0x7f;graphics_font8x8[46][2]=0x7f;graphics_font8x8[46][3]=0x38;graphics_font8x8[46][4]=0x1c;graphics_font8x8[46][5]=0x7f;graphics_font8x8[46][6]=0x7f;graphics_font8x8[46][7]=0x00; 
0000189A  422A 0170 1958          clr.b     368(A2)
0000189E  157C 007F 1959          move.b    #127,368+1(A2)
000018A2  0171      
000018A4  157C 007F 1960          move.b    #127,368+2(A2)
000018A8  0172      
000018AA  157C 0038 1961          move.b    #56,368+3(A2)
000018AE  0173      
000018B0  157C 001C 1962          move.b    #28,368+4(A2)
000018B4  0174      
000018B6  157C 007F 1963          move.b    #127,368+5(A2)
000018BA  0175      
000018BC  157C 007F 1964          move.b    #127,368+6(A2)
000018C0  0176      
000018C2  422A 0177 1965          clr.b     368+7(A2)
                    1966   ; graphics_font8x8[47][0]=0x00;graphics_font8x8[47][1]=0x3e;graphics_font8x8[47][2]=0x7f;graphics_font8x8[47][3]=0x41;graphics_font8x8[47][4]=0x41;graphics_font8x8[47][5]=0x7f;graphics_font8x8[47][6]=0x3e;graphics_font8x8[47][7]=0x00; 
000018C6  422A 0178 1967          clr.b     376(A2)
000018CA  157C 003E 1968          move.b    #62,376+1(A2)
000018CE  0179      
000018D0  157C 007F 1969          move.b    #127,376+2(A2)
000018D4  017A      
000018D6  157C 0041 1970          move.b    #65,376+3(A2)
000018DA  017B      
000018DC  157C 0041 1971          move.b    #65,376+4(A2)
000018E0  017C      
000018E2  157C 007F 1972          move.b    #127,376+5(A2)
000018E6  017D      
000018E8  157C 003E 1973          move.b    #62,376+6(A2)
000018EC  017E      
000018EE  422A 017F 1974          clr.b     376+7(A2)
                    1975   ; graphics_font8x8[48][0]=0x00;graphics_font8x8[48][1]=0x7f;graphics_font8x8[48][2]=0x7f;graphics_font8x8[48][3]=0x48;graphics_font8x8[48][4]=0x48;graphics_font8x8[48][5]=0x78;graphics_font8x8[48][6]=0x30;graphics_font8x8[48][7]=0x00; 
000018F2  422A 0180 1976          clr.b     384(A2)
000018F6  157C 007F 1977          move.b    #127,384+1(A2)
000018FA  0181      
000018FC  157C 007F 1978          move.b    #127,384+2(A2)
00001900  0182      
00001902  157C 0048 1979          move.b    #72,384+3(A2)
00001906  0183      
00001908  157C 0048 1980          move.b    #72,384+4(A2)
0000190C  0184      
0000190E  157C 0078 1981          move.b    #120,384+5(A2)
00001912  0185      
00001914  157C 0030 1982          move.b    #48,384+6(A2)
00001918  0186      
0000191A  422A 0187 1983          clr.b     384+7(A2)
                    1984   ; graphics_font8x8[49][0]=0x00;graphics_font8x8[49][1]=0x3c;graphics_font8x8[49][2]=0x7e;graphics_font8x8[49][3]=0x42;graphics_font8x8[49][4]=0x43;graphics_font8x8[49][5]=0x7f;graphics_font8x8[49][6]=0x3d;graphics_font8x8[49][7]=0x00; 
0000191E  422A 0188 1985          clr.b     392(A2)
00001922  157C 003C 1986          move.b    #60,392+1(A2)
00001926  0189      
00001928  157C 007E 1987          move.b    #126,392+2(A2)
0000192C  018A      
0000192E  157C 0042 1988          move.b    #66,392+3(A2)
00001932  018B      
00001934  157C 0043 1989          move.b    #67,392+4(A2)
00001938  018C      
0000193A  157C 007F 1990          move.b    #127,392+5(A2)
0000193E  018D      
00001940  157C 003D 1991          move.b    #61,392+6(A2)
00001944  018E      
00001946  422A 018F 1992          clr.b     392+7(A2)
                    1993   ; graphics_font8x8[50][0]=0x00;graphics_font8x8[50][1]=0x7f;graphics_font8x8[50][2]=0x7f;graphics_font8x8[50][3]=0x4c;graphics_font8x8[50][4]=0x4e;graphics_font8x8[50][5]=0x7b;graphics_font8x8[50][6]=0x31;graphics_font8x8[50][7]=0x00; 
0000194A  422A 0190 1994          clr.b     400(A2)
0000194E  157C 007F 1995          move.b    #127,400+1(A2)
00001952  0191      
00001954  157C 007F 1996          move.b    #127,400+2(A2)
00001958  0192      
0000195A  157C 004C 1997          move.b    #76,400+3(A2)
0000195E  0193      
00001960  157C 004E 1998          move.b    #78,400+4(A2)
00001964  0194      
00001966  157C 007B 1999          move.b    #123,400+5(A2)
0000196A  0195      
0000196C  157C 0031 2000          move.b    #49,400+6(A2)
00001970  0196      
00001972  422A 0197 2001          clr.b     400+7(A2)
                    2002   ; graphics_font8x8[51][0]=0x00;graphics_font8x8[51][1]=0x32;graphics_font8x8[51][2]=0x7b;graphics_font8x8[51][3]=0x49;graphics_font8x8[51][4]=0x49;graphics_font8x8[51][5]=0x6f;graphics_font8x8[51][6]=0x26;graphics_font8x8[51][7]=0x00; 
00001976  422A 0198 2003          clr.b     408(A2)
0000197A  157C 0032 2004          move.b    #50,408+1(A2)
0000197E  0199      
00001980  157C 007B 2005          move.b    #123,408+2(A2)
00001984  019A      
00001986  157C 0049 2006          move.b    #73,408+3(A2)
0000198A  019B      
0000198C  157C 0049 2007          move.b    #73,408+4(A2)
00001990  019C      
00001992  157C 006F 2008          move.b    #111,408+5(A2)
00001996  019D      
00001998  157C 0026 2009          move.b    #38,408+6(A2)
0000199C  019E      
0000199E  422A 019F 2010          clr.b     408+7(A2)
                    2011   ; graphics_font8x8[52][0]=0x00;graphics_font8x8[52][1]=0x40;graphics_font8x8[52][2]=0x40;graphics_font8x8[52][3]=0x7f;graphics_font8x8[52][4]=0x7f;graphics_font8x8[52][5]=0x40;graphics_font8x8[52][6]=0x40;graphics_font8x8[52][7]=0x00; 
000019A2  422A 01A0 2012          clr.b     416(A2)
000019A6  157C 0040 2013          move.b    #64,416+1(A2)
000019AA  01A1      
000019AC  157C 0040 2014          move.b    #64,416+2(A2)
000019B0  01A2      
000019B2  157C 007F 2015          move.b    #127,416+3(A2)
000019B6  01A3      
000019B8  157C 007F 2016          move.b    #127,416+4(A2)
000019BC  01A4      
000019BE  157C 0040 2017          move.b    #64,416+5(A2)
000019C2  01A5      
000019C4  157C 0040 2018          move.b    #64,416+6(A2)
000019C8  01A6      
000019CA  422A 01A7 2019          clr.b     416+7(A2)
                    2020   ; graphics_font8x8[53][0]=0x00;graphics_font8x8[53][1]=0x7e;graphics_font8x8[53][2]=0x7f;graphics_font8x8[53][3]=0x01;graphics_font8x8[53][4]=0x01;graphics_font8x8[53][5]=0x7f;graphics_font8x8[53][6]=0x7e;graphics_font8x8[53][7]=0x00; 
000019CE  422A 01A8 2021          clr.b     424(A2)
000019D2  157C 007E 2022          move.b    #126,424+1(A2)
000019D6  01A9      
000019D8  157C 007F 2023          move.b    #127,424+2(A2)
000019DC  01AA      
000019DE  157C 0001 2024          move.b    #1,424+3(A2)
000019E2  01AB      
000019E4  157C 0001 2025          move.b    #1,424+4(A2)
000019E8  01AC      
000019EA  157C 007F 2026          move.b    #127,424+5(A2)
000019EE  01AD      
000019F0  157C 007E 2027          move.b    #126,424+6(A2)
000019F4  01AE      
000019F6  422A 01AF 2028          clr.b     424+7(A2)
                    2029   ; graphics_font8x8[54][0]=0x00;graphics_font8x8[54][1]=0x7c;graphics_font8x8[54][2]=0x7e;graphics_font8x8[54][3]=0x03;graphics_font8x8[54][4]=0x03;graphics_font8x8[54][5]=0x7e;graphics_font8x8[54][6]=0x7c;graphics_font8x8[54][7]=0x00; 
000019FA  422A 01B0 2030          clr.b     432(A2)
000019FE  157C 007C 2031          move.b    #124,432+1(A2)
00001A02  01B1      
00001A04  157C 007E 2032          move.b    #126,432+2(A2)
00001A08  01B2      
00001A0A  157C 0003 2033          move.b    #3,432+3(A2)
00001A0E  01B3      
00001A10  157C 0003 2034          move.b    #3,432+4(A2)
00001A14  01B4      
00001A16  157C 007E 2035          move.b    #126,432+5(A2)
00001A1A  01B5      
00001A1C  157C 007C 2036          move.b    #124,432+6(A2)
00001A20  01B6      
00001A22  422A 01B7 2037          clr.b     432+7(A2)
                    2038   ; graphics_font8x8[55][0]=0x00;graphics_font8x8[55][1]=0x7f;graphics_font8x8[55][2]=0x7f;graphics_font8x8[55][3]=0x06;graphics_font8x8[55][4]=0x0c;graphics_font8x8[55][5]=0x06;graphics_font8x8[55][6]=0x7f;graphics_font8x8[55][7]=0x7f; 
00001A26  422A 01B8 2039          clr.b     440(A2)
00001A2A  157C 007F 2040          move.b    #127,440+1(A2)
00001A2E  01B9      
00001A30  157C 007F 2041          move.b    #127,440+2(A2)
00001A34  01BA      
00001A36  157C 0006 2042          move.b    #6,440+3(A2)
00001A3A  01BB      
00001A3C  157C 000C 2043          move.b    #12,440+4(A2)
00001A40  01BC      
00001A42  157C 0006 2044          move.b    #6,440+5(A2)
00001A46  01BD      
00001A48  157C 007F 2045          move.b    #127,440+6(A2)
00001A4C  01BE      
00001A4E  157C 007F 2046          move.b    #127,440+7(A2)
00001A52  01BF      
                    2047   ; graphics_font8x8[56][0]=0x00;graphics_font8x8[56][1]=0x63;graphics_font8x8[56][2]=0x77;graphics_font8x8[56][3]=0x1c;graphics_font8x8[56][4]=0x1c;graphics_font8x8[56][5]=0x77;graphics_font8x8[56][6]=0x63;graphics_font8x8[56][7]=0x00; 
00001A54  422A 01C0 2048          clr.b     448(A2)
00001A58  157C 0063 2049          move.b    #99,448+1(A2)
00001A5C  01C1      
00001A5E  157C 0077 2050          move.b    #119,448+2(A2)
00001A62  01C2      
00001A64  157C 001C 2051          move.b    #28,448+3(A2)
00001A68  01C3      
00001A6A  157C 001C 2052          move.b    #28,448+4(A2)
00001A6E  01C4      
00001A70  157C 0077 2053          move.b    #119,448+5(A2)
00001A74  01C5      
00001A76  157C 0063 2054          move.b    #99,448+6(A2)
00001A7A  01C6      
00001A7C  422A 01C7 2055          clr.b     448+7(A2)
                    2056   ; graphics_font8x8[57][0]=0x00;graphics_font8x8[57][1]=0x70;graphics_font8x8[57][2]=0x78;graphics_font8x8[57][3]=0x0f;graphics_font8x8[57][4]=0x0f;graphics_font8x8[57][5]=0x78;graphics_font8x8[57][6]=0x70;graphics_font8x8[57][7]=0x00; 
00001A80  422A 01C8 2057          clr.b     456(A2)
00001A84  157C 0070 2058          move.b    #112,456+1(A2)
00001A88  01C9      
00001A8A  157C 0078 2059          move.b    #120,456+2(A2)
00001A8E  01CA      
00001A90  157C 000F 2060          move.b    #15,456+3(A2)
00001A94  01CB      
00001A96  157C 000F 2061          move.b    #15,456+4(A2)
00001A9A  01CC      
00001A9C  157C 0078 2062          move.b    #120,456+5(A2)
00001AA0  01CD      
00001AA2  157C 0070 2063          move.b    #112,456+6(A2)
00001AA6  01CE      
00001AA8  422A 01CF 2064          clr.b     456+7(A2)
                    2065   ; graphics_font8x8[58][0]=0x00;graphics_font8x8[58][1]=0x43;graphics_font8x8[58][2]=0x47;graphics_font8x8[58][3]=0x4d;graphics_font8x8[58][4]=0x59;graphics_font8x8[58][5]=0x71;graphics_font8x8[58][6]=0x61;graphics_font8x8[58][7]=0x00; 
00001AAC  422A 01D0 2066          clr.b     464(A2)
00001AB0  157C 0043 2067          move.b    #67,464+1(A2)
00001AB4  01D1      
00001AB6  157C 0047 2068          move.b    #71,464+2(A2)
00001ABA  01D2      
00001ABC  157C 004D 2069          move.b    #77,464+3(A2)
00001AC0  01D3      
00001AC2  157C 0059 2070          move.b    #89,464+4(A2)
00001AC6  01D4      
00001AC8  157C 0071 2071          move.b    #113,464+5(A2)
00001ACC  01D5      
00001ACE  157C 0061 2072          move.b    #97,464+6(A2)
00001AD2  01D6      
00001AD4  422A 01D7 2073          clr.b     464+7(A2)
                    2074   ; graphics_font8x8[59][0]=0x00;graphics_font8x8[59][1]=0x00;graphics_font8x8[59][2]=0x7f;graphics_font8x8[59][3]=0x7f;graphics_font8x8[59][4]=0x41;graphics_font8x8[59][5]=0x41;graphics_font8x8[59][6]=0x00;graphics_font8x8[59][7]=0x00; 
00001AD8  422A 01D8 2075          clr.b     472(A2)
00001ADC  422A 01D9 2076          clr.b     472+1(A2)
00001AE0  157C 007F 2077          move.b    #127,472+2(A2)
00001AE4  01DA      
00001AE6  157C 007F 2078          move.b    #127,472+3(A2)
00001AEA  01DB      
00001AEC  157C 0041 2079          move.b    #65,472+4(A2)
00001AF0  01DC      
00001AF2  157C 0041 2080          move.b    #65,472+5(A2)
00001AF6  01DD      
00001AF8  422A 01DE 2081          clr.b     472+6(A2)
00001AFC  422A 01DF 2082          clr.b     472+7(A2)
                    2083   ; graphics_font8x8[60][0]=0x00;graphics_font8x8[60][1]=0x20;graphics_font8x8[60][2]=0x30;graphics_font8x8[60][3]=0x18;graphics_font8x8[60][4]=0x0c;graphics_font8x8[60][5]=0x06;graphics_font8x8[60][6]=0x03;graphics_font8x8[60][7]=0x01; 
00001B00  422A 01E0 2084          clr.b     480(A2)
00001B04  157C 0020 2085          move.b    #32,480+1(A2)
00001B08  01E1      
00001B0A  157C 0030 2086          move.b    #48,480+2(A2)
00001B0E  01E2      
00001B10  157C 0018 2087          move.b    #24,480+3(A2)
00001B14  01E3      
00001B16  157C 000C 2088          move.b    #12,480+4(A2)
00001B1A  01E4      
00001B1C  157C 0006 2089          move.b    #6,480+5(A2)
00001B20  01E5      
00001B22  157C 0003 2090          move.b    #3,480+6(A2)
00001B26  01E6      
00001B28  157C 0001 2091          move.b    #1,480+7(A2)
00001B2C  01E7      
                    2092   ; graphics_font8x8[61][0]=0x00;graphics_font8x8[61][1]=0x00;graphics_font8x8[61][2]=0x41;graphics_font8x8[61][3]=0x41;graphics_font8x8[61][4]=0x7f;graphics_font8x8[61][5]=0x7f;graphics_font8x8[61][6]=0x00;graphics_font8x8[61][7]=0x00; 
00001B2E  422A 01E8 2093          clr.b     488(A2)
00001B32  422A 01E9 2094          clr.b     488+1(A2)
00001B36  157C 0041 2095          move.b    #65,488+2(A2)
00001B3A  01EA      
00001B3C  157C 0041 2096          move.b    #65,488+3(A2)
00001B40  01EB      
00001B42  157C 007F 2097          move.b    #127,488+4(A2)
00001B46  01EC      
00001B48  157C 007F 2098          move.b    #127,488+5(A2)
00001B4C  01ED      
00001B4E  422A 01EE 2099          clr.b     488+6(A2)
00001B52  422A 01EF 2100          clr.b     488+7(A2)
                    2101   ; graphics_font8x8[62][0]=0x00;graphics_font8x8[62][1]=0x08;graphics_font8x8[62][2]=0x18;graphics_font8x8[62][3]=0x3f;graphics_font8x8[62][4]=0x3f;graphics_font8x8[62][5]=0x18;graphics_font8x8[62][6]=0x08;graphics_font8x8[62][7]=0x00;	
00001B56  422A 01F0 2102          clr.b     496(A2)
00001B5A  157C 0008 2103          move.b    #8,496+1(A2)
00001B5E  01F1      
00001B60  157C 0018 2104          move.b    #24,496+2(A2)
00001B64  01F2      
00001B66  157C 003F 2105          move.b    #63,496+3(A2)
00001B6A  01F3      
00001B6C  157C 003F 2106          move.b    #63,496+4(A2)
00001B70  01F4      
00001B72  157C 0018 2107          move.b    #24,496+5(A2)
00001B76  01F5      
00001B78  157C 0008 2108          move.b    #8,496+6(A2)
00001B7C  01F6      
00001B7E  422A 01F7 2109          clr.b     496+7(A2)
00001B82  245F      2110          move.l    (A7)+,A2
00001B84  4E75      2111          rts
                    2112   ; }
                    2113   ; void graphics_test_main() {
                    2114   _graphics_test_main:
                    2115   ; initialize_font();
00001B86  4EB8 10E4 2116          jsr       _initialize_font
                    2117   ; graphics_test_clrscr();
00001B8A  4EB8 0E28 2118          jsr       _graphics_test_clrscr
                    2119   ; draw_font();
00001B8E  4EB8 1056 2120          jsr       _draw_font
                    2121   ; graphics_draw_string("HELLO WORLD", 0, 0);
00001B92  42A7      2122          clr.l     -(A7)
00001B94  42A7      2123          clr.l     -(A7)
00001B96  4879 0000 2124          pea       @graphi~1_1.L
00001B9A  4876      
00001B9C  4EB8 100C 2125          jsr       _graphics_draw_string
00001BA0  DEFC 000C 2126          add.w     #12,A7
00001BA4  4E75      2127          rts
                    2128   ; }
                    2129   ; C:\COSMICIMPALASM68K\PROGRAMS\DEBUGMONITORCODE\COSMIC_IMPALAS.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    2130   ; #include <string.h>
                    2131   ; #include <stdio.h>
                    2132   ; #include <stdlib.h>
                    2133   ; #include <limits.h>
                    2134   ; #define PIXEL_BUFFER_VGA_BASEADDRESS   (0x01000000)
                    2135   ; #define VIDMEM_DIM1_W_BLANK_EDGES (256)
                    2136   ; #define VIDMEM_DIM1 (224)
                    2137   ; #define VIDMEM_DIM2 (32)
                    2138   ; #define VIDEOMEM_ADDR(x,y) ((volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x)))
                    2139   ; #define VIDMEM(x,y) (*VIDEOMEM_ADDR(x,y))
                    2140   ; #define COSMIC_IMPALAS_TIMER_DELAY_MS (50)
                    2141   ; #define WRITE_VIDMEM(x,y,CH) ((*(volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x))) = CH)
                    2142   ; #define MAX_ENEMIES 28
                    2143   ; int FIRE1  ;
                    2144   ; int LEFT1  ;
                    2145   ; int RIGHT1 ;
                    2146   ; #define LOCHAR 0x20
                    2147   ; #define HICHAR 0x5e
                    2148   ; //
                    2149   ; // GAME CODE
                    2150   ; //
                    2151   ; #define MAXLIVES 5
                    2152   ; typedef unsigned char byte;
                    2153   ; typedef signed char sbyte;
                    2154   ; typedef unsigned short word;
                    2155   ; typedef struct {
                    2156   ; byte x;
                    2157   ; byte y;
                    2158   ; byte shape; 
                    2159   ; } Enemy;
                    2160   ; typedef struct {
                    2161   ; byte right;
                    2162   ; byte down;
                    2163   ; } MarchMode;
                    2164   ; MarchMode this_mode, next_mode;
                    2165   ; byte enemy_index;
                    2166   ; byte num_enemies;
                    2167   ; byte player_x;
                    2168   ; byte bullet_x;
                    2169   ; byte bullet_y;
                    2170   ; byte bomb_x;
                    2171   ; byte bomb_y;
                    2172   ; byte attract;
                    2173   ; byte credits;
                    2174   ; byte curplayer;
                    2175   ; word score;
                    2176   ; byte lives;
                    2177   ; Enemy enemies[MAX_ENEMIES];
                    2178   ; char font8x8[HICHAR-LOCHAR+1][8];
                    2179   ; byte player_bitmap[56];
                    2180   ; byte bomb_bitmap[7];
                    2181   ; byte bullet_bitmap[6];
                    2182   ; byte enemy1_bitmap[34];
                    2183   ; byte enemy2_bitmap[34];
                    2184   ; byte enemy3_bitmap[34];
                    2185   ; byte enemy4_bitmap[34];
                    2186   ; byte* enemy_bitmaps[4];
                    2187   ; unsigned long seed; 
                    2188   ; extern int clock_count_ms;
                    2189   ; ///////////////////////////////////////////////////////////////////////////
                    2190   ; //
                    2191   ; // Functions to Implement
                    2192   ; //
                    2193   ; ///////////////////////////////////////////////////////////////////////////
                    2194   ; void draw_sprite(byte* src, byte x, byte y)
                    2195   ; {
                    2196   _draw_sprite:
00001BA6  4E56 0000 2197          link      A6,#0
00001BAA  4E5E      2198          unlk      A6
00001BAC  4E75      2199          rts
                    2200   ; //complete this function
                    2201   ; }
                    2202   ; byte xor_sprite(byte *src, byte x, byte y)
                    2203   ; {
                    2204   _xor_sprite:
00001BAE  4E56 0000 2205          link      A6,#0
00001BB2  4E5E      2206          unlk      A6
00001BB4  4E75      2207          rts
                    2208   ; //complete this function
                    2209   ; }
                    2210   ; void erase_sprite(byte *src, byte x, byte y)
                    2211   ; {
                    2212   _erase_sprite:
00001BB6  4E56 0000 2213          link      A6,#0
00001BBA  4E5E      2214          unlk      A6
00001BBC  4E75      2215          rts
                    2216   ; //complete this function
                    2217   ; }
                    2218   ; void clear_sprite(byte *src, byte x, byte y)
                    2219   ; {
                    2220   _clear_sprite:
00001BBE  4E56 0000 2221          link      A6,#0
00001BC2  4E5E      2222          unlk      A6
00001BC4  4E75      2223          rts
                    2224   ; //complete this function
                    2225   ; }
                    2226   ; void move_player() {
                    2227   _move_player:
00001BC6  4E75      2228          rts
                    2229   ; //complete this function
                    2230   ; }
                    2231   ; ///////////////////////////////////////////////////////////////////////////
                    2232   ; //
                    2233   ; // End Functions to Implement
                    2234   ; //
                    2235   ; ///////////////////////////////////////////////////////////////////////////
                    2236   ; // Set the seed
                    2237   ; void srand(unsigned long new_seed) {
                    2238   _srand:
00001BC8  4E56 0000 2239          link      A6,#0
                    2240   ; seed = new_seed;
00001BCC  23EE 0008 2241          move.l    8(A6),_seed.L
00001BD0  0803 0772 
00001BD4  4E5E      2242          unlk      A6
00001BD6  4E75      2243          rts
                    2244   ; }
                    2245   ; // Generate a pseudorandom number
                    2246   ; unsigned long long_rand(void) {
                    2247   _long_rand:
00001BD8  2F0A      2248          move.l    A2,-(A7)
00001BDA  45F9 0803 2249          lea       _seed.L,A2
00001BDE  0772      
                    2250   ; seed ^= seed << 13; // XOR with shifted value
00001BE0  2012      2251          move.l    (A2),D0
00001BE2  E188      2252          lsl.l     #8,D0
00001BE4  EB88      2253          lsl.l     #5,D0
00001BE6  B192      2254          eor.l     D0,(A2)
                    2255   ; seed ^= seed >> 17;
00001BE8  2012      2256          move.l    (A2),D0
00001BEA  E088      2257          lsr.l     #8,D0
00001BEC  E088      2258          lsr.l     #8,D0
00001BEE  E288      2259          lsr.l     #1,D0
00001BF0  B192      2260          eor.l     D0,(A2)
                    2261   ; seed ^= seed << 5;
00001BF2  2012      2262          move.l    (A2),D0
00001BF4  EB88      2263          lsl.l     #5,D0
00001BF6  B192      2264          eor.l     D0,(A2)
                    2265   ; return seed;
00001BF8  2012      2266          move.l    (A2),D0
00001BFA  245F      2267          move.l    (A7)+,A2
00001BFC  4E75      2268          rts
                    2269   ; }
                    2270   ; int clock() {
                    2271   _clock:
                    2272   ; return clock_count_ms;
00001BFE  2039 0803 2273          move.l    _clock_count_ms.L,D0
00001C02  01C2      
00001C04  4E75      2274          rts
                    2275   ; }
                    2276   ; void delay_ms(int num_ms) {
                    2277   _delay_ms:
00001C06  4E56 0000 2278          link      A6,#0
00001C0A  48E7 3000 2279          movem.l   D2/D3,-(A7)
                    2280   ; int start_time;
                    2281   ; int current_time;
                    2282   ; start_time = clock();
00001C0E  4EB8 1BFE 2283          jsr       _clock
00001C12  2400      2284          move.l    D0,D2
                    2285   ; do {
                    2286   delay_ms_1:
                    2287   ; current_time = clock();
00001C14  4EB8 1BFE 2288          jsr       _clock
00001C18  2600      2289          move.l    D0,D3
                    2290   ; if (current_time < start_time) { //handle wraparound
00001C1A  B682      2291          cmp.l     D2,D3
00001C1C  6C0E      2292          bge.s     delay_ms_3
                    2293   ; num_ms = num_ms - (INT_MAX-start_time);
00001C1E  203C 7FFF 2294          move.l    #2147483647,D0
00001C22  FFFF      
00001C24  9082      2295          sub.l     D2,D0
00001C26  91AE 0008 2296          sub.l     D0,8(A6)
                    2297   ; start_time = current_time;
00001C2A  2403      2298          move.l    D3,D2
                    2299   delay_ms_3:
00001C2C  2003      2300          move.l    D3,D0
00001C2E  9082      2301          sub.l     D2,D0
00001C30  B0AE 0008 2302          cmp.l     8(A6),D0
00001C34  6DDE      2303          blt       delay_ms_1
00001C36  4CDF 000C 2304          movem.l   (A7)+,D2/D3
00001C3A  4E5E      2305          unlk      A6
00001C3C  4E75      2306          rts
                    2307   ; }
                    2308   ; } while ((current_time - start_time) < num_ms);
                    2309   ; }
                    2310   ; void clrscr() {
                    2311   _clrscr:
00001C3E  48E7 3000 2312          movem.l   D2/D3,-(A7)
                    2313   ; int a;
                    2314   ; int b;
                    2315   ; for (a = 0; a < VIDMEM_DIM1; a++) {
00001C42  4283      2316          clr.l     D3
                    2317   clrscr_1:
00001C44  0C83 0000 2318          cmp.l     #224,D3
00001C48  00E0      
00001C4A  6C00 0032 2319          bge       clrscr_3
                    2320   ; for (b = 0; b < VIDMEM_DIM2; b++) {
00001C4E  4282      2321          clr.l     D2
                    2322   clrscr_4:
00001C50  0C82 0000 2323          cmp.l     #32,D2
00001C54  0020      
00001C56  6C22      2324          bge.s     clrscr_6
                    2325   ; WRITE_VIDMEM(a,b,0 /*0xff*/);	   
00001C58  203C 0100 2326          move.l    #16777216,D0
00001C5C  0000      
00001C5E  2F02      2327          move.l    D2,-(A7)
00001C60  4878 0100 2328          pea       256
00001C64  4EB9 0000 2329          jsr       LMUL
00001C68  3B7C      
00001C6A  2217      2330          move.l    (A7),D1
00001C6C  504F      2331          addq.w    #8,A7
00001C6E  D283      2332          add.l     D3,D1
00001C70  D081      2333          add.l     D1,D0
00001C72  2040      2334          move.l    D0,A0
00001C74  4210      2335          clr.b     (A0)
00001C76  5282      2336          addq.l    #1,D2
00001C78  60D6      2337          bra       clrscr_4
                    2338   clrscr_6:
00001C7A  5283      2339          addq.l    #1,D3
00001C7C  60C6      2340          bra       clrscr_1
                    2341   clrscr_3:
00001C7E  4CDF 000C 2342          movem.l   (A7)+,D2/D3
00001C82  4E75      2343          rts
                    2344   ; }
                    2345   ; }
                    2346   ; //memset(vidmem, 0, VIDMEM_DIM1*VIDMEM_DIM2);
                    2347   ; }
                    2348   ; void xor_pixel(unsigned char x, unsigned char y) {
                    2349   _xor_pixel:
00001C84  4E56 FFFC 2350          link      A6,#-4
                    2351   ; unsigned char* dest;
                    2352   ; dest =  VIDEOMEM_ADDR(x,y>>3);
00001C88  203C 0100 2353          move.l    #16777216,D0
00001C8C  0000      
00001C8E  122E 000F 2354          move.b    15(A6),D1
00001C92  E609      2355          lsr.b     #3,D1
00001C94  C27C 00FF 2356          and.w     #255,D1
00001C98  E141      2357          asl.w     #8,D1
00001C9A  48C1      2358          ext.l     D1
00001C9C  2F00      2359          move.l    D0,-(A7)
00001C9E  102E 000B 2360          move.b    11(A6),D0
00001CA2  C0BC 0000 2361          and.l     #255,D0
00001CA6  00FF      
00001CA8  D280      2362          add.l     D0,D1
00001CAA  201F      2363          move.l    (A7)+,D0
00001CAC  D081      2364          add.l     D1,D0
00001CAE  2D40 FFFC 2365          move.l    D0,-4(A6)
                    2366   ; *dest = (*dest) ^ (0x1 << (y&7));
00001CB2  206E FFFC 2367          move.l    -4(A6),A0
00001CB6  7001      2368          moveq     #1,D0
00001CB8  122E 000F 2369          move.b    15(A6),D1
00001CBC  C23C 0007 2370          and.b     #7,D1
00001CC0  E328      2371          lsl.b     D1,D0
00001CC2  B110      2372          eor.b     D0,(A0)
00001CC4  4E5E      2373          unlk      A6
00001CC6  4E75      2374          rts
                    2375   ; }
                    2376   ; void draw_vline(unsigned char x, unsigned char y1, unsigned char y2) {
                    2377   _draw_vline:
00001CC8  4E56 FFFC 2378          link      A6,#-4
00001CCC  48E7 3E00 2379          movem.l   D2/D3/D4/D5/D6,-(A7)
00001CD0  1A2E 0013 2380          move.b    19(A6),D5
00001CD4  CABC 0000 2381          and.l     #255,D5
00001CD8  00FF      
                    2382   ; unsigned char yb1;
                    2383   ; unsigned char yb2;
                    2384   ; unsigned char val;
                    2385   ; unsigned char* dest;
                    2386   ; int nchars;
                    2387   ; yb1 = y1>>3;
00001CDA  102E 000F 2388          move.b    15(A6),D0
00001CDE  E608      2389          lsr.b     #3,D0
00001CE0  1C00      2390          move.b    D0,D6
                    2391   ; yb2 = y2>>3;
00001CE2  1005      2392          move.b    D5,D0
00001CE4  E608      2393          lsr.b     #3,D0
00001CE6  1D40 FFFF 2394          move.b    D0,-1(A6)
                    2395   ; nchars  = (((unsigned int) yb2) & 0xff) - (((unsigned int) yb1) & 0xff);
00001CEA  102E FFFF 2396          move.b    -1(A6),D0
00001CEE  C0BC 0000 2397          and.l     #255,D0
00001CF2  00FF      
00001CF4  C0BC 0000 2398          and.l     #255,D0
00001CF8  00FF      
00001CFA  1206      2399          move.b    D6,D1
00001CFC  C2BC 0000 2400          and.l     #255,D1
00001D00  00FF      
00001D02  C2BC 0000 2401          and.l     #255,D1
00001D06  00FF      
00001D08  9081      2402          sub.l     D1,D0
00001D0A  2800      2403          move.l    D0,D4
                    2404   ; dest = VIDEOMEM_ADDR(x,yb1);
00001D0C  203C 0100 2405          move.l    #16777216,D0
00001D10  0000      
00001D12  1206      2406          move.b    D6,D1
00001D14  C27C 00FF 2407          and.w     #255,D1
00001D18  E141      2408          asl.w     #8,D1
00001D1A  48C1      2409          ext.l     D1
00001D1C  2F00      2410          move.l    D0,-(A7)
00001D1E  102E 000B 2411          move.b    11(A6),D0
00001D22  C0BC 0000 2412          and.l     #255,D0
00001D26  00FF      
00001D28  D280      2413          add.l     D0,D1
00001D2A  201F      2414          move.l    (A7)+,D0
00001D2C  D081      2415          add.l     D1,D0
00001D2E  2600      2416          move.l    D0,D3
                    2417   ; val = 0xff << (y1&7);
00001D30  303C 00FF 2418          move.w    #255,D0
00001D34  122E 000F 2419          move.b    15(A6),D1
00001D38  C23C 0007 2420          and.b     #7,D1
00001D3C  C27C 00FF 2421          and.w     #255,D1
00001D40  E360      2422          asl.w     D1,D0
00001D42  1400      2423          move.b    D0,D2
                    2424   ; *dest ^= val;
00001D44  2043      2425          move.l    D3,A0
00001D46  B510      2426          eor.b     D2,(A0)
                    2427   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;
00001D48  0683 0000 2428          add.l     #256,D3
00001D4C  0100      
                    2429   ; if (nchars > 0) {
00001D4E  0C84 0000 2430          cmp.l     #0,D4
00001D52  0000      
00001D54  6F00 0036 2431          ble       draw_vline_1
                    2432   ; while (--nchars > 0) {
                    2433   draw_vline_3:
00001D58  5384      2434          subq.l    #1,D4
00001D5A  0C84 0000 2435          cmp.l     #0,D4
00001D5E  0000      
00001D60  6F10      2436          ble.s     draw_vline_5
                    2437   ; val =  0xff;
00001D62  143C 00FF 2438          move.b    #255,D2
                    2439   ; *dest ^= val;
00001D66  2043      2440          move.l    D3,A0
00001D68  B510      2441          eor.b     D2,(A0)
                    2442   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;	  
00001D6A  0683 0000 2443          add.l     #256,D3
00001D6E  0100      
00001D70  60E6      2444          bra       draw_vline_3
                    2445   draw_vline_5:
                    2446   ; }
                    2447   ; val = (0xff >> (~y2&7));
00001D72  303C 00FF 2448          move.w    #255,D0
00001D76  1205      2449          move.b    D5,D1
00001D78  4601      2450          not.b     D1
00001D7A  C23C 0007 2451          and.b     #7,D1
00001D7E  C27C 00FF 2452          and.w     #255,D1
00001D82  E260      2453          asr.w     D1,D0
00001D84  1400      2454          move.b    D0,D2
                    2455   ; *dest ^= val;
00001D86  2043      2456          move.l    D3,A0
00001D88  B510      2457          eor.b     D2,(A0)
00001D8A  601E      2458          bra.s     draw_vline_2
                    2459   draw_vline_1:
                    2460   ; } else {
                    2461   ; dest = dest-VIDMEM_DIM1_W_BLANK_EDGES; 
00001D8C  0483 0000 2462          sub.l     #256,D3
00001D90  0100      
                    2463   ; val = (0xff << ((y2+1)&7));
00001D92  303C 00FF 2464          move.w    #255,D0
00001D96  1205      2465          move.b    D5,D1
00001D98  5201      2466          addq.b    #1,D1
00001D9A  C23C 0007 2467          and.b     #7,D1
00001D9E  C27C 00FF 2468          and.w     #255,D1
00001DA2  E360      2469          asl.w     D1,D0
00001DA4  1400      2470          move.b    D0,D2
                    2471   ; *dest ^= val;
00001DA6  2043      2472          move.l    D3,A0
00001DA8  B510      2473          eor.b     D2,(A0)
                    2474   draw_vline_2:
00001DAA  4CDF 007C 2475          movem.l   (A7)+,D2/D3/D4/D5/D6
00001DAE  4E5E      2476          unlk      A6
00001DB0  4E75      2477          rts
                    2478   ; }
                    2479   ; }
                    2480   ; void draw_char(unsigned char ch, unsigned char x, unsigned char y) {
                    2481   _draw_char:
00001DB2  4E56 0000 2482          link      A6,#0
00001DB6  48E7 3800 2483          movem.l   D2/D3/D4,-(A7)
                    2484   ; unsigned char i;
                    2485   ; unsigned char* src;
                    2486   ; unsigned char* dest;
                    2487   ; src  = &font8x8[(ch-LOCHAR)][0];
00001DBA  41F9 0803 2488          lea       _font8x8.L,A0
00001DBE  049E      
00001DC0  102E 000B 2489          move.b    11(A6),D0
00001DC4  C0BC 0000 2490          and.l     #255,D0
00001DC8  00FF      
00001DCA  0480 0000 2491          sub.l     #32,D0
00001DCE  0020      
00001DD0  E788      2492          lsl.l     #3,D0
00001DD2  D1C0      2493          add.l     D0,A0
00001DD4  2808      2494          move.l    A0,D4
                    2495   ; dest = VIDEOMEM_ADDR(x*8,y);
00001DD6  203C 0100 2496          move.l    #16777216,D0
00001DDA  0000      
00001DDC  122E 0013 2497          move.b    19(A6),D1
00001DE0  C27C 00FF 2498          and.w     #255,D1
00001DE4  E141      2499          asl.w     #8,D1
00001DE6  48C1      2500          ext.l     D1
00001DE8  2F00      2501          move.l    D0,-(A7)
00001DEA  102E 000F 2502          move.b    15(A6),D0
00001DEE  C07C 00FF 2503          and.w     #255,D0
00001DF2  C0FC 0008 2504          mulu.w    #8,D0
00001DF6  C0BC 0000 2505          and.l     #255,D0
00001DFA  00FF      
00001DFC  D280      2506          add.l     D0,D1
00001DFE  201F      2507          move.l    (A7)+,D0
00001E00  D081      2508          add.l     D1,D0
00001E02  2600      2509          move.l    D0,D3
                    2510   ; for (i=0; i<8; i++) {
00001E04  4202      2511          clr.b     D2
                    2512   draw_char_1:
00001E06  0C02 0008 2513          cmp.b     #8,D2
00001E0A  640E      2514          bhs.s     draw_char_3
                    2515   ; *dest = *src;
00001E0C  2044      2516          move.l    D4,A0
00001E0E  2243      2517          move.l    D3,A1
00001E10  1290      2518          move.b    (A0),(A1)
                    2519   ; dest += 1;//32;
00001E12  5283      2520          addq.l    #1,D3
                    2521   ; src += 1;
00001E14  5284      2522          addq.l    #1,D4
00001E16  5202      2523          addq.b    #1,D2
00001E18  60EC      2524          bra       draw_char_1
                    2525   draw_char_3:
00001E1A  4CDF 001C 2526          movem.l   (A7)+,D2/D3/D4
00001E1E  4E5E      2527          unlk      A6
00001E20  4E75      2528          rts
                    2529   ; }
                    2530   ; }
                    2531   ; void draw_string(char* str, byte x, byte y) {
                    2532   _draw_string:
00001E22  4E56 0000 2533          link      A6,#0
00001E26  2F02      2534          move.l    D2,-(A7)
                    2535   ; do {
                    2536   draw_string_1:
                    2537   ; byte ch = *str++;
00001E28  206E 0008 2538          move.l    8(A6),A0
00001E2C  52AE 0008 2539          addq.l    #1,8(A6)
00001E30  1410      2540          move.b    (A0),D2
                    2541   ; if (!ch) break;
00001E32  4A02      2542          tst.b     D2
00001E34  6602      2543          bne.s     draw_string_3
00001E36  602E      2544          bra.s     draw_string_2
                    2545   draw_string_3:
                    2546   ; draw_char(ch, x, y);
00001E38  122E 0013 2547          move.b    19(A6),D1
00001E3C  C2BC 0000 2548          and.l     #255,D1
00001E40  00FF      
00001E42  2F01      2549          move.l    D1,-(A7)
00001E44  122E 000F 2550          move.b    15(A6),D1
00001E48  C2BC 0000 2551          and.l     #255,D1
00001E4C  00FF      
00001E4E  2F01      2552          move.l    D1,-(A7)
00001E50  C4BC 0000 2553          and.l     #255,D2
00001E54  00FF      
00001E56  2F02      2554          move.l    D2,-(A7)
00001E58  4EB8 1DB2 2555          jsr       _draw_char
00001E5C  DEFC 000C 2556          add.w     #12,A7
                    2557   ; x++;
00001E60  522E 000F 2558          addq.b    #1,15(A6)
00001E64  60C2      2559          bra       draw_string_1
                    2560   draw_string_2:
00001E66  241F      2561          move.l    (A7)+,D2
00001E68  4E5E      2562          unlk      A6
00001E6A  4E75      2563          rts
                    2564   ; } while (1);
                    2565   ; }
                    2566   ; void draw_bcd_word(word bcd, byte x, byte y) {
                    2567   _draw_bcd_word:
00001E6C  4E56 0000 2568          link      A6,#0
00001E70  48E7 3000 2569          movem.l   D2/D3,-(A7)
00001E74  162E 000F 2570          move.b    15(A6),D3
00001E78  C6BC 0000 2571          and.l     #255,D3
00001E7C  00FF      
                    2572   ; byte j;
                    2573   ; x += 3;
00001E7E  5603      2574          addq.b    #3,D3
                    2575   ; for (j=0; j<4; j++) {
00001E80  4202      2576          clr.b     D2
                    2577   draw_bcd_word_1:
00001E82  0C02 0004 2578          cmp.b     #4,D2
00001E86  6400 0048 2579          bhs       draw_bcd_word_3
                    2580   ; draw_char('0'+(bcd&0xf), x, y);
00001E8A  122E 0013 2581          move.b    19(A6),D1
00001E8E  C2BC 0000 2582          and.l     #255,D1
00001E92  00FF      
00001E94  2F01      2583          move.l    D1,-(A7)
00001E96  C6BC 0000 2584          and.l     #255,D3
00001E9A  00FF      
00001E9C  2F03      2585          move.l    D3,-(A7)
00001E9E  7230      2586          moveq     #48,D1
00001EA0  4881      2587          ext.w     D1
00001EA2  2F00      2588          move.l    D0,-(A7)
00001EA4  302E 000A 2589          move.w    10(A6),D0
00001EA8  C07C 000F 2590          and.w     #15,D0
00001EAC  D240      2591          add.w     D0,D1
00001EAE  201F      2592          move.l    (A7)+,D0
00001EB0  C2BC 0000 2593          and.l     #255,D1
00001EB4  00FF      
00001EB6  2F01      2594          move.l    D1,-(A7)
00001EB8  4EB8 1DB2 2595          jsr       _draw_char
00001EBC  DEFC 000C 2596          add.w     #12,A7
                    2597   ; x--;
00001EC0  5303      2598          subq.b    #1,D3
                    2599   ; bcd >>= 4;
00001EC2  302E 000A 2600          move.w    10(A6),D0
00001EC6  E848      2601          lsr.w     #4,D0
00001EC8  3D40 000A 2602          move.w    D0,10(A6)
00001ECC  5202      2603          addq.b    #1,D2
00001ECE  60B2      2604          bra       draw_bcd_word_1
                    2605   draw_bcd_word_3:
00001ED0  4CDF 000C 2606          movem.l   (A7)+,D2/D3
00001ED4  4E5E      2607          unlk      A6
00001ED6  4E75      2608          rts
                    2609   ; }
                    2610   ; }
                    2611   ; // Function to add two BCD numbers
                    2612   ; word bcd_add(word a, word b)
                    2613   ; {
                    2614   _bcd_add:
00001ED8  4E56 FFFC 2615          link      A6,#-4
00001EDC  48E7 3F00 2616          movem.l   D2/D3/D4/D5/D6/D7,-(A7)
00001EE0  382E 000E 2617          move.w    14(A6),D4
00001EE4  C8BC 0000 2618          and.l     #65535,D4
00001EE8  FFFF      
00001EEA  3A2E 000A 2619          move.w    10(A6),D5
00001EEE  CABC 0000 2620          and.l     #65535,D5
00001EF2  FFFF      
                    2621   ; word result, carry, place, digit_a, digit_b, sum;
                    2622   ; result = 0;  /* Final BCD result */
00001EF4  7E00      2623          moveq     #0,D7
                    2624   ; carry = 0;   /* Carry for BCD addition */
00001EF6  4242      2625          clr.w     D2
                    2626   ; place = 0;   /* Bit position for reconstructing the result */
00001EF8  4246      2627          clr.w     D6
                    2628   ; while (a > 0 || b > 0 || carry > 0) {
                    2629   bcd_add_1:
00001EFA  0C45 0000 2630          cmp.w     #0,D5
00001EFE  620E      2631          bhi.s     bcd_add_4
00001F00  0C44 0000 2632          cmp.w     #0,D4
00001F04  6208      2633          bhi.s     bcd_add_4
00001F06  0C42 0000 2634          cmp.w     #0,D2
00001F0A  6300 0040 2635          bls       bcd_add_3
                    2636   bcd_add_4:
                    2637   ; /* Extract the lowest BCD digit from each number using a mask */
                    2638   ; digit_a = a & 0xF;
00001F0E  3005      2639          move.w    D5,D0
00001F10  C07C 000F 2640          and.w     #15,D0
00001F14  3D40 FFFC 2641          move.w    D0,-4(A6)
                    2642   ; digit_b = b & 0xF;
00001F18  3004      2643          move.w    D4,D0
00001F1A  C07C 000F 2644          and.w     #15,D0
00001F1E  3D40 FFFE 2645          move.w    D0,-2(A6)
                    2646   ; /* Add the digits and the carry */
                    2647   ; sum = digit_a + digit_b + carry;
00001F22  302E FFFC 2648          move.w    -4(A6),D0
00001F26  D06E FFFE 2649          add.w     -2(A6),D0
00001F2A  D042      2650          add.w     D2,D0
00001F2C  3600      2651          move.w    D0,D3
                    2652   ; /* Perform BCD correction if sum > 9 */
                    2653   ; if (sum > 9) {
00001F2E  0C43 0009 2654          cmp.w     #9,D3
00001F32  6308      2655          bls.s     bcd_add_5
                    2656   ; sum -= 10;  /* Correct the sum */
00001F34  0443 000A 2657          sub.w     #10,D3
                    2658   ; carry = 1;  /* Set the carry */
00001F38  7401      2659          moveq     #1,D2
00001F3A  6002      2660          bra.s     bcd_add_6
                    2661   bcd_add_5:
                    2662   ; } else {
                    2663   ; carry = 0;  /* Reset carry */
00001F3C  4242      2664          clr.w     D2
                    2665   bcd_add_6:
                    2666   ; }
                    2667   ; /* Add the corrected digit to the result in its proper place */
                    2668   ; result |= (sum << place);
00001F3E  3003      2669          move.w    D3,D0
00001F40  ED68      2670          lsl.w     D6,D0
00001F42  8E40      2671          or.w      D0,D7
                    2672   ; /* Move to the next higher BCD digit */
                    2673   ; a >>= 4;
00001F44  E84D      2674          lsr.w     #4,D5
                    2675   ; b >>= 4;
00001F46  E84C      2676          lsr.w     #4,D4
                    2677   ; place += 4;  /* Move to the next nibble */
00001F48  5846      2678          addq.w    #4,D6
00001F4A  60AE      2679          bra       bcd_add_1
                    2680   bcd_add_3:
                    2681   ; }
                    2682   ; return result;
00001F4C  3007      2683          move.w    D7,D0
00001F4E  4CDF 00FC 2684          movem.l   (A7)+,D2/D3/D4/D5/D6/D7
00001F52  4E5E      2685          unlk      A6
00001F54  4E75      2686          rts
                    2687   ; }
                    2688   ; void draw_lives(byte player) 
                    2689   ; {
                    2690   _draw_lives:
00001F56  4E56 FFFC 2691          link      A6,#-4
00001F5A  2F02      2692          move.l    D2,-(A7)
                    2693   ; byte i, n, x, y;
                    2694   ; n = lives;
00001F5C  1D79 0803 2695          move.b    _lives.L,-3(A6)
00001F60  0448 FFFD 
                    2696   ; x = player ? (22 - MAXLIVES) : 6;
00001F64  4A2E 000B 2697          tst.b     11(A6)
00001F68  6704      2698          beq.s     draw_lives_1
00001F6A  7011      2699          moveq     #17,D0
00001F6C  6002      2700          bra.s     draw_lives_2
                    2701   draw_lives_1:
00001F6E  7006      2702          moveq     #6,D0
                    2703   draw_lives_2:
00001F70  1D40 FFFE 2704          move.b    D0,-2(A6)
                    2705   ; y = 30;
00001F74  1D7C 001E 2706          move.b    #30,-1(A6)
00001F78  FFFF      
                    2707   ; for (i = 0; i < MAXLIVES; i++) {
00001F7A  4202      2708          clr.b     D2
                    2709   draw_lives_3:
00001F7C  0C02 0005 2710          cmp.b     #5,D2
00001F80  6400 003E 2711          bhs       draw_lives_5
                    2712   ; draw_char(i < n ? '*' : ' ', x++, y);
00001F84  122E FFFF 2713          move.b    -1(A6),D1
00001F88  C2BC 0000 2714          and.l     #255,D1
00001F8C  00FF      
00001F8E  2F01      2715          move.l    D1,-(A7)
00001F90  122E FFFE 2716          move.b    -2(A6),D1
00001F94  522E FFFE 2717          addq.b    #1,-2(A6)
00001F98  C2BC 0000 2718          and.l     #255,D1
00001F9C  00FF      
00001F9E  2F01      2719          move.l    D1,-(A7)
00001FA0  B42E FFFD 2720          cmp.b     -3(A6),D2
00001FA4  6404      2721          bhs.s     draw_lives_6
00001FA6  722A      2722          moveq     #42,D1
00001FA8  6002      2723          bra.s     draw_lives_7
                    2724   draw_lives_6:
00001FAA  7220      2725          moveq     #32,D1
                    2726   draw_lives_7:
00001FAC  C2BC 0000 2727          and.l     #255,D1
00001FB0  00FF      
00001FB2  2F01      2728          move.l    D1,-(A7)
00001FB4  4EB8 1DB2 2729          jsr       _draw_char
00001FB8  DEFC 000C 2730          add.w     #12,A7
00001FBC  5202      2731          addq.b    #1,D2
00001FBE  60BC      2732          bra       draw_lives_3
                    2733   draw_lives_5:
00001FC0  241F      2734          move.l    (A7)+,D2
00001FC2  4E5E      2735          unlk      A6
00001FC4  4E75      2736          rts
                    2737   ; }
                    2738   ; }
                    2739   ; void draw_score(byte player) {
                    2740   _draw_score:
00001FC6  4E56 FFFC 2741          link      A6,#-4
                    2742   ; byte x, y;
                    2743   ; x = player ? 24 : 0;
00001FCA  4A2E 000B 2744          tst.b     11(A6)
00001FCE  6704      2745          beq.s     draw_score_1
00001FD0  7018      2746          moveq     #24,D0
00001FD2  6002      2747          bra.s     draw_score_2
                    2748   draw_score_1:
00001FD4  4200      2749          clr.b     D0
                    2750   draw_score_2:
00001FD6  1D40 FFFE 2751          move.b    D0,-2(A6)
                    2752   ; y = 30;
00001FDA  1D7C 001E 2753          move.b    #30,-1(A6)
00001FDE  FFFF      
                    2754   ; draw_bcd_word(score, x, y);
00001FE0  122E FFFF 2755          move.b    -1(A6),D1
00001FE4  C2BC 0000 2756          and.l     #255,D1
00001FE8  00FF      
00001FEA  2F01      2757          move.l    D1,-(A7)
00001FEC  122E FFFE 2758          move.b    -2(A6),D1
00001FF0  C2BC 0000 2759          and.l     #255,D1
00001FF4  00FF      
00001FF6  2F01      2760          move.l    D1,-(A7)
00001FF8  3239 0803 2761          move.w    _score.L,D1
00001FFC  0446      
00001FFE  C2BC 0000 2762          and.l     #65535,D1
00002002  FFFF      
00002004  2F01      2763          move.l    D1,-(A7)
00002006  4EB8 1E6C 2764          jsr       _draw_bcd_word
0000200A  DEFC 000C 2765          add.w     #12,A7
0000200E  4E5E      2766          unlk      A6
00002010  4E75      2767          rts
                    2768   ; }
                    2769   ; void add_score(word pts) {
                    2770   _add_score:
00002012  4E56 0000 2771          link      A6,#0
                    2772   ; if (attract) return;
00002016  4A39 0803 2773          tst.b     _attract.L
0000201A  0440      
0000201C  6702      2774          beq.s     add_score_1
0000201E  603A      2775          bra.s     add_score_3
                    2776   add_score_1:
                    2777   ; score = bcd_add(score, pts);
00002020  322E 000A 2778          move.w    10(A6),D1
00002024  C2BC 0000 2779          and.l     #65535,D1
00002028  FFFF      
0000202A  2F01      2780          move.l    D1,-(A7)
0000202C  3239 0803 2781          move.w    _score.L,D1
00002030  0446      
00002032  C2BC 0000 2782          and.l     #65535,D1
00002036  FFFF      
00002038  2F01      2783          move.l    D1,-(A7)
0000203A  4EB8 1ED8 2784          jsr       _bcd_add
0000203E  504F      2785          addq.w    #8,A7
00002040  33C0 0803 2786          move.w    D0,_score.L
00002044  0446      
                    2787   ; draw_score(curplayer);
00002046  1239 0803 2788          move.b    _curplayer.L,D1
0000204A  0444      
0000204C  C2BC 0000 2789          and.l     #255,D1
00002050  00FF      
00002052  2F01      2790          move.l    D1,-(A7)
00002054  4EB8 1FC6 2791          jsr       _draw_score
00002058  584F      2792          addq.w    #4,A7
                    2793   add_score_3:
0000205A  4E5E      2794          unlk      A6
0000205C  4E75      2795          rts
                    2796   ; }
                    2797   ; byte get_char_rand() {
                    2798   _get_char_rand:
0000205E  4E56 FFFC 2799          link      A6,#-4
                    2800   ; byte rand;
                    2801   ; rand = (byte) (long_rand() & 0xff);  	
00002062  4EB8 1BD8 2802          jsr       _long_rand
00002066  C0BC 0000 2803          and.l     #255,D0
0000206A  00FF      
0000206C  1D40 FFFF 2804          move.b    D0,-1(A6)
                    2805   ; return rand;
00002070  102E FFFF 2806          move.b    -1(A6),D0
00002074  4E5E      2807          unlk      A6
00002076  4E75      2808          rts
                    2809   ; }
                    2810   ; void xor_player_derez() {
                    2811   _xor_player_derez:
00002078  4E56 FFFC 2812          link      A6,#-4
0000207C  48E7 3820 2813          movem.l   D2/D3/D4/A2,-(A7)
00002080  45F8 205E 2814          lea       _get_char_rand.L,A2
                    2815   ; byte i, j, x, y, rand;
                    2816   ; signed char xx, yy;
                    2817   ; x = player_x + 13;
00002084  1039 0803 2818          move.b    _player_x.L,D0
00002088  0436      
0000208A  0600 000D 2819          add.b     #13,D0
0000208E  1D40 FFFC 2820          move.b    D0,-4(A6)
                    2821   ; y = 8;
00002092  1D7C 0008 2822          move.b    #8,-3(A6)
00002096  FFFD      
                    2823   ; rand = get_char_rand();
00002098  4E92      2824          jsr       (A2)
0000209A  1400      2825          move.b    D0,D2
                    2826   ; for (j = 1; j <= 0x1f; j++) {
0000209C  7601      2827          moveq     #1,D3
                    2828   xor_player_derez_1:
0000209E  0C03 001F 2829          cmp.b     #31,D3
000020A2  6200 005C 2830          bhi       xor_player_derez_3
                    2831   ; for (i = 0; i < 50; i++) {
000020A6  4204      2832          clr.b     D4
                    2833   xor_player_derez_4:
000020A8  0C04 0032 2834          cmp.b     #50,D4
000020AC  6400 004E 2835          bhs       xor_player_derez_6
                    2836   ; rand = get_char_rand();
000020B0  4E92      2837          jsr       (A2)
000020B2  1400      2838          move.b    D0,D2
                    2839   ; xx = x + (rand & 0x1f) - 15;
000020B4  102E FFFC 2840          move.b    -4(A6),D0
000020B8  1202      2841          move.b    D2,D1
000020BA  C23C 001F 2842          and.b     #31,D1
000020BE  D001      2843          add.b     D1,D0
000020C0  0400 000F 2844          sub.b     #15,D0
000020C4  1D40 FFFE 2845          move.b    D0,-2(A6)
                    2846   ; rand = get_char_rand();
000020C8  4E92      2847          jsr       (A2)
000020CA  1400      2848          move.b    D0,D2
                    2849   ; yy = y + (rand & j);
000020CC  102E FFFD 2850          move.b    -3(A6),D0
000020D0  1202      2851          move.b    D2,D1
000020D2  C203      2852          and.b     D3,D1
000020D4  D001      2853          add.b     D1,D0
000020D6  1D40 FFFF 2854          move.b    D0,-1(A6)
                    2855   ; xor_pixel(xx, yy);
000020DA  122E FFFF 2856          move.b    -1(A6),D1
000020DE  C2BC 0000 2857          and.l     #255,D1
000020E2  00FF      
000020E4  2F01      2858          move.l    D1,-(A7)
000020E6  122E FFFE 2859          move.b    -2(A6),D1
000020EA  C2BC 0000 2860          and.l     #255,D1
000020EE  00FF      
000020F0  2F01      2861          move.l    D1,-(A7)
000020F2  4EB8 1C84 2862          jsr       _xor_pixel
000020F6  504F      2863          addq.w    #8,A7
000020F8  5204      2864          addq.b    #1,D4
000020FA  60AC      2865          bra       xor_player_derez_4
                    2866   xor_player_derez_6:
000020FC  5203      2867          addq.b    #1,D3
000020FE  609E      2868          bra       xor_player_derez_1
                    2869   xor_player_derez_3:
00002100  4CDF 041C 2870          movem.l   (A7)+,D2/D3/D4/A2
00002104  4E5E      2871          unlk      A6
00002106  4E75      2872          rts
                    2873   ; }
                    2874   ; }
                    2875   ; }
                    2876   ; void destroy_player() {
                    2877   _destroy_player:
                    2878   ; xor_player_derez(); // xor derez pattern
00002108  4EB8 2078 2879          jsr       _xor_player_derez
                    2880   ; xor_sprite(player_bitmap, player_x, 1); // erase ship via xor
0000210C  4878 0001 2881          pea       1
00002110  1239 0803 2882          move.b    _player_x.L,D1
00002114  0436      
00002116  C2BC 0000 2883          and.l     #255,D1
0000211A  00FF      
0000211C  2F01      2884          move.l    D1,-(A7)
0000211E  4879 0803 2885          pea       _player_bitmap.L
00002122  0696      
00002124  4EB8 1BAE 2886          jsr       _xor_sprite
00002128  DEFC 000C 2887          add.w     #12,A7
                    2888   ; xor_player_derez(); // xor 2x to erase derez pattern
0000212C  4EB8 2078 2889          jsr       _xor_player_derez
                    2890   ; player_x = 0xff;
00002130  13FC 00FF 2891          move.b    #255,_player_x.L
00002134  0803 0436 
                    2892   ; lives--;
00002138  5339 0803 2893          subq.b    #1,_lives.L
0000213C  0448      
0000213E  4E75      2894          rts
                    2895   ; }
                    2896   ; void init_enemies() {
                    2897   _init_enemies:
00002140  48E7 3C20 2898          movem.l   D2/D3/D4/D5/A2,-(A7)
00002144  45F9 0803 2899          lea       _enemies.L,A2
00002148  044A      
                    2900   ; byte i, x, y, bm;
                    2901   ; x = 0;
0000214A  4203      2902          clr.b     D3
                    2903   ; y = 26;
0000214C  7A1A      2904          moveq     #26,D5
                    2905   ; bm = 0;
0000214E  4204      2906          clr.b     D4
                    2907   ; for (i = 0; i < MAX_ENEMIES; i++) {
00002150  4202      2908          clr.b     D2
                    2909   init_enemies_1:
00002152  0C02 001C 2910          cmp.b     #28,D2
00002156  6400 0052 2911          bhs       init_enemies_3
                    2912   ; enemies[i].x = x;
0000215A  C4BC 0000 2913          and.l     #255,D2
0000215E  00FF      
00002160  2002      2914          move.l    D2,D0
00002162  C1FC 0003 2915          muls      #3,D0
00002166  1583 0800 2916          move.b    D3,0(A2,D0.L)
                    2917   ; enemies[i].y = y;
0000216A  C4BC 0000 2918          and.l     #255,D2
0000216E  00FF      
00002170  2002      2919          move.l    D2,D0
00002172  C1FC 0003 2920          muls      #3,D0
00002176  41F2 0800 2921          lea       0(A2,D0.L),A0
0000217A  1145 0001 2922          move.b    D5,1(A0)
                    2923   ; enemies[i].shape = bm;
0000217E  C4BC 0000 2924          and.l     #255,D2
00002182  00FF      
00002184  2002      2925          move.l    D2,D0
00002186  C1FC 0003 2926          muls      #3,D0
0000218A  41F2 0800 2927          lea       0(A2,D0.L),A0
0000218E  1144 0002 2928          move.b    D4,2(A0)
                    2929   ; x += 28;
00002192  0603 001C 2930          add.b     #28,D3
                    2931   ; if (x > 180) {
00002196  C67C 00FF 2932          and.w     #255,D3
0000219A  0C43 00B4 2933          cmp.w     #180,D3
0000219E  6306      2934          bls.s     init_enemies_4
                    2935   ; x = 0;
000021A0  4203      2936          clr.b     D3
                    2937   ; y -= 3;
000021A2  5705      2938          subq.b    #3,D5
                    2939   ; bm++;
000021A4  5204      2940          addq.b    #1,D4
                    2941   init_enemies_4:
000021A6  5202      2942          addq.b    #1,D2
000021A8  60A8      2943          bra       init_enemies_1
                    2944   init_enemies_3:
                    2945   ; }
                    2946   ; }
                    2947   ; enemy_index = 0;
000021AA  4239 0803 2948          clr.b     _enemy_index.L
000021AE  0432      
                    2949   ; num_enemies = MAX_ENEMIES;
000021B0  13FC 001C 2950          move.b    #28,_num_enemies.L
000021B4  0803 0434 
                    2951   ; this_mode.right = 1;
000021B8  13FC 0001 2952          move.b    #1,_this_mode.L
000021BC  0803 042E 
                    2953   ; this_mode.down = 0;
000021C0  4239 0803 2954          clr.b     _this_mode+1.L
000021C4  042F      
                    2955   ; next_mode.right = 1;
000021C6  13FC 0001 2956          move.b    #1,_next_mode.L
000021CA  0803 0430 
                    2957   ; next_mode.down = 0;
000021CE  4239 0803 2958          clr.b     _next_mode+1.L
000021D2  0431      
000021D4  4CDF 043C 2959          movem.l   (A7)+,D2/D3/D4/D5/A2
000021D8  4E75      2960          rts
                    2961   ; }
                    2962   ; void delete_enemy(Enemy* e) {
                    2963   _delete_enemy:
000021DA  4E56 0000 2964          link      A6,#0
000021DE  2F02      2965          move.l    D2,-(A7)
000021E0  242E 0008 2966          move.l    8(A6),D2
                    2967   ; clear_sprite(enemy_bitmaps[e->shape], e->x, e->y);
000021E4  2042      2968          move.l    D2,A0
000021E6  1228 0001 2969          move.b    1(A0),D1
000021EA  C2BC 0000 2970          and.l     #255,D1
000021EE  00FF      
000021F0  2F01      2971          move.l    D1,-(A7)
000021F2  2042      2972          move.l    D2,A0
000021F4  1210      2973          move.b    (A0),D1
000021F6  C2BC 0000 2974          and.l     #255,D1
000021FA  00FF      
000021FC  2F01      2975          move.l    D1,-(A7)
000021FE  2042      2976          move.l    D2,A0
00002200  1228 0002 2977          move.b    2(A0),D1
00002204  C2BC 0000 2978          and.l     #255,D1
00002208  00FF      
0000220A  E589      2979          lsl.l     #2,D1
0000220C  41F9 0803 2980          lea       _enemy_bitmaps.L,A0
00002210  0762      
00002212  2F30 1800 2981          move.l    0(A0,D1.L),-(A7)
00002216  4EB8 1BBE 2982          jsr       _clear_sprite
0000221A  DEFC 000C 2983          add.w     #12,A7
                    2984   ; memmove(e, e+1, sizeof(Enemy)*(enemies-e+MAX_ENEMIES-1));
0000221E  41F9 0803 2985          lea       _enemies.L,A0
00002222  044A      
00002224  91C2      2986          sub.l     D2,A0
00002226  2208      2987          move.l    A0,D1
00002228  83FC 0003 2988          divs.w    #3,D1
0000222C  0681 0000 2989          add.l     #28,D1
00002230  001C      
00002232  5381      2990          subq.l    #1,D1
00002234  2F01      2991          move.l    D1,-(A7)
00002236  4878 0003 2992          pea       3
0000223A  4EB9 0000 2993          jsr       LMUL
0000223E  3B7C      
00002240  2217      2994          move.l    (A7),D1
00002242  504F      2995          addq.w    #8,A7
00002244  2F01      2996          move.l    D1,-(A7)
00002246  2202      2997          move.l    D2,D1
00002248  5681      2998          addq.l    #3,D1
0000224A  2F01      2999          move.l    D1,-(A7)
0000224C  2F02      3000          move.l    D2,-(A7)
0000224E  4EB9 0000 3001          jsr       _memmove
00002252  3C0A      
00002254  DEFC 000C 3002          add.w     #12,A7
                    3003   ; num_enemies--; // update_next_enemy() will check enemy_index
00002258  5339 0803 3004          subq.b    #1,_num_enemies.L
0000225C  0434      
0000225E  241F      3005          move.l    (A7)+,D2
00002260  4E5E      3006          unlk      A6
00002262  4E75      3007          rts
                    3008   ; }
                    3009   ; void update_next_enemy() {
                    3010   _update_next_enemy:
00002264  48E7 0030 3011          movem.l   A2/A3,-(A7)
00002268  45F9 0803 3012          lea       _enemies.L,A2
0000226C  044A      
0000226E  47F9 0803 3013          lea       _this_mode.L,A3
00002272  042E      
                    3014   ; if (enemy_index >= num_enemies) {
00002274  1039 0803 3015          move.b    _enemy_index.L,D0
00002278  0432      
0000227A  B039 0803 3016          cmp.b     _num_enemies.L,D0
0000227E  0434      
00002280  6514      3017          blo.s     update_next_enemy_1
                    3018   ; enemy_index = 0;
00002282  4239 0803 3019          clr.b     _enemy_index.L
00002286  0432      
                    3020   ; this_mode.down = next_mode.down;
00002288  1779 0803 3021          move.b    _next_mode+1.L,1(A3)
0000228C  0431 0001 
                    3022   ; this_mode.right = next_mode.right;
00002290  16B9 0803 3023          move.b    _next_mode.L,(A3)
00002294  0430      
                    3024   update_next_enemy_1:
                    3025   ; }
                    3026   ; clear_sprite(enemy_bitmaps[enemies[enemy_index].shape], enemies[enemy_index].x, enemies[enemy_index].y);
00002296  1239 0803 3027          move.b    _enemy_index.L,D1
0000229A  0432      
0000229C  C2BC 0000 3028          and.l     #255,D1
000022A0  00FF      
000022A2  C3FC 0003 3029          muls      #3,D1
000022A6  41F2 1800 3030          lea       0(A2,D1.L),A0
000022AA  1228 0001 3031          move.b    1(A0),D1
000022AE  C2BC 0000 3032          and.l     #255,D1
000022B2  00FF      
000022B4  2F01      3033          move.l    D1,-(A7)
000022B6  1239 0803 3034          move.b    _enemy_index.L,D1
000022BA  0432      
000022BC  C2BC 0000 3035          and.l     #255,D1
000022C0  00FF      
000022C2  C3FC 0003 3036          muls      #3,D1
000022C6  1232 1800 3037          move.b    0(A2,D1.L),D1
000022CA  C2BC 0000 3038          and.l     #255,D1
000022CE  00FF      
000022D0  2F01      3039          move.l    D1,-(A7)
000022D2  1239 0803 3040          move.b    _enemy_index.L,D1
000022D6  0432      
000022D8  C2BC 0000 3041          and.l     #255,D1
000022DC  00FF      
000022DE  C3FC 0003 3042          muls      #3,D1
000022E2  41F2 1800 3043          lea       0(A2,D1.L),A0
000022E6  1228 0002 3044          move.b    2(A0),D1
000022EA  C2BC 0000 3045          and.l     #255,D1
000022EE  00FF      
000022F0  E589      3046          lsl.l     #2,D1
000022F2  41F9 0803 3047          lea       _enemy_bitmaps.L,A0
000022F6  0762      
000022F8  2F30 1800 3048          move.l    0(A0,D1.L),-(A7)
000022FC  4EB8 1BBE 3049          jsr       _clear_sprite
00002300  DEFC 000C 3050          add.w     #12,A7
                    3051   ; if (this_mode.down) {
00002304  4A2B 0001 3052          tst.b     1(A3)
00002308  6700 0066 3053          beq       update_next_enemy_3
                    3054   ; // if too close to ground, end game
                    3055   ; enemies[enemy_index].y = enemies[enemy_index].y-1;
0000230C  1039 0803 3056          move.b    _enemy_index.L,D0
00002310  0432      
00002312  C0BC 0000 3057          and.l     #255,D0
00002316  00FF      
00002318  C1FC 0003 3058          muls      #3,D0
0000231C  41F2 0800 3059          lea       0(A2,D0.L),A0
00002320  1028 0001 3060          move.b    1(A0),D0
00002324  5300      3061          subq.b    #1,D0
00002326  1239 0803 3062          move.b    _enemy_index.L,D1
0000232A  0432      
0000232C  C2BC 0000 3063          and.l     #255,D1
00002330  00FF      
00002332  C3FC 0003 3064          muls      #3,D1
00002336  41F2 1800 3065          lea       0(A2,D1.L),A0
0000233A  1140 0001 3066          move.b    D0,1(A0)
                    3067   ; if (enemies[enemy_index].y < 5) {
0000233E  1039 0803 3068          move.b    _enemy_index.L,D0
00002342  0432      
00002344  C0BC 0000 3069          and.l     #255,D0
00002348  00FF      
0000234A  C1FC 0003 3070          muls      #3,D0
0000234E  41F2 0800 3071          lea       0(A2,D0.L),A0
00002352  1028 0001 3072          move.b    1(A0),D0
00002356  0C00 0005 3073          cmp.b     #5,D0
0000235A  640A      3074          bhs.s     update_next_enemy_5
                    3075   ; destroy_player();
0000235C  4EB8 2108 3076          jsr       _destroy_player
                    3077   ; lives = 0;
00002360  4239 0803 3078          clr.b     _lives.L
00002364  0448      
                    3079   update_next_enemy_5:
                    3080   ; }
                    3081   ; next_mode.down = 0;
00002366  4239 0803 3082          clr.b     _next_mode+1.L
0000236A  0431      
0000236C  6000 0082 3083          bra       update_next_enemy_11
                    3084   update_next_enemy_3:
                    3085   ; } else {
                    3086   ; if (this_mode.right) {
00002370  4A13      3087          tst.b     (A3)
00002372  6742      3088          beq.s     update_next_enemy_7
                    3089   ; enemies[enemy_index].x += 2;
00002374  1039 0803 3090          move.b    _enemy_index.L,D0
00002378  0432      
0000237A  C0BC 0000 3091          and.l     #255,D0
0000237E  00FF      
00002380  C1FC 0003 3092          muls      #3,D0
00002384  5432 0800 3093          addq.b    #2,0(A2,D0.L)
                    3094   ; if (enemies[enemy_index].x >= 200) {
00002388  1039 0803 3095          move.b    _enemy_index.L,D0
0000238C  0432      
0000238E  C0BC 0000 3096          and.l     #255,D0
00002392  00FF      
00002394  C1FC 0003 3097          muls      #3,D0
00002398  1032 0800 3098          move.b    0(A2,D0.L),D0
0000239C  C07C 00FF 3099          and.w     #255,D0
000023A0  0C40 00C8 3100          cmp.w     #200,D0
000023A4  650E      3101          blo.s     update_next_enemy_9
                    3102   ; next_mode.down = 1;
000023A6  13FC 0001 3103          move.b    #1,_next_mode+1.L
000023AA  0803 0431 
                    3104   ; next_mode.right = 0;
000023AE  4239 0803 3105          clr.b     _next_mode.L
000023B2  0430      
                    3106   update_next_enemy_9:
000023B4  603A      3107          bra.s     update_next_enemy_11
                    3108   update_next_enemy_7:
                    3109   ; }
                    3110   ; } else {
                    3111   ; enemies[enemy_index].x -= 2;
000023B6  1039 0803 3112          move.b    _enemy_index.L,D0
000023BA  0432      
000023BC  C0BC 0000 3113          and.l     #255,D0
000023C0  00FF      
000023C2  C1FC 0003 3114          muls      #3,D0
000023C6  5532 0800 3115          subq.b    #2,0(A2,D0.L)
                    3116   ; if (enemies[enemy_index].x == 0) {
000023CA  1039 0803 3117          move.b    _enemy_index.L,D0
000023CE  0432      
000023D0  C0BC 0000 3118          and.l     #255,D0
000023D4  00FF      
000023D6  C1FC 0003 3119          muls      #3,D0
000023DA  1032 0800 3120          move.b    0(A2,D0.L),D0
000023DE  6610      3121          bne.s     update_next_enemy_11
                    3122   ; next_mode.down = 1;
000023E0  13FC 0001 3123          move.b    #1,_next_mode+1.L
000023E4  0803 0431 
                    3124   ; next_mode.right = 1;
000023E8  13FC 0001 3125          move.b    #1,_next_mode.L
000023EC  0803 0430 
                    3126   update_next_enemy_11:
                    3127   ; }
                    3128   ; }
                    3129   ; }
                    3130   ; draw_sprite(enemy_bitmaps[enemies[enemy_index].shape], enemies[enemy_index].x, enemies[enemy_index].y);
000023F0  1239 0803 3131          move.b    _enemy_index.L,D1
000023F4  0432      
000023F6  C2BC 0000 3132          and.l     #255,D1
000023FA  00FF      
000023FC  C3FC 0003 3133          muls      #3,D1
00002400  41F2 1800 3134          lea       0(A2,D1.L),A0
00002404  1228 0001 3135          move.b    1(A0),D1
00002408  C2BC 0000 3136          and.l     #255,D1
0000240C  00FF      
0000240E  2F01      3137          move.l    D1,-(A7)
00002410  1239 0803 3138          move.b    _enemy_index.L,D1
00002414  0432      
00002416  C2BC 0000 3139          and.l     #255,D1
0000241A  00FF      
0000241C  C3FC 0003 3140          muls      #3,D1
00002420  1232 1800 3141          move.b    0(A2,D1.L),D1
00002424  C2BC 0000 3142          and.l     #255,D1
00002428  00FF      
0000242A  2F01      3143          move.l    D1,-(A7)
0000242C  1239 0803 3144          move.b    _enemy_index.L,D1
00002430  0432      
00002432  C2BC 0000 3145          and.l     #255,D1
00002436  00FF      
00002438  C3FC 0003 3146          muls      #3,D1
0000243C  41F2 1800 3147          lea       0(A2,D1.L),A0
00002440  1228 0002 3148          move.b    2(A0),D1
00002444  C2BC 0000 3149          and.l     #255,D1
00002448  00FF      
0000244A  E589      3150          lsl.l     #2,D1
0000244C  41F9 0803 3151          lea       _enemy_bitmaps.L,A0
00002450  0762      
00002452  2F30 1800 3152          move.l    0(A0,D1.L),-(A7)
00002456  4EB8 1BA6 3153          jsr       _draw_sprite
0000245A  DEFC 000C 3154          add.w     #12,A7
                    3155   ; enemy_index++;
0000245E  5239 0803 3156          addq.b    #1,_enemy_index.L
00002462  0432      
00002464  4CDF 0C00 3157          movem.l   (A7)+,A2/A3
00002468  4E75      3158          rts
                    3159   ; }
                    3160   ; void draw_bunker(byte x, byte y, byte y2, byte h, byte w) {
                    3161   _draw_bunker:
0000246A  4E56 0000 3162          link      A6,#0
0000246E  48E7 3E20 3163          movem.l   D2/D3/D4/D5/D6/A2,-(A7)
00002472  162E 000F 3164          move.b    15(A6),D3
00002476  C6BC 0000 3165          and.l     #255,D3
0000247A  00FF      
0000247C  182E 0017 3166          move.b    23(A6),D4
00002480  C8BC 0000 3167          and.l     #255,D4
00002484  00FF      
00002486  1A2E 000B 3168          move.b    11(A6),D5
0000248A  CABC 0000 3169          and.l     #255,D5
0000248E  00FF      
00002490  1C2E 0013 3170          move.b    19(A6),D6
00002494  CCBC 0000 3171          and.l     #255,D6
00002498  00FF      
0000249A  45F8 1CC8 3172          lea       _draw_vline.L,A2
                    3173   ; byte i;
                    3174   ; for (i=0; i<h; i++) {
0000249E  4202      3175          clr.b     D2
                    3176   draw_bunker_1:
000024A0  B404      3177          cmp.b     D4,D2
000024A2  6400 0092 3178          bhs       draw_bunker_3
                    3179   ; draw_vline(x+i, y+i, y+y2+i*2);
000024A6  1203      3180          move.b    D3,D1
000024A8  D206      3181          add.b     D6,D1
000024AA  2F00      3182          move.l    D0,-(A7)
000024AC  1002      3183          move.b    D2,D0
000024AE  C07C 00FF 3184          and.w     #255,D0
000024B2  C0FC 0002 3185          mulu.w    #2,D0
000024B6  D200      3186          add.b     D0,D1
000024B8  201F      3187          move.l    (A7)+,D0
000024BA  C2BC 0000 3188          and.l     #255,D1
000024BE  00FF      
000024C0  2F01      3189          move.l    D1,-(A7)
000024C2  1203      3190          move.b    D3,D1
000024C4  D202      3191          add.b     D2,D1
000024C6  C2BC 0000 3192          and.l     #255,D1
000024CA  00FF      
000024CC  2F01      3193          move.l    D1,-(A7)
000024CE  1205      3194          move.b    D5,D1
000024D0  D202      3195          add.b     D2,D1
000024D2  C2BC 0000 3196          and.l     #255,D1
000024D6  00FF      
000024D8  2F01      3197          move.l    D1,-(A7)
000024DA  4E92      3198          jsr       (A2)
000024DC  DEFC 000C 3199          add.w     #12,A7
                    3200   ; draw_vline(x+h*2+w-i-1, y+i, y+y2+i*2);
000024E0  1203      3201          move.b    D3,D1
000024E2  D206      3202          add.b     D6,D1
000024E4  2F00      3203          move.l    D0,-(A7)
000024E6  1002      3204          move.b    D2,D0
000024E8  C07C 00FF 3205          and.w     #255,D0
000024EC  C0FC 0002 3206          mulu.w    #2,D0
000024F0  D200      3207          add.b     D0,D1
000024F2  201F      3208          move.l    (A7)+,D0
000024F4  C2BC 0000 3209          and.l     #255,D1
000024F8  00FF      
000024FA  2F01      3210          move.l    D1,-(A7)
000024FC  1203      3211          move.b    D3,D1
000024FE  D202      3212          add.b     D2,D1
00002500  C2BC 0000 3213          and.l     #255,D1
00002504  00FF      
00002506  2F01      3214          move.l    D1,-(A7)
00002508  1205      3215          move.b    D5,D1
0000250A  2F00      3216          move.l    D0,-(A7)
0000250C  1004      3217          move.b    D4,D0
0000250E  C07C 00FF 3218          and.w     #255,D0
00002512  C0FC 0002 3219          mulu.w    #2,D0
00002516  D200      3220          add.b     D0,D1
00002518  201F      3221          move.l    (A7)+,D0
0000251A  D22E 001B 3222          add.b     27(A6),D1
0000251E  9202      3223          sub.b     D2,D1
00002520  5301      3224          subq.b    #1,D1
00002522  C2BC 0000 3225          and.l     #255,D1
00002526  00FF      
00002528  2F01      3226          move.l    D1,-(A7)
0000252A  4E92      3227          jsr       (A2)
0000252C  DEFC 000C 3228          add.w     #12,A7
00002530  5202      3229          addq.b    #1,D2
00002532  6000 FF6C 3230          bra       draw_bunker_1
                    3231   draw_bunker_3:
                    3232   ; }
                    3233   ; for (i=0; i<w; i++) {
00002536  4202      3234          clr.b     D2
                    3235   draw_bunker_4:
00002538  B42E 001B 3236          cmp.b     27(A6),D2
0000253C  6400 0042 3237          bhs       draw_bunker_6
                    3238   ; draw_vline(x+h+i, y+h, y+y2+h*2);
00002540  1203      3239          move.b    D3,D1
00002542  D206      3240          add.b     D6,D1
00002544  2F00      3241          move.l    D0,-(A7)
00002546  1004      3242          move.b    D4,D0
00002548  C07C 00FF 3243          and.w     #255,D0
0000254C  C0FC 0002 3244          mulu.w    #2,D0
00002550  D200      3245          add.b     D0,D1
00002552  201F      3246          move.l    (A7)+,D0
00002554  C2BC 0000 3247          and.l     #255,D1
00002558  00FF      
0000255A  2F01      3248          move.l    D1,-(A7)
0000255C  1203      3249          move.b    D3,D1
0000255E  D204      3250          add.b     D4,D1
00002560  C2BC 0000 3251          and.l     #255,D1
00002564  00FF      
00002566  2F01      3252          move.l    D1,-(A7)
00002568  1205      3253          move.b    D5,D1
0000256A  D204      3254          add.b     D4,D1
0000256C  D202      3255          add.b     D2,D1
0000256E  C2BC 0000 3256          and.l     #255,D1
00002572  00FF      
00002574  2F01      3257          move.l    D1,-(A7)
00002576  4E92      3258          jsr       (A2)
00002578  DEFC 000C 3259          add.w     #12,A7
0000257C  5202      3260          addq.b    #1,D2
0000257E  60B8      3261          bra       draw_bunker_4
                    3262   draw_bunker_6:
00002580  4CDF 047C 3263          movem.l   (A7)+,D2/D3/D4/D5/D6/A2
00002584  4E5E      3264          unlk      A6
00002586  4E75      3265          rts
                    3266   ; }
                    3267   ; }
                    3268   ; void draw_playfield() {
                    3269   _draw_playfield:
00002588  2F02      3270          move.l    D2,-(A7)
                    3271   ; byte i;
                    3272   ; clrscr();
0000258A  4EB8 1C3E 3273          jsr       _clrscr
                    3274   ; draw_string("PLAYER 1", 0, 31);
0000258E  4878 001F 3275          pea       31
00002592  42A7      3276          clr.l     -(A7)
00002594  4879 0000 3277          pea       @cosmic~1_1.L
00002598  4882      
0000259A  4EB8 1E22 3278          jsr       _draw_string
0000259E  DEFC 000C 3279          add.w     #12,A7
                    3280   ; draw_score(0);
000025A2  42A7      3281          clr.l     -(A7)
000025A4  4EB8 1FC6 3282          jsr       _draw_score
000025A8  584F      3283          addq.w    #4,A7
                    3284   ; draw_lives(0);
000025AA  42A7      3285          clr.l     -(A7)
000025AC  4EB8 1F56 3286          jsr       _draw_lives
000025B0  584F      3287          addq.w    #4,A7
                    3288   ; for (i=0; i<224; i++) {
000025B2  4202      3289          clr.b     D2
                    3290   draw_playfield_1:
000025B4  C47C 00FF 3291          and.w     #255,D2
000025B8  0C42 00E0 3292          cmp.w     #224,D2
000025BC  6418      3293          bhs.s     draw_playfield_3
                    3294   ; WRITE_VIDMEM(i,0,0x7f & 0x55);
000025BE  203C 0100 3295          move.l    #16777216,D0
000025C2  0000      
000025C4  C4BC 0000 3296          and.l     #255,D2
000025C8  00FF      
000025CA  D082      3297          add.l     D2,D0
000025CC  2040      3298          move.l    D0,A0
000025CE  10BC 0055 3299          move.b    #85,(A0)
000025D2  5202      3300          addq.b    #1,D2
000025D4  60DE      3301          bra       draw_playfield_1
                    3302   draw_playfield_3:
                    3303   ; }
                    3304   ; draw_bunker(30, 40, 15, 15, 20);
000025D6  4878 0014 3305          pea       20
000025DA  4878 000F 3306          pea       15
000025DE  4878 000F 3307          pea       15
000025E2  4878 0028 3308          pea       40
000025E6  4878 001E 3309          pea       30
000025EA  4EB8 246A 3310          jsr       _draw_bunker
000025EE  DEFC 0014 3311          add.w     #20,A7
                    3312   ; draw_bunker(140, 40, 15, 15, 20);
000025F2  4878 0014 3313          pea       20
000025F6  4878 000F 3314          pea       15
000025FA  4878 000F 3315          pea       15
000025FE  4878 0028 3316          pea       40
00002602  4878 008C 3317          pea       140
00002606  4EB8 246A 3318          jsr       _draw_bunker
0000260A  DEFC 0014 3319          add.w     #20,A7
0000260E  241F      3320          move.l    (A7)+,D2
00002610  4E75      3321          rts
                    3322   ; }
                    3323   ; char in_rect(e, x, y, w, h)
                    3324   ; Enemy *e;
                    3325   ; byte x, y, w, h;
                    3326   ; {
                    3327   _in_rect:
00002612  4E56 FFFC 3328          link      A6,#-4
00002616  2F02      3329          move.l    D2,-(A7)
00002618  242E 0008 3330          move.l    8(A6),D2
                    3331   ; byte eh, ew;
                    3332   ; eh = enemy_bitmaps[e->shape][0];
0000261C  2042      3333          move.l    D2,A0
0000261E  1028 0002 3334          move.b    2(A0),D0
00002622  C0BC 0000 3335          and.l     #255,D0
00002626  00FF      
00002628  E588      3336          lsl.l     #2,D0
0000262A  41F9 0803 3337          lea       _enemy_bitmaps.L,A0
0000262E  0762      
00002630  2070 0800 3338          move.l    0(A0,D0.L),A0
00002634  1D50 FFFE 3339          move.b    (A0),-2(A6)
                    3340   ; ew = enemy_bitmaps[e->shape][1];
00002638  2042      3341          move.l    D2,A0
0000263A  1028 0002 3342          move.b    2(A0),D0
0000263E  C0BC 0000 3343          and.l     #255,D0
00002642  00FF      
00002644  E588      3344          lsl.l     #2,D0
00002646  41F9 0803 3345          lea       _enemy_bitmaps.L,A0
0000264A  0762      
0000264C  2070 0800 3346          move.l    0(A0,D0.L),A0
00002650  1D68 0001 3347          move.b    1(A0),-1(A6)
00002654  FFFF      
                    3348   ; return (x >= e->x - w && x <= e->x + ew && y >= e->y - h && y <= e->y + eh);
00002656  2042      3349          move.l    D2,A0
00002658  1010      3350          move.b    (A0),D0
0000265A  902E 0017 3351          sub.b     23(A6),D0
0000265E  B02E 000F 3352          cmp.b     15(A6),D0
00002662  6200 0034 3353          bhi       in_rect_1
00002666  2042      3354          move.l    D2,A0
00002668  1010      3355          move.b    (A0),D0
0000266A  D02E FFFF 3356          add.b     -1(A6),D0
0000266E  B02E 000F 3357          cmp.b     15(A6),D0
00002672  6524      3358          blo.s     in_rect_1
00002674  2042      3359          move.l    D2,A0
00002676  1028 0001 3360          move.b    1(A0),D0
0000267A  902E 001B 3361          sub.b     27(A6),D0
0000267E  B02E 0013 3362          cmp.b     19(A6),D0
00002682  6214      3363          bhi.s     in_rect_1
00002684  2042      3364          move.l    D2,A0
00002686  1028 0001 3365          move.b    1(A0),D0
0000268A  D02E FFFE 3366          add.b     -2(A6),D0
0000268E  B02E 0013 3367          cmp.b     19(A6),D0
00002692  6504      3368          blo.s     in_rect_1
00002694  7001      3369          moveq     #1,D0
00002696  6002      3370          bra.s     in_rect_2
                    3371   in_rect_1:
00002698  4280      3372          clr.l     D0
                    3373   in_rect_2:
0000269A  241F      3374          move.l    (A7)+,D2
0000269C  4E5E      3375          unlk      A6
0000269E  4E75      3376          rts
                    3377   ; }
                    3378   ; Enemy *find_enemy_at(x, y)
                    3379   ; byte x, y;
                    3380   ; {
                    3381   _find_enemy_at:
000026A0  4E56 0000 3382          link      A6,#0
000026A4  48E7 3000 3383          movem.l   D2/D3,-(A7)
                    3384   ; byte i;
                    3385   ; Enemy *e;
                    3386   ; for (i = 0; i < num_enemies; i++) {
000026A8  4202      3387          clr.b     D2
                    3388   find_enemy_at_1:
000026AA  B439 0803 3389          cmp.b     _num_enemies.L,D2
000026AE  0434      
000026B0  6400 004C 3390          bhs       find_enemy_at_3
                    3391   ; e = &enemies[i];
000026B4  41F9 0803 3392          lea       _enemies.L,A0
000026B8  044A      
000026BA  C4BC 0000 3393          and.l     #255,D2
000026BE  00FF      
000026C0  2002      3394          move.l    D2,D0
000026C2  C1FC 0003 3395          muls      #3,D0
000026C6  D1C0      3396          add.l     D0,A0
000026C8  2608      3397          move.l    A0,D3
                    3398   ; if (in_rect(e, x, y, 2, 0)) {
000026CA  42A7      3399          clr.l     -(A7)
000026CC  4878 0002 3400          pea       2
000026D0  122E 000F 3401          move.b    15(A6),D1
000026D4  C2BC 0000 3402          and.l     #255,D1
000026D8  00FF      
000026DA  2F01      3403          move.l    D1,-(A7)
000026DC  122E 000B 3404          move.b    11(A6),D1
000026E0  C2BC 0000 3405          and.l     #255,D1
000026E4  00FF      
000026E6  2F01      3406          move.l    D1,-(A7)
000026E8  2F03      3407          move.l    D3,-(A7)
000026EA  4EB8 2612 3408          jsr       _in_rect
000026EE  DEFC 0014 3409          add.w     #20,A7
000026F2  4A00      3410          tst.b     D0
000026F4  6704      3411          beq.s     find_enemy_at_4
                    3412   ; return e;
000026F6  2003      3413          move.l    D3,D0
000026F8  6006      3414          bra.s     find_enemy_at_6
                    3415   find_enemy_at_4:
000026FA  5202      3416          addq.b    #1,D2
000026FC  60AC      3417          bra       find_enemy_at_1
                    3418   find_enemy_at_3:
                    3419   ; }
                    3420   ; }
                    3421   ; return NULL;
000026FE  4280      3422          clr.l     D0
                    3423   find_enemy_at_6:
00002700  4CDF 000C 3424          movem.l   (A7)+,D2/D3
00002704  4E5E      3425          unlk      A6
00002706  4E75      3426          rts
                    3427   ; }
                    3428   ; void check_bullet_hit(x, y)
                    3429   ; byte x, y;
                    3430   ; {
                    3431   _check_bullet_hit:
00002708  4E56 0000 3432          link      A6,#0
0000270C  2F02      3433          move.l    D2,-(A7)
                    3434   ; Enemy *e;
                    3435   ; e = find_enemy_at(x, y);
0000270E  122E 000F 3436          move.b    15(A6),D1
00002712  C2BC 0000 3437          and.l     #255,D1
00002716  00FF      
00002718  2F01      3438          move.l    D1,-(A7)
0000271A  122E 000B 3439          move.b    11(A6),D1
0000271E  C2BC 0000 3440          and.l     #255,D1
00002722  00FF      
00002724  2F01      3441          move.l    D1,-(A7)
00002726  4EB8 26A0 3442          jsr       _find_enemy_at
0000272A  504F      3443          addq.w    #8,A7
0000272C  2400      3444          move.l    D0,D2
                    3445   ; if (e) {
0000272E  4A82      3446          tst.l     D2
00002730  6712      3447          beq.s     check_bullet_hit_1
                    3448   ; delete_enemy(e);
00002732  2F02      3449          move.l    D2,-(A7)
00002734  4EB8 21DA 3450          jsr       _delete_enemy
00002738  584F      3451          addq.w    #4,A7
                    3452   ; add_score(0x25);
0000273A  4878 0025 3453          pea       37
0000273E  4EB8 2012 3454          jsr       _add_score
00002742  584F      3455          addq.w    #4,A7
                    3456   check_bullet_hit_1:
00002744  241F      3457          move.l    (A7)+,D2
00002746  4E5E      3458          unlk      A6
00002748  4E75      3459          rts
                    3460   ; }
                    3461   ; }
                    3462   ; void fire_bullet()
                    3463   ; {
                    3464   _fire_bullet:
                    3465   ; bullet_x = player_x + 13;
0000274A  1039 0803 3466          move.b    _player_x.L,D0
0000274E  0436      
00002750  0600 000D 3467          add.b     #13,D0
00002754  13C0 0803 3468          move.b    D0,_bullet_x.L
00002758  0438      
                    3469   ; bullet_y = 3;
0000275A  13FC 0003 3470          move.b    #3,_bullet_y.L
0000275E  0803 043A 
                    3471   ; xor_sprite(bullet_bitmap, bullet_x, bullet_y); /* Draw bullet */
00002762  1239 0803 3472          move.b    _bullet_y.L,D1
00002766  043A      
00002768  C2BC 0000 3473          and.l     #255,D1
0000276C  00FF      
0000276E  2F01      3474          move.l    D1,-(A7)
00002770  1239 0803 3475          move.b    _bullet_x.L,D1
00002774  0438      
00002776  C2BC 0000 3476          and.l     #255,D1
0000277A  00FF      
0000277C  2F01      3477          move.l    D1,-(A7)
0000277E  4879 0803 3478          pea       _bullet_bitmap.L
00002782  06D6      
00002784  4EB8 1BAE 3479          jsr       _xor_sprite
00002788  DEFC 000C 3480          add.w     #12,A7
0000278C  4E75      3481          rts
                    3482   ; }
                    3483   ; void move_bullet()
                    3484   ; {
                    3485   _move_bullet:
0000278E  4E56 FFFC 3486          link      A6,#-4
00002792  2F0A      3487          move.l    A2,-(A7)
00002794  45F9 0803 3488          lea       _bullet_bitmap.L,A2
00002798  06D6      
                    3489   ; byte leftover;
                    3490   ; leftover = xor_sprite(bullet_bitmap, bullet_x, bullet_y); /* Erase bullet */
0000279A  1239 0803 3491          move.b    _bullet_y.L,D1
0000279E  043A      
000027A0  C2BC 0000 3492          and.l     #255,D1
000027A4  00FF      
000027A6  2F01      3493          move.l    D1,-(A7)
000027A8  1239 0803 3494          move.b    _bullet_x.L,D1
000027AC  0438      
000027AE  C2BC 0000 3495          and.l     #255,D1
000027B2  00FF      
000027B4  2F01      3496          move.l    D1,-(A7)
000027B6  2F0A      3497          move.l    A2,-(A7)
000027B8  4EB8 1BAE 3498          jsr       _xor_sprite
000027BC  DEFC 000C 3499          add.w     #12,A7
000027C0  1D40 FFFF 3500          move.b    D0,-1(A6)
                    3501   ; if (leftover || bullet_y > 26) {
000027C4  102E FFFF 3502          move.b    -1(A6),D0
000027C8  C0BC 0000 3503          and.l     #255,D0
000027CC  00FF      
000027CE  660E      3504          bne.s     move_bullet_3
000027D0  1039 0803 3505          move.b    _bullet_y.L,D0
000027D4  043A      
000027D6  0C00 001A 3506          cmp.b     #26,D0
000027DA  6300 0054 3507          bls       move_bullet_1
                    3508   move_bullet_3:
                    3509   ; clear_sprite(bullet_bitmap, bullet_x, bullet_y);
000027DE  1239 0803 3510          move.b    _bullet_y.L,D1
000027E2  043A      
000027E4  C2BC 0000 3511          and.l     #255,D1
000027E8  00FF      
000027EA  2F01      3512          move.l    D1,-(A7)
000027EC  1239 0803 3513          move.b    _bullet_x.L,D1
000027F0  0438      
000027F2  C2BC 0000 3514          and.l     #255,D1
000027F6  00FF      
000027F8  2F01      3515          move.l    D1,-(A7)
000027FA  2F0A      3516          move.l    A2,-(A7)
000027FC  4EB8 1BBE 3517          jsr       _clear_sprite
00002800  DEFC 000C 3518          add.w     #12,A7
                    3519   ; check_bullet_hit(bullet_x, bullet_y + 2);
00002804  1239 0803 3520          move.b    _bullet_y.L,D1
00002808  043A      
0000280A  5401      3521          addq.b    #2,D1
0000280C  C2BC 0000 3522          and.l     #255,D1
00002810  00FF      
00002812  2F01      3523          move.l    D1,-(A7)
00002814  1239 0803 3524          move.b    _bullet_x.L,D1
00002818  0438      
0000281A  C2BC 0000 3525          and.l     #255,D1
0000281E  00FF      
00002820  2F01      3526          move.l    D1,-(A7)
00002822  4EB8 2708 3527          jsr       _check_bullet_hit
00002826  504F      3528          addq.w    #8,A7
                    3529   ; bullet_y = 0;
00002828  4239 0803 3530          clr.b     _bullet_y.L
0000282C  043A      
0000282E  602C      3531          bra.s     move_bullet_2
                    3532   move_bullet_1:
                    3533   ; } else {
                    3534   ; bullet_y++;
00002830  5239 0803 3535          addq.b    #1,_bullet_y.L
00002834  043A      
                    3536   ; xor_sprite(bullet_bitmap, bullet_x, bullet_y); /* Draw bullet */
00002836  1239 0803 3537          move.b    _bullet_y.L,D1
0000283A  043A      
0000283C  C2BC 0000 3538          and.l     #255,D1
00002840  00FF      
00002842  2F01      3539          move.l    D1,-(A7)
00002844  1239 0803 3540          move.b    _bullet_x.L,D1
00002848  0438      
0000284A  C2BC 0000 3541          and.l     #255,D1
0000284E  00FF      
00002850  2F01      3542          move.l    D1,-(A7)
00002852  2F0A      3543          move.l    A2,-(A7)
00002854  4EB8 1BAE 3544          jsr       _xor_sprite
00002858  DEFC 000C 3545          add.w     #12,A7
                    3546   move_bullet_2:
0000285C  245F      3547          move.l    (A7)+,A2
0000285E  4E5E      3548          unlk      A6
00002860  4E75      3549          rts
                    3550   ; }
                    3551   ; }
                    3552   ; void drop_bomb()
                    3553   ; {
                    3554   _drop_bomb:
00002862  2F02      3555          move.l    D2,-(A7)
                    3556   ; Enemy *e;
                    3557   ; e = &enemies[enemy_index];
00002864  41F9 0803 3558          lea       _enemies.L,A0
00002868  044A      
0000286A  1039 0803 3559          move.b    _enemy_index.L,D0
0000286E  0432      
00002870  C0BC 0000 3560          and.l     #255,D0
00002874  00FF      
00002876  C1FC 0003 3561          muls      #3,D0
0000287A  D1C0      3562          add.l     D0,A0
0000287C  2408      3563          move.l    A0,D2
                    3564   ; bomb_x = e->x + 7;
0000287E  2042      3565          move.l    D2,A0
00002880  1010      3566          move.b    (A0),D0
00002882  5E00      3567          addq.b    #7,D0
00002884  13C0 0803 3568          move.b    D0,_bomb_x.L
00002888  043C      
                    3569   ; bomb_y = e->y - 2;
0000288A  2042      3570          move.l    D2,A0
0000288C  1028 0001 3571          move.b    1(A0),D0
00002890  5500      3572          subq.b    #2,D0
00002892  13C0 0803 3573          move.b    D0,_bomb_y.L
00002896  043E      
                    3574   ; xor_sprite(bomb_bitmap, bomb_x, bomb_y); /* Draw bomb */
00002898  1239 0803 3575          move.b    _bomb_y.L,D1
0000289C  043E      
0000289E  C2BC 0000 3576          and.l     #255,D1
000028A2  00FF      
000028A4  2F01      3577          move.l    D1,-(A7)
000028A6  1239 0803 3578          move.b    _bomb_x.L,D1
000028AA  043C      
000028AC  C2BC 0000 3579          and.l     #255,D1
000028B0  00FF      
000028B2  2F01      3580          move.l    D1,-(A7)
000028B4  4879 0803 3581          pea       _bomb_bitmap.L
000028B8  06CE      
000028BA  4EB8 1BAE 3582          jsr       _xor_sprite
000028BE  DEFC 000C 3583          add.w     #12,A7
000028C2  241F      3584          move.l    (A7)+,D2
000028C4  4E75      3585          rts
                    3586   ; }
                    3587   ; void move_bomb()
                    3588   ; {
                    3589   _move_bomb:
000028C6  4E56 FFFC 3590          link      A6,#-4
000028CA  2F0A      3591          move.l    A2,-(A7)
000028CC  45F9 0803 3592          lea       _bomb_bitmap.L,A2
000028D0  06CE      
                    3593   ; byte leftover;
                    3594   ; leftover = xor_sprite(bomb_bitmap, bomb_x, bomb_y); /* Erase bomb */
000028D2  1239 0803 3595          move.b    _bomb_y.L,D1
000028D6  043E      
000028D8  C2BC 0000 3596          and.l     #255,D1
000028DC  00FF      
000028DE  2F01      3597          move.l    D1,-(A7)
000028E0  1239 0803 3598          move.b    _bomb_x.L,D1
000028E4  043C      
000028E6  C2BC 0000 3599          and.l     #255,D1
000028EA  00FF      
000028EC  2F01      3600          move.l    D1,-(A7)
000028EE  2F0A      3601          move.l    A2,-(A7)
000028F0  4EB8 1BAE 3602          jsr       _xor_sprite
000028F4  DEFC 000C 3603          add.w     #12,A7
000028F8  1D40 FFFF 3604          move.b    D0,-1(A6)
                    3605   ; if (bomb_y < 2) {
000028FC  1039 0803 3606          move.b    _bomb_y.L,D0
00002900  043E      
00002902  0C00 0002 3607          cmp.b     #2,D0
00002906  640A      3608          bhs.s     move_bomb_1
                    3609   ; bomb_y = 0;
00002908  4239 0803 3610          clr.b     _bomb_y.L
0000290C  043E      
0000290E  6000 0072 3611          bra       move_bomb_4
                    3612   move_bomb_1:
                    3613   ; } else if (leftover) {
00002912  4A2E FFFF 3614          tst.b     -1(A6)
00002916  673E      3615          beq.s     move_bomb_3
                    3616   ; erase_sprite(bomb_bitmap, bomb_x, bomb_y); /* Erase bunker */
00002918  1239 0803 3617          move.b    _bomb_y.L,D1
0000291C  043E      
0000291E  C2BC 0000 3618          and.l     #255,D1
00002922  00FF      
00002924  2F01      3619          move.l    D1,-(A7)
00002926  1239 0803 3620          move.b    _bomb_x.L,D1
0000292A  043C      
0000292C  C2BC 0000 3621          and.l     #255,D1
00002930  00FF      
00002932  2F01      3622          move.l    D1,-(A7)
00002934  2F0A      3623          move.l    A2,-(A7)
00002936  4EB8 1BB6 3624          jsr       _erase_sprite
0000293A  DEFC 000C 3625          add.w     #12,A7
                    3626   ; if (bomb_y < 3) {
0000293E  1039 0803 3627          move.b    _bomb_y.L,D0
00002942  043E      
00002944  0C00 0003 3628          cmp.b     #3,D0
00002948  6404      3629          bhs.s     move_bomb_5
                    3630   ; /* Player was hit (probably) */
                    3631   ; destroy_player();
0000294A  4EB8 2108 3632          jsr       _destroy_player
                    3633   move_bomb_5:
                    3634   ; }
                    3635   ; bomb_y = 0;
0000294E  4239 0803 3636          clr.b     _bomb_y.L
00002952  043E      
00002954  602C      3637          bra.s     move_bomb_4
                    3638   move_bomb_3:
                    3639   ; } else {
                    3640   ; bomb_y--;
00002956  5339 0803 3641          subq.b    #1,_bomb_y.L
0000295A  043E      
                    3642   ; xor_sprite(bomb_bitmap, bomb_x, bomb_y); /* Draw bomb */
0000295C  1239 0803 3643          move.b    _bomb_y.L,D1
00002960  043E      
00002962  C2BC 0000 3644          and.l     #255,D1
00002966  00FF      
00002968  2F01      3645          move.l    D1,-(A7)
0000296A  1239 0803 3646          move.b    _bomb_x.L,D1
0000296E  043C      
00002970  C2BC 0000 3647          and.l     #255,D1
00002974  00FF      
00002976  2F01      3648          move.l    D1,-(A7)
00002978  2F0A      3649          move.l    A2,-(A7)
0000297A  4EB8 1BAE 3650          jsr       _xor_sprite
0000297E  DEFC 000C 3651          add.w     #12,A7
                    3652   move_bomb_4:
00002982  245F      3653          move.l    (A7)+,A2
00002984  4E5E      3654          unlk      A6
00002986  4E75      3655          rts
                    3656   ; }
                    3657   ; }
                    3658   ; byte frame;
                    3659   ; void play_round() {
                    3660   _play_round:
                    3661   ; draw_playfield();
00002988  4EB8 2588 3662          jsr       _draw_playfield
                    3663   ; player_x = 96;
0000298C  13FC 0060 3664          move.b    #96,_player_x.L
00002990  0803 0436 
                    3665   ; bullet_y = 0;
00002994  4239 0803 3666          clr.b     _bullet_y.L
00002998  043A      
                    3667   ; bomb_y = 0;
0000299A  4239 0803 3668          clr.b     _bomb_y.L
0000299E  043E      
                    3669   ; frame = 0;
000029A0  4239 0803 3670          clr.b     _frame.L
000029A4  0776      
                    3671   ; while (player_x != 0xff && num_enemies) {
                    3672   play_round_1:
000029A6  1039 0803 3673          move.b    _player_x.L,D0
000029AA  0436      
000029AC  C07C 00FF 3674          and.w     #255,D0
000029B0  0C40 00FF 3675          cmp.w     #255,D0
000029B4  6700 0056 3676          beq       play_round_3
000029B8  1039 0803 3677          move.b    _num_enemies.L,D0
000029BC  0434      
000029BE  C0BC 0000 3678          and.l     #255,D0
000029C2  00FF      
000029C4  6700 0046 3679          beq       play_round_3
                    3680   ; delay_ms(COSMIC_IMPALAS_TIMER_DELAY_MS);
000029C8  4878 0032 3681          pea       50
000029CC  4EB8 1C06 3682          jsr       _delay_ms
000029D0  584F      3683          addq.w    #4,A7
                    3684   ; move_player();
000029D2  4EB8 1BC6 3685          jsr       _move_player
                    3686   ; if (bullet_y) {
000029D6  4A39 0803 3687          tst.b     _bullet_y.L
000029DA  043A      
000029DC  6704      3688          beq.s     play_round_4
                    3689   ; move_bullet();
000029DE  4EB8 278E 3690          jsr       _move_bullet
                    3691   play_round_4:
                    3692   ; }
                    3693   ; update_next_enemy();
000029E2  4EB8 2264 3694          jsr       _update_next_enemy
                    3695   ; if (frame & 1) {
000029E6  1039 0803 3696          move.b    _frame.L,D0
000029EA  0776      
000029EC  C03C 0001 3697          and.b     #1,D0
000029F0  6712      3698          beq.s     play_round_9
                    3699   ; if (bomb_y == 0) {
000029F2  1039 0803 3700          move.b    _bomb_y.L,D0
000029F6  043E      
000029F8  6606      3701          bne.s     play_round_8
                    3702   ; drop_bomb();
000029FA  4EB8 2862 3703          jsr       _drop_bomb
000029FE  6004      3704          bra.s     play_round_9
                    3705   play_round_8:
                    3706   ; } else {
                    3707   ; move_bomb();
00002A00  4EB8 28C6 3708          jsr       _move_bomb
                    3709   play_round_9:
                    3710   ; }
                    3711   ; }
                    3712   ; frame++;
00002A04  5239 0803 3713          addq.b    #1,_frame.L
00002A08  0776      
00002A0A  609A      3714          bra       play_round_1
                    3715   play_round_3:
00002A0C  4E75      3716          rts
                    3717   ; }
                    3718   ; }
                    3719   ; void init_game() {
                    3720   _init_game:
                    3721   ; score = 0;
00002A0E  4279 0803 3722          clr.w     _score.L
00002A12  0446      
                    3723   ; lives = MAXLIVES;
00002A14  13FC 0005 3724          move.b    #5,_lives.L
00002A18  0803 0448 
                    3725   ; curplayer = 0;
00002A1C  4239 0803 3726          clr.b     _curplayer.L
00002A20  0444      
00002A22  4E75      3727          rts
                    3728   ; }
                    3729   ; void game_over_msg() {
                    3730   _game_over_msg:
00002A24  48E7 2020 3731          movem.l   D2/A2,-(A7)
00002A28  45F8 1E22 3732          lea       _draw_string.L,A2
                    3733   ; byte i;
                    3734   ; for (i=0; i<50; i++) {
00002A2C  4202      3735          clr.b     D2
                    3736   game_over_msg_1:
00002A2E  0C02 0032 3737          cmp.b     #50,D2
00002A32  6400 006A 3738          bhs       game_over_msg_3
                    3739   ; draw_string(" *************** ", 5, 15);
00002A36  4878 000F 3740          pea       15
00002A3A  4878 0005 3741          pea       5
00002A3E  4879 0000 3742          pea       @cosmic~1_2.L
00002A42  488C      
00002A44  4E92      3743          jsr       (A2)
00002A46  DEFC 000C 3744          add.w     #12,A7
                    3745   ; draw_string("***           ***", 5, 16);
00002A4A  4878 0010 3746          pea       16
00002A4E  4878 0005 3747          pea       5
00002A52  4879 0000 3748          pea       @cosmic~1_3.L
00002A56  489E      
00002A58  4E92      3749          jsr       (A2)
00002A5A  DEFC 000C 3750          add.w     #12,A7
                    3751   ; draw_string("**  GAME OVER  **", 5, 17);
00002A5E  4878 0011 3752          pea       17
00002A62  4878 0005 3753          pea       5
00002A66  4879 0000 3754          pea       @cosmic~1_4.L
00002A6A  48B0      
00002A6C  4E92      3755          jsr       (A2)
00002A6E  DEFC 000C 3756          add.w     #12,A7
                    3757   ; draw_string("***           ***", 5, 18);
00002A72  4878 0012 3758          pea       18
00002A76  4878 0005 3759          pea       5
00002A7A  4879 0000 3760          pea       @cosmic~1_5.L
00002A7E  48C2      
00002A80  4E92      3761          jsr       (A2)
00002A82  DEFC 000C 3762          add.w     #12,A7
                    3763   ; draw_string(" *************** ", 5, 19);
00002A86  4878 0013 3764          pea       19
00002A8A  4878 0005 3765          pea       5
00002A8E  4879 0000 3766          pea       @cosmic~1_6.L
00002A92  48D4      
00002A94  4E92      3767          jsr       (A2)
00002A96  DEFC 000C 3768          add.w     #12,A7
00002A9A  5202      3769          addq.b    #1,D2
00002A9C  6090      3770          bra       game_over_msg_1
                    3771   game_over_msg_3:
00002A9E  4CDF 0404 3772          movem.l   (A7)+,D2/A2
00002AA2  4E75      3773          rts
                    3774   ; }
                    3775   ; }
                    3776   ; void play_game() {
                    3777   _play_game:
                    3778   ; attract = 0;
00002AA4  4239 0803 3779          clr.b     _attract.L
00002AA8  0440      
                    3780   ; init_game();
00002AAA  4EB8 2A0E 3781          jsr       _init_game
                    3782   ; init_enemies();
00002AAE  4EB8 2140 3783          jsr       _init_enemies
                    3784   ; while (lives) {
                    3785   play_game_1:
00002AB2  4A39 0803 3786          tst.b     _lives.L
00002AB6  0448      
00002AB8  6712      3787          beq.s     play_game_3
                    3788   ; play_round();
00002ABA  4EB8 2988 3789          jsr       _play_round
                    3790   ; if (num_enemies == 0) {
00002ABE  1039 0803 3791          move.b    _num_enemies.L,D0
00002AC2  0434      
00002AC4  6604      3792          bne.s     play_game_4
                    3793   ; init_enemies();
00002AC6  4EB8 2140 3794          jsr       _init_enemies
                    3795   play_game_4:
00002ACA  60E6      3796          bra       play_game_1
                    3797   play_game_3:
                    3798   ; }
                    3799   ; }
                    3800   ; game_over_msg();
00002ACC  4EB8 2A24 3801          jsr       _game_over_msg
00002AD0  4E75      3802          rts
                    3803   ; }
                    3804   ; void attract_mode() {
                    3805   _attract_mode:
                    3806   ; attract = 1;
00002AD2  13FC 0001 3807          move.b    #1,_attract.L
00002AD6  0803 0440 
                    3808   ; while (1) {
                    3809   attract_mode_1:
                    3810   ; init_enemies();
00002ADA  4EB8 2140 3811          jsr       _init_enemies
                    3812   ; play_round();
00002ADE  4EB8 2988 3813          jsr       _play_round
00002AE2  60F6      3814          bra       attract_mode_1
                    3815   ; }
                    3816   ; }
                    3817   ; void initialize_all_bitmaps() {
                    3818   _initialize_all_bitmaps:
00002AE4  48E7 003C 3819          movem.l   A2/A3/A4/A5,-(A7)
00002AE8  45F9 0803 3820          lea       _font8x8.L,A2
00002AEC  049E      
00002AEE  47F9 0803 3821          lea       _player_bitmap.L,A3
00002AF2  0696      
00002AF4  49F9 0803 3822          lea       _enemy4_bitmap.L,A4
00002AF8  0740      
00002AFA  4BF9 0803 3823          lea       _enemy3_bitmap.L,A5
00002AFE  071E      
                    3824   ; /* Initialize player_bitmap */
                    3825   ; player_bitmap[0] = 2;
00002B00  16BC 0002 3826          move.b    #2,(A3)
                    3827   ; player_bitmap[1] = 27;
00002B04  177C 001B 3828          move.b    #27,1(A3)
00002B08  0001      
                    3829   ; player_bitmap[2] = 0x00;
00002B0A  422B 0002 3830          clr.b     2(A3)
                    3831   ; player_bitmap[3] = 0x00;
00002B0E  422B 0003 3832          clr.b     3(A3)
                    3833   ; player_bitmap[4] = 0x00;
00002B12  422B 0004 3834          clr.b     4(A3)
                    3835   ; player_bitmap[5] = 0x00;
00002B16  422B 0005 3836          clr.b     5(A3)
                    3837   ; player_bitmap[6] = 0x0F;
00002B1A  177C 000F 3838          move.b    #15,6(A3)
00002B1E  0006      
                    3839   ; player_bitmap[7] = 0x00;
00002B20  422B 0007 3840          clr.b     7(A3)
                    3841   ; player_bitmap[8] = 0x3E;
00002B24  177C 003E 3842          move.b    #62,8(A3)
00002B28  0008      
                    3843   ; player_bitmap[9] = 0x00;
00002B2A  422B 0009 3844          clr.b     9(A3)
                    3845   ; player_bitmap[10] = 0xF4;
00002B2E  177C 00F4 3846          move.b    #244,10(A3)
00002B32  000A      
                    3847   ; player_bitmap[11] = 0x07;
00002B34  177C 0007 3848          move.b    #7,11(A3)
00002B38  000B      
                    3849   ; player_bitmap[12] = 0xEC;
00002B3A  177C 00EC 3850          move.b    #236,12(A3)
00002B3E  000C      
                    3851   ; player_bitmap[13] = 0x00;
00002B40  422B 000D 3852          clr.b     13(A3)
                    3853   ; player_bitmap[14] = 0x76;
00002B44  177C 0076 3854          move.b    #118,14(A3)
00002B48  000E      
                    3855   ; player_bitmap[15] = 0x00;
00002B4A  422B 000F 3856          clr.b     15(A3)
                    3857   ; player_bitmap[16] = 0x2B;
00002B4E  177C 002B 3858          move.b    #43,16(A3)
00002B52  0010      
                    3859   ; player_bitmap[17] = 0x00;
00002B54  422B 0011 3860          clr.b     17(A3)
                    3861   ; player_bitmap[18] = 0x33;
00002B58  177C 0033 3862          move.b    #51,18(A3)
00002B5C  0012      
                    3863   ; player_bitmap[19] = 0x00;
00002B5E  422B 0013 3864          clr.b     19(A3)
                    3865   ; player_bitmap[20] = 0x75;
00002B62  177C 0075 3866          move.b    #117,20(A3)
00002B66  0014      
                    3867   ; player_bitmap[21] = 0x00;
00002B68  422B 0015 3868          clr.b     21(A3)
                    3869   ; player_bitmap[22] = 0xF5;
00002B6C  177C 00F5 3870          move.b    #245,22(A3)
00002B70  0016      
                    3871   ; player_bitmap[23] = 0x00;
00002B72  422B 0017 3872          clr.b     23(A3)
                    3873   ; player_bitmap[24] = 0xEB;
00002B76  177C 00EB 3874          move.b    #235,24(A3)
00002B7A  0018      
                    3875   ; player_bitmap[25] = 0x31;
00002B7C  177C 0031 3876          move.b    #49,25(A3)
00002B80  0019      
                    3877   ; player_bitmap[26] = 0xBF;
00002B82  177C 00BF 3878          move.b    #191,26(A3)
00002B86  001A      
                    3879   ; player_bitmap[27] = 0xEF;
00002B88  177C 00EF 3880          move.b    #239,27(A3)
00002B8C  001B      
                    3881   ; player_bitmap[28] = 0x3F;
00002B8E  177C 003F 3882          move.b    #63,28(A3)
00002B92  001C      
                    3883   ; player_bitmap[29] = 0xCF;
00002B94  177C 00CF 3884          move.b    #207,29(A3)
00002B98  001D      
                    3885   ; player_bitmap[30] = 0xBF;
00002B9A  177C 00BF 3886          move.b    #191,30(A3)
00002B9E  001E      
                    3887   ; player_bitmap[31] = 0xEF;
00002BA0  177C 00EF 3888          move.b    #239,31(A3)
00002BA4  001F      
                    3889   ; player_bitmap[32] = 0xEB;
00002BA6  177C 00EB 3890          move.b    #235,32(A3)
00002BAA  0020      
                    3891   ; player_bitmap[33] = 0x31;
00002BAC  177C 0031 3892          move.b    #49,33(A3)
00002BB0  0021      
                    3893   ; player_bitmap[34] = 0xF5;
00002BB2  177C 00F5 3894          move.b    #245,34(A3)
00002BB6  0022      
                    3895   ; player_bitmap[35] = 0x00;
00002BB8  422B 0023 3896          clr.b     35(A3)
                    3897   ; player_bitmap[36] = 0x75;
00002BBC  177C 0075 3898          move.b    #117,36(A3)
00002BC0  0024      
                    3899   ; player_bitmap[37] = 0x00;
00002BC2  422B 0025 3900          clr.b     37(A3)
                    3901   ; player_bitmap[38] = 0x33;
00002BC6  177C 0033 3902          move.b    #51,38(A3)
00002BCA  0026      
                    3903   ; player_bitmap[39] = 0x00;
00002BCC  422B 0027 3904          clr.b     39(A3)
                    3905   ; player_bitmap[40] = 0x2B;
00002BD0  177C 002B 3906          move.b    #43,40(A3)
00002BD4  0028      
                    3907   ; player_bitmap[41] = 0x00;
00002BD6  422B 0029 3908          clr.b     41(A3)
                    3909   ; player_bitmap[42] = 0x76;
00002BDA  177C 0076 3910          move.b    #118,42(A3)
00002BDE  002A      
                    3911   ; player_bitmap[43] = 0x00;
00002BE0  422B 002B 3912          clr.b     43(A3)
                    3913   ; player_bitmap[44] = 0xEC;
00002BE4  177C 00EC 3914          move.b    #236,44(A3)
00002BE8  002C      
                    3915   ; player_bitmap[45] = 0x00;
00002BEA  422B 002D 3916          clr.b     45(A3)
                    3917   ; player_bitmap[46] = 0xF4;
00002BEE  177C 00F4 3918          move.b    #244,46(A3)
00002BF2  002E      
                    3919   ; player_bitmap[47] = 0x07;
00002BF4  177C 0007 3920          move.b    #7,47(A3)
00002BF8  002F      
                    3921   ; player_bitmap[48] = 0x3E;
00002BFA  177C 003E 3922          move.b    #62,48(A3)
00002BFE  0030      
                    3923   ; player_bitmap[49] = 0x00;
00002C00  422B 0031 3924          clr.b     49(A3)
                    3925   ; player_bitmap[50] = 0x0F;
00002C04  177C 000F 3926          move.b    #15,50(A3)
00002C08  0032      
                    3927   ; player_bitmap[51] = 0x00;
00002C0A  422B 0033 3928          clr.b     51(A3)
                    3929   ; player_bitmap[52] = 0x00;
00002C0E  422B 0034 3930          clr.b     52(A3)
                    3931   ; player_bitmap[53] = 0x00;
00002C12  422B 0035 3932          clr.b     53(A3)
                    3933   ; player_bitmap[54] = 0x00;
00002C16  422B 0036 3934          clr.b     54(A3)
                    3935   ; player_bitmap[55] = 0x00;
00002C1A  422B 0037 3936          clr.b     55(A3)
                    3937   ; /* Initialize bomb_bitmap */
                    3938   ; bomb_bitmap[0] = 1;
00002C1E  13FC 0001 3939          move.b    #1,_bomb_bitmap.L
00002C22  0803 06CE 
                    3940   ; bomb_bitmap[1] = 5;
00002C26  13FC 0005 3941          move.b    #5,_bomb_bitmap+1.L
00002C2A  0803 06CF 
                    3942   ; bomb_bitmap[2] = 0x88;
00002C2E  13FC 0088 3943          move.b    #136,_bomb_bitmap+2.L
00002C32  0803 06D0 
                    3944   ; bomb_bitmap[3] = 0x55;
00002C36  13FC 0055 3945          move.b    #85,_bomb_bitmap+3.L
00002C3A  0803 06D1 
                    3946   ; bomb_bitmap[4] = 0x77;
00002C3E  13FC 0077 3947          move.b    #119,_bomb_bitmap+4.L
00002C42  0803 06D2 
                    3948   ; bomb_bitmap[5] = 0x55;
00002C46  13FC 0055 3949          move.b    #85,_bomb_bitmap+5.L
00002C4A  0803 06D3 
                    3950   ; bomb_bitmap[6] = 0x88;
00002C4E  13FC 0088 3951          move.b    #136,_bomb_bitmap+6.L
00002C52  0803 06D4 
                    3952   ; /* Initialize bullet_bitmap */
                    3953   ; bullet_bitmap[0] = 2;
00002C56  13FC 0002 3954          move.b    #2,_bullet_bitmap.L
00002C5A  0803 06D6 
                    3955   ; bullet_bitmap[1] = 2;
00002C5E  13FC 0002 3956          move.b    #2,_bullet_bitmap+1.L
00002C62  0803 06D7 
                    3957   ; bullet_bitmap[2] = 0x88;
00002C66  13FC 0088 3958          move.b    #136,_bullet_bitmap+2.L
00002C6A  0803 06D8 
                    3959   ; bullet_bitmap[3] = 0x88;
00002C6E  13FC 0088 3960          move.b    #136,_bullet_bitmap+3.L
00002C72  0803 06D9 
                    3961   ; bullet_bitmap[4] = 0x44;
00002C76  13FC 0044 3962          move.b    #68,_bullet_bitmap+4.L
00002C7A  0803 06DA 
                    3963   ; bullet_bitmap[5] = 0x44;
00002C7E  13FC 0044 3964          move.b    #68,_bullet_bitmap+5.L
00002C82  0803 06DB 
                    3965   ; /* Initialize enemy1_bitmap */
                    3966   ; enemy1_bitmap[0] = 2;
00002C86  13FC 0002 3967          move.b    #2,_enemy1_bitmap.L
00002C8A  0803 06DA 
                    3968   ; enemy1_bitmap[1] = 17;
00002C8E  13FC 0011 3969          move.b    #17,_enemy1_bitmap+1.L
00002C92  0803 06DB 
                    3970   ; enemy1_bitmap[2] = 0x00;
00002C96  4239 0803 3971          clr.b     _enemy1_bitmap+2.L
00002C9A  06DC      
                    3972   ; enemy1_bitmap[3] = 0x00;
00002C9C  4239 0803 3973          clr.b     _enemy1_bitmap+3.L
00002CA0  06DD      
                    3974   ; enemy1_bitmap[4] = 0x00;
00002CA2  4239 0803 3975          clr.b     _enemy1_bitmap+4.L
00002CA6  06DE      
                    3976   ; enemy1_bitmap[5] = 0x0C;
00002CA8  13FC 000C 3977          move.b    #12,_enemy1_bitmap+5.L
00002CAC  0803 06DF 
                    3978   ; enemy1_bitmap[6] = 0x04;
00002CB0  13FC 0004 3979          move.b    #4,_enemy1_bitmap+6.L
00002CB4  0803 06E0 
                    3980   ; enemy1_bitmap[7] = 0x1E;
00002CB8  13FC 001E 3981          move.b    #30,_enemy1_bitmap+7.L
00002CBC  0803 06E1 
                    3982   ; enemy1_bitmap[8] = 0x46;
00002CC0  13FC 0046 3983          move.b    #70,_enemy1_bitmap+8.L
00002CC4  0803 06E2 
                    3984   ; enemy1_bitmap[9] = 0x3F;
00002CC8  13FC 003F 3985          move.b    #63,_enemy1_bitmap+9.L
00002CCC  0803 06E3 
                    3986   ; enemy1_bitmap[10] = 0xB8;
00002CD0  13FC 00B8 3987          move.b    #184,_enemy1_bitmap+10.L
00002CD4  0803 06E4 
                    3988   ; enemy1_bitmap[11] = 0x7F;
00002CD8  13FC 007F 3989          move.b    #127,_enemy1_bitmap+11.L
00002CDC  0803 06E5 
                    3990   ; enemy1_bitmap[12] = 0xB0;
00002CE0  13FC 00B0 3991          move.b    #176,_enemy1_bitmap+12.L
00002CE4  0803 06E6 
                    3992   ; enemy1_bitmap[13] = 0x7F;
00002CE8  13FC 007F 3993          move.b    #127,_enemy1_bitmap+13.L
00002CEC  0803 06E7 
                    3994   ; enemy1_bitmap[14] = 0xBA;
00002CF0  13FC 00BA 3995          move.b    #186,_enemy1_bitmap+14.L
00002CF4  0803 06E8 
                    3996   ; enemy1_bitmap[15] = 0x7F;
00002CF8  13FC 007F 3997          move.b    #127,_enemy1_bitmap+15.L
00002CFC  0803 06E9 
                    3998   ; enemy1_bitmap[16] = 0xFD;
00002D00  13FC 00FD 3999          move.b    #253,_enemy1_bitmap+16.L
00002D04  0803 06EA 
                    4000   ; enemy1_bitmap[17] = 0x3F;
00002D08  13FC 003F 4001          move.b    #63,_enemy1_bitmap+17.L
00002D0C  0803 06EB 
                    4002   ; enemy1_bitmap[18] = 0xFC;
00002D10  13FC 00FC 4003          move.b    #252,_enemy1_bitmap+18.L
00002D14  0803 06EC 
                    4004   ; enemy1_bitmap[19] = 0x07;
00002D18  13FC 0007 4005          move.b    #7,_enemy1_bitmap+19.L
00002D1C  0803 06ED 
                    4006   ; enemy1_bitmap[20] = 0xFC;
00002D20  13FC 00FC 4007          move.b    #252,_enemy1_bitmap+20.L
00002D24  0803 06EE 
                    4008   ; enemy1_bitmap[21] = 0x07;
00002D28  13FC 0007 4009          move.b    #7,_enemy1_bitmap+21.L
00002D2C  0803 06EF 
                    4010   ; enemy1_bitmap[22] = 0xFD;
00002D30  13FC 00FD 4011          move.b    #253,_enemy1_bitmap+22.L
00002D34  0803 06F0 
                    4012   ; enemy1_bitmap[23] = 0x3F;
00002D38  13FC 003F 4013          move.b    #63,_enemy1_bitmap+23.L
00002D3C  0803 06F1 
                    4014   ; enemy1_bitmap[24] = 0xBA;
00002D40  13FC 00BA 4015          move.b    #186,_enemy1_bitmap+24.L
00002D44  0803 06F2 
                    4016   ; enemy1_bitmap[25] = 0x7F;
00002D48  13FC 007F 4017          move.b    #127,_enemy1_bitmap+25.L
00002D4C  0803 06F3 
                    4018   ; enemy1_bitmap[26] = 0xB0;
00002D50  13FC 00B0 4019          move.b    #176,_enemy1_bitmap+26.L
00002D54  0803 06F4 
                    4020   ; enemy1_bitmap[27] = 0x7F;
00002D58  13FC 007F 4021          move.b    #127,_enemy1_bitmap+27.L
00002D5C  0803 06F5 
                    4022   ; enemy1_bitmap[28] = 0xB8;
00002D60  13FC 00B8 4023          move.b    #184,_enemy1_bitmap+28.L
00002D64  0803 06F6 
                    4024   ; enemy1_bitmap[29] = 0x7F;
00002D68  13FC 007F 4025          move.b    #127,_enemy1_bitmap+29.L
00002D6C  0803 06F7 
                    4026   ; enemy1_bitmap[30] = 0x46;
00002D70  13FC 0046 4027          move.b    #70,_enemy1_bitmap+30.L
00002D74  0803 06F8 
                    4028   ; enemy1_bitmap[31] = 0x3F;
00002D78  13FC 003F 4029          move.b    #63,_enemy1_bitmap+31.L
00002D7C  0803 06F9 
                    4030   ; enemy1_bitmap[32] = 0x04;
00002D80  13FC 0004 4031          move.b    #4,_enemy1_bitmap+32.L
00002D84  0803 06FA 
                    4032   ; enemy1_bitmap[33] = 0x1E;
00002D88  13FC 001E 4033          move.b    #30,_enemy1_bitmap+33.L
00002D8C  0803 06FB 
                    4034   ; /* Initialize enemy2_bitmap */
                    4035   ; enemy2_bitmap[0] = 2;
00002D90  13FC 0002 4036          move.b    #2,_enemy2_bitmap.L
00002D94  0803 06FC 
                    4037   ; enemy2_bitmap[1] = 16;
00002D98  13FC 0010 4038          move.b    #16,_enemy2_bitmap+1.L
00002D9C  0803 06FD 
                    4039   ; enemy2_bitmap[2] = 0x26;
00002DA0  13FC 0026 4040          move.b    #38,_enemy2_bitmap+2.L
00002DA4  0803 06FE 
                    4041   ; enemy2_bitmap[3] = 0x00;
00002DA8  4239 0803 4042          clr.b     _enemy2_bitmap+3.L
00002DAC  06FF      
                    4043   ; enemy2_bitmap[4] = 0x59;
00002DAE  13FC 0059 4044          move.b    #89,_enemy2_bitmap+4.L
00002DB2  0803 0700 
                    4045   ; enemy2_bitmap[5] = 0x10;
00002DB6  13FC 0010 4046          move.b    #16,_enemy2_bitmap+5.L
00002DBA  0803 0701 
                    4047   ; enemy2_bitmap[6] = 0x10;
00002DBE  13FC 0010 4048          move.b    #16,_enemy2_bitmap+6.L
00002DC2  0803 0702 
                    4049   ; enemy2_bitmap[7] = 0x30;
00002DC6  13FC 0030 4050          move.b    #48,_enemy2_bitmap+7.L
00002DCA  0803 0703 
                    4051   ; enemy2_bitmap[8] = 0x33;
00002DCE  13FC 0033 4052          move.b    #51,_enemy2_bitmap+8.L
00002DD2  0803 0704 
                    4053   ; enemy2_bitmap[9] = 0x18;
00002DD6  13FC 0018 4054          move.b    #24,_enemy2_bitmap+9.L
00002DDA  0803 0705 
                    4055   ; enemy2_bitmap[10] = 0xE6;
00002DDE  13FC 00E6 4056          move.b    #230,_enemy2_bitmap+10.L
00002DE2  0803 0706 
                    4057   ; enemy2_bitmap[11] = 0x61;
00002DE6  13FC 0061 4058          move.b    #97,_enemy2_bitmap+11.L
00002DEA  0803 0707 
                    4059   ; enemy2_bitmap[12] = 0xC4;
00002DEE  13FC 00C4 4060          move.b    #196,_enemy2_bitmap+12.L
00002DF2  0803 0708 
                    4061   ; enemy2_bitmap[13] = 0x56;
00002DF6  13FC 0056 4062          move.b    #86,_enemy2_bitmap+13.L
00002DFA  0803 0709 
                    4063   ; enemy2_bitmap[14] = 0x03;
00002DFE  13FC 0003 4064          move.b    #3,_enemy2_bitmap+14.L
00002E02  0803 070A 
                    4065   ; enemy2_bitmap[15] = 0x03;
00002E06  13FC 0003 4066          move.b    #3,_enemy2_bitmap+15.L
00002E0A  0803 070B 
                    4067   ; enemy2_bitmap[16] = 0xDC;
00002E0E  13FC 00DC 4068          move.b    #220,_enemy2_bitmap+16.L
00002E12  0803 070C 
                    4069   ; enemy2_bitmap[17] = 0x03;
00002E16  13FC 0003 4070          move.b    #3,_enemy2_bitmap+17.L
00002E1A  0803 070D 
                    4071   ; enemy2_bitmap[18] = 0xDC;
00002E1E  13FC 00DC 4072          move.b    #220,_enemy2_bitmap+18.L
00002E22  0803 070E 
                    4073   ; enemy2_bitmap[19] = 0x03;
00002E26  13FC 0003 4074          move.b    #3,_enemy2_bitmap+19.L
00002E2A  0803 070F 
                    4075   ; enemy2_bitmap[20] = 0x03;
00002E2E  13FC 0003 4076          move.b    #3,_enemy2_bitmap+20.L
00002E32  0803 0710 
                    4077   ; enemy2_bitmap[21] = 0x03;
00002E36  13FC 0003 4078          move.b    #3,_enemy2_bitmap+21.L
00002E3A  0803 0711 
                    4079   ; enemy2_bitmap[22] = 0xC4;
00002E3E  13FC 00C4 4080          move.b    #196,_enemy2_bitmap+22.L
00002E42  0803 0712 
                    4081   ; enemy2_bitmap[23] = 0x56;
00002E46  13FC 0056 4082          move.b    #86,_enemy2_bitmap+23.L
00002E4A  0803 0713 
                    4083   ; enemy2_bitmap[24] = 0xE6;
00002E4E  13FC 00E6 4084          move.b    #230,_enemy2_bitmap+24.L
00002E52  0803 0714 
                    4085   ; enemy2_bitmap[25] = 0x61;
00002E56  13FC 0061 4086          move.b    #97,_enemy2_bitmap+25.L
00002E5A  0803 0715 
                    4087   ; enemy2_bitmap[26] = 0x33;
00002E5E  13FC 0033 4088          move.b    #51,_enemy2_bitmap+26.L
00002E62  0803 0716 
                    4089   ; enemy2_bitmap[27] = 0x18;
00002E66  13FC 0018 4090          move.b    #24,_enemy2_bitmap+27.L
00002E6A  0803 0717 
                    4091   ; enemy2_bitmap[28] = 0x10;
00002E6E  13FC 0010 4092          move.b    #16,_enemy2_bitmap+28.L
00002E72  0803 0718 
                    4093   ; enemy2_bitmap[29] = 0x30;
00002E76  13FC 0030 4094          move.b    #48,_enemy2_bitmap+29.L
00002E7A  0803 0719 
                    4095   ; enemy2_bitmap[30] = 0x59;
00002E7E  13FC 0059 4096          move.b    #89,_enemy2_bitmap+30.L
00002E82  0803 071A 
                    4097   ; enemy2_bitmap[31] = 0x10;
00002E86  13FC 0010 4098          move.b    #16,_enemy2_bitmap+31.L
00002E8A  0803 071B 
                    4099   ; enemy2_bitmap[32] = 0x26;
00002E8E  13FC 0026 4100          move.b    #38,_enemy2_bitmap+32.L
00002E92  0803 071C 
                    4101   ; enemy2_bitmap[33] = 0x00;
00002E96  4239 0803 4102          clr.b     _enemy2_bitmap+33.L
00002E9A  071D      
                    4103   ; /* Initialize enemy3_bitmap */
                    4104   ; enemy3_bitmap[0] = 2;
00002E9C  1ABC 0002 4105          move.b    #2,(A5)
                    4106   ; enemy3_bitmap[1] = 16;
00002EA0  1B7C 0010 4107          move.b    #16,1(A5)
00002EA4  0001      
                    4108   ; enemy3_bitmap[2] = 0x80;
00002EA6  1B7C 0080 4109          move.b    #128,2(A5)
00002EAA  0002      
                    4110   ; enemy3_bitmap[3] = 0x1F;
00002EAC  1B7C 001F 4111          move.b    #31,3(A5)
00002EB0  0003      
                    4112   ; enemy3_bitmap[4] = 0xC0;
00002EB2  1B7C 00C0 4113          move.b    #192,4(A5)
00002EB6  0004      
                    4114   ; enemy3_bitmap[5] = 0x03;
00002EB8  1B7C 0003 4115          move.b    #3,5(A5)
00002EBC  0005      
                    4116   ; enemy3_bitmap[6] = 0xF8;
00002EBE  1B7C 00F8 4117          move.b    #248,6(A5)
00002EC2  0006      
                    4118   ; enemy3_bitmap[7] = 0x3F;
00002EC4  1B7C 003F 4119          move.b    #63,7(A5)
00002EC8  0007      
                    4120   ; enemy3_bitmap[8] = 0x70;
00002ECA  1B7C 0070 4121          move.b    #112,8(A5)
00002ECE  0008      
                    4122   ; enemy3_bitmap[9] = 0x00;
00002ED0  422D 0009 4123          clr.b     9(A5)
                    4124   ; enemy3_bitmap[10] = 0xF0;
00002ED4  1B7C 00F0 4125          move.b    #240,10(A5)
00002ED8  000A      
                    4126   ; enemy3_bitmap[11] = 0x01;
00002EDA  1B7C 0001 4127          move.b    #1,11(A5)
00002EDE  000B      
                    4128   ; enemy3_bitmap[12] = 0xFC;
00002EE0  1B7C 00FC 4129          move.b    #252,12(A5)
00002EE4  000C      
                    4130   ; enemy3_bitmap[13] = 0x07;
00002EE6  1B7C 0007 4131          move.b    #7,13(A5)
00002EEA  000D      
                    4132   ; enemy3_bitmap[14] = 0xE8;
00002EEC  1B7C 00E8 4133          move.b    #232,14(A5)
00002EF0  000E      
                    4134   ; enemy3_bitmap[15] = 0x01;
00002EF2  1B7C 0001 4135          move.b    #1,15(A5)
00002EF6  000F      
                    4136   ; enemy3_bitmap[16] = 0xF8;
00002EF8  1B7C 00F8 4137          move.b    #248,16(A5)
00002EFC  0010      
                    4138   ; enemy3_bitmap[17] = 0x03;
00002EFE  1B7C 0003 4139          move.b    #3,17(A5)
00002F02  0011      
                    4140   ; enemy3_bitmap[18] = 0xF8;
00002F04  1B7C 00F8 4141          move.b    #248,18(A5)
00002F08  0012      
                    4142   ; enemy3_bitmap[19] = 0x03;
00002F0A  1B7C 0003 4143          move.b    #3,19(A5)
00002F0E  0013      
                    4144   ; enemy3_bitmap[20] = 0xE8;
00002F10  1B7C 00E8 4145          move.b    #232,20(A5)
00002F14  0014      
                    4146   ; enemy3_bitmap[21] = 0x01;
00002F16  1B7C 0001 4147          move.b    #1,21(A5)
00002F1A  0015      
                    4148   ; enemy3_bitmap[22] = 0xF8;
00002F1C  1B7C 00F8 4149          move.b    #248,22(A5)
00002F20  0016      
                    4150   ; enemy3_bitmap[23] = 0x07;
00002F22  1B7C 0007 4151          move.b    #7,23(A5)
00002F26  0017      
                    4152   ; enemy3_bitmap[24] = 0xF0;
00002F28  1B7C 00F0 4153          move.b    #240,24(A5)
00002F2C  0018      
                    4154   ; enemy3_bitmap[25] = 0x01;
00002F2E  1B7C 0001 4155          move.b    #1,25(A5)
00002F32  0019      
                    4156   ; enemy3_bitmap[26] = 0x70;
00002F34  1B7C 0070 4157          move.b    #112,26(A5)
00002F38  001A      
                    4158   ; enemy3_bitmap[27] = 0x00;
00002F3A  422D 001B 4159          clr.b     27(A5)
                    4160   ; enemy3_bitmap[28] = 0xF8;
00002F3E  1B7C 00F8 4161          move.b    #248,28(A5)
00002F42  001C      
                    4162   ; enemy3_bitmap[29] = 0x3F;
00002F44  1B7C 003F 4163          move.b    #63,29(A5)
00002F48  001D      
                    4164   ; enemy3_bitmap[30] = 0xC0;
00002F4A  1B7C 00C0 4165          move.b    #192,30(A5)
00002F4E  001E      
                    4166   ; enemy3_bitmap[31] = 0x03;
00002F50  1B7C 0003 4167          move.b    #3,31(A5)
00002F54  001F      
                    4168   ; enemy3_bitmap[32] = 0x80;
00002F56  1B7C 0080 4169          move.b    #128,32(A5)
00002F5A  0020      
                    4170   ; enemy3_bitmap[33] = 0x1F;
00002F5C  1B7C 001F 4171          move.b    #31,33(A5)
00002F60  0021      
                    4172   ; /* Initialize enemy4_bitmap */
                    4173   ; enemy4_bitmap[0] = 2;
00002F62  18BC 0002 4174          move.b    #2,(A4)
                    4175   ; enemy4_bitmap[1] = 16;
00002F66  197C 0010 4176          move.b    #16,1(A4)
00002F6A  0001      
                    4177   ; enemy4_bitmap[2] = 0x06;
00002F6C  197C 0006 4178          move.b    #6,2(A4)
00002F70  0002      
                    4179   ; enemy4_bitmap[3] = 0x00;
00002F72  422C 0003 4180          clr.b     3(A4)
                    4181   ; enemy4_bitmap[4] = 0x0C;
00002F76  197C 000C 4182          move.b    #12,4(A4)
00002F7A  0004      
                    4183   ; enemy4_bitmap[5] = 0x00;
00002F7C  422C 0005 4184          clr.b     5(A4)
                    4185   ; enemy4_bitmap[6] = 0x28;
00002F80  197C 0028 4186          move.b    #40,6(A4)
00002F84  0006      
                    4187   ; enemy4_bitmap[7] = 0x00;
00002F86  422C 0007 4188          clr.b     7(A4)
                    4189   ; enemy4_bitmap[8] = 0x70;
00002F8A  197C 0070 4190          move.b    #112,8(A4)
00002F8E  0008      
                    4191   ; enemy4_bitmap[9] = 0x1F;
00002F90  197C 001F 4192          move.b    #31,9(A4)
00002F94  0009      
                    4193   ; enemy4_bitmap[10] = 0x84;
00002F96  197C 0084 4194          move.b    #132,10(A4)
00002F9A  000A      
                    4195   ; enemy4_bitmap[11] = 0x3F;
00002F9C  197C 003F 4196          move.b    #63,11(A4)
00002FA0  000B      
                    4197   ; enemy4_bitmap[12] = 0xDE;
00002FA2  197C 00DE 4198          move.b    #222,12(A4)
00002FA6  000C      
                    4199   ; enemy4_bitmap[13] = 0x37;
00002FA8  197C 0037 4200          move.b    #55,13(A4)
00002FAC  000D      
                    4201   ; enemy4_bitmap[14] = 0xBB;
00002FAE  197C 00BB 4202          move.b    #187,14(A4)
00002FB2  000E      
                    4203   ; enemy4_bitmap[15] = 0x3F;
00002FB4  197C 003F 4204          move.b    #63,15(A4)
00002FB8  000F      
                    4205   ; enemy4_bitmap[16] = 0xF0;
00002FBA  197C 00F0 4206          move.b    #240,16(A4)
00002FBE  0010      
                    4207   ; enemy4_bitmap[17] = 0x3F;
00002FC0  197C 003F 4208          move.b    #63,17(A4)
00002FC4  0011      
                    4209   ; enemy4_bitmap[18] = 0xF0;
00002FC6  197C 00F0 4210          move.b    #240,18(A4)
00002FCA  0012      
                    4211   ; enemy4_bitmap[19] = 0x3F;
00002FCC  197C 003F 4212          move.b    #63,19(A4)
00002FD0  0013      
                    4213   ; enemy4_bitmap[20] = 0xBB;
00002FD2  197C 00BB 4214          move.b    #187,20(A4)
00002FD6  0014      
                    4215   ; enemy4_bitmap[21] = 0x3F;
00002FD8  197C 003F 4216          move.b    #63,21(A4)
00002FDC  0015      
                    4217   ; enemy4_bitmap[22] = 0xDE;
00002FDE  197C 00DE 4218          move.b    #222,22(A4)
00002FE2  0016      
                    4219   ; enemy4_bitmap[23] = 0x37;
00002FE4  197C 0037 4220          move.b    #55,23(A4)
00002FE8  0017      
                    4221   ; enemy4_bitmap[24] = 0x84;
00002FEA  197C 0084 4222          move.b    #132,24(A4)
00002FEE  0018      
                    4223   ; enemy4_bitmap[25] = 0x3F;
00002FF0  197C 003F 4224          move.b    #63,25(A4)
00002FF4  0019      
                    4225   ; enemy4_bitmap[26] = 0x70;
00002FF6  197C 0070 4226          move.b    #112,26(A4)
00002FFA  001A      
                    4227   ; enemy4_bitmap[27] = 0x1F;
00002FFC  197C 001F 4228          move.b    #31,27(A4)
00003000  001B      
                    4229   ; enemy4_bitmap[28] = 0x28;
00003002  197C 0028 4230          move.b    #40,28(A4)
00003006  001C      
                    4231   ; enemy4_bitmap[29] = 0x00;
00003008  422C 001D 4232          clr.b     29(A4)
                    4233   ; enemy4_bitmap[30] = 0x0C;
0000300C  197C 000C 4234          move.b    #12,30(A4)
00003010  001E      
                    4235   ; enemy4_bitmap[31] = 0x00;
00003012  422C 001F 4236          clr.b     31(A4)
                    4237   ; enemy4_bitmap[32] = 0x06;
00003016  197C 0006 4238          move.b    #6,32(A4)
0000301A  0020      
                    4239   ; enemy4_bitmap[33] = 0x00;
0000301C  422C 0021 4240          clr.b     33(A4)
                    4241   ; enemy_bitmaps[0] = enemy1_bitmap;
00003020  41F9 0803 4242          lea       _enemy1_bitmap.L,A0
00003024  06DA      
00003026  23C8 0803 4243          move.l    A0,_enemy_bitmaps.L
0000302A  0762      
                    4244   ; enemy_bitmaps[1] = enemy2_bitmap;
0000302C  41F9 0803 4245          lea       _enemy2_bitmap.L,A0
00003030  06FC      
00003032  23C8 0803 4246          move.l    A0,_enemy_bitmaps+4.L
00003036  0766      
                    4247   ; enemy_bitmaps[2] = enemy3_bitmap;
00003038  23CD 0803 4248          move.l    A5,_enemy_bitmaps+8.L
0000303C  076A      
                    4249   ; enemy_bitmaps[3] = enemy4_bitmap;
0000303E  23CC 0803 4250          move.l    A4,_enemy_bitmaps+12.L
00003042  076E      
                    4251   ; font8x8[0 ][0]=0x00;font8x8[0 ][1]=0x00;font8x8[0 ][2]=0x00;font8x8[0 ][3]=0x00;font8x8[0 ][4]=0x00;font8x8[0 ][5]=0x00;font8x8[0 ][6]=0x00;font8x8[0 ][7]=0x00;
00003044  4212      4252          clr.b     (A2)
00003046  422A 0001 4253          clr.b     1(A2)
0000304A  422A 0002 4254          clr.b     2(A2)
0000304E  422A 0003 4255          clr.b     3(A2)
00003052  422A 0004 4256          clr.b     4(A2)
00003056  422A 0005 4257          clr.b     5(A2)
0000305A  422A 0006 4258          clr.b     6(A2)
0000305E  422A 0007 4259          clr.b     7(A2)
                    4260   ; font8x8[1 ][0]=0x00;font8x8[1 ][1]=0x00;font8x8[1 ][2]=0x00;font8x8[1 ][3]=0x79;font8x8[1 ][4]=0x79;font8x8[1 ][5]=0x00;font8x8[1 ][6]=0x00;font8x8[1 ][7]=0x00;
00003062  422A 0008 4261          clr.b     8(A2)
00003066  422A 0009 4262          clr.b     8+1(A2)
0000306A  422A 000A 4263          clr.b     8+2(A2)
0000306E  157C 0079 4264          move.b    #121,8+3(A2)
00003072  000B      
00003074  157C 0079 4265          move.b    #121,8+4(A2)
00003078  000C      
0000307A  422A 000D 4266          clr.b     8+5(A2)
0000307E  422A 000E 4267          clr.b     8+6(A2)
00003082  422A 000F 4268          clr.b     8+7(A2)
                    4269   ; font8x8[2 ][0]=0x00;font8x8[2 ][1]=0x70;font8x8[2 ][2]=0x70;font8x8[2 ][3]=0x00;font8x8[2 ][4]=0x00;font8x8[2 ][5]=0x70;font8x8[2 ][6]=0x70;font8x8[2 ][7]=0x00; 
00003086  422A 0010 4270          clr.b     16(A2)
0000308A  157C 0070 4271          move.b    #112,16+1(A2)
0000308E  0011      
00003090  157C 0070 4272          move.b    #112,16+2(A2)
00003094  0012      
00003096  422A 0013 4273          clr.b     16+3(A2)
0000309A  422A 0014 4274          clr.b     16+4(A2)
0000309E  157C 0070 4275          move.b    #112,16+5(A2)
000030A2  0015      
000030A4  157C 0070 4276          move.b    #112,16+6(A2)
000030A8  0016      
000030AA  422A 0017 4277          clr.b     16+7(A2)
                    4278   ; font8x8[3 ][0]=0x14;font8x8[3 ][1]=0x7f;font8x8[3 ][2]=0x7f;font8x8[3 ][3]=0x14;font8x8[3 ][4]=0x14;font8x8[3 ][5]=0x7f;font8x8[3 ][6]=0x7f;font8x8[3 ][7]=0x14; 
000030AE  157C 0014 4279          move.b    #20,24(A2)
000030B2  0018      
000030B4  157C 007F 4280          move.b    #127,24+1(A2)
000030B8  0019      
000030BA  157C 007F 4281          move.b    #127,24+2(A2)
000030BE  001A      
000030C0  157C 0014 4282          move.b    #20,24+3(A2)
000030C4  001B      
000030C6  157C 0014 4283          move.b    #20,24+4(A2)
000030CA  001C      
000030CC  157C 007F 4284          move.b    #127,24+5(A2)
000030D0  001D      
000030D2  157C 007F 4285          move.b    #127,24+6(A2)
000030D6  001E      
000030D8  157C 0014 4286          move.b    #20,24+7(A2)
000030DC  001F      
                    4287   ; font8x8[4 ][0]=0x00;font8x8[4 ][1]=0x12;font8x8[4 ][2]=0x3a;font8x8[4 ][3]=0x6b;font8x8[4 ][4]=0x6b;font8x8[4 ][5]=0x2e;font8x8[4 ][6]=0x24;font8x8[4 ][7]=0x00;
000030DE  422A 0020 4288          clr.b     32(A2)
000030E2  157C 0012 4289          move.b    #18,32+1(A2)
000030E6  0021      
000030E8  157C 003A 4290          move.b    #58,32+2(A2)
000030EC  0022      
000030EE  157C 006B 4291          move.b    #107,32+3(A2)
000030F2  0023      
000030F4  157C 006B 4292          move.b    #107,32+4(A2)
000030F8  0024      
000030FA  157C 002E 4293          move.b    #46,32+5(A2)
000030FE  0025      
00003100  157C 0024 4294          move.b    #36,32+6(A2)
00003104  0026      
00003106  422A 0027 4295          clr.b     32+7(A2)
                    4296   ; font8x8[5 ][0]=0x00;font8x8[5 ][1]=0x63;font8x8[5 ][2]=0x66;font8x8[5 ][3]=0x0c;font8x8[5 ][4]=0x18;font8x8[5 ][5]=0x33;font8x8[5 ][6]=0x63;font8x8[5 ][7]=0x00; 
0000310A  422A 0028 4297          clr.b     40(A2)
0000310E  157C 0063 4298          move.b    #99,40+1(A2)
00003112  0029      
00003114  157C 0066 4299          move.b    #102,40+2(A2)
00003118  002A      
0000311A  157C 000C 4300          move.b    #12,40+3(A2)
0000311E  002B      
00003120  157C 0018 4301          move.b    #24,40+4(A2)
00003124  002C      
00003126  157C 0033 4302          move.b    #51,40+5(A2)
0000312A  002D      
0000312C  157C 0063 4303          move.b    #99,40+6(A2)
00003130  002E      
00003132  422A 002F 4304          clr.b     40+7(A2)
                    4305   ; font8x8[6 ][0]=0x00;font8x8[6 ][1]=0x26;font8x8[6 ][2]=0x7f;font8x8[6 ][3]=0x59;font8x8[6 ][4]=0x59;font8x8[6 ][5]=0x77;font8x8[6 ][6]=0x27;font8x8[6 ][7]=0x05; 
00003136  422A 0030 4306          clr.b     48(A2)
0000313A  157C 0026 4307          move.b    #38,48+1(A2)
0000313E  0031      
00003140  157C 007F 4308          move.b    #127,48+2(A2)
00003144  0032      
00003146  157C 0059 4309          move.b    #89,48+3(A2)
0000314A  0033      
0000314C  157C 0059 4310          move.b    #89,48+4(A2)
00003150  0034      
00003152  157C 0077 4311          move.b    #119,48+5(A2)
00003156  0035      
00003158  157C 0027 4312          move.b    #39,48+6(A2)
0000315C  0036      
0000315E  157C 0005 4313          move.b    #5,48+7(A2)
00003162  0037      
                    4314   ; font8x8[7 ][0]=0x00;font8x8[7 ][1]=0x00;font8x8[7 ][2]=0x00;font8x8[7 ][3]=0x10;font8x8[7 ][4]=0x30;font8x8[7 ][5]=0x60;font8x8[7 ][6]=0x40;font8x8[7 ][7]=0x00; 
00003164  422A 0038 4315          clr.b     56(A2)
00003168  422A 0039 4316          clr.b     56+1(A2)
0000316C  422A 003A 4317          clr.b     56+2(A2)
00003170  157C 0010 4318          move.b    #16,56+3(A2)
00003174  003B      
00003176  157C 0030 4319          move.b    #48,56+4(A2)
0000317A  003C      
0000317C  157C 0060 4320          move.b    #96,56+5(A2)
00003180  003D      
00003182  157C 0040 4321          move.b    #64,56+6(A2)
00003186  003E      
00003188  422A 003F 4322          clr.b     56+7(A2)
                    4323   ; font8x8[8 ][0]=0x00;font8x8[8 ][1]=0x00;font8x8[8 ][2]=0x1c;font8x8[8 ][3]=0x3e;font8x8[8 ][4]=0x63;font8x8[8 ][5]=0x41;font8x8[8 ][6]=0x00;font8x8[8 ][7]=0x00; 
0000318C  422A 0040 4324          clr.b     64(A2)
00003190  422A 0041 4325          clr.b     64+1(A2)
00003194  157C 001C 4326          move.b    #28,64+2(A2)
00003198  0042      
0000319A  157C 003E 4327          move.b    #62,64+3(A2)
0000319E  0043      
000031A0  157C 0063 4328          move.b    #99,64+4(A2)
000031A4  0044      
000031A6  157C 0041 4329          move.b    #65,64+5(A2)
000031AA  0045      
000031AC  422A 0046 4330          clr.b     64+6(A2)
000031B0  422A 0047 4331          clr.b     64+7(A2)
                    4332   ; font8x8[9 ][0]=0x00;font8x8[9 ][1]=0x00;font8x8[9 ][2]=0x41;font8x8[9 ][3]=0x63;font8x8[9 ][4]=0x3e;font8x8[9 ][5]=0x1c;font8x8[9 ][6]=0x00;font8x8[9 ][7]=0x00; 
000031B4  422A 0048 4333          clr.b     72(A2)
000031B8  422A 0049 4334          clr.b     72+1(A2)
000031BC  157C 0041 4335          move.b    #65,72+2(A2)
000031C0  004A      
000031C2  157C 0063 4336          move.b    #99,72+3(A2)
000031C6  004B      
000031C8  157C 003E 4337          move.b    #62,72+4(A2)
000031CC  004C      
000031CE  157C 001C 4338          move.b    #28,72+5(A2)
000031D2  004D      
000031D4  422A 004E 4339          clr.b     72+6(A2)
000031D8  422A 004F 4340          clr.b     72+7(A2)
                    4341   ; font8x8[10][0]=0x08;font8x8[10][1]=0x2a;font8x8[10][2]=0x3e;font8x8[10][3]=0x1c;font8x8[10][4]=0x1c;font8x8[10][5]=0x3e;font8x8[10][6]=0x2a;font8x8[10][7]=0x08; 
000031DC  157C 0008 4342          move.b    #8,80(A2)
000031E0  0050      
000031E2  157C 002A 4343          move.b    #42,80+1(A2)
000031E6  0051      
000031E8  157C 003E 4344          move.b    #62,80+2(A2)
000031EC  0052      
000031EE  157C 001C 4345          move.b    #28,80+3(A2)
000031F2  0053      
000031F4  157C 001C 4346          move.b    #28,80+4(A2)
000031F8  0054      
000031FA  157C 003E 4347          move.b    #62,80+5(A2)
000031FE  0055      
00003200  157C 002A 4348          move.b    #42,80+6(A2)
00003204  0056      
00003206  157C 0008 4349          move.b    #8,80+7(A2)
0000320A  0057      
                    4350   ; font8x8[11][0]=0x00;font8x8[11][1]=0x08;font8x8[11][2]=0x08;font8x8[11][3]=0x3e;font8x8[11][4]=0x3e;font8x8[11][5]=0x08;font8x8[11][6]=0x08;font8x8[11][7]=0x00; 
0000320C  422A 0058 4351          clr.b     88(A2)
00003210  157C 0008 4352          move.b    #8,88+1(A2)
00003214  0059      
00003216  157C 0008 4353          move.b    #8,88+2(A2)
0000321A  005A      
0000321C  157C 003E 4354          move.b    #62,88+3(A2)
00003220  005B      
00003222  157C 003E 4355          move.b    #62,88+4(A2)
00003226  005C      
00003228  157C 0008 4356          move.b    #8,88+5(A2)
0000322C  005D      
0000322E  157C 0008 4357          move.b    #8,88+6(A2)
00003232  005E      
00003234  422A 005F 4358          clr.b     88+7(A2)
                    4359   ; font8x8[12][0]=0x00;font8x8[12][1]=0x00;font8x8[12][2]=0x00;font8x8[12][3]=0x03;font8x8[12][4]=0x03;font8x8[12][5]=0x00;font8x8[12][6]=0x00;font8x8[12][7]=0x00; 
00003238  422A 0060 4360          clr.b     96(A2)
0000323C  422A 0061 4361          clr.b     96+1(A2)
00003240  422A 0062 4362          clr.b     96+2(A2)
00003244  157C 0003 4363          move.b    #3,96+3(A2)
00003248  0063      
0000324A  157C 0003 4364          move.b    #3,96+4(A2)
0000324E  0064      
00003250  422A 0065 4365          clr.b     96+5(A2)
00003254  422A 0066 4366          clr.b     96+6(A2)
00003258  422A 0067 4367          clr.b     96+7(A2)
                    4368   ; font8x8[13][0]=0x00;font8x8[13][1]=0x08;font8x8[13][2]=0x08;font8x8[13][3]=0x08;font8x8[13][4]=0x08;font8x8[13][5]=0x08;font8x8[13][6]=0x08;font8x8[13][7]=0x00; 
0000325C  422A 0068 4369          clr.b     104(A2)
00003260  157C 0008 4370          move.b    #8,104+1(A2)
00003264  0069      
00003266  157C 0008 4371          move.b    #8,104+2(A2)
0000326A  006A      
0000326C  157C 0008 4372          move.b    #8,104+3(A2)
00003270  006B      
00003272  157C 0008 4373          move.b    #8,104+4(A2)
00003276  006C      
00003278  157C 0008 4374          move.b    #8,104+5(A2)
0000327C  006D      
0000327E  157C 0008 4375          move.b    #8,104+6(A2)
00003282  006E      
00003284  422A 006F 4376          clr.b     104+7(A2)
                    4377   ; font8x8[14][0]=0x00;font8x8[14][1]=0x00;font8x8[14][2]=0x00;font8x8[14][3]=0x03;font8x8[14][4]=0x03;font8x8[14][5]=0x00;font8x8[14][6]=0x00;font8x8[14][7]=0x00; 
00003288  422A 0070 4378          clr.b     112(A2)
0000328C  422A 0071 4379          clr.b     112+1(A2)
00003290  422A 0072 4380          clr.b     112+2(A2)
00003294  157C 0003 4381          move.b    #3,112+3(A2)
00003298  0073      
0000329A  157C 0003 4382          move.b    #3,112+4(A2)
0000329E  0074      
000032A0  422A 0075 4383          clr.b     112+5(A2)
000032A4  422A 0076 4384          clr.b     112+6(A2)
000032A8  422A 0077 4385          clr.b     112+7(A2)
                    4386   ; font8x8[15][0]=0x00;font8x8[15][1]=0x01;font8x8[15][2]=0x03;font8x8[15][3]=0x06;font8x8[15][4]=0x0c;font8x8[15][5]=0x18;font8x8[15][6]=0x30;font8x8[15][7]=0x20; 
000032AC  422A 0078 4387          clr.b     120(A2)
000032B0  157C 0001 4388          move.b    #1,120+1(A2)
000032B4  0079      
000032B6  157C 0003 4389          move.b    #3,120+2(A2)
000032BA  007A      
000032BC  157C 0006 4390          move.b    #6,120+3(A2)
000032C0  007B      
000032C2  157C 000C 4391          move.b    #12,120+4(A2)
000032C6  007C      
000032C8  157C 0018 4392          move.b    #24,120+5(A2)
000032CC  007D      
000032CE  157C 0030 4393          move.b    #48,120+6(A2)
000032D2  007E      
000032D4  157C 0020 4394          move.b    #32,120+7(A2)
000032D8  007F      
                    4395   ; font8x8[16][0]=0x00;font8x8[16][1]=0x3e;font8x8[16][2]=0x7f;font8x8[16][3]=0x49;font8x8[16][4]=0x51;font8x8[16][5]=0x7f;font8x8[16][6]=0x3e;font8x8[16][7]=0x00; 
000032DA  422A 0080 4396          clr.b     128(A2)
000032DE  157C 003E 4397          move.b    #62,128+1(A2)
000032E2  0081      
000032E4  157C 007F 4398          move.b    #127,128+2(A2)
000032E8  0082      
000032EA  157C 0049 4399          move.b    #73,128+3(A2)
000032EE  0083      
000032F0  157C 0051 4400          move.b    #81,128+4(A2)
000032F4  0084      
000032F6  157C 007F 4401          move.b    #127,128+5(A2)
000032FA  0085      
000032FC  157C 003E 4402          move.b    #62,128+6(A2)
00003300  0086      
00003302  422A 0087 4403          clr.b     128+7(A2)
                    4404   ; font8x8[17][0]=0x00;font8x8[17][1]=0x01;font8x8[17][2]=0x11;font8x8[17][3]=0x7f;font8x8[17][4]=0x7f;font8x8[17][5]=0x01;font8x8[17][6]=0x01;font8x8[17][7]=0x00; 
00003306  422A 0088 4405          clr.b     136(A2)
0000330A  157C 0001 4406          move.b    #1,136+1(A2)
0000330E  0089      
00003310  157C 0011 4407          move.b    #17,136+2(A2)
00003314  008A      
00003316  157C 007F 4408          move.b    #127,136+3(A2)
0000331A  008B      
0000331C  157C 007F 4409          move.b    #127,136+4(A2)
00003320  008C      
00003322  157C 0001 4410          move.b    #1,136+5(A2)
00003326  008D      
00003328  157C 0001 4411          move.b    #1,136+6(A2)
0000332C  008E      
0000332E  422A 008F 4412          clr.b     136+7(A2)
                    4413   ; font8x8[18][0]=0x00;font8x8[18][1]=0x23;font8x8[18][2]=0x67;font8x8[18][3]=0x45;font8x8[18][4]=0x49;font8x8[18][5]=0x79;font8x8[18][6]=0x31;font8x8[18][7]=0x00; 
00003332  422A 0090 4414          clr.b     144(A2)
00003336  157C 0023 4415          move.b    #35,144+1(A2)
0000333A  0091      
0000333C  157C 0067 4416          move.b    #103,144+2(A2)
00003340  0092      
00003342  157C 0045 4417          move.b    #69,144+3(A2)
00003346  0093      
00003348  157C 0049 4418          move.b    #73,144+4(A2)
0000334C  0094      
0000334E  157C 0079 4419          move.b    #121,144+5(A2)
00003352  0095      
00003354  157C 0031 4420          move.b    #49,144+6(A2)
00003358  0096      
0000335A  422A 0097 4421          clr.b     144+7(A2)
                    4422   ; font8x8[19][0]=0x00;font8x8[19][1]=0x22;font8x8[19][2]=0x63;font8x8[19][3]=0x49;font8x8[19][4]=0x49;font8x8[19][5]=0x7f;font8x8[19][6]=0x36;font8x8[19][7]=0x00; 
0000335E  422A 0098 4423          clr.b     152(A2)
00003362  157C 0022 4424          move.b    #34,152+1(A2)
00003366  0099      
00003368  157C 0063 4425          move.b    #99,152+2(A2)
0000336C  009A      
0000336E  157C 0049 4426          move.b    #73,152+3(A2)
00003372  009B      
00003374  157C 0049 4427          move.b    #73,152+4(A2)
00003378  009C      
0000337A  157C 007F 4428          move.b    #127,152+5(A2)
0000337E  009D      
00003380  157C 0036 4429          move.b    #54,152+6(A2)
00003384  009E      
00003386  422A 009F 4430          clr.b     152+7(A2)
                    4431   ; font8x8[20][0]=0x00;font8x8[20][1]=0x0c;font8x8[20][2]=0x0c;font8x8[20][3]=0x14;font8x8[20][4]=0x34;font8x8[20][5]=0x7f;font8x8[20][6]=0x7f;font8x8[20][7]=0x04; 
0000338A  422A 00A0 4432          clr.b     160(A2)
0000338E  157C 000C 4433          move.b    #12,160+1(A2)
00003392  00A1      
00003394  157C 000C 4434          move.b    #12,160+2(A2)
00003398  00A2      
0000339A  157C 0014 4435          move.b    #20,160+3(A2)
0000339E  00A3      
000033A0  157C 0034 4436          move.b    #52,160+4(A2)
000033A4  00A4      
000033A6  157C 007F 4437          move.b    #127,160+5(A2)
000033AA  00A5      
000033AC  157C 007F 4438          move.b    #127,160+6(A2)
000033B0  00A6      
000033B2  157C 0004 4439          move.b    #4,160+7(A2)
000033B6  00A7      
                    4440   ; font8x8[21][0]=0x00;font8x8[21][1]=0x72;font8x8[21][2]=0x73;font8x8[21][3]=0x51;font8x8[21][4]=0x51;font8x8[21][5]=0x5f;font8x8[21][6]=0x4e;font8x8[21][7]=0x00; 
000033B8  422A 00A8 4441          clr.b     168(A2)
000033BC  157C 0072 4442          move.b    #114,168+1(A2)
000033C0  00A9      
000033C2  157C 0073 4443          move.b    #115,168+2(A2)
000033C6  00AA      
000033C8  157C 0051 4444          move.b    #81,168+3(A2)
000033CC  00AB      
000033CE  157C 0051 4445          move.b    #81,168+4(A2)
000033D2  00AC      
000033D4  157C 005F 4446          move.b    #95,168+5(A2)
000033D8  00AD      
000033DA  157C 004E 4447          move.b    #78,168+6(A2)
000033DE  00AE      
000033E0  422A 00AF 4448          clr.b     168+7(A2)
                    4449   ; font8x8[22][0]=0x00;font8x8[22][1]=0x3e;font8x8[22][2]=0x7f;font8x8[22][3]=0x49;font8x8[22][4]=0x49;font8x8[22][5]=0x6f;font8x8[22][6]=0x26;font8x8[22][7]=0x00; 
000033E4  422A 00B0 4450          clr.b     176(A2)
000033E8  157C 003E 4451          move.b    #62,176+1(A2)
000033EC  00B1      
000033EE  157C 007F 4452          move.b    #127,176+2(A2)
000033F2  00B2      
000033F4  157C 0049 4453          move.b    #73,176+3(A2)
000033F8  00B3      
000033FA  157C 0049 4454          move.b    #73,176+4(A2)
000033FE  00B4      
00003400  157C 006F 4455          move.b    #111,176+5(A2)
00003404  00B5      
00003406  157C 0026 4456          move.b    #38,176+6(A2)
0000340A  00B6      
0000340C  422A 00B7 4457          clr.b     176+7(A2)
                    4458   ; font8x8[23][0]=0x00;font8x8[23][1]=0x60;font8x8[23][2]=0x60;font8x8[23][3]=0x4f;font8x8[23][4]=0x5f;font8x8[23][5]=0x70;font8x8[23][6]=0x60;font8x8[23][7]=0x00; 
00003410  422A 00B8 4459          clr.b     184(A2)
00003414  157C 0060 4460          move.b    #96,184+1(A2)
00003418  00B9      
0000341A  157C 0060 4461          move.b    #96,184+2(A2)
0000341E  00BA      
00003420  157C 004F 4462          move.b    #79,184+3(A2)
00003424  00BB      
00003426  157C 005F 4463          move.b    #95,184+4(A2)
0000342A  00BC      
0000342C  157C 0070 4464          move.b    #112,184+5(A2)
00003430  00BD      
00003432  157C 0060 4465          move.b    #96,184+6(A2)
00003436  00BE      
00003438  422A 00BF 4466          clr.b     184+7(A2)
                    4467   ; font8x8[24][0]=0x00;font8x8[24][1]=0x36;font8x8[24][2]=0x7f;font8x8[24][3]=0x49;font8x8[24][4]=0x49;font8x8[24][5]=0x7f;font8x8[24][6]=0x36;font8x8[24][7]=0x00; 
0000343C  422A 00C0 4468          clr.b     192(A2)
00003440  157C 0036 4469          move.b    #54,192+1(A2)
00003444  00C1      
00003446  157C 007F 4470          move.b    #127,192+2(A2)
0000344A  00C2      
0000344C  157C 0049 4471          move.b    #73,192+3(A2)
00003450  00C3      
00003452  157C 0049 4472          move.b    #73,192+4(A2)
00003456  00C4      
00003458  157C 007F 4473          move.b    #127,192+5(A2)
0000345C  00C5      
0000345E  157C 0036 4474          move.b    #54,192+6(A2)
00003462  00C6      
00003464  422A 00C7 4475          clr.b     192+7(A2)
                    4476   ; font8x8[25][0]=0x00;font8x8[25][1]=0x32;font8x8[25][2]=0x7b;font8x8[25][3]=0x49;font8x8[25][4]=0x49;font8x8[25][5]=0x7f;font8x8[25][6]=0x3e;font8x8[25][7]=0x00; 
00003468  422A 00C8 4477          clr.b     200(A2)
0000346C  157C 0032 4478          move.b    #50,200+1(A2)
00003470  00C9      
00003472  157C 007B 4479          move.b    #123,200+2(A2)
00003476  00CA      
00003478  157C 0049 4480          move.b    #73,200+3(A2)
0000347C  00CB      
0000347E  157C 0049 4481          move.b    #73,200+4(A2)
00003482  00CC      
00003484  157C 007F 4482          move.b    #127,200+5(A2)
00003488  00CD      
0000348A  157C 003E 4483          move.b    #62,200+6(A2)
0000348E  00CE      
00003490  422A 00CF 4484          clr.b     200+7(A2)
                    4485   ; font8x8[26][0]=0x00;font8x8[26][1]=0x00;font8x8[26][2]=0x00;font8x8[26][3]=0x12;font8x8[26][4]=0x12;font8x8[26][5]=0x00;font8x8[26][6]=0x00;font8x8[26][7]=0x00; 
00003494  422A 00D0 4486          clr.b     208(A2)
00003498  422A 00D1 4487          clr.b     208+1(A2)
0000349C  422A 00D2 4488          clr.b     208+2(A2)
000034A0  157C 0012 4489          move.b    #18,208+3(A2)
000034A4  00D3      
000034A6  157C 0012 4490          move.b    #18,208+4(A2)
000034AA  00D4      
000034AC  422A 00D5 4491          clr.b     208+5(A2)
000034B0  422A 00D6 4492          clr.b     208+6(A2)
000034B4  422A 00D7 4493          clr.b     208+7(A2)
                    4494   ; font8x8[27][0]=0x00;font8x8[27][1]=0x00;font8x8[27][2]=0x00;font8x8[27][3]=0x13;font8x8[27][4]=0x13;font8x8[27][5]=0x00;font8x8[27][6]=0x00;font8x8[27][7]=0x00; 
000034B8  422A 00D8 4495          clr.b     216(A2)
000034BC  422A 00D9 4496          clr.b     216+1(A2)
000034C0  422A 00DA 4497          clr.b     216+2(A2)
000034C4  157C 0013 4498          move.b    #19,216+3(A2)
000034C8  00DB      
000034CA  157C 0013 4499          move.b    #19,216+4(A2)
000034CE  00DC      
000034D0  422A 00DD 4500          clr.b     216+5(A2)
000034D4  422A 00DE 4501          clr.b     216+6(A2)
000034D8  422A 00DF 4502          clr.b     216+7(A2)
                    4503   ; font8x8[28][0]=0x00;font8x8[28][1]=0x08;font8x8[28][2]=0x1c;font8x8[28][3]=0x36;font8x8[28][4]=0x63;font8x8[28][5]=0x41;font8x8[28][6]=0x41;font8x8[28][7]=0x00; 
000034DC  422A 00E0 4504          clr.b     224(A2)
000034E0  157C 0008 4505          move.b    #8,224+1(A2)
000034E4  00E1      
000034E6  157C 001C 4506          move.b    #28,224+2(A2)
000034EA  00E2      
000034EC  157C 0036 4507          move.b    #54,224+3(A2)
000034F0  00E3      
000034F2  157C 0063 4508          move.b    #99,224+4(A2)
000034F6  00E4      
000034F8  157C 0041 4509          move.b    #65,224+5(A2)
000034FC  00E5      
000034FE  157C 0041 4510          move.b    #65,224+6(A2)
00003502  00E6      
00003504  422A 00E7 4511          clr.b     224+7(A2)
                    4512   ; font8x8[29][0]=0x00;font8x8[29][1]=0x14;font8x8[29][2]=0x14;font8x8[29][3]=0x14;font8x8[29][4]=0x14;font8x8[29][5]=0x14;font8x8[29][6]=0x14;font8x8[29][7]=0x00; 
00003508  422A 00E8 4513          clr.b     232(A2)
0000350C  157C 0014 4514          move.b    #20,232+1(A2)
00003510  00E9      
00003512  157C 0014 4515          move.b    #20,232+2(A2)
00003516  00EA      
00003518  157C 0014 4516          move.b    #20,232+3(A2)
0000351C  00EB      
0000351E  157C 0014 4517          move.b    #20,232+4(A2)
00003522  00EC      
00003524  157C 0014 4518          move.b    #20,232+5(A2)
00003528  00ED      
0000352A  157C 0014 4519          move.b    #20,232+6(A2)
0000352E  00EE      
00003530  422A 00EF 4520          clr.b     232+7(A2)
                    4521   ; font8x8[30][0]=0x00;font8x8[30][1]=0x41;font8x8[30][2]=0x41;font8x8[30][3]=0x63;font8x8[30][4]=0x36;font8x8[30][5]=0x1c;font8x8[30][6]=0x08;font8x8[30][7]=0x00; 
00003534  422A 00F0 4522          clr.b     240(A2)
00003538  157C 0041 4523          move.b    #65,240+1(A2)
0000353C  00F1      
0000353E  157C 0041 4524          move.b    #65,240+2(A2)
00003542  00F2      
00003544  157C 0063 4525          move.b    #99,240+3(A2)
00003548  00F3      
0000354A  157C 0036 4526          move.b    #54,240+4(A2)
0000354E  00F4      
00003550  157C 001C 4527          move.b    #28,240+5(A2)
00003554  00F5      
00003556  157C 0008 4528          move.b    #8,240+6(A2)
0000355A  00F6      
0000355C  422A 00F7 4529          clr.b     240+7(A2)
                    4530   ; font8x8[31][0]=0x00;font8x8[31][1]=0x20;font8x8[31][2]=0x60;font8x8[31][3]=0x45;font8x8[31][4]=0x4d;font8x8[31][5]=0x78;font8x8[31][6]=0x30;font8x8[31][7]=0x00; 
00003560  422A 00F8 4531          clr.b     248(A2)
00003564  157C 0020 4532          move.b    #32,248+1(A2)
00003568  00F9      
0000356A  157C 0060 4533          move.b    #96,248+2(A2)
0000356E  00FA      
00003570  157C 0045 4534          move.b    #69,248+3(A2)
00003574  00FB      
00003576  157C 004D 4535          move.b    #77,248+4(A2)
0000357A  00FC      
0000357C  157C 0078 4536          move.b    #120,248+5(A2)
00003580  00FD      
00003582  157C 0030 4537          move.b    #48,248+6(A2)
00003586  00FE      
00003588  422A 00FF 4538          clr.b     248+7(A2)
                    4539   ; font8x8[32][0]=0x00;font8x8[32][1]=0x3e;font8x8[32][2]=0x7f;font8x8[32][3]=0x41;font8x8[32][4]=0x59;font8x8[32][5]=0x79;font8x8[32][6]=0x3a;font8x8[32][7]=0x00; 
0000358C  422A 0100 4540          clr.b     256(A2)
00003590  157C 003E 4541          move.b    #62,256+1(A2)
00003594  0101      
00003596  157C 007F 4542          move.b    #127,256+2(A2)
0000359A  0102      
0000359C  157C 0041 4543          move.b    #65,256+3(A2)
000035A0  0103      
000035A2  157C 0059 4544          move.b    #89,256+4(A2)
000035A6  0104      
000035A8  157C 0079 4545          move.b    #121,256+5(A2)
000035AC  0105      
000035AE  157C 003A 4546          move.b    #58,256+6(A2)
000035B2  0106      
000035B4  422A 0107 4547          clr.b     256+7(A2)
                    4548   ; font8x8[33][0]=0x00;font8x8[33][1]=0x1f;font8x8[33][2]=0x3f;font8x8[33][3]=0x68;font8x8[33][4]=0x68;font8x8[33][5]=0x3f;font8x8[33][6]=0x1f;font8x8[33][7]=0x00; 
000035B8  422A 0108 4549          clr.b     264(A2)
000035BC  157C 001F 4550          move.b    #31,264+1(A2)
000035C0  0109      
000035C2  157C 003F 4551          move.b    #63,264+2(A2)
000035C6  010A      
000035C8  157C 0068 4552          move.b    #104,264+3(A2)
000035CC  010B      
000035CE  157C 0068 4553          move.b    #104,264+4(A2)
000035D2  010C      
000035D4  157C 003F 4554          move.b    #63,264+5(A2)
000035D8  010D      
000035DA  157C 001F 4555          move.b    #31,264+6(A2)
000035DE  010E      
000035E0  422A 010F 4556          clr.b     264+7(A2)
                    4557   ; font8x8[34][0]=0x00;font8x8[34][1]=0x7f;font8x8[34][2]=0x7f;font8x8[34][3]=0x49;font8x8[34][4]=0x49;font8x8[34][5]=0x7f;font8x8[34][6]=0x36;font8x8[34][7]=0x00; 
000035E4  422A 0110 4558          clr.b     272(A2)
000035E8  157C 007F 4559          move.b    #127,272+1(A2)
000035EC  0111      
000035EE  157C 007F 4560          move.b    #127,272+2(A2)
000035F2  0112      
000035F4  157C 0049 4561          move.b    #73,272+3(A2)
000035F8  0113      
000035FA  157C 0049 4562          move.b    #73,272+4(A2)
000035FE  0114      
00003600  157C 007F 4563          move.b    #127,272+5(A2)
00003604  0115      
00003606  157C 0036 4564          move.b    #54,272+6(A2)
0000360A  0116      
0000360C  422A 0117 4565          clr.b     272+7(A2)
                    4566   ; font8x8[35][0]=0x00;font8x8[35][1]=0x3e;font8x8[35][2]=0x7f;font8x8[35][3]=0x41;font8x8[35][4]=0x41;font8x8[35][5]=0x63;font8x8[35][6]=0x22;font8x8[35][7]=0x00; 
00003610  422A 0118 4567          clr.b     280(A2)
00003614  157C 003E 4568          move.b    #62,280+1(A2)
00003618  0119      
0000361A  157C 007F 4569          move.b    #127,280+2(A2)
0000361E  011A      
00003620  157C 0041 4570          move.b    #65,280+3(A2)
00003624  011B      
00003626  157C 0041 4571          move.b    #65,280+4(A2)
0000362A  011C      
0000362C  157C 0063 4572          move.b    #99,280+5(A2)
00003630  011D      
00003632  157C 0022 4573          move.b    #34,280+6(A2)
00003636  011E      
00003638  422A 011F 4574          clr.b     280+7(A2)
                    4575   ; font8x8[36][0]=0x00;font8x8[36][1]=0x7f;font8x8[36][2]=0x7f;font8x8[36][3]=0x41;font8x8[36][4]=0x63;font8x8[36][5]=0x3e;font8x8[36][6]=0x1c;font8x8[36][7]=0x00; 
0000363C  422A 0120 4576          clr.b     288(A2)
00003640  157C 007F 4577          move.b    #127,288+1(A2)
00003644  0121      
00003646  157C 007F 4578          move.b    #127,288+2(A2)
0000364A  0122      
0000364C  157C 0041 4579          move.b    #65,288+3(A2)
00003650  0123      
00003652  157C 0063 4580          move.b    #99,288+4(A2)
00003656  0124      
00003658  157C 003E 4581          move.b    #62,288+5(A2)
0000365C  0125      
0000365E  157C 001C 4582          move.b    #28,288+6(A2)
00003662  0126      
00003664  422A 0127 4583          clr.b     288+7(A2)
                    4584   ; font8x8[37][0]=0x00;font8x8[37][1]=0x7f;font8x8[37][2]=0x7f;font8x8[37][3]=0x49;font8x8[37][4]=0x49;font8x8[37][5]=0x41;font8x8[37][6]=0x41;font8x8[37][7]=0x00; 
00003668  422A 0128 4585          clr.b     296(A2)
0000366C  157C 007F 4586          move.b    #127,296+1(A2)
00003670  0129      
00003672  157C 007F 4587          move.b    #127,296+2(A2)
00003676  012A      
00003678  157C 0049 4588          move.b    #73,296+3(A2)
0000367C  012B      
0000367E  157C 0049 4589          move.b    #73,296+4(A2)
00003682  012C      
00003684  157C 0041 4590          move.b    #65,296+5(A2)
00003688  012D      
0000368A  157C 0041 4591          move.b    #65,296+6(A2)
0000368E  012E      
00003690  422A 012F 4592          clr.b     296+7(A2)
                    4593   ; font8x8[38][0]=0x00;font8x8[38][1]=0x7f;font8x8[38][2]=0x7f;font8x8[38][3]=0x48;font8x8[38][4]=0x48;font8x8[38][5]=0x40;font8x8[38][6]=0x40;font8x8[38][7]=0x00; 
00003694  422A 0130 4594          clr.b     304(A2)
00003698  157C 007F 4595          move.b    #127,304+1(A2)
0000369C  0131      
0000369E  157C 007F 4596          move.b    #127,304+2(A2)
000036A2  0132      
000036A4  157C 0048 4597          move.b    #72,304+3(A2)
000036A8  0133      
000036AA  157C 0048 4598          move.b    #72,304+4(A2)
000036AE  0134      
000036B0  157C 0040 4599          move.b    #64,304+5(A2)
000036B4  0135      
000036B6  157C 0040 4600          move.b    #64,304+6(A2)
000036BA  0136      
000036BC  422A 0137 4601          clr.b     304+7(A2)
                    4602   ; font8x8[39][0]=0x00;font8x8[39][1]=0x3e;font8x8[39][2]=0x7f;font8x8[39][3]=0x41;font8x8[39][4]=0x49;font8x8[39][5]=0x6f;font8x8[39][6]=0x2e;font8x8[39][7]=0x00; 
000036C0  422A 0138 4603          clr.b     312(A2)
000036C4  157C 003E 4604          move.b    #62,312+1(A2)
000036C8  0139      
000036CA  157C 007F 4605          move.b    #127,312+2(A2)
000036CE  013A      
000036D0  157C 0041 4606          move.b    #65,312+3(A2)
000036D4  013B      
000036D6  157C 0049 4607          move.b    #73,312+4(A2)
000036DA  013C      
000036DC  157C 006F 4608          move.b    #111,312+5(A2)
000036E0  013D      
000036E2  157C 002E 4609          move.b    #46,312+6(A2)
000036E6  013E      
000036E8  422A 013F 4610          clr.b     312+7(A2)
                    4611   ; font8x8[40][0]=0x00;font8x8[40][1]=0x7f;font8x8[40][2]=0x7f;font8x8[40][3]=0x08;font8x8[40][4]=0x08;font8x8[40][5]=0x7f;font8x8[40][6]=0x7f;font8x8[40][7]=0x00; 
000036EC  422A 0140 4612          clr.b     320(A2)
000036F0  157C 007F 4613          move.b    #127,320+1(A2)
000036F4  0141      
000036F6  157C 007F 4614          move.b    #127,320+2(A2)
000036FA  0142      
000036FC  157C 0008 4615          move.b    #8,320+3(A2)
00003700  0143      
00003702  157C 0008 4616          move.b    #8,320+4(A2)
00003706  0144      
00003708  157C 007F 4617          move.b    #127,320+5(A2)
0000370C  0145      
0000370E  157C 007F 4618          move.b    #127,320+6(A2)
00003712  0146      
00003714  422A 0147 4619          clr.b     320+7(A2)
                    4620   ; font8x8[41][0]=0x00;font8x8[41][1]=0x00;font8x8[41][2]=0x41;font8x8[41][3]=0x7f;font8x8[41][4]=0x7f;font8x8[41][5]=0x41;font8x8[41][6]=0x00;font8x8[41][7]=0x00; 
00003718  422A 0148 4621          clr.b     328(A2)
0000371C  422A 0149 4622          clr.b     328+1(A2)
00003720  157C 0041 4623          move.b    #65,328+2(A2)
00003724  014A      
00003726  157C 007F 4624          move.b    #127,328+3(A2)
0000372A  014B      
0000372C  157C 007F 4625          move.b    #127,328+4(A2)
00003730  014C      
00003732  157C 0041 4626          move.b    #65,328+5(A2)
00003736  014D      
00003738  422A 014E 4627          clr.b     328+6(A2)
0000373C  422A 014F 4628          clr.b     328+7(A2)
                    4629   ; font8x8[42][0]=0x00;font8x8[42][1]=0x02;font8x8[42][2]=0x03;font8x8[42][3]=0x41;font8x8[42][4]=0x7f;font8x8[42][5]=0x7e;font8x8[42][6]=0x40;font8x8[42][7]=0x00; 
00003740  422A 0150 4630          clr.b     336(A2)
00003744  157C 0002 4631          move.b    #2,336+1(A2)
00003748  0151      
0000374A  157C 0003 4632          move.b    #3,336+2(A2)
0000374E  0152      
00003750  157C 0041 4633          move.b    #65,336+3(A2)
00003754  0153      
00003756  157C 007F 4634          move.b    #127,336+4(A2)
0000375A  0154      
0000375C  157C 007E 4635          move.b    #126,336+5(A2)
00003760  0155      
00003762  157C 0040 4636          move.b    #64,336+6(A2)
00003766  0156      
00003768  422A 0157 4637          clr.b     336+7(A2)
                    4638   ; font8x8[43][0]=0x00;font8x8[43][1]=0x7f;font8x8[43][2]=0x7f;font8x8[43][3]=0x1c;font8x8[43][4]=0x36;font8x8[43][5]=0x63;font8x8[43][6]=0x41;font8x8[43][7]=0x00; 
0000376C  422A 0158 4639          clr.b     344(A2)
00003770  157C 007F 4640          move.b    #127,344+1(A2)
00003774  0159      
00003776  157C 007F 4641          move.b    #127,344+2(A2)
0000377A  015A      
0000377C  157C 001C 4642          move.b    #28,344+3(A2)
00003780  015B      
00003782  157C 0036 4643          move.b    #54,344+4(A2)
00003786  015C      
00003788  157C 0063 4644          move.b    #99,344+5(A2)
0000378C  015D      
0000378E  157C 0041 4645          move.b    #65,344+6(A2)
00003792  015E      
00003794  422A 015F 4646          clr.b     344+7(A2)
                    4647   ; font8x8[44][0]=0x00;font8x8[44][1]=0x7f;font8x8[44][2]=0x7f;font8x8[44][3]=0x01;font8x8[44][4]=0x01;font8x8[44][5]=0x01;font8x8[44][6]=0x01;font8x8[44][7]=0x00; 
00003798  422A 0160 4648          clr.b     352(A2)
0000379C  157C 007F 4649          move.b    #127,352+1(A2)
000037A0  0161      
000037A2  157C 007F 4650          move.b    #127,352+2(A2)
000037A6  0162      
000037A8  157C 0001 4651          move.b    #1,352+3(A2)
000037AC  0163      
000037AE  157C 0001 4652          move.b    #1,352+4(A2)
000037B2  0164      
000037B4  157C 0001 4653          move.b    #1,352+5(A2)
000037B8  0165      
000037BA  157C 0001 4654          move.b    #1,352+6(A2)
000037BE  0166      
000037C0  422A 0167 4655          clr.b     352+7(A2)
                    4656   ; font8x8[45][0]=0x00;font8x8[45][1]=0x7f;font8x8[45][2]=0x7f;font8x8[45][3]=0x30;font8x8[45][4]=0x18;font8x8[45][5]=0x30;font8x8[45][6]=0x7f;font8x8[45][7]=0x7f; 
000037C4  422A 0168 4657          clr.b     360(A2)
000037C8  157C 007F 4658          move.b    #127,360+1(A2)
000037CC  0169      
000037CE  157C 007F 4659          move.b    #127,360+2(A2)
000037D2  016A      
000037D4  157C 0030 4660          move.b    #48,360+3(A2)
000037D8  016B      
000037DA  157C 0018 4661          move.b    #24,360+4(A2)
000037DE  016C      
000037E0  157C 0030 4662          move.b    #48,360+5(A2)
000037E4  016D      
000037E6  157C 007F 4663          move.b    #127,360+6(A2)
000037EA  016E      
000037EC  157C 007F 4664          move.b    #127,360+7(A2)
000037F0  016F      
                    4665   ; font8x8[46][0]=0x00;font8x8[46][1]=0x7f;font8x8[46][2]=0x7f;font8x8[46][3]=0x38;font8x8[46][4]=0x1c;font8x8[46][5]=0x7f;font8x8[46][6]=0x7f;font8x8[46][7]=0x00; 
000037F2  422A 0170 4666          clr.b     368(A2)
000037F6  157C 007F 4667          move.b    #127,368+1(A2)
000037FA  0171      
000037FC  157C 007F 4668          move.b    #127,368+2(A2)
00003800  0172      
00003802  157C 0038 4669          move.b    #56,368+3(A2)
00003806  0173      
00003808  157C 001C 4670          move.b    #28,368+4(A2)
0000380C  0174      
0000380E  157C 007F 4671          move.b    #127,368+5(A2)
00003812  0175      
00003814  157C 007F 4672          move.b    #127,368+6(A2)
00003818  0176      
0000381A  422A 0177 4673          clr.b     368+7(A2)
                    4674   ; font8x8[47][0]=0x00;font8x8[47][1]=0x3e;font8x8[47][2]=0x7f;font8x8[47][3]=0x41;font8x8[47][4]=0x41;font8x8[47][5]=0x7f;font8x8[47][6]=0x3e;font8x8[47][7]=0x00; 
0000381E  422A 0178 4675          clr.b     376(A2)
00003822  157C 003E 4676          move.b    #62,376+1(A2)
00003826  0179      
00003828  157C 007F 4677          move.b    #127,376+2(A2)
0000382C  017A      
0000382E  157C 0041 4678          move.b    #65,376+3(A2)
00003832  017B      
00003834  157C 0041 4679          move.b    #65,376+4(A2)
00003838  017C      
0000383A  157C 007F 4680          move.b    #127,376+5(A2)
0000383E  017D      
00003840  157C 003E 4681          move.b    #62,376+6(A2)
00003844  017E      
00003846  422A 017F 4682          clr.b     376+7(A2)
                    4683   ; font8x8[48][0]=0x00;font8x8[48][1]=0x7f;font8x8[48][2]=0x7f;font8x8[48][3]=0x48;font8x8[48][4]=0x48;font8x8[48][5]=0x78;font8x8[48][6]=0x30;font8x8[48][7]=0x00; 
0000384A  422A 0180 4684          clr.b     384(A2)
0000384E  157C 007F 4685          move.b    #127,384+1(A2)
00003852  0181      
00003854  157C 007F 4686          move.b    #127,384+2(A2)
00003858  0182      
0000385A  157C 0048 4687          move.b    #72,384+3(A2)
0000385E  0183      
00003860  157C 0048 4688          move.b    #72,384+4(A2)
00003864  0184      
00003866  157C 0078 4689          move.b    #120,384+5(A2)
0000386A  0185      
0000386C  157C 0030 4690          move.b    #48,384+6(A2)
00003870  0186      
00003872  422A 0187 4691          clr.b     384+7(A2)
                    4692   ; font8x8[49][0]=0x00;font8x8[49][1]=0x3c;font8x8[49][2]=0x7e;font8x8[49][3]=0x42;font8x8[49][4]=0x43;font8x8[49][5]=0x7f;font8x8[49][6]=0x3d;font8x8[49][7]=0x00; 
00003876  422A 0188 4693          clr.b     392(A2)
0000387A  157C 003C 4694          move.b    #60,392+1(A2)
0000387E  0189      
00003880  157C 007E 4695          move.b    #126,392+2(A2)
00003884  018A      
00003886  157C 0042 4696          move.b    #66,392+3(A2)
0000388A  018B      
0000388C  157C 0043 4697          move.b    #67,392+4(A2)
00003890  018C      
00003892  157C 007F 4698          move.b    #127,392+5(A2)
00003896  018D      
00003898  157C 003D 4699          move.b    #61,392+6(A2)
0000389C  018E      
0000389E  422A 018F 4700          clr.b     392+7(A2)
                    4701   ; font8x8[50][0]=0x00;font8x8[50][1]=0x7f;font8x8[50][2]=0x7f;font8x8[50][3]=0x4c;font8x8[50][4]=0x4e;font8x8[50][5]=0x7b;font8x8[50][6]=0x31;font8x8[50][7]=0x00; 
000038A2  422A 0190 4702          clr.b     400(A2)
000038A6  157C 007F 4703          move.b    #127,400+1(A2)
000038AA  0191      
000038AC  157C 007F 4704          move.b    #127,400+2(A2)
000038B0  0192      
000038B2  157C 004C 4705          move.b    #76,400+3(A2)
000038B6  0193      
000038B8  157C 004E 4706          move.b    #78,400+4(A2)
000038BC  0194      
000038BE  157C 007B 4707          move.b    #123,400+5(A2)
000038C2  0195      
000038C4  157C 0031 4708          move.b    #49,400+6(A2)
000038C8  0196      
000038CA  422A 0197 4709          clr.b     400+7(A2)
                    4710   ; font8x8[51][0]=0x00;font8x8[51][1]=0x32;font8x8[51][2]=0x7b;font8x8[51][3]=0x49;font8x8[51][4]=0x49;font8x8[51][5]=0x6f;font8x8[51][6]=0x26;font8x8[51][7]=0x00; 
000038CE  422A 0198 4711          clr.b     408(A2)
000038D2  157C 0032 4712          move.b    #50,408+1(A2)
000038D6  0199      
000038D8  157C 007B 4713          move.b    #123,408+2(A2)
000038DC  019A      
000038DE  157C 0049 4714          move.b    #73,408+3(A2)
000038E2  019B      
000038E4  157C 0049 4715          move.b    #73,408+4(A2)
000038E8  019C      
000038EA  157C 006F 4716          move.b    #111,408+5(A2)
000038EE  019D      
000038F0  157C 0026 4717          move.b    #38,408+6(A2)
000038F4  019E      
000038F6  422A 019F 4718          clr.b     408+7(A2)
                    4719   ; font8x8[52][0]=0x00;font8x8[52][1]=0x40;font8x8[52][2]=0x40;font8x8[52][3]=0x7f;font8x8[52][4]=0x7f;font8x8[52][5]=0x40;font8x8[52][6]=0x40;font8x8[52][7]=0x00; 
000038FA  422A 01A0 4720          clr.b     416(A2)
000038FE  157C 0040 4721          move.b    #64,416+1(A2)
00003902  01A1      
00003904  157C 0040 4722          move.b    #64,416+2(A2)
00003908  01A2      
0000390A  157C 007F 4723          move.b    #127,416+3(A2)
0000390E  01A3      
00003910  157C 007F 4724          move.b    #127,416+4(A2)
00003914  01A4      
00003916  157C 0040 4725          move.b    #64,416+5(A2)
0000391A  01A5      
0000391C  157C 0040 4726          move.b    #64,416+6(A2)
00003920  01A6      
00003922  422A 01A7 4727          clr.b     416+7(A2)
                    4728   ; font8x8[53][0]=0x00;font8x8[53][1]=0x7e;font8x8[53][2]=0x7f;font8x8[53][3]=0x01;font8x8[53][4]=0x01;font8x8[53][5]=0x7f;font8x8[53][6]=0x7e;font8x8[53][7]=0x00; 
00003926  422A 01A8 4729          clr.b     424(A2)
0000392A  157C 007E 4730          move.b    #126,424+1(A2)
0000392E  01A9      
00003930  157C 007F 4731          move.b    #127,424+2(A2)
00003934  01AA      
00003936  157C 0001 4732          move.b    #1,424+3(A2)
0000393A  01AB      
0000393C  157C 0001 4733          move.b    #1,424+4(A2)
00003940  01AC      
00003942  157C 007F 4734          move.b    #127,424+5(A2)
00003946  01AD      
00003948  157C 007E 4735          move.b    #126,424+6(A2)
0000394C  01AE      
0000394E  422A 01AF 4736          clr.b     424+7(A2)
                    4737   ; font8x8[54][0]=0x00;font8x8[54][1]=0x7c;font8x8[54][2]=0x7e;font8x8[54][3]=0x03;font8x8[54][4]=0x03;font8x8[54][5]=0x7e;font8x8[54][6]=0x7c;font8x8[54][7]=0x00; 
00003952  422A 01B0 4738          clr.b     432(A2)
00003956  157C 007C 4739          move.b    #124,432+1(A2)
0000395A  01B1      
0000395C  157C 007E 4740          move.b    #126,432+2(A2)
00003960  01B2      
00003962  157C 0003 4741          move.b    #3,432+3(A2)
00003966  01B3      
00003968  157C 0003 4742          move.b    #3,432+4(A2)
0000396C  01B4      
0000396E  157C 007E 4743          move.b    #126,432+5(A2)
00003972  01B5      
00003974  157C 007C 4744          move.b    #124,432+6(A2)
00003978  01B6      
0000397A  422A 01B7 4745          clr.b     432+7(A2)
                    4746   ; font8x8[55][0]=0x00;font8x8[55][1]=0x7f;font8x8[55][2]=0x7f;font8x8[55][3]=0x06;font8x8[55][4]=0x0c;font8x8[55][5]=0x06;font8x8[55][6]=0x7f;font8x8[55][7]=0x7f; 
0000397E  422A 01B8 4747          clr.b     440(A2)
00003982  157C 007F 4748          move.b    #127,440+1(A2)
00003986  01B9      
00003988  157C 007F 4749          move.b    #127,440+2(A2)
0000398C  01BA      
0000398E  157C 0006 4750          move.b    #6,440+3(A2)
00003992  01BB      
00003994  157C 000C 4751          move.b    #12,440+4(A2)
00003998  01BC      
0000399A  157C 0006 4752          move.b    #6,440+5(A2)
0000399E  01BD      
000039A0  157C 007F 4753          move.b    #127,440+6(A2)
000039A4  01BE      
000039A6  157C 007F 4754          move.b    #127,440+7(A2)
000039AA  01BF      
                    4755   ; font8x8[56][0]=0x00;font8x8[56][1]=0x63;font8x8[56][2]=0x77;font8x8[56][3]=0x1c;font8x8[56][4]=0x1c;font8x8[56][5]=0x77;font8x8[56][6]=0x63;font8x8[56][7]=0x00; 
000039AC  422A 01C0 4756          clr.b     448(A2)
000039B0  157C 0063 4757          move.b    #99,448+1(A2)
000039B4  01C1      
000039B6  157C 0077 4758          move.b    #119,448+2(A2)
000039BA  01C2      
000039BC  157C 001C 4759          move.b    #28,448+3(A2)
000039C0  01C3      
000039C2  157C 001C 4760          move.b    #28,448+4(A2)
000039C6  01C4      
000039C8  157C 0077 4761          move.b    #119,448+5(A2)
000039CC  01C5      
000039CE  157C 0063 4762          move.b    #99,448+6(A2)
000039D2  01C6      
000039D4  422A 01C7 4763          clr.b     448+7(A2)
                    4764   ; font8x8[57][0]=0x00;font8x8[57][1]=0x70;font8x8[57][2]=0x78;font8x8[57][3]=0x0f;font8x8[57][4]=0x0f;font8x8[57][5]=0x78;font8x8[57][6]=0x70;font8x8[57][7]=0x00; 
000039D8  422A 01C8 4765          clr.b     456(A2)
000039DC  157C 0070 4766          move.b    #112,456+1(A2)
000039E0  01C9      
000039E2  157C 0078 4767          move.b    #120,456+2(A2)
000039E6  01CA      
000039E8  157C 000F 4768          move.b    #15,456+3(A2)
000039EC  01CB      
000039EE  157C 000F 4769          move.b    #15,456+4(A2)
000039F2  01CC      
000039F4  157C 0078 4770          move.b    #120,456+5(A2)
000039F8  01CD      
000039FA  157C 0070 4771          move.b    #112,456+6(A2)
000039FE  01CE      
00003A00  422A 01CF 4772          clr.b     456+7(A2)
                    4773   ; font8x8[58][0]=0x00;font8x8[58][1]=0x43;font8x8[58][2]=0x47;font8x8[58][3]=0x4d;font8x8[58][4]=0x59;font8x8[58][5]=0x71;font8x8[58][6]=0x61;font8x8[58][7]=0x00; 
00003A04  422A 01D0 4774          clr.b     464(A2)
00003A08  157C 0043 4775          move.b    #67,464+1(A2)
00003A0C  01D1      
00003A0E  157C 0047 4776          move.b    #71,464+2(A2)
00003A12  01D2      
00003A14  157C 004D 4777          move.b    #77,464+3(A2)
00003A18  01D3      
00003A1A  157C 0059 4778          move.b    #89,464+4(A2)
00003A1E  01D4      
00003A20  157C 0071 4779          move.b    #113,464+5(A2)
00003A24  01D5      
00003A26  157C 0061 4780          move.b    #97,464+6(A2)
00003A2A  01D6      
00003A2C  422A 01D7 4781          clr.b     464+7(A2)
                    4782   ; font8x8[59][0]=0x00;font8x8[59][1]=0x00;font8x8[59][2]=0x7f;font8x8[59][3]=0x7f;font8x8[59][4]=0x41;font8x8[59][5]=0x41;font8x8[59][6]=0x00;font8x8[59][7]=0x00; 
00003A30  422A 01D8 4783          clr.b     472(A2)
00003A34  422A 01D9 4784          clr.b     472+1(A2)
00003A38  157C 007F 4785          move.b    #127,472+2(A2)
00003A3C  01DA      
00003A3E  157C 007F 4786          move.b    #127,472+3(A2)
00003A42  01DB      
00003A44  157C 0041 4787          move.b    #65,472+4(A2)
00003A48  01DC      
00003A4A  157C 0041 4788          move.b    #65,472+5(A2)
00003A4E  01DD      
00003A50  422A 01DE 4789          clr.b     472+6(A2)
00003A54  422A 01DF 4790          clr.b     472+7(A2)
                    4791   ; font8x8[60][0]=0x00;font8x8[60][1]=0x20;font8x8[60][2]=0x30;font8x8[60][3]=0x18;font8x8[60][4]=0x0c;font8x8[60][5]=0x06;font8x8[60][6]=0x03;font8x8[60][7]=0x01; 
00003A58  422A 01E0 4792          clr.b     480(A2)
00003A5C  157C 0020 4793          move.b    #32,480+1(A2)
00003A60  01E1      
00003A62  157C 0030 4794          move.b    #48,480+2(A2)
00003A66  01E2      
00003A68  157C 0018 4795          move.b    #24,480+3(A2)
00003A6C  01E3      
00003A6E  157C 000C 4796          move.b    #12,480+4(A2)
00003A72  01E4      
00003A74  157C 0006 4797          move.b    #6,480+5(A2)
00003A78  01E5      
00003A7A  157C 0003 4798          move.b    #3,480+6(A2)
00003A7E  01E6      
00003A80  157C 0001 4799          move.b    #1,480+7(A2)
00003A84  01E7      
                    4800   ; font8x8[61][0]=0x00;font8x8[61][1]=0x00;font8x8[61][2]=0x41;font8x8[61][3]=0x41;font8x8[61][4]=0x7f;font8x8[61][5]=0x7f;font8x8[61][6]=0x00;font8x8[61][7]=0x00; 
00003A86  422A 01E8 4801          clr.b     488(A2)
00003A8A  422A 01E9 4802          clr.b     488+1(A2)
00003A8E  157C 0041 4803          move.b    #65,488+2(A2)
00003A92  01EA      
00003A94  157C 0041 4804          move.b    #65,488+3(A2)
00003A98  01EB      
00003A9A  157C 007F 4805          move.b    #127,488+4(A2)
00003A9E  01EC      
00003AA0  157C 007F 4806          move.b    #127,488+5(A2)
00003AA4  01ED      
00003AA6  422A 01EE 4807          clr.b     488+6(A2)
00003AAA  422A 01EF 4808          clr.b     488+7(A2)
                    4809   ; font8x8[62][0]=0x00;font8x8[62][1]=0x08;font8x8[62][2]=0x18;font8x8[62][3]=0x3f;font8x8[62][4]=0x3f;font8x8[62][5]=0x18;font8x8[62][6]=0x08;font8x8[62][7]=0x00;
00003AAE  422A 01F0 4810          clr.b     496(A2)
00003AB2  157C 0008 4811          move.b    #8,496+1(A2)
00003AB6  01F1      
00003AB8  157C 0018 4812          move.b    #24,496+2(A2)
00003ABC  01F2      
00003ABE  157C 003F 4813          move.b    #63,496+3(A2)
00003AC2  01F3      
00003AC4  157C 003F 4814          move.b    #63,496+4(A2)
00003AC8  01F4      
00003ACA  157C 0018 4815          move.b    #24,496+5(A2)
00003ACE  01F5      
00003AD0  157C 0008 4816          move.b    #8,496+6(A2)
00003AD4  01F6      
00003AD6  422A 01F7 4817          clr.b     496+7(A2)
00003ADA  4CDF 3C00 4818          movem.l   (A7)+,A2/A3/A4/A5
00003ADE  4E75      4819          rts
                    4820   ; }
                    4821   ; void cosmic_impalas_main() {
                    4822   _cosmic_impalas_main:
                    4823   ; // NOTE: initializers don't get run, so we init here
                    4824   ; FIRE1  = 0;
00003AE0  42B9 0803 4825          clr.l     _FIRE1.L
00003AE4  0422      
                    4826   ; LEFT1  = 0;
00003AE6  42B9 0803 4827          clr.l     _LEFT1.L
00003AEA  0426      
                    4828   ; RIGHT1 = 0;
00003AEC  42B9 0803 4829          clr.l     _RIGHT1.L
00003AF0  042A      
                    4830   ; srand(1234);
00003AF2  4878 04D2 4831          pea       1234
00003AF6  4EB8 1BC8 4832          jsr       _srand
00003AFA  584F      4833          addq.w    #4,A7
                    4834   ; initialize_all_bitmaps();
00003AFC  4EB8 2AE4 4835          jsr       _initialize_all_bitmaps
                    4836   ; credits = 0;
00003B00  4239 0803 4837          clr.b     _credits.L
00003B04  0442      
                    4838   ; play_game(); 
00003B06  4EB8 2AA4 4839          jsr       _play_game
00003B0A  4E75      4840          rts
                    4841   ; }
                    4842   _toupper:
00003B0C  4E56 0000 4843          link      A6,#0
00003B10  48E7 2000 4844          movem.l   D2,-(A7)
00003B14  242E 0008 4845          move.l    8(A6),D2
00003B18  0C82 0000 4846          cmp.l     #97,D2
00003B1C  0061      
00003B1E  6D0E      4847          blt.s     toupper_1
00003B20  0C82 0000 4848          cmp.l     #122,D2
00003B24  007A      
00003B26  6E06      4849          bgt.s     toupper_1
00003B28  C4BC 0000 4850          and.l     #95,D2
00003B2C  005F      
                    4851   toupper_1:
00003B2E  2002      4852          move.l    D2,D0
00003B30  4CDF 0004 4853          movem.l   (A7)+,D2
00003B34  4E5E      4854          unlk      A6
00003B36  4E75      4855          rts
                    4856   _printf:
00003B38  4E56 FFFC 4857          link      A6,#-4
00003B3C  48E7 2000 4858          movem.l   D2,-(A7)
00003B40  41EE 0008 4859          lea       8(A6),A0
00003B44  5848      4860          addq.w    #4,A0
00003B46  2408      4861          move.l    A0,D2
00003B48  2F02      4862          move.l    D2,-(A7)
00003B4A  2F2E 0008 4863          move.l    8(A6),-(A7)
00003B4E  42A7      4864          clr.l     -(A7)
00003B50  6100 0190 4865          bsr       _vsprintf
00003B54  DEFC 000C 4866          add.w     #12,A7
00003B58  2D40 FFFC 4867          move.l    D0,-4(A6)
00003B5C  4282      4868          clr.l     D2
00003B5E  202E FFFC 4869          move.l    -4(A6),D0
00003B62  4CDF 0004 4870          movem.l   (A7)+,D2
00003B66  4E5E      4871          unlk      A6
00003B68  4E75      4872          rts
                    4873   ULMUL:
00003B6A  4E56 0000 4874          link    A6,#0
00003B6E  48E7 C000 4875          movem.l D0/D1,-(A7)
00003B72  222E 0008 4876          move.l  8(A6),D1
00003B76  202E 000C 4877          move.l  12(A6),D0
00003B7A  602C      4878          bra.s   lmul_3
                    4879   LMUL:
00003B7C  4E56 0000 4880          link    A6,#0
00003B80  48E7 C000 4881          movem.l D0/D1,-(A7)
00003B84  222E 0008 4882          move.l  8(A6),D1
00003B88  202E 000C 4883          move.l  12(A6),D0
00003B8C  4A80      4884          tst.l   D0
00003B8E  6A0A      4885          bpl.s   lmul_1
00003B90  4480      4886          neg.l   D0
00003B92  4A81      4887          tst.l   D1
00003B94  6A0A      4888          bpl.s   lmul_2
00003B96  4481      4889          neg.l   D1
00003B98  600E      4890          bra.s   lmul_3
                    4891   lmul_1:
00003B9A  4A81      4892          tst.l   D1
00003B9C  6A0A      4893          bpl.s   lmul_3
00003B9E  4481      4894          neg.l   D1
                    4895   lmul_2:
00003BA0  6114      4896          bsr.s   domul
00003BA2  4481      4897          neg.l   D1
00003BA4  4080      4898          negx.l  D0
00003BA6  6002      4899          bra.s   lmul_4
                    4900   lmul_3:
00003BA8  610C      4901          bsr.s   domul
                    4902   lmul_4:
00003BAA  2D41 0008 4903          move.l  D1,8(A6)
00003BAE  4CDF 0003 4904          movem.l (A7)+,D0/D1
00003BB2  4E5E      4905          unlk    A6
00003BB4  4E75      4906          rts
                    4907   domul:
00003BB6  0C81 0000 4908          cmpi.l  #$FFFF,D1
00003BBA  FFFF      
00003BBC  620C      4909          bhi.s   domul_1
00003BBE  0C80 0000 4910          cmpi.l  #$FFFF,D0
00003BC2  FFFF      
00003BC4  620E      4911          bhi.s   domul_2
00003BC6  C2C0      4912          mulu    D0,D1
00003BC8  4E75      4913          rts
                    4914   domul_1:
00003BCA  0C80 0000 4915          cmpi.l  #$FFFF,D0
00003BCE  FFFF      
00003BD0  6218      4916          bhi.s   domul_4
00003BD2  6002      4917          bra.s   domul_3
                    4918   domul_2
00003BD4  C141      4919          exg     D0,D1
                    4920   domul_3:
00003BD6  2F02      4921          move.l  D2,-(A7)
00003BD8  2401      4922          move.l  D1,D2
00003BDA  4842      4923          swap    D2
00003BDC  C2C0      4924          mulu    D0,D1
00003BDE  C4C0      4925          mulu    D0,D2
00003BE0  4842      4926          swap    D2
00003BE2  4242      4927          clr.w   D2
00003BE4  D282      4928          add.l   D2,D1
00003BE6  241F      4929          move.l  (A7)+,D2
00003BE8  4E75      4930          rts
                    4931   domul_4:
00003BEA  48E7 3000 4932          movem.l D2/D3,-(A7)
00003BEE  2401      4933          move.l  D1,D2
00003BF0  2601      4934          move.l  D1,D3
00003BF2  C2C0      4935          mulu    D0,D1
00003BF4  4842      4936          swap    D2
00003BF6  C4C0      4937          mulu    D0,D2
00003BF8  4840      4938          swap    D0
00003BFA  C6C0      4939          mulu    D0,D3
00003BFC  D483      4940          add.l   D3,D2
00003BFE  4842      4941          swap    D2
00003C00  4242      4942          clr.w   D2
00003C02  D282      4943          add.l   D2,D1
00003C04  4CDF 000C 4944          movem.l (A7)+,D2/D3
00003C08  4E75      4945          rts
                    4946   _memmove:
00003C0A  206F 0004 4947          move.l    (4,A7),A0
00003C0E  226F 0008 4948          move.l    (8,A7),A1
00003C12  222F 000C 4949          move.l    (12,A7),D1
00003C16  2008      4950          move.l    A0,D0
00003C18  B1C9      4951          cmp.l     A1,A0
00003C1A  6408      4952          bcc.s     memmove_1
                    4953   memmove_0:
00003C1C  10D9      4954          move.b    (A1)+,(A0)+
00003C1E  5341      4955          subq      #1,D1
00003C20  66FA      4956          bne       memmove_0
00003C22  4E75      4957          rts
                    4958   memmove_1:
00003C24  D3C1      4959          add.l     D1,A1
00003C26  D1C1      4960          add.l     D1,A0
                    4961   memmove_2:
00003C28  1121      4962          move.b    -(A1),-(A0)
00003C2A  5341      4963          subq      #1,d1
00003C2C  66FA      4964          bne       memmove_2
00003C2E  4E75      4965          rts
                    4966   @vsprintf_copy:
00003C30  4E56 0000 4967          link      A6,#0
00003C34  206E 0008 4968          move.l    8(A6),A0
00003C38  4A90      4969          tst.l     (A0)
00003C3A  6710      4970          beq.s     @vsprintf_copy_1
00003C3C  202E 000C 4971          move.l    12(A6),D0
00003C40  206E 0008 4972          move.l    8(A6),A0
00003C44  2250      4973          move.l    (A0),A1
00003C46  5290      4974          addq.l    #1,(A0)
00003C48  1280      4975          move.b    D0,(A1)
00003C4A  600A      4976          bra.s     @vsprintf_copy_2
                    4977   @vsprintf_copy_1:
00003C4C  2F2E 000C 4978          move.l    12(A6),-(A7)
00003C50  6100 085C 4979          bsr       _putch
00003C54  584F      4980          addq.w    #4,A7
                    4981   @vsprintf_copy_2:
00003C56  4E5E      4982          unlk      A6
00003C58  4E75      4983          rts
                    4984   @vsprintf_getval:
00003C5A  4E56 0000 4985          link      A6,#0
00003C5E  48E7 3000 4986          movem.l   D2/D3,-(A7)
00003C62  242E 0008 4987          move.l    8(A6),D2
00003C66  4283      4988          clr.l     D3
00003C68  2042      4989          move.l    D2,A0
00003C6A  2050      4990          move.l    (A0),A0
00003C6C  1010      4991          move.b    (A0),D0
00003C6E  4880      4992          ext.w     D0
00003C70  48C0      4993          ext.l     D0
00003C72  0C80 0000 4994          cmp.l     #42,D0
00003C76  002A      
00003C78  6612      4995          bne.s     @vsprintf_getval_1
00003C7A  206E 000C 4996          move.l    12(A6),A0
00003C7E  2250      4997          move.l    (A0),A1
00003C80  5890      4998          addq.l    #4,(A0)
00003C82  2611      4999          move.l    (A1),D3
00003C84  2042      5000          move.l    D2,A0
00003C86  5290      5001          addq.l    #1,(A0)
00003C88  6000 004E 5002          bra       @vsprintf_getval_5
                    5003   @vsprintf_getval_1:
00003C8C  2042      5004          move.l    D2,A0
00003C8E  2050      5005          move.l    (A0),A0
00003C90  1010      5006          move.b    (A0),D0
00003C92  4880      5007          ext.w     D0
00003C94  48C0      5008          ext.l     D0
00003C96  0C80 0000 5009          cmp.l     #48,D0
00003C9A  0030      
00003C9C  6D00 003A 5010          blt       @vsprintf_getval_5
00003CA0  2042      5011          move.l    D2,A0
00003CA2  2050      5012          move.l    (A0),A0
00003CA4  1010      5013          move.b    (A0),D0
00003CA6  4880      5014          ext.w     D0
00003CA8  48C0      5015          ext.l     D0
00003CAA  0C80 0000 5016          cmp.l     #57,D0
00003CAE  0039      
00003CB0  6E26      5017          bgt.s     @vsprintf_getval_5
00003CB2  2F03      5018          move.l    D3,-(A7)
00003CB4  4878 000A 5019          pea       10
00003CB8  6100 FEC2 5020          bsr       LMUL
00003CBC  2017      5021          move.l    (A7),D0
00003CBE  504F      5022          addq.w    #8,A7
00003CC0  2042      5023          move.l    D2,A0
00003CC2  2250      5024          move.l    (A0),A1
00003CC4  5290      5025          addq.l    #1,(A0)
00003CC6  1211      5026          move.b    (A1),D1
00003CC8  4881      5027          ext.w     D1
00003CCA  48C1      5028          ext.l     D1
00003CCC  D081      5029          add.l     D1,D0
00003CCE  0480 0000 5030          sub.l     #48,D0
00003CD2  0030      
00003CD4  2600      5031          move.l    D0,D3
00003CD6  60B4      5032          bra       @vsprintf_getval_1
                    5033   @vsprintf_getval_5:
00003CD8  2003      5034          move.l    D3,D0
00003CDA  4CDF 000C 5035          movem.l   (A7)+,D2/D3
00003CDE  4E5E      5036          unlk      A6
00003CE0  4E75      5037          rts
                    5038   _vsprintf:
00003CE2  4E56 FFCC 5039          link      A6,#-52
00003CE6  48E7 3F3C 5040          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003CEA  45EE 0008 5041          lea       8(A6),A2
00003CEE  47F8 3C30 5042          lea       @vsprintf_copy,A3
00003CF2  49F9 0000 5043          lea       _ultoa,A4
00003CF6  443A      
00003CF8  4286      5044          clr.l     D6
                    5045   vsprintf_1:
00003CFA  206E 000C 5046          move.l    12(A6),A0
00003CFE  4A10      5047          tst.b     (A0)
00003D00  6700 0624 5048          beq       vsprintf_3
00003D04  206E 000C 5049          move.l    12(A6),A0
00003D08  1010      5050          move.b    (A0),D0
00003D0A  4880      5051          ext.w     D0
00003D0C  48C0      5052          ext.l     D0
00003D0E  0C80 0000 5053          cmp.l     #37,D0
00003D12  0025      
00003D14  671C      5054          beq.s     vsprintf_4
00003D16  206E 000C 5055          move.l    12(A6),A0
00003D1A  52AE 000C 5056          addq.l    #1,12(A6)
00003D1E  1210      5057          move.b    (A0),D1
00003D20  4881      5058          ext.w     D1
00003D22  48C1      5059          ext.l     D1
00003D24  2F01      5060          move.l    D1,-(A7)
00003D26  2F0A      5061          move.l    A2,-(A7)
00003D28  4E93      5062          jsr       (A3)
00003D2A  504F      5063          addq.w    #8,A7
00003D2C  5286      5064          addq.l    #1,D6
00003D2E  6000 05F2 5065          bra       vsprintf_2
                    5066   vsprintf_4:
00003D32  52AE 000C 5067          addq.l    #1,12(A6)
00003D36  422E FFD3 5068          clr.b     -45(A6)
00003D3A  422E FFD2 5069          clr.b     -46(A6)
00003D3E  422E FFD0 5070          clr.b     -48(A6)
00003D42  422E FFCF 5071          clr.b     -49(A6)
00003D46  422E FFCE 5072          clr.b     -50(A6)
00003D4A  422E FFCD 5073          clr.b     -51(A6)
00003D4E  42AE FFFC 5074          clr.l     -4(A6)
00003D52  7AFF      5075          moveq     #-1,D5
00003D54  41EE FFDC 5076          lea       -36(A6),A0
00003D58  2608      5077          move.l    A0,D3
00003D5A  2408      5078          move.l    A0,D2
                    5079   vsprintf_6:
00003D5C  206E 000C 5080          move.l    12(A6),A0
00003D60  1010      5081          move.b    (A0),D0
00003D62  4880      5082          ext.w     D0
00003D64  48C0      5083          ext.l     D0
00003D66  0C80 0000 5084          cmp.l     #43,D0
00003D6A  002B      
00003D6C  6730      5085          beq.s     vsprintf_12
00003D6E  6E18      5086          bgt.s     vsprintf_15
00003D70  0C80 0000 5087          cmp.l     #35,D0
00003D74  0023      
00003D76  6700 003E 5088          beq       vsprintf_14
00003D7A  6E00 0046 5089          bgt       vsprintf_9
00003D7E  0C80 0000 5090          cmp.l     #32,D0
00003D82  0020      
00003D84  6724      5091          beq.s     vsprintf_13
00003D86  603A      5092          bra.s     vsprintf_9
                    5093   vsprintf_15:
00003D88  0C80 0000 5094          cmp.l     #45,D0
00003D8C  002D      
00003D8E  6702      5095          beq.s     vsprintf_11
00003D90  6030      5096          bra.s     vsprintf_9
                    5097   vsprintf_11:
00003D92  1D7C 0001 5098          move.b    #1,-51(A6)
00003D96  FFCD      
00003D98  52AE 000C 5099          addq.l    #1,12(A6)
00003D9C  6026      5100          bra.s     vsprintf_7
                    5101   vsprintf_12:
00003D9E  1D7C 0001 5102          move.b    #1,-50(A6)
00003DA2  FFCE      
00003DA4  52AE 000C 5103          addq.l    #1,12(A6)
00003DA8  601A      5104          bra.s     vsprintf_7
                    5105   vsprintf_13:
00003DAA  1D7C 0001 5106          move.b    #1,-49(A6)
00003DAE  FFCF      
00003DB0  52AE 000C 5107          addq.l    #1,12(A6)
00003DB4  600E      5108          bra.s     vsprintf_7
                    5109   vsprintf_14:
00003DB6  1D7C 0001 5110          move.b    #1,-48(A6)
00003DBA  FFD0      
00003DBC  52AE 000C 5111          addq.l    #1,12(A6)
00003DC0  6002      5112          bra.s     vsprintf_7
                    5113   vsprintf_9:
00003DC2  6002      5114          bra.s     vsprintf_8
                    5115   vsprintf_7:
00003DC4  6096      5116          bra       vsprintf_6
                    5117   vsprintf_8:
00003DC6  206E 000C 5118          move.l    12(A6),A0
00003DCA  1010      5119          move.b    (A0),D0
00003DCC  4880      5120          ext.w     D0
00003DCE  48C0      5121          ext.l     D0
00003DD0  0C80 0000 5122          cmp.l     #48,D0
00003DD4  0030      
00003DD6  660A      5123          bne.s     vsprintf_16
00003DD8  52AE 000C 5124          addq.l    #1,12(A6)
00003DDC  1D7C 0001 5125          move.b    #1,-46(A6)
00003DE0  FFD2      
                    5126   vsprintf_16:
00003DE2  486E 0010 5127          pea       16(A6)
00003DE6  486E 000C 5128          pea       12(A6)
00003DEA  6100 FE6E 5129          bsr       @vsprintf_getval
00003DEE  504F      5130          addq.w    #8,A7
00003DF0  2A40      5131          move.l    D0,A5
00003DF2  206E 000C 5132          move.l    12(A6),A0
00003DF6  1010      5133          move.b    (A0),D0
00003DF8  4880      5134          ext.w     D0
00003DFA  48C0      5135          ext.l     D0
00003DFC  0C80 0000 5136          cmp.l     #46,D0
00003E00  002E      
00003E02  6614      5137          bne.s     vsprintf_18
00003E04  52AE 000C 5138          addq.l    #1,12(A6)
00003E08  486E 0010 5139          pea       16(A6)
00003E0C  486E 000C 5140          pea       12(A6)
00003E10  6100 FE48 5141          bsr       @vsprintf_getval
00003E14  504F      5142          addq.w    #8,A7
00003E16  2A00      5143          move.l    D0,D5
                    5144   vsprintf_18:
00003E18  206E 000C 5145          move.l    12(A6),A0
00003E1C  1010      5146          move.b    (A0),D0
00003E1E  4880      5147          ext.w     D0
00003E20  48C0      5148          ext.l     D0
00003E22  0C80 0000 5149          cmp.l     #108,D0
00003E26  006C      
00003E28  660A      5150          bne.s     vsprintf_20
00003E2A  52AE 000C 5151          addq.l    #1,12(A6)
00003E2E  1D7C 0001 5152          move.b    #1,-45(A6)
00003E32  FFD3      
                    5153   vsprintf_20:
00003E34  206E 000C 5154          move.l    12(A6),A0
00003E38  1010      5155          move.b    (A0),D0
00003E3A  4880      5156          ext.w     D0
00003E3C  48C0      5157          ext.l     D0
00003E3E  0C80 0000 5158          cmp.l     #111,D0
00003E42  006F      
00003E44  6700 00D4 5159          beq       vsprintf_27
00003E48  6E34      5160          bgt.s     vsprintf_33
00003E4A  0C80 0000 5161          cmp.l     #100,D0
00003E4E  0064      
00003E50  6700 0054 5162          beq       vsprintf_24
00003E54  6E1C      5163          bgt.s     vsprintf_34
00003E56  0C80 0000 5164          cmp.l     #99,D0
00003E5A  0063      
00003E5C  6700 012C 5165          beq       vsprintf_30
00003E60  6E00 016A 5166          bgt       vsprintf_22
00003E64  0C80 0000 5167          cmp.l     #88,D0
00003E68  0058      
00003E6A  6700 00E6 5168          beq       vsprintf_28
00003E6E  6000 015C 5169          bra       vsprintf_22
                    5170   vsprintf_34:
00003E72  0C80 0000 5171          cmp.l     #105,D0
00003E76  0069      
00003E78  672C      5172          beq.s     vsprintf_24
00003E7A  6000 0150 5173          bra       vsprintf_22
                    5174   vsprintf_33:
00003E7E  0C80 0000 5175          cmp.l     #117,D0
00003E82  0075      
00003E84  6700 005C 5176          beq       vsprintf_26
00003E88  6E0E      5177          bgt.s     vsprintf_35
00003E8A  0C80 0000 5178          cmp.l     #115,D0
00003E8E  0073      
00003E90  6700 011C 5179          beq       vsprintf_31
00003E94  6000 0136 5180          bra       vsprintf_22
                    5181   vsprintf_35:
00003E98  0C80 0000 5182          cmp.l     #120,D0
00003E9C  0078      
00003E9E  6700 00B2 5183          beq       vsprintf_28
00003EA2  6000 0128 5184          bra       vsprintf_22
                    5185   vsprintf_24:
00003EA6  4A2E FFD3 5186          tst.b     -45(A6)
00003EAA  671A      5187          beq.s     vsprintf_36
00003EAC  4878 000A 5188          pea       10
00003EB0  2F03      5189          move.l    D3,-(A7)
00003EB2  206E 0010 5190          move.l    16(A6),A0
00003EB6  58AE 0010 5191          addq.l    #4,16(A6)
00003EBA  2F10      5192          move.l    (A0),-(A7)
00003EBC  6100 04F8 5193          bsr       _ltoa
00003EC0  DEFC 000C 5194          add.w     #12,A7
00003EC4  6018      5195          bra.s     vsprintf_37
                    5196   vsprintf_36:
00003EC6  4878 000A 5197          pea       10
00003ECA  2F03      5198          move.l    D3,-(A7)
00003ECC  206E 0010 5199          move.l    16(A6),A0
00003ED0  58AE 0010 5200          addq.l    #4,16(A6)
00003ED4  2F10      5201          move.l    (A0),-(A7)
00003ED6  6100 04DE 5202          bsr       _ltoa
00003EDA  DEFC 000C 5203          add.w     #12,A7
                    5204   vsprintf_37:
00003EDE  6000 00FA 5205          bra       vsprintf_23
                    5206   vsprintf_26:
00003EE2  4A2E FFD3 5207          tst.b     -45(A6)
00003EE6  6718      5208          beq.s     vsprintf_38
00003EE8  4878 000A 5209          pea       10
00003EEC  2F03      5210          move.l    D3,-(A7)
00003EEE  206E 0010 5211          move.l    16(A6),A0
00003EF2  58AE 0010 5212          addq.l    #4,16(A6)
00003EF6  2F10      5213          move.l    (A0),-(A7)
00003EF8  4E94      5214          jsr       (A4)
00003EFA  DEFC 000C 5215          add.w     #12,A7
00003EFE  6016      5216          bra.s     vsprintf_39
                    5217   vsprintf_38:
00003F00  4878 000A 5218          pea       10
00003F04  2F03      5219          move.l    D3,-(A7)
00003F06  206E 0010 5220          move.l    16(A6),A0
00003F0A  58AE 0010 5221          addq.l    #4,16(A6)
00003F0E  2F10      5222          move.l    (A0),-(A7)
00003F10  4E94      5223          jsr       (A4)
00003F12  DEFC 000C 5224          add.w     #12,A7
                    5225   vsprintf_39:
00003F16  6000 00C2 5226          bra       vsprintf_23
                    5227   vsprintf_27:
00003F1A  4A2E FFD3 5228          tst.b     -45(A6)
00003F1E  6718      5229          beq.s     vsprintf_40
00003F20  4878 0008 5230          pea       8
00003F24  2F03      5231          move.l    D3,-(A7)
00003F26  206E 0010 5232          move.l    16(A6),A0
00003F2A  58AE 0010 5233          addq.l    #4,16(A6)
00003F2E  2F10      5234          move.l    (A0),-(A7)
00003F30  4E94      5235          jsr       (A4)
00003F32  DEFC 000C 5236          add.w     #12,A7
00003F36  6016      5237          bra.s     vsprintf_41
                    5238   vsprintf_40:
00003F38  4878 0008 5239          pea       8
00003F3C  2F03      5240          move.l    D3,-(A7)
00003F3E  206E 0010 5241          move.l    16(A6),A0
00003F42  58AE 0010 5242          addq.l    #4,16(A6)
00003F46  2F10      5243          move.l    (A0),-(A7)
00003F48  4E94      5244          jsr       (A4)
00003F4A  DEFC 000C 5245          add.w     #12,A7
                    5246   vsprintf_41:
00003F4E  6000 008A 5247          bra       vsprintf_23
                    5248   vsprintf_28:
00003F52  4A2E FFD3 5249          tst.b     -45(A6)
00003F56  6718      5250          beq.s     vsprintf_42
00003F58  4878 0010 5251          pea       16
00003F5C  2F03      5252          move.l    D3,-(A7)
00003F5E  206E 0010 5253          move.l    16(A6),A0
00003F62  58AE 0010 5254          addq.l    #4,16(A6)
00003F66  2F10      5255          move.l    (A0),-(A7)
00003F68  4E94      5256          jsr       (A4)
00003F6A  DEFC 000C 5257          add.w     #12,A7
00003F6E  6016      5258          bra.s     vsprintf_43
                    5259   vsprintf_42:
00003F70  4878 0010 5260          pea       16
00003F74  2F03      5261          move.l    D3,-(A7)
00003F76  206E 0010 5262          move.l    16(A6),A0
00003F7A  58AE 0010 5263          addq.l    #4,16(A6)
00003F7E  2F10      5264          move.l    (A0),-(A7)
00003F80  4E94      5265          jsr       (A4)
00003F82  DEFC 000C 5266          add.w     #12,A7
                    5267   vsprintf_43:
00003F86  6000 0052 5268          bra       vsprintf_23
                    5269   vsprintf_30:
00003F8A  206E 0010 5270          move.l    16(A6),A0
00003F8E  58AE 0010 5271          addq.l    #4,16(A6)
00003F92  2010      5272          move.l    (A0),D0
00003F94  2042      5273          move.l    D2,A0
00003F96  5282      5274          addq.l    #1,D2
00003F98  1080      5275          move.b    D0,(A0)
00003F9A  2042      5276          move.l    D2,A0
00003F9C  4210      5277          clr.b     (A0)
00003F9E  200D      5278          move.l    A5,D0
00003FA0  6704      5279          beq.s     vsprintf_44
00003FA2  200D      5280          move.l    A5,D0
00003FA4  6002      5281          bra.s     vsprintf_45
                    5282   vsprintf_44:
00003FA6  7001      5283          moveq     #1,D0
                    5284   vsprintf_45:
00003FA8  2A00      5285          move.l    D0,D5
00003FAA  6000 002E 5286          bra       vsprintf_23
                    5287   vsprintf_31:
00003FAE  206E 0010 5288          move.l    16(A6),A0
00003FB2  58AE 0010 5289          addq.l    #4,16(A6)
00003FB6  2610      5290          move.l    (A0),D3
00003FB8  0C85 FFFF 5291          cmp.l     #-1,D5
00003FBC  FFFF      
00003FBE  660A      5292          bne.s     vsprintf_46
00003FC0  2F03      5293          move.l    D3,-(A7)
00003FC2  6100 04D8 5294          bsr       _strlen
00003FC6  584F      5295          addq.w    #4,A7
00003FC8  2A00      5296          move.l    D0,D5
                    5297   vsprintf_46:
00003FCA  600E      5298          bra.s     vsprintf_23
                    5299   vsprintf_22:
00003FCC  206E 000C 5300          move.l    12(A6),A0
00003FD0  2242      5301          move.l    D2,A1
00003FD2  5282      5302          addq.l    #1,D2
00003FD4  1290      5303          move.b    (A0),(A1)
00003FD6  2042      5304          move.l    D2,A0
00003FD8  4210      5305          clr.b     (A0)
                    5306   vsprintf_23:
00003FDA  2F03      5307          move.l    D3,-(A7)
00003FDC  6100 04BE 5308          bsr       _strlen
00003FE0  584F      5309          addq.w    #4,A7
00003FE2  1800      5310          move.b    D0,D4
00003FE4  206E 000C 5311          move.l    12(A6),A0
00003FE8  1010      5312          move.b    (A0),D0
00003FEA  4880      5313          ext.w     D0
00003FEC  48C0      5314          ext.l     D0
00003FEE  0C80 0000 5315          cmp.l     #115,D0
00003FF2  0073      
00003FF4  6618      5316          bne.s     vsprintf_48
00003FF6  0C85 0000 5317          cmp.l     #0,D5
00003FFA  0000      
00003FFC  6D10      5318          blt.s     vsprintf_48
00003FFE  4884      5319          ext.w     D4
00004000  48C4      5320          ext.l     D4
00004002  B885      5321          cmp.l     D5,D4
00004004  6F04      5322          ble.s     vsprintf_50
00004006  1005      5323          move.b    D5,D0
00004008  6002      5324          bra.s     vsprintf_51
                    5325   vsprintf_50:
0000400A  1004      5326          move.b    D4,D0
                    5327   vsprintf_51:
0000400C  1800      5328          move.b    D0,D4
                    5329   vsprintf_48:
0000400E  206E 000C 5330          move.l    12(A6),A0
00004012  1010      5331          move.b    (A0),D0
00004014  4880      5332          ext.w     D0
00004016  48C0      5333          ext.l     D0
00004018  0C80 0000 5334          cmp.l     #88,D0
0000401C  0058      
0000401E  6600 0026 5335          bne       vsprintf_56
00004022  41EE FFDC 5336          lea       -36(A6),A0
00004026  2408      5337          move.l    A0,D2
                    5338   vsprintf_54:
00004028  2042      5339          move.l    D2,A0
0000402A  4A10      5340          tst.b     (A0)
0000402C  6718      5341          beq.s     vsprintf_56
0000402E  2042      5342          move.l    D2,A0
00004030  1210      5343          move.b    (A0),D1
00004032  4881      5344          ext.w     D1
00004034  48C1      5345          ext.l     D1
00004036  2F01      5346          move.l    D1,-(A7)
00004038  6100 FAD2 5347          bsr       _toupper
0000403C  584F      5348          addq.w    #4,A7
0000403E  2042      5349          move.l    D2,A0
00004040  1080      5350          move.b    D0,(A0)
00004042  5282      5351          addq.l    #1,D2
00004044  60E2      5352          bra       vsprintf_54
                    5353   vsprintf_56:
00004046  7E00      5354          moveq     #0,D7
00004048  41EE FFD4 5355          lea       -44(A6),A0
0000404C  2408      5356          move.l    A0,D2
0000404E  206E 000C 5357          move.l    12(A6),A0
00004052  1010      5358          move.b    (A0),D0
00004054  4880      5359          ext.w     D0
00004056  48C0      5360          ext.l     D0
00004058  0C80 0000 5361          cmp.l     #100,D0
0000405C  0064      
0000405E  6714      5362          beq.s     vsprintf_59
00004060  206E 000C 5363          move.l    12(A6),A0
00004064  1010      5364          move.b    (A0),D0
00004066  4880      5365          ext.w     D0
00004068  48C0      5366          ext.l     D0
0000406A  0C80 0000 5367          cmp.l     #105,D0
0000406E  0069      
00004070  6600 0076 5368          bne       vsprintf_65
                    5369   vsprintf_59:
00004074  4A2E FFCE 5370          tst.b     -50(A6)
00004078  6612      5371          bne.s     vsprintf_62
0000407A  2043      5372          move.l    D3,A0
0000407C  1010      5373          move.b    (A0),D0
0000407E  4880      5374          ext.w     D0
00004080  48C0      5375          ext.l     D0
00004082  0C80 0000 5376          cmp.l     #45,D0
00004086  002D      
00004088  6600 002E 5377          bne       vsprintf_60
                    5378   vsprintf_62:
0000408C  2043      5379          move.l    D3,A0
0000408E  1010      5380          move.b    (A0),D0
00004090  4880      5381          ext.w     D0
00004092  48C0      5382          ext.l     D0
00004094  0C80 0000 5383          cmp.l     #45,D0
00004098  002D      
0000409A  660E      5384          bne.s     vsprintf_63
0000409C  2043      5385          move.l    D3,A0
0000409E  5283      5386          addq.l    #1,D3
000040A0  2242      5387          move.l    D2,A1
000040A2  5282      5388          addq.l    #1,D2
000040A4  1290      5389          move.b    (A0),(A1)
000040A6  5304      5390          subq.b    #1,D4
000040A8  6008      5391          bra.s     vsprintf_64
                    5392   vsprintf_63:
000040AA  2042      5393          move.l    D2,A0
000040AC  5282      5394          addq.l    #1,D2
000040AE  10BC 002B 5395          move.b    #43,(A0)
                    5396   vsprintf_64:
000040B2  5287      5397          addq.l    #1,D7
000040B4  6000 0032 5398          bra       vsprintf_65
                    5399   vsprintf_60:
000040B8  4A2E FFCF 5400          tst.b     -49(A6)
000040BC  6700 002A 5401          beq       vsprintf_65
000040C0  2043      5402          move.l    D3,A0
000040C2  1010      5403          move.b    (A0),D0
000040C4  4880      5404          ext.w     D0
000040C6  48C0      5405          ext.l     D0
000040C8  0C80 0000 5406          cmp.l     #45,D0
000040CC  002D      
000040CE  660E      5407          bne.s     vsprintf_67
000040D0  2043      5408          move.l    D3,A0
000040D2  5283      5409          addq.l    #1,D3
000040D4  2242      5410          move.l    D2,A1
000040D6  5282      5411          addq.l    #1,D2
000040D8  1290      5412          move.b    (A0),(A1)
000040DA  5304      5413          subq.b    #1,D4
000040DC  6008      5414          bra.s     vsprintf_68
                    5415   vsprintf_67:
000040DE  2042      5416          move.l    D2,A0
000040E0  5282      5417          addq.l    #1,D2
000040E2  10BC 0020 5418          move.b    #32,(A0)
                    5419   vsprintf_68:
000040E6  5287      5420          addq.l    #1,D7
                    5421   vsprintf_65:
000040E8  4A2E FFD0 5422          tst.b     -48(A6)
000040EC  6700 0066 5423          beq       vsprintf_77
000040F0  206E 000C 5424          move.l    12(A6),A0
000040F4  1010      5425          move.b    (A0),D0
000040F6  4880      5426          ext.w     D0
000040F8  48C0      5427          ext.l     D0
000040FA  0C80 0000 5428          cmp.l     #111,D0
000040FE  006F      
00004100  671A      5429          beq.s     vsprintf_73
00004102  6E0C      5430          bgt.s     vsprintf_76
00004104  0C80 0000 5431          cmp.l     #88,D0
00004108  0058      
0000410A  6710      5432          beq.s     vsprintf_73
0000410C  6000 0046 5433          bra       vsprintf_77
                    5434   vsprintf_76:
00004110  0C80 0000 5435          cmp.l     #120,D0
00004114  0078      
00004116  6704      5436          beq.s     vsprintf_73
00004118  6000 003A 5437          bra       vsprintf_77
                    5438   vsprintf_73:
0000411C  2042      5439          move.l    D2,A0
0000411E  5282      5440          addq.l    #1,D2
00004120  10BC 0030 5441          move.b    #48,(A0)
00004124  5287      5442          addq.l    #1,D7
00004126  206E 000C 5443          move.l    12(A6),A0
0000412A  1010      5444          move.b    (A0),D0
0000412C  4880      5445          ext.w     D0
0000412E  48C0      5446          ext.l     D0
00004130  0C80 0000 5447          cmp.l     #120,D0
00004134  0078      
00004136  6712      5448          beq.s     vsprintf_79
00004138  206E 000C 5449          move.l    12(A6),A0
0000413C  1010      5450          move.b    (A0),D0
0000413E  4880      5451          ext.w     D0
00004140  48C0      5452          ext.l     D0
00004142  0C80 0000 5453          cmp.l     #88,D0
00004146  0058      
00004148  660A      5454          bne.s     vsprintf_77
                    5455   vsprintf_79:
0000414A  2042      5456          move.l    D2,A0
0000414C  5282      5457          addq.l    #1,D2
0000414E  10BC 0078 5458          move.b    #120,(A0)
00004152  5287      5459          addq.l    #1,D7
                    5460   vsprintf_77:
00004154  2042      5461          move.l    D2,A0
00004156  4210      5462          clr.b     (A0)
00004158  206E 000C 5463          move.l    12(A6),A0
0000415C  1010      5464          move.b    (A0),D0
0000415E  4880      5465          ext.w     D0
00004160  48C0      5466          ext.l     D0
00004162  0C80 0000 5467          cmp.l     #105,D0
00004166  0069      
00004168  6700 0076 5468          beq       vsprintf_82
0000416C  6E42      5469          bgt.s     vsprintf_93
0000416E  0C80 0000 5470          cmp.l     #99,D0
00004172  0063      
00004174  6700 0084 5471          beq       vsprintf_96
00004178  6E1C      5472          bgt.s     vsprintf_94
0000417A  0C80 0000 5473          cmp.l     #88,D0
0000417E  0058      
00004180  6700 005E 5474          beq       vsprintf_82
00004184  6E00 0184 5475          bgt       vsprintf_80
00004188  0C80 0000 5476          cmp.l     #69,D0
0000418C  0045      
0000418E  6700 0050 5477          beq       vsprintf_82
00004192  6000 0176 5478          bra       vsprintf_80
                    5479   vsprintf_94:
00004196  0C80 0000 5480          cmp.l     #101,D0
0000419A  0065      
0000419C  6700 0042 5481          beq       vsprintf_82
000041A0  6E00 0168 5482          bgt       vsprintf_80
000041A4  0C80 0000 5483          cmp.l     #100,D0
000041A8  0064      
000041AA  6734      5484          beq.s     vsprintf_82
000041AC  6000 015C 5485          bra       vsprintf_80
                    5486   vsprintf_93:
000041B0  0C80 0000 5487          cmp.l     #117,D0
000041B4  0075      
000041B6  6728      5488          beq.s     vsprintf_82
000041B8  6E1A      5489          bgt.s     vsprintf_95
000041BA  0C80 0000 5490          cmp.l     #115,D0
000041BE  0073      
000041C0  6700 0038 5491          beq       vsprintf_96
000041C4  6E00 0144 5492          bgt       vsprintf_80
000041C8  0C80 0000 5493          cmp.l     #111,D0
000041CC  006F      
000041CE  6710      5494          beq.s     vsprintf_82
000041D0  6000 0138 5495          bra       vsprintf_80
                    5496   vsprintf_95:
000041D4  0C80 0000 5497          cmp.l     #120,D0
000041D8  0078      
000041DA  6704      5498          beq.s     vsprintf_82
000041DC  6000 012C 5499          bra       vsprintf_80
                    5500   vsprintf_82:
000041E0  4A2E FFD2 5501          tst.b     -46(A6)
000041E4  6714      5502          beq.s     vsprintf_96
000041E6  4A2E FFCD 5503          tst.b     -51(A6)
000041EA  660E      5504          bne.s     vsprintf_96
000041EC  200D      5505          move.l    A5,D0
000041EE  9087      5506          sub.l     D7,D0
000041F0  4884      5507          ext.w     D4
000041F2  48C4      5508          ext.l     D4
000041F4  9084      5509          sub.l     D4,D0
000041F6  2D40 FFFC 5510          move.l    D0,-4(A6)
                    5511   vsprintf_96:
000041FA  202E FFFC 5512          move.l    -4(A6),D0
000041FE  0C80 0000 5513          cmp.l     #0,D0
00004202  0000      
00004204  6C04      5514          bge.s     vsprintf_98
00004206  42AE FFFC 5515          clr.l     -4(A6)
                    5516   vsprintf_98:
0000420A  4A2E FFCD 5517          tst.b     -51(A6)
0000420E  6600 0030 5518          bne       vsprintf_104
00004212  4884      5519          ext.w     D4
00004214  48C4      5520          ext.l     D4
00004216  2004      5521          move.l    D4,D0
00004218  D0AE FFFC 5522          add.l     -4(A6),D0
0000421C  D087      5523          add.l     D7,D0
0000421E  1D40 FFD1 5524          move.b    D0,-47(A6)
                    5525   vsprintf_102:
00004222  102E FFD1 5526          move.b    -47(A6),D0
00004226  4880      5527          ext.w     D0
00004228  48C0      5528          ext.l     D0
0000422A  220D      5529          move.l    A5,D1
0000422C  534D      5530          subq.w    #1,A5
0000422E  B081      5531          cmp.l     D1,D0
00004230  6C0E      5532          bge.s     vsprintf_104
00004232  4878 0020 5533          pea       32
00004236  2F0A      5534          move.l    A2,-(A7)
00004238  4E93      5535          jsr       (A3)
0000423A  504F      5536          addq.w    #8,A7
0000423C  5286      5537          addq.l    #1,D6
0000423E  60E2      5538          bra       vsprintf_102
                    5539   vsprintf_104:
00004240  41EE FFD4 5540          lea       -44(A6),A0
00004244  2408      5541          move.l    A0,D2
                    5542   vsprintf_105:
00004246  2042      5543          move.l    D2,A0
00004248  4A10      5544          tst.b     (A0)
0000424A  6716      5545          beq.s     vsprintf_107
0000424C  2042      5546          move.l    D2,A0
0000424E  5282      5547          addq.l    #1,D2
00004250  1210      5548          move.b    (A0),D1
00004252  4881      5549          ext.w     D1
00004254  48C1      5550          ext.l     D1
00004256  2F01      5551          move.l    D1,-(A7)
00004258  2F0A      5552          move.l    A2,-(A7)
0000425A  4E93      5553          jsr       (A3)
0000425C  504F      5554          addq.w    #8,A7
0000425E  5286      5555          addq.l    #1,D6
00004260  60E4      5556          bra       vsprintf_105
                    5557   vsprintf_107:
00004262  202E FFFC 5558          move.l    -4(A6),D0
00004266  1D40 FFD1 5559          move.b    D0,-47(A6)
                    5560   vsprintf_108:
0000426A  102E FFD1 5561          move.b    -47(A6),D0
0000426E  532E FFD1 5562          subq.b    #1,-47(A6)
00004272  4A00      5563          tst.b     D0
00004274  670E      5564          beq.s     vsprintf_110
00004276  4878 0030 5565          pea       48
0000427A  2F0A      5566          move.l    A2,-(A7)
0000427C  4E93      5567          jsr       (A3)
0000427E  504F      5568          addq.w    #8,A7
00004280  5286      5569          addq.l    #1,D6
00004282  60E6      5570          bra       vsprintf_108
                    5571   vsprintf_110:
00004284  2043      5572          move.l    D3,A0
00004286  4A10      5573          tst.b     (A0)
00004288  6700 0048 5574          beq       vsprintf_113
0000428C  206E 000C 5575          move.l    12(A6),A0
00004290  1010      5576          move.b    (A0),D0
00004292  4880      5577          ext.w     D0
00004294  48C0      5578          ext.l     D0
00004296  0C80 0000 5579          cmp.l     #115,D0
0000429A  0073      
0000429C  670C      5580          beq.s     vsprintf_116
0000429E  6E18      5581          bgt.s     vsprintf_119
000042A0  0C80 0000 5582          cmp.l     #99,D0
000042A4  0063      
000042A6  6702      5583          beq.s     vsprintf_116
000042A8  600E      5584          bra.s     vsprintf_119
                    5585   vsprintf_116:
000042AA  2005      5586          move.l    D5,D0
000042AC  5385      5587          subq.l    #1,D5
000042AE  0C80 0000 5588          cmp.l     #0,D0
000042B2  0000      
000042B4  6E02      5589          bgt.s     vsprintf_119
000042B6  6016      5590          bra.s     vsprintf_115
                    5591   vsprintf_119:
000042B8  2043      5592          move.l    D3,A0
000042BA  5283      5593          addq.l    #1,D3
000042BC  1210      5594          move.b    (A0),D1
000042BE  4881      5595          ext.w     D1
000042C0  48C1      5596          ext.l     D1
000042C2  2F01      5597          move.l    D1,-(A7)
000042C4  2F0A      5598          move.l    A2,-(A7)
000042C6  4E93      5599          jsr       (A3)
000042C8  504F      5600          addq.w    #8,A7
000042CA  5286      5601          addq.l    #1,D6
000042CC  6002      5602          bra.s     vsprintf_112
                    5603   vsprintf_115:
000042CE  6002      5604          bra.s     vsprintf_113
                    5605   vsprintf_112:
000042D0  60B2      5606          bra       vsprintf_110
                    5607   vsprintf_113:
000042D2  4A2E FFCD 5608          tst.b     -51(A6)
000042D6  6700 0030 5609          beq       vsprintf_125
000042DA  4884      5610          ext.w     D4
000042DC  48C4      5611          ext.l     D4
000042DE  2004      5612          move.l    D4,D0
000042E0  D0AE FFFC 5613          add.l     -4(A6),D0
000042E4  D087      5614          add.l     D7,D0
000042E6  1D40 FFD1 5615          move.b    D0,-47(A6)
                    5616   vsprintf_123:
000042EA  102E FFD1 5617          move.b    -47(A6),D0
000042EE  4880      5618          ext.w     D0
000042F0  48C0      5619          ext.l     D0
000042F2  220D      5620          move.l    A5,D1
000042F4  534D      5621          subq.w    #1,A5
000042F6  B081      5622          cmp.l     D1,D0
000042F8  6C0E      5623          bge.s     vsprintf_125
000042FA  4878 0020 5624          pea       32
000042FE  2F0A      5625          move.l    A2,-(A7)
00004300  4E93      5626          jsr       (A3)
00004302  504F      5627          addq.w    #8,A7
00004304  5386      5628          subq.l    #1,D6
00004306  60E2      5629          bra       vsprintf_123
                    5630   vsprintf_125:
00004308  6014      5631          bra.s     vsprintf_81
                    5632   vsprintf_80:
0000430A  206E 000C 5633          move.l    12(A6),A0
0000430E  1210      5634          move.b    (A0),D1
00004310  4881      5635          ext.w     D1
00004312  48C1      5636          ext.l     D1
00004314  2F01      5637          move.l    D1,-(A7)
00004316  2F0A      5638          move.l    A2,-(A7)
00004318  4E93      5639          jsr       (A3)
0000431A  504F      5640          addq.w    #8,A7
0000431C  5286      5641          addq.l    #1,D6
                    5642   vsprintf_81:
0000431E  52AE 000C 5643          addq.l    #1,12(A6)
                    5644   vsprintf_2:
00004322  6000 F9D6 5645          bra       vsprintf_1
                    5646   vsprintf_3:
00004326  4A92      5647          tst.l     (A2)
00004328  6710      5648          beq.s     vsprintf_126
0000432A  4201      5649          clr.b     D1
0000432C  C2BC 0000 5650          and.l     #255,D1
00004330  00FF      
00004332  2F01      5651          move.l    D1,-(A7)
00004334  2F0A      5652          move.l    A2,-(A7)
00004336  4E93      5653          jsr       (A3)
00004338  504F      5654          addq.w    #8,A7
                    5655   vsprintf_126:
0000433A  2006      5656          move.l    D6,D0
0000433C  4CDF 3CFC 5657          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004340  4E5E      5658          unlk      A6
00004342  4E75      5659          rts
                    5660   @itoa_convert:
00004344  4E56 0000 5661          link      A6,#0
00004348  48E7 3C00 5662          movem.l   D2/D3/D4/D5,-(A7)
0000434C  242E 0008 5663          move.l    8(A6),D2
00004350  262E 0010 5664          move.l    16(A6),D3
00004354  2A2E 000C 5665          move.l    12(A6),D5
00004358  2F05      5666          move.l    D5,-(A7)
0000435A  2F03      5667          move.l    D3,-(A7)
0000435C  6100 0190 5668          bsr       ULDIV
00004360  202F 0004 5669          move.l    4(A7),D0
00004364  504F      5670          addq.w    #8,A7
00004366  2800      5671          move.l    D0,D4
00004368  BA83      5672          cmp.l     D3,D5
0000436A  651A      5673          blo.s     @itoa_convert_1
0000436C  2F03      5674          move.l    D3,-(A7)
0000436E  2F05      5675          move.l    D5,-(A7)
00004370  2F03      5676          move.l    D3,-(A7)
00004372  6100 017A 5677          bsr       ULDIV
00004376  2217      5678          move.l    (A7),D1
00004378  504F      5679          addq.w    #8,A7
0000437A  2F01      5680          move.l    D1,-(A7)
0000437C  2F02      5681          move.l    D2,-(A7)
0000437E  61C4      5682          bsr       @itoa_convert
00004380  DEFC 000C 5683          add.w     #12,A7
00004384  2400      5684          move.l    D0,D2
                    5685   @itoa_convert_1:
00004386  0C84 0000 5686          cmp.l     #9,D4
0000438A  0009      
0000438C  6E0A      5687          bgt.s     @itoa_convert_3
0000438E  2004      5688          move.l    D4,D0
00004390  0680 0000 5689          add.l     #48,D0
00004394  0030      
00004396  600E      5690          bra.s     @itoa_convert_4
                    5691   @itoa_convert_3:
00004398  2004      5692          move.l    D4,D0
0000439A  0680 0000 5693          add.l     #97,D0
0000439E  0061      
000043A0  0480 0000 5694          sub.l     #10,D0
000043A4  000A      
                    5695   @itoa_convert_4:
000043A6  2042      5696          move.l    D2,A0
000043A8  1080      5697          move.b    D0,(A0)
000043AA  2002      5698          move.l    D2,D0
000043AC  5280      5699          addq.l    #1,D0
000043AE  4CDF 003C 5700          movem.l   (A7)+,D2/D3/D4/D5
000043B2  4E5E      5701          unlk      A6
000043B4  4E75      5702          rts
                    5703   _ltoa:
000043B6  4E56 0000 5704          link      A6,#0
000043BA  48E7 3C00 5705          movem.l   D2/D3/D4/D5,-(A7)
000043BE  242E 0008 5706          move.l    8(A6),D2
000043C2  262E 000C 5707          move.l    12(A6),D3
000043C6  2A2E 0010 5708          move.l    16(A6),D5
000043CA  2803      5709          move.l    D3,D4
000043CC  0C85 0000 5710          cmp.l     #2,D5
000043D0  0002      
000043D2  6D08      5711          blt.s     ltoa_3
000043D4  0C85 0000 5712          cmp.l     #36,D5
000043D8  0024      
000043DA  6F06      5713          ble.s     ltoa_1
                    5714   ltoa_3:
000043DC  2003      5715          move.l    D3,D0
000043DE  6000 0052 5716          bra       ltoa_4
                    5717   ltoa_1:
000043E2  0C85 0000 5718          cmp.l     #10,D5
000043E6  000A      
000043E8  6600 0032 5719          bne       ltoa_5
000043EC  0C82 0000 5720          cmp.l     #0,D2
000043F0  0000      
000043F2  6C28      5721          bge.s     ltoa_5
000043F4  2002      5722          move.l    D2,D0
000043F6  4480      5723          neg.l     D0
000043F8  2400      5724          move.l    D0,D2
000043FA  0C82 0000 5725          cmp.l     #0,D2
000043FE  0000      
00004400  6C12      5726          bge.s     ltoa_7
00004402  4879 0000 5727          pea       @itoa_1
00004406  48E6      
00004408  2F03      5728          move.l    D3,-(A7)
0000440A  6100 00D2 5729          bsr       _strcpy
0000440E  504F      5730          addq.w    #8,A7
00004410  2003      5731          move.l    D3,D0
00004412  601E      5732          bra.s     ltoa_4
                    5733   ltoa_7:
00004414  2044      5734          move.l    D4,A0
00004416  5284      5735          addq.l    #1,D4
00004418  10BC 002D 5736          move.b    #45,(A0)
                    5737   ltoa_5:
0000441C  2F05      5738          move.l    D5,-(A7)
0000441E  2F02      5739          move.l    D2,-(A7)
00004420  2F04      5740          move.l    D4,-(A7)
00004422  6100 FF20 5741          bsr       @itoa_convert
00004426  DEFC 000C 5742          add.w     #12,A7
0000442A  2800      5743          move.l    D0,D4
0000442C  2044      5744          move.l    D4,A0
0000442E  4210      5745          clr.b     (A0)
00004430  2003      5746          move.l    D3,D0
                    5747   ltoa_4:
00004432  4CDF 003C 5748          movem.l   (A7)+,D2/D3/D4/D5
00004436  4E5E      5749          unlk      A6
00004438  4E75      5750          rts
                    5751   _ultoa:
0000443A  4E56 0000 5752          link      A6,#0
0000443E  48E7 3800 5753          movem.l   D2/D3/D4,-(A7)
00004442  262E 0010 5754          move.l    16(A6),D3
00004446  282E 000C 5755          move.l    12(A6),D4
0000444A  2404      5756          move.l    D4,D2
0000444C  0C83 0000 5757          cmp.l     #2,D3
00004450  0002      
00004452  6D08      5758          blt.s     ultoa_3
00004454  0C83 0000 5759          cmp.l     #36,D3
00004458  0024      
0000445A  6F04      5760          ble.s     ultoa_1
                    5761   ultoa_3:
0000445C  2004      5762          move.l    D4,D0
0000445E  6018      5763          bra.s     ultoa_4
                    5764   ultoa_1:
00004460  2F03      5765          move.l    D3,-(A7)
00004462  2F2E 0008 5766          move.l    8(A6),-(A7)
00004466  2F02      5767          move.l    D2,-(A7)
00004468  6100 FEDA 5768          bsr       @itoa_convert
0000446C  DEFC 000C 5769          add.w     #12,A7
00004470  2400      5770          move.l    D0,D2
00004472  2042      5771          move.l    D2,A0
00004474  4210      5772          clr.b     (A0)
00004476  2004      5773          move.l    D4,D0
                    5774   ultoa_4:
00004478  4CDF 001C 5775          movem.l   (A7)+,D2/D3/D4
0000447C  4E5E      5776          unlk      A6
0000447E  4E75      5777          rts
                    5778   _itoa:
00004480  4E56 0000 5779          link      A6,#0
00004484  2F2E 0010 5780          move.l    16(A6),-(A7)
00004488  2F2E 000C 5781          move.l    12(A6),-(A7)
0000448C  2F2E 0008 5782          move.l    8(A6),-(A7)
00004490  6100 FF24 5783          bsr       _ltoa
00004494  DEFC 000C 5784          add.w     #12,A7
00004498  4E5E      5785          unlk      A6
0000449A  4E75      5786          rts
                    5787   _strlen:
0000449C  206F 0004 5788          move.l    (4,A7),A0
000044A0  2248      5789          move.l    A0,A1
                    5790   strlen_1:
000044A2  4A19      5791          tst.b     (A1)+
000044A4  66FC      5792          bne       strlen_1
000044A6  2009      5793          move.l    A1,D0
000044A8  9088      5794          sub.l     A0,D0
000044AA  5380      5795          subq.l    #1,D0
000044AC  4E75      5796          rts
                    5797   _putch:
000044AE  4E56 0000 5798          link      A6,#0
000044B2  48E7 2000 5799          movem.l   D2,-(A7)
000044B6  242E 0008 5800          move.l    8(A6),D2
000044BA  0C82 0000 5801          cmp.l     #10,D2
000044BE  000A      
000044C0  660A      5802          bne.s     putch_1
000044C2  4878 000D 5803          pea       13
000044C6  6100 C448 5804          bsr       __putch
000044CA  584F      5805          addq.w    #4,A7
                    5806   putch_1:
000044CC  2F02      5807          move.l    D2,-(A7)
000044CE  6100 C440 5808          bsr       __putch
000044D2  584F      5809          addq.w    #4,A7
000044D4  2002      5810          move.l    D2,D0
000044D6  4CDF 0004 5811          movem.l   (A7)+,D2
000044DA  4E5E      5812          unlk      A6
000044DC  4E75      5813          rts
                    5814   _strcpy:
000044DE  206F 0004 5815          move.l    (4,A7),A0
000044E2  226F 0008 5816          move.l    (8,A7),A1
000044E6  2008      5817          move.l    A0,D0
                    5818   strcpy_1:
000044E8  10D9      5819          move.b    (A1)+,(A0)+
000044EA  66FC      5820          bne       strcpy_1
000044EC  4E75      5821          rts
                    5822   ULDIV:
000044EE  4E56 0000 5823          link    A6,#0
000044F2  48E7 C000 5824          movem.l D0/D1,-(A7)
000044F6  222E 0008 5825          move.l  8(A6),D1
000044FA  202E 000C 5826          move.l  12(A6),D0
000044FE  6036      5827          bra.s   ldiv_3
                    5828   LDIV:
00004500  4E56 0000 5829          link    A6,#0
00004504  48E7 C000 5830          movem.l D0/D1,-(A7)
00004508  222E 0008 5831          move.l  8(A6),D1
0000450C  202E 000C 5832          move.l  12(A6),D0
00004510  4A80      5833          tst.l   D0
00004512  6A0E      5834          bpl.s   ldiv_1
00004514  4480      5835          neg.l   D0
00004516  4A81      5836          tst.l   D1
00004518  6A14      5837          bpl.s   ldiv_2
0000451A  4481      5838          neg.l   D1
0000451C  612A      5839          bsr.s   dodiv
0000451E  4481      5840          neg.l   D1
00004520  6016      5841          bra.s   ldiv_4
                    5842   ldiv_1:
00004522  4A81      5843          tst.l   D1
00004524  6A10      5844          bpl.s   ldiv_3
00004526  4481      5845          neg.l   D1
00004528  611E      5846          bsr.s   dodiv
0000452A  4480      5847          neg.l   D0
0000452C  600A      5848          bra.s   ldiv_4
                    5849   ldiv_2:
0000452E  6118      5850          bsr.s   dodiv
00004530  4480      5851          neg.l   D0
00004532  4481      5852          neg.l   D1
00004534  6002      5853          bra.s   ldiv_4
                    5854   ldiv_3:
00004536  6110      5855          bsr.s   dodiv
                    5856   ldiv_4:
00004538  2D40 0008 5857          move.l  D0,8(A6)
0000453C  2D41 000C 5858          move.l  D1,12(A6)
00004540  4CDF 0003 5859          movem.l (A7)+,D0/D1
00004544  4E5E      5860          unlk    A6
00004546  4E75      5861          rts
                    5862   dodiv:
00004548  0C81 0000 5863          cmpi.l  #$FFFF,D1
0000454C  FFFF      
0000454E  6236      5864          bhi.s   dodiv_2
00004550  0C80 0000 5865          cmpi.l  #$FFFF,D0
00004554  FFFF      
00004556  6210      5866          bhi.s   dodiv_1
00004558  80C1      5867          divu    D1,D0
0000455A  2200      5868          move.l  D0,D1
0000455C  4241      5869          clr.w   D1
0000455E  4841      5870          swap    D1
00004560  0280 0000 5871          andi.l  #$FFFF,D0
00004564  FFFF      
00004566  4E75      5872          rts
                    5873   dodiv_1:
00004568  48A7 A000 5874          movem.w D0/D2,-(A7)
0000456C  4240      5875          clr.w   D0
0000456E  4840      5876          swap    D0
00004570  80C1      5877          divu    D1,D0
00004572  3400      5878          move.w  D0,D2
00004574  301F      5879          move.w  (A7)+,D0
00004576  80C1      5880          divu    D1,D0
00004578  4840      5881          swap    D0
0000457A  4281      5882          clr.l   D1
0000457C  3200      5883          move.w  D0,D1
0000457E  3002      5884          move.w  D2,D0
00004580  4840      5885          swap    D0
00004582  341F      5886          move.w  (A7)+,D2
00004584  4E75      5887          rts
                    5888   dodiv_2:
00004586  48E7 3800 5889          movem.l D2/D3/D4,-(A7)
0000458A  2401      5890          move.l  D1,D2
0000458C  4242      5891          clr.w   D2
0000458E  4842      5892          swap    D2
00004590  5282      5893          addq.l  #1,D2
00004592  2600      5894          move.l  D0,D3
00004594  2801      5895          move.l  D1,D4
00004596  2202      5896          move.l  D2,D1
00004598  61CE      5897          bsr.s   dodiv_1
0000459A  2204      5898          move.l  D4,D1
0000459C  82C2      5899          divu    D2,D1
0000459E  80C1      5900          divu    D1,D0
000045A0  0280 0000 5901          andi.l  #$FFFF,D0
000045A4  FFFF      
                    5902   dodiv_3:
000045A6  2204      5903          move.l  D4,D1
000045A8  2404      5904          move.l  D4,D2
000045AA  4842      5905          swap    D2
000045AC  C2C0      5906          mulu    D0,D1
000045AE  C4C0      5907          mulu    D0,D2
000045B0  4842      5908          swap    D2
000045B2  D282      5909          add.l   D2,D1
000045B4  9283      5910          sub.l   D3,D1
000045B6  620A      5911          bhi.s   dodiv_4
000045B8  4481      5912          neg.l   D1
000045BA  B881      5913          cmp.l   D1,D4
000045BC  6208      5914          bhi.s   dodiv_5
000045BE  5280      5915          addq.l  #1,D0
000045C0  60E4      5916          bra.s   dodiv_3
                    5917   dodiv_4:
000045C2  5380      5918          subq.l  #1,D0
000045C4  60E0      5919          bra.s   dodiv_3
                    5920   dodiv_5:
000045C6  4CDF 001C 5921          movem.l (A7)+,D2/D3/D4
000045CA  4E75      5922          rts
                    5923          section   const
                    5924   
                    5925   @m68kde~1_1:
000045CC  0D0A 556E 5926          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000045D0  6B6E 6F77 
000045D4  6E20 436F 
000045D8  6D        
000045D9  6D61 6E64 5927          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
000045DD  2E2E 2E2E 
000045E1  2E0D 0A00 
                    5928   @m68kde~1_2:
000045E6  0D0A 5072 5929          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000045EA  6F67 7261 
000045EE  6D20 456E 
000045F2  64        
000045F3  6564 2028 5930          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000045F7  5452 4150 
000045FB  2023 3135 
000045FF  292E      
00004601  2E2E 2E00 5931          dc.b      46,46,46,0
                    5932   @m68kde~1_3:
00004606  0D0A 2D2D 5933          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000460A  2D2D 2D2D 
0000460E  2D2D 2D2D 
00004612  2D2D 2D   
00004615  2D2D 2D2D 5934          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004619  2D2D 2D2D 
0000461D  2D2D 2D2D 
00004621  2D2D 2D   
00004624  2D2D 2D2D 5935          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004628  2D2D 2D2D 
0000462C  2D2D 2D2D 
00004630  2D2D 2D   
00004633  2D2D 2D2D 5936          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004637  2D2D 2D2D 
0000463B  2D2D 2D2D 
0000463F  2D2D 2D   
00004642  2D2D 2D2D 5937          dc.b      45,45,45,45,45,45,0
00004646  2D2D 00   
                    5938   @m68kde~1_4:
0000464A  0D0A 2020 5939          dc.b      13,10,32,32,70,105,110,97,108,32,80,114,111
0000464E  4669 6E61 
00004652  6C20 5072 
00004656  6F        
00004657  6A65 6374 5940          dc.b      106,101,99,116,0
0000465B  00        
                    5941   @m68kde~1_5:
0000465C  0D0A 2020 5942          dc.b      13,10,32,32,84,32,32,32,32,45,32,82,117,110
00004660  5420 2020 
00004664  202D 2052 
00004668  756E      
0000466A  2043 6F73 5943          dc.b      32,67,111,115,109,105,99,32,73,109,112,97,108
0000466E  6D69 6320 
00004672  496D 7061 
00004676  6C        
00004677  6120 4761 5944          dc.b      97,32,71,97,109,101,0
0000467B  6D65 00   
                    5945   @m68kde~1_6:
0000467E  0D0A 2020 5946          dc.b      13,10,32,32,71,32,32,32,32,45,32,82,117,110
00004682  4720 2020 
00004686  202D 2052 
0000468A  756E      
0000468C  2047 7261 5947          dc.b      32,71,114,97,112,104,105,99,115,32,84,101,115
00004690  7068 6963 
00004694  7320 5465 
00004698  73        
00004699  7400      5948          dc.b      116,0
                    5949   @m68kde~1_7:
0000469C  0D0A 2300 5950          dc.b      13,10,35,0
                    5951   @m68kde~1_8:
000046A0  0A52 756E 5952          dc.b      10,82,117,110,110,105,110,103,32,67,111,115
000046A4  6E69 6E67 
000046A8  2043 6F73 
000046AC  6D69 6320 5953          dc.b      109,105,99,32,73,109,112,97,108,97,115,32,71
000046B0  496D 7061 
000046B4  6C61 7320 
000046B8  47        
000046B9  616D 650A 5954          dc.b      97,109,101,10,0
000046BD  00        
                    5955   @m68kde~1_9:
000046BE  0A52 756E 5956          dc.b      10,82,117,110,110,105,110,103,32,71,114,97,112
000046C2  6E69 6E67 
000046C6  2047 7261 
000046CA  70        
000046CB  6869 6373 5957          dc.b      104,105,99,115,32,84,101,115,116,10,0
000046CF  2054 6573 
000046D3  740A 00   
                    5958   @m68kde~1_10:
000046D6  0D0A 0D0A 5959          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000046DA  5072 6F67 
000046DE  7261 6D20 
000046E2  41        
000046E3  424F 5254 5960          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000046E7  2021 2121 
000046EB  2121 210D 
000046EF  0A00      
                    5961   @m68kde~1_11:
000046F2  2573 0D0A 5962          dc.b      37,115,13,10,0
000046F6  00        
                    5963   @m68kde~1_12:
000046F8  0D0A 0D0A 5964          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000046FC  5072 6F67 
00004700  7261 6D20 
00004704  41        
00004705  424F 5254 5965          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004709  2021 2121 
0000470D  2121 00   
                    5966   @m68kde~1_13:
00004710  0D0A 556E 5967          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004714  6861 6E64 
00004718  6C65 6420 
0000471C  49        
0000471D  6E74 6572 5968          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004721  7275 7074 
00004725  3A20 4952 
00004729  5125 6420 5969          dc.b      81,37,100,32,33,33,33,33,33,0
0000472D  2121 2121 
00004731  2100      
                    5970   @m68kde~1_14:
00004734  4144 4452 5971          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004738  4553 5320 
0000473C  4552 524F 
00004740  523A 20   
00004743  3136 206F 5972          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004747  7220 3332 
0000474B  2042 6974 
0000474F  2054      
00004751  7261 6E73 5973          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004755  6665 7220 
00004759  746F 2F66 
0000475D  726F 6D20 5974          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004761  616E 204F 
00004765  4444 2041 
00004769  64        
0000476A  6472 6573 5975          dc.b      100,114,101,115,115,46,46,46,46,0
0000476E  732E 2E2E 
00004772  2E00      
                    5976   @m68kde~1_15:
00004774  556E 6861 5977          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004778  6E64 6C65 
0000477C  6420 5472 
00004780  6170 2021 5978          dc.b      97,112,32,33,33,33,33,33,0
00004784  2121 2121 
00004788  00        
                    5979   @m68kde~1_16:
0000478A  4255 5320 5980          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000478E  4572 726F 
00004792  7221 00   
                    5981   @m68kde~1_17:
00004796  4144 4452 5982          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000479A  4553 5320 
0000479E  4572 726F 
000047A2  7221      
000047A4  00        5983          dc.b      0
                    5984   @m68kde~1_18:
000047A6  494C 4C45 5985          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000047AA  4741 4C20 
000047AE  494E 5354 
000047B2  5255 43   
000047B5  5449 4F4E 5986          dc.b      84,73,79,78,0
000047B9  00        
                    5987   @m68kde~1_19:
000047BA  4449 5649 5988          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000047BE  4445 2042 
000047C2  5920 5A45 
000047C6  524F 00   
                    5989   @m68kde~1_20:
000047CA  2743 484B 5990          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000047CE  2720 494E 
000047D2  5354 5255 
000047D6  4354 49   
000047D9  4F4E 00   5991          dc.b      79,78,0
                    5992   @m68kde~1_21:
000047DC  5452 4150 5993          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000047E0  5620 494E 
000047E4  5354 5255 
000047E8  4354 49   
000047EB  4F4E 00   5994          dc.b      79,78,0
                    5995   @m68kde~1_22:
000047EE  5052 4956 5996          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000047F2  494C 4547 
000047F6  4520 5649 
000047FA  4F4C 41   
000047FD  5449 4F4E 5997          dc.b      84,73,79,78,0
00004801  00        
                    5998   @m68kde~1_23:
00004802  554E 494E 5999          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004806  4954 4941 
0000480A  4C49 5345 
0000480E  4420 49   
00004811  5251 00   6000          dc.b      82,81,0
                    6001   @m68kde~1_24:
00004814  5350 5552 6002          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004818  494F 5553 
0000481C  2049 5251 
00004820  00        
                    6003   @m68kde~1_25:
00004822  4445 312D 6004          dc.b      68,69,49,45,54,56,107,32,49,53,47,49,49,47,50
00004826  3638 6B20 
0000482A  3135 2F31 
0000482E  312F 32   
00004831  3032 3420 6005          dc.b      48,50,52,32,49,52,58,52,52,0
00004835  3134 3A34 
00004839  3400      
                    6006   @m68kde~1_26:
0000483C  436F 7079 6007          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00004840  7269 6768 
00004844  7420 2843 
00004848  2920 504A 6008          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
0000484C  2044 6176 
00004850  6965 7320 
00004854  3230      
00004856  3136 00   6009          dc.b      49,54,0
                    6010   @m68kde~1_27:
0000485A  5961 6972 6011          dc.b      89,97,105,114,32,76,105,110,110,0
0000485E  204C 696E 
00004862  6E00      
                    6012   @m68kde~1_28:
00004864  0D0A 2573 6013          dc.b      13,10,37,115,0
00004868  00        
                    6014   @m68kde~1_29:
0000486A  0D0A 2573 6015          dc.b      13,10,37,115,0
0000486E  00        
                    6016   @m68kde~1_30:
00004870  0D0A 2573 6017          dc.b      13,10,37,115,0
00004874  00        
                    6018   @graphi~1_1:
00004876  4845 4C4C 6019          dc.b      72,69,76,76,79,32,87,79,82,76,68,0
0000487A  4F20 574F 
0000487E  524C 4400 
                    6020   @cosmic~1_1:
00004882  504C 4159 6021          dc.b      80,76,65,89,69,82,32,49,0
00004886  4552 2031 
0000488A  00        
                    6022   @cosmic~1_2:
0000488C  202A 2A2A 6023          dc.b      32,42,42,42,42,42,42,42,42,42,42,42,42,42,42
00004890  2A2A 2A2A 
00004894  2A2A 2A2A 
00004898  2A2A 2A   
0000489B  2A20 00   6024          dc.b      42,32,0
                    6025   @cosmic~1_3:
0000489E  2A2A 2A20 6026          dc.b      42,42,42,32,32,32,32,32,32,32,32,32,32,32,42
000048A2  2020 2020 
000048A6  2020 2020 
000048AA  2020 2A   
000048AD  2A2A 00   6027          dc.b      42,42,0
                    6028   @cosmic~1_4:
000048B0  2A2A 2020 6029          dc.b      42,42,32,32,71,65,77,69,32,79,86,69,82,32,32
000048B4  4741 4D45 
000048B8  204F 5645 
000048BC  5220 20   
000048BF  2A2A 00   6030          dc.b      42,42,0
                    6031   @cosmic~1_5:
000048C2  2A2A 2A20 6032          dc.b      42,42,42,32,32,32,32,32,32,32,32,32,32,32,42
000048C6  2020 2020 
000048CA  2020 2020 
000048CE  2020 2A   
000048D1  2A2A 00   6033          dc.b      42,42,0
                    6034   @cosmic~1_6:
000048D4  202A 2A2A 6035          dc.b      32,42,42,42,42,42,42,42,42,42,42,42,42,42,42
000048D8  2A2A 2A2A 
000048DC  2A2A 2A2A 
000048E0  2A2A 2A   
000048E3  2A20 00   6036          dc.b      42,32,0
                    6037          section   data
000048E6            6038                   align
          0000 48E6 6039   DataStart       equ       *
                    6040   
                    6041   *********************************************************************************************************
                    6042   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    6043   * to ram as part of the CStart routine in this file
                    6044   *********************************************************************************************************
                    6045   
                    6046   @itoa_1:
000048E6  2D32 3134 6047          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000048EA  3734 3833 
000048EE  3634 3800 
                    6048          section   bss
000048F2            6049                   align
          0000 48F2 6050   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    6051   
                    6052   *********************************************************************************************************
                    6053   * Section for Uninitialised Data held in ROM as constants
                    6054   *********************************************************************************************************
                    6055   
08030000            6056                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 6057   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    6058   
                    6059   
08030000            6060   bss             org       bss
                    6061   
                    6062   *********************************************************************************************************
                    6063   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    6064   * install the exception handler using the C function InstallExceptionHandler()
                    6065   *********************************************************************************************************
                    6066   
                    6067   
                    6068   
08030000            6069   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            6070   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            6071   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            6072   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            6073   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            6074   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            6075   VCheck           ds.l    1      ditto
0803001C            6076   VTrapV           ds.l    1      ditto
08030020            6077   VPrivilege       ds.l    1      ditto
08030024            6078   VTrace           ds.l    1
08030028            6079   VLine1010emul    ds.l    1
0803002C            6080   VLine1111emul    ds.l    1
08030030            6081   VUnassigned1     ds.l    1
08030034            6082   VUnassigned2     ds.l    1
08030038            6083   VUnassigned3     ds.l    1
0803003C            6084   VUninit_IRQ      ds.l    1
08030040            6085   VUnassigned4     ds.l    1
08030044            6086   VUnassigned5     ds.l    1
08030048            6087   VUnassigned6     ds.l    1
0803004C            6088   VUnassigned7     ds.l    1
08030050            6089   VUnassigned8     ds.l    1
08030054            6090   VUnassigned9     ds.l    1
08030058            6091   VUnassigned10    ds.l    1
0803005C            6092   VUnassigned11    ds.l    1
08030060            6093   VSpuriousIRQ     ds.l    1
                    6094   
                    6095   * Interrupt handlers Vector 25-31
08030064            6096   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            6097   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            6098   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            6099   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            6100   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            6101   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            6102   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6103   
                    6104   * Trap Handler vectors 32-47
08030080            6105   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            6106   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            6107   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            6108   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            6109   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            6110   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            6111   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            6112   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            6113   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            6114   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            6115   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            6116   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            6117   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            6118   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            6119   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            6120   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6121   
                    6122   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    6123   
                    6124   ***********************************************************************************************************
                    6125   * Other Variables
                    6126   ***********************************************************************************************************
                    6127   *__DebugA5       ds.l    1
                    6128   *__UserA5        ds.l    1
                    6129   
                    6130   ***********************************************************************************************************
080300C0            6131   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            6132   __allocp:       ds.l    0       ; start of allocation units
080300C4            6133   __heap:         ds.l    0       ; pointers for malloc functions
                    6134   
                    6135   *__himem:       ds.l    himem            ; highest memory location + 1
                    6136   *__stklen:      ds.l    stklen           ; default stack size
                    6137   
                    6138   *********************************************************************************************************
                    6139   * Section for Heap
                    6140   *********************************************************************************************************
                    6141   
                    6142   _i:
080300C4            6143          ds.b      4
                    6144   _x:
080300C8            6145          ds.b      4
                    6146   _y:
080300CC            6147          ds.b      4
                    6148   _z:
080300D0            6149          ds.b      4
                    6150   _PortA_Count:
080300D4            6151          ds.b      4
                    6152   _Trace:
080300D8            6153          ds.b      4
                    6154   _GoFlag:
080300DC            6155          ds.b      4
                    6156   _Echo:
080300E0            6157          ds.b      4
                    6158   _d0:
080300E4            6159          ds.b      4
                    6160   _d1:
080300E8            6161          ds.b      4
                    6162   _d2:
080300EC            6163          ds.b      4
                    6164   _d3:
080300F0            6165          ds.b      4
                    6166   _d4:
080300F4            6167          ds.b      4
                    6168   _d5:
080300F8            6169          ds.b      4
                    6170   _d6:
080300FC            6171          ds.b      4
                    6172   _d7:
08030100            6173          ds.b      4
                    6174   _a0:
08030104            6175          ds.b      4
                    6176   _a1:
08030108            6177          ds.b      4
                    6178   _a2:
0803010C            6179          ds.b      4
                    6180   _a3:
08030110            6181          ds.b      4
                    6182   _a4:
08030114            6183          ds.b      4
                    6184   _a5:
08030118            6185          ds.b      4
                    6186   _a6:
0803011C            6187          ds.b      4
                    6188   _PC:
08030120            6189          ds.b      4
                    6190   _SSP:
08030124            6191          ds.b      4
                    6192   _USP:
08030128            6193          ds.b      4
                    6194   _SR:
0803012C            6195          ds.b      2
                    6196   _BreakPointAddress:
0803012E            6197          ds.b      32
                    6198   _BreakPointInstruction:
0803014E            6199          ds.b      16
                    6200   _BreakPointSetOrCleared:
0803015E            6201          ds.b      32
                    6202   _InstructionSize:
0803017E            6203          ds.b      4
                    6204   _WatchPointAddress:
08030182            6205          ds.b      32
                    6206   _WatchPointSetOrCleared:
080301A2            6207          ds.b      32
                    6208   _clock_count_ms:
080301C2            6209          ds.b      4
                    6210   _TempString:
080301C6            6211          ds.b      100
                    6212   _graphics_font8x8:
0803022A            6213          ds.b      504
                    6214   _FIRE1:
08030422            6215          ds.b      4
                    6216   _LEFT1:
08030426            6217          ds.b      4
                    6218   _RIGHT1:
0803042A            6219          ds.b      4
                    6220   _this_mode:
0803042E            6221          ds.b      2
                    6222   _next_mode:
08030430            6223          ds.b      2
                    6224   _enemy_index:
08030432            6225          ds.b      1
                    6226   _num_enemies:
08030434            6227          ds.b      1
                    6228   _player_x:
08030436            6229          ds.b      1
                    6230   _bullet_x:
08030438            6231          ds.b      1
                    6232   _bullet_y:
0803043A            6233          ds.b      1
                    6234   _bomb_x:
0803043C            6235          ds.b      1
                    6236   _bomb_y:
0803043E            6237          ds.b      1
                    6238   _attract:
08030440            6239          ds.b      1
                    6240   _credits:
08030442            6241          ds.b      1
                    6242   _curplayer:
08030444            6243          ds.b      1
                    6244   _score:
08030446            6245          ds.b      2
                    6246   _lives:
08030448            6247          ds.b      1
                    6248   _enemies:
0803044A            6249          ds.b      84
                    6250   _font8x8:
0803049E            6251          ds.b      504
                    6252   _player_bitmap:
08030696            6253          ds.b      56
                    6254   _bomb_bitmap:
080306CE            6255          ds.b      7
                    6256   _bullet_bitmap:
080306D6            6257          ds.b      4
                    6258   _enemy1_bitmap:
080306DA            6259          ds.b      34
                    6260   _enemy2_bitmap:
080306FC            6261          ds.b      34
                    6262   _enemy3_bitmap:
0803071E            6263          ds.b      34
                    6264   _enemy4_bitmap:
08030740            6265          ds.b      34
                    6266   _enemy_bitmaps:
08030762            6267          ds.b      16
                    6268   _seed:
08030772            6269          ds.b      4
                    6270   _frame:
08030776            6271          ds.b      1
                    6272          section   heap
08030778            6273                   align
          0803 0778 6274   bssEnd          equ *                   end of storage space for unitialised variables
                    6275   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0778 6276   heap   equ       *
08030778            6277                    align
          0000 0000


SYMBOL TABLE

Symbol        Value        Symbol        Value        Symbol        Value
----------------------     ----------------------     ----------------------
@cosmic~1_1   00004882     @cosmic~1_2   0000488C     @cosmic~1_3   0000489E     
@cosmic~1_4   000048B0     @cosmic~1_5   000048C2     @cosmic~1_6   000048D4     
@graphi~1_1   00004876     @itoa_1       000048E6     @itoa_convert 00004344     
@itoa_..ert_1 00004386     @itoa_..ert_3 00004398     @itoa_..ert_4 000043A6     
@m68kde~1_1   000045CC     @m68kde~1_10  000046D6     @m68kde~1_11  000046F2     
@m68kde~1_12  000046F8     @m68kde~1_13  00004710     @m68kde~1_14  00004734     
@m68kde~1_15  00004774     @m68kde~1_16  0000478A     @m68kde~1_17  00004796     
@m68kde~1_18  000047A6     @m68kde~1_19  000047BA     @m68kde~1_2   000045E6     
@m68kde~1_20  000047CA     @m68kde~1_21  000047DC     @m68kde~1_22  000047EE     
@m68kde~1_23  00004802     @m68kde~1_24  00004814     @m68kde~1_25  00004822     
@m68kde~1_26  0000483C     @m68kde~1_27  0000485A     @m68kde~1_28  00004864     
@m68kde~1_29  0000486A     @m68kde~1_3   00004606     @m68kde~1_30  00004870     
@m68kde~1_4   0000464A     @m68kde~1_5   0000465C     @m68kde~1_6   0000467E     
@m68kde~1_7   0000469C     @m68kde~1_8   000046A0     @m68kde~1_9   000046BE     
@vspri.._copy 00003C30     @vspri..opy_1 00003C4C     @vspri..opy_2 00003C56     
@vspri..etval 00003C5A     @vspri..val_1 00003C8C     @vspri..val_5 00003CD8     
AddressError  0000000C     BusError      00000008     Check         00000018     
DataEnd       000048F2     DataLength    0000000C     DataStart     000048E6     
DividebyZero  00000014     E_1010        00000826     E_1111        00000838     
E_AErro       000007A8     E_BErro       00000796     E_Check       000007DE     
E_DZero       000007CC     E_IInst       000007BA     E_Priv        00000802     
E_Spuri       0000084A     E_Trace       00000814     E_Trapv       000007F0     
E_UnitI       0000084A     E_Unnas1      0000084A     E_Unnas10     0000084A     
E_Unnas11     0000084A     E_Unnas2      0000084A     E_Unnas3      0000084A     
E_Unnas4      0000084A     E_Unnas5      0000084A     E_Unnas6      0000084A     
E_Unnas7      0000084A     E_Unnas8      0000084A     E_Unnas9      0000084A     
FlushK..ard_1 0000097E     FlushK..ard_4 0000099E     FlushK..ard_5 000009A0     
FlushK..ard_6 000009A2     Get2He..its_1 00000A24     IllegalInstr  00000010     
InitialPC     00000004     InitialSP     00000000     LDIV          00004500     
LMUL          00003B7C     Level1IRQ     00000064     Level1RamISR  0000042E     
Level2IRQ     00000068     Level2RamISR  00000440     Level3IRQ     0000006C     
Level3RamISR  00000452     Level4IRQ     00000070     Level4RamISR  00000464     
Level5IRQ     00000074     Level5RamISR  00000476     Level6IRQ     00000078     
Level6RamISR  00000580     Level7IRQ     0000007C     Level7RamISR  00000592     
Line1010emul  00000028     Line1111emul  0000002C     Privilege     00000020     
RamVec..Table 08030000     SpuriousIRQ   00000060     StackP..erVal 08040000     
Timer_ISR_1   00000CDE     Trace         00000024     Trap0         00000080     
Trap0RamISR   000005A4     Trap1         00000084     Trap10        000000A8     
Trap10RamISR  00000658     Trap11        000000AC     Trap11RamISR  0000066A     
Trap12        000000B0     Trap12RamISR  0000067C     Trap13        000000B4     
Trap13RamISR  0000068E     Trap14        000000B8     Trap14RamISR  000006A0     
Trap15        000000BC     Trap15RamISR  00000790     Trap1RamISR   000005B6     
Trap2         00000088     Trap2RamISR   000005C8     Trap3         0000008C     
Trap3RamISR   000005DA     Trap4         00000090     Trap4RamISR   000005EC     
Trap5         00000094     Trap5RamISR   000005FE     Trap6         00000098     
Trap6RamISR   00000610     Trap7         0000009C     Trap7RamISR   00000622     
Trap8         000000A0     Trap8RamISR   00000634     Trap9         000000A4     
Trap9RamISR   00000646     TrapV         0000001C     ULDIV         000044EE     
ULMUL         00003B6A     Unassigned1   00000030     Unassigned10  00000058     
Unassigned11  0000005C     Unassigned2   00000034     Unassigned3   00000038     
Unassigned4   00000040     Unassigned5   00000044     Unassigned6   00000048     
Unassigned7   0000004C     Unassigned8   00000050     Unassigned9   00000054     
Uninit_IRQ    0000003C     VAddressError 0803000C     VBusError     08030008     
VCheck        08030018     VDividebyZero 08030014     VIllegalInstr 08030010     
VInitialPC    08030004     VInitialSP    08030000     VL1IRQ        08030064     
VL2IRQ        08030068     VL3IRQ        0803006C     VL4IRQ        08030070     
VL5IRQ        08030074     VL6IRQ        08030078     VL7IRQ        0803007C     
VLine1010emul 08030028     VLine1111emul 0803002C     VPrivilege    08030020     
VSpuriousIRQ  08030060     VTrace        08030024     VTrap0        08030080     
VTrap1        08030084     VTrap10       080300A8     VTrap11       080300AC     
VTrap12       080300B0     VTrap13       080300B4     VTrap14       080300B8     
VTrap15       080300BC     VTrap2        08030088     VTrap3        0803008C     
VTrap4        08030090     VTrap5        08030094     VTrap6        08030098     
VTrap7        0803009C     VTrap8        080300A0     VTrap9        080300A4     
VTrapV        0803001C     VUnassigned1  08030030     VUnassigned10 08030058     
VUnassigned11 0803005C     VUnassigned2  08030034     VUnassigned3  08030038     
VUnassigned4  08030040     VUnassigned5  08030044     VUnassigned6  08030048     
VUnassigned7  0803004C     VUnassigned8  08030050     VUnassigned9  08030054     
VUninit_IRQ   0803003C     _AddressError 00000C50     _Break..dress 0803012E     
_Break..ction 0803014E     _Break..eared 0803015E     _BusError     00000C42     
_CallD..nitor 00000AB6     _Check        00000C7A     _Dividebyzero 00000C6C     
_Echo         080300E0     _FIRE1        08030422     _Flush..board 0000097A     
_Get2H..igits 000009D8     _Get4H..igits 00000A2C     _Get6H..igits 00000A52     
_Get8H..igits 00000A78     _GoFlag       080300DC     _Help         00000ACC     
_IRQMessage   00000BAE     _Illeg..ction 00000C5E     _Init_RS232   000008E6     
_Insta..ndler 000008C6     _Instr..nSize 0803017E     _LEFT1        08030426     
_PC           08030120     _PortA_Count  080300D4     _Print..Abort 00000B82     
_PrivError    00000C96     _RIGHT1       0803042A     _SR           0803012C     
_SSP          08030124     _Spurious     00000CB2     _TempString   080301C6     
_Timer1_Init  00000CE0     _Timer_ISR    00000CC0     _Trace        080300D8     
_Trapv        00000C88     _USP          08030128     _Unhan..dIRQ1 00000BDA     
_Unhan..dIRQ2 00000BE6     _Unhan..dIRQ3 00000BF2     _Unhan..dIRQ4 00000BFE     
_Unhan..dIRQ5 00000C0A     _Unhan..dIRQ6 00000C16     _Unhan..dIRQ7 00000C28     
_Unhan..dTrap 00000C34     _UnitIRQ      00000CA4     _Unkno..mmand 00000AA0     
_Watch..dress 08030182     _Watch..eared 080301A2     __allocp      080300C4     
__getch       0000093C     __heap        080300C4     __putch       00000910     
__ungetbuf    080300C0     _a0           08030104     _a1           08030108     
_a2           0803010C     _a3           08030110     _a4           08030114     
_a5           08030118     _a6           0803011C     _add_score    00002012     
_attract      08030440     _attract_mode 00002AD2     _bcd_add      00001ED8     
_bomb_bitmap  080306CE     _bomb_x       0803043C     _bomb_y       0803043E     
_bulle..itmap 080306D6     _bullet_x     08030438     _bullet_y     0803043A     
_check..t_hit 00002708     _clear_sprite 00001BBE     _clock        00001BFE     
_clock..nt_ms 080301C2     _clrscr       00001C3E     _cosmi.._main 00003AE0     
_credits      08030442     _curplayer    08030444     _d0           080300E4     
_d1           080300E8     _d2           080300EC     _d3           080300F0     
_d4           080300F4     _d5           080300F8     _d6           080300FC     
_d7           08030100     _delay_ms     00001C06     _delete_enemy 000021DA     
_destr..layer 00002108     _draw_.._word 00001E6C     _draw_bunker  0000246A     
_draw_char    00001DB2     _draw_font    00001056     _draw_lives   00001F56     
_draw_..field 00002588     _draw_score   00001FC6     _draw_sprite  00001BA6     
_draw_string  00001E22     _draw_vline   00001CC8     _drop_bomb    00002862     
_enemies      0803044A     _enemy..itmap 080306DA     _enemy..itmap 080306FC     
_enemy..itmap 0803071E     _enemy..itmap 08030740     _enemy..tmaps 08030762     
_enemy_index  08030432     _erase_sprite 00001BB6     _find_..my_at 000026A0     
_fire_bullet  0000274A     _font8x8      0803049E     _frame        08030776     
_game_..r_msg 00002A24     _get_c.._rand 0000205E     _getch_1      0000093E     
_getch_3      00000950     _getch_4      00000974     _go           0000084C     
_graph.._char 00000F9C     _graph..tring 0000100C     _graph..vline 00000EB2     
_graph..nt8x8 0803022A     _graph..lrscr 00000E28     _graph.._main 00001B86     
_graph..pixel 00000E6E     _i            080300C4     _in_rect      00002612     
_init_enemies 00002140     _init_game    00002A0E     _initi..tmaps 00002AE4     
_initi.._font 000010E4     _itoa         00004480     _kbhit        000008F8     
_lives        08030448     _long_rand    00001BD8     _ltoa         000043B6     
_main         00000CF2     _memmove      00003C0A     _menu         00000B1A     
_move_bomb    000028C6     _move_bullet  0000278E     _move_player  00001BC6     
_next_mode    08030430     _num_enemies  08030434     _play_game    00002AA4     
_play_round   00002988     _playe..itmap 08030696     _player_x     08030436     
_printf       00003B38     _putch        000044AE     _putch_1      00000914     
_putch_3      00000926     _score        08030446     _seed         08030772     
_srand        00001BC8     _stop         0000084A     _strcpy       000044DE     
_strlen       0000449C     _this_mode    0803042E     _toupper      00003B0C     
_ultoa        0000443A     _updat..enemy 00002264     _vsprintf     00003CE2     
_x            080300C8     _xor_pixel    00001C84     _xor_p..derez 00002078     
_xor_sprite   00001BAE     _xtod         000009A6     _y            080300CC     
_z            080300D0     add_score_1   00002020     add_score_3   0000205A     
attrac..ode_1 00002ADA     bcd_add_1     00001EFA     bcd_add_3     00001F4C     
bcd_add_4     00001F0E     bcd_add_5     00001F3C     bcd_add_6     00001F3E     
bss           08030000     bssEnd        08030778     check_..hit_1 00002744     
clrscr_1      00001C44     clrscr_3      00001C7E     clrscr_4      00001C50     
clrscr_6      00001C7A     delay_ms_1    00001C14     delay_ms_3    00001C2C     
dodiv         00004548     dodiv_1       00004568     dodiv_2       00004586     
dodiv_3       000045A6     dodiv_4       000045C2     dodiv_5       000045C6     
domul         00003BB6     domul_1       00003BCA     domul_2       00003BD4     
domul_3       00003BD6     domul_4       00003BEA     draw_b..ord_1 00001E82     
draw_b..ord_3 00001ED0     draw_bunker_1 000024A0     draw_bunker_3 00002536     
draw_bunker_4 00002538     draw_bunker_6 00002580     draw_char_1   00001E06     
draw_char_3   00001E1A     draw_font_1   0000105A     draw_lives_1  00001F6E     
draw_lives_2  00001F70     draw_lives_3  00001F7C     draw_lives_5  00001FC0     
draw_lives_6  00001FAA     draw_lives_7  00001FAC     draw_p..eld_1 000025B4     
draw_p..eld_3 000025D6     draw_score_1  00001FD4     draw_score_2  00001FD6     
draw_string_1 00001E28     draw_string_2 00001E66     draw_string_3 00001E38     
draw_vline_1  00001D8C     draw_vline_2  00001DAA     draw_vline_3  00001D58     
draw_vline_5  00001D72     find_e.._at_1 000026AA     find_e.._at_3 000026FE     
find_e.._at_4 000026FA     find_e.._at_6 00002700     game_o..msg_1 00002A2E     
game_o..msg_3 00002A9E     graphi..har_1 00000FF0     graphi..har_3 00001004     
graphi..ing_1 00001012     graphi..ing_2 00001050     graphi..ing_3 00001022     
graphi..ine_1 00000F76     graphi..ine_2 00000F94     graphi..ine_3 00000F42     
graphi..ine_5 00000F5C     graphi..scr_1 00000E2E     graphi..scr_3 00000E68     
graphi..scr_4 00000E3A     graphi..scr_6 00000E64     heap          08030778     
in_rect_1     00002698     in_rect_2     0000269A     init_e..ies_1 00002152     
init_e..ies_3 000021AA     init_e..ies_4 000021A6     kbhit_1       0000090C     
kbhit_3       0000090E     ldiv_1        00004522     ldiv_2        0000452E     
ldiv_3        00004536     ldiv_4        00004538     lmul_1        00003B9A     
lmul_2        00003BA0     lmul_3        00003BA8     lmul_4        00003BAA     
ltoa_1        000043E2     ltoa_3        000043DC     ltoa_4        00004432     
ltoa_5        0000441C     ltoa_7        00004414     mainloop      00000426     
memmove_0     00003C1C     memmove_1     00003C24     memmove_2     00003C28     
menu_1        00000B28     menu_2        00000B80     menu_4        00000B64     
menu_6        00000B7C     move_bomb_1   00002912     move_bomb_3   00002956     
move_bomb_4   00002982     move_bomb_5   0000294E     move_bullet_1 00002830     
move_bullet_2 0000285C     move_bullet_3 000027DE     play_game_1   00002AB2     
play_game_3   00002ACC     play_game_4   00002ACA     play_round_1  000029A6     
play_round_3  00002A0C     play_round_4  000029E2     play_round_8  00002A00     
play_round_9  00002A04     putch_1       000044CC     start         00000400     
strcpy_1      000044E8     strlen_1      000044A2     toupper_1     00003B2E     
ultoa_1       00004460     ultoa_3       0000445C     ultoa_4       00004478     
update..emy_1 00002296     update..my_11 000023F0     update..emy_3 00002370     
update..emy_5 00002366     update..emy_7 000023B6     update..emy_9 000023B4     
vsprintf_1    00003CFA     vsprintf_102  00004222     vsprintf_104  00004240     
vsprintf_105  00004246     vsprintf_107  00004262     vsprintf_108  0000426A     
vsprintf_11   00003D92     vsprintf_110  00004284     vsprintf_112  000042D0     
vsprintf_113  000042D2     vsprintf_115  000042CE     vsprintf_116  000042AA     
vsprintf_119  000042B8     vsprintf_12   00003D9E     vsprintf_123  000042EA     
vsprintf_125  00004308     vsprintf_126  0000433A     vsprintf_13   00003DAA     
vsprintf_14   00003DB6     vsprintf_15   00003D88     vsprintf_16   00003DE2     
vsprintf_18   00003E18     vsprintf_2    00004322     vsprintf_20   00003E34     
vsprintf_22   00003FCC     vsprintf_23   00003FDA     vsprintf_24   00003EA6     
vsprintf_26   00003EE2     vsprintf_27   00003F1A     vsprintf_28   00003F52     
vsprintf_3    00004326     vsprintf_30   00003F8A     vsprintf_31   00003FAE     
vsprintf_33   00003E7E     vsprintf_34   00003E72     vsprintf_35   00003E98     
vsprintf_36   00003EC6     vsprintf_37   00003EDE     vsprintf_38   00003F00     
vsprintf_39   00003F16     vsprintf_4    00003D32     vsprintf_40   00003F38     
vsprintf_41   00003F4E     vsprintf_42   00003F70     vsprintf_43   00003F86     
vsprintf_44   00003FA6     vsprintf_45   00003FA8     vsprintf_46   00003FCA     
vsprintf_48   0000400E     vsprintf_50   0000400A     vsprintf_51   0000400C     
vsprintf_54   00004028     vsprintf_56   00004046     vsprintf_59   00004074     
vsprintf_6    00003D5C     vsprintf_60   000040B8     vsprintf_62   0000408C     
vsprintf_63   000040AA     vsprintf_64   000040B2     vsprintf_65   000040E8     
vsprintf_67   000040DE     vsprintf_68   000040E6     vsprintf_7    00003DC4     
vsprintf_73   0000411C     vsprintf_76   00004110     vsprintf_77   00004154     
vsprintf_79   0000414A     vsprintf_8    00003DC6     vsprintf_80   0000430A     
vsprintf_81   0000431E     vsprintf_82   000041E0     vsprintf_9    00003DC2     
vsprintf_93   000041B0     vsprintf_94   00004196     vsprintf_95   000041D4     
vsprintf_96   000041FA     vsprintf_98   0000420A     xor_pl..rez_1 0000209E     
xor_pl..rez_3 00002100     xor_pl..rez_4 000020A8     xor_pl..rez_6 000020FC     
xtod_1        000009BE     xtod_3        000009D2     xtod_4        000009CC     

Assembly errors: 0
